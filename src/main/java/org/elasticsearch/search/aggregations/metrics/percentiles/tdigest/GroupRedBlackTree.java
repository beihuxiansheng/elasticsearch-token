begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations.metrics.percentiles.tdigest
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|metrics
operator|.
name|percentiles
operator|.
name|tdigest
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|Longs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|ArrayUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|RamUsageEstimator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_comment
comment|/** Specialized {@link RedBlackTree} where each node stores aggregated data for its sub-trees. */
end_comment

begin_class
DECL|class|GroupRedBlackTree
specifier|public
class|class
name|GroupRedBlackTree
extends|extends
name|RedBlackTree
block|{
DECL|field|nextId
specifier|private
name|long
name|nextId
decl_stmt|;
DECL|field|centroids
specifier|private
name|double
index|[]
name|centroids
decl_stmt|;
DECL|field|counts
specifier|private
name|long
index|[]
name|counts
decl_stmt|;
DECL|field|aggregatedSizes
specifier|private
name|int
index|[]
name|aggregatedSizes
decl_stmt|;
DECL|field|aggregatedCounts
specifier|private
name|long
index|[]
name|aggregatedCounts
decl_stmt|;
DECL|field|ids
specifier|private
name|long
index|[]
name|ids
decl_stmt|;
comment|// used for comparisons
DECL|field|tmpCentroid
name|double
name|tmpCentroid
decl_stmt|;
DECL|field|tmpCount
name|long
name|tmpCount
decl_stmt|;
DECL|field|tmpId
name|long
name|tmpId
decl_stmt|;
DECL|method|GroupRedBlackTree
specifier|public
name|GroupRedBlackTree
parameter_list|(
name|int
name|capacity
parameter_list|)
block|{
name|super
argument_list|(
name|capacity
argument_list|)
expr_stmt|;
name|nextId
operator|=
literal|1
expr_stmt|;
name|centroids
operator|=
operator|new
name|double
index|[
literal|1
operator|+
name|capacity
index|]
expr_stmt|;
name|aggregatedSizes
operator|=
operator|new
name|int
index|[
literal|1
operator|+
name|capacity
index|]
expr_stmt|;
name|counts
operator|=
operator|new
name|long
index|[
literal|1
operator|+
name|capacity
index|]
expr_stmt|;
name|aggregatedCounts
operator|=
operator|new
name|long
index|[
literal|1
operator|+
name|capacity
index|]
expr_stmt|;
name|ids
operator|=
operator|new
name|long
index|[
literal|1
operator|+
name|capacity
index|]
expr_stmt|;
block|}
comment|// Internal node management
annotation|@
name|Override
DECL|method|compare
specifier|protected
name|int
name|compare
parameter_list|(
name|int
name|node
parameter_list|)
block|{
specifier|final
name|double
name|centroid
init|=
name|mean
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|int
name|cmp
init|=
name|Double
operator|.
name|compare
argument_list|(
name|tmpCentroid
argument_list|,
name|centroid
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|==
literal|0
condition|)
block|{
name|cmp
operator|=
name|Long
operator|.
name|compare
argument_list|(
name|tmpId
argument_list|,
name|ids
index|[
name|node
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|cmp
return|;
block|}
annotation|@
name|Override
DECL|method|copy
specifier|protected
name|void
name|copy
parameter_list|(
name|int
name|node
parameter_list|)
block|{
name|centroids
index|[
name|node
index|]
operator|=
name|tmpCentroid
expr_stmt|;
name|counts
index|[
name|node
index|]
operator|=
name|tmpCount
expr_stmt|;
name|ids
index|[
name|node
index|]
operator|=
name|tmpId
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|merge
specifier|protected
name|void
name|merge
parameter_list|(
name|int
name|node
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"compare should never return 0"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|swap
specifier|protected
name|void
name|swap
parameter_list|(
name|int
name|node1
parameter_list|,
name|int
name|node2
parameter_list|)
block|{
name|super
operator|.
name|swap
argument_list|(
name|node1
argument_list|,
name|node2
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|n
init|=
name|node1
init|;
name|n
operator|!=
name|NIL
condition|;
name|n
operator|=
name|parent
argument_list|(
name|n
argument_list|)
control|)
block|{
name|fixAggregates
argument_list|(
name|n
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|newNode
specifier|protected
name|int
name|newNode
parameter_list|()
block|{
specifier|final
name|int
name|newNode
init|=
name|super
operator|.
name|newNode
argument_list|()
decl_stmt|;
if|if
condition|(
name|newNode
operator|>=
name|centroids
operator|.
name|length
condition|)
block|{
specifier|final
name|int
name|minSize
init|=
name|ArrayUtil
operator|.
name|oversize
argument_list|(
name|newNode
operator|+
literal|1
argument_list|,
name|RamUsageEstimator
operator|.
name|NUM_BYTES_INT
argument_list|)
decl_stmt|;
name|centroids
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|centroids
argument_list|,
name|minSize
argument_list|)
expr_stmt|;
name|counts
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|counts
argument_list|,
name|minSize
argument_list|)
expr_stmt|;
name|aggregatedSizes
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|aggregatedSizes
argument_list|,
name|minSize
argument_list|)
expr_stmt|;
name|aggregatedCounts
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|aggregatedCounts
argument_list|,
name|minSize
argument_list|)
expr_stmt|;
name|ids
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|ids
argument_list|,
name|minSize
argument_list|)
expr_stmt|;
block|}
return|return
name|newNode
return|;
block|}
DECL|method|fixAggregates
specifier|private
name|void
name|fixAggregates
parameter_list|(
name|int
name|node
parameter_list|)
block|{
specifier|final
name|int
name|left
init|=
name|left
argument_list|(
name|node
argument_list|)
decl_stmt|,
name|right
init|=
name|right
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|aggregatedCounts
index|[
name|node
index|]
operator|=
name|counts
index|[
name|node
index|]
operator|+
name|aggregatedCounts
index|[
name|left
index|]
operator|+
name|aggregatedCounts
index|[
name|right
index|]
expr_stmt|;
name|aggregatedSizes
index|[
name|node
index|]
operator|=
literal|1
operator|+
name|aggregatedSizes
index|[
name|left
index|]
operator|+
name|aggregatedSizes
index|[
name|right
index|]
expr_stmt|;
block|}
DECL|method|fixCounts
specifier|private
name|void
name|fixCounts
parameter_list|(
name|int
name|node
parameter_list|)
block|{
specifier|final
name|int
name|left
init|=
name|left
argument_list|(
name|node
argument_list|)
decl_stmt|,
name|right
init|=
name|right
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|aggregatedCounts
index|[
name|node
index|]
operator|=
name|counts
index|[
name|node
index|]
operator|+
name|aggregatedCounts
index|[
name|left
index|]
operator|+
name|aggregatedCounts
index|[
name|right
index|]
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|rotateLeft
specifier|protected
name|void
name|rotateLeft
parameter_list|(
name|int
name|node
parameter_list|)
block|{
name|super
operator|.
name|rotateLeft
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|fixAggregates
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|fixAggregates
argument_list|(
name|parent
argument_list|(
name|node
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|rotateRight
specifier|protected
name|void
name|rotateRight
parameter_list|(
name|int
name|node
parameter_list|)
block|{
name|super
operator|.
name|rotateRight
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|fixAggregates
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|fixAggregates
argument_list|(
name|parent
argument_list|(
name|node
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|beforeRemoval
specifier|protected
name|void
name|beforeRemoval
parameter_list|(
name|int
name|node
parameter_list|)
block|{
specifier|final
name|long
name|count
init|=
name|count
argument_list|(
name|node
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|n
init|=
name|node
init|;
name|n
operator|!=
name|NIL
condition|;
name|n
operator|=
name|parent
argument_list|(
name|n
argument_list|)
control|)
block|{
name|aggregatedCounts
index|[
name|n
index|]
operator|-=
name|count
expr_stmt|;
name|aggregatedSizes
index|[
name|n
index|]
operator|--
expr_stmt|;
block|}
name|super
operator|.
name|beforeRemoval
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|afterInsertion
specifier|protected
name|void
name|afterInsertion
parameter_list|(
name|int
name|node
parameter_list|)
block|{
specifier|final
name|long
name|count
init|=
name|count
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|aggregatedCounts
index|[
name|node
index|]
operator|=
name|count
expr_stmt|;
name|aggregatedSizes
index|[
name|node
index|]
operator|=
literal|1
expr_stmt|;
for|for
control|(
name|int
name|n
init|=
name|node
init|,
name|p
init|=
name|parent
argument_list|(
name|node
argument_list|)
init|;
name|p
operator|!=
name|NIL
condition|;
name|n
operator|=
name|p
operator|,
name|p
operator|=
name|parent
argument_list|(
name|n
argument_list|)
control|)
block|{
name|aggregatedCounts
index|[
name|p
index|]
operator|+=
name|count
expr_stmt|;
name|aggregatedSizes
index|[
name|p
index|]
operator|+=
literal|1
expr_stmt|;
block|}
name|super
operator|.
name|afterInsertion
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
comment|// Public API
DECL|method|mean
specifier|public
name|double
name|mean
parameter_list|(
name|int
name|node
parameter_list|)
block|{
return|return
name|centroids
index|[
name|node
index|]
return|;
block|}
DECL|method|count
specifier|public
name|long
name|count
parameter_list|(
name|int
name|node
parameter_list|)
block|{
return|return
name|counts
index|[
name|node
index|]
return|;
block|}
DECL|method|id
specifier|public
name|long
name|id
parameter_list|(
name|int
name|node
parameter_list|)
block|{
return|return
name|ids
index|[
name|node
index|]
return|;
block|}
DECL|method|addGroup
specifier|public
name|void
name|addGroup
parameter_list|(
name|double
name|centroid
parameter_list|,
name|long
name|count
parameter_list|,
name|long
name|id
parameter_list|)
block|{
name|tmpCentroid
operator|=
name|centroid
expr_stmt|;
name|tmpCount
operator|=
name|count
expr_stmt|;
name|tmpId
operator|=
name|id
expr_stmt|;
if|if
condition|(
name|id
operator|>=
name|nextId
condition|)
block|{
name|nextId
operator|=
name|id
operator|+
literal|1
expr_stmt|;
block|}
name|addNode
argument_list|()
expr_stmt|;
block|}
DECL|method|addGroup
specifier|public
name|void
name|addGroup
parameter_list|(
name|double
name|centroid
parameter_list|,
name|long
name|count
parameter_list|)
block|{
name|addGroup
argument_list|(
name|centroid
argument_list|,
name|count
argument_list|,
name|nextId
operator|++
argument_list|)
expr_stmt|;
block|}
DECL|method|removeGroup
specifier|public
name|boolean
name|removeGroup
parameter_list|(
name|double
name|centroid
parameter_list|,
name|int
name|id
parameter_list|)
block|{
name|tmpCentroid
operator|=
name|centroid
expr_stmt|;
name|tmpId
operator|=
name|id
expr_stmt|;
specifier|final
name|int
name|nodeToRemove
init|=
name|getNode
argument_list|()
decl_stmt|;
if|if
condition|(
name|nodeToRemove
operator|!=
name|NIL
condition|)
block|{
name|removeNode
argument_list|(
name|nodeToRemove
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
DECL|method|updateGroup
specifier|public
name|void
name|updateGroup
parameter_list|(
name|int
name|node
parameter_list|,
name|double
name|centroid
parameter_list|,
name|long
name|count
parameter_list|)
block|{
name|tmpCentroid
operator|=
name|centroid
expr_stmt|;
name|tmpId
operator|=
name|id
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|tmpCount
operator|=
name|count
expr_stmt|;
specifier|final
name|int
name|prev
init|=
name|prevNode
argument_list|(
name|node
argument_list|)
decl_stmt|;
specifier|final
name|int
name|next
init|=
name|nextNode
argument_list|(
name|node
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|prev
operator|==
name|NIL
operator|||
name|compare
argument_list|(
name|prev
argument_list|)
operator|>
literal|0
operator|)
operator|&&
operator|(
name|next
operator|==
name|NIL
operator|||
name|compare
argument_list|(
name|next
argument_list|)
operator|<
literal|0
operator|)
condition|)
block|{
comment|// we can update in place
name|copy
argument_list|(
name|node
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|n
init|=
name|node
init|;
name|n
operator|!=
name|NIL
condition|;
name|n
operator|=
name|parent
argument_list|(
name|n
argument_list|)
control|)
block|{
name|fixCounts
argument_list|(
name|n
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|removeNode
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|addNode
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** Return the last node whose centroid is strictly smaller than<code>centroid</code>. */
DECL|method|floorNode
specifier|public
name|int
name|floorNode
parameter_list|(
name|double
name|centroid
parameter_list|)
block|{
name|int
name|floor
init|=
name|NIL
decl_stmt|;
for|for
control|(
name|int
name|node
init|=
name|root
argument_list|()
init|;
name|node
operator|!=
name|NIL
condition|;
control|)
block|{
specifier|final
name|int
name|cmp
init|=
name|Double
operator|.
name|compare
argument_list|(
name|centroid
argument_list|,
name|mean
argument_list|(
name|node
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|<=
literal|0
condition|)
block|{
name|node
operator|=
name|left
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|floor
operator|=
name|node
expr_stmt|;
name|node
operator|=
name|right
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|floor
return|;
block|}
comment|/** Return the first node that is greater than or equal to<code>centroid</code>. */
DECL|method|ceilingNode
specifier|public
name|int
name|ceilingNode
parameter_list|(
name|double
name|centroid
parameter_list|)
block|{
name|int
name|ceiling
init|=
name|NIL
decl_stmt|;
for|for
control|(
name|int
name|node
init|=
name|root
argument_list|()
init|;
name|node
operator|!=
name|NIL
condition|;
control|)
block|{
specifier|final
name|int
name|cmp
init|=
name|Double
operator|.
name|compare
argument_list|(
name|mean
argument_list|(
name|node
argument_list|)
argument_list|,
name|centroid
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|<
literal|0
condition|)
block|{
name|node
operator|=
name|right
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ceiling
operator|=
name|node
expr_stmt|;
name|node
operator|=
name|left
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ceiling
return|;
block|}
comment|/** Compute the number of elements and sum of counts for every entry that is strictly before<code>node</code>. */
DECL|method|headSum
specifier|public
name|void
name|headSum
parameter_list|(
name|int
name|node
parameter_list|,
name|SizeAndSum
name|sizeAndSum
parameter_list|)
block|{
if|if
condition|(
name|node
operator|==
name|NIL
condition|)
block|{
name|sizeAndSum
operator|.
name|size
operator|=
literal|0
expr_stmt|;
name|sizeAndSum
operator|.
name|sum
operator|=
literal|0
expr_stmt|;
return|return;
block|}
specifier|final
name|int
name|left
init|=
name|left
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|sizeAndSum
operator|.
name|size
operator|=
name|aggregatedSizes
index|[
name|left
index|]
expr_stmt|;
name|sizeAndSum
operator|.
name|sum
operator|=
name|aggregatedCounts
index|[
name|left
index|]
expr_stmt|;
for|for
control|(
name|int
name|n
init|=
name|node
init|,
name|p
init|=
name|parent
argument_list|(
name|node
argument_list|)
init|;
name|p
operator|!=
name|NIL
condition|;
name|n
operator|=
name|p
operator|,
name|p
operator|=
name|parent
argument_list|(
name|n
argument_list|)
control|)
block|{
if|if
condition|(
name|n
operator|==
name|right
argument_list|(
name|p
argument_list|)
condition|)
block|{
specifier|final
name|int
name|leftP
init|=
name|left
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|sizeAndSum
operator|.
name|size
operator|+=
literal|1
operator|+
name|aggregatedSizes
index|[
name|leftP
index|]
expr_stmt|;
name|sizeAndSum
operator|.
name|sum
operator|+=
name|counts
index|[
name|p
index|]
operator|+
name|aggregatedCounts
index|[
name|leftP
index|]
expr_stmt|;
block|}
block|}
block|}
comment|/** Wrapper around a size and a sum. */
DECL|class|SizeAndSum
specifier|public
specifier|static
class|class
name|SizeAndSum
block|{
DECL|field|size
specifier|public
name|int
name|size
decl_stmt|;
DECL|field|sum
specifier|public
name|long
name|sum
decl_stmt|;
block|}
block|}
end_class

end_unit

