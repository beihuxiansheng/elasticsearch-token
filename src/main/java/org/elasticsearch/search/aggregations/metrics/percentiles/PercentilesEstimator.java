begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations.metrics.percentiles
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|metrics
operator|.
name|percentiles
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Streamable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lease
operator|.
name|Releasable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|ArrayUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|metrics
operator|.
name|percentiles
operator|.
name|tdigest
operator|.
name|TDigest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|support
operator|.
name|AggregationContext
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_comment
comment|/** * */
end_comment

begin_class
DECL|class|PercentilesEstimator
specifier|public
specifier|abstract
class|class
name|PercentilesEstimator
implements|implements
name|Releasable
block|{
DECL|field|percents
specifier|protected
name|double
index|[]
name|percents
decl_stmt|;
DECL|method|PercentilesEstimator
specifier|public
name|PercentilesEstimator
parameter_list|(
name|double
index|[]
name|percents
parameter_list|)
block|{
name|this
operator|.
name|percents
operator|=
name|percents
expr_stmt|;
block|}
comment|/**      * @return list of percentile intervals      */
DECL|method|percents
specifier|public
name|double
index|[]
name|percents
parameter_list|()
block|{
return|return
name|percents
return|;
block|}
comment|/**      * Offer a new value to the streaming percentile algo.  May modify the current      * estimate      *      * @param value Value to stream      */
DECL|method|offer
specifier|public
specifier|abstract
name|void
name|offer
parameter_list|(
name|double
name|value
parameter_list|,
name|long
name|bucketOrd
parameter_list|)
function_decl|;
DECL|method|result
specifier|public
specifier|abstract
name|Result
name|result
parameter_list|(
name|long
name|bucketOrd
parameter_list|)
function_decl|;
DECL|method|emptyResult
specifier|public
specifier|abstract
name|Result
name|emptyResult
parameter_list|()
function_decl|;
DECL|method|indexOfPercent
specifier|static
name|int
name|indexOfPercent
parameter_list|(
name|double
index|[]
name|percents
parameter_list|,
name|double
name|percent
parameter_list|)
block|{
return|return
name|ArrayUtils
operator|.
name|binarySearch
argument_list|(
name|percents
argument_list|,
name|percent
argument_list|,
literal|0.001
argument_list|)
return|;
block|}
comment|/**      * Responsible for merging multiple estimators into a single one.      */
DECL|class|Result
specifier|public
specifier|abstract
specifier|static
class|class
name|Result
parameter_list|<
name|E
extends|extends
name|PercentilesEstimator
parameter_list|,
name|F
extends|extends
name|Result
parameter_list|>
implements|implements
name|Streamable
block|{
DECL|field|percents
specifier|protected
name|double
index|[]
name|percents
decl_stmt|;
DECL|method|Result
specifier|protected
name|Result
parameter_list|()
block|{}
comment|// for serialization
DECL|method|Result
specifier|protected
name|Result
parameter_list|(
name|double
index|[]
name|percents
parameter_list|)
block|{
name|this
operator|.
name|percents
operator|=
name|percents
expr_stmt|;
block|}
DECL|method|id
specifier|protected
specifier|abstract
name|byte
name|id
parameter_list|()
function_decl|;
DECL|method|estimate
specifier|public
name|double
name|estimate
parameter_list|(
name|double
name|percent
parameter_list|)
block|{
name|int
name|i
init|=
name|indexOfPercent
argument_list|(
name|percents
argument_list|,
name|percent
argument_list|)
decl_stmt|;
assert|assert
name|i
operator|>=
literal|0
assert|;
return|return
name|estimate
argument_list|(
name|i
argument_list|)
return|;
block|}
DECL|method|estimate
specifier|public
specifier|abstract
name|double
name|estimate
parameter_list|(
name|int
name|index
parameter_list|)
function_decl|;
DECL|method|merger
specifier|public
specifier|abstract
name|Merger
argument_list|<
name|E
argument_list|,
name|F
argument_list|>
name|merger
parameter_list|(
name|int
name|estimatedMerges
parameter_list|)
function_decl|;
DECL|interface|Merger
specifier|public
specifier|static
interface|interface
name|Merger
parameter_list|<
name|E
extends|extends
name|PercentilesEstimator
parameter_list|,
name|F
extends|extends
name|Result
parameter_list|>
block|{
DECL|method|add
specifier|public
specifier|abstract
name|void
name|add
parameter_list|(
name|F
name|result
parameter_list|)
function_decl|;
DECL|method|merge
specifier|public
specifier|abstract
name|Result
name|merge
parameter_list|()
function_decl|;
block|}
block|}
DECL|interface|Factory
specifier|public
specifier|static
interface|interface
name|Factory
parameter_list|<
name|E
extends|extends
name|PercentilesEstimator
parameter_list|>
block|{
DECL|method|create
specifier|public
specifier|abstract
name|E
name|create
parameter_list|(
name|double
index|[]
name|percents
parameter_list|,
name|long
name|estimatedBucketCount
parameter_list|,
name|AggregationContext
name|context
parameter_list|)
function_decl|;
block|}
DECL|class|Streams
specifier|static
class|class
name|Streams
block|{
DECL|method|read
specifier|static
name|Result
name|read
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
switch|switch
condition|(
name|in
operator|.
name|readByte
argument_list|()
condition|)
block|{
case|case
name|TDigest
operator|.
name|ID
case|:
return|return
name|TDigest
operator|.
name|Result
operator|.
name|read
argument_list|(
name|in
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|ElasticsearchIllegalArgumentException
argument_list|(
literal|"Unknown percentile estimator"
argument_list|)
throw|;
block|}
block|}
DECL|method|write
specifier|static
name|void
name|write
parameter_list|(
name|Result
name|estimator
parameter_list|,
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeByte
argument_list|(
name|estimator
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|estimator
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

