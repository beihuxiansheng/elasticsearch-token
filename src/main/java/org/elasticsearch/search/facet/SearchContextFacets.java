begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.facet
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|facet
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|SearchContextFacets
specifier|public
class|class
name|SearchContextFacets
block|{
DECL|class|Entry
specifier|public
specifier|static
class|class
name|Entry
block|{
DECL|field|facetName
specifier|private
specifier|final
name|String
name|facetName
decl_stmt|;
DECL|field|mode
specifier|private
specifier|final
name|FacetExecutor
operator|.
name|Mode
name|mode
decl_stmt|;
DECL|field|facetExecutor
specifier|private
specifier|final
name|FacetExecutor
name|facetExecutor
decl_stmt|;
DECL|field|global
specifier|private
specifier|final
name|boolean
name|global
decl_stmt|;
annotation|@
name|Nullable
DECL|field|filter
specifier|private
specifier|final
name|Filter
name|filter
decl_stmt|;
DECL|method|Entry
specifier|public
name|Entry
parameter_list|(
name|String
name|facetName
parameter_list|,
name|FacetExecutor
operator|.
name|Mode
name|mode
parameter_list|,
name|FacetExecutor
name|facetExecutor
parameter_list|,
name|boolean
name|global
parameter_list|,
annotation|@
name|Nullable
name|Filter
name|filter
parameter_list|)
block|{
name|this
operator|.
name|facetName
operator|=
name|facetName
expr_stmt|;
name|this
operator|.
name|mode
operator|=
name|mode
expr_stmt|;
name|this
operator|.
name|facetExecutor
operator|=
name|facetExecutor
expr_stmt|;
name|this
operator|.
name|global
operator|=
name|global
expr_stmt|;
name|this
operator|.
name|filter
operator|=
name|filter
expr_stmt|;
block|}
DECL|method|getFacetName
specifier|public
name|String
name|getFacetName
parameter_list|()
block|{
return|return
name|facetName
return|;
block|}
DECL|method|getMode
specifier|public
name|FacetExecutor
operator|.
name|Mode
name|getMode
parameter_list|()
block|{
return|return
name|mode
return|;
block|}
DECL|method|getFacetExecutor
specifier|public
name|FacetExecutor
name|getFacetExecutor
parameter_list|()
block|{
return|return
name|facetExecutor
return|;
block|}
DECL|method|isGlobal
specifier|public
name|boolean
name|isGlobal
parameter_list|()
block|{
return|return
name|global
return|;
block|}
DECL|method|getFilter
specifier|public
name|Filter
name|getFilter
parameter_list|()
block|{
return|return
name|filter
return|;
block|}
block|}
DECL|field|entries
specifier|private
specifier|final
name|List
argument_list|<
name|Entry
argument_list|>
name|entries
decl_stmt|;
DECL|field|hasQuery
specifier|private
name|boolean
name|hasQuery
decl_stmt|;
DECL|field|hasGlobal
specifier|private
name|boolean
name|hasGlobal
decl_stmt|;
DECL|method|SearchContextFacets
specifier|public
name|SearchContextFacets
parameter_list|(
name|List
argument_list|<
name|Entry
argument_list|>
name|entries
parameter_list|)
block|{
name|this
operator|.
name|entries
operator|=
name|entries
expr_stmt|;
for|for
control|(
name|Entry
name|entry
range|:
name|entries
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|global
condition|)
block|{
name|hasGlobal
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|hasQuery
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
DECL|method|entries
specifier|public
name|List
argument_list|<
name|Entry
argument_list|>
name|entries
parameter_list|()
block|{
return|return
name|this
operator|.
name|entries
return|;
block|}
comment|/**      * Are there facets that need to be computed on the query hits?      */
DECL|method|hasQuery
specifier|public
name|boolean
name|hasQuery
parameter_list|()
block|{
return|return
name|hasQuery
return|;
block|}
comment|/**      * Are there global facets that need to be computed on all the docs.      */
DECL|method|hasGlobal
specifier|public
name|boolean
name|hasGlobal
parameter_list|()
block|{
return|return
name|hasGlobal
return|;
block|}
block|}
end_class

end_unit

