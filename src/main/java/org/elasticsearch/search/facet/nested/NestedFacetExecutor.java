begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.facet.nested
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|facet
operator|.
name|nested
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|AtomicReaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSetIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Scorer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Bits
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|FixedBitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|docset
operator|.
name|ContextDocIdSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|docset
operator|.
name|DocIdSets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|search
operator|.
name|FilteredCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|search
operator|.
name|XCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MapperService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|object
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|search
operator|.
name|nested
operator|.
name|NonNestedDocsFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|facet
operator|.
name|FacetExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|facet
operator|.
name|InternalFacet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|SearchContext
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
DECL|class|NestedFacetExecutor
specifier|public
class|class
name|NestedFacetExecutor
extends|extends
name|FacetExecutor
block|{
DECL|field|facetExecutor
specifier|private
specifier|final
name|FacetExecutor
name|facetExecutor
decl_stmt|;
DECL|field|parentFilter
specifier|private
specifier|final
name|Filter
name|parentFilter
decl_stmt|;
DECL|field|childFilter
specifier|private
specifier|final
name|Filter
name|childFilter
decl_stmt|;
DECL|method|NestedFacetExecutor
specifier|public
name|NestedFacetExecutor
parameter_list|(
name|FacetExecutor
name|facetExecutor
parameter_list|,
name|SearchContext
name|context
parameter_list|,
name|String
name|nestedPath
parameter_list|)
block|{
name|this
operator|.
name|facetExecutor
operator|=
name|facetExecutor
expr_stmt|;
name|MapperService
operator|.
name|SmartNameObjectMapper
name|mapper
init|=
name|context
operator|.
name|smartNameObjectMapper
argument_list|(
name|nestedPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|mapper
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SearchParseException
argument_list|(
name|context
argument_list|,
literal|"facet nested path ["
operator|+
name|nestedPath
operator|+
literal|"] not found"
argument_list|)
throw|;
block|}
name|ObjectMapper
name|objectMapper
init|=
name|mapper
operator|.
name|mapper
argument_list|()
decl_stmt|;
if|if
condition|(
name|objectMapper
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SearchParseException
argument_list|(
name|context
argument_list|,
literal|"facet nested path ["
operator|+
name|nestedPath
operator|+
literal|"] not found"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|objectMapper
operator|.
name|nested
argument_list|()
operator|.
name|isNested
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SearchParseException
argument_list|(
name|context
argument_list|,
literal|"facet nested path ["
operator|+
name|nestedPath
operator|+
literal|"] is not nested"
argument_list|)
throw|;
block|}
name|parentFilter
operator|=
name|context
operator|.
name|filterCache
argument_list|()
operator|.
name|cache
argument_list|(
name|NonNestedDocsFilter
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|childFilter
operator|=
name|context
operator|.
name|filterCache
argument_list|()
operator|.
name|cache
argument_list|(
name|objectMapper
operator|.
name|nestedTypeFilter
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|buildFacet
specifier|public
name|InternalFacet
name|buildFacet
parameter_list|(
name|String
name|facetName
parameter_list|)
block|{
return|return
name|facetExecutor
operator|.
name|buildFacet
argument_list|(
name|facetName
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|collector
specifier|public
name|Collector
name|collector
parameter_list|()
block|{
name|XCollector
name|collector
init|=
name|facetExecutor
operator|.
name|collector
argument_list|()
decl_stmt|;
if|if
condition|(
name|collector
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|Collector
argument_list|(
name|collector
argument_list|,
name|parentFilter
argument_list|,
name|childFilter
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|post
specifier|public
name|Post
name|post
parameter_list|()
block|{
name|FacetExecutor
operator|.
name|Post
name|post
init|=
name|facetExecutor
operator|.
name|post
argument_list|()
decl_stmt|;
if|if
condition|(
name|post
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|Post
argument_list|(
name|post
argument_list|,
name|parentFilter
argument_list|,
name|childFilter
argument_list|)
return|;
block|}
DECL|class|Post
specifier|public
specifier|static
class|class
name|Post
extends|extends
name|FacetExecutor
operator|.
name|Post
block|{
DECL|field|post
specifier|private
specifier|final
name|FacetExecutor
operator|.
name|Post
name|post
decl_stmt|;
DECL|field|parentFilter
specifier|private
specifier|final
name|Filter
name|parentFilter
decl_stmt|;
DECL|field|childFilter
specifier|private
specifier|final
name|Filter
name|childFilter
decl_stmt|;
DECL|method|Post
specifier|public
name|Post
parameter_list|(
name|FacetExecutor
operator|.
name|Post
name|post
parameter_list|,
name|Filter
name|parentFilter
parameter_list|,
name|Filter
name|childFilter
parameter_list|)
block|{
name|this
operator|.
name|post
operator|=
name|post
expr_stmt|;
name|this
operator|.
name|parentFilter
operator|=
name|parentFilter
expr_stmt|;
name|this
operator|.
name|childFilter
operator|=
name|childFilter
expr_stmt|;
block|}
DECL|method|Post
specifier|public
name|Post
parameter_list|(
name|Post
name|post
parameter_list|,
name|Filter
name|filter
parameter_list|)
block|{
name|this
operator|.
name|post
operator|=
operator|new
name|FacetExecutor
operator|.
name|Post
operator|.
name|Filtered
argument_list|(
name|post
operator|.
name|post
argument_list|,
name|filter
argument_list|)
expr_stmt|;
name|this
operator|.
name|parentFilter
operator|=
name|post
operator|.
name|parentFilter
expr_stmt|;
name|this
operator|.
name|childFilter
operator|=
name|post
operator|.
name|childFilter
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|executePost
specifier|public
name|void
name|executePost
parameter_list|(
name|List
argument_list|<
name|ContextDocIdSet
argument_list|>
name|docSets
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|ContextDocIdSet
argument_list|>
name|nestedEntries
init|=
operator|new
name|ArrayList
argument_list|<
name|ContextDocIdSet
argument_list|>
argument_list|(
name|docSets
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|docSets
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ContextDocIdSet
name|entry
init|=
name|docSets
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|AtomicReaderContext
name|context
init|=
name|entry
operator|.
name|context
decl_stmt|;
comment|// Can use null as acceptedDocs here, since only live doc ids are being pushed to collect method.
name|DocIdSet
name|docIdSet
init|=
name|parentFilter
operator|.
name|getDocIdSet
argument_list|(
name|context
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|DocIdSets
operator|.
name|isEmpty
argument_list|(
name|docIdSet
argument_list|)
condition|)
block|{
continue|continue;
block|}
comment|// Im ES if parent is deleted, then also the children are deleted. Therefore acceptedDocs can also null here.
name|Bits
name|childDocs
init|=
name|DocIdSets
operator|.
name|toSafeBits
argument_list|(
name|context
operator|.
name|reader
argument_list|()
argument_list|,
name|childFilter
operator|.
name|getDocIdSet
argument_list|(
name|context
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|FixedBitSet
name|parentDocs
init|=
operator|(
name|FixedBitSet
operator|)
name|docIdSet
decl_stmt|;
name|DocIdSetIterator
name|iter
init|=
name|entry
operator|.
name|docSet
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|int
name|parentDoc
init|=
name|iter
operator|.
name|nextDoc
argument_list|()
decl_stmt|;
if|if
condition|(
name|parentDoc
operator|==
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|parentDoc
operator|==
literal|0
condition|)
block|{
name|parentDoc
operator|=
name|iter
operator|.
name|nextDoc
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|parentDoc
operator|==
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|)
block|{
continue|continue;
block|}
name|FixedBitSet
name|childSet
init|=
operator|new
name|FixedBitSet
argument_list|(
name|context
operator|.
name|reader
argument_list|()
operator|.
name|maxDoc
argument_list|()
argument_list|)
decl_stmt|;
do|do
block|{
name|int
name|prevParentDoc
init|=
name|parentDocs
operator|.
name|prevSetBit
argument_list|(
name|parentDoc
operator|-
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|childDocId
init|=
operator|(
name|parentDoc
operator|-
literal|1
operator|)
init|;
name|childDocId
operator|>
name|prevParentDoc
condition|;
name|childDocId
operator|--
control|)
block|{
if|if
condition|(
name|childDocs
operator|.
name|get
argument_list|(
name|childDocId
argument_list|)
condition|)
block|{
name|childSet
operator|.
name|set
argument_list|(
name|childDocId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
do|while
condition|(
operator|(
name|parentDoc
operator|=
name|iter
operator|.
name|nextDoc
argument_list|()
operator|)
operator|!=
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|)
do|;
name|nestedEntries
operator|.
name|add
argument_list|(
operator|new
name|ContextDocIdSet
argument_list|(
name|entry
operator|.
name|context
argument_list|,
name|childSet
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|post
operator|.
name|executePost
argument_list|(
name|nestedEntries
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|Collector
specifier|public
specifier|static
class|class
name|Collector
extends|extends
name|FacetExecutor
operator|.
name|Collector
block|{
DECL|field|collector
specifier|private
specifier|final
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Collector
name|collector
decl_stmt|;
DECL|field|parentFilter
specifier|private
specifier|final
name|Filter
name|parentFilter
decl_stmt|;
DECL|field|childFilter
specifier|private
specifier|final
name|Filter
name|childFilter
decl_stmt|;
DECL|field|childDocs
specifier|private
name|Bits
name|childDocs
decl_stmt|;
DECL|field|parentDocs
specifier|private
name|FixedBitSet
name|parentDocs
decl_stmt|;
comment|// We can move
DECL|method|Collector
specifier|public
name|Collector
parameter_list|(
name|Collector
name|collector
parameter_list|,
name|Filter
name|filter
parameter_list|)
block|{
name|this
operator|.
name|collector
operator|=
operator|new
name|FilteredCollector
argument_list|(
name|collector
operator|.
name|collector
argument_list|,
name|filter
argument_list|)
expr_stmt|;
name|this
operator|.
name|parentFilter
operator|=
name|collector
operator|.
name|parentFilter
expr_stmt|;
name|this
operator|.
name|childFilter
operator|=
name|collector
operator|.
name|childFilter
expr_stmt|;
block|}
DECL|method|Collector
specifier|public
name|Collector
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Collector
name|collector
parameter_list|,
name|Filter
name|parentFilter
parameter_list|,
name|Filter
name|childFilter
parameter_list|)
block|{
name|this
operator|.
name|collector
operator|=
name|collector
expr_stmt|;
name|this
operator|.
name|parentFilter
operator|=
name|parentFilter
expr_stmt|;
name|this
operator|.
name|childFilter
operator|=
name|childFilter
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|postCollection
specifier|public
name|void
name|postCollection
parameter_list|()
block|{
if|if
condition|(
name|collector
operator|instanceof
name|XCollector
condition|)
block|{
operator|(
operator|(
name|XCollector
operator|)
name|collector
operator|)
operator|.
name|postCollection
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|setScorer
specifier|public
name|void
name|setScorer
parameter_list|(
name|Scorer
name|scorer
parameter_list|)
throws|throws
name|IOException
block|{
name|collector
operator|.
name|setScorer
argument_list|(
name|scorer
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setNextReader
specifier|public
name|void
name|setNextReader
parameter_list|(
name|AtomicReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|collector
operator|.
name|setNextReader
argument_list|(
name|context
argument_list|)
expr_stmt|;
comment|// Can use null as acceptedDocs here, since only live doc ids are being pushed to collect method.
name|DocIdSet
name|docIdSet
init|=
name|parentFilter
operator|.
name|getDocIdSet
argument_list|(
name|context
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// Im ES if parent is deleted, then also the children are deleted. Therefore acceptedDocs can also null here.
name|childDocs
operator|=
name|DocIdSets
operator|.
name|toSafeBits
argument_list|(
name|context
operator|.
name|reader
argument_list|()
argument_list|,
name|childFilter
operator|.
name|getDocIdSet
argument_list|(
name|context
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|DocIdSets
operator|.
name|isEmpty
argument_list|(
name|docIdSet
argument_list|)
condition|)
block|{
name|parentDocs
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|parentDocs
operator|=
operator|(
name|FixedBitSet
operator|)
name|docIdSet
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|acceptsDocsOutOfOrder
specifier|public
name|boolean
name|acceptsDocsOutOfOrder
parameter_list|()
block|{
return|return
name|collector
operator|.
name|acceptsDocsOutOfOrder
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|collect
specifier|public
name|void
name|collect
parameter_list|(
name|int
name|parentDoc
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|parentDoc
operator|==
literal|0
operator|||
name|parentDocs
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|int
name|prevParentDoc
init|=
name|parentDocs
operator|.
name|prevSetBit
argument_list|(
name|parentDoc
operator|-
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
operator|(
name|parentDoc
operator|-
literal|1
operator|)
init|;
name|i
operator|>
name|prevParentDoc
condition|;
name|i
operator|--
control|)
block|{
if|if
condition|(
name|childDocs
operator|.
name|get
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|collector
operator|.
name|collect
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

