begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.facet
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|facet
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|SortedNumericDoubleValues
import|;
end_import

begin_comment
comment|/**  * Simple Facet aggregator base class for {@link DoubleValues}  */
end_comment

begin_class
DECL|class|DoubleFacetAggregatorBase
specifier|public
specifier|abstract
class|class
name|DoubleFacetAggregatorBase
block|{
DECL|field|total
specifier|private
name|int
name|total
decl_stmt|;
DECL|field|missing
specifier|private
name|int
name|missing
decl_stmt|;
DECL|method|onDoc
specifier|public
name|void
name|onDoc
parameter_list|(
name|int
name|docId
parameter_list|,
name|SortedNumericDoubleValues
name|values
parameter_list|)
block|{
name|values
operator|.
name|setDocument
argument_list|(
name|docId
argument_list|)
expr_stmt|;
name|int
name|numValues
init|=
name|values
operator|.
name|count
argument_list|()
decl_stmt|;
name|int
name|tempMissing
init|=
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numValues
condition|;
name|i
operator|++
control|)
block|{
name|tempMissing
operator|=
literal|0
expr_stmt|;
name|onValue
argument_list|(
name|docId
argument_list|,
name|values
operator|.
name|valueAt
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|total
operator|++
expr_stmt|;
block|}
name|missing
operator|+=
name|tempMissing
expr_stmt|;
block|}
DECL|method|onValue
specifier|protected
specifier|abstract
name|void
name|onValue
parameter_list|(
name|int
name|docId
parameter_list|,
name|double
name|next
parameter_list|)
function_decl|;
DECL|method|total
specifier|public
specifier|final
name|int
name|total
parameter_list|()
block|{
return|return
name|total
return|;
block|}
DECL|method|missing
specifier|public
specifier|final
name|int
name|missing
parameter_list|()
block|{
return|return
name|missing
return|;
block|}
block|}
end_class

end_unit

