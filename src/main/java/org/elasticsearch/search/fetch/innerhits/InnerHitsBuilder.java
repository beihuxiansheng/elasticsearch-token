begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.fetch.innerhits
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|fetch
operator|.
name|innerhits
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|support
operator|.
name|BaseInnerHitBuilder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
DECL|class|InnerHitsBuilder
specifier|public
class|class
name|InnerHitsBuilder
implements|implements
name|ToXContent
block|{
DECL|field|innerHits
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|InnerHit
argument_list|>
name|innerHits
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|(
literal|"inner_hits"
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|InnerHit
argument_list|>
name|entry
range|:
name|innerHits
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|endObject
argument_list|()
return|;
block|}
DECL|method|addInnerHit
specifier|public
name|void
name|addInnerHit
parameter_list|(
name|String
name|name
parameter_list|,
name|InnerHit
name|innerHit
parameter_list|)
block|{
name|innerHits
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|innerHit
argument_list|)
expr_stmt|;
block|}
DECL|class|InnerHit
specifier|public
specifier|static
class|class
name|InnerHit
extends|extends
name|BaseInnerHitBuilder
argument_list|<
name|InnerHit
argument_list|>
block|{
DECL|field|path
specifier|private
name|String
name|path
decl_stmt|;
DECL|field|type
specifier|private
name|String
name|type
decl_stmt|;
comment|/**          * Sets the query to run for collecting the inner hits.          */
DECL|method|setQuery
specifier|public
name|InnerHit
name|setQuery
parameter_list|(
name|QueryBuilder
name|query
parameter_list|)
block|{
name|sourceBuilder
argument_list|()
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * For parent/child inner hits the type to collect inner hits for.          */
DECL|method|setPath
specifier|public
name|InnerHit
name|setPath
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * For nested inner hits the path to collect child nested docs for.          */
DECL|method|setType
specifier|public
name|InnerHit
name|setType
parameter_list|(
name|String
name|type
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Adds a nested inner hit definition that collects inner hits for hits          * on this inner hit level.          */
DECL|method|addInnerHit
specifier|public
name|InnerHit
name|addInnerHit
parameter_list|(
name|String
name|name
parameter_list|,
name|InnerHit
name|innerHit
parameter_list|)
block|{
name|sourceBuilder
argument_list|()
operator|.
name|innerHitsBuilder
argument_list|()
operator|.
name|addInnerHit
argument_list|(
name|name
argument_list|,
name|innerHit
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|path
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|startObject
argument_list|(
literal|"path"
argument_list|)
operator|.
name|startObject
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|startObject
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

