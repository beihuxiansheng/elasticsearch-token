begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.fetch
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|fetch
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|AtomicReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|AtomicReaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchHit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchParseElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|InternalSearchHit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|SearchContext
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_interface
DECL|interface|FetchSubPhase
specifier|public
interface|interface
name|FetchSubPhase
block|{
DECL|class|HitContext
specifier|public
specifier|static
class|class
name|HitContext
block|{
DECL|field|hit
specifier|private
name|InternalSearchHit
name|hit
decl_stmt|;
DECL|field|topLevelReader
specifier|private
name|IndexReader
name|topLevelReader
decl_stmt|;
DECL|field|readerContext
specifier|private
name|AtomicReaderContext
name|readerContext
decl_stmt|;
DECL|field|docId
specifier|private
name|int
name|docId
decl_stmt|;
DECL|field|cache
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|cache
decl_stmt|;
DECL|field|atomicIndexSearcher
specifier|private
name|IndexSearcher
name|atomicIndexSearcher
decl_stmt|;
DECL|method|reset
specifier|public
name|void
name|reset
parameter_list|(
name|InternalSearchHit
name|hit
parameter_list|,
name|AtomicReaderContext
name|context
parameter_list|,
name|int
name|docId
parameter_list|,
name|IndexReader
name|topLevelReader
parameter_list|)
block|{
name|this
operator|.
name|hit
operator|=
name|hit
expr_stmt|;
name|this
operator|.
name|readerContext
operator|=
name|context
expr_stmt|;
name|this
operator|.
name|docId
operator|=
name|docId
expr_stmt|;
name|this
operator|.
name|topLevelReader
operator|=
name|topLevelReader
expr_stmt|;
name|this
operator|.
name|atomicIndexSearcher
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|hit
specifier|public
name|InternalSearchHit
name|hit
parameter_list|()
block|{
return|return
name|hit
return|;
block|}
DECL|method|reader
specifier|public
name|AtomicReader
name|reader
parameter_list|()
block|{
return|return
name|readerContext
operator|.
name|reader
argument_list|()
return|;
block|}
DECL|method|readerContext
specifier|public
name|AtomicReaderContext
name|readerContext
parameter_list|()
block|{
return|return
name|readerContext
return|;
block|}
DECL|method|searcher
specifier|public
name|IndexSearcher
name|searcher
parameter_list|()
block|{
if|if
condition|(
name|atomicIndexSearcher
operator|==
literal|null
condition|)
block|{
comment|// Use the reader directly otherwise the IndexSearcher assertion will trip because it expects a top level
comment|// reader context.
name|atomicIndexSearcher
operator|=
operator|new
name|IndexSearcher
argument_list|(
name|readerContext
operator|.
name|reader
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|atomicIndexSearcher
return|;
block|}
DECL|method|docId
specifier|public
name|int
name|docId
parameter_list|()
block|{
return|return
name|docId
return|;
block|}
DECL|method|topLevelReader
specifier|public
name|IndexReader
name|topLevelReader
parameter_list|()
block|{
return|return
name|topLevelReader
return|;
block|}
DECL|method|cache
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|cache
parameter_list|()
block|{
if|if
condition|(
name|cache
operator|==
literal|null
condition|)
block|{
name|cache
operator|=
name|Maps
operator|.
name|newHashMap
argument_list|()
expr_stmt|;
block|}
return|return
name|cache
return|;
block|}
DECL|method|getSourcePath
specifier|public
name|String
name|getSourcePath
parameter_list|(
name|String
name|sourcePath
parameter_list|)
block|{
name|SearchHit
operator|.
name|NestedIdentity
name|nested
init|=
name|hit
argument_list|()
operator|.
name|getNestedIdentity
argument_list|()
decl_stmt|;
if|if
condition|(
name|nested
operator|!=
literal|null
condition|)
block|{
comment|// in case of nested we need to figure out what is the _source field from the perspective
comment|// of the nested hit it self. The nested _source is isolated and the root and potentially parent objects
comment|// are gone
name|StringBuilder
name|nestedPath
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
init|;
name|nested
operator|!=
literal|null
condition|;
name|nested
operator|=
name|nested
operator|.
name|getChild
argument_list|()
control|)
block|{
name|nestedPath
operator|.
name|append
argument_list|(
name|nested
operator|.
name|getField
argument_list|()
argument_list|)
expr_stmt|;
block|}
assert|assert
name|sourcePath
operator|.
name|startsWith
argument_list|(
name|nestedPath
operator|.
name|toString
argument_list|()
argument_list|)
assert|;
name|int
name|startIndex
init|=
name|nestedPath
operator|.
name|length
argument_list|()
operator|+
literal|1
decl_stmt|;
comment|// the path until the deepest nested object + '.'
return|return
name|sourcePath
operator|.
name|substring
argument_list|(
name|startIndex
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|sourcePath
return|;
block|}
block|}
block|}
DECL|method|parseElements
name|Map
argument_list|<
name|String
argument_list|,
name|?
extends|extends
name|SearchParseElement
argument_list|>
name|parseElements
parameter_list|()
function_decl|;
DECL|method|hitExecutionNeeded
name|boolean
name|hitExecutionNeeded
parameter_list|(
name|SearchContext
name|context
parameter_list|)
function_decl|;
comment|/**      * Executes the hit level phase, with a reader and doc id (note, its a low level reader, and the matching doc).      */
DECL|method|hitExecute
name|void
name|hitExecute
parameter_list|(
name|SearchContext
name|context
parameter_list|,
name|HitContext
name|hitContext
parameter_list|)
throws|throws
name|ElasticsearchException
function_decl|;
DECL|method|hitsExecutionNeeded
name|boolean
name|hitsExecutionNeeded
parameter_list|(
name|SearchContext
name|context
parameter_list|)
function_decl|;
DECL|method|hitsExecute
name|void
name|hitsExecute
parameter_list|(
name|SearchContext
name|context
parameter_list|,
name|InternalSearchHit
index|[]
name|hits
parameter_list|)
throws|throws
name|ElasticsearchException
function_decl|;
block|}
end_interface

end_unit

