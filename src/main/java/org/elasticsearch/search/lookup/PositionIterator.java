begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.lookup
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|lookup
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocsAndPositionsEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_class
DECL|class|PositionIterator
specifier|public
class|class
name|PositionIterator
implements|implements
name|Iterator
argument_list|<
name|TermPosition
argument_list|>
block|{
DECL|field|EMPTY
specifier|private
specifier|static
specifier|final
name|DocsAndPositionsEnum
name|EMPTY
init|=
operator|new
name|EmptyDocsAndPosEnum
argument_list|()
decl_stmt|;
DECL|field|resetted
specifier|private
name|boolean
name|resetted
init|=
literal|false
decl_stmt|;
DECL|field|indexFieldTerm
specifier|protected
name|IndexFieldTerm
name|indexFieldTerm
decl_stmt|;
DECL|field|freq
specifier|protected
name|int
name|freq
init|=
operator|-
literal|1
decl_stmt|;
comment|// current position of iterator
DECL|field|currentPos
specifier|private
name|int
name|currentPos
decl_stmt|;
DECL|field|termPosition
specifier|protected
specifier|final
name|TermPosition
name|termPosition
init|=
operator|new
name|TermPosition
argument_list|()
decl_stmt|;
DECL|field|docsAndPos
specifier|private
name|DocsAndPositionsEnum
name|docsAndPos
decl_stmt|;
DECL|method|PositionIterator
specifier|public
name|PositionIterator
parameter_list|(
name|IndexFieldTerm
name|indexFieldTerm
parameter_list|)
block|{
name|this
operator|.
name|indexFieldTerm
operator|=
name|indexFieldTerm
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|remove
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Cannot remove anything from TermPosition iterator."
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|hasNext
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|currentPos
operator|<
name|freq
return|;
block|}
annotation|@
name|Override
DECL|method|next
specifier|public
name|TermPosition
name|next
parameter_list|()
block|{
try|try
block|{
name|termPosition
operator|.
name|position
operator|=
name|docsAndPos
operator|.
name|nextPosition
argument_list|()
expr_stmt|;
name|termPosition
operator|.
name|startOffset
operator|=
name|docsAndPos
operator|.
name|startOffset
argument_list|()
expr_stmt|;
name|termPosition
operator|.
name|endOffset
operator|=
name|docsAndPos
operator|.
name|endOffset
argument_list|()
expr_stmt|;
name|termPosition
operator|.
name|payload
operator|=
name|docsAndPos
operator|.
name|getPayload
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|ElasticsearchException
argument_list|(
literal|"can not advance iterator"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
name|currentPos
operator|++
expr_stmt|;
return|return
name|termPosition
return|;
block|}
DECL|method|nextDoc
specifier|public
name|void
name|nextDoc
parameter_list|()
throws|throws
name|IOException
block|{
name|resetted
operator|=
literal|false
expr_stmt|;
name|currentPos
operator|=
literal|0
expr_stmt|;
name|freq
operator|=
name|indexFieldTerm
operator|.
name|tf
argument_list|()
expr_stmt|;
if|if
condition|(
name|indexFieldTerm
operator|.
name|docsEnum
operator|instanceof
name|DocsAndPositionsEnum
condition|)
block|{
name|docsAndPos
operator|=
operator|(
name|DocsAndPositionsEnum
operator|)
name|indexFieldTerm
operator|.
name|docsEnum
expr_stmt|;
block|}
else|else
block|{
name|docsAndPos
operator|=
name|EMPTY
expr_stmt|;
block|}
block|}
DECL|method|reset
specifier|public
name|Iterator
argument_list|<
name|TermPosition
argument_list|>
name|reset
parameter_list|()
block|{
if|if
condition|(
name|resetted
condition|)
block|{
throw|throw
operator|new
name|ElasticsearchException
argument_list|(
literal|"Cannot iterate twice! If you want to iterate more that once, add _CACHE explicitly."
argument_list|)
throw|;
block|}
name|resetted
operator|=
literal|true
expr_stmt|;
return|return
name|this
return|;
block|}
comment|// we use this to make sure we can also iterate if there are no positions
DECL|class|EmptyDocsAndPosEnum
specifier|private
specifier|static
specifier|final
class|class
name|EmptyDocsAndPosEnum
extends|extends
name|DocsAndPositionsEnum
block|{
annotation|@
name|Override
DECL|method|nextPosition
specifier|public
name|int
name|nextPosition
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
DECL|method|startOffset
specifier|public
name|int
name|startOffset
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
DECL|method|endOffset
specifier|public
name|int
name|endOffset
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
DECL|method|getPayload
specifier|public
name|BytesRef
name|getPayload
parameter_list|()
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|freq
specifier|public
name|int
name|freq
parameter_list|()
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|docID
specifier|public
name|int
name|docID
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|nextDoc
specifier|public
name|int
name|nextDoc
parameter_list|()
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|advance
specifier|public
name|int
name|advance
parameter_list|(
name|int
name|target
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|cost
specifier|public
name|long
name|cost
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
block|}
end_class

end_unit

