begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.suggest
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticSearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Streamable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|text
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilderString
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Top level suggest result, containing the result for each suggestion.  */
end_comment

begin_class
DECL|class|Suggest
specifier|public
class|class
name|Suggest
implements|implements
name|Iterable
argument_list|<
name|Suggest
operator|.
name|Suggestion
argument_list|>
implements|,
name|Streamable
implements|,
name|ToXContent
block|{
DECL|class|Fields
specifier|static
class|class
name|Fields
block|{
DECL|field|SUGGEST
specifier|static
specifier|final
name|XContentBuilderString
name|SUGGEST
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"suggest"
argument_list|)
decl_stmt|;
block|}
DECL|field|suggestions
specifier|private
name|List
argument_list|<
name|Suggestion
argument_list|>
name|suggestions
decl_stmt|;
DECL|method|Suggest
name|Suggest
parameter_list|()
block|{     }
DECL|method|Suggest
specifier|public
name|Suggest
parameter_list|(
name|List
argument_list|<
name|Suggestion
argument_list|>
name|suggestions
parameter_list|)
block|{
name|this
operator|.
name|suggestions
operator|=
name|suggestions
expr_stmt|;
block|}
comment|/**      * @return the suggestions      */
DECL|method|getSuggestions
specifier|public
name|List
argument_list|<
name|Suggestion
argument_list|>
name|getSuggestions
parameter_list|()
block|{
return|return
name|suggestions
return|;
block|}
annotation|@
name|Override
DECL|method|iterator
specifier|public
name|Iterator
argument_list|<
name|Suggestion
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|suggestions
operator|.
name|iterator
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|size
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|suggestions
operator|=
operator|new
name|ArrayList
argument_list|<
name|Suggestion
argument_list|>
argument_list|(
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|Suggestion
name|suggestion
init|=
operator|new
name|Suggestion
argument_list|()
decl_stmt|;
name|suggestion
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|suggestions
operator|.
name|add
argument_list|(
name|suggestion
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeVInt
argument_list|(
name|suggestions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Suggestion
name|command
range|:
name|suggestions
control|)
block|{
name|command
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|Fields
operator|.
name|SUGGEST
argument_list|)
expr_stmt|;
for|for
control|(
name|Suggestion
name|suggestion
range|:
name|suggestions
control|)
block|{
name|suggestion
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
DECL|method|readSuggest
specifier|public
specifier|static
name|Suggest
name|readSuggest
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|Suggest
name|result
init|=
operator|new
name|Suggest
argument_list|()
decl_stmt|;
name|result
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/**      * The suggestion responses corresponding with the suggestions in the request.      */
DECL|class|Suggestion
specifier|public
specifier|static
class|class
name|Suggestion
implements|implements
name|Streamable
implements|,
name|ToXContent
block|{
DECL|class|Fields
specifier|static
class|class
name|Fields
block|{
DECL|field|TERMS
specifier|static
specifier|final
name|XContentBuilderString
name|TERMS
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"terms"
argument_list|)
decl_stmt|;
block|}
DECL|field|name
specifier|private
name|String
name|name
decl_stmt|;
DECL|field|size
specifier|private
name|int
name|size
decl_stmt|;
DECL|field|sort
specifier|private
name|Sort
name|sort
decl_stmt|;
DECL|field|terms
specifier|private
specifier|final
name|List
argument_list|<
name|Term
argument_list|>
name|terms
init|=
operator|new
name|ArrayList
argument_list|<
name|Term
argument_list|>
argument_list|(
literal|5
argument_list|)
decl_stmt|;
DECL|method|Suggestion
name|Suggestion
parameter_list|()
block|{         }
DECL|method|Suggestion
name|Suggestion
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|size
parameter_list|,
name|Sort
name|sort
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|size
operator|=
name|size
expr_stmt|;
comment|// The suggested term size specified in request, only used for merging shard responses
name|this
operator|.
name|sort
operator|=
name|sort
expr_stmt|;
block|}
DECL|method|addTerm
name|void
name|addTerm
parameter_list|(
name|Term
name|term
parameter_list|)
block|{
name|terms
operator|.
name|add
argument_list|(
name|term
argument_list|)
expr_stmt|;
block|}
comment|/**          * @return The terms outputted by the suggest analyzer using the suggested text. Embeds the actual suggested          *         terms.          */
DECL|method|getTerms
specifier|public
name|List
argument_list|<
name|Term
argument_list|>
name|getTerms
parameter_list|()
block|{
return|return
name|terms
return|;
block|}
comment|/**          * @return The name of the suggestion as is defined in the request.          */
DECL|method|getName
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
comment|/**          * Merges the result of another suggestion into this suggestion.          */
DECL|method|reduce
specifier|public
name|void
name|reduce
parameter_list|(
name|Suggestion
name|other
parameter_list|)
block|{
assert|assert
name|name
operator|.
name|equals
argument_list|(
name|other
operator|.
name|name
argument_list|)
assert|;
assert|assert
name|terms
operator|.
name|size
argument_list|()
operator|==
name|other
operator|.
name|terms
operator|.
name|size
argument_list|()
assert|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|terms
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Term
name|thisTerm
init|=
name|terms
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Term
name|otherTerm
init|=
name|other
operator|.
name|terms
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|thisTerm
operator|.
name|reduce
argument_list|(
name|otherTerm
argument_list|,
name|sort
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**          * Trims the number of suggestions per suggest text term to the requested size.          */
DECL|method|trim
specifier|public
name|void
name|trim
parameter_list|()
block|{
for|for
control|(
name|Term
name|term
range|:
name|terms
control|)
block|{
name|term
operator|.
name|trim
argument_list|(
name|size
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|name
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
name|size
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
name|sort
operator|=
name|Sort
operator|.
name|fromId
argument_list|(
name|in
operator|.
name|readByte
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|size
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|terms
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|terms
operator|.
name|add
argument_list|(
name|Term
operator|.
name|read
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeString
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeByte
argument_list|(
name|sort
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|terms
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Term
name|term
range|:
name|terms
control|)
block|{
name|term
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|builder
operator|.
name|startArray
argument_list|(
name|Fields
operator|.
name|TERMS
argument_list|)
expr_stmt|;
for|for
control|(
name|Term
name|term
range|:
name|terms
control|)
block|{
name|term
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
comment|/**          * Represents a term from the suggest text, that contains the term, start/end offsets and zero or more suggested          * terms for this term in the suggested text.          */
DECL|class|Term
specifier|public
specifier|static
class|class
name|Term
implements|implements
name|Streamable
implements|,
name|ToXContent
block|{
DECL|class|Fields
specifier|static
class|class
name|Fields
block|{
DECL|field|TERM
specifier|static
specifier|final
name|XContentBuilderString
name|TERM
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"term"
argument_list|)
decl_stmt|;
DECL|field|SUGGESTIONS
specifier|static
specifier|final
name|XContentBuilderString
name|SUGGESTIONS
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"suggestions"
argument_list|)
decl_stmt|;
DECL|field|START_OFFSET
specifier|static
specifier|final
name|XContentBuilderString
name|START_OFFSET
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"start_offset"
argument_list|)
decl_stmt|;
DECL|field|END_OFFSET
specifier|static
specifier|final
name|XContentBuilderString
name|END_OFFSET
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"end_offset"
argument_list|)
decl_stmt|;
block|}
DECL|field|term
specifier|private
name|Text
name|term
decl_stmt|;
DECL|field|startOffset
specifier|private
name|int
name|startOffset
decl_stmt|;
DECL|field|endOffset
specifier|private
name|int
name|endOffset
decl_stmt|;
DECL|field|suggested
specifier|private
name|List
argument_list|<
name|SuggestedTerm
argument_list|>
name|suggested
decl_stmt|;
DECL|method|Term
specifier|public
name|Term
parameter_list|(
name|Text
name|term
parameter_list|,
name|int
name|startOffset
parameter_list|,
name|int
name|endOffset
parameter_list|)
block|{
name|this
operator|.
name|term
operator|=
name|term
expr_stmt|;
name|this
operator|.
name|startOffset
operator|=
name|startOffset
expr_stmt|;
name|this
operator|.
name|endOffset
operator|=
name|endOffset
expr_stmt|;
name|this
operator|.
name|suggested
operator|=
operator|new
name|ArrayList
argument_list|<
name|SuggestedTerm
argument_list|>
argument_list|(
literal|5
argument_list|)
expr_stmt|;
block|}
DECL|method|Term
name|Term
parameter_list|()
block|{             }
DECL|method|addSuggested
name|void
name|addSuggested
parameter_list|(
name|SuggestedTerm
name|suggestedTerm
parameter_list|)
block|{
name|suggested
operator|.
name|add
argument_list|(
name|suggestedTerm
argument_list|)
expr_stmt|;
block|}
DECL|method|reduce
name|void
name|reduce
parameter_list|(
name|Term
name|otherTerm
parameter_list|,
name|Sort
name|sort
parameter_list|)
block|{
assert|assert
name|term
operator|.
name|equals
argument_list|(
name|otherTerm
operator|.
name|term
argument_list|()
argument_list|)
assert|;
assert|assert
name|startOffset
operator|==
name|otherTerm
operator|.
name|startOffset
assert|;
assert|assert
name|endOffset
operator|==
name|otherTerm
operator|.
name|endOffset
assert|;
for|for
control|(
name|SuggestedTerm
name|otherSuggestedTerm
range|:
name|otherTerm
operator|.
name|suggested
control|)
block|{
name|int
name|index
init|=
name|suggested
operator|.
name|indexOf
argument_list|(
name|otherSuggestedTerm
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|>=
literal|0
condition|)
block|{
name|SuggestedTerm
name|thisSuggestedTerm
init|=
name|suggested
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|thisSuggestedTerm
operator|.
name|setFrequency
argument_list|(
name|thisSuggestedTerm
operator|.
name|frequency
operator|+
name|otherSuggestedTerm
operator|.
name|frequency
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|suggested
operator|.
name|add
argument_list|(
name|otherSuggestedTerm
argument_list|)
expr_stmt|;
block|}
block|}
name|Comparator
argument_list|<
name|SuggestedTerm
argument_list|>
name|comparator
decl_stmt|;
switch|switch
condition|(
name|sort
condition|)
block|{
case|case
name|SCORE
case|:
name|comparator
operator|=
name|SuggestPhase
operator|.
name|SCORE
expr_stmt|;
break|break;
case|case
name|FREQUENCY
case|:
name|comparator
operator|=
name|SuggestPhase
operator|.
name|FREQUENCY
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|ElasticSearchException
argument_list|(
literal|"Could not resolve comparator in reduce phase."
argument_list|)
throw|;
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|suggested
argument_list|,
name|comparator
argument_list|)
expr_stmt|;
block|}
DECL|method|term
specifier|public
name|Text
name|term
parameter_list|()
block|{
return|return
name|term
return|;
block|}
comment|/**              * @return the term (analyzed by suggest analyzer) originating from the suggest text.              */
DECL|method|getTerm
specifier|public
name|String
name|getTerm
parameter_list|()
block|{
return|return
name|term
argument_list|()
operator|.
name|string
argument_list|()
return|;
block|}
comment|/**              * @return the start offset of this term in the suggest text.              */
DECL|method|getStartOffset
specifier|public
name|int
name|getStartOffset
parameter_list|()
block|{
return|return
name|startOffset
return|;
block|}
comment|/**              * @return the end offset of this term in the suggest text.              */
DECL|method|getEndOffset
specifier|public
name|int
name|getEndOffset
parameter_list|()
block|{
return|return
name|endOffset
return|;
block|}
comment|/**              * @return The suggested terms for this particular suggest text term. If there are no suggested terms then              *         an empty list is returned.              */
DECL|method|getSuggested
specifier|public
name|List
argument_list|<
name|SuggestedTerm
argument_list|>
name|getSuggested
parameter_list|()
block|{
return|return
name|suggested
return|;
block|}
DECL|method|trim
name|void
name|trim
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|int
name|suggestionsToRemove
init|=
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|suggested
operator|.
name|size
argument_list|()
operator|-
name|size
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|suggestionsToRemove
condition|;
name|i
operator|++
control|)
block|{
name|suggested
operator|.
name|remove
argument_list|(
name|suggested
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|Term
name|term
init|=
operator|(
name|Term
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|endOffset
operator|!=
name|term
operator|.
name|endOffset
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|startOffset
operator|!=
name|term
operator|.
name|startOffset
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|term
operator|.
name|equals
argument_list|(
name|term
operator|.
name|term
argument_list|)
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
name|term
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|startOffset
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|endOffset
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|read
specifier|static
name|Term
name|read
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|Term
name|term
init|=
operator|new
name|Term
argument_list|()
decl_stmt|;
name|term
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
return|return
name|term
return|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|term
operator|=
name|in
operator|.
name|readText
argument_list|()
expr_stmt|;
name|startOffset
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
name|endOffset
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
name|int
name|suggestedWords
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|suggested
operator|=
operator|new
name|ArrayList
argument_list|<
name|SuggestedTerm
argument_list|>
argument_list|(
name|suggestedWords
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|suggestedWords
condition|;
name|j
operator|++
control|)
block|{
name|suggested
operator|.
name|add
argument_list|(
name|SuggestedTerm
operator|.
name|create
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeText
argument_list|(
name|term
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|startOffset
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|endOffset
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|suggested
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|SuggestedTerm
name|suggestedTerm
range|:
name|suggested
control|)
block|{
name|suggestedTerm
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|TERM
argument_list|,
name|term
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|START_OFFSET
argument_list|,
name|startOffset
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|END_OFFSET
argument_list|,
name|endOffset
argument_list|)
expr_stmt|;
name|builder
operator|.
name|startArray
argument_list|(
name|Fields
operator|.
name|SUGGESTIONS
argument_list|)
expr_stmt|;
for|for
control|(
name|SuggestedTerm
name|suggestedTerm
range|:
name|suggested
control|)
block|{
name|suggestedTerm
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
comment|/**              * Represents the suggested term, containing a term and its document frequency and score.              */
DECL|class|SuggestedTerm
specifier|public
specifier|static
class|class
name|SuggestedTerm
implements|implements
name|Streamable
implements|,
name|ToXContent
block|{
DECL|class|Fields
specifier|static
class|class
name|Fields
block|{
DECL|field|TERM
specifier|static
specifier|final
name|XContentBuilderString
name|TERM
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"term"
argument_list|)
decl_stmt|;
DECL|field|FREQUENCY
specifier|static
specifier|final
name|XContentBuilderString
name|FREQUENCY
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"frequency"
argument_list|)
decl_stmt|;
DECL|field|SCORE
specifier|static
specifier|final
name|XContentBuilderString
name|SCORE
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"score"
argument_list|)
decl_stmt|;
block|}
DECL|field|term
specifier|private
name|Text
name|term
decl_stmt|;
DECL|field|frequency
specifier|private
name|int
name|frequency
decl_stmt|;
DECL|field|score
specifier|private
name|float
name|score
decl_stmt|;
DECL|method|SuggestedTerm
name|SuggestedTerm
parameter_list|(
name|Text
name|term
parameter_list|,
name|int
name|frequency
parameter_list|,
name|float
name|score
parameter_list|)
block|{
name|this
operator|.
name|term
operator|=
name|term
expr_stmt|;
name|this
operator|.
name|frequency
operator|=
name|frequency
expr_stmt|;
name|this
operator|.
name|score
operator|=
name|score
expr_stmt|;
block|}
DECL|method|SuggestedTerm
name|SuggestedTerm
parameter_list|()
block|{                 }
DECL|method|setFrequency
specifier|public
name|void
name|setFrequency
parameter_list|(
name|int
name|frequency
parameter_list|)
block|{
name|this
operator|.
name|frequency
operator|=
name|frequency
expr_stmt|;
block|}
comment|/**                  * @return The actual term.                  */
DECL|method|getTerm
specifier|public
name|Text
name|getTerm
parameter_list|()
block|{
return|return
name|term
return|;
block|}
comment|/**                  * @return How often this suggested term appears in the index.                  */
DECL|method|getFrequency
specifier|public
name|int
name|getFrequency
parameter_list|()
block|{
return|return
name|frequency
return|;
block|}
comment|/**                  * @return The score based on the edit distance difference between the suggested term and the                  *         term in the suggest text.                  */
DECL|method|getScore
specifier|public
name|float
name|getScore
parameter_list|()
block|{
return|return
name|score
return|;
block|}
DECL|method|create
specifier|static
name|SuggestedTerm
name|create
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|SuggestedTerm
name|suggestion
init|=
operator|new
name|SuggestedTerm
argument_list|()
decl_stmt|;
name|suggestion
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
return|return
name|suggestion
return|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|term
operator|=
name|in
operator|.
name|readText
argument_list|()
expr_stmt|;
name|frequency
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
name|score
operator|=
name|in
operator|.
name|readFloat
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeText
argument_list|(
name|term
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|frequency
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeFloat
argument_list|(
name|score
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|TERM
argument_list|,
name|term
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|FREQUENCY
argument_list|,
name|frequency
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|SCORE
argument_list|,
name|score
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|SuggestedTerm
name|that
init|=
operator|(
name|SuggestedTerm
operator|)
name|o
decl_stmt|;
return|return
name|term
operator|.
name|equals
argument_list|(
name|that
operator|.
name|term
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|term
operator|.
name|hashCode
argument_list|()
return|;
block|}
block|}
block|}
DECL|enum|Sort
enum|enum
name|Sort
block|{
comment|/**              * Sort should first be based on score.              */
DECL|enum constant|SCORE
name|SCORE
argument_list|(
operator|(
name|byte
operator|)
literal|0x0
argument_list|)
block|,
comment|/**              * Sort should first be based on document frequency.              */
DECL|enum constant|FREQUENCY
name|FREQUENCY
argument_list|(
operator|(
name|byte
operator|)
literal|0x1
argument_list|)
block|;
DECL|field|id
specifier|private
name|byte
name|id
decl_stmt|;
DECL|method|Sort
specifier|private
name|Sort
parameter_list|(
name|byte
name|id
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
block|}
DECL|method|id
specifier|public
name|byte
name|id
parameter_list|()
block|{
return|return
name|id
return|;
block|}
DECL|method|fromId
specifier|static
name|Sort
name|fromId
parameter_list|(
name|byte
name|id
parameter_list|)
block|{
if|if
condition|(
name|id
operator|==
literal|0
condition|)
block|{
return|return
name|SCORE
return|;
block|}
elseif|else
if|if
condition|(
name|id
operator|==
literal|1
condition|)
block|{
return|return
name|FREQUENCY
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|ElasticSearchException
argument_list|(
literal|"Illegal suggest sort "
operator|+
name|id
argument_list|)
throw|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

