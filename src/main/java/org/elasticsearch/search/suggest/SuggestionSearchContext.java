begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.suggest
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spell
operator|.
name|StringDistance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spell
operator|.
name|SuggestMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticSearchIllegalArgumentException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
DECL|class|SuggestionSearchContext
specifier|public
class|class
name|SuggestionSearchContext
block|{
DECL|field|suggestions
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Suggestion
argument_list|>
name|suggestions
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Suggestion
argument_list|>
argument_list|(
literal|4
argument_list|)
decl_stmt|;
DECL|method|addSuggestion
specifier|public
name|void
name|addSuggestion
parameter_list|(
name|String
name|name
parameter_list|,
name|Suggestion
name|suggestion
parameter_list|)
block|{
name|suggestions
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|suggestion
argument_list|)
expr_stmt|;
block|}
DECL|method|suggestions
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Suggestion
argument_list|>
name|suggestions
parameter_list|()
block|{
return|return
name|suggestions
return|;
block|}
DECL|class|Suggestion
specifier|public
specifier|static
class|class
name|Suggestion
block|{
DECL|field|text
specifier|private
name|BytesRef
name|text
decl_stmt|;
DECL|field|field
specifier|private
name|String
name|field
decl_stmt|;
DECL|field|analyzer
specifier|private
name|Analyzer
name|analyzer
decl_stmt|;
DECL|field|suggestMode
specifier|private
name|SuggestMode
name|suggestMode
decl_stmt|;
DECL|field|accuracy
specifier|private
name|Float
name|accuracy
decl_stmt|;
DECL|field|size
specifier|private
name|Integer
name|size
decl_stmt|;
DECL|field|sort
specifier|private
name|Suggest
operator|.
name|Suggestion
operator|.
name|Sort
name|sort
decl_stmt|;
DECL|field|stringDistance
specifier|private
name|StringDistance
name|stringDistance
decl_stmt|;
DECL|field|lowerCaseTerms
specifier|private
name|Boolean
name|lowerCaseTerms
decl_stmt|;
DECL|field|maxEdits
specifier|private
name|Integer
name|maxEdits
decl_stmt|;
DECL|field|factor
specifier|private
name|Integer
name|factor
decl_stmt|;
DECL|field|maxTermFreq
specifier|private
name|Float
name|maxTermFreq
decl_stmt|;
DECL|field|prefixLength
specifier|private
name|Integer
name|prefixLength
decl_stmt|;
DECL|field|minWordLength
specifier|private
name|Integer
name|minWordLength
decl_stmt|;
DECL|field|minDocFreq
specifier|private
name|Float
name|minDocFreq
decl_stmt|;
DECL|field|shardSize
specifier|private
name|Integer
name|shardSize
decl_stmt|;
DECL|method|text
specifier|public
name|BytesRef
name|text
parameter_list|()
block|{
return|return
name|text
return|;
block|}
DECL|method|text
specifier|public
name|void
name|text
parameter_list|(
name|BytesRef
name|text
parameter_list|)
block|{
name|this
operator|.
name|text
operator|=
name|text
expr_stmt|;
block|}
DECL|method|analyzer
specifier|public
name|Analyzer
name|analyzer
parameter_list|()
block|{
return|return
name|analyzer
return|;
block|}
DECL|method|analyzer
specifier|public
name|void
name|analyzer
parameter_list|(
name|Analyzer
name|analyzer
parameter_list|)
block|{
name|this
operator|.
name|analyzer
operator|=
name|analyzer
expr_stmt|;
block|}
DECL|method|field
specifier|public
name|String
name|field
parameter_list|()
block|{
return|return
name|field
return|;
block|}
DECL|method|setField
specifier|public
name|void
name|setField
parameter_list|(
name|String
name|field
parameter_list|)
block|{
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
block|}
DECL|method|suggestMode
specifier|public
name|SuggestMode
name|suggestMode
parameter_list|()
block|{
return|return
name|suggestMode
return|;
block|}
DECL|method|suggestMode
specifier|public
name|void
name|suggestMode
parameter_list|(
name|SuggestMode
name|suggestMode
parameter_list|)
block|{
name|this
operator|.
name|suggestMode
operator|=
name|suggestMode
expr_stmt|;
block|}
DECL|method|accuracy
specifier|public
name|Float
name|accuracy
parameter_list|()
block|{
return|return
name|accuracy
return|;
block|}
DECL|method|accuracy
specifier|public
name|void
name|accuracy
parameter_list|(
name|float
name|accuracy
parameter_list|)
block|{
name|this
operator|.
name|accuracy
operator|=
name|accuracy
expr_stmt|;
block|}
DECL|method|size
specifier|public
name|Integer
name|size
parameter_list|()
block|{
return|return
name|size
return|;
block|}
DECL|method|size
specifier|public
name|void
name|size
parameter_list|(
name|int
name|size
parameter_list|)
block|{
if|if
condition|(
name|size
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|ElasticSearchIllegalArgumentException
argument_list|(
literal|"Size must be positive"
argument_list|)
throw|;
block|}
name|this
operator|.
name|size
operator|=
name|size
expr_stmt|;
block|}
DECL|method|sort
specifier|public
name|Suggest
operator|.
name|Suggestion
operator|.
name|Sort
name|sort
parameter_list|()
block|{
return|return
name|sort
return|;
block|}
DECL|method|sort
specifier|public
name|void
name|sort
parameter_list|(
name|Suggest
operator|.
name|Suggestion
operator|.
name|Sort
name|sort
parameter_list|)
block|{
name|this
operator|.
name|sort
operator|=
name|sort
expr_stmt|;
block|}
DECL|method|stringDistance
specifier|public
name|StringDistance
name|stringDistance
parameter_list|()
block|{
return|return
name|stringDistance
return|;
block|}
DECL|method|stringDistance
specifier|public
name|void
name|stringDistance
parameter_list|(
name|StringDistance
name|distance
parameter_list|)
block|{
name|this
operator|.
name|stringDistance
operator|=
name|distance
expr_stmt|;
block|}
DECL|method|lowerCaseTerms
specifier|public
name|Boolean
name|lowerCaseTerms
parameter_list|()
block|{
return|return
name|lowerCaseTerms
return|;
block|}
DECL|method|lowerCaseTerms
specifier|public
name|void
name|lowerCaseTerms
parameter_list|(
name|boolean
name|lowerCaseTerms
parameter_list|)
block|{
name|this
operator|.
name|lowerCaseTerms
operator|=
name|lowerCaseTerms
expr_stmt|;
block|}
DECL|method|maxEdits
specifier|public
name|Integer
name|maxEdits
parameter_list|()
block|{
return|return
name|maxEdits
return|;
block|}
DECL|method|maxEdits
specifier|public
name|void
name|maxEdits
parameter_list|(
name|int
name|maxEdits
parameter_list|)
block|{
name|this
operator|.
name|maxEdits
operator|=
name|maxEdits
expr_stmt|;
block|}
DECL|method|factor
specifier|public
name|Integer
name|factor
parameter_list|()
block|{
return|return
name|factor
return|;
block|}
DECL|method|factor
specifier|public
name|void
name|factor
parameter_list|(
name|int
name|factor
parameter_list|)
block|{
name|this
operator|.
name|factor
operator|=
name|factor
expr_stmt|;
block|}
DECL|method|maxTermFreq
specifier|public
name|Float
name|maxTermFreq
parameter_list|()
block|{
return|return
name|maxTermFreq
return|;
block|}
DECL|method|maxTermFreq
specifier|public
name|void
name|maxTermFreq
parameter_list|(
name|float
name|maxTermFreq
parameter_list|)
block|{
name|this
operator|.
name|maxTermFreq
operator|=
name|maxTermFreq
expr_stmt|;
block|}
DECL|method|prefixLength
specifier|public
name|Integer
name|prefixLength
parameter_list|()
block|{
return|return
name|prefixLength
return|;
block|}
DECL|method|prefixLength
specifier|public
name|void
name|prefixLength
parameter_list|(
name|int
name|prefixLength
parameter_list|)
block|{
name|this
operator|.
name|prefixLength
operator|=
name|prefixLength
expr_stmt|;
block|}
DECL|method|minWordLength
specifier|public
name|Integer
name|minWordLength
parameter_list|()
block|{
return|return
name|minWordLength
return|;
block|}
DECL|method|minQueryLength
specifier|public
name|void
name|minQueryLength
parameter_list|(
name|int
name|minQueryLength
parameter_list|)
block|{
name|this
operator|.
name|minWordLength
operator|=
name|minQueryLength
expr_stmt|;
block|}
DECL|method|minDocFreq
specifier|public
name|Float
name|minDocFreq
parameter_list|()
block|{
return|return
name|minDocFreq
return|;
block|}
DECL|method|minDocFreq
specifier|public
name|void
name|minDocFreq
parameter_list|(
name|float
name|minDocFreq
parameter_list|)
block|{
name|this
operator|.
name|minDocFreq
operator|=
name|minDocFreq
expr_stmt|;
block|}
DECL|method|shardSize
specifier|public
name|Integer
name|shardSize
parameter_list|()
block|{
return|return
name|shardSize
return|;
block|}
DECL|method|shardSize
specifier|public
name|void
name|shardSize
parameter_list|(
name|Integer
name|shardSize
parameter_list|)
block|{
name|this
operator|.
name|shardSize
operator|=
name|shardSize
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

