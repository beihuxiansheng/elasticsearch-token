begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.suggest
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|CustomAnalyzerWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|CharTermAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|OffsetAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|PositionIncrementAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spell
operator|.
name|DirectSpellChecker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spell
operator|.
name|JaroWinklerDistance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spell
operator|.
name|LevensteinDistance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spell
operator|.
name|LuceneLevenshteinDistance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spell
operator|.
name|NGramDistance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spell
operator|.
name|StringDistance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spell
operator|.
name|SuggestMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spell
operator|.
name|SuggestWord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spell
operator|.
name|SuggestWordFrequencyComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spell
operator|.
name|SuggestWordQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|CharsRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|UnicodeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|LevenshteinAutomata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticSearchIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|FastCharArrayReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|CustomAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|NamedAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|ShingleTokenFilterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|TokenFilterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|SearchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|SuggestionSearchContext
operator|.
name|SuggestionContext
import|;
end_import

begin_class
DECL|class|SuggestUtils
specifier|public
specifier|final
class|class
name|SuggestUtils
block|{
DECL|field|LUCENE_FREQUENCY
specifier|public
specifier|static
name|Comparator
argument_list|<
name|SuggestWord
argument_list|>
name|LUCENE_FREQUENCY
init|=
operator|new
name|SuggestWordFrequencyComparator
argument_list|()
decl_stmt|;
DECL|field|SCORE_COMPARATOR
specifier|public
specifier|static
name|Comparator
argument_list|<
name|SuggestWord
argument_list|>
name|SCORE_COMPARATOR
init|=
name|SuggestWordQueue
operator|.
name|DEFAULT_COMPARATOR
decl_stmt|;
DECL|method|SuggestUtils
specifier|private
name|SuggestUtils
parameter_list|()
block|{
comment|// utils!!
block|}
DECL|method|getDirectSpellChecker
specifier|public
specifier|static
name|DirectSpellChecker
name|getDirectSpellChecker
parameter_list|(
name|DirectSpellcheckerSettings
name|suggestion
parameter_list|)
block|{
name|DirectSpellChecker
name|directSpellChecker
init|=
operator|new
name|DirectSpellChecker
argument_list|()
decl_stmt|;
name|directSpellChecker
operator|.
name|setAccuracy
argument_list|(
name|suggestion
operator|.
name|accuracy
argument_list|()
argument_list|)
expr_stmt|;
name|Comparator
argument_list|<
name|SuggestWord
argument_list|>
name|comparator
decl_stmt|;
switch|switch
condition|(
name|suggestion
operator|.
name|sort
argument_list|()
condition|)
block|{
case|case
name|SCORE
case|:
name|comparator
operator|=
name|SCORE_COMPARATOR
expr_stmt|;
break|break;
case|case
name|FREQUENCY
case|:
name|comparator
operator|=
name|LUCENE_FREQUENCY
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|ElasticSearchIllegalArgumentException
argument_list|(
literal|"Illegal suggest sort: "
operator|+
name|suggestion
operator|.
name|sort
argument_list|()
argument_list|)
throw|;
block|}
name|directSpellChecker
operator|.
name|setComparator
argument_list|(
name|comparator
argument_list|)
expr_stmt|;
name|directSpellChecker
operator|.
name|setDistance
argument_list|(
name|suggestion
operator|.
name|stringDistance
argument_list|()
argument_list|)
expr_stmt|;
name|directSpellChecker
operator|.
name|setMaxEdits
argument_list|(
name|suggestion
operator|.
name|maxEdits
argument_list|()
argument_list|)
expr_stmt|;
name|directSpellChecker
operator|.
name|setMaxInspections
argument_list|(
name|suggestion
operator|.
name|maxInspections
argument_list|()
argument_list|)
expr_stmt|;
name|directSpellChecker
operator|.
name|setMaxQueryFrequency
argument_list|(
name|suggestion
operator|.
name|maxTermFreq
argument_list|()
argument_list|)
expr_stmt|;
name|directSpellChecker
operator|.
name|setMinPrefix
argument_list|(
name|suggestion
operator|.
name|prefixLength
argument_list|()
argument_list|)
expr_stmt|;
name|directSpellChecker
operator|.
name|setMinQueryLength
argument_list|(
name|suggestion
operator|.
name|minWordLength
argument_list|()
argument_list|)
expr_stmt|;
name|directSpellChecker
operator|.
name|setThresholdFrequency
argument_list|(
name|suggestion
operator|.
name|minDocFreq
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|directSpellChecker
return|;
block|}
DECL|method|join
specifier|public
specifier|static
name|BytesRef
name|join
parameter_list|(
name|BytesRef
name|separator
parameter_list|,
name|BytesRef
name|result
parameter_list|,
name|BytesRef
modifier|...
name|toJoin
parameter_list|)
block|{
name|int
name|len
init|=
name|separator
operator|.
name|length
operator|*
name|toJoin
operator|.
name|length
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|BytesRef
name|br
range|:
name|toJoin
control|)
block|{
name|len
operator|+=
name|br
operator|.
name|length
expr_stmt|;
block|}
name|result
operator|.
name|grow
argument_list|(
name|len
argument_list|)
expr_stmt|;
return|return
name|joinPreAllocated
argument_list|(
name|separator
argument_list|,
name|result
argument_list|,
name|toJoin
argument_list|)
return|;
block|}
DECL|method|joinPreAllocated
specifier|public
specifier|static
name|BytesRef
name|joinPreAllocated
parameter_list|(
name|BytesRef
name|separator
parameter_list|,
name|BytesRef
name|result
parameter_list|,
name|BytesRef
modifier|...
name|toJoin
parameter_list|)
block|{
name|result
operator|.
name|length
operator|=
literal|0
expr_stmt|;
name|result
operator|.
name|offset
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|toJoin
operator|.
name|length
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|BytesRef
name|br
init|=
name|toJoin
index|[
name|i
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|br
operator|.
name|bytes
argument_list|,
name|br
operator|.
name|offset
argument_list|,
name|result
operator|.
name|bytes
argument_list|,
name|result
operator|.
name|offset
argument_list|,
name|br
operator|.
name|length
argument_list|)
expr_stmt|;
name|result
operator|.
name|offset
operator|+=
name|br
operator|.
name|length
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|separator
operator|.
name|bytes
argument_list|,
name|separator
operator|.
name|offset
argument_list|,
name|result
operator|.
name|bytes
argument_list|,
name|result
operator|.
name|offset
argument_list|,
name|separator
operator|.
name|length
argument_list|)
expr_stmt|;
name|result
operator|.
name|offset
operator|+=
name|separator
operator|.
name|length
expr_stmt|;
block|}
specifier|final
name|BytesRef
name|br
init|=
name|toJoin
index|[
name|toJoin
operator|.
name|length
operator|-
literal|1
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|br
operator|.
name|bytes
argument_list|,
name|br
operator|.
name|offset
argument_list|,
name|result
operator|.
name|bytes
argument_list|,
name|result
operator|.
name|offset
argument_list|,
name|br
operator|.
name|length
argument_list|)
expr_stmt|;
name|result
operator|.
name|length
operator|=
name|result
operator|.
name|offset
operator|+
name|br
operator|.
name|length
expr_stmt|;
name|result
operator|.
name|offset
operator|=
literal|0
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|class|TokenConsumer
specifier|public
specifier|static
specifier|abstract
class|class
name|TokenConsumer
block|{
DECL|field|charTermAttr
specifier|protected
name|CharTermAttribute
name|charTermAttr
decl_stmt|;
DECL|field|posIncAttr
specifier|protected
name|PositionIncrementAttribute
name|posIncAttr
decl_stmt|;
DECL|field|offsetAttr
specifier|protected
name|OffsetAttribute
name|offsetAttr
decl_stmt|;
DECL|method|reset
specifier|public
name|void
name|reset
parameter_list|(
name|TokenStream
name|stream
parameter_list|)
block|{
name|charTermAttr
operator|=
name|stream
operator|.
name|addAttribute
argument_list|(
name|CharTermAttribute
operator|.
name|class
argument_list|)
expr_stmt|;
name|posIncAttr
operator|=
name|stream
operator|.
name|addAttribute
argument_list|(
name|PositionIncrementAttribute
operator|.
name|class
argument_list|)
expr_stmt|;
name|offsetAttr
operator|=
name|stream
operator|.
name|addAttribute
argument_list|(
name|OffsetAttribute
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|fillBytesRef
specifier|protected
name|BytesRef
name|fillBytesRef
parameter_list|(
name|BytesRef
name|spare
parameter_list|)
block|{
name|spare
operator|.
name|offset
operator|=
literal|0
expr_stmt|;
name|spare
operator|.
name|length
operator|=
name|spare
operator|.
name|bytes
operator|.
name|length
expr_stmt|;
name|char
index|[]
name|source
init|=
name|charTermAttr
operator|.
name|buffer
argument_list|()
decl_stmt|;
name|UnicodeUtil
operator|.
name|UTF16toUTF8
argument_list|(
name|source
argument_list|,
literal|0
argument_list|,
name|charTermAttr
operator|.
name|length
argument_list|()
argument_list|,
name|spare
argument_list|)
expr_stmt|;
return|return
name|spare
return|;
block|}
DECL|method|nextToken
specifier|public
specifier|abstract
name|void
name|nextToken
parameter_list|()
throws|throws
name|IOException
function_decl|;
DECL|method|end
specifier|public
name|void
name|end
parameter_list|()
block|{}
block|}
DECL|method|analyze
specifier|public
specifier|static
name|int
name|analyze
parameter_list|(
name|Analyzer
name|analyzer
parameter_list|,
name|BytesRef
name|toAnalyze
parameter_list|,
name|String
name|field
parameter_list|,
name|TokenConsumer
name|consumer
parameter_list|,
name|CharsRef
name|spare
parameter_list|)
throws|throws
name|IOException
block|{
name|UnicodeUtil
operator|.
name|UTF8toUTF16
argument_list|(
name|toAnalyze
argument_list|,
name|spare
argument_list|)
expr_stmt|;
return|return
name|analyze
argument_list|(
name|analyzer
argument_list|,
name|spare
argument_list|,
name|field
argument_list|,
name|consumer
argument_list|)
return|;
block|}
DECL|method|analyze
specifier|public
specifier|static
name|int
name|analyze
parameter_list|(
name|Analyzer
name|analyzer
parameter_list|,
name|CharsRef
name|toAnalyze
parameter_list|,
name|String
name|field
parameter_list|,
name|TokenConsumer
name|consumer
parameter_list|)
throws|throws
name|IOException
block|{
name|TokenStream
name|ts
init|=
name|analyzer
operator|.
name|tokenStream
argument_list|(
name|field
argument_list|,
operator|new
name|FastCharArrayReader
argument_list|(
name|toAnalyze
operator|.
name|chars
argument_list|,
name|toAnalyze
operator|.
name|offset
argument_list|,
name|toAnalyze
operator|.
name|length
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|analyze
argument_list|(
name|ts
argument_list|,
name|consumer
argument_list|)
return|;
block|}
DECL|method|analyze
specifier|public
specifier|static
name|int
name|analyze
parameter_list|(
name|TokenStream
name|stream
parameter_list|,
name|TokenConsumer
name|consumer
parameter_list|)
throws|throws
name|IOException
block|{
name|stream
operator|.
name|reset
argument_list|()
expr_stmt|;
name|consumer
operator|.
name|reset
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|int
name|numTokens
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|stream
operator|.
name|incrementToken
argument_list|()
condition|)
block|{
name|consumer
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|numTokens
operator|++
expr_stmt|;
block|}
name|consumer
operator|.
name|end
argument_list|()
expr_stmt|;
return|return
name|numTokens
return|;
block|}
DECL|method|resolveSuggestMode
specifier|public
specifier|static
name|SuggestMode
name|resolveSuggestMode
parameter_list|(
name|String
name|suggestMode
parameter_list|)
block|{
name|suggestMode
operator|=
name|suggestMode
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"missing"
operator|.
name|equals
argument_list|(
name|suggestMode
argument_list|)
condition|)
block|{
return|return
name|SuggestMode
operator|.
name|SUGGEST_WHEN_NOT_IN_INDEX
return|;
block|}
elseif|else
if|if
condition|(
literal|"popular"
operator|.
name|equals
argument_list|(
name|suggestMode
argument_list|)
condition|)
block|{
return|return
name|SuggestMode
operator|.
name|SUGGEST_MORE_POPULAR
return|;
block|}
elseif|else
if|if
condition|(
literal|"always"
operator|.
name|equals
argument_list|(
name|suggestMode
argument_list|)
condition|)
block|{
return|return
name|SuggestMode
operator|.
name|SUGGEST_ALWAYS
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|ElasticSearchIllegalArgumentException
argument_list|(
literal|"Illegal suggest mode "
operator|+
name|suggestMode
argument_list|)
throw|;
block|}
block|}
DECL|method|resolveSort
specifier|public
specifier|static
name|Suggest
operator|.
name|Suggestion
operator|.
name|Sort
name|resolveSort
parameter_list|(
name|String
name|sortVal
parameter_list|)
block|{
if|if
condition|(
literal|"score"
operator|.
name|equals
argument_list|(
name|sortVal
argument_list|)
condition|)
block|{
return|return
name|Suggest
operator|.
name|Suggestion
operator|.
name|Sort
operator|.
name|SCORE
return|;
block|}
elseif|else
if|if
condition|(
literal|"frequency"
operator|.
name|equals
argument_list|(
name|sortVal
argument_list|)
condition|)
block|{
return|return
name|Suggest
operator|.
name|Suggestion
operator|.
name|Sort
operator|.
name|FREQUENCY
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|ElasticSearchIllegalArgumentException
argument_list|(
literal|"Illegal suggest sort "
operator|+
name|sortVal
argument_list|)
throw|;
block|}
block|}
DECL|method|resolveDistance
specifier|public
specifier|static
name|StringDistance
name|resolveDistance
parameter_list|(
name|String
name|distanceVal
parameter_list|)
block|{
if|if
condition|(
literal|"internal"
operator|.
name|equals
argument_list|(
name|distanceVal
argument_list|)
condition|)
block|{
return|return
name|DirectSpellChecker
operator|.
name|INTERNAL_LEVENSHTEIN
return|;
block|}
elseif|else
if|if
condition|(
literal|"damerau_levenshtein"
operator|.
name|equals
argument_list|(
name|distanceVal
argument_list|)
condition|)
block|{
return|return
operator|new
name|LuceneLevenshteinDistance
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
literal|"levenstein"
operator|.
name|equals
argument_list|(
name|distanceVal
argument_list|)
condition|)
block|{
return|return
operator|new
name|LevensteinDistance
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
literal|"jarowinkler"
operator|.
name|equals
argument_list|(
name|distanceVal
argument_list|)
condition|)
block|{
return|return
operator|new
name|JaroWinklerDistance
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
literal|"ngram"
operator|.
name|equals
argument_list|(
name|distanceVal
argument_list|)
condition|)
block|{
return|return
operator|new
name|NGramDistance
argument_list|()
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|ElasticSearchIllegalArgumentException
argument_list|(
literal|"Illegal distance option "
operator|+
name|distanceVal
argument_list|)
throw|;
block|}
block|}
DECL|method|parseDirectSpellcheckerSettings
specifier|public
specifier|static
name|boolean
name|parseDirectSpellcheckerSettings
parameter_list|(
name|XContentParser
name|parser
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|DirectSpellcheckerSettings
name|suggestion
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
literal|"accuracy"
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
condition|)
block|{
name|suggestion
operator|.
name|accuracy
argument_list|(
name|parser
operator|.
name|floatValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"suggest_mode"
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
operator|||
literal|"suggestMode"
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
condition|)
block|{
name|suggestion
operator|.
name|suggestMode
argument_list|(
name|SuggestUtils
operator|.
name|resolveSuggestMode
argument_list|(
name|parser
operator|.
name|text
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"sort"
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
condition|)
block|{
name|suggestion
operator|.
name|sort
argument_list|(
name|SuggestUtils
operator|.
name|resolveSort
argument_list|(
name|parser
operator|.
name|text
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"string_distance"
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
operator|||
literal|"stringDistance"
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
condition|)
block|{
name|suggestion
operator|.
name|stringDistance
argument_list|(
name|SuggestUtils
operator|.
name|resolveDistance
argument_list|(
name|parser
operator|.
name|text
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"max_edits"
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
operator|||
literal|"maxEdits"
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
operator|||
literal|"fuzziness"
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
condition|)
block|{
name|suggestion
operator|.
name|maxEdits
argument_list|(
name|parser
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|suggestion
operator|.
name|maxEdits
argument_list|()
operator|<
literal|1
operator|||
name|suggestion
operator|.
name|maxEdits
argument_list|()
operator|>
name|LevenshteinAutomata
operator|.
name|MAXIMUM_SUPPORTED_DISTANCE
condition|)
block|{
throw|throw
operator|new
name|ElasticSearchIllegalArgumentException
argument_list|(
literal|"Illegal max_edits value "
operator|+
name|suggestion
operator|.
name|maxEdits
argument_list|()
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"max_inspections"
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
condition|)
block|{
name|suggestion
operator|.
name|maxInspections
argument_list|(
name|parser
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"max_term_freq"
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
operator|||
literal|"maxTermFreq"
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
condition|)
block|{
name|suggestion
operator|.
name|maxTermFreq
argument_list|(
name|parser
operator|.
name|floatValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"prefix_length"
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
operator|||
literal|"prefixLength"
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
condition|)
block|{
name|suggestion
operator|.
name|prefixLength
argument_list|(
name|parser
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"min_word_len"
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
operator|||
literal|"minWordLen"
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
condition|)
block|{
name|suggestion
operator|.
name|minQueryLength
argument_list|(
name|parser
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"min_doc_freq"
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
operator|||
literal|"minDocFreq"
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
condition|)
block|{
name|suggestion
operator|.
name|minDocFreq
argument_list|(
name|parser
operator|.
name|floatValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|parseSuggestContext
specifier|public
specifier|static
name|boolean
name|parseSuggestContext
parameter_list|(
name|XContentParser
name|parser
parameter_list|,
name|SearchContext
name|context
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|SuggestionSearchContext
operator|.
name|SuggestionContext
name|suggestion
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
literal|"analyzer"
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
condition|)
block|{
name|String
name|analyzerName
init|=
name|parser
operator|.
name|text
argument_list|()
decl_stmt|;
name|Analyzer
name|analyzer
init|=
name|context
operator|.
name|mapperService
argument_list|()
operator|.
name|analysisService
argument_list|()
operator|.
name|analyzer
argument_list|(
name|analyzerName
argument_list|)
decl_stmt|;
if|if
condition|(
name|analyzer
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ElasticSearchIllegalArgumentException
argument_list|(
literal|"Analyzer ["
operator|+
name|analyzerName
operator|+
literal|"] doesn't exists"
argument_list|)
throw|;
block|}
name|suggestion
operator|.
name|setAnalyzer
argument_list|(
name|analyzer
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"field"
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
condition|)
block|{
name|suggestion
operator|.
name|setField
argument_list|(
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"size"
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
condition|)
block|{
name|suggestion
operator|.
name|setSize
argument_list|(
name|parser
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"shard_size"
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
operator|||
literal|"shardSize"
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
condition|)
block|{
name|suggestion
operator|.
name|setShardSize
argument_list|(
name|parser
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|verifySuggestion
specifier|public
specifier|static
name|void
name|verifySuggestion
parameter_list|(
name|SearchContext
name|context
parameter_list|,
name|BytesRef
name|globalText
parameter_list|,
name|SuggestionContext
name|suggestion
parameter_list|)
block|{
comment|// Verify options and set defaults
if|if
condition|(
name|suggestion
operator|.
name|getField
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ElasticSearchIllegalArgumentException
argument_list|(
literal|"The required field option is missing"
argument_list|)
throw|;
block|}
if|if
condition|(
name|suggestion
operator|.
name|getText
argument_list|()
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|globalText
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ElasticSearchIllegalArgumentException
argument_list|(
literal|"The required text option is missing"
argument_list|)
throw|;
block|}
name|suggestion
operator|.
name|setText
argument_list|(
name|globalText
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|suggestion
operator|.
name|getAnalyzer
argument_list|()
operator|==
literal|null
condition|)
block|{
name|suggestion
operator|.
name|setAnalyzer
argument_list|(
name|context
operator|.
name|mapperService
argument_list|()
operator|.
name|searchAnalyzer
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getShingleFilterFactory
specifier|public
specifier|static
name|ShingleTokenFilterFactory
name|getShingleFilterFactory
parameter_list|(
name|Analyzer
name|analyzer
parameter_list|)
block|{
if|if
condition|(
name|analyzer
operator|instanceof
name|NamedAnalyzer
condition|)
block|{
name|analyzer
operator|=
operator|(
operator|(
name|NamedAnalyzer
operator|)
name|analyzer
operator|)
operator|.
name|analyzer
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|analyzer
operator|instanceof
name|CustomAnalyzer
condition|)
block|{
name|CustomAnalyzer
name|a
init|=
operator|(
name|CustomAnalyzer
operator|)
name|analyzer
decl_stmt|;
name|TokenFilterFactory
index|[]
name|tokenFilters
init|=
name|a
operator|.
name|tokenFilters
argument_list|()
decl_stmt|;
for|for
control|(
name|TokenFilterFactory
name|tokenFilterFactory
range|:
name|tokenFilters
control|)
block|{
if|if
condition|(
name|tokenFilterFactory
operator|instanceof
name|ShingleTokenFilterFactory
condition|)
block|{
return|return
operator|(
operator|(
name|ShingleTokenFilterFactory
operator|)
name|tokenFilterFactory
operator|)
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

