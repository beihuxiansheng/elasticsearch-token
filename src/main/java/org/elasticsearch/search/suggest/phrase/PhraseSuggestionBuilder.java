begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.suggest.phrase
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|phrase
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|SuggestBuilder
operator|.
name|SuggestionBuilder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_comment
comment|/**  * Defines the actual suggest command for phrase suggestions (<tt>phrase</tt>).  */
end_comment

begin_class
DECL|class|PhraseSuggestionBuilder
specifier|public
specifier|final
class|class
name|PhraseSuggestionBuilder
extends|extends
name|SuggestionBuilder
argument_list|<
name|PhraseSuggestionBuilder
argument_list|>
block|{
DECL|field|maxErrors
specifier|private
name|Float
name|maxErrors
decl_stmt|;
DECL|field|separator
specifier|private
name|String
name|separator
decl_stmt|;
DECL|field|realWordErrorLikelihood
specifier|private
name|Float
name|realWordErrorLikelihood
decl_stmt|;
DECL|field|confidence
specifier|private
name|Float
name|confidence
decl_stmt|;
DECL|field|generators
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|CandidateGenerator
argument_list|>
argument_list|>
name|generators
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|gramSize
specifier|private
name|Integer
name|gramSize
decl_stmt|;
DECL|field|model
specifier|private
name|SmoothingModel
name|model
decl_stmt|;
DECL|field|forceUnigrams
specifier|private
name|Boolean
name|forceUnigrams
decl_stmt|;
DECL|field|tokenLimit
specifier|private
name|Integer
name|tokenLimit
decl_stmt|;
DECL|field|preTag
specifier|private
name|String
name|preTag
decl_stmt|;
DECL|field|postTag
specifier|private
name|String
name|postTag
decl_stmt|;
DECL|field|collateQuery
specifier|private
name|String
name|collateQuery
decl_stmt|;
DECL|field|collateParams
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|collateParams
decl_stmt|;
DECL|field|collatePrune
specifier|private
name|Boolean
name|collatePrune
decl_stmt|;
DECL|method|PhraseSuggestionBuilder
specifier|public
name|PhraseSuggestionBuilder
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
literal|"phrase"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets the gram size for the n-gram model used for this suggester. The      * default value is<tt>1</tt> corresponding to<tt>unigrams</tt>. Use      *<tt>2</tt> for<tt>bigrams</tt> and<tt>3</tt> for<tt>trigrams</tt>.      */
DECL|method|gramSize
specifier|public
name|PhraseSuggestionBuilder
name|gramSize
parameter_list|(
name|int
name|gramSize
parameter_list|)
block|{
if|if
condition|(
name|gramSize
operator|<
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"gramSize must be>= 1"
argument_list|)
throw|;
block|}
name|this
operator|.
name|gramSize
operator|=
name|gramSize
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the maximum percentage of the terms that at most considered to be      * misspellings in order to form a correction. This method accepts a float      * value in the range [0..1) as a fraction of the actual query terms a      * number<tt>&gt;=1</tt> as an absolut number of query terms.      *       * The default is set to<tt>1.0</tt> which corresponds to that only      * corrections with at most 1 missspelled term are returned.      */
DECL|method|maxErrors
specifier|public
name|PhraseSuggestionBuilder
name|maxErrors
parameter_list|(
name|Float
name|maxErrors
parameter_list|)
block|{
name|this
operator|.
name|maxErrors
operator|=
name|maxErrors
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the separator that is used to separate terms in the bigram field. If      * not set the whitespace character is used as a separator.      */
DECL|method|separator
specifier|public
name|PhraseSuggestionBuilder
name|separator
parameter_list|(
name|String
name|separator
parameter_list|)
block|{
name|this
operator|.
name|separator
operator|=
name|separator
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the likelihood of a term being a misspelled even if the term exists      * in the dictionary. The default it<tt>0.95</tt> corresponding to 5% or      * the real words are misspelled.      */
DECL|method|realWordErrorLikelihood
specifier|public
name|PhraseSuggestionBuilder
name|realWordErrorLikelihood
parameter_list|(
name|Float
name|realWordErrorLikelihood
parameter_list|)
block|{
name|this
operator|.
name|realWordErrorLikelihood
operator|=
name|realWordErrorLikelihood
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the confidence level for this suggester. The confidence level      * defines a factor applied to the input phrases score which is used as a      * threshold for other suggest candidates. Only candidates that score higher      * than the threshold will be included in the result. For instance a      * confidence level of<tt>1.0</tt> will only return suggestions that score      * higher than the input phrase. If set to<tt>0.0</tt> the top N candidates      * are returned. The default is<tt>1.0</tt>      */
DECL|method|confidence
specifier|public
name|PhraseSuggestionBuilder
name|confidence
parameter_list|(
name|Float
name|confidence
parameter_list|)
block|{
name|this
operator|.
name|confidence
operator|=
name|confidence
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Adds a {@link CandidateGenerator} to this suggester. The      * {@link CandidateGenerator} is used to draw candidates for each individual      * phrase term before the candidates are scored.      */
DECL|method|addCandidateGenerator
specifier|public
name|PhraseSuggestionBuilder
name|addCandidateGenerator
parameter_list|(
name|CandidateGenerator
name|generator
parameter_list|)
block|{
name|List
argument_list|<
name|CandidateGenerator
argument_list|>
name|list
init|=
name|this
operator|.
name|generators
operator|.
name|get
argument_list|(
name|generator
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|list
operator|==
literal|null
condition|)
block|{
name|list
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|generators
operator|.
name|put
argument_list|(
name|generator
operator|.
name|getType
argument_list|()
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
name|list
operator|.
name|add
argument_list|(
name|generator
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Clear the candidate generators.      */
DECL|method|clearCandidateGenerators
specifier|public
name|PhraseSuggestionBuilder
name|clearCandidateGenerators
parameter_list|()
block|{
name|this
operator|.
name|generators
operator|.
name|clear
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * If set to<code>true</code> the phrase suggester will fail if the analyzer only      * produces ngrams. the default it<code>true</code>.      */
DECL|method|forceUnigrams
specifier|public
name|PhraseSuggestionBuilder
name|forceUnigrams
parameter_list|(
name|boolean
name|forceUnigrams
parameter_list|)
block|{
name|this
operator|.
name|forceUnigrams
operator|=
name|forceUnigrams
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets an explicit smoothing model used for this suggester. The default is      * {@link PhraseSuggester#StupidBackoff}.      */
DECL|method|smoothingModel
specifier|public
name|PhraseSuggestionBuilder
name|smoothingModel
parameter_list|(
name|SmoothingModel
name|model
parameter_list|)
block|{
name|this
operator|.
name|model
operator|=
name|model
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|tokenLimit
specifier|public
name|PhraseSuggestionBuilder
name|tokenLimit
parameter_list|(
name|int
name|tokenLimit
parameter_list|)
block|{
name|this
operator|.
name|tokenLimit
operator|=
name|tokenLimit
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Setup highlighting for suggestions.  If this is called a highlight field      * is returned with suggestions wrapping changed tokens with preTag and postTag.      */
DECL|method|highlight
specifier|public
name|PhraseSuggestionBuilder
name|highlight
parameter_list|(
name|String
name|preTag
parameter_list|,
name|String
name|postTag
parameter_list|)
block|{
if|if
condition|(
operator|(
name|preTag
operator|==
literal|null
operator|)
operator|!=
operator|(
name|postTag
operator|==
literal|null
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Pre and post tag must both be null or both not be null."
argument_list|)
throw|;
block|}
name|this
operator|.
name|preTag
operator|=
name|preTag
expr_stmt|;
name|this
operator|.
name|postTag
operator|=
name|postTag
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets a query used for filtering out suggested phrases (collation).      */
DECL|method|collateQuery
specifier|public
name|PhraseSuggestionBuilder
name|collateQuery
parameter_list|(
name|String
name|collateQuery
parameter_list|)
block|{
name|this
operator|.
name|collateQuery
operator|=
name|collateQuery
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets additional params for collate script      */
DECL|method|collateParams
specifier|public
name|PhraseSuggestionBuilder
name|collateParams
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|collateParams
parameter_list|)
block|{
name|this
operator|.
name|collateParams
operator|=
name|collateParams
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets whether to prune suggestions after collation      */
DECL|method|collatePrune
specifier|public
name|PhraseSuggestionBuilder
name|collatePrune
parameter_list|(
name|boolean
name|collatePrune
parameter_list|)
block|{
name|this
operator|.
name|collatePrune
operator|=
name|collatePrune
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|innerToXContent
specifier|public
name|XContentBuilder
name|innerToXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|realWordErrorLikelihood
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"real_word_error_likelihood"
argument_list|,
name|realWordErrorLikelihood
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|confidence
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"confidence"
argument_list|,
name|confidence
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|separator
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"separator"
argument_list|,
name|separator
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|maxErrors
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"max_errors"
argument_list|,
name|maxErrors
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|gramSize
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"gram_size"
argument_list|,
name|gramSize
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|forceUnigrams
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"force_unigrams"
argument_list|,
name|forceUnigrams
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tokenLimit
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"token_limit"
argument_list|,
name|tokenLimit
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|generators
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Set
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|CandidateGenerator
argument_list|>
argument_list|>
argument_list|>
name|entrySet
init|=
name|generators
operator|.
name|entrySet
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|CandidateGenerator
argument_list|>
argument_list|>
name|entry
range|:
name|entrySet
control|)
block|{
name|builder
operator|.
name|startArray
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|CandidateGenerator
name|generator
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
name|generator
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|model
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|startObject
argument_list|(
literal|"smoothing"
argument_list|)
expr_stmt|;
name|model
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|preTag
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|startObject
argument_list|(
literal|"highlight"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"pre_tag"
argument_list|,
name|preTag
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"post_tag"
argument_list|,
name|postTag
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|collateQuery
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|startObject
argument_list|(
literal|"collate"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"query"
argument_list|,
name|collateQuery
argument_list|)
expr_stmt|;
if|if
condition|(
name|collateParams
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"params"
argument_list|,
name|collateParams
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|collatePrune
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"prune"
argument_list|,
name|collatePrune
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
return|return
name|builder
return|;
block|}
comment|/**      * Creates a new {@link DirectCandidateGenerator}      *       * @param field      *            the field this candidate generator operates on.      */
DECL|method|candidateGenerator
specifier|public
specifier|static
name|DirectCandidateGenerator
name|candidateGenerator
parameter_list|(
name|String
name|field
parameter_list|)
block|{
return|return
operator|new
name|DirectCandidateGenerator
argument_list|(
name|field
argument_list|)
return|;
block|}
comment|/**      * A "stupid-backoff" smoothing model simialr to<a      * href="http://en.wikipedia.org/wiki/Katz's_back-off_model"> Katz's      * Backoff</a>. This model is used as the default if no model is configured.      *<p>      * See<a      * href="http://en.wikipedia.org/wiki/N-gram#Smoothing_techniques">N-Gram      * Smoothing</a> for details.      *</p>      */
DECL|class|StupidBackoff
specifier|public
specifier|static
specifier|final
class|class
name|StupidBackoff
extends|extends
name|SmoothingModel
block|{
DECL|field|discount
specifier|private
specifier|final
name|double
name|discount
decl_stmt|;
comment|/**          * Creates a Stupid-Backoff smoothing model.          *           * @param discount          *            the discount given to lower order ngrams if the higher order ngram doesn't exits          */
DECL|method|StupidBackoff
specifier|public
name|StupidBackoff
parameter_list|(
name|double
name|discount
parameter_list|)
block|{
name|super
argument_list|(
literal|"stupid_backoff"
argument_list|)
expr_stmt|;
name|this
operator|.
name|discount
operator|=
name|discount
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|innerToXContent
specifier|protected
name|XContentBuilder
name|innerToXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"discount"
argument_list|,
name|discount
argument_list|)
expr_stmt|;
return|return
name|builder
return|;
block|}
block|}
comment|/**      * An<a href="http://en.wikipedia.org/wiki/Additive_smoothing">additive      * smoothing</a> model.       *<p>      * See<a      * href="http://en.wikipedia.org/wiki/N-gram#Smoothing_techniques">N-Gram      * Smoothing</a> for details.      *</p>      */
DECL|class|Laplace
specifier|public
specifier|static
specifier|final
class|class
name|Laplace
extends|extends
name|SmoothingModel
block|{
DECL|field|alpha
specifier|private
specifier|final
name|double
name|alpha
decl_stmt|;
comment|/**          * Creates a Laplace smoothing model.          *           * @param discount          *            the discount given to lower order ngrams if the higher order ngram doesn't exits          */
DECL|method|Laplace
specifier|public
name|Laplace
parameter_list|(
name|double
name|alpha
parameter_list|)
block|{
name|super
argument_list|(
literal|"laplace"
argument_list|)
expr_stmt|;
name|this
operator|.
name|alpha
operator|=
name|alpha
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|innerToXContent
specifier|protected
name|XContentBuilder
name|innerToXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"alpha"
argument_list|,
name|alpha
argument_list|)
expr_stmt|;
return|return
name|builder
return|;
block|}
block|}
DECL|class|SmoothingModel
specifier|public
specifier|static
specifier|abstract
class|class
name|SmoothingModel
implements|implements
name|ToXContent
block|{
DECL|field|type
specifier|private
specifier|final
name|String
name|type
decl_stmt|;
DECL|method|SmoothingModel
specifier|protected
name|SmoothingModel
parameter_list|(
name|String
name|type
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|innerToXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
DECL|method|innerToXContent
specifier|protected
specifier|abstract
name|XContentBuilder
name|innerToXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
comment|/**      * Linear interpolation smoothing model.      *<p>      * See<a      * href="http://en.wikipedia.org/wiki/N-gram#Smoothing_techniques">N-Gram      * Smoothing</a> for details.      *</p>      */
DECL|class|LinearInterpolation
specifier|public
specifier|static
specifier|final
class|class
name|LinearInterpolation
extends|extends
name|SmoothingModel
block|{
DECL|field|trigramLambda
specifier|private
specifier|final
name|double
name|trigramLambda
decl_stmt|;
DECL|field|bigramLambda
specifier|private
specifier|final
name|double
name|bigramLambda
decl_stmt|;
DECL|field|unigramLambda
specifier|private
specifier|final
name|double
name|unigramLambda
decl_stmt|;
comment|/**          * Creates a linear interpolation smoothing model.          *           * Note: the lambdas must sum up to one.          *           * @param trigramLambda          *            the trigram lambda          * @param bigramLambda          *            the bigram lambda          * @param unigramLambda          *            the unigram lambda          */
DECL|method|LinearInterpolation
specifier|public
name|LinearInterpolation
parameter_list|(
name|double
name|trigramLambda
parameter_list|,
name|double
name|bigramLambda
parameter_list|,
name|double
name|unigramLambda
parameter_list|)
block|{
name|super
argument_list|(
literal|"linear"
argument_list|)
expr_stmt|;
name|this
operator|.
name|trigramLambda
operator|=
name|trigramLambda
expr_stmt|;
name|this
operator|.
name|bigramLambda
operator|=
name|bigramLambda
expr_stmt|;
name|this
operator|.
name|unigramLambda
operator|=
name|unigramLambda
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|innerToXContent
specifier|protected
name|XContentBuilder
name|innerToXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"trigram_lambda"
argument_list|,
name|trigramLambda
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"bigram_lambda"
argument_list|,
name|bigramLambda
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"unigram_lambda"
argument_list|,
name|unigramLambda
argument_list|)
expr_stmt|;
return|return
name|builder
return|;
block|}
block|}
comment|/**      * {@link CandidateGenerator} base class.       */
DECL|class|CandidateGenerator
specifier|public
specifier|static
specifier|abstract
class|class
name|CandidateGenerator
implements|implements
name|ToXContent
block|{
DECL|field|type
specifier|private
specifier|final
name|String
name|type
decl_stmt|;
DECL|method|CandidateGenerator
specifier|public
name|CandidateGenerator
parameter_list|(
name|String
name|type
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
DECL|method|getType
specifier|public
name|String
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
block|}
comment|/**      *       *      */
DECL|class|DirectCandidateGenerator
specifier|public
specifier|static
specifier|final
class|class
name|DirectCandidateGenerator
extends|extends
name|CandidateGenerator
block|{
DECL|field|field
specifier|private
specifier|final
name|String
name|field
decl_stmt|;
DECL|field|preFilter
specifier|private
name|String
name|preFilter
decl_stmt|;
DECL|field|postFilter
specifier|private
name|String
name|postFilter
decl_stmt|;
DECL|field|suggestMode
specifier|private
name|String
name|suggestMode
decl_stmt|;
DECL|field|accuracy
specifier|private
name|Float
name|accuracy
decl_stmt|;
DECL|field|size
specifier|private
name|Integer
name|size
decl_stmt|;
DECL|field|sort
specifier|private
name|String
name|sort
decl_stmt|;
DECL|field|stringDistance
specifier|private
name|String
name|stringDistance
decl_stmt|;
DECL|field|maxEdits
specifier|private
name|Integer
name|maxEdits
decl_stmt|;
DECL|field|maxInspections
specifier|private
name|Integer
name|maxInspections
decl_stmt|;
DECL|field|maxTermFreq
specifier|private
name|Float
name|maxTermFreq
decl_stmt|;
DECL|field|prefixLength
specifier|private
name|Integer
name|prefixLength
decl_stmt|;
DECL|field|minWordLength
specifier|private
name|Integer
name|minWordLength
decl_stmt|;
DECL|field|minDocFreq
specifier|private
name|Float
name|minDocFreq
decl_stmt|;
comment|/**          * Sets from what field to fetch the candidate suggestions from. This is          * an required option and needs to be set via this setter or          * {@link org.elasticsearch.search.suggest.SuggestBuilder.TermSuggestionBuilder#setField(String)}          * method          */
DECL|method|DirectCandidateGenerator
specifier|public
name|DirectCandidateGenerator
parameter_list|(
name|String
name|field
parameter_list|)
block|{
name|super
argument_list|(
literal|"direct_generator"
argument_list|)
expr_stmt|;
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
block|}
comment|/**          * The global suggest mode controls what suggested terms are included or          * controls for what suggest text tokens, terms should be suggested for.          * Three possible values can be specified:          *<ol>          *<li><code>missing</code> - Only suggest terms in the suggest text          * that aren't in the index. This is the default.          *<li><code>popular</code> - Only suggest terms that occur in more docs          * then the original suggest text term.          *<li><code>always</code> - Suggest any matching suggest terms based on          * tokens in the suggest text.          *</ol>          */
DECL|method|suggestMode
specifier|public
name|DirectCandidateGenerator
name|suggestMode
parameter_list|(
name|String
name|suggestMode
parameter_list|)
block|{
name|this
operator|.
name|suggestMode
operator|=
name|suggestMode
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets how similar the suggested terms at least need to be compared to          * the original suggest text tokens. A value between 0 and 1 can be          * specified. This value will be compared to the string distance result          * of each candidate spelling correction.          *<p/>          * Default is<tt>0.5</tt>          */
DECL|method|accuracy
specifier|public
name|DirectCandidateGenerator
name|accuracy
parameter_list|(
name|float
name|accuracy
parameter_list|)
block|{
name|this
operator|.
name|accuracy
operator|=
name|accuracy
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the maximum suggestions to be returned per suggest text term.          */
DECL|method|size
specifier|public
name|DirectCandidateGenerator
name|size
parameter_list|(
name|int
name|size
parameter_list|)
block|{
if|if
condition|(
name|size
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Size must be positive"
argument_list|)
throw|;
block|}
name|this
operator|.
name|size
operator|=
name|size
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets how to sort the suggest terms per suggest text token. Two          * possible values:          *<ol>          *<li><code>score</code> - Sort should first be based on score, then          * document frequency and then the term itself.          *<li><code>frequency</code> - Sort should first be based on document          * frequency, then scotr and then the term itself.          *</ol>          *<p/>          * What the score is depends on the suggester being used.          */
DECL|method|sort
specifier|public
name|DirectCandidateGenerator
name|sort
parameter_list|(
name|String
name|sort
parameter_list|)
block|{
name|this
operator|.
name|sort
operator|=
name|sort
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets what string distance implementation to use for comparing how          * similar suggested terms are. Four possible values can be specified:          *<ol>          *<li><code>internal</code> - This is the default and is based on          *<code>damerau_levenshtein</code>, but highly optimized for comparing          * string distance for terms inside the index.          *<li><code>damerau_levenshtein</code> - String distance algorithm          * based on Damerau-Levenshtein algorithm.          *<li><code>levenstein</code> - String distance algorithm based on          * Levenstein edit distance algorithm.          *<li><code>jarowinkler</code> - String distance algorithm based on          * Jaro-Winkler algorithm.          *<li><code>ngram</code> - String distance algorithm based on character          * n-grams.          *</ol>          */
DECL|method|stringDistance
specifier|public
name|DirectCandidateGenerator
name|stringDistance
parameter_list|(
name|String
name|stringDistance
parameter_list|)
block|{
name|this
operator|.
name|stringDistance
operator|=
name|stringDistance
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the maximum edit distance candidate suggestions can have in          * order to be considered as a suggestion. Can only be a value between 1          * and 2. Any other value result in an bad request error being thrown.          * Defaults to<tt>2</tt>.          */
DECL|method|maxEdits
specifier|public
name|DirectCandidateGenerator
name|maxEdits
parameter_list|(
name|Integer
name|maxEdits
parameter_list|)
block|{
name|this
operator|.
name|maxEdits
operator|=
name|maxEdits
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A factor that is used to multiply with the size in order to inspect          * more candidate suggestions. Can improve accuracy at the cost of          * performance. Defaults to<tt>5</tt>.          */
DECL|method|maxInspections
specifier|public
name|DirectCandidateGenerator
name|maxInspections
parameter_list|(
name|Integer
name|maxInspections
parameter_list|)
block|{
name|this
operator|.
name|maxInspections
operator|=
name|maxInspections
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets a maximum threshold in number of documents a suggest text token          * can exist in order to be corrected. Can be a relative percentage          * number (e.g 0.4) or an absolute number to represent document          * frequencies. If an value higher than 1 is specified then fractional          * can not be specified. Defaults to<tt>0.01</tt>.          *<p/>          * This can be used to exclude high frequency terms from being          * suggested. High frequency terms are usually spelled correctly on top          * of this this also improves the suggest performance.          */
DECL|method|maxTermFreq
specifier|public
name|DirectCandidateGenerator
name|maxTermFreq
parameter_list|(
name|float
name|maxTermFreq
parameter_list|)
block|{
name|this
operator|.
name|maxTermFreq
operator|=
name|maxTermFreq
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the number of minimal prefix characters that must match in order          * be a candidate suggestion. Defaults to 1. Increasing this number          * improves suggest performance. Usually misspellings don't occur in the          * beginning of terms.          */
DECL|method|prefixLength
specifier|public
name|DirectCandidateGenerator
name|prefixLength
parameter_list|(
name|int
name|prefixLength
parameter_list|)
block|{
name|this
operator|.
name|prefixLength
operator|=
name|prefixLength
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The minimum length a suggest text term must have in order to be          * corrected. Defaults to<tt>4</tt>.          */
DECL|method|minWordLength
specifier|public
name|DirectCandidateGenerator
name|minWordLength
parameter_list|(
name|int
name|minWordLength
parameter_list|)
block|{
name|this
operator|.
name|minWordLength
operator|=
name|minWordLength
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets a minimal threshold in number of documents a suggested term          * should appear in. This can be specified as an absolute number or as a          * relative percentage of number of documents. This can improve quality          * by only suggesting high frequency terms. Defaults to 0f and is not          * enabled. If a value higher than 1 is specified then the number cannot          * be fractional.          */
DECL|method|minDocFreq
specifier|public
name|DirectCandidateGenerator
name|minDocFreq
parameter_list|(
name|float
name|minDocFreq
parameter_list|)
block|{
name|this
operator|.
name|minDocFreq
operator|=
name|minDocFreq
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets a filter (analyzer) that is applied to each of the tokens passed to this candidate generator.          * This filter is applied to the original token before candidates are generated.          */
DECL|method|preFilter
specifier|public
name|DirectCandidateGenerator
name|preFilter
parameter_list|(
name|String
name|preFilter
parameter_list|)
block|{
name|this
operator|.
name|preFilter
operator|=
name|preFilter
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets a filter (analyzer) that is applied to each of the generated tokens          * before they are passed to the actual phrase scorer.          */
DECL|method|postFilter
specifier|public
name|DirectCandidateGenerator
name|postFilter
parameter_list|(
name|String
name|postFilter
parameter_list|)
block|{
name|this
operator|.
name|postFilter
operator|=
name|postFilter
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"field"
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|suggestMode
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"suggest_mode"
argument_list|,
name|suggestMode
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|accuracy
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"accuracy"
argument_list|,
name|accuracy
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|size
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"size"
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sort
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"sort"
argument_list|,
name|sort
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|stringDistance
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"string_distance"
argument_list|,
name|stringDistance
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|maxEdits
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"max_edits"
argument_list|,
name|maxEdits
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|maxInspections
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"max_inspections"
argument_list|,
name|maxInspections
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|maxTermFreq
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"max_term_freq"
argument_list|,
name|maxTermFreq
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|prefixLength
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"prefix_length"
argument_list|,
name|prefixLength
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|minWordLength
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"min_word_length"
argument_list|,
name|minWordLength
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|minDocFreq
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"min_doc_freq"
argument_list|,
name|minDocFreq
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|preFilter
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"pre_filter"
argument_list|,
name|preFilter
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|postFilter
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"post_filter"
argument_list|,
name|postFilter
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
block|}
block|}
end_class

end_unit

