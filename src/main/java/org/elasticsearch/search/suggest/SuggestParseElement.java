begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.suggest
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spell
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|LevenshteinAutomata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticSearchIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchParseElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|SearchContext
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|SuggestParseElement
specifier|public
class|class
name|SuggestParseElement
implements|implements
name|SearchParseElement
block|{
annotation|@
name|Override
DECL|method|parse
specifier|public
name|void
name|parse
parameter_list|(
name|XContentParser
name|parser
parameter_list|,
name|SearchContext
name|context
parameter_list|)
throws|throws
name|Exception
block|{
name|SuggestionSearchContext
name|suggestionSearchContext
init|=
operator|new
name|SuggestionSearchContext
argument_list|()
decl_stmt|;
name|BytesRef
name|globalText
init|=
literal|null
decl_stmt|;
name|Analyzer
name|defaultAnalyzer
init|=
name|context
operator|.
name|mapperService
argument_list|()
operator|.
name|searchAnalyzer
argument_list|()
decl_stmt|;
name|float
name|defaultAccuracy
init|=
name|SpellChecker
operator|.
name|DEFAULT_ACCURACY
decl_stmt|;
name|int
name|defaultSize
init|=
literal|5
decl_stmt|;
name|SuggestMode
name|defaultSuggestMode
init|=
name|SuggestMode
operator|.
name|SUGGEST_WHEN_NOT_IN_INDEX
decl_stmt|;
name|Suggest
operator|.
name|Suggestion
operator|.
name|Sort
name|defaultSort
init|=
name|Suggest
operator|.
name|Suggestion
operator|.
name|Sort
operator|.
name|SCORE
decl_stmt|;
name|StringDistance
name|defaultStringDistance
init|=
name|DirectSpellChecker
operator|.
name|INTERNAL_LEVENSHTEIN
decl_stmt|;
name|boolean
name|defaultLowerCaseTerms
init|=
literal|false
decl_stmt|;
comment|// changed from Lucene default because we rely on search analyzer to properly handle it
name|int
name|defaultMaxEdits
init|=
name|LevenshteinAutomata
operator|.
name|MAXIMUM_SUPPORTED_DISTANCE
decl_stmt|;
name|int
name|defaultFactor
init|=
literal|5
decl_stmt|;
name|float
name|defaultMaxTermFreq
init|=
literal|0.01f
decl_stmt|;
name|int
name|defaultPrefixLength
init|=
literal|1
decl_stmt|;
name|int
name|defaultMinQueryLength
init|=
literal|4
decl_stmt|;
name|float
name|defaultMinDocFreq
init|=
literal|0f
decl_stmt|;
name|String
name|fieldName
init|=
literal|null
decl_stmt|;
name|XContentParser
operator|.
name|Token
name|token
decl_stmt|;
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
condition|)
block|{
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
condition|)
block|{
name|fieldName
operator|=
name|parser
operator|.
name|currentName
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|.
name|isValue
argument_list|()
condition|)
block|{
if|if
condition|(
literal|"text"
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
condition|)
block|{
name|globalText
operator|=
name|parser
operator|.
name|bytes
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ElasticSearchIllegalArgumentException
argument_list|(
literal|"[suggest] does not support ["
operator|+
name|fieldName
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
condition|)
block|{
name|String
name|suggestionName
init|=
name|fieldName
decl_stmt|;
name|BytesRef
name|suggestText
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
condition|)
block|{
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
condition|)
block|{
name|fieldName
operator|=
name|parser
operator|.
name|currentName
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|.
name|isValue
argument_list|()
condition|)
block|{
if|if
condition|(
literal|"text"
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
condition|)
block|{
name|suggestText
operator|=
name|parser
operator|.
name|bytes
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ElasticSearchIllegalArgumentException
argument_list|(
literal|"[suggest] does not support ["
operator|+
name|fieldName
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
condition|)
block|{
if|if
condition|(
name|suggestionName
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ElasticSearchIllegalArgumentException
argument_list|(
literal|"Suggestion must have name"
argument_list|)
throw|;
block|}
comment|// TODO: Once we have more suggester impls we need to have different parsing logic per suggester.
comment|// This code is now specific for the fuzzy suggester
if|if
condition|(
operator|!
literal|"fuzzy"
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ElasticSearchIllegalArgumentException
argument_list|(
literal|"Suggester["
operator|+
name|fieldName
operator|+
literal|"] not supported"
argument_list|)
throw|;
block|}
name|SuggestionSearchContext
operator|.
name|Suggestion
name|suggestion
init|=
operator|new
name|SuggestionSearchContext
operator|.
name|Suggestion
argument_list|()
decl_stmt|;
name|suggestion
operator|.
name|text
argument_list|(
name|suggestText
argument_list|)
expr_stmt|;
name|suggestionSearchContext
operator|.
name|addSuggestion
argument_list|(
name|suggestionName
argument_list|,
name|suggestion
argument_list|)
expr_stmt|;
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
condition|)
block|{
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
condition|)
block|{
name|fieldName
operator|=
name|parser
operator|.
name|currentName
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|.
name|isValue
argument_list|()
condition|)
block|{
if|if
condition|(
literal|"analyzer"
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
condition|)
block|{
name|String
name|analyzerName
init|=
name|parser
operator|.
name|text
argument_list|()
decl_stmt|;
name|Analyzer
name|analyzer
init|=
name|context
operator|.
name|mapperService
argument_list|()
operator|.
name|analysisService
argument_list|()
operator|.
name|analyzer
argument_list|(
name|analyzerName
argument_list|)
decl_stmt|;
if|if
condition|(
name|analyzer
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ElasticSearchIllegalArgumentException
argument_list|(
literal|"Analyzer ["
operator|+
name|analyzerName
operator|+
literal|"] doesn't exists"
argument_list|)
throw|;
block|}
name|suggestion
operator|.
name|analyzer
argument_list|(
name|analyzer
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"field"
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
condition|)
block|{
name|suggestion
operator|.
name|setField
argument_list|(
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"accuracy"
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
condition|)
block|{
name|suggestion
operator|.
name|accuracy
argument_list|(
name|parser
operator|.
name|floatValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"size"
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
condition|)
block|{
name|suggestion
operator|.
name|size
argument_list|(
name|parser
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"suggest_mode"
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
operator|||
literal|"suggestMode"
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
condition|)
block|{
name|suggestion
operator|.
name|suggestMode
argument_list|(
name|resolveSuggestMode
argument_list|(
name|parser
operator|.
name|text
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"sort"
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
condition|)
block|{
name|suggestion
operator|.
name|sort
argument_list|(
name|resolveSort
argument_list|(
name|parser
operator|.
name|text
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"string_distance"
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
operator|||
literal|"stringDistance"
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
condition|)
block|{
name|suggestion
operator|.
name|stringDistance
argument_list|(
name|resolveDistance
argument_list|(
name|parser
operator|.
name|text
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"lowercase_terms"
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
operator|||
literal|"lowercaseTerms"
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
condition|)
block|{
name|suggestion
operator|.
name|lowerCaseTerms
argument_list|(
name|parser
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"max_edits"
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
operator|||
literal|"maxEdits"
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
operator|||
literal|"fuzziness"
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
condition|)
block|{
name|suggestion
operator|.
name|maxEdits
argument_list|(
name|parser
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|suggestion
operator|.
name|maxEdits
argument_list|()
operator|<
literal|1
operator|||
name|suggestion
operator|.
name|maxEdits
argument_list|()
operator|>
name|LevenshteinAutomata
operator|.
name|MAXIMUM_SUPPORTED_DISTANCE
condition|)
block|{
throw|throw
operator|new
name|ElasticSearchIllegalArgumentException
argument_list|(
literal|"Illegal max_edits value "
operator|+
name|suggestion
operator|.
name|maxEdits
argument_list|()
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"factor"
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
condition|)
block|{
name|suggestion
operator|.
name|factor
argument_list|(
name|parser
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"max_term_freq"
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
operator|||
literal|"maxTermFreq"
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
condition|)
block|{
name|suggestion
operator|.
name|maxTermFreq
argument_list|(
name|parser
operator|.
name|floatValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"prefix_length"
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
operator|||
literal|"prefixLength"
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
condition|)
block|{
name|suggestion
operator|.
name|prefixLength
argument_list|(
name|parser
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"min_word_len"
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
operator|||
literal|"minWordLen"
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
condition|)
block|{
name|suggestion
operator|.
name|minQueryLength
argument_list|(
name|parser
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"min_doc_freq"
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
operator|||
literal|"minDocFreq"
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
condition|)
block|{
name|suggestion
operator|.
name|minDocFreq
argument_list|(
name|parser
operator|.
name|floatValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"shard_size"
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
operator|||
literal|"shardSize"
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
condition|)
block|{
name|suggestion
operator|.
name|shardSize
argument_list|(
name|parser
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ElasticSearchIllegalArgumentException
argument_list|(
literal|"suggester[fuzzy] doesn't support ["
operator|+
name|fieldName
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
comment|// Verify options and set defaults
for|for
control|(
name|SuggestionSearchContext
operator|.
name|Suggestion
name|command
range|:
name|suggestionSearchContext
operator|.
name|suggestions
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|command
operator|.
name|field
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ElasticSearchIllegalArgumentException
argument_list|(
literal|"The required field option is missing"
argument_list|)
throw|;
block|}
if|if
condition|(
name|command
operator|.
name|text
argument_list|()
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|globalText
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ElasticSearchIllegalArgumentException
argument_list|(
literal|"The required text option is missing"
argument_list|)
throw|;
block|}
name|command
operator|.
name|text
argument_list|(
name|globalText
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|command
operator|.
name|analyzer
argument_list|()
operator|==
literal|null
condition|)
block|{
name|command
operator|.
name|analyzer
argument_list|(
name|defaultAnalyzer
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|command
operator|.
name|accuracy
argument_list|()
operator|==
literal|null
condition|)
block|{
name|command
operator|.
name|accuracy
argument_list|(
name|defaultAccuracy
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|command
operator|.
name|size
argument_list|()
operator|==
literal|null
condition|)
block|{
name|command
operator|.
name|size
argument_list|(
name|defaultSize
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|command
operator|.
name|suggestMode
argument_list|()
operator|==
literal|null
condition|)
block|{
name|command
operator|.
name|suggestMode
argument_list|(
name|defaultSuggestMode
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|command
operator|.
name|sort
argument_list|()
operator|==
literal|null
condition|)
block|{
name|command
operator|.
name|sort
argument_list|(
name|defaultSort
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|command
operator|.
name|stringDistance
argument_list|()
operator|==
literal|null
condition|)
block|{
name|command
operator|.
name|stringDistance
argument_list|(
name|defaultStringDistance
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|command
operator|.
name|lowerCaseTerms
argument_list|()
operator|==
literal|null
condition|)
block|{
name|command
operator|.
name|lowerCaseTerms
argument_list|(
name|defaultLowerCaseTerms
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|command
operator|.
name|maxEdits
argument_list|()
operator|==
literal|null
condition|)
block|{
name|command
operator|.
name|maxEdits
argument_list|(
name|defaultMaxEdits
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|command
operator|.
name|factor
argument_list|()
operator|==
literal|null
condition|)
block|{
name|command
operator|.
name|factor
argument_list|(
name|defaultFactor
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|command
operator|.
name|maxTermFreq
argument_list|()
operator|==
literal|null
condition|)
block|{
name|command
operator|.
name|maxTermFreq
argument_list|(
name|defaultMaxTermFreq
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|command
operator|.
name|prefixLength
argument_list|()
operator|==
literal|null
condition|)
block|{
name|command
operator|.
name|prefixLength
argument_list|(
name|defaultPrefixLength
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|command
operator|.
name|minWordLength
argument_list|()
operator|==
literal|null
condition|)
block|{
name|command
operator|.
name|minQueryLength
argument_list|(
name|defaultMinQueryLength
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|command
operator|.
name|minDocFreq
argument_list|()
operator|==
literal|null
condition|)
block|{
name|command
operator|.
name|minDocFreq
argument_list|(
name|defaultMinDocFreq
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|command
operator|.
name|shardSize
argument_list|()
operator|==
literal|null
condition|)
block|{
name|command
operator|.
name|shardSize
argument_list|(
name|defaultSize
argument_list|)
expr_stmt|;
block|}
block|}
name|context
operator|.
name|suggest
argument_list|(
name|suggestionSearchContext
argument_list|)
expr_stmt|;
block|}
DECL|method|resolveSuggestMode
specifier|private
name|SuggestMode
name|resolveSuggestMode
parameter_list|(
name|String
name|sortVal
parameter_list|)
block|{
if|if
condition|(
literal|"missing"
operator|.
name|equals
argument_list|(
name|sortVal
argument_list|)
condition|)
block|{
return|return
name|SuggestMode
operator|.
name|SUGGEST_WHEN_NOT_IN_INDEX
return|;
block|}
elseif|else
if|if
condition|(
literal|"popular"
operator|.
name|equals
argument_list|(
name|sortVal
argument_list|)
condition|)
block|{
return|return
name|SuggestMode
operator|.
name|SUGGEST_MORE_POPULAR
return|;
block|}
elseif|else
if|if
condition|(
literal|"always"
operator|.
name|equals
argument_list|(
name|sortVal
argument_list|)
condition|)
block|{
return|return
name|SuggestMode
operator|.
name|SUGGEST_ALWAYS
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|ElasticSearchIllegalArgumentException
argument_list|(
literal|"Illegal suggest mode "
operator|+
name|sortVal
argument_list|)
throw|;
block|}
block|}
DECL|method|resolveSort
specifier|private
name|Suggest
operator|.
name|Suggestion
operator|.
name|Sort
name|resolveSort
parameter_list|(
name|String
name|sortVal
parameter_list|)
block|{
if|if
condition|(
literal|"score"
operator|.
name|equals
argument_list|(
name|sortVal
argument_list|)
condition|)
block|{
return|return
name|Suggest
operator|.
name|Suggestion
operator|.
name|Sort
operator|.
name|SCORE
return|;
block|}
elseif|else
if|if
condition|(
literal|"frequency"
operator|.
name|equals
argument_list|(
name|sortVal
argument_list|)
condition|)
block|{
return|return
name|Suggest
operator|.
name|Suggestion
operator|.
name|Sort
operator|.
name|FREQUENCY
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|ElasticSearchIllegalArgumentException
argument_list|(
literal|"Illegal suggest sort "
operator|+
name|sortVal
argument_list|)
throw|;
block|}
block|}
DECL|method|resolveDistance
specifier|private
name|StringDistance
name|resolveDistance
parameter_list|(
name|String
name|distanceVal
parameter_list|)
block|{
if|if
condition|(
literal|"internal"
operator|.
name|equals
argument_list|(
name|distanceVal
argument_list|)
condition|)
block|{
return|return
name|DirectSpellChecker
operator|.
name|INTERNAL_LEVENSHTEIN
return|;
block|}
elseif|else
if|if
condition|(
literal|"damerau_levenshtein"
operator|.
name|equals
argument_list|(
name|distanceVal
argument_list|)
condition|)
block|{
return|return
operator|new
name|LuceneLevenshteinDistance
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
literal|"levenstein"
operator|.
name|equals
argument_list|(
name|distanceVal
argument_list|)
condition|)
block|{
return|return
operator|new
name|LevensteinDistance
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
literal|"jarowinkler"
operator|.
name|equals
argument_list|(
name|distanceVal
argument_list|)
condition|)
block|{
return|return
operator|new
name|JaroWinklerDistance
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
literal|"ngram"
operator|.
name|equals
argument_list|(
name|distanceVal
argument_list|)
condition|)
block|{
return|return
operator|new
name|NGramDistance
argument_list|()
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|ElasticSearchIllegalArgumentException
argument_list|(
literal|"Illegal distance option "
operator|+
name|distanceVal
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

