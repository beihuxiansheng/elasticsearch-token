begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.suggest
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchShardTarget
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticSearchIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MapperService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchParseElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|SearchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|SuggestionSearchContext
operator|.
name|SuggestionContext
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|SuggestParseElement
specifier|public
specifier|final
class|class
name|SuggestParseElement
implements|implements
name|SearchParseElement
block|{
DECL|field|suggesters
specifier|private
name|Suggesters
name|suggesters
decl_stmt|;
annotation|@
name|Inject
DECL|method|SuggestParseElement
specifier|public
name|SuggestParseElement
parameter_list|(
name|Suggesters
name|suggesters
parameter_list|)
block|{
name|this
operator|.
name|suggesters
operator|=
name|suggesters
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|parse
specifier|public
name|void
name|parse
parameter_list|(
name|XContentParser
name|parser
parameter_list|,
name|SearchContext
name|context
parameter_list|)
throws|throws
name|Exception
block|{
name|SuggestionSearchContext
name|suggestionSearchContext
init|=
name|parseInternal
argument_list|(
name|parser
argument_list|,
name|context
operator|.
name|mapperService
argument_list|()
argument_list|,
name|context
operator|.
name|shardTarget
argument_list|()
operator|.
name|index
argument_list|()
argument_list|,
name|context
operator|.
name|shardTarget
argument_list|()
operator|.
name|shardId
argument_list|()
argument_list|)
decl_stmt|;
name|context
operator|.
name|suggest
argument_list|(
name|suggestionSearchContext
argument_list|)
expr_stmt|;
block|}
DECL|method|parseInternal
specifier|public
name|SuggestionSearchContext
name|parseInternal
parameter_list|(
name|XContentParser
name|parser
parameter_list|,
name|MapperService
name|mapperService
parameter_list|,
name|String
name|index
parameter_list|,
name|int
name|shardId
parameter_list|)
throws|throws
name|IOException
block|{
name|SuggestionSearchContext
name|suggestionSearchContext
init|=
operator|new
name|SuggestionSearchContext
argument_list|()
decl_stmt|;
name|BytesRef
name|globalText
init|=
literal|null
decl_stmt|;
name|String
name|fieldName
init|=
literal|null
decl_stmt|;
name|XContentParser
operator|.
name|Token
name|token
decl_stmt|;
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
condition|)
block|{
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
condition|)
block|{
name|fieldName
operator|=
name|parser
operator|.
name|currentName
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|.
name|isValue
argument_list|()
condition|)
block|{
if|if
condition|(
literal|"text"
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
condition|)
block|{
name|globalText
operator|=
name|parser
operator|.
name|bytes
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ElasticSearchIllegalArgumentException
argument_list|(
literal|"[suggest] does not support ["
operator|+
name|fieldName
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
condition|)
block|{
name|String
name|suggestionName
init|=
name|fieldName
decl_stmt|;
name|BytesRef
name|suggestText
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
condition|)
block|{
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
condition|)
block|{
name|fieldName
operator|=
name|parser
operator|.
name|currentName
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|.
name|isValue
argument_list|()
condition|)
block|{
if|if
condition|(
literal|"text"
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
condition|)
block|{
name|suggestText
operator|=
name|parser
operator|.
name|bytes
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ElasticSearchIllegalArgumentException
argument_list|(
literal|"[suggest] does not support ["
operator|+
name|fieldName
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
condition|)
block|{
if|if
condition|(
name|suggestionName
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ElasticSearchIllegalArgumentException
argument_list|(
literal|"Suggestion must have name"
argument_list|)
throw|;
block|}
if|if
condition|(
name|suggesters
operator|.
name|get
argument_list|(
name|fieldName
argument_list|)
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ElasticSearchIllegalArgumentException
argument_list|(
literal|"Suggester["
operator|+
name|fieldName
operator|+
literal|"] not supported"
argument_list|)
throw|;
block|}
specifier|final
name|SuggestContextParser
name|contextParser
init|=
name|suggesters
operator|.
name|get
argument_list|(
name|fieldName
argument_list|)
operator|.
name|getContextParser
argument_list|()
decl_stmt|;
name|SuggestionContext
name|suggestion
init|=
name|contextParser
operator|.
name|parse
argument_list|(
name|parser
argument_list|,
name|mapperService
argument_list|)
decl_stmt|;
name|suggestion
operator|.
name|setText
argument_list|(
name|suggestText
argument_list|)
expr_stmt|;
name|suggestion
operator|.
name|setShard
argument_list|(
name|shardId
argument_list|)
expr_stmt|;
name|suggestion
operator|.
name|setIndex
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|SuggestUtils
operator|.
name|verifySuggestion
argument_list|(
name|mapperService
argument_list|,
name|globalText
argument_list|,
name|suggestion
argument_list|)
expr_stmt|;
name|suggestionSearchContext
operator|.
name|addSuggestion
argument_list|(
name|suggestionName
argument_list|,
name|suggestion
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|suggestionSearchContext
return|;
block|}
block|}
end_class

end_unit

