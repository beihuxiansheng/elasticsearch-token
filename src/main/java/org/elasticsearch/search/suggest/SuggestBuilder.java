begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.suggest
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticSearchIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Defines how to perform suggesting. This builders allows a number of global options to be specified and  * an arbitrary number of {@link org.elasticsearch.search.suggest.SuggestBuilder.FuzzySuggestion} instances.  *<p/>  * Suggesting works by suggesting terms that appear in the suggest text that are similar compared to the terms in  * provided text. These spelling suggestions are based on several options described in this class.  */
end_comment

begin_class
DECL|class|SuggestBuilder
specifier|public
class|class
name|SuggestBuilder
implements|implements
name|ToXContent
block|{
DECL|field|globalText
specifier|private
name|String
name|globalText
decl_stmt|;
DECL|field|suggestions
specifier|private
specifier|final
name|List
argument_list|<
name|Suggestion
argument_list|>
name|suggestions
init|=
operator|new
name|ArrayList
argument_list|<
name|Suggestion
argument_list|>
argument_list|()
decl_stmt|;
comment|/**      * Sets the text to provide suggestions for. The suggest text is a required option that needs      * to be set either via this setter or via the {@link org.elasticsearch.search.suggest.SuggestBuilder.Suggestion#setText(String)} method.      *<p/>      * The suggest text gets analyzed by the suggest analyzer or the suggest field search analyzer.      * For each analyzed token, suggested terms are suggested if possible.      */
DECL|method|setText
specifier|public
name|SuggestBuilder
name|setText
parameter_list|(
name|String
name|globalText
parameter_list|)
block|{
name|this
operator|.
name|globalText
operator|=
name|globalText
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Adds an {@link org.elasticsearch.search.suggest.SuggestBuilder.FuzzySuggestion} instance under a user defined name.      * The order in which the<code>Suggestions</code> are added, is the same as in the response.      */
DECL|method|addSuggestion
specifier|public
name|SuggestBuilder
name|addSuggestion
parameter_list|(
name|Suggestion
name|suggestion
parameter_list|)
block|{
name|suggestions
operator|.
name|add
argument_list|(
name|suggestion
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Returns all suggestions with the defined names.      */
DECL|method|getSuggestion
specifier|public
name|List
argument_list|<
name|Suggestion
argument_list|>
name|getSuggestion
parameter_list|()
block|{
return|return
name|suggestions
return|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|(
literal|"suggest"
argument_list|)
expr_stmt|;
if|if
condition|(
name|globalText
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"text"
argument_list|,
name|globalText
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|startObject
argument_list|(
literal|"suggestions"
argument_list|)
expr_stmt|;
for|for
control|(
name|Suggestion
name|suggestion
range|:
name|suggestions
control|)
block|{
name|builder
operator|=
name|suggestion
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
comment|/**      * Convenience factory method.      *      * @param name The name of this suggestion. This is a required parameter.      */
DECL|method|fuzzySuggestion
specifier|public
specifier|static
name|FuzzySuggestion
name|fuzzySuggestion
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
operator|new
name|FuzzySuggestion
argument_list|(
name|name
argument_list|)
return|;
block|}
DECL|class|Suggestion
specifier|public
specifier|static
specifier|abstract
class|class
name|Suggestion
parameter_list|<
name|T
parameter_list|>
implements|implements
name|ToXContent
block|{
DECL|field|name
specifier|private
name|String
name|name
decl_stmt|;
DECL|field|suggester
specifier|private
name|String
name|suggester
decl_stmt|;
DECL|field|text
specifier|private
name|String
name|text
decl_stmt|;
DECL|method|Suggestion
specifier|public
name|Suggestion
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|suggester
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|suggester
operator|=
name|suggester
expr_stmt|;
block|}
comment|/**          * Same as in {@link SuggestBuilder#setText(String)}, but in the suggestion scope.          */
DECL|method|setText
specifier|public
name|T
name|setText
parameter_list|(
name|String
name|text
parameter_list|)
block|{
name|this
operator|.
name|text
operator|=
name|text
expr_stmt|;
return|return
operator|(
name|T
operator|)
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|suggester
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"suggester"
argument_list|,
name|suggester
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|text
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"text"
argument_list|,
name|text
argument_list|)
expr_stmt|;
block|}
name|builder
operator|=
name|innerToXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
DECL|method|innerToXContent
specifier|protected
specifier|abstract
name|XContentBuilder
name|innerToXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
comment|/**      * Defines the actual suggest command. Each command uses the global options unless defined in the suggestion itself.      * All options are the same as the global options, but are only applicable for this suggestion.      */
DECL|class|FuzzySuggestion
specifier|public
specifier|static
class|class
name|FuzzySuggestion
extends|extends
name|Suggestion
argument_list|<
name|FuzzySuggestion
argument_list|>
block|{
DECL|field|field
specifier|private
name|String
name|field
decl_stmt|;
DECL|field|analyzer
specifier|private
name|String
name|analyzer
decl_stmt|;
DECL|field|suggestMode
specifier|private
name|String
name|suggestMode
decl_stmt|;
DECL|field|accuracy
specifier|private
name|Float
name|accuracy
decl_stmt|;
DECL|field|size
specifier|private
name|Integer
name|size
decl_stmt|;
DECL|field|sort
specifier|private
name|String
name|sort
decl_stmt|;
DECL|field|stringDistance
specifier|private
name|String
name|stringDistance
decl_stmt|;
DECL|field|lowerCaseTerms
specifier|private
name|Boolean
name|lowerCaseTerms
decl_stmt|;
DECL|field|maxEdits
specifier|private
name|Integer
name|maxEdits
decl_stmt|;
DECL|field|factor
specifier|private
name|Integer
name|factor
decl_stmt|;
DECL|field|maxTermFreq
specifier|private
name|Float
name|maxTermFreq
decl_stmt|;
DECL|field|prefixLength
specifier|private
name|Integer
name|prefixLength
decl_stmt|;
DECL|field|minWordLength
specifier|private
name|Integer
name|minWordLength
decl_stmt|;
DECL|field|minDocFreq
specifier|private
name|Float
name|minDocFreq
decl_stmt|;
DECL|field|shardSize
specifier|private
name|Integer
name|shardSize
decl_stmt|;
comment|/**          * @param name The name of this suggestion. This is a required parameter.          */
DECL|method|FuzzySuggestion
specifier|public
name|FuzzySuggestion
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
literal|"fuzzy"
argument_list|)
expr_stmt|;
block|}
comment|/**          * Sets from what field to fetch the candidate suggestions from. This is an required option and needs to be set          * via this setter or {@link org.elasticsearch.search.suggest.SuggestBuilder.FuzzySuggestion#setField(String)} method          */
DECL|method|setField
specifier|public
name|FuzzySuggestion
name|setField
parameter_list|(
name|String
name|field
parameter_list|)
block|{
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the analyzer to analyse to suggest text with. Defaults to the search analyzer of the suggest field.          */
DECL|method|setAnalyzer
specifier|public
name|FuzzySuggestion
name|setAnalyzer
parameter_list|(
name|String
name|analyzer
parameter_list|)
block|{
name|this
operator|.
name|analyzer
operator|=
name|analyzer
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The global suggest mode controls what suggested terms are included or controls for what suggest text tokens,          * terms should be suggested for. Three possible values can be specified:          *<ol>          *<li><code>missing</code> - Only suggest terms in the suggest text that aren't in the index. This is the default.          *<li><code>popular</code> - Only suggest terms that occur in more docs then the original suggest text term.          *<li><code>always</code> - Suggest any matching suggest terms based on tokens in the suggest text.          *</ol>          */
DECL|method|setSuggestMode
specifier|public
name|FuzzySuggestion
name|setSuggestMode
parameter_list|(
name|String
name|suggestMode
parameter_list|)
block|{
name|this
operator|.
name|suggestMode
operator|=
name|suggestMode
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets how similar the suggested terms at least need to be compared to the original suggest text tokens.          * A value between 0 and 1 can be specified. This value will be compared to the string distance result of each          * candidate spelling correction.          *<p/>          * Default is 0.5f.          */
DECL|method|setAccuracy
specifier|public
name|FuzzySuggestion
name|setAccuracy
parameter_list|(
name|float
name|accuracy
parameter_list|)
block|{
name|this
operator|.
name|accuracy
operator|=
name|accuracy
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the maximum suggestions to be returned per suggest text term.          */
DECL|method|setSize
specifier|public
name|FuzzySuggestion
name|setSize
parameter_list|(
name|int
name|size
parameter_list|)
block|{
if|if
condition|(
name|size
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|ElasticSearchIllegalArgumentException
argument_list|(
literal|"Size must be positive"
argument_list|)
throw|;
block|}
name|this
operator|.
name|size
operator|=
name|size
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets how to sort the suggest terms per suggest text token.          * Two possible values:          *<ol>          *<li><code>score</code> - Sort should first be based on score, then document frequency and then the term itself.          *<li><code>frequency</code> - Sort should first be based on document frequency, then scotr and then the term itself.          *</ol>          *<p/>          * What the score is depends on the suggester being used.          */
DECL|method|setSort
specifier|public
name|FuzzySuggestion
name|setSort
parameter_list|(
name|String
name|sort
parameter_list|)
block|{
name|this
operator|.
name|sort
operator|=
name|sort
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets what string distance implementation to use for comparing how similar suggested terms are.          * Four possible values can be specified:          *<ol>          *<li><code>internal</code> - This is the default and is based on<code>damerau_levenshtein</code>, but          * highly optimized for comparing string distance for terms inside the index.          *<li><code>damerau_levenshtein</code> - String distance algorithm based on Damerau-Levenshtein algorithm.          *<li><code>levenstein</code> - String distance algorithm based on Levenstein edit distance algorithm.          *<li><code>jarowinkler</code> - String distance algorithm based on Jaro-Winkler algorithm.          *<li><code>ngram</code> - String distance algorithm based on n-grams.          *</ol>          */
DECL|method|setStringDistance
specifier|public
name|FuzzySuggestion
name|setStringDistance
parameter_list|(
name|String
name|stringDistance
parameter_list|)
block|{
name|this
operator|.
name|stringDistance
operator|=
name|stringDistance
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether to lowercase the suggest text tokens just before suggesting terms.          */
DECL|method|setLowerCaseTerms
specifier|public
name|FuzzySuggestion
name|setLowerCaseTerms
parameter_list|(
name|Boolean
name|lowerCaseTerms
parameter_list|)
block|{
name|this
operator|.
name|lowerCaseTerms
operator|=
name|lowerCaseTerms
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the maximum edit distance candidate suggestions can have in order to be considered as a suggestion.          * Can only be a value between 1 and 2. Any other value result in an bad request error being thrown. Defaults to 2.          */
DECL|method|setMaxEdits
specifier|public
name|FuzzySuggestion
name|setMaxEdits
parameter_list|(
name|Integer
name|maxEdits
parameter_list|)
block|{
name|this
operator|.
name|maxEdits
operator|=
name|maxEdits
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A factor that is used to multiply with the size in order to inspect more candidate suggestions.          * Can improve accuracy at the cost of performance. Defaults to 5.          */
DECL|method|setFactor
specifier|public
name|FuzzySuggestion
name|setFactor
parameter_list|(
name|Integer
name|factor
parameter_list|)
block|{
name|this
operator|.
name|factor
operator|=
name|factor
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets a maximum threshold in number of documents a suggest text token can exist in order to be corrected.          * Can be a relative percentage number (e.g 0.4) or an absolute number to represent document frequencies.          * If an value higher than 1 is specified then fractional can not be specified. Defaults to 0.01f.          *<p/>          * This can be used to exclude high frequency terms from being suggested. High frequency terms are usually          * spelled correctly on top of this this also improves the suggest performance.          */
DECL|method|setMaxTermFreq
specifier|public
name|FuzzySuggestion
name|setMaxTermFreq
parameter_list|(
name|float
name|maxTermFreq
parameter_list|)
block|{
name|this
operator|.
name|maxTermFreq
operator|=
name|maxTermFreq
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the number of minimal prefix characters that must match in order be a candidate suggestion.          * Defaults to 1. Increasing this number improves suggest performance. Usually misspellings don't occur in the          * beginning of terms.          */
DECL|method|setPrefixLength
specifier|public
name|FuzzySuggestion
name|setPrefixLength
parameter_list|(
name|int
name|prefixLength
parameter_list|)
block|{
name|this
operator|.
name|prefixLength
operator|=
name|prefixLength
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The minimum length a suggest text term must have in order to be corrected. Defaults to 4.          */
DECL|method|setMinWordLength
specifier|public
name|FuzzySuggestion
name|setMinWordLength
parameter_list|(
name|int
name|minWordLength
parameter_list|)
block|{
name|this
operator|.
name|minWordLength
operator|=
name|minWordLength
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets a minimal threshold in number of documents a suggested term should appear in. This can be specified as          * an absolute number or as a relative percentage of number of documents. This can improve quality by only suggesting          * high frequency terms. Defaults to 0f and is not enabled. If a value higher than 1 is specified then the number          * cannot be fractional.          */
DECL|method|setMinDocFreq
specifier|public
name|FuzzySuggestion
name|setMinDocFreq
parameter_list|(
name|float
name|minDocFreq
parameter_list|)
block|{
name|this
operator|.
name|minDocFreq
operator|=
name|minDocFreq
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the maximum number of suggested term to be retrieved from each individual shard. During the reduce          * phase the only the top N suggestions are returned based on the<code>size</code> option. Defaults to the          *<code>size</code> option.          *<p/>          * Setting this to a value higher than the `size` can be useful in order to get a more accurate document frequency          * for suggested terms. Due to the fact that terms are partitioned amongst shards, the shard level document          * frequencies of suggestions may not be precise. Increasing this will make these document frequencies          * more precise.          */
DECL|method|setShardSize
specifier|public
name|FuzzySuggestion
name|setShardSize
parameter_list|(
name|Integer
name|shardSize
parameter_list|)
block|{
name|this
operator|.
name|shardSize
operator|=
name|shardSize
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|innerToXContent
specifier|public
name|XContentBuilder
name|innerToXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|analyzer
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
name|analyzer
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|field
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"field"
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|suggestMode
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"suggest_mode"
argument_list|,
name|suggestMode
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|accuracy
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"accuracy"
argument_list|,
name|accuracy
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|size
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"size"
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sort
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"sort"
argument_list|,
name|sort
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|stringDistance
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"string_distance"
argument_list|,
name|stringDistance
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|lowerCaseTerms
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"lowercase_terms"
argument_list|,
name|lowerCaseTerms
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|maxEdits
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"max_edits"
argument_list|,
name|maxEdits
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|factor
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"factor"
argument_list|,
name|factor
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|maxTermFreq
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"max_term_freq"
argument_list|,
name|maxTermFreq
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|prefixLength
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"prefix_length"
argument_list|,
name|prefixLength
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|minWordLength
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"min_word_len"
argument_list|,
name|minWordLength
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|minDocFreq
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"min_doc_freq"
argument_list|,
name|minDocFreq
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|shardSize
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"shard_size"
argument_list|,
name|shardSize
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
return|;
block|}
block|}
block|}
end_class

end_unit

