begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.suggest
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|context
operator|.
name|ContextMapping
operator|.
name|ContextQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|context
operator|.
name|CategoryContextMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|context
operator|.
name|GeolocationContextMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|phrase
operator|.
name|PhraseSuggestionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|term
operator|.
name|TermSuggestionBuilder
import|;
end_import

begin_comment
comment|/**  * Defines how to perform suggesting. This builders allows a number of global options to be specified and  * an arbitrary number of {@link org.elasticsearch.search.suggest.SuggestBuilder.TermSuggestionBuilder} instances.  *<p/>  * Suggesting works by suggesting terms that appear in the suggest text that are similar compared to the terms in  * provided text. These spelling suggestions are based on several options described in this class.  */
end_comment

begin_class
DECL|class|SuggestBuilder
specifier|public
class|class
name|SuggestBuilder
implements|implements
name|ToXContent
block|{
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|globalText
specifier|private
name|String
name|globalText
decl_stmt|;
DECL|field|suggestions
specifier|private
specifier|final
name|List
argument_list|<
name|SuggestionBuilder
argument_list|<
name|?
argument_list|>
argument_list|>
name|suggestions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|SuggestBuilder
specifier|public
name|SuggestBuilder
parameter_list|()
block|{
name|this
operator|.
name|name
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|SuggestBuilder
specifier|public
name|SuggestBuilder
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
comment|/**      * Sets the text to provide suggestions for. The suggest text is a required option that needs      * to be set either via this setter or via the {@link org.elasticsearch.search.suggest.SuggestBuilder.SuggestionBuilder#setText(String)} method.      *<p/>      * The suggest text gets analyzed by the suggest analyzer or the suggest field search analyzer.      * For each analyzed token, suggested terms are suggested if possible.      */
DECL|method|setText
specifier|public
name|SuggestBuilder
name|setText
parameter_list|(
name|String
name|globalText
parameter_list|)
block|{
name|this
operator|.
name|globalText
operator|=
name|globalText
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Adds an {@link org.elasticsearch.search.suggest.SuggestBuilder.TermSuggestionBuilder} instance under a user defined name.      * The order in which the<code>Suggestions</code> are added, is the same as in the response.      */
DECL|method|addSuggestion
specifier|public
name|SuggestBuilder
name|addSuggestion
parameter_list|(
name|SuggestionBuilder
argument_list|<
name|?
argument_list|>
name|suggestion
parameter_list|)
block|{
name|suggestions
operator|.
name|add
argument_list|(
name|suggestion
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Returns all suggestions with the defined names.      */
DECL|method|getSuggestion
specifier|public
name|List
argument_list|<
name|SuggestionBuilder
argument_list|<
name|?
argument_list|>
argument_list|>
name|getSuggestion
parameter_list|()
block|{
return|return
name|suggestions
return|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|globalText
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"text"
argument_list|,
name|globalText
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|SuggestionBuilder
argument_list|<
name|?
argument_list|>
name|suggestion
range|:
name|suggestions
control|)
block|{
name|builder
operator|=
name|suggestion
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
comment|/**      * Convenience factory method.      *      * @param name The name of this suggestion. This is a required parameter.      */
DECL|method|termSuggestion
specifier|public
specifier|static
name|TermSuggestionBuilder
name|termSuggestion
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
operator|new
name|TermSuggestionBuilder
argument_list|(
name|name
argument_list|)
return|;
block|}
comment|/**      * Convenience factory method.      *      * @param name The name of this suggestion. This is a required parameter.      */
DECL|method|phraseSuggestion
specifier|public
specifier|static
name|PhraseSuggestionBuilder
name|phraseSuggestion
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
operator|new
name|PhraseSuggestionBuilder
argument_list|(
name|name
argument_list|)
return|;
block|}
DECL|class|SuggestionBuilder
specifier|public
specifier|static
specifier|abstract
class|class
name|SuggestionBuilder
parameter_list|<
name|T
parameter_list|>
implements|implements
name|ToXContent
block|{
DECL|field|name
specifier|private
name|String
name|name
decl_stmt|;
DECL|field|suggester
specifier|private
name|String
name|suggester
decl_stmt|;
DECL|field|text
specifier|private
name|String
name|text
decl_stmt|;
DECL|field|field
specifier|private
name|String
name|field
decl_stmt|;
DECL|field|analyzer
specifier|private
name|String
name|analyzer
decl_stmt|;
DECL|field|size
specifier|private
name|Integer
name|size
decl_stmt|;
DECL|field|shardSize
specifier|private
name|Integer
name|shardSize
decl_stmt|;
DECL|field|contextQueries
specifier|private
name|List
argument_list|<
name|ContextQuery
argument_list|>
name|contextQueries
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|SuggestionBuilder
specifier|public
name|SuggestionBuilder
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|suggester
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|suggester
operator|=
name|suggester
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|addContextQuery
specifier|private
name|T
name|addContextQuery
parameter_list|(
name|ContextQuery
name|ctx
parameter_list|)
block|{
name|this
operator|.
name|contextQueries
operator|.
name|add
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
return|return
operator|(
name|T
operator|)
name|this
return|;
block|}
comment|/**          * Setup a Geolocation for suggestions. See {@link GeoContextMapping}.          * @param lat Latitude of the location          * @param lon Longitude of the Location          * @return this          */
DECL|method|addGeoLocation
specifier|public
name|T
name|addGeoLocation
parameter_list|(
name|String
name|name
parameter_list|,
name|double
name|lat
parameter_list|,
name|double
name|lon
parameter_list|)
block|{
return|return
name|addContextQuery
argument_list|(
name|GeolocationContextMapping
operator|.
name|query
argument_list|(
name|name
argument_list|,
name|lat
argument_list|,
name|lon
argument_list|)
argument_list|)
return|;
block|}
comment|/**          * Setup a Geolocation for suggestions. See {@link GeoContextMapping}.          * @param geohash Geohash of the location          * @return this          */
DECL|method|addGeoLocation
specifier|public
name|T
name|addGeoLocation
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|geohash
parameter_list|)
block|{
return|return
name|addContextQuery
argument_list|(
name|GeolocationContextMapping
operator|.
name|query
argument_list|(
name|name
argument_list|,
name|geohash
argument_list|)
argument_list|)
return|;
block|}
comment|/**          * Setup a Category for suggestions. See {@link CategoryMapping}.          * @param category name of the category          * @return this          */
DECL|method|addCategory
specifier|public
name|T
name|addCategory
parameter_list|(
name|String
name|name
parameter_list|,
name|CharSequence
modifier|...
name|categories
parameter_list|)
block|{
return|return
name|addContextQuery
argument_list|(
name|CategoryContextMapping
operator|.
name|query
argument_list|(
name|name
argument_list|,
name|categories
argument_list|)
argument_list|)
return|;
block|}
comment|/**          * Setup a Category for suggestions. See {@link CategoryMapping}.          * @param category name of the category          * @return this          */
DECL|method|addCategory
specifier|public
name|T
name|addCategory
parameter_list|(
name|String
name|name
parameter_list|,
name|Iterable
argument_list|<
name|?
extends|extends
name|CharSequence
argument_list|>
name|categories
parameter_list|)
block|{
return|return
name|addContextQuery
argument_list|(
name|CategoryContextMapping
operator|.
name|query
argument_list|(
name|name
argument_list|,
name|categories
argument_list|)
argument_list|)
return|;
block|}
comment|/**          * Setup a Context Field for suggestions. See {@link CategoryContextMapping}.          * @param category name of the category          * @return this          */
DECL|method|addContextField
specifier|public
name|T
name|addContextField
parameter_list|(
name|String
name|name
parameter_list|,
name|CharSequence
modifier|...
name|fieldvalues
parameter_list|)
block|{
return|return
name|addContextQuery
argument_list|(
name|CategoryContextMapping
operator|.
name|query
argument_list|(
name|name
argument_list|,
name|fieldvalues
argument_list|)
argument_list|)
return|;
block|}
comment|/**          * Setup a Context Field for suggestions. See {@link CategoryContextMapping}.          * @param category name of the category          * @return this          */
DECL|method|addContextField
specifier|public
name|T
name|addContextField
parameter_list|(
name|String
name|name
parameter_list|,
name|Iterable
argument_list|<
name|?
extends|extends
name|CharSequence
argument_list|>
name|fieldvalues
parameter_list|)
block|{
return|return
name|addContextQuery
argument_list|(
name|CategoryContextMapping
operator|.
name|query
argument_list|(
name|name
argument_list|,
name|fieldvalues
argument_list|)
argument_list|)
return|;
block|}
comment|/**          * Same as in {@link SuggestBuilder#setText(String)}, but in the suggestion scope.          */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|text
specifier|public
name|T
name|text
parameter_list|(
name|String
name|text
parameter_list|)
block|{
name|this
operator|.
name|text
operator|=
name|text
expr_stmt|;
return|return
operator|(
name|T
operator|)
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|text
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"text"
argument_list|,
name|text
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|startObject
argument_list|(
name|suggester
argument_list|)
expr_stmt|;
if|if
condition|(
name|analyzer
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
name|analyzer
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|field
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"field"
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|size
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"size"
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|shardSize
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"shard_size"
argument_list|,
name|shardSize
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|contextQueries
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|builder
operator|.
name|startObject
argument_list|(
literal|"context"
argument_list|)
expr_stmt|;
for|for
control|(
name|ContextQuery
name|query
range|:
name|contextQueries
control|)
block|{
name|query
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
name|builder
operator|=
name|innerToXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
DECL|method|innerToXContent
specifier|protected
specifier|abstract
name|XContentBuilder
name|innerToXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**          * Sets from what field to fetch the candidate suggestions from. This is an          * required option and needs to be set via this setter or          * {@link org.elasticsearch.search.suggest.SuggestBuilder.TermSuggestionBuilder#setField(String)}          * method          */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|field
specifier|public
name|T
name|field
parameter_list|(
name|String
name|field
parameter_list|)
block|{
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
return|return
operator|(
name|T
operator|)
name|this
return|;
block|}
comment|/**          * Sets the analyzer to analyse to suggest text with. Defaults to the search          * analyzer of the suggest field.          */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|analyzer
specifier|public
name|T
name|analyzer
parameter_list|(
name|String
name|analyzer
parameter_list|)
block|{
name|this
operator|.
name|analyzer
operator|=
name|analyzer
expr_stmt|;
return|return
operator|(
name|T
operator|)
name|this
return|;
block|}
comment|/**          * Sets the maximum suggestions to be returned per suggest text term.          */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|size
specifier|public
name|T
name|size
parameter_list|(
name|int
name|size
parameter_list|)
block|{
if|if
condition|(
name|size
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|ElasticsearchIllegalArgumentException
argument_list|(
literal|"Size must be positive"
argument_list|)
throw|;
block|}
name|this
operator|.
name|size
operator|=
name|size
expr_stmt|;
return|return
operator|(
name|T
operator|)
name|this
return|;
block|}
comment|/**          * Sets the maximum number of suggested term to be retrieved from each          * individual shard. During the reduce phase the only the top N suggestions          * are returned based on the<code>size</code> option. Defaults to the          *<code>size</code> option.          *<p/>          * Setting this to a value higher than the `size` can be useful in order to          * get a more accurate document frequency for suggested terms. Due to the          * fact that terms are partitioned amongst shards, the shard level document          * frequencies of suggestions may not be precise. Increasing this will make          * these document frequencies more precise.          */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|shardSize
specifier|public
name|T
name|shardSize
parameter_list|(
name|Integer
name|shardSize
parameter_list|)
block|{
name|this
operator|.
name|shardSize
operator|=
name|shardSize
expr_stmt|;
return|return
operator|(
name|T
operator|)
name|this
return|;
block|}
block|}
block|}
end_class

end_unit

