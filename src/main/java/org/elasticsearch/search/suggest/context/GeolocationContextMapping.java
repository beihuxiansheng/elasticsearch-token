begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.suggest.context
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|context
package|;
end_package

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|IntHashSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|PrefixAnalyzer
operator|.
name|PrefixTokenFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocValuesType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexableField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|Automata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|Automaton
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|Operations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|fst
operator|.
name|FST
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|geo
operator|.
name|GeoHashUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|geo
operator|.
name|GeoPoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|geo
operator|.
name|GeoUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|DistanceUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|FieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|ParseContext
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|geo
operator|.
name|GeoPointFieldMapper
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * The {@link GeolocationContextMapping} allows to take GeoInfomation into account  * during building suggestions. The mapping itself works with geohashes  * explicitly and is configured by three parameters:  *<ul>  *<li><code>precision</code>: length of the geohash indexed as prefix of the  * completion field</li>  *<li><code>neighbors</code>: Should the neighbor cells of the deepest geohash  * level also be indexed as alternatives to the actual geohash</li>  *<li><code>location</code>: (optional) location assumed if it is not provided</li>  *</ul>  * Internally this mapping wraps the suggestions into a form  *<code>[geohash][suggestion]</code>. If the neighbor option is set the cells  * next to the cell on the deepest geohash level (<code>precision</code>) will  * be indexed as well. The {@link TokenStream} used to build the {@link FST} for  * suggestion will be wrapped into a {@link PrefixTokenFilter} managing these  * geohases as prefixes.  */
end_comment

begin_class
DECL|class|GeolocationContextMapping
specifier|public
class|class
name|GeolocationContextMapping
extends|extends
name|ContextMapping
block|{
DECL|field|TYPE
specifier|public
specifier|static
specifier|final
name|String
name|TYPE
init|=
literal|"geo"
decl_stmt|;
DECL|field|FIELD_PRECISION
specifier|public
specifier|static
specifier|final
name|String
name|FIELD_PRECISION
init|=
literal|"precision"
decl_stmt|;
DECL|field|FIELD_NEIGHBORS
specifier|public
specifier|static
specifier|final
name|String
name|FIELD_NEIGHBORS
init|=
literal|"neighbors"
decl_stmt|;
DECL|field|FIELD_FIELDNAME
specifier|public
specifier|static
specifier|final
name|String
name|FIELD_FIELDNAME
init|=
literal|"path"
decl_stmt|;
DECL|field|defaultLocations
specifier|private
specifier|final
name|Collection
argument_list|<
name|String
argument_list|>
name|defaultLocations
decl_stmt|;
DECL|field|precision
specifier|private
specifier|final
name|int
index|[]
name|precision
decl_stmt|;
DECL|field|neighbors
specifier|private
specifier|final
name|boolean
name|neighbors
decl_stmt|;
DECL|field|fieldName
specifier|private
specifier|final
name|String
name|fieldName
decl_stmt|;
DECL|field|defaultConfig
specifier|private
specifier|final
name|GeoConfig
name|defaultConfig
decl_stmt|;
comment|/**      * Create a new {@link GeolocationContextMapping} with a given precision      *       * @param precision      *            length of the geohashes      * @param neighbors      *            should neighbors be indexed      * @param defaultLocations      *            location to use, if it is not provided by the document      */
DECL|method|GeolocationContextMapping
specifier|protected
name|GeolocationContextMapping
parameter_list|(
name|String
name|name
parameter_list|,
name|int
index|[]
name|precision
parameter_list|,
name|boolean
name|neighbors
parameter_list|,
name|Collection
argument_list|<
name|String
argument_list|>
name|defaultLocations
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|super
argument_list|(
name|TYPE
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|precision
operator|=
name|precision
expr_stmt|;
name|this
operator|.
name|neighbors
operator|=
name|neighbors
expr_stmt|;
name|this
operator|.
name|defaultLocations
operator|=
name|defaultLocations
expr_stmt|;
name|this
operator|.
name|fieldName
operator|=
name|fieldName
expr_stmt|;
name|this
operator|.
name|defaultConfig
operator|=
operator|new
name|GeoConfig
argument_list|(
name|this
argument_list|,
name|defaultLocations
argument_list|)
expr_stmt|;
block|}
comment|/**      * load a {@link GeolocationContextMapping} by configuration. Such a configuration      * can set the parameters      *<ul>      *<li>precision [<code>String</code>,<code>Double</code>,      *<code>Float</code> or<code>Integer</code>] defines the length of the      * underlying geohash</li>      *<li>defaultLocation [<code>String</code>] defines the location to use if      * it is not provided by the document</li>      *<li>neighbors [<code>Boolean</code>] defines if the last level of the      * geohash should be extended by neighbor cells</li>      *</ul>      *       * @param config      *            Configuration for {@link GeolocationContextMapping}      * @return new {@link GeolocationContextMapping} configured by the parameters of      *<code>config</code>      */
DECL|method|load
specifier|protected
specifier|static
name|GeolocationContextMapping
name|load
parameter_list|(
name|String
name|name
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
parameter_list|)
block|{
if|if
condition|(
operator|!
name|config
operator|.
name|containsKey
argument_list|(
name|FIELD_PRECISION
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ElasticsearchParseException
argument_list|(
literal|"field [precision] is missing"
argument_list|)
throw|;
block|}
specifier|final
name|GeolocationContextMapping
operator|.
name|Builder
name|builder
init|=
operator|new
name|GeolocationContextMapping
operator|.
name|Builder
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|config
operator|!=
literal|null
condition|)
block|{
specifier|final
name|Object
name|configPrecision
init|=
name|config
operator|.
name|get
argument_list|(
name|FIELD_PRECISION
argument_list|)
decl_stmt|;
if|if
condition|(
name|configPrecision
operator|==
literal|null
condition|)
block|{
comment|// ignore precision
block|}
elseif|else
if|if
condition|(
name|configPrecision
operator|instanceof
name|Integer
condition|)
block|{
name|builder
operator|.
name|precision
argument_list|(
operator|(
name|Integer
operator|)
name|configPrecision
argument_list|)
expr_stmt|;
name|config
operator|.
name|remove
argument_list|(
name|FIELD_PRECISION
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configPrecision
operator|instanceof
name|Long
condition|)
block|{
name|builder
operator|.
name|precision
argument_list|(
operator|(
name|Long
operator|)
name|configPrecision
argument_list|)
expr_stmt|;
name|config
operator|.
name|remove
argument_list|(
name|FIELD_PRECISION
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configPrecision
operator|instanceof
name|Double
condition|)
block|{
name|builder
operator|.
name|precision
argument_list|(
operator|(
name|Double
operator|)
name|configPrecision
argument_list|)
expr_stmt|;
name|config
operator|.
name|remove
argument_list|(
name|FIELD_PRECISION
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configPrecision
operator|instanceof
name|Float
condition|)
block|{
name|builder
operator|.
name|precision
argument_list|(
operator|(
name|Float
operator|)
name|configPrecision
argument_list|)
expr_stmt|;
name|config
operator|.
name|remove
argument_list|(
name|FIELD_PRECISION
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configPrecision
operator|instanceof
name|Iterable
condition|)
block|{
for|for
control|(
name|Object
name|precision
range|:
operator|(
name|Iterable
operator|)
name|configPrecision
control|)
block|{
if|if
condition|(
name|precision
operator|instanceof
name|Integer
condition|)
block|{
name|builder
operator|.
name|precision
argument_list|(
operator|(
name|Integer
operator|)
name|precision
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|precision
operator|instanceof
name|Long
condition|)
block|{
name|builder
operator|.
name|precision
argument_list|(
operator|(
name|Long
operator|)
name|precision
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|precision
operator|instanceof
name|Double
condition|)
block|{
name|builder
operator|.
name|precision
argument_list|(
operator|(
name|Double
operator|)
name|precision
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|precision
operator|instanceof
name|Float
condition|)
block|{
name|builder
operator|.
name|precision
argument_list|(
operator|(
name|Float
operator|)
name|precision
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|precision
argument_list|(
name|precision
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|config
operator|.
name|remove
argument_list|(
name|FIELD_PRECISION
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|precision
argument_list|(
name|configPrecision
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|config
operator|.
name|remove
argument_list|(
name|FIELD_PRECISION
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Object
name|configNeighbors
init|=
name|config
operator|.
name|get
argument_list|(
name|FIELD_NEIGHBORS
argument_list|)
decl_stmt|;
if|if
condition|(
name|configNeighbors
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|neighbors
argument_list|(
operator|(
name|Boolean
operator|)
name|configNeighbors
argument_list|)
expr_stmt|;
name|config
operator|.
name|remove
argument_list|(
name|FIELD_NEIGHBORS
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Object
name|def
init|=
name|config
operator|.
name|get
argument_list|(
name|FIELD_MISSING
argument_list|)
decl_stmt|;
if|if
condition|(
name|def
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|def
operator|instanceof
name|Iterable
condition|)
block|{
for|for
control|(
name|Object
name|location
range|:
operator|(
name|Iterable
operator|)
name|def
control|)
block|{
name|builder
operator|.
name|addDefaultLocation
argument_list|(
name|location
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|def
operator|instanceof
name|String
condition|)
block|{
name|builder
operator|.
name|addDefaultLocation
argument_list|(
name|def
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|def
operator|instanceof
name|Map
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|latlonMap
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|def
decl_stmt|;
if|if
condition|(
operator|!
name|latlonMap
operator|.
name|containsKey
argument_list|(
literal|"lat"
argument_list|)
operator|||
operator|!
operator|(
name|latlonMap
operator|.
name|get
argument_list|(
literal|"lat"
argument_list|)
operator|instanceof
name|Double
operator|)
condition|)
block|{
throw|throw
operator|new
name|ElasticsearchParseException
argument_list|(
literal|"field ["
operator|+
name|FIELD_MISSING
operator|+
literal|"] map must have field lat and a valid latitude"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|latlonMap
operator|.
name|containsKey
argument_list|(
literal|"lon"
argument_list|)
operator|||
operator|!
operator|(
name|latlonMap
operator|.
name|get
argument_list|(
literal|"lon"
argument_list|)
operator|instanceof
name|Double
operator|)
condition|)
block|{
throw|throw
operator|new
name|ElasticsearchParseException
argument_list|(
literal|"field ["
operator|+
name|FIELD_MISSING
operator|+
literal|"] map must have field lon and a valid longitude"
argument_list|)
throw|;
block|}
name|builder
operator|.
name|addDefaultLocation
argument_list|(
name|Double
operator|.
name|valueOf
argument_list|(
name|latlonMap
operator|.
name|get
argument_list|(
literal|"lat"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|Double
operator|.
name|valueOf
argument_list|(
name|latlonMap
operator|.
name|get
argument_list|(
literal|"lon"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ElasticsearchParseException
argument_list|(
literal|"field ["
operator|+
name|FIELD_MISSING
operator|+
literal|"] must be of type string or list"
argument_list|)
throw|;
block|}
name|config
operator|.
name|remove
argument_list|(
name|FIELD_MISSING
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Object
name|fieldName
init|=
name|config
operator|.
name|get
argument_list|(
name|FIELD_FIELDNAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|fieldName
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|fieldName
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|config
operator|.
name|remove
argument_list|(
name|FIELD_FIELDNAME
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|toInnerXContent
specifier|protected
name|XContentBuilder
name|toInnerXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|field
argument_list|(
name|FIELD_PRECISION
argument_list|,
name|precision
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|FIELD_NEIGHBORS
argument_list|,
name|neighbors
argument_list|)
expr_stmt|;
if|if
condition|(
name|defaultLocations
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|startArray
argument_list|(
name|FIELD_MISSING
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|defaultLocation
range|:
name|defaultLocations
control|)
block|{
name|builder
operator|.
name|value
argument_list|(
name|defaultLocation
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|fieldName
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|FIELD_FIELDNAME
argument_list|,
name|fieldName
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
return|;
block|}
DECL|method|parseSinglePointOrList
specifier|protected
specifier|static
name|Collection
argument_list|<
name|String
argument_list|>
name|parseSinglePointOrList
parameter_list|(
name|XContentParser
name|parser
parameter_list|)
throws|throws
name|IOException
block|{
name|Token
name|token
init|=
name|parser
operator|.
name|currentToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|token
operator|==
name|Token
operator|.
name|START_ARRAY
condition|)
block|{
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
comment|// Test if value is a single point in<code>[lon, lat]</code> format
if|if
condition|(
name|token
operator|==
name|Token
operator|.
name|VALUE_NUMBER
condition|)
block|{
name|double
name|lon
init|=
name|parser
operator|.
name|doubleValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|parser
operator|.
name|nextToken
argument_list|()
operator|==
name|Token
operator|.
name|VALUE_NUMBER
condition|)
block|{
name|double
name|lat
init|=
name|parser
operator|.
name|doubleValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|parser
operator|.
name|nextToken
argument_list|()
operator|==
name|Token
operator|.
name|END_ARRAY
condition|)
block|{
return|return
name|Collections
operator|.
name|singleton
argument_list|(
name|GeoHashUtils
operator|.
name|encode
argument_list|(
name|lat
argument_list|,
name|lon
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|ElasticsearchParseException
argument_list|(
literal|"only two values expected"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|ElasticsearchParseException
argument_list|(
literal|"latitue must be a numeric value"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
comment|// otherwise it's a list of locations
name|ArrayList
argument_list|<
name|String
argument_list|>
name|result
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
while|while
condition|(
name|token
operator|!=
name|Token
operator|.
name|END_ARRAY
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|GeoUtils
operator|.
name|parseGeoPoint
argument_list|(
name|parser
argument_list|)
operator|.
name|geohash
argument_list|()
argument_list|)
expr_stmt|;
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
comment|//infinite loop without this line
block|}
return|return
name|result
return|;
block|}
block|}
else|else
block|{
comment|// or a single location
return|return
name|Collections
operator|.
name|singleton
argument_list|(
name|GeoUtils
operator|.
name|parseGeoPoint
argument_list|(
name|parser
argument_list|)
operator|.
name|geohash
argument_list|()
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|defaultConfig
specifier|public
name|ContextConfig
name|defaultConfig
parameter_list|()
block|{
return|return
name|defaultConfig
return|;
block|}
annotation|@
name|Override
DECL|method|parseContext
specifier|public
name|ContextConfig
name|parseContext
parameter_list|(
name|ParseContext
name|parseContext
parameter_list|,
name|XContentParser
name|parser
parameter_list|)
throws|throws
name|IOException
throws|,
name|ElasticsearchParseException
block|{
if|if
condition|(
name|fieldName
operator|!=
literal|null
condition|)
block|{
name|FieldMapper
argument_list|<
name|?
argument_list|>
name|mapper
init|=
name|parseContext
operator|.
name|docMapper
argument_list|()
operator|.
name|mappers
argument_list|()
operator|.
name|getMapper
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|mapper
operator|instanceof
name|GeoPointFieldMapper
operator|)
condition|)
block|{
throw|throw
operator|new
name|ElasticsearchParseException
argument_list|(
literal|"referenced field must be mapped to geo_point"
argument_list|)
throw|;
block|}
block|}
name|Collection
argument_list|<
name|String
argument_list|>
name|locations
decl_stmt|;
if|if
condition|(
name|parser
operator|.
name|currentToken
argument_list|()
operator|==
name|Token
operator|.
name|VALUE_NULL
condition|)
block|{
name|locations
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|locations
operator|=
name|parseSinglePointOrList
argument_list|(
name|parser
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|GeoConfig
argument_list|(
name|this
argument_list|,
name|locations
argument_list|)
return|;
block|}
comment|/**      * Create a new geolocation query from a given GeoPoint      *       * @param point      *            query location      * @return new geolocation query      */
DECL|method|query
specifier|public
specifier|static
name|GeoQuery
name|query
parameter_list|(
name|String
name|name
parameter_list|,
name|GeoPoint
name|point
parameter_list|)
block|{
return|return
name|query
argument_list|(
name|name
argument_list|,
name|point
operator|.
name|getGeohash
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Create a new geolocation query from a given geocoordinate      *       * @param lat      *            latitude of the location      * @param lon      *            longitude of the location      * @return new geolocation query      */
DECL|method|query
specifier|public
specifier|static
name|GeoQuery
name|query
parameter_list|(
name|String
name|name
parameter_list|,
name|double
name|lat
parameter_list|,
name|double
name|lon
parameter_list|,
name|int
modifier|...
name|precisions
parameter_list|)
block|{
return|return
name|query
argument_list|(
name|name
argument_list|,
name|GeoHashUtils
operator|.
name|encode
argument_list|(
name|lat
argument_list|,
name|lon
argument_list|)
argument_list|,
name|precisions
argument_list|)
return|;
block|}
DECL|method|query
specifier|public
specifier|static
name|GeoQuery
name|query
parameter_list|(
name|String
name|name
parameter_list|,
name|double
name|lat
parameter_list|,
name|double
name|lon
parameter_list|,
name|String
modifier|...
name|precisions
parameter_list|)
block|{
name|int
name|precisionInts
index|[]
init|=
operator|new
name|int
index|[
name|precisions
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|precisions
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|precisionInts
index|[
name|i
index|]
operator|=
name|GeoUtils
operator|.
name|geoHashLevelsForPrecision
argument_list|(
name|precisions
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|query
argument_list|(
name|name
argument_list|,
name|GeoHashUtils
operator|.
name|encode
argument_list|(
name|lat
argument_list|,
name|lon
argument_list|)
argument_list|,
name|precisionInts
argument_list|)
return|;
block|}
comment|/**      * Create a new geolocation query from a given geohash      *       * @param geohash      *            geohash of the location      * @return new geolocation query      */
DECL|method|query
specifier|public
specifier|static
name|GeoQuery
name|query
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|geohash
parameter_list|,
name|int
modifier|...
name|precisions
parameter_list|)
block|{
return|return
operator|new
name|GeoQuery
argument_list|(
name|name
argument_list|,
name|geohash
argument_list|,
name|precisions
argument_list|)
return|;
block|}
DECL|method|parsePrecision
specifier|private
specifier|static
specifier|final
name|int
name|parsePrecision
parameter_list|(
name|XContentParser
name|parser
parameter_list|)
throws|throws
name|IOException
throws|,
name|ElasticsearchParseException
block|{
switch|switch
condition|(
name|parser
operator|.
name|currentToken
argument_list|()
condition|)
block|{
case|case
name|VALUE_STRING
case|:
return|return
name|GeoUtils
operator|.
name|geoHashLevelsForPrecision
argument_list|(
name|parser
operator|.
name|text
argument_list|()
argument_list|)
return|;
case|case
name|VALUE_NUMBER
case|:
switch|switch
condition|(
name|parser
operator|.
name|numberType
argument_list|()
condition|)
block|{
case|case
name|INT
case|:
case|case
name|LONG
case|:
return|return
name|parser
operator|.
name|intValue
argument_list|()
return|;
default|default:
return|return
name|GeoUtils
operator|.
name|geoHashLevelsForPrecision
argument_list|(
name|parser
operator|.
name|doubleValue
argument_list|()
argument_list|)
return|;
block|}
default|default:
throw|throw
operator|new
name|ElasticsearchParseException
argument_list|(
literal|"invalid precision value"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|parseQuery
specifier|public
name|GeoQuery
name|parseQuery
parameter_list|(
name|String
name|name
parameter_list|,
name|XContentParser
name|parser
parameter_list|)
throws|throws
name|IOException
throws|,
name|ElasticsearchParseException
block|{
if|if
condition|(
name|parser
operator|.
name|currentToken
argument_list|()
operator|==
name|Token
operator|.
name|START_OBJECT
condition|)
block|{
name|double
name|lat
init|=
name|Double
operator|.
name|NaN
decl_stmt|;
name|double
name|lon
init|=
name|Double
operator|.
name|NaN
decl_stmt|;
name|GeoPoint
name|point
init|=
literal|null
decl_stmt|;
name|int
index|[]
name|precision
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|parser
operator|.
name|nextToken
argument_list|()
operator|!=
name|Token
operator|.
name|END_OBJECT
condition|)
block|{
specifier|final
name|String
name|fieldName
init|=
name|parser
operator|.
name|text
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"lat"
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
condition|)
block|{
if|if
condition|(
name|point
operator|==
literal|null
condition|)
block|{
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
switch|switch
condition|(
name|parser
operator|.
name|currentToken
argument_list|()
condition|)
block|{
case|case
name|VALUE_NUMBER
case|:
case|case
name|VALUE_STRING
case|:
name|lat
operator|=
name|parser
operator|.
name|doubleValue
argument_list|(
literal|true
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|ElasticsearchParseException
argument_list|(
literal|"latitude must be a number"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|ElasticsearchParseException
argument_list|(
literal|"only lat/lon or ["
operator|+
name|FIELD_VALUE
operator|+
literal|"] is allowed"
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"lon"
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
condition|)
block|{
if|if
condition|(
name|point
operator|==
literal|null
condition|)
block|{
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
switch|switch
condition|(
name|parser
operator|.
name|currentToken
argument_list|()
condition|)
block|{
case|case
name|VALUE_NUMBER
case|:
case|case
name|VALUE_STRING
case|:
name|lon
operator|=
name|parser
operator|.
name|doubleValue
argument_list|(
literal|true
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|ElasticsearchParseException
argument_list|(
literal|"longitude must be a number"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|ElasticsearchParseException
argument_list|(
literal|"only lat/lon or ["
operator|+
name|FIELD_VALUE
operator|+
literal|"] is allowed"
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|FIELD_PRECISION
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
condition|)
block|{
if|if
condition|(
name|parser
operator|.
name|nextToken
argument_list|()
operator|==
name|Token
operator|.
name|START_ARRAY
condition|)
block|{
name|IntHashSet
name|precisions
init|=
operator|new
name|IntHashSet
argument_list|()
decl_stmt|;
while|while
condition|(
name|parser
operator|.
name|nextToken
argument_list|()
operator|!=
name|Token
operator|.
name|END_ARRAY
condition|)
block|{
name|precisions
operator|.
name|add
argument_list|(
name|parsePrecision
argument_list|(
name|parser
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|precision
operator|=
name|precisions
operator|.
name|toArray
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|precision
operator|=
operator|new
name|int
index|[]
block|{
name|parsePrecision
argument_list|(
name|parser
argument_list|)
block|}
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|FIELD_VALUE
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
condition|)
block|{
if|if
condition|(
name|Double
operator|.
name|isNaN
argument_list|(
name|lon
argument_list|)
operator|&&
name|Double
operator|.
name|isNaN
argument_list|(
name|lat
argument_list|)
condition|)
block|{
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|point
operator|=
name|GeoUtils
operator|.
name|parseGeoPoint
argument_list|(
name|parser
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ElasticsearchParseException
argument_list|(
literal|"only lat/lon or ["
operator|+
name|FIELD_VALUE
operator|+
literal|"] is allowed"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|ElasticsearchParseException
argument_list|(
literal|"unexpected fieldname ["
operator|+
name|fieldName
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|point
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|Double
operator|.
name|isNaN
argument_list|(
name|lat
argument_list|)
operator|||
name|Double
operator|.
name|isNaN
argument_list|(
name|lon
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ElasticsearchParseException
argument_list|(
literal|"location is missing"
argument_list|)
throw|;
block|}
else|else
block|{
name|point
operator|=
operator|new
name|GeoPoint
argument_list|(
name|lat
argument_list|,
name|lon
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|precision
operator|==
literal|null
operator|||
name|precision
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|precision
operator|=
name|this
operator|.
name|precision
expr_stmt|;
block|}
return|return
operator|new
name|GeoQuery
argument_list|(
name|name
argument_list|,
name|point
operator|.
name|geohash
argument_list|()
argument_list|,
name|precision
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|GeoQuery
argument_list|(
name|name
argument_list|,
name|GeoUtils
operator|.
name|parseGeoPoint
argument_list|(
name|parser
argument_list|)
operator|.
name|getGeohash
argument_list|()
argument_list|,
name|precision
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
specifier|final
name|int
name|prime
init|=
literal|31
decl_stmt|;
name|int
name|result
init|=
literal|1
decl_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
operator|(
operator|(
name|defaultLocations
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|defaultLocations
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
operator|(
operator|(
name|fieldName
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|fieldName
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
operator|(
name|neighbors
condition|?
literal|1231
else|:
literal|1237
operator|)
expr_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
name|Arrays
operator|.
name|hashCode
argument_list|(
name|precision
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|getClass
argument_list|()
operator|!=
name|obj
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|GeolocationContextMapping
name|other
init|=
operator|(
name|GeolocationContextMapping
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|defaultLocations
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|defaultLocations
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|defaultLocations
operator|.
name|equals
argument_list|(
name|other
operator|.
name|defaultLocations
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|fieldName
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|fieldName
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|fieldName
operator|.
name|equals
argument_list|(
name|other
operator|.
name|fieldName
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|neighbors
operator|!=
name|other
operator|.
name|neighbors
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|Arrays
operator|.
name|equals
argument_list|(
name|precision
argument_list|,
name|other
operator|.
name|precision
argument_list|)
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
DECL|class|Builder
specifier|public
specifier|static
class|class
name|Builder
extends|extends
name|ContextBuilder
argument_list|<
name|GeolocationContextMapping
argument_list|>
block|{
DECL|field|precisions
specifier|private
name|IntHashSet
name|precisions
init|=
operator|new
name|IntHashSet
argument_list|()
decl_stmt|;
DECL|field|neighbors
specifier|private
name|boolean
name|neighbors
decl_stmt|;
comment|// take neighbor cell on the lowest level into account
DECL|field|defaultLocations
specifier|private
name|HashSet
argument_list|<
name|String
argument_list|>
name|defaultLocations
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|fieldName
specifier|private
name|String
name|fieldName
init|=
literal|null
decl_stmt|;
DECL|method|Builder
specifier|protected
name|Builder
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
argument_list|(
name|name
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|Builder
specifier|protected
name|Builder
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|neighbors
parameter_list|,
name|int
modifier|...
name|levels
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|neighbors
argument_list|(
name|neighbors
argument_list|)
expr_stmt|;
if|if
condition|(
name|levels
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|level
range|:
name|levels
control|)
block|{
name|precision
argument_list|(
name|level
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**          * Set the precision use o make suggestions          *           * @param precision          *            precision as distance with {@link DistanceUnit}. Default:          *            meters          * @return this          */
DECL|method|precision
specifier|public
name|Builder
name|precision
parameter_list|(
name|String
name|precision
parameter_list|)
block|{
return|return
name|precision
argument_list|(
name|DistanceUnit
operator|.
name|parse
argument_list|(
name|precision
argument_list|,
name|DistanceUnit
operator|.
name|METERS
argument_list|,
name|DistanceUnit
operator|.
name|METERS
argument_list|)
argument_list|)
return|;
block|}
comment|/**          * Set the precision use o make suggestions          *           * @param precision          *            precision value          * @param unit          *            {@link DistanceUnit} to use          * @return this          */
DECL|method|precision
specifier|public
name|Builder
name|precision
parameter_list|(
name|double
name|precision
parameter_list|,
name|DistanceUnit
name|unit
parameter_list|)
block|{
return|return
name|precision
argument_list|(
name|unit
operator|.
name|toMeters
argument_list|(
name|precision
argument_list|)
argument_list|)
return|;
block|}
comment|/**          * Set the precision use o make suggestions          *           * @param meters          *            precision as distance in meters          * @return this          */
DECL|method|precision
specifier|public
name|Builder
name|precision
parameter_list|(
name|double
name|meters
parameter_list|)
block|{
name|int
name|level
init|=
name|GeoUtils
operator|.
name|geoHashLevelsForPrecision
argument_list|(
name|meters
argument_list|)
decl_stmt|;
comment|// Ceiling precision: we might return more results
if|if
condition|(
name|GeoUtils
operator|.
name|geoHashCellSize
argument_list|(
name|level
argument_list|)
operator|<
name|meters
condition|)
block|{
name|level
operator|=
name|Math
operator|.
name|max
argument_list|(
literal|1
argument_list|,
name|level
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|precision
argument_list|(
name|level
argument_list|)
return|;
block|}
comment|/**          * Set the precision use o make suggestions          *           * @param level          *            maximum length of geohashes          * @return this          */
DECL|method|precision
specifier|public
name|Builder
name|precision
parameter_list|(
name|int
name|level
parameter_list|)
block|{
name|this
operator|.
name|precisions
operator|.
name|add
argument_list|(
name|level
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set neighborhood usage          *           * @param neighbors          *            should neighbor cells also be valid          * @return this          */
DECL|method|neighbors
specifier|public
name|Builder
name|neighbors
parameter_list|(
name|boolean
name|neighbors
parameter_list|)
block|{
name|this
operator|.
name|neighbors
operator|=
name|neighbors
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set a default location that should be used, if no location is          * provided by the query          *           * @param geohash          *            geohash of the default location          * @return this          */
DECL|method|addDefaultLocation
specifier|public
name|Builder
name|addDefaultLocation
parameter_list|(
name|String
name|geohash
parameter_list|)
block|{
name|this
operator|.
name|defaultLocations
operator|.
name|add
argument_list|(
name|geohash
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set a default location that should be used, if no location is          * provided by the query          *           * @param geohashes          *            geohash of the default location          * @return this          */
DECL|method|addDefaultLocations
specifier|public
name|Builder
name|addDefaultLocations
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|geohashes
parameter_list|)
block|{
name|this
operator|.
name|defaultLocations
operator|.
name|addAll
argument_list|(
name|geohashes
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set a default location that should be used, if no location is          * provided by the query          *           * @param lat          *            latitude of the default location          * @param lon          *            longitude of the default location          * @return this          */
DECL|method|addDefaultLocation
specifier|public
name|Builder
name|addDefaultLocation
parameter_list|(
name|double
name|lat
parameter_list|,
name|double
name|lon
parameter_list|)
block|{
name|this
operator|.
name|defaultLocations
operator|.
name|add
argument_list|(
name|GeoHashUtils
operator|.
name|encode
argument_list|(
name|lat
argument_list|,
name|lon
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set a default location that should be used, if no location is          * provided by the query          *           * @param point          *            location          * @return this          */
DECL|method|defaultLocation
specifier|public
name|Builder
name|defaultLocation
parameter_list|(
name|GeoPoint
name|point
parameter_list|)
block|{
name|this
operator|.
name|defaultLocations
operator|.
name|add
argument_list|(
name|point
operator|.
name|geohash
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the name of the field containing a geolocation to use          * @param fieldName name of the field          * @return this          */
DECL|method|field
specifier|public
name|Builder
name|field
parameter_list|(
name|String
name|fieldName
parameter_list|)
block|{
name|this
operator|.
name|fieldName
operator|=
name|fieldName
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|build
specifier|public
name|GeolocationContextMapping
name|build
parameter_list|()
block|{
if|if
condition|(
name|precisions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|precisions
operator|.
name|add
argument_list|(
name|GeoHashUtils
operator|.
name|PRECISION
argument_list|)
expr_stmt|;
block|}
name|int
index|[]
name|precisionArray
init|=
name|precisions
operator|.
name|toArray
argument_list|()
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|precisionArray
argument_list|)
expr_stmt|;
return|return
operator|new
name|GeolocationContextMapping
argument_list|(
name|name
argument_list|,
name|precisionArray
argument_list|,
name|neighbors
argument_list|,
name|defaultLocations
argument_list|,
name|fieldName
argument_list|)
return|;
block|}
block|}
DECL|class|GeoConfig
specifier|private
specifier|static
class|class
name|GeoConfig
extends|extends
name|ContextConfig
block|{
DECL|field|mapping
specifier|private
specifier|final
name|GeolocationContextMapping
name|mapping
decl_stmt|;
DECL|field|locations
specifier|private
specifier|final
name|Collection
argument_list|<
name|String
argument_list|>
name|locations
decl_stmt|;
DECL|method|GeoConfig
specifier|public
name|GeoConfig
parameter_list|(
name|GeolocationContextMapping
name|mapping
parameter_list|,
name|Collection
argument_list|<
name|String
argument_list|>
name|locations
parameter_list|)
block|{
name|this
operator|.
name|locations
operator|=
name|locations
expr_stmt|;
name|this
operator|.
name|mapping
operator|=
name|mapping
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|wrapTokenStream
specifier|protected
name|TokenStream
name|wrapTokenStream
parameter_list|(
name|Document
name|doc
parameter_list|,
name|TokenStream
name|stream
parameter_list|)
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|geohashes
decl_stmt|;
if|if
condition|(
name|locations
operator|==
literal|null
operator|||
name|locations
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|mapping
operator|.
name|fieldName
operator|!=
literal|null
condition|)
block|{
name|IndexableField
index|[]
name|fields
init|=
name|doc
operator|.
name|getFields
argument_list|(
name|mapping
operator|.
name|fieldName
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|IndexableField
index|[]
name|lonFields
init|=
name|doc
operator|.
name|getFields
argument_list|(
name|mapping
operator|.
name|fieldName
operator|+
literal|".lon"
argument_list|)
decl_stmt|;
name|IndexableField
index|[]
name|latFields
init|=
name|doc
operator|.
name|getFields
argument_list|(
name|mapping
operator|.
name|fieldName
operator|+
literal|".lat"
argument_list|)
decl_stmt|;
if|if
condition|(
name|lonFields
operator|.
name|length
operator|>
literal|0
operator|&&
name|latFields
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|geohashes
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|fields
operator|.
name|length
argument_list|)
expr_stmt|;
name|GeoPoint
name|spare
init|=
operator|new
name|GeoPoint
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|lonFields
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|IndexableField
name|lonField
init|=
name|lonFields
index|[
name|i
index|]
decl_stmt|;
name|IndexableField
name|latField
init|=
name|latFields
index|[
name|i
index|]
decl_stmt|;
assert|assert
name|lonField
operator|.
name|fieldType
argument_list|()
operator|.
name|docValuesType
argument_list|()
operator|==
name|latField
operator|.
name|fieldType
argument_list|()
operator|.
name|docValuesType
argument_list|()
assert|;
comment|// we write doc values fields differently: one field for all values, so we need to only care about indexed fields
if|if
condition|(
name|lonField
operator|.
name|fieldType
argument_list|()
operator|.
name|docValuesType
argument_list|()
operator|==
name|DocValuesType
operator|.
name|NONE
condition|)
block|{
name|spare
operator|.
name|reset
argument_list|(
name|latField
operator|.
name|numericValue
argument_list|()
operator|.
name|doubleValue
argument_list|()
argument_list|,
name|lonField
operator|.
name|numericValue
argument_list|()
operator|.
name|doubleValue
argument_list|()
argument_list|)
expr_stmt|;
name|geohashes
operator|.
name|add
argument_list|(
name|spare
operator|.
name|geohash
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|geohashes
operator|=
name|mapping
operator|.
name|defaultLocations
expr_stmt|;
block|}
block|}
else|else
block|{
name|geohashes
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|fields
operator|.
name|length
argument_list|)
expr_stmt|;
name|GeoPoint
name|spare
init|=
operator|new
name|GeoPoint
argument_list|()
decl_stmt|;
for|for
control|(
name|IndexableField
name|field
range|:
name|fields
control|)
block|{
name|spare
operator|.
name|resetFromString
argument_list|(
name|field
operator|.
name|stringValue
argument_list|()
argument_list|)
expr_stmt|;
name|geohashes
operator|.
name|add
argument_list|(
name|spare
operator|.
name|geohash
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|geohashes
operator|=
name|mapping
operator|.
name|defaultLocations
expr_stmt|;
block|}
block|}
else|else
block|{
name|geohashes
operator|=
name|locations
expr_stmt|;
block|}
name|Collection
argument_list|<
name|String
argument_list|>
name|locations
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|geohash
range|:
name|geohashes
control|)
block|{
for|for
control|(
name|int
name|p
range|:
name|mapping
operator|.
name|precision
control|)
block|{
name|int
name|precision
init|=
name|Math
operator|.
name|min
argument_list|(
name|p
argument_list|,
name|geohash
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|truncatedGeohash
init|=
name|geohash
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|precision
argument_list|)
decl_stmt|;
if|if
condition|(
name|mapping
operator|.
name|neighbors
condition|)
block|{
name|GeoHashUtils
operator|.
name|addNeighbors
argument_list|(
name|truncatedGeohash
argument_list|,
name|precision
argument_list|,
name|locations
argument_list|)
expr_stmt|;
block|}
name|locations
operator|.
name|add
argument_list|(
name|truncatedGeohash
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|PrefixTokenFilter
argument_list|(
name|stream
argument_list|,
name|ContextMapping
operator|.
name|SEPARATOR
argument_list|,
name|locations
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"GeoConfig(location = ["
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|?
extends|extends
name|CharSequence
argument_list|>
name|location
init|=
name|this
operator|.
name|locations
operator|.
name|iterator
argument_list|()
decl_stmt|;
if|if
condition|(
name|location
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|location
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
name|location
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
operator|.
name|append
argument_list|(
name|location
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sb
operator|.
name|append
argument_list|(
literal|"])"
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
DECL|class|GeoQuery
specifier|private
specifier|static
class|class
name|GeoQuery
extends|extends
name|ContextQuery
block|{
DECL|field|location
specifier|private
specifier|final
name|String
name|location
decl_stmt|;
DECL|field|precisions
specifier|private
specifier|final
name|int
index|[]
name|precisions
decl_stmt|;
DECL|method|GeoQuery
specifier|public
name|GeoQuery
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|location
parameter_list|,
name|int
modifier|...
name|precisions
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|location
operator|=
name|location
expr_stmt|;
name|this
operator|.
name|precisions
operator|=
name|precisions
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toAutomaton
specifier|public
name|Automaton
name|toAutomaton
parameter_list|()
block|{
name|Automaton
name|automaton
decl_stmt|;
if|if
condition|(
name|precisions
operator|==
literal|null
operator|||
name|precisions
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|automaton
operator|=
name|Automata
operator|.
name|makeString
argument_list|(
name|location
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|automaton
operator|=
name|Automata
operator|.
name|makeString
argument_list|(
name|location
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|Math
operator|.
name|max
argument_list|(
literal|1
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|location
operator|.
name|length
argument_list|()
argument_list|,
name|precisions
index|[
literal|0
index|]
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|precisions
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|String
name|cell
init|=
name|location
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|Math
operator|.
name|max
argument_list|(
literal|1
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|location
operator|.
name|length
argument_list|()
argument_list|,
name|precisions
index|[
name|i
index|]
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|automaton
operator|=
name|Operations
operator|.
name|union
argument_list|(
name|automaton
argument_list|,
name|Automata
operator|.
name|makeString
argument_list|(
name|cell
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|automaton
return|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|precisions
operator|==
literal|null
operator|||
name|precisions
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|name
argument_list|,
name|location
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|FIELD_VALUE
argument_list|,
name|location
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|FIELD_PRECISION
argument_list|,
name|precisions
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
return|return
name|builder
return|;
block|}
block|}
block|}
end_class

end_unit

