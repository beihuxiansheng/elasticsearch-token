begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.rescore
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|rescore
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticSearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilderException
import|;
end_import

begin_class
DECL|class|RescoreBuilder
specifier|public
class|class
name|RescoreBuilder
implements|implements
name|ToXContent
block|{
DECL|field|rescorer
specifier|private
name|Rescorer
name|rescorer
decl_stmt|;
DECL|field|windowSize
specifier|private
name|Integer
name|windowSize
decl_stmt|;
DECL|method|queryRescorer
specifier|public
specifier|static
name|QueryRescorer
name|queryRescorer
parameter_list|(
name|QueryBuilder
name|queryBuilder
parameter_list|)
block|{
return|return
operator|new
name|QueryRescorer
argument_list|(
name|queryBuilder
argument_list|)
return|;
block|}
DECL|method|rescorer
specifier|public
name|RescoreBuilder
name|rescorer
parameter_list|(
name|Rescorer
name|rescorer
parameter_list|)
block|{
name|this
operator|.
name|rescorer
operator|=
name|rescorer
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|windowSize
specifier|public
name|RescoreBuilder
name|windowSize
parameter_list|(
name|int
name|windowSize
parameter_list|)
block|{
name|this
operator|.
name|windowSize
operator|=
name|windowSize
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|rescorer
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|startObject
argument_list|(
literal|"rescore"
argument_list|)
expr_stmt|;
if|if
condition|(
name|windowSize
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"window_size"
argument_list|,
name|windowSize
argument_list|)
expr_stmt|;
block|}
name|rescorer
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
return|return
name|builder
return|;
block|}
DECL|class|Rescorer
specifier|public
specifier|static
specifier|abstract
class|class
name|Rescorer
implements|implements
name|ToXContent
block|{
DECL|field|name
specifier|private
name|String
name|name
decl_stmt|;
DECL|method|Rescorer
specifier|public
name|Rescorer
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|builder
operator|=
name|innerToXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
DECL|method|innerToXContent
specifier|protected
specifier|abstract
name|XContentBuilder
name|innerToXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
DECL|class|QueryRescorer
specifier|public
specifier|static
class|class
name|QueryRescorer
extends|extends
name|Rescorer
block|{
DECL|field|NAME
specifier|private
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"query"
decl_stmt|;
DECL|field|queryBuilder
specifier|private
name|QueryBuilder
name|queryBuilder
decl_stmt|;
DECL|field|rescoreQueryWeight
specifier|private
name|Float
name|rescoreQueryWeight
decl_stmt|;
DECL|field|queryWeight
specifier|private
name|Float
name|queryWeight
decl_stmt|;
DECL|field|scoreMode
specifier|private
name|String
name|scoreMode
decl_stmt|;
comment|/**          * Creates a new {@link QueryRescorer} instance          * @param builder the query builder to build the rescore query from          */
DECL|method|QueryRescorer
specifier|public
name|QueryRescorer
parameter_list|(
name|QueryBuilder
name|builder
parameter_list|)
block|{
name|super
argument_list|(
name|NAME
argument_list|)
expr_stmt|;
name|this
operator|.
name|queryBuilder
operator|=
name|builder
expr_stmt|;
block|}
comment|/**          * Sets the original query weight for rescoring. The default is<tt>1.0</tt>          */
DECL|method|setQueryWeight
specifier|public
name|QueryRescorer
name|setQueryWeight
parameter_list|(
name|float
name|queryWeight
parameter_list|)
block|{
name|this
operator|.
name|queryWeight
operator|=
name|queryWeight
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the original query weight for rescoring. The default is<tt>1.0</tt>          */
DECL|method|setRescoreQueryWeight
specifier|public
name|QueryRescorer
name|setRescoreQueryWeight
parameter_list|(
name|float
name|rescoreQueryWeight
parameter_list|)
block|{
name|this
operator|.
name|rescoreQueryWeight
operator|=
name|rescoreQueryWeight
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the original query score mode. The default is<tt>total</tt>          */
DECL|method|setScoreMode
specifier|public
name|QueryRescorer
name|setScoreMode
parameter_list|(
name|String
name|scoreMode
parameter_list|)
block|{
name|this
operator|.
name|scoreMode
operator|=
name|scoreMode
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|innerToXContent
specifier|protected
name|XContentBuilder
name|innerToXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"rescore_query"
argument_list|,
name|queryBuilder
argument_list|)
expr_stmt|;
if|if
condition|(
name|queryWeight
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"query_weight"
argument_list|,
name|queryWeight
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rescoreQueryWeight
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"rescore_query_weight"
argument_list|,
name|rescoreQueryWeight
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|scoreMode
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"score_mode"
argument_list|,
name|scoreMode
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
return|;
block|}
block|}
block|}
end_class

end_unit

