begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.rest.action.termvector
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|action
operator|.
name|termvector
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestRequest
operator|.
name|Method
operator|.
name|GET
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestRequest
operator|.
name|Method
operator|.
name|POST
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestStatus
operator|.
name|OK
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|action
operator|.
name|support
operator|.
name|RestXContentBuilder
operator|.
name|restContentBuilder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticSearchParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|termvector
operator|.
name|TermVectorRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|termvector
operator|.
name|TermVectorResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|BaseRestHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|XContentRestResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|XContentThrowableRestResponse
import|;
end_import

begin_comment
comment|/**  * This class parses the json request and translates it into a  * TermVectorRequest.  */
end_comment

begin_class
DECL|class|RestTermVectorAction
specifier|public
class|class
name|RestTermVectorAction
extends|extends
name|BaseRestHandler
block|{
annotation|@
name|Inject
DECL|method|RestTermVectorAction
specifier|public
name|RestTermVectorAction
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|Client
name|client
parameter_list|,
name|RestController
name|controller
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|,
name|client
argument_list|)
expr_stmt|;
name|controller
operator|.
name|registerHandler
argument_list|(
name|GET
argument_list|,
literal|"/{index}/{type}/{id}/_termvector"
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|controller
operator|.
name|registerHandler
argument_list|(
name|POST
argument_list|,
literal|"/{index}/{type}/{id}/_termvector"
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|handleRequest
specifier|public
name|void
name|handleRequest
parameter_list|(
specifier|final
name|RestRequest
name|request
parameter_list|,
specifier|final
name|RestChannel
name|channel
parameter_list|)
block|{
name|TermVectorRequest
name|termVectorRequest
init|=
operator|new
name|TermVectorRequest
argument_list|(
name|request
operator|.
name|param
argument_list|(
literal|"index"
argument_list|)
argument_list|,
name|request
operator|.
name|param
argument_list|(
literal|"type"
argument_list|)
argument_list|,
name|request
operator|.
name|param
argument_list|(
literal|"id"
argument_list|)
argument_list|)
decl_stmt|;
name|termVectorRequest
operator|.
name|routing
argument_list|(
name|request
operator|.
name|param
argument_list|(
literal|"routing"
argument_list|)
argument_list|)
expr_stmt|;
name|termVectorRequest
operator|.
name|parent
argument_list|(
name|request
operator|.
name|param
argument_list|(
literal|"parent"
argument_list|)
argument_list|)
expr_stmt|;
name|termVectorRequest
operator|.
name|preference
argument_list|(
name|request
operator|.
name|param
argument_list|(
literal|"preference"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|hasContent
argument_list|()
condition|)
block|{
try|try
block|{
name|parseRequest
argument_list|(
name|request
operator|.
name|content
argument_list|()
argument_list|,
name|termVectorRequest
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e1
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|selectedFields
init|=
name|termVectorRequest
operator|.
name|selectedFields
argument_list|()
decl_stmt|;
name|String
name|fieldString
init|=
literal|"all"
decl_stmt|;
if|if
condition|(
name|selectedFields
operator|!=
literal|null
condition|)
block|{
name|Strings
operator|.
name|arrayToDelimitedString
argument_list|(
name|termVectorRequest
operator|.
name|selectedFields
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|1
index|]
argument_list|)
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
block|}
name|logger
operator|.
name|error
argument_list|(
literal|"Something is wrong with your parameters for the term vector request. I am using parameters "
operator|+
literal|"\n positions :"
operator|+
name|termVectorRequest
operator|.
name|positions
argument_list|()
operator|+
literal|"\n offsets :"
operator|+
name|termVectorRequest
operator|.
name|offsets
argument_list|()
operator|+
literal|"\n payloads :"
operator|+
name|termVectorRequest
operator|.
name|payloads
argument_list|()
operator|+
literal|"\n termStatistics :"
operator|+
name|termVectorRequest
operator|.
name|termStatistics
argument_list|()
operator|+
literal|"\n fieldStatistics :"
operator|+
name|termVectorRequest
operator|.
name|fieldStatistics
argument_list|()
operator|+
literal|"\nfields "
operator|+
name|fieldString
argument_list|,
operator|(
name|Object
operator|)
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
name|readURIParameters
argument_list|(
name|termVectorRequest
argument_list|,
name|request
argument_list|)
expr_stmt|;
name|client
operator|.
name|termVector
argument_list|(
name|termVectorRequest
argument_list|,
operator|new
name|ActionListener
argument_list|<
name|TermVectorResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|TermVectorResponse
name|response
parameter_list|)
block|{
try|try
block|{
name|XContentBuilder
name|builder
init|=
name|restContentBuilder
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|response
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|request
argument_list|)
expr_stmt|;
name|channel
operator|.
name|sendResponse
argument_list|(
operator|new
name|XContentRestResponse
argument_list|(
name|request
argument_list|,
name|OK
argument_list|,
name|builder
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|onFailure
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
try|try
block|{
name|channel
operator|.
name|sendResponse
argument_list|(
operator|new
name|XContentThrowableRestResponse
argument_list|(
name|request
argument_list|,
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e1
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Failed to send failure response"
argument_list|,
name|e1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|readURIParameters
specifier|static
specifier|public
name|void
name|readURIParameters
parameter_list|(
name|TermVectorRequest
name|termVectorRequest
parameter_list|,
name|RestRequest
name|request
parameter_list|)
block|{
name|String
name|fields
init|=
name|request
operator|.
name|param
argument_list|(
literal|"fields"
argument_list|)
decl_stmt|;
name|addFieldStringsFromParameter
argument_list|(
name|termVectorRequest
argument_list|,
name|fields
argument_list|)
expr_stmt|;
name|termVectorRequest
operator|.
name|offsets
argument_list|(
name|request
operator|.
name|paramAsBoolean
argument_list|(
literal|"offsets"
argument_list|,
name|termVectorRequest
operator|.
name|offsets
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|termVectorRequest
operator|.
name|positions
argument_list|(
name|request
operator|.
name|paramAsBoolean
argument_list|(
literal|"positions"
argument_list|,
name|termVectorRequest
operator|.
name|positions
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|termVectorRequest
operator|.
name|payloads
argument_list|(
name|request
operator|.
name|paramAsBoolean
argument_list|(
literal|"payloads"
argument_list|,
name|termVectorRequest
operator|.
name|payloads
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|termVectorRequest
operator|.
name|termStatistics
argument_list|(
name|request
operator|.
name|paramAsBoolean
argument_list|(
literal|"termStatistics"
argument_list|,
name|termVectorRequest
operator|.
name|termStatistics
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|termVectorRequest
operator|.
name|termStatistics
argument_list|(
name|request
operator|.
name|paramAsBoolean
argument_list|(
literal|"term_statistics"
argument_list|,
name|termVectorRequest
operator|.
name|termStatistics
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|termVectorRequest
operator|.
name|fieldStatistics
argument_list|(
name|request
operator|.
name|paramAsBoolean
argument_list|(
literal|"fieldStatistics"
argument_list|,
name|termVectorRequest
operator|.
name|fieldStatistics
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|termVectorRequest
operator|.
name|fieldStatistics
argument_list|(
name|request
operator|.
name|paramAsBoolean
argument_list|(
literal|"field_statistics"
argument_list|,
name|termVectorRequest
operator|.
name|fieldStatistics
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|addFieldStringsFromParameter
specifier|static
specifier|public
name|void
name|addFieldStringsFromParameter
parameter_list|(
name|TermVectorRequest
name|termVectorRequest
parameter_list|,
name|String
name|fields
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|selectedFields
init|=
name|termVectorRequest
operator|.
name|selectedFields
argument_list|()
decl_stmt|;
if|if
condition|(
name|fields
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|paramFieldStrings
init|=
name|Strings
operator|.
name|commaDelimitedListToStringArray
argument_list|(
name|fields
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|field
range|:
name|paramFieldStrings
control|)
block|{
if|if
condition|(
name|selectedFields
operator|==
literal|null
condition|)
block|{
name|selectedFields
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|selectedFields
operator|.
name|contains
argument_list|(
name|field
argument_list|)
condition|)
block|{
name|field
operator|=
name|field
operator|.
name|replaceAll
argument_list|(
literal|"\\s"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|selectedFields
operator|.
name|add
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|selectedFields
operator|!=
literal|null
condition|)
block|{
name|termVectorRequest
operator|.
name|selectedFields
argument_list|(
name|selectedFields
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|selectedFields
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|parseRequest
specifier|static
specifier|public
name|void
name|parseRequest
parameter_list|(
name|BytesReference
name|cont
parameter_list|,
name|TermVectorRequest
name|termVectorRequest
parameter_list|)
throws|throws
name|IOException
block|{
name|XContentParser
name|parser
init|=
name|XContentFactory
operator|.
name|xContent
argument_list|(
name|cont
argument_list|)
operator|.
name|createParser
argument_list|(
name|cont
argument_list|)
decl_stmt|;
try|try
block|{
name|XContentParser
operator|.
name|Token
name|token
decl_stmt|;
name|String
name|currentFieldName
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|fields
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
condition|)
block|{
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
condition|)
block|{
name|currentFieldName
operator|=
name|parser
operator|.
name|currentName
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|currentFieldName
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|currentFieldName
operator|.
name|equals
argument_list|(
literal|"fields"
argument_list|)
condition|)
block|{
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_ARRAY
condition|)
block|{
while|while
condition|(
name|parser
operator|.
name|nextToken
argument_list|()
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_ARRAY
condition|)
block|{
name|fields
operator|.
name|add
argument_list|(
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|ElasticSearchParseException
argument_list|(
literal|"The parameter fields must be given as an array! Use syntax : \"fields\" : [\"field1\", \"field2\",...]"
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|currentFieldName
operator|.
name|equals
argument_list|(
literal|"offsets"
argument_list|)
condition|)
block|{
name|termVectorRequest
operator|.
name|offsets
argument_list|(
name|parser
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|currentFieldName
operator|.
name|equals
argument_list|(
literal|"positions"
argument_list|)
condition|)
block|{
name|termVectorRequest
operator|.
name|positions
argument_list|(
name|parser
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|currentFieldName
operator|.
name|equals
argument_list|(
literal|"payloads"
argument_list|)
condition|)
block|{
name|termVectorRequest
operator|.
name|payloads
argument_list|(
name|parser
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|currentFieldName
operator|.
name|equals
argument_list|(
literal|"term_statistics"
argument_list|)
operator|||
name|currentFieldName
operator|.
name|equals
argument_list|(
literal|"termStatistics"
argument_list|)
condition|)
block|{
name|termVectorRequest
operator|.
name|termStatistics
argument_list|(
name|parser
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|currentFieldName
operator|.
name|equals
argument_list|(
literal|"field_statistics"
argument_list|)
operator|||
name|currentFieldName
operator|.
name|equals
argument_list|(
literal|"fieldStatistics"
argument_list|)
condition|)
block|{
name|termVectorRequest
operator|.
name|fieldStatistics
argument_list|(
name|parser
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ElasticSearchParseException
argument_list|(
literal|"The parameter "
operator|+
name|currentFieldName
operator|+
literal|" is not valid for term vector request!"
argument_list|)
throw|;
block|}
block|}
block|}
name|String
index|[]
name|fieldsAsArray
init|=
operator|new
name|String
index|[
name|fields
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|termVectorRequest
operator|.
name|selectedFields
argument_list|(
name|fields
operator|.
name|toArray
argument_list|(
name|fieldsAsArray
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|parser
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

