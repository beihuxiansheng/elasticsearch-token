begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.rest.action.admin.cluster.node.info
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|node
operator|.
name|info
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|node
operator|.
name|info
operator|.
name|NodesInfoRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|node
operator|.
name|info
operator|.
name|NodesInfoResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|SettingsFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|action
operator|.
name|support
operator|.
name|RestActions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|action
operator|.
name|support
operator|.
name|RestXContentBuilder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|RestNodesInfoAction
specifier|public
class|class
name|RestNodesInfoAction
extends|extends
name|BaseRestHandler
block|{
DECL|field|settingsFilter
specifier|private
specifier|final
name|SettingsFilter
name|settingsFilter
decl_stmt|;
annotation|@
name|Inject
DECL|method|RestNodesInfoAction
specifier|public
name|RestNodesInfoAction
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|Client
name|client
parameter_list|,
name|RestController
name|controller
parameter_list|,
name|SettingsFilter
name|settingsFilter
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|,
name|client
argument_list|)
expr_stmt|;
name|controller
operator|.
name|registerHandler
argument_list|(
name|RestRequest
operator|.
name|Method
operator|.
name|GET
argument_list|,
literal|"/_cluster/nodes"
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|controller
operator|.
name|registerHandler
argument_list|(
name|RestRequest
operator|.
name|Method
operator|.
name|GET
argument_list|,
literal|"/_cluster/nodes/{nodeId}"
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|controller
operator|.
name|registerHandler
argument_list|(
name|RestRequest
operator|.
name|Method
operator|.
name|GET
argument_list|,
literal|"/_nodes"
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|controller
operator|.
name|registerHandler
argument_list|(
name|RestRequest
operator|.
name|Method
operator|.
name|GET
argument_list|,
literal|"/_nodes/{nodeId}"
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|controller
operator|.
name|registerHandler
argument_list|(
name|RestRequest
operator|.
name|Method
operator|.
name|GET
argument_list|,
literal|"/_nodes/settings"
argument_list|,
operator|new
name|RestSettingsHandler
argument_list|()
argument_list|)
expr_stmt|;
name|controller
operator|.
name|registerHandler
argument_list|(
name|RestRequest
operator|.
name|Method
operator|.
name|GET
argument_list|,
literal|"/_nodes/{nodeId}/settings"
argument_list|,
operator|new
name|RestSettingsHandler
argument_list|()
argument_list|)
expr_stmt|;
name|controller
operator|.
name|registerHandler
argument_list|(
name|RestRequest
operator|.
name|Method
operator|.
name|GET
argument_list|,
literal|"/_nodes/os"
argument_list|,
operator|new
name|RestOsHandler
argument_list|()
argument_list|)
expr_stmt|;
name|controller
operator|.
name|registerHandler
argument_list|(
name|RestRequest
operator|.
name|Method
operator|.
name|GET
argument_list|,
literal|"/_nodes/{nodeId}/os"
argument_list|,
operator|new
name|RestOsHandler
argument_list|()
argument_list|)
expr_stmt|;
name|controller
operator|.
name|registerHandler
argument_list|(
name|RestRequest
operator|.
name|Method
operator|.
name|GET
argument_list|,
literal|"/_nodes/process"
argument_list|,
operator|new
name|RestProcessHandler
argument_list|()
argument_list|)
expr_stmt|;
name|controller
operator|.
name|registerHandler
argument_list|(
name|RestRequest
operator|.
name|Method
operator|.
name|GET
argument_list|,
literal|"/_nodes/{nodeId}/process"
argument_list|,
operator|new
name|RestProcessHandler
argument_list|()
argument_list|)
expr_stmt|;
name|controller
operator|.
name|registerHandler
argument_list|(
name|RestRequest
operator|.
name|Method
operator|.
name|GET
argument_list|,
literal|"/_nodes/jvm"
argument_list|,
operator|new
name|RestJvmHandler
argument_list|()
argument_list|)
expr_stmt|;
name|controller
operator|.
name|registerHandler
argument_list|(
name|RestRequest
operator|.
name|Method
operator|.
name|GET
argument_list|,
literal|"/_nodes/{nodeId}/jvm"
argument_list|,
operator|new
name|RestJvmHandler
argument_list|()
argument_list|)
expr_stmt|;
name|controller
operator|.
name|registerHandler
argument_list|(
name|RestRequest
operator|.
name|Method
operator|.
name|GET
argument_list|,
literal|"/_nodes/thread_pool"
argument_list|,
operator|new
name|RestThreadPoolHandler
argument_list|()
argument_list|)
expr_stmt|;
name|controller
operator|.
name|registerHandler
argument_list|(
name|RestRequest
operator|.
name|Method
operator|.
name|GET
argument_list|,
literal|"/_nodes/{nodeId}/thread_pool"
argument_list|,
operator|new
name|RestThreadPoolHandler
argument_list|()
argument_list|)
expr_stmt|;
name|controller
operator|.
name|registerHandler
argument_list|(
name|RestRequest
operator|.
name|Method
operator|.
name|GET
argument_list|,
literal|"/_nodes/network"
argument_list|,
operator|new
name|RestNetworkHandler
argument_list|()
argument_list|)
expr_stmt|;
name|controller
operator|.
name|registerHandler
argument_list|(
name|RestRequest
operator|.
name|Method
operator|.
name|GET
argument_list|,
literal|"/_nodes/{nodeId}/network"
argument_list|,
operator|new
name|RestNetworkHandler
argument_list|()
argument_list|)
expr_stmt|;
name|controller
operator|.
name|registerHandler
argument_list|(
name|RestRequest
operator|.
name|Method
operator|.
name|GET
argument_list|,
literal|"/_nodes/transport"
argument_list|,
operator|new
name|RestTransportHandler
argument_list|()
argument_list|)
expr_stmt|;
name|controller
operator|.
name|registerHandler
argument_list|(
name|RestRequest
operator|.
name|Method
operator|.
name|GET
argument_list|,
literal|"/_nodes/{nodeId}/transport"
argument_list|,
operator|new
name|RestTransportHandler
argument_list|()
argument_list|)
expr_stmt|;
name|controller
operator|.
name|registerHandler
argument_list|(
name|RestRequest
operator|.
name|Method
operator|.
name|GET
argument_list|,
literal|"/_nodes/http"
argument_list|,
operator|new
name|RestHttpHandler
argument_list|()
argument_list|)
expr_stmt|;
name|controller
operator|.
name|registerHandler
argument_list|(
name|RestRequest
operator|.
name|Method
operator|.
name|GET
argument_list|,
literal|"/_nodes/{nodeId}/http"
argument_list|,
operator|new
name|RestHttpHandler
argument_list|()
argument_list|)
expr_stmt|;
name|controller
operator|.
name|registerHandler
argument_list|(
name|RestRequest
operator|.
name|Method
operator|.
name|GET
argument_list|,
literal|"/_nodes/plugin"
argument_list|,
operator|new
name|RestPluginHandler
argument_list|()
argument_list|)
expr_stmt|;
name|controller
operator|.
name|registerHandler
argument_list|(
name|RestRequest
operator|.
name|Method
operator|.
name|GET
argument_list|,
literal|"/_nodes/{nodeId}/plugin"
argument_list|,
operator|new
name|RestPluginHandler
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|settingsFilter
operator|=
name|settingsFilter
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|handleRequest
specifier|public
name|void
name|handleRequest
parameter_list|(
specifier|final
name|RestRequest
name|request
parameter_list|,
specifier|final
name|RestChannel
name|channel
parameter_list|)
block|{
name|String
index|[]
name|nodesIds
init|=
name|RestActions
operator|.
name|splitNodes
argument_list|(
name|request
operator|.
name|param
argument_list|(
literal|"nodeId"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|NodesInfoRequest
name|nodesInfoRequest
init|=
operator|new
name|NodesInfoRequest
argument_list|(
name|nodesIds
argument_list|)
decl_stmt|;
name|boolean
name|clear
init|=
name|request
operator|.
name|paramAsBoolean
argument_list|(
literal|"clear"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|clear
condition|)
block|{
name|nodesInfoRequest
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|boolean
name|all
init|=
name|request
operator|.
name|paramAsBoolean
argument_list|(
literal|"all"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|all
condition|)
block|{
name|nodesInfoRequest
operator|.
name|all
argument_list|()
expr_stmt|;
block|}
name|nodesInfoRequest
operator|.
name|settings
argument_list|(
name|request
operator|.
name|paramAsBoolean
argument_list|(
literal|"settings"
argument_list|,
name|nodesInfoRequest
operator|.
name|settings
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|nodesInfoRequest
operator|.
name|os
argument_list|(
name|request
operator|.
name|paramAsBoolean
argument_list|(
literal|"os"
argument_list|,
name|nodesInfoRequest
operator|.
name|os
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|nodesInfoRequest
operator|.
name|process
argument_list|(
name|request
operator|.
name|paramAsBoolean
argument_list|(
literal|"process"
argument_list|,
name|nodesInfoRequest
operator|.
name|process
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|nodesInfoRequest
operator|.
name|jvm
argument_list|(
name|request
operator|.
name|paramAsBoolean
argument_list|(
literal|"jvm"
argument_list|,
name|nodesInfoRequest
operator|.
name|jvm
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|nodesInfoRequest
operator|.
name|threadPool
argument_list|(
name|request
operator|.
name|paramAsBoolean
argument_list|(
literal|"thread_pool"
argument_list|,
name|nodesInfoRequest
operator|.
name|threadPool
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|nodesInfoRequest
operator|.
name|network
argument_list|(
name|request
operator|.
name|paramAsBoolean
argument_list|(
literal|"network"
argument_list|,
name|nodesInfoRequest
operator|.
name|network
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|nodesInfoRequest
operator|.
name|transport
argument_list|(
name|request
operator|.
name|paramAsBoolean
argument_list|(
literal|"transport"
argument_list|,
name|nodesInfoRequest
operator|.
name|transport
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|nodesInfoRequest
operator|.
name|http
argument_list|(
name|request
operator|.
name|paramAsBoolean
argument_list|(
literal|"http"
argument_list|,
name|nodesInfoRequest
operator|.
name|http
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|nodesInfoRequest
operator|.
name|plugin
argument_list|(
name|request
operator|.
name|paramAsBoolean
argument_list|(
literal|"plugin"
argument_list|,
name|nodesInfoRequest
operator|.
name|plugin
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|executeNodeRequest
argument_list|(
name|request
argument_list|,
name|channel
argument_list|,
name|nodesInfoRequest
argument_list|)
expr_stmt|;
block|}
DECL|method|executeNodeRequest
name|void
name|executeNodeRequest
parameter_list|(
specifier|final
name|RestRequest
name|request
parameter_list|,
specifier|final
name|RestChannel
name|channel
parameter_list|,
name|NodesInfoRequest
name|nodesInfoRequest
parameter_list|)
block|{
name|nodesInfoRequest
operator|.
name|listenerThreaded
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|client
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|nodesInfo
argument_list|(
name|nodesInfoRequest
argument_list|,
operator|new
name|ActionListener
argument_list|<
name|NodesInfoResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|NodesInfoResponse
name|response
parameter_list|)
block|{
try|try
block|{
name|response
operator|.
name|settingsFilter
argument_list|(
name|settingsFilter
argument_list|)
expr_stmt|;
name|XContentBuilder
name|builder
init|=
name|RestXContentBuilder
operator|.
name|restContentBuilder
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"ok"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|response
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|request
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|channel
operator|.
name|sendResponse
argument_list|(
operator|new
name|XContentRestResponse
argument_list|(
name|request
argument_list|,
name|RestStatus
operator|.
name|OK
argument_list|,
name|builder
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|onFailure
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
try|try
block|{
name|channel
operator|.
name|sendResponse
argument_list|(
operator|new
name|XContentThrowableRestResponse
argument_list|(
name|request
argument_list|,
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e1
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Failed to send failure response"
argument_list|,
name|e1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|class|RestSettingsHandler
class|class
name|RestSettingsHandler
implements|implements
name|RestHandler
block|{
annotation|@
name|Override
DECL|method|handleRequest
specifier|public
name|void
name|handleRequest
parameter_list|(
specifier|final
name|RestRequest
name|request
parameter_list|,
specifier|final
name|RestChannel
name|channel
parameter_list|)
block|{
name|NodesInfoRequest
name|nodesInfoRequest
init|=
operator|new
name|NodesInfoRequest
argument_list|(
name|RestActions
operator|.
name|splitNodes
argument_list|(
name|request
operator|.
name|param
argument_list|(
literal|"nodeId"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|nodesInfoRequest
operator|.
name|clear
argument_list|()
operator|.
name|settings
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|executeNodeRequest
argument_list|(
name|request
argument_list|,
name|channel
argument_list|,
name|nodesInfoRequest
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|RestOsHandler
class|class
name|RestOsHandler
implements|implements
name|RestHandler
block|{
annotation|@
name|Override
DECL|method|handleRequest
specifier|public
name|void
name|handleRequest
parameter_list|(
specifier|final
name|RestRequest
name|request
parameter_list|,
specifier|final
name|RestChannel
name|channel
parameter_list|)
block|{
name|NodesInfoRequest
name|nodesInfoRequest
init|=
operator|new
name|NodesInfoRequest
argument_list|(
name|RestActions
operator|.
name|splitNodes
argument_list|(
name|request
operator|.
name|param
argument_list|(
literal|"nodeId"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|nodesInfoRequest
operator|.
name|clear
argument_list|()
operator|.
name|os
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|executeNodeRequest
argument_list|(
name|request
argument_list|,
name|channel
argument_list|,
name|nodesInfoRequest
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|RestProcessHandler
class|class
name|RestProcessHandler
implements|implements
name|RestHandler
block|{
annotation|@
name|Override
DECL|method|handleRequest
specifier|public
name|void
name|handleRequest
parameter_list|(
specifier|final
name|RestRequest
name|request
parameter_list|,
specifier|final
name|RestChannel
name|channel
parameter_list|)
block|{
name|NodesInfoRequest
name|nodesInfoRequest
init|=
operator|new
name|NodesInfoRequest
argument_list|(
name|RestActions
operator|.
name|splitNodes
argument_list|(
name|request
operator|.
name|param
argument_list|(
literal|"nodeId"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|nodesInfoRequest
operator|.
name|clear
argument_list|()
operator|.
name|process
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|executeNodeRequest
argument_list|(
name|request
argument_list|,
name|channel
argument_list|,
name|nodesInfoRequest
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|RestJvmHandler
class|class
name|RestJvmHandler
implements|implements
name|RestHandler
block|{
annotation|@
name|Override
DECL|method|handleRequest
specifier|public
name|void
name|handleRequest
parameter_list|(
specifier|final
name|RestRequest
name|request
parameter_list|,
specifier|final
name|RestChannel
name|channel
parameter_list|)
block|{
name|NodesInfoRequest
name|nodesInfoRequest
init|=
operator|new
name|NodesInfoRequest
argument_list|(
name|RestActions
operator|.
name|splitNodes
argument_list|(
name|request
operator|.
name|param
argument_list|(
literal|"nodeId"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|nodesInfoRequest
operator|.
name|clear
argument_list|()
operator|.
name|jvm
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|executeNodeRequest
argument_list|(
name|request
argument_list|,
name|channel
argument_list|,
name|nodesInfoRequest
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|RestThreadPoolHandler
class|class
name|RestThreadPoolHandler
implements|implements
name|RestHandler
block|{
annotation|@
name|Override
DECL|method|handleRequest
specifier|public
name|void
name|handleRequest
parameter_list|(
specifier|final
name|RestRequest
name|request
parameter_list|,
specifier|final
name|RestChannel
name|channel
parameter_list|)
block|{
name|NodesInfoRequest
name|nodesInfoRequest
init|=
operator|new
name|NodesInfoRequest
argument_list|(
name|RestActions
operator|.
name|splitNodes
argument_list|(
name|request
operator|.
name|param
argument_list|(
literal|"nodeId"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|nodesInfoRequest
operator|.
name|clear
argument_list|()
operator|.
name|threadPool
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|executeNodeRequest
argument_list|(
name|request
argument_list|,
name|channel
argument_list|,
name|nodesInfoRequest
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|RestNetworkHandler
class|class
name|RestNetworkHandler
implements|implements
name|RestHandler
block|{
annotation|@
name|Override
DECL|method|handleRequest
specifier|public
name|void
name|handleRequest
parameter_list|(
specifier|final
name|RestRequest
name|request
parameter_list|,
specifier|final
name|RestChannel
name|channel
parameter_list|)
block|{
name|NodesInfoRequest
name|nodesInfoRequest
init|=
operator|new
name|NodesInfoRequest
argument_list|(
name|RestActions
operator|.
name|splitNodes
argument_list|(
name|request
operator|.
name|param
argument_list|(
literal|"nodeId"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|nodesInfoRequest
operator|.
name|clear
argument_list|()
operator|.
name|network
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|executeNodeRequest
argument_list|(
name|request
argument_list|,
name|channel
argument_list|,
name|nodesInfoRequest
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|RestTransportHandler
class|class
name|RestTransportHandler
implements|implements
name|RestHandler
block|{
annotation|@
name|Override
DECL|method|handleRequest
specifier|public
name|void
name|handleRequest
parameter_list|(
specifier|final
name|RestRequest
name|request
parameter_list|,
specifier|final
name|RestChannel
name|channel
parameter_list|)
block|{
name|NodesInfoRequest
name|nodesInfoRequest
init|=
operator|new
name|NodesInfoRequest
argument_list|(
name|RestActions
operator|.
name|splitNodes
argument_list|(
name|request
operator|.
name|param
argument_list|(
literal|"nodeId"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|nodesInfoRequest
operator|.
name|clear
argument_list|()
operator|.
name|transport
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|executeNodeRequest
argument_list|(
name|request
argument_list|,
name|channel
argument_list|,
name|nodesInfoRequest
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|RestHttpHandler
class|class
name|RestHttpHandler
implements|implements
name|RestHandler
block|{
annotation|@
name|Override
DECL|method|handleRequest
specifier|public
name|void
name|handleRequest
parameter_list|(
specifier|final
name|RestRequest
name|request
parameter_list|,
specifier|final
name|RestChannel
name|channel
parameter_list|)
block|{
name|NodesInfoRequest
name|nodesInfoRequest
init|=
operator|new
name|NodesInfoRequest
argument_list|(
name|RestActions
operator|.
name|splitNodes
argument_list|(
name|request
operator|.
name|param
argument_list|(
literal|"nodeId"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|nodesInfoRequest
operator|.
name|clear
argument_list|()
operator|.
name|http
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|executeNodeRequest
argument_list|(
name|request
argument_list|,
name|channel
argument_list|,
name|nodesInfoRequest
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|RestPluginHandler
class|class
name|RestPluginHandler
implements|implements
name|RestHandler
block|{
annotation|@
name|Override
DECL|method|handleRequest
specifier|public
name|void
name|handleRequest
parameter_list|(
specifier|final
name|RestRequest
name|request
parameter_list|,
specifier|final
name|RestChannel
name|channel
parameter_list|)
block|{
name|NodesInfoRequest
name|nodesInfoRequest
init|=
operator|new
name|NodesInfoRequest
argument_list|(
name|RestActions
operator|.
name|splitNodes
argument_list|(
name|request
operator|.
name|param
argument_list|(
literal|"nodeId"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|nodesInfoRequest
operator|.
name|clear
argument_list|()
operator|.
name|plugin
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|executeNodeRequest
argument_list|(
name|request
argument_list|,
name|channel
argument_list|,
name|nodesInfoRequest
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

