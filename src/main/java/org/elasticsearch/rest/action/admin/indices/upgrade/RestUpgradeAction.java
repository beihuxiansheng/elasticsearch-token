begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.rest.action.admin.indices.upgrade
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|upgrade
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|optimize
operator|.
name|OptimizeRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|optimize
operator|.
name|OptimizeResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|segments
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|Tuple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilderString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|Segment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|BaseRestHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|BytesRestResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|action
operator|.
name|support
operator|.
name|RestBuilderListener
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestRequest
operator|.
name|Method
operator|.
name|GET
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestRequest
operator|.
name|Method
operator|.
name|POST
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestStatus
operator|.
name|OK
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|action
operator|.
name|support
operator|.
name|RestActions
operator|.
name|buildBroadcastShardsHeader
import|;
end_import

begin_class
DECL|class|RestUpgradeAction
specifier|public
class|class
name|RestUpgradeAction
extends|extends
name|BaseRestHandler
block|{
annotation|@
name|Inject
DECL|method|RestUpgradeAction
specifier|public
name|RestUpgradeAction
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|RestController
name|controller
parameter_list|,
name|Client
name|client
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|,
name|controller
argument_list|,
name|client
argument_list|)
expr_stmt|;
name|controller
operator|.
name|registerHandler
argument_list|(
name|POST
argument_list|,
literal|"/_upgrade"
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|controller
operator|.
name|registerHandler
argument_list|(
name|POST
argument_list|,
literal|"/{index}/_upgrade"
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|controller
operator|.
name|registerHandler
argument_list|(
name|GET
argument_list|,
literal|"/_upgrade"
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|controller
operator|.
name|registerHandler
argument_list|(
name|GET
argument_list|,
literal|"/{index}/_upgrade"
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|handleRequest
specifier|protected
name|void
name|handleRequest
parameter_list|(
name|RestRequest
name|request
parameter_list|,
name|RestChannel
name|channel
parameter_list|,
name|Client
name|client
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|request
operator|.
name|method
argument_list|()
operator|.
name|equals
argument_list|(
name|RestRequest
operator|.
name|Method
operator|.
name|GET
argument_list|)
condition|)
block|{
name|handleGet
argument_list|(
name|request
argument_list|,
name|channel
argument_list|,
name|client
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|request
operator|.
name|method
argument_list|()
operator|.
name|equals
argument_list|(
name|RestRequest
operator|.
name|Method
operator|.
name|POST
argument_list|)
condition|)
block|{
name|handlePost
argument_list|(
name|request
argument_list|,
name|channel
argument_list|,
name|client
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|handleGet
name|void
name|handleGet
parameter_list|(
name|RestRequest
name|request
parameter_list|,
name|RestChannel
name|channel
parameter_list|,
name|Client
name|client
parameter_list|)
block|{
name|IndicesSegmentsRequest
name|segsReq
init|=
operator|new
name|IndicesSegmentsRequest
argument_list|(
name|Strings
operator|.
name|splitStringByCommaToArray
argument_list|(
name|request
operator|.
name|param
argument_list|(
literal|"index"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|client
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|segments
argument_list|(
name|segsReq
argument_list|,
operator|new
name|RestBuilderListener
argument_list|<
name|IndicesSegmentResponse
argument_list|>
argument_list|(
name|channel
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|RestResponse
name|buildResponse
parameter_list|(
name|IndicesSegmentResponse
name|response
parameter_list|,
name|XContentBuilder
name|builder
parameter_list|)
throws|throws
name|Exception
block|{
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
comment|// TODO: getIndices().values() is what IndecesSegmentsResponse uses, but this will produce different orders with jdk8?
for|for
control|(
name|IndexSegments
name|indexSegments
range|:
name|response
operator|.
name|getIndices
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|Tuple
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
name|summary
init|=
name|calculateUpgradeStatus
argument_list|(
name|indexSegments
argument_list|)
decl_stmt|;
name|builder
operator|.
name|startObject
argument_list|(
name|indexSegments
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|byteSizeField
argument_list|(
name|SIZE_IN_BYTES
argument_list|,
name|SIZE
argument_list|,
name|summary
operator|.
name|v1
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|byteSizeField
argument_list|(
name|SIZE_TO_UPGRADE_IN_BYTES
argument_list|,
name|SIZE_TO_UPGRADE
argument_list|,
name|summary
operator|.
name|v2
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
operator|new
name|BytesRestResponse
argument_list|(
name|OK
argument_list|,
name|builder
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|handlePost
name|void
name|handlePost
parameter_list|(
name|RestRequest
name|request
parameter_list|,
name|RestChannel
name|channel
parameter_list|,
name|Client
name|client
parameter_list|)
block|{
name|OptimizeRequest
name|optimizeReq
init|=
operator|new
name|OptimizeRequest
argument_list|(
name|Strings
operator|.
name|splitStringByCommaToArray
argument_list|(
name|request
operator|.
name|param
argument_list|(
literal|"index"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|optimizeReq
operator|.
name|waitForMerge
argument_list|(
name|request
operator|.
name|paramAsBoolean
argument_list|(
literal|"wait_for_completion"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|optimizeReq
operator|.
name|flush
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|optimizeReq
operator|.
name|upgrade
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|optimizeReq
operator|.
name|maxNumSegments
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
comment|// we just want to upgrade the segments, not actually optimize to a single segment
name|client
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|optimize
argument_list|(
name|optimizeReq
argument_list|,
operator|new
name|RestBuilderListener
argument_list|<
name|OptimizeResponse
argument_list|>
argument_list|(
name|channel
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|RestResponse
name|buildResponse
parameter_list|(
name|OptimizeResponse
name|response
parameter_list|,
name|XContentBuilder
name|builder
parameter_list|)
throws|throws
name|Exception
block|{
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|buildBroadcastShardsHeader
argument_list|(
name|builder
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
operator|new
name|BytesRestResponse
argument_list|(
name|OK
argument_list|,
name|builder
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|calculateUpgradeStatus
name|Tuple
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
name|calculateUpgradeStatus
parameter_list|(
name|IndexSegments
name|indexSegments
parameter_list|)
block|{
name|long
name|total_bytes
init|=
literal|0
decl_stmt|;
name|long
name|to_upgrade_bytes
init|=
literal|0
decl_stmt|;
for|for
control|(
name|IndexShardSegments
name|shard
range|:
name|indexSegments
control|)
block|{
for|for
control|(
name|ShardSegments
name|segs
range|:
name|shard
operator|.
name|getShards
argument_list|()
control|)
block|{
for|for
control|(
name|Segment
name|seg
range|:
name|segs
operator|.
name|getSegments
argument_list|()
control|)
block|{
name|total_bytes
operator|+=
name|seg
operator|.
name|sizeInBytes
expr_stmt|;
if|if
condition|(
name|seg
operator|.
name|version
operator|.
name|major
operator|!=
name|Version
operator|.
name|CURRENT
operator|.
name|luceneVersion
operator|.
name|major
operator|||
name|seg
operator|.
name|version
operator|.
name|minor
operator|!=
name|Version
operator|.
name|CURRENT
operator|.
name|luceneVersion
operator|.
name|minor
condition|)
block|{
comment|// TODO: this comparison is bogus! it would cause us to upgrade even with the same format
comment|// instead, we should check if the codec has changed
name|to_upgrade_bytes
operator|+=
name|seg
operator|.
name|sizeInBytes
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
operator|new
name|Tuple
argument_list|<>
argument_list|(
name|total_bytes
argument_list|,
name|to_upgrade_bytes
argument_list|)
return|;
block|}
DECL|field|SIZE
specifier|static
specifier|final
name|XContentBuilderString
name|SIZE
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"size"
argument_list|)
decl_stmt|;
DECL|field|SIZE_IN_BYTES
specifier|static
specifier|final
name|XContentBuilderString
name|SIZE_IN_BYTES
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"size_in_bytes"
argument_list|)
decl_stmt|;
DECL|field|SIZE_TO_UPGRADE
specifier|static
specifier|final
name|XContentBuilderString
name|SIZE_TO_UPGRADE
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"size_to_upgrade"
argument_list|)
decl_stmt|;
DECL|field|SIZE_TO_UPGRADE_IN_BYTES
specifier|static
specifier|final
name|XContentBuilderString
name|SIZE_TO_UPGRADE_IN_BYTES
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"size_to_upgrade_in_bytes"
argument_list|)
decl_stmt|;
block|}
end_class

end_unit

