begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.rest
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|rest
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|master
operator|.
name|AcknowledgedResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|ESLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilderString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|action
operator|.
name|support
operator|.
name|RestXContentBuilder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestStatus
operator|.
name|OK
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
DECL|class|AcknowledgedRestResponseActionListener
specifier|public
class|class
name|AcknowledgedRestResponseActionListener
parameter_list|<
name|T
extends|extends
name|AcknowledgedResponse
parameter_list|>
extends|extends
name|AbstractRestResponseActionListener
argument_list|<
name|T
argument_list|>
block|{
DECL|method|AcknowledgedRestResponseActionListener
specifier|public
name|AcknowledgedRestResponseActionListener
parameter_list|(
name|RestRequest
name|request
parameter_list|,
name|RestChannel
name|channel
parameter_list|,
name|ESLogger
name|logger
parameter_list|)
block|{
name|super
argument_list|(
name|request
argument_list|,
name|channel
argument_list|,
name|logger
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onResponse
specifier|public
name|void
name|onResponse
parameter_list|(
name|T
name|response
parameter_list|)
block|{
try|try
block|{
name|XContentBuilder
name|builder
init|=
name|RestXContentBuilder
operator|.
name|restContentBuilder
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|builder
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|OK
argument_list|,
literal|true
argument_list|)
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|ACKNOWLEDGED
argument_list|,
name|response
operator|.
name|isAcknowledged
argument_list|()
argument_list|)
expr_stmt|;
name|addCustomFields
argument_list|(
name|builder
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|channel
operator|.
name|sendResponse
argument_list|(
operator|new
name|XContentRestResponse
argument_list|(
name|request
argument_list|,
name|OK
argument_list|,
name|builder
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|onFailure
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Adds api specific fields to the rest response      * Does nothing by default but can be overridden by subclasses      */
DECL|method|addCustomFields
specifier|protected
name|void
name|addCustomFields
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|T
name|response
parameter_list|)
throws|throws
name|IOException
block|{      }
DECL|class|Fields
specifier|static
specifier|final
class|class
name|Fields
block|{
DECL|field|OK
specifier|static
specifier|final
name|XContentBuilderString
name|OK
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"ok"
argument_list|)
decl_stmt|;
DECL|field|ACKNOWLEDGED
specifier|static
specifier|final
name|XContentBuilderString
name|ACKNOWLEDGED
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"acknowledged"
argument_list|)
decl_stmt|;
block|}
block|}
end_class

end_unit

