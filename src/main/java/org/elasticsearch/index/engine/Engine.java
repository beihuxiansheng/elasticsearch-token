begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.engine
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|ExtendedIndexSearcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticSearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|CloseableComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lease
operator|.
name|Releasable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|uid
operator|.
name|UidField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|ByteSizeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadSafe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|VersionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|deletionpolicy
operator|.
name|SnapshotIndexCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|DocumentMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|ParsedDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|internal
operator|.
name|UidFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|IndexShardComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|translog
operator|.
name|Translog
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_interface
annotation|@
name|ThreadSafe
DECL|interface|Engine
specifier|public
interface|interface
name|Engine
extends|extends
name|IndexShardComponent
extends|,
name|CloseableComponent
block|{
DECL|field|INACTIVE_SHARD_INDEXING_BUFFER
specifier|static
name|ByteSizeValue
name|INACTIVE_SHARD_INDEXING_BUFFER
init|=
name|ByteSizeValue
operator|.
name|parseBytesSizeValue
argument_list|(
literal|"500kb"
argument_list|)
decl_stmt|;
comment|/**      * The default suggested refresh interval, -1 to disable it.      */
DECL|method|defaultRefreshInterval
name|TimeValue
name|defaultRefreshInterval
parameter_list|()
function_decl|;
DECL|method|updateIndexingBufferSize
name|void
name|updateIndexingBufferSize
parameter_list|(
name|ByteSizeValue
name|indexingBufferSize
parameter_list|)
function_decl|;
DECL|method|addFailedEngineListener
name|void
name|addFailedEngineListener
parameter_list|(
name|FailedEngineListener
name|listener
parameter_list|)
function_decl|;
comment|/**      * Starts the Engine.      *<p/>      *<p>Note, after the creation and before the call to start, the store might      * be changed.      */
DECL|method|start
name|void
name|start
parameter_list|()
throws|throws
name|EngineException
function_decl|;
DECL|method|create
name|void
name|create
parameter_list|(
name|Create
name|create
parameter_list|)
throws|throws
name|EngineException
function_decl|;
DECL|method|index
name|void
name|index
parameter_list|(
name|Index
name|index
parameter_list|)
throws|throws
name|EngineException
function_decl|;
DECL|method|delete
name|void
name|delete
parameter_list|(
name|Delete
name|delete
parameter_list|)
throws|throws
name|EngineException
function_decl|;
DECL|method|delete
name|void
name|delete
parameter_list|(
name|DeleteByQuery
name|delete
parameter_list|)
throws|throws
name|EngineException
function_decl|;
DECL|method|get
name|GetResult
name|get
parameter_list|(
name|Get
name|get
parameter_list|)
throws|throws
name|EngineException
function_decl|;
DECL|method|searcher
name|Searcher
name|searcher
parameter_list|()
throws|throws
name|EngineException
function_decl|;
DECL|method|segments
name|List
argument_list|<
name|Segment
argument_list|>
name|segments
parameter_list|()
function_decl|;
comment|/**      * Returns<tt>true</tt> if a refresh is really needed.      */
DECL|method|refreshNeeded
name|boolean
name|refreshNeeded
parameter_list|()
function_decl|;
comment|/**      * Returns<tt>true</tt> if a possible merge is really needed.      */
DECL|method|possibleMergeNeeded
name|boolean
name|possibleMergeNeeded
parameter_list|()
function_decl|;
DECL|method|maybeMerge
name|void
name|maybeMerge
parameter_list|()
throws|throws
name|EngineException
function_decl|;
comment|/**      * Refreshes the engine for new search operations to reflect the latest      * changes. Pass<tt>true</tt> if the refresh operation should include      * all the operations performed up to this call.      */
DECL|method|refresh
name|void
name|refresh
parameter_list|(
name|Refresh
name|refresh
parameter_list|)
throws|throws
name|EngineException
function_decl|;
comment|/**      * Flushes the state of the engine, clearing memory.      */
DECL|method|flush
name|void
name|flush
parameter_list|(
name|Flush
name|flush
parameter_list|)
throws|throws
name|EngineException
throws|,
name|FlushNotAllowedEngineException
function_decl|;
DECL|method|optimize
name|void
name|optimize
parameter_list|(
name|Optimize
name|optimize
parameter_list|)
throws|throws
name|EngineException
function_decl|;
DECL|method|snapshot
parameter_list|<
name|T
parameter_list|>
name|T
name|snapshot
parameter_list|(
name|SnapshotHandler
argument_list|<
name|T
argument_list|>
name|snapshotHandler
parameter_list|)
throws|throws
name|EngineException
function_decl|;
DECL|method|recover
name|void
name|recover
parameter_list|(
name|RecoveryHandler
name|recoveryHandler
parameter_list|)
throws|throws
name|EngineException
function_decl|;
DECL|interface|FailedEngineListener
specifier|static
interface|interface
name|FailedEngineListener
block|{
DECL|method|onFailedEngine
name|void
name|onFailedEngine
parameter_list|(
name|ShardId
name|shardId
parameter_list|,
name|Throwable
name|t
parameter_list|)
function_decl|;
block|}
comment|/**      * Recovery allow to start the recovery process. It is built of three phases.      *<p/>      *<p>The first phase allows to take a snapshot of the master index. Once this      * is taken, no commit operations are effectively allowed on the index until the recovery      * phases are through.      *<p/>      *<p>The seconds phase takes a snapshot of the current transaction log.      *<p/>      *<p>The last phase returns the remaining transaction log. During this phase, no dirty      * operations are allowed on the index.      */
DECL|interface|RecoveryHandler
specifier|static
interface|interface
name|RecoveryHandler
block|{
DECL|method|phase1
name|void
name|phase1
parameter_list|(
name|SnapshotIndexCommit
name|snapshot
parameter_list|)
throws|throws
name|ElasticSearchException
function_decl|;
DECL|method|phase2
name|void
name|phase2
parameter_list|(
name|Translog
operator|.
name|Snapshot
name|snapshot
parameter_list|)
throws|throws
name|ElasticSearchException
function_decl|;
DECL|method|phase3
name|void
name|phase3
parameter_list|(
name|Translog
operator|.
name|Snapshot
name|snapshot
parameter_list|)
throws|throws
name|ElasticSearchException
function_decl|;
block|}
comment|/**      */
DECL|interface|SnapshotHandler
specifier|static
interface|interface
name|SnapshotHandler
parameter_list|<
name|T
parameter_list|>
block|{
DECL|method|snapshot
name|T
name|snapshot
parameter_list|(
name|SnapshotIndexCommit
name|snapshotIndexCommit
parameter_list|,
name|Translog
operator|.
name|Snapshot
name|translogSnapshot
parameter_list|)
throws|throws
name|EngineException
function_decl|;
block|}
DECL|interface|Searcher
specifier|static
interface|interface
name|Searcher
extends|extends
name|Releasable
block|{
DECL|method|reader
name|IndexReader
name|reader
parameter_list|()
function_decl|;
DECL|method|searcher
name|ExtendedIndexSearcher
name|searcher
parameter_list|()
function_decl|;
block|}
DECL|class|Refresh
specifier|static
class|class
name|Refresh
block|{
DECL|field|waitForOperations
specifier|private
specifier|final
name|boolean
name|waitForOperations
decl_stmt|;
DECL|field|force
specifier|private
name|boolean
name|force
init|=
literal|false
decl_stmt|;
DECL|method|Refresh
specifier|public
name|Refresh
parameter_list|(
name|boolean
name|waitForOperations
parameter_list|)
block|{
name|this
operator|.
name|waitForOperations
operator|=
name|waitForOperations
expr_stmt|;
block|}
DECL|method|force
specifier|public
name|Refresh
name|force
parameter_list|(
name|boolean
name|force
parameter_list|)
block|{
name|this
operator|.
name|force
operator|=
name|force
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|force
specifier|public
name|boolean
name|force
parameter_list|()
block|{
return|return
name|this
operator|.
name|force
return|;
block|}
DECL|method|waitForOperations
specifier|public
name|boolean
name|waitForOperations
parameter_list|()
block|{
return|return
name|waitForOperations
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"waitForOperations["
operator|+
name|waitForOperations
operator|+
literal|"]"
return|;
block|}
block|}
DECL|class|Flush
specifier|static
class|class
name|Flush
block|{
DECL|field|full
specifier|private
name|boolean
name|full
init|=
literal|false
decl_stmt|;
DECL|field|refresh
specifier|private
name|boolean
name|refresh
init|=
literal|false
decl_stmt|;
DECL|field|force
specifier|private
name|boolean
name|force
init|=
literal|false
decl_stmt|;
comment|/**          * Should a refresh be performed after flushing. Defaults to<tt>false</tt>.          */
DECL|method|refresh
specifier|public
name|boolean
name|refresh
parameter_list|()
block|{
return|return
name|this
operator|.
name|refresh
return|;
block|}
comment|/**          * Should a refresh be performed after flushing. Defaults to<tt>false</tt>.          */
DECL|method|refresh
specifier|public
name|Flush
name|refresh
parameter_list|(
name|boolean
name|refresh
parameter_list|)
block|{
name|this
operator|.
name|refresh
operator|=
name|refresh
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Should a "full" flush be issued, basically cleaning as much memory as possible.          */
DECL|method|full
specifier|public
name|boolean
name|full
parameter_list|()
block|{
return|return
name|this
operator|.
name|full
return|;
block|}
comment|/**          * Should a "full" flush be issued, basically cleaning as much memory as possible.          */
DECL|method|full
specifier|public
name|Flush
name|full
parameter_list|(
name|boolean
name|full
parameter_list|)
block|{
name|this
operator|.
name|full
operator|=
name|full
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|force
specifier|public
name|boolean
name|force
parameter_list|()
block|{
return|return
name|this
operator|.
name|force
return|;
block|}
DECL|method|force
specifier|public
name|Flush
name|force
parameter_list|(
name|boolean
name|force
parameter_list|)
block|{
name|this
operator|.
name|force
operator|=
name|force
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"full["
operator|+
name|full
operator|+
literal|"], refresh["
operator|+
name|refresh
operator|+
literal|"], force["
operator|+
name|force
operator|+
literal|"]"
return|;
block|}
block|}
DECL|class|Optimize
specifier|static
class|class
name|Optimize
block|{
DECL|field|waitForMerge
specifier|private
name|boolean
name|waitForMerge
init|=
literal|true
decl_stmt|;
DECL|field|maxNumSegments
specifier|private
name|int
name|maxNumSegments
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|onlyExpungeDeletes
specifier|private
name|boolean
name|onlyExpungeDeletes
init|=
literal|false
decl_stmt|;
DECL|field|flush
specifier|private
name|boolean
name|flush
init|=
literal|false
decl_stmt|;
DECL|field|refresh
specifier|private
name|boolean
name|refresh
init|=
literal|false
decl_stmt|;
DECL|method|Optimize
specifier|public
name|Optimize
parameter_list|()
block|{         }
DECL|method|waitForMerge
specifier|public
name|boolean
name|waitForMerge
parameter_list|()
block|{
return|return
name|waitForMerge
return|;
block|}
DECL|method|waitForMerge
specifier|public
name|Optimize
name|waitForMerge
parameter_list|(
name|boolean
name|waitForMerge
parameter_list|)
block|{
name|this
operator|.
name|waitForMerge
operator|=
name|waitForMerge
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|maxNumSegments
specifier|public
name|int
name|maxNumSegments
parameter_list|()
block|{
return|return
name|maxNumSegments
return|;
block|}
DECL|method|maxNumSegments
specifier|public
name|Optimize
name|maxNumSegments
parameter_list|(
name|int
name|maxNumSegments
parameter_list|)
block|{
name|this
operator|.
name|maxNumSegments
operator|=
name|maxNumSegments
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|onlyExpungeDeletes
specifier|public
name|boolean
name|onlyExpungeDeletes
parameter_list|()
block|{
return|return
name|onlyExpungeDeletes
return|;
block|}
DECL|method|onlyExpungeDeletes
specifier|public
name|Optimize
name|onlyExpungeDeletes
parameter_list|(
name|boolean
name|onlyExpungeDeletes
parameter_list|)
block|{
name|this
operator|.
name|onlyExpungeDeletes
operator|=
name|onlyExpungeDeletes
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|flush
specifier|public
name|boolean
name|flush
parameter_list|()
block|{
return|return
name|flush
return|;
block|}
DECL|method|flush
specifier|public
name|Optimize
name|flush
parameter_list|(
name|boolean
name|flush
parameter_list|)
block|{
name|this
operator|.
name|flush
operator|=
name|flush
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|refresh
specifier|public
name|boolean
name|refresh
parameter_list|()
block|{
return|return
name|refresh
return|;
block|}
DECL|method|refresh
specifier|public
name|Optimize
name|refresh
parameter_list|(
name|boolean
name|refresh
parameter_list|)
block|{
name|this
operator|.
name|refresh
operator|=
name|refresh
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"waitForMerge["
operator|+
name|waitForMerge
operator|+
literal|"], maxNumSegments["
operator|+
name|maxNumSegments
operator|+
literal|"], onlyExpungeDeletes["
operator|+
name|onlyExpungeDeletes
operator|+
literal|"], flush["
operator|+
name|flush
operator|+
literal|"], refresh["
operator|+
name|refresh
operator|+
literal|"]"
return|;
block|}
block|}
DECL|interface|Operation
specifier|static
interface|interface
name|Operation
block|{
DECL|enum|Type
specifier|static
enum|enum
name|Type
block|{
DECL|enum constant|CREATE
name|CREATE
block|,
DECL|enum constant|INDEX
name|INDEX
block|,
DECL|enum constant|DELETE
name|DELETE
block|}
DECL|enum|Origin
specifier|static
enum|enum
name|Origin
block|{
DECL|enum constant|PRIMARY
name|PRIMARY
block|,
DECL|enum constant|REPLICA
name|REPLICA
block|,
DECL|enum constant|RECOVERY
name|RECOVERY
block|}
DECL|method|opType
name|Type
name|opType
parameter_list|()
function_decl|;
DECL|method|origin
name|Origin
name|origin
parameter_list|()
function_decl|;
block|}
DECL|interface|IndexingOperation
specifier|static
interface|interface
name|IndexingOperation
extends|extends
name|Operation
block|{
DECL|method|parsedDoc
name|ParsedDocument
name|parsedDoc
parameter_list|()
function_decl|;
DECL|method|docs
name|List
argument_list|<
name|Document
argument_list|>
name|docs
parameter_list|()
function_decl|;
DECL|method|docMapper
name|DocumentMapper
name|docMapper
parameter_list|()
function_decl|;
block|}
DECL|class|Create
specifier|static
class|class
name|Create
implements|implements
name|IndexingOperation
block|{
DECL|field|docMapper
specifier|private
specifier|final
name|DocumentMapper
name|docMapper
decl_stmt|;
DECL|field|uid
specifier|private
specifier|final
name|Term
name|uid
decl_stmt|;
DECL|field|doc
specifier|private
specifier|final
name|ParsedDocument
name|doc
decl_stmt|;
DECL|field|version
specifier|private
name|long
name|version
decl_stmt|;
DECL|field|versionType
specifier|private
name|VersionType
name|versionType
init|=
name|VersionType
operator|.
name|INTERNAL
decl_stmt|;
DECL|field|origin
specifier|private
name|Origin
name|origin
init|=
name|Origin
operator|.
name|PRIMARY
decl_stmt|;
DECL|field|startTime
specifier|private
name|long
name|startTime
decl_stmt|;
DECL|field|endTime
specifier|private
name|long
name|endTime
decl_stmt|;
DECL|method|Create
specifier|public
name|Create
parameter_list|(
name|DocumentMapper
name|docMapper
parameter_list|,
name|Term
name|uid
parameter_list|,
name|ParsedDocument
name|doc
parameter_list|)
block|{
name|this
operator|.
name|docMapper
operator|=
name|docMapper
expr_stmt|;
name|this
operator|.
name|uid
operator|=
name|uid
expr_stmt|;
name|this
operator|.
name|doc
operator|=
name|doc
expr_stmt|;
block|}
DECL|method|docMapper
specifier|public
name|DocumentMapper
name|docMapper
parameter_list|()
block|{
return|return
name|this
operator|.
name|docMapper
return|;
block|}
annotation|@
name|Override
DECL|method|opType
specifier|public
name|Type
name|opType
parameter_list|()
block|{
return|return
name|Type
operator|.
name|CREATE
return|;
block|}
DECL|method|origin
specifier|public
name|Create
name|origin
parameter_list|(
name|Origin
name|origin
parameter_list|)
block|{
name|this
operator|.
name|origin
operator|=
name|origin
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|origin
specifier|public
name|Origin
name|origin
parameter_list|()
block|{
return|return
name|this
operator|.
name|origin
return|;
block|}
DECL|method|parsedDoc
specifier|public
name|ParsedDocument
name|parsedDoc
parameter_list|()
block|{
return|return
name|this
operator|.
name|doc
return|;
block|}
DECL|method|uid
specifier|public
name|Term
name|uid
parameter_list|()
block|{
return|return
name|this
operator|.
name|uid
return|;
block|}
DECL|method|type
specifier|public
name|String
name|type
parameter_list|()
block|{
return|return
name|this
operator|.
name|doc
operator|.
name|type
argument_list|()
return|;
block|}
DECL|method|id
specifier|public
name|String
name|id
parameter_list|()
block|{
return|return
name|this
operator|.
name|doc
operator|.
name|id
argument_list|()
return|;
block|}
DECL|method|routing
specifier|public
name|String
name|routing
parameter_list|()
block|{
return|return
name|this
operator|.
name|doc
operator|.
name|routing
argument_list|()
return|;
block|}
DECL|method|timestamp
specifier|public
name|long
name|timestamp
parameter_list|()
block|{
return|return
name|this
operator|.
name|doc
operator|.
name|timestamp
argument_list|()
return|;
block|}
DECL|method|ttl
specifier|public
name|long
name|ttl
parameter_list|()
block|{
return|return
name|this
operator|.
name|doc
operator|.
name|ttl
argument_list|()
return|;
block|}
DECL|method|version
specifier|public
name|long
name|version
parameter_list|()
block|{
return|return
name|this
operator|.
name|version
return|;
block|}
DECL|method|version
specifier|public
name|Create
name|version
parameter_list|(
name|long
name|version
parameter_list|)
block|{
name|this
operator|.
name|version
operator|=
name|version
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|versionType
specifier|public
name|VersionType
name|versionType
parameter_list|()
block|{
return|return
name|this
operator|.
name|versionType
return|;
block|}
DECL|method|versionType
specifier|public
name|Create
name|versionType
parameter_list|(
name|VersionType
name|versionType
parameter_list|)
block|{
name|this
operator|.
name|versionType
operator|=
name|versionType
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|parent
specifier|public
name|String
name|parent
parameter_list|()
block|{
return|return
name|this
operator|.
name|doc
operator|.
name|parent
argument_list|()
return|;
block|}
DECL|method|docs
specifier|public
name|List
argument_list|<
name|Document
argument_list|>
name|docs
parameter_list|()
block|{
return|return
name|this
operator|.
name|doc
operator|.
name|docs
argument_list|()
return|;
block|}
DECL|method|analyzer
specifier|public
name|Analyzer
name|analyzer
parameter_list|()
block|{
return|return
name|this
operator|.
name|doc
operator|.
name|analyzer
argument_list|()
return|;
block|}
DECL|method|source
specifier|public
name|byte
index|[]
name|source
parameter_list|()
block|{
return|return
name|this
operator|.
name|doc
operator|.
name|source
argument_list|()
return|;
block|}
DECL|method|sourceOffset
specifier|public
name|int
name|sourceOffset
parameter_list|()
block|{
return|return
name|this
operator|.
name|doc
operator|.
name|sourceOffset
argument_list|()
return|;
block|}
DECL|method|sourceLength
specifier|public
name|int
name|sourceLength
parameter_list|()
block|{
return|return
name|this
operator|.
name|doc
operator|.
name|sourceLength
argument_list|()
return|;
block|}
DECL|method|uidField
specifier|public
name|UidField
name|uidField
parameter_list|()
block|{
return|return
operator|(
name|UidField
operator|)
name|doc
operator|.
name|rootDoc
argument_list|()
operator|.
name|getFieldable
argument_list|(
name|UidFieldMapper
operator|.
name|NAME
argument_list|)
return|;
block|}
DECL|method|startTime
specifier|public
name|Create
name|startTime
parameter_list|(
name|long
name|startTime
parameter_list|)
block|{
name|this
operator|.
name|startTime
operator|=
name|startTime
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Returns operation start time in nanoseconds.          */
DECL|method|startTime
specifier|public
name|long
name|startTime
parameter_list|()
block|{
return|return
name|this
operator|.
name|startTime
return|;
block|}
DECL|method|endTime
specifier|public
name|Create
name|endTime
parameter_list|(
name|long
name|endTime
parameter_list|)
block|{
name|this
operator|.
name|endTime
operator|=
name|endTime
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Returns operation end time in nanoseconds.          */
DECL|method|endTime
specifier|public
name|long
name|endTime
parameter_list|()
block|{
return|return
name|this
operator|.
name|endTime
return|;
block|}
block|}
DECL|class|Index
specifier|static
class|class
name|Index
implements|implements
name|IndexingOperation
block|{
DECL|field|docMapper
specifier|private
specifier|final
name|DocumentMapper
name|docMapper
decl_stmt|;
DECL|field|uid
specifier|private
specifier|final
name|Term
name|uid
decl_stmt|;
DECL|field|doc
specifier|private
specifier|final
name|ParsedDocument
name|doc
decl_stmt|;
DECL|field|version
specifier|private
name|long
name|version
decl_stmt|;
DECL|field|versionType
specifier|private
name|VersionType
name|versionType
init|=
name|VersionType
operator|.
name|INTERNAL
decl_stmt|;
DECL|field|origin
specifier|private
name|Origin
name|origin
init|=
name|Origin
operator|.
name|PRIMARY
decl_stmt|;
DECL|field|startTime
specifier|private
name|long
name|startTime
decl_stmt|;
DECL|field|endTime
specifier|private
name|long
name|endTime
decl_stmt|;
DECL|method|Index
specifier|public
name|Index
parameter_list|(
name|DocumentMapper
name|docMapper
parameter_list|,
name|Term
name|uid
parameter_list|,
name|ParsedDocument
name|doc
parameter_list|)
block|{
name|this
operator|.
name|docMapper
operator|=
name|docMapper
expr_stmt|;
name|this
operator|.
name|uid
operator|=
name|uid
expr_stmt|;
name|this
operator|.
name|doc
operator|=
name|doc
expr_stmt|;
block|}
DECL|method|docMapper
specifier|public
name|DocumentMapper
name|docMapper
parameter_list|()
block|{
return|return
name|this
operator|.
name|docMapper
return|;
block|}
annotation|@
name|Override
DECL|method|opType
specifier|public
name|Type
name|opType
parameter_list|()
block|{
return|return
name|Type
operator|.
name|INDEX
return|;
block|}
DECL|method|origin
specifier|public
name|Index
name|origin
parameter_list|(
name|Origin
name|origin
parameter_list|)
block|{
name|this
operator|.
name|origin
operator|=
name|origin
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|origin
specifier|public
name|Origin
name|origin
parameter_list|()
block|{
return|return
name|this
operator|.
name|origin
return|;
block|}
DECL|method|uid
specifier|public
name|Term
name|uid
parameter_list|()
block|{
return|return
name|this
operator|.
name|uid
return|;
block|}
DECL|method|parsedDoc
specifier|public
name|ParsedDocument
name|parsedDoc
parameter_list|()
block|{
return|return
name|this
operator|.
name|doc
return|;
block|}
DECL|method|version
specifier|public
name|Index
name|version
parameter_list|(
name|long
name|version
parameter_list|)
block|{
name|this
operator|.
name|version
operator|=
name|version
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|version
specifier|public
name|long
name|version
parameter_list|()
block|{
return|return
name|this
operator|.
name|version
return|;
block|}
DECL|method|versionType
specifier|public
name|Index
name|versionType
parameter_list|(
name|VersionType
name|versionType
parameter_list|)
block|{
name|this
operator|.
name|versionType
operator|=
name|versionType
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|versionType
specifier|public
name|VersionType
name|versionType
parameter_list|()
block|{
return|return
name|this
operator|.
name|versionType
return|;
block|}
DECL|method|docs
specifier|public
name|List
argument_list|<
name|Document
argument_list|>
name|docs
parameter_list|()
block|{
return|return
name|this
operator|.
name|doc
operator|.
name|docs
argument_list|()
return|;
block|}
DECL|method|analyzer
specifier|public
name|Analyzer
name|analyzer
parameter_list|()
block|{
return|return
name|this
operator|.
name|doc
operator|.
name|analyzer
argument_list|()
return|;
block|}
DECL|method|id
specifier|public
name|String
name|id
parameter_list|()
block|{
return|return
name|this
operator|.
name|doc
operator|.
name|id
argument_list|()
return|;
block|}
DECL|method|type
specifier|public
name|String
name|type
parameter_list|()
block|{
return|return
name|this
operator|.
name|doc
operator|.
name|type
argument_list|()
return|;
block|}
DECL|method|routing
specifier|public
name|String
name|routing
parameter_list|()
block|{
return|return
name|this
operator|.
name|doc
operator|.
name|routing
argument_list|()
return|;
block|}
DECL|method|parent
specifier|public
name|String
name|parent
parameter_list|()
block|{
return|return
name|this
operator|.
name|doc
operator|.
name|parent
argument_list|()
return|;
block|}
DECL|method|timestamp
specifier|public
name|long
name|timestamp
parameter_list|()
block|{
return|return
name|this
operator|.
name|doc
operator|.
name|timestamp
argument_list|()
return|;
block|}
DECL|method|ttl
specifier|public
name|long
name|ttl
parameter_list|()
block|{
return|return
name|this
operator|.
name|doc
operator|.
name|ttl
argument_list|()
return|;
block|}
DECL|method|source
specifier|public
name|byte
index|[]
name|source
parameter_list|()
block|{
return|return
name|this
operator|.
name|doc
operator|.
name|source
argument_list|()
return|;
block|}
DECL|method|sourceOffset
specifier|public
name|int
name|sourceOffset
parameter_list|()
block|{
return|return
name|this
operator|.
name|doc
operator|.
name|sourceOffset
argument_list|()
return|;
block|}
DECL|method|sourceLength
specifier|public
name|int
name|sourceLength
parameter_list|()
block|{
return|return
name|this
operator|.
name|doc
operator|.
name|sourceLength
argument_list|()
return|;
block|}
DECL|method|uidField
specifier|public
name|UidField
name|uidField
parameter_list|()
block|{
return|return
operator|(
name|UidField
operator|)
name|doc
operator|.
name|rootDoc
argument_list|()
operator|.
name|getFieldable
argument_list|(
name|UidFieldMapper
operator|.
name|NAME
argument_list|)
return|;
block|}
DECL|method|startTime
specifier|public
name|Index
name|startTime
parameter_list|(
name|long
name|startTime
parameter_list|)
block|{
name|this
operator|.
name|startTime
operator|=
name|startTime
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Returns operation start time in nanoseconds.          */
DECL|method|startTime
specifier|public
name|long
name|startTime
parameter_list|()
block|{
return|return
name|this
operator|.
name|startTime
return|;
block|}
DECL|method|endTime
specifier|public
name|Index
name|endTime
parameter_list|(
name|long
name|endTime
parameter_list|)
block|{
name|this
operator|.
name|endTime
operator|=
name|endTime
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Returns operation end time in nanoseconds.          */
DECL|method|endTime
specifier|public
name|long
name|endTime
parameter_list|()
block|{
return|return
name|this
operator|.
name|endTime
return|;
block|}
block|}
DECL|class|Delete
specifier|static
class|class
name|Delete
implements|implements
name|Operation
block|{
DECL|field|type
specifier|private
specifier|final
name|String
name|type
decl_stmt|;
DECL|field|id
specifier|private
specifier|final
name|String
name|id
decl_stmt|;
DECL|field|uid
specifier|private
specifier|final
name|Term
name|uid
decl_stmt|;
DECL|field|version
specifier|private
name|long
name|version
decl_stmt|;
DECL|field|versionType
specifier|private
name|VersionType
name|versionType
init|=
name|VersionType
operator|.
name|INTERNAL
decl_stmt|;
DECL|field|origin
specifier|private
name|Origin
name|origin
init|=
name|Origin
operator|.
name|PRIMARY
decl_stmt|;
DECL|field|notFound
specifier|private
name|boolean
name|notFound
decl_stmt|;
DECL|field|startTime
specifier|private
name|long
name|startTime
decl_stmt|;
DECL|field|endTime
specifier|private
name|long
name|endTime
decl_stmt|;
DECL|method|Delete
specifier|public
name|Delete
parameter_list|(
name|String
name|type
parameter_list|,
name|String
name|id
parameter_list|,
name|Term
name|uid
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|uid
operator|=
name|uid
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|opType
specifier|public
name|Type
name|opType
parameter_list|()
block|{
return|return
name|Type
operator|.
name|DELETE
return|;
block|}
DECL|method|origin
specifier|public
name|Delete
name|origin
parameter_list|(
name|Origin
name|origin
parameter_list|)
block|{
name|this
operator|.
name|origin
operator|=
name|origin
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|origin
specifier|public
name|Origin
name|origin
parameter_list|()
block|{
return|return
name|this
operator|.
name|origin
return|;
block|}
DECL|method|type
specifier|public
name|String
name|type
parameter_list|()
block|{
return|return
name|this
operator|.
name|type
return|;
block|}
DECL|method|id
specifier|public
name|String
name|id
parameter_list|()
block|{
return|return
name|this
operator|.
name|id
return|;
block|}
DECL|method|uid
specifier|public
name|Term
name|uid
parameter_list|()
block|{
return|return
name|this
operator|.
name|uid
return|;
block|}
DECL|method|version
specifier|public
name|Delete
name|version
parameter_list|(
name|long
name|version
parameter_list|)
block|{
name|this
operator|.
name|version
operator|=
name|version
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|version
specifier|public
name|long
name|version
parameter_list|()
block|{
return|return
name|this
operator|.
name|version
return|;
block|}
DECL|method|versionType
specifier|public
name|Delete
name|versionType
parameter_list|(
name|VersionType
name|versionType
parameter_list|)
block|{
name|this
operator|.
name|versionType
operator|=
name|versionType
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|versionType
specifier|public
name|VersionType
name|versionType
parameter_list|()
block|{
return|return
name|this
operator|.
name|versionType
return|;
block|}
DECL|method|notFound
specifier|public
name|boolean
name|notFound
parameter_list|()
block|{
return|return
name|this
operator|.
name|notFound
return|;
block|}
DECL|method|notFound
specifier|public
name|Delete
name|notFound
parameter_list|(
name|boolean
name|notFound
parameter_list|)
block|{
name|this
operator|.
name|notFound
operator|=
name|notFound
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|startTime
specifier|public
name|Delete
name|startTime
parameter_list|(
name|long
name|startTime
parameter_list|)
block|{
name|this
operator|.
name|startTime
operator|=
name|startTime
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Returns operation start time in nanoseconds.          */
DECL|method|startTime
specifier|public
name|long
name|startTime
parameter_list|()
block|{
return|return
name|this
operator|.
name|startTime
return|;
block|}
DECL|method|endTime
specifier|public
name|Delete
name|endTime
parameter_list|(
name|long
name|endTime
parameter_list|)
block|{
name|this
operator|.
name|endTime
operator|=
name|endTime
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Returns operation end time in nanoseconds.          */
DECL|method|endTime
specifier|public
name|long
name|endTime
parameter_list|()
block|{
return|return
name|this
operator|.
name|endTime
return|;
block|}
block|}
DECL|class|DeleteByQuery
specifier|static
class|class
name|DeleteByQuery
block|{
DECL|field|query
specifier|private
specifier|final
name|Query
name|query
decl_stmt|;
DECL|field|source
specifier|private
specifier|final
name|byte
index|[]
name|source
decl_stmt|;
DECL|field|filteringAliases
specifier|private
specifier|final
name|String
index|[]
name|filteringAliases
decl_stmt|;
DECL|field|aliasFilter
specifier|private
specifier|final
name|Filter
name|aliasFilter
decl_stmt|;
DECL|field|types
specifier|private
specifier|final
name|String
index|[]
name|types
decl_stmt|;
DECL|field|startTime
specifier|private
name|long
name|startTime
decl_stmt|;
DECL|field|endTime
specifier|private
name|long
name|endTime
decl_stmt|;
DECL|method|DeleteByQuery
specifier|public
name|DeleteByQuery
parameter_list|(
name|Query
name|query
parameter_list|,
name|byte
index|[]
name|source
parameter_list|,
annotation|@
name|Nullable
name|String
index|[]
name|filteringAliases
parameter_list|,
annotation|@
name|Nullable
name|Filter
name|aliasFilter
parameter_list|,
name|String
modifier|...
name|types
parameter_list|)
block|{
name|this
operator|.
name|query
operator|=
name|query
expr_stmt|;
name|this
operator|.
name|source
operator|=
name|source
expr_stmt|;
name|this
operator|.
name|types
operator|=
name|types
expr_stmt|;
name|this
operator|.
name|filteringAliases
operator|=
name|filteringAliases
expr_stmt|;
name|this
operator|.
name|aliasFilter
operator|=
name|aliasFilter
expr_stmt|;
block|}
DECL|method|query
specifier|public
name|Query
name|query
parameter_list|()
block|{
return|return
name|this
operator|.
name|query
return|;
block|}
DECL|method|source
specifier|public
name|byte
index|[]
name|source
parameter_list|()
block|{
return|return
name|this
operator|.
name|source
return|;
block|}
DECL|method|types
specifier|public
name|String
index|[]
name|types
parameter_list|()
block|{
return|return
name|this
operator|.
name|types
return|;
block|}
DECL|method|filteringAliases
specifier|public
name|String
index|[]
name|filteringAliases
parameter_list|()
block|{
return|return
name|filteringAliases
return|;
block|}
DECL|method|aliasFilter
specifier|public
name|Filter
name|aliasFilter
parameter_list|()
block|{
return|return
name|aliasFilter
return|;
block|}
DECL|method|startTime
specifier|public
name|DeleteByQuery
name|startTime
parameter_list|(
name|long
name|startTime
parameter_list|)
block|{
name|this
operator|.
name|startTime
operator|=
name|startTime
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Returns operation start time in nanoseconds.          */
DECL|method|startTime
specifier|public
name|long
name|startTime
parameter_list|()
block|{
return|return
name|this
operator|.
name|startTime
return|;
block|}
DECL|method|endTime
specifier|public
name|DeleteByQuery
name|endTime
parameter_list|(
name|long
name|endTime
parameter_list|)
block|{
name|this
operator|.
name|endTime
operator|=
name|endTime
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Returns operation end time in nanoseconds.          */
DECL|method|endTime
specifier|public
name|long
name|endTime
parameter_list|()
block|{
return|return
name|this
operator|.
name|endTime
return|;
block|}
block|}
DECL|class|Get
specifier|static
class|class
name|Get
block|{
DECL|field|realtime
specifier|private
specifier|final
name|boolean
name|realtime
decl_stmt|;
DECL|field|uid
specifier|private
specifier|final
name|Term
name|uid
decl_stmt|;
DECL|field|loadSource
specifier|private
name|boolean
name|loadSource
init|=
literal|true
decl_stmt|;
DECL|method|Get
specifier|public
name|Get
parameter_list|(
name|boolean
name|realtime
parameter_list|,
name|Term
name|uid
parameter_list|)
block|{
name|this
operator|.
name|realtime
operator|=
name|realtime
expr_stmt|;
name|this
operator|.
name|uid
operator|=
name|uid
expr_stmt|;
block|}
DECL|method|realtime
specifier|public
name|boolean
name|realtime
parameter_list|()
block|{
return|return
name|this
operator|.
name|realtime
return|;
block|}
DECL|method|uid
specifier|public
name|Term
name|uid
parameter_list|()
block|{
return|return
name|uid
return|;
block|}
DECL|method|loadSource
specifier|public
name|boolean
name|loadSource
parameter_list|()
block|{
return|return
name|this
operator|.
name|loadSource
return|;
block|}
DECL|method|loadSource
specifier|public
name|Get
name|loadSource
parameter_list|(
name|boolean
name|loadSource
parameter_list|)
block|{
name|this
operator|.
name|loadSource
operator|=
name|loadSource
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
DECL|class|GetResult
specifier|static
class|class
name|GetResult
block|{
DECL|field|exists
specifier|private
specifier|final
name|boolean
name|exists
decl_stmt|;
DECL|field|version
specifier|private
specifier|final
name|long
name|version
decl_stmt|;
DECL|field|source
specifier|private
specifier|final
name|Translog
operator|.
name|Source
name|source
decl_stmt|;
DECL|field|docIdAndVersion
specifier|private
specifier|final
name|UidField
operator|.
name|DocIdAndVersion
name|docIdAndVersion
decl_stmt|;
DECL|field|searcher
specifier|private
specifier|final
name|Searcher
name|searcher
decl_stmt|;
DECL|field|NOT_EXISTS
specifier|public
specifier|static
specifier|final
name|GetResult
name|NOT_EXISTS
init|=
operator|new
name|GetResult
argument_list|(
literal|false
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
DECL|method|GetResult
specifier|public
name|GetResult
parameter_list|(
name|boolean
name|exists
parameter_list|,
name|long
name|version
parameter_list|,
annotation|@
name|Nullable
name|Translog
operator|.
name|Source
name|source
parameter_list|)
block|{
name|this
operator|.
name|source
operator|=
name|source
expr_stmt|;
name|this
operator|.
name|exists
operator|=
name|exists
expr_stmt|;
name|this
operator|.
name|version
operator|=
name|version
expr_stmt|;
name|this
operator|.
name|docIdAndVersion
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|searcher
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|GetResult
specifier|public
name|GetResult
parameter_list|(
name|Searcher
name|searcher
parameter_list|,
name|UidField
operator|.
name|DocIdAndVersion
name|docIdAndVersion
parameter_list|)
block|{
name|this
operator|.
name|exists
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|source
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|version
operator|=
name|docIdAndVersion
operator|.
name|version
expr_stmt|;
name|this
operator|.
name|docIdAndVersion
operator|=
name|docIdAndVersion
expr_stmt|;
name|this
operator|.
name|searcher
operator|=
name|searcher
expr_stmt|;
block|}
DECL|method|exists
specifier|public
name|boolean
name|exists
parameter_list|()
block|{
return|return
name|exists
return|;
block|}
DECL|method|version
specifier|public
name|long
name|version
parameter_list|()
block|{
return|return
name|this
operator|.
name|version
return|;
block|}
annotation|@
name|Nullable
DECL|method|source
specifier|public
name|Translog
operator|.
name|Source
name|source
parameter_list|()
block|{
return|return
name|source
return|;
block|}
DECL|method|searcher
specifier|public
name|Searcher
name|searcher
parameter_list|()
block|{
return|return
name|this
operator|.
name|searcher
return|;
block|}
DECL|method|docIdAndVersion
specifier|public
name|UidField
operator|.
name|DocIdAndVersion
name|docIdAndVersion
parameter_list|()
block|{
return|return
name|docIdAndVersion
return|;
block|}
DECL|method|release
specifier|public
name|void
name|release
parameter_list|()
block|{
if|if
condition|(
name|searcher
operator|!=
literal|null
condition|)
block|{
name|searcher
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_interface

end_unit

