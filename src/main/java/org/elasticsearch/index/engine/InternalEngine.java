begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.engine
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriter
operator|.
name|IndexReaderWarmer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanClause
operator|.
name|Occur
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|SearcherFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|SearcherManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|AlreadyClosedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|LockObtainFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|InfoStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|DjbHashFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lease
operator|.
name|Releasable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|ESLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|LoggerInfoStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|Lucene
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|index
operator|.
name|ElasticsearchDirectoryReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|uid
operator|.
name|Versions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|math
operator|.
name|MathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|EsRejectedExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ReleasableLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|deletionpolicy
operator|.
name|SnapshotIndexCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|indexing
operator|.
name|ShardIndexingService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|Uid
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|merge
operator|.
name|OnGoingMerge
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|merge
operator|.
name|policy
operator|.
name|ElasticsearchMergePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|merge
operator|.
name|policy
operator|.
name|MergePolicyProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|merge
operator|.
name|scheduler
operator|.
name|MergeSchedulerProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|search
operator|.
name|nested
operator|.
name|IncludeNestedDocsQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|TranslogRecoveryPerformer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|translog
operator|.
name|Translog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|translog
operator|.
name|TranslogConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|translog
operator|.
name|TranslogCorruptedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|IndicesWarmer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|InternalEngine
specifier|public
class|class
name|InternalEngine
extends|extends
name|Engine
block|{
DECL|field|mergeSchedulerFailureListener
specifier|private
specifier|final
name|FailEngineOnMergeFailure
name|mergeSchedulerFailureListener
decl_stmt|;
DECL|field|mergeSchedulerListener
specifier|private
specifier|final
name|MergeSchedulerListener
name|mergeSchedulerListener
decl_stmt|;
comment|/**      * When we last pruned expired tombstones from versionMap.deletes:      */
DECL|field|lastDeleteVersionPruneTimeMSec
specifier|private
specifier|volatile
name|long
name|lastDeleteVersionPruneTimeMSec
decl_stmt|;
DECL|field|indexingService
specifier|private
specifier|final
name|ShardIndexingService
name|indexingService
decl_stmt|;
annotation|@
name|Nullable
DECL|field|warmer
specifier|private
specifier|final
name|IndicesWarmer
name|warmer
decl_stmt|;
DECL|field|translog
specifier|private
specifier|final
name|Translog
name|translog
decl_stmt|;
DECL|field|mergePolicyProvider
specifier|private
specifier|final
name|MergePolicyProvider
name|mergePolicyProvider
decl_stmt|;
DECL|field|mergeScheduler
specifier|private
specifier|final
name|MergeSchedulerProvider
name|mergeScheduler
decl_stmt|;
DECL|field|indexWriter
specifier|private
specifier|final
name|IndexWriter
name|indexWriter
decl_stmt|;
DECL|field|searcherFactory
specifier|private
specifier|final
name|SearcherFactory
name|searcherFactory
decl_stmt|;
DECL|field|searcherManager
specifier|private
specifier|final
name|SearcherManager
name|searcherManager
decl_stmt|;
DECL|field|flushLock
specifier|private
specifier|final
name|Lock
name|flushLock
init|=
operator|new
name|ReentrantLock
argument_list|()
decl_stmt|;
DECL|field|optimizeLock
specifier|private
specifier|final
name|ReentrantLock
name|optimizeLock
init|=
operator|new
name|ReentrantLock
argument_list|()
decl_stmt|;
comment|// A uid (in the form of BytesRef) to the version map
comment|// we use the hashed variant since we iterate over it and check removal and additions on existing keys
DECL|field|versionMap
specifier|private
specifier|final
name|LiveVersionMap
name|versionMap
decl_stmt|;
DECL|field|dirtyLocks
specifier|private
specifier|final
name|Object
index|[]
name|dirtyLocks
decl_stmt|;
DECL|field|versionMapRefreshPending
specifier|private
specifier|final
name|AtomicBoolean
name|versionMapRefreshPending
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
DECL|field|lastCommittedSegmentInfos
specifier|private
specifier|volatile
name|SegmentInfos
name|lastCommittedSegmentInfos
decl_stmt|;
DECL|field|throttle
specifier|private
specifier|final
name|IndexThrottle
name|throttle
decl_stmt|;
DECL|method|InternalEngine
specifier|public
name|InternalEngine
parameter_list|(
name|EngineConfig
name|engineConfig
parameter_list|,
name|boolean
name|skipInitialTranslogRecovery
parameter_list|)
throws|throws
name|EngineException
block|{
name|super
argument_list|(
name|engineConfig
argument_list|)
expr_stmt|;
name|this
operator|.
name|versionMap
operator|=
operator|new
name|LiveVersionMap
argument_list|()
expr_stmt|;
name|store
operator|.
name|incRef
argument_list|()
expr_stmt|;
name|IndexWriter
name|writer
init|=
literal|null
decl_stmt|;
name|Translog
name|translog
init|=
literal|null
decl_stmt|;
name|SearcherManager
name|manager
init|=
literal|null
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|this
operator|.
name|lastDeleteVersionPruneTimeMSec
operator|=
name|engineConfig
operator|.
name|getThreadPool
argument_list|()
operator|.
name|estimatedTimeInMillis
argument_list|()
expr_stmt|;
name|this
operator|.
name|indexingService
operator|=
name|engineConfig
operator|.
name|getIndexingService
argument_list|()
expr_stmt|;
name|this
operator|.
name|warmer
operator|=
name|engineConfig
operator|.
name|getWarmer
argument_list|()
expr_stmt|;
name|this
operator|.
name|mergePolicyProvider
operator|=
name|engineConfig
operator|.
name|getMergePolicyProvider
argument_list|()
expr_stmt|;
name|this
operator|.
name|mergeScheduler
operator|=
name|engineConfig
operator|.
name|getMergeScheduler
argument_list|()
expr_stmt|;
name|this
operator|.
name|dirtyLocks
operator|=
operator|new
name|Object
index|[
name|engineConfig
operator|.
name|getIndexConcurrency
argument_list|()
operator|*
literal|50
index|]
expr_stmt|;
comment|// we multiply it to have enough...
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dirtyLocks
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|dirtyLocks
index|[
name|i
index|]
operator|=
operator|new
name|Object
argument_list|()
expr_stmt|;
block|}
name|throttle
operator|=
operator|new
name|IndexThrottle
argument_list|()
expr_stmt|;
name|this
operator|.
name|searcherFactory
operator|=
operator|new
name|SearchFactory
argument_list|(
name|logger
argument_list|,
name|isClosed
argument_list|,
name|engineConfig
argument_list|)
expr_stmt|;
specifier|final
name|Translog
operator|.
name|TranslogGeneration
name|translogGeneration
decl_stmt|;
try|try
block|{
comment|// TODO: would be better if ES could tell us "from above" whether this shard was already here, instead of using Lucene's API
comment|// (which relies on IO ops, directory listing, and has had scary bugs in the past):
name|boolean
name|create
init|=
operator|!
name|Lucene
operator|.
name|indexExists
argument_list|(
name|store
operator|.
name|directory
argument_list|()
argument_list|)
decl_stmt|;
name|writer
operator|=
name|createWriter
argument_list|(
name|create
argument_list|)
expr_stmt|;
name|indexWriter
operator|=
name|writer
expr_stmt|;
name|translog
operator|=
name|openTranslog
argument_list|(
name|engineConfig
argument_list|,
name|writer
argument_list|,
name|create
operator|||
name|skipInitialTranslogRecovery
operator|||
name|engineConfig
operator|.
name|forceNewTranslog
argument_list|()
argument_list|)
expr_stmt|;
name|translogGeneration
operator|=
name|translog
operator|.
name|getGeneration
argument_list|()
expr_stmt|;
assert|assert
name|translogGeneration
operator|!=
literal|null
assert|;
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|TranslogCorruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|EngineCreationFailureException
argument_list|(
name|shardId
argument_list|,
literal|"failed to create engine"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|this
operator|.
name|translog
operator|=
name|translog
expr_stmt|;
name|manager
operator|=
name|createSearcherManager
argument_list|()
expr_stmt|;
name|this
operator|.
name|searcherManager
operator|=
name|manager
expr_stmt|;
name|this
operator|.
name|versionMap
operator|.
name|setManager
argument_list|(
name|searcherManager
argument_list|)
expr_stmt|;
name|this
operator|.
name|mergeSchedulerFailureListener
operator|=
operator|new
name|FailEngineOnMergeFailure
argument_list|()
expr_stmt|;
name|this
operator|.
name|mergeSchedulerListener
operator|=
operator|new
name|MergeSchedulerListener
argument_list|()
expr_stmt|;
name|this
operator|.
name|mergeScheduler
operator|.
name|addListener
argument_list|(
name|mergeSchedulerListener
argument_list|)
expr_stmt|;
name|this
operator|.
name|mergeScheduler
operator|.
name|addFailureListener
argument_list|(
name|mergeSchedulerFailureListener
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|skipInitialTranslogRecovery
condition|)
block|{
comment|// make sure we point at the latest translog from now on..
name|commitIndexWriter
argument_list|(
name|writer
argument_list|,
name|translog
argument_list|,
name|lastCommittedSegmentInfos
operator|.
name|getUserData
argument_list|()
operator|.
name|get
argument_list|(
name|SYNC_COMMIT_ID
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|recoverFromTranslog
argument_list|(
name|engineConfig
argument_list|,
name|translogGeneration
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|EngineException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|EngineCreationFailureException
argument_list|(
name|shardId
argument_list|,
literal|"failed to recover from translog"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|success
operator|==
literal|false
condition|)
block|{
name|IOUtils
operator|.
name|closeWhileHandlingException
argument_list|(
name|writer
argument_list|,
name|translog
argument_list|,
name|manager
argument_list|)
expr_stmt|;
name|versionMap
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|isClosed
operator|.
name|get
argument_list|()
operator|==
literal|false
condition|)
block|{
comment|// failure we need to dec the store reference
name|store
operator|.
name|decRef
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|logger
operator|.
name|trace
argument_list|(
literal|"created new InternalEngine"
argument_list|)
expr_stmt|;
block|}
DECL|method|openTranslog
specifier|private
name|Translog
name|openTranslog
parameter_list|(
name|EngineConfig
name|engineConfig
parameter_list|,
name|IndexWriter
name|writer
parameter_list|,
name|boolean
name|createNew
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Translog
operator|.
name|TranslogGeneration
name|generation
init|=
name|loadTranslogIdFromCommit
argument_list|(
name|writer
argument_list|)
decl_stmt|;
specifier|final
name|TranslogConfig
name|translogConfig
init|=
name|engineConfig
operator|.
name|getTranslogConfig
argument_list|()
decl_stmt|;
if|if
condition|(
name|createNew
operator|==
literal|false
condition|)
block|{
comment|// We expect that this shard already exists, so it must already have an existing translog else something is badly wrong!
if|if
condition|(
name|generation
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"no translog generation present in commit data but translog is expected to exist"
argument_list|)
throw|;
block|}
name|translogConfig
operator|.
name|setTranslogGeneration
argument_list|(
name|generation
argument_list|)
expr_stmt|;
if|if
condition|(
name|generation
operator|!=
literal|null
operator|&&
name|generation
operator|.
name|translogUUID
operator|==
literal|null
condition|)
block|{
comment|// only upgrade on pre-2.0 indices...
name|Translog
operator|.
name|upgradeLegacyTranslog
argument_list|(
name|logger
argument_list|,
name|translogConfig
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|Translog
name|translog
init|=
operator|new
name|Translog
argument_list|(
name|translogConfig
argument_list|)
decl_stmt|;
if|if
condition|(
name|generation
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"no translog ID present in the current generation - creating one"
argument_list|)
expr_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|commitIndexWriter
argument_list|(
name|writer
argument_list|,
name|translog
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|success
operator|==
literal|false
condition|)
block|{
name|IOUtils
operator|.
name|closeWhileHandlingException
argument_list|(
name|translog
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|translog
return|;
block|}
annotation|@
name|Override
DECL|method|getTranslog
specifier|public
name|Translog
name|getTranslog
parameter_list|()
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
return|return
name|translog
return|;
block|}
DECL|method|recoverFromTranslog
specifier|protected
name|void
name|recoverFromTranslog
parameter_list|(
name|EngineConfig
name|engineConfig
parameter_list|,
name|Translog
operator|.
name|TranslogGeneration
name|translogGeneration
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|opsRecovered
init|=
literal|0
decl_stmt|;
specifier|final
name|TranslogRecoveryPerformer
name|handler
init|=
name|engineConfig
operator|.
name|getTranslogRecoveryPerformer
argument_list|()
decl_stmt|;
try|try
init|(
name|Translog
operator|.
name|Snapshot
name|snapshot
init|=
name|translog
operator|.
name|newSnapshot
argument_list|()
init|)
block|{
name|Translog
operator|.
name|Operation
name|operation
decl_stmt|;
while|while
condition|(
operator|(
name|operation
operator|=
name|snapshot
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|handler
operator|.
name|performRecoveryOperation
argument_list|(
name|this
argument_list|,
name|operation
argument_list|)
expr_stmt|;
name|opsRecovered
operator|++
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ElasticsearchException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|status
argument_list|()
operator|==
name|RestStatus
operator|.
name|BAD_REQUEST
condition|)
block|{
comment|// mainly for MapperParsingException and Failure to detect xcontent
name|logger
operator|.
name|info
argument_list|(
literal|"ignoring recovery of a corrupt translog entry"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|EngineException
argument_list|(
name|shardId
argument_list|,
literal|"failed to recover from translog"
argument_list|,
name|e
argument_list|)
throw|;
block|}
comment|// flush if we recovered something or if we have references to older translogs
comment|// note: if opsRecovered == 0 and we have older translogs it means they are corrupted or 0 length.
if|if
condition|(
name|opsRecovered
operator|>
literal|0
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"flushing post recovery from translog. ops recovered [{}]. committed translog id [{}]. current id [{}]"
argument_list|,
name|opsRecovered
argument_list|,
name|translogGeneration
operator|==
literal|null
condition|?
literal|null
else|:
name|translogGeneration
operator|.
name|translogFileGeneration
argument_list|,
name|translog
operator|.
name|currentFileGeneration
argument_list|()
argument_list|)
expr_stmt|;
name|flush
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|translog
operator|.
name|isCurrent
argument_list|(
name|translogGeneration
argument_list|)
operator|==
literal|false
condition|)
block|{
name|commitIndexWriter
argument_list|(
name|indexWriter
argument_list|,
name|translog
argument_list|,
name|lastCommittedSegmentInfos
operator|.
name|getUserData
argument_list|()
operator|.
name|get
argument_list|(
name|Engine
operator|.
name|SYNC_COMMIT_ID
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Reads the current stored translog ID from the IW commit data. If the id is not found, recommits the current      * translog id into lucene and returns null.      */
annotation|@
name|Nullable
DECL|method|loadTranslogIdFromCommit
specifier|private
name|Translog
operator|.
name|TranslogGeneration
name|loadTranslogIdFromCommit
parameter_list|(
name|IndexWriter
name|writer
parameter_list|)
throws|throws
name|IOException
block|{
comment|// commit on a just opened writer will commit even if there are no changes done to it
comment|// we rely on that for the commit data translog id key
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|commitUserData
init|=
name|writer
operator|.
name|getCommitData
argument_list|()
decl_stmt|;
if|if
condition|(
name|commitUserData
operator|.
name|containsKey
argument_list|(
literal|"translog_id"
argument_list|)
condition|)
block|{
assert|assert
name|commitUserData
operator|.
name|containsKey
argument_list|(
name|Translog
operator|.
name|TRANSLOG_UUID_KEY
argument_list|)
operator|==
literal|false
operator|:
literal|"legacy commit contains translog UUID"
assert|;
return|return
operator|new
name|Translog
operator|.
name|TranslogGeneration
argument_list|(
literal|null
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
name|commitUserData
operator|.
name|get
argument_list|(
literal|"translog_id"
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|commitUserData
operator|.
name|containsKey
argument_list|(
name|Translog
operator|.
name|TRANSLOG_GENERATION_KEY
argument_list|)
condition|)
block|{
if|if
condition|(
name|commitUserData
operator|.
name|containsKey
argument_list|(
name|Translog
operator|.
name|TRANSLOG_UUID_KEY
argument_list|)
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"commit doesn't contain translog UUID"
argument_list|)
throw|;
block|}
specifier|final
name|String
name|translogUUID
init|=
name|commitUserData
operator|.
name|get
argument_list|(
name|Translog
operator|.
name|TRANSLOG_UUID_KEY
argument_list|)
decl_stmt|;
specifier|final
name|long
name|translogGen
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|commitUserData
operator|.
name|get
argument_list|(
name|Translog
operator|.
name|TRANSLOG_GENERATION_KEY
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|Translog
operator|.
name|TranslogGeneration
argument_list|(
name|translogUUID
argument_list|,
name|translogGen
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|createSearcherManager
specifier|private
name|SearcherManager
name|createSearcherManager
parameter_list|()
throws|throws
name|EngineException
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|SearcherManager
name|searcherManager
init|=
literal|null
decl_stmt|;
try|try
block|{
try|try
block|{
specifier|final
name|DirectoryReader
name|directoryReader
init|=
name|ElasticsearchDirectoryReader
operator|.
name|wrap
argument_list|(
name|DirectoryReader
operator|.
name|open
argument_list|(
name|indexWriter
argument_list|,
literal|true
argument_list|)
argument_list|,
name|shardId
argument_list|)
decl_stmt|;
name|searcherManager
operator|=
operator|new
name|SearcherManager
argument_list|(
name|directoryReader
argument_list|,
name|searcherFactory
argument_list|)
expr_stmt|;
name|lastCommittedSegmentInfos
operator|=
name|store
operator|.
name|readLastCommittedSegmentsInfo
argument_list|()
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
return|return
name|searcherManager
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|maybeFailEngine
argument_list|(
literal|"start"
argument_list|,
name|e
argument_list|)
expr_stmt|;
try|try
block|{
name|indexWriter
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e1
parameter_list|)
block|{
comment|// iw is closed below
name|e
operator|.
name|addSuppressed
argument_list|(
name|e1
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|EngineCreationFailureException
argument_list|(
name|shardId
argument_list|,
literal|"failed to open reader on writer"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|success
operator|==
literal|false
condition|)
block|{
comment|// release everything we created on a failure
name|IOUtils
operator|.
name|closeWhileHandlingException
argument_list|(
name|searcherManager
argument_list|,
name|indexWriter
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|updateIndexWriterSettings
specifier|private
name|void
name|updateIndexWriterSettings
parameter_list|()
block|{
try|try
block|{
specifier|final
name|LiveIndexWriterConfig
name|iwc
init|=
name|indexWriter
operator|.
name|getConfig
argument_list|()
decl_stmt|;
name|iwc
operator|.
name|setRAMBufferSizeMB
argument_list|(
name|engineConfig
operator|.
name|getIndexingBufferSize
argument_list|()
operator|.
name|mbFrac
argument_list|()
argument_list|)
expr_stmt|;
name|iwc
operator|.
name|setUseCompoundFile
argument_list|(
name|engineConfig
operator|.
name|isCompoundOnFlush
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AlreadyClosedException
name|ex
parameter_list|)
block|{
comment|// ignore
block|}
block|}
annotation|@
name|Override
DECL|method|get
specifier|public
name|GetResult
name|get
parameter_list|(
name|Get
name|get
parameter_list|)
throws|throws
name|EngineException
block|{
try|try
init|(
name|ReleasableLock
name|lock
init|=
name|readLock
operator|.
name|acquire
argument_list|()
init|)
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
if|if
condition|(
name|get
operator|.
name|realtime
argument_list|()
condition|)
block|{
name|VersionValue
name|versionValue
init|=
name|versionMap
operator|.
name|getUnderLock
argument_list|(
name|get
operator|.
name|uid
argument_list|()
operator|.
name|bytes
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|versionValue
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|versionValue
operator|.
name|delete
argument_list|()
condition|)
block|{
return|return
name|GetResult
operator|.
name|NOT_EXISTS
return|;
block|}
if|if
condition|(
name|get
operator|.
name|versionType
argument_list|()
operator|.
name|isVersionConflictForReads
argument_list|(
name|versionValue
operator|.
name|version
argument_list|()
argument_list|,
name|get
operator|.
name|version
argument_list|()
argument_list|)
condition|)
block|{
name|Uid
name|uid
init|=
name|Uid
operator|.
name|createUid
argument_list|(
name|get
operator|.
name|uid
argument_list|()
operator|.
name|text
argument_list|()
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|VersionConflictEngineException
argument_list|(
name|shardId
argument_list|,
name|uid
operator|.
name|type
argument_list|()
argument_list|,
name|uid
operator|.
name|id
argument_list|()
argument_list|,
name|versionValue
operator|.
name|version
argument_list|()
argument_list|,
name|get
operator|.
name|version
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|get
operator|.
name|loadSource
argument_list|()
condition|)
block|{
return|return
operator|new
name|GetResult
argument_list|(
literal|true
argument_list|,
name|versionValue
operator|.
name|version
argument_list|()
argument_list|,
literal|null
argument_list|)
return|;
block|}
name|Translog
operator|.
name|Operation
name|op
init|=
name|translog
operator|.
name|read
argument_list|(
name|versionValue
operator|.
name|translogLocation
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|op
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|GetResult
argument_list|(
literal|true
argument_list|,
name|versionValue
operator|.
name|version
argument_list|()
argument_list|,
name|op
operator|.
name|getSource
argument_list|()
argument_list|)
return|;
block|}
block|}
block|}
comment|// no version, get the version from the index, we know that we refresh on flush
return|return
name|getFromSearcher
argument_list|(
name|get
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|create
specifier|public
name|void
name|create
parameter_list|(
name|Create
name|create
parameter_list|)
throws|throws
name|EngineException
block|{
try|try
init|(
name|ReleasableLock
name|lock
init|=
name|readLock
operator|.
name|acquire
argument_list|()
init|)
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
if|if
condition|(
name|create
operator|.
name|origin
argument_list|()
operator|==
name|Operation
operator|.
name|Origin
operator|.
name|RECOVERY
condition|)
block|{
comment|// Don't throttle recovery operations
name|innerCreate
argument_list|(
name|create
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
init|(
name|Releasable
name|r
init|=
name|throttle
operator|.
name|acquireThrottle
argument_list|()
init|)
block|{
name|innerCreate
argument_list|(
name|create
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|OutOfMemoryError
decl||
name|IllegalStateException
decl||
name|IOException
name|t
parameter_list|)
block|{
name|maybeFailEngine
argument_list|(
literal|"create"
argument_list|,
name|t
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|CreateFailedEngineException
argument_list|(
name|shardId
argument_list|,
name|create
argument_list|,
name|t
argument_list|)
throw|;
block|}
name|checkVersionMapRefresh
argument_list|()
expr_stmt|;
block|}
DECL|method|innerCreate
specifier|private
name|void
name|innerCreate
parameter_list|(
name|Create
name|create
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|engineConfig
operator|.
name|isOptimizeAutoGenerateId
argument_list|()
operator|&&
name|create
operator|.
name|autoGeneratedId
argument_list|()
operator|&&
operator|!
name|create
operator|.
name|canHaveDuplicates
argument_list|()
condition|)
block|{
comment|// We don't need to lock because this ID cannot be concurrently updated:
name|innerCreateNoLock
argument_list|(
name|create
argument_list|,
name|Versions
operator|.
name|NOT_FOUND
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
synchronized|synchronized
init|(
name|dirtyLock
argument_list|(
name|create
operator|.
name|uid
argument_list|()
argument_list|)
init|)
block|{
specifier|final
name|long
name|currentVersion
decl_stmt|;
specifier|final
name|VersionValue
name|versionValue
decl_stmt|;
name|versionValue
operator|=
name|versionMap
operator|.
name|getUnderLock
argument_list|(
name|create
operator|.
name|uid
argument_list|()
operator|.
name|bytes
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|versionValue
operator|==
literal|null
condition|)
block|{
name|currentVersion
operator|=
name|loadCurrentVersionFromIndex
argument_list|(
name|create
operator|.
name|uid
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|engineConfig
operator|.
name|isEnableGcDeletes
argument_list|()
operator|&&
name|versionValue
operator|.
name|delete
argument_list|()
operator|&&
operator|(
name|engineConfig
operator|.
name|getThreadPool
argument_list|()
operator|.
name|estimatedTimeInMillis
argument_list|()
operator|-
name|versionValue
operator|.
name|time
argument_list|()
operator|)
operator|>
name|engineConfig
operator|.
name|getGcDeletesInMillis
argument_list|()
condition|)
block|{
name|currentVersion
operator|=
name|Versions
operator|.
name|NOT_FOUND
expr_stmt|;
comment|// deleted, and GC
block|}
else|else
block|{
name|currentVersion
operator|=
name|versionValue
operator|.
name|version
argument_list|()
expr_stmt|;
block|}
block|}
name|innerCreateNoLock
argument_list|(
name|create
argument_list|,
name|currentVersion
argument_list|,
name|versionValue
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|innerCreateNoLock
specifier|private
name|void
name|innerCreateNoLock
parameter_list|(
name|Create
name|create
parameter_list|,
name|long
name|currentVersion
parameter_list|,
name|VersionValue
name|versionValue
parameter_list|)
throws|throws
name|IOException
block|{
comment|// same logic as index
name|long
name|updatedVersion
decl_stmt|;
name|long
name|expectedVersion
init|=
name|create
operator|.
name|version
argument_list|()
decl_stmt|;
if|if
condition|(
name|create
operator|.
name|versionType
argument_list|()
operator|.
name|isVersionConflictForWrites
argument_list|(
name|currentVersion
argument_list|,
name|expectedVersion
argument_list|)
condition|)
block|{
if|if
condition|(
name|create
operator|.
name|origin
argument_list|()
operator|==
name|Operation
operator|.
name|Origin
operator|.
name|RECOVERY
condition|)
block|{
return|return;
block|}
else|else
block|{
throw|throw
operator|new
name|VersionConflictEngineException
argument_list|(
name|shardId
argument_list|,
name|create
operator|.
name|type
argument_list|()
argument_list|,
name|create
operator|.
name|id
argument_list|()
argument_list|,
name|currentVersion
argument_list|,
name|expectedVersion
argument_list|)
throw|;
block|}
block|}
name|updatedVersion
operator|=
name|create
operator|.
name|versionType
argument_list|()
operator|.
name|updateVersion
argument_list|(
name|currentVersion
argument_list|,
name|expectedVersion
argument_list|)
expr_stmt|;
comment|// if the doc exists
name|boolean
name|doUpdate
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
name|versionValue
operator|!=
literal|null
operator|&&
name|versionValue
operator|.
name|delete
argument_list|()
operator|==
literal|false
operator|)
operator|||
operator|(
name|versionValue
operator|==
literal|null
operator|&&
name|currentVersion
operator|!=
name|Versions
operator|.
name|NOT_FOUND
operator|)
condition|)
block|{
if|if
condition|(
name|create
operator|.
name|origin
argument_list|()
operator|==
name|Operation
operator|.
name|Origin
operator|.
name|RECOVERY
condition|)
block|{
return|return;
block|}
elseif|else
if|if
condition|(
name|create
operator|.
name|origin
argument_list|()
operator|==
name|Operation
operator|.
name|Origin
operator|.
name|REPLICA
condition|)
block|{
comment|// #7142: the primary already determined it's OK to index this document, and we confirmed above that the version doesn't
comment|// conflict, so we must also update here on the replica to remain consistent:
name|doUpdate
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|create
operator|.
name|origin
argument_list|()
operator|==
name|Operation
operator|.
name|Origin
operator|.
name|PRIMARY
operator|&&
name|create
operator|.
name|autoGeneratedId
argument_list|()
operator|&&
name|create
operator|.
name|canHaveDuplicates
argument_list|()
operator|&&
name|currentVersion
operator|==
literal|1
operator|&&
name|create
operator|.
name|version
argument_list|()
operator|==
name|Versions
operator|.
name|MATCH_ANY
condition|)
block|{
comment|/**                  * If bulk index request fails due to a disconnect, unavailable shard etc. then the request is                  * retried before it actually fails. However, the documents might already be indexed.                  * For autogenerated ids this means that a version conflict will be reported in the bulk request                  * although the document was indexed properly.                  * To avoid this we have to make sure that the index request is treated as an update and set updatedVersion to 1.                  * See also discussion on https://github.com/elasticsearch/elasticsearch/pull/9125                  */
name|doUpdate
operator|=
literal|true
expr_stmt|;
name|updatedVersion
operator|=
literal|1
expr_stmt|;
block|}
else|else
block|{
comment|// On primary, we throw DAEE if the _uid is already in the index with an older version:
assert|assert
name|create
operator|.
name|origin
argument_list|()
operator|==
name|Operation
operator|.
name|Origin
operator|.
name|PRIMARY
assert|;
throw|throw
operator|new
name|DocumentAlreadyExistsException
argument_list|(
name|shardId
argument_list|,
name|create
operator|.
name|type
argument_list|()
argument_list|,
name|create
operator|.
name|id
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|create
operator|.
name|updateVersion
argument_list|(
name|updatedVersion
argument_list|)
expr_stmt|;
if|if
condition|(
name|doUpdate
condition|)
block|{
if|if
condition|(
name|create
operator|.
name|docs
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|indexWriter
operator|.
name|updateDocuments
argument_list|(
name|create
operator|.
name|uid
argument_list|()
argument_list|,
name|create
operator|.
name|docs
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|indexWriter
operator|.
name|updateDocument
argument_list|(
name|create
operator|.
name|uid
argument_list|()
argument_list|,
name|create
operator|.
name|docs
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|create
operator|.
name|docs
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|indexWriter
operator|.
name|addDocuments
argument_list|(
name|create
operator|.
name|docs
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|indexWriter
operator|.
name|addDocument
argument_list|(
name|create
operator|.
name|docs
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|Translog
operator|.
name|Location
name|translogLocation
init|=
name|translog
operator|.
name|add
argument_list|(
operator|new
name|Translog
operator|.
name|Create
argument_list|(
name|create
argument_list|)
argument_list|)
decl_stmt|;
name|versionMap
operator|.
name|putUnderLock
argument_list|(
name|create
operator|.
name|uid
argument_list|()
operator|.
name|bytes
argument_list|()
argument_list|,
operator|new
name|VersionValue
argument_list|(
name|updatedVersion
argument_list|,
name|translogLocation
argument_list|)
argument_list|)
expr_stmt|;
name|create
operator|.
name|setTranslogLocation
argument_list|(
name|translogLocation
argument_list|)
expr_stmt|;
name|indexingService
operator|.
name|postCreateUnderLock
argument_list|(
name|create
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|index
specifier|public
name|boolean
name|index
parameter_list|(
name|Index
name|index
parameter_list|)
throws|throws
name|EngineException
block|{
specifier|final
name|boolean
name|created
decl_stmt|;
try|try
init|(
name|ReleasableLock
name|lock
init|=
name|readLock
operator|.
name|acquire
argument_list|()
init|)
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
if|if
condition|(
name|index
operator|.
name|origin
argument_list|()
operator|==
name|Operation
operator|.
name|Origin
operator|.
name|RECOVERY
condition|)
block|{
comment|// Don't throttle recovery operations
name|created
operator|=
name|innerIndex
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
init|(
name|Releasable
name|r
init|=
name|throttle
operator|.
name|acquireThrottle
argument_list|()
init|)
block|{
name|created
operator|=
name|innerIndex
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|OutOfMemoryError
decl||
name|IllegalStateException
decl||
name|IOException
name|t
parameter_list|)
block|{
name|maybeFailEngine
argument_list|(
literal|"index"
argument_list|,
name|t
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IndexFailedEngineException
argument_list|(
name|shardId
argument_list|,
name|index
argument_list|,
name|t
argument_list|)
throw|;
block|}
name|checkVersionMapRefresh
argument_list|()
expr_stmt|;
return|return
name|created
return|;
block|}
comment|/**      * Forces a refresh if the versionMap is using too much RAM      */
DECL|method|checkVersionMapRefresh
specifier|private
name|void
name|checkVersionMapRefresh
parameter_list|()
block|{
if|if
condition|(
name|versionMap
operator|.
name|ramBytesUsedForRefresh
argument_list|()
operator|>
name|config
argument_list|()
operator|.
name|getVersionMapSize
argument_list|()
operator|.
name|bytes
argument_list|()
operator|&&
name|versionMapRefreshPending
operator|.
name|getAndSet
argument_list|(
literal|true
argument_list|)
operator|==
literal|false
condition|)
block|{
try|try
block|{
if|if
condition|(
name|isClosed
operator|.
name|get
argument_list|()
condition|)
block|{
comment|// no point...
return|return;
block|}
comment|// Now refresh to clear versionMap:
name|engineConfig
operator|.
name|getThreadPool
argument_list|()
operator|.
name|executor
argument_list|(
name|ThreadPool
operator|.
name|Names
operator|.
name|REFRESH
argument_list|)
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|refresh
argument_list|(
literal|"version_table_full"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EngineClosedException
name|ex
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EsRejectedExecutionException
name|ex
parameter_list|)
block|{
comment|// that is fine too.. we might be shutting down
block|}
block|}
block|}
DECL|method|innerIndex
specifier|private
name|boolean
name|innerIndex
parameter_list|(
name|Index
name|index
parameter_list|)
throws|throws
name|IOException
block|{
synchronized|synchronized
init|(
name|dirtyLock
argument_list|(
name|index
operator|.
name|uid
argument_list|()
argument_list|)
init|)
block|{
specifier|final
name|long
name|currentVersion
decl_stmt|;
name|VersionValue
name|versionValue
init|=
name|versionMap
operator|.
name|getUnderLock
argument_list|(
name|index
operator|.
name|uid
argument_list|()
operator|.
name|bytes
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|versionValue
operator|==
literal|null
condition|)
block|{
name|currentVersion
operator|=
name|loadCurrentVersionFromIndex
argument_list|(
name|index
operator|.
name|uid
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|engineConfig
operator|.
name|isEnableGcDeletes
argument_list|()
operator|&&
name|versionValue
operator|.
name|delete
argument_list|()
operator|&&
operator|(
name|engineConfig
operator|.
name|getThreadPool
argument_list|()
operator|.
name|estimatedTimeInMillis
argument_list|()
operator|-
name|versionValue
operator|.
name|time
argument_list|()
operator|)
operator|>
name|engineConfig
operator|.
name|getGcDeletesInMillis
argument_list|()
condition|)
block|{
name|currentVersion
operator|=
name|Versions
operator|.
name|NOT_FOUND
expr_stmt|;
comment|// deleted, and GC
block|}
else|else
block|{
name|currentVersion
operator|=
name|versionValue
operator|.
name|version
argument_list|()
expr_stmt|;
block|}
block|}
name|long
name|updatedVersion
decl_stmt|;
name|long
name|expectedVersion
init|=
name|index
operator|.
name|version
argument_list|()
decl_stmt|;
if|if
condition|(
name|index
operator|.
name|versionType
argument_list|()
operator|.
name|isVersionConflictForWrites
argument_list|(
name|currentVersion
argument_list|,
name|expectedVersion
argument_list|)
condition|)
block|{
if|if
condition|(
name|index
operator|.
name|origin
argument_list|()
operator|==
name|Operation
operator|.
name|Origin
operator|.
name|RECOVERY
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|VersionConflictEngineException
argument_list|(
name|shardId
argument_list|,
name|index
operator|.
name|type
argument_list|()
argument_list|,
name|index
operator|.
name|id
argument_list|()
argument_list|,
name|currentVersion
argument_list|,
name|expectedVersion
argument_list|)
throw|;
block|}
block|}
name|updatedVersion
operator|=
name|index
operator|.
name|versionType
argument_list|()
operator|.
name|updateVersion
argument_list|(
name|currentVersion
argument_list|,
name|expectedVersion
argument_list|)
expr_stmt|;
specifier|final
name|boolean
name|created
decl_stmt|;
name|index
operator|.
name|updateVersion
argument_list|(
name|updatedVersion
argument_list|)
expr_stmt|;
if|if
condition|(
name|currentVersion
operator|==
name|Versions
operator|.
name|NOT_FOUND
condition|)
block|{
comment|// document does not exists, we can optimize for create
name|created
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|index
operator|.
name|docs
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|indexWriter
operator|.
name|addDocuments
argument_list|(
name|index
operator|.
name|docs
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|indexWriter
operator|.
name|addDocument
argument_list|(
name|index
operator|.
name|docs
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|versionValue
operator|!=
literal|null
condition|)
block|{
name|created
operator|=
name|versionValue
operator|.
name|delete
argument_list|()
expr_stmt|;
comment|// we have a delete which is not GC'ed...
block|}
else|else
block|{
name|created
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|index
operator|.
name|docs
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|indexWriter
operator|.
name|updateDocuments
argument_list|(
name|index
operator|.
name|uid
argument_list|()
argument_list|,
name|index
operator|.
name|docs
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|indexWriter
operator|.
name|updateDocument
argument_list|(
name|index
operator|.
name|uid
argument_list|()
argument_list|,
name|index
operator|.
name|docs
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|Translog
operator|.
name|Location
name|translogLocation
init|=
name|translog
operator|.
name|add
argument_list|(
operator|new
name|Translog
operator|.
name|Index
argument_list|(
name|index
argument_list|)
argument_list|)
decl_stmt|;
name|versionMap
operator|.
name|putUnderLock
argument_list|(
name|index
operator|.
name|uid
argument_list|()
operator|.
name|bytes
argument_list|()
argument_list|,
operator|new
name|VersionValue
argument_list|(
name|updatedVersion
argument_list|,
name|translogLocation
argument_list|)
argument_list|)
expr_stmt|;
name|index
operator|.
name|setTranslogLocation
argument_list|(
name|translogLocation
argument_list|)
expr_stmt|;
name|indexingService
operator|.
name|postIndexUnderLock
argument_list|(
name|index
argument_list|)
expr_stmt|;
return|return
name|created
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|delete
specifier|public
name|void
name|delete
parameter_list|(
name|Delete
name|delete
parameter_list|)
throws|throws
name|EngineException
block|{
try|try
init|(
name|ReleasableLock
name|lock
init|=
name|readLock
operator|.
name|acquire
argument_list|()
init|)
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
comment|// NOTE: we don't throttle this when merges fall behind because delete-by-id does not create new segments:
name|innerDelete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OutOfMemoryError
decl||
name|IllegalStateException
decl||
name|IOException
name|t
parameter_list|)
block|{
name|maybeFailEngine
argument_list|(
literal|"delete"
argument_list|,
name|t
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|DeleteFailedEngineException
argument_list|(
name|shardId
argument_list|,
name|delete
argument_list|,
name|t
argument_list|)
throw|;
block|}
name|maybePruneDeletedTombstones
argument_list|()
expr_stmt|;
name|checkVersionMapRefresh
argument_list|()
expr_stmt|;
block|}
DECL|method|maybePruneDeletedTombstones
specifier|private
name|void
name|maybePruneDeletedTombstones
parameter_list|()
block|{
comment|// It's expensive to prune because we walk the deletes map acquiring dirtyLock for each uid so we only do it
comment|// every 1/4 of gcDeletesInMillis:
if|if
condition|(
name|engineConfig
operator|.
name|isEnableGcDeletes
argument_list|()
operator|&&
name|engineConfig
operator|.
name|getThreadPool
argument_list|()
operator|.
name|estimatedTimeInMillis
argument_list|()
operator|-
name|lastDeleteVersionPruneTimeMSec
operator|>
name|engineConfig
operator|.
name|getGcDeletesInMillis
argument_list|()
operator|*
literal|0.25
condition|)
block|{
name|pruneDeletedTombstones
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|innerDelete
specifier|private
name|void
name|innerDelete
parameter_list|(
name|Delete
name|delete
parameter_list|)
throws|throws
name|IOException
block|{
synchronized|synchronized
init|(
name|dirtyLock
argument_list|(
name|delete
operator|.
name|uid
argument_list|()
argument_list|)
init|)
block|{
specifier|final
name|long
name|currentVersion
decl_stmt|;
name|VersionValue
name|versionValue
init|=
name|versionMap
operator|.
name|getUnderLock
argument_list|(
name|delete
operator|.
name|uid
argument_list|()
operator|.
name|bytes
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|versionValue
operator|==
literal|null
condition|)
block|{
name|currentVersion
operator|=
name|loadCurrentVersionFromIndex
argument_list|(
name|delete
operator|.
name|uid
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|engineConfig
operator|.
name|isEnableGcDeletes
argument_list|()
operator|&&
name|versionValue
operator|.
name|delete
argument_list|()
operator|&&
operator|(
name|engineConfig
operator|.
name|getThreadPool
argument_list|()
operator|.
name|estimatedTimeInMillis
argument_list|()
operator|-
name|versionValue
operator|.
name|time
argument_list|()
operator|)
operator|>
name|engineConfig
operator|.
name|getGcDeletesInMillis
argument_list|()
condition|)
block|{
name|currentVersion
operator|=
name|Versions
operator|.
name|NOT_FOUND
expr_stmt|;
comment|// deleted, and GC
block|}
else|else
block|{
name|currentVersion
operator|=
name|versionValue
operator|.
name|version
argument_list|()
expr_stmt|;
block|}
block|}
name|long
name|updatedVersion
decl_stmt|;
name|long
name|expectedVersion
init|=
name|delete
operator|.
name|version
argument_list|()
decl_stmt|;
if|if
condition|(
name|delete
operator|.
name|versionType
argument_list|()
operator|.
name|isVersionConflictForWrites
argument_list|(
name|currentVersion
argument_list|,
name|expectedVersion
argument_list|)
condition|)
block|{
if|if
condition|(
name|delete
operator|.
name|origin
argument_list|()
operator|==
name|Operation
operator|.
name|Origin
operator|.
name|RECOVERY
condition|)
block|{
return|return;
block|}
else|else
block|{
throw|throw
operator|new
name|VersionConflictEngineException
argument_list|(
name|shardId
argument_list|,
name|delete
operator|.
name|type
argument_list|()
argument_list|,
name|delete
operator|.
name|id
argument_list|()
argument_list|,
name|currentVersion
argument_list|,
name|expectedVersion
argument_list|)
throw|;
block|}
block|}
name|updatedVersion
operator|=
name|delete
operator|.
name|versionType
argument_list|()
operator|.
name|updateVersion
argument_list|(
name|currentVersion
argument_list|,
name|expectedVersion
argument_list|)
expr_stmt|;
specifier|final
name|boolean
name|found
decl_stmt|;
if|if
condition|(
name|currentVersion
operator|==
name|Versions
operator|.
name|NOT_FOUND
condition|)
block|{
comment|// doc does not exist and no prior deletes
name|found
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|versionValue
operator|!=
literal|null
operator|&&
name|versionValue
operator|.
name|delete
argument_list|()
condition|)
block|{
comment|// a "delete on delete", in this case, we still increment the version, log it, and return that version
name|found
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
comment|// we deleted a currently existing document
name|indexWriter
operator|.
name|deleteDocuments
argument_list|(
name|delete
operator|.
name|uid
argument_list|()
argument_list|)
expr_stmt|;
name|found
operator|=
literal|true
expr_stmt|;
block|}
name|delete
operator|.
name|updateVersion
argument_list|(
name|updatedVersion
argument_list|,
name|found
argument_list|)
expr_stmt|;
name|Translog
operator|.
name|Location
name|translogLocation
init|=
name|translog
operator|.
name|add
argument_list|(
operator|new
name|Translog
operator|.
name|Delete
argument_list|(
name|delete
argument_list|)
argument_list|)
decl_stmt|;
name|versionMap
operator|.
name|putUnderLock
argument_list|(
name|delete
operator|.
name|uid
argument_list|()
operator|.
name|bytes
argument_list|()
argument_list|,
operator|new
name|DeleteVersionValue
argument_list|(
name|updatedVersion
argument_list|,
name|engineConfig
operator|.
name|getThreadPool
argument_list|()
operator|.
name|estimatedTimeInMillis
argument_list|()
argument_list|,
name|translogLocation
argument_list|)
argument_list|)
expr_stmt|;
name|delete
operator|.
name|setTranslogLocation
argument_list|(
name|translogLocation
argument_list|)
expr_stmt|;
name|indexingService
operator|.
name|postDeleteUnderLock
argument_list|(
name|delete
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** @deprecated This was removed, but we keep this API so translog can replay any DBQs on upgrade. */
annotation|@
name|Deprecated
annotation|@
name|Override
DECL|method|delete
specifier|public
name|void
name|delete
parameter_list|(
name|DeleteByQuery
name|delete
parameter_list|)
throws|throws
name|EngineException
block|{
try|try
init|(
name|ReleasableLock
name|lock
init|=
name|readLock
operator|.
name|acquire
argument_list|()
init|)
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
if|if
condition|(
name|delete
operator|.
name|origin
argument_list|()
operator|==
name|Operation
operator|.
name|Origin
operator|.
name|RECOVERY
condition|)
block|{
comment|// Don't throttle recovery operations
name|innerDelete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
init|(
name|Releasable
name|r
init|=
name|throttle
operator|.
name|acquireThrottle
argument_list|()
init|)
block|{
name|innerDelete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|innerDelete
specifier|private
name|void
name|innerDelete
parameter_list|(
name|DeleteByQuery
name|delete
parameter_list|)
throws|throws
name|EngineException
block|{
try|try
block|{
name|Query
name|query
init|=
name|delete
operator|.
name|query
argument_list|()
decl_stmt|;
if|if
condition|(
name|delete
operator|.
name|aliasFilter
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|BooleanQuery
name|boolQuery
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|boolQuery
operator|.
name|add
argument_list|(
name|query
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|boolQuery
operator|.
name|add
argument_list|(
name|delete
operator|.
name|aliasFilter
argument_list|()
argument_list|,
name|Occur
operator|.
name|FILTER
argument_list|)
expr_stmt|;
name|query
operator|=
name|boolQuery
expr_stmt|;
block|}
if|if
condition|(
name|delete
operator|.
name|nested
argument_list|()
condition|)
block|{
name|query
operator|=
operator|new
name|IncludeNestedDocsQuery
argument_list|(
name|query
argument_list|,
name|delete
operator|.
name|parentFilter
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|indexWriter
operator|.
name|deleteDocuments
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|translog
operator|.
name|add
argument_list|(
operator|new
name|Translog
operator|.
name|DeleteByQuery
argument_list|(
name|delete
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|maybeFailEngine
argument_list|(
literal|"delete_by_query"
argument_list|,
name|t
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|DeleteByQueryFailedEngineException
argument_list|(
name|shardId
argument_list|,
name|delete
argument_list|,
name|t
argument_list|)
throw|;
block|}
comment|// TODO: This is heavy, since we refresh, but we must do this because we don't know which documents were in fact deleted (i.e., our
comment|// versionMap isn't updated), so we must force a cutover to a new reader to "see" the deletions:
name|refresh
argument_list|(
literal|"delete_by_query"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|refresh
specifier|public
name|void
name|refresh
parameter_list|(
name|String
name|source
parameter_list|)
throws|throws
name|EngineException
block|{
comment|// we obtain a read lock here, since we don't want a flush to happen while we are refreshing
comment|// since it flushes the index as well (though, in terms of concurrency, we are allowed to do it)
try|try
init|(
name|ReleasableLock
name|lock
init|=
name|readLock
operator|.
name|acquire
argument_list|()
init|)
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
name|updateIndexWriterSettings
argument_list|()
expr_stmt|;
name|searcherManager
operator|.
name|maybeRefreshBlocking
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AlreadyClosedException
name|e
parameter_list|)
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
name|maybeFailEngine
argument_list|(
literal|"refresh"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EngineClosedException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failEngine
argument_list|(
literal|"refresh failed"
argument_list|,
name|t
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RefreshFailedEngineException
argument_list|(
name|shardId
argument_list|,
name|t
argument_list|)
throw|;
block|}
comment|// TODO: maybe we should just put a scheduled job in threadPool?
comment|// We check for pruning in each delete request, but we also prune here e.g. in case a delete burst comes in and then no more deletes
comment|// for a long time:
name|maybePruneDeletedTombstones
argument_list|()
expr_stmt|;
name|versionMapRefreshPending
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|syncFlush
specifier|public
name|SyncedFlushResult
name|syncFlush
parameter_list|(
name|String
name|syncId
parameter_list|,
name|CommitId
name|expectedCommitId
parameter_list|)
throws|throws
name|EngineException
block|{
comment|// best effort attempt before we acquire locks
name|ensureOpen
argument_list|()
expr_stmt|;
if|if
condition|(
name|indexWriter
operator|.
name|hasUncommittedChanges
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"can't sync commit [{}]. have pending changes"
argument_list|,
name|syncId
argument_list|)
expr_stmt|;
return|return
name|SyncedFlushResult
operator|.
name|PENDING_OPERATIONS
return|;
block|}
if|if
condition|(
name|expectedCommitId
operator|.
name|idsEqual
argument_list|(
name|lastCommittedSegmentInfos
operator|.
name|getId
argument_list|()
argument_list|)
operator|==
literal|false
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"can't sync commit [{}]. current commit id is not equal to expected."
argument_list|,
name|syncId
argument_list|)
expr_stmt|;
return|return
name|SyncedFlushResult
operator|.
name|COMMIT_MISMATCH
return|;
block|}
try|try
init|(
name|ReleasableLock
name|lock
init|=
name|writeLock
operator|.
name|acquire
argument_list|()
init|)
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
if|if
condition|(
name|indexWriter
operator|.
name|hasUncommittedChanges
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"can't sync commit [{}]. have pending changes"
argument_list|,
name|syncId
argument_list|)
expr_stmt|;
return|return
name|SyncedFlushResult
operator|.
name|PENDING_OPERATIONS
return|;
block|}
if|if
condition|(
name|expectedCommitId
operator|.
name|idsEqual
argument_list|(
name|lastCommittedSegmentInfos
operator|.
name|getId
argument_list|()
argument_list|)
operator|==
literal|false
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"can't sync commit [{}]. current commit id is not equal to expected."
argument_list|,
name|syncId
argument_list|)
expr_stmt|;
return|return
name|SyncedFlushResult
operator|.
name|COMMIT_MISMATCH
return|;
block|}
name|logger
operator|.
name|trace
argument_list|(
literal|"starting sync commit [{}]"
argument_list|,
name|syncId
argument_list|)
expr_stmt|;
name|commitIndexWriter
argument_list|(
name|indexWriter
argument_list|,
name|translog
argument_list|,
name|syncId
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"successfully sync committed. sync id [{}]."
argument_list|,
name|syncId
argument_list|)
expr_stmt|;
name|lastCommittedSegmentInfos
operator|=
name|store
operator|.
name|readLastCommittedSegmentsInfo
argument_list|()
expr_stmt|;
return|return
name|SyncedFlushResult
operator|.
name|SUCCESS
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|maybeFailEngine
argument_list|(
literal|"sync commit"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|EngineException
argument_list|(
name|shardId
argument_list|,
literal|"failed to sync commit"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|flush
specifier|public
name|CommitId
name|flush
parameter_list|()
throws|throws
name|EngineException
block|{
return|return
name|flush
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|flush
specifier|public
name|CommitId
name|flush
parameter_list|(
name|boolean
name|force
parameter_list|,
name|boolean
name|waitIfOngoing
parameter_list|)
throws|throws
name|EngineException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
specifier|final
name|byte
index|[]
name|newCommitId
decl_stmt|;
comment|/*          * Unfortunately the lock order is important here. We have to acquire the readlock first otherwise          * if we are flushing at the end of the recovery while holding the write lock we can deadlock if:          *  Thread 1: flushes via API and gets the flush lock but blocks on the readlock since Thread 2 has the writeLock          *  Thread 2: flushes at the end of the recovery holding the writeLock and blocks on the flushLock owned by Thread 1          */
try|try
init|(
name|ReleasableLock
name|lock
init|=
name|readLock
operator|.
name|acquire
argument_list|()
init|)
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
name|updateIndexWriterSettings
argument_list|()
expr_stmt|;
if|if
condition|(
name|flushLock
operator|.
name|tryLock
argument_list|()
operator|==
literal|false
condition|)
block|{
comment|// if we can't get the lock right away we block if needed otherwise barf
if|if
condition|(
name|waitIfOngoing
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"waiting for in-flight flush to finish"
argument_list|)
expr_stmt|;
name|flushLock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|logger
operator|.
name|trace
argument_list|(
literal|"acquired flush lock after blocking"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|FlushNotAllowedEngineException
argument_list|(
name|shardId
argument_list|,
literal|"already flushing..."
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"acquired flush lock immediately"
argument_list|)
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
name|indexWriter
operator|.
name|hasUncommittedChanges
argument_list|()
operator|||
name|force
condition|)
block|{
try|try
block|{
name|translog
operator|.
name|prepareCommit
argument_list|()
expr_stmt|;
name|logger
operator|.
name|trace
argument_list|(
literal|"starting commit for flush; commitTranslog=true"
argument_list|)
expr_stmt|;
name|commitIndexWriter
argument_list|(
name|indexWriter
argument_list|,
name|translog
argument_list|)
expr_stmt|;
name|logger
operator|.
name|trace
argument_list|(
literal|"finished commit for flush"
argument_list|)
expr_stmt|;
name|translog
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// we need to refresh in order to clear older version values
name|refresh
argument_list|(
literal|"version_table_flush"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|FlushFailedEngineException
argument_list|(
name|shardId
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/*                  * we have to inc-ref the store here since if the engine is closed by a tragic event                  * we don't acquire the write lock and wait until we have exclusive access. This might also                  * dec the store reference which can essentially close the store and unless we can inc the reference                  * we can't use it.                  */
name|store
operator|.
name|incRef
argument_list|()
expr_stmt|;
try|try
block|{
comment|// reread the last committed segment infos
name|lastCommittedSegmentInfos
operator|=
name|store
operator|.
name|readLastCommittedSegmentsInfo
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
if|if
condition|(
name|isClosed
operator|.
name|get
argument_list|()
operator|==
literal|false
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"failed to read latest segment infos on flush"
argument_list|,
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|Lucene
operator|.
name|isCorruptionException
argument_list|(
name|e
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|FlushFailedEngineException
argument_list|(
name|shardId
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
finally|finally
block|{
name|store
operator|.
name|decRef
argument_list|()
expr_stmt|;
block|}
name|newCommitId
operator|=
name|lastCommittedSegmentInfos
operator|.
name|getId
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FlushFailedEngineException
name|ex
parameter_list|)
block|{
name|maybeFailEngine
argument_list|(
literal|"flush"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
finally|finally
block|{
name|flushLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|// We don't have to do this here; we do it defensively to make sure that even if wall clock time is misbehaving
comment|// (e.g., moves backwards) we will at least still sometimes prune deleted tombstones:
if|if
condition|(
name|engineConfig
operator|.
name|isEnableGcDeletes
argument_list|()
condition|)
block|{
name|pruneDeletedTombstones
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|CommitId
argument_list|(
name|newCommitId
argument_list|)
return|;
block|}
DECL|method|pruneDeletedTombstones
specifier|private
name|void
name|pruneDeletedTombstones
parameter_list|()
block|{
name|long
name|timeMSec
init|=
name|engineConfig
operator|.
name|getThreadPool
argument_list|()
operator|.
name|estimatedTimeInMillis
argument_list|()
decl_stmt|;
comment|// TODO: not good that we reach into LiveVersionMap here; can we move this inside VersionMap instead?  problem is the dirtyLock...
comment|// we only need to prune the deletes map; the current/old version maps are cleared on refresh:
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|BytesRef
argument_list|,
name|VersionValue
argument_list|>
name|entry
range|:
name|versionMap
operator|.
name|getAllTombstones
argument_list|()
control|)
block|{
name|BytesRef
name|uid
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|dirtyLock
argument_list|(
name|uid
argument_list|)
init|)
block|{
comment|// can we do it without this lock on each value? maybe batch to a set and get the lock once per set?
comment|// Must re-get it here, vs using entry.getValue(), in case the uid was indexed/deleted since we pulled the iterator:
name|VersionValue
name|versionValue
init|=
name|versionMap
operator|.
name|getTombstoneUnderLock
argument_list|(
name|uid
argument_list|)
decl_stmt|;
if|if
condition|(
name|versionValue
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|timeMSec
operator|-
name|versionValue
operator|.
name|time
argument_list|()
operator|>
name|engineConfig
operator|.
name|getGcDeletesInMillis
argument_list|()
condition|)
block|{
name|versionMap
operator|.
name|removeTombstoneUnderLock
argument_list|(
name|uid
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|lastDeleteVersionPruneTimeMSec
operator|=
name|timeMSec
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|forceMerge
specifier|public
name|void
name|forceMerge
parameter_list|(
specifier|final
name|boolean
name|flush
parameter_list|,
name|int
name|maxNumSegments
parameter_list|,
name|boolean
name|onlyExpungeDeletes
parameter_list|,
specifier|final
name|boolean
name|upgrade
parameter_list|,
specifier|final
name|boolean
name|upgradeOnlyAncientSegments
parameter_list|)
throws|throws
name|EngineException
block|{
comment|/*          * We do NOT acquire the readlock here since we are waiting on the merges to finish          * that's fine since the IW.rollback should stop all the threads and trigger an IOException          * causing us to fail the forceMerge          *          * The way we implement upgrades is a bit hackish in the sense that we set an instance          * variable and that this setting will thus apply to the next forced merge that will be run.          * This is ok because (1) this is the only place we call forceMerge, (2) we have a single          * thread for optimize, and the 'optimizeLock' guarding this code, and (3) ConcurrentMergeScheduler          * syncs calls to findForcedMerges.          */
assert|assert
name|indexWriter
operator|.
name|getConfig
argument_list|()
operator|.
name|getMergePolicy
argument_list|()
operator|instanceof
name|ElasticsearchMergePolicy
operator|:
literal|"MergePolicy is "
operator|+
name|indexWriter
operator|.
name|getConfig
argument_list|()
operator|.
name|getMergePolicy
argument_list|()
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
assert|;
name|ElasticsearchMergePolicy
name|mp
init|=
operator|(
name|ElasticsearchMergePolicy
operator|)
name|indexWriter
operator|.
name|getConfig
argument_list|()
operator|.
name|getMergePolicy
argument_list|()
decl_stmt|;
name|optimizeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
if|if
condition|(
name|upgrade
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"starting segment upgrade upgradeOnlyAncientSegments={}"
argument_list|,
name|upgradeOnlyAncientSegments
argument_list|)
expr_stmt|;
name|mp
operator|.
name|setUpgradeInProgress
argument_list|(
literal|true
argument_list|,
name|upgradeOnlyAncientSegments
argument_list|)
expr_stmt|;
block|}
name|store
operator|.
name|incRef
argument_list|()
expr_stmt|;
comment|// increment the ref just to ensure nobody closes the store while we optimize
try|try
block|{
if|if
condition|(
name|onlyExpungeDeletes
condition|)
block|{
assert|assert
name|upgrade
operator|==
literal|false
assert|;
name|indexWriter
operator|.
name|forceMergeDeletes
argument_list|(
literal|true
comment|/* blocks and waits for merges*/
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|maxNumSegments
operator|<=
literal|0
condition|)
block|{
assert|assert
name|upgrade
operator|==
literal|false
assert|;
name|indexWriter
operator|.
name|maybeMerge
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|indexWriter
operator|.
name|forceMerge
argument_list|(
name|maxNumSegments
argument_list|,
literal|true
comment|/* blocks and waits for merges*/
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|flush
condition|)
block|{
name|flush
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|upgrade
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"finished segment upgrade"
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|store
operator|.
name|decRef
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|ForceMergeFailedEngineException
name|ex
init|=
operator|new
name|ForceMergeFailedEngineException
argument_list|(
name|shardId
argument_list|,
name|t
argument_list|)
decl_stmt|;
name|maybeFailEngine
argument_list|(
literal|"force merge"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
finally|finally
block|{
try|try
block|{
name|mp
operator|.
name|setUpgradeInProgress
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// reset it just to make sure we reset it in a case of an error
block|}
finally|finally
block|{
name|optimizeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|snapshotIndex
specifier|public
name|SnapshotIndexCommit
name|snapshotIndex
parameter_list|(
specifier|final
name|boolean
name|flushFirst
parameter_list|)
throws|throws
name|EngineException
block|{
comment|// we have to flush outside of the readlock otherwise we might have a problem upgrading
comment|// the to a write lock when we fail the engine in this operation
if|if
condition|(
name|flushFirst
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"start flush for snapshot"
argument_list|)
expr_stmt|;
name|flush
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|logger
operator|.
name|trace
argument_list|(
literal|"finish flush for snapshot"
argument_list|)
expr_stmt|;
block|}
try|try
init|(
name|ReleasableLock
name|lock
init|=
name|readLock
operator|.
name|acquire
argument_list|()
init|)
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
name|logger
operator|.
name|trace
argument_list|(
literal|"pulling snapshot"
argument_list|)
expr_stmt|;
return|return
name|deletionPolicy
operator|.
name|snapshot
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SnapshotFailedEngineException
argument_list|(
name|shardId
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|maybeFailEngine
specifier|protected
name|boolean
name|maybeFailEngine
parameter_list|(
name|String
name|source
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{
name|boolean
name|shouldFail
init|=
name|super
operator|.
name|maybeFailEngine
argument_list|(
name|source
argument_list|,
name|t
argument_list|)
decl_stmt|;
if|if
condition|(
name|shouldFail
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// Check for AlreadyClosedException
if|if
condition|(
name|t
operator|instanceof
name|AlreadyClosedException
condition|)
block|{
comment|// if we are already closed due to some tragic exception
comment|// we need to fail the engine. it might have already been failed before
comment|// but we are double-checking it's failed and closed
if|if
condition|(
name|indexWriter
operator|.
name|isOpen
argument_list|()
operator|==
literal|false
operator|&&
name|indexWriter
operator|.
name|getTragicException
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|failEngine
argument_list|(
literal|"already closed by tragic event"
argument_list|,
name|indexWriter
operator|.
name|getTragicException
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|t
operator|!=
literal|null
operator|&&
name|indexWriter
operator|.
name|isOpen
argument_list|()
operator|==
literal|false
operator|&&
name|indexWriter
operator|.
name|getTragicException
argument_list|()
operator|==
name|t
condition|)
block|{
comment|// this spot on - we are handling the tragic event exception here so we have to fail the engine
comment|// right away
name|failEngine
argument_list|(
name|source
argument_list|,
name|t
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|getLastCommittedSegmentInfos
specifier|protected
name|SegmentInfos
name|getLastCommittedSegmentInfos
parameter_list|()
block|{
return|return
name|lastCommittedSegmentInfos
return|;
block|}
annotation|@
name|Override
DECL|method|writerSegmentStats
specifier|protected
specifier|final
name|void
name|writerSegmentStats
parameter_list|(
name|SegmentsStats
name|stats
parameter_list|)
block|{
name|stats
operator|.
name|addVersionMapMemoryInBytes
argument_list|(
name|versionMap
operator|.
name|ramBytesUsed
argument_list|()
argument_list|)
expr_stmt|;
name|stats
operator|.
name|addIndexWriterMemoryInBytes
argument_list|(
name|indexWriter
operator|.
name|ramBytesUsed
argument_list|()
argument_list|)
expr_stmt|;
name|stats
operator|.
name|addIndexWriterMaxMemoryInBytes
argument_list|(
call|(
name|long
call|)
argument_list|(
name|indexWriter
operator|.
name|getConfig
argument_list|()
operator|.
name|getRAMBufferSizeMB
argument_list|()
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|segments
specifier|public
name|List
argument_list|<
name|Segment
argument_list|>
name|segments
parameter_list|(
name|boolean
name|verbose
parameter_list|)
block|{
try|try
init|(
name|ReleasableLock
name|lock
init|=
name|readLock
operator|.
name|acquire
argument_list|()
init|)
block|{
name|Segment
index|[]
name|segmentsArr
init|=
name|getSegmentInfo
argument_list|(
name|lastCommittedSegmentInfos
argument_list|,
name|verbose
argument_list|)
decl_stmt|;
comment|// fill in the merges flag
name|Set
argument_list|<
name|OnGoingMerge
argument_list|>
name|onGoingMerges
init|=
name|mergeScheduler
operator|.
name|onGoingMerges
argument_list|()
decl_stmt|;
for|for
control|(
name|OnGoingMerge
name|onGoingMerge
range|:
name|onGoingMerges
control|)
block|{
for|for
control|(
name|SegmentCommitInfo
name|segmentInfoPerCommit
range|:
name|onGoingMerge
operator|.
name|getMergedSegments
argument_list|()
control|)
block|{
for|for
control|(
name|Segment
name|segment
range|:
name|segmentsArr
control|)
block|{
if|if
condition|(
name|segment
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|segmentInfoPerCommit
operator|.
name|info
operator|.
name|name
argument_list|)
condition|)
block|{
name|segment
operator|.
name|mergeId
operator|=
name|onGoingMerge
operator|.
name|getId
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|segmentsArr
argument_list|)
return|;
block|}
block|}
comment|/**      * Closes the engine without acquiring the write lock. This should only be      * called while the write lock is hold or in a disaster condition ie. if the engine      * is failed.      */
annotation|@
name|Override
DECL|method|closeNoLock
specifier|protected
specifier|final
name|void
name|closeNoLock
parameter_list|(
name|String
name|reason
parameter_list|)
block|{
if|if
condition|(
name|isClosed
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
assert|assert
name|rwl
operator|.
name|isWriteLockedByCurrentThread
argument_list|()
operator|||
name|failEngineLock
operator|.
name|isHeldByCurrentThread
argument_list|()
operator|:
literal|"Either the write lock must be held or the engine must be currently be failing itself"
assert|;
try|try
block|{
name|this
operator|.
name|versionMap
operator|.
name|clear
argument_list|()
expr_stmt|;
try|try
block|{
name|IOUtils
operator|.
name|close
argument_list|(
name|searcherManager
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Failed to close SearcherManager"
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|IOUtils
operator|.
name|close
argument_list|(
name|translog
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Failed to close translog"
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
comment|// no need to commit in this case!, we snapshot before we close the shard, so translog and all sync'ed
name|logger
operator|.
name|trace
argument_list|(
literal|"rollback indexWriter"
argument_list|)
expr_stmt|;
try|try
block|{
name|indexWriter
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AlreadyClosedException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
name|logger
operator|.
name|trace
argument_list|(
literal|"rollback indexWriter done"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"failed to rollback writer on close"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|store
operator|.
name|decRef
argument_list|()
expr_stmt|;
name|this
operator|.
name|mergeScheduler
operator|.
name|removeListener
argument_list|(
name|mergeSchedulerListener
argument_list|)
expr_stmt|;
name|this
operator|.
name|mergeScheduler
operator|.
name|removeFailureListener
argument_list|(
name|mergeSchedulerFailureListener
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"engine closed [{}]"
argument_list|,
name|reason
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|hasUncommittedChanges
specifier|public
name|boolean
name|hasUncommittedChanges
parameter_list|()
block|{
return|return
name|indexWriter
operator|.
name|hasUncommittedChanges
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getSearcherManager
specifier|protected
name|SearcherManager
name|getSearcherManager
parameter_list|()
block|{
return|return
name|searcherManager
return|;
block|}
DECL|method|dirtyLock
specifier|private
name|Object
name|dirtyLock
parameter_list|(
name|BytesRef
name|uid
parameter_list|)
block|{
name|int
name|hash
init|=
name|DjbHashFunction
operator|.
name|DJB_HASH
argument_list|(
name|uid
operator|.
name|bytes
argument_list|,
name|uid
operator|.
name|offset
argument_list|,
name|uid
operator|.
name|length
argument_list|)
decl_stmt|;
return|return
name|dirtyLocks
index|[
name|MathUtils
operator|.
name|mod
argument_list|(
name|hash
argument_list|,
name|dirtyLocks
operator|.
name|length
argument_list|)
index|]
return|;
block|}
DECL|method|dirtyLock
specifier|private
name|Object
name|dirtyLock
parameter_list|(
name|Term
name|uid
parameter_list|)
block|{
return|return
name|dirtyLock
argument_list|(
name|uid
operator|.
name|bytes
argument_list|()
argument_list|)
return|;
block|}
DECL|method|loadCurrentVersionFromIndex
specifier|private
name|long
name|loadCurrentVersionFromIndex
parameter_list|(
name|Term
name|uid
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
specifier|final
name|Searcher
name|searcher
init|=
name|acquireSearcher
argument_list|(
literal|"load_version"
argument_list|)
init|)
block|{
return|return
name|Versions
operator|.
name|loadVersion
argument_list|(
name|searcher
operator|.
name|reader
argument_list|()
argument_list|,
name|uid
argument_list|)
return|;
block|}
block|}
DECL|method|createWriter
specifier|private
name|IndexWriter
name|createWriter
parameter_list|(
name|boolean
name|create
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
specifier|final
name|IndexWriterConfig
name|iwc
init|=
operator|new
name|IndexWriterConfig
argument_list|(
name|engineConfig
operator|.
name|getAnalyzer
argument_list|()
argument_list|)
decl_stmt|;
name|iwc
operator|.
name|setCommitOnClose
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// we by default don't commit on close
name|iwc
operator|.
name|setOpenMode
argument_list|(
name|create
condition|?
name|IndexWriterConfig
operator|.
name|OpenMode
operator|.
name|CREATE
else|:
name|IndexWriterConfig
operator|.
name|OpenMode
operator|.
name|APPEND
argument_list|)
expr_stmt|;
name|iwc
operator|.
name|setIndexDeletionPolicy
argument_list|(
name|deletionPolicy
argument_list|)
expr_stmt|;
comment|// with tests.verbose, lucene sets this up: plumb to align with filesystem stream
name|boolean
name|verbose
init|=
literal|false
decl_stmt|;
try|try
block|{
name|verbose
operator|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"tests.verbose"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ignore
parameter_list|)
block|{             }
name|iwc
operator|.
name|setInfoStream
argument_list|(
name|verbose
condition|?
name|InfoStream
operator|.
name|getDefault
argument_list|()
else|:
operator|new
name|LoggerInfoStream
argument_list|(
name|logger
argument_list|)
argument_list|)
expr_stmt|;
name|iwc
operator|.
name|setMergeScheduler
argument_list|(
name|mergeScheduler
operator|.
name|newMergeScheduler
argument_list|()
argument_list|)
expr_stmt|;
name|MergePolicy
name|mergePolicy
init|=
name|mergePolicyProvider
operator|.
name|getMergePolicy
argument_list|()
decl_stmt|;
comment|// Give us the opportunity to upgrade old segments while performing
comment|// background merges
name|mergePolicy
operator|=
operator|new
name|ElasticsearchMergePolicy
argument_list|(
name|mergePolicy
argument_list|)
expr_stmt|;
name|iwc
operator|.
name|setMergePolicy
argument_list|(
name|mergePolicy
argument_list|)
expr_stmt|;
name|iwc
operator|.
name|setSimilarity
argument_list|(
name|engineConfig
operator|.
name|getSimilarity
argument_list|()
argument_list|)
expr_stmt|;
name|iwc
operator|.
name|setRAMBufferSizeMB
argument_list|(
name|engineConfig
operator|.
name|getIndexingBufferSize
argument_list|()
operator|.
name|mbFrac
argument_list|()
argument_list|)
expr_stmt|;
name|iwc
operator|.
name|setMaxThreadStates
argument_list|(
name|engineConfig
operator|.
name|getIndexConcurrency
argument_list|()
argument_list|)
expr_stmt|;
name|iwc
operator|.
name|setCodec
argument_list|(
name|engineConfig
operator|.
name|getCodec
argument_list|()
argument_list|)
expr_stmt|;
comment|/* We set this timeout to a highish value to work around              * the default poll interval in the Lucene lock that is              * 1000ms by default. We might need to poll multiple times              * here but with 1s poll this is only executed twice at most              * in combination with the default writelock timeout*/
name|iwc
operator|.
name|setWriteLockTimeout
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|iwc
operator|.
name|setUseCompoundFile
argument_list|(
name|this
operator|.
name|engineConfig
operator|.
name|isCompoundOnFlush
argument_list|()
argument_list|)
expr_stmt|;
comment|// Warm-up hook for newly-merged segments. Warming up segments here is better since it will be performed at the end
comment|// of the merge operation and won't slow down _refresh
name|iwc
operator|.
name|setMergedSegmentWarmer
argument_list|(
operator|new
name|IndexReaderWarmer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|warm
parameter_list|(
name|LeafReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
assert|assert
name|isMergedSegment
argument_list|(
name|reader
argument_list|)
assert|;
if|if
condition|(
name|warmer
operator|!=
literal|null
condition|)
block|{
specifier|final
name|Engine
operator|.
name|Searcher
name|searcher
init|=
operator|new
name|Searcher
argument_list|(
literal|"warmer"
argument_list|,
name|searcherFactory
operator|.
name|newSearcher
argument_list|(
name|reader
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|IndicesWarmer
operator|.
name|WarmerContext
name|context
init|=
operator|new
name|IndicesWarmer
operator|.
name|WarmerContext
argument_list|(
name|shardId
argument_list|,
name|searcher
argument_list|)
decl_stmt|;
name|warmer
operator|.
name|warmNewReaders
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|// Don't fail a merge if the warm-up failed
if|if
condition|(
name|isClosed
operator|.
name|get
argument_list|()
operator|==
literal|false
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Warm-up failed"
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|t
operator|instanceof
name|Error
condition|)
block|{
comment|// assertion/out-of-memory error, don't ignore those
throw|throw
operator|(
name|Error
operator|)
name|t
throw|;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
return|return
operator|new
name|IndexWriter
argument_list|(
name|store
operator|.
name|directory
argument_list|()
argument_list|,
name|iwc
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|LockObtainFailedException
name|ex
parameter_list|)
block|{
name|boolean
name|isLocked
init|=
name|IndexWriter
operator|.
name|isLocked
argument_list|(
name|store
operator|.
name|directory
argument_list|()
argument_list|)
decl_stmt|;
name|logger
operator|.
name|warn
argument_list|(
literal|"Could not lock IndexWriter isLocked [{}]"
argument_list|,
name|ex
argument_list|,
name|isLocked
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
block|}
comment|/** Extended SearcherFactory that warms the segments if needed when acquiring a new searcher */
DECL|class|SearchFactory
specifier|final
specifier|static
class|class
name|SearchFactory
extends|extends
name|EngineSearcherFactory
block|{
DECL|field|warmer
specifier|private
specifier|final
name|IndicesWarmer
name|warmer
decl_stmt|;
DECL|field|shardId
specifier|private
specifier|final
name|ShardId
name|shardId
decl_stmt|;
DECL|field|logger
specifier|private
specifier|final
name|ESLogger
name|logger
decl_stmt|;
DECL|field|isEngineClosed
specifier|private
specifier|final
name|AtomicBoolean
name|isEngineClosed
decl_stmt|;
DECL|method|SearchFactory
name|SearchFactory
parameter_list|(
name|ESLogger
name|logger
parameter_list|,
name|AtomicBoolean
name|isEngineClosed
parameter_list|,
name|EngineConfig
name|engineConfig
parameter_list|)
block|{
name|super
argument_list|(
name|engineConfig
argument_list|)
expr_stmt|;
name|warmer
operator|=
name|engineConfig
operator|.
name|getWarmer
argument_list|()
expr_stmt|;
name|shardId
operator|=
name|engineConfig
operator|.
name|getShardId
argument_list|()
expr_stmt|;
name|this
operator|.
name|logger
operator|=
name|logger
expr_stmt|;
name|this
operator|.
name|isEngineClosed
operator|=
name|isEngineClosed
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|newSearcher
specifier|public
name|IndexSearcher
name|newSearcher
parameter_list|(
name|IndexReader
name|reader
parameter_list|,
name|IndexReader
name|previousReader
parameter_list|)
throws|throws
name|IOException
block|{
name|IndexSearcher
name|searcher
init|=
name|super
operator|.
name|newSearcher
argument_list|(
name|reader
argument_list|,
name|previousReader
argument_list|)
decl_stmt|;
if|if
condition|(
name|warmer
operator|!=
literal|null
condition|)
block|{
comment|// we need to pass a custom searcher that does not release anything on Engine.Search Release,
comment|// we will release explicitly
name|IndexSearcher
name|newSearcher
init|=
literal|null
decl_stmt|;
name|boolean
name|closeNewSearcher
init|=
literal|false
decl_stmt|;
try|try
block|{
if|if
condition|(
name|previousReader
operator|==
literal|null
condition|)
block|{
comment|// we are starting up - no writer active so we can't acquire a searcher.
name|newSearcher
operator|=
name|searcher
expr_stmt|;
block|}
else|else
block|{
comment|// figure out the newSearcher, with only the new readers that are relevant for us
name|List
argument_list|<
name|IndexReader
argument_list|>
name|readers
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|LeafReaderContext
name|newReaderContext
range|:
name|reader
operator|.
name|leaves
argument_list|()
control|)
block|{
if|if
condition|(
name|isMergedSegment
argument_list|(
name|newReaderContext
operator|.
name|reader
argument_list|()
argument_list|)
condition|)
block|{
comment|// merged segments are already handled by IndexWriterConfig.setMergedSegmentWarmer
continue|continue;
block|}
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|LeafReaderContext
name|currentReaderContext
range|:
name|previousReader
operator|.
name|leaves
argument_list|()
control|)
block|{
if|if
condition|(
name|currentReaderContext
operator|.
name|reader
argument_list|()
operator|.
name|getCoreCacheKey
argument_list|()
operator|.
name|equals
argument_list|(
name|newReaderContext
operator|.
name|reader
argument_list|()
operator|.
name|getCoreCacheKey
argument_list|()
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
name|readers
operator|.
name|add
argument_list|(
name|newReaderContext
operator|.
name|reader
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|readers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// we don't want to close the inner readers, just increase ref on them
name|IndexReader
name|newReader
init|=
operator|new
name|MultiReader
argument_list|(
name|readers
operator|.
name|toArray
argument_list|(
operator|new
name|IndexReader
index|[
name|readers
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|newSearcher
operator|=
name|super
operator|.
name|newSearcher
argument_list|(
name|newReader
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|closeNewSearcher
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|newSearcher
operator|!=
literal|null
condition|)
block|{
name|IndicesWarmer
operator|.
name|WarmerContext
name|context
init|=
operator|new
name|IndicesWarmer
operator|.
name|WarmerContext
argument_list|(
name|shardId
argument_list|,
operator|new
name|Searcher
argument_list|(
literal|"warmer"
argument_list|,
name|newSearcher
argument_list|)
argument_list|)
decl_stmt|;
name|warmer
operator|.
name|warmNewReaders
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
name|warmer
operator|.
name|warmTopReader
argument_list|(
operator|new
name|IndicesWarmer
operator|.
name|WarmerContext
argument_list|(
name|shardId
argument_list|,
operator|new
name|Searcher
argument_list|(
literal|"warmer"
argument_list|,
name|searcher
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
if|if
condition|(
name|isEngineClosed
operator|.
name|get
argument_list|()
operator|==
literal|false
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"failed to prepare/warm"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
comment|// no need to release the fullSearcher, nothing really is done...
if|if
condition|(
name|newSearcher
operator|!=
literal|null
operator|&&
name|closeNewSearcher
condition|)
block|{
name|IOUtils
operator|.
name|closeWhileHandlingException
argument_list|(
name|newSearcher
operator|.
name|getIndexReader
argument_list|()
argument_list|)
expr_stmt|;
comment|// ignore
block|}
block|}
block|}
return|return
name|searcher
return|;
block|}
block|}
DECL|method|activateThrottling
specifier|public
name|void
name|activateThrottling
parameter_list|()
block|{
name|throttle
operator|.
name|activate
argument_list|()
expr_stmt|;
block|}
DECL|method|deactivateThrottling
specifier|public
name|void
name|deactivateThrottling
parameter_list|()
block|{
name|throttle
operator|.
name|deactivate
argument_list|()
expr_stmt|;
block|}
DECL|method|getGcDeletesInMillis
name|long
name|getGcDeletesInMillis
parameter_list|()
block|{
return|return
name|engineConfig
operator|.
name|getGcDeletesInMillis
argument_list|()
return|;
block|}
DECL|method|getCurrentIndexWriterConfig
name|LiveIndexWriterConfig
name|getCurrentIndexWriterConfig
parameter_list|()
block|{
return|return
name|indexWriter
operator|.
name|getConfig
argument_list|()
return|;
block|}
DECL|class|FailEngineOnMergeFailure
class|class
name|FailEngineOnMergeFailure
implements|implements
name|MergeSchedulerProvider
operator|.
name|FailureListener
block|{
annotation|@
name|Override
DECL|method|onFailedMerge
specifier|public
name|void
name|onFailedMerge
parameter_list|(
name|MergePolicy
operator|.
name|MergeException
name|e
parameter_list|)
block|{
if|if
condition|(
name|Lucene
operator|.
name|isCorruptionException
argument_list|(
name|e
argument_list|)
condition|)
block|{
name|failEngine
argument_list|(
literal|"corrupt file detected source: [merge]"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|failEngine
argument_list|(
literal|"merge exception"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|MergeSchedulerListener
class|class
name|MergeSchedulerListener
implements|implements
name|MergeSchedulerProvider
operator|.
name|Listener
block|{
DECL|field|numMergesInFlight
specifier|private
specifier|final
name|AtomicInteger
name|numMergesInFlight
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|isThrottling
specifier|private
specifier|final
name|AtomicBoolean
name|isThrottling
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|beforeMerge
specifier|public
specifier|synchronized
name|void
name|beforeMerge
parameter_list|(
name|OnGoingMerge
name|merge
parameter_list|)
block|{
name|int
name|maxNumMerges
init|=
name|mergeScheduler
operator|.
name|getMaxMerges
argument_list|()
decl_stmt|;
if|if
condition|(
name|numMergesInFlight
operator|.
name|incrementAndGet
argument_list|()
operator|>
name|maxNumMerges
condition|)
block|{
if|if
condition|(
name|isThrottling
operator|.
name|getAndSet
argument_list|(
literal|true
argument_list|)
operator|==
literal|false
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"now throttling indexing: numMergesInFlight={}, maxNumMerges={}"
argument_list|,
name|numMergesInFlight
argument_list|,
name|maxNumMerges
argument_list|)
expr_stmt|;
name|indexingService
operator|.
name|throttlingActivated
argument_list|()
expr_stmt|;
name|activateThrottling
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|afterMerge
specifier|public
specifier|synchronized
name|void
name|afterMerge
parameter_list|(
name|OnGoingMerge
name|merge
parameter_list|)
block|{
name|int
name|maxNumMerges
init|=
name|mergeScheduler
operator|.
name|getMaxMerges
argument_list|()
decl_stmt|;
if|if
condition|(
name|numMergesInFlight
operator|.
name|decrementAndGet
argument_list|()
operator|<
name|maxNumMerges
condition|)
block|{
if|if
condition|(
name|isThrottling
operator|.
name|getAndSet
argument_list|(
literal|false
argument_list|)
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"stop throttling indexing: numMergesInFlight={}, maxNumMerges={}"
argument_list|,
name|numMergesInFlight
argument_list|,
name|maxNumMerges
argument_list|)
expr_stmt|;
name|indexingService
operator|.
name|throttlingDeactivated
argument_list|()
expr_stmt|;
name|deactivateThrottling
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|commitIndexWriter
specifier|private
name|void
name|commitIndexWriter
parameter_list|(
name|IndexWriter
name|writer
parameter_list|,
name|Translog
name|translog
parameter_list|,
name|String
name|syncId
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|Translog
operator|.
name|TranslogGeneration
name|translogGeneration
init|=
name|translog
operator|.
name|getGeneration
argument_list|()
decl_stmt|;
name|logger
operator|.
name|trace
argument_list|(
literal|"committing writer with translog id [{}]  and sync id [{}] "
argument_list|,
name|translogGeneration
operator|.
name|translogFileGeneration
argument_list|,
name|syncId
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|commitData
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|commitData
operator|.
name|put
argument_list|(
name|Translog
operator|.
name|TRANSLOG_GENERATION_KEY
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|translogGeneration
operator|.
name|translogFileGeneration
argument_list|)
argument_list|)
expr_stmt|;
name|commitData
operator|.
name|put
argument_list|(
name|Translog
operator|.
name|TRANSLOG_UUID_KEY
argument_list|,
name|translogGeneration
operator|.
name|translogUUID
argument_list|)
expr_stmt|;
if|if
condition|(
name|syncId
operator|!=
literal|null
condition|)
block|{
name|commitData
operator|.
name|put
argument_list|(
name|Engine
operator|.
name|SYNC_COMMIT_ID
argument_list|,
name|syncId
argument_list|)
expr_stmt|;
block|}
name|indexWriter
operator|.
name|setCommitData
argument_list|(
name|commitData
argument_list|)
expr_stmt|;
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|failEngine
argument_list|(
literal|"lucene commit failed"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
block|}
DECL|method|commitIndexWriter
specifier|private
name|void
name|commitIndexWriter
parameter_list|(
name|IndexWriter
name|writer
parameter_list|,
name|Translog
name|translog
parameter_list|)
throws|throws
name|IOException
block|{
name|commitIndexWriter
argument_list|(
name|writer
argument_list|,
name|translog
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

