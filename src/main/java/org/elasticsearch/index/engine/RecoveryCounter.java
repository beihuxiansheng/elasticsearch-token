begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.engine
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lease
operator|.
name|Releasable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|store
operator|.
name|Store
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_comment
comment|/**  * RecoveryCounter keeps tracks of the number of ongoing recoveries for a  * particular {@link Store}  */
end_comment

begin_class
DECL|class|RecoveryCounter
specifier|public
class|class
name|RecoveryCounter
implements|implements
name|Releasable
block|{
DECL|field|store
specifier|private
specifier|final
name|Store
name|store
decl_stmt|;
DECL|method|RecoveryCounter
name|RecoveryCounter
parameter_list|(
name|Store
name|store
parameter_list|)
block|{
name|this
operator|.
name|store
operator|=
name|store
expr_stmt|;
block|}
DECL|field|onGoingRecoveries
specifier|private
specifier|final
name|AtomicInteger
name|onGoingRecoveries
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
DECL|method|startRecovery
name|void
name|startRecovery
parameter_list|()
block|{
name|store
operator|.
name|incRef
argument_list|()
expr_stmt|;
name|onGoingRecoveries
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
DECL|method|get
specifier|public
name|int
name|get
parameter_list|()
block|{
return|return
name|onGoingRecoveries
operator|.
name|get
argument_list|()
return|;
block|}
comment|/**      * End the recovery counter by decrementing the store's ref and the ongoing recovery counter      * @return number of ongoing recoveries remaining      */
DECL|method|endRecovery
name|int
name|endRecovery
parameter_list|()
block|{
name|store
operator|.
name|decRef
argument_list|()
expr_stmt|;
name|int
name|left
init|=
name|onGoingRecoveries
operator|.
name|decrementAndGet
argument_list|()
decl_stmt|;
assert|assert
name|onGoingRecoveries
operator|.
name|get
argument_list|()
operator|>=
literal|0
operator|:
literal|"ongoingRecoveries must be>= 0 but was: "
operator|+
name|onGoingRecoveries
operator|.
name|get
argument_list|()
assert|;
return|return
name|left
return|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
name|endRecovery
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

