begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.engine.internal
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriterConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|MergePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|ESLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|Lucene
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|ByteSizeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|ByteSizeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|EsExecutors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|AnalysisService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|codec
operator|.
name|CodecService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|deletionpolicy
operator|.
name|SnapshotDeletionPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|deletionpolicy
operator|.
name|SnapshotIndexCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|indexing
operator|.
name|ShardIndexingService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|merge
operator|.
name|OnGoingMerge
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|merge
operator|.
name|policy
operator|.
name|MergePolicyProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|merge
operator|.
name|scheduler
operator|.
name|MergeSchedulerProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|settings
operator|.
name|IndexSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|settings
operator|.
name|IndexSettingsService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|AbstractIndexShardComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|IndexShardComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|similarity
operator|.
name|SimilarityService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|store
operator|.
name|Store
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|translog
operator|.
name|Translog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|warmer
operator|.
name|IndicesWarmer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|warmer
operator|.
name|InternalIndicesWarmer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_class
DECL|class|InternalEngineHolder
specifier|public
class|class
name|InternalEngineHolder
extends|extends
name|AbstractIndexShardComponent
implements|implements
name|IndexShardComponent
implements|,
name|Engine
implements|,
name|Engine
operator|.
name|FailedEngineListener
block|{
DECL|field|mergeSchedulerFailureListener
specifier|private
specifier|final
name|FailEngineOnMergeFailure
name|mergeSchedulerFailureListener
decl_stmt|;
DECL|field|settingsListener
specifier|private
specifier|final
name|ApplySettings
name|settingsListener
decl_stmt|;
DECL|field|mergeSchedulerListener
specifier|private
specifier|final
name|MergeScheduleListener
name|mergeSchedulerListener
decl_stmt|;
DECL|field|failOnMergeFailure
specifier|protected
specifier|volatile
name|Boolean
name|failOnMergeFailure
decl_stmt|;
DECL|field|failEngineOnCorruption
specifier|protected
specifier|volatile
name|boolean
name|failEngineOnCorruption
decl_stmt|;
DECL|field|indexingBufferSize
specifier|protected
specifier|volatile
name|ByteSizeValue
name|indexingBufferSize
decl_stmt|;
DECL|field|indexConcurrency
specifier|protected
specifier|volatile
name|int
name|indexConcurrency
decl_stmt|;
DECL|field|compoundOnFlush
specifier|protected
specifier|volatile
name|boolean
name|compoundOnFlush
init|=
literal|true
decl_stmt|;
DECL|field|gcDeletesInMillis
specifier|protected
name|long
name|gcDeletesInMillis
decl_stmt|;
DECL|field|enableGcDeletes
specifier|protected
specifier|volatile
name|boolean
name|enableGcDeletes
init|=
literal|true
decl_stmt|;
DECL|field|codecName
specifier|protected
specifier|volatile
name|String
name|codecName
decl_stmt|;
DECL|field|optimizeAutoGenerateId
specifier|protected
specifier|final
name|boolean
name|optimizeAutoGenerateId
decl_stmt|;
DECL|field|threadPool
specifier|protected
specifier|final
name|ThreadPool
name|threadPool
decl_stmt|;
DECL|field|indexingService
specifier|protected
specifier|final
name|ShardIndexingService
name|indexingService
decl_stmt|;
DECL|field|indexSettingsService
specifier|protected
specifier|final
name|IndexSettingsService
name|indexSettingsService
decl_stmt|;
annotation|@
name|Nullable
DECL|field|warmer
specifier|protected
specifier|final
name|InternalIndicesWarmer
name|warmer
decl_stmt|;
DECL|field|store
specifier|protected
specifier|final
name|Store
name|store
decl_stmt|;
DECL|field|deletionPolicy
specifier|protected
specifier|final
name|SnapshotDeletionPolicy
name|deletionPolicy
decl_stmt|;
DECL|field|translog
specifier|protected
specifier|final
name|Translog
name|translog
decl_stmt|;
DECL|field|mergePolicyProvider
specifier|protected
specifier|final
name|MergePolicyProvider
name|mergePolicyProvider
decl_stmt|;
DECL|field|mergeScheduler
specifier|protected
specifier|final
name|MergeSchedulerProvider
name|mergeScheduler
decl_stmt|;
DECL|field|analysisService
specifier|protected
specifier|final
name|AnalysisService
name|analysisService
decl_stmt|;
DECL|field|similarityService
specifier|protected
specifier|final
name|SimilarityService
name|similarityService
decl_stmt|;
DECL|field|codecService
specifier|protected
specifier|final
name|CodecService
name|codecService
decl_stmt|;
DECL|field|currentEngine
specifier|private
specifier|final
name|AtomicReference
argument_list|<
name|InternalEngine
argument_list|>
name|currentEngine
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|closed
specifier|private
specifier|volatile
name|boolean
name|closed
init|=
literal|false
decl_stmt|;
DECL|field|INDEX_INDEX_CONCURRENCY
specifier|public
specifier|static
specifier|final
name|String
name|INDEX_INDEX_CONCURRENCY
init|=
literal|"index.index_concurrency"
decl_stmt|;
DECL|field|INDEX_COMPOUND_ON_FLUSH
specifier|public
specifier|static
specifier|final
name|String
name|INDEX_COMPOUND_ON_FLUSH
init|=
literal|"index.compound_on_flush"
decl_stmt|;
DECL|field|INDEX_GC_DELETES
specifier|public
specifier|static
specifier|final
name|String
name|INDEX_GC_DELETES
init|=
literal|"index.gc_deletes"
decl_stmt|;
DECL|field|INDEX_FAIL_ON_MERGE_FAILURE
specifier|public
specifier|static
specifier|final
name|String
name|INDEX_FAIL_ON_MERGE_FAILURE
init|=
literal|"index.fail_on_merge_failure"
decl_stmt|;
DECL|field|INDEX_FAIL_ON_CORRUPTION
specifier|public
specifier|static
specifier|final
name|String
name|INDEX_FAIL_ON_CORRUPTION
init|=
literal|"index.fail_on_corruption"
decl_stmt|;
DECL|field|DEFAULT_REFRESH_INTERVAL
specifier|public
specifier|static
specifier|final
name|TimeValue
name|DEFAULT_REFRESH_INTERVAL
init|=
operator|new
name|TimeValue
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
DECL|field|failedEngineListeners
specifier|private
specifier|final
name|CopyOnWriteArrayList
argument_list|<
name|FailedEngineListener
argument_list|>
name|failedEngineListeners
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|Inject
DECL|method|InternalEngineHolder
specifier|public
name|InternalEngineHolder
parameter_list|(
name|ShardId
name|shardId
parameter_list|,
annotation|@
name|IndexSettings
name|Settings
name|indexSettings
parameter_list|,
name|ThreadPool
name|threadPool
parameter_list|,
name|IndexSettingsService
name|indexSettingsService
parameter_list|,
name|ShardIndexingService
name|indexingService
parameter_list|,
annotation|@
name|Nullable
name|IndicesWarmer
name|warmer
parameter_list|,
name|Store
name|store
parameter_list|,
name|SnapshotDeletionPolicy
name|deletionPolicy
parameter_list|,
name|Translog
name|translog
parameter_list|,
name|MergePolicyProvider
name|mergePolicyProvider
parameter_list|,
name|MergeSchedulerProvider
name|mergeScheduler
parameter_list|,
name|AnalysisService
name|analysisService
parameter_list|,
name|SimilarityService
name|similarityService
parameter_list|,
name|CodecService
name|codecService
parameter_list|)
throws|throws
name|EngineException
block|{
name|super
argument_list|(
name|shardId
argument_list|,
name|indexSettings
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|store
argument_list|,
literal|"Store must be provided to the engine"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|deletionPolicy
argument_list|,
literal|"Snapshot deletion policy must be provided to the engine"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|translog
argument_list|,
literal|"Translog must be provided to the engine"
argument_list|)
expr_stmt|;
name|this
operator|.
name|gcDeletesInMillis
operator|=
name|indexSettings
operator|.
name|getAsTime
argument_list|(
name|INDEX_GC_DELETES
argument_list|,
name|TimeValue
operator|.
name|timeValueSeconds
argument_list|(
literal|60
argument_list|)
argument_list|)
operator|.
name|millis
argument_list|()
expr_stmt|;
name|this
operator|.
name|indexingBufferSize
operator|=
name|componentSettings
operator|.
name|getAsBytesSize
argument_list|(
literal|"index_buffer_size"
argument_list|,
operator|new
name|ByteSizeValue
argument_list|(
literal|64
argument_list|,
name|ByteSizeUnit
operator|.
name|MB
argument_list|)
argument_list|)
expr_stmt|;
comment|// not really important, as it is set by the IndexingMemory manager
name|this
operator|.
name|codecName
operator|=
name|indexSettings
operator|.
name|get
argument_list|(
name|INDEX_CODEC
argument_list|,
literal|"default"
argument_list|)
expr_stmt|;
name|this
operator|.
name|threadPool
operator|=
name|threadPool
expr_stmt|;
name|this
operator|.
name|indexSettingsService
operator|=
name|indexSettingsService
expr_stmt|;
name|this
operator|.
name|indexingService
operator|=
name|indexingService
expr_stmt|;
name|this
operator|.
name|warmer
operator|=
operator|(
name|InternalIndicesWarmer
operator|)
name|warmer
expr_stmt|;
name|this
operator|.
name|store
operator|=
name|store
expr_stmt|;
name|this
operator|.
name|deletionPolicy
operator|=
name|deletionPolicy
expr_stmt|;
name|this
operator|.
name|translog
operator|=
name|translog
expr_stmt|;
name|this
operator|.
name|mergePolicyProvider
operator|=
name|mergePolicyProvider
expr_stmt|;
name|this
operator|.
name|mergeScheduler
operator|=
name|mergeScheduler
expr_stmt|;
name|this
operator|.
name|analysisService
operator|=
name|analysisService
expr_stmt|;
name|this
operator|.
name|similarityService
operator|=
name|similarityService
expr_stmt|;
name|this
operator|.
name|codecService
operator|=
name|codecService
expr_stmt|;
name|this
operator|.
name|compoundOnFlush
operator|=
name|indexSettings
operator|.
name|getAsBoolean
argument_list|(
name|INDEX_COMPOUND_ON_FLUSH
argument_list|,
name|this
operator|.
name|compoundOnFlush
argument_list|)
expr_stmt|;
name|this
operator|.
name|indexConcurrency
operator|=
name|indexSettings
operator|.
name|getAsInt
argument_list|(
name|INDEX_INDEX_CONCURRENCY
argument_list|,
name|Math
operator|.
name|max
argument_list|(
name|IndexWriterConfig
operator|.
name|DEFAULT_MAX_THREAD_STATES
argument_list|,
call|(
name|int
call|)
argument_list|(
name|EsExecutors
operator|.
name|boundedNumberOfProcessors
argument_list|(
name|indexSettings
argument_list|)
operator|*
literal|0.65
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|optimizeAutoGenerateId
operator|=
name|indexSettings
operator|.
name|getAsBoolean
argument_list|(
literal|"index.optimize_auto_generated_id"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|failEngineOnCorruption
operator|=
name|indexSettings
operator|.
name|getAsBoolean
argument_list|(
name|INDEX_FAIL_ON_CORRUPTION
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|failOnMergeFailure
operator|=
name|indexSettings
operator|.
name|getAsBoolean
argument_list|(
name|INDEX_FAIL_ON_MERGE_FAILURE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|mergeSchedulerFailureListener
operator|=
operator|new
name|FailEngineOnMergeFailure
argument_list|()
expr_stmt|;
name|this
operator|.
name|mergeScheduler
operator|.
name|addFailureListener
argument_list|(
name|mergeSchedulerFailureListener
argument_list|)
expr_stmt|;
name|this
operator|.
name|mergeSchedulerListener
operator|=
operator|new
name|MergeScheduleListener
argument_list|()
expr_stmt|;
name|this
operator|.
name|mergeScheduler
operator|.
name|addListener
argument_list|(
name|mergeSchedulerListener
argument_list|)
expr_stmt|;
name|this
operator|.
name|settingsListener
operator|=
operator|new
name|ApplySettings
argument_list|(
name|logger
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|this
operator|.
name|indexSettingsService
operator|.
name|addListener
argument_list|(
name|this
operator|.
name|settingsListener
argument_list|)
expr_stmt|;
name|store
operator|.
name|incRef
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|defaultRefreshInterval
specifier|public
name|TimeValue
name|defaultRefreshInterval
parameter_list|()
block|{
return|return
name|DEFAULT_REFRESH_INTERVAL
return|;
block|}
DECL|method|engineSafe
specifier|public
name|InternalEngine
name|engineSafe
parameter_list|()
block|{
name|InternalEngine
name|engine
init|=
name|currentEngine
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|engine
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|EngineClosedException
argument_list|(
name|shardId
argument_list|)
throw|;
block|}
return|return
name|engine
return|;
block|}
annotation|@
name|Override
DECL|method|enableGcDeletes
specifier|public
name|void
name|enableGcDeletes
parameter_list|(
name|boolean
name|enableGcDeletes
parameter_list|)
block|{
name|this
operator|.
name|enableGcDeletes
operator|=
name|enableGcDeletes
expr_stmt|;
name|InternalEngine
name|currentEngine
init|=
name|this
operator|.
name|currentEngine
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|currentEngine
operator|!=
literal|null
condition|)
block|{
name|currentEngine
operator|.
name|enableGcDeletes
argument_list|(
name|enableGcDeletes
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|updateIndexingBufferSize
specifier|public
name|void
name|updateIndexingBufferSize
parameter_list|(
name|ByteSizeValue
name|indexingBufferSize
parameter_list|)
block|{
name|this
operator|.
name|indexingBufferSize
operator|=
name|indexingBufferSize
expr_stmt|;
name|InternalEngine
name|currentEngine
init|=
name|this
operator|.
name|currentEngine
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|currentEngine
operator|!=
literal|null
condition|)
block|{
name|currentEngine
operator|.
name|updateIndexingBufferSize
argument_list|(
name|indexingBufferSize
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|addFailedEngineListener
specifier|public
name|void
name|addFailedEngineListener
parameter_list|(
name|FailedEngineListener
name|listener
parameter_list|)
block|{
name|failedEngineListeners
operator|.
name|add
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|start
specifier|public
specifier|synchronized
name|void
name|start
parameter_list|()
throws|throws
name|EngineException
block|{
if|if
condition|(
name|closed
condition|)
block|{
throw|throw
operator|new
name|EngineClosedException
argument_list|(
name|shardId
argument_list|)
throw|;
block|}
name|InternalEngine
name|currentEngine
init|=
name|this
operator|.
name|currentEngine
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|currentEngine
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|EngineAlreadyStartedException
argument_list|(
name|shardId
argument_list|)
throw|;
block|}
name|InternalEngine
name|newEngine
init|=
name|createEngine
argument_list|()
decl_stmt|;
name|store
operator|.
name|incRef
argument_list|()
expr_stmt|;
try|try
block|{
name|newEngine
operator|.
name|start
argument_list|()
expr_stmt|;
name|boolean
name|success
init|=
name|this
operator|.
name|currentEngine
operator|.
name|compareAndSet
argument_list|(
literal|null
argument_list|,
name|newEngine
argument_list|)
decl_stmt|;
assert|assert
name|success
operator|:
literal|"engine changes should be done under a synchronize"
assert|;
block|}
finally|finally
block|{
name|store
operator|.
name|decRef
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|stop
specifier|public
specifier|synchronized
name|void
name|stop
parameter_list|()
throws|throws
name|EngineException
block|{
name|InternalEngine
name|currentEngine
init|=
name|this
operator|.
name|currentEngine
operator|.
name|getAndSet
argument_list|(
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentEngine
operator|!=
literal|null
condition|)
block|{
name|currentEngine
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
specifier|synchronized
name|void
name|close
parameter_list|()
throws|throws
name|ElasticsearchException
block|{
if|if
condition|(
name|closed
operator|==
literal|false
condition|)
block|{
name|closed
operator|=
literal|true
expr_stmt|;
try|try
block|{
name|InternalEngine
name|currentEngine
init|=
name|this
operator|.
name|currentEngine
operator|.
name|getAndSet
argument_list|(
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentEngine
operator|!=
literal|null
condition|)
block|{
name|currentEngine
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|mergeScheduler
operator|.
name|removeFailureListener
argument_list|(
name|mergeSchedulerFailureListener
argument_list|)
expr_stmt|;
name|mergeScheduler
operator|.
name|removeListener
argument_list|(
name|mergeSchedulerListener
argument_list|)
expr_stmt|;
name|indexSettingsService
operator|.
name|removeListener
argument_list|(
name|settingsListener
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|store
operator|.
name|decRef
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|createEngine
specifier|protected
name|InternalEngine
name|createEngine
parameter_list|()
block|{
return|return
operator|new
name|InternalEngine
argument_list|(
name|shardId
argument_list|,
name|logger
argument_list|,
name|codecService
argument_list|,
name|threadPool
argument_list|,
name|indexingService
argument_list|,
name|warmer
argument_list|,
name|store
argument_list|,
name|deletionPolicy
argument_list|,
name|translog
argument_list|,
name|mergePolicyProvider
argument_list|,
name|mergeScheduler
argument_list|,
name|analysisService
argument_list|,
name|similarityService
argument_list|,
name|enableGcDeletes
argument_list|,
name|gcDeletesInMillis
argument_list|,
name|indexingBufferSize
argument_list|,
name|codecName
argument_list|,
name|compoundOnFlush
argument_list|,
name|indexConcurrency
argument_list|,
name|optimizeAutoGenerateId
argument_list|,
name|failEngineOnCorruption
argument_list|,
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|create
specifier|public
name|void
name|create
parameter_list|(
name|Create
name|create
parameter_list|)
throws|throws
name|EngineException
block|{
name|engineSafe
argument_list|()
operator|.
name|create
argument_list|(
name|create
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|index
specifier|public
name|void
name|index
parameter_list|(
name|Index
name|index
parameter_list|)
throws|throws
name|EngineException
block|{
name|engineSafe
argument_list|()
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|delete
specifier|public
name|void
name|delete
parameter_list|(
name|Delete
name|delete
parameter_list|)
throws|throws
name|EngineException
block|{
name|engineSafe
argument_list|()
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|delete
specifier|public
name|void
name|delete
parameter_list|(
name|DeleteByQuery
name|delete
parameter_list|)
throws|throws
name|EngineException
block|{
name|engineSafe
argument_list|()
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|get
specifier|public
name|GetResult
name|get
parameter_list|(
name|Get
name|get
parameter_list|)
throws|throws
name|EngineException
block|{
return|return
name|engineSafe
argument_list|()
operator|.
name|get
argument_list|(
name|get
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|acquireSearcher
specifier|public
name|Searcher
name|acquireSearcher
parameter_list|(
name|String
name|source
parameter_list|)
throws|throws
name|EngineException
block|{
return|return
name|engineSafe
argument_list|()
operator|.
name|acquireSearcher
argument_list|(
name|source
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|segmentsStats
specifier|public
name|SegmentsStats
name|segmentsStats
parameter_list|()
block|{
return|return
name|engineSafe
argument_list|()
operator|.
name|segmentsStats
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|segments
specifier|public
name|List
argument_list|<
name|Segment
argument_list|>
name|segments
parameter_list|(
name|boolean
name|verbose
parameter_list|)
block|{
return|return
name|engineSafe
argument_list|()
operator|.
name|segments
argument_list|(
name|verbose
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|refreshNeeded
specifier|public
name|boolean
name|refreshNeeded
parameter_list|()
block|{
return|return
name|engineSafe
argument_list|()
operator|.
name|refreshNeeded
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|refresh
specifier|public
name|void
name|refresh
parameter_list|(
name|String
name|source
parameter_list|,
name|boolean
name|force
parameter_list|)
throws|throws
name|EngineException
block|{
name|engineSafe
argument_list|()
operator|.
name|refresh
argument_list|(
name|source
argument_list|,
name|force
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|flush
specifier|public
name|void
name|flush
parameter_list|(
name|FlushType
name|type
parameter_list|,
name|boolean
name|force
parameter_list|,
name|boolean
name|waitIfOngoing
parameter_list|)
throws|throws
name|EngineException
throws|,
name|FlushNotAllowedEngineException
block|{
name|engineSafe
argument_list|()
operator|.
name|flush
argument_list|(
name|type
argument_list|,
name|force
argument_list|,
name|waitIfOngoing
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|forceMerge
specifier|public
name|void
name|forceMerge
parameter_list|(
name|boolean
name|flush
parameter_list|,
name|boolean
name|waitForMerge
parameter_list|)
block|{
name|engineSafe
argument_list|()
operator|.
name|forceMerge
argument_list|(
name|flush
argument_list|,
name|waitForMerge
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|forceMerge
specifier|public
name|void
name|forceMerge
parameter_list|(
name|boolean
name|flush
parameter_list|,
name|boolean
name|waitForMerge
parameter_list|,
name|int
name|maxNumSegments
parameter_list|,
name|boolean
name|onlyExpungeDeletes
parameter_list|,
name|boolean
name|upgrade
parameter_list|)
throws|throws
name|EngineException
block|{
name|engineSafe
argument_list|()
operator|.
name|forceMerge
argument_list|(
name|flush
argument_list|,
name|waitForMerge
argument_list|,
name|maxNumSegments
argument_list|,
name|onlyExpungeDeletes
argument_list|,
name|upgrade
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|snapshotIndex
specifier|public
name|SnapshotIndexCommit
name|snapshotIndex
parameter_list|()
throws|throws
name|EngineException
block|{
return|return
name|engineSafe
argument_list|()
operator|.
name|snapshotIndex
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|recover
specifier|public
name|void
name|recover
parameter_list|(
name|RecoveryHandler
name|recoveryHandler
parameter_list|)
throws|throws
name|EngineException
block|{
name|engineSafe
argument_list|()
operator|.
name|recover
argument_list|(
name|recoveryHandler
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|failEngine
specifier|public
name|void
name|failEngine
parameter_list|(
name|String
name|reason
parameter_list|,
name|Throwable
name|failure
parameter_list|)
block|{
name|engineSafe
argument_list|()
operator|.
name|failEngine
argument_list|(
name|reason
argument_list|,
name|failure
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|shardId
specifier|public
name|ShardId
name|shardId
parameter_list|()
block|{
return|return
name|shardId
return|;
block|}
annotation|@
name|Override
DECL|method|indexSettings
specifier|public
name|Settings
name|indexSettings
parameter_list|()
block|{
return|return
name|indexSettings
return|;
block|}
comment|/** return the current indexing buffer size setting * */
DECL|method|indexingBufferSize
specifier|public
name|ByteSizeValue
name|indexingBufferSize
parameter_list|()
block|{
return|return
name|indexingBufferSize
return|;
block|}
comment|// called by the current engine
annotation|@
name|Override
DECL|method|onFailedEngine
specifier|public
name|void
name|onFailedEngine
parameter_list|(
name|ShardId
name|shardId
parameter_list|,
name|String
name|reason
parameter_list|,
annotation|@
name|Nullable
name|Throwable
name|failure
parameter_list|)
block|{
try|try
block|{
for|for
control|(
name|FailedEngineListener
name|listener
range|:
name|failedEngineListeners
control|)
block|{
try|try
block|{
name|listener
operator|.
name|onFailedEngine
argument_list|(
name|shardId
argument_list|,
name|reason
argument_list|,
name|failure
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"exception while notifying engine failure"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|close
argument_list|()
expr_stmt|;
comment|// we need to close ourself - we failed all bets are off
block|}
block|}
DECL|class|ApplySettings
specifier|static
class|class
name|ApplySettings
implements|implements
name|IndexSettingsService
operator|.
name|Listener
block|{
DECL|field|logger
specifier|private
specifier|final
name|ESLogger
name|logger
decl_stmt|;
DECL|field|holder
specifier|private
specifier|final
name|InternalEngineHolder
name|holder
decl_stmt|;
DECL|method|ApplySettings
name|ApplySettings
parameter_list|(
name|ESLogger
name|logger
parameter_list|,
name|InternalEngineHolder
name|holder
parameter_list|)
block|{
name|this
operator|.
name|logger
operator|=
name|logger
expr_stmt|;
name|this
operator|.
name|holder
operator|=
name|holder
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onRefreshSettings
specifier|public
name|void
name|onRefreshSettings
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
name|boolean
name|change
init|=
literal|false
decl_stmt|;
name|long
name|gcDeletesInMillis
init|=
name|settings
operator|.
name|getAsTime
argument_list|(
name|INDEX_GC_DELETES
argument_list|,
name|TimeValue
operator|.
name|timeValueMillis
argument_list|(
name|holder
operator|.
name|gcDeletesInMillis
argument_list|)
argument_list|)
operator|.
name|millis
argument_list|()
decl_stmt|;
if|if
condition|(
name|gcDeletesInMillis
operator|!=
name|holder
operator|.
name|gcDeletesInMillis
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"updating index.gc_deletes from [{}] to [{}]"
argument_list|,
name|TimeValue
operator|.
name|timeValueMillis
argument_list|(
name|holder
operator|.
name|gcDeletesInMillis
argument_list|)
argument_list|,
name|TimeValue
operator|.
name|timeValueMillis
argument_list|(
name|gcDeletesInMillis
argument_list|)
argument_list|)
expr_stmt|;
name|holder
operator|.
name|gcDeletesInMillis
operator|=
name|gcDeletesInMillis
expr_stmt|;
name|change
operator|=
literal|true
expr_stmt|;
block|}
specifier|final
name|boolean
name|compoundOnFlush
init|=
name|settings
operator|.
name|getAsBoolean
argument_list|(
name|INDEX_COMPOUND_ON_FLUSH
argument_list|,
name|holder
operator|.
name|compoundOnFlush
argument_list|)
decl_stmt|;
if|if
condition|(
name|compoundOnFlush
operator|!=
name|holder
operator|.
name|compoundOnFlush
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"updating {} from [{}] to [{}]"
argument_list|,
name|INDEX_COMPOUND_ON_FLUSH
argument_list|,
name|holder
operator|.
name|compoundOnFlush
argument_list|,
name|compoundOnFlush
argument_list|)
expr_stmt|;
name|holder
operator|.
name|compoundOnFlush
operator|=
name|compoundOnFlush
expr_stmt|;
name|change
operator|=
literal|true
expr_stmt|;
block|}
specifier|final
name|boolean
name|failEngineOnCorruption
init|=
name|settings
operator|.
name|getAsBoolean
argument_list|(
name|INDEX_FAIL_ON_CORRUPTION
argument_list|,
name|holder
operator|.
name|failEngineOnCorruption
argument_list|)
decl_stmt|;
if|if
condition|(
name|failEngineOnCorruption
operator|!=
name|holder
operator|.
name|failEngineOnCorruption
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"updating {} from [{}] to [{}]"
argument_list|,
name|INDEX_FAIL_ON_CORRUPTION
argument_list|,
name|holder
operator|.
name|failEngineOnCorruption
argument_list|,
name|failEngineOnCorruption
argument_list|)
expr_stmt|;
name|holder
operator|.
name|failEngineOnCorruption
operator|=
name|failEngineOnCorruption
expr_stmt|;
name|change
operator|=
literal|true
expr_stmt|;
block|}
name|int
name|indexConcurrency
init|=
name|settings
operator|.
name|getAsInt
argument_list|(
name|INDEX_INDEX_CONCURRENCY
argument_list|,
name|holder
operator|.
name|indexConcurrency
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexConcurrency
operator|!=
name|holder
operator|.
name|indexConcurrency
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"updating index.index_concurrency from [{}] to [{}]"
argument_list|,
name|holder
operator|.
name|indexConcurrency
argument_list|,
name|indexConcurrency
argument_list|)
expr_stmt|;
name|holder
operator|.
name|indexConcurrency
operator|=
name|indexConcurrency
expr_stmt|;
comment|// we have to flush in this case, since it only applies on a new index writer
name|change
operator|=
literal|true
expr_stmt|;
block|}
specifier|final
name|String
name|codecName
init|=
name|settings
operator|.
name|get
argument_list|(
name|INDEX_CODEC
argument_list|,
name|holder
operator|.
name|codecName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|codecName
operator|.
name|equals
argument_list|(
name|holder
operator|.
name|codecName
argument_list|)
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"updating index.codec from [{}] to [{}]"
argument_list|,
name|holder
operator|.
name|codecName
argument_list|,
name|codecName
argument_list|)
expr_stmt|;
name|holder
operator|.
name|codecName
operator|=
name|codecName
expr_stmt|;
comment|// we want to flush in this case, so the new codec will be reflected right away...
name|change
operator|=
literal|true
expr_stmt|;
block|}
specifier|final
name|boolean
name|failOnMergeFailure
init|=
name|settings
operator|.
name|getAsBoolean
argument_list|(
name|INDEX_FAIL_ON_MERGE_FAILURE
argument_list|,
name|holder
operator|.
name|failOnMergeFailure
argument_list|)
decl_stmt|;
if|if
condition|(
name|failOnMergeFailure
operator|!=
name|holder
operator|.
name|failOnMergeFailure
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"updating {} from [{}] to [{}]"
argument_list|,
name|INDEX_FAIL_ON_MERGE_FAILURE
argument_list|,
name|holder
operator|.
name|failOnMergeFailure
argument_list|,
name|failOnMergeFailure
argument_list|)
expr_stmt|;
name|holder
operator|.
name|failOnMergeFailure
operator|=
name|failOnMergeFailure
expr_stmt|;
block|}
if|if
condition|(
name|change
condition|)
block|{
name|holder
operator|.
name|updateSettings
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|updateSettings
specifier|synchronized
name|void
name|updateSettings
parameter_list|()
block|{
comment|// we need to make sure that we wait for the engine to be fully initialized
comment|// the start method sets the current engine once it's done but samples the settings
comment|// at construction time.
specifier|final
name|InternalEngine
name|engine
init|=
name|currentEngine
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|engine
operator|!=
literal|null
condition|)
block|{
name|engine
operator|.
name|updateSettings
argument_list|(
name|gcDeletesInMillis
argument_list|,
name|compoundOnFlush
argument_list|,
name|failEngineOnCorruption
argument_list|,
name|indexConcurrency
argument_list|,
name|codecName
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|FailEngineOnMergeFailure
class|class
name|FailEngineOnMergeFailure
implements|implements
name|MergeSchedulerProvider
operator|.
name|FailureListener
block|{
annotation|@
name|Override
DECL|method|onFailedMerge
specifier|public
name|void
name|onFailedMerge
parameter_list|(
name|MergePolicy
operator|.
name|MergeException
name|e
parameter_list|)
block|{
if|if
condition|(
name|Lucene
operator|.
name|isCorruptionException
argument_list|(
name|e
argument_list|)
condition|)
block|{
if|if
condition|(
name|failEngineOnCorruption
condition|)
block|{
name|failEngine
argument_list|(
literal|"corrupt file detected source: [merge]"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"corrupt file detected source: [merge] but [{}] is set to [{}]"
argument_list|,
name|e
argument_list|,
name|INDEX_FAIL_ON_CORRUPTION
argument_list|,
name|failEngineOnCorruption
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|failOnMergeFailure
condition|)
block|{
name|failEngine
argument_list|(
literal|"merge exception"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|MergeScheduleListener
class|class
name|MergeScheduleListener
implements|implements
name|MergeSchedulerProvider
operator|.
name|Listener
block|{
DECL|field|numMergesInFlight
specifier|private
specifier|final
name|AtomicInteger
name|numMergesInFlight
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|isThrottling
specifier|private
specifier|final
name|AtomicBoolean
name|isThrottling
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|beforeMerge
specifier|public
specifier|synchronized
name|void
name|beforeMerge
parameter_list|(
name|OnGoingMerge
name|merge
parameter_list|)
block|{
name|int
name|maxNumMerges
init|=
name|mergeScheduler
operator|.
name|getMaxMerges
argument_list|()
decl_stmt|;
name|InternalEngine
name|currentEngineImpl
init|=
name|currentEngine
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|numMergesInFlight
operator|.
name|incrementAndGet
argument_list|()
operator|>
name|maxNumMerges
operator|&&
name|currentEngineImpl
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|isThrottling
operator|.
name|getAndSet
argument_list|(
literal|true
argument_list|)
operator|==
literal|false
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"now throttling indexing: numMergesInFlight={}, maxNumMerges={}"
argument_list|,
name|numMergesInFlight
argument_list|,
name|maxNumMerges
argument_list|)
expr_stmt|;
name|indexingService
operator|.
name|throttlingActivated
argument_list|()
expr_stmt|;
name|currentEngineImpl
operator|.
name|activateThrottling
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|afterMerge
specifier|public
specifier|synchronized
name|void
name|afterMerge
parameter_list|(
name|OnGoingMerge
name|merge
parameter_list|)
block|{
name|int
name|maxNumMerges
init|=
name|mergeScheduler
operator|.
name|getMaxMerges
argument_list|()
decl_stmt|;
name|InternalEngine
name|currentEngineImpl
init|=
name|currentEngine
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|numMergesInFlight
operator|.
name|decrementAndGet
argument_list|()
operator|<
name|maxNumMerges
operator|&&
name|currentEngineImpl
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|isThrottling
operator|.
name|getAndSet
argument_list|(
literal|false
argument_list|)
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"stop throttling indexing: numMergesInFlight={}, maxNumMerges={}"
argument_list|,
name|numMergesInFlight
argument_list|,
name|maxNumMerges
argument_list|)
expr_stmt|;
name|indexingService
operator|.
name|throttlingDeactivated
argument_list|()
expr_stmt|;
name|currentEngineImpl
operator|.
name|deactivateThrottling
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

