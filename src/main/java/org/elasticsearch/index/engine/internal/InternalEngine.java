begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.engine.internal
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriter
operator|.
name|IndexReaderWarmer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|AlreadyClosedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|LockObtainFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Accountable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Accountables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchIllegalStateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ExceptionsHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|DjbHashFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lease
operator|.
name|Releasable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lease
operator|.
name|Releasables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|ESLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|Loggers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|LoggerInfoStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|Lucene
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|index
operator|.
name|ElasticsearchDirectoryReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|uid
operator|.
name|Versions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|math
operator|.
name|MathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|ByteSizeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|AbstractRunnable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|EsRejectedExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|deletionpolicy
operator|.
name|SnapshotDeletionPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|deletionpolicy
operator|.
name|SnapshotIndexCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|indexing
operator|.
name|ShardIndexingService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|Uid
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|merge
operator|.
name|OnGoingMerge
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|merge
operator|.
name|policy
operator|.
name|ElasticsearchMergePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|merge
operator|.
name|policy
operator|.
name|MergePolicyProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|merge
operator|.
name|scheduler
operator|.
name|MergeSchedulerProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|search
operator|.
name|nested
operator|.
name|IncludeNestedDocsQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|store
operator|.
name|Store
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|translog
operator|.
name|Translog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|IndicesWarmer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Condition
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|InternalEngine
specifier|public
class|class
name|InternalEngine
implements|implements
name|Engine
block|{
DECL|field|logger
specifier|protected
specifier|final
name|ESLogger
name|logger
decl_stmt|;
DECL|field|shardId
specifier|protected
specifier|final
name|ShardId
name|shardId
decl_stmt|;
DECL|field|engineConfig
specifier|private
specifier|final
name|EngineConfig
name|engineConfig
decl_stmt|;
DECL|field|mergeSchedulerFailureListener
specifier|private
specifier|final
name|FailEngineOnMergeFailure
name|mergeSchedulerFailureListener
decl_stmt|;
DECL|field|mergeSchedulerListener
specifier|private
specifier|final
name|MergeSchedulerListener
name|mergeSchedulerListener
decl_stmt|;
DECL|field|listener
specifier|private
specifier|final
name|EngineConfig
operator|.
name|EngineSettingsListener
name|listener
decl_stmt|;
comment|/** When we last pruned expired tombstones from versionMap.deletes: */
DECL|field|lastDeleteVersionPruneTimeMSec
specifier|private
specifier|volatile
name|long
name|lastDeleteVersionPruneTimeMSec
decl_stmt|;
DECL|field|indexingService
specifier|private
specifier|final
name|ShardIndexingService
name|indexingService
decl_stmt|;
annotation|@
name|Nullable
DECL|field|warmer
specifier|private
specifier|final
name|IndicesWarmer
name|warmer
decl_stmt|;
DECL|field|store
specifier|private
specifier|final
name|Store
name|store
decl_stmt|;
DECL|field|deletionPolicy
specifier|private
specifier|final
name|SnapshotDeletionPolicy
name|deletionPolicy
decl_stmt|;
DECL|field|translog
specifier|private
specifier|final
name|Translog
name|translog
decl_stmt|;
DECL|field|mergePolicyProvider
specifier|private
specifier|final
name|MergePolicyProvider
name|mergePolicyProvider
decl_stmt|;
DECL|field|mergeScheduler
specifier|private
specifier|final
name|MergeSchedulerProvider
name|mergeScheduler
decl_stmt|;
DECL|field|rwl
specifier|private
specifier|final
name|ReentrantReadWriteLock
name|rwl
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
decl_stmt|;
DECL|field|readLock
specifier|private
specifier|final
name|InternalLock
name|readLock
init|=
operator|new
name|InternalLock
argument_list|(
name|rwl
operator|.
name|readLock
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|writeLock
specifier|private
specifier|final
name|InternalLock
name|writeLock
init|=
operator|new
name|InternalLock
argument_list|(
name|rwl
operator|.
name|writeLock
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|indexWriter
specifier|private
specifier|volatile
name|IndexWriter
name|indexWriter
decl_stmt|;
DECL|field|searcherFactory
specifier|private
specifier|final
name|SearcherFactory
name|searcherFactory
init|=
operator|new
name|SearchFactory
argument_list|()
decl_stmt|;
DECL|field|searcherManager
specifier|private
specifier|volatile
name|SearcherManager
name|searcherManager
decl_stmt|;
DECL|field|closed
specifier|private
specifier|volatile
name|boolean
name|closed
init|=
literal|false
decl_stmt|;
comment|// flag indicating if a dirty operation has occurred since the last refresh
DECL|field|dirty
specifier|private
specifier|volatile
name|boolean
name|dirty
init|=
literal|false
decl_stmt|;
DECL|field|optimizeMutex
specifier|private
specifier|final
name|AtomicBoolean
name|optimizeMutex
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
comment|// we use flushNeeded here, since if there are no changes, then the commit won't write
comment|// will not really happen, and then the commitUserData and the new translog will not be reflected
DECL|field|flushNeeded
specifier|private
specifier|volatile
name|boolean
name|flushNeeded
init|=
literal|false
decl_stmt|;
DECL|field|flushing
specifier|private
specifier|final
name|AtomicInteger
name|flushing
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
DECL|field|flushLock
specifier|private
specifier|final
name|Lock
name|flushLock
init|=
operator|new
name|ReentrantLock
argument_list|()
decl_stmt|;
DECL|field|onGoingRecoveries
specifier|protected
specifier|final
name|RecoveryCounter
name|onGoingRecoveries
init|=
operator|new
name|RecoveryCounter
argument_list|()
decl_stmt|;
comment|// A uid (in the form of BytesRef) to the version map
comment|// we use the hashed variant since we iterate over it and check removal and additions on existing keys
DECL|field|versionMap
specifier|private
specifier|final
name|LiveVersionMap
name|versionMap
decl_stmt|;
DECL|field|dirtyLocks
specifier|private
specifier|final
name|Object
index|[]
name|dirtyLocks
decl_stmt|;
DECL|field|refreshMutex
specifier|private
specifier|final
name|Object
name|refreshMutex
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
DECL|field|failedEngine
specifier|private
name|Throwable
name|failedEngine
init|=
literal|null
decl_stmt|;
DECL|field|failEngineLock
specifier|private
specifier|final
name|Lock
name|failEngineLock
init|=
operator|new
name|ReentrantLock
argument_list|()
decl_stmt|;
DECL|field|failedEngineListener
specifier|private
specifier|final
name|FailedEngineListener
name|failedEngineListener
decl_stmt|;
DECL|field|translogIdGenerator
specifier|private
specifier|final
name|AtomicLong
name|translogIdGenerator
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
DECL|field|versionMapRefreshPending
specifier|private
specifier|final
name|AtomicBoolean
name|versionMapRefreshPending
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
DECL|field|lastCommittedSegmentInfos
specifier|private
name|SegmentInfos
name|lastCommittedSegmentInfos
decl_stmt|;
DECL|field|throttle
specifier|private
specifier|final
name|IndexThrottle
name|throttle
decl_stmt|;
DECL|method|InternalEngine
specifier|public
name|InternalEngine
parameter_list|(
name|EngineConfig
name|engineConfig
parameter_list|)
throws|throws
name|EngineException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|engineConfig
operator|.
name|getStore
argument_list|()
argument_list|,
literal|"Store must be provided to the engine"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|engineConfig
operator|.
name|getDeletionPolicy
argument_list|()
argument_list|,
literal|"Snapshot deletion policy must be provided to the engine"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|engineConfig
operator|.
name|getTranslog
argument_list|()
argument_list|,
literal|"Translog must be provided to the engine"
argument_list|)
expr_stmt|;
name|this
operator|.
name|shardId
operator|=
name|engineConfig
operator|.
name|getShardId
argument_list|()
expr_stmt|;
name|this
operator|.
name|logger
operator|=
name|Loggers
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|,
name|engineConfig
operator|.
name|getIndexSettings
argument_list|()
argument_list|,
name|shardId
argument_list|)
expr_stmt|;
name|this
operator|.
name|lastDeleteVersionPruneTimeMSec
operator|=
name|engineConfig
operator|.
name|getThreadPool
argument_list|()
operator|.
name|estimatedTimeInMillis
argument_list|()
expr_stmt|;
name|this
operator|.
name|indexingService
operator|=
name|engineConfig
operator|.
name|getIndexingService
argument_list|()
expr_stmt|;
name|this
operator|.
name|warmer
operator|=
name|engineConfig
operator|.
name|getWarmer
argument_list|()
expr_stmt|;
name|this
operator|.
name|store
operator|=
name|engineConfig
operator|.
name|getStore
argument_list|()
expr_stmt|;
name|this
operator|.
name|deletionPolicy
operator|=
name|engineConfig
operator|.
name|getDeletionPolicy
argument_list|()
expr_stmt|;
name|this
operator|.
name|translog
operator|=
name|engineConfig
operator|.
name|getTranslog
argument_list|()
expr_stmt|;
name|this
operator|.
name|mergePolicyProvider
operator|=
name|engineConfig
operator|.
name|getMergePolicyProvider
argument_list|()
expr_stmt|;
name|this
operator|.
name|mergeScheduler
operator|=
name|engineConfig
operator|.
name|getMergeScheduler
argument_list|()
expr_stmt|;
name|this
operator|.
name|versionMap
operator|=
operator|new
name|LiveVersionMap
argument_list|()
expr_stmt|;
name|this
operator|.
name|dirtyLocks
operator|=
operator|new
name|Object
index|[
name|engineConfig
operator|.
name|getIndexConcurrency
argument_list|()
operator|*
literal|50
index|]
expr_stmt|;
comment|// we multiply it to have enough...
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dirtyLocks
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|dirtyLocks
index|[
name|i
index|]
operator|=
operator|new
name|Object
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|mergeSchedulerFailureListener
operator|=
operator|new
name|FailEngineOnMergeFailure
argument_list|()
expr_stmt|;
name|this
operator|.
name|mergeSchedulerListener
operator|=
operator|new
name|MergeSchedulerListener
argument_list|()
expr_stmt|;
name|this
operator|.
name|mergeScheduler
operator|.
name|addListener
argument_list|(
name|mergeSchedulerListener
argument_list|)
expr_stmt|;
name|this
operator|.
name|mergeScheduler
operator|.
name|addFailureListener
argument_list|(
name|mergeSchedulerFailureListener
argument_list|)
expr_stmt|;
name|this
operator|.
name|failedEngineListener
operator|=
name|engineConfig
operator|.
name|getFailedEngineListener
argument_list|()
expr_stmt|;
name|throttle
operator|=
operator|new
name|IndexThrottle
argument_list|()
expr_stmt|;
name|this
operator|.
name|engineConfig
operator|=
name|engineConfig
expr_stmt|;
name|listener
operator|=
operator|new
name|EngineConfig
operator|.
name|EngineSettingsListener
argument_list|(
name|logger
argument_list|,
name|engineConfig
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|onChange
parameter_list|()
block|{
name|updateSettings
argument_list|()
expr_stmt|;
block|}
block|}
expr_stmt|;
name|engineConfig
operator|.
name|getIndexSettingsService
argument_list|()
operator|.
name|addListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
specifier|final
name|IndexWriter
name|writer
init|=
name|start
argument_list|()
decl_stmt|;
assert|assert
name|indexWriter
operator|==
literal|null
operator|:
literal|"IndexWriter already initialized"
assert|;
name|indexWriter
operator|=
name|writer
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|updateIndexingBufferSize
specifier|public
name|void
name|updateIndexingBufferSize
parameter_list|(
name|ByteSizeValue
name|indexingBufferSize
parameter_list|)
block|{
name|ByteSizeValue
name|preValue
init|=
name|engineConfig
operator|.
name|getIndexingBufferSize
argument_list|()
decl_stmt|;
try|try
init|(
name|InternalLock
name|_
init|=
name|readLock
operator|.
name|acquire
argument_list|()
init|)
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
name|engineConfig
operator|.
name|setIndexingBufferSize
argument_list|(
name|indexingBufferSize
argument_list|)
expr_stmt|;
name|indexWriter
operator|.
name|getConfig
argument_list|()
operator|.
name|setRAMBufferSizeMB
argument_list|(
name|indexingBufferSize
operator|.
name|mbFrac
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|preValue
operator|.
name|bytes
argument_list|()
operator|!=
name|indexingBufferSize
operator|.
name|bytes
argument_list|()
condition|)
block|{
comment|// its inactive, make sure we do a full flush in this case, since the memory
comment|// changes only after a "data" change has happened to the writer
if|if
condition|(
name|indexingBufferSize
operator|==
name|EngineConfig
operator|.
name|INACTIVE_SHARD_INDEXING_BUFFER
operator|&&
name|preValue
operator|!=
name|EngineConfig
operator|.
name|INACTIVE_SHARD_INDEXING_BUFFER
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"updating index_buffer_size from [{}] to (inactive) [{}]"
argument_list|,
name|preValue
argument_list|,
name|indexingBufferSize
argument_list|)
expr_stmt|;
try|try
block|{
name|flush
argument_list|(
name|FlushType
operator|.
name|COMMIT
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EngineClosedException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
catch|catch
parameter_list|(
name|FlushNotAllowedEngineException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"failed to flush after setting shard to inactive"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"updating index_buffer_size from [{}] to [{}]"
argument_list|,
name|preValue
argument_list|,
name|indexingBufferSize
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|start
specifier|private
name|IndexWriter
name|start
parameter_list|()
throws|throws
name|EngineException
block|{
name|store
operator|.
name|incRef
argument_list|()
expr_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|IndexWriter
name|indexWriter
init|=
literal|null
decl_stmt|;
name|SearcherManager
name|searcherManager
init|=
literal|null
decl_stmt|;
try|try
block|{
try|try
block|{
name|indexWriter
operator|=
name|createWriter
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|maybeFailEngine
argument_list|(
name|e
argument_list|,
literal|"start"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|EngineCreationFailureException
argument_list|(
name|shardId
argument_list|,
literal|"failed to create engine"
argument_list|,
name|e
argument_list|)
throw|;
block|}
try|try
block|{
assert|assert
name|indexWriter
operator|!=
literal|null
assert|;
comment|// commit on a just opened writer will commit even if there are no changes done to it
comment|// we rely on that for the commit data translog id key
specifier|final
name|long
name|translogId
init|=
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|translog
operator|.
name|findLargestPresentTranslogId
argument_list|()
argument_list|)
operator|+
literal|1
decl_stmt|;
name|boolean
name|mustCommitTranslogId
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|Lucene
operator|.
name|indexExists
argument_list|(
name|store
operator|.
name|directory
argument_list|()
argument_list|)
condition|)
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|commitUserData
init|=
name|Lucene
operator|.
name|readSegmentInfos
argument_list|(
name|store
operator|.
name|directory
argument_list|()
argument_list|)
operator|.
name|getUserData
argument_list|()
decl_stmt|;
name|mustCommitTranslogId
operator|=
operator|!
name|commitUserData
operator|.
name|containsKey
argument_list|(
name|Translog
operator|.
name|TRANSLOG_ID_KEY
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|mustCommitTranslogId
condition|)
block|{
comment|// translog id is not in the metadata - fix this inconsistency some code relies on this and old indices might not have it.
name|indexWriter
operator|.
name|setCommitData
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
name|Translog
operator|.
name|TRANSLOG_ID_KEY
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|translogId
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|indexWriter
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
name|searcherManager
operator|=
name|buildSearchManager
argument_list|(
name|indexWriter
argument_list|)
expr_stmt|;
name|lastCommittedSegmentInfos
operator|=
name|store
operator|.
name|readLastCommittedSegmentsInfo
argument_list|()
expr_stmt|;
name|translog
operator|.
name|newTranslog
argument_list|(
name|translogId
argument_list|)
expr_stmt|;
name|versionMap
operator|.
name|setManager
argument_list|(
name|searcherManager
argument_list|)
expr_stmt|;
name|this
operator|.
name|searcherManager
operator|=
name|searcherManager
expr_stmt|;
name|translogIdGenerator
operator|.
name|set
argument_list|(
name|translogId
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
return|return
name|indexWriter
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|maybeFailEngine
argument_list|(
name|e
argument_list|,
literal|"start"
argument_list|)
expr_stmt|;
try|try
block|{
name|indexWriter
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e1
parameter_list|)
block|{
comment|// iw is closed below
name|e
operator|.
name|addSuppressed
argument_list|(
name|e1
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|EngineCreationFailureException
argument_list|(
name|shardId
argument_list|,
literal|"failed to open reader on writer"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|success
operator|==
literal|false
condition|)
block|{
comment|// release everything we created on a failure
name|store
operator|.
name|decRef
argument_list|()
expr_stmt|;
name|IOUtils
operator|.
name|closeWhileHandlingException
argument_list|(
name|indexWriter
argument_list|,
name|searcherManager
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|updateSettings
specifier|private
name|void
name|updateSettings
parameter_list|()
block|{
if|if
condition|(
name|closed
operator|==
literal|false
condition|)
block|{
specifier|final
name|LiveIndexWriterConfig
name|iwc
init|=
name|indexWriter
operator|.
name|getConfig
argument_list|()
decl_stmt|;
name|iwc
operator|.
name|setUseCompoundFile
argument_list|(
name|engineConfig
operator|.
name|isCompoundOnFlush
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|boolean
name|concurrencyNeedsUpdate
init|=
name|iwc
operator|.
name|getMaxThreadStates
argument_list|()
operator|!=
name|engineConfig
operator|.
name|getIndexConcurrency
argument_list|()
decl_stmt|;
specifier|final
name|boolean
name|codecNeedsUpdate
init|=
name|iwc
operator|.
name|getCodec
argument_list|()
operator|.
name|equals
argument_list|(
name|engineConfig
operator|.
name|getCodec
argument_list|()
argument_list|)
operator|==
literal|false
decl_stmt|;
if|if
condition|(
name|codecNeedsUpdate
operator|||
name|concurrencyNeedsUpdate
condition|)
block|{
name|flush
argument_list|(
name|FlushType
operator|.
name|NEW_WRITER
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|indexingBufferSize
specifier|public
name|ByteSizeValue
name|indexingBufferSize
parameter_list|()
block|{
return|return
name|engineConfig
operator|.
name|getIndexingBufferSize
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|get
specifier|public
name|GetResult
name|get
parameter_list|(
name|Get
name|get
parameter_list|)
throws|throws
name|EngineException
block|{
try|try
init|(
name|InternalLock
name|_
init|=
name|readLock
operator|.
name|acquire
argument_list|()
init|)
block|{
if|if
condition|(
name|get
operator|.
name|realtime
argument_list|()
condition|)
block|{
name|VersionValue
name|versionValue
init|=
name|versionMap
operator|.
name|getUnderLock
argument_list|(
name|get
operator|.
name|uid
argument_list|()
operator|.
name|bytes
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|versionValue
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|versionValue
operator|.
name|delete
argument_list|()
condition|)
block|{
return|return
name|GetResult
operator|.
name|NOT_EXISTS
return|;
block|}
if|if
condition|(
name|get
operator|.
name|versionType
argument_list|()
operator|.
name|isVersionConflictForReads
argument_list|(
name|versionValue
operator|.
name|version
argument_list|()
argument_list|,
name|get
operator|.
name|version
argument_list|()
argument_list|)
condition|)
block|{
name|Uid
name|uid
init|=
name|Uid
operator|.
name|createUid
argument_list|(
name|get
operator|.
name|uid
argument_list|()
operator|.
name|text
argument_list|()
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|VersionConflictEngineException
argument_list|(
name|shardId
argument_list|,
name|uid
operator|.
name|type
argument_list|()
argument_list|,
name|uid
operator|.
name|id
argument_list|()
argument_list|,
name|versionValue
operator|.
name|version
argument_list|()
argument_list|,
name|get
operator|.
name|version
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|get
operator|.
name|loadSource
argument_list|()
condition|)
block|{
return|return
operator|new
name|GetResult
argument_list|(
literal|true
argument_list|,
name|versionValue
operator|.
name|version
argument_list|()
argument_list|,
literal|null
argument_list|)
return|;
block|}
name|Translog
operator|.
name|Operation
name|op
init|=
name|translog
operator|.
name|read
argument_list|(
name|versionValue
operator|.
name|translogLocation
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|op
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|GetResult
argument_list|(
literal|true
argument_list|,
name|versionValue
operator|.
name|version
argument_list|()
argument_list|,
name|op
operator|.
name|getSource
argument_list|()
argument_list|)
return|;
block|}
block|}
block|}
comment|// no version, get the version from the index, we know that we refresh on flush
specifier|final
name|Searcher
name|searcher
init|=
name|acquireSearcher
argument_list|(
literal|"get"
argument_list|)
decl_stmt|;
specifier|final
name|Versions
operator|.
name|DocIdAndVersion
name|docIdAndVersion
decl_stmt|;
try|try
block|{
name|docIdAndVersion
operator|=
name|Versions
operator|.
name|loadDocIdAndVersion
argument_list|(
name|searcher
operator|.
name|reader
argument_list|()
argument_list|,
name|get
operator|.
name|uid
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|Releasables
operator|.
name|closeWhileHandlingException
argument_list|(
name|searcher
argument_list|)
expr_stmt|;
comment|//TODO: A better exception goes here
throw|throw
operator|new
name|EngineException
argument_list|(
name|shardId
argument_list|,
literal|"Couldn't resolve version"
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|docIdAndVersion
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|get
operator|.
name|versionType
argument_list|()
operator|.
name|isVersionConflictForReads
argument_list|(
name|docIdAndVersion
operator|.
name|version
argument_list|,
name|get
operator|.
name|version
argument_list|()
argument_list|)
condition|)
block|{
name|Releasables
operator|.
name|close
argument_list|(
name|searcher
argument_list|)
expr_stmt|;
name|Uid
name|uid
init|=
name|Uid
operator|.
name|createUid
argument_list|(
name|get
operator|.
name|uid
argument_list|()
operator|.
name|text
argument_list|()
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|VersionConflictEngineException
argument_list|(
name|shardId
argument_list|,
name|uid
operator|.
name|type
argument_list|()
argument_list|,
name|uid
operator|.
name|id
argument_list|()
argument_list|,
name|docIdAndVersion
operator|.
name|version
argument_list|,
name|get
operator|.
name|version
argument_list|()
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|docIdAndVersion
operator|!=
literal|null
condition|)
block|{
comment|// don't release the searcher on this path, it is the responsability of the caller to call GetResult.release
return|return
operator|new
name|GetResult
argument_list|(
name|searcher
argument_list|,
name|docIdAndVersion
argument_list|)
return|;
block|}
else|else
block|{
name|Releasables
operator|.
name|close
argument_list|(
name|searcher
argument_list|)
expr_stmt|;
return|return
name|GetResult
operator|.
name|NOT_EXISTS
return|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|create
specifier|public
name|void
name|create
parameter_list|(
name|Create
name|create
parameter_list|)
throws|throws
name|EngineException
block|{
specifier|final
name|IndexWriter
name|writer
decl_stmt|;
try|try
init|(
name|InternalLock
name|_
init|=
name|readLock
operator|.
name|acquire
argument_list|()
init|)
block|{
name|writer
operator|=
name|currentIndexWriter
argument_list|()
expr_stmt|;
try|try
init|(
name|Releasable
name|r
init|=
name|throttle
operator|.
name|acquireThrottle
argument_list|()
init|)
block|{
name|innerCreate
argument_list|(
name|create
argument_list|,
name|writer
argument_list|)
expr_stmt|;
block|}
name|dirty
operator|=
literal|true
expr_stmt|;
name|flushNeeded
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OutOfMemoryError
decl||
name|IllegalStateException
decl||
name|IOException
name|t
parameter_list|)
block|{
name|maybeFailEngine
argument_list|(
name|t
argument_list|,
literal|"create"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|CreateFailedEngineException
argument_list|(
name|shardId
argument_list|,
name|create
argument_list|,
name|t
argument_list|)
throw|;
block|}
name|checkVersionMapRefresh
argument_list|()
expr_stmt|;
block|}
DECL|method|innerCreate
specifier|private
name|void
name|innerCreate
parameter_list|(
name|Create
name|create
parameter_list|,
name|IndexWriter
name|writer
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|engineConfig
operator|.
name|isOptimizeAutoGenerateId
argument_list|()
operator|&&
name|create
operator|.
name|autoGeneratedId
argument_list|()
operator|&&
operator|!
name|create
operator|.
name|canHaveDuplicates
argument_list|()
condition|)
block|{
comment|// We don't need to lock because this ID cannot be concurrently updated:
name|innerCreateNoLock
argument_list|(
name|create
argument_list|,
name|writer
argument_list|,
name|Versions
operator|.
name|NOT_FOUND
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
synchronized|synchronized
init|(
name|dirtyLock
argument_list|(
name|create
operator|.
name|uid
argument_list|()
argument_list|)
init|)
block|{
specifier|final
name|long
name|currentVersion
decl_stmt|;
specifier|final
name|VersionValue
name|versionValue
decl_stmt|;
name|versionValue
operator|=
name|versionMap
operator|.
name|getUnderLock
argument_list|(
name|create
operator|.
name|uid
argument_list|()
operator|.
name|bytes
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|versionValue
operator|==
literal|null
condition|)
block|{
name|currentVersion
operator|=
name|loadCurrentVersionFromIndex
argument_list|(
name|create
operator|.
name|uid
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|engineConfig
operator|.
name|isEnableGcDeletes
argument_list|()
operator|&&
name|versionValue
operator|.
name|delete
argument_list|()
operator|&&
operator|(
name|engineConfig
operator|.
name|getThreadPool
argument_list|()
operator|.
name|estimatedTimeInMillis
argument_list|()
operator|-
name|versionValue
operator|.
name|time
argument_list|()
operator|)
operator|>
name|engineConfig
operator|.
name|getGcDeletesInMillis
argument_list|()
condition|)
block|{
name|currentVersion
operator|=
name|Versions
operator|.
name|NOT_FOUND
expr_stmt|;
comment|// deleted, and GC
block|}
else|else
block|{
name|currentVersion
operator|=
name|versionValue
operator|.
name|version
argument_list|()
expr_stmt|;
block|}
block|}
name|innerCreateNoLock
argument_list|(
name|create
argument_list|,
name|writer
argument_list|,
name|currentVersion
argument_list|,
name|versionValue
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|innerCreateNoLock
specifier|private
name|void
name|innerCreateNoLock
parameter_list|(
name|Create
name|create
parameter_list|,
name|IndexWriter
name|writer
parameter_list|,
name|long
name|currentVersion
parameter_list|,
name|VersionValue
name|versionValue
parameter_list|)
throws|throws
name|IOException
block|{
comment|// same logic as index
name|long
name|updatedVersion
decl_stmt|;
name|long
name|expectedVersion
init|=
name|create
operator|.
name|version
argument_list|()
decl_stmt|;
if|if
condition|(
name|create
operator|.
name|versionType
argument_list|()
operator|.
name|isVersionConflictForWrites
argument_list|(
name|currentVersion
argument_list|,
name|expectedVersion
argument_list|)
condition|)
block|{
if|if
condition|(
name|create
operator|.
name|origin
argument_list|()
operator|==
name|Operation
operator|.
name|Origin
operator|.
name|RECOVERY
condition|)
block|{
return|return;
block|}
else|else
block|{
throw|throw
operator|new
name|VersionConflictEngineException
argument_list|(
name|shardId
argument_list|,
name|create
operator|.
name|type
argument_list|()
argument_list|,
name|create
operator|.
name|id
argument_list|()
argument_list|,
name|currentVersion
argument_list|,
name|expectedVersion
argument_list|)
throw|;
block|}
block|}
name|updatedVersion
operator|=
name|create
operator|.
name|versionType
argument_list|()
operator|.
name|updateVersion
argument_list|(
name|currentVersion
argument_list|,
name|expectedVersion
argument_list|)
expr_stmt|;
comment|// if the doc exists
name|boolean
name|doUpdate
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
name|versionValue
operator|!=
literal|null
operator|&&
name|versionValue
operator|.
name|delete
argument_list|()
operator|==
literal|false
operator|)
operator|||
operator|(
name|versionValue
operator|==
literal|null
operator|&&
name|currentVersion
operator|!=
name|Versions
operator|.
name|NOT_FOUND
operator|)
condition|)
block|{
if|if
condition|(
name|create
operator|.
name|origin
argument_list|()
operator|==
name|Operation
operator|.
name|Origin
operator|.
name|RECOVERY
condition|)
block|{
return|return;
block|}
elseif|else
if|if
condition|(
name|create
operator|.
name|origin
argument_list|()
operator|==
name|Operation
operator|.
name|Origin
operator|.
name|REPLICA
condition|)
block|{
comment|// #7142: the primary already determined it's OK to index this document, and we confirmed above that the version doesn't
comment|// conflict, so we must also update here on the replica to remain consistent:
name|doUpdate
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|create
operator|.
name|origin
argument_list|()
operator|==
name|Operation
operator|.
name|Origin
operator|.
name|PRIMARY
operator|&&
name|create
operator|.
name|autoGeneratedId
argument_list|()
operator|&&
name|create
operator|.
name|canHaveDuplicates
argument_list|()
operator|&&
name|currentVersion
operator|==
literal|1
operator|&&
name|create
operator|.
name|version
argument_list|()
operator|==
name|Versions
operator|.
name|MATCH_ANY
condition|)
block|{
comment|/**                  * If bulk index request fails due to a disconnect, unavailable shard etc. then the request is                  * retried before it actually fails. However, the documents might already be indexed.                  * For autogenerated ids this means that a version conflict will be reported in the bulk request                  * although the document was indexed properly.                  * To avoid this we have to make sure that the index request is treated as an update and set updatedVersion to 1.                  * See also discussion on https://github.com/elasticsearch/elasticsearch/pull/9125                  */
name|doUpdate
operator|=
literal|true
expr_stmt|;
name|updatedVersion
operator|=
literal|1
expr_stmt|;
block|}
else|else
block|{
comment|// On primary, we throw DAEE if the _uid is already in the index with an older version:
assert|assert
name|create
operator|.
name|origin
argument_list|()
operator|==
name|Operation
operator|.
name|Origin
operator|.
name|PRIMARY
assert|;
throw|throw
operator|new
name|DocumentAlreadyExistsException
argument_list|(
name|shardId
argument_list|,
name|create
operator|.
name|type
argument_list|()
argument_list|,
name|create
operator|.
name|id
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|create
operator|.
name|updateVersion
argument_list|(
name|updatedVersion
argument_list|)
expr_stmt|;
if|if
condition|(
name|doUpdate
condition|)
block|{
if|if
condition|(
name|create
operator|.
name|docs
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|writer
operator|.
name|updateDocuments
argument_list|(
name|create
operator|.
name|uid
argument_list|()
argument_list|,
name|create
operator|.
name|docs
argument_list|()
argument_list|,
name|create
operator|.
name|analyzer
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writer
operator|.
name|updateDocument
argument_list|(
name|create
operator|.
name|uid
argument_list|()
argument_list|,
name|create
operator|.
name|docs
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|create
operator|.
name|analyzer
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|create
operator|.
name|docs
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|writer
operator|.
name|addDocuments
argument_list|(
name|create
operator|.
name|docs
argument_list|()
argument_list|,
name|create
operator|.
name|analyzer
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writer
operator|.
name|addDocument
argument_list|(
name|create
operator|.
name|docs
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|create
operator|.
name|analyzer
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|Translog
operator|.
name|Location
name|translogLocation
init|=
name|translog
operator|.
name|add
argument_list|(
operator|new
name|Translog
operator|.
name|Create
argument_list|(
name|create
argument_list|)
argument_list|)
decl_stmt|;
name|versionMap
operator|.
name|putUnderLock
argument_list|(
name|create
operator|.
name|uid
argument_list|()
operator|.
name|bytes
argument_list|()
argument_list|,
operator|new
name|VersionValue
argument_list|(
name|updatedVersion
argument_list|,
name|translogLocation
argument_list|)
argument_list|)
expr_stmt|;
name|indexingService
operator|.
name|postCreateUnderLock
argument_list|(
name|create
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|index
specifier|public
name|void
name|index
parameter_list|(
name|Index
name|index
parameter_list|)
throws|throws
name|EngineException
block|{
specifier|final
name|IndexWriter
name|writer
decl_stmt|;
try|try
init|(
name|InternalLock
name|_
init|=
name|readLock
operator|.
name|acquire
argument_list|()
init|)
block|{
name|writer
operator|=
name|currentIndexWriter
argument_list|()
expr_stmt|;
try|try
init|(
name|Releasable
name|r
init|=
name|throttle
operator|.
name|acquireThrottle
argument_list|()
init|)
block|{
name|innerIndex
argument_list|(
name|index
argument_list|,
name|writer
argument_list|)
expr_stmt|;
block|}
name|dirty
operator|=
literal|true
expr_stmt|;
name|flushNeeded
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OutOfMemoryError
decl||
name|IllegalStateException
decl||
name|IOException
name|t
parameter_list|)
block|{
name|maybeFailEngine
argument_list|(
name|t
argument_list|,
literal|"index"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IndexFailedEngineException
argument_list|(
name|shardId
argument_list|,
name|index
argument_list|,
name|t
argument_list|)
throw|;
block|}
name|checkVersionMapRefresh
argument_list|()
expr_stmt|;
block|}
comment|/**      * Forces a refresh if the versionMap is using too much RAM (currently> 25% of IndexWriter's RAM buffer).      */
DECL|method|checkVersionMapRefresh
specifier|private
name|void
name|checkVersionMapRefresh
parameter_list|()
block|{
comment|// TODO: we force refresh when versionMap is using> 25% of IW's RAM buffer; should we make this separately configurable?
if|if
condition|(
name|versionMap
operator|.
name|ramBytesUsedForRefresh
argument_list|()
operator|>
literal|0.25
operator|*
name|engineConfig
operator|.
name|getIndexingBufferSize
argument_list|()
operator|.
name|bytes
argument_list|()
operator|&&
name|versionMapRefreshPending
operator|.
name|getAndSet
argument_list|(
literal|true
argument_list|)
operator|==
literal|false
condition|)
block|{
try|try
block|{
if|if
condition|(
name|closed
condition|)
block|{
comment|// no point...
return|return;
block|}
comment|// Now refresh to clear versionMap:
name|engineConfig
operator|.
name|getThreadPool
argument_list|()
operator|.
name|executor
argument_list|(
name|ThreadPool
operator|.
name|Names
operator|.
name|REFRESH
argument_list|)
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|refresh
argument_list|(
literal|"version_table_full"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EngineClosedException
name|ex
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EsRejectedExecutionException
name|ex
parameter_list|)
block|{
comment|// that is fine too.. we might be shutting down
block|}
block|}
block|}
DECL|method|innerIndex
specifier|private
name|void
name|innerIndex
parameter_list|(
name|Index
name|index
parameter_list|,
name|IndexWriter
name|writer
parameter_list|)
throws|throws
name|IOException
block|{
synchronized|synchronized
init|(
name|dirtyLock
argument_list|(
name|index
operator|.
name|uid
argument_list|()
argument_list|)
init|)
block|{
specifier|final
name|long
name|currentVersion
decl_stmt|;
name|VersionValue
name|versionValue
init|=
name|versionMap
operator|.
name|getUnderLock
argument_list|(
name|index
operator|.
name|uid
argument_list|()
operator|.
name|bytes
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|versionValue
operator|==
literal|null
condition|)
block|{
name|currentVersion
operator|=
name|loadCurrentVersionFromIndex
argument_list|(
name|index
operator|.
name|uid
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|engineConfig
operator|.
name|isEnableGcDeletes
argument_list|()
operator|&&
name|versionValue
operator|.
name|delete
argument_list|()
operator|&&
operator|(
name|engineConfig
operator|.
name|getThreadPool
argument_list|()
operator|.
name|estimatedTimeInMillis
argument_list|()
operator|-
name|versionValue
operator|.
name|time
argument_list|()
operator|)
operator|>
name|engineConfig
operator|.
name|getGcDeletesInMillis
argument_list|()
condition|)
block|{
name|currentVersion
operator|=
name|Versions
operator|.
name|NOT_FOUND
expr_stmt|;
comment|// deleted, and GC
block|}
else|else
block|{
name|currentVersion
operator|=
name|versionValue
operator|.
name|version
argument_list|()
expr_stmt|;
block|}
block|}
name|long
name|updatedVersion
decl_stmt|;
name|long
name|expectedVersion
init|=
name|index
operator|.
name|version
argument_list|()
decl_stmt|;
if|if
condition|(
name|index
operator|.
name|versionType
argument_list|()
operator|.
name|isVersionConflictForWrites
argument_list|(
name|currentVersion
argument_list|,
name|expectedVersion
argument_list|)
condition|)
block|{
if|if
condition|(
name|index
operator|.
name|origin
argument_list|()
operator|==
name|Operation
operator|.
name|Origin
operator|.
name|RECOVERY
condition|)
block|{
return|return;
block|}
else|else
block|{
throw|throw
operator|new
name|VersionConflictEngineException
argument_list|(
name|shardId
argument_list|,
name|index
operator|.
name|type
argument_list|()
argument_list|,
name|index
operator|.
name|id
argument_list|()
argument_list|,
name|currentVersion
argument_list|,
name|expectedVersion
argument_list|)
throw|;
block|}
block|}
name|updatedVersion
operator|=
name|index
operator|.
name|versionType
argument_list|()
operator|.
name|updateVersion
argument_list|(
name|currentVersion
argument_list|,
name|expectedVersion
argument_list|)
expr_stmt|;
name|index
operator|.
name|updateVersion
argument_list|(
name|updatedVersion
argument_list|)
expr_stmt|;
if|if
condition|(
name|currentVersion
operator|==
name|Versions
operator|.
name|NOT_FOUND
condition|)
block|{
comment|// document does not exists, we can optimize for create
name|index
operator|.
name|created
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|index
operator|.
name|docs
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|writer
operator|.
name|addDocuments
argument_list|(
name|index
operator|.
name|docs
argument_list|()
argument_list|,
name|index
operator|.
name|analyzer
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writer
operator|.
name|addDocument
argument_list|(
name|index
operator|.
name|docs
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|index
operator|.
name|analyzer
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|versionValue
operator|!=
literal|null
condition|)
block|{
name|index
operator|.
name|created
argument_list|(
name|versionValue
operator|.
name|delete
argument_list|()
argument_list|)
expr_stmt|;
comment|// we have a delete which is not GC'ed...
block|}
if|if
condition|(
name|index
operator|.
name|docs
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|writer
operator|.
name|updateDocuments
argument_list|(
name|index
operator|.
name|uid
argument_list|()
argument_list|,
name|index
operator|.
name|docs
argument_list|()
argument_list|,
name|index
operator|.
name|analyzer
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writer
operator|.
name|updateDocument
argument_list|(
name|index
operator|.
name|uid
argument_list|()
argument_list|,
name|index
operator|.
name|docs
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|index
operator|.
name|analyzer
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|Translog
operator|.
name|Location
name|translogLocation
init|=
name|translog
operator|.
name|add
argument_list|(
operator|new
name|Translog
operator|.
name|Index
argument_list|(
name|index
argument_list|)
argument_list|)
decl_stmt|;
name|versionMap
operator|.
name|putUnderLock
argument_list|(
name|index
operator|.
name|uid
argument_list|()
operator|.
name|bytes
argument_list|()
argument_list|,
operator|new
name|VersionValue
argument_list|(
name|updatedVersion
argument_list|,
name|translogLocation
argument_list|)
argument_list|)
expr_stmt|;
name|indexingService
operator|.
name|postIndexUnderLock
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|delete
specifier|public
name|void
name|delete
parameter_list|(
name|Delete
name|delete
parameter_list|)
throws|throws
name|EngineException
block|{
try|try
init|(
name|InternalLock
name|_
init|=
name|readLock
operator|.
name|acquire
argument_list|()
init|)
block|{
specifier|final
name|IndexWriter
name|indexWriter
init|=
name|currentIndexWriter
argument_list|()
decl_stmt|;
name|innerDelete
argument_list|(
name|delete
argument_list|,
name|indexWriter
argument_list|)
expr_stmt|;
name|dirty
operator|=
literal|true
expr_stmt|;
name|flushNeeded
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OutOfMemoryError
decl||
name|IllegalStateException
decl||
name|IOException
name|t
parameter_list|)
block|{
name|maybeFailEngine
argument_list|(
name|t
argument_list|,
literal|"delete"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|DeleteFailedEngineException
argument_list|(
name|shardId
argument_list|,
name|delete
argument_list|,
name|t
argument_list|)
throw|;
block|}
name|maybePruneDeletedTombstones
argument_list|()
expr_stmt|;
block|}
DECL|method|maybePruneDeletedTombstones
specifier|private
name|void
name|maybePruneDeletedTombstones
parameter_list|()
block|{
comment|// It's expensive to prune because we walk the deletes map acquiring dirtyLock for each uid so we only do it
comment|// every 1/4 of gcDeletesInMillis:
if|if
condition|(
name|engineConfig
operator|.
name|isEnableGcDeletes
argument_list|()
operator|&&
name|engineConfig
operator|.
name|getThreadPool
argument_list|()
operator|.
name|estimatedTimeInMillis
argument_list|()
operator|-
name|lastDeleteVersionPruneTimeMSec
operator|>
name|engineConfig
operator|.
name|getGcDeletesInMillis
argument_list|()
operator|*
literal|0.25
condition|)
block|{
name|pruneDeletedTombstones
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|innerDelete
specifier|private
name|void
name|innerDelete
parameter_list|(
name|Delete
name|delete
parameter_list|,
name|IndexWriter
name|writer
parameter_list|)
throws|throws
name|IOException
block|{
synchronized|synchronized
init|(
name|dirtyLock
argument_list|(
name|delete
operator|.
name|uid
argument_list|()
argument_list|)
init|)
block|{
specifier|final
name|long
name|currentVersion
decl_stmt|;
name|VersionValue
name|versionValue
init|=
name|versionMap
operator|.
name|getUnderLock
argument_list|(
name|delete
operator|.
name|uid
argument_list|()
operator|.
name|bytes
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|versionValue
operator|==
literal|null
condition|)
block|{
name|currentVersion
operator|=
name|loadCurrentVersionFromIndex
argument_list|(
name|delete
operator|.
name|uid
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|engineConfig
operator|.
name|isEnableGcDeletes
argument_list|()
operator|&&
name|versionValue
operator|.
name|delete
argument_list|()
operator|&&
operator|(
name|engineConfig
operator|.
name|getThreadPool
argument_list|()
operator|.
name|estimatedTimeInMillis
argument_list|()
operator|-
name|versionValue
operator|.
name|time
argument_list|()
operator|)
operator|>
name|engineConfig
operator|.
name|getGcDeletesInMillis
argument_list|()
condition|)
block|{
name|currentVersion
operator|=
name|Versions
operator|.
name|NOT_FOUND
expr_stmt|;
comment|// deleted, and GC
block|}
else|else
block|{
name|currentVersion
operator|=
name|versionValue
operator|.
name|version
argument_list|()
expr_stmt|;
block|}
block|}
name|long
name|updatedVersion
decl_stmt|;
name|long
name|expectedVersion
init|=
name|delete
operator|.
name|version
argument_list|()
decl_stmt|;
if|if
condition|(
name|delete
operator|.
name|versionType
argument_list|()
operator|.
name|isVersionConflictForWrites
argument_list|(
name|currentVersion
argument_list|,
name|expectedVersion
argument_list|)
condition|)
block|{
if|if
condition|(
name|delete
operator|.
name|origin
argument_list|()
operator|==
name|Operation
operator|.
name|Origin
operator|.
name|RECOVERY
condition|)
block|{
return|return;
block|}
else|else
block|{
throw|throw
operator|new
name|VersionConflictEngineException
argument_list|(
name|shardId
argument_list|,
name|delete
operator|.
name|type
argument_list|()
argument_list|,
name|delete
operator|.
name|id
argument_list|()
argument_list|,
name|currentVersion
argument_list|,
name|expectedVersion
argument_list|)
throw|;
block|}
block|}
name|updatedVersion
operator|=
name|delete
operator|.
name|versionType
argument_list|()
operator|.
name|updateVersion
argument_list|(
name|currentVersion
argument_list|,
name|expectedVersion
argument_list|)
expr_stmt|;
specifier|final
name|boolean
name|found
decl_stmt|;
if|if
condition|(
name|currentVersion
operator|==
name|Versions
operator|.
name|NOT_FOUND
condition|)
block|{
comment|// doc does not exist and no prior deletes
name|found
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|versionValue
operator|!=
literal|null
operator|&&
name|versionValue
operator|.
name|delete
argument_list|()
condition|)
block|{
comment|// a "delete on delete", in this case, we still increment the version, log it, and return that version
name|found
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
comment|// we deleted a currently existing document
name|writer
operator|.
name|deleteDocuments
argument_list|(
name|delete
operator|.
name|uid
argument_list|()
argument_list|)
expr_stmt|;
name|found
operator|=
literal|true
expr_stmt|;
block|}
name|delete
operator|.
name|updateVersion
argument_list|(
name|updatedVersion
argument_list|,
name|found
argument_list|)
expr_stmt|;
name|Translog
operator|.
name|Location
name|translogLocation
init|=
name|translog
operator|.
name|add
argument_list|(
operator|new
name|Translog
operator|.
name|Delete
argument_list|(
name|delete
argument_list|)
argument_list|)
decl_stmt|;
name|versionMap
operator|.
name|putUnderLock
argument_list|(
name|delete
operator|.
name|uid
argument_list|()
operator|.
name|bytes
argument_list|()
argument_list|,
operator|new
name|DeleteVersionValue
argument_list|(
name|updatedVersion
argument_list|,
name|engineConfig
operator|.
name|getThreadPool
argument_list|()
operator|.
name|estimatedTimeInMillis
argument_list|()
argument_list|,
name|translogLocation
argument_list|)
argument_list|)
expr_stmt|;
name|indexingService
operator|.
name|postDeleteUnderLock
argument_list|(
name|delete
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|delete
specifier|public
name|void
name|delete
parameter_list|(
name|DeleteByQuery
name|delete
parameter_list|)
throws|throws
name|EngineException
block|{
try|try
init|(
name|InternalLock
name|_
init|=
name|readLock
operator|.
name|acquire
argument_list|()
init|)
block|{
specifier|final
name|IndexWriter
name|indexWriter
init|=
name|currentIndexWriter
argument_list|()
decl_stmt|;
name|Query
name|query
decl_stmt|;
if|if
condition|(
name|delete
operator|.
name|nested
argument_list|()
operator|&&
name|delete
operator|.
name|aliasFilter
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|query
operator|=
operator|new
name|IncludeNestedDocsQuery
argument_list|(
operator|new
name|FilteredQuery
argument_list|(
name|delete
operator|.
name|query
argument_list|()
argument_list|,
name|delete
operator|.
name|aliasFilter
argument_list|()
argument_list|)
argument_list|,
name|delete
operator|.
name|parentFilter
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|delete
operator|.
name|nested
argument_list|()
condition|)
block|{
name|query
operator|=
operator|new
name|IncludeNestedDocsQuery
argument_list|(
name|delete
operator|.
name|query
argument_list|()
argument_list|,
name|delete
operator|.
name|parentFilter
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|delete
operator|.
name|aliasFilter
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|query
operator|=
operator|new
name|FilteredQuery
argument_list|(
name|delete
operator|.
name|query
argument_list|()
argument_list|,
name|delete
operator|.
name|aliasFilter
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|query
operator|=
name|delete
operator|.
name|query
argument_list|()
expr_stmt|;
block|}
name|indexWriter
operator|.
name|deleteDocuments
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|translog
operator|.
name|add
argument_list|(
operator|new
name|Translog
operator|.
name|DeleteByQuery
argument_list|(
name|delete
argument_list|)
argument_list|)
expr_stmt|;
name|dirty
operator|=
literal|true
expr_stmt|;
name|flushNeeded
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|maybeFailEngine
argument_list|(
name|t
argument_list|,
literal|"delete_by_query"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|DeleteByQueryFailedEngineException
argument_list|(
name|shardId
argument_list|,
name|delete
argument_list|,
name|t
argument_list|)
throw|;
block|}
comment|// TODO: This is heavy, since we refresh, but we must do this because we don't know which documents were in fact deleted (i.e., our
comment|// versionMap isn't updated), so we must force a cutover to a new reader to "see" the deletions:
name|refresh
argument_list|(
literal|"delete_by_query"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|acquireSearcher
specifier|public
specifier|final
name|Searcher
name|acquireSearcher
parameter_list|(
name|String
name|source
parameter_list|)
throws|throws
name|EngineException
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
comment|/* Acquire order here is store -> manager since we need           * to make sure that the store is not closed before           * the searcher is acquired. */
name|store
operator|.
name|incRef
argument_list|()
expr_stmt|;
try|try
block|{
specifier|final
name|SearcherManager
name|manager
init|=
name|this
operator|.
name|searcherManager
decl_stmt|;
comment|// can never be null
assert|assert
name|manager
operator|!=
literal|null
operator|:
literal|"SearcherManager is null"
assert|;
comment|/* This might throw NPE but that's fine we will run ensureOpen()             *  in the catch block and throw the right exception */
specifier|final
name|IndexSearcher
name|searcher
init|=
name|manager
operator|.
name|acquire
argument_list|()
decl_stmt|;
try|try
block|{
specifier|final
name|Searcher
name|retVal
init|=
name|newSearcher
argument_list|(
name|source
argument_list|,
name|searcher
argument_list|,
name|manager
argument_list|)
decl_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
return|return
name|retVal
return|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|manager
operator|.
name|release
argument_list|(
name|searcher
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|EngineClosedException
name|ex
parameter_list|)
block|{
throw|throw
name|ex
throw|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
comment|// throw EngineCloseException here if we are already closed
name|logger
operator|.
name|error
argument_list|(
literal|"failed to acquire searcher, source {}"
argument_list|,
name|ex
argument_list|,
name|source
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|EngineException
argument_list|(
name|shardId
argument_list|,
literal|"failed to acquire searcher, source "
operator|+
name|source
argument_list|,
name|ex
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
comment|// release the ref in the case of an error...
name|store
operator|.
name|decRef
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|newSearcher
specifier|protected
name|Searcher
name|newSearcher
parameter_list|(
name|String
name|source
parameter_list|,
name|IndexSearcher
name|searcher
parameter_list|,
name|SearcherManager
name|manager
parameter_list|)
block|{
return|return
operator|new
name|EngineSearcher
argument_list|(
name|source
argument_list|,
name|searcher
argument_list|,
name|manager
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|refreshNeeded
specifier|public
name|boolean
name|refreshNeeded
parameter_list|()
block|{
if|if
condition|(
name|store
operator|.
name|tryIncRef
argument_list|()
condition|)
block|{
comment|/*               we need to inc the store here since searcherManager.isSearcherCurrent()               acquires a searcher internally and that might keep a file open on the               store. this violates the assumption that all files are closed when               the store is closed so we need to make sure we increment it here              */
try|try
block|{
comment|// we are either dirty due to a document added or due to a
comment|// finished merge - either way we should refresh
return|return
name|dirty
operator|||
operator|!
name|searcherManager
operator|.
name|isSearcherCurrent
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"failed to access searcher manager"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|failEngine
argument_list|(
literal|"failed to access searcher manager"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|EngineException
argument_list|(
name|shardId
argument_list|,
literal|"failed to access searcher manager"
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|store
operator|.
name|decRef
argument_list|()
expr_stmt|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|refresh
specifier|public
name|void
name|refresh
parameter_list|(
name|String
name|source
parameter_list|,
name|boolean
name|force
parameter_list|)
throws|throws
name|EngineException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
comment|// we obtain a read lock here, since we don't want a flush to happen while we are refreshing
comment|// since it flushes the index as well (though, in terms of concurrency, we are allowed to do it)
try|try
init|(
name|InternalLock
name|_
init|=
name|readLock
operator|.
name|acquire
argument_list|()
init|)
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
comment|// maybeRefresh will only allow one refresh to execute, and the rest will "pass through",
comment|// but, we want to make sure not to loose ant refresh calls, if one is taking time
synchronized|synchronized
init|(
name|refreshMutex
init|)
block|{
if|if
condition|(
name|refreshNeeded
argument_list|()
operator|||
name|force
condition|)
block|{
comment|// we set dirty to false, even though the refresh hasn't happened yet
comment|// as the refresh only holds for data indexed before it. Any data indexed during
comment|// the refresh will not be part of it and will set the dirty flag back to true
name|dirty
operator|=
literal|false
expr_stmt|;
name|boolean
name|refreshed
init|=
name|searcherManager
operator|.
name|maybeRefresh
argument_list|()
decl_stmt|;
assert|assert
name|refreshed
operator|:
literal|"failed to refresh even though refreshMutex was acquired"
assert|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|AlreadyClosedException
name|e
parameter_list|)
block|{
comment|// an index writer got replaced on us, ignore
block|}
catch|catch
parameter_list|(
name|EngineClosedException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failEngine
argument_list|(
literal|"refresh failed"
argument_list|,
name|t
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RefreshFailedEngineException
argument_list|(
name|shardId
argument_list|,
name|t
argument_list|)
throw|;
block|}
comment|// TODO: maybe we should just put a scheduled job in threadPool?
comment|// We check for pruning in each delete request, but we also prune here e.g. in case a delete burst comes in and then no more deletes
comment|// for a long time:
name|maybePruneDeletedTombstones
argument_list|()
expr_stmt|;
name|versionMapRefreshPending
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|flush
specifier|public
name|void
name|flush
parameter_list|(
name|FlushType
name|type
parameter_list|,
name|boolean
name|force
parameter_list|,
name|boolean
name|waitIfOngoing
parameter_list|)
throws|throws
name|EngineException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
if|if
condition|(
name|type
operator|==
name|FlushType
operator|.
name|NEW_WRITER
operator|||
name|type
operator|==
name|FlushType
operator|.
name|COMMIT_TRANSLOG
condition|)
block|{
comment|// check outside the lock as well so we can check without blocking on the write lock
if|if
condition|(
name|onGoingRecoveries
operator|.
name|get
argument_list|()
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|FlushNotAllowedEngineException
argument_list|(
name|shardId
argument_list|,
literal|"recovery is in progress, flush ["
operator|+
name|type
operator|+
literal|"] is not allowed"
argument_list|)
throw|;
block|}
block|}
name|int
name|currentFlushing
init|=
name|flushing
operator|.
name|incrementAndGet
argument_list|()
decl_stmt|;
if|if
condition|(
name|currentFlushing
operator|>
literal|1
operator|&&
name|waitIfOngoing
operator|==
literal|false
condition|)
block|{
name|flushing
operator|.
name|decrementAndGet
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|FlushNotAllowedEngineException
argument_list|(
name|shardId
argument_list|,
literal|"already flushing..."
argument_list|)
throw|;
block|}
name|flushLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|type
operator|==
name|FlushType
operator|.
name|NEW_WRITER
condition|)
block|{
try|try
init|(
name|InternalLock
name|_
init|=
name|writeLock
operator|.
name|acquire
argument_list|()
init|)
block|{
if|if
condition|(
name|onGoingRecoveries
operator|.
name|get
argument_list|()
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|FlushNotAllowedEngineException
argument_list|(
name|shardId
argument_list|,
literal|"Recovery is in progress, flush is not allowed"
argument_list|)
throw|;
block|}
comment|// disable refreshing, not dirty
name|dirty
operator|=
literal|false
expr_stmt|;
try|try
block|{
block|{
comment|// commit and close the current writer - we write the current tanslog ID just in case
specifier|final
name|long
name|translogId
init|=
name|translog
operator|.
name|currentId
argument_list|()
decl_stmt|;
name|indexWriter
operator|.
name|setCommitData
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
name|Translog
operator|.
name|TRANSLOG_ID_KEY
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|translogId
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|indexWriter
operator|.
name|commit
argument_list|()
expr_stmt|;
name|indexWriter
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
name|indexWriter
operator|=
name|createWriter
argument_list|()
expr_stmt|;
comment|// commit on a just opened writer will commit even if there are no changes done to it
comment|// we rely on that for the commit data translog id key
if|if
condition|(
name|flushNeeded
operator|||
name|force
condition|)
block|{
name|flushNeeded
operator|=
literal|false
expr_stmt|;
name|long
name|translogId
init|=
name|translogIdGenerator
operator|.
name|incrementAndGet
argument_list|()
decl_stmt|;
name|indexWriter
operator|.
name|setCommitData
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
name|Translog
operator|.
name|TRANSLOG_ID_KEY
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|translogId
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|indexWriter
operator|.
name|commit
argument_list|()
expr_stmt|;
name|translog
operator|.
name|newTranslog
argument_list|(
name|translogId
argument_list|)
expr_stmt|;
block|}
name|SearcherManager
name|current
init|=
name|this
operator|.
name|searcherManager
decl_stmt|;
name|this
operator|.
name|searcherManager
operator|=
name|buildSearchManager
argument_list|(
name|indexWriter
argument_list|)
expr_stmt|;
name|versionMap
operator|.
name|setManager
argument_list|(
name|searcherManager
argument_list|)
expr_stmt|;
try|try
block|{
name|IOUtils
operator|.
name|close
argument_list|(
name|current
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Failed to close current SearcherManager"
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
name|maybePruneDeletedTombstones
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
throw|throw
operator|new
name|FlushFailedEngineException
argument_list|(
name|shardId
argument_list|,
name|t
argument_list|)
throw|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|FlushType
operator|.
name|COMMIT_TRANSLOG
condition|)
block|{
try|try
init|(
name|InternalLock
name|_
init|=
name|readLock
operator|.
name|acquire
argument_list|()
init|)
block|{
specifier|final
name|IndexWriter
name|indexWriter
init|=
name|currentIndexWriter
argument_list|()
decl_stmt|;
if|if
condition|(
name|onGoingRecoveries
operator|.
name|get
argument_list|()
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|FlushNotAllowedEngineException
argument_list|(
name|shardId
argument_list|,
literal|"Recovery is in progress, flush is not allowed"
argument_list|)
throw|;
block|}
if|if
condition|(
name|flushNeeded
operator|||
name|force
condition|)
block|{
name|flushNeeded
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|long
name|translogId
init|=
name|translogIdGenerator
operator|.
name|incrementAndGet
argument_list|()
decl_stmt|;
name|translog
operator|.
name|newTransientTranslog
argument_list|(
name|translogId
argument_list|)
expr_stmt|;
name|indexWriter
operator|.
name|setCommitData
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
name|Translog
operator|.
name|TRANSLOG_ID_KEY
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|translogId
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|indexWriter
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// we need to refresh in order to clear older version values
name|refresh
argument_list|(
literal|"version_table_flush"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// we need to move transient to current only after we refresh
comment|// so items added to current will still be around for realtime get
comment|// when tans overrides it
name|translog
operator|.
name|makeTransientCurrent
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
try|try
block|{
name|translog
operator|.
name|revertTransient
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|e
operator|.
name|addSuppressed
argument_list|(
name|ex
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|FlushFailedEngineException
argument_list|(
name|shardId
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
comment|// We don't have to do this here; we do it defensively to make sure that even if wall clock time is misbehaving
comment|// (e.g., moves backwards) we will at least still sometimes prune deleted tombstones:
if|if
condition|(
name|engineConfig
operator|.
name|isEnableGcDeletes
argument_list|()
condition|)
block|{
name|pruneDeletedTombstones
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|FlushType
operator|.
name|COMMIT
condition|)
block|{
comment|// note, its ok to just commit without cleaning the translog, its perfectly fine to replay a
comment|// translog on an index that was opened on a committed point in time that is "in the future"
comment|// of that translog
try|try
init|(
name|InternalLock
name|_
init|=
name|readLock
operator|.
name|acquire
argument_list|()
init|)
block|{
specifier|final
name|IndexWriter
name|indexWriter
init|=
name|currentIndexWriter
argument_list|()
decl_stmt|;
comment|// we allow to *just* commit if there is an ongoing recovery happening...
comment|// its ok to use this, only a flush will cause a new translogId, and we are locked here from
comment|// other flushes use flushLock
try|try
block|{
name|long
name|translogId
init|=
name|translog
operator|.
name|currentId
argument_list|()
decl_stmt|;
name|indexWriter
operator|.
name|setCommitData
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
name|Translog
operator|.
name|TRANSLOG_ID_KEY
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|translogId
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|indexWriter
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|FlushFailedEngineException
argument_list|(
name|shardId
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|// We don't have to do this here; we do it defensively to make sure that even if wall clock time is misbehaving
comment|// (e.g., moves backwards) we will at least still sometimes prune deleted tombstones:
if|if
condition|(
name|engineConfig
operator|.
name|isEnableGcDeletes
argument_list|()
condition|)
block|{
name|pruneDeletedTombstones
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|ElasticsearchIllegalStateException
argument_list|(
literal|"flush type ["
operator|+
name|type
operator|+
literal|"] not supported"
argument_list|)
throw|;
block|}
comment|// reread the last committed segment infos
try|try
init|(
name|InternalLock
name|_
init|=
name|readLock
operator|.
name|acquire
argument_list|()
init|)
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
name|lastCommittedSegmentInfos
operator|=
name|store
operator|.
name|readLastCommittedSegmentsInfo
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|closed
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"failed to read latest segment infos on flush"
argument_list|,
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|Lucene
operator|.
name|isCorruptionException
argument_list|(
name|e
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|FlushFailedEngineException
argument_list|(
name|shardId
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|FlushFailedEngineException
name|ex
parameter_list|)
block|{
name|maybeFailEngine
argument_list|(
name|ex
argument_list|,
literal|"flush"
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
finally|finally
block|{
name|flushLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|flushing
operator|.
name|decrementAndGet
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|ensureOpen
specifier|private
name|void
name|ensureOpen
parameter_list|()
block|{
if|if
condition|(
name|closed
condition|)
block|{
throw|throw
operator|new
name|EngineClosedException
argument_list|(
name|shardId
argument_list|,
name|failedEngine
argument_list|)
throw|;
block|}
block|}
comment|/**      * Returns the current index writer. This method will never return<code>null</code>      *      * @throws EngineClosedException if the engine is already closed      */
DECL|method|currentIndexWriter
specifier|private
name|IndexWriter
name|currentIndexWriter
parameter_list|()
block|{
specifier|final
name|IndexWriter
name|writer
init|=
name|indexWriter
decl_stmt|;
if|if
condition|(
name|writer
operator|==
literal|null
condition|)
block|{
assert|assert
name|closed
operator|:
literal|"Engine is not closed but writer is null"
assert|;
throw|throw
operator|new
name|EngineClosedException
argument_list|(
name|shardId
argument_list|,
name|failedEngine
argument_list|)
throw|;
block|}
return|return
name|writer
return|;
block|}
DECL|method|pruneDeletedTombstones
specifier|private
name|void
name|pruneDeletedTombstones
parameter_list|()
block|{
name|long
name|timeMSec
init|=
name|engineConfig
operator|.
name|getThreadPool
argument_list|()
operator|.
name|estimatedTimeInMillis
argument_list|()
decl_stmt|;
comment|// TODO: not good that we reach into LiveVersionMap here; can we move this inside VersionMap instead?  problem is the dirtyLock...
comment|// we only need to prune the deletes map; the current/old version maps are cleared on refresh:
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|BytesRef
argument_list|,
name|VersionValue
argument_list|>
name|entry
range|:
name|versionMap
operator|.
name|getAllTombstones
argument_list|()
control|)
block|{
name|BytesRef
name|uid
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|dirtyLock
argument_list|(
name|uid
argument_list|)
init|)
block|{
comment|// can we do it without this lock on each value? maybe batch to a set and get the lock once per set?
comment|// Must re-get it here, vs using entry.getValue(), in case the uid was indexed/deleted since we pulled the iterator:
name|VersionValue
name|versionValue
init|=
name|versionMap
operator|.
name|getTombstoneUnderLock
argument_list|(
name|uid
argument_list|)
decl_stmt|;
if|if
condition|(
name|versionValue
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|timeMSec
operator|-
name|versionValue
operator|.
name|time
argument_list|()
operator|>
name|engineConfig
operator|.
name|getGcDeletesInMillis
argument_list|()
condition|)
block|{
name|versionMap
operator|.
name|removeTombstoneUnderLock
argument_list|(
name|uid
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|lastDeleteVersionPruneTimeMSec
operator|=
name|timeMSec
expr_stmt|;
block|}
comment|// TODO: can we please remove this method?!
DECL|method|waitForMerges
specifier|private
name|void
name|waitForMerges
parameter_list|(
name|boolean
name|flushAfter
parameter_list|)
block|{
try|try
block|{
name|Method
name|method
init|=
name|IndexWriter
operator|.
name|class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"waitForMerges"
argument_list|)
decl_stmt|;
name|method
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|method
operator|.
name|invoke
argument_list|(
name|currentIndexWriter
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ReflectiveOperationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|OptimizeFailedEngineException
argument_list|(
name|shardId
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|flushAfter
condition|)
block|{
name|flush
argument_list|(
name|FlushType
operator|.
name|COMMIT_TRANSLOG
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|forceMerge
specifier|public
name|void
name|forceMerge
parameter_list|(
name|boolean
name|flush
parameter_list|,
name|boolean
name|waitForMerge
parameter_list|)
block|{
name|forceMerge
argument_list|(
name|flush
argument_list|,
name|waitForMerge
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|forceMerge
specifier|public
name|void
name|forceMerge
parameter_list|(
name|boolean
name|flush
parameter_list|,
name|boolean
name|waitForMerge
parameter_list|,
name|int
name|maxNumSegments
parameter_list|,
name|boolean
name|onlyExpungeDeletes
parameter_list|,
name|boolean
name|upgrade
parameter_list|)
throws|throws
name|EngineException
block|{
if|if
condition|(
name|optimizeMutex
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
try|try
init|(
name|InternalLock
name|_
init|=
name|readLock
operator|.
name|acquire
argument_list|()
init|)
block|{
specifier|final
name|IndexWriter
name|writer
init|=
name|currentIndexWriter
argument_list|()
decl_stmt|;
comment|/*                  * The way we implement upgrades is a bit hackish in the sense that we set an instance                  * variable and that this setting will thus apply to the next forced merge that will be run.                  * This is ok because (1) this is the only place we call forceMerge, (2) we have a single                  * thread for optimize, and the 'optimizeMutex' guarding this code, and (3) ConcurrentMergeScheduler                  * syncs calls to findForcedMerges.                  */
name|MergePolicy
name|mp
init|=
name|writer
operator|.
name|getConfig
argument_list|()
operator|.
name|getMergePolicy
argument_list|()
decl_stmt|;
assert|assert
name|mp
operator|instanceof
name|ElasticsearchMergePolicy
operator|:
literal|"MergePolicy is "
operator|+
name|mp
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
assert|;
if|if
condition|(
name|upgrade
condition|)
block|{
operator|(
operator|(
name|ElasticsearchMergePolicy
operator|)
name|mp
operator|)
operator|.
name|setUpgradeInProgress
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|onlyExpungeDeletes
condition|)
block|{
name|writer
operator|.
name|forceMergeDeletes
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|maxNumSegments
operator|<=
literal|0
condition|)
block|{
name|writer
operator|.
name|maybeMerge
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|writer
operator|.
name|forceMerge
argument_list|(
name|maxNumSegments
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|maybeFailEngine
argument_list|(
name|t
argument_list|,
literal|"optimize"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|OptimizeFailedEngineException
argument_list|(
name|shardId
argument_list|,
name|t
argument_list|)
throw|;
block|}
finally|finally
block|{
name|optimizeMutex
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
comment|// wait for the merges outside of the read lock
if|if
condition|(
name|waitForMerge
condition|)
block|{
name|waitForMerges
argument_list|(
name|flush
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|flush
condition|)
block|{
comment|// we only need to monitor merges for async calls if we are going to flush
name|engineConfig
operator|.
name|getThreadPool
argument_list|()
operator|.
name|executor
argument_list|(
name|ThreadPool
operator|.
name|Names
operator|.
name|OPTIMIZE
argument_list|)
operator|.
name|execute
argument_list|(
operator|new
name|AbstractRunnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Exception while waiting for merges asynchronously after optimize"
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doRun
parameter_list|()
throws|throws
name|Exception
block|{
name|waitForMerges
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|snapshotIndex
specifier|public
name|SnapshotIndexCommit
name|snapshotIndex
parameter_list|()
throws|throws
name|EngineException
block|{
comment|// we have to flush outside of the readlock otherwise we might have a problem upgrading
comment|// the to a write lock when we fail the engine in this operation
name|flush
argument_list|(
name|FlushType
operator|.
name|COMMIT
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
try|try
init|(
name|InternalLock
name|_
init|=
name|readLock
operator|.
name|acquire
argument_list|()
init|)
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
return|return
name|deletionPolicy
operator|.
name|snapshot
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SnapshotFailedEngineException
argument_list|(
name|shardId
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|recover
specifier|public
name|void
name|recover
parameter_list|(
name|RecoveryHandler
name|recoveryHandler
parameter_list|)
throws|throws
name|EngineException
block|{
comment|// take a write lock here so it won't happen while a flush is in progress
comment|// this means that next commits will not be allowed once the lock is released
try|try
init|(
name|InternalLock
name|_
init|=
name|writeLock
operator|.
name|acquire
argument_list|()
init|)
block|{
if|if
condition|(
name|closed
condition|)
block|{
throw|throw
operator|new
name|EngineClosedException
argument_list|(
name|shardId
argument_list|)
throw|;
block|}
name|onGoingRecoveries
operator|.
name|startRecovery
argument_list|()
expr_stmt|;
block|}
name|SnapshotIndexCommit
name|phase1Snapshot
decl_stmt|;
try|try
block|{
name|phase1Snapshot
operator|=
name|deletionPolicy
operator|.
name|snapshot
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|maybeFailEngine
argument_list|(
name|e
argument_list|,
literal|"recovery"
argument_list|)
expr_stmt|;
name|Releasables
operator|.
name|closeWhileHandlingException
argument_list|(
name|onGoingRecoveries
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RecoveryEngineException
argument_list|(
name|shardId
argument_list|,
literal|1
argument_list|,
literal|"Snapshot failed"
argument_list|,
name|e
argument_list|)
throw|;
block|}
try|try
block|{
name|recoveryHandler
operator|.
name|phase1
argument_list|(
name|phase1Snapshot
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|maybeFailEngine
argument_list|(
name|e
argument_list|,
literal|"recovery phase 1"
argument_list|)
expr_stmt|;
name|Releasables
operator|.
name|closeWhileHandlingException
argument_list|(
name|onGoingRecoveries
argument_list|,
name|phase1Snapshot
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RecoveryEngineException
argument_list|(
name|shardId
argument_list|,
literal|1
argument_list|,
literal|"Execution failed"
argument_list|,
name|wrapIfClosed
argument_list|(
name|e
argument_list|)
argument_list|)
throw|;
block|}
name|Translog
operator|.
name|Snapshot
name|phase2Snapshot
decl_stmt|;
try|try
block|{
name|phase2Snapshot
operator|=
name|translog
operator|.
name|snapshot
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|maybeFailEngine
argument_list|(
name|e
argument_list|,
literal|"snapshot recovery"
argument_list|)
expr_stmt|;
name|Releasables
operator|.
name|closeWhileHandlingException
argument_list|(
name|onGoingRecoveries
argument_list|,
name|phase1Snapshot
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RecoveryEngineException
argument_list|(
name|shardId
argument_list|,
literal|2
argument_list|,
literal|"Snapshot failed"
argument_list|,
name|wrapIfClosed
argument_list|(
name|e
argument_list|)
argument_list|)
throw|;
block|}
try|try
block|{
name|recoveryHandler
operator|.
name|phase2
argument_list|(
name|phase2Snapshot
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|maybeFailEngine
argument_list|(
name|e
argument_list|,
literal|"recovery phase 2"
argument_list|)
expr_stmt|;
name|Releasables
operator|.
name|closeWhileHandlingException
argument_list|(
name|onGoingRecoveries
argument_list|,
name|phase1Snapshot
argument_list|,
name|phase2Snapshot
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RecoveryEngineException
argument_list|(
name|shardId
argument_list|,
literal|2
argument_list|,
literal|"Execution failed"
argument_list|,
name|wrapIfClosed
argument_list|(
name|e
argument_list|)
argument_list|)
throw|;
block|}
name|writeLock
operator|.
name|acquire
argument_list|()
expr_stmt|;
name|Translog
operator|.
name|Snapshot
name|phase3Snapshot
init|=
literal|null
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|phase3Snapshot
operator|=
name|translog
operator|.
name|snapshot
argument_list|(
name|phase2Snapshot
argument_list|)
expr_stmt|;
name|recoveryHandler
operator|.
name|phase3
argument_list|(
name|phase3Snapshot
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|maybeFailEngine
argument_list|(
name|e
argument_list|,
literal|"recovery phase 3"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RecoveryEngineException
argument_list|(
name|shardId
argument_list|,
literal|3
argument_list|,
literal|"Execution failed"
argument_list|,
name|wrapIfClosed
argument_list|(
name|e
argument_list|)
argument_list|)
throw|;
block|}
finally|finally
block|{
name|Releasables
operator|.
name|close
argument_list|(
name|success
argument_list|,
name|onGoingRecoveries
argument_list|,
name|writeLock
argument_list|,
name|phase1Snapshot
argument_list|,
name|phase2Snapshot
argument_list|,
name|phase3Snapshot
argument_list|)
expr_stmt|;
comment|// hmm why can't we use try-with here?
block|}
block|}
DECL|method|maybeFailEngine
specifier|private
name|boolean
name|maybeFailEngine
parameter_list|(
name|Throwable
name|t
parameter_list|,
name|String
name|source
parameter_list|)
block|{
if|if
condition|(
name|Lucene
operator|.
name|isCorruptionException
argument_list|(
name|t
argument_list|)
condition|)
block|{
if|if
condition|(
name|engineConfig
operator|.
name|isFailEngineOnCorruption
argument_list|()
condition|)
block|{
name|failEngine
argument_list|(
literal|"corrupt file detected source: ["
operator|+
name|source
operator|+
literal|"]"
argument_list|,
name|t
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"corrupt file detected source: [{}] but [{}] is set to [{}]"
argument_list|,
name|t
argument_list|,
name|source
argument_list|,
name|EngineConfig
operator|.
name|INDEX_FAIL_ON_CORRUPTION_SETTING
argument_list|,
name|engineConfig
operator|.
name|isFailEngineOnCorruption
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|ExceptionsHelper
operator|.
name|isOOM
argument_list|(
name|t
argument_list|)
condition|)
block|{
name|failEngine
argument_list|(
literal|"out of memory"
argument_list|,
name|t
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|wrapIfClosed
specifier|private
name|Throwable
name|wrapIfClosed
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|closed
condition|)
block|{
return|return
operator|new
name|EngineClosedException
argument_list|(
name|shardId
argument_list|,
name|t
argument_list|)
return|;
block|}
return|return
name|t
return|;
block|}
DECL|method|guardedRamBytesUsed
specifier|private
name|long
name|guardedRamBytesUsed
parameter_list|(
name|Accountable
name|a
parameter_list|)
block|{
if|if
condition|(
name|a
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
return|return
name|a
operator|.
name|ramBytesUsed
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|segmentsStats
specifier|public
name|SegmentsStats
name|segmentsStats
parameter_list|()
block|{
comment|// Does ensureOpen for us:
specifier|final
name|IndexWriter
name|indexWriter
init|=
name|currentIndexWriter
argument_list|()
decl_stmt|;
assert|assert
name|indexWriter
operator|!=
literal|null
assert|;
try|try
init|(
specifier|final
name|Searcher
name|searcher
init|=
name|acquireSearcher
argument_list|(
literal|"segments_stats"
argument_list|)
init|)
block|{
name|SegmentsStats
name|stats
init|=
operator|new
name|SegmentsStats
argument_list|()
decl_stmt|;
for|for
control|(
name|LeafReaderContext
name|reader
range|:
name|searcher
operator|.
name|reader
argument_list|()
operator|.
name|leaves
argument_list|()
control|)
block|{
specifier|final
name|SegmentReader
name|segmentReader
init|=
name|segmentReader
argument_list|(
name|reader
operator|.
name|reader
argument_list|()
argument_list|)
decl_stmt|;
name|stats
operator|.
name|add
argument_list|(
literal|1
argument_list|,
name|segmentReader
operator|.
name|ramBytesUsed
argument_list|()
argument_list|)
expr_stmt|;
name|stats
operator|.
name|addTermsMemoryInBytes
argument_list|(
name|guardedRamBytesUsed
argument_list|(
name|segmentReader
operator|.
name|fields
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|stats
operator|.
name|addStoredFieldsMemoryInBytes
argument_list|(
name|guardedRamBytesUsed
argument_list|(
name|segmentReader
operator|.
name|getFieldsReader
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|stats
operator|.
name|addTermVectorsMemoryInBytes
argument_list|(
name|guardedRamBytesUsed
argument_list|(
name|segmentReader
operator|.
name|getTermVectorsReader
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|stats
operator|.
name|addNormsMemoryInBytes
argument_list|(
name|guardedRamBytesUsed
argument_list|(
name|segmentReader
operator|.
name|getNormsReader
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|stats
operator|.
name|addDocValuesMemoryInBytes
argument_list|(
name|guardedRamBytesUsed
argument_list|(
name|segmentReader
operator|.
name|getDocValuesReader
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|stats
operator|.
name|addVersionMapMemoryInBytes
argument_list|(
name|versionMap
operator|.
name|ramBytesUsed
argument_list|()
argument_list|)
expr_stmt|;
name|stats
operator|.
name|addIndexWriterMemoryInBytes
argument_list|(
name|indexWriter
operator|.
name|ramBytesUsed
argument_list|()
argument_list|)
expr_stmt|;
name|stats
operator|.
name|addIndexWriterMaxMemoryInBytes
argument_list|(
call|(
name|long
call|)
argument_list|(
name|indexWriter
operator|.
name|getConfig
argument_list|()
operator|.
name|getRAMBufferSizeMB
argument_list|()
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|stats
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|segments
specifier|public
name|List
argument_list|<
name|Segment
argument_list|>
name|segments
parameter_list|(
name|boolean
name|verbose
parameter_list|)
block|{
try|try
init|(
name|InternalLock
name|_
init|=
name|readLock
operator|.
name|acquire
argument_list|()
init|)
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Segment
argument_list|>
name|segments
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// first, go over and compute the search ones...
name|Searcher
name|searcher
init|=
name|acquireSearcher
argument_list|(
literal|"segments"
argument_list|)
decl_stmt|;
try|try
block|{
for|for
control|(
name|LeafReaderContext
name|reader
range|:
name|searcher
operator|.
name|reader
argument_list|()
operator|.
name|leaves
argument_list|()
control|)
block|{
name|SegmentCommitInfo
name|info
init|=
name|segmentReader
argument_list|(
name|reader
operator|.
name|reader
argument_list|()
argument_list|)
operator|.
name|getSegmentInfo
argument_list|()
decl_stmt|;
assert|assert
operator|!
name|segments
operator|.
name|containsKey
argument_list|(
name|info
operator|.
name|info
operator|.
name|name
argument_list|)
assert|;
name|Segment
name|segment
init|=
operator|new
name|Segment
argument_list|(
name|info
operator|.
name|info
operator|.
name|name
argument_list|)
decl_stmt|;
name|segment
operator|.
name|search
operator|=
literal|true
expr_stmt|;
name|segment
operator|.
name|docCount
operator|=
name|reader
operator|.
name|reader
argument_list|()
operator|.
name|numDocs
argument_list|()
expr_stmt|;
name|segment
operator|.
name|delDocCount
operator|=
name|reader
operator|.
name|reader
argument_list|()
operator|.
name|numDeletedDocs
argument_list|()
expr_stmt|;
name|segment
operator|.
name|version
operator|=
name|info
operator|.
name|info
operator|.
name|getVersion
argument_list|()
expr_stmt|;
name|segment
operator|.
name|compound
operator|=
name|info
operator|.
name|info
operator|.
name|getUseCompoundFile
argument_list|()
expr_stmt|;
try|try
block|{
name|segment
operator|.
name|sizeInBytes
operator|=
name|info
operator|.
name|sizeInBytes
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"failed to get size for [{}]"
argument_list|,
name|e
argument_list|,
name|info
operator|.
name|info
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
specifier|final
name|SegmentReader
name|segmentReader
init|=
name|segmentReader
argument_list|(
name|reader
operator|.
name|reader
argument_list|()
argument_list|)
decl_stmt|;
name|segment
operator|.
name|memoryInBytes
operator|=
name|segmentReader
operator|.
name|ramBytesUsed
argument_list|()
expr_stmt|;
if|if
condition|(
name|verbose
condition|)
block|{
name|segment
operator|.
name|ramTree
operator|=
name|Accountables
operator|.
name|namedAccountable
argument_list|(
literal|"root"
argument_list|,
name|segmentReader
argument_list|)
expr_stmt|;
block|}
comment|// TODO: add more fine grained mem stats values to per segment info here
name|segments
operator|.
name|put
argument_list|(
name|info
operator|.
name|info
operator|.
name|name
argument_list|,
name|segment
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|searcher
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// now, correlate or add the committed ones...
if|if
condition|(
name|lastCommittedSegmentInfos
operator|!=
literal|null
condition|)
block|{
name|SegmentInfos
name|infos
init|=
name|lastCommittedSegmentInfos
decl_stmt|;
for|for
control|(
name|SegmentCommitInfo
name|info
range|:
name|infos
control|)
block|{
name|Segment
name|segment
init|=
name|segments
operator|.
name|get
argument_list|(
name|info
operator|.
name|info
operator|.
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|segment
operator|==
literal|null
condition|)
block|{
name|segment
operator|=
operator|new
name|Segment
argument_list|(
name|info
operator|.
name|info
operator|.
name|name
argument_list|)
expr_stmt|;
name|segment
operator|.
name|search
operator|=
literal|false
expr_stmt|;
name|segment
operator|.
name|committed
operator|=
literal|true
expr_stmt|;
name|segment
operator|.
name|docCount
operator|=
name|info
operator|.
name|info
operator|.
name|getDocCount
argument_list|()
expr_stmt|;
name|segment
operator|.
name|delDocCount
operator|=
name|info
operator|.
name|getDelCount
argument_list|()
expr_stmt|;
name|segment
operator|.
name|version
operator|=
name|info
operator|.
name|info
operator|.
name|getVersion
argument_list|()
expr_stmt|;
name|segment
operator|.
name|compound
operator|=
name|info
operator|.
name|info
operator|.
name|getUseCompoundFile
argument_list|()
expr_stmt|;
try|try
block|{
name|segment
operator|.
name|sizeInBytes
operator|=
name|info
operator|.
name|sizeInBytes
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"failed to get size for [{}]"
argument_list|,
name|e
argument_list|,
name|info
operator|.
name|info
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
name|segments
operator|.
name|put
argument_list|(
name|info
operator|.
name|info
operator|.
name|name
argument_list|,
name|segment
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|segment
operator|.
name|committed
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
name|Segment
index|[]
name|segmentsArr
init|=
name|segments
operator|.
name|values
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|Segment
index|[
name|segments
operator|.
name|values
argument_list|()
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|segmentsArr
argument_list|,
operator|new
name|Comparator
argument_list|<
name|Segment
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|Segment
name|o1
parameter_list|,
name|Segment
name|o2
parameter_list|)
block|{
return|return
call|(
name|int
call|)
argument_list|(
name|o1
operator|.
name|getGeneration
argument_list|()
operator|-
name|o2
operator|.
name|getGeneration
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// fill in the merges flag
name|Set
argument_list|<
name|OnGoingMerge
argument_list|>
name|onGoingMerges
init|=
name|mergeScheduler
operator|.
name|onGoingMerges
argument_list|()
decl_stmt|;
for|for
control|(
name|OnGoingMerge
name|onGoingMerge
range|:
name|onGoingMerges
control|)
block|{
for|for
control|(
name|SegmentCommitInfo
name|segmentInfoPerCommit
range|:
name|onGoingMerge
operator|.
name|getMergedSegments
argument_list|()
control|)
block|{
for|for
control|(
name|Segment
name|segment
range|:
name|segmentsArr
control|)
block|{
if|if
condition|(
name|segment
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|segmentInfoPerCommit
operator|.
name|info
operator|.
name|name
argument_list|)
condition|)
block|{
name|segment
operator|.
name|mergeId
operator|=
name|onGoingMerge
operator|.
name|getId
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|segmentsArr
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|ElasticsearchException
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"close now acquire writeLock"
argument_list|)
expr_stmt|;
try|try
init|(
name|InternalLock
name|_
init|=
name|writeLock
operator|.
name|acquire
argument_list|()
init|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"close acquired writeLock"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|closed
condition|)
block|{
try|try
block|{
name|closed
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|versionMap
operator|.
name|clear
argument_list|()
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"close searcherManager"
argument_list|)
expr_stmt|;
try|try
block|{
name|IOUtils
operator|.
name|close
argument_list|(
name|searcherManager
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Failed to close SearcherManager"
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
comment|// no need to commit in this case!, we snapshot before we close the shard, so translog and all sync'ed
if|if
condition|(
name|indexWriter
operator|!=
literal|null
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"rollback indexWriter"
argument_list|)
expr_stmt|;
try|try
block|{
name|indexWriter
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AlreadyClosedException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
name|logger
operator|.
name|debug
argument_list|(
literal|"rollback indexWriter done"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"failed to rollback writer on close"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|store
operator|.
name|decRef
argument_list|()
expr_stmt|;
name|indexWriter
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|mergeScheduler
operator|.
name|removeListener
argument_list|(
name|mergeSchedulerListener
argument_list|)
expr_stmt|;
name|this
operator|.
name|mergeScheduler
operator|.
name|removeFailureListener
argument_list|(
name|mergeSchedulerFailureListener
argument_list|)
expr_stmt|;
name|engineConfig
operator|.
name|getIndexSettingsService
argument_list|()
operator|.
name|removeListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|currentIndexWriterConfig
name|LiveIndexWriterConfig
name|currentIndexWriterConfig
parameter_list|()
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
return|return
name|this
operator|.
name|indexWriter
operator|.
name|getConfig
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|failEngine
specifier|public
name|void
name|failEngine
parameter_list|(
name|String
name|reason
parameter_list|,
name|Throwable
name|failure
parameter_list|)
block|{
assert|assert
name|failure
operator|!=
literal|null
assert|;
if|if
condition|(
name|failEngineLock
operator|.
name|tryLock
argument_list|()
condition|)
block|{
try|try
block|{
comment|// we first mark the store as corrupted before we notify any listeners
comment|// this must happen first otherwise we might try to reallocate so quickly
comment|// on the same node that we don't see the corrupted marker file when
comment|// the shard is initializing
if|if
condition|(
name|Lucene
operator|.
name|isCorruptionException
argument_list|(
name|failure
argument_list|)
condition|)
block|{
try|try
block|{
name|store
operator|.
name|markStoreCorrupted
argument_list|(
name|ExceptionsHelper
operator|.
name|unwrapCorruption
argument_list|(
name|failure
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Couldn't marks store corrupted"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
assert|assert
operator|!
name|readLock
operator|.
name|assertLockIsHeld
argument_list|()
operator|:
literal|"readLock is held by a thread that tries to fail the engine"
assert|;
if|if
condition|(
name|failedEngine
operator|!=
literal|null
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"tried to fail engine but engine is already failed. ignoring. [{}]"
argument_list|,
name|reason
argument_list|,
name|failure
argument_list|)
expr_stmt|;
return|return;
block|}
try|try
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"failed engine [{}]"
argument_list|,
name|failure
argument_list|,
name|reason
argument_list|)
expr_stmt|;
comment|// we must set a failure exception, generate one if not supplied
name|failedEngine
operator|=
name|failure
expr_stmt|;
name|failedEngineListener
operator|.
name|onFailedEngine
argument_list|(
name|shardId
argument_list|,
name|reason
argument_list|,
name|failure
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|indexWriter
operator|!=
literal|null
condition|)
block|{
comment|// we might be not yet be fully constructed - don't call close
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"tried to fail engine but could not acquire lock - engine should be failed by now [{}]"
argument_list|,
name|reason
argument_list|,
name|failure
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|dirtyLock
specifier|private
name|Object
name|dirtyLock
parameter_list|(
name|BytesRef
name|uid
parameter_list|)
block|{
name|int
name|hash
init|=
name|DjbHashFunction
operator|.
name|DJB_HASH
argument_list|(
name|uid
operator|.
name|bytes
argument_list|,
name|uid
operator|.
name|offset
argument_list|,
name|uid
operator|.
name|length
argument_list|)
decl_stmt|;
return|return
name|dirtyLocks
index|[
name|MathUtils
operator|.
name|mod
argument_list|(
name|hash
argument_list|,
name|dirtyLocks
operator|.
name|length
argument_list|)
index|]
return|;
block|}
DECL|method|dirtyLock
specifier|private
name|Object
name|dirtyLock
parameter_list|(
name|Term
name|uid
parameter_list|)
block|{
return|return
name|dirtyLock
argument_list|(
name|uid
operator|.
name|bytes
argument_list|()
argument_list|)
return|;
block|}
DECL|method|loadCurrentVersionFromIndex
specifier|private
name|long
name|loadCurrentVersionFromIndex
parameter_list|(
name|Term
name|uid
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
specifier|final
name|Searcher
name|searcher
init|=
name|acquireSearcher
argument_list|(
literal|"load_version"
argument_list|)
init|)
block|{
return|return
name|Versions
operator|.
name|loadVersion
argument_list|(
name|searcher
operator|.
name|reader
argument_list|()
argument_list|,
name|uid
argument_list|)
return|;
block|}
block|}
comment|/**      * Returns whether a leaf reader comes from a merge (versus flush or addIndexes).      */
DECL|method|isMergedSegment
specifier|private
specifier|static
name|boolean
name|isMergedSegment
parameter_list|(
name|LeafReader
name|reader
parameter_list|)
block|{
comment|// We expect leaves to be segment readers
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|diagnostics
init|=
name|segmentReader
argument_list|(
name|reader
argument_list|)
operator|.
name|getSegmentInfo
argument_list|()
operator|.
name|info
operator|.
name|getDiagnostics
argument_list|()
decl_stmt|;
specifier|final
name|String
name|source
init|=
name|diagnostics
operator|.
name|get
argument_list|(
name|IndexWriter
operator|.
name|SOURCE
argument_list|)
decl_stmt|;
assert|assert
name|Arrays
operator|.
name|asList
argument_list|(
name|IndexWriter
operator|.
name|SOURCE_ADDINDEXES_READERS
argument_list|,
name|IndexWriter
operator|.
name|SOURCE_FLUSH
argument_list|,
name|IndexWriter
operator|.
name|SOURCE_MERGE
argument_list|)
operator|.
name|contains
argument_list|(
name|source
argument_list|)
operator|:
literal|"Unknown source "
operator|+
name|source
assert|;
return|return
name|IndexWriter
operator|.
name|SOURCE_MERGE
operator|.
name|equals
argument_list|(
name|source
argument_list|)
return|;
block|}
DECL|method|createWriter
specifier|private
name|IndexWriter
name|createWriter
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|boolean
name|create
init|=
operator|!
name|Lucene
operator|.
name|indexExists
argument_list|(
name|store
operator|.
name|directory
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|IndexWriterConfig
name|iwc
init|=
operator|new
name|IndexWriterConfig
argument_list|(
name|engineConfig
operator|.
name|getAnalyzer
argument_list|()
argument_list|)
decl_stmt|;
name|iwc
operator|.
name|setCommitOnClose
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// we by default don't commit on close
name|iwc
operator|.
name|setOpenMode
argument_list|(
name|create
condition|?
name|IndexWriterConfig
operator|.
name|OpenMode
operator|.
name|CREATE
else|:
name|IndexWriterConfig
operator|.
name|OpenMode
operator|.
name|APPEND
argument_list|)
expr_stmt|;
name|iwc
operator|.
name|setIndexDeletionPolicy
argument_list|(
name|deletionPolicy
argument_list|)
expr_stmt|;
name|iwc
operator|.
name|setInfoStream
argument_list|(
operator|new
name|LoggerInfoStream
argument_list|(
name|logger
argument_list|)
argument_list|)
expr_stmt|;
name|iwc
operator|.
name|setMergeScheduler
argument_list|(
name|mergeScheduler
operator|.
name|newMergeScheduler
argument_list|()
argument_list|)
expr_stmt|;
name|MergePolicy
name|mergePolicy
init|=
name|mergePolicyProvider
operator|.
name|getMergePolicy
argument_list|()
decl_stmt|;
comment|// Give us the opportunity to upgrade old segments while performing
comment|// background merges
name|mergePolicy
operator|=
operator|new
name|ElasticsearchMergePolicy
argument_list|(
name|mergePolicy
argument_list|)
expr_stmt|;
name|iwc
operator|.
name|setMergePolicy
argument_list|(
name|mergePolicy
argument_list|)
expr_stmt|;
name|iwc
operator|.
name|setSimilarity
argument_list|(
name|engineConfig
operator|.
name|getSimilarity
argument_list|()
argument_list|)
expr_stmt|;
name|iwc
operator|.
name|setRAMBufferSizeMB
argument_list|(
name|engineConfig
operator|.
name|getIndexingBufferSize
argument_list|()
operator|.
name|mbFrac
argument_list|()
argument_list|)
expr_stmt|;
name|iwc
operator|.
name|setMaxThreadStates
argument_list|(
name|engineConfig
operator|.
name|getIndexConcurrency
argument_list|()
argument_list|)
expr_stmt|;
name|iwc
operator|.
name|setCodec
argument_list|(
name|engineConfig
operator|.
name|getCodec
argument_list|()
argument_list|)
expr_stmt|;
comment|/* We set this timeout to a highish value to work around              * the default poll interval in the Lucene lock that is              * 1000ms by default. We might need to poll multiple times              * here but with 1s poll this is only executed twice at most              * in combination with the default writelock timeout*/
name|iwc
operator|.
name|setWriteLockTimeout
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|iwc
operator|.
name|setUseCompoundFile
argument_list|(
name|this
operator|.
name|engineConfig
operator|.
name|isCompoundOnFlush
argument_list|()
argument_list|)
expr_stmt|;
comment|// Warm-up hook for newly-merged segments. Warming up segments here is better since it will be performed at the end
comment|// of the merge operation and won't slow down _refresh
name|iwc
operator|.
name|setMergedSegmentWarmer
argument_list|(
operator|new
name|IndexReaderWarmer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|warm
parameter_list|(
name|LeafReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
assert|assert
name|isMergedSegment
argument_list|(
name|reader
argument_list|)
assert|;
if|if
condition|(
name|warmer
operator|!=
literal|null
condition|)
block|{
specifier|final
name|Engine
operator|.
name|Searcher
name|searcher
init|=
operator|new
name|SimpleSearcher
argument_list|(
literal|"warmer"
argument_list|,
operator|new
name|IndexSearcher
argument_list|(
name|reader
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|IndicesWarmer
operator|.
name|WarmerContext
name|context
init|=
operator|new
name|IndicesWarmer
operator|.
name|WarmerContext
argument_list|(
name|shardId
argument_list|,
name|searcher
argument_list|)
decl_stmt|;
name|warmer
operator|.
name|warmNewReaders
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|// Don't fail a merge if the warm-up failed
if|if
condition|(
operator|!
name|closed
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Warm-up failed"
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|t
operator|instanceof
name|Error
condition|)
block|{
comment|// assertion/out-of-memory error, don't ignore those
throw|throw
operator|(
name|Error
operator|)
name|t
throw|;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
return|return
operator|new
name|IndexWriter
argument_list|(
name|store
operator|.
name|directory
argument_list|()
argument_list|,
name|iwc
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|LockObtainFailedException
name|ex
parameter_list|)
block|{
name|boolean
name|isLocked
init|=
name|IndexWriter
operator|.
name|isLocked
argument_list|(
name|store
operator|.
name|directory
argument_list|()
argument_list|)
decl_stmt|;
name|logger
operator|.
name|warn
argument_list|(
literal|"Could not lock IndexWriter isLocked [{}]"
argument_list|,
name|ex
argument_list|,
name|isLocked
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
block|}
DECL|method|buildSearchManager
specifier|private
name|SearcherManager
name|buildSearchManager
parameter_list|(
name|IndexWriter
name|indexWriter
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|DirectoryReader
name|directoryReader
init|=
name|ElasticsearchDirectoryReader
operator|.
name|wrap
argument_list|(
name|DirectoryReader
operator|.
name|open
argument_list|(
name|indexWriter
argument_list|,
literal|true
argument_list|)
argument_list|,
name|shardId
argument_list|)
decl_stmt|;
return|return
operator|new
name|SearcherManager
argument_list|(
name|directoryReader
argument_list|,
name|searcherFactory
argument_list|)
return|;
block|}
DECL|class|EngineSearcher
class|class
name|EngineSearcher
implements|implements
name|Searcher
block|{
DECL|field|source
specifier|private
specifier|final
name|String
name|source
decl_stmt|;
DECL|field|searcher
specifier|private
specifier|final
name|IndexSearcher
name|searcher
decl_stmt|;
DECL|field|manager
specifier|private
specifier|final
name|SearcherManager
name|manager
decl_stmt|;
DECL|field|released
specifier|private
specifier|final
name|AtomicBoolean
name|released
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
DECL|method|EngineSearcher
specifier|private
name|EngineSearcher
parameter_list|(
name|String
name|source
parameter_list|,
name|IndexSearcher
name|searcher
parameter_list|,
name|SearcherManager
name|manager
parameter_list|)
block|{
name|this
operator|.
name|source
operator|=
name|source
expr_stmt|;
name|this
operator|.
name|searcher
operator|=
name|searcher
expr_stmt|;
name|this
operator|.
name|manager
operator|=
name|manager
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|source
specifier|public
name|String
name|source
parameter_list|()
block|{
return|return
name|this
operator|.
name|source
return|;
block|}
annotation|@
name|Override
DECL|method|reader
specifier|public
name|IndexReader
name|reader
parameter_list|()
block|{
return|return
name|searcher
operator|.
name|getIndexReader
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|searcher
specifier|public
name|IndexSearcher
name|searcher
parameter_list|()
block|{
return|return
name|searcher
return|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|ElasticsearchException
block|{
if|if
condition|(
operator|!
name|released
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
comment|/* In general, searchers should never be released twice or this would break reference counting. There is one rare case                  * when it might happen though: when the request and the Reaper thread would both try to release it in a very short amount                  * of time, this is why we only log a warning instead of throwing an exception.                  */
name|logger
operator|.
name|warn
argument_list|(
literal|"Searcher was released twice"
argument_list|,
operator|new
name|ElasticsearchIllegalStateException
argument_list|(
literal|"Double release"
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
try|try
block|{
name|manager
operator|.
name|release
argument_list|(
name|searcher
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ElasticsearchIllegalStateException
argument_list|(
literal|"Cannot close"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|AlreadyClosedException
name|e
parameter_list|)
block|{
comment|/* this one can happen if we already closed the                  * underlying store / directory and we call into the                  * IndexWriter to free up pending files. */
block|}
finally|finally
block|{
name|store
operator|.
name|decRef
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|class|SearchFactory
class|class
name|SearchFactory
extends|extends
name|SearcherFactory
block|{
annotation|@
name|Override
DECL|method|newSearcher
specifier|public
name|IndexSearcher
name|newSearcher
parameter_list|(
name|IndexReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
name|IndexSearcher
name|searcher
init|=
operator|new
name|IndexSearcher
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|searcher
operator|.
name|setSimilarity
argument_list|(
name|engineConfig
operator|.
name|getSimilarity
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|warmer
operator|!=
literal|null
condition|)
block|{
comment|// we need to pass a custom searcher that does not release anything on Engine.Search Release,
comment|// we will release explicitly
name|IndexSearcher
name|newSearcher
init|=
literal|null
decl_stmt|;
name|boolean
name|closeNewSearcher
init|=
literal|false
decl_stmt|;
try|try
block|{
if|if
condition|(
name|indexWriter
operator|==
literal|null
condition|)
block|{
comment|// we are starting up - no writer active so we can't acquire a searcher.
name|newSearcher
operator|=
name|searcher
expr_stmt|;
block|}
else|else
block|{
try|try
init|(
specifier|final
name|Searcher
name|currentSearcher
init|=
name|acquireSearcher
argument_list|(
literal|"search_factory"
argument_list|)
init|)
block|{
comment|// figure out the newSearcher, with only the new readers that are relevant for us
name|List
argument_list|<
name|IndexReader
argument_list|>
name|readers
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|LeafReaderContext
name|newReaderContext
range|:
name|searcher
operator|.
name|getIndexReader
argument_list|()
operator|.
name|leaves
argument_list|()
control|)
block|{
if|if
condition|(
name|isMergedSegment
argument_list|(
name|newReaderContext
operator|.
name|reader
argument_list|()
argument_list|)
condition|)
block|{
comment|// merged segments are already handled by IndexWriterConfig.setMergedSegmentWarmer
continue|continue;
block|}
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|LeafReaderContext
name|currentReaderContext
range|:
name|currentSearcher
operator|.
name|reader
argument_list|()
operator|.
name|leaves
argument_list|()
control|)
block|{
if|if
condition|(
name|currentReaderContext
operator|.
name|reader
argument_list|()
operator|.
name|getCoreCacheKey
argument_list|()
operator|.
name|equals
argument_list|(
name|newReaderContext
operator|.
name|reader
argument_list|()
operator|.
name|getCoreCacheKey
argument_list|()
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
name|readers
operator|.
name|add
argument_list|(
name|newReaderContext
operator|.
name|reader
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|readers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// we don't want to close the inner readers, just increase ref on them
name|newSearcher
operator|=
operator|new
name|IndexSearcher
argument_list|(
operator|new
name|MultiReader
argument_list|(
name|readers
operator|.
name|toArray
argument_list|(
operator|new
name|IndexReader
index|[
name|readers
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|closeNewSearcher
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|newSearcher
operator|!=
literal|null
condition|)
block|{
name|IndicesWarmer
operator|.
name|WarmerContext
name|context
init|=
operator|new
name|IndicesWarmer
operator|.
name|WarmerContext
argument_list|(
name|shardId
argument_list|,
operator|new
name|SimpleSearcher
argument_list|(
literal|"warmer"
argument_list|,
name|newSearcher
argument_list|)
argument_list|)
decl_stmt|;
name|warmer
operator|.
name|warmNewReaders
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
name|warmer
operator|.
name|warmTopReader
argument_list|(
operator|new
name|IndicesWarmer
operator|.
name|WarmerContext
argument_list|(
name|shardId
argument_list|,
operator|new
name|SimpleSearcher
argument_list|(
literal|"warmer"
argument_list|,
name|searcher
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|closed
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"failed to prepare/warm"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
comment|// no need to release the fullSearcher, nothing really is done...
if|if
condition|(
name|newSearcher
operator|!=
literal|null
operator|&&
name|closeNewSearcher
condition|)
block|{
name|IOUtils
operator|.
name|closeWhileHandlingException
argument_list|(
name|newSearcher
operator|.
name|getIndexReader
argument_list|()
argument_list|)
expr_stmt|;
comment|// ignore
block|}
block|}
block|}
return|return
name|searcher
return|;
block|}
block|}
DECL|class|RecoveryCounter
specifier|protected
specifier|final
class|class
name|RecoveryCounter
implements|implements
name|Releasable
block|{
DECL|field|onGoingRecoveries
specifier|private
specifier|final
name|AtomicInteger
name|onGoingRecoveries
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
DECL|method|startRecovery
name|void
name|startRecovery
parameter_list|()
block|{
name|store
operator|.
name|incRef
argument_list|()
expr_stmt|;
name|onGoingRecoveries
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
DECL|method|get
specifier|public
name|int
name|get
parameter_list|()
block|{
return|return
name|onGoingRecoveries
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|endRecovery
name|void
name|endRecovery
parameter_list|()
throws|throws
name|ElasticsearchException
block|{
name|store
operator|.
name|decRef
argument_list|()
expr_stmt|;
name|onGoingRecoveries
operator|.
name|decrementAndGet
argument_list|()
expr_stmt|;
assert|assert
name|onGoingRecoveries
operator|.
name|get
argument_list|()
operator|>=
literal|0
operator|:
literal|"ongoingRecoveries must be>= 0 but was: "
operator|+
name|onGoingRecoveries
operator|.
name|get
argument_list|()
assert|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|ElasticsearchException
block|{
name|endRecovery
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|InternalLock
specifier|private
specifier|static
specifier|final
class|class
name|InternalLock
implements|implements
name|Releasable
block|{
DECL|field|lockIsHeld
specifier|private
specifier|final
name|ThreadLocal
argument_list|<
name|AtomicInteger
argument_list|>
name|lockIsHeld
decl_stmt|;
DECL|field|lock
specifier|private
specifier|final
name|Lock
name|lock
decl_stmt|;
DECL|method|InternalLock
name|InternalLock
parameter_list|(
name|Lock
name|lock
parameter_list|)
block|{
name|ThreadLocal
argument_list|<
name|AtomicInteger
argument_list|>
name|tl
init|=
literal|null
decl_stmt|;
assert|assert
operator|(
name|tl
operator|=
operator|new
name|ThreadLocal
argument_list|<>
argument_list|()
operator|)
operator|!=
literal|null
assert|;
name|lockIsHeld
operator|=
name|tl
expr_stmt|;
name|this
operator|.
name|lock
operator|=
name|lock
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
assert|assert
name|onAssertRelease
argument_list|()
assert|;
block|}
DECL|method|acquire
name|InternalLock
name|acquire
parameter_list|()
throws|throws
name|EngineException
block|{
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
assert|assert
name|onAssertLock
argument_list|()
assert|;
return|return
name|this
return|;
block|}
DECL|method|onAssertRelease
specifier|protected
name|boolean
name|onAssertRelease
parameter_list|()
block|{
name|AtomicInteger
name|count
init|=
name|lockIsHeld
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|count
operator|.
name|decrementAndGet
argument_list|()
operator|==
literal|0
condition|)
block|{
name|lockIsHeld
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|onAssertLock
specifier|protected
name|boolean
name|onAssertLock
parameter_list|()
block|{
name|AtomicInteger
name|count
init|=
name|lockIsHeld
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|count
operator|==
literal|null
condition|)
block|{
name|count
operator|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|lockIsHeld
operator|.
name|set
argument_list|(
name|count
argument_list|)
expr_stmt|;
block|}
name|count
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|method|assertLockIsHeld
name|boolean
name|assertLockIsHeld
parameter_list|()
block|{
name|AtomicInteger
name|count
init|=
name|lockIsHeld
operator|.
name|get
argument_list|()
decl_stmt|;
return|return
name|count
operator|!=
literal|null
operator|&&
name|count
operator|.
name|get
argument_list|()
operator|>
literal|0
return|;
block|}
block|}
DECL|method|activateThrottling
specifier|public
name|void
name|activateThrottling
parameter_list|()
block|{
name|throttle
operator|.
name|activate
argument_list|()
expr_stmt|;
block|}
DECL|method|deactivateThrottling
specifier|public
name|void
name|deactivateThrottling
parameter_list|()
block|{
name|throttle
operator|.
name|deactivate
argument_list|()
expr_stmt|;
block|}
DECL|class|IndexThrottle
specifier|static
specifier|final
class|class
name|IndexThrottle
block|{
DECL|field|NOOP_LOCK
specifier|private
specifier|static
specifier|final
name|InternalLock
name|NOOP_LOCK
init|=
operator|new
name|InternalLock
argument_list|(
operator|new
name|NoOpLock
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|lockReference
specifier|private
specifier|final
name|InternalLock
name|lockReference
init|=
operator|new
name|InternalLock
argument_list|(
operator|new
name|ReentrantLock
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|lock
specifier|private
specifier|volatile
name|InternalLock
name|lock
init|=
name|NOOP_LOCK
decl_stmt|;
DECL|method|acquireThrottle
specifier|public
name|Releasable
name|acquireThrottle
parameter_list|()
block|{
return|return
name|lock
operator|.
name|acquire
argument_list|()
return|;
block|}
DECL|method|activate
specifier|public
name|void
name|activate
parameter_list|()
block|{
assert|assert
name|lock
operator|==
name|NOOP_LOCK
operator|:
literal|"throttling activated while already active"
assert|;
name|lock
operator|=
name|lockReference
expr_stmt|;
block|}
DECL|method|deactivate
specifier|public
name|void
name|deactivate
parameter_list|()
block|{
assert|assert
name|lock
operator|!=
name|NOOP_LOCK
operator|:
literal|"throttling deactivated but not active"
assert|;
name|lock
operator|=
name|NOOP_LOCK
expr_stmt|;
block|}
block|}
DECL|class|NoOpLock
specifier|private
specifier|static
specifier|final
class|class
name|NoOpLock
implements|implements
name|Lock
block|{
annotation|@
name|Override
DECL|method|lock
specifier|public
name|void
name|lock
parameter_list|()
block|{         }
annotation|@
name|Override
DECL|method|lockInterruptibly
specifier|public
name|void
name|lockInterruptibly
parameter_list|()
throws|throws
name|InterruptedException
block|{         }
annotation|@
name|Override
DECL|method|tryLock
specifier|public
name|boolean
name|tryLock
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|tryLock
specifier|public
name|boolean
name|tryLock
parameter_list|(
name|long
name|time
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
throws|throws
name|InterruptedException
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|unlock
specifier|public
name|void
name|unlock
parameter_list|()
block|{         }
annotation|@
name|Override
DECL|method|newCondition
specifier|public
name|Condition
name|newCondition
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"NoOpLock can't provide a condition"
argument_list|)
throw|;
block|}
block|}
comment|/**      * Tries to extract a segment reader from the given index reader.      * If no SegmentReader can be extracted an {@link org.elasticsearch.ElasticsearchIllegalStateException} is thrown.      */
DECL|method|segmentReader
specifier|private
specifier|static
name|SegmentReader
name|segmentReader
parameter_list|(
name|LeafReader
name|reader
parameter_list|)
block|{
if|if
condition|(
name|reader
operator|instanceof
name|SegmentReader
condition|)
block|{
return|return
operator|(
name|SegmentReader
operator|)
name|reader
return|;
block|}
elseif|else
if|if
condition|(
name|reader
operator|instanceof
name|FilterLeafReader
condition|)
block|{
specifier|final
name|FilterLeafReader
name|fReader
init|=
operator|(
name|FilterLeafReader
operator|)
name|reader
decl_stmt|;
return|return
name|segmentReader
argument_list|(
name|FilterLeafReader
operator|.
name|unwrap
argument_list|(
name|fReader
argument_list|)
argument_list|)
return|;
block|}
comment|// hard fail - we can't get a SegmentReader
throw|throw
operator|new
name|ElasticsearchIllegalStateException
argument_list|(
literal|"Can not extract segment reader from given index reader ["
operator|+
name|reader
operator|+
literal|"]"
argument_list|)
throw|;
block|}
DECL|method|getGcDeletesInMillis
name|long
name|getGcDeletesInMillis
parameter_list|()
block|{
return|return
name|engineConfig
operator|.
name|getGcDeletesInMillis
argument_list|()
return|;
block|}
DECL|method|getCurrentIndexWriterConfig
name|LiveIndexWriterConfig
name|getCurrentIndexWriterConfig
parameter_list|()
block|{
return|return
name|currentIndexWriter
argument_list|()
operator|.
name|getConfig
argument_list|()
return|;
block|}
DECL|class|FailEngineOnMergeFailure
class|class
name|FailEngineOnMergeFailure
implements|implements
name|MergeSchedulerProvider
operator|.
name|FailureListener
block|{
annotation|@
name|Override
DECL|method|onFailedMerge
specifier|public
name|void
name|onFailedMerge
parameter_list|(
name|MergePolicy
operator|.
name|MergeException
name|e
parameter_list|)
block|{
if|if
condition|(
name|Lucene
operator|.
name|isCorruptionException
argument_list|(
name|e
argument_list|)
condition|)
block|{
if|if
condition|(
name|engineConfig
operator|.
name|isFailEngineOnCorruption
argument_list|()
condition|)
block|{
name|failEngine
argument_list|(
literal|"corrupt file detected source: [merge]"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"corrupt file detected source: [merge] but [{}] is set to [{}]"
argument_list|,
name|e
argument_list|,
name|EngineConfig
operator|.
name|INDEX_FAIL_ON_CORRUPTION_SETTING
argument_list|,
name|engineConfig
operator|.
name|isFailEngineOnCorruption
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|engineConfig
operator|.
name|isFailOnMergeFailure
argument_list|()
condition|)
block|{
name|failEngine
argument_list|(
literal|"merge exception"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|MergeSchedulerListener
class|class
name|MergeSchedulerListener
implements|implements
name|MergeSchedulerProvider
operator|.
name|Listener
block|{
DECL|field|numMergesInFlight
specifier|private
specifier|final
name|AtomicInteger
name|numMergesInFlight
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|isThrottling
specifier|private
specifier|final
name|AtomicBoolean
name|isThrottling
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|beforeMerge
specifier|public
specifier|synchronized
name|void
name|beforeMerge
parameter_list|(
name|OnGoingMerge
name|merge
parameter_list|)
block|{
name|int
name|maxNumMerges
init|=
name|mergeScheduler
operator|.
name|getMaxMerges
argument_list|()
decl_stmt|;
if|if
condition|(
name|numMergesInFlight
operator|.
name|incrementAndGet
argument_list|()
operator|>
name|maxNumMerges
condition|)
block|{
if|if
condition|(
name|isThrottling
operator|.
name|getAndSet
argument_list|(
literal|true
argument_list|)
operator|==
literal|false
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"now throttling indexing: numMergesInFlight={}, maxNumMerges={}"
argument_list|,
name|numMergesInFlight
argument_list|,
name|maxNumMerges
argument_list|)
expr_stmt|;
name|indexingService
operator|.
name|throttlingActivated
argument_list|()
expr_stmt|;
name|activateThrottling
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|afterMerge
specifier|public
specifier|synchronized
name|void
name|afterMerge
parameter_list|(
name|OnGoingMerge
name|merge
parameter_list|)
block|{
name|int
name|maxNumMerges
init|=
name|mergeScheduler
operator|.
name|getMaxMerges
argument_list|()
decl_stmt|;
if|if
condition|(
name|numMergesInFlight
operator|.
name|decrementAndGet
argument_list|()
operator|<
name|maxNumMerges
condition|)
block|{
if|if
condition|(
name|isThrottling
operator|.
name|getAndSet
argument_list|(
literal|false
argument_list|)
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"stop throttling indexing: numMergesInFlight={}, maxNumMerges={}"
argument_list|,
name|numMergesInFlight
argument_list|,
name|maxNumMerges
argument_list|)
expr_stmt|;
name|indexingService
operator|.
name|throttlingDeactivated
argument_list|()
expr_stmt|;
name|deactivateThrottling
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|config
name|EngineConfig
name|config
parameter_list|()
block|{
return|return
name|engineConfig
return|;
block|}
block|}
end_class

end_unit

