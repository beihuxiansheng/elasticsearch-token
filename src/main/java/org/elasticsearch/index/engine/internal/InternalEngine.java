begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.engine.internal
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriter
operator|.
name|IndexReaderWarmer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|SearcherFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|SearcherManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|AlreadyClosedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|LockObtainFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchIllegalStateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|operation
operator|.
name|hash
operator|.
name|djb
operator|.
name|DjbHashFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|MapBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|HashedBytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|Lucene
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|SegmentReaderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|search
operator|.
name|XFilteredQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|uid
operator|.
name|Versions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|ByteSizeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|ByteSizeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentCollections
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|EsExecutors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|VersionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|AnalysisService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|codec
operator|.
name|CodecService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|deletionpolicy
operator|.
name|SnapshotDeletionPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|deletionpolicy
operator|.
name|SnapshotIndexCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|indexing
operator|.
name|ShardIndexingService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|Uid
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|merge
operator|.
name|OnGoingMerge
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|merge
operator|.
name|policy
operator|.
name|IndexUpgraderMergePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|merge
operator|.
name|policy
operator|.
name|MergePolicyProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|merge
operator|.
name|scheduler
operator|.
name|MergeSchedulerProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|search
operator|.
name|nested
operator|.
name|IncludeNestedDocsQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|settings
operator|.
name|IndexSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|settings
operator|.
name|IndexSettingsService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|AbstractIndexShardComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|similarity
operator|.
name|SimilarityService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|store
operator|.
name|Store
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|translog
operator|.
name|Translog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|translog
operator|.
name|TranslogStreams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|warmer
operator|.
name|IndicesWarmer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|warmer
operator|.
name|InternalIndicesWarmer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReadWriteLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|InternalEngine
specifier|public
class|class
name|InternalEngine
extends|extends
name|AbstractIndexShardComponent
implements|implements
name|Engine
block|{
DECL|field|indexingBufferSize
specifier|private
specifier|volatile
name|ByteSizeValue
name|indexingBufferSize
decl_stmt|;
DECL|field|indexConcurrency
specifier|private
specifier|volatile
name|int
name|indexConcurrency
decl_stmt|;
DECL|field|compoundOnFlush
specifier|private
specifier|volatile
name|boolean
name|compoundOnFlush
init|=
literal|true
decl_stmt|;
DECL|field|gcDeletesInMillis
specifier|private
name|long
name|gcDeletesInMillis
decl_stmt|;
DECL|field|enableGcDeletes
specifier|private
specifier|volatile
name|boolean
name|enableGcDeletes
init|=
literal|true
decl_stmt|;
DECL|field|codecName
specifier|private
specifier|volatile
name|String
name|codecName
decl_stmt|;
DECL|field|threadPool
specifier|private
specifier|final
name|ThreadPool
name|threadPool
decl_stmt|;
DECL|field|indexingService
specifier|private
specifier|final
name|ShardIndexingService
name|indexingService
decl_stmt|;
DECL|field|indexSettingsService
specifier|private
specifier|final
name|IndexSettingsService
name|indexSettingsService
decl_stmt|;
annotation|@
name|Nullable
DECL|field|warmer
specifier|private
specifier|final
name|InternalIndicesWarmer
name|warmer
decl_stmt|;
DECL|field|store
specifier|private
specifier|final
name|Store
name|store
decl_stmt|;
DECL|field|deletionPolicy
specifier|private
specifier|final
name|SnapshotDeletionPolicy
name|deletionPolicy
decl_stmt|;
DECL|field|translog
specifier|private
specifier|final
name|Translog
name|translog
decl_stmt|;
DECL|field|mergePolicyProvider
specifier|private
specifier|final
name|MergePolicyProvider
name|mergePolicyProvider
decl_stmt|;
DECL|field|mergeScheduler
specifier|private
specifier|final
name|MergeSchedulerProvider
name|mergeScheduler
decl_stmt|;
DECL|field|analysisService
specifier|private
specifier|final
name|AnalysisService
name|analysisService
decl_stmt|;
DECL|field|similarityService
specifier|private
specifier|final
name|SimilarityService
name|similarityService
decl_stmt|;
DECL|field|codecService
specifier|private
specifier|final
name|CodecService
name|codecService
decl_stmt|;
DECL|field|rwl
specifier|private
specifier|final
name|ReadWriteLock
name|rwl
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
decl_stmt|;
DECL|field|indexWriter
specifier|private
specifier|volatile
name|IndexWriter
name|indexWriter
decl_stmt|;
DECL|field|searcherFactory
specifier|private
specifier|final
name|SearcherFactory
name|searcherFactory
init|=
operator|new
name|SearchFactory
argument_list|()
decl_stmt|;
DECL|field|searcherManager
specifier|private
specifier|volatile
name|SearcherManager
name|searcherManager
decl_stmt|;
DECL|field|closed
specifier|private
specifier|volatile
name|boolean
name|closed
init|=
literal|false
decl_stmt|;
comment|// flag indicating if a dirty operation has occurred since the last refresh
DECL|field|dirty
specifier|private
specifier|volatile
name|boolean
name|dirty
init|=
literal|false
decl_stmt|;
DECL|field|possibleMergeNeeded
specifier|private
specifier|volatile
name|boolean
name|possibleMergeNeeded
init|=
literal|false
decl_stmt|;
DECL|field|optimizeMutex
specifier|private
specifier|final
name|AtomicBoolean
name|optimizeMutex
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
comment|// we use flushNeeded here, since if there are no changes, then the commit won't write
comment|// will not really happen, and then the commitUserData and the new translog will not be reflected
DECL|field|flushNeeded
specifier|private
specifier|volatile
name|boolean
name|flushNeeded
init|=
literal|false
decl_stmt|;
DECL|field|flushing
specifier|private
specifier|final
name|AtomicInteger
name|flushing
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
DECL|field|flushLock
specifier|private
specifier|final
name|Lock
name|flushLock
init|=
operator|new
name|ReentrantLock
argument_list|()
decl_stmt|;
DECL|field|onGoingRecoveries
specifier|private
specifier|final
name|RecoveryCounter
name|onGoingRecoveries
init|=
operator|new
name|RecoveryCounter
argument_list|()
decl_stmt|;
comment|// A uid (in the form of BytesRef) to the version map
comment|// we use the hashed variant since we iterate over it and check removal and additions on existing keys
DECL|field|versionMap
specifier|private
specifier|final
name|ConcurrentMap
argument_list|<
name|HashedBytesRef
argument_list|,
name|VersionValue
argument_list|>
name|versionMap
decl_stmt|;
DECL|field|dirtyLocks
specifier|private
specifier|final
name|Object
index|[]
name|dirtyLocks
decl_stmt|;
DECL|field|refreshMutex
specifier|private
specifier|final
name|Object
name|refreshMutex
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
DECL|field|applySettings
specifier|private
specifier|final
name|ApplySettings
name|applySettings
init|=
operator|new
name|ApplySettings
argument_list|()
decl_stmt|;
DECL|field|failOnMergeFailure
specifier|private
specifier|volatile
name|boolean
name|failOnMergeFailure
decl_stmt|;
DECL|field|failedEngine
specifier|private
name|Throwable
name|failedEngine
init|=
literal|null
decl_stmt|;
DECL|field|failedEngineMutex
specifier|private
specifier|final
name|Object
name|failedEngineMutex
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
DECL|field|failedEngineListeners
specifier|private
specifier|final
name|CopyOnWriteArrayList
argument_list|<
name|FailedEngineListener
argument_list|>
name|failedEngineListeners
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<
name|FailedEngineListener
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|translogIdGenerator
specifier|private
specifier|final
name|AtomicLong
name|translogIdGenerator
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
DECL|field|lastCommittedSegmentInfos
specifier|private
name|SegmentInfos
name|lastCommittedSegmentInfos
decl_stmt|;
annotation|@
name|Inject
DECL|method|InternalEngine
specifier|public
name|InternalEngine
parameter_list|(
name|ShardId
name|shardId
parameter_list|,
annotation|@
name|IndexSettings
name|Settings
name|indexSettings
parameter_list|,
name|ThreadPool
name|threadPool
parameter_list|,
name|IndexSettingsService
name|indexSettingsService
parameter_list|,
name|ShardIndexingService
name|indexingService
parameter_list|,
annotation|@
name|Nullable
name|IndicesWarmer
name|warmer
parameter_list|,
name|Store
name|store
parameter_list|,
name|SnapshotDeletionPolicy
name|deletionPolicy
parameter_list|,
name|Translog
name|translog
parameter_list|,
name|MergePolicyProvider
name|mergePolicyProvider
parameter_list|,
name|MergeSchedulerProvider
name|mergeScheduler
parameter_list|,
name|AnalysisService
name|analysisService
parameter_list|,
name|SimilarityService
name|similarityService
parameter_list|,
name|CodecService
name|codecService
parameter_list|)
throws|throws
name|EngineException
block|{
name|super
argument_list|(
name|shardId
argument_list|,
name|indexSettings
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|store
argument_list|,
literal|"Store must be provided to the engine"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|deletionPolicy
argument_list|,
literal|"Snapshot deletion policy must be provided to the engine"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|translog
argument_list|,
literal|"Translog must be provided to the engine"
argument_list|)
expr_stmt|;
name|this
operator|.
name|gcDeletesInMillis
operator|=
name|indexSettings
operator|.
name|getAsTime
argument_list|(
name|INDEX_GC_DELETES
argument_list|,
name|TimeValue
operator|.
name|timeValueSeconds
argument_list|(
literal|60
argument_list|)
argument_list|)
operator|.
name|millis
argument_list|()
expr_stmt|;
name|this
operator|.
name|indexingBufferSize
operator|=
name|componentSettings
operator|.
name|getAsBytesSize
argument_list|(
literal|"index_buffer_size"
argument_list|,
operator|new
name|ByteSizeValue
argument_list|(
literal|64
argument_list|,
name|ByteSizeUnit
operator|.
name|MB
argument_list|)
argument_list|)
expr_stmt|;
comment|// not really important, as it is set by the IndexingMemory manager
name|this
operator|.
name|codecName
operator|=
name|indexSettings
operator|.
name|get
argument_list|(
name|INDEX_CODEC
argument_list|,
literal|"default"
argument_list|)
expr_stmt|;
name|this
operator|.
name|threadPool
operator|=
name|threadPool
expr_stmt|;
name|this
operator|.
name|indexSettingsService
operator|=
name|indexSettingsService
expr_stmt|;
name|this
operator|.
name|indexingService
operator|=
name|indexingService
expr_stmt|;
name|this
operator|.
name|warmer
operator|=
operator|(
name|InternalIndicesWarmer
operator|)
name|warmer
expr_stmt|;
name|this
operator|.
name|store
operator|=
name|store
expr_stmt|;
name|this
operator|.
name|deletionPolicy
operator|=
name|deletionPolicy
expr_stmt|;
name|this
operator|.
name|translog
operator|=
name|translog
expr_stmt|;
name|this
operator|.
name|mergePolicyProvider
operator|=
name|mergePolicyProvider
expr_stmt|;
name|this
operator|.
name|mergeScheduler
operator|=
name|mergeScheduler
expr_stmt|;
name|this
operator|.
name|analysisService
operator|=
name|analysisService
expr_stmt|;
name|this
operator|.
name|similarityService
operator|=
name|similarityService
expr_stmt|;
name|this
operator|.
name|codecService
operator|=
name|codecService
expr_stmt|;
name|this
operator|.
name|compoundOnFlush
operator|=
name|indexSettings
operator|.
name|getAsBoolean
argument_list|(
name|INDEX_COMPOUND_ON_FLUSH
argument_list|,
name|this
operator|.
name|compoundOnFlush
argument_list|)
expr_stmt|;
name|this
operator|.
name|indexConcurrency
operator|=
name|indexSettings
operator|.
name|getAsInt
argument_list|(
name|INDEX_INDEX_CONCURRENCY
argument_list|,
name|Math
operator|.
name|max
argument_list|(
name|IndexWriterConfig
operator|.
name|DEFAULT_MAX_THREAD_STATES
argument_list|,
call|(
name|int
call|)
argument_list|(
name|EsExecutors
operator|.
name|boundedNumberOfProcessors
argument_list|(
name|indexSettings
argument_list|)
operator|*
literal|0.65
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|versionMap
operator|=
name|ConcurrentCollections
operator|.
name|newConcurrentMapWithAggressiveConcurrency
argument_list|()
expr_stmt|;
name|this
operator|.
name|dirtyLocks
operator|=
operator|new
name|Object
index|[
name|indexConcurrency
operator|*
literal|50
index|]
expr_stmt|;
comment|// we multiply it to have enough...
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dirtyLocks
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|dirtyLocks
index|[
name|i
index|]
operator|=
operator|new
name|Object
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|indexSettingsService
operator|.
name|addListener
argument_list|(
name|applySettings
argument_list|)
expr_stmt|;
name|this
operator|.
name|failOnMergeFailure
operator|=
name|indexSettings
operator|.
name|getAsBoolean
argument_list|(
name|INDEX_FAIL_ON_MERGE_FAILURE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|failOnMergeFailure
condition|)
block|{
name|this
operator|.
name|mergeScheduler
operator|.
name|addFailureListener
argument_list|(
operator|new
name|FailEngineOnMergeFailure
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|updateIndexingBufferSize
specifier|public
name|void
name|updateIndexingBufferSize
parameter_list|(
name|ByteSizeValue
name|indexingBufferSize
parameter_list|)
block|{
name|ByteSizeValue
name|preValue
init|=
name|this
operator|.
name|indexingBufferSize
decl_stmt|;
name|rwl
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|this
operator|.
name|indexingBufferSize
operator|=
name|indexingBufferSize
expr_stmt|;
name|IndexWriter
name|indexWriter
init|=
name|this
operator|.
name|indexWriter
decl_stmt|;
if|if
condition|(
name|indexWriter
operator|!=
literal|null
condition|)
block|{
name|indexWriter
operator|.
name|getConfig
argument_list|()
operator|.
name|setRAMBufferSizeMB
argument_list|(
name|this
operator|.
name|indexingBufferSize
operator|.
name|mbFrac
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|rwl
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|preValue
operator|.
name|bytes
argument_list|()
operator|!=
name|indexingBufferSize
operator|.
name|bytes
argument_list|()
condition|)
block|{
comment|// its inactive, make sure we do a full flush in this case, since the memory
comment|// changes only after a "data" change has happened to the writer
if|if
condition|(
name|indexingBufferSize
operator|==
name|Engine
operator|.
name|INACTIVE_SHARD_INDEXING_BUFFER
operator|&&
name|preValue
operator|!=
name|Engine
operator|.
name|INACTIVE_SHARD_INDEXING_BUFFER
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"updating index_buffer_size from [{}] to (inactive) [{}]"
argument_list|,
name|preValue
argument_list|,
name|indexingBufferSize
argument_list|)
expr_stmt|;
try|try
block|{
name|flush
argument_list|(
operator|new
name|Flush
argument_list|()
operator|.
name|type
argument_list|(
name|Flush
operator|.
name|Type
operator|.
name|NEW_WRITER
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EngineClosedException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
catch|catch
parameter_list|(
name|FlushNotAllowedEngineException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"failed to flush after setting shard to inactive"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"updating index_buffer_size from [{}] to [{}]"
argument_list|,
name|preValue
argument_list|,
name|indexingBufferSize
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|addFailedEngineListener
specifier|public
name|void
name|addFailedEngineListener
parameter_list|(
name|FailedEngineListener
name|listener
parameter_list|)
block|{
name|failedEngineListeners
operator|.
name|add
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|start
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|EngineException
block|{
name|rwl
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|indexWriter
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|EngineAlreadyStartedException
argument_list|(
name|shardId
argument_list|)
throw|;
block|}
if|if
condition|(
name|closed
condition|)
block|{
throw|throw
operator|new
name|EngineClosedException
argument_list|(
name|shardId
argument_list|)
throw|;
block|}
if|if
condition|(
name|logger
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"starting engine"
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|this
operator|.
name|indexWriter
operator|=
name|createWriter
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|EngineCreationFailureException
argument_list|(
name|shardId
argument_list|,
literal|"failed to create engine"
argument_list|,
name|e
argument_list|)
throw|;
block|}
try|try
block|{
comment|// commit on a just opened writer will commit even if there are no changes done to it
comment|// we rely on that for the commit data translog id key
if|if
condition|(
name|Lucene
operator|.
name|indexExists
argument_list|(
name|store
operator|.
name|directory
argument_list|()
argument_list|)
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|commitUserData
init|=
name|Lucene
operator|.
name|readSegmentInfos
argument_list|(
name|store
operator|.
name|directory
argument_list|()
argument_list|)
operator|.
name|getUserData
argument_list|()
decl_stmt|;
if|if
condition|(
name|commitUserData
operator|.
name|containsKey
argument_list|(
name|Translog
operator|.
name|TRANSLOG_ID_KEY
argument_list|)
condition|)
block|{
name|translogIdGenerator
operator|.
name|set
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|commitUserData
operator|.
name|get
argument_list|(
name|Translog
operator|.
name|TRANSLOG_ID_KEY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|translogIdGenerator
operator|.
name|set
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|indexWriter
operator|.
name|setCommitData
argument_list|(
name|MapBuilder
operator|.
expr|<
name|String
argument_list|,
name|String
operator|>
name|newMapBuilder
argument_list|()
operator|.
name|put
argument_list|(
name|Translog
operator|.
name|TRANSLOG_ID_KEY
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|translogIdGenerator
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
operator|.
name|map
argument_list|()
argument_list|)
expr_stmt|;
name|indexWriter
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|translogIdGenerator
operator|.
name|set
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|indexWriter
operator|.
name|setCommitData
argument_list|(
name|MapBuilder
operator|.
expr|<
name|String
argument_list|,
name|String
operator|>
name|newMapBuilder
argument_list|()
operator|.
name|put
argument_list|(
name|Translog
operator|.
name|TRANSLOG_ID_KEY
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|translogIdGenerator
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
operator|.
name|map
argument_list|()
argument_list|)
expr_stmt|;
name|indexWriter
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
name|translog
operator|.
name|newTranslog
argument_list|(
name|translogIdGenerator
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|searcherManager
operator|=
name|buildSearchManager
argument_list|(
name|indexWriter
argument_list|)
expr_stmt|;
name|readLastCommittedSegmentsInfo
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
try|try
block|{
name|indexWriter
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e1
parameter_list|)
block|{
comment|// ignore
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeWhileHandlingException
argument_list|(
name|indexWriter
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|EngineCreationFailureException
argument_list|(
name|shardId
argument_list|,
literal|"failed to open reader on writer"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
name|rwl
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|readLastCommittedSegmentsInfo
specifier|private
name|void
name|readLastCommittedSegmentsInfo
parameter_list|()
throws|throws
name|IOException
block|{
name|SegmentInfos
name|infos
init|=
operator|new
name|SegmentInfos
argument_list|()
decl_stmt|;
name|infos
operator|.
name|read
argument_list|(
name|store
operator|.
name|directory
argument_list|()
argument_list|)
expr_stmt|;
name|lastCommittedSegmentInfos
operator|=
name|infos
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|defaultRefreshInterval
specifier|public
name|TimeValue
name|defaultRefreshInterval
parameter_list|()
block|{
return|return
operator|new
name|TimeValue
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|enableGcDeletes
specifier|public
name|void
name|enableGcDeletes
parameter_list|(
name|boolean
name|enableGcDeletes
parameter_list|)
block|{
name|this
operator|.
name|enableGcDeletes
operator|=
name|enableGcDeletes
expr_stmt|;
block|}
DECL|method|get
specifier|public
name|GetResult
name|get
parameter_list|(
name|Get
name|get
parameter_list|)
throws|throws
name|EngineException
block|{
name|rwl
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|get
operator|.
name|realtime
argument_list|()
condition|)
block|{
name|VersionValue
name|versionValue
init|=
name|versionMap
operator|.
name|get
argument_list|(
name|versionKey
argument_list|(
name|get
operator|.
name|uid
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|versionValue
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|versionValue
operator|.
name|delete
argument_list|()
condition|)
block|{
return|return
name|GetResult
operator|.
name|NOT_EXISTS
return|;
block|}
if|if
condition|(
name|get
operator|.
name|version
argument_list|()
operator|!=
name|Versions
operator|.
name|MATCH_ANY
condition|)
block|{
if|if
condition|(
name|get
operator|.
name|versionType
argument_list|()
operator|.
name|isVersionConflict
argument_list|(
name|versionValue
operator|.
name|version
argument_list|()
argument_list|,
name|get
operator|.
name|version
argument_list|()
argument_list|)
condition|)
block|{
name|Uid
name|uid
init|=
name|Uid
operator|.
name|createUid
argument_list|(
name|get
operator|.
name|uid
argument_list|()
operator|.
name|text
argument_list|()
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|VersionConflictEngineException
argument_list|(
name|shardId
argument_list|,
name|uid
operator|.
name|type
argument_list|()
argument_list|,
name|uid
operator|.
name|id
argument_list|()
argument_list|,
name|versionValue
operator|.
name|version
argument_list|()
argument_list|,
name|get
operator|.
name|version
argument_list|()
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
operator|!
name|get
operator|.
name|loadSource
argument_list|()
condition|)
block|{
return|return
operator|new
name|GetResult
argument_list|(
literal|true
argument_list|,
name|versionValue
operator|.
name|version
argument_list|()
argument_list|,
literal|null
argument_list|)
return|;
block|}
name|byte
index|[]
name|data
init|=
name|translog
operator|.
name|read
argument_list|(
name|versionValue
operator|.
name|translogLocation
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|data
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|Translog
operator|.
name|Source
name|source
init|=
name|TranslogStreams
operator|.
name|readSource
argument_list|(
name|data
argument_list|)
decl_stmt|;
return|return
operator|new
name|GetResult
argument_list|(
literal|true
argument_list|,
name|versionValue
operator|.
name|version
argument_list|()
argument_list|,
name|source
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// switched on us, read it from the reader
block|}
block|}
block|}
block|}
comment|// no version, get the version from the index, we know that we refresh on flush
name|Searcher
name|searcher
init|=
name|acquireSearcher
argument_list|(
literal|"get"
argument_list|)
decl_stmt|;
specifier|final
name|Versions
operator|.
name|DocIdAndVersion
name|docIdAndVersion
decl_stmt|;
try|try
block|{
name|docIdAndVersion
operator|=
name|Versions
operator|.
name|loadDocIdAndVersion
argument_list|(
name|searcher
operator|.
name|reader
argument_list|()
argument_list|,
name|get
operator|.
name|uid
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|searcher
operator|.
name|release
argument_list|()
expr_stmt|;
comment|//TODO: A better exception goes here
throw|throw
operator|new
name|EngineException
argument_list|(
name|shardId
argument_list|()
argument_list|,
literal|"Couldn't resolve version"
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|get
operator|.
name|version
argument_list|()
operator|!=
name|Versions
operator|.
name|MATCH_ANY
operator|&&
name|docIdAndVersion
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|get
operator|.
name|versionType
argument_list|()
operator|.
name|isVersionConflict
argument_list|(
name|docIdAndVersion
operator|.
name|version
argument_list|,
name|get
operator|.
name|version
argument_list|()
argument_list|)
condition|)
block|{
name|searcher
operator|.
name|release
argument_list|()
expr_stmt|;
name|Uid
name|uid
init|=
name|Uid
operator|.
name|createUid
argument_list|(
name|get
operator|.
name|uid
argument_list|()
operator|.
name|text
argument_list|()
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|VersionConflictEngineException
argument_list|(
name|shardId
argument_list|,
name|uid
operator|.
name|type
argument_list|()
argument_list|,
name|uid
operator|.
name|id
argument_list|()
argument_list|,
name|docIdAndVersion
operator|.
name|version
argument_list|,
name|get
operator|.
name|version
argument_list|()
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|docIdAndVersion
operator|!=
literal|null
condition|)
block|{
comment|// don't release the searcher on this path, it is the responsability of the caller to call GetResult.release
return|return
operator|new
name|GetResult
argument_list|(
name|searcher
argument_list|,
name|docIdAndVersion
argument_list|)
return|;
block|}
else|else
block|{
name|searcher
operator|.
name|release
argument_list|()
expr_stmt|;
return|return
name|GetResult
operator|.
name|NOT_EXISTS
return|;
block|}
block|}
finally|finally
block|{
name|rwl
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|create
specifier|public
name|void
name|create
parameter_list|(
name|Create
name|create
parameter_list|)
throws|throws
name|EngineException
block|{
name|rwl
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|IndexWriter
name|writer
init|=
name|this
operator|.
name|indexWriter
decl_stmt|;
if|if
condition|(
name|writer
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|EngineClosedException
argument_list|(
name|shardId
argument_list|,
name|failedEngine
argument_list|)
throw|;
block|}
name|innerCreate
argument_list|(
name|create
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|dirty
operator|=
literal|true
expr_stmt|;
name|possibleMergeNeeded
operator|=
literal|true
expr_stmt|;
name|flushNeeded
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|CreateFailedEngineException
argument_list|(
name|shardId
argument_list|,
name|create
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|OutOfMemoryError
name|e
parameter_list|)
block|{
name|failEngine
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|CreateFailedEngineException
argument_list|(
name|shardId
argument_list|,
name|create
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"OutOfMemoryError"
argument_list|)
condition|)
block|{
name|failEngine
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|CreateFailedEngineException
argument_list|(
name|shardId
argument_list|,
name|create
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|rwl
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|innerCreate
specifier|private
name|void
name|innerCreate
parameter_list|(
name|Create
name|create
parameter_list|,
name|IndexWriter
name|writer
parameter_list|)
throws|throws
name|IOException
block|{
synchronized|synchronized
init|(
name|dirtyLock
argument_list|(
name|create
operator|.
name|uid
argument_list|()
argument_list|)
init|)
block|{
name|HashedBytesRef
name|versionKey
init|=
name|versionKey
argument_list|(
name|create
operator|.
name|uid
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|long
name|currentVersion
decl_stmt|;
name|VersionValue
name|versionValue
init|=
name|versionMap
operator|.
name|get
argument_list|(
name|versionKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|versionValue
operator|==
literal|null
condition|)
block|{
name|currentVersion
operator|=
name|loadCurrentVersionFromIndex
argument_list|(
name|create
operator|.
name|uid
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|enableGcDeletes
operator|&&
name|versionValue
operator|.
name|delete
argument_list|()
operator|&&
operator|(
name|threadPool
operator|.
name|estimatedTimeInMillis
argument_list|()
operator|-
name|versionValue
operator|.
name|time
argument_list|()
operator|)
operator|>
name|gcDeletesInMillis
condition|)
block|{
name|currentVersion
operator|=
name|Versions
operator|.
name|NOT_FOUND
expr_stmt|;
comment|// deleted, and GC
block|}
else|else
block|{
name|currentVersion
operator|=
name|versionValue
operator|.
name|version
argument_list|()
expr_stmt|;
block|}
block|}
comment|// same logic as index
name|long
name|updatedVersion
decl_stmt|;
name|long
name|expectedVersion
init|=
name|create
operator|.
name|version
argument_list|()
decl_stmt|;
if|if
condition|(
name|create
operator|.
name|origin
argument_list|()
operator|==
name|Operation
operator|.
name|Origin
operator|.
name|PRIMARY
condition|)
block|{
if|if
condition|(
name|create
operator|.
name|versionType
argument_list|()
operator|.
name|isVersionConflict
argument_list|(
name|currentVersion
argument_list|,
name|expectedVersion
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|VersionConflictEngineException
argument_list|(
name|shardId
argument_list|,
name|create
operator|.
name|type
argument_list|()
argument_list|,
name|create
operator|.
name|id
argument_list|()
argument_list|,
name|currentVersion
argument_list|,
name|expectedVersion
argument_list|)
throw|;
block|}
name|updatedVersion
operator|=
name|create
operator|.
name|versionType
argument_list|()
operator|.
name|updateVersion
argument_list|(
name|currentVersion
argument_list|,
name|expectedVersion
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// if (index.origin() == Operation.Origin.REPLICA || index.origin() == Operation.Origin.RECOVERY) {
comment|// replicas treat the version as "external" as it comes from the primary ->
comment|// only exploding if the version they got is lower or equal to what they know.
if|if
condition|(
name|VersionType
operator|.
name|EXTERNAL
operator|.
name|isVersionConflict
argument_list|(
name|currentVersion
argument_list|,
name|expectedVersion
argument_list|)
condition|)
block|{
if|if
condition|(
name|create
operator|.
name|origin
argument_list|()
operator|==
name|Operation
operator|.
name|Origin
operator|.
name|RECOVERY
condition|)
block|{
return|return;
block|}
else|else
block|{
throw|throw
operator|new
name|VersionConflictEngineException
argument_list|(
name|shardId
argument_list|,
name|create
operator|.
name|type
argument_list|()
argument_list|,
name|create
operator|.
name|id
argument_list|()
argument_list|,
name|currentVersion
argument_list|,
name|expectedVersion
argument_list|)
throw|;
block|}
block|}
name|updatedVersion
operator|=
name|VersionType
operator|.
name|EXTERNAL
operator|.
name|updateVersion
argument_list|(
name|currentVersion
argument_list|,
name|expectedVersion
argument_list|)
expr_stmt|;
block|}
comment|// if the doc does not exists or it exists but not delete
if|if
condition|(
name|versionValue
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|versionValue
operator|.
name|delete
argument_list|()
condition|)
block|{
if|if
condition|(
name|create
operator|.
name|origin
argument_list|()
operator|==
name|Operation
operator|.
name|Origin
operator|.
name|RECOVERY
condition|)
block|{
return|return;
block|}
else|else
block|{
throw|throw
operator|new
name|DocumentAlreadyExistsException
argument_list|(
name|shardId
argument_list|,
name|create
operator|.
name|type
argument_list|()
argument_list|,
name|create
operator|.
name|id
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|currentVersion
operator|!=
name|Versions
operator|.
name|NOT_FOUND
condition|)
block|{
comment|// its not deleted, its already there
if|if
condition|(
name|create
operator|.
name|origin
argument_list|()
operator|==
name|Operation
operator|.
name|Origin
operator|.
name|RECOVERY
condition|)
block|{
return|return;
block|}
else|else
block|{
throw|throw
operator|new
name|DocumentAlreadyExistsException
argument_list|(
name|shardId
argument_list|,
name|create
operator|.
name|type
argument_list|()
argument_list|,
name|create
operator|.
name|id
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|create
operator|.
name|version
argument_list|(
name|updatedVersion
argument_list|)
expr_stmt|;
if|if
condition|(
name|create
operator|.
name|docs
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|writer
operator|.
name|addDocuments
argument_list|(
name|create
operator|.
name|docs
argument_list|()
argument_list|,
name|create
operator|.
name|analyzer
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writer
operator|.
name|addDocument
argument_list|(
name|create
operator|.
name|docs
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|create
operator|.
name|analyzer
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Translog
operator|.
name|Location
name|translogLocation
init|=
name|translog
operator|.
name|add
argument_list|(
operator|new
name|Translog
operator|.
name|Create
argument_list|(
name|create
argument_list|)
argument_list|)
decl_stmt|;
name|versionMap
operator|.
name|put
argument_list|(
name|versionKey
argument_list|,
operator|new
name|VersionValue
argument_list|(
name|updatedVersion
argument_list|,
literal|false
argument_list|,
name|threadPool
operator|.
name|estimatedTimeInMillis
argument_list|()
argument_list|,
name|translogLocation
argument_list|)
argument_list|)
expr_stmt|;
name|indexingService
operator|.
name|postCreateUnderLock
argument_list|(
name|create
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|index
specifier|public
name|void
name|index
parameter_list|(
name|Index
name|index
parameter_list|)
throws|throws
name|EngineException
block|{
name|rwl
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|IndexWriter
name|writer
init|=
name|this
operator|.
name|indexWriter
decl_stmt|;
if|if
condition|(
name|writer
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|EngineClosedException
argument_list|(
name|shardId
argument_list|,
name|failedEngine
argument_list|)
throw|;
block|}
name|innerIndex
argument_list|(
name|index
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|dirty
operator|=
literal|true
expr_stmt|;
name|possibleMergeNeeded
operator|=
literal|true
expr_stmt|;
name|flushNeeded
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IndexFailedEngineException
argument_list|(
name|shardId
argument_list|,
name|index
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|OutOfMemoryError
name|e
parameter_list|)
block|{
name|failEngine
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IndexFailedEngineException
argument_list|(
name|shardId
argument_list|,
name|index
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"OutOfMemoryError"
argument_list|)
condition|)
block|{
name|failEngine
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|IndexFailedEngineException
argument_list|(
name|shardId
argument_list|,
name|index
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|rwl
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|innerIndex
specifier|private
name|void
name|innerIndex
parameter_list|(
name|Index
name|index
parameter_list|,
name|IndexWriter
name|writer
parameter_list|)
throws|throws
name|IOException
block|{
synchronized|synchronized
init|(
name|dirtyLock
argument_list|(
name|index
operator|.
name|uid
argument_list|()
argument_list|)
init|)
block|{
name|HashedBytesRef
name|versionKey
init|=
name|versionKey
argument_list|(
name|index
operator|.
name|uid
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|long
name|currentVersion
decl_stmt|;
name|VersionValue
name|versionValue
init|=
name|versionMap
operator|.
name|get
argument_list|(
name|versionKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|versionValue
operator|==
literal|null
condition|)
block|{
name|currentVersion
operator|=
name|loadCurrentVersionFromIndex
argument_list|(
name|index
operator|.
name|uid
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|enableGcDeletes
operator|&&
name|versionValue
operator|.
name|delete
argument_list|()
operator|&&
operator|(
name|threadPool
operator|.
name|estimatedTimeInMillis
argument_list|()
operator|-
name|versionValue
operator|.
name|time
argument_list|()
operator|)
operator|>
name|gcDeletesInMillis
condition|)
block|{
name|currentVersion
operator|=
name|Versions
operator|.
name|NOT_FOUND
expr_stmt|;
comment|// deleted, and GC
block|}
else|else
block|{
name|currentVersion
operator|=
name|versionValue
operator|.
name|version
argument_list|()
expr_stmt|;
block|}
block|}
name|long
name|updatedVersion
decl_stmt|;
name|long
name|expectedVersion
init|=
name|index
operator|.
name|version
argument_list|()
decl_stmt|;
if|if
condition|(
name|index
operator|.
name|origin
argument_list|()
operator|==
name|Operation
operator|.
name|Origin
operator|.
name|PRIMARY
condition|)
block|{
if|if
condition|(
name|index
operator|.
name|versionType
argument_list|()
operator|.
name|isVersionConflict
argument_list|(
name|currentVersion
argument_list|,
name|expectedVersion
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|VersionConflictEngineException
argument_list|(
name|shardId
argument_list|,
name|index
operator|.
name|type
argument_list|()
argument_list|,
name|index
operator|.
name|id
argument_list|()
argument_list|,
name|currentVersion
argument_list|,
name|expectedVersion
argument_list|)
throw|;
block|}
name|updatedVersion
operator|=
name|index
operator|.
name|versionType
argument_list|()
operator|.
name|updateVersion
argument_list|(
name|currentVersion
argument_list|,
name|expectedVersion
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// if (index.origin() == Operation.Origin.REPLICA || index.origin() == Operation.Origin.RECOVERY) {
comment|// replicas treat the version as "external" as it comes from the primary ->
comment|// only exploding if the version they got is lower or equal to what they know.
if|if
condition|(
name|VersionType
operator|.
name|EXTERNAL
operator|.
name|isVersionConflict
argument_list|(
name|currentVersion
argument_list|,
name|expectedVersion
argument_list|)
condition|)
block|{
if|if
condition|(
name|index
operator|.
name|origin
argument_list|()
operator|==
name|Operation
operator|.
name|Origin
operator|.
name|RECOVERY
condition|)
block|{
return|return;
block|}
else|else
block|{
throw|throw
operator|new
name|VersionConflictEngineException
argument_list|(
name|shardId
argument_list|,
name|index
operator|.
name|type
argument_list|()
argument_list|,
name|index
operator|.
name|id
argument_list|()
argument_list|,
name|currentVersion
argument_list|,
name|expectedVersion
argument_list|)
throw|;
block|}
block|}
name|updatedVersion
operator|=
name|VersionType
operator|.
name|EXTERNAL
operator|.
name|updateVersion
argument_list|(
name|currentVersion
argument_list|,
name|expectedVersion
argument_list|)
expr_stmt|;
block|}
name|index
operator|.
name|version
argument_list|(
name|updatedVersion
argument_list|)
expr_stmt|;
if|if
condition|(
name|currentVersion
operator|==
name|Versions
operator|.
name|NOT_FOUND
condition|)
block|{
comment|// document does not exists, we can optimize for create
name|index
operator|.
name|created
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|index
operator|.
name|docs
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|writer
operator|.
name|addDocuments
argument_list|(
name|index
operator|.
name|docs
argument_list|()
argument_list|,
name|index
operator|.
name|analyzer
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writer
operator|.
name|addDocument
argument_list|(
name|index
operator|.
name|docs
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|index
operator|.
name|analyzer
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|versionValue
operator|!=
literal|null
condition|)
block|{
name|index
operator|.
name|created
argument_list|(
name|versionValue
operator|.
name|delete
argument_list|()
argument_list|)
expr_stmt|;
comment|// we have a delete which is not GC'ed...
block|}
if|if
condition|(
name|index
operator|.
name|docs
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|writer
operator|.
name|updateDocuments
argument_list|(
name|index
operator|.
name|uid
argument_list|()
argument_list|,
name|index
operator|.
name|docs
argument_list|()
argument_list|,
name|index
operator|.
name|analyzer
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writer
operator|.
name|updateDocument
argument_list|(
name|index
operator|.
name|uid
argument_list|()
argument_list|,
name|index
operator|.
name|docs
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|index
operator|.
name|analyzer
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|Translog
operator|.
name|Location
name|translogLocation
init|=
name|translog
operator|.
name|add
argument_list|(
operator|new
name|Translog
operator|.
name|Index
argument_list|(
name|index
argument_list|)
argument_list|)
decl_stmt|;
name|versionMap
operator|.
name|put
argument_list|(
name|versionKey
argument_list|,
operator|new
name|VersionValue
argument_list|(
name|updatedVersion
argument_list|,
literal|false
argument_list|,
name|threadPool
operator|.
name|estimatedTimeInMillis
argument_list|()
argument_list|,
name|translogLocation
argument_list|)
argument_list|)
expr_stmt|;
name|indexingService
operator|.
name|postIndexUnderLock
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|delete
specifier|public
name|void
name|delete
parameter_list|(
name|Delete
name|delete
parameter_list|)
throws|throws
name|EngineException
block|{
name|rwl
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|IndexWriter
name|writer
init|=
name|this
operator|.
name|indexWriter
decl_stmt|;
if|if
condition|(
name|writer
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|EngineClosedException
argument_list|(
name|shardId
argument_list|,
name|failedEngine
argument_list|)
throw|;
block|}
name|innerDelete
argument_list|(
name|delete
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|dirty
operator|=
literal|true
expr_stmt|;
name|possibleMergeNeeded
operator|=
literal|true
expr_stmt|;
name|flushNeeded
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DeleteFailedEngineException
argument_list|(
name|shardId
argument_list|,
name|delete
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|OutOfMemoryError
name|e
parameter_list|)
block|{
name|failEngine
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|DeleteFailedEngineException
argument_list|(
name|shardId
argument_list|,
name|delete
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"OutOfMemoryError"
argument_list|)
condition|)
block|{
name|failEngine
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|DeleteFailedEngineException
argument_list|(
name|shardId
argument_list|,
name|delete
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|rwl
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|innerDelete
specifier|private
name|void
name|innerDelete
parameter_list|(
name|Delete
name|delete
parameter_list|,
name|IndexWriter
name|writer
parameter_list|)
throws|throws
name|IOException
block|{
synchronized|synchronized
init|(
name|dirtyLock
argument_list|(
name|delete
operator|.
name|uid
argument_list|()
argument_list|)
init|)
block|{
specifier|final
name|long
name|currentVersion
decl_stmt|;
name|HashedBytesRef
name|versionKey
init|=
name|versionKey
argument_list|(
name|delete
operator|.
name|uid
argument_list|()
argument_list|)
decl_stmt|;
name|VersionValue
name|versionValue
init|=
name|versionMap
operator|.
name|get
argument_list|(
name|versionKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|versionValue
operator|==
literal|null
condition|)
block|{
name|currentVersion
operator|=
name|loadCurrentVersionFromIndex
argument_list|(
name|delete
operator|.
name|uid
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|enableGcDeletes
operator|&&
name|versionValue
operator|.
name|delete
argument_list|()
operator|&&
operator|(
name|threadPool
operator|.
name|estimatedTimeInMillis
argument_list|()
operator|-
name|versionValue
operator|.
name|time
argument_list|()
operator|)
operator|>
name|gcDeletesInMillis
condition|)
block|{
name|currentVersion
operator|=
name|Versions
operator|.
name|NOT_FOUND
expr_stmt|;
comment|// deleted, and GC
block|}
else|else
block|{
name|currentVersion
operator|=
name|versionValue
operator|.
name|version
argument_list|()
expr_stmt|;
block|}
block|}
name|long
name|updatedVersion
decl_stmt|;
name|long
name|expectedVersion
init|=
name|delete
operator|.
name|version
argument_list|()
decl_stmt|;
if|if
condition|(
name|delete
operator|.
name|origin
argument_list|()
operator|==
name|Operation
operator|.
name|Origin
operator|.
name|PRIMARY
condition|)
block|{
if|if
condition|(
name|delete
operator|.
name|versionType
argument_list|()
operator|.
name|isVersionConflict
argument_list|(
name|currentVersion
argument_list|,
name|expectedVersion
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|VersionConflictEngineException
argument_list|(
name|shardId
argument_list|,
name|delete
operator|.
name|type
argument_list|()
argument_list|,
name|delete
operator|.
name|id
argument_list|()
argument_list|,
name|currentVersion
argument_list|,
name|expectedVersion
argument_list|)
throw|;
block|}
name|updatedVersion
operator|=
name|delete
operator|.
name|versionType
argument_list|()
operator|.
name|updateVersion
argument_list|(
name|currentVersion
argument_list|,
name|expectedVersion
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// if (index.origin() == Operation.Origin.REPLICA || index.origin() == Operation.Origin.RECOVERY) {
comment|// replicas treat the version as "external" as it comes from the primary ->
comment|// only exploding if the version they got is lower or equal to what they know.
if|if
condition|(
name|VersionType
operator|.
name|EXTERNAL
operator|.
name|isVersionConflict
argument_list|(
name|currentVersion
argument_list|,
name|expectedVersion
argument_list|)
condition|)
block|{
if|if
condition|(
name|delete
operator|.
name|origin
argument_list|()
operator|==
name|Operation
operator|.
name|Origin
operator|.
name|RECOVERY
condition|)
block|{
return|return;
block|}
else|else
block|{
throw|throw
operator|new
name|VersionConflictEngineException
argument_list|(
name|shardId
argument_list|,
name|delete
operator|.
name|type
argument_list|()
argument_list|,
name|delete
operator|.
name|id
argument_list|()
argument_list|,
name|currentVersion
operator|-
literal|1
argument_list|,
name|expectedVersion
argument_list|)
throw|;
block|}
block|}
name|updatedVersion
operator|=
name|VersionType
operator|.
name|EXTERNAL
operator|.
name|updateVersion
argument_list|(
name|currentVersion
argument_list|,
name|expectedVersion
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|currentVersion
operator|==
name|Versions
operator|.
name|NOT_FOUND
condition|)
block|{
comment|// doc does not exists and no prior deletes
name|delete
operator|.
name|version
argument_list|(
name|updatedVersion
argument_list|)
operator|.
name|found
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|Translog
operator|.
name|Location
name|translogLocation
init|=
name|translog
operator|.
name|add
argument_list|(
operator|new
name|Translog
operator|.
name|Delete
argument_list|(
name|delete
argument_list|)
argument_list|)
decl_stmt|;
name|versionMap
operator|.
name|put
argument_list|(
name|versionKey
argument_list|,
operator|new
name|VersionValue
argument_list|(
name|updatedVersion
argument_list|,
literal|true
argument_list|,
name|threadPool
operator|.
name|estimatedTimeInMillis
argument_list|()
argument_list|,
name|translogLocation
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|versionValue
operator|!=
literal|null
operator|&&
name|versionValue
operator|.
name|delete
argument_list|()
condition|)
block|{
comment|// a "delete on delete", in this case, we still increment the version, log it, and return that version
name|delete
operator|.
name|version
argument_list|(
name|updatedVersion
argument_list|)
operator|.
name|found
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|Translog
operator|.
name|Location
name|translogLocation
init|=
name|translog
operator|.
name|add
argument_list|(
operator|new
name|Translog
operator|.
name|Delete
argument_list|(
name|delete
argument_list|)
argument_list|)
decl_stmt|;
name|versionMap
operator|.
name|put
argument_list|(
name|versionKey
argument_list|,
operator|new
name|VersionValue
argument_list|(
name|updatedVersion
argument_list|,
literal|true
argument_list|,
name|threadPool
operator|.
name|estimatedTimeInMillis
argument_list|()
argument_list|,
name|translogLocation
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|delete
operator|.
name|version
argument_list|(
name|updatedVersion
argument_list|)
operator|.
name|found
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|writer
operator|.
name|deleteDocuments
argument_list|(
name|delete
operator|.
name|uid
argument_list|()
argument_list|)
expr_stmt|;
name|Translog
operator|.
name|Location
name|translogLocation
init|=
name|translog
operator|.
name|add
argument_list|(
operator|new
name|Translog
operator|.
name|Delete
argument_list|(
name|delete
argument_list|)
argument_list|)
decl_stmt|;
name|versionMap
operator|.
name|put
argument_list|(
name|versionKey
argument_list|,
operator|new
name|VersionValue
argument_list|(
name|updatedVersion
argument_list|,
literal|true
argument_list|,
name|threadPool
operator|.
name|estimatedTimeInMillis
argument_list|()
argument_list|,
name|translogLocation
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|indexingService
operator|.
name|postDeleteUnderLock
argument_list|(
name|delete
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|delete
specifier|public
name|void
name|delete
parameter_list|(
name|DeleteByQuery
name|delete
parameter_list|)
throws|throws
name|EngineException
block|{
name|rwl
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|IndexWriter
name|writer
init|=
name|this
operator|.
name|indexWriter
decl_stmt|;
if|if
condition|(
name|writer
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|EngineClosedException
argument_list|(
name|shardId
argument_list|)
throw|;
block|}
name|Query
name|query
decl_stmt|;
if|if
condition|(
name|delete
operator|.
name|nested
argument_list|()
operator|&&
name|delete
operator|.
name|aliasFilter
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|query
operator|=
operator|new
name|IncludeNestedDocsQuery
argument_list|(
operator|new
name|XFilteredQuery
argument_list|(
name|delete
operator|.
name|query
argument_list|()
argument_list|,
name|delete
operator|.
name|aliasFilter
argument_list|()
argument_list|)
argument_list|,
name|delete
operator|.
name|parentFilter
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|delete
operator|.
name|nested
argument_list|()
condition|)
block|{
name|query
operator|=
operator|new
name|IncludeNestedDocsQuery
argument_list|(
name|delete
operator|.
name|query
argument_list|()
argument_list|,
name|delete
operator|.
name|parentFilter
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|delete
operator|.
name|aliasFilter
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|query
operator|=
operator|new
name|XFilteredQuery
argument_list|(
name|delete
operator|.
name|query
argument_list|()
argument_list|,
name|delete
operator|.
name|aliasFilter
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|query
operator|=
name|delete
operator|.
name|query
argument_list|()
expr_stmt|;
block|}
name|writer
operator|.
name|deleteDocuments
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|translog
operator|.
name|add
argument_list|(
operator|new
name|Translog
operator|.
name|DeleteByQuery
argument_list|(
name|delete
argument_list|)
argument_list|)
expr_stmt|;
name|dirty
operator|=
literal|true
expr_stmt|;
name|possibleMergeNeeded
operator|=
literal|true
expr_stmt|;
name|flushNeeded
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DeleteByQueryFailedEngineException
argument_list|(
name|shardId
argument_list|,
name|delete
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|rwl
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
comment|//TODO: This is heavy, since we refresh, but we really have to...
name|refreshVersioningTable
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|acquireSearcher
specifier|public
specifier|final
name|Searcher
name|acquireSearcher
parameter_list|(
name|String
name|source
parameter_list|)
throws|throws
name|EngineException
block|{
name|SearcherManager
name|manager
init|=
name|this
operator|.
name|searcherManager
decl_stmt|;
if|if
condition|(
name|manager
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|EngineClosedException
argument_list|(
name|shardId
argument_list|)
throw|;
block|}
try|try
block|{
name|IndexSearcher
name|searcher
init|=
name|manager
operator|.
name|acquire
argument_list|()
decl_stmt|;
return|return
name|newSearcher
argument_list|(
name|source
argument_list|,
name|searcher
argument_list|,
name|manager
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"failed to acquire searcher, source {}"
argument_list|,
name|ex
argument_list|,
name|source
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|EngineException
argument_list|(
name|shardId
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
DECL|method|newSearcher
specifier|protected
name|Searcher
name|newSearcher
parameter_list|(
name|String
name|source
parameter_list|,
name|IndexSearcher
name|searcher
parameter_list|,
name|SearcherManager
name|manager
parameter_list|)
block|{
return|return
operator|new
name|EngineSearcher
argument_list|(
name|source
argument_list|,
name|searcher
argument_list|,
name|manager
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|refreshNeeded
specifier|public
name|boolean
name|refreshNeeded
parameter_list|()
block|{
return|return
name|dirty
return|;
block|}
annotation|@
name|Override
DECL|method|possibleMergeNeeded
specifier|public
name|boolean
name|possibleMergeNeeded
parameter_list|()
block|{
return|return
name|this
operator|.
name|possibleMergeNeeded
return|;
block|}
annotation|@
name|Override
DECL|method|refresh
specifier|public
name|void
name|refresh
parameter_list|(
name|Refresh
name|refresh
parameter_list|)
throws|throws
name|EngineException
block|{
if|if
condition|(
name|indexWriter
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|EngineClosedException
argument_list|(
name|shardId
argument_list|)
throw|;
block|}
comment|// we obtain a read lock here, since we don't want a flush to happen while we are refreshing
comment|// since it flushes the index as well (though, in terms of concurrency, we are allowed to do it)
name|rwl
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
comment|// this engine always acts as if waitForOperations=true
name|IndexWriter
name|currentWriter
init|=
name|indexWriter
decl_stmt|;
if|if
condition|(
name|currentWriter
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|EngineClosedException
argument_list|(
name|shardId
argument_list|,
name|failedEngine
argument_list|)
throw|;
block|}
try|try
block|{
comment|// maybeRefresh will only allow one refresh to execute, and the rest will "pass through",
comment|// but, we want to make sure not to loose ant refresh calls, if one is taking time
synchronized|synchronized
init|(
name|refreshMutex
init|)
block|{
if|if
condition|(
name|dirty
operator|||
name|refresh
operator|.
name|force
argument_list|()
condition|)
block|{
name|dirty
operator|=
literal|false
expr_stmt|;
name|searcherManager
operator|.
name|maybeRefresh
argument_list|()
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|AlreadyClosedException
name|e
parameter_list|)
block|{
comment|// an index writer got replaced on us, ignore
block|}
catch|catch
parameter_list|(
name|OutOfMemoryError
name|e
parameter_list|)
block|{
name|failEngine
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RefreshFailedEngineException
argument_list|(
name|shardId
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"OutOfMemoryError"
argument_list|)
condition|)
block|{
name|failEngine
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|RefreshFailedEngineException
argument_list|(
name|shardId
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
if|if
condition|(
name|indexWriter
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|EngineClosedException
argument_list|(
name|shardId
argument_list|,
name|failedEngine
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|currentWriter
operator|!=
name|indexWriter
condition|)
block|{
comment|// an index writer got replaced on us, ignore
block|}
else|else
block|{
throw|throw
operator|new
name|RefreshFailedEngineException
argument_list|(
name|shardId
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
finally|finally
block|{
name|rwl
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|flush
specifier|public
name|void
name|flush
parameter_list|(
name|Flush
name|flush
parameter_list|)
throws|throws
name|EngineException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
if|if
condition|(
name|flush
operator|.
name|type
argument_list|()
operator|==
name|Flush
operator|.
name|Type
operator|.
name|NEW_WRITER
operator|||
name|flush
operator|.
name|type
argument_list|()
operator|==
name|Flush
operator|.
name|Type
operator|.
name|COMMIT_TRANSLOG
condition|)
block|{
comment|// check outside the lock as well so we can check without blocking on the write lock
if|if
condition|(
name|onGoingRecoveries
operator|.
name|get
argument_list|()
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|FlushNotAllowedEngineException
argument_list|(
name|shardId
argument_list|,
literal|"recovery is in progress, flush ["
operator|+
name|flush
operator|.
name|type
argument_list|()
operator|+
literal|"] is not allowed"
argument_list|)
throw|;
block|}
block|}
name|int
name|currentFlushing
init|=
name|flushing
operator|.
name|incrementAndGet
argument_list|()
decl_stmt|;
if|if
condition|(
name|currentFlushing
operator|>
literal|1
operator|&&
operator|!
name|flush
operator|.
name|waitIfOngoing
argument_list|()
condition|)
block|{
name|flushing
operator|.
name|decrementAndGet
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|FlushNotAllowedEngineException
argument_list|(
name|shardId
argument_list|,
literal|"already flushing..."
argument_list|)
throw|;
block|}
name|flushLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|flush
operator|.
name|type
argument_list|()
operator|==
name|Flush
operator|.
name|Type
operator|.
name|NEW_WRITER
condition|)
block|{
name|rwl
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
if|if
condition|(
name|onGoingRecoveries
operator|.
name|get
argument_list|()
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|FlushNotAllowedEngineException
argument_list|(
name|shardId
argument_list|,
literal|"Recovery is in progress, flush is not allowed"
argument_list|)
throw|;
block|}
comment|// disable refreshing, not dirty
name|dirty
operator|=
literal|false
expr_stmt|;
try|try
block|{
comment|// that's ok if the index writer failed and is in inconsistent state
comment|// we will get an exception on a dirty operation, and will cause the shard
comment|// to be allocated to a different node
name|indexWriter
operator|.
name|close
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|indexWriter
operator|=
name|createWriter
argument_list|()
expr_stmt|;
comment|// commit on a just opened writer will commit even if there are no changes done to it
comment|// we rely on that for the commit data translog id key
if|if
condition|(
name|flushNeeded
operator|||
name|flush
operator|.
name|force
argument_list|()
condition|)
block|{
name|flushNeeded
operator|=
literal|false
expr_stmt|;
name|long
name|translogId
init|=
name|translogIdGenerator
operator|.
name|incrementAndGet
argument_list|()
decl_stmt|;
name|indexWriter
operator|.
name|setCommitData
argument_list|(
name|MapBuilder
operator|.
expr|<
name|String
argument_list|,
name|String
operator|>
name|newMapBuilder
argument_list|()
operator|.
name|put
argument_list|(
name|Translog
operator|.
name|TRANSLOG_ID_KEY
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|translogId
argument_list|)
argument_list|)
operator|.
name|map
argument_list|()
argument_list|)
expr_stmt|;
name|indexWriter
operator|.
name|commit
argument_list|()
expr_stmt|;
name|translog
operator|.
name|newTranslog
argument_list|(
name|translogId
argument_list|)
expr_stmt|;
block|}
name|SearcherManager
name|current
init|=
name|this
operator|.
name|searcherManager
decl_stmt|;
name|this
operator|.
name|searcherManager
operator|=
name|buildSearchManager
argument_list|(
name|indexWriter
argument_list|)
expr_stmt|;
try|try
block|{
name|IOUtils
operator|.
name|close
argument_list|(
name|current
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Failed to close current SearcherManager"
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
name|refreshVersioningTable
argument_list|(
name|threadPool
operator|.
name|estimatedTimeInMillis
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OutOfMemoryError
name|e
parameter_list|)
block|{
name|failEngine
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|FlushFailedEngineException
argument_list|(
name|shardId
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"OutOfMemoryError"
argument_list|)
condition|)
block|{
name|failEngine
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|FlushFailedEngineException
argument_list|(
name|shardId
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|FlushFailedEngineException
argument_list|(
name|shardId
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
name|rwl
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|flush
operator|.
name|type
argument_list|()
operator|==
name|Flush
operator|.
name|Type
operator|.
name|COMMIT_TRANSLOG
condition|)
block|{
name|rwl
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
if|if
condition|(
name|onGoingRecoveries
operator|.
name|get
argument_list|()
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|FlushNotAllowedEngineException
argument_list|(
name|shardId
argument_list|,
literal|"Recovery is in progress, flush is not allowed"
argument_list|)
throw|;
block|}
if|if
condition|(
name|flushNeeded
operator|||
name|flush
operator|.
name|force
argument_list|()
condition|)
block|{
name|flushNeeded
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|long
name|translogId
init|=
name|translogIdGenerator
operator|.
name|incrementAndGet
argument_list|()
decl_stmt|;
name|translog
operator|.
name|newTransientTranslog
argument_list|(
name|translogId
argument_list|)
expr_stmt|;
name|indexWriter
operator|.
name|setCommitData
argument_list|(
name|MapBuilder
operator|.
expr|<
name|String
argument_list|,
name|String
operator|>
name|newMapBuilder
argument_list|()
operator|.
name|put
argument_list|(
name|Translog
operator|.
name|TRANSLOG_ID_KEY
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|translogId
argument_list|)
argument_list|)
operator|.
name|map
argument_list|()
argument_list|)
expr_stmt|;
name|indexWriter
operator|.
name|commit
argument_list|()
expr_stmt|;
name|refreshVersioningTable
argument_list|(
name|threadPool
operator|.
name|estimatedTimeInMillis
argument_list|()
argument_list|)
expr_stmt|;
comment|// we need to move transient to current only after we refresh
comment|// so items added to current will still be around for realtime get
comment|// when tans overrides it
name|translog
operator|.
name|makeTransientCurrent
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OutOfMemoryError
name|e
parameter_list|)
block|{
name|translog
operator|.
name|revertTransient
argument_list|()
expr_stmt|;
name|failEngine
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|FlushFailedEngineException
argument_list|(
name|shardId
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"OutOfMemoryError"
argument_list|)
condition|)
block|{
name|failEngine
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|FlushFailedEngineException
argument_list|(
name|shardId
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|translog
operator|.
name|revertTransient
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|FlushFailedEngineException
argument_list|(
name|shardId
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
finally|finally
block|{
name|rwl
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|flush
operator|.
name|type
argument_list|()
operator|==
name|Flush
operator|.
name|Type
operator|.
name|COMMIT
condition|)
block|{
comment|// note, its ok to just commit without cleaning the translog, its perfectly fine to replay a
comment|// translog on an index that was opened on a committed point in time that is "in the future"
comment|// of that translog
name|rwl
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
comment|// we allow to *just* commit if there is an ongoing recovery happening...
comment|// its ok to use this, only a flush will cause a new translogId, and we are locked here from
comment|// other flushes use flushLock
try|try
block|{
name|long
name|translogId
init|=
name|translog
operator|.
name|currentId
argument_list|()
decl_stmt|;
name|indexWriter
operator|.
name|setCommitData
argument_list|(
name|MapBuilder
operator|.
expr|<
name|String
argument_list|,
name|String
operator|>
name|newMapBuilder
argument_list|()
operator|.
name|put
argument_list|(
name|Translog
operator|.
name|TRANSLOG_ID_KEY
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|translogId
argument_list|)
argument_list|)
operator|.
name|map
argument_list|()
argument_list|)
expr_stmt|;
name|indexWriter
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OutOfMemoryError
name|e
parameter_list|)
block|{
name|translog
operator|.
name|revertTransient
argument_list|()
expr_stmt|;
name|failEngine
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|FlushFailedEngineException
argument_list|(
name|shardId
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"OutOfMemoryError"
argument_list|)
condition|)
block|{
name|failEngine
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|FlushFailedEngineException
argument_list|(
name|shardId
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|FlushFailedEngineException
argument_list|(
name|shardId
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
name|rwl
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|ElasticsearchIllegalStateException
argument_list|(
literal|"flush type ["
operator|+
name|flush
operator|.
name|type
argument_list|()
operator|+
literal|"] not supported"
argument_list|)
throw|;
block|}
comment|// reread the last committed segment infos
name|rwl
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
name|readLastCommittedSegmentsInfo
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|closed
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"failed to read latest segment infos on flush"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|rwl
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|flushLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|flushing
operator|.
name|decrementAndGet
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|ensureOpen
specifier|private
name|void
name|ensureOpen
parameter_list|()
block|{
if|if
condition|(
name|indexWriter
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|EngineClosedException
argument_list|(
name|shardId
argument_list|,
name|failedEngine
argument_list|)
throw|;
block|}
block|}
DECL|method|refreshVersioningTable
specifier|private
name|void
name|refreshVersioningTable
parameter_list|(
name|long
name|time
parameter_list|)
block|{
comment|// we need to refresh in order to clear older version values
name|refresh
argument_list|(
operator|new
name|Refresh
argument_list|(
literal|"version_table"
argument_list|)
operator|.
name|force
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|HashedBytesRef
argument_list|,
name|VersionValue
argument_list|>
name|entry
range|:
name|versionMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|HashedBytesRef
name|uid
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|dirtyLock
argument_list|(
name|uid
operator|.
name|bytes
argument_list|)
init|)
block|{
comment|// can we do it without this lock on each value? maybe batch to a set and get the lock once per set?
name|VersionValue
name|versionValue
init|=
name|versionMap
operator|.
name|get
argument_list|(
name|uid
argument_list|)
decl_stmt|;
if|if
condition|(
name|versionValue
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|time
operator|-
name|versionValue
operator|.
name|time
argument_list|()
operator|<=
literal|0
condition|)
block|{
continue|continue;
comment|// its a newer value, from after/during we refreshed, don't clear it
block|}
if|if
condition|(
name|versionValue
operator|.
name|delete
argument_list|()
condition|)
block|{
if|if
condition|(
name|enableGcDeletes
operator|&&
operator|(
name|time
operator|-
name|versionValue
operator|.
name|time
argument_list|()
operator|)
operator|>
name|gcDeletesInMillis
condition|)
block|{
name|versionMap
operator|.
name|remove
argument_list|(
name|uid
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|versionMap
operator|.
name|remove
argument_list|(
name|uid
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|maybeMerge
specifier|public
name|void
name|maybeMerge
parameter_list|()
throws|throws
name|EngineException
block|{
if|if
condition|(
operator|!
name|possibleMergeNeeded
condition|)
block|{
return|return;
block|}
name|possibleMergeNeeded
operator|=
literal|false
expr_stmt|;
name|rwl
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
name|indexWriter
operator|.
name|maybeMerge
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OutOfMemoryError
name|e
parameter_list|)
block|{
name|failEngine
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|OptimizeFailedEngineException
argument_list|(
name|shardId
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"OutOfMemoryError"
argument_list|)
condition|)
block|{
name|failEngine
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|OptimizeFailedEngineException
argument_list|(
name|shardId
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|OptimizeFailedEngineException
argument_list|(
name|shardId
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|rwl
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|optimize
specifier|public
name|void
name|optimize
parameter_list|(
name|Optimize
name|optimize
parameter_list|)
throws|throws
name|EngineException
block|{
if|if
condition|(
name|optimize
operator|.
name|flush
argument_list|()
condition|)
block|{
name|flush
argument_list|(
operator|new
name|Flush
argument_list|()
operator|.
name|force
argument_list|(
literal|true
argument_list|)
operator|.
name|waitIfOngoing
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|optimizeMutex
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|rwl
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
if|if
condition|(
name|optimize
operator|.
name|onlyExpungeDeletes
argument_list|()
condition|)
block|{
name|indexWriter
operator|.
name|forceMergeDeletes
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|optimize
operator|.
name|maxNumSegments
argument_list|()
operator|<=
literal|0
condition|)
block|{
name|indexWriter
operator|.
name|maybeMerge
argument_list|()
expr_stmt|;
name|possibleMergeNeeded
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|indexWriter
operator|.
name|forceMerge
argument_list|(
name|optimize
operator|.
name|maxNumSegments
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|OutOfMemoryError
name|e
parameter_list|)
block|{
name|failEngine
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|OptimizeFailedEngineException
argument_list|(
name|shardId
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"OutOfMemoryError"
argument_list|)
condition|)
block|{
name|failEngine
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|OptimizeFailedEngineException
argument_list|(
name|shardId
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|OptimizeFailedEngineException
argument_list|(
name|shardId
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|rwl
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|optimizeMutex
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
comment|// wait for the merges outside of the read lock
if|if
condition|(
name|optimize
operator|.
name|waitForMerge
argument_list|()
condition|)
block|{
name|indexWriter
operator|.
name|waitForMerges
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|optimize
operator|.
name|flush
argument_list|()
condition|)
block|{
name|flush
argument_list|(
operator|new
name|Flush
argument_list|()
operator|.
name|force
argument_list|(
literal|true
argument_list|)
operator|.
name|waitIfOngoing
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|snapshot
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|snapshot
parameter_list|(
name|SnapshotHandler
argument_list|<
name|T
argument_list|>
name|snapshotHandler
parameter_list|)
throws|throws
name|EngineException
block|{
name|SnapshotIndexCommit
name|snapshotIndexCommit
init|=
literal|null
decl_stmt|;
name|Translog
operator|.
name|Snapshot
name|traslogSnapshot
init|=
literal|null
decl_stmt|;
name|rwl
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|snapshotIndexCommit
operator|=
name|deletionPolicy
operator|.
name|snapshot
argument_list|()
expr_stmt|;
name|traslogSnapshot
operator|=
name|translog
operator|.
name|snapshot
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
if|if
condition|(
name|snapshotIndexCommit
operator|!=
literal|null
condition|)
block|{
name|snapshotIndexCommit
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
throw|throw
operator|new
name|SnapshotFailedEngineException
argument_list|(
name|shardId
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|rwl
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
try|try
block|{
return|return
name|snapshotHandler
operator|.
name|snapshot
argument_list|(
name|snapshotIndexCommit
argument_list|,
name|traslogSnapshot
argument_list|)
return|;
block|}
finally|finally
block|{
name|snapshotIndexCommit
operator|.
name|release
argument_list|()
expr_stmt|;
name|traslogSnapshot
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|snapshotIndex
specifier|public
name|SnapshotIndexCommit
name|snapshotIndex
parameter_list|()
throws|throws
name|EngineException
block|{
name|rwl
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|flush
argument_list|(
operator|new
name|Flush
argument_list|()
operator|.
name|type
argument_list|(
name|Flush
operator|.
name|Type
operator|.
name|COMMIT
argument_list|)
operator|.
name|waitIfOngoing
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|ensureOpen
argument_list|()
expr_stmt|;
return|return
name|deletionPolicy
operator|.
name|snapshot
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SnapshotFailedEngineException
argument_list|(
name|shardId
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|rwl
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|recover
specifier|public
name|void
name|recover
parameter_list|(
name|RecoveryHandler
name|recoveryHandler
parameter_list|)
throws|throws
name|EngineException
block|{
comment|// take a write lock here so it won't happen while a flush is in progress
comment|// this means that next commits will not be allowed once the lock is released
name|rwl
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|closed
condition|)
block|{
throw|throw
operator|new
name|EngineClosedException
argument_list|(
name|shardId
argument_list|)
throw|;
block|}
name|onGoingRecoveries
operator|.
name|increment
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|rwl
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
name|SnapshotIndexCommit
name|phase1Snapshot
decl_stmt|;
try|try
block|{
name|phase1Snapshot
operator|=
name|deletionPolicy
operator|.
name|snapshot
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|onGoingRecoveries
operator|.
name|decrement
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|RecoveryEngineException
argument_list|(
name|shardId
argument_list|,
literal|1
argument_list|,
literal|"Snapshot failed"
argument_list|,
name|e
argument_list|)
throw|;
block|}
try|try
block|{
name|recoveryHandler
operator|.
name|phase1
argument_list|(
name|phase1Snapshot
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|onGoingRecoveries
operator|.
name|decrement
argument_list|()
expr_stmt|;
name|phase1Snapshot
operator|.
name|release
argument_list|()
expr_stmt|;
if|if
condition|(
name|closed
condition|)
block|{
name|e
operator|=
operator|new
name|EngineClosedException
argument_list|(
name|shardId
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|RecoveryEngineException
argument_list|(
name|shardId
argument_list|,
literal|1
argument_list|,
literal|"Execution failed"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|Translog
operator|.
name|Snapshot
name|phase2Snapshot
decl_stmt|;
try|try
block|{
name|phase2Snapshot
operator|=
name|translog
operator|.
name|snapshot
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|onGoingRecoveries
operator|.
name|decrement
argument_list|()
expr_stmt|;
name|phase1Snapshot
operator|.
name|release
argument_list|()
expr_stmt|;
if|if
condition|(
name|closed
condition|)
block|{
name|e
operator|=
operator|new
name|EngineClosedException
argument_list|(
name|shardId
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|RecoveryEngineException
argument_list|(
name|shardId
argument_list|,
literal|2
argument_list|,
literal|"Snapshot failed"
argument_list|,
name|e
argument_list|)
throw|;
block|}
try|try
block|{
name|recoveryHandler
operator|.
name|phase2
argument_list|(
name|phase2Snapshot
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|onGoingRecoveries
operator|.
name|decrement
argument_list|()
expr_stmt|;
name|phase1Snapshot
operator|.
name|release
argument_list|()
expr_stmt|;
name|phase2Snapshot
operator|.
name|release
argument_list|()
expr_stmt|;
if|if
condition|(
name|closed
condition|)
block|{
name|e
operator|=
operator|new
name|EngineClosedException
argument_list|(
name|shardId
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|RecoveryEngineException
argument_list|(
name|shardId
argument_list|,
literal|2
argument_list|,
literal|"Execution failed"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|rwl
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|Translog
operator|.
name|Snapshot
name|phase3Snapshot
init|=
literal|null
decl_stmt|;
try|try
block|{
name|phase3Snapshot
operator|=
name|translog
operator|.
name|snapshot
argument_list|(
name|phase2Snapshot
argument_list|)
expr_stmt|;
name|recoveryHandler
operator|.
name|phase3
argument_list|(
name|phase3Snapshot
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RecoveryEngineException
argument_list|(
name|shardId
argument_list|,
literal|3
argument_list|,
literal|"Execution failed"
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|onGoingRecoveries
operator|.
name|decrement
argument_list|()
expr_stmt|;
name|rwl
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|phase1Snapshot
operator|.
name|release
argument_list|()
expr_stmt|;
name|phase2Snapshot
operator|.
name|release
argument_list|()
expr_stmt|;
if|if
condition|(
name|phase3Snapshot
operator|!=
literal|null
condition|)
block|{
name|phase3Snapshot
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/*this is only used by one test right now and shoudl go away entirely once we update lucene*/
DECL|field|allowRamBytesUsed
specifier|private
specifier|static
name|boolean
name|allowRamBytesUsed
init|=
literal|false
decl_stmt|;
static|static
block|{
assert|assert
name|Version
operator|.
name|CURRENT
operator|.
name|luceneVersion
operator|==
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Version
operator|.
name|LUCENE_46
operator|:
literal|"when upgrading to a new lucene version, check if ramBytes is fixed, see https://issues.apache.org/jira/browse/LUCENE-5373"
assert|;
block|}
DECL|method|getReaderRamBytesUsed
specifier|private
name|long
name|getReaderRamBytesUsed
parameter_list|(
name|AtomicReaderContext
name|reader
parameter_list|)
block|{
return|return
name|allowRamBytesUsed
condition|?
name|SegmentReaderUtils
operator|.
name|segmentReader
argument_list|(
name|reader
operator|.
name|reader
argument_list|()
argument_list|)
operator|.
name|ramBytesUsed
argument_list|()
else|:
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|segmentsStats
specifier|public
name|SegmentsStats
name|segmentsStats
parameter_list|()
block|{
name|rwl
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
name|Searcher
name|searcher
init|=
name|acquireSearcher
argument_list|(
literal|"segments_stats"
argument_list|)
decl_stmt|;
try|try
block|{
name|SegmentsStats
name|stats
init|=
operator|new
name|SegmentsStats
argument_list|()
decl_stmt|;
for|for
control|(
name|AtomicReaderContext
name|reader
range|:
name|searcher
operator|.
name|reader
argument_list|()
operator|.
name|leaves
argument_list|()
control|)
block|{
name|stats
operator|.
name|add
argument_list|(
literal|1
argument_list|,
name|getReaderRamBytesUsed
argument_list|(
name|reader
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|stats
return|;
block|}
finally|finally
block|{
name|searcher
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|rwl
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|segments
specifier|public
name|List
argument_list|<
name|Segment
argument_list|>
name|segments
parameter_list|()
block|{
name|rwl
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Segment
argument_list|>
name|segments
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Segment
argument_list|>
argument_list|()
decl_stmt|;
comment|// first, go over and compute the search ones...
name|Searcher
name|searcher
init|=
name|acquireSearcher
argument_list|(
literal|"segments"
argument_list|)
decl_stmt|;
try|try
block|{
for|for
control|(
name|AtomicReaderContext
name|reader
range|:
name|searcher
operator|.
name|reader
argument_list|()
operator|.
name|leaves
argument_list|()
control|)
block|{
assert|assert
name|reader
operator|.
name|reader
argument_list|()
operator|instanceof
name|SegmentReader
assert|;
name|SegmentCommitInfo
name|info
init|=
name|SegmentReaderUtils
operator|.
name|segmentReader
argument_list|(
name|reader
operator|.
name|reader
argument_list|()
argument_list|)
operator|.
name|getSegmentInfo
argument_list|()
decl_stmt|;
assert|assert
operator|!
name|segments
operator|.
name|containsKey
argument_list|(
name|info
operator|.
name|info
operator|.
name|name
argument_list|)
assert|;
name|Segment
name|segment
init|=
operator|new
name|Segment
argument_list|(
name|info
operator|.
name|info
operator|.
name|name
argument_list|)
decl_stmt|;
name|segment
operator|.
name|search
operator|=
literal|true
expr_stmt|;
name|segment
operator|.
name|docCount
operator|=
name|reader
operator|.
name|reader
argument_list|()
operator|.
name|numDocs
argument_list|()
expr_stmt|;
name|segment
operator|.
name|delDocCount
operator|=
name|reader
operator|.
name|reader
argument_list|()
operator|.
name|numDeletedDocs
argument_list|()
expr_stmt|;
name|segment
operator|.
name|version
operator|=
name|info
operator|.
name|info
operator|.
name|getVersion
argument_list|()
expr_stmt|;
name|segment
operator|.
name|compound
operator|=
name|info
operator|.
name|info
operator|.
name|getUseCompoundFile
argument_list|()
expr_stmt|;
try|try
block|{
name|segment
operator|.
name|sizeInBytes
operator|=
name|info
operator|.
name|sizeInBytes
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"failed to get size for [{}]"
argument_list|,
name|e
argument_list|,
name|info
operator|.
name|info
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
name|segment
operator|.
name|memoryInBytes
operator|=
name|getReaderRamBytesUsed
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|segments
operator|.
name|put
argument_list|(
name|info
operator|.
name|info
operator|.
name|name
argument_list|,
name|segment
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|searcher
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
comment|// now, correlate or add the committed ones...
if|if
condition|(
name|lastCommittedSegmentInfos
operator|!=
literal|null
condition|)
block|{
name|SegmentInfos
name|infos
init|=
name|lastCommittedSegmentInfos
decl_stmt|;
for|for
control|(
name|SegmentCommitInfo
name|info
range|:
name|infos
control|)
block|{
name|Segment
name|segment
init|=
name|segments
operator|.
name|get
argument_list|(
name|info
operator|.
name|info
operator|.
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|segment
operator|==
literal|null
condition|)
block|{
name|segment
operator|=
operator|new
name|Segment
argument_list|(
name|info
operator|.
name|info
operator|.
name|name
argument_list|)
expr_stmt|;
name|segment
operator|.
name|search
operator|=
literal|false
expr_stmt|;
name|segment
operator|.
name|committed
operator|=
literal|true
expr_stmt|;
name|segment
operator|.
name|docCount
operator|=
name|info
operator|.
name|info
operator|.
name|getDocCount
argument_list|()
expr_stmt|;
name|segment
operator|.
name|delDocCount
operator|=
name|info
operator|.
name|getDelCount
argument_list|()
expr_stmt|;
name|segment
operator|.
name|version
operator|=
name|info
operator|.
name|info
operator|.
name|getVersion
argument_list|()
expr_stmt|;
name|segment
operator|.
name|compound
operator|=
name|info
operator|.
name|info
operator|.
name|getUseCompoundFile
argument_list|()
expr_stmt|;
try|try
block|{
name|segment
operator|.
name|sizeInBytes
operator|=
name|info
operator|.
name|sizeInBytes
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"failed to get size for [{}]"
argument_list|,
name|e
argument_list|,
name|info
operator|.
name|info
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
name|segments
operator|.
name|put
argument_list|(
name|info
operator|.
name|info
operator|.
name|name
argument_list|,
name|segment
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|segment
operator|.
name|committed
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
name|Segment
index|[]
name|segmentsArr
init|=
name|segments
operator|.
name|values
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|Segment
index|[
name|segments
operator|.
name|values
argument_list|()
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|segmentsArr
argument_list|,
operator|new
name|Comparator
argument_list|<
name|Segment
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|Segment
name|o1
parameter_list|,
name|Segment
name|o2
parameter_list|)
block|{
return|return
call|(
name|int
call|)
argument_list|(
name|o1
operator|.
name|getGeneration
argument_list|()
operator|-
name|o2
operator|.
name|getGeneration
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// fill in the merges flag
name|Set
argument_list|<
name|OnGoingMerge
argument_list|>
name|onGoingMerges
init|=
name|mergeScheduler
operator|.
name|onGoingMerges
argument_list|()
decl_stmt|;
for|for
control|(
name|OnGoingMerge
name|onGoingMerge
range|:
name|onGoingMerges
control|)
block|{
for|for
control|(
name|SegmentCommitInfo
name|segmentInfoPerCommit
range|:
name|onGoingMerge
operator|.
name|getMergedSegments
argument_list|()
control|)
block|{
for|for
control|(
name|Segment
name|segment
range|:
name|segmentsArr
control|)
block|{
if|if
condition|(
name|segment
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|segmentInfoPerCommit
operator|.
name|info
operator|.
name|name
argument_list|)
condition|)
block|{
name|segment
operator|.
name|mergeId
operator|=
name|onGoingMerge
operator|.
name|getId
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|segmentsArr
argument_list|)
return|;
block|}
finally|finally
block|{
name|rwl
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|ElasticsearchException
block|{
name|rwl
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|innerClose
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|rwl
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
try|try
block|{
comment|// wait for recoveries to join and close all resources / IO streams
name|int
name|ongoingRecoveries
init|=
name|onGoingRecoveries
operator|.
name|awaitNoRecoveries
argument_list|(
literal|5000
argument_list|)
decl_stmt|;
if|if
condition|(
name|ongoingRecoveries
operator|>
literal|0
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"Waiting for ongoing recoveries timed out on close currently ongoing disoveries: [{}]"
argument_list|,
name|ongoingRecoveries
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// ignore& restore interrupt
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|FailEngineOnMergeFailure
class|class
name|FailEngineOnMergeFailure
implements|implements
name|MergeSchedulerProvider
operator|.
name|FailureListener
block|{
annotation|@
name|Override
DECL|method|onFailedMerge
specifier|public
name|void
name|onFailedMerge
parameter_list|(
name|MergePolicy
operator|.
name|MergeException
name|e
parameter_list|)
block|{
name|failEngine
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|failEngine
specifier|private
name|void
name|failEngine
parameter_list|(
name|Throwable
name|failure
parameter_list|)
block|{
synchronized|synchronized
init|(
name|failedEngineMutex
init|)
block|{
if|if
condition|(
name|failedEngine
operator|!=
literal|null
condition|)
block|{
return|return;
block|}
name|logger
operator|.
name|warn
argument_list|(
literal|"failed engine"
argument_list|,
name|failure
argument_list|)
expr_stmt|;
name|failedEngine
operator|=
name|failure
expr_stmt|;
for|for
control|(
name|FailedEngineListener
name|listener
range|:
name|failedEngineListeners
control|)
block|{
name|listener
operator|.
name|onFailedEngine
argument_list|(
name|shardId
argument_list|,
name|failure
argument_list|)
expr_stmt|;
block|}
name|innerClose
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|innerClose
specifier|private
name|void
name|innerClose
parameter_list|()
block|{
if|if
condition|(
name|closed
condition|)
block|{
return|return;
block|}
name|indexSettingsService
operator|.
name|removeListener
argument_list|(
name|applySettings
argument_list|)
expr_stmt|;
name|closed
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|versionMap
operator|.
name|clear
argument_list|()
expr_stmt|;
name|this
operator|.
name|failedEngineListeners
operator|.
name|clear
argument_list|()
expr_stmt|;
try|try
block|{
try|try
block|{
name|IOUtils
operator|.
name|close
argument_list|(
name|searcherManager
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Failed to close SearcherManager"
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
comment|// no need to commit in this case!, we snapshot before we close the shard, so translog and all sync'ed
if|if
condition|(
name|indexWriter
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|indexWriter
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AlreadyClosedException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"failed to rollback writer on close"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|indexWriter
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|versionKey
specifier|private
name|HashedBytesRef
name|versionKey
parameter_list|(
name|Term
name|uid
parameter_list|)
block|{
return|return
operator|new
name|HashedBytesRef
argument_list|(
name|uid
operator|.
name|bytes
argument_list|()
argument_list|)
return|;
block|}
DECL|method|dirtyLock
specifier|private
name|Object
name|dirtyLock
parameter_list|(
name|BytesRef
name|uid
parameter_list|)
block|{
name|int
name|hash
init|=
name|DjbHashFunction
operator|.
name|DJB_HASH
argument_list|(
name|uid
operator|.
name|bytes
argument_list|,
name|uid
operator|.
name|offset
argument_list|,
name|uid
operator|.
name|length
argument_list|)
decl_stmt|;
comment|// abs returns Integer.MIN_VALUE, so we need to protect against it...
if|if
condition|(
name|hash
operator|==
name|Integer
operator|.
name|MIN_VALUE
condition|)
block|{
name|hash
operator|=
literal|0
expr_stmt|;
block|}
return|return
name|dirtyLocks
index|[
name|Math
operator|.
name|abs
argument_list|(
name|hash
argument_list|)
operator|%
name|dirtyLocks
operator|.
name|length
index|]
return|;
block|}
DECL|method|dirtyLock
specifier|private
name|Object
name|dirtyLock
parameter_list|(
name|Term
name|uid
parameter_list|)
block|{
return|return
name|dirtyLock
argument_list|(
name|uid
operator|.
name|bytes
argument_list|()
argument_list|)
return|;
block|}
DECL|method|loadCurrentVersionFromIndex
specifier|private
name|long
name|loadCurrentVersionFromIndex
parameter_list|(
name|Term
name|uid
parameter_list|)
throws|throws
name|IOException
block|{
name|Searcher
name|searcher
init|=
name|acquireSearcher
argument_list|(
literal|"load_version"
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|Versions
operator|.
name|loadVersion
argument_list|(
name|searcher
operator|.
name|reader
argument_list|()
argument_list|,
name|uid
argument_list|)
return|;
block|}
finally|finally
block|{
name|searcher
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Returns whether a leaf reader comes from a merge (versus flush or addIndexes).      */
DECL|method|isMergedSegment
specifier|private
specifier|static
name|boolean
name|isMergedSegment
parameter_list|(
name|AtomicReader
name|reader
parameter_list|)
block|{
comment|// We expect leaves to be segment readers
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|diagnostics
init|=
name|SegmentReaderUtils
operator|.
name|segmentReader
argument_list|(
name|reader
argument_list|)
operator|.
name|getSegmentInfo
argument_list|()
operator|.
name|info
operator|.
name|getDiagnostics
argument_list|()
decl_stmt|;
specifier|final
name|String
name|source
init|=
name|diagnostics
operator|.
name|get
argument_list|(
name|IndexWriter
operator|.
name|SOURCE
argument_list|)
decl_stmt|;
assert|assert
name|Arrays
operator|.
name|asList
argument_list|(
name|IndexWriter
operator|.
name|SOURCE_ADDINDEXES_READERS
argument_list|,
name|IndexWriter
operator|.
name|SOURCE_FLUSH
argument_list|,
name|IndexWriter
operator|.
name|SOURCE_MERGE
argument_list|)
operator|.
name|contains
argument_list|(
name|source
argument_list|)
operator|:
literal|"Unknown source "
operator|+
name|source
assert|;
return|return
name|IndexWriter
operator|.
name|SOURCE_MERGE
operator|.
name|equals
argument_list|(
name|source
argument_list|)
return|;
block|}
DECL|method|createWriter
specifier|private
name|IndexWriter
name|createWriter
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
comment|// release locks when started
if|if
condition|(
name|IndexWriter
operator|.
name|isLocked
argument_list|(
name|store
operator|.
name|directory
argument_list|()
argument_list|)
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"shard is locked, releasing lock"
argument_list|)
expr_stmt|;
name|IndexWriter
operator|.
name|unlock
argument_list|(
name|store
operator|.
name|directory
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|boolean
name|create
init|=
operator|!
name|Lucene
operator|.
name|indexExists
argument_list|(
name|store
operator|.
name|directory
argument_list|()
argument_list|)
decl_stmt|;
name|IndexWriterConfig
name|config
init|=
operator|new
name|IndexWriterConfig
argument_list|(
name|Lucene
operator|.
name|VERSION
argument_list|,
name|analysisService
operator|.
name|defaultIndexAnalyzer
argument_list|()
argument_list|)
decl_stmt|;
name|config
operator|.
name|setOpenMode
argument_list|(
name|create
condition|?
name|IndexWriterConfig
operator|.
name|OpenMode
operator|.
name|CREATE
else|:
name|IndexWriterConfig
operator|.
name|OpenMode
operator|.
name|APPEND
argument_list|)
expr_stmt|;
name|config
operator|.
name|setIndexDeletionPolicy
argument_list|(
name|deletionPolicy
argument_list|)
expr_stmt|;
name|config
operator|.
name|setMergeScheduler
argument_list|(
name|mergeScheduler
operator|.
name|newMergeScheduler
argument_list|()
argument_list|)
expr_stmt|;
name|MergePolicy
name|mergePolicy
init|=
name|mergePolicyProvider
operator|.
name|newMergePolicy
argument_list|()
decl_stmt|;
comment|// Give us the opportunity to upgrade old segments while performing
comment|// background merges
name|mergePolicy
operator|=
operator|new
name|IndexUpgraderMergePolicy
argument_list|(
name|mergePolicy
argument_list|)
expr_stmt|;
name|config
operator|.
name|setMergePolicy
argument_list|(
name|mergePolicy
argument_list|)
expr_stmt|;
name|config
operator|.
name|setSimilarity
argument_list|(
name|similarityService
operator|.
name|similarity
argument_list|()
argument_list|)
expr_stmt|;
name|config
operator|.
name|setRAMBufferSizeMB
argument_list|(
name|indexingBufferSize
operator|.
name|mbFrac
argument_list|()
argument_list|)
expr_stmt|;
name|config
operator|.
name|setMaxThreadStates
argument_list|(
name|indexConcurrency
argument_list|)
expr_stmt|;
name|config
operator|.
name|setCodec
argument_list|(
name|codecService
operator|.
name|codec
argument_list|(
name|codecName
argument_list|)
argument_list|)
expr_stmt|;
comment|/* We set this timeout to a highish value to work around              * the default poll interval in the Lucene lock that is               * 1000ms by default. We might need to poll multiple times              * here but with 1s poll this is only executed twice at most              * in combination with the default writelock timeout*/
name|config
operator|.
name|setWriteLockTimeout
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|config
operator|.
name|setUseCompoundFile
argument_list|(
name|this
operator|.
name|compoundOnFlush
argument_list|)
expr_stmt|;
comment|// Warm-up hook for newly-merged segments. Warming up segments here is better since it will be performed at the end
comment|// of the merge operation and won't slow down _refresh
name|config
operator|.
name|setMergedSegmentWarmer
argument_list|(
operator|new
name|IndexReaderWarmer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|warm
parameter_list|(
name|AtomicReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
assert|assert
name|isMergedSegment
argument_list|(
name|reader
argument_list|)
assert|;
specifier|final
name|Engine
operator|.
name|Searcher
name|searcher
init|=
operator|new
name|SimpleSearcher
argument_list|(
literal|"warmer"
argument_list|,
operator|new
name|IndexSearcher
argument_list|(
name|reader
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|IndicesWarmer
operator|.
name|WarmerContext
name|context
init|=
operator|new
name|IndicesWarmer
operator|.
name|WarmerContext
argument_list|(
name|shardId
argument_list|,
name|searcher
argument_list|)
decl_stmt|;
if|if
condition|(
name|warmer
operator|!=
literal|null
condition|)
name|warmer
operator|.
name|warm
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|// Don't fail a merge if the warm-up failed
if|if
condition|(
operator|!
name|closed
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Warm-up failed"
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|t
operator|instanceof
name|Error
condition|)
block|{
comment|// assertion/out-of-memory error, don't ignore those
throw|throw
operator|(
name|Error
operator|)
name|t
throw|;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
return|return
operator|new
name|IndexWriter
argument_list|(
name|store
operator|.
name|directory
argument_list|()
argument_list|,
name|config
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|LockObtainFailedException
name|ex
parameter_list|)
block|{
name|boolean
name|isLocked
init|=
name|IndexWriter
operator|.
name|isLocked
argument_list|(
name|store
operator|.
name|directory
argument_list|()
argument_list|)
decl_stmt|;
name|logger
operator|.
name|warn
argument_list|(
literal|"Could not lock IndexWriter isLocked [{}]"
argument_list|,
name|ex
argument_list|,
name|isLocked
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
block|}
DECL|field|INDEX_INDEX_CONCURRENCY
specifier|public
specifier|static
specifier|final
name|String
name|INDEX_INDEX_CONCURRENCY
init|=
literal|"index.index_concurrency"
decl_stmt|;
DECL|field|INDEX_COMPOUND_ON_FLUSH
specifier|public
specifier|static
specifier|final
name|String
name|INDEX_COMPOUND_ON_FLUSH
init|=
literal|"index.compound_on_flush"
decl_stmt|;
DECL|field|INDEX_GC_DELETES
specifier|public
specifier|static
specifier|final
name|String
name|INDEX_GC_DELETES
init|=
literal|"index.gc_deletes"
decl_stmt|;
DECL|field|INDEX_FAIL_ON_MERGE_FAILURE
specifier|public
specifier|static
specifier|final
name|String
name|INDEX_FAIL_ON_MERGE_FAILURE
init|=
literal|"index.fail_on_merge_failure"
decl_stmt|;
DECL|class|ApplySettings
class|class
name|ApplySettings
implements|implements
name|IndexSettingsService
operator|.
name|Listener
block|{
annotation|@
name|Override
DECL|method|onRefreshSettings
specifier|public
name|void
name|onRefreshSettings
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
name|long
name|gcDeletesInMillis
init|=
name|settings
operator|.
name|getAsTime
argument_list|(
name|INDEX_GC_DELETES
argument_list|,
name|TimeValue
operator|.
name|timeValueMillis
argument_list|(
name|InternalEngine
operator|.
name|this
operator|.
name|gcDeletesInMillis
argument_list|)
argument_list|)
operator|.
name|millis
argument_list|()
decl_stmt|;
if|if
condition|(
name|gcDeletesInMillis
operator|!=
name|InternalEngine
operator|.
name|this
operator|.
name|gcDeletesInMillis
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"updating index.gc_deletes from [{}] to [{}]"
argument_list|,
name|TimeValue
operator|.
name|timeValueMillis
argument_list|(
name|InternalEngine
operator|.
name|this
operator|.
name|gcDeletesInMillis
argument_list|)
argument_list|,
name|TimeValue
operator|.
name|timeValueMillis
argument_list|(
name|gcDeletesInMillis
argument_list|)
argument_list|)
expr_stmt|;
name|InternalEngine
operator|.
name|this
operator|.
name|gcDeletesInMillis
operator|=
name|gcDeletesInMillis
expr_stmt|;
block|}
specifier|final
name|boolean
name|compoundOnFlush
init|=
name|settings
operator|.
name|getAsBoolean
argument_list|(
name|INDEX_COMPOUND_ON_FLUSH
argument_list|,
name|InternalEngine
operator|.
name|this
operator|.
name|compoundOnFlush
argument_list|)
decl_stmt|;
if|if
condition|(
name|compoundOnFlush
operator|!=
name|InternalEngine
operator|.
name|this
operator|.
name|compoundOnFlush
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"updating {} from [{}] to [{}]"
argument_list|,
name|InternalEngine
operator|.
name|INDEX_COMPOUND_ON_FLUSH
argument_list|,
name|InternalEngine
operator|.
name|this
operator|.
name|compoundOnFlush
argument_list|,
name|compoundOnFlush
argument_list|)
expr_stmt|;
name|InternalEngine
operator|.
name|this
operator|.
name|compoundOnFlush
operator|=
name|compoundOnFlush
expr_stmt|;
name|indexWriter
operator|.
name|getConfig
argument_list|()
operator|.
name|setUseCompoundFile
argument_list|(
name|compoundOnFlush
argument_list|)
expr_stmt|;
block|}
name|int
name|indexConcurrency
init|=
name|settings
operator|.
name|getAsInt
argument_list|(
name|INDEX_INDEX_CONCURRENCY
argument_list|,
name|InternalEngine
operator|.
name|this
operator|.
name|indexConcurrency
argument_list|)
decl_stmt|;
name|boolean
name|failOnMergeFailure
init|=
name|settings
operator|.
name|getAsBoolean
argument_list|(
name|INDEX_FAIL_ON_MERGE_FAILURE
argument_list|,
name|InternalEngine
operator|.
name|this
operator|.
name|failOnMergeFailure
argument_list|)
decl_stmt|;
name|String
name|codecName
init|=
name|settings
operator|.
name|get
argument_list|(
name|INDEX_CODEC
argument_list|,
name|InternalEngine
operator|.
name|this
operator|.
name|codecName
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|codecBloomLoad
init|=
name|settings
operator|.
name|getAsBoolean
argument_list|(
name|CodecService
operator|.
name|INDEX_CODEC_BLOOM_LOAD
argument_list|,
name|codecService
operator|.
name|isLoadBloomFilter
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|requiresFlushing
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|indexConcurrency
operator|!=
name|InternalEngine
operator|.
name|this
operator|.
name|indexConcurrency
operator|||
operator|!
name|codecName
operator|.
name|equals
argument_list|(
name|InternalEngine
operator|.
name|this
operator|.
name|codecName
argument_list|)
operator|||
name|failOnMergeFailure
operator|!=
name|InternalEngine
operator|.
name|this
operator|.
name|failOnMergeFailure
operator|||
name|codecBloomLoad
operator|!=
name|codecService
operator|.
name|isLoadBloomFilter
argument_list|()
condition|)
block|{
name|rwl
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|indexConcurrency
operator|!=
name|InternalEngine
operator|.
name|this
operator|.
name|indexConcurrency
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"updating index.index_concurrency from [{}] to [{}]"
argument_list|,
name|InternalEngine
operator|.
name|this
operator|.
name|indexConcurrency
argument_list|,
name|indexConcurrency
argument_list|)
expr_stmt|;
name|InternalEngine
operator|.
name|this
operator|.
name|indexConcurrency
operator|=
name|indexConcurrency
expr_stmt|;
comment|// we have to flush in this case, since it only applies on a new index writer
name|requiresFlushing
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|codecName
operator|.
name|equals
argument_list|(
name|InternalEngine
operator|.
name|this
operator|.
name|codecName
argument_list|)
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"updating index.codec from [{}] to [{}]"
argument_list|,
name|InternalEngine
operator|.
name|this
operator|.
name|codecName
argument_list|,
name|codecName
argument_list|)
expr_stmt|;
name|InternalEngine
operator|.
name|this
operator|.
name|codecName
operator|=
name|codecName
expr_stmt|;
comment|// we want to flush in this case, so the new codec will be reflected right away...
name|requiresFlushing
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|failOnMergeFailure
operator|!=
name|InternalEngine
operator|.
name|this
operator|.
name|failOnMergeFailure
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"updating {} from [{}] to [{}]"
argument_list|,
name|InternalEngine
operator|.
name|INDEX_FAIL_ON_MERGE_FAILURE
argument_list|,
name|InternalEngine
operator|.
name|this
operator|.
name|failOnMergeFailure
argument_list|,
name|failOnMergeFailure
argument_list|)
expr_stmt|;
name|InternalEngine
operator|.
name|this
operator|.
name|failOnMergeFailure
operator|=
name|failOnMergeFailure
expr_stmt|;
block|}
if|if
condition|(
name|codecBloomLoad
operator|!=
name|codecService
operator|.
name|isLoadBloomFilter
argument_list|()
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"updating {} from [{}] to [{}]"
argument_list|,
name|CodecService
operator|.
name|INDEX_CODEC_BLOOM_LOAD
argument_list|,
name|codecService
operator|.
name|isLoadBloomFilter
argument_list|()
argument_list|,
name|codecBloomLoad
argument_list|)
expr_stmt|;
name|codecService
operator|.
name|setLoadBloomFilter
argument_list|(
name|codecBloomLoad
argument_list|)
expr_stmt|;
comment|// we need to flush in this case, to load/unload the bloom filters
name|requiresFlushing
operator|=
literal|true
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|rwl
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|requiresFlushing
condition|)
block|{
name|flush
argument_list|(
operator|new
name|Flush
argument_list|()
operator|.
name|type
argument_list|(
name|Flush
operator|.
name|Type
operator|.
name|NEW_WRITER
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|buildSearchManager
specifier|private
name|SearcherManager
name|buildSearchManager
parameter_list|(
name|IndexWriter
name|indexWriter
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|SearcherManager
argument_list|(
name|indexWriter
argument_list|,
literal|true
argument_list|,
name|searcherFactory
argument_list|)
return|;
block|}
DECL|class|EngineSearcher
specifier|static
class|class
name|EngineSearcher
implements|implements
name|Searcher
block|{
DECL|field|source
specifier|private
specifier|final
name|String
name|source
decl_stmt|;
DECL|field|searcher
specifier|private
specifier|final
name|IndexSearcher
name|searcher
decl_stmt|;
DECL|field|manager
specifier|private
specifier|final
name|SearcherManager
name|manager
decl_stmt|;
DECL|method|EngineSearcher
specifier|private
name|EngineSearcher
parameter_list|(
name|String
name|source
parameter_list|,
name|IndexSearcher
name|searcher
parameter_list|,
name|SearcherManager
name|manager
parameter_list|)
block|{
name|this
operator|.
name|source
operator|=
name|source
expr_stmt|;
name|this
operator|.
name|searcher
operator|=
name|searcher
expr_stmt|;
name|this
operator|.
name|manager
operator|=
name|manager
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|source
specifier|public
name|String
name|source
parameter_list|()
block|{
return|return
name|this
operator|.
name|source
return|;
block|}
annotation|@
name|Override
DECL|method|reader
specifier|public
name|IndexReader
name|reader
parameter_list|()
block|{
return|return
name|searcher
operator|.
name|getIndexReader
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|searcher
specifier|public
name|IndexSearcher
name|searcher
parameter_list|()
block|{
return|return
name|searcher
return|;
block|}
annotation|@
name|Override
DECL|method|release
specifier|public
name|boolean
name|release
parameter_list|()
throws|throws
name|ElasticsearchException
block|{
try|try
block|{
name|manager
operator|.
name|release
argument_list|(
name|searcher
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|AlreadyClosedException
name|e
parameter_list|)
block|{
comment|/* this one can happen if we already closed the                  * underlying store / directory and we call into the                  * IndexWriter to free up pending files. */
return|return
literal|false
return|;
block|}
block|}
block|}
DECL|class|VersionValue
specifier|static
class|class
name|VersionValue
block|{
DECL|field|version
specifier|private
specifier|final
name|long
name|version
decl_stmt|;
DECL|field|delete
specifier|private
specifier|final
name|boolean
name|delete
decl_stmt|;
DECL|field|time
specifier|private
specifier|final
name|long
name|time
decl_stmt|;
DECL|field|translogLocation
specifier|private
specifier|final
name|Translog
operator|.
name|Location
name|translogLocation
decl_stmt|;
DECL|method|VersionValue
name|VersionValue
parameter_list|(
name|long
name|version
parameter_list|,
name|boolean
name|delete
parameter_list|,
name|long
name|time
parameter_list|,
name|Translog
operator|.
name|Location
name|translogLocation
parameter_list|)
block|{
name|this
operator|.
name|version
operator|=
name|version
expr_stmt|;
name|this
operator|.
name|delete
operator|=
name|delete
expr_stmt|;
name|this
operator|.
name|time
operator|=
name|time
expr_stmt|;
name|this
operator|.
name|translogLocation
operator|=
name|translogLocation
expr_stmt|;
block|}
DECL|method|time
specifier|public
name|long
name|time
parameter_list|()
block|{
return|return
name|this
operator|.
name|time
return|;
block|}
DECL|method|version
specifier|public
name|long
name|version
parameter_list|()
block|{
return|return
name|version
return|;
block|}
DECL|method|delete
specifier|public
name|boolean
name|delete
parameter_list|()
block|{
return|return
name|delete
return|;
block|}
DECL|method|translogLocation
specifier|public
name|Translog
operator|.
name|Location
name|translogLocation
parameter_list|()
block|{
return|return
name|this
operator|.
name|translogLocation
return|;
block|}
block|}
DECL|class|SearchFactory
class|class
name|SearchFactory
extends|extends
name|SearcherFactory
block|{
annotation|@
name|Override
DECL|method|newSearcher
specifier|public
name|IndexSearcher
name|newSearcher
parameter_list|(
name|IndexReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
name|IndexSearcher
name|searcher
init|=
operator|new
name|IndexSearcher
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|searcher
operator|.
name|setSimilarity
argument_list|(
name|similarityService
operator|.
name|similarity
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|warmer
operator|!=
literal|null
condition|)
block|{
comment|// we need to pass a custom searcher that does not release anything on Engine.Search Release,
comment|// we will release explicitly
name|Searcher
name|currentSearcher
init|=
literal|null
decl_stmt|;
name|IndexSearcher
name|newSearcher
init|=
literal|null
decl_stmt|;
name|boolean
name|closeNewSearcher
init|=
literal|false
decl_stmt|;
try|try
block|{
if|if
condition|(
name|searcherManager
operator|==
literal|null
condition|)
block|{
comment|// fresh index writer, just do on all of it
name|newSearcher
operator|=
name|searcher
expr_stmt|;
block|}
else|else
block|{
name|currentSearcher
operator|=
name|acquireSearcher
argument_list|(
literal|"search_factory"
argument_list|)
expr_stmt|;
comment|// figure out the newSearcher, with only the new readers that are relevant for us
name|List
argument_list|<
name|IndexReader
argument_list|>
name|readers
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|AtomicReaderContext
name|newReaderContext
range|:
name|searcher
operator|.
name|getIndexReader
argument_list|()
operator|.
name|leaves
argument_list|()
control|)
block|{
if|if
condition|(
name|isMergedSegment
argument_list|(
name|newReaderContext
operator|.
name|reader
argument_list|()
argument_list|)
condition|)
block|{
comment|// merged segments are already handled by IndexWriterConfig.setMergedSegmentWarmer
continue|continue;
block|}
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|AtomicReaderContext
name|currentReaderContext
range|:
name|currentSearcher
operator|.
name|reader
argument_list|()
operator|.
name|leaves
argument_list|()
control|)
block|{
if|if
condition|(
name|currentReaderContext
operator|.
name|reader
argument_list|()
operator|.
name|getCoreCacheKey
argument_list|()
operator|.
name|equals
argument_list|(
name|newReaderContext
operator|.
name|reader
argument_list|()
operator|.
name|getCoreCacheKey
argument_list|()
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
name|readers
operator|.
name|add
argument_list|(
name|newReaderContext
operator|.
name|reader
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|readers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// we don't want to close the inner readers, just increase ref on them
name|newSearcher
operator|=
operator|new
name|IndexSearcher
argument_list|(
operator|new
name|MultiReader
argument_list|(
name|readers
operator|.
name|toArray
argument_list|(
operator|new
name|IndexReader
index|[
name|readers
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|closeNewSearcher
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|newSearcher
operator|!=
literal|null
condition|)
block|{
name|IndicesWarmer
operator|.
name|WarmerContext
name|context
init|=
operator|new
name|IndicesWarmer
operator|.
name|WarmerContext
argument_list|(
name|shardId
argument_list|,
operator|new
name|SimpleSearcher
argument_list|(
literal|"warmer"
argument_list|,
name|newSearcher
argument_list|)
argument_list|)
decl_stmt|;
name|warmer
operator|.
name|warm
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|closed
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"failed to prepare/warm"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
comment|// no need to release the fullSearcher, nothing really is done...
if|if
condition|(
name|currentSearcher
operator|!=
literal|null
condition|)
block|{
name|currentSearcher
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|newSearcher
operator|!=
literal|null
operator|&&
name|closeNewSearcher
condition|)
block|{
name|IOUtils
operator|.
name|closeWhileHandlingException
argument_list|(
name|newSearcher
operator|.
name|getIndexReader
argument_list|()
argument_list|)
expr_stmt|;
comment|// ignore
block|}
block|}
block|}
return|return
name|searcher
return|;
block|}
block|}
DECL|class|RecoveryCounter
specifier|private
specifier|static
specifier|final
class|class
name|RecoveryCounter
block|{
DECL|field|ongoingRecoveries
specifier|private
specifier|volatile
name|int
name|ongoingRecoveries
init|=
literal|0
decl_stmt|;
DECL|method|increment
specifier|synchronized
name|void
name|increment
parameter_list|()
block|{
name|ongoingRecoveries
operator|++
expr_stmt|;
block|}
DECL|method|decrement
specifier|synchronized
name|void
name|decrement
parameter_list|()
block|{
name|ongoingRecoveries
operator|--
expr_stmt|;
if|if
condition|(
name|ongoingRecoveries
operator|==
literal|0
condition|)
block|{
name|notifyAll
argument_list|()
expr_stmt|;
comment|// notify waiting threads - we only wait on ongoingRecoveries == 0
block|}
assert|assert
name|ongoingRecoveries
operator|>=
literal|0
operator|:
literal|"ongoingRecoveries must be>= 0 but was: "
operator|+
name|ongoingRecoveries
assert|;
block|}
DECL|method|get
name|int
name|get
parameter_list|()
block|{
comment|// volatile read - no sync needed
return|return
name|ongoingRecoveries
return|;
block|}
DECL|method|awaitNoRecoveries
specifier|synchronized
name|int
name|awaitNoRecoveries
parameter_list|(
name|long
name|timeout
parameter_list|)
throws|throws
name|InterruptedException
block|{
if|if
condition|(
name|ongoingRecoveries
operator|>
literal|0
condition|)
block|{
comment|// no loop here - we either time out or we are done!
name|wait
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
block|}
return|return
name|ongoingRecoveries
return|;
block|}
block|}
block|}
end_class

end_unit

