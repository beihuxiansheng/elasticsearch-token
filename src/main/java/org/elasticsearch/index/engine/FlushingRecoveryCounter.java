begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.engine
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|ESLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|IllegalIndexShardStateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|store
operator|.
name|Store
import|;
end_import

begin_comment
comment|/**  * A special {@link RecoveryCounter} that flushes the engine when all  * recoveries have completed  */
end_comment

begin_class
DECL|class|FlushingRecoveryCounter
specifier|public
specifier|final
class|class
name|FlushingRecoveryCounter
extends|extends
name|RecoveryCounter
block|{
DECL|field|engine
specifier|private
specifier|final
name|Engine
name|engine
decl_stmt|;
DECL|field|logger
specifier|private
specifier|final
name|ESLogger
name|logger
decl_stmt|;
DECL|method|FlushingRecoveryCounter
name|FlushingRecoveryCounter
parameter_list|(
name|Engine
name|engine
parameter_list|,
name|Store
name|store
parameter_list|,
name|ESLogger
name|logger
parameter_list|)
block|{
name|super
argument_list|(
name|store
argument_list|)
expr_stmt|;
name|this
operator|.
name|engine
operator|=
name|engine
expr_stmt|;
name|this
operator|.
name|logger
operator|=
name|logger
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|endRecovery
name|int
name|endRecovery
parameter_list|()
throws|throws
name|ElasticsearchException
block|{
name|int
name|left
init|=
name|super
operator|.
name|endRecovery
argument_list|()
decl_stmt|;
if|if
condition|(
name|left
operator|==
literal|0
condition|)
block|{
try|try
block|{
name|engine
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalIndexShardStateException
decl||
name|FlushNotAllowedEngineException
name|e
parameter_list|)
block|{
comment|// we are being closed, or in created state, ignore
comment|// OR, we are not allowed to perform flush, ignore
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"failed to flush shard post recovery"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|left
return|;
block|}
block|}
end_class

end_unit

