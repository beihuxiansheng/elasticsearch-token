begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.merge.policy
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|merge
operator|.
name|policy
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TieredMergePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|ByteSizeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|ByteSizeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|settings
operator|.
name|IndexSettingsService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|store
operator|.
name|Store
import|;
end_import

begin_class
DECL|class|TieredMergePolicyProvider
specifier|public
class|class
name|TieredMergePolicyProvider
extends|extends
name|AbstractMergePolicyProvider
argument_list|<
name|TieredMergePolicy
argument_list|>
block|{
DECL|field|indexSettingsService
specifier|private
specifier|final
name|IndexSettingsService
name|indexSettingsService
decl_stmt|;
DECL|field|applySettings
specifier|private
specifier|final
name|ApplySettings
name|applySettings
init|=
operator|new
name|ApplySettings
argument_list|()
decl_stmt|;
DECL|field|mergePolicy
specifier|private
specifier|final
name|TieredMergePolicy
name|mergePolicy
init|=
operator|new
name|TieredMergePolicy
argument_list|()
decl_stmt|;
DECL|field|DEFAULT_EXPUNGE_DELETES_ALLOWED
specifier|public
specifier|static
specifier|final
name|double
name|DEFAULT_EXPUNGE_DELETES_ALLOWED
init|=
literal|10d
decl_stmt|;
DECL|field|DEFAULT_FLOOR_SEGMENT
specifier|public
specifier|static
specifier|final
name|ByteSizeValue
name|DEFAULT_FLOOR_SEGMENT
init|=
operator|new
name|ByteSizeValue
argument_list|(
literal|2
argument_list|,
name|ByteSizeUnit
operator|.
name|MB
argument_list|)
decl_stmt|;
DECL|field|DEFAULT_MAX_MERGE_AT_ONCE
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_MAX_MERGE_AT_ONCE
init|=
literal|10
decl_stmt|;
DECL|field|DEFAULT_MAX_MERGE_AT_ONCE_EXPLICIT
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_MAX_MERGE_AT_ONCE_EXPLICIT
init|=
literal|30
decl_stmt|;
DECL|field|DEFAULT_MAX_MERGED_SEGMENT
specifier|public
specifier|static
specifier|final
name|ByteSizeValue
name|DEFAULT_MAX_MERGED_SEGMENT
init|=
operator|new
name|ByteSizeValue
argument_list|(
literal|5
argument_list|,
name|ByteSizeUnit
operator|.
name|GB
argument_list|)
decl_stmt|;
DECL|field|DEFAULT_SEGMENTS_PER_TIER
specifier|public
specifier|static
specifier|final
name|double
name|DEFAULT_SEGMENTS_PER_TIER
init|=
literal|10.0d
decl_stmt|;
DECL|field|DEFAULT_RECLAIM_DELETES_WEIGHT
specifier|public
specifier|static
specifier|final
name|double
name|DEFAULT_RECLAIM_DELETES_WEIGHT
init|=
literal|2.0d
decl_stmt|;
annotation|@
name|Inject
DECL|method|TieredMergePolicyProvider
specifier|public
name|TieredMergePolicyProvider
parameter_list|(
name|Store
name|store
parameter_list|,
name|IndexSettingsService
name|indexSettingsService
parameter_list|)
block|{
name|super
argument_list|(
name|store
argument_list|)
expr_stmt|;
name|this
operator|.
name|indexSettingsService
operator|=
name|indexSettingsService
expr_stmt|;
name|double
name|forceMergeDeletesPctAllowed
init|=
name|componentSettings
operator|.
name|getAsDouble
argument_list|(
literal|"expunge_deletes_allowed"
argument_list|,
name|DEFAULT_EXPUNGE_DELETES_ALLOWED
argument_list|)
decl_stmt|;
comment|// percentage
name|ByteSizeValue
name|floorSegment
init|=
name|componentSettings
operator|.
name|getAsBytesSize
argument_list|(
literal|"floor_segment"
argument_list|,
name|DEFAULT_FLOOR_SEGMENT
argument_list|)
decl_stmt|;
name|int
name|maxMergeAtOnce
init|=
name|componentSettings
operator|.
name|getAsInt
argument_list|(
literal|"max_merge_at_once"
argument_list|,
name|DEFAULT_MAX_MERGE_AT_ONCE
argument_list|)
decl_stmt|;
name|int
name|maxMergeAtOnceExplicit
init|=
name|componentSettings
operator|.
name|getAsInt
argument_list|(
literal|"max_merge_at_once_explicit"
argument_list|,
name|DEFAULT_MAX_MERGE_AT_ONCE_EXPLICIT
argument_list|)
decl_stmt|;
comment|// TODO is this really a good default number for max_merge_segment, what happens for large indices, won't they end up with many segments?
name|ByteSizeValue
name|maxMergedSegment
init|=
name|componentSettings
operator|.
name|getAsBytesSize
argument_list|(
literal|"max_merged_segment"
argument_list|,
name|DEFAULT_MAX_MERGED_SEGMENT
argument_list|)
decl_stmt|;
name|double
name|segmentsPerTier
init|=
name|componentSettings
operator|.
name|getAsDouble
argument_list|(
literal|"segments_per_tier"
argument_list|,
name|DEFAULT_SEGMENTS_PER_TIER
argument_list|)
decl_stmt|;
name|double
name|reclaimDeletesWeight
init|=
name|componentSettings
operator|.
name|getAsDouble
argument_list|(
literal|"reclaim_deletes_weight"
argument_list|,
name|DEFAULT_RECLAIM_DELETES_WEIGHT
argument_list|)
decl_stmt|;
name|maxMergeAtOnce
operator|=
name|adjustMaxMergeAtOnceIfNeeded
argument_list|(
name|maxMergeAtOnce
argument_list|,
name|segmentsPerTier
argument_list|)
expr_stmt|;
name|mergePolicy
operator|.
name|setNoCFSRatio
argument_list|(
name|noCFSRatio
argument_list|)
expr_stmt|;
name|mergePolicy
operator|.
name|setForceMergeDeletesPctAllowed
argument_list|(
name|forceMergeDeletesPctAllowed
argument_list|)
expr_stmt|;
name|mergePolicy
operator|.
name|setFloorSegmentMB
argument_list|(
name|floorSegment
operator|.
name|mbFrac
argument_list|()
argument_list|)
expr_stmt|;
name|mergePolicy
operator|.
name|setMaxMergeAtOnce
argument_list|(
name|maxMergeAtOnce
argument_list|)
expr_stmt|;
name|mergePolicy
operator|.
name|setMaxMergeAtOnceExplicit
argument_list|(
name|maxMergeAtOnceExplicit
argument_list|)
expr_stmt|;
name|mergePolicy
operator|.
name|setMaxMergedSegmentMB
argument_list|(
name|maxMergedSegment
operator|.
name|mbFrac
argument_list|()
argument_list|)
expr_stmt|;
name|mergePolicy
operator|.
name|setSegmentsPerTier
argument_list|(
name|segmentsPerTier
argument_list|)
expr_stmt|;
name|mergePolicy
operator|.
name|setReclaimDeletesWeight
argument_list|(
name|reclaimDeletesWeight
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"using [tiered] merge mergePolicy with expunge_deletes_allowed[{}], floor_segment[{}], max_merge_at_once[{}], max_merge_at_once_explicit[{}], max_merged_segment[{}], segments_per_tier[{}], reclaim_deletes_weight[{}]"
argument_list|,
name|forceMergeDeletesPctAllowed
argument_list|,
name|floorSegment
argument_list|,
name|maxMergeAtOnce
argument_list|,
name|maxMergeAtOnceExplicit
argument_list|,
name|maxMergedSegment
argument_list|,
name|segmentsPerTier
argument_list|,
name|reclaimDeletesWeight
argument_list|)
expr_stmt|;
name|indexSettingsService
operator|.
name|addListener
argument_list|(
name|applySettings
argument_list|)
expr_stmt|;
block|}
DECL|method|adjustMaxMergeAtOnceIfNeeded
specifier|private
name|int
name|adjustMaxMergeAtOnceIfNeeded
parameter_list|(
name|int
name|maxMergeAtOnce
parameter_list|,
name|double
name|segmentsPerTier
parameter_list|)
block|{
comment|// fixing maxMergeAtOnce, see TieredMergePolicy#setMaxMergeAtOnce
if|if
condition|(
operator|!
operator|(
name|segmentsPerTier
operator|>=
name|maxMergeAtOnce
operator|)
condition|)
block|{
name|int
name|newMaxMergeAtOnce
init|=
operator|(
name|int
operator|)
name|segmentsPerTier
decl_stmt|;
comment|// max merge at once should be at least 2
if|if
condition|(
name|newMaxMergeAtOnce
operator|<=
literal|1
condition|)
block|{
name|newMaxMergeAtOnce
operator|=
literal|2
expr_stmt|;
block|}
name|logger
operator|.
name|debug
argument_list|(
literal|"[tiered] merge mergePolicy changing max_merge_at_once from [{}] to [{}] because segments_per_tier [{}] has to be higher or equal to it"
argument_list|,
name|maxMergeAtOnce
argument_list|,
name|newMaxMergeAtOnce
argument_list|,
name|segmentsPerTier
argument_list|)
expr_stmt|;
name|maxMergeAtOnce
operator|=
name|newMaxMergeAtOnce
expr_stmt|;
block|}
return|return
name|maxMergeAtOnce
return|;
block|}
annotation|@
name|Override
DECL|method|getMergePolicy
specifier|public
name|TieredMergePolicy
name|getMergePolicy
parameter_list|()
block|{
return|return
name|mergePolicy
return|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|ElasticsearchException
block|{
name|indexSettingsService
operator|.
name|removeListener
argument_list|(
name|applySettings
argument_list|)
expr_stmt|;
block|}
DECL|field|INDEX_MERGE_POLICY_EXPUNGE_DELETES_ALLOWED
specifier|public
specifier|static
specifier|final
name|String
name|INDEX_MERGE_POLICY_EXPUNGE_DELETES_ALLOWED
init|=
literal|"index.merge.policy.expunge_deletes_allowed"
decl_stmt|;
DECL|field|INDEX_MERGE_POLICY_FLOOR_SEGMENT
specifier|public
specifier|static
specifier|final
name|String
name|INDEX_MERGE_POLICY_FLOOR_SEGMENT
init|=
literal|"index.merge.policy.floor_segment"
decl_stmt|;
DECL|field|INDEX_MERGE_POLICY_MAX_MERGE_AT_ONCE
specifier|public
specifier|static
specifier|final
name|String
name|INDEX_MERGE_POLICY_MAX_MERGE_AT_ONCE
init|=
literal|"index.merge.policy.max_merge_at_once"
decl_stmt|;
DECL|field|INDEX_MERGE_POLICY_MAX_MERGE_AT_ONCE_EXPLICIT
specifier|public
specifier|static
specifier|final
name|String
name|INDEX_MERGE_POLICY_MAX_MERGE_AT_ONCE_EXPLICIT
init|=
literal|"index.merge.policy.max_merge_at_once_explicit"
decl_stmt|;
DECL|field|INDEX_MERGE_POLICY_MAX_MERGED_SEGMENT
specifier|public
specifier|static
specifier|final
name|String
name|INDEX_MERGE_POLICY_MAX_MERGED_SEGMENT
init|=
literal|"index.merge.policy.max_merged_segment"
decl_stmt|;
DECL|field|INDEX_MERGE_POLICY_SEGMENTS_PER_TIER
specifier|public
specifier|static
specifier|final
name|String
name|INDEX_MERGE_POLICY_SEGMENTS_PER_TIER
init|=
literal|"index.merge.policy.segments_per_tier"
decl_stmt|;
DECL|field|INDEX_MERGE_POLICY_RECLAIM_DELETES_WEIGHT
specifier|public
specifier|static
specifier|final
name|String
name|INDEX_MERGE_POLICY_RECLAIM_DELETES_WEIGHT
init|=
literal|"index.merge.policy.reclaim_deletes_weight"
decl_stmt|;
DECL|class|ApplySettings
class|class
name|ApplySettings
implements|implements
name|IndexSettingsService
operator|.
name|Listener
block|{
annotation|@
name|Override
DECL|method|onRefreshSettings
specifier|public
name|void
name|onRefreshSettings
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
specifier|final
name|double
name|oldExpungeDeletesPctAllowed
init|=
name|mergePolicy
operator|.
name|getForceMergeDeletesPctAllowed
argument_list|()
decl_stmt|;
specifier|final
name|double
name|expungeDeletesPctAllowed
init|=
name|settings
operator|.
name|getAsDouble
argument_list|(
name|INDEX_MERGE_POLICY_EXPUNGE_DELETES_ALLOWED
argument_list|,
name|oldExpungeDeletesPctAllowed
argument_list|)
decl_stmt|;
if|if
condition|(
name|expungeDeletesPctAllowed
operator|!=
name|oldExpungeDeletesPctAllowed
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"updating [expunge_deletes_allowed] from [{}] to [{}]"
argument_list|,
name|oldExpungeDeletesPctAllowed
argument_list|,
name|expungeDeletesPctAllowed
argument_list|)
expr_stmt|;
name|mergePolicy
operator|.
name|setForceMergeDeletesPctAllowed
argument_list|(
name|expungeDeletesPctAllowed
argument_list|)
expr_stmt|;
block|}
specifier|final
name|double
name|oldFloorSegmentMB
init|=
name|mergePolicy
operator|.
name|getFloorSegmentMB
argument_list|()
decl_stmt|;
specifier|final
name|ByteSizeValue
name|floorSegment
init|=
name|settings
operator|.
name|getAsBytesSize
argument_list|(
name|INDEX_MERGE_POLICY_FLOOR_SEGMENT
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|floorSegment
operator|!=
literal|null
operator|&&
name|floorSegment
operator|.
name|mbFrac
argument_list|()
operator|!=
name|oldFloorSegmentMB
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"updating [floor_segment] from [{}mb] to [{}]"
argument_list|,
name|oldFloorSegmentMB
argument_list|,
name|floorSegment
argument_list|)
expr_stmt|;
name|mergePolicy
operator|.
name|setFloorSegmentMB
argument_list|(
name|floorSegment
operator|.
name|mbFrac
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|double
name|oldSegmentsPerTier
init|=
name|mergePolicy
operator|.
name|getSegmentsPerTier
argument_list|()
decl_stmt|;
specifier|final
name|double
name|segmentsPerTier
init|=
name|settings
operator|.
name|getAsDouble
argument_list|(
name|INDEX_MERGE_POLICY_SEGMENTS_PER_TIER
argument_list|,
name|oldSegmentsPerTier
argument_list|)
decl_stmt|;
if|if
condition|(
name|segmentsPerTier
operator|!=
name|oldSegmentsPerTier
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"updating [segments_per_tier] from [{}] to [{}]"
argument_list|,
name|oldSegmentsPerTier
argument_list|,
name|segmentsPerTier
argument_list|)
expr_stmt|;
name|mergePolicy
operator|.
name|setSegmentsPerTier
argument_list|(
name|segmentsPerTier
argument_list|)
expr_stmt|;
block|}
specifier|final
name|int
name|oldMaxMergeAtOnce
init|=
name|mergePolicy
operator|.
name|getMaxMergeAtOnce
argument_list|()
decl_stmt|;
name|int
name|maxMergeAtOnce
init|=
name|settings
operator|.
name|getAsInt
argument_list|(
name|INDEX_MERGE_POLICY_MAX_MERGE_AT_ONCE
argument_list|,
name|oldMaxMergeAtOnce
argument_list|)
decl_stmt|;
if|if
condition|(
name|maxMergeAtOnce
operator|!=
name|oldMaxMergeAtOnce
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"updating [max_merge_at_once] from [{}] to [{}]"
argument_list|,
name|oldMaxMergeAtOnce
argument_list|,
name|maxMergeAtOnce
argument_list|)
expr_stmt|;
name|maxMergeAtOnce
operator|=
name|adjustMaxMergeAtOnceIfNeeded
argument_list|(
name|maxMergeAtOnce
argument_list|,
name|segmentsPerTier
argument_list|)
expr_stmt|;
name|mergePolicy
operator|.
name|setMaxMergeAtOnce
argument_list|(
name|maxMergeAtOnce
argument_list|)
expr_stmt|;
block|}
specifier|final
name|int
name|oldMaxMergeAtOnceExplicit
init|=
name|mergePolicy
operator|.
name|getMaxMergeAtOnceExplicit
argument_list|()
decl_stmt|;
specifier|final
name|int
name|maxMergeAtOnceExplicit
init|=
name|settings
operator|.
name|getAsInt
argument_list|(
name|INDEX_MERGE_POLICY_MAX_MERGE_AT_ONCE_EXPLICIT
argument_list|,
name|oldMaxMergeAtOnceExplicit
argument_list|)
decl_stmt|;
if|if
condition|(
name|maxMergeAtOnceExplicit
operator|!=
name|oldMaxMergeAtOnceExplicit
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"updating [max_merge_at_once_explicit] from [{}] to [{}]"
argument_list|,
name|oldMaxMergeAtOnceExplicit
argument_list|,
name|maxMergeAtOnceExplicit
argument_list|)
expr_stmt|;
name|mergePolicy
operator|.
name|setMaxMergeAtOnceExplicit
argument_list|(
name|maxMergeAtOnceExplicit
argument_list|)
expr_stmt|;
block|}
specifier|final
name|double
name|oldMaxMergedSegmentMB
init|=
name|mergePolicy
operator|.
name|getMaxMergedSegmentMB
argument_list|()
decl_stmt|;
specifier|final
name|ByteSizeValue
name|maxMergedSegment
init|=
name|settings
operator|.
name|getAsBytesSize
argument_list|(
name|INDEX_MERGE_POLICY_MAX_MERGED_SEGMENT
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|maxMergedSegment
operator|!=
literal|null
operator|&&
name|maxMergedSegment
operator|.
name|mbFrac
argument_list|()
operator|!=
name|oldMaxMergedSegmentMB
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"updating [max_merged_segment] from [{}mb] to [{}]"
argument_list|,
name|oldMaxMergedSegmentMB
argument_list|,
name|maxMergedSegment
argument_list|)
expr_stmt|;
name|mergePolicy
operator|.
name|setMaxMergedSegmentMB
argument_list|(
name|maxMergedSegment
operator|.
name|mbFrac
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|double
name|oldReclaimDeletesWeight
init|=
name|mergePolicy
operator|.
name|getReclaimDeletesWeight
argument_list|()
decl_stmt|;
specifier|final
name|double
name|reclaimDeletesWeight
init|=
name|settings
operator|.
name|getAsDouble
argument_list|(
name|INDEX_MERGE_POLICY_RECLAIM_DELETES_WEIGHT
argument_list|,
name|oldReclaimDeletesWeight
argument_list|)
decl_stmt|;
if|if
condition|(
name|reclaimDeletesWeight
operator|!=
name|oldReclaimDeletesWeight
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"updating [reclaim_deletes_weight] from [{}] to [{}]"
argument_list|,
name|oldReclaimDeletesWeight
argument_list|,
name|reclaimDeletesWeight
argument_list|)
expr_stmt|;
name|mergePolicy
operator|.
name|setReclaimDeletesWeight
argument_list|(
name|reclaimDeletesWeight
argument_list|)
expr_stmt|;
block|}
name|double
name|noCFSRatio
init|=
name|parseNoCFSRatio
argument_list|(
name|settings
operator|.
name|get
argument_list|(
name|INDEX_COMPOUND_FORMAT
argument_list|,
name|Double
operator|.
name|toString
argument_list|(
name|TieredMergePolicyProvider
operator|.
name|this
operator|.
name|noCFSRatio
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|noCFSRatio
operator|!=
name|TieredMergePolicyProvider
operator|.
name|this
operator|.
name|noCFSRatio
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"updating index.compound_format from [{}] to [{}]"
argument_list|,
name|formatNoCFSRatio
argument_list|(
name|TieredMergePolicyProvider
operator|.
name|this
operator|.
name|noCFSRatio
argument_list|)
argument_list|,
name|formatNoCFSRatio
argument_list|(
name|noCFSRatio
argument_list|)
argument_list|)
expr_stmt|;
name|mergePolicy
operator|.
name|setNoCFSRatio
argument_list|(
name|noCFSRatio
argument_list|)
expr_stmt|;
name|TieredMergePolicyProvider
operator|.
name|this
operator|.
name|noCFSRatio
operator|=
name|noCFSRatio
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

