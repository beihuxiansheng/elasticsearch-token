begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.merge
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|merge
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|MergeScheduler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * A helper to execute explicit merges of the {@link org.apache.lucene.index.IndexWriter} APIs. It  * holds additional logic which in case the merge scheduler is an {@link org.elasticsearch.index.merge.EnableMergeScheduler}  * then merges are explicitly enabled and disabled back at the end.  *<p/>  * In our codebase, at least until we can somehow use this logic in Lucene IW itself, we should only use  * this class to execute explicit merges. The explicit merge calls have been added to the forbidden APIs  * list to make sure we don't call them unless we use this class.  */
end_comment

begin_class
DECL|class|Merges
specifier|public
class|class
name|Merges
block|{
comment|/**      * See {@link org.apache.lucene.index.IndexWriter#maybeMerge()}, with the additional      * logic of explicitly enabling merges if the scheduler is {@link org.elasticsearch.index.merge.EnableMergeScheduler}.      */
DECL|method|maybeMerge
specifier|public
specifier|static
name|void
name|maybeMerge
parameter_list|(
name|IndexWriter
name|writer
parameter_list|)
throws|throws
name|IOException
block|{
name|MergeScheduler
name|mergeScheduler
init|=
name|writer
operator|.
name|getConfig
argument_list|()
operator|.
name|getMergeScheduler
argument_list|()
decl_stmt|;
if|if
condition|(
name|mergeScheduler
operator|instanceof
name|EnableMergeScheduler
condition|)
block|{
operator|(
operator|(
name|EnableMergeScheduler
operator|)
name|mergeScheduler
operator|)
operator|.
name|enableMerge
argument_list|()
expr_stmt|;
try|try
block|{
name|writer
operator|.
name|maybeMerge
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
operator|(
operator|(
name|EnableMergeScheduler
operator|)
name|mergeScheduler
operator|)
operator|.
name|disableMerge
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|writer
operator|.
name|maybeMerge
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * See {@link org.apache.lucene.index.IndexWriter#forceMerge(int)}, with the additional      * logic of explicitly enabling merges if the scheduler is {@link org.elasticsearch.index.merge.EnableMergeScheduler}.      */
DECL|method|forceMerge
specifier|public
specifier|static
name|void
name|forceMerge
parameter_list|(
name|IndexWriter
name|writer
parameter_list|,
name|int
name|maxNumSegments
parameter_list|)
throws|throws
name|IOException
block|{
name|forceMerge
argument_list|(
name|writer
argument_list|,
name|maxNumSegments
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * See {@link org.apache.lucene.index.IndexWriter#forceMerge(int, boolean)}, with the additional      * logic of explicitly enabling merges if the scheduler is {@link org.elasticsearch.index.merge.EnableMergeScheduler}.      */
DECL|method|forceMerge
specifier|public
specifier|static
name|void
name|forceMerge
parameter_list|(
name|IndexWriter
name|writer
parameter_list|,
name|int
name|maxNumSegments
parameter_list|,
name|boolean
name|doWait
parameter_list|)
throws|throws
name|IOException
block|{
name|MergeScheduler
name|mergeScheduler
init|=
name|writer
operator|.
name|getConfig
argument_list|()
operator|.
name|getMergeScheduler
argument_list|()
decl_stmt|;
if|if
condition|(
name|mergeScheduler
operator|instanceof
name|EnableMergeScheduler
condition|)
block|{
operator|(
operator|(
name|EnableMergeScheduler
operator|)
name|mergeScheduler
operator|)
operator|.
name|enableMerge
argument_list|()
expr_stmt|;
try|try
block|{
name|writer
operator|.
name|forceMerge
argument_list|(
name|maxNumSegments
argument_list|,
name|doWait
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
operator|(
operator|(
name|EnableMergeScheduler
operator|)
name|mergeScheduler
operator|)
operator|.
name|disableMerge
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|writer
operator|.
name|forceMerge
argument_list|(
name|maxNumSegments
argument_list|,
name|doWait
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * See {@link org.apache.lucene.index.IndexWriter#forceMergeDeletes()}, with the additional      * logic of explicitly enabling merges if the scheduler is {@link org.elasticsearch.index.merge.EnableMergeScheduler}.      */
DECL|method|forceMergeDeletes
specifier|public
specifier|static
name|void
name|forceMergeDeletes
parameter_list|(
name|IndexWriter
name|writer
parameter_list|)
throws|throws
name|IOException
block|{
name|forceMergeDeletes
argument_list|(
name|writer
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * See {@link org.apache.lucene.index.IndexWriter#forceMergeDeletes(boolean)}, with the additional      * logic of explicitly enabling merges if the scheduler is {@link org.elasticsearch.index.merge.EnableMergeScheduler}.      */
DECL|method|forceMergeDeletes
specifier|public
specifier|static
name|void
name|forceMergeDeletes
parameter_list|(
name|IndexWriter
name|writer
parameter_list|,
name|boolean
name|doWait
parameter_list|)
throws|throws
name|IOException
block|{
name|MergeScheduler
name|mergeScheduler
init|=
name|writer
operator|.
name|getConfig
argument_list|()
operator|.
name|getMergeScheduler
argument_list|()
decl_stmt|;
if|if
condition|(
name|mergeScheduler
operator|instanceof
name|EnableMergeScheduler
condition|)
block|{
operator|(
operator|(
name|EnableMergeScheduler
operator|)
name|mergeScheduler
operator|)
operator|.
name|enableMerge
argument_list|()
expr_stmt|;
try|try
block|{
name|writer
operator|.
name|forceMergeDeletes
argument_list|(
name|doWait
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
operator|(
operator|(
name|EnableMergeScheduler
operator|)
name|mergeScheduler
operator|)
operator|.
name|disableMerge
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|writer
operator|.
name|forceMergeDeletes
argument_list|(
name|doWait
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

