begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.query
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|SpanNotQueryBuilder
specifier|public
class|class
name|SpanNotQueryBuilder
extends|extends
name|BaseQueryBuilder
implements|implements
name|SpanQueryBuilder
implements|,
name|BoostableQueryBuilder
argument_list|<
name|SpanNotQueryBuilder
argument_list|>
block|{
DECL|field|include
specifier|private
name|SpanQueryBuilder
name|include
decl_stmt|;
DECL|field|exclude
specifier|private
name|SpanQueryBuilder
name|exclude
decl_stmt|;
DECL|field|dist
specifier|private
name|Integer
name|dist
decl_stmt|;
DECL|field|pre
specifier|private
name|Integer
name|pre
decl_stmt|;
DECL|field|post
specifier|private
name|Integer
name|post
decl_stmt|;
DECL|field|boost
specifier|private
name|Float
name|boost
decl_stmt|;
DECL|field|queryName
specifier|private
name|String
name|queryName
decl_stmt|;
DECL|method|include
specifier|public
name|SpanNotQueryBuilder
name|include
parameter_list|(
name|SpanQueryBuilder
name|include
parameter_list|)
block|{
name|this
operator|.
name|include
operator|=
name|include
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|exclude
specifier|public
name|SpanNotQueryBuilder
name|exclude
parameter_list|(
name|SpanQueryBuilder
name|exclude
parameter_list|)
block|{
name|this
operator|.
name|exclude
operator|=
name|exclude
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|dist
specifier|public
name|SpanNotQueryBuilder
name|dist
parameter_list|(
name|int
name|dist
parameter_list|)
block|{
name|this
operator|.
name|dist
operator|=
name|dist
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|pre
specifier|public
name|SpanNotQueryBuilder
name|pre
parameter_list|(
name|int
name|pre
parameter_list|)
block|{
name|this
operator|.
name|pre
operator|=
operator|(
name|pre
operator|>=
literal|0
operator|)
condition|?
name|pre
else|:
literal|0
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|post
specifier|public
name|SpanNotQueryBuilder
name|post
parameter_list|(
name|int
name|post
parameter_list|)
block|{
name|this
operator|.
name|post
operator|=
operator|(
name|post
operator|>=
literal|0
operator|)
condition|?
name|post
else|:
literal|0
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|boost
specifier|public
name|SpanNotQueryBuilder
name|boost
parameter_list|(
name|float
name|boost
parameter_list|)
block|{
name|this
operator|.
name|boost
operator|=
name|boost
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the query name for the filter that can be used when searching for matched_filters per hit.      * @param queryName The query name      * @return this      */
DECL|method|queryName
specifier|public
name|SpanNotQueryBuilder
name|queryName
parameter_list|(
name|String
name|queryName
parameter_list|)
block|{
name|this
operator|.
name|queryName
operator|=
name|queryName
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|doXContent
specifier|protected
name|void
name|doXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|include
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ElasticsearchIllegalArgumentException
argument_list|(
literal|"Must specify include when using spanNot query"
argument_list|)
throw|;
block|}
if|if
condition|(
name|exclude
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ElasticsearchIllegalArgumentException
argument_list|(
literal|"Must specify exclude when using spanNot query"
argument_list|)
throw|;
block|}
if|if
condition|(
name|dist
operator|!=
literal|null
operator|&&
operator|(
name|pre
operator|!=
literal|null
operator|||
name|post
operator|!=
literal|null
operator|)
condition|)
block|{
throw|throw
operator|new
name|ElasticsearchIllegalArgumentException
argument_list|(
literal|"spanNot can either use [dist] or [pre]& [post] (or none)"
argument_list|)
throw|;
block|}
name|builder
operator|.
name|startObject
argument_list|(
name|SpanNotQueryParser
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"include"
argument_list|)
expr_stmt|;
name|include
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"exclude"
argument_list|)
expr_stmt|;
name|exclude
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
if|if
condition|(
name|dist
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"dist"
argument_list|,
name|dist
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|pre
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"pre"
argument_list|,
name|pre
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|post
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"post"
argument_list|,
name|post
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|boost
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"boost"
argument_list|,
name|boost
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|queryName
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"_name"
argument_list|,
name|queryName
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

