begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.query
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|TopChildrenQueryBuilder
specifier|public
class|class
name|TopChildrenQueryBuilder
extends|extends
name|BaseQueryBuilder
block|{
DECL|field|queryBuilder
specifier|private
specifier|final
name|QueryBuilder
name|queryBuilder
decl_stmt|;
DECL|field|childType
specifier|private
name|String
name|childType
decl_stmt|;
DECL|field|scope
specifier|private
name|String
name|scope
decl_stmt|;
DECL|field|score
specifier|private
name|String
name|score
decl_stmt|;
DECL|field|boost
specifier|private
name|float
name|boost
init|=
literal|1.0f
decl_stmt|;
DECL|field|factor
specifier|private
name|int
name|factor
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|incrementalFactor
specifier|private
name|int
name|incrementalFactor
init|=
operator|-
literal|1
decl_stmt|;
DECL|method|TopChildrenQueryBuilder
specifier|public
name|TopChildrenQueryBuilder
parameter_list|(
name|String
name|type
parameter_list|,
name|QueryBuilder
name|queryBuilder
parameter_list|)
block|{
name|this
operator|.
name|childType
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|queryBuilder
operator|=
name|queryBuilder
expr_stmt|;
block|}
comment|/**      * The scope of the query, which can later be used, for example, to run facets against the child docs that      * matches the query.      */
DECL|method|scope
specifier|public
name|TopChildrenQueryBuilder
name|scope
parameter_list|(
name|String
name|scope
parameter_list|)
block|{
name|this
operator|.
name|scope
operator|=
name|scope
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * How to compute the score. Possible values are:<tt>max</tt>,<tt>sum</tt>, or<tt>avg</tt>. Defaults      * to<tt>max</tt>.      */
DECL|method|score
specifier|public
name|TopChildrenQueryBuilder
name|score
parameter_list|(
name|String
name|score
parameter_list|)
block|{
name|this
operator|.
name|score
operator|=
name|score
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Controls the multiplication factor of the initial hits required from the child query over the main query request.      * Defaults to 5.      */
DECL|method|factor
specifier|public
name|TopChildrenQueryBuilder
name|factor
parameter_list|(
name|int
name|factor
parameter_list|)
block|{
name|this
operator|.
name|factor
operator|=
name|factor
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the incremental factor when the query needs to be re-run in order to fetch more results. Defaults to 2.      */
DECL|method|incrementalFactor
specifier|public
name|TopChildrenQueryBuilder
name|incrementalFactor
parameter_list|(
name|int
name|incrementalFactor
parameter_list|)
block|{
name|this
operator|.
name|incrementalFactor
operator|=
name|incrementalFactor
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the boost for this query.  Documents matching this query will (in addition to the normal      * weightings) have their score multiplied by the boost provided.      */
DECL|method|boost
specifier|public
name|TopChildrenQueryBuilder
name|boost
parameter_list|(
name|float
name|boost
parameter_list|)
block|{
name|this
operator|.
name|boost
operator|=
name|boost
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|doXContent
specifier|protected
name|void
name|doXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|TopChildrenQueryParser
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"query"
argument_list|)
expr_stmt|;
name|queryBuilder
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
name|childType
argument_list|)
expr_stmt|;
if|if
condition|(
name|scope
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"_scope"
argument_list|,
name|scope
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|score
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"score"
argument_list|,
name|score
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|boost
operator|!=
operator|-
literal|1
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"boost"
argument_list|,
name|boost
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|factor
operator|!=
operator|-
literal|1
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"factor"
argument_list|,
name|factor
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incrementalFactor
operator|!=
operator|-
literal|1
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"incremental_factor"
argument_list|,
name|incrementalFactor
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

