begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.query
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|Operations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * A filter that restricts search results to values that have a matching regular expression in a given  * field.  *  *  */
end_comment

begin_class
DECL|class|RegexpFilterBuilder
specifier|public
class|class
name|RegexpFilterBuilder
extends|extends
name|BaseFilterBuilder
block|{
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|regexp
specifier|private
specifier|final
name|String
name|regexp
decl_stmt|;
DECL|field|flags
specifier|private
name|int
name|flags
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|maxDeterminizedStates
specifier|private
name|int
name|maxDeterminizedStates
init|=
name|Operations
operator|.
name|DEFAULT_MAX_DETERMINIZED_STATES
decl_stmt|;
DECL|field|maxDetermizedStatesSet
specifier|private
name|boolean
name|maxDetermizedStatesSet
decl_stmt|;
DECL|field|filterName
specifier|private
name|String
name|filterName
decl_stmt|;
comment|/**      * A filter that restricts search results to values that have a matching prefix in a given      * field.      *      * @param name   The field name      * @param regexp The regular expression      */
DECL|method|RegexpFilterBuilder
specifier|public
name|RegexpFilterBuilder
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|regexp
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|regexp
operator|=
name|regexp
expr_stmt|;
block|}
comment|/**      * Sets the filter name for the filter that can be used when searching for matched_filters per hit.      */
DECL|method|filterName
specifier|public
name|RegexpFilterBuilder
name|filterName
parameter_list|(
name|String
name|filterName
parameter_list|)
block|{
name|this
operator|.
name|filterName
operator|=
name|filterName
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the regexp flags (see {@link RegexpFlag}).      */
DECL|method|flags
specifier|public
name|RegexpFilterBuilder
name|flags
parameter_list|(
name|RegexpFlag
modifier|...
name|flags
parameter_list|)
block|{
name|int
name|value
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|flags
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|value
operator|=
name|RegexpFlag
operator|.
name|ALL
operator|.
name|value
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|RegexpFlag
name|flag
range|:
name|flags
control|)
block|{
name|value
operator||=
name|flag
operator|.
name|value
expr_stmt|;
block|}
block|}
name|this
operator|.
name|flags
operator|=
name|value
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the regexp maxDeterminizedStates.      */
DECL|method|maxDeterminizedStates
specifier|public
name|RegexpFilterBuilder
name|maxDeterminizedStates
parameter_list|(
name|int
name|value
parameter_list|)
block|{
name|this
operator|.
name|maxDeterminizedStates
operator|=
name|value
expr_stmt|;
name|this
operator|.
name|maxDetermizedStatesSet
operator|=
literal|true
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|doXContent
specifier|public
name|void
name|doXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|RegexpFilterParser
operator|.
name|NAME
argument_list|)
expr_stmt|;
if|if
condition|(
name|flags
operator|<
literal|0
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|name
argument_list|,
name|regexp
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|name
argument_list|)
operator|.
name|field
argument_list|(
literal|"value"
argument_list|,
name|regexp
argument_list|)
operator|.
name|field
argument_list|(
literal|"flags_value"
argument_list|,
name|flags
argument_list|)
expr_stmt|;
if|if
condition|(
name|maxDetermizedStatesSet
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"max_determinized_states"
argument_list|,
name|maxDeterminizedStates
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|filterName
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"_name"
argument_list|,
name|filterName
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|parserName
specifier|protected
name|String
name|parserName
parameter_list|()
block|{
return|return
name|RegexpFilterParser
operator|.
name|NAME
return|;
block|}
block|}
end_class

end_unit

