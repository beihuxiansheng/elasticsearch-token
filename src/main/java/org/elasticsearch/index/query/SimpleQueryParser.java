begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.query
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|XSimpleQueryParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchIllegalStateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|FieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MapperService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|support
operator|.
name|QueryParsers
operator|.
name|wrapSmartNameQuery
import|;
end_import

begin_comment
comment|/**  * Wrapper class for Lucene's SimpleQueryParser that allows us to redefine  * different types of queries.  */
end_comment

begin_class
DECL|class|SimpleQueryParser
specifier|public
class|class
name|SimpleQueryParser
extends|extends
name|XSimpleQueryParser
block|{
DECL|field|lowercaseExpandedTerms
specifier|private
specifier|final
name|boolean
name|lowercaseExpandedTerms
decl_stmt|;
comment|/** Creates a new parser with custom flags used to enable/disable certain features. */
DECL|method|SimpleQueryParser
specifier|public
name|SimpleQueryParser
parameter_list|(
name|Analyzer
name|analyzer
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
name|weights
parameter_list|,
name|int
name|flags
parameter_list|,
name|boolean
name|lowercaseExpandedTerms
parameter_list|)
block|{
name|super
argument_list|(
name|analyzer
argument_list|,
name|weights
argument_list|,
name|flags
argument_list|)
expr_stmt|;
name|this
operator|.
name|lowercaseExpandedTerms
operator|=
name|lowercaseExpandedTerms
expr_stmt|;
block|}
comment|/**      * Dispatches to Lucene's SimpleQueryParser's newFuzzyQuery, optionally      * lowercasing the term first      */
annotation|@
name|Override
DECL|method|newFuzzyQuery
specifier|public
name|Query
name|newFuzzyQuery
parameter_list|(
name|String
name|text
parameter_list|,
name|int
name|fuzziness
parameter_list|)
block|{
if|if
condition|(
name|lowercaseExpandedTerms
condition|)
block|{
name|text
operator|=
name|text
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
expr_stmt|;
block|}
return|return
name|super
operator|.
name|newFuzzyQuery
argument_list|(
name|text
argument_list|,
name|fuzziness
argument_list|)
return|;
block|}
comment|/**      * Dispatches to Lucene's SimpleQueryParser's newPrefixQuery, optionally      * lowercasing the term first      */
annotation|@
name|Override
DECL|method|newPrefixQuery
specifier|public
name|Query
name|newPrefixQuery
parameter_list|(
name|String
name|text
parameter_list|)
block|{
if|if
condition|(
name|lowercaseExpandedTerms
condition|)
block|{
name|text
operator|=
name|text
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
expr_stmt|;
block|}
return|return
name|super
operator|.
name|newPrefixQuery
argument_list|(
name|text
argument_list|)
return|;
block|}
block|}
end_class

end_unit

