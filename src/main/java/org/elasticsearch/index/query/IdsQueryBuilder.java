begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.query
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|TermsQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|MetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|search
operator|.
name|Queries
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|Uid
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|internal
operator|.
name|UidFieldMapper
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * A query that will return only documents matching specific ids (and a type).  */
end_comment

begin_class
DECL|class|IdsQueryBuilder
specifier|public
class|class
name|IdsQueryBuilder
extends|extends
name|QueryBuilder
argument_list|<
name|IdsQueryBuilder
argument_list|>
implements|implements
name|BoostableQueryBuilder
argument_list|<
name|IdsQueryBuilder
argument_list|>
block|{
DECL|field|ids
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|ids
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
DECL|field|types
specifier|private
specifier|final
name|String
index|[]
name|types
decl_stmt|;
DECL|field|boost
specifier|private
name|float
name|boost
init|=
literal|1.0f
decl_stmt|;
DECL|field|queryName
specifier|private
name|String
name|queryName
decl_stmt|;
comment|/**      * Creates a new IdsQueryBuilder by optionally providing the types of the documents to look for      */
DECL|method|IdsQueryBuilder
specifier|public
name|IdsQueryBuilder
parameter_list|(
annotation|@
name|Nullable
name|String
modifier|...
name|types
parameter_list|)
block|{
name|this
operator|.
name|types
operator|=
name|types
expr_stmt|;
block|}
comment|/**      * Returns the types used in this query      */
DECL|method|types
specifier|public
name|String
index|[]
name|types
parameter_list|()
block|{
return|return
name|this
operator|.
name|types
return|;
block|}
comment|/**      * Adds ids to the query.      */
DECL|method|addIds
specifier|public
name|IdsQueryBuilder
name|addIds
parameter_list|(
name|String
modifier|...
name|ids
parameter_list|)
block|{
name|Collections
operator|.
name|addAll
argument_list|(
name|this
operator|.
name|ids
argument_list|,
name|ids
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Adds ids to the query.      */
DECL|method|ids
specifier|public
name|IdsQueryBuilder
name|ids
parameter_list|(
name|String
modifier|...
name|ids
parameter_list|)
block|{
return|return
name|addIds
argument_list|(
name|ids
argument_list|)
return|;
block|}
comment|/**      * Returns the ids for the query.      */
DECL|method|ids
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|ids
parameter_list|()
block|{
return|return
name|this
operator|.
name|ids
return|;
block|}
comment|/**      * Sets the boost for this query.  Documents matching this query will (in addition to the normal      * weightings) have their score multiplied by the boost provided.      */
annotation|@
name|Override
DECL|method|boost
specifier|public
name|IdsQueryBuilder
name|boost
parameter_list|(
name|float
name|boost
parameter_list|)
block|{
name|this
operator|.
name|boost
operator|=
name|boost
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Gets the boost for this query.      */
DECL|method|boost
specifier|public
name|float
name|boost
parameter_list|()
block|{
return|return
name|this
operator|.
name|boost
return|;
block|}
comment|/**      * Sets the query name for the query that can be used when searching for matched_filters per hit.      */
DECL|method|queryName
specifier|public
name|IdsQueryBuilder
name|queryName
parameter_list|(
name|String
name|queryName
parameter_list|)
block|{
name|this
operator|.
name|queryName
operator|=
name|queryName
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Gets the query name for the query.      */
DECL|method|queryName
specifier|public
name|String
name|queryName
parameter_list|()
block|{
return|return
name|this
operator|.
name|queryName
return|;
block|}
annotation|@
name|Override
DECL|method|doXContent
specifier|protected
name|void
name|doXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|IdsQueryParser
operator|.
name|NAME
argument_list|)
expr_stmt|;
if|if
condition|(
name|types
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|types
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
name|types
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|array
argument_list|(
literal|"types"
argument_list|,
name|types
argument_list|)
expr_stmt|;
block|}
block|}
name|builder
operator|.
name|startArray
argument_list|(
literal|"values"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|value
range|:
name|ids
control|)
block|{
name|builder
operator|.
name|value
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
if|if
condition|(
name|boost
operator|!=
literal|1.0f
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"boost"
argument_list|,
name|boost
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|queryName
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"_name"
argument_list|,
name|queryName
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|parserName
specifier|protected
name|String
name|parserName
parameter_list|()
block|{
return|return
name|IdsQueryParser
operator|.
name|NAME
return|;
block|}
DECL|method|toQuery
specifier|public
name|Query
name|toQuery
parameter_list|(
name|QueryParseContext
name|parseContext
parameter_list|)
throws|throws
name|IOException
throws|,
name|QueryParsingException
block|{
name|Query
name|query
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|ids
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|query
operator|=
name|Queries
operator|.
name|newMatchNoDocsQuery
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|typesForQuery
decl_stmt|;
if|if
condition|(
name|types
operator|==
literal|null
operator|||
name|types
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|typesForQuery
operator|=
name|parseContext
operator|.
name|queryTypes
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|types
operator|.
name|length
operator|==
literal|1
operator|&&
name|MetaData
operator|.
name|ALL
operator|.
name|equals
argument_list|(
name|types
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
name|typesForQuery
operator|=
name|parseContext
operator|.
name|mapperService
argument_list|()
operator|.
name|types
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|typesForQuery
operator|=
name|Sets
operator|.
name|newHashSet
argument_list|(
name|types
argument_list|)
expr_stmt|;
block|}
name|query
operator|=
operator|new
name|TermsQuery
argument_list|(
name|UidFieldMapper
operator|.
name|NAME
argument_list|,
name|Uid
operator|.
name|createUidsForTypesAndIds
argument_list|(
name|typesForQuery
argument_list|,
name|ids
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|query
operator|.
name|setBoost
argument_list|(
name|boost
argument_list|)
expr_stmt|;
if|if
condition|(
name|queryName
operator|!=
literal|null
condition|)
block|{
name|parseContext
operator|.
name|addNamedQuery
argument_list|(
name|queryName
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
return|return
name|query
return|;
block|}
annotation|@
name|Override
DECL|method|validate
specifier|public
name|QueryValidationException
name|validate
parameter_list|()
block|{
comment|// all fields can be empty or null
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|IdsQueryBuilder
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|IdsQueryBuilder
name|idsQueryBuilder
init|=
operator|new
name|IdsQueryBuilder
argument_list|(
name|in
operator|.
name|readStringArray
argument_list|()
argument_list|)
decl_stmt|;
name|idsQueryBuilder
operator|.
name|addIds
argument_list|(
name|in
operator|.
name|readStringArray
argument_list|()
argument_list|)
expr_stmt|;
name|idsQueryBuilder
operator|.
name|queryName
operator|=
name|in
operator|.
name|readOptionalString
argument_list|()
expr_stmt|;
name|idsQueryBuilder
operator|.
name|boost
operator|=
name|in
operator|.
name|readFloat
argument_list|()
expr_stmt|;
return|return
name|idsQueryBuilder
return|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeStringArray
argument_list|(
name|this
operator|.
name|types
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeStringArray
argument_list|(
name|this
operator|.
name|ids
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|this
operator|.
name|ids
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalString
argument_list|(
name|queryName
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeFloat
argument_list|(
name|boost
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|ids
argument_list|,
name|Arrays
operator|.
name|hashCode
argument_list|(
name|types
argument_list|)
argument_list|,
name|boost
argument_list|,
name|queryName
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|obj
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|obj
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|IdsQueryBuilder
name|other
init|=
operator|(
name|IdsQueryBuilder
operator|)
name|obj
decl_stmt|;
return|return
name|Objects
operator|.
name|equals
argument_list|(
name|ids
argument_list|,
name|other
operator|.
name|ids
argument_list|)
operator|&&
name|Arrays
operator|.
name|equals
argument_list|(
name|types
argument_list|,
name|other
operator|.
name|types
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|boost
argument_list|,
name|other
operator|.
name|boost
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|queryName
argument_list|,
name|other
operator|.
name|queryName
argument_list|)
return|;
block|}
block|}
end_class

end_unit

