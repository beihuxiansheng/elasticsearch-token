begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.query.functionscore
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|functionscore
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticSearchIllegalStateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_class
DECL|class|DecayFunctionBuilder
specifier|public
specifier|abstract
class|class
name|DecayFunctionBuilder
implements|implements
name|ScoreFunctionBuilder
block|{
DECL|field|REFERNECE
specifier|protected
specifier|static
specifier|final
name|String
name|REFERNECE
init|=
literal|"reference"
decl_stmt|;
DECL|field|SCALE
specifier|protected
specifier|static
specifier|final
name|String
name|SCALE
init|=
literal|"scale"
decl_stmt|;
DECL|field|SCALE_WEIGHT
specifier|protected
specifier|static
specifier|final
name|String
name|SCALE_WEIGHT
init|=
literal|"scale_weight"
decl_stmt|;
DECL|field|SCALE_DEFAULT
specifier|protected
specifier|static
specifier|final
name|String
name|SCALE_DEFAULT
init|=
literal|"0.5"
decl_stmt|;
DECL|field|fieldName
specifier|private
name|String
name|fieldName
decl_stmt|;
DECL|field|reference
specifier|private
name|String
name|reference
decl_stmt|;
DECL|field|scale
specifier|private
name|String
name|scale
decl_stmt|;
DECL|field|scaleWeight
specifier|private
name|String
name|scaleWeight
decl_stmt|;
DECL|method|setParameters
specifier|public
name|void
name|setParameters
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|String
name|reference
parameter_list|,
name|String
name|scale
parameter_list|,
name|String
name|scaleWeight
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|fieldName
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|ElasticSearchIllegalStateException
argument_list|(
literal|"Can not set parameters of decay function more than once."
argument_list|)
throw|;
block|}
name|this
operator|.
name|fieldName
operator|=
name|fieldName
expr_stmt|;
name|this
operator|.
name|reference
operator|=
name|reference
expr_stmt|;
name|this
operator|.
name|scale
operator|=
name|scale
expr_stmt|;
name|this
operator|.
name|scaleWeight
operator|=
name|scaleWeight
expr_stmt|;
block|}
DECL|method|setParameters
specifier|public
name|void
name|setParameters
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|String
name|reference
parameter_list|,
name|String
name|scale
parameter_list|)
block|{
name|setParameters
argument_list|(
name|fieldName
argument_list|,
name|reference
argument_list|,
name|scale
argument_list|,
name|SCALE_DEFAULT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|startObject
argument_list|(
name|fieldName
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|REFERNECE
argument_list|,
name|reference
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|SCALE
argument_list|,
name|scale
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|SCALE_WEIGHT
argument_list|,
name|scaleWeight
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
DECL|method|addGeoParams
specifier|public
name|void
name|addGeoParams
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|double
name|lat
parameter_list|,
name|double
name|lon
parameter_list|,
name|String
name|scale
parameter_list|)
block|{
name|addGeoParams
argument_list|(
name|fieldName
argument_list|,
name|lat
argument_list|,
name|lon
argument_list|,
name|scale
argument_list|,
name|SCALE_DEFAULT
argument_list|)
expr_stmt|;
block|}
DECL|method|addGeoParams
specifier|public
name|void
name|addGeoParams
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|double
name|lat
parameter_list|,
name|double
name|lon
parameter_list|,
name|String
name|scale
parameter_list|,
name|String
name|scaleWeight
parameter_list|)
block|{
name|String
name|geoLoc
init|=
name|Double
operator|.
name|toString
argument_list|(
name|lat
argument_list|)
operator|+
literal|", "
operator|+
name|Double
operator|.
name|toString
argument_list|(
name|lon
argument_list|)
decl_stmt|;
name|setParameters
argument_list|(
name|fieldName
argument_list|,
name|geoLoc
argument_list|,
name|scale
argument_list|,
name|scaleWeight
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

