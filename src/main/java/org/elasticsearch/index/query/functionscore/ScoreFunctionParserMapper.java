begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.query.functionscore
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|functionscore
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|MapBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryParsingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_class
DECL|class|ScoreFunctionParserMapper
specifier|public
class|class
name|ScoreFunctionParserMapper
block|{
DECL|field|functionParsers
specifier|protected
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|ScoreFunctionParser
argument_list|>
name|functionParsers
decl_stmt|;
annotation|@
name|Inject
DECL|method|ScoreFunctionParserMapper
specifier|public
name|ScoreFunctionParserMapper
parameter_list|(
name|Set
argument_list|<
name|ScoreFunctionParser
argument_list|>
name|parsers
parameter_list|)
block|{
name|MapBuilder
argument_list|<
name|String
argument_list|,
name|ScoreFunctionParser
argument_list|>
name|builder
init|=
name|MapBuilder
operator|.
name|newMapBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|ScoreFunctionParser
name|scoreFunctionParser
range|:
name|parsers
control|)
block|{
for|for
control|(
name|String
name|name
range|:
name|scoreFunctionParser
operator|.
name|getNames
argument_list|()
control|)
block|{
name|builder
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|scoreFunctionParser
argument_list|)
expr_stmt|;
block|}
block|}
name|this
operator|.
name|functionParsers
operator|=
name|builder
operator|.
name|immutableMap
argument_list|()
expr_stmt|;
block|}
DECL|method|get
specifier|public
name|ScoreFunctionParser
name|get
parameter_list|(
name|Index
name|index
parameter_list|,
name|String
name|parserName
parameter_list|)
block|{
name|ScoreFunctionParser
name|functionParser
init|=
name|get
argument_list|(
name|parserName
argument_list|)
decl_stmt|;
if|if
condition|(
name|functionParser
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|QueryParsingException
argument_list|(
name|index
argument_list|,
literal|"No function with the name ["
operator|+
name|parserName
operator|+
literal|"] is registered."
argument_list|)
throw|;
block|}
return|return
name|functionParser
return|;
block|}
DECL|method|get
specifier|private
name|ScoreFunctionParser
name|get
parameter_list|(
name|String
name|parserName
parameter_list|)
block|{
return|return
name|functionParsers
operator|.
name|get
argument_list|(
name|parserName
argument_list|)
return|;
block|}
block|}
end_class

end_unit

