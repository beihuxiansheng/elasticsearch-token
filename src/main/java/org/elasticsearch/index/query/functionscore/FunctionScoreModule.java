begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.query.functionscore
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|functionscore
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|AbstractModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|multibindings
operator|.
name|Multibinder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|functionscore
operator|.
name|exp
operator|.
name|ExponentialDecayFunctionParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|functionscore
operator|.
name|factor
operator|.
name|FactorParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|functionscore
operator|.
name|gauss
operator|.
name|GaussDecayFunctionParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|functionscore
operator|.
name|lin
operator|.
name|LinearDecayFunctionParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|functionscore
operator|.
name|random
operator|.
name|RandomScoreFunctionParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|functionscore
operator|.
name|script
operator|.
name|ScriptScoreFunctionParser
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|FunctionScoreModule
specifier|public
class|class
name|FunctionScoreModule
extends|extends
name|AbstractModule
block|{
DECL|field|parsers
specifier|private
name|List
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|ScoreFunctionParser
argument_list|>
argument_list|>
name|parsers
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
DECL|method|FunctionScoreModule
specifier|public
name|FunctionScoreModule
parameter_list|()
block|{
name|registerParser
argument_list|(
name|FactorParser
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerParser
argument_list|(
name|ScriptScoreFunctionParser
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerParser
argument_list|(
name|GaussDecayFunctionParser
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerParser
argument_list|(
name|LinearDecayFunctionParser
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerParser
argument_list|(
name|ExponentialDecayFunctionParser
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerParser
argument_list|(
name|RandomScoreFunctionParser
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|registerParser
specifier|public
name|void
name|registerParser
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|ScoreFunctionParser
argument_list|>
name|parser
parameter_list|)
block|{
name|parsers
operator|.
name|add
argument_list|(
name|parser
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|configure
specifier|protected
name|void
name|configure
parameter_list|()
block|{
name|Multibinder
argument_list|<
name|ScoreFunctionParser
argument_list|>
name|parserMapBinder
init|=
name|Multibinder
operator|.
name|newSetBinder
argument_list|(
name|binder
argument_list|()
argument_list|,
name|ScoreFunctionParser
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|Class
argument_list|<
name|?
extends|extends
name|ScoreFunctionParser
argument_list|>
name|clazz
range|:
name|parsers
control|)
block|{
name|parserMapBinder
operator|.
name|addBinding
argument_list|()
operator|.
name|to
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
block|}
name|bind
argument_list|(
name|ScoreFunctionParserMapper
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

