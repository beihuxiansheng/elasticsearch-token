begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.query.functionscore.fieldvaluefactor
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|functionscore
operator|.
name|fieldvaluefactor
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|search
operator|.
name|function
operator|.
name|FieldValueFactorFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|functionscore
operator|.
name|ScoreFunctionBuilder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_comment
comment|/**  * Builder to construct {@code field_value_factor} functions for a function  * score query.  */
end_comment

begin_class
DECL|class|FieldValueFactorFunctionBuilder
specifier|public
class|class
name|FieldValueFactorFunctionBuilder
implements|implements
name|ScoreFunctionBuilder
block|{
DECL|field|field
specifier|private
name|String
name|field
init|=
literal|null
decl_stmt|;
DECL|field|factor
specifier|private
name|Float
name|factor
init|=
literal|null
decl_stmt|;
DECL|field|modifier
specifier|private
name|FieldValueFactorFunction
operator|.
name|Modifier
name|modifier
init|=
literal|null
decl_stmt|;
DECL|method|FieldValueFactorFunctionBuilder
specifier|public
name|FieldValueFactorFunctionBuilder
parameter_list|(
name|String
name|fieldName
parameter_list|)
block|{
name|this
operator|.
name|field
operator|=
name|fieldName
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getName
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|FieldValueFactorFunctionParser
operator|.
name|NAMES
index|[
literal|0
index|]
return|;
block|}
DECL|method|factor
specifier|public
name|FieldValueFactorFunctionBuilder
name|factor
parameter_list|(
name|float
name|boostFactor
parameter_list|)
block|{
name|this
operator|.
name|factor
operator|=
name|boostFactor
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|modifier
specifier|public
name|FieldValueFactorFunctionBuilder
name|modifier
parameter_list|(
name|FieldValueFactorFunction
operator|.
name|Modifier
name|modifier
parameter_list|)
block|{
name|this
operator|.
name|modifier
operator|=
name|modifier
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|field
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"field"
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|factor
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"factor"
argument_list|,
name|factor
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|modifier
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"modifier"
argument_list|,
name|modifier
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
block|}
end_class

end_unit

