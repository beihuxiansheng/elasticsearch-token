begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.query
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermRangeQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|joda
operator|.
name|DateMathParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|joda
operator|.
name|Joda
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|BytesRefs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|FieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|core
operator|.
name|DateFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTimeZone
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_comment
comment|/**  * A Query that matches documents within an range of terms.  */
end_comment

begin_class
DECL|class|RangeQueryBuilder
specifier|public
class|class
name|RangeQueryBuilder
extends|extends
name|MultiTermQueryBuilder
argument_list|<
name|RangeQueryBuilder
argument_list|>
implements|implements
name|BoostableQueryBuilder
argument_list|<
name|RangeQueryBuilder
argument_list|>
block|{
DECL|field|NAME
specifier|public
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"range"
decl_stmt|;
DECL|field|fieldName
specifier|private
specifier|final
name|String
name|fieldName
decl_stmt|;
DECL|field|from
specifier|private
name|Object
name|from
decl_stmt|;
DECL|field|to
specifier|private
name|Object
name|to
decl_stmt|;
DECL|field|timeZone
specifier|private
name|String
name|timeZone
decl_stmt|;
DECL|field|includeLower
specifier|private
name|boolean
name|includeLower
init|=
literal|true
decl_stmt|;
DECL|field|includeUpper
specifier|private
name|boolean
name|includeUpper
init|=
literal|true
decl_stmt|;
DECL|field|boost
specifier|private
name|float
name|boost
init|=
literal|1.0f
decl_stmt|;
DECL|field|queryName
specifier|private
name|String
name|queryName
decl_stmt|;
DECL|field|format
specifier|private
name|String
name|format
decl_stmt|;
comment|/**      * A Query that matches documents within an range of terms.      *      * @param fieldName The field name      */
DECL|method|RangeQueryBuilder
specifier|public
name|RangeQueryBuilder
parameter_list|(
name|String
name|fieldName
parameter_list|)
block|{
name|this
operator|.
name|fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
comment|/**      * Get the field name for this query.      */
DECL|method|fieldName
specifier|public
name|String
name|fieldName
parameter_list|()
block|{
return|return
name|this
operator|.
name|fieldName
return|;
block|}
comment|/**      * The from part of the range query. Null indicates unbounded.      * In case lower bound is assigned to a string, we internally convert it to a {@link BytesRef} because      * in {@link RangeQueryParser} field are later parsed as {@link BytesRef} and we need internal representation      * of query to be equal regardless of whether it was created from XContent or via Java API.      */
DECL|method|from
specifier|public
name|RangeQueryBuilder
name|from
parameter_list|(
name|Object
name|from
parameter_list|,
name|boolean
name|includeLower
parameter_list|)
block|{
name|this
operator|.
name|from
operator|=
name|convertToBytesRefIfString
argument_list|(
name|from
argument_list|)
expr_stmt|;
name|this
operator|.
name|includeLower
operator|=
name|includeLower
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * The from part of the range query. Null indicates unbounded.      */
DECL|method|from
specifier|public
name|RangeQueryBuilder
name|from
parameter_list|(
name|Object
name|from
parameter_list|)
block|{
return|return
name|from
argument_list|(
name|from
argument_list|,
name|this
operator|.
name|includeLower
argument_list|)
return|;
block|}
comment|/**      * Gets the lower range value for this query.      */
DECL|method|from
specifier|public
name|Object
name|from
parameter_list|()
block|{
return|return
name|convertToStringIfBytesRef
argument_list|(
name|this
operator|.
name|from
argument_list|)
return|;
block|}
comment|/**      * The from part of the range query. Null indicates unbounded.      */
DECL|method|gt
specifier|public
name|RangeQueryBuilder
name|gt
parameter_list|(
name|Object
name|from
parameter_list|)
block|{
return|return
name|from
argument_list|(
name|from
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * The from part of the range query. Null indicates unbounded.      */
DECL|method|gte
specifier|public
name|RangeQueryBuilder
name|gte
parameter_list|(
name|Object
name|from
parameter_list|)
block|{
return|return
name|from
argument_list|(
name|from
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**      * The to part of the range query. Null indicates unbounded.      */
DECL|method|to
specifier|public
name|RangeQueryBuilder
name|to
parameter_list|(
name|Object
name|to
parameter_list|,
name|boolean
name|includeUpper
parameter_list|)
block|{
name|this
operator|.
name|to
operator|=
name|convertToBytesRefIfString
argument_list|(
name|to
argument_list|)
expr_stmt|;
name|this
operator|.
name|includeUpper
operator|=
name|includeUpper
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * The to part of the range query. Null indicates unbounded.      */
DECL|method|to
specifier|public
name|RangeQueryBuilder
name|to
parameter_list|(
name|Object
name|to
parameter_list|)
block|{
return|return
name|to
argument_list|(
name|to
argument_list|,
name|this
operator|.
name|includeUpper
argument_list|)
return|;
block|}
comment|/**      * Gets the upper range value for this query.      * In case upper bound is assigned to a string, we internally convert it to a {@link BytesRef} because      * in {@link RangeQueryParser} field are later parsed as {@link BytesRef} and we need internal representation      * of query to be equal regardless of whether it was created from XContent or via Java API.      */
DECL|method|to
specifier|public
name|Object
name|to
parameter_list|()
block|{
return|return
name|convertToStringIfBytesRef
argument_list|(
name|this
operator|.
name|to
argument_list|)
return|;
block|}
comment|/**      * The to part of the range query. Null indicates unbounded.      */
DECL|method|lt
specifier|public
name|RangeQueryBuilder
name|lt
parameter_list|(
name|Object
name|to
parameter_list|)
block|{
return|return
name|to
argument_list|(
name|to
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * The to part of the range query. Null indicates unbounded.      */
DECL|method|lte
specifier|public
name|RangeQueryBuilder
name|lte
parameter_list|(
name|Object
name|to
parameter_list|)
block|{
return|return
name|to
argument_list|(
name|to
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**      * Should the lower bound be included or not. Defaults to<tt>true</tt>.      */
DECL|method|includeLower
specifier|public
name|RangeQueryBuilder
name|includeLower
parameter_list|(
name|boolean
name|includeLower
parameter_list|)
block|{
name|this
operator|.
name|includeLower
operator|=
name|includeLower
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Gets the includeLower flag for this query.      */
DECL|method|includeLower
specifier|public
name|boolean
name|includeLower
parameter_list|()
block|{
return|return
name|this
operator|.
name|includeLower
return|;
block|}
comment|/**      * Should the upper bound be included or not. Defaults to<tt>true</tt>.      */
DECL|method|includeUpper
specifier|public
name|RangeQueryBuilder
name|includeUpper
parameter_list|(
name|boolean
name|includeUpper
parameter_list|)
block|{
name|this
operator|.
name|includeUpper
operator|=
name|includeUpper
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Gets the includeUpper flag for this query.      */
DECL|method|includeUpper
specifier|public
name|boolean
name|includeUpper
parameter_list|()
block|{
return|return
name|this
operator|.
name|includeUpper
return|;
block|}
comment|/**      * Sets the boost for this query.  Documents matching this query will (in addition to the normal      * weightings) have their score multiplied by the boost provided.      */
annotation|@
name|Override
DECL|method|boost
specifier|public
name|RangeQueryBuilder
name|boost
parameter_list|(
name|float
name|boost
parameter_list|)
block|{
name|this
operator|.
name|boost
operator|=
name|boost
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Gets the boost factor for the query.      */
DECL|method|boost
specifier|public
name|float
name|boost
parameter_list|()
block|{
return|return
name|this
operator|.
name|boost
return|;
block|}
comment|/**      * Sets the query name for the filter that can be used when searching for matched_filters per hit.      */
DECL|method|queryName
specifier|public
name|RangeQueryBuilder
name|queryName
parameter_list|(
name|String
name|queryName
parameter_list|)
block|{
name|this
operator|.
name|queryName
operator|=
name|queryName
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Gets the query name for the query.      */
DECL|method|queryName
specifier|public
name|String
name|queryName
parameter_list|()
block|{
return|return
name|this
operator|.
name|queryName
return|;
block|}
comment|/**      * In case of date field, we can adjust the from/to fields using a timezone      */
DECL|method|timeZone
specifier|public
name|RangeQueryBuilder
name|timeZone
parameter_list|(
name|String
name|timezone
parameter_list|)
block|{
name|this
operator|.
name|timeZone
operator|=
name|timezone
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * In case of date field, gets the from/to fields timezone adjustment      */
DECL|method|timeZone
specifier|public
name|String
name|timeZone
parameter_list|()
block|{
return|return
name|this
operator|.
name|timeZone
return|;
block|}
comment|/**      * In case of format field, we can parse the from/to fields using this time format      */
DECL|method|format
specifier|public
name|RangeQueryBuilder
name|format
parameter_list|(
name|String
name|format
parameter_list|)
block|{
name|this
operator|.
name|format
operator|=
name|format
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Gets the format field to parse the from/to fields      */
DECL|method|format
specifier|public
name|String
name|format
parameter_list|()
block|{
return|return
name|this
operator|.
name|format
return|;
block|}
annotation|@
name|Override
DECL|method|doXContent
specifier|protected
name|void
name|doXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|NAME
argument_list|)
expr_stmt|;
name|builder
operator|.
name|startObject
argument_list|(
name|fieldName
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"from"
argument_list|,
name|convertToStringIfBytesRef
argument_list|(
name|this
operator|.
name|from
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"to"
argument_list|,
name|convertToStringIfBytesRef
argument_list|(
name|this
operator|.
name|to
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|timeZone
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"time_zone"
argument_list|,
name|timeZone
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|format
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"format"
argument_list|,
name|format
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|field
argument_list|(
literal|"include_lower"
argument_list|,
name|includeLower
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"include_upper"
argument_list|,
name|includeUpper
argument_list|)
expr_stmt|;
if|if
condition|(
name|boost
operator|!=
literal|1.0f
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"boost"
argument_list|,
name|boost
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
if|if
condition|(
name|queryName
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"_name"
argument_list|,
name|queryName
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|queryId
specifier|public
name|String
name|queryId
parameter_list|()
block|{
return|return
name|NAME
return|;
block|}
annotation|@
name|Override
DECL|method|toQuery
specifier|public
name|Query
name|toQuery
parameter_list|(
name|QueryParseContext
name|parseContext
parameter_list|)
throws|throws
name|QueryParsingException
throws|,
name|IOException
block|{
name|Query
name|query
init|=
literal|null
decl_stmt|;
name|FieldMapper
name|mapper
init|=
name|parseContext
operator|.
name|fieldMapper
argument_list|(
name|this
operator|.
name|fieldName
argument_list|)
decl_stmt|;
if|if
condition|(
name|mapper
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|mapper
operator|instanceof
name|DateFieldMapper
condition|)
block|{
if|if
condition|(
operator|(
name|from
operator|instanceof
name|Number
operator|||
name|to
operator|instanceof
name|Number
operator|)
operator|&&
name|timeZone
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|QueryParsingException
argument_list|(
name|parseContext
argument_list|,
literal|"[range] time_zone when using ms since epoch format as it's UTC based can not be applied to ["
operator|+
name|this
operator|.
name|fieldName
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|DateMathParser
name|forcedDateParser
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|format
operator|!=
literal|null
condition|)
block|{
name|forcedDateParser
operator|=
operator|new
name|DateMathParser
argument_list|(
name|Joda
operator|.
name|forPattern
argument_list|(
name|this
operator|.
name|format
argument_list|)
argument_list|,
name|DateFieldMapper
operator|.
name|Defaults
operator|.
name|TIME_UNIT
argument_list|)
expr_stmt|;
block|}
name|DateTimeZone
name|dateTimeZone
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|timeZone
operator|!=
literal|null
condition|)
block|{
name|dateTimeZone
operator|=
name|DateTimeZone
operator|.
name|forID
argument_list|(
name|this
operator|.
name|timeZone
argument_list|)
expr_stmt|;
block|}
name|query
operator|=
operator|(
operator|(
name|DateFieldMapper
operator|)
name|mapper
operator|)
operator|.
name|rangeQuery
argument_list|(
name|from
argument_list|,
name|to
argument_list|,
name|includeLower
argument_list|,
name|includeUpper
argument_list|,
name|dateTimeZone
argument_list|,
name|forcedDateParser
argument_list|,
name|parseContext
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|timeZone
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|QueryParsingException
argument_list|(
name|parseContext
argument_list|,
literal|"[range] time_zone can not be applied to non date field ["
operator|+
name|this
operator|.
name|fieldName
operator|+
literal|"]"
argument_list|)
throw|;
block|}
comment|//LUCENE 4 UPGRADE Mapper#rangeQuery should use bytesref as well?
name|query
operator|=
name|mapper
operator|.
name|rangeQuery
argument_list|(
name|from
argument_list|,
name|to
argument_list|,
name|includeLower
argument_list|,
name|includeUpper
argument_list|,
name|parseContext
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|query
operator|==
literal|null
condition|)
block|{
name|query
operator|=
operator|new
name|TermRangeQuery
argument_list|(
name|this
operator|.
name|fieldName
argument_list|,
name|BytesRefs
operator|.
name|toBytesRef
argument_list|(
name|from
argument_list|)
argument_list|,
name|BytesRefs
operator|.
name|toBytesRef
argument_list|(
name|to
argument_list|)
argument_list|,
name|includeLower
argument_list|,
name|includeUpper
argument_list|)
expr_stmt|;
block|}
name|query
operator|.
name|setBoost
argument_list|(
name|boost
argument_list|)
expr_stmt|;
if|if
condition|(
name|queryName
operator|!=
literal|null
condition|)
block|{
name|parseContext
operator|.
name|addNamedQuery
argument_list|(
name|queryName
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
return|return
name|query
return|;
block|}
annotation|@
name|Override
DECL|method|validate
specifier|public
name|QueryValidationException
name|validate
parameter_list|()
block|{
name|QueryValidationException
name|validationException
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|fieldName
operator|==
literal|null
operator|||
name|this
operator|.
name|fieldName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|validationException
operator|=
name|QueryValidationException
operator|.
name|addValidationError
argument_list|(
literal|"field name cannot be null or empty."
argument_list|,
name|validationException
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|timeZone
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|DateTimeZone
operator|.
name|forID
argument_list|(
name|this
operator|.
name|timeZone
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|validationException
operator|=
name|QueryValidationException
operator|.
name|addValidationError
argument_list|(
literal|"error parsing timezone."
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|validationException
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|this
operator|.
name|format
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|Joda
operator|.
name|forPattern
argument_list|(
name|this
operator|.
name|format
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|validationException
operator|=
name|QueryValidationException
operator|.
name|addValidationError
argument_list|(
literal|"error parsing format."
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|validationException
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|validationException
return|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|RangeQueryBuilder
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|RangeQueryBuilder
name|rangeQueryBuilder
init|=
operator|new
name|RangeQueryBuilder
argument_list|(
name|in
operator|.
name|readString
argument_list|()
argument_list|)
decl_stmt|;
name|rangeQueryBuilder
operator|.
name|from
operator|=
name|in
operator|.
name|readGenericValue
argument_list|()
expr_stmt|;
name|rangeQueryBuilder
operator|.
name|to
operator|=
name|in
operator|.
name|readGenericValue
argument_list|()
expr_stmt|;
name|rangeQueryBuilder
operator|.
name|includeLower
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
name|rangeQueryBuilder
operator|.
name|includeUpper
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
name|rangeQueryBuilder
operator|.
name|timeZone
operator|=
name|in
operator|.
name|readOptionalString
argument_list|()
expr_stmt|;
name|rangeQueryBuilder
operator|.
name|format
operator|=
name|in
operator|.
name|readOptionalString
argument_list|()
expr_stmt|;
name|rangeQueryBuilder
operator|.
name|boost
operator|=
name|in
operator|.
name|readFloat
argument_list|()
expr_stmt|;
name|rangeQueryBuilder
operator|.
name|queryName
operator|=
name|in
operator|.
name|readOptionalString
argument_list|()
expr_stmt|;
return|return
name|rangeQueryBuilder
return|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|fieldName
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeGenericValue
argument_list|(
name|this
operator|.
name|from
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeGenericValue
argument_list|(
name|this
operator|.
name|to
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|this
operator|.
name|includeLower
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|this
operator|.
name|includeUpper
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalString
argument_list|(
name|this
operator|.
name|timeZone
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalString
argument_list|(
name|this
operator|.
name|format
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeFloat
argument_list|(
name|this
operator|.
name|boost
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalString
argument_list|(
name|this
operator|.
name|queryName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|fieldName
argument_list|,
name|from
argument_list|,
name|to
argument_list|,
name|timeZone
argument_list|,
name|includeLower
argument_list|,
name|includeUpper
argument_list|,
name|boost
argument_list|,
name|queryName
argument_list|,
name|format
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|obj
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|obj
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|RangeQueryBuilder
name|other
init|=
operator|(
name|RangeQueryBuilder
operator|)
name|obj
decl_stmt|;
return|return
name|Objects
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|,
name|other
operator|.
name|fieldName
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|from
argument_list|,
name|other
operator|.
name|from
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|to
argument_list|,
name|other
operator|.
name|to
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|timeZone
argument_list|,
name|other
operator|.
name|timeZone
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|includeLower
argument_list|,
name|other
operator|.
name|includeLower
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|includeUpper
argument_list|,
name|other
operator|.
name|includeUpper
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|boost
argument_list|,
name|other
operator|.
name|boost
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|queryName
argument_list|,
name|other
operator|.
name|queryName
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|format
argument_list|,
name|other
operator|.
name|format
argument_list|)
return|;
block|}
block|}
end_class

end_unit

