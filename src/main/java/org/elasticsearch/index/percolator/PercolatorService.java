begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.percolator
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|percolator
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Fieldable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|AbstractIndexComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|Engine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|indexing
operator|.
name|IndexingOperationListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|Uid
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|internal
operator|.
name|SourceFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|internal
operator|.
name|TypeFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|internal
operator|.
name|UidFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|selector
operator|.
name|UidAndSourceFieldSelector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|service
operator|.
name|IndexService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|settings
operator|.
name|IndexSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|IndexShardState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|service
operator|.
name|IndexShard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|IndicesLifecycle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|IndicesService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|PercolatorService
specifier|public
class|class
name|PercolatorService
extends|extends
name|AbstractIndexComponent
block|{
DECL|field|INDEX_NAME
specifier|public
specifier|static
specifier|final
name|String
name|INDEX_NAME
init|=
literal|"_percolator"
decl_stmt|;
DECL|field|indicesService
specifier|private
specifier|final
name|IndicesService
name|indicesService
decl_stmt|;
DECL|field|percolator
specifier|private
specifier|final
name|PercolatorExecutor
name|percolator
decl_stmt|;
DECL|field|shardLifecycleListener
specifier|private
specifier|final
name|ShardLifecycleListener
name|shardLifecycleListener
decl_stmt|;
DECL|field|realTimePercolatorOperationListener
specifier|private
specifier|final
name|RealTimePercolatorOperationListener
name|realTimePercolatorOperationListener
init|=
operator|new
name|RealTimePercolatorOperationListener
argument_list|()
decl_stmt|;
DECL|field|mutex
specifier|private
specifier|final
name|Object
name|mutex
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
DECL|field|initialQueriesFetchDone
specifier|private
name|boolean
name|initialQueriesFetchDone
init|=
literal|false
decl_stmt|;
annotation|@
name|Inject
DECL|method|PercolatorService
specifier|public
name|PercolatorService
parameter_list|(
name|Index
name|index
parameter_list|,
annotation|@
name|IndexSettings
name|Settings
name|indexSettings
parameter_list|,
name|IndicesService
name|indicesService
parameter_list|,
name|PercolatorExecutor
name|percolator
parameter_list|)
block|{
name|super
argument_list|(
name|index
argument_list|,
name|indexSettings
argument_list|)
expr_stmt|;
name|this
operator|.
name|indicesService
operator|=
name|indicesService
expr_stmt|;
name|this
operator|.
name|percolator
operator|=
name|percolator
expr_stmt|;
name|this
operator|.
name|shardLifecycleListener
operator|=
operator|new
name|ShardLifecycleListener
argument_list|()
expr_stmt|;
name|this
operator|.
name|indicesService
operator|.
name|indicesLifecycle
argument_list|()
operator|.
name|addListener
argument_list|(
name|shardLifecycleListener
argument_list|)
expr_stmt|;
name|this
operator|.
name|percolator
operator|.
name|setIndicesService
argument_list|(
name|indicesService
argument_list|)
expr_stmt|;
comment|// if percolator is already allocated, make sure to register real time percolation
if|if
condition|(
name|percolatorAllocated
argument_list|()
condition|)
block|{
name|IndexService
name|percolatorIndexService
init|=
name|percolatorIndexService
argument_list|()
decl_stmt|;
if|if
condition|(
name|percolatorIndexService
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|IndexShard
name|indexShard
range|:
name|percolatorIndexService
control|)
block|{
try|try
block|{
name|indexShard
operator|.
name|indexingService
argument_list|()
operator|.
name|addListener
argument_list|(
name|realTimePercolatorOperationListener
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
block|}
block|}
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
name|this
operator|.
name|indicesService
operator|.
name|indicesLifecycle
argument_list|()
operator|.
name|removeListener
argument_list|(
name|shardLifecycleListener
argument_list|)
expr_stmt|;
comment|// clean up any index that has registered real time updated from the percolator shards allocated on this node
name|IndexService
name|percolatorIndexService
init|=
name|percolatorIndexService
argument_list|()
decl_stmt|;
if|if
condition|(
name|percolatorIndexService
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|IndexShard
name|indexShard
range|:
name|percolatorIndexService
control|)
block|{
try|try
block|{
name|indexShard
operator|.
name|indexingService
argument_list|()
operator|.
name|removeListener
argument_list|(
name|realTimePercolatorOperationListener
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
block|}
DECL|method|percolate
specifier|public
name|PercolatorExecutor
operator|.
name|Response
name|percolate
parameter_list|(
name|PercolatorExecutor
operator|.
name|SourceRequest
name|request
parameter_list|)
throws|throws
name|PercolatorException
block|{
return|return
name|percolator
operator|.
name|percolate
argument_list|(
name|request
argument_list|)
return|;
block|}
DECL|method|percolate
specifier|public
name|PercolatorExecutor
operator|.
name|Response
name|percolate
parameter_list|(
name|PercolatorExecutor
operator|.
name|DocAndSourceQueryRequest
name|request
parameter_list|)
throws|throws
name|PercolatorException
block|{
return|return
name|percolator
operator|.
name|percolate
argument_list|(
name|request
argument_list|)
return|;
block|}
DECL|method|loadQueries
specifier|private
name|void
name|loadQueries
parameter_list|(
name|String
name|indexName
parameter_list|)
block|{
name|IndexService
name|indexService
init|=
name|percolatorIndexService
argument_list|()
decl_stmt|;
name|IndexShard
name|shard
init|=
name|indexService
operator|.
name|shard
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|shard
operator|.
name|refresh
argument_list|(
operator|new
name|Engine
operator|.
name|Refresh
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Engine
operator|.
name|Searcher
name|searcher
init|=
name|shard
operator|.
name|searcher
argument_list|()
decl_stmt|;
try|try
block|{
comment|// create a query to fetch all queries that are registered under the index name (which is the type
comment|// in the percolator).
name|Query
name|query
init|=
operator|new
name|DeletionAwareConstantScoreQuery
argument_list|(
name|indexQueriesFilter
argument_list|(
name|indexName
argument_list|)
argument_list|)
decl_stmt|;
name|QueriesLoaderCollector
name|queries
init|=
operator|new
name|QueriesLoaderCollector
argument_list|()
decl_stmt|;
name|searcher
operator|.
name|searcher
argument_list|()
operator|.
name|search
argument_list|(
name|query
argument_list|,
name|queries
argument_list|)
expr_stmt|;
name|percolator
operator|.
name|addQueries
argument_list|(
name|queries
operator|.
name|queries
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|PercolatorException
argument_list|(
name|index
argument_list|,
literal|"failed to load queries from percolator index"
argument_list|)
throw|;
block|}
finally|finally
block|{
name|searcher
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|indexQueriesFilter
specifier|private
name|Filter
name|indexQueriesFilter
parameter_list|(
name|String
name|indexName
parameter_list|)
block|{
return|return
name|percolatorIndexService
argument_list|()
operator|.
name|cache
argument_list|()
operator|.
name|filter
argument_list|()
operator|.
name|cache
argument_list|(
operator|new
name|TermFilter
argument_list|(
name|TypeFieldMapper
operator|.
name|TERM_FACTORY
operator|.
name|createTerm
argument_list|(
name|indexName
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
DECL|method|percolatorAllocated
specifier|private
name|boolean
name|percolatorAllocated
parameter_list|()
block|{
if|if
condition|(
operator|!
name|indicesService
operator|.
name|hasIndex
argument_list|(
name|INDEX_NAME
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|percolatorIndexService
argument_list|()
operator|.
name|numberOfShards
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|percolatorIndexService
argument_list|()
operator|.
name|shard
argument_list|(
literal|0
argument_list|)
operator|.
name|state
argument_list|()
operator|!=
name|IndexShardState
operator|.
name|STARTED
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|percolatorIndexService
specifier|private
name|IndexService
name|percolatorIndexService
parameter_list|()
block|{
return|return
name|indicesService
operator|.
name|indexService
argument_list|(
name|INDEX_NAME
argument_list|)
return|;
block|}
DECL|class|QueriesLoaderCollector
class|class
name|QueriesLoaderCollector
extends|extends
name|Collector
block|{
DECL|field|reader
specifier|private
name|IndexReader
name|reader
decl_stmt|;
DECL|field|queries
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Query
argument_list|>
name|queries
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
DECL|method|queries
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Query
argument_list|>
name|queries
parameter_list|()
block|{
return|return
name|this
operator|.
name|queries
return|;
block|}
annotation|@
name|Override
DECL|method|setScorer
specifier|public
name|void
name|setScorer
parameter_list|(
name|Scorer
name|scorer
parameter_list|)
throws|throws
name|IOException
block|{         }
annotation|@
name|Override
DECL|method|collect
specifier|public
name|void
name|collect
parameter_list|(
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
comment|// the _source is the query
name|Document
name|document
init|=
name|reader
operator|.
name|document
argument_list|(
name|doc
argument_list|,
operator|new
name|UidAndSourceFieldSelector
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|id
init|=
name|Uid
operator|.
name|createUid
argument_list|(
name|document
operator|.
name|get
argument_list|(
name|UidFieldMapper
operator|.
name|NAME
argument_list|)
argument_list|)
operator|.
name|id
argument_list|()
decl_stmt|;
try|try
block|{
name|Fieldable
name|sourceField
init|=
name|document
operator|.
name|getFieldable
argument_list|(
name|SourceFieldMapper
operator|.
name|NAME
argument_list|)
decl_stmt|;
name|queries
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|percolator
operator|.
name|parseQuery
argument_list|(
name|id
argument_list|,
name|sourceField
operator|.
name|getBinaryValue
argument_list|()
argument_list|,
name|sourceField
operator|.
name|getBinaryOffset
argument_list|()
argument_list|,
name|sourceField
operator|.
name|getBinaryLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"failed to add query [{}]"
argument_list|,
name|e
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|setNextReader
specifier|public
name|void
name|setNextReader
parameter_list|(
name|IndexReader
name|reader
parameter_list|,
name|int
name|docBase
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|reader
operator|=
name|reader
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|acceptsDocsOutOfOrder
specifier|public
name|boolean
name|acceptsDocsOutOfOrder
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
DECL|class|ShardLifecycleListener
class|class
name|ShardLifecycleListener
extends|extends
name|IndicesLifecycle
operator|.
name|Listener
block|{
annotation|@
name|Override
DECL|method|afterIndexShardCreated
specifier|public
name|void
name|afterIndexShardCreated
parameter_list|(
name|IndexShard
name|indexShard
parameter_list|)
block|{
comment|// add a listener that will update based on changes done to the _percolate index
comment|// the relevant indices with loaded queries
if|if
condition|(
name|indexShard
operator|.
name|shardId
argument_list|()
operator|.
name|index
argument_list|()
operator|.
name|name
argument_list|()
operator|.
name|equals
argument_list|(
name|INDEX_NAME
argument_list|)
condition|)
block|{
name|indexShard
operator|.
name|indexingService
argument_list|()
operator|.
name|addListener
argument_list|(
name|realTimePercolatorOperationListener
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|afterIndexShardStarted
specifier|public
name|void
name|afterIndexShardStarted
parameter_list|(
name|IndexShard
name|indexShard
parameter_list|)
block|{
if|if
condition|(
name|indexShard
operator|.
name|shardId
argument_list|()
operator|.
name|index
argument_list|()
operator|.
name|name
argument_list|()
operator|.
name|equals
argument_list|(
name|INDEX_NAME
argument_list|)
condition|)
block|{
comment|// percolator index has started, fetch what we can from it and initialize the indices
comment|// we have
synchronized|synchronized
init|(
name|mutex
init|)
block|{
if|if
condition|(
name|initialQueriesFetchDone
condition|)
block|{
return|return;
block|}
comment|// we load the queries for all existing indices
for|for
control|(
name|IndexService
name|indexService
range|:
name|indicesService
control|)
block|{
comment|// only load queries for "this" index percolator service
if|if
condition|(
name|indexService
operator|.
name|index
argument_list|()
operator|.
name|equals
argument_list|(
name|index
argument_list|()
argument_list|)
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"loading percolator queries for index [{}]..."
argument_list|,
name|indexService
operator|.
name|index
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|loadQueries
argument_list|(
name|indexService
operator|.
name|index
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|logger
operator|.
name|trace
argument_list|(
literal|"done loading percolator queries for index [{}]"
argument_list|,
name|indexService
operator|.
name|index
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|initialQueriesFetchDone
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|indexShard
operator|.
name|shardId
argument_list|()
operator|.
name|index
argument_list|()
operator|.
name|equals
argument_list|(
name|index
argument_list|()
argument_list|)
condition|)
block|{
comment|// not our index, bail
return|return;
block|}
if|if
condition|(
operator|!
name|percolatorAllocated
argument_list|()
condition|)
block|{
return|return;
block|}
comment|// we are only interested when the first shard on this node has been created for an index
comment|// when it does, fetch the relevant queries if not fetched already
name|IndexService
name|indexService
init|=
name|indicesService
operator|.
name|indexService
argument_list|(
name|indexShard
operator|.
name|shardId
argument_list|()
operator|.
name|index
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexService
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|indexService
operator|.
name|numberOfShards
argument_list|()
operator|!=
literal|1
condition|)
block|{
return|return;
block|}
synchronized|synchronized
init|(
name|mutex
init|)
block|{
if|if
condition|(
name|initialQueriesFetchDone
condition|)
block|{
return|return;
block|}
comment|// we load queries for this index
name|logger
operator|.
name|debug
argument_list|(
literal|"loading percolator queries for index [{}]..."
argument_list|,
name|indexService
operator|.
name|index
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|loadQueries
argument_list|(
name|index
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|logger
operator|.
name|trace
argument_list|(
literal|"done loading percolator queries for index [{}]"
argument_list|,
name|indexService
operator|.
name|index
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|initialQueriesFetchDone
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
DECL|class|RealTimePercolatorOperationListener
class|class
name|RealTimePercolatorOperationListener
extends|extends
name|IndexingOperationListener
block|{
annotation|@
name|Override
DECL|method|preCreate
specifier|public
name|Engine
operator|.
name|Create
name|preCreate
parameter_list|(
name|Engine
operator|.
name|Create
name|create
parameter_list|)
block|{
comment|// validate the query here, before we index
if|if
condition|(
name|create
operator|.
name|type
argument_list|()
operator|.
name|equals
argument_list|(
name|index
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
condition|)
block|{
name|percolator
operator|.
name|parseQuery
argument_list|(
name|create
operator|.
name|id
argument_list|()
argument_list|,
name|create
operator|.
name|source
argument_list|()
argument_list|,
name|create
operator|.
name|sourceOffset
argument_list|()
argument_list|,
name|create
operator|.
name|sourceLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|create
return|;
block|}
annotation|@
name|Override
DECL|method|postCreateUnderLock
specifier|public
name|void
name|postCreateUnderLock
parameter_list|(
name|Engine
operator|.
name|Create
name|create
parameter_list|)
block|{
comment|// add the query under a doc lock
if|if
condition|(
name|create
operator|.
name|type
argument_list|()
operator|.
name|equals
argument_list|(
name|index
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
condition|)
block|{
name|percolator
operator|.
name|addQuery
argument_list|(
name|create
operator|.
name|id
argument_list|()
argument_list|,
name|create
operator|.
name|source
argument_list|()
argument_list|,
name|create
operator|.
name|sourceOffset
argument_list|()
argument_list|,
name|create
operator|.
name|sourceLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|preIndex
specifier|public
name|Engine
operator|.
name|Index
name|preIndex
parameter_list|(
name|Engine
operator|.
name|Index
name|index
parameter_list|)
block|{
comment|// validate the query here, before we index
if|if
condition|(
name|index
operator|.
name|type
argument_list|()
operator|.
name|equals
argument_list|(
name|index
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
condition|)
block|{
name|percolator
operator|.
name|parseQuery
argument_list|(
name|index
operator|.
name|id
argument_list|()
argument_list|,
name|index
operator|.
name|source
argument_list|()
argument_list|,
name|index
operator|.
name|sourceOffset
argument_list|()
argument_list|,
name|index
operator|.
name|sourceLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|index
return|;
block|}
annotation|@
name|Override
DECL|method|postIndexUnderLock
specifier|public
name|void
name|postIndexUnderLock
parameter_list|(
name|Engine
operator|.
name|Index
name|index
parameter_list|)
block|{
comment|// add the query under a doc lock
if|if
condition|(
name|index
operator|.
name|type
argument_list|()
operator|.
name|equals
argument_list|(
name|index
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
condition|)
block|{
name|percolator
operator|.
name|addQuery
argument_list|(
name|index
operator|.
name|id
argument_list|()
argument_list|,
name|index
operator|.
name|source
argument_list|()
argument_list|,
name|index
operator|.
name|sourceOffset
argument_list|()
argument_list|,
name|index
operator|.
name|sourceLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|postDeleteUnderLock
specifier|public
name|void
name|postDeleteUnderLock
parameter_list|(
name|Engine
operator|.
name|Delete
name|delete
parameter_list|)
block|{
comment|// remove the query under a lock
if|if
condition|(
name|delete
operator|.
name|type
argument_list|()
operator|.
name|equals
argument_list|(
name|index
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
condition|)
block|{
name|percolator
operator|.
name|removeQuery
argument_list|(
name|delete
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

