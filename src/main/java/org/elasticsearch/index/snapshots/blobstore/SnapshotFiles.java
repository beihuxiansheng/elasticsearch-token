begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.snapshots.blobstore
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|snapshots
operator|.
name|blobstore
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|snapshots
operator|.
name|blobstore
operator|.
name|BlobStoreIndexShardSnapshot
operator|.
name|FileInfo
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
operator|.
name|newHashMap
import|;
end_import

begin_comment
comment|/**  * Contains a list of files participating in a snapshot  */
end_comment

begin_class
DECL|class|SnapshotFiles
specifier|public
class|class
name|SnapshotFiles
block|{
DECL|field|snapshot
specifier|private
specifier|final
name|String
name|snapshot
decl_stmt|;
DECL|field|indexFiles
specifier|private
specifier|final
name|ImmutableList
argument_list|<
name|FileInfo
argument_list|>
name|indexFiles
decl_stmt|;
DECL|field|physicalFiles
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|FileInfo
argument_list|>
name|physicalFiles
init|=
literal|null
decl_stmt|;
DECL|method|snapshot
specifier|public
name|String
name|snapshot
parameter_list|()
block|{
return|return
name|snapshot
return|;
block|}
DECL|method|SnapshotFiles
specifier|public
name|SnapshotFiles
parameter_list|(
name|String
name|snapshot
parameter_list|,
name|ImmutableList
argument_list|<
name|FileInfo
argument_list|>
name|indexFiles
parameter_list|)
block|{
name|this
operator|.
name|snapshot
operator|=
name|snapshot
expr_stmt|;
name|this
operator|.
name|indexFiles
operator|=
name|indexFiles
expr_stmt|;
block|}
comment|/**      * Returns a list of file in the snapshot      */
DECL|method|indexFiles
specifier|public
name|ImmutableList
argument_list|<
name|FileInfo
argument_list|>
name|indexFiles
parameter_list|()
block|{
return|return
name|indexFiles
return|;
block|}
comment|/**      * Returns true if this snapshot contains a file with a given original name      *      * @param physicalName original file name      * @return true if the file was found, false otherwise      */
DECL|method|containPhysicalIndexFile
specifier|public
name|boolean
name|containPhysicalIndexFile
parameter_list|(
name|String
name|physicalName
parameter_list|)
block|{
return|return
name|findPhysicalIndexFile
argument_list|(
name|physicalName
argument_list|)
operator|!=
literal|null
return|;
block|}
comment|/**      * Returns information about a physical file with the given name      * @param physicalName the original file name      * @return information about this file      */
DECL|method|findPhysicalIndexFile
specifier|public
name|FileInfo
name|findPhysicalIndexFile
parameter_list|(
name|String
name|physicalName
parameter_list|)
block|{
if|if
condition|(
name|physicalFiles
operator|==
literal|null
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|FileInfo
argument_list|>
name|files
init|=
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|FileInfo
name|fileInfo
range|:
name|indexFiles
control|)
block|{
name|files
operator|.
name|put
argument_list|(
name|fileInfo
operator|.
name|physicalName
argument_list|()
argument_list|,
name|fileInfo
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|physicalFiles
operator|=
name|files
expr_stmt|;
block|}
return|return
name|physicalFiles
operator|.
name|get
argument_list|(
name|physicalName
argument_list|)
return|;
block|}
block|}
end_class

end_unit

