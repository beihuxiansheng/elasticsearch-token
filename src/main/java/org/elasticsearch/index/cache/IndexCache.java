begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.cache
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|cache
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterChangedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterStateListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|CloseableComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|AbstractIndexComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|cache
operator|.
name|filter
operator|.
name|FilterCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|cache
operator|.
name|fixedbitset
operator|.
name|FixedBitSetFilterCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|cache
operator|.
name|query
operator|.
name|parser
operator|.
name|QueryParserCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|settings
operator|.
name|IndexSettings
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|IndexCache
specifier|public
class|class
name|IndexCache
extends|extends
name|AbstractIndexComponent
implements|implements
name|CloseableComponent
implements|,
name|ClusterStateListener
block|{
DECL|field|filterCache
specifier|private
specifier|final
name|FilterCache
name|filterCache
decl_stmt|;
DECL|field|queryParserCache
specifier|private
specifier|final
name|QueryParserCache
name|queryParserCache
decl_stmt|;
DECL|field|fixedBitSetFilterCache
specifier|private
specifier|final
name|FixedBitSetFilterCache
name|fixedBitSetFilterCache
decl_stmt|;
DECL|field|clusterService
specifier|private
name|ClusterService
name|clusterService
decl_stmt|;
annotation|@
name|Inject
DECL|method|IndexCache
specifier|public
name|IndexCache
parameter_list|(
name|Index
name|index
parameter_list|,
annotation|@
name|IndexSettings
name|Settings
name|indexSettings
parameter_list|,
name|FilterCache
name|filterCache
parameter_list|,
name|QueryParserCache
name|queryParserCache
parameter_list|,
name|FixedBitSetFilterCache
name|fixedBitSetFilterCache
parameter_list|)
block|{
name|super
argument_list|(
name|index
argument_list|,
name|indexSettings
argument_list|)
expr_stmt|;
name|this
operator|.
name|filterCache
operator|=
name|filterCache
expr_stmt|;
name|this
operator|.
name|queryParserCache
operator|=
name|queryParserCache
expr_stmt|;
name|this
operator|.
name|fixedBitSetFilterCache
operator|=
name|fixedBitSetFilterCache
expr_stmt|;
block|}
annotation|@
name|Inject
argument_list|(
name|optional
operator|=
literal|true
argument_list|)
DECL|method|setClusterService
specifier|public
name|void
name|setClusterService
parameter_list|(
annotation|@
name|Nullable
name|ClusterService
name|clusterService
parameter_list|)
block|{
name|this
operator|.
name|clusterService
operator|=
name|clusterService
expr_stmt|;
if|if
condition|(
name|clusterService
operator|!=
literal|null
condition|)
block|{
name|clusterService
operator|.
name|add
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|filter
specifier|public
name|FilterCache
name|filter
parameter_list|()
block|{
return|return
name|filterCache
return|;
block|}
comment|/**      * Return the {@link FixedBitSetFilterCache} for this index.      */
DECL|method|fixedBitSetFilterCache
specifier|public
name|FixedBitSetFilterCache
name|fixedBitSetFilterCache
parameter_list|()
block|{
return|return
name|fixedBitSetFilterCache
return|;
block|}
DECL|method|queryParserCache
specifier|public
name|QueryParserCache
name|queryParserCache
parameter_list|()
block|{
return|return
name|this
operator|.
name|queryParserCache
return|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|ElasticsearchException
block|{
name|filterCache
operator|.
name|close
argument_list|()
expr_stmt|;
name|queryParserCache
operator|.
name|close
argument_list|()
expr_stmt|;
name|fixedBitSetFilterCache
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|clusterService
operator|!=
literal|null
condition|)
block|{
name|clusterService
operator|.
name|remove
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|clear
specifier|public
name|void
name|clear
parameter_list|(
name|String
name|reason
parameter_list|)
block|{
name|filterCache
operator|.
name|clear
argument_list|(
name|reason
argument_list|)
expr_stmt|;
name|queryParserCache
operator|.
name|clear
argument_list|()
expr_stmt|;
name|fixedBitSetFilterCache
operator|.
name|clear
argument_list|(
name|reason
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|clusterChanged
specifier|public
name|void
name|clusterChanged
parameter_list|(
name|ClusterChangedEvent
name|event
parameter_list|)
block|{
comment|// clear the query parser cache if the metadata (mappings) changed...
if|if
condition|(
name|event
operator|.
name|metaDataChanged
argument_list|()
condition|)
block|{
name|queryParserCache
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

