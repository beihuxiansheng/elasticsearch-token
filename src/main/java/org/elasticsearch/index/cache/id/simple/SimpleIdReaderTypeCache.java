begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.cache.id.simple
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|cache
operator|.
name|id
operator|.
name|simple
package|;
end_package

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|ObjectIntOpenHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|RamUsageEstimator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|HashedBytesArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|cache
operator|.
name|id
operator|.
name|IdReaderTypeCache
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|SimpleIdReaderTypeCache
specifier|public
class|class
name|SimpleIdReaderTypeCache
implements|implements
name|IdReaderTypeCache
block|{
DECL|field|type
specifier|private
specifier|final
name|String
name|type
decl_stmt|;
DECL|field|idToDoc
specifier|private
specifier|final
name|ObjectIntOpenHashMap
argument_list|<
name|HashedBytesArray
argument_list|>
name|idToDoc
decl_stmt|;
DECL|field|docIdToId
specifier|private
specifier|final
name|HashedBytesArray
index|[]
name|docIdToId
decl_stmt|;
DECL|field|parentIdsValues
specifier|private
specifier|final
name|HashedBytesArray
index|[]
name|parentIdsValues
decl_stmt|;
DECL|field|parentIdsOrdinals
specifier|private
specifier|final
name|int
index|[]
name|parentIdsOrdinals
decl_stmt|;
DECL|field|sizeInBytes
specifier|private
name|long
name|sizeInBytes
init|=
operator|-
literal|1
decl_stmt|;
DECL|method|SimpleIdReaderTypeCache
specifier|public
name|SimpleIdReaderTypeCache
parameter_list|(
name|String
name|type
parameter_list|,
name|ObjectIntOpenHashMap
argument_list|<
name|HashedBytesArray
argument_list|>
name|idToDoc
parameter_list|,
name|HashedBytesArray
index|[]
name|docIdToId
parameter_list|,
name|HashedBytesArray
index|[]
name|parentIdsValues
parameter_list|,
name|int
index|[]
name|parentIdsOrdinals
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|idToDoc
operator|=
name|idToDoc
expr_stmt|;
name|this
operator|.
name|docIdToId
operator|=
name|docIdToId
expr_stmt|;
name|this
operator|.
name|parentIdsValues
operator|=
name|parentIdsValues
expr_stmt|;
name|this
operator|.
name|parentIdsOrdinals
operator|=
name|parentIdsOrdinals
expr_stmt|;
block|}
DECL|method|type
specifier|public
name|String
name|type
parameter_list|()
block|{
return|return
name|this
operator|.
name|type
return|;
block|}
DECL|method|parentIdByDoc
specifier|public
name|HashedBytesArray
name|parentIdByDoc
parameter_list|(
name|int
name|docId
parameter_list|)
block|{
return|return
name|parentIdsValues
index|[
name|parentIdsOrdinals
index|[
name|docId
index|]
index|]
return|;
block|}
DECL|method|docById
specifier|public
name|int
name|docById
parameter_list|(
name|HashedBytesArray
name|uid
parameter_list|)
block|{
return|return
name|idToDoc
operator|.
name|getOrDefault
argument_list|(
name|uid
argument_list|,
operator|-
literal|1
argument_list|)
return|;
block|}
DECL|method|idByDoc
specifier|public
name|HashedBytesArray
name|idByDoc
parameter_list|(
name|int
name|docId
parameter_list|)
block|{
return|return
name|docIdToId
index|[
name|docId
index|]
return|;
block|}
DECL|method|sizeInBytes
specifier|public
name|long
name|sizeInBytes
parameter_list|()
block|{
if|if
condition|(
name|sizeInBytes
operator|==
operator|-
literal|1
condition|)
block|{
name|sizeInBytes
operator|=
name|computeSizeInBytes
argument_list|()
expr_stmt|;
block|}
return|return
name|sizeInBytes
return|;
block|}
comment|/**      * Returns an already stored instance if exists, if not, returns null;      */
DECL|method|canReuse
specifier|public
name|HashedBytesArray
name|canReuse
parameter_list|(
name|HashedBytesArray
name|id
parameter_list|)
block|{
if|if
condition|(
name|idToDoc
operator|.
name|containsKey
argument_list|(
name|id
argument_list|)
condition|)
block|{
comment|// we can use #lkey() since this is called from a synchronized block
return|return
name|idToDoc
operator|.
name|lkey
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|id
return|;
block|}
block|}
DECL|method|computeSizeInBytes
name|long
name|computeSizeInBytes
parameter_list|()
block|{
name|long
name|sizeInBytes
init|=
literal|0
decl_stmt|;
comment|// Ignore type field
comment|//  sizeInBytes += ((type.length() * RamUsage.NUM_BYTES_CHAR) + (3 * RamUsage.NUM_BYTES_INT)) + RamUsage.NUM_BYTES_OBJECT_HEADER;
name|sizeInBytes
operator|+=
name|RamUsageEstimator
operator|.
name|NUM_BYTES_ARRAY_HEADER
operator|+
operator|(
name|idToDoc
operator|.
name|values
operator|.
name|length
operator|*
name|RamUsageEstimator
operator|.
name|NUM_BYTES_INT
operator|)
expr_stmt|;
name|sizeInBytes
operator|+=
name|RamUsageEstimator
operator|.
name|NUM_BYTES_ARRAY_HEADER
operator|+
operator|(
name|idToDoc
operator|.
name|allocated
operator|.
name|length
operator|)
expr_stmt|;
specifier|final
name|boolean
index|[]
name|states
init|=
name|idToDoc
operator|.
name|allocated
decl_stmt|;
specifier|final
name|Object
index|[]
name|keys
init|=
name|idToDoc
operator|.
name|keys
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|states
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|states
index|[
name|i
index|]
condition|)
block|{
name|HashedBytesArray
name|bytesArray
init|=
operator|(
name|HashedBytesArray
operator|)
name|keys
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|bytesArray
operator|!=
literal|null
condition|)
block|{
name|sizeInBytes
operator|+=
name|RamUsageEstimator
operator|.
name|NUM_BYTES_OBJECT_HEADER
operator|+
operator|(
name|bytesArray
operator|.
name|length
argument_list|()
operator|+
name|RamUsageEstimator
operator|.
name|NUM_BYTES_INT
operator|)
expr_stmt|;
block|}
else|else
block|{
name|sizeInBytes
operator|+=
name|RamUsageEstimator
operator|.
name|NUM_BYTES_OBJECT_REF
expr_stmt|;
block|}
block|}
block|}
comment|// The docIdToId array contains references to idToDoc for this segment or other segments, so we can use OBJECT_REF
name|sizeInBytes
operator|+=
name|RamUsageEstimator
operator|.
name|NUM_BYTES_ARRAY_HEADER
operator|+
operator|(
name|RamUsageEstimator
operator|.
name|NUM_BYTES_OBJECT_REF
operator|*
name|docIdToId
operator|.
name|length
operator|)
expr_stmt|;
for|for
control|(
name|HashedBytesArray
name|bytesArray
range|:
name|parentIdsValues
control|)
block|{
if|if
condition|(
name|bytesArray
operator|==
literal|null
condition|)
block|{
name|sizeInBytes
operator|+=
name|RamUsageEstimator
operator|.
name|NUM_BYTES_OBJECT_REF
expr_stmt|;
block|}
else|else
block|{
name|sizeInBytes
operator|+=
name|RamUsageEstimator
operator|.
name|NUM_BYTES_OBJECT_HEADER
operator|+
operator|(
name|bytesArray
operator|.
name|length
argument_list|()
operator|+
name|RamUsageEstimator
operator|.
name|NUM_BYTES_INT
operator|)
expr_stmt|;
block|}
block|}
name|sizeInBytes
operator|+=
name|RamUsageEstimator
operator|.
name|sizeOf
argument_list|(
name|parentIdsOrdinals
argument_list|)
expr_stmt|;
return|return
name|sizeInBytes
return|;
block|}
block|}
end_class

end_unit

