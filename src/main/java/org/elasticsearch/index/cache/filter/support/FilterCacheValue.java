begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.cache.filter.support
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|cache
operator|.
name|filter
operator|.
name|support
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSetIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|docset
operator|.
name|DocSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|docset
operator|.
name|DocSets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_class
DECL|class|FilterCacheValue
specifier|public
class|class
name|FilterCacheValue
parameter_list|<
name|T
parameter_list|>
block|{
DECL|field|value
specifier|private
specifier|final
name|T
name|value
decl_stmt|;
DECL|method|FilterCacheValue
specifier|public
name|FilterCacheValue
parameter_list|(
name|T
name|value
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
DECL|method|value
specifier|public
name|T
name|value
parameter_list|()
block|{
return|return
name|value
return|;
block|}
DECL|method|cacheable
specifier|public
specifier|static
name|DocSet
name|cacheable
parameter_list|(
name|IndexReader
name|reader
parameter_list|,
name|DocIdSet
name|set
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|set
operator|==
literal|null
condition|)
block|{
return|return
name|DocSet
operator|.
name|EMPTY_DOC_SET
return|;
block|}
if|if
condition|(
name|set
operator|==
name|DocIdSet
operator|.
name|EMPTY_DOCIDSET
condition|)
block|{
return|return
name|DocSet
operator|.
name|EMPTY_DOC_SET
return|;
block|}
name|DocIdSetIterator
name|it
init|=
name|set
operator|.
name|iterator
argument_list|()
decl_stmt|;
if|if
condition|(
name|it
operator|==
literal|null
condition|)
block|{
return|return
name|DocSet
operator|.
name|EMPTY_DOC_SET
return|;
block|}
name|int
name|doc
init|=
name|it
operator|.
name|nextDoc
argument_list|()
decl_stmt|;
if|if
condition|(
name|doc
operator|==
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|)
block|{
return|return
name|DocSet
operator|.
name|EMPTY_DOC_SET
return|;
block|}
return|return
name|DocSets
operator|.
name|cacheable
argument_list|(
name|reader
argument_list|,
name|set
argument_list|)
return|;
block|}
block|}
end_class

end_unit

