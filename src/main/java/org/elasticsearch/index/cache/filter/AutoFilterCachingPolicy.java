begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.cache.filter
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|cache
operator|.
name|filter
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|FilterCachingPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|UsageTrackingFilterCachingPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|docset
operator|.
name|DocIdSets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|AbstractIndexComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|settings
operator|.
name|IndexSettings
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * This class is a wrapper around {@link UsageTrackingFilterCachingPolicy}  * which wires parameters through index settings and makes sure to not  * cache {@link DocIdSet}s which have a {@link DocIdSets#isBroken(DocIdSetIterator) broken}  * iterator.  */
end_comment

begin_class
DECL|class|AutoFilterCachingPolicy
specifier|public
class|class
name|AutoFilterCachingPolicy
extends|extends
name|AbstractIndexComponent
implements|implements
name|FilterCachingPolicy
block|{
comment|// These settings don't have the purpose of being documented. They are only here so that
comment|// if anyone ever hits an issue with elasticsearch that is due to the value of one of these
comment|// parameters, then it might be possible to temporarily work around the issue without having
comment|// to wait for a new release
comment|// number of times a filter that is expensive to compute should be seen before the doc id sets are cached
DECL|field|MIN_FREQUENCY_COSTLY
specifier|public
specifier|static
specifier|final
name|String
name|MIN_FREQUENCY_COSTLY
init|=
literal|"index.cache.filter.policy.min_frequency.costly"
decl_stmt|;
comment|// number of times a filter that produces cacheable filters should be seen before the doc id sets are cached
DECL|field|MIN_FREQUENCY_CACHEABLE
specifier|public
specifier|static
specifier|final
name|String
name|MIN_FREQUENCY_CACHEABLE
init|=
literal|"index.cache.filter.policy.min_frequency.cacheable"
decl_stmt|;
comment|// same for filters that produce doc id sets that are not directly cacheable
DECL|field|MIN_FREQUENCY_OTHER
specifier|public
specifier|static
specifier|final
name|String
name|MIN_FREQUENCY_OTHER
init|=
literal|"index.cache.filter.policy.min_frequency.other"
decl_stmt|;
comment|// sources of segments that should be cached
DECL|field|MIN_SEGMENT_SIZE_RATIO
specifier|public
specifier|static
specifier|final
name|String
name|MIN_SEGMENT_SIZE_RATIO
init|=
literal|"index.cache.filter.policy.min_segment_size_ratio"
decl_stmt|;
comment|// size of the history to keep for filters. A filter will be cached if it has been seen more than a given
comment|// number of times (depending on the filter, the segment and the produced DocIdSet) in the most
comment|// ${history_size} recently used filters
DECL|field|HISTORY_SIZE
specifier|public
specifier|static
specifier|final
name|String
name|HISTORY_SIZE
init|=
literal|"index.cache.filter.policy.history_size"
decl_stmt|;
DECL|field|AGGRESSIVE_CACHING_SETTINGS
specifier|public
specifier|static
name|Settings
name|AGGRESSIVE_CACHING_SETTINGS
init|=
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|MIN_FREQUENCY_CACHEABLE
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
name|MIN_FREQUENCY_COSTLY
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
name|MIN_FREQUENCY_OTHER
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
name|MIN_SEGMENT_SIZE_RATIO
argument_list|,
literal|0.000000001f
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
DECL|field|in
specifier|private
specifier|final
name|FilterCachingPolicy
name|in
decl_stmt|;
annotation|@
name|Inject
DECL|method|AutoFilterCachingPolicy
specifier|public
name|AutoFilterCachingPolicy
parameter_list|(
name|Index
name|index
parameter_list|,
annotation|@
name|IndexSettings
name|Settings
name|indexSettings
parameter_list|)
block|{
name|super
argument_list|(
name|index
argument_list|,
name|indexSettings
argument_list|)
expr_stmt|;
specifier|final
name|int
name|historySize
init|=
name|indexSettings
operator|.
name|getAsInt
argument_list|(
name|HISTORY_SIZE
argument_list|,
literal|1000
argument_list|)
decl_stmt|;
comment|// cache aggressively filters that produce sets that are already cacheable,
comment|// ie. if the filter has been used twice or more among the most 1000 recently
comment|// used filters
specifier|final
name|int
name|minFrequencyCacheable
init|=
name|indexSettings
operator|.
name|getAsInt
argument_list|(
name|MIN_FREQUENCY_CACHEABLE
argument_list|,
literal|2
argument_list|)
decl_stmt|;
comment|// cache aggressively filters whose getDocIdSet method is costly
specifier|final
name|int
name|minFrequencyCostly
init|=
name|indexSettings
operator|.
name|getAsInt
argument_list|(
name|MIN_FREQUENCY_COSTLY
argument_list|,
literal|2
argument_list|)
decl_stmt|;
comment|// be a bit less aggressive when the produced doc id sets are not cacheable
specifier|final
name|int
name|minFrequencyOther
init|=
name|indexSettings
operator|.
name|getAsInt
argument_list|(
name|MIN_FREQUENCY_OTHER
argument_list|,
literal|5
argument_list|)
decl_stmt|;
specifier|final
name|float
name|minSegmentSizeRatio
init|=
name|indexSettings
operator|.
name|getAsFloat
argument_list|(
name|MIN_SEGMENT_SIZE_RATIO
argument_list|,
literal|0.01f
argument_list|)
decl_stmt|;
name|in
operator|=
operator|new
name|UsageTrackingFilterCachingPolicy
argument_list|(
name|minSegmentSizeRatio
argument_list|,
name|historySize
argument_list|,
name|minFrequencyCostly
argument_list|,
name|minFrequencyCacheable
argument_list|,
name|minFrequencyOther
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onUse
specifier|public
name|void
name|onUse
parameter_list|(
name|Filter
name|filter
parameter_list|)
block|{
name|in
operator|.
name|onUse
argument_list|(
name|filter
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|shouldCache
specifier|public
name|boolean
name|shouldCache
parameter_list|(
name|Filter
name|filter
parameter_list|,
name|LeafReaderContext
name|context
parameter_list|,
name|DocIdSet
name|set
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|set
operator|!=
literal|null
operator|&&
name|DocIdSets
operator|.
name|isBroken
argument_list|(
name|set
operator|.
name|iterator
argument_list|()
argument_list|)
condition|)
block|{
comment|// O(maxDoc) to cache, no thanks.
return|return
literal|false
return|;
block|}
return|return
name|in
operator|.
name|shouldCache
argument_list|(
name|filter
argument_list|,
name|context
argument_list|,
name|set
argument_list|)
return|;
block|}
block|}
end_class

end_unit

