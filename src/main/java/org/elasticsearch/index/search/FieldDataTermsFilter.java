begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.search
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|search
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|DoubleOpenHashSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|LongOpenHashSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|ObjectOpenHashSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SortedNumericDocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocValuesDocIdSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Bits
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|IndexFieldData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|IndexNumericFieldData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|SortedBinaryDocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|SortedNumericDoubleValues
import|;
end_import

begin_comment
comment|/**  * Similar to a {@link org.apache.lucene.queries.TermsFilter} but pulls terms from the fielddata.  */
end_comment

begin_class
DECL|class|FieldDataTermsFilter
specifier|public
specifier|abstract
class|class
name|FieldDataTermsFilter
extends|extends
name|Filter
block|{
DECL|field|fieldData
specifier|final
name|IndexFieldData
name|fieldData
decl_stmt|;
DECL|method|FieldDataTermsFilter
specifier|protected
name|FieldDataTermsFilter
parameter_list|(
name|IndexFieldData
name|fieldData
parameter_list|)
block|{
name|this
operator|.
name|fieldData
operator|=
name|fieldData
expr_stmt|;
block|}
comment|/**      * Get a {@link FieldDataTermsFilter} that filters on non-numeric terms found in a hppc {@link ObjectOpenHashSet} of      * {@link BytesRef}.      *      * @param fieldData The fielddata for the field.      * @param terms     An {@link ObjectOpenHashSet} of terms.      * @return the filter.      */
DECL|method|newBytes
specifier|public
specifier|static
name|FieldDataTermsFilter
name|newBytes
parameter_list|(
name|IndexFieldData
name|fieldData
parameter_list|,
name|ObjectOpenHashSet
argument_list|<
name|BytesRef
argument_list|>
name|terms
parameter_list|)
block|{
return|return
operator|new
name|BytesFieldDataFilter
argument_list|(
name|fieldData
argument_list|,
name|terms
argument_list|)
return|;
block|}
comment|/**      * Get a {@link FieldDataTermsFilter} that filters on non-floating point numeric terms found in a hppc      * {@link LongOpenHashSet}.      *      * @param fieldData The fielddata for the field.      * @param terms     A {@link LongOpenHashSet} of terms.      * @return the filter.      */
DECL|method|newLongs
specifier|public
specifier|static
name|FieldDataTermsFilter
name|newLongs
parameter_list|(
name|IndexNumericFieldData
name|fieldData
parameter_list|,
name|LongOpenHashSet
name|terms
parameter_list|)
block|{
return|return
operator|new
name|LongsFieldDataFilter
argument_list|(
name|fieldData
argument_list|,
name|terms
argument_list|)
return|;
block|}
comment|/**      * Get a {@link FieldDataTermsFilter} that filters on floating point numeric terms found in a hppc      * {@link DoubleOpenHashSet}.      *      * @param fieldData The fielddata for the field.      * @param terms     A {@link DoubleOpenHashSet} of terms.      * @return the filter.      */
DECL|method|newDoubles
specifier|public
specifier|static
name|FieldDataTermsFilter
name|newDoubles
parameter_list|(
name|IndexNumericFieldData
name|fieldData
parameter_list|,
name|DoubleOpenHashSet
name|terms
parameter_list|)
block|{
return|return
operator|new
name|DoublesFieldDataFilter
argument_list|(
name|fieldData
argument_list|,
name|terms
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|super
operator|.
name|equals
argument_list|(
name|obj
argument_list|)
operator|==
literal|false
condition|)
return|return
literal|false
return|;
name|FieldDataTermsFilter
name|that
init|=
operator|(
name|FieldDataTermsFilter
operator|)
name|obj
decl_stmt|;
if|if
condition|(
operator|!
name|fieldData
operator|.
name|getFieldNames
argument_list|()
operator|.
name|indexName
argument_list|()
operator|.
name|equals
argument_list|(
name|that
operator|.
name|fieldData
operator|.
name|getFieldNames
argument_list|()
operator|.
name|indexName
argument_list|()
argument_list|)
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|h
init|=
name|super
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|h
operator|=
literal|31
operator|*
name|h
operator|+
name|fieldData
operator|.
name|getFieldNames
argument_list|()
operator|.
name|indexName
argument_list|()
operator|.
name|hashCode
argument_list|()
expr_stmt|;
return|return
name|h
return|;
block|}
comment|/**      * Filters on non-numeric fields.      */
DECL|class|BytesFieldDataFilter
specifier|protected
specifier|static
class|class
name|BytesFieldDataFilter
extends|extends
name|FieldDataTermsFilter
block|{
DECL|field|terms
specifier|final
name|ObjectOpenHashSet
argument_list|<
name|BytesRef
argument_list|>
name|terms
decl_stmt|;
DECL|method|BytesFieldDataFilter
specifier|protected
name|BytesFieldDataFilter
parameter_list|(
name|IndexFieldData
name|fieldData
parameter_list|,
name|ObjectOpenHashSet
argument_list|<
name|BytesRef
argument_list|>
name|terms
parameter_list|)
block|{
name|super
argument_list|(
name|fieldData
argument_list|)
expr_stmt|;
name|this
operator|.
name|terms
operator|=
name|terms
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|super
operator|.
name|equals
argument_list|(
name|obj
argument_list|)
operator|==
literal|false
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|Objects
operator|.
name|equals
argument_list|(
name|terms
argument_list|,
operator|(
operator|(
name|BytesFieldDataFilter
operator|)
name|obj
operator|)
operator|.
name|terms
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|31
operator|*
name|super
operator|.
name|hashCode
argument_list|()
operator|+
name|Objects
operator|.
name|hashCode
argument_list|(
name|terms
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|(
name|String
name|field
parameter_list|)
block|{
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"BytesFieldDataFilter:"
argument_list|)
decl_stmt|;
return|return
name|sb
operator|.
name|append
argument_list|(
name|fieldData
operator|.
name|getFieldNames
argument_list|()
operator|.
name|indexName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
operator|.
name|append
argument_list|(
name|terms
operator|!=
literal|null
condition|?
name|terms
operator|.
name|toString
argument_list|()
else|:
literal|""
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getDocIdSet
specifier|public
name|DocIdSet
name|getDocIdSet
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|,
name|Bits
name|acceptDocs
parameter_list|)
throws|throws
name|IOException
block|{
comment|// make sure there are terms to filter on
if|if
condition|(
name|terms
operator|==
literal|null
operator|||
name|terms
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|null
return|;
specifier|final
name|SortedBinaryDocValues
name|values
init|=
name|fieldData
operator|.
name|load
argument_list|(
name|context
argument_list|)
operator|.
name|getBytesValues
argument_list|()
decl_stmt|;
comment|// load fielddata
return|return
operator|new
name|DocValuesDocIdSet
argument_list|(
name|context
operator|.
name|reader
argument_list|()
operator|.
name|maxDoc
argument_list|()
argument_list|,
name|acceptDocs
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|boolean
name|matchDoc
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
name|values
operator|.
name|setDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
specifier|final
name|int
name|numVals
init|=
name|values
operator|.
name|count
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numVals
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|terms
operator|.
name|contains
argument_list|(
name|values
operator|.
name|valueAt
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|ramBytesUsed
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
block|}
return|;
block|}
block|}
comment|/**      * Filters on non-floating point numeric fields.      */
DECL|class|LongsFieldDataFilter
specifier|protected
specifier|static
class|class
name|LongsFieldDataFilter
extends|extends
name|FieldDataTermsFilter
block|{
DECL|field|terms
specifier|final
name|LongOpenHashSet
name|terms
decl_stmt|;
DECL|method|LongsFieldDataFilter
specifier|protected
name|LongsFieldDataFilter
parameter_list|(
name|IndexNumericFieldData
name|fieldData
parameter_list|,
name|LongOpenHashSet
name|terms
parameter_list|)
block|{
name|super
argument_list|(
name|fieldData
argument_list|)
expr_stmt|;
name|this
operator|.
name|terms
operator|=
name|terms
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|super
operator|.
name|equals
argument_list|(
name|obj
argument_list|)
operator|==
literal|false
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|Objects
operator|.
name|equals
argument_list|(
name|terms
argument_list|,
operator|(
operator|(
name|BytesFieldDataFilter
operator|)
name|obj
operator|)
operator|.
name|terms
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|31
operator|*
name|super
operator|.
name|hashCode
argument_list|()
operator|+
name|Objects
operator|.
name|hashCode
argument_list|(
name|terms
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|(
name|String
name|field
parameter_list|)
block|{
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"LongsFieldDataFilter:"
argument_list|)
decl_stmt|;
return|return
name|sb
operator|.
name|append
argument_list|(
name|fieldData
operator|.
name|getFieldNames
argument_list|()
operator|.
name|indexName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
operator|.
name|append
argument_list|(
name|terms
operator|!=
literal|null
condition|?
name|terms
operator|.
name|toString
argument_list|()
else|:
literal|""
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getDocIdSet
specifier|public
name|DocIdSet
name|getDocIdSet
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|,
name|Bits
name|acceptDocs
parameter_list|)
throws|throws
name|IOException
block|{
comment|// make sure there are terms to filter on
if|if
condition|(
name|terms
operator|==
literal|null
operator|||
name|terms
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|null
return|;
name|IndexNumericFieldData
name|numericFieldData
init|=
operator|(
name|IndexNumericFieldData
operator|)
name|fieldData
decl_stmt|;
if|if
condition|(
operator|!
name|numericFieldData
operator|.
name|getNumericType
argument_list|()
operator|.
name|isFloatingPoint
argument_list|()
condition|)
block|{
specifier|final
name|SortedNumericDocValues
name|values
init|=
name|numericFieldData
operator|.
name|load
argument_list|(
name|context
argument_list|)
operator|.
name|getLongValues
argument_list|()
decl_stmt|;
comment|// load fielddata
return|return
operator|new
name|DocValuesDocIdSet
argument_list|(
name|context
operator|.
name|reader
argument_list|()
operator|.
name|maxDoc
argument_list|()
argument_list|,
name|acceptDocs
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|boolean
name|matchDoc
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
name|values
operator|.
name|setDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
specifier|final
name|int
name|numVals
init|=
name|values
operator|.
name|count
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numVals
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|terms
operator|.
name|contains
argument_list|(
name|values
operator|.
name|valueAt
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
return|;
block|}
comment|// only get here if wrong fielddata type in which case
comment|// no docs will match so we just return null.
return|return
literal|null
return|;
block|}
block|}
comment|/**      * Filters on floating point numeric fields.      */
DECL|class|DoublesFieldDataFilter
specifier|protected
specifier|static
class|class
name|DoublesFieldDataFilter
extends|extends
name|FieldDataTermsFilter
block|{
DECL|field|terms
specifier|final
name|DoubleOpenHashSet
name|terms
decl_stmt|;
DECL|method|DoublesFieldDataFilter
specifier|protected
name|DoublesFieldDataFilter
parameter_list|(
name|IndexNumericFieldData
name|fieldData
parameter_list|,
name|DoubleOpenHashSet
name|terms
parameter_list|)
block|{
name|super
argument_list|(
name|fieldData
argument_list|)
expr_stmt|;
name|this
operator|.
name|terms
operator|=
name|terms
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|super
operator|.
name|equals
argument_list|(
name|obj
argument_list|)
operator|==
literal|false
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|Objects
operator|.
name|equals
argument_list|(
name|terms
argument_list|,
operator|(
operator|(
name|BytesFieldDataFilter
operator|)
name|obj
operator|)
operator|.
name|terms
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|31
operator|*
name|super
operator|.
name|hashCode
argument_list|()
operator|+
name|Objects
operator|.
name|hashCode
argument_list|(
name|terms
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|(
name|String
name|field
parameter_list|)
block|{
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"DoublesFieldDataFilter"
argument_list|)
decl_stmt|;
return|return
name|sb
operator|.
name|append
argument_list|(
name|fieldData
operator|.
name|getFieldNames
argument_list|()
operator|.
name|indexName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
operator|.
name|append
argument_list|(
name|terms
operator|!=
literal|null
condition|?
name|terms
operator|.
name|toString
argument_list|()
else|:
literal|""
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getDocIdSet
specifier|public
name|DocIdSet
name|getDocIdSet
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|,
name|Bits
name|acceptDocs
parameter_list|)
throws|throws
name|IOException
block|{
comment|// make sure there are terms to filter on
if|if
condition|(
name|terms
operator|==
literal|null
operator|||
name|terms
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|null
return|;
comment|// verify we have a floating point numeric fielddata
name|IndexNumericFieldData
name|indexNumericFieldData
init|=
operator|(
name|IndexNumericFieldData
operator|)
name|fieldData
decl_stmt|;
if|if
condition|(
name|indexNumericFieldData
operator|.
name|getNumericType
argument_list|()
operator|.
name|isFloatingPoint
argument_list|()
condition|)
block|{
specifier|final
name|SortedNumericDoubleValues
name|values
init|=
name|indexNumericFieldData
operator|.
name|load
argument_list|(
name|context
argument_list|)
operator|.
name|getDoubleValues
argument_list|()
decl_stmt|;
comment|// load fielddata
return|return
operator|new
name|DocValuesDocIdSet
argument_list|(
name|context
operator|.
name|reader
argument_list|()
operator|.
name|maxDoc
argument_list|()
argument_list|,
name|acceptDocs
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|boolean
name|matchDoc
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
name|values
operator|.
name|setDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
specifier|final
name|int
name|numVals
init|=
name|values
operator|.
name|count
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numVals
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|terms
operator|.
name|contains
argument_list|(
name|values
operator|.
name|valueAt
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
return|;
block|}
comment|// only get here if wrong fielddata type in which case
comment|// no docs will match so we just return null.
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

