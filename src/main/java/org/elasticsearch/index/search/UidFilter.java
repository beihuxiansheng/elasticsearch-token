begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.search
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|search
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermDocs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|FixedBitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|UnicodeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Unicode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bloom
operator|.
name|BloomFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|cache
operator|.
name|bloom
operator|.
name|BloomCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|Uid
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|internal
operator|.
name|UidFieldMapper
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
DECL|class|UidFilter
specifier|public
class|class
name|UidFilter
extends|extends
name|Filter
block|{
DECL|field|uids
specifier|private
specifier|final
name|Term
index|[]
name|uids
decl_stmt|;
DECL|field|bloomCache
specifier|private
specifier|final
name|BloomCache
name|bloomCache
decl_stmt|;
DECL|method|UidFilter
specifier|public
name|UidFilter
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|types
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|ids
parameter_list|,
name|BloomCache
name|bloomCache
parameter_list|)
block|{
name|this
operator|.
name|bloomCache
operator|=
name|bloomCache
expr_stmt|;
name|this
operator|.
name|uids
operator|=
operator|new
name|Term
index|[
name|types
operator|.
name|size
argument_list|()
operator|*
name|ids
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|type
range|:
name|types
control|)
block|{
for|for
control|(
name|String
name|id
range|:
name|ids
control|)
block|{
name|uids
index|[
name|i
operator|++
index|]
operator|=
name|UidFieldMapper
operator|.
name|TERM_FACTORY
operator|.
name|createTerm
argument_list|(
name|Uid
operator|.
name|createUid
argument_list|(
name|type
argument_list|,
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|this
operator|.
name|uids
operator|.
name|length
operator|>
literal|1
condition|)
block|{
name|Arrays
operator|.
name|sort
argument_list|(
name|this
operator|.
name|uids
argument_list|)
expr_stmt|;
block|}
block|}
comment|// TODO Optimizations
comment|// - If we have a single id, we can create a SingleIdDocIdSet to save on mem
comment|// - We can use sorted int array DocIdSet to reserve memory compared to OpenBitSet in some cases
annotation|@
name|Override
DECL|method|getDocIdSet
specifier|public
name|DocIdSet
name|getDocIdSet
parameter_list|(
name|IndexReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
name|BloomFilter
name|filter
init|=
name|bloomCache
operator|.
name|filter
argument_list|(
name|reader
argument_list|,
name|UidFieldMapper
operator|.
name|NAME
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|FixedBitSet
name|set
init|=
literal|null
decl_stmt|;
name|TermDocs
name|td
init|=
literal|null
decl_stmt|;
try|try
block|{
for|for
control|(
name|Term
name|uid
range|:
name|uids
control|)
block|{
name|UnicodeUtil
operator|.
name|UTF8Result
name|utf8
init|=
name|Unicode
operator|.
name|fromStringAsUtf8
argument_list|(
name|uid
operator|.
name|text
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|filter
operator|.
name|isPresent
argument_list|(
name|utf8
operator|.
name|result
argument_list|,
literal|0
argument_list|,
name|utf8
operator|.
name|length
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|td
operator|==
literal|null
condition|)
block|{
name|td
operator|=
name|reader
operator|.
name|termDocs
argument_list|()
expr_stmt|;
block|}
name|td
operator|.
name|seek
argument_list|(
name|uid
argument_list|)
expr_stmt|;
comment|// no need for batching, its on the UID, there will be only one doc
while|while
condition|(
name|td
operator|.
name|next
argument_list|()
condition|)
block|{
if|if
condition|(
name|set
operator|==
literal|null
condition|)
block|{
name|set
operator|=
operator|new
name|FixedBitSet
argument_list|(
name|reader
operator|.
name|maxDoc
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|set
operator|.
name|set
argument_list|(
name|td
operator|.
name|doc
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|td
operator|!=
literal|null
condition|)
block|{
name|td
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|set
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|UidFilter
name|uidFilter
init|=
operator|(
name|UidFilter
operator|)
name|o
decl_stmt|;
return|return
operator|!
name|uids
operator|.
name|equals
argument_list|(
name|uidFilter
operator|.
name|uids
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Term
name|term
range|:
name|uids
control|)
block|{
if|if
condition|(
name|builder
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|append
argument_list|(
name|term
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|uids
operator|.
name|hashCode
argument_list|()
return|;
block|}
block|}
end_class

end_unit

