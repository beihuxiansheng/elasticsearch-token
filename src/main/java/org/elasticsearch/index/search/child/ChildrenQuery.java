begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.search.child
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|search
operator|.
name|child
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SortedDocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BitsFilteredDocIdSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|CollectionTerminatedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSetIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Explanation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Scorer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Weight
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|XFilteredDocIdSetIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|join
operator|.
name|BitDocIdSetFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Bits
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|ToStringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lease
operator|.
name|Releasable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lease
operator|.
name|Releasables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|docset
operator|.
name|DocIdSets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|search
operator|.
name|NoopCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|search
operator|.
name|Queries
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|BigArrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|FloatArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|IntArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|LongHash
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|IndexParentChildFieldData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|plain
operator|.
name|ParentChildIndexFieldData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|SearchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|SearchContext
operator|.
name|Lifetime
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * A query implementation that executes the wrapped child query and connects all the matching child docs to the related  * parent documents using {@link ParentChildIndexFieldData}.  *<p/>  * This query is executed in two rounds. The first round resolves all the matching child documents and groups these  * documents by parent uid value. Also the child scores are aggregated per parent uid value. During the second round  * all parent documents having the same uid value that is collected in the first phase are emitted as hit including  * a score based on the aggregated child scores and score type.  */
end_comment

begin_class
DECL|class|ChildrenQuery
specifier|public
class|class
name|ChildrenQuery
extends|extends
name|Query
block|{
DECL|field|ifd
specifier|protected
specifier|final
name|ParentChildIndexFieldData
name|ifd
decl_stmt|;
DECL|field|parentType
specifier|protected
specifier|final
name|String
name|parentType
decl_stmt|;
DECL|field|childType
specifier|protected
specifier|final
name|String
name|childType
decl_stmt|;
DECL|field|parentFilter
specifier|protected
specifier|final
name|Filter
name|parentFilter
decl_stmt|;
DECL|field|scoreType
specifier|protected
specifier|final
name|ScoreType
name|scoreType
decl_stmt|;
DECL|field|originalChildQuery
specifier|protected
name|Query
name|originalChildQuery
decl_stmt|;
DECL|field|minChildren
specifier|protected
specifier|final
name|int
name|minChildren
decl_stmt|;
DECL|field|maxChildren
specifier|protected
specifier|final
name|int
name|maxChildren
decl_stmt|;
DECL|field|shortCircuitParentDocSet
specifier|protected
specifier|final
name|int
name|shortCircuitParentDocSet
decl_stmt|;
DECL|field|nonNestedDocsFilter
specifier|protected
specifier|final
name|BitDocIdSetFilter
name|nonNestedDocsFilter
decl_stmt|;
DECL|field|rewrittenChildQuery
specifier|protected
name|Query
name|rewrittenChildQuery
decl_stmt|;
DECL|field|rewriteIndexReader
specifier|protected
name|IndexReader
name|rewriteIndexReader
decl_stmt|;
DECL|method|ChildrenQuery
specifier|public
name|ChildrenQuery
parameter_list|(
name|ParentChildIndexFieldData
name|ifd
parameter_list|,
name|String
name|parentType
parameter_list|,
name|String
name|childType
parameter_list|,
name|Filter
name|parentFilter
parameter_list|,
name|Query
name|childQuery
parameter_list|,
name|ScoreType
name|scoreType
parameter_list|,
name|int
name|minChildren
parameter_list|,
name|int
name|maxChildren
parameter_list|,
name|int
name|shortCircuitParentDocSet
parameter_list|,
name|BitDocIdSetFilter
name|nonNestedDocsFilter
parameter_list|)
block|{
name|this
operator|.
name|ifd
operator|=
name|ifd
expr_stmt|;
name|this
operator|.
name|parentType
operator|=
name|parentType
expr_stmt|;
name|this
operator|.
name|childType
operator|=
name|childType
expr_stmt|;
name|this
operator|.
name|parentFilter
operator|=
name|parentFilter
expr_stmt|;
name|this
operator|.
name|originalChildQuery
operator|=
name|childQuery
expr_stmt|;
name|this
operator|.
name|scoreType
operator|=
name|scoreType
expr_stmt|;
name|this
operator|.
name|shortCircuitParentDocSet
operator|=
name|shortCircuitParentDocSet
expr_stmt|;
name|this
operator|.
name|nonNestedDocsFilter
operator|=
name|nonNestedDocsFilter
expr_stmt|;
assert|assert
name|maxChildren
operator|==
literal|0
operator|||
name|minChildren
operator|<=
name|maxChildren
assert|;
name|this
operator|.
name|minChildren
operator|=
name|minChildren
operator|>
literal|1
condition|?
name|minChildren
else|:
literal|0
expr_stmt|;
name|this
operator|.
name|maxChildren
operator|=
name|maxChildren
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|obj
operator|==
literal|null
operator|||
name|obj
operator|.
name|getClass
argument_list|()
operator|!=
name|this
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|ChildrenQuery
name|that
init|=
operator|(
name|ChildrenQuery
operator|)
name|obj
decl_stmt|;
if|if
condition|(
operator|!
name|originalChildQuery
operator|.
name|equals
argument_list|(
name|that
operator|.
name|originalChildQuery
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|childType
operator|.
name|equals
argument_list|(
name|that
operator|.
name|childType
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|getBoost
argument_list|()
operator|!=
name|that
operator|.
name|getBoost
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|minChildren
operator|!=
name|that
operator|.
name|minChildren
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|maxChildren
operator|!=
name|that
operator|.
name|maxChildren
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
name|originalChildQuery
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|childType
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|Float
operator|.
name|floatToIntBits
argument_list|(
name|getBoost
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|minChildren
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|maxChildren
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|(
name|String
name|field
parameter_list|)
block|{
name|int
name|max
init|=
name|maxChildren
operator|==
literal|0
condition|?
name|Integer
operator|.
name|MAX_VALUE
else|:
name|maxChildren
decl_stmt|;
return|return
literal|"ChildrenQuery[min("
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|minChildren
argument_list|)
operator|+
literal|") max("
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|max
argument_list|)
operator|+
literal|")of "
operator|+
name|childType
operator|+
literal|"/"
operator|+
name|parentType
operator|+
literal|"]("
operator|+
name|originalChildQuery
operator|.
name|toString
argument_list|(
name|field
argument_list|)
operator|+
literal|')'
operator|+
name|ToStringUtils
operator|.
name|boost
argument_list|(
name|getBoost
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
comment|// See TopChildrenQuery#rewrite
DECL|method|rewrite
specifier|public
name|Query
name|rewrite
parameter_list|(
name|IndexReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|rewrittenChildQuery
operator|==
literal|null
condition|)
block|{
name|rewriteIndexReader
operator|=
name|reader
expr_stmt|;
name|rewrittenChildQuery
operator|=
name|originalChildQuery
operator|.
name|rewrite
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|clone
specifier|public
name|Query
name|clone
parameter_list|()
block|{
name|ChildrenQuery
name|q
init|=
operator|(
name|ChildrenQuery
operator|)
name|super
operator|.
name|clone
argument_list|()
decl_stmt|;
name|q
operator|.
name|originalChildQuery
operator|=
name|originalChildQuery
operator|.
name|clone
argument_list|()
expr_stmt|;
if|if
condition|(
name|q
operator|.
name|rewrittenChildQuery
operator|!=
literal|null
condition|)
block|{
name|q
operator|.
name|rewrittenChildQuery
operator|=
name|rewrittenChildQuery
operator|.
name|clone
argument_list|()
expr_stmt|;
block|}
return|return
name|q
return|;
block|}
annotation|@
name|Override
DECL|method|createWeight
specifier|public
name|Weight
name|createWeight
parameter_list|(
name|IndexSearcher
name|searcher
parameter_list|,
name|boolean
name|needsScores
parameter_list|)
throws|throws
name|IOException
block|{
name|SearchContext
name|sc
init|=
name|SearchContext
operator|.
name|current
argument_list|()
decl_stmt|;
assert|assert
name|rewrittenChildQuery
operator|!=
literal|null
assert|;
assert|assert
name|rewriteIndexReader
operator|==
name|searcher
operator|.
name|getIndexReader
argument_list|()
operator|:
literal|"not equal, rewriteIndexReader="
operator|+
name|rewriteIndexReader
operator|+
literal|" searcher.getIndexReader()="
operator|+
name|searcher
operator|.
name|getIndexReader
argument_list|()
assert|;
specifier|final
name|Query
name|childQuery
init|=
name|rewrittenChildQuery
decl_stmt|;
name|IndexParentChildFieldData
name|globalIfd
init|=
name|ifd
operator|.
name|loadGlobal
argument_list|(
name|searcher
operator|.
name|getIndexReader
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|globalIfd
operator|==
literal|null
condition|)
block|{
comment|// No docs of the specified type exist on this shard
return|return
name|Queries
operator|.
name|newMatchNoDocsQuery
argument_list|()
operator|.
name|createWeight
argument_list|(
name|searcher
argument_list|,
name|needsScores
argument_list|)
return|;
block|}
name|IndexSearcher
name|indexSearcher
init|=
operator|new
name|IndexSearcher
argument_list|(
name|searcher
operator|.
name|getIndexReader
argument_list|()
argument_list|)
decl_stmt|;
name|indexSearcher
operator|.
name|setSimilarity
argument_list|(
name|searcher
operator|.
name|getSimilarity
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|abort
init|=
literal|true
decl_stmt|;
name|long
name|numFoundParents
decl_stmt|;
name|ParentCollector
name|collector
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|minChildren
operator|==
literal|0
operator|&&
name|maxChildren
operator|==
literal|0
operator|&&
name|scoreType
operator|!=
name|ScoreType
operator|.
name|NONE
condition|)
block|{
switch|switch
condition|(
name|scoreType
condition|)
block|{
case|case
name|MIN
case|:
name|collector
operator|=
operator|new
name|MinCollector
argument_list|(
name|globalIfd
argument_list|,
name|sc
argument_list|,
name|parentType
argument_list|)
expr_stmt|;
break|break;
case|case
name|MAX
case|:
name|collector
operator|=
operator|new
name|MaxCollector
argument_list|(
name|globalIfd
argument_list|,
name|sc
argument_list|,
name|parentType
argument_list|)
expr_stmt|;
break|break;
case|case
name|SUM
case|:
name|collector
operator|=
operator|new
name|SumCollector
argument_list|(
name|globalIfd
argument_list|,
name|sc
argument_list|,
name|parentType
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|collector
operator|==
literal|null
condition|)
block|{
switch|switch
condition|(
name|scoreType
condition|)
block|{
case|case
name|MIN
case|:
name|collector
operator|=
operator|new
name|MinCountCollector
argument_list|(
name|globalIfd
argument_list|,
name|sc
argument_list|,
name|parentType
argument_list|)
expr_stmt|;
break|break;
case|case
name|MAX
case|:
name|collector
operator|=
operator|new
name|MaxCountCollector
argument_list|(
name|globalIfd
argument_list|,
name|sc
argument_list|,
name|parentType
argument_list|)
expr_stmt|;
break|break;
case|case
name|SUM
case|:
case|case
name|AVG
case|:
name|collector
operator|=
operator|new
name|SumCountAndAvgCollector
argument_list|(
name|globalIfd
argument_list|,
name|sc
argument_list|,
name|parentType
argument_list|)
expr_stmt|;
break|break;
case|case
name|NONE
case|:
name|collector
operator|=
operator|new
name|CountCollector
argument_list|(
name|globalIfd
argument_list|,
name|sc
argument_list|,
name|parentType
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Are we missing a score type here? -- "
operator|+
name|scoreType
argument_list|)
throw|;
block|}
block|}
name|indexSearcher
operator|.
name|search
argument_list|(
name|childQuery
argument_list|,
name|collector
argument_list|)
expr_stmt|;
name|numFoundParents
operator|=
name|collector
operator|.
name|foundParents
argument_list|()
expr_stmt|;
if|if
condition|(
name|numFoundParents
operator|==
literal|0
condition|)
block|{
return|return
name|Queries
operator|.
name|newMatchNoDocsQuery
argument_list|()
operator|.
name|createWeight
argument_list|(
name|searcher
argument_list|,
name|needsScores
argument_list|)
return|;
block|}
name|abort
operator|=
literal|false
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|abort
condition|)
block|{
name|Releasables
operator|.
name|close
argument_list|(
name|collector
argument_list|)
expr_stmt|;
block|}
block|}
name|sc
operator|.
name|addReleasable
argument_list|(
name|collector
argument_list|,
name|Lifetime
operator|.
name|COLLECTION
argument_list|)
expr_stmt|;
specifier|final
name|Filter
name|parentFilter
decl_stmt|;
if|if
condition|(
name|numFoundParents
operator|<=
name|shortCircuitParentDocSet
condition|)
block|{
name|parentFilter
operator|=
name|ParentIdsFilter
operator|.
name|createShortCircuitFilter
argument_list|(
name|nonNestedDocsFilter
argument_list|,
name|sc
argument_list|,
name|parentType
argument_list|,
name|collector
operator|.
name|values
argument_list|,
name|collector
operator|.
name|parentIdxs
argument_list|,
name|numFoundParents
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|parentFilter
operator|=
name|this
operator|.
name|parentFilter
expr_stmt|;
block|}
return|return
operator|new
name|ParentWeight
argument_list|(
name|this
argument_list|,
name|rewrittenChildQuery
operator|.
name|createWeight
argument_list|(
name|searcher
argument_list|,
name|needsScores
argument_list|)
argument_list|,
name|parentFilter
argument_list|,
name|numFoundParents
argument_list|,
name|collector
argument_list|,
name|minChildren
argument_list|,
name|maxChildren
argument_list|)
return|;
block|}
DECL|class|ParentWeight
specifier|protected
class|class
name|ParentWeight
extends|extends
name|Weight
block|{
DECL|field|childWeight
specifier|protected
specifier|final
name|Weight
name|childWeight
decl_stmt|;
DECL|field|parentFilter
specifier|protected
specifier|final
name|Filter
name|parentFilter
decl_stmt|;
DECL|field|collector
specifier|protected
specifier|final
name|ParentCollector
name|collector
decl_stmt|;
DECL|field|minChildren
specifier|protected
specifier|final
name|int
name|minChildren
decl_stmt|;
DECL|field|maxChildren
specifier|protected
specifier|final
name|int
name|maxChildren
decl_stmt|;
DECL|field|remaining
specifier|protected
name|long
name|remaining
decl_stmt|;
DECL|field|queryNorm
specifier|protected
name|float
name|queryNorm
decl_stmt|;
DECL|field|queryWeight
specifier|protected
name|float
name|queryWeight
decl_stmt|;
DECL|method|ParentWeight
specifier|protected
name|ParentWeight
parameter_list|(
name|Query
name|query
parameter_list|,
name|Weight
name|childWeight
parameter_list|,
name|Filter
name|parentFilter
parameter_list|,
name|long
name|remaining
parameter_list|,
name|ParentCollector
name|collector
parameter_list|,
name|int
name|minChildren
parameter_list|,
name|int
name|maxChildren
parameter_list|)
block|{
name|super
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|this
operator|.
name|childWeight
operator|=
name|childWeight
expr_stmt|;
name|this
operator|.
name|parentFilter
operator|=
name|parentFilter
expr_stmt|;
name|this
operator|.
name|remaining
operator|=
name|remaining
expr_stmt|;
name|this
operator|.
name|collector
operator|=
name|collector
expr_stmt|;
name|this
operator|.
name|minChildren
operator|=
name|minChildren
expr_stmt|;
name|this
operator|.
name|maxChildren
operator|=
name|maxChildren
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|extractTerms
specifier|public
name|void
name|extractTerms
parameter_list|(
name|Set
argument_list|<
name|Term
argument_list|>
name|terms
parameter_list|)
block|{         }
annotation|@
name|Override
DECL|method|explain
specifier|public
name|Explanation
name|explain
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|,
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|Explanation
argument_list|(
name|getBoost
argument_list|()
argument_list|,
literal|"not implemented yet..."
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|normalize
specifier|public
name|void
name|normalize
parameter_list|(
name|float
name|norm
parameter_list|,
name|float
name|topLevelBoost
parameter_list|)
block|{
name|this
operator|.
name|queryNorm
operator|=
name|norm
operator|*
name|topLevelBoost
expr_stmt|;
name|queryWeight
operator|*=
name|this
operator|.
name|queryNorm
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getValueForNormalization
specifier|public
name|float
name|getValueForNormalization
parameter_list|()
throws|throws
name|IOException
block|{
name|queryWeight
operator|=
name|getBoost
argument_list|()
expr_stmt|;
if|if
condition|(
name|scoreType
operator|==
name|ScoreType
operator|.
name|NONE
condition|)
block|{
return|return
name|queryWeight
operator|*
name|queryWeight
return|;
block|}
name|float
name|sum
init|=
name|childWeight
operator|.
name|getValueForNormalization
argument_list|()
decl_stmt|;
name|sum
operator|*=
name|queryWeight
operator|*
name|queryWeight
expr_stmt|;
return|return
name|sum
return|;
block|}
annotation|@
name|Override
DECL|method|scorer
specifier|public
name|Scorer
name|scorer
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|,
name|Bits
name|acceptDocs
parameter_list|)
throws|throws
name|IOException
block|{
name|DocIdSet
name|parentsSet
init|=
name|parentFilter
operator|.
name|getDocIdSet
argument_list|(
name|context
argument_list|,
name|acceptDocs
argument_list|)
decl_stmt|;
if|if
condition|(
name|DocIdSets
operator|.
name|isEmpty
argument_list|(
name|parentsSet
argument_list|)
operator|||
name|remaining
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// We can't be sure of the fact that liveDocs have been applied, so we apply it here. The "remaining"
comment|// count down (short circuit) logic will then work as expected.
name|DocIdSetIterator
name|parents
init|=
name|BitsFilteredDocIdSet
operator|.
name|wrap
argument_list|(
name|parentsSet
argument_list|,
name|context
operator|.
name|reader
argument_list|()
operator|.
name|getLiveDocs
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
if|if
condition|(
name|parents
operator|!=
literal|null
condition|)
block|{
name|SortedDocValues
name|bytesValues
init|=
name|collector
operator|.
name|globalIfd
operator|.
name|load
argument_list|(
name|context
argument_list|)
operator|.
name|getOrdinalsValues
argument_list|(
name|parentType
argument_list|)
decl_stmt|;
if|if
condition|(
name|bytesValues
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|minChildren
operator|>
literal|0
operator|||
name|maxChildren
operator|!=
literal|0
operator|||
name|scoreType
operator|==
name|ScoreType
operator|.
name|NONE
condition|)
block|{
switch|switch
condition|(
name|scoreType
condition|)
block|{
case|case
name|NONE
case|:
name|DocIdSetIterator
name|parentIdIterator
init|=
operator|new
name|CountParentOrdIterator
argument_list|(
name|this
argument_list|,
name|parents
argument_list|,
name|collector
argument_list|,
name|bytesValues
argument_list|,
name|minChildren
argument_list|,
name|maxChildren
argument_list|)
decl_stmt|;
return|return
name|ConstantScorer
operator|.
name|create
argument_list|(
name|parentIdIterator
argument_list|,
name|this
argument_list|,
name|queryWeight
argument_list|)
return|;
case|case
name|AVG
case|:
return|return
operator|new
name|AvgParentCountScorer
argument_list|(
name|this
argument_list|,
name|parents
argument_list|,
name|collector
argument_list|,
name|bytesValues
argument_list|,
name|minChildren
argument_list|,
name|maxChildren
argument_list|)
return|;
default|default:
return|return
operator|new
name|ParentCountScorer
argument_list|(
name|this
argument_list|,
name|parents
argument_list|,
name|collector
argument_list|,
name|bytesValues
argument_list|,
name|minChildren
argument_list|,
name|maxChildren
argument_list|)
return|;
block|}
block|}
switch|switch
condition|(
name|scoreType
condition|)
block|{
case|case
name|AVG
case|:
return|return
operator|new
name|AvgParentScorer
argument_list|(
name|this
argument_list|,
name|parents
argument_list|,
name|collector
argument_list|,
name|bytesValues
argument_list|)
return|;
default|default:
return|return
operator|new
name|ParentScorer
argument_list|(
name|this
argument_list|,
name|parents
argument_list|,
name|collector
argument_list|,
name|bytesValues
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
DECL|class|ParentCollector
specifier|protected
specifier|abstract
specifier|static
class|class
name|ParentCollector
extends|extends
name|NoopCollector
implements|implements
name|Releasable
block|{
DECL|field|globalIfd
specifier|protected
specifier|final
name|IndexParentChildFieldData
name|globalIfd
decl_stmt|;
DECL|field|parentIdxs
specifier|protected
specifier|final
name|LongHash
name|parentIdxs
decl_stmt|;
DECL|field|bigArrays
specifier|protected
specifier|final
name|BigArrays
name|bigArrays
decl_stmt|;
DECL|field|searchContext
specifier|protected
specifier|final
name|SearchContext
name|searchContext
decl_stmt|;
DECL|field|parentType
specifier|protected
specifier|final
name|String
name|parentType
decl_stmt|;
DECL|field|values
specifier|protected
name|SortedDocValues
name|values
decl_stmt|;
DECL|field|scorer
specifier|protected
name|Scorer
name|scorer
decl_stmt|;
DECL|method|ParentCollector
specifier|protected
name|ParentCollector
parameter_list|(
name|IndexParentChildFieldData
name|globalIfd
parameter_list|,
name|SearchContext
name|searchContext
parameter_list|,
name|String
name|parentType
parameter_list|)
block|{
name|this
operator|.
name|globalIfd
operator|=
name|globalIfd
expr_stmt|;
name|this
operator|.
name|searchContext
operator|=
name|searchContext
expr_stmt|;
name|this
operator|.
name|bigArrays
operator|=
name|searchContext
operator|.
name|bigArrays
argument_list|()
expr_stmt|;
name|this
operator|.
name|parentIdxs
operator|=
operator|new
name|LongHash
argument_list|(
literal|512
argument_list|,
name|bigArrays
argument_list|)
expr_stmt|;
name|this
operator|.
name|parentType
operator|=
name|parentType
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|collect
specifier|public
specifier|final
name|void
name|collect
parameter_list|(
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|values
operator|!=
literal|null
condition|)
block|{
specifier|final
name|long
name|globalOrdinal
init|=
name|values
operator|.
name|getOrd
argument_list|(
name|doc
argument_list|)
decl_stmt|;
if|if
condition|(
name|globalOrdinal
operator|>=
literal|0
condition|)
block|{
name|long
name|parentIdx
init|=
name|parentIdxs
operator|.
name|add
argument_list|(
name|globalOrdinal
argument_list|)
decl_stmt|;
if|if
condition|(
name|parentIdx
operator|>=
literal|0
condition|)
block|{
name|newParent
argument_list|(
name|parentIdx
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|parentIdx
operator|=
operator|-
literal|1
operator|-
name|parentIdx
expr_stmt|;
name|existingParent
argument_list|(
name|parentIdx
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|newParent
specifier|protected
name|void
name|newParent
parameter_list|(
name|long
name|parentIdx
parameter_list|)
throws|throws
name|IOException
block|{         }
DECL|method|existingParent
specifier|protected
name|void
name|existingParent
parameter_list|(
name|long
name|parentIdx
parameter_list|)
throws|throws
name|IOException
block|{         }
DECL|method|foundParents
specifier|public
name|long
name|foundParents
parameter_list|()
block|{
return|return
name|parentIdxs
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|doSetNextReader
specifier|protected
name|void
name|doSetNextReader
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|values
operator|=
name|globalIfd
operator|.
name|load
argument_list|(
name|context
argument_list|)
operator|.
name|getOrdinalsValues
argument_list|(
name|parentType
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setScorer
specifier|public
name|void
name|setScorer
parameter_list|(
name|Scorer
name|scorer
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|scorer
operator|=
name|scorer
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|ElasticsearchException
block|{
name|Releasables
operator|.
name|close
argument_list|(
name|parentIdxs
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|ParentScoreCollector
specifier|protected
specifier|abstract
specifier|static
class|class
name|ParentScoreCollector
extends|extends
name|ParentCollector
implements|implements
name|Releasable
block|{
DECL|field|scores
specifier|protected
name|FloatArray
name|scores
decl_stmt|;
DECL|method|ParentScoreCollector
specifier|protected
name|ParentScoreCollector
parameter_list|(
name|IndexParentChildFieldData
name|globalIfd
parameter_list|,
name|SearchContext
name|searchContext
parameter_list|,
name|String
name|parentType
parameter_list|)
block|{
name|super
argument_list|(
name|globalIfd
argument_list|,
name|searchContext
argument_list|,
name|parentType
argument_list|)
expr_stmt|;
name|this
operator|.
name|scores
operator|=
name|this
operator|.
name|bigArrays
operator|.
name|newFloatArray
argument_list|(
literal|512
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|needsScores
specifier|public
name|boolean
name|needsScores
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|newParent
specifier|protected
name|void
name|newParent
parameter_list|(
name|long
name|parentIdx
parameter_list|)
throws|throws
name|IOException
block|{
name|scores
operator|=
name|bigArrays
operator|.
name|grow
argument_list|(
name|scores
argument_list|,
name|parentIdx
operator|+
literal|1
argument_list|)
expr_stmt|;
name|scores
operator|.
name|set
argument_list|(
name|parentIdx
argument_list|,
name|scorer
operator|.
name|score
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|ElasticsearchException
block|{
name|Releasables
operator|.
name|close
argument_list|(
name|parentIdxs
argument_list|,
name|scores
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|ParentScoreCountCollector
specifier|protected
specifier|abstract
specifier|static
class|class
name|ParentScoreCountCollector
extends|extends
name|ParentScoreCollector
implements|implements
name|Releasable
block|{
DECL|field|occurrences
specifier|protected
name|IntArray
name|occurrences
decl_stmt|;
DECL|method|ParentScoreCountCollector
specifier|protected
name|ParentScoreCountCollector
parameter_list|(
name|IndexParentChildFieldData
name|globalIfd
parameter_list|,
name|SearchContext
name|searchContext
parameter_list|,
name|String
name|parentType
parameter_list|)
block|{
name|super
argument_list|(
name|globalIfd
argument_list|,
name|searchContext
argument_list|,
name|parentType
argument_list|)
expr_stmt|;
name|this
operator|.
name|occurrences
operator|=
name|bigArrays
operator|.
name|newIntArray
argument_list|(
literal|512
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|newParent
specifier|protected
name|void
name|newParent
parameter_list|(
name|long
name|parentIdx
parameter_list|)
throws|throws
name|IOException
block|{
name|scores
operator|=
name|bigArrays
operator|.
name|grow
argument_list|(
name|scores
argument_list|,
name|parentIdx
operator|+
literal|1
argument_list|)
expr_stmt|;
name|scores
operator|.
name|set
argument_list|(
name|parentIdx
argument_list|,
name|scorer
operator|.
name|score
argument_list|()
argument_list|)
expr_stmt|;
name|occurrences
operator|=
name|bigArrays
operator|.
name|grow
argument_list|(
name|occurrences
argument_list|,
name|parentIdx
operator|+
literal|1
argument_list|)
expr_stmt|;
name|occurrences
operator|.
name|set
argument_list|(
name|parentIdx
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|ElasticsearchException
block|{
name|Releasables
operator|.
name|close
argument_list|(
name|parentIdxs
argument_list|,
name|scores
argument_list|,
name|occurrences
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|CountCollector
specifier|private
specifier|final
specifier|static
class|class
name|CountCollector
extends|extends
name|ParentCollector
implements|implements
name|Releasable
block|{
DECL|field|occurrences
specifier|protected
name|IntArray
name|occurrences
decl_stmt|;
DECL|method|CountCollector
specifier|protected
name|CountCollector
parameter_list|(
name|IndexParentChildFieldData
name|globalIfd
parameter_list|,
name|SearchContext
name|searchContext
parameter_list|,
name|String
name|parentType
parameter_list|)
block|{
name|super
argument_list|(
name|globalIfd
argument_list|,
name|searchContext
argument_list|,
name|parentType
argument_list|)
expr_stmt|;
name|this
operator|.
name|occurrences
operator|=
name|bigArrays
operator|.
name|newIntArray
argument_list|(
literal|512
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|newParent
specifier|protected
name|void
name|newParent
parameter_list|(
name|long
name|parentIdx
parameter_list|)
throws|throws
name|IOException
block|{
name|occurrences
operator|=
name|bigArrays
operator|.
name|grow
argument_list|(
name|occurrences
argument_list|,
name|parentIdx
operator|+
literal|1
argument_list|)
expr_stmt|;
name|occurrences
operator|.
name|set
argument_list|(
name|parentIdx
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|existingParent
specifier|protected
name|void
name|existingParent
parameter_list|(
name|long
name|parentIdx
parameter_list|)
throws|throws
name|IOException
block|{
name|occurrences
operator|.
name|increment
argument_list|(
name|parentIdx
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|ElasticsearchException
block|{
name|Releasables
operator|.
name|close
argument_list|(
name|parentIdxs
argument_list|,
name|occurrences
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|SumCollector
specifier|private
specifier|final
specifier|static
class|class
name|SumCollector
extends|extends
name|ParentScoreCollector
block|{
DECL|method|SumCollector
specifier|private
name|SumCollector
parameter_list|(
name|IndexParentChildFieldData
name|globalIfd
parameter_list|,
name|SearchContext
name|searchContext
parameter_list|,
name|String
name|parentType
parameter_list|)
block|{
name|super
argument_list|(
name|globalIfd
argument_list|,
name|searchContext
argument_list|,
name|parentType
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|existingParent
specifier|protected
name|void
name|existingParent
parameter_list|(
name|long
name|parentIdx
parameter_list|)
throws|throws
name|IOException
block|{
name|scores
operator|.
name|increment
argument_list|(
name|parentIdx
argument_list|,
name|scorer
operator|.
name|score
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|MaxCollector
specifier|private
specifier|final
specifier|static
class|class
name|MaxCollector
extends|extends
name|ParentScoreCollector
block|{
DECL|method|MaxCollector
specifier|private
name|MaxCollector
parameter_list|(
name|IndexParentChildFieldData
name|globalIfd
parameter_list|,
name|SearchContext
name|searchContext
parameter_list|,
name|String
name|parentType
parameter_list|)
block|{
name|super
argument_list|(
name|globalIfd
argument_list|,
name|searchContext
argument_list|,
name|parentType
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|existingParent
specifier|protected
name|void
name|existingParent
parameter_list|(
name|long
name|parentIdx
parameter_list|)
throws|throws
name|IOException
block|{
name|float
name|currentScore
init|=
name|scorer
operator|.
name|score
argument_list|()
decl_stmt|;
if|if
condition|(
name|currentScore
operator|>
name|scores
operator|.
name|get
argument_list|(
name|parentIdx
argument_list|)
condition|)
block|{
name|scores
operator|.
name|set
argument_list|(
name|parentIdx
argument_list|,
name|currentScore
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|MinCollector
specifier|private
specifier|final
specifier|static
class|class
name|MinCollector
extends|extends
name|ParentScoreCollector
block|{
DECL|method|MinCollector
specifier|private
name|MinCollector
parameter_list|(
name|IndexParentChildFieldData
name|globalIfd
parameter_list|,
name|SearchContext
name|searchContext
parameter_list|,
name|String
name|parentType
parameter_list|)
block|{
name|super
argument_list|(
name|globalIfd
argument_list|,
name|searchContext
argument_list|,
name|parentType
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|existingParent
specifier|protected
name|void
name|existingParent
parameter_list|(
name|long
name|parentIdx
parameter_list|)
throws|throws
name|IOException
block|{
name|float
name|currentScore
init|=
name|scorer
operator|.
name|score
argument_list|()
decl_stmt|;
if|if
condition|(
name|currentScore
operator|<
name|scores
operator|.
name|get
argument_list|(
name|parentIdx
argument_list|)
condition|)
block|{
name|scores
operator|.
name|set
argument_list|(
name|parentIdx
argument_list|,
name|currentScore
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|MaxCountCollector
specifier|private
specifier|final
specifier|static
class|class
name|MaxCountCollector
extends|extends
name|ParentScoreCountCollector
block|{
DECL|method|MaxCountCollector
specifier|private
name|MaxCountCollector
parameter_list|(
name|IndexParentChildFieldData
name|globalIfd
parameter_list|,
name|SearchContext
name|searchContext
parameter_list|,
name|String
name|parentType
parameter_list|)
block|{
name|super
argument_list|(
name|globalIfd
argument_list|,
name|searchContext
argument_list|,
name|parentType
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|existingParent
specifier|protected
name|void
name|existingParent
parameter_list|(
name|long
name|parentIdx
parameter_list|)
throws|throws
name|IOException
block|{
name|float
name|currentScore
init|=
name|scorer
operator|.
name|score
argument_list|()
decl_stmt|;
if|if
condition|(
name|currentScore
operator|>
name|scores
operator|.
name|get
argument_list|(
name|parentIdx
argument_list|)
condition|)
block|{
name|scores
operator|.
name|set
argument_list|(
name|parentIdx
argument_list|,
name|currentScore
argument_list|)
expr_stmt|;
block|}
name|occurrences
operator|.
name|increment
argument_list|(
name|parentIdx
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|MinCountCollector
specifier|private
specifier|final
specifier|static
class|class
name|MinCountCollector
extends|extends
name|ParentScoreCountCollector
block|{
DECL|method|MinCountCollector
specifier|private
name|MinCountCollector
parameter_list|(
name|IndexParentChildFieldData
name|globalIfd
parameter_list|,
name|SearchContext
name|searchContext
parameter_list|,
name|String
name|parentType
parameter_list|)
block|{
name|super
argument_list|(
name|globalIfd
argument_list|,
name|searchContext
argument_list|,
name|parentType
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|existingParent
specifier|protected
name|void
name|existingParent
parameter_list|(
name|long
name|parentIdx
parameter_list|)
throws|throws
name|IOException
block|{
name|float
name|currentScore
init|=
name|scorer
operator|.
name|score
argument_list|()
decl_stmt|;
if|if
condition|(
name|currentScore
operator|<
name|scores
operator|.
name|get
argument_list|(
name|parentIdx
argument_list|)
condition|)
block|{
name|scores
operator|.
name|set
argument_list|(
name|parentIdx
argument_list|,
name|currentScore
argument_list|)
expr_stmt|;
block|}
name|occurrences
operator|.
name|increment
argument_list|(
name|parentIdx
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|SumCountAndAvgCollector
specifier|private
specifier|final
specifier|static
class|class
name|SumCountAndAvgCollector
extends|extends
name|ParentScoreCountCollector
block|{
DECL|method|SumCountAndAvgCollector
name|SumCountAndAvgCollector
parameter_list|(
name|IndexParentChildFieldData
name|globalIfd
parameter_list|,
name|SearchContext
name|searchContext
parameter_list|,
name|String
name|parentType
parameter_list|)
block|{
name|super
argument_list|(
name|globalIfd
argument_list|,
name|searchContext
argument_list|,
name|parentType
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|existingParent
specifier|protected
name|void
name|existingParent
parameter_list|(
name|long
name|parentIdx
parameter_list|)
throws|throws
name|IOException
block|{
name|scores
operator|.
name|increment
argument_list|(
name|parentIdx
argument_list|,
name|scorer
operator|.
name|score
argument_list|()
argument_list|)
expr_stmt|;
name|occurrences
operator|.
name|increment
argument_list|(
name|parentIdx
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|ParentScorer
specifier|private
specifier|static
class|class
name|ParentScorer
extends|extends
name|Scorer
block|{
DECL|field|parentWeight
specifier|final
name|ParentWeight
name|parentWeight
decl_stmt|;
DECL|field|parentIds
specifier|final
name|LongHash
name|parentIds
decl_stmt|;
DECL|field|scores
specifier|final
name|FloatArray
name|scores
decl_stmt|;
DECL|field|globalOrdinals
specifier|final
name|SortedDocValues
name|globalOrdinals
decl_stmt|;
DECL|field|parentsIterator
specifier|final
name|DocIdSetIterator
name|parentsIterator
decl_stmt|;
DECL|field|currentDocId
name|int
name|currentDocId
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|currentScore
name|float
name|currentScore
decl_stmt|;
DECL|method|ParentScorer
name|ParentScorer
parameter_list|(
name|ParentWeight
name|parentWeight
parameter_list|,
name|DocIdSetIterator
name|parentsIterator
parameter_list|,
name|ParentCollector
name|collector
parameter_list|,
name|SortedDocValues
name|globalOrdinals
parameter_list|)
block|{
name|super
argument_list|(
name|parentWeight
argument_list|)
expr_stmt|;
name|this
operator|.
name|parentWeight
operator|=
name|parentWeight
expr_stmt|;
name|this
operator|.
name|globalOrdinals
operator|=
name|globalOrdinals
expr_stmt|;
name|this
operator|.
name|parentsIterator
operator|=
name|parentsIterator
expr_stmt|;
name|this
operator|.
name|parentIds
operator|=
name|collector
operator|.
name|parentIdxs
expr_stmt|;
name|this
operator|.
name|scores
operator|=
operator|(
operator|(
name|ParentScoreCollector
operator|)
name|collector
operator|)
operator|.
name|scores
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|score
specifier|public
name|float
name|score
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|currentScore
return|;
block|}
DECL|method|acceptAndScore
specifier|protected
name|boolean
name|acceptAndScore
parameter_list|(
name|long
name|parentIdx
parameter_list|)
block|{
name|currentScore
operator|=
name|scores
operator|.
name|get
argument_list|(
name|parentIdx
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|freq
specifier|public
name|int
name|freq
parameter_list|()
throws|throws
name|IOException
block|{
comment|// We don't have the original child query hit info here...
comment|// But the freq of the children could be collector and returned here, but makes this Scorer more expensive.
return|return
literal|1
return|;
block|}
annotation|@
name|Override
DECL|method|docID
specifier|public
name|int
name|docID
parameter_list|()
block|{
return|return
name|currentDocId
return|;
block|}
annotation|@
name|Override
DECL|method|nextDoc
specifier|public
name|int
name|nextDoc
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|parentWeight
operator|.
name|remaining
operator|==
literal|0
condition|)
block|{
return|return
name|currentDocId
operator|=
name|NO_MORE_DOCS
return|;
block|}
while|while
condition|(
literal|true
condition|)
block|{
name|currentDocId
operator|=
name|parentsIterator
operator|.
name|nextDoc
argument_list|()
expr_stmt|;
if|if
condition|(
name|currentDocId
operator|==
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|)
block|{
return|return
name|currentDocId
return|;
block|}
specifier|final
name|int
name|globalOrdinal
init|=
name|globalOrdinals
operator|.
name|getOrd
argument_list|(
name|currentDocId
argument_list|)
decl_stmt|;
if|if
condition|(
name|globalOrdinal
operator|<
literal|0
condition|)
block|{
continue|continue;
block|}
specifier|final
name|long
name|parentIdx
init|=
name|parentIds
operator|.
name|find
argument_list|(
name|globalOrdinal
argument_list|)
decl_stmt|;
if|if
condition|(
name|parentIdx
operator|!=
operator|-
literal|1
condition|)
block|{
name|parentWeight
operator|.
name|remaining
operator|--
expr_stmt|;
if|if
condition|(
name|acceptAndScore
argument_list|(
name|parentIdx
argument_list|)
condition|)
block|{
return|return
name|currentDocId
return|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|advance
specifier|public
name|int
name|advance
parameter_list|(
name|int
name|target
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|parentWeight
operator|.
name|remaining
operator|==
literal|0
condition|)
block|{
return|return
name|currentDocId
operator|=
name|NO_MORE_DOCS
return|;
block|}
name|currentDocId
operator|=
name|parentsIterator
operator|.
name|advance
argument_list|(
name|target
argument_list|)
expr_stmt|;
if|if
condition|(
name|currentDocId
operator|==
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|)
block|{
return|return
name|currentDocId
return|;
block|}
specifier|final
name|long
name|globalOrdinal
init|=
name|globalOrdinals
operator|.
name|getOrd
argument_list|(
name|currentDocId
argument_list|)
decl_stmt|;
if|if
condition|(
name|globalOrdinal
operator|<
literal|0
condition|)
block|{
return|return
name|nextDoc
argument_list|()
return|;
block|}
specifier|final
name|long
name|parentIdx
init|=
name|parentIds
operator|.
name|find
argument_list|(
name|globalOrdinal
argument_list|)
decl_stmt|;
if|if
condition|(
name|parentIdx
operator|!=
operator|-
literal|1
condition|)
block|{
name|parentWeight
operator|.
name|remaining
operator|--
expr_stmt|;
if|if
condition|(
name|acceptAndScore
argument_list|(
name|parentIdx
argument_list|)
condition|)
block|{
return|return
name|currentDocId
return|;
block|}
block|}
return|return
name|nextDoc
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|cost
specifier|public
name|long
name|cost
parameter_list|()
block|{
return|return
name|parentsIterator
operator|.
name|cost
argument_list|()
return|;
block|}
block|}
DECL|class|ParentCountScorer
specifier|private
specifier|static
class|class
name|ParentCountScorer
extends|extends
name|ParentScorer
block|{
DECL|field|occurrences
specifier|protected
specifier|final
name|IntArray
name|occurrences
decl_stmt|;
DECL|field|minChildren
specifier|protected
specifier|final
name|int
name|minChildren
decl_stmt|;
DECL|field|maxChildren
specifier|protected
specifier|final
name|int
name|maxChildren
decl_stmt|;
DECL|method|ParentCountScorer
name|ParentCountScorer
parameter_list|(
name|ParentWeight
name|parentWeight
parameter_list|,
name|DocIdSetIterator
name|parentsIterator
parameter_list|,
name|ParentCollector
name|collector
parameter_list|,
name|SortedDocValues
name|globalOrdinals
parameter_list|,
name|int
name|minChildren
parameter_list|,
name|int
name|maxChildren
parameter_list|)
block|{
name|super
argument_list|(
name|parentWeight
argument_list|,
name|parentsIterator
argument_list|,
operator|(
name|ParentScoreCollector
operator|)
name|collector
argument_list|,
name|globalOrdinals
argument_list|)
expr_stmt|;
name|this
operator|.
name|minChildren
operator|=
name|minChildren
expr_stmt|;
name|this
operator|.
name|maxChildren
operator|=
name|maxChildren
operator|==
literal|0
condition|?
name|Integer
operator|.
name|MAX_VALUE
else|:
name|maxChildren
expr_stmt|;
name|this
operator|.
name|occurrences
operator|=
operator|(
operator|(
name|ParentScoreCountCollector
operator|)
name|collector
operator|)
operator|.
name|occurrences
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|acceptAndScore
specifier|protected
name|boolean
name|acceptAndScore
parameter_list|(
name|long
name|parentIdx
parameter_list|)
block|{
name|int
name|count
init|=
name|occurrences
operator|.
name|get
argument_list|(
name|parentIdx
argument_list|)
decl_stmt|;
if|if
condition|(
name|count
argument_list|<
name|minChildren
operator|||
name|count
argument_list|>
name|maxChildren
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|super
operator|.
name|acceptAndScore
argument_list|(
name|parentIdx
argument_list|)
return|;
block|}
block|}
DECL|class|AvgParentScorer
specifier|private
specifier|static
specifier|final
class|class
name|AvgParentScorer
extends|extends
name|ParentCountScorer
block|{
DECL|method|AvgParentScorer
name|AvgParentScorer
parameter_list|(
name|ParentWeight
name|weight
parameter_list|,
name|DocIdSetIterator
name|parentsIterator
parameter_list|,
name|ParentCollector
name|collector
parameter_list|,
name|SortedDocValues
name|globalOrdinals
parameter_list|)
block|{
name|super
argument_list|(
name|weight
argument_list|,
name|parentsIterator
argument_list|,
name|collector
argument_list|,
name|globalOrdinals
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|acceptAndScore
specifier|protected
name|boolean
name|acceptAndScore
parameter_list|(
name|long
name|parentIdx
parameter_list|)
block|{
name|currentScore
operator|=
name|scores
operator|.
name|get
argument_list|(
name|parentIdx
argument_list|)
expr_stmt|;
name|currentScore
operator|/=
name|occurrences
operator|.
name|get
argument_list|(
name|parentIdx
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
DECL|class|AvgParentCountScorer
specifier|private
specifier|static
specifier|final
class|class
name|AvgParentCountScorer
extends|extends
name|ParentCountScorer
block|{
DECL|method|AvgParentCountScorer
name|AvgParentCountScorer
parameter_list|(
name|ParentWeight
name|weight
parameter_list|,
name|DocIdSetIterator
name|parentsIterator
parameter_list|,
name|ParentCollector
name|collector
parameter_list|,
name|SortedDocValues
name|globalOrdinals
parameter_list|,
name|int
name|minChildren
parameter_list|,
name|int
name|maxChildren
parameter_list|)
block|{
name|super
argument_list|(
name|weight
argument_list|,
name|parentsIterator
argument_list|,
name|collector
argument_list|,
name|globalOrdinals
argument_list|,
name|minChildren
argument_list|,
name|maxChildren
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|acceptAndScore
specifier|protected
name|boolean
name|acceptAndScore
parameter_list|(
name|long
name|parentIdx
parameter_list|)
block|{
name|int
name|count
init|=
name|occurrences
operator|.
name|get
argument_list|(
name|parentIdx
argument_list|)
decl_stmt|;
if|if
condition|(
name|count
argument_list|<
name|minChildren
operator|||
name|count
argument_list|>
name|maxChildren
condition|)
block|{
return|return
literal|false
return|;
block|}
name|currentScore
operator|=
name|scores
operator|.
name|get
argument_list|(
name|parentIdx
argument_list|)
expr_stmt|;
name|currentScore
operator|/=
name|occurrences
operator|.
name|get
argument_list|(
name|parentIdx
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
DECL|class|CountParentOrdIterator
specifier|private
specifier|final
specifier|static
class|class
name|CountParentOrdIterator
extends|extends
name|XFilteredDocIdSetIterator
block|{
DECL|field|parentIds
specifier|private
specifier|final
name|LongHash
name|parentIds
decl_stmt|;
DECL|field|occurrences
specifier|protected
specifier|final
name|IntArray
name|occurrences
decl_stmt|;
DECL|field|minChildren
specifier|private
specifier|final
name|int
name|minChildren
decl_stmt|;
DECL|field|maxChildren
specifier|private
specifier|final
name|int
name|maxChildren
decl_stmt|;
DECL|field|ordinals
specifier|private
specifier|final
name|SortedDocValues
name|ordinals
decl_stmt|;
DECL|field|parentWeight
specifier|private
specifier|final
name|ParentWeight
name|parentWeight
decl_stmt|;
DECL|method|CountParentOrdIterator
specifier|private
name|CountParentOrdIterator
parameter_list|(
name|ParentWeight
name|parentWeight
parameter_list|,
name|DocIdSetIterator
name|innerIterator
parameter_list|,
name|ParentCollector
name|collector
parameter_list|,
name|SortedDocValues
name|ordinals
parameter_list|,
name|int
name|minChildren
parameter_list|,
name|int
name|maxChildren
parameter_list|)
block|{
name|super
argument_list|(
name|innerIterator
argument_list|)
expr_stmt|;
name|this
operator|.
name|parentIds
operator|=
operator|(
operator|(
name|CountCollector
operator|)
name|collector
operator|)
operator|.
name|parentIdxs
expr_stmt|;
name|this
operator|.
name|occurrences
operator|=
operator|(
operator|(
name|CountCollector
operator|)
name|collector
operator|)
operator|.
name|occurrences
expr_stmt|;
name|this
operator|.
name|ordinals
operator|=
name|ordinals
expr_stmt|;
name|this
operator|.
name|parentWeight
operator|=
name|parentWeight
expr_stmt|;
name|this
operator|.
name|minChildren
operator|=
name|minChildren
expr_stmt|;
name|this
operator|.
name|maxChildren
operator|=
name|maxChildren
operator|==
literal|0
condition|?
name|Integer
operator|.
name|MAX_VALUE
else|:
name|maxChildren
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|match
specifier|protected
name|boolean
name|match
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
if|if
condition|(
name|parentWeight
operator|.
name|remaining
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|CollectionTerminatedException
argument_list|()
throw|;
block|}
specifier|final
name|long
name|parentOrd
init|=
name|ordinals
operator|.
name|getOrd
argument_list|(
name|doc
argument_list|)
decl_stmt|;
if|if
condition|(
name|parentOrd
operator|>=
literal|0
condition|)
block|{
specifier|final
name|long
name|parentIdx
init|=
name|parentIds
operator|.
name|find
argument_list|(
name|parentOrd
argument_list|)
decl_stmt|;
if|if
condition|(
name|parentIdx
operator|!=
operator|-
literal|1
condition|)
block|{
name|parentWeight
operator|.
name|remaining
operator|--
expr_stmt|;
name|int
name|count
init|=
name|occurrences
operator|.
name|get
argument_list|(
name|parentIdx
argument_list|)
decl_stmt|;
if|if
condition|(
name|count
operator|>=
name|minChildren
operator|&&
name|count
operator|<=
name|maxChildren
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
block|}
end_class

end_unit

