begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.search.child
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|search
operator|.
name|child
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|AtomicReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|AtomicReaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Bits
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lease
operator|.
name|Releasable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|docset
operator|.
name|DocIdSets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|search
operator|.
name|NoCacheFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|SearchContext
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|IdentityHashMap
import|;
end_import

begin_comment
comment|/**  * Forked from {@link QueryWrapperFilter} to make sure the weight is only created once.  * This filter should never be cached! This filter only exists for internal usage.  *  * @elasticsearch.internal  */
end_comment

begin_class
DECL|class|CustomQueryWrappingFilter
specifier|public
class|class
name|CustomQueryWrappingFilter
extends|extends
name|NoCacheFilter
implements|implements
name|Releasable
block|{
DECL|field|query
specifier|private
specifier|final
name|Query
name|query
decl_stmt|;
DECL|field|searcher
specifier|private
name|IndexSearcher
name|searcher
decl_stmt|;
DECL|field|docIdSets
specifier|private
name|IdentityHashMap
argument_list|<
name|AtomicReader
argument_list|,
name|DocIdSet
argument_list|>
name|docIdSets
decl_stmt|;
comment|/** Constructs a filter which only matches documents matching      *<code>query</code>.      */
DECL|method|CustomQueryWrappingFilter
specifier|public
name|CustomQueryWrappingFilter
parameter_list|(
name|Query
name|query
parameter_list|)
block|{
if|if
condition|(
name|query
operator|==
literal|null
condition|)
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"Query may not be null"
argument_list|)
throw|;
name|this
operator|.
name|query
operator|=
name|query
expr_stmt|;
block|}
comment|/** returns the inner Query */
DECL|method|getQuery
specifier|public
specifier|final
name|Query
name|getQuery
parameter_list|()
block|{
return|return
name|query
return|;
block|}
annotation|@
name|Override
DECL|method|getDocIdSet
specifier|public
name|DocIdSet
name|getDocIdSet
parameter_list|(
specifier|final
name|AtomicReaderContext
name|context
parameter_list|,
specifier|final
name|Bits
name|acceptDocs
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|SearchContext
name|searchContext
init|=
name|SearchContext
operator|.
name|current
argument_list|()
decl_stmt|;
if|if
condition|(
name|docIdSets
operator|==
literal|null
condition|)
block|{
assert|assert
name|searcher
operator|==
literal|null
assert|;
name|IndexSearcher
name|searcher
init|=
name|searchContext
operator|.
name|searcher
argument_list|()
decl_stmt|;
name|docIdSets
operator|=
operator|new
name|IdentityHashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|searcher
operator|=
name|searcher
expr_stmt|;
name|searchContext
operator|.
name|addReleasable
argument_list|(
name|this
argument_list|)
expr_stmt|;
specifier|final
name|Weight
name|weight
init|=
name|searcher
operator|.
name|createNormalizedWeight
argument_list|(
name|query
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|AtomicReaderContext
name|leaf
range|:
name|searcher
operator|.
name|getTopReaderContext
argument_list|()
operator|.
name|leaves
argument_list|()
control|)
block|{
specifier|final
name|DocIdSet
name|set
init|=
name|DocIdSets
operator|.
name|toCacheable
argument_list|(
name|leaf
operator|.
name|reader
argument_list|()
argument_list|,
operator|new
name|DocIdSet
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|DocIdSetIterator
name|iterator
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|weight
operator|.
name|scorer
argument_list|(
name|leaf
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isCacheable
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|docIdSets
operator|.
name|put
argument_list|(
name|leaf
operator|.
name|reader
argument_list|()
argument_list|,
name|set
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
assert|assert
name|searcher
operator|==
name|SearchContext
operator|.
name|current
argument_list|()
operator|.
name|searcher
argument_list|()
assert|;
block|}
specifier|final
name|DocIdSet
name|set
init|=
name|docIdSets
operator|.
name|get
argument_list|(
name|context
operator|.
name|reader
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|set
operator|!=
literal|null
operator|&&
name|acceptDocs
operator|!=
literal|null
condition|)
block|{
return|return
name|BitsFilteredDocIdSet
operator|.
name|wrap
argument_list|(
name|set
argument_list|,
name|acceptDocs
argument_list|)
return|;
block|}
return|return
name|set
return|;
block|}
annotation|@
name|Override
DECL|method|release
specifier|public
name|boolean
name|release
parameter_list|()
throws|throws
name|ElasticsearchException
block|{
comment|// We need to clear the docIdSets, otherwise this is leaved unused
comment|// DocIdSets around and can potentially become a memory leak.
name|docIdSets
operator|=
literal|null
expr_stmt|;
name|searcher
operator|=
literal|null
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"CustomQueryWrappingFilter("
operator|+
name|query
operator|+
literal|")"
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
name|this
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|o
operator|!=
literal|null
operator|&&
name|o
operator|instanceof
name|CustomQueryWrappingFilter
operator|&&
name|this
operator|.
name|query
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|CustomQueryWrappingFilter
operator|)
name|o
operator|)
operator|.
name|query
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|query
operator|.
name|hashCode
argument_list|()
operator|^
literal|0x823D64C9
return|;
block|}
comment|/** @return Whether {@link CustomQueryWrappingFilter} should be used. */
DECL|method|shouldUseCustomQueryWrappingFilter
specifier|public
specifier|static
name|boolean
name|shouldUseCustomQueryWrappingFilter
parameter_list|(
name|Query
name|query
parameter_list|)
block|{
if|if
condition|(
name|query
operator|instanceof
name|TopChildrenQuery
operator|||
name|query
operator|instanceof
name|ChildrenConstantScoreQuery
operator|||
name|query
operator|instanceof
name|ChildrenQuery
operator|||
name|query
operator|instanceof
name|ParentConstantScoreQuery
operator|||
name|query
operator|instanceof
name|ParentQuery
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
end_class

end_unit

