begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.search.child
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|search
operator|.
name|child
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|AtomicReaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|MultiReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|similarities
operator|.
name|Similarity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Bits
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|SearchContext
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * This filters just exist for wrapping parent child queries in the delete by query api.  * Don't use this filter for other purposes.  *  * @elasticsearch.internal  */
end_comment

begin_class
DECL|class|DeleteByQueryWrappingFilter
specifier|public
class|class
name|DeleteByQueryWrappingFilter
extends|extends
name|Filter
block|{
DECL|field|query
specifier|private
specifier|final
name|Query
name|query
decl_stmt|;
DECL|field|searcher
specifier|private
name|IndexSearcher
name|searcher
decl_stmt|;
DECL|field|weight
specifier|private
name|Weight
name|weight
decl_stmt|;
comment|/** Constructs a filter which only matches documents matching      *<code>query</code>.      */
DECL|method|DeleteByQueryWrappingFilter
specifier|public
name|DeleteByQueryWrappingFilter
parameter_list|(
name|Query
name|query
parameter_list|)
block|{
if|if
condition|(
name|query
operator|==
literal|null
condition|)
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"Query may not be null"
argument_list|)
throw|;
name|this
operator|.
name|query
operator|=
name|query
expr_stmt|;
block|}
comment|/** returns the inner Query */
DECL|method|getQuery
specifier|public
specifier|final
name|Query
name|getQuery
parameter_list|()
block|{
return|return
name|query
return|;
block|}
annotation|@
name|Override
DECL|method|getDocIdSet
specifier|public
name|DocIdSet
name|getDocIdSet
parameter_list|(
specifier|final
name|AtomicReaderContext
name|context
parameter_list|,
specifier|final
name|Bits
name|acceptDocs
parameter_list|)
throws|throws
name|IOException
block|{
name|SearchContext
name|searchContext
init|=
name|SearchContext
operator|.
name|current
argument_list|()
decl_stmt|;
if|if
condition|(
name|weight
operator|==
literal|null
condition|)
block|{
assert|assert
name|searcher
operator|==
literal|null
assert|;
name|searcher
operator|=
name|searchContext
operator|.
name|searcher
argument_list|()
expr_stmt|;
name|IndexReader
name|indexReader
init|=
name|SearchContext
operator|.
name|current
argument_list|()
operator|.
name|searcher
argument_list|()
operator|.
name|getIndexReader
argument_list|()
decl_stmt|;
name|IndexReader
name|multiReader
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|contains
argument_list|(
name|indexReader
argument_list|,
name|context
argument_list|)
condition|)
block|{
name|multiReader
operator|=
operator|new
name|MultiReader
argument_list|(
operator|new
name|IndexReader
index|[]
block|{
name|indexReader
block|,
name|context
operator|.
name|reader
argument_list|()
block|}
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Similarity
name|similarity
init|=
name|searcher
operator|.
name|getSimilarity
argument_list|()
decl_stmt|;
name|searcher
operator|=
operator|new
name|IndexSearcher
argument_list|(
operator|new
name|MultiReader
argument_list|(
name|indexReader
argument_list|,
name|context
operator|.
name|reader
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|searcher
operator|.
name|setSimilarity
argument_list|(
name|similarity
argument_list|)
expr_stmt|;
block|}
name|weight
operator|=
name|searcher
operator|.
name|createNormalizedWeight
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|multiReader
operator|!=
literal|null
condition|)
block|{
name|multiReader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|IndexReader
name|indexReader
init|=
name|searcher
operator|.
name|getIndexReader
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|contains
argument_list|(
name|indexReader
argument_list|,
name|context
argument_list|)
condition|)
block|{
try|try
init|(
name|IndexReader
name|multiReader
init|=
operator|new
name|MultiReader
argument_list|(
operator|new
name|IndexReader
index|[]
block|{
name|indexReader
block|,
name|context
operator|.
name|reader
argument_list|()
block|}
argument_list|,
literal|false
argument_list|)
init|)
block|{
name|Similarity
name|similarity
init|=
name|searcher
operator|.
name|getSimilarity
argument_list|()
decl_stmt|;
name|searcher
operator|=
operator|new
name|IndexSearcher
argument_list|(
name|multiReader
argument_list|)
expr_stmt|;
name|searcher
operator|.
name|setSimilarity
argument_list|(
name|similarity
argument_list|)
expr_stmt|;
name|weight
operator|=
name|searcher
operator|.
name|createNormalizedWeight
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
operator|new
name|DocIdSet
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|DocIdSetIterator
name|iterator
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|weight
operator|.
name|scorer
argument_list|(
name|context
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|acceptDocs
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isCacheable
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"DeleteByQueryWrappingFilter("
operator|+
name|query
operator|+
literal|")"
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|o
operator|instanceof
name|DeleteByQueryWrappingFilter
operator|)
condition|)
return|return
literal|false
return|;
return|return
name|this
operator|.
name|query
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|DeleteByQueryWrappingFilter
operator|)
name|o
operator|)
operator|.
name|query
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|query
operator|.
name|hashCode
argument_list|()
operator|^
literal|0x823D64CA
return|;
block|}
DECL|method|contains
specifier|static
name|boolean
name|contains
parameter_list|(
name|IndexReader
name|indexReader
parameter_list|,
name|AtomicReaderContext
name|context
parameter_list|)
block|{
for|for
control|(
name|AtomicReaderContext
name|atomicReaderContext
range|:
name|indexReader
operator|.
name|leaves
argument_list|()
control|)
block|{
if|if
condition|(
name|context
operator|.
name|reader
argument_list|()
operator|.
name|getCoreCacheKey
argument_list|()
operator|.
name|equals
argument_list|(
name|atomicReaderContext
operator|.
name|reader
argument_list|()
operator|.
name|getCoreCacheKey
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

