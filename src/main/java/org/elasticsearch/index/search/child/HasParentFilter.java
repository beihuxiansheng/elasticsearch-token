begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.search.child
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|search
operator|.
name|child
package|;
end_package

begin_import
import|import
name|gnu
operator|.
name|trove
operator|.
name|set
operator|.
name|hash
operator|.
name|THashSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|AtomicReaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Bits
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticSearchIllegalStateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|CacheRecycler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|HashedBytesArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|docset
operator|.
name|MatchDocIdSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|search
operator|.
name|NoopCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|cache
operator|.
name|id
operator|.
name|IdReaderTypeCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|SearchContext
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * A filter that only return child documents that are linked to the parent documents that matched with the inner query.  */
end_comment

begin_class
DECL|class|HasParentFilter
specifier|public
specifier|abstract
class|class
name|HasParentFilter
extends|extends
name|Filter
implements|implements
name|SearchContext
operator|.
name|Rewrite
block|{
DECL|field|parentQuery
specifier|final
name|Query
name|parentQuery
decl_stmt|;
DECL|field|parentType
specifier|final
name|String
name|parentType
decl_stmt|;
DECL|field|context
specifier|final
name|SearchContext
name|context
decl_stmt|;
DECL|method|HasParentFilter
name|HasParentFilter
parameter_list|(
name|Query
name|parentQuery
parameter_list|,
name|String
name|parentType
parameter_list|,
name|SearchContext
name|context
parameter_list|)
block|{
name|this
operator|.
name|parentQuery
operator|=
name|parentQuery
expr_stmt|;
name|this
operator|.
name|parentType
operator|=
name|parentType
expr_stmt|;
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|obj
operator|==
literal|null
operator|||
name|obj
operator|.
name|getClass
argument_list|()
operator|!=
name|this
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|HasParentFilter
name|that
init|=
operator|(
name|HasParentFilter
operator|)
name|obj
decl_stmt|;
if|if
condition|(
operator|!
name|parentQuery
operator|.
name|equals
argument_list|(
name|that
operator|.
name|parentQuery
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|parentType
operator|.
name|equals
argument_list|(
name|that
operator|.
name|parentType
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
name|parentQuery
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|parentType
operator|.
name|hashCode
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"parent_filter["
argument_list|)
operator|.
name|append
argument_list|(
name|parentType
argument_list|)
operator|.
name|append
argument_list|(
literal|"]("
argument_list|)
operator|.
name|append
argument_list|(
name|parentQuery
argument_list|)
operator|.
name|append
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|create
specifier|public
specifier|static
name|HasParentFilter
name|create
parameter_list|(
name|Query
name|query
parameter_list|,
name|String
name|parentType
parameter_list|,
name|SearchContext
name|context
parameter_list|)
block|{
return|return
operator|new
name|Uid
argument_list|(
name|query
argument_list|,
name|parentType
argument_list|,
name|context
argument_list|)
return|;
block|}
DECL|class|Uid
specifier|static
class|class
name|Uid
extends|extends
name|HasParentFilter
block|{
DECL|field|parents
name|THashSet
argument_list|<
name|HashedBytesArray
argument_list|>
name|parents
decl_stmt|;
DECL|method|Uid
name|Uid
parameter_list|(
name|Query
name|query
parameter_list|,
name|String
name|parentType
parameter_list|,
name|SearchContext
name|context
parameter_list|)
block|{
name|super
argument_list|(
name|query
argument_list|,
name|parentType
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
DECL|method|getDocIdSet
specifier|public
name|DocIdSet
name|getDocIdSet
parameter_list|(
name|AtomicReaderContext
name|readerContext
parameter_list|,
name|Bits
name|acceptDocs
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|parents
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ElasticSearchIllegalStateException
argument_list|(
literal|"has_parent filter hasn't executed properly"
argument_list|)
throw|;
block|}
name|IdReaderTypeCache
name|idReaderTypeCache
init|=
name|context
operator|.
name|idCache
argument_list|()
operator|.
name|reader
argument_list|(
name|readerContext
operator|.
name|reader
argument_list|()
argument_list|)
operator|.
name|type
argument_list|(
name|parentType
argument_list|)
decl_stmt|;
if|if
condition|(
name|idReaderTypeCache
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|ChildrenDocSet
argument_list|(
name|readerContext
operator|.
name|reader
argument_list|()
argument_list|,
name|acceptDocs
argument_list|,
name|parents
argument_list|,
name|idReaderTypeCache
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|contextRewrite
specifier|public
name|void
name|contextRewrite
parameter_list|(
name|SearchContext
name|searchContext
parameter_list|)
throws|throws
name|Exception
block|{
name|searchContext
operator|.
name|idCache
argument_list|()
operator|.
name|refresh
argument_list|(
name|searchContext
operator|.
name|searcher
argument_list|()
operator|.
name|getTopReaderContext
argument_list|()
operator|.
name|leaves
argument_list|()
argument_list|)
expr_stmt|;
name|parents
operator|=
name|CacheRecycler
operator|.
name|popHashSet
argument_list|()
expr_stmt|;
name|ParentUidsCollector
name|collector
init|=
operator|new
name|ParentUidsCollector
argument_list|(
name|parents
argument_list|,
name|context
argument_list|,
name|parentType
argument_list|)
decl_stmt|;
name|searchContext
operator|.
name|searcher
argument_list|()
operator|.
name|search
argument_list|(
name|parentQuery
argument_list|,
name|collector
argument_list|)
expr_stmt|;
name|parents
operator|=
name|collector
operator|.
name|collectedUids
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|contextClear
specifier|public
name|void
name|contextClear
parameter_list|()
block|{
if|if
condition|(
name|parents
operator|!=
literal|null
condition|)
block|{
name|CacheRecycler
operator|.
name|pushHashSet
argument_list|(
name|parents
argument_list|)
expr_stmt|;
block|}
name|parents
operator|=
literal|null
expr_stmt|;
block|}
DECL|class|ChildrenDocSet
specifier|static
class|class
name|ChildrenDocSet
extends|extends
name|MatchDocIdSet
block|{
DECL|field|reader
specifier|final
name|IndexReader
name|reader
decl_stmt|;
DECL|field|parents
specifier|final
name|THashSet
argument_list|<
name|HashedBytesArray
argument_list|>
name|parents
decl_stmt|;
DECL|field|idReaderTypeCache
specifier|final
name|IdReaderTypeCache
name|idReaderTypeCache
decl_stmt|;
DECL|method|ChildrenDocSet
name|ChildrenDocSet
parameter_list|(
name|IndexReader
name|reader
parameter_list|,
annotation|@
name|Nullable
name|Bits
name|acceptDocs
parameter_list|,
name|THashSet
argument_list|<
name|HashedBytesArray
argument_list|>
name|parents
parameter_list|,
name|IdReaderTypeCache
name|idReaderTypeCache
parameter_list|)
block|{
name|super
argument_list|(
name|reader
operator|.
name|maxDoc
argument_list|()
argument_list|,
name|acceptDocs
argument_list|)
expr_stmt|;
name|this
operator|.
name|reader
operator|=
name|reader
expr_stmt|;
name|this
operator|.
name|parents
operator|=
name|parents
expr_stmt|;
name|this
operator|.
name|idReaderTypeCache
operator|=
name|idReaderTypeCache
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|matchDoc
specifier|protected
name|boolean
name|matchDoc
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
return|return
name|parents
operator|.
name|contains
argument_list|(
name|idReaderTypeCache
operator|.
name|parentIdByDoc
argument_list|(
name|doc
argument_list|)
argument_list|)
return|;
block|}
block|}
DECL|class|ParentUidsCollector
specifier|static
class|class
name|ParentUidsCollector
extends|extends
name|NoopCollector
block|{
DECL|field|collectedUids
specifier|final
name|THashSet
argument_list|<
name|HashedBytesArray
argument_list|>
name|collectedUids
decl_stmt|;
DECL|field|context
specifier|final
name|SearchContext
name|context
decl_stmt|;
DECL|field|parentType
specifier|final
name|String
name|parentType
decl_stmt|;
DECL|field|typeCache
name|IdReaderTypeCache
name|typeCache
decl_stmt|;
DECL|method|ParentUidsCollector
name|ParentUidsCollector
parameter_list|(
name|THashSet
argument_list|<
name|HashedBytesArray
argument_list|>
name|collectedUids
parameter_list|,
name|SearchContext
name|context
parameter_list|,
name|String
name|parentType
parameter_list|)
block|{
name|this
operator|.
name|collectedUids
operator|=
name|collectedUids
expr_stmt|;
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
name|this
operator|.
name|parentType
operator|=
name|parentType
expr_stmt|;
block|}
DECL|method|collect
specifier|public
name|void
name|collect
parameter_list|(
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
comment|// It can happen that for particular segment no document exist for an specific type. This prevents NPE
if|if
condition|(
name|typeCache
operator|!=
literal|null
condition|)
block|{
name|collectedUids
operator|.
name|add
argument_list|(
name|typeCache
operator|.
name|idByDoc
argument_list|(
name|doc
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|setNextReader
specifier|public
name|void
name|setNextReader
parameter_list|(
name|AtomicReaderContext
name|readerContext
parameter_list|)
throws|throws
name|IOException
block|{
name|typeCache
operator|=
name|context
operator|.
name|idCache
argument_list|()
operator|.
name|reader
argument_list|(
name|readerContext
operator|.
name|reader
argument_list|()
argument_list|)
operator|.
name|type
argument_list|(
name|parentType
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

