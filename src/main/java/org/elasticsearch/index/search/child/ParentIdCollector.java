begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.search.child
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|search
operator|.
name|child
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|AtomicReaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|HashedBytesArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|search
operator|.
name|NoopCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|cache
operator|.
name|id
operator|.
name|IdReaderTypeCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|SearchContext
import|;
end_import

begin_comment
comment|/**  * A simple collector that only collects if the docs parent ID is not  *<code>null</code>  */
end_comment

begin_class
DECL|class|ParentIdCollector
specifier|abstract
class|class
name|ParentIdCollector
extends|extends
name|NoopCollector
block|{
DECL|field|type
specifier|protected
specifier|final
name|String
name|type
decl_stmt|;
DECL|field|context
specifier|protected
specifier|final
name|SearchContext
name|context
decl_stmt|;
DECL|field|typeCache
specifier|private
name|IdReaderTypeCache
name|typeCache
decl_stmt|;
DECL|method|ParentIdCollector
specifier|protected
name|ParentIdCollector
parameter_list|(
name|String
name|parentType
parameter_list|,
name|SearchContext
name|context
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|parentType
expr_stmt|;
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|collect
specifier|public
specifier|final
name|void
name|collect
parameter_list|(
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|typeCache
operator|!=
literal|null
condition|)
block|{
name|HashedBytesArray
name|parentIdByDoc
init|=
name|typeCache
operator|.
name|parentIdByDoc
argument_list|(
name|doc
argument_list|)
decl_stmt|;
if|if
condition|(
name|parentIdByDoc
operator|!=
literal|null
condition|)
block|{
name|collect
argument_list|(
name|doc
argument_list|,
name|parentIdByDoc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|collect
specifier|protected
specifier|abstract
name|void
name|collect
parameter_list|(
name|int
name|doc
parameter_list|,
name|HashedBytesArray
name|parentId
parameter_list|)
throws|throws
name|IOException
function_decl|;
annotation|@
name|Override
DECL|method|setNextReader
specifier|public
name|void
name|setNextReader
parameter_list|(
name|AtomicReaderContext
name|readerContext
parameter_list|)
throws|throws
name|IOException
block|{
name|typeCache
operator|=
name|context
operator|.
name|idCache
argument_list|()
operator|.
name|reader
argument_list|(
name|readerContext
operator|.
name|reader
argument_list|()
argument_list|)
operator|.
name|type
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

