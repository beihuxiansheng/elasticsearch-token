begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.search
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|search
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanClause
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DisjunctionMaxQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryParseContext
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
DECL|class|MultiMatchQuery
specifier|public
class|class
name|MultiMatchQuery
extends|extends
name|MatchQuery
block|{
DECL|field|useDisMax
specifier|private
name|boolean
name|useDisMax
init|=
literal|true
decl_stmt|;
DECL|field|tieBreaker
specifier|private
name|float
name|tieBreaker
decl_stmt|;
DECL|method|setUseDisMax
specifier|public
name|void
name|setUseDisMax
parameter_list|(
name|boolean
name|useDisMax
parameter_list|)
block|{
name|this
operator|.
name|useDisMax
operator|=
name|useDisMax
expr_stmt|;
block|}
DECL|method|setTieBreaker
specifier|public
name|void
name|setTieBreaker
parameter_list|(
name|float
name|tieBreaker
parameter_list|)
block|{
name|this
operator|.
name|tieBreaker
operator|=
name|tieBreaker
expr_stmt|;
block|}
DECL|method|MultiMatchQuery
specifier|public
name|MultiMatchQuery
parameter_list|(
name|QueryParseContext
name|parseContext
parameter_list|)
block|{
name|super
argument_list|(
name|parseContext
argument_list|)
expr_stmt|;
block|}
DECL|method|parse
specifier|public
name|Query
name|parse
parameter_list|(
name|Type
name|type
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
name|fieldNames
parameter_list|,
name|Object
name|value
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|fieldNames
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
name|fieldBoost
init|=
name|fieldNames
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|Float
name|boostValue
init|=
name|fieldBoost
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|boostValue
operator|==
literal|null
condition|)
block|{
return|return
name|parse
argument_list|(
name|type
argument_list|,
name|fieldBoost
operator|.
name|getKey
argument_list|()
argument_list|,
name|value
argument_list|)
return|;
block|}
else|else
block|{
name|Query
name|query
init|=
name|parse
argument_list|(
name|type
argument_list|,
name|fieldBoost
operator|.
name|getKey
argument_list|()
argument_list|,
name|value
argument_list|)
decl_stmt|;
name|query
operator|.
name|setBoost
argument_list|(
name|boostValue
argument_list|)
expr_stmt|;
return|return
name|query
return|;
block|}
block|}
if|if
condition|(
name|useDisMax
condition|)
block|{
name|DisjunctionMaxQuery
name|disMaxQuery
init|=
operator|new
name|DisjunctionMaxQuery
argument_list|(
name|tieBreaker
argument_list|)
decl_stmt|;
name|boolean
name|clauseAdded
init|=
literal|false
decl_stmt|;
for|for
control|(
name|String
name|fieldName
range|:
name|fieldNames
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Query
name|query
init|=
name|parse
argument_list|(
name|type
argument_list|,
name|fieldName
argument_list|,
name|value
argument_list|)
decl_stmt|;
name|Float
name|boostValue
init|=
name|fieldNames
operator|.
name|get
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
if|if
condition|(
name|boostValue
operator|!=
literal|null
condition|)
block|{
name|query
operator|.
name|setBoost
argument_list|(
name|boostValue
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|query
operator|!=
literal|null
condition|)
block|{
name|clauseAdded
operator|=
literal|true
expr_stmt|;
name|disMaxQuery
operator|.
name|add
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|clauseAdded
condition|?
name|disMaxQuery
else|:
literal|null
return|;
block|}
else|else
block|{
name|BooleanQuery
name|booleanQuery
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|fieldName
range|:
name|fieldNames
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Query
name|query
init|=
name|parse
argument_list|(
name|type
argument_list|,
name|fieldName
argument_list|,
name|value
argument_list|)
decl_stmt|;
name|Float
name|boostValue
init|=
name|fieldNames
operator|.
name|get
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
if|if
condition|(
name|boostValue
operator|!=
literal|null
condition|)
block|{
name|query
operator|.
name|setBoost
argument_list|(
name|boostValue
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|query
operator|!=
literal|null
condition|)
block|{
name|booleanQuery
operator|.
name|add
argument_list|(
name|query
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|!
name|booleanQuery
operator|.
name|clauses
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
name|booleanQuery
else|:
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

