begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.search.geo
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|search
operator|.
name|geo
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticSearchIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|DistanceUnit
import|;
end_import

begin_comment
comment|/**  * Geo distance calculation.  *  *  */
end_comment

begin_enum
DECL|enum|GeoDistance
specifier|public
enum|enum
name|GeoDistance
block|{
comment|/**      * Calculates distance as points on a plane. Faster, but less accurate than {@link #ARC}.      */
DECL|method|PLANE
DECL|method|PLANE
name|PLANE
parameter_list|()
block|{
annotation|@
name|Override
specifier|public
name|double
name|calculate
parameter_list|(
name|double
name|sourceLatitude
parameter_list|,
name|double
name|sourceLongitude
parameter_list|,
name|double
name|targetLatitude
parameter_list|,
name|double
name|targetLongitude
parameter_list|,
name|DistanceUnit
name|unit
parameter_list|)
block|{
name|double
name|px
init|=
name|targetLongitude
operator|-
name|sourceLongitude
decl_stmt|;
name|double
name|py
init|=
name|targetLatitude
operator|-
name|sourceLatitude
decl_stmt|;
return|return
name|Math
operator|.
name|sqrt
argument_list|(
name|px
operator|*
name|px
operator|+
name|py
operator|*
name|py
argument_list|)
operator|*
name|unit
operator|.
name|getDistancePerDegree
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|double
name|normalize
parameter_list|(
name|double
name|distance
parameter_list|,
name|DistanceUnit
name|unit
parameter_list|)
block|{
return|return
name|distance
return|;
block|}
annotation|@
name|Override
specifier|public
name|FixedSourceDistance
name|fixedSourceDistance
parameter_list|(
name|double
name|sourceLatitude
parameter_list|,
name|double
name|sourceLongitude
parameter_list|,
name|DistanceUnit
name|unit
parameter_list|)
block|{
return|return
operator|new
name|PlaneFixedSourceDistance
argument_list|(
name|sourceLatitude
argument_list|,
name|sourceLongitude
argument_list|,
name|unit
argument_list|)
return|;
block|}
block|}
block|,
comment|/**      * Calculates distance factor.      */
DECL|method|FACTOR
DECL|method|FACTOR
name|FACTOR
parameter_list|()
block|{
annotation|@
name|Override
specifier|public
name|double
name|calculate
parameter_list|(
name|double
name|sourceLatitude
parameter_list|,
name|double
name|sourceLongitude
parameter_list|,
name|double
name|targetLatitude
parameter_list|,
name|double
name|targetLongitude
parameter_list|,
name|DistanceUnit
name|unit
parameter_list|)
block|{
comment|// TODO: we might want to normalize longitude as we did in LatLng...
name|double
name|longitudeDifference
init|=
name|targetLongitude
operator|-
name|sourceLongitude
decl_stmt|;
name|double
name|a
init|=
name|Math
operator|.
name|toRadians
argument_list|(
literal|90D
operator|-
name|sourceLatitude
argument_list|)
decl_stmt|;
name|double
name|c
init|=
name|Math
operator|.
name|toRadians
argument_list|(
literal|90D
operator|-
name|targetLatitude
argument_list|)
decl_stmt|;
return|return
operator|(
name|Math
operator|.
name|cos
argument_list|(
name|a
argument_list|)
operator|*
name|Math
operator|.
name|cos
argument_list|(
name|c
argument_list|)
operator|)
operator|+
operator|(
name|Math
operator|.
name|sin
argument_list|(
name|a
argument_list|)
operator|*
name|Math
operator|.
name|sin
argument_list|(
name|c
argument_list|)
operator|*
name|Math
operator|.
name|cos
argument_list|(
name|Math
operator|.
name|toRadians
argument_list|(
name|longitudeDifference
argument_list|)
argument_list|)
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|double
name|normalize
parameter_list|(
name|double
name|distance
parameter_list|,
name|DistanceUnit
name|unit
parameter_list|)
block|{
return|return
name|Math
operator|.
name|cos
argument_list|(
name|distance
operator|/
name|unit
operator|.
name|getEarthRadius
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|FixedSourceDistance
name|fixedSourceDistance
parameter_list|(
name|double
name|sourceLatitude
parameter_list|,
name|double
name|sourceLongitude
parameter_list|,
name|DistanceUnit
name|unit
parameter_list|)
block|{
return|return
operator|new
name|FactorFixedSourceDistance
argument_list|(
name|sourceLatitude
argument_list|,
name|sourceLongitude
argument_list|,
name|unit
argument_list|)
return|;
block|}
block|}
block|,
comment|/**      * Calculates distance as points in a globe.      */
DECL|method|ARC
DECL|method|ARC
name|ARC
parameter_list|()
block|{
annotation|@
name|Override
specifier|public
name|double
name|calculate
parameter_list|(
name|double
name|sourceLatitude
parameter_list|,
name|double
name|sourceLongitude
parameter_list|,
name|double
name|targetLatitude
parameter_list|,
name|double
name|targetLongitude
parameter_list|,
name|DistanceUnit
name|unit
parameter_list|)
block|{
comment|// TODO: we might want to normalize longitude as we did in LatLng...
name|double
name|longitudeDifference
init|=
name|targetLongitude
operator|-
name|sourceLongitude
decl_stmt|;
name|double
name|a
init|=
name|Math
operator|.
name|toRadians
argument_list|(
literal|90D
operator|-
name|sourceLatitude
argument_list|)
decl_stmt|;
name|double
name|c
init|=
name|Math
operator|.
name|toRadians
argument_list|(
literal|90D
operator|-
name|targetLatitude
argument_list|)
decl_stmt|;
name|double
name|factor
init|=
operator|(
name|Math
operator|.
name|cos
argument_list|(
name|a
argument_list|)
operator|*
name|Math
operator|.
name|cos
argument_list|(
name|c
argument_list|)
operator|)
operator|+
operator|(
name|Math
operator|.
name|sin
argument_list|(
name|a
argument_list|)
operator|*
name|Math
operator|.
name|sin
argument_list|(
name|c
argument_list|)
operator|*
name|Math
operator|.
name|cos
argument_list|(
name|Math
operator|.
name|toRadians
argument_list|(
name|longitudeDifference
argument_list|)
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|factor
operator|<
operator|-
literal|1D
condition|)
block|{
return|return
name|Math
operator|.
name|PI
operator|*
name|unit
operator|.
name|getEarthRadius
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|factor
operator|>=
literal|1D
condition|)
block|{
return|return
literal|0
return|;
block|}
else|else
block|{
return|return
name|Math
operator|.
name|acos
argument_list|(
name|factor
argument_list|)
operator|*
name|unit
operator|.
name|getEarthRadius
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|double
name|normalize
parameter_list|(
name|double
name|distance
parameter_list|,
name|DistanceUnit
name|unit
parameter_list|)
block|{
return|return
name|distance
return|;
block|}
annotation|@
name|Override
specifier|public
name|FixedSourceDistance
name|fixedSourceDistance
parameter_list|(
name|double
name|sourceLatitude
parameter_list|,
name|double
name|sourceLongitude
parameter_list|,
name|DistanceUnit
name|unit
parameter_list|)
block|{
return|return
operator|new
name|ArcFixedSourceDistance
argument_list|(
name|sourceLatitude
argument_list|,
name|sourceLongitude
argument_list|,
name|unit
argument_list|)
return|;
block|}
block|}
block|;
DECL|method|normalize
specifier|public
specifier|abstract
name|double
name|normalize
parameter_list|(
name|double
name|distance
parameter_list|,
name|DistanceUnit
name|unit
parameter_list|)
function_decl|;
DECL|method|calculate
specifier|public
specifier|abstract
name|double
name|calculate
parameter_list|(
name|double
name|sourceLatitude
parameter_list|,
name|double
name|sourceLongitude
parameter_list|,
name|double
name|targetLatitude
parameter_list|,
name|double
name|targetLongitude
parameter_list|,
name|DistanceUnit
name|unit
parameter_list|)
function_decl|;
DECL|method|fixedSourceDistance
specifier|public
specifier|abstract
name|FixedSourceDistance
name|fixedSourceDistance
parameter_list|(
name|double
name|sourceLatitude
parameter_list|,
name|double
name|sourceLongitude
parameter_list|,
name|DistanceUnit
name|unit
parameter_list|)
function_decl|;
DECL|field|MIN_LAT
specifier|private
specifier|static
specifier|final
name|double
name|MIN_LAT
init|=
name|Math
operator|.
name|toRadians
argument_list|(
operator|-
literal|90d
argument_list|)
decl_stmt|;
comment|// -PI/2
DECL|field|MAX_LAT
specifier|private
specifier|static
specifier|final
name|double
name|MAX_LAT
init|=
name|Math
operator|.
name|toRadians
argument_list|(
literal|90d
argument_list|)
decl_stmt|;
comment|//  PI/2
DECL|field|MIN_LON
specifier|private
specifier|static
specifier|final
name|double
name|MIN_LON
init|=
name|Math
operator|.
name|toRadians
argument_list|(
operator|-
literal|180d
argument_list|)
decl_stmt|;
comment|// -PI
DECL|field|MAX_LON
specifier|private
specifier|static
specifier|final
name|double
name|MAX_LON
init|=
name|Math
operator|.
name|toRadians
argument_list|(
literal|180d
argument_list|)
decl_stmt|;
comment|//  PI
DECL|method|distanceBoundingCheck
specifier|public
specifier|static
name|DistanceBoundingCheck
name|distanceBoundingCheck
parameter_list|(
name|double
name|sourceLatitude
parameter_list|,
name|double
name|sourceLongitude
parameter_list|,
name|double
name|distance
parameter_list|,
name|DistanceUnit
name|unit
parameter_list|)
block|{
comment|// angular distance in radians on a great circle
name|double
name|radDist
init|=
name|distance
operator|/
name|unit
operator|.
name|getEarthRadius
argument_list|()
decl_stmt|;
name|double
name|radLat
init|=
name|Math
operator|.
name|toRadians
argument_list|(
name|sourceLatitude
argument_list|)
decl_stmt|;
name|double
name|radLon
init|=
name|Math
operator|.
name|toRadians
argument_list|(
name|sourceLongitude
argument_list|)
decl_stmt|;
name|double
name|minLat
init|=
name|radLat
operator|-
name|radDist
decl_stmt|;
name|double
name|maxLat
init|=
name|radLat
operator|+
name|radDist
decl_stmt|;
name|double
name|minLon
operator|,
name|maxLon
expr_stmt|;
if|if
condition|(
name|minLat
operator|>
name|MIN_LAT
operator|&&
name|maxLat
operator|<
name|MAX_LAT
condition|)
block|{
name|double
name|deltaLon
init|=
name|Math
operator|.
name|asin
argument_list|(
name|Math
operator|.
name|sin
argument_list|(
name|radDist
argument_list|)
operator|/
name|Math
operator|.
name|cos
argument_list|(
name|radLat
argument_list|)
argument_list|)
decl_stmt|;
name|minLon
operator|=
name|radLon
operator|-
name|deltaLon
expr_stmt|;
if|if
condition|(
name|minLon
operator|<
name|MIN_LON
condition|)
name|minLon
operator|+=
literal|2d
operator|*
name|Math
operator|.
name|PI
expr_stmt|;
name|maxLon
operator|=
name|radLon
operator|+
name|deltaLon
expr_stmt|;
if|if
condition|(
name|maxLon
operator|>
name|MAX_LON
condition|)
name|maxLon
operator|-=
literal|2d
operator|*
name|Math
operator|.
name|PI
expr_stmt|;
block|}
else|else
block|{
comment|// a pole is within the distance
name|minLat
operator|=
name|Math
operator|.
name|max
argument_list|(
name|minLat
argument_list|,
name|MIN_LAT
argument_list|)
expr_stmt|;
name|maxLat
operator|=
name|Math
operator|.
name|min
argument_list|(
name|maxLat
argument_list|,
name|MAX_LAT
argument_list|)
expr_stmt|;
name|minLon
operator|=
name|MIN_LON
expr_stmt|;
name|maxLon
operator|=
name|MAX_LON
expr_stmt|;
block|}
name|Point
name|topLeft
init|=
operator|new
name|Point
argument_list|(
name|Math
operator|.
name|toDegrees
argument_list|(
name|maxLat
argument_list|)
argument_list|,
name|Math
operator|.
name|toDegrees
argument_list|(
name|minLon
argument_list|)
argument_list|)
decl_stmt|;
name|Point
name|bottomRight
init|=
operator|new
name|Point
argument_list|(
name|Math
operator|.
name|toDegrees
argument_list|(
name|minLat
argument_list|)
argument_list|,
name|Math
operator|.
name|toDegrees
argument_list|(
name|maxLon
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|minLon
operator|>
name|maxLon
condition|)
block|{
return|return
operator|new
name|Meridian180DistanceBoundingCheck
argument_list|(
name|topLeft
argument_list|,
name|bottomRight
argument_list|)
return|;
block|}
return|return
operator|new
name|SimpleDistanceBoundingCheck
argument_list|(
name|topLeft
argument_list|,
name|bottomRight
argument_list|)
return|;
block|}
DECL|method|fromString
specifier|public
specifier|static
name|GeoDistance
name|fromString
parameter_list|(
name|String
name|s
parameter_list|)
block|{
if|if
condition|(
literal|"plane"
operator|.
name|equals
argument_list|(
name|s
argument_list|)
condition|)
block|{
return|return
name|PLANE
return|;
block|}
elseif|else
if|if
condition|(
literal|"arc"
operator|.
name|equals
argument_list|(
name|s
argument_list|)
condition|)
block|{
return|return
name|ARC
return|;
block|}
elseif|else
if|if
condition|(
literal|"factor"
operator|.
name|equals
argument_list|(
name|s
argument_list|)
condition|)
block|{
return|return
name|FACTOR
return|;
block|}
throw|throw
operator|new
name|ElasticSearchIllegalArgumentException
argument_list|(
literal|"No geo distance for ["
operator|+
name|s
operator|+
literal|"]"
argument_list|)
throw|;
block|}
DECL|interface|FixedSourceDistance
specifier|public
specifier|static
interface|interface
name|FixedSourceDistance
block|{
DECL|method|calculate
name|double
name|calculate
parameter_list|(
name|double
name|targetLatitude
parameter_list|,
name|double
name|targetLongitude
parameter_list|)
function_decl|;
block|}
DECL|interface|DistanceBoundingCheck
specifier|public
specifier|static
interface|interface
name|DistanceBoundingCheck
block|{
DECL|method|isWithin
name|boolean
name|isWithin
parameter_list|(
name|double
name|targetLatitude
parameter_list|,
name|double
name|targetLongitude
parameter_list|)
function_decl|;
DECL|method|topLeft
name|Point
name|topLeft
parameter_list|()
function_decl|;
DECL|method|bottomRight
name|Point
name|bottomRight
parameter_list|()
function_decl|;
block|}
DECL|field|ALWAYS_INSTANCE
specifier|public
specifier|static
name|AlwaysDistanceBoundingCheck
name|ALWAYS_INSTANCE
init|=
operator|new
name|AlwaysDistanceBoundingCheck
argument_list|()
decl_stmt|;
DECL|class|AlwaysDistanceBoundingCheck
specifier|private
specifier|static
class|class
name|AlwaysDistanceBoundingCheck
implements|implements
name|DistanceBoundingCheck
block|{
annotation|@
name|Override
DECL|method|isWithin
specifier|public
name|boolean
name|isWithin
parameter_list|(
name|double
name|targetLatitude
parameter_list|,
name|double
name|targetLongitude
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|topLeft
specifier|public
name|Point
name|topLeft
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|bottomRight
specifier|public
name|Point
name|bottomRight
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
DECL|class|Meridian180DistanceBoundingCheck
specifier|public
specifier|static
class|class
name|Meridian180DistanceBoundingCheck
implements|implements
name|DistanceBoundingCheck
block|{
DECL|field|topLeft
specifier|private
specifier|final
name|Point
name|topLeft
decl_stmt|;
DECL|field|bottomRight
specifier|private
specifier|final
name|Point
name|bottomRight
decl_stmt|;
DECL|method|Meridian180DistanceBoundingCheck
specifier|public
name|Meridian180DistanceBoundingCheck
parameter_list|(
name|Point
name|topLeft
parameter_list|,
name|Point
name|bottomRight
parameter_list|)
block|{
name|this
operator|.
name|topLeft
operator|=
name|topLeft
expr_stmt|;
name|this
operator|.
name|bottomRight
operator|=
name|bottomRight
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isWithin
specifier|public
name|boolean
name|isWithin
parameter_list|(
name|double
name|targetLatitude
parameter_list|,
name|double
name|targetLongitude
parameter_list|)
block|{
return|return
operator|(
name|targetLatitude
operator|>=
name|bottomRight
operator|.
name|lat
operator|&&
name|targetLatitude
operator|<=
name|topLeft
operator|.
name|lat
operator|)
operator|&&
operator|(
name|targetLongitude
operator|>=
name|topLeft
operator|.
name|lon
operator|||
name|targetLongitude
operator|<=
name|bottomRight
operator|.
name|lon
operator|)
return|;
block|}
annotation|@
name|Override
DECL|method|topLeft
specifier|public
name|Point
name|topLeft
parameter_list|()
block|{
return|return
name|topLeft
return|;
block|}
annotation|@
name|Override
DECL|method|bottomRight
specifier|public
name|Point
name|bottomRight
parameter_list|()
block|{
return|return
name|bottomRight
return|;
block|}
block|}
DECL|class|SimpleDistanceBoundingCheck
specifier|public
specifier|static
class|class
name|SimpleDistanceBoundingCheck
implements|implements
name|DistanceBoundingCheck
block|{
DECL|field|topLeft
specifier|private
specifier|final
name|Point
name|topLeft
decl_stmt|;
DECL|field|bottomRight
specifier|private
specifier|final
name|Point
name|bottomRight
decl_stmt|;
DECL|method|SimpleDistanceBoundingCheck
specifier|public
name|SimpleDistanceBoundingCheck
parameter_list|(
name|Point
name|topLeft
parameter_list|,
name|Point
name|bottomRight
parameter_list|)
block|{
name|this
operator|.
name|topLeft
operator|=
name|topLeft
expr_stmt|;
name|this
operator|.
name|bottomRight
operator|=
name|bottomRight
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isWithin
specifier|public
name|boolean
name|isWithin
parameter_list|(
name|double
name|targetLatitude
parameter_list|,
name|double
name|targetLongitude
parameter_list|)
block|{
return|return
operator|(
name|targetLatitude
operator|>=
name|bottomRight
operator|.
name|lat
operator|&&
name|targetLatitude
operator|<=
name|topLeft
operator|.
name|lat
operator|)
operator|&&
operator|(
name|targetLongitude
operator|>=
name|topLeft
operator|.
name|lon
operator|&&
name|targetLongitude
operator|<=
name|bottomRight
operator|.
name|lon
operator|)
return|;
block|}
annotation|@
name|Override
DECL|method|topLeft
specifier|public
name|Point
name|topLeft
parameter_list|()
block|{
return|return
name|topLeft
return|;
block|}
annotation|@
name|Override
DECL|method|bottomRight
specifier|public
name|Point
name|bottomRight
parameter_list|()
block|{
return|return
name|bottomRight
return|;
block|}
block|}
DECL|class|PlaneFixedSourceDistance
specifier|public
specifier|static
class|class
name|PlaneFixedSourceDistance
implements|implements
name|FixedSourceDistance
block|{
DECL|field|sourceLatitude
specifier|private
specifier|final
name|double
name|sourceLatitude
decl_stmt|;
DECL|field|sourceLongitude
specifier|private
specifier|final
name|double
name|sourceLongitude
decl_stmt|;
DECL|field|distancePerDegree
specifier|private
specifier|final
name|double
name|distancePerDegree
decl_stmt|;
DECL|method|PlaneFixedSourceDistance
specifier|public
name|PlaneFixedSourceDistance
parameter_list|(
name|double
name|sourceLatitude
parameter_list|,
name|double
name|sourceLongitude
parameter_list|,
name|DistanceUnit
name|unit
parameter_list|)
block|{
name|this
operator|.
name|sourceLatitude
operator|=
name|sourceLatitude
expr_stmt|;
name|this
operator|.
name|sourceLongitude
operator|=
name|sourceLongitude
expr_stmt|;
name|this
operator|.
name|distancePerDegree
operator|=
name|unit
operator|.
name|getDistancePerDegree
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|calculate
specifier|public
name|double
name|calculate
parameter_list|(
name|double
name|targetLatitude
parameter_list|,
name|double
name|targetLongitude
parameter_list|)
block|{
name|double
name|px
init|=
name|targetLongitude
operator|-
name|sourceLongitude
decl_stmt|;
name|double
name|py
init|=
name|targetLatitude
operator|-
name|sourceLatitude
decl_stmt|;
return|return
name|Math
operator|.
name|sqrt
argument_list|(
name|px
operator|*
name|px
operator|+
name|py
operator|*
name|py
argument_list|)
operator|*
name|distancePerDegree
return|;
block|}
block|}
DECL|class|FactorFixedSourceDistance
specifier|public
specifier|static
class|class
name|FactorFixedSourceDistance
implements|implements
name|FixedSourceDistance
block|{
DECL|field|sourceLatitude
specifier|private
specifier|final
name|double
name|sourceLatitude
decl_stmt|;
DECL|field|sourceLongitude
specifier|private
specifier|final
name|double
name|sourceLongitude
decl_stmt|;
DECL|field|earthRadius
specifier|private
specifier|final
name|double
name|earthRadius
decl_stmt|;
DECL|field|a
specifier|private
specifier|final
name|double
name|a
decl_stmt|;
DECL|field|sinA
specifier|private
specifier|final
name|double
name|sinA
decl_stmt|;
DECL|field|cosA
specifier|private
specifier|final
name|double
name|cosA
decl_stmt|;
DECL|method|FactorFixedSourceDistance
specifier|public
name|FactorFixedSourceDistance
parameter_list|(
name|double
name|sourceLatitude
parameter_list|,
name|double
name|sourceLongitude
parameter_list|,
name|DistanceUnit
name|unit
parameter_list|)
block|{
name|this
operator|.
name|sourceLatitude
operator|=
name|sourceLatitude
expr_stmt|;
name|this
operator|.
name|sourceLongitude
operator|=
name|sourceLongitude
expr_stmt|;
name|this
operator|.
name|earthRadius
operator|=
name|unit
operator|.
name|getEarthRadius
argument_list|()
expr_stmt|;
name|this
operator|.
name|a
operator|=
name|Math
operator|.
name|toRadians
argument_list|(
literal|90D
operator|-
name|sourceLatitude
argument_list|)
expr_stmt|;
name|this
operator|.
name|sinA
operator|=
name|Math
operator|.
name|sin
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|this
operator|.
name|cosA
operator|=
name|Math
operator|.
name|cos
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|calculate
specifier|public
name|double
name|calculate
parameter_list|(
name|double
name|targetLatitude
parameter_list|,
name|double
name|targetLongitude
parameter_list|)
block|{
comment|// TODO: we might want to normalize longitude as we did in LatLng...
name|double
name|longitudeDifference
init|=
name|targetLongitude
operator|-
name|sourceLongitude
decl_stmt|;
name|double
name|c
init|=
name|Math
operator|.
name|toRadians
argument_list|(
literal|90D
operator|-
name|targetLatitude
argument_list|)
decl_stmt|;
return|return
operator|(
name|cosA
operator|*
name|Math
operator|.
name|cos
argument_list|(
name|c
argument_list|)
operator|)
operator|+
operator|(
name|sinA
operator|*
name|Math
operator|.
name|sin
argument_list|(
name|c
argument_list|)
operator|*
name|Math
operator|.
name|cos
argument_list|(
name|Math
operator|.
name|toRadians
argument_list|(
name|longitudeDifference
argument_list|)
argument_list|)
operator|)
return|;
block|}
block|}
DECL|class|ArcFixedSourceDistance
specifier|public
specifier|static
class|class
name|ArcFixedSourceDistance
implements|implements
name|FixedSourceDistance
block|{
DECL|field|sourceLatitude
specifier|private
specifier|final
name|double
name|sourceLatitude
decl_stmt|;
DECL|field|sourceLongitude
specifier|private
specifier|final
name|double
name|sourceLongitude
decl_stmt|;
DECL|field|earthRadius
specifier|private
specifier|final
name|double
name|earthRadius
decl_stmt|;
DECL|field|a
specifier|private
specifier|final
name|double
name|a
decl_stmt|;
DECL|field|sinA
specifier|private
specifier|final
name|double
name|sinA
decl_stmt|;
DECL|field|cosA
specifier|private
specifier|final
name|double
name|cosA
decl_stmt|;
DECL|method|ArcFixedSourceDistance
specifier|public
name|ArcFixedSourceDistance
parameter_list|(
name|double
name|sourceLatitude
parameter_list|,
name|double
name|sourceLongitude
parameter_list|,
name|DistanceUnit
name|unit
parameter_list|)
block|{
name|this
operator|.
name|sourceLatitude
operator|=
name|sourceLatitude
expr_stmt|;
name|this
operator|.
name|sourceLongitude
operator|=
name|sourceLongitude
expr_stmt|;
name|this
operator|.
name|earthRadius
operator|=
name|unit
operator|.
name|getEarthRadius
argument_list|()
expr_stmt|;
name|this
operator|.
name|a
operator|=
name|Math
operator|.
name|toRadians
argument_list|(
literal|90D
operator|-
name|sourceLatitude
argument_list|)
expr_stmt|;
name|this
operator|.
name|sinA
operator|=
name|Math
operator|.
name|sin
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|this
operator|.
name|cosA
operator|=
name|Math
operator|.
name|cos
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|calculate
specifier|public
name|double
name|calculate
parameter_list|(
name|double
name|targetLatitude
parameter_list|,
name|double
name|targetLongitude
parameter_list|)
block|{
comment|// TODO: we might want to normalize longitude as we did in LatLng...
name|double
name|longitudeDifference
init|=
name|targetLongitude
operator|-
name|sourceLongitude
decl_stmt|;
name|double
name|c
init|=
name|Math
operator|.
name|toRadians
argument_list|(
literal|90D
operator|-
name|targetLatitude
argument_list|)
decl_stmt|;
name|double
name|factor
init|=
operator|(
name|cosA
operator|*
name|Math
operator|.
name|cos
argument_list|(
name|c
argument_list|)
operator|)
operator|+
operator|(
name|sinA
operator|*
name|Math
operator|.
name|sin
argument_list|(
name|c
argument_list|)
operator|*
name|Math
operator|.
name|cos
argument_list|(
name|Math
operator|.
name|toRadians
argument_list|(
name|longitudeDifference
argument_list|)
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|factor
operator|<
operator|-
literal|1D
condition|)
block|{
return|return
name|Math
operator|.
name|PI
operator|*
name|earthRadius
return|;
block|}
elseif|else
if|if
condition|(
name|factor
operator|>=
literal|1D
condition|)
block|{
return|return
literal|0
return|;
block|}
else|else
block|{
return|return
name|Math
operator|.
name|acos
argument_list|(
name|factor
argument_list|)
operator|*
name|earthRadius
return|;
block|}
block|}
block|}
block|}
end_enum

end_unit

