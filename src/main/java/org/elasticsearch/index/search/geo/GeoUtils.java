begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.search.geo
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|search
operator|.
name|geo
package|;
end_package

begin_comment
comment|/**  */
end_comment

begin_class
DECL|class|GeoUtils
specifier|public
class|class
name|GeoUtils
block|{
comment|/**      * Normalize longitude to lie within the -180 (exclusive) to 180 (inclusive) range.      *      * @param lon Longitude to normalize      * @see #normalizePoint(Point)      * @return The normalized longitude.      */
DECL|method|normalizeLon
specifier|public
specifier|static
name|double
name|normalizeLon
parameter_list|(
name|double
name|lon
parameter_list|)
block|{
return|return
name|centeredModulus
argument_list|(
name|lon
argument_list|,
literal|360
argument_list|)
return|;
block|}
comment|/**      * Normalize latitude to lie within the -90 to 90 (both inclusive) range.      *<p>      * Note: You should not normalize longitude and latitude separately,      *       because when normalizing latitude it may be necessary to      *       add a shift of 180&deg; in the longitude.      *       For this purpose, you should call the      *       {@link #normalizePoint(Point)} function.      *      * @param lat Latitude to normalize      * @see #normalizePoint(Point)      * @return The normalized latitude.      */
DECL|method|normalizeLat
specifier|public
specifier|static
name|double
name|normalizeLat
parameter_list|(
name|double
name|lat
parameter_list|)
block|{
name|lat
operator|=
name|centeredModulus
argument_list|(
name|lat
argument_list|,
literal|360
argument_list|)
expr_stmt|;
if|if
condition|(
name|lat
operator|<
operator|-
literal|90
condition|)
block|{
name|lat
operator|=
operator|-
literal|180
operator|-
name|lat
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|lat
operator|>
literal|90
condition|)
block|{
name|lat
operator|=
literal|180
operator|-
name|lat
expr_stmt|;
block|}
return|return
name|lat
return|;
block|}
comment|/**      * Normalize the geo {@code Point} for its coordinates to lie within their      * respective normalized ranges.      *<p>      * Note: A shift of 180&deg; is applied in the longitude if necessary,      *       in order to normalize properly the latitude.      *      * @param point The point to normalize in-place.      */
DECL|method|normalizePoint
specifier|public
specifier|static
name|void
name|normalizePoint
parameter_list|(
name|Point
name|point
parameter_list|)
block|{
name|normalizePoint
argument_list|(
name|point
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * Normalize the geo {@code Point} for the given coordinates to lie within      * their respective normalized ranges.      *      * You can control which coordinate gets normalized with the two flags.      *<p>      * Note: A shift of 180&deg; is applied in the longitude if necessary,      *       in order to normalize properly the latitude.      *       If normalizing latitude but not longitude, it is assumed that      *       the longitude is in the form x+k*360, with x in ]-180;180],      *       and k is meaningful to the application.      *       Therefore x will be adjusted while keeping k preserved.      *      * @param point The point to normalize in-place.      * @param normLat Whether to normalize latitude or leave it as is.      * @param normLon Whether to normalize longitude.      */
DECL|method|normalizePoint
specifier|public
specifier|static
name|void
name|normalizePoint
parameter_list|(
name|Point
name|point
parameter_list|,
name|boolean
name|normLat
parameter_list|,
name|boolean
name|normLon
parameter_list|)
block|{
if|if
condition|(
name|normLat
condition|)
block|{
name|point
operator|.
name|lat
operator|=
name|centeredModulus
argument_list|(
name|point
operator|.
name|lat
argument_list|,
literal|360
argument_list|)
expr_stmt|;
name|boolean
name|shift
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|point
operator|.
name|lat
operator|<
operator|-
literal|90
condition|)
block|{
name|point
operator|.
name|lat
operator|=
operator|-
literal|180
operator|-
name|point
operator|.
name|lat
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|point
operator|.
name|lat
operator|>
literal|90
condition|)
block|{
name|point
operator|.
name|lat
operator|=
literal|180
operator|-
name|point
operator|.
name|lat
expr_stmt|;
block|}
else|else
block|{
comment|// No need to shift the longitude, and the latitude is normalized
name|shift
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|shift
condition|)
block|{
if|if
condition|(
name|normLon
condition|)
block|{
name|point
operator|.
name|lon
operator|+=
literal|180
expr_stmt|;
block|}
else|else
block|{
comment|// Longitude won't be normalized,
comment|// keep it in the form x+k*360 (with x in ]-180;180])
comment|// by only changing x, assuming k is meaningful for the user application.
name|point
operator|.
name|lon
operator|+=
name|normalizeLon
argument_list|(
name|point
operator|.
name|lon
argument_list|)
operator|>
literal|0
condition|?
operator|-
literal|180
else|:
literal|180
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|normLon
condition|)
block|{
name|point
operator|.
name|lon
operator|=
name|centeredModulus
argument_list|(
name|point
operator|.
name|lon
argument_list|,
literal|360
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|centeredModulus
specifier|private
specifier|static
name|double
name|centeredModulus
parameter_list|(
name|double
name|dividend
parameter_list|,
name|double
name|divisor
parameter_list|)
block|{
name|double
name|rtn
init|=
name|dividend
operator|%
name|divisor
decl_stmt|;
if|if
condition|(
name|rtn
operator|<=
literal|0
condition|)
block|{
name|rtn
operator|+=
name|divisor
expr_stmt|;
block|}
if|if
condition|(
name|rtn
operator|>
name|divisor
operator|/
literal|2
condition|)
block|{
name|rtn
operator|-=
name|divisor
expr_stmt|;
block|}
return|return
name|rtn
return|;
block|}
block|}
end_class

end_unit

