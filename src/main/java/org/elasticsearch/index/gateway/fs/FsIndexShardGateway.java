begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.gateway.fs
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|gateway
operator|.
name|fs
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|NativeFSLockFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticSearchIllegalStateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|blobstore
operator|.
name|fs
operator|.
name|AbstractFsBlobContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|gateway
operator|.
name|IndexGateway
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|gateway
operator|.
name|blobstore
operator|.
name|BlobStoreIndexShardGateway
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|settings
operator|.
name|IndexSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|service
operator|.
name|IndexShard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|store
operator|.
name|Store
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * @author kimchy (shay.banon)  */
end_comment

begin_class
DECL|class|FsIndexShardGateway
specifier|public
class|class
name|FsIndexShardGateway
extends|extends
name|BlobStoreIndexShardGateway
block|{
DECL|field|snapshotLock
specifier|private
specifier|final
name|boolean
name|snapshotLock
decl_stmt|;
DECL|method|FsIndexShardGateway
annotation|@
name|Inject
specifier|public
name|FsIndexShardGateway
parameter_list|(
name|ShardId
name|shardId
parameter_list|,
annotation|@
name|IndexSettings
name|Settings
name|indexSettings
parameter_list|,
name|ThreadPool
name|threadPool
parameter_list|,
name|IndexGateway
name|fsIndexGateway
parameter_list|,
name|IndexShard
name|indexShard
parameter_list|,
name|Store
name|store
parameter_list|)
block|{
name|super
argument_list|(
name|shardId
argument_list|,
name|indexSettings
argument_list|,
name|threadPool
argument_list|,
name|fsIndexGateway
argument_list|,
name|indexShard
argument_list|,
name|store
argument_list|)
expr_stmt|;
name|this
operator|.
name|snapshotLock
operator|=
name|indexSettings
operator|.
name|getAsBoolean
argument_list|(
literal|"gateway.fs.snapshot_lock"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|type
annotation|@
name|Override
specifier|public
name|String
name|type
parameter_list|()
block|{
return|return
literal|"fs"
return|;
block|}
DECL|method|obtainSnapshotLock
annotation|@
name|Override
specifier|public
name|SnapshotLock
name|obtainSnapshotLock
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|snapshotLock
condition|)
block|{
return|return
name|NO_SNAPSHOT_LOCK
return|;
block|}
name|AbstractFsBlobContainer
name|fsBlobContainer
init|=
operator|(
name|AbstractFsBlobContainer
operator|)
name|blobContainer
decl_stmt|;
name|NativeFSLockFactory
name|lockFactory
init|=
operator|new
name|NativeFSLockFactory
argument_list|(
name|fsBlobContainer
operator|.
name|filePath
argument_list|()
argument_list|)
decl_stmt|;
name|Lock
name|lock
init|=
name|lockFactory
operator|.
name|makeLock
argument_list|(
literal|"snapshot.lock"
argument_list|)
decl_stmt|;
name|boolean
name|obtained
init|=
name|lock
operator|.
name|obtain
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|obtained
condition|)
block|{
throw|throw
operator|new
name|ElasticSearchIllegalStateException
argument_list|(
literal|"failed to obtain snapshot lock ["
operator|+
name|lock
operator|+
literal|"]"
argument_list|)
throw|;
block|}
return|return
operator|new
name|FsSnapshotLock
argument_list|(
name|lock
argument_list|)
return|;
block|}
DECL|class|FsSnapshotLock
specifier|public
class|class
name|FsSnapshotLock
implements|implements
name|SnapshotLock
block|{
DECL|field|lock
specifier|private
specifier|final
name|Lock
name|lock
decl_stmt|;
DECL|method|FsSnapshotLock
specifier|public
name|FsSnapshotLock
parameter_list|(
name|Lock
name|lock
parameter_list|)
block|{
name|this
operator|.
name|lock
operator|=
name|lock
expr_stmt|;
block|}
DECL|method|release
annotation|@
name|Override
specifier|public
name|void
name|release
parameter_list|()
block|{
try|try
block|{
name|lock
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"failed to release snapshot lock [{}]"
argument_list|,
name|e
argument_list|,
name|lock
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

