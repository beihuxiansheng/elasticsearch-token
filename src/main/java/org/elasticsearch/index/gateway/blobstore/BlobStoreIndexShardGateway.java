begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.gateway.blobstore
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|gateway
operator|.
name|blobstore
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IOContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|blobstore
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|BytesStreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|BytesStreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|Lucene
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|store
operator|.
name|InputStreamIndexInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|store
operator|.
name|ThreadSafeInputStreamIndexInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|ByteSizeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|deletionpolicy
operator|.
name|SnapshotIndexCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|gateway
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|settings
operator|.
name|IndexSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|AbstractIndexShardComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|service
operator|.
name|IndexShard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|service
operator|.
name|InternalIndexShard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|store
operator|.
name|Store
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|store
operator|.
name|StoreFileMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|translog
operator|.
name|Translog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|translog
operator|.
name|TranslogStreams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|recovery
operator|.
name|RecoveryState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|BlobStoreIndexShardGateway
specifier|public
specifier|abstract
class|class
name|BlobStoreIndexShardGateway
extends|extends
name|AbstractIndexShardComponent
implements|implements
name|IndexShardGateway
block|{
DECL|field|threadPool
specifier|protected
specifier|final
name|ThreadPool
name|threadPool
decl_stmt|;
DECL|field|indexShard
specifier|protected
specifier|final
name|InternalIndexShard
name|indexShard
decl_stmt|;
DECL|field|store
specifier|protected
specifier|final
name|Store
name|store
decl_stmt|;
DECL|field|chunkSize
specifier|protected
specifier|final
name|ByteSizeValue
name|chunkSize
decl_stmt|;
DECL|field|blobStore
specifier|protected
specifier|final
name|BlobStore
name|blobStore
decl_stmt|;
DECL|field|shardPath
specifier|protected
specifier|final
name|BlobPath
name|shardPath
decl_stmt|;
DECL|field|blobContainer
specifier|protected
specifier|final
name|ImmutableBlobContainer
name|blobContainer
decl_stmt|;
DECL|field|recoveryState
specifier|private
specifier|volatile
name|RecoveryState
name|recoveryState
decl_stmt|;
DECL|field|lastSnapshotStatus
specifier|private
specifier|volatile
name|SnapshotStatus
name|lastSnapshotStatus
decl_stmt|;
DECL|field|currentSnapshotStatus
specifier|private
specifier|volatile
name|SnapshotStatus
name|currentSnapshotStatus
decl_stmt|;
DECL|method|BlobStoreIndexShardGateway
specifier|protected
name|BlobStoreIndexShardGateway
parameter_list|(
name|ShardId
name|shardId
parameter_list|,
annotation|@
name|IndexSettings
name|Settings
name|indexSettings
parameter_list|,
name|ThreadPool
name|threadPool
parameter_list|,
name|IndexGateway
name|indexGateway
parameter_list|,
name|IndexShard
name|indexShard
parameter_list|,
name|Store
name|store
parameter_list|)
block|{
name|super
argument_list|(
name|shardId
argument_list|,
name|indexSettings
argument_list|)
expr_stmt|;
name|this
operator|.
name|threadPool
operator|=
name|threadPool
expr_stmt|;
name|this
operator|.
name|indexShard
operator|=
operator|(
name|InternalIndexShard
operator|)
name|indexShard
expr_stmt|;
name|this
operator|.
name|store
operator|=
name|store
expr_stmt|;
name|BlobStoreIndexGateway
name|blobStoreIndexGateway
init|=
operator|(
name|BlobStoreIndexGateway
operator|)
name|indexGateway
decl_stmt|;
name|this
operator|.
name|chunkSize
operator|=
name|blobStoreIndexGateway
operator|.
name|chunkSize
argument_list|()
expr_stmt|;
comment|// can be null -> no chunking
name|this
operator|.
name|blobStore
operator|=
name|blobStoreIndexGateway
operator|.
name|blobStore
argument_list|()
expr_stmt|;
name|this
operator|.
name|shardPath
operator|=
name|blobStoreIndexGateway
operator|.
name|shardPath
argument_list|(
name|shardId
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|blobContainer
operator|=
name|blobStore
operator|.
name|immutableBlobContainer
argument_list|(
name|shardPath
argument_list|)
expr_stmt|;
name|this
operator|.
name|recoveryState
operator|=
operator|new
name|RecoveryState
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|recoveryState
specifier|public
name|RecoveryState
name|recoveryState
parameter_list|()
block|{
return|return
name|this
operator|.
name|recoveryState
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|type
argument_list|()
operator|+
literal|"://"
operator|+
name|blobStore
operator|+
literal|"/"
operator|+
name|shardPath
return|;
block|}
annotation|@
name|Override
DECL|method|requiresSnapshot
specifier|public
name|boolean
name|requiresSnapshot
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|requiresSnapshotScheduling
specifier|public
name|boolean
name|requiresSnapshotScheduling
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|obtainSnapshotLock
specifier|public
name|SnapshotLock
name|obtainSnapshotLock
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|NO_SNAPSHOT_LOCK
return|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|ElasticsearchException
block|{     }
annotation|@
name|Override
DECL|method|lastSnapshotStatus
specifier|public
name|SnapshotStatus
name|lastSnapshotStatus
parameter_list|()
block|{
return|return
name|this
operator|.
name|lastSnapshotStatus
return|;
block|}
annotation|@
name|Override
DECL|method|currentSnapshotStatus
specifier|public
name|SnapshotStatus
name|currentSnapshotStatus
parameter_list|()
block|{
name|SnapshotStatus
name|snapshotStatus
init|=
name|this
operator|.
name|currentSnapshotStatus
decl_stmt|;
if|if
condition|(
name|snapshotStatus
operator|==
literal|null
condition|)
block|{
return|return
name|snapshotStatus
return|;
block|}
if|if
condition|(
name|snapshotStatus
operator|.
name|stage
argument_list|()
operator|!=
name|SnapshotStatus
operator|.
name|Stage
operator|.
name|DONE
operator|||
name|snapshotStatus
operator|.
name|stage
argument_list|()
operator|!=
name|SnapshotStatus
operator|.
name|Stage
operator|.
name|FAILURE
condition|)
block|{
name|snapshotStatus
operator|.
name|time
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|snapshotStatus
operator|.
name|startTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|snapshotStatus
return|;
block|}
annotation|@
name|Override
DECL|method|snapshot
specifier|public
name|SnapshotStatus
name|snapshot
parameter_list|(
specifier|final
name|Snapshot
name|snapshot
parameter_list|)
throws|throws
name|IndexShardGatewaySnapshotFailedException
block|{
name|currentSnapshotStatus
operator|=
operator|new
name|SnapshotStatus
argument_list|()
expr_stmt|;
name|currentSnapshotStatus
operator|.
name|startTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|doSnapshot
argument_list|(
name|snapshot
argument_list|)
expr_stmt|;
name|currentSnapshotStatus
operator|.
name|time
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|currentSnapshotStatus
operator|.
name|startTime
argument_list|()
argument_list|)
expr_stmt|;
name|currentSnapshotStatus
operator|.
name|updateStage
argument_list|(
name|SnapshotStatus
operator|.
name|Stage
operator|.
name|DONE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|currentSnapshotStatus
operator|.
name|time
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|currentSnapshotStatus
operator|.
name|startTime
argument_list|()
argument_list|)
expr_stmt|;
name|currentSnapshotStatus
operator|.
name|updateStage
argument_list|(
name|SnapshotStatus
operator|.
name|Stage
operator|.
name|FAILURE
argument_list|)
expr_stmt|;
name|currentSnapshotStatus
operator|.
name|failed
argument_list|(
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|IndexShardGatewaySnapshotFailedException
condition|)
block|{
throw|throw
operator|(
name|IndexShardGatewaySnapshotFailedException
operator|)
name|e
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|IndexShardGatewaySnapshotFailedException
argument_list|(
name|shardId
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
name|this
operator|.
name|lastSnapshotStatus
operator|=
name|currentSnapshotStatus
expr_stmt|;
name|this
operator|.
name|currentSnapshotStatus
operator|=
literal|null
expr_stmt|;
block|}
return|return
name|this
operator|.
name|lastSnapshotStatus
return|;
block|}
DECL|method|doSnapshot
specifier|private
name|void
name|doSnapshot
parameter_list|(
specifier|final
name|Snapshot
name|snapshot
parameter_list|)
throws|throws
name|IndexShardGatewaySnapshotFailedException
block|{
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|BlobMetaData
argument_list|>
name|blobs
decl_stmt|;
try|try
block|{
name|blobs
operator|=
name|blobContainer
operator|.
name|listBlobs
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IndexShardGatewaySnapshotFailedException
argument_list|(
name|shardId
argument_list|,
literal|"failed to list blobs"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|long
name|generation
init|=
name|findLatestFileNameGeneration
argument_list|(
name|blobs
argument_list|)
decl_stmt|;
name|CommitPoints
name|commitPoints
init|=
name|buildCommitPoints
argument_list|(
name|blobs
argument_list|)
decl_stmt|;
name|currentSnapshotStatus
operator|.
name|index
argument_list|()
operator|.
name|startTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|currentSnapshotStatus
operator|.
name|updateStage
argument_list|(
name|SnapshotStatus
operator|.
name|Stage
operator|.
name|INDEX
argument_list|)
expr_stmt|;
specifier|final
name|SnapshotIndexCommit
name|snapshotIndexCommit
init|=
name|snapshot
operator|.
name|indexCommit
argument_list|()
decl_stmt|;
specifier|final
name|Translog
operator|.
name|Snapshot
name|translogSnapshot
init|=
name|snapshot
operator|.
name|translogSnapshot
argument_list|()
decl_stmt|;
specifier|final
name|CountDownLatch
name|indexLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
name|snapshotIndexCommit
operator|.
name|getFiles
argument_list|()
operator|.
name|length
argument_list|)
decl_stmt|;
specifier|final
name|CopyOnWriteArrayList
argument_list|<
name|Throwable
argument_list|>
name|failures
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<
name|Throwable
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|CommitPoint
operator|.
name|FileInfo
argument_list|>
name|indexCommitPointFiles
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|int
name|indexNumberOfFiles
init|=
literal|0
decl_stmt|;
name|long
name|indexTotalFilesSize
init|=
literal|0
decl_stmt|;
for|for
control|(
specifier|final
name|String
name|fileName
range|:
name|snapshotIndexCommit
operator|.
name|getFiles
argument_list|()
control|)
block|{
name|StoreFileMetaData
name|md
decl_stmt|;
try|try
block|{
name|md
operator|=
name|store
operator|.
name|metaData
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IndexShardGatewaySnapshotFailedException
argument_list|(
name|shardId
argument_list|,
literal|"Failed to get store file metadata"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|boolean
name|snapshotRequired
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|snapshot
operator|.
name|indexChanged
argument_list|()
operator|&&
name|fileName
operator|.
name|equals
argument_list|(
name|snapshotIndexCommit
operator|.
name|getSegmentsFileName
argument_list|()
argument_list|)
condition|)
block|{
name|snapshotRequired
operator|=
literal|true
expr_stmt|;
comment|// we want to always snapshot the segment file if the index changed
block|}
name|CommitPoint
operator|.
name|FileInfo
name|fileInfo
init|=
name|commitPoints
operator|.
name|findPhysicalIndexFile
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileInfo
operator|==
literal|null
operator|||
operator|!
name|fileInfo
operator|.
name|isSame
argument_list|(
name|md
argument_list|)
operator|||
operator|!
name|commitPointFileExistsInBlobs
argument_list|(
name|fileInfo
argument_list|,
name|blobs
argument_list|)
condition|)
block|{
comment|// commit point file does not exists in any commit point, or has different length, or does not fully exists in the listed blobs
name|snapshotRequired
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|snapshotRequired
condition|)
block|{
name|indexNumberOfFiles
operator|++
expr_stmt|;
name|indexTotalFilesSize
operator|+=
name|md
operator|.
name|length
argument_list|()
expr_stmt|;
comment|// create a new FileInfo
try|try
block|{
name|CommitPoint
operator|.
name|FileInfo
name|snapshotFileInfo
init|=
operator|new
name|CommitPoint
operator|.
name|FileInfo
argument_list|(
name|fileNameFromGeneration
argument_list|(
operator|++
name|generation
argument_list|)
argument_list|,
name|fileName
argument_list|,
name|md
operator|.
name|length
argument_list|()
argument_list|,
name|md
operator|.
name|checksum
argument_list|()
argument_list|)
decl_stmt|;
name|indexCommitPointFiles
operator|.
name|add
argument_list|(
name|snapshotFileInfo
argument_list|)
expr_stmt|;
name|snapshotFile
argument_list|(
name|snapshotIndexCommit
operator|.
name|getDirectory
argument_list|()
argument_list|,
name|snapshotFileInfo
argument_list|,
name|indexLatch
argument_list|,
name|failures
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|failures
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|indexLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|indexCommitPointFiles
operator|.
name|add
argument_list|(
name|fileInfo
argument_list|)
expr_stmt|;
name|indexLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
name|currentSnapshotStatus
operator|.
name|index
argument_list|()
operator|.
name|files
argument_list|(
name|indexNumberOfFiles
argument_list|,
name|indexTotalFilesSize
argument_list|)
expr_stmt|;
try|try
block|{
name|indexLatch
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|failures
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|failures
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IndexShardGatewaySnapshotFailedException
argument_list|(
name|shardId
argument_list|()
argument_list|,
literal|"Failed to perform snapshot (index files)"
argument_list|,
name|failures
operator|.
name|get
argument_list|(
name|failures
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
throw|;
block|}
name|currentSnapshotStatus
operator|.
name|index
argument_list|()
operator|.
name|time
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|currentSnapshotStatus
operator|.
name|index
argument_list|()
operator|.
name|startTime
argument_list|()
argument_list|)
expr_stmt|;
name|currentSnapshotStatus
operator|.
name|updateStage
argument_list|(
name|SnapshotStatus
operator|.
name|Stage
operator|.
name|TRANSLOG
argument_list|)
expr_stmt|;
name|currentSnapshotStatus
operator|.
name|translog
argument_list|()
operator|.
name|startTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
comment|// Note, we assume the snapshot is always started from "base 0". We need to seek forward if we want to lastTranslogPosition if we want the delta
name|List
argument_list|<
name|CommitPoint
operator|.
name|FileInfo
argument_list|>
name|translogCommitPointFiles
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|int
name|expectedNumberOfOperations
init|=
literal|0
decl_stmt|;
name|boolean
name|snapshotRequired
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|snapshot
operator|.
name|newTranslogCreated
argument_list|()
condition|)
block|{
if|if
condition|(
name|translogSnapshot
operator|.
name|lengthInBytes
argument_list|()
operator|>
literal|0
condition|)
block|{
name|snapshotRequired
operator|=
literal|true
expr_stmt|;
name|expectedNumberOfOperations
operator|=
name|translogSnapshot
operator|.
name|estimatedTotalOperations
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// if we have a commit point, check that we have all the files listed in it in the blob store
if|if
condition|(
operator|!
name|commitPoints
operator|.
name|commits
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|CommitPoint
name|commitPoint
init|=
name|commitPoints
operator|.
name|commits
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|boolean
name|allTranslogFilesExists
init|=
literal|true
decl_stmt|;
for|for
control|(
name|CommitPoint
operator|.
name|FileInfo
name|fileInfo
range|:
name|commitPoint
operator|.
name|translogFiles
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|commitPointFileExistsInBlobs
argument_list|(
name|fileInfo
argument_list|,
name|blobs
argument_list|)
condition|)
block|{
name|allTranslogFilesExists
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
comment|// if everything exists, we can seek forward in case there are new operations, otherwise, we copy over all again...
if|if
condition|(
name|allTranslogFilesExists
condition|)
block|{
name|translogCommitPointFiles
operator|.
name|addAll
argument_list|(
name|commitPoint
operator|.
name|translogFiles
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|snapshot
operator|.
name|sameTranslogNewOperations
argument_list|()
condition|)
block|{
name|translogSnapshot
operator|.
name|seekForward
argument_list|(
name|snapshot
operator|.
name|lastTranslogLength
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|translogSnapshot
operator|.
name|lengthInBytes
argument_list|()
operator|>
literal|0
condition|)
block|{
name|snapshotRequired
operator|=
literal|true
expr_stmt|;
name|expectedNumberOfOperations
operator|=
name|translogSnapshot
operator|.
name|estimatedTotalOperations
argument_list|()
operator|-
name|snapshot
operator|.
name|lastTotalTranslogOperations
argument_list|()
expr_stmt|;
block|}
block|}
comment|// else (no operations, nothing to snapshot)
block|}
else|else
block|{
comment|// a full translog snapshot is required
if|if
condition|(
name|translogSnapshot
operator|.
name|lengthInBytes
argument_list|()
operator|>
literal|0
condition|)
block|{
name|expectedNumberOfOperations
operator|=
name|translogSnapshot
operator|.
name|estimatedTotalOperations
argument_list|()
expr_stmt|;
name|snapshotRequired
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// no commit point, snapshot all the translog
if|if
condition|(
name|translogSnapshot
operator|.
name|lengthInBytes
argument_list|()
operator|>
literal|0
condition|)
block|{
name|expectedNumberOfOperations
operator|=
name|translogSnapshot
operator|.
name|estimatedTotalOperations
argument_list|()
expr_stmt|;
name|snapshotRequired
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
name|currentSnapshotStatus
operator|.
name|translog
argument_list|()
operator|.
name|expectedNumberOfOperations
argument_list|(
name|expectedNumberOfOperations
argument_list|)
expr_stmt|;
if|if
condition|(
name|snapshotRequired
condition|)
block|{
name|CommitPoint
operator|.
name|FileInfo
name|addedTranslogFileInfo
init|=
operator|new
name|CommitPoint
operator|.
name|FileInfo
argument_list|(
name|fileNameFromGeneration
argument_list|(
operator|++
name|generation
argument_list|)
argument_list|,
literal|"translog-"
operator|+
name|translogSnapshot
operator|.
name|translogId
argument_list|()
argument_list|,
name|translogSnapshot
operator|.
name|lengthInBytes
argument_list|()
argument_list|,
literal|null
comment|/* no need for checksum in translog */
argument_list|)
decl_stmt|;
name|translogCommitPointFiles
operator|.
name|add
argument_list|(
name|addedTranslogFileInfo
argument_list|)
expr_stmt|;
try|try
block|{
name|snapshotTranslog
argument_list|(
name|translogSnapshot
argument_list|,
name|addedTranslogFileInfo
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IndexShardGatewaySnapshotFailedException
argument_list|(
name|shardId
argument_list|,
literal|"Failed to snapshot translog"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
name|currentSnapshotStatus
operator|.
name|translog
argument_list|()
operator|.
name|time
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|currentSnapshotStatus
operator|.
name|translog
argument_list|()
operator|.
name|startTime
argument_list|()
argument_list|)
expr_stmt|;
comment|// now create and write the commit point
name|currentSnapshotStatus
operator|.
name|updateStage
argument_list|(
name|SnapshotStatus
operator|.
name|Stage
operator|.
name|FINALIZE
argument_list|)
expr_stmt|;
name|long
name|version
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|commitPoints
operator|.
name|commits
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|version
operator|=
name|commitPoints
operator|.
name|commits
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|version
argument_list|()
operator|+
literal|1
expr_stmt|;
block|}
name|String
name|commitPointName
init|=
literal|"commit-"
operator|+
name|Long
operator|.
name|toString
argument_list|(
name|version
argument_list|,
name|Character
operator|.
name|MAX_RADIX
argument_list|)
decl_stmt|;
name|CommitPoint
name|commitPoint
init|=
operator|new
name|CommitPoint
argument_list|(
name|version
argument_list|,
name|commitPointName
argument_list|,
name|CommitPoint
operator|.
name|Type
operator|.
name|GENERATED
argument_list|,
name|indexCommitPointFiles
argument_list|,
name|translogCommitPointFiles
argument_list|)
decl_stmt|;
try|try
block|{
name|byte
index|[]
name|commitPointData
init|=
name|CommitPoints
operator|.
name|toXContent
argument_list|(
name|commitPoint
argument_list|)
decl_stmt|;
name|blobContainer
operator|.
name|writeBlob
argument_list|(
name|commitPointName
argument_list|,
operator|new
name|BytesStreamInput
argument_list|(
name|commitPointData
argument_list|,
literal|false
argument_list|)
argument_list|,
name|commitPointData
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IndexShardGatewaySnapshotFailedException
argument_list|(
name|shardId
argument_list|,
literal|"Failed to write commit point"
argument_list|,
name|e
argument_list|)
throw|;
block|}
comment|// delete all files that are not referenced by any commit point
comment|// build a new CommitPoint, that includes this one and all the saved ones
name|List
argument_list|<
name|CommitPoint
argument_list|>
name|newCommitPointsList
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|newCommitPointsList
operator|.
name|add
argument_list|(
name|commitPoint
argument_list|)
expr_stmt|;
for|for
control|(
name|CommitPoint
name|point
range|:
name|commitPoints
control|)
block|{
if|if
condition|(
name|point
operator|.
name|type
argument_list|()
operator|==
name|CommitPoint
operator|.
name|Type
operator|.
name|SAVED
condition|)
block|{
name|newCommitPointsList
operator|.
name|add
argument_list|(
name|point
argument_list|)
expr_stmt|;
block|}
block|}
name|CommitPoints
name|newCommitPoints
init|=
operator|new
name|CommitPoints
argument_list|(
name|newCommitPointsList
argument_list|)
decl_stmt|;
comment|// first, go over and delete all the commit points
for|for
control|(
name|String
name|blobName
range|:
name|blobs
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|blobName
operator|.
name|startsWith
argument_list|(
literal|"commit-"
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|long
name|checkedVersion
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|blobName
operator|.
name|substring
argument_list|(
literal|"commit-"
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
name|Character
operator|.
name|MAX_RADIX
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|newCommitPoints
operator|.
name|hasVersion
argument_list|(
name|checkedVersion
argument_list|)
condition|)
block|{
try|try
block|{
name|blobContainer
operator|.
name|deleteBlob
argument_list|(
name|blobName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
comment|// now go over all the blobs, and if they don't exists in a commit point, delete them
for|for
control|(
name|String
name|blobName
range|:
name|blobs
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|name
init|=
name|blobName
decl_stmt|;
if|if
condition|(
operator|!
name|name
operator|.
name|startsWith
argument_list|(
literal|"__"
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|blobName
operator|.
name|contains
argument_list|(
literal|".part"
argument_list|)
condition|)
block|{
name|name
operator|=
name|blobName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|blobName
operator|.
name|indexOf
argument_list|(
literal|".part"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|newCommitPoints
operator|.
name|findNameFile
argument_list|(
name|name
argument_list|)
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|blobContainer
operator|.
name|deleteBlob
argument_list|(
name|blobName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// ignore, will delete it laters
block|}
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|recover
specifier|public
name|void
name|recover
parameter_list|(
name|boolean
name|indexShouldExists
parameter_list|,
name|RecoveryState
name|recoveryState
parameter_list|)
throws|throws
name|IndexShardGatewayRecoveryException
block|{
name|this
operator|.
name|recoveryState
operator|=
name|recoveryState
expr_stmt|;
specifier|final
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|BlobMetaData
argument_list|>
name|blobs
decl_stmt|;
try|try
block|{
name|blobs
operator|=
name|blobContainer
operator|.
name|listBlobs
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IndexShardGatewayRecoveryException
argument_list|(
name|shardId
argument_list|,
literal|"Failed to list content of gateway"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|CommitPoint
argument_list|>
name|commitPointsList
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|boolean
name|atLeastOneCommitPointExists
init|=
literal|false
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|blobs
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
literal|"commit-"
argument_list|)
condition|)
block|{
name|atLeastOneCommitPointExists
operator|=
literal|true
expr_stmt|;
try|try
block|{
name|commitPointsList
operator|.
name|add
argument_list|(
name|CommitPoints
operator|.
name|fromXContent
argument_list|(
name|blobContainer
operator|.
name|readBlobFully
argument_list|(
name|name
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"failed to read commit point [{}]"
argument_list|,
name|e
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|atLeastOneCommitPointExists
operator|&&
name|commitPointsList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// no commit point managed to load, bail so we won't corrupt the index, will require manual intervention
throw|throw
operator|new
name|IndexShardGatewayRecoveryException
argument_list|(
name|shardId
argument_list|,
literal|"Commit points exists but none could be loaded"
argument_list|,
literal|null
argument_list|)
throw|;
block|}
name|CommitPoints
name|commitPoints
init|=
operator|new
name|CommitPoints
argument_list|(
name|commitPointsList
argument_list|)
decl_stmt|;
if|if
condition|(
name|commitPoints
operator|.
name|commits
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// no commit points, clean the store just so we won't recover wrong files
try|try
block|{
name|indexShard
operator|.
name|store
argument_list|()
operator|.
name|deleteContent
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"failed to clean store before starting shard"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|recoveryState
operator|.
name|getIndex
argument_list|()
operator|.
name|startTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|recoveryState
operator|.
name|getIndex
argument_list|()
operator|.
name|time
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|recoveryState
operator|.
name|getIndex
argument_list|()
operator|.
name|startTime
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
for|for
control|(
name|CommitPoint
name|commitPoint
range|:
name|commitPoints
control|)
block|{
if|if
condition|(
operator|!
name|commitPointExistsInBlobs
argument_list|(
name|commitPoint
argument_list|,
name|blobs
argument_list|)
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"listed commit_point [{}]/[{}], but not all files exists, ignoring"
argument_list|,
name|commitPoint
operator|.
name|name
argument_list|()
argument_list|,
name|commitPoint
operator|.
name|version
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
try|try
block|{
name|recoveryState
operator|.
name|getIndex
argument_list|()
operator|.
name|startTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|recoverIndex
argument_list|(
name|commitPoint
argument_list|,
name|blobs
argument_list|)
expr_stmt|;
name|recoveryState
operator|.
name|getIndex
argument_list|()
operator|.
name|time
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|recoveryState
operator|.
name|getIndex
argument_list|()
operator|.
name|startTime
argument_list|()
argument_list|)
expr_stmt|;
name|recoverTranslog
argument_list|(
name|commitPoint
argument_list|,
name|blobs
argument_list|)
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IndexShardGatewayRecoveryException
argument_list|(
name|shardId
argument_list|,
literal|"failed to recover commit_point ["
operator|+
name|commitPoint
operator|.
name|name
argument_list|()
operator|+
literal|"]/["
operator|+
name|commitPoint
operator|.
name|version
argument_list|()
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
throw|throw
operator|new
name|IndexShardGatewayRecoveryException
argument_list|(
name|shardId
argument_list|,
literal|"No commit point data is available in gateway"
argument_list|,
literal|null
argument_list|)
throw|;
block|}
DECL|method|recoverTranslog
specifier|private
name|void
name|recoverTranslog
parameter_list|(
name|CommitPoint
name|commitPoint
parameter_list|,
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|BlobMetaData
argument_list|>
name|blobs
parameter_list|)
throws|throws
name|IndexShardGatewayRecoveryException
block|{
if|if
condition|(
name|commitPoint
operator|.
name|translogFiles
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// no translog files, bail
name|recoveryState
operator|.
name|getStart
argument_list|()
operator|.
name|startTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|recoveryState
operator|.
name|setStage
argument_list|(
name|RecoveryState
operator|.
name|Stage
operator|.
name|START
argument_list|)
expr_stmt|;
name|indexShard
operator|.
name|postRecovery
argument_list|(
literal|"post recovery from gateway, no translog"
argument_list|)
expr_stmt|;
name|recoveryState
operator|.
name|getStart
argument_list|()
operator|.
name|time
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|recoveryState
operator|.
name|getStart
argument_list|()
operator|.
name|startTime
argument_list|()
argument_list|)
expr_stmt|;
name|recoveryState
operator|.
name|getStart
argument_list|()
operator|.
name|checkIndexTime
argument_list|(
name|indexShard
operator|.
name|checkIndexTook
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
try|try
block|{
name|recoveryState
operator|.
name|getStart
argument_list|()
operator|.
name|startTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|recoveryState
operator|.
name|setStage
argument_list|(
name|RecoveryState
operator|.
name|Stage
operator|.
name|START
argument_list|)
expr_stmt|;
name|indexShard
operator|.
name|performRecoveryPrepareForTranslog
argument_list|()
expr_stmt|;
name|recoveryState
operator|.
name|getStart
argument_list|()
operator|.
name|time
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|recoveryState
operator|.
name|getStart
argument_list|()
operator|.
name|startTime
argument_list|()
argument_list|)
expr_stmt|;
name|recoveryState
operator|.
name|getStart
argument_list|()
operator|.
name|checkIndexTime
argument_list|(
name|indexShard
operator|.
name|checkIndexTook
argument_list|()
argument_list|)
expr_stmt|;
name|recoveryState
operator|.
name|setStage
argument_list|(
name|RecoveryState
operator|.
name|Stage
operator|.
name|TRANSLOG
argument_list|)
expr_stmt|;
name|recoveryState
operator|.
name|getTranslog
argument_list|()
operator|.
name|startTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|Throwable
argument_list|>
name|failure
init|=
operator|new
name|AtomicReference
argument_list|<
name|Throwable
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|Iterator
argument_list|<
name|CommitPoint
operator|.
name|FileInfo
argument_list|>
name|transIt
init|=
name|commitPoint
operator|.
name|translogFiles
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|blobContainer
operator|.
name|readBlob
argument_list|(
name|transIt
operator|.
name|next
argument_list|()
operator|.
name|name
argument_list|()
argument_list|,
operator|new
name|BlobContainer
operator|.
name|ReadBlobListener
argument_list|()
block|{
name|BytesStreamOutput
name|bos
init|=
operator|new
name|BytesStreamOutput
argument_list|()
decl_stmt|;
name|boolean
name|ignore
init|=
literal|false
decl_stmt|;
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|onPartial
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|size
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|ignore
condition|)
block|{
return|return;
block|}
name|bos
operator|.
name|write
argument_list|(
name|data
argument_list|,
name|offset
argument_list|,
name|size
argument_list|)
expr_stmt|;
comment|// if we don't have enough to read the header size of the first translog, bail and wait for the next one
if|if
condition|(
name|bos
operator|.
name|size
argument_list|()
operator|<
literal|4
condition|)
block|{
return|return;
block|}
name|BytesStreamInput
name|si
init|=
operator|new
name|BytesStreamInput
argument_list|(
name|bos
operator|.
name|bytes
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|position
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|position
operator|=
name|si
operator|.
name|position
argument_list|()
expr_stmt|;
if|if
condition|(
name|position
operator|+
literal|4
operator|>
name|bos
operator|.
name|size
argument_list|()
condition|)
block|{
break|break;
block|}
name|int
name|opSize
init|=
name|si
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|int
name|curPos
init|=
name|si
operator|.
name|position
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|si
operator|.
name|position
argument_list|()
operator|+
name|opSize
operator|)
operator|>
name|bos
operator|.
name|size
argument_list|()
condition|)
block|{
break|break;
block|}
name|Translog
operator|.
name|Operation
name|operation
init|=
name|TranslogStreams
operator|.
name|readTranslogOperation
argument_list|(
name|si
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|si
operator|.
name|position
argument_list|()
operator|-
name|curPos
operator|)
operator|!=
name|opSize
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"mismatch in size, expected [{}], got [{}]"
argument_list|,
name|opSize
argument_list|,
name|si
operator|.
name|position
argument_list|()
operator|-
name|curPos
argument_list|)
expr_stmt|;
block|}
name|recoveryState
operator|.
name|getTranslog
argument_list|()
operator|.
name|addTranslogOperations
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|indexShard
operator|.
name|performRecoveryOperation
argument_list|(
name|operation
argument_list|)
expr_stmt|;
if|if
condition|(
name|si
operator|.
name|position
argument_list|()
operator|>=
name|bos
operator|.
name|size
argument_list|()
condition|)
block|{
name|position
operator|=
name|si
operator|.
name|position
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"failed to retrieve translog after [{}] operations, ignoring the rest, considered corrupted"
argument_list|,
name|e
argument_list|,
name|recoveryState
operator|.
name|getTranslog
argument_list|()
operator|.
name|currentTranslogOperations
argument_list|()
argument_list|)
expr_stmt|;
name|ignore
operator|=
literal|true
expr_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
return|return;
block|}
block|}
name|BytesStreamOutput
name|newBos
init|=
operator|new
name|BytesStreamOutput
argument_list|()
decl_stmt|;
name|int
name|leftOver
init|=
name|bos
operator|.
name|size
argument_list|()
operator|-
name|position
decl_stmt|;
if|if
condition|(
name|leftOver
operator|>
literal|0
condition|)
block|{
name|newBos
operator|.
name|write
argument_list|(
name|bos
operator|.
name|bytes
argument_list|()
operator|.
name|array
argument_list|()
argument_list|,
name|position
argument_list|,
name|leftOver
argument_list|)
expr_stmt|;
block|}
name|bos
operator|=
name|newBos
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|onCompleted
parameter_list|()
block|{
if|if
condition|(
name|ignore
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|!
name|transIt
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
return|return;
block|}
name|blobContainer
operator|.
name|readBlob
argument_list|(
name|transIt
operator|.
name|next
argument_list|()
operator|.
name|name
argument_list|()
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failure
operator|.
name|set
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
if|if
condition|(
name|failure
operator|.
name|get
argument_list|()
operator|!=
literal|null
condition|)
block|{
throw|throw
name|failure
operator|.
name|get
argument_list|()
throw|;
block|}
name|indexShard
operator|.
name|performRecoveryFinalization
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|recoveryState
operator|.
name|getTranslog
argument_list|()
operator|.
name|time
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|recoveryState
operator|.
name|getTranslog
argument_list|()
operator|.
name|startTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IndexShardGatewayRecoveryException
argument_list|(
name|shardId
argument_list|,
literal|"Failed to recover translog"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|recoverIndex
specifier|private
name|void
name|recoverIndex
parameter_list|(
name|CommitPoint
name|commitPoint
parameter_list|,
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|BlobMetaData
argument_list|>
name|blobs
parameter_list|)
throws|throws
name|Exception
block|{
name|recoveryState
operator|.
name|setStage
argument_list|(
name|RecoveryState
operator|.
name|Stage
operator|.
name|INDEX
argument_list|)
expr_stmt|;
name|int
name|numberOfFiles
init|=
literal|0
decl_stmt|;
name|long
name|totalSize
init|=
literal|0
decl_stmt|;
name|int
name|numberOfReusedFiles
init|=
literal|0
decl_stmt|;
name|long
name|reusedTotalSize
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|CommitPoint
operator|.
name|FileInfo
argument_list|>
name|filesToRecover
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|CommitPoint
operator|.
name|FileInfo
name|fileInfo
range|:
name|commitPoint
operator|.
name|indexFiles
argument_list|()
control|)
block|{
name|String
name|fileName
init|=
name|fileInfo
operator|.
name|physicalName
argument_list|()
decl_stmt|;
name|StoreFileMetaData
name|md
init|=
literal|null
decl_stmt|;
try|try
block|{
name|md
operator|=
name|store
operator|.
name|metaData
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// no file
block|}
comment|// we don't compute checksum for segments, so always recover them
if|if
condition|(
operator|!
name|fileName
operator|.
name|startsWith
argument_list|(
literal|"segments"
argument_list|)
operator|&&
name|md
operator|!=
literal|null
operator|&&
name|fileInfo
operator|.
name|isSame
argument_list|(
name|md
argument_list|)
condition|)
block|{
name|numberOfFiles
operator|++
expr_stmt|;
name|totalSize
operator|+=
name|md
operator|.
name|length
argument_list|()
expr_stmt|;
name|numberOfReusedFiles
operator|++
expr_stmt|;
name|reusedTotalSize
operator|+=
name|md
operator|.
name|length
argument_list|()
expr_stmt|;
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"not_recovering [{}], exists in local store and is same"
argument_list|,
name|fileInfo
operator|.
name|physicalName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
if|if
condition|(
name|md
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"recovering [{}], does not exists in local store"
argument_list|,
name|fileInfo
operator|.
name|physicalName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"recovering [{}], exists in local store but is different"
argument_list|,
name|fileInfo
operator|.
name|physicalName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|numberOfFiles
operator|++
expr_stmt|;
name|totalSize
operator|+=
name|fileInfo
operator|.
name|length
argument_list|()
expr_stmt|;
name|filesToRecover
operator|.
name|add
argument_list|(
name|fileInfo
argument_list|)
expr_stmt|;
block|}
block|}
name|recoveryState
operator|.
name|getIndex
argument_list|()
operator|.
name|files
argument_list|(
name|numberOfFiles
argument_list|,
name|totalSize
argument_list|,
name|numberOfReusedFiles
argument_list|,
name|reusedTotalSize
argument_list|)
expr_stmt|;
if|if
condition|(
name|filesToRecover
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"no files to recover, all exists within the local store"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"recovering_files [{}] with total_size [{}], reusing_files [{}] with reused_size [{}]"
argument_list|,
name|numberOfFiles
argument_list|,
operator|new
name|ByteSizeValue
argument_list|(
name|totalSize
argument_list|)
argument_list|,
name|numberOfReusedFiles
argument_list|,
operator|new
name|ByteSizeValue
argument_list|(
name|reusedTotalSize
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
name|filesToRecover
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|CopyOnWriteArrayList
argument_list|<
name|Throwable
argument_list|>
name|failures
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<
name|Throwable
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|CommitPoint
operator|.
name|FileInfo
name|fileToRecover
range|:
name|filesToRecover
control|)
block|{
name|recoverFile
argument_list|(
name|fileToRecover
argument_list|,
name|blobs
argument_list|,
name|latch
argument_list|,
name|failures
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IndexShardGatewayRecoveryException
argument_list|(
name|shardId
argument_list|,
literal|"Interrupted while recovering index"
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|failures
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IndexShardGatewayRecoveryException
argument_list|(
name|shardId
argument_list|,
literal|"Failed to recover index"
argument_list|,
name|failures
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
throw|;
block|}
comment|// read the gateway data persisted
name|long
name|version
init|=
operator|-
literal|1
decl_stmt|;
try|try
block|{
if|if
condition|(
name|Lucene
operator|.
name|indexExists
argument_list|(
name|store
operator|.
name|directory
argument_list|()
argument_list|)
condition|)
block|{
name|version
operator|=
name|Lucene
operator|.
name|readSegmentInfos
argument_list|(
name|store
operator|.
name|directory
argument_list|()
argument_list|)
operator|.
name|getVersion
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IndexShardGatewayRecoveryException
argument_list|(
name|shardId
argument_list|()
argument_list|,
literal|"Failed to fetch index version after copying it over"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|recoveryState
operator|.
name|getIndex
argument_list|()
operator|.
name|updateVersion
argument_list|(
name|version
argument_list|)
expr_stmt|;
comment|/// now, go over and clean files that are in the store, but were not in the gateway
try|try
block|{
for|for
control|(
name|String
name|storeFile
range|:
name|store
operator|.
name|directory
argument_list|()
operator|.
name|listAll
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|commitPoint
operator|.
name|containPhysicalIndexFile
argument_list|(
name|storeFile
argument_list|)
condition|)
block|{
try|try
block|{
name|store
operator|.
name|directory
argument_list|()
operator|.
name|deleteFile
argument_list|(
name|storeFile
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
DECL|method|recoverFile
specifier|private
name|void
name|recoverFile
parameter_list|(
specifier|final
name|CommitPoint
operator|.
name|FileInfo
name|fileInfo
parameter_list|,
specifier|final
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|BlobMetaData
argument_list|>
name|blobs
parameter_list|,
specifier|final
name|CountDownLatch
name|latch
parameter_list|,
specifier|final
name|List
argument_list|<
name|Throwable
argument_list|>
name|failures
parameter_list|)
block|{
specifier|final
name|IndexOutput
name|indexOutput
decl_stmt|;
try|try
block|{
comment|// we create an output with no checksum, this is because the pure binary data of the file is not
comment|// the checksum (because of seek). We will create the checksum file once copying is done
name|indexOutput
operator|=
name|store
operator|.
name|createOutputRaw
argument_list|(
name|fileInfo
operator|.
name|physicalName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|failures
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
return|return;
block|}
name|String
name|firstFileToRecover
init|=
name|fileInfo
operator|.
name|name
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|blobs
operator|.
name|containsKey
argument_list|(
name|fileInfo
operator|.
name|name
argument_list|()
argument_list|)
condition|)
block|{
comment|// chunking, append part0 to it
name|firstFileToRecover
operator|=
name|fileInfo
operator|.
name|name
argument_list|()
operator|+
literal|".part0"
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|blobs
operator|.
name|containsKey
argument_list|(
name|firstFileToRecover
argument_list|)
condition|)
block|{
comment|// no file, what to do, what to do?
name|logger
operator|.
name|warn
argument_list|(
literal|"no file [{}]/[{}] to recover, ignoring it"
argument_list|,
name|fileInfo
operator|.
name|name
argument_list|()
argument_list|,
name|fileInfo
operator|.
name|physicalName
argument_list|()
argument_list|)
expr_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
return|return;
block|}
specifier|final
name|AtomicInteger
name|partIndex
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
name|blobContainer
operator|.
name|readBlob
argument_list|(
name|firstFileToRecover
argument_list|,
operator|new
name|BlobContainer
operator|.
name|ReadBlobListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|onPartial
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|size
parameter_list|)
throws|throws
name|IOException
block|{
name|recoveryState
operator|.
name|getIndex
argument_list|()
operator|.
name|addRecoveredByteCount
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|indexOutput
operator|.
name|writeBytes
argument_list|(
name|data
argument_list|,
name|offset
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|onCompleted
parameter_list|()
block|{
name|int
name|part
init|=
name|partIndex
operator|.
name|incrementAndGet
argument_list|()
decl_stmt|;
name|String
name|partName
init|=
name|fileInfo
operator|.
name|name
argument_list|()
operator|+
literal|".part"
operator|+
name|part
decl_stmt|;
if|if
condition|(
name|blobs
operator|.
name|containsKey
argument_list|(
name|partName
argument_list|)
condition|)
block|{
comment|// continue with the new part
name|blobContainer
operator|.
name|readBlob
argument_list|(
name|partName
argument_list|,
name|this
argument_list|)
expr_stmt|;
return|return;
block|}
else|else
block|{
comment|// we are done...
try|try
block|{
name|indexOutput
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// write the checksum
if|if
condition|(
name|fileInfo
operator|.
name|checksum
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|store
operator|.
name|writeChecksum
argument_list|(
name|fileInfo
operator|.
name|physicalName
argument_list|()
argument_list|,
name|fileInfo
operator|.
name|checksum
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|store
operator|.
name|directory
argument_list|()
operator|.
name|sync
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|fileInfo
operator|.
name|physicalName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|recoveryState
operator|.
name|getIndex
argument_list|()
operator|.
name|addRecoveredFileCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|onFailure
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failures
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|snapshotTranslog
specifier|private
name|void
name|snapshotTranslog
parameter_list|(
name|Translog
operator|.
name|Snapshot
name|snapshot
parameter_list|,
name|CommitPoint
operator|.
name|FileInfo
name|fileInfo
parameter_list|)
throws|throws
name|IOException
block|{
name|blobContainer
operator|.
name|writeBlob
argument_list|(
name|fileInfo
operator|.
name|name
argument_list|()
argument_list|,
name|snapshot
operator|.
name|stream
argument_list|()
argument_list|,
name|snapshot
operator|.
name|lengthInBytes
argument_list|()
argument_list|)
expr_stmt|;
comment|//
comment|//        long chunkBytes = Long.MAX_VALUE;
comment|//        if (chunkSize != null) {
comment|//            chunkBytes = chunkSize.bytes();
comment|//        }
comment|//
comment|//        long totalLength = fileInfo.length();
comment|//        long numberOfChunks = totalLength / chunkBytes;
comment|//        if (totalLength % chunkBytes> 0) {
comment|//            numberOfChunks++;
comment|//        }
comment|//        if (numberOfChunks == 0) {
comment|//            numberOfChunks++;
comment|//        }
comment|//
comment|//        if (numberOfChunks == 1) {
comment|//            blobContainer.writeBlob(fileInfo.name(), snapshot.stream(), snapshot.lengthInBytes());
comment|//        } else {
comment|//            InputStream translogStream = snapshot.stream();
comment|//            long totalLengthLeftToWrite = totalLength;
comment|//            for (int i = 0; i< numberOfChunks; i++) {
comment|//                long lengthToWrite = chunkBytes;
comment|//                if (totalLengthLeftToWrite< chunkBytes) {
comment|//                    lengthToWrite = totalLengthLeftToWrite;
comment|//                }
comment|//                blobContainer.writeBlob(fileInfo.name() + ".part" + i, new LimitInputStream(translogStream, lengthToWrite), lengthToWrite);
comment|//                totalLengthLeftToWrite -= lengthToWrite;
comment|//            }
comment|//        }
block|}
DECL|method|snapshotFile
specifier|private
name|void
name|snapshotFile
parameter_list|(
name|Directory
name|dir
parameter_list|,
specifier|final
name|CommitPoint
operator|.
name|FileInfo
name|fileInfo
parameter_list|,
specifier|final
name|CountDownLatch
name|latch
parameter_list|,
specifier|final
name|List
argument_list|<
name|Throwable
argument_list|>
name|failures
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|chunkBytes
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
if|if
condition|(
name|chunkSize
operator|!=
literal|null
condition|)
block|{
name|chunkBytes
operator|=
name|chunkSize
operator|.
name|bytes
argument_list|()
expr_stmt|;
block|}
name|long
name|totalLength
init|=
name|fileInfo
operator|.
name|length
argument_list|()
decl_stmt|;
name|long
name|numberOfChunks
init|=
name|totalLength
operator|/
name|chunkBytes
decl_stmt|;
if|if
condition|(
name|totalLength
operator|%
name|chunkBytes
operator|>
literal|0
condition|)
block|{
name|numberOfChunks
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|numberOfChunks
operator|==
literal|0
condition|)
block|{
name|numberOfChunks
operator|++
expr_stmt|;
block|}
specifier|final
name|long
name|fNumberOfChunks
init|=
name|numberOfChunks
decl_stmt|;
specifier|final
name|AtomicLong
name|counter
init|=
operator|new
name|AtomicLong
argument_list|(
name|numberOfChunks
argument_list|)
decl_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fNumberOfChunks
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|long
name|partNumber
init|=
name|i
decl_stmt|;
name|IndexInput
name|indexInput
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// TODO: maybe use IOContext.READONCE?
name|indexInput
operator|=
name|indexShard
operator|.
name|store
argument_list|()
operator|.
name|openInputRaw
argument_list|(
name|fileInfo
operator|.
name|physicalName
argument_list|()
argument_list|,
name|IOContext
operator|.
name|READ
argument_list|)
expr_stmt|;
name|indexInput
operator|.
name|seek
argument_list|(
name|partNumber
operator|*
name|chunkBytes
argument_list|)
expr_stmt|;
name|InputStreamIndexInput
name|is
init|=
operator|new
name|ThreadSafeInputStreamIndexInput
argument_list|(
name|indexInput
argument_list|,
name|chunkBytes
argument_list|)
decl_stmt|;
name|String
name|blobName
init|=
name|fileInfo
operator|.
name|name
argument_list|()
decl_stmt|;
if|if
condition|(
name|fNumberOfChunks
operator|>
literal|1
condition|)
block|{
comment|// if we do chunks, then all of them are in the form of "[xxx].part[N]".
name|blobName
operator|+=
literal|".part"
operator|+
name|partNumber
expr_stmt|;
block|}
specifier|final
name|IndexInput
name|fIndexInput
init|=
name|indexInput
decl_stmt|;
name|blobContainer
operator|.
name|writeBlob
argument_list|(
name|blobName
argument_list|,
name|is
argument_list|,
name|is
operator|.
name|actualSizeToRead
argument_list|()
argument_list|,
operator|new
name|ImmutableBlobContainer
operator|.
name|WriterListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onCompleted
parameter_list|()
block|{
try|try
block|{
name|fIndexInput
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
if|if
condition|(
name|counter
operator|.
name|decrementAndGet
argument_list|()
operator|==
literal|0
condition|)
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
try|try
block|{
name|fIndexInput
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
name|failures
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
if|if
condition|(
name|counter
operator|.
name|decrementAndGet
argument_list|()
operator|==
literal|0
condition|)
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|indexInput
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|indexInput
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e1
parameter_list|)
block|{
comment|// ignore
block|}
block|}
name|failures
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|commitPointExistsInBlobs
specifier|private
name|boolean
name|commitPointExistsInBlobs
parameter_list|(
name|CommitPoint
name|commitPoint
parameter_list|,
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|BlobMetaData
argument_list|>
name|blobs
parameter_list|)
block|{
for|for
control|(
name|CommitPoint
operator|.
name|FileInfo
name|fileInfo
range|:
name|Iterables
operator|.
name|concat
argument_list|(
name|commitPoint
operator|.
name|indexFiles
argument_list|()
argument_list|,
name|commitPoint
operator|.
name|translogFiles
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|commitPointFileExistsInBlobs
argument_list|(
name|fileInfo
argument_list|,
name|blobs
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
DECL|method|commitPointFileExistsInBlobs
specifier|private
name|boolean
name|commitPointFileExistsInBlobs
parameter_list|(
name|CommitPoint
operator|.
name|FileInfo
name|fileInfo
parameter_list|,
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|BlobMetaData
argument_list|>
name|blobs
parameter_list|)
block|{
name|BlobMetaData
name|blobMetaData
init|=
name|blobs
operator|.
name|get
argument_list|(
name|fileInfo
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|blobMetaData
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|blobMetaData
operator|.
name|length
argument_list|()
operator|!=
name|fileInfo
operator|.
name|length
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|blobs
operator|.
name|containsKey
argument_list|(
name|fileInfo
operator|.
name|name
argument_list|()
operator|+
literal|".part0"
argument_list|)
condition|)
block|{
comment|// multi part file sum up the size and check
name|int
name|part
init|=
literal|0
decl_stmt|;
name|long
name|totalSize
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|blobMetaData
operator|=
name|blobs
operator|.
name|get
argument_list|(
name|fileInfo
operator|.
name|name
argument_list|()
operator|+
literal|".part"
operator|+
name|part
operator|++
argument_list|)
expr_stmt|;
if|if
condition|(
name|blobMetaData
operator|==
literal|null
condition|)
block|{
break|break;
block|}
name|totalSize
operator|+=
name|blobMetaData
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|totalSize
operator|!=
name|fileInfo
operator|.
name|length
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
comment|// no file, not exact and not multipart
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|buildCommitPoints
specifier|private
name|CommitPoints
name|buildCommitPoints
parameter_list|(
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|BlobMetaData
argument_list|>
name|blobs
parameter_list|)
block|{
name|List
argument_list|<
name|CommitPoint
argument_list|>
name|commitPoints
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|blobs
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
literal|"commit-"
argument_list|)
condition|)
block|{
try|try
block|{
name|commitPoints
operator|.
name|add
argument_list|(
name|CommitPoints
operator|.
name|fromXContent
argument_list|(
name|blobContainer
operator|.
name|readBlobFully
argument_list|(
name|name
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"failed to read commit point [{}]"
argument_list|,
name|e
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
operator|new
name|CommitPoints
argument_list|(
name|commitPoints
argument_list|)
return|;
block|}
DECL|method|fileNameFromGeneration
specifier|private
name|String
name|fileNameFromGeneration
parameter_list|(
name|long
name|generation
parameter_list|)
block|{
return|return
literal|"__"
operator|+
name|Long
operator|.
name|toString
argument_list|(
name|generation
argument_list|,
name|Character
operator|.
name|MAX_RADIX
argument_list|)
return|;
block|}
DECL|method|findLatestFileNameGeneration
specifier|private
name|long
name|findLatestFileNameGeneration
parameter_list|(
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|BlobMetaData
argument_list|>
name|blobs
parameter_list|)
block|{
name|long
name|generation
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|blobs
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|name
operator|.
name|startsWith
argument_list|(
literal|"__"
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|name
operator|.
name|contains
argument_list|(
literal|".part"
argument_list|)
condition|)
block|{
name|name
operator|=
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|name
operator|.
name|indexOf
argument_list|(
literal|".part"
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|long
name|currentGen
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|name
operator|.
name|substring
argument_list|(
literal|2
argument_list|)
comment|/*__*/
argument_list|,
name|Character
operator|.
name|MAX_RADIX
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentGen
operator|>
name|generation
condition|)
block|{
name|generation
operator|=
name|currentGen
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"file [{}] does not conform to the '__' schema"
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|generation
return|;
block|}
block|}
end_class

end_unit

