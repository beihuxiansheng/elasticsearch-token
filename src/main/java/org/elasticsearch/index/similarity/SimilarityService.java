begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.similarity
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|similarity
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|similarities
operator|.
name|PerFieldSimilarityWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|similarities
operator|.
name|Similarity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|AbstractIndexComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|FieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MapperService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|settings
operator|.
name|IndexSettings
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|SimilarityService
specifier|public
class|class
name|SimilarityService
extends|extends
name|AbstractIndexComponent
block|{
DECL|field|similarityLookupService
specifier|private
specifier|final
name|SimilarityLookupService
name|similarityLookupService
decl_stmt|;
DECL|field|mapperService
specifier|private
specifier|final
name|MapperService
name|mapperService
decl_stmt|;
DECL|field|perFieldSimilarity
specifier|private
specifier|final
name|Similarity
name|perFieldSimilarity
decl_stmt|;
DECL|method|SimilarityService
specifier|public
name|SimilarityService
parameter_list|(
name|Index
name|index
parameter_list|)
block|{
name|this
argument_list|(
name|index
argument_list|,
name|ImmutableSettings
operator|.
name|Builder
operator|.
name|EMPTY_SETTINGS
argument_list|)
expr_stmt|;
block|}
DECL|method|SimilarityService
specifier|public
name|SimilarityService
parameter_list|(
name|Index
name|index
parameter_list|,
name|Settings
name|settings
parameter_list|)
block|{
name|this
argument_list|(
name|index
argument_list|,
name|settings
argument_list|,
operator|new
name|SimilarityLookupService
argument_list|(
name|index
argument_list|,
name|settings
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Inject
DECL|method|SimilarityService
specifier|public
name|SimilarityService
parameter_list|(
name|Index
name|index
parameter_list|,
annotation|@
name|IndexSettings
name|Settings
name|indexSettings
parameter_list|,
specifier|final
name|SimilarityLookupService
name|similarityLookupService
parameter_list|,
specifier|final
name|MapperService
name|mapperService
parameter_list|)
block|{
name|super
argument_list|(
name|index
argument_list|,
name|indexSettings
argument_list|)
expr_stmt|;
name|this
operator|.
name|similarityLookupService
operator|=
name|similarityLookupService
expr_stmt|;
name|this
operator|.
name|mapperService
operator|=
name|mapperService
expr_stmt|;
name|Similarity
name|defaultSimilarity
init|=
name|similarityLookupService
operator|.
name|similarity
argument_list|(
name|SimilarityLookupService
operator|.
name|DEFAULT_SIMILARITY
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
comment|// Expert users can configure the base type as being different to default, but out-of-box we use default.
name|Similarity
name|baseSimilarity
init|=
operator|(
name|similarityLookupService
operator|.
name|similarity
argument_list|(
literal|"base"
argument_list|)
operator|!=
literal|null
operator|)
condition|?
name|similarityLookupService
operator|.
name|similarity
argument_list|(
literal|"base"
argument_list|)
operator|.
name|get
argument_list|()
else|:
name|defaultSimilarity
decl_stmt|;
name|this
operator|.
name|perFieldSimilarity
operator|=
operator|(
name|mapperService
operator|!=
literal|null
operator|)
condition|?
operator|new
name|PerFieldSimilarity
argument_list|(
name|defaultSimilarity
argument_list|,
name|baseSimilarity
argument_list|,
name|mapperService
argument_list|)
else|:
name|defaultSimilarity
expr_stmt|;
block|}
DECL|method|similarity
specifier|public
name|Similarity
name|similarity
parameter_list|()
block|{
return|return
name|perFieldSimilarity
return|;
block|}
DECL|method|similarityLookupService
specifier|public
name|SimilarityLookupService
name|similarityLookupService
parameter_list|()
block|{
return|return
name|similarityLookupService
return|;
block|}
DECL|method|mapperService
specifier|public
name|MapperService
name|mapperService
parameter_list|()
block|{
return|return
name|mapperService
return|;
block|}
DECL|class|PerFieldSimilarity
specifier|static
class|class
name|PerFieldSimilarity
extends|extends
name|PerFieldSimilarityWrapper
block|{
DECL|field|defaultSimilarity
specifier|private
specifier|final
name|Similarity
name|defaultSimilarity
decl_stmt|;
DECL|field|baseSimilarity
specifier|private
specifier|final
name|Similarity
name|baseSimilarity
decl_stmt|;
DECL|field|mapperService
specifier|private
specifier|final
name|MapperService
name|mapperService
decl_stmt|;
DECL|method|PerFieldSimilarity
name|PerFieldSimilarity
parameter_list|(
name|Similarity
name|defaultSimilarity
parameter_list|,
name|Similarity
name|baseSimilarity
parameter_list|,
name|MapperService
name|mapperService
parameter_list|)
block|{
name|this
operator|.
name|defaultSimilarity
operator|=
name|defaultSimilarity
expr_stmt|;
name|this
operator|.
name|baseSimilarity
operator|=
name|baseSimilarity
expr_stmt|;
name|this
operator|.
name|mapperService
operator|=
name|mapperService
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|coord
specifier|public
name|float
name|coord
parameter_list|(
name|int
name|overlap
parameter_list|,
name|int
name|maxOverlap
parameter_list|)
block|{
return|return
name|baseSimilarity
operator|.
name|coord
argument_list|(
name|overlap
argument_list|,
name|maxOverlap
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|queryNorm
specifier|public
name|float
name|queryNorm
parameter_list|(
name|float
name|valueForNormalization
parameter_list|)
block|{
return|return
name|baseSimilarity
operator|.
name|queryNorm
argument_list|(
name|valueForNormalization
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|get
specifier|public
name|Similarity
name|get
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|FieldMapper
name|mapper
init|=
name|mapperService
operator|.
name|smartNameFieldMapper
argument_list|(
name|name
argument_list|)
decl_stmt|;
return|return
operator|(
name|mapper
operator|!=
literal|null
operator|&&
name|mapper
operator|.
name|similarity
argument_list|()
operator|!=
literal|null
operator|)
condition|?
name|mapper
operator|.
name|similarity
argument_list|()
operator|.
name|get
argument_list|()
else|:
name|defaultSimilarity
return|;
block|}
block|}
block|}
end_class

end_unit

