begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.fielddata.util
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|ArrayUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
DECL|class|BytesRefArrayRef
specifier|public
class|class
name|BytesRefArrayRef
block|{
DECL|field|EMPTY
specifier|public
specifier|static
specifier|final
name|BytesRefArrayRef
name|EMPTY
init|=
operator|new
name|BytesRefArrayRef
argument_list|(
operator|new
name|BytesRef
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
DECL|field|values
specifier|public
name|BytesRef
index|[]
name|values
decl_stmt|;
DECL|field|start
specifier|public
name|int
name|start
decl_stmt|;
DECL|field|end
specifier|public
name|int
name|end
decl_stmt|;
DECL|method|BytesRefArrayRef
specifier|public
name|BytesRefArrayRef
parameter_list|(
name|BytesRef
index|[]
name|values
parameter_list|)
block|{
name|this
argument_list|(
name|values
argument_list|,
literal|0
argument_list|,
name|values
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
DECL|method|BytesRefArrayRef
specifier|public
name|BytesRefArrayRef
parameter_list|(
name|BytesRef
index|[]
name|values
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|this
argument_list|(
name|values
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
DECL|method|BytesRefArrayRef
specifier|public
name|BytesRefArrayRef
parameter_list|(
name|BytesRef
index|[]
name|values
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
name|this
operator|.
name|values
operator|=
name|values
expr_stmt|;
name|this
operator|.
name|start
operator|=
name|start
expr_stmt|;
name|this
operator|.
name|end
operator|=
name|end
expr_stmt|;
block|}
DECL|method|reset
specifier|public
name|void
name|reset
parameter_list|(
name|int
name|newLength
parameter_list|)
block|{
assert|assert
name|start
operator|==
literal|0
assert|;
comment|// NOTE: senseless if offset != 0
name|end
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|values
operator|.
name|length
operator|<
name|newLength
condition|)
block|{
name|values
operator|=
operator|new
name|BytesRef
index|[
name|ArrayUtil
operator|.
name|oversize
argument_list|(
name|newLength
argument_list|,
literal|32
argument_list|)
index|]
expr_stmt|;
block|}
block|}
DECL|method|isEmpty
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|size
argument_list|()
operator|==
literal|0
return|;
block|}
DECL|method|size
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|end
operator|-
name|start
return|;
block|}
block|}
end_class

end_unit

