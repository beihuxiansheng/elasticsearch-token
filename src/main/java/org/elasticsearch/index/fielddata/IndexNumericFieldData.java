begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.fielddata
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|AtomicReaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermsEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|ordinals
operator|.
name|OrdinalsBuilder
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_interface
DECL|interface|IndexNumericFieldData
specifier|public
interface|interface
name|IndexNumericFieldData
parameter_list|<
name|FD
extends|extends
name|AtomicNumericFieldData
parameter_list|>
extends|extends
name|IndexFieldData
argument_list|<
name|FD
argument_list|>
block|{
DECL|enum|NumericType
specifier|static
enum|enum
name|NumericType
block|{
DECL|enum constant|BYTE
name|BYTE
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isFloatingPoint
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|requiredBits
parameter_list|()
block|{
return|return
literal|8
return|;
block|}
block|}
block|,
DECL|enum constant|SHORT
name|SHORT
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isFloatingPoint
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|requiredBits
parameter_list|()
block|{
return|return
literal|16
return|;
block|}
block|}
block|,
DECL|enum constant|INT
name|INT
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isFloatingPoint
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|requiredBits
parameter_list|()
block|{
return|return
literal|32
return|;
block|}
block|}
block|,
DECL|enum constant|LONG
name|LONG
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isFloatingPoint
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|requiredBits
parameter_list|()
block|{
return|return
literal|64
return|;
block|}
block|}
block|,
DECL|enum constant|FLOAT
name|FLOAT
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isFloatingPoint
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|requiredBits
parameter_list|()
block|{
return|return
literal|32
return|;
block|}
block|}
block|,
DECL|enum constant|DOUBLE
name|DOUBLE
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isFloatingPoint
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|requiredBits
parameter_list|()
block|{
return|return
literal|64
return|;
block|}
block|}
block|;
DECL|method|isFloatingPoint
specifier|public
specifier|abstract
name|boolean
name|isFloatingPoint
parameter_list|()
function_decl|;
DECL|method|requiredBits
specifier|public
specifier|abstract
name|int
name|requiredBits
parameter_list|()
function_decl|;
DECL|method|wrapTermsEnum
specifier|public
specifier|final
name|TermsEnum
name|wrapTermsEnum
parameter_list|(
name|TermsEnum
name|termsEnum
parameter_list|)
block|{
if|if
condition|(
name|requiredBits
argument_list|()
operator|>
literal|32
condition|)
block|{
return|return
name|OrdinalsBuilder
operator|.
name|wrapNumeric64Bit
argument_list|(
name|termsEnum
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|OrdinalsBuilder
operator|.
name|wrapNumeric32Bit
argument_list|(
name|termsEnum
argument_list|)
return|;
block|}
block|}
block|}
DECL|method|getNumericType
name|NumericType
name|getNumericType
parameter_list|()
function_decl|;
comment|/**      * Loads the atomic field data for the reader, possibly cached.      */
DECL|method|load
name|FD
name|load
parameter_list|(
name|AtomicReaderContext
name|context
parameter_list|)
function_decl|;
comment|/**      * Loads directly the atomic field data for the reader, ignoring any caching involved.      */
DECL|method|loadDirect
name|FD
name|loadDirect
parameter_list|(
name|AtomicReaderContext
name|context
parameter_list|)
throws|throws
name|Exception
function_decl|;
block|}
end_interface

end_unit

