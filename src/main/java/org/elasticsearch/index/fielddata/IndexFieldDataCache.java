begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.fielddata
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|Cache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|CacheBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|AtomicReaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SegmentReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_comment
comment|/**  * A simple field data cache abstraction.  */
end_comment

begin_interface
DECL|interface|IndexFieldDataCache
specifier|public
interface|interface
name|IndexFieldDataCache
block|{
DECL|method|load
parameter_list|<
name|FD
extends|extends
name|AtomicFieldData
parameter_list|,
name|IFD
extends|extends
name|IndexFieldData
argument_list|<
name|FD
argument_list|>
parameter_list|>
name|FD
name|load
parameter_list|(
name|AtomicReaderContext
name|context
parameter_list|,
name|IFD
name|indexFieldData
parameter_list|)
throws|throws
name|Exception
function_decl|;
DECL|method|clear
name|void
name|clear
parameter_list|(
name|Index
name|index
parameter_list|)
function_decl|;
DECL|method|clear
name|void
name|clear
parameter_list|(
name|Index
name|index
parameter_list|,
name|String
name|fieldName
parameter_list|)
function_decl|;
comment|/**      * The resident field data cache is a *per field* cache that keeps all the values in memory.      */
DECL|class|FieldBased
specifier|static
specifier|abstract
class|class
name|FieldBased
implements|implements
name|IndexFieldDataCache
implements|,
name|SegmentReader
operator|.
name|CoreClosedListener
block|{
DECL|field|cache
specifier|private
specifier|final
name|Cache
argument_list|<
name|Object
argument_list|,
name|AtomicFieldData
argument_list|>
name|cache
decl_stmt|;
DECL|method|FieldBased
specifier|protected
name|FieldBased
parameter_list|(
name|Cache
argument_list|<
name|Object
argument_list|,
name|AtomicFieldData
argument_list|>
name|cache
parameter_list|)
block|{
name|this
operator|.
name|cache
operator|=
name|cache
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onClose
specifier|public
name|void
name|onClose
parameter_list|(
name|SegmentReader
name|owner
parameter_list|)
block|{
name|cache
operator|.
name|invalidate
argument_list|(
name|owner
operator|.
name|getCoreCacheKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|load
specifier|public
parameter_list|<
name|FD
extends|extends
name|AtomicFieldData
parameter_list|,
name|IFD
extends|extends
name|IndexFieldData
argument_list|<
name|FD
argument_list|>
parameter_list|>
name|FD
name|load
parameter_list|(
specifier|final
name|AtomicReaderContext
name|context
parameter_list|,
specifier|final
name|IFD
name|indexFieldData
parameter_list|)
throws|throws
name|Exception
block|{
comment|//noinspection unchecked
return|return
operator|(
name|FD
operator|)
name|cache
operator|.
name|get
argument_list|(
name|context
operator|.
name|reader
argument_list|()
operator|.
name|getCoreCacheKey
argument_list|()
argument_list|,
operator|new
name|Callable
argument_list|<
name|AtomicFieldData
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|AtomicFieldData
name|call
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|indexFieldData
operator|.
name|loadDirect
argument_list|(
name|context
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|clear
specifier|public
name|void
name|clear
parameter_list|(
name|Index
name|index
parameter_list|)
block|{
name|cache
operator|.
name|invalidateAll
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|clear
specifier|public
name|void
name|clear
parameter_list|(
name|Index
name|index
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|cache
operator|.
name|invalidateAll
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|Resident
specifier|static
class|class
name|Resident
extends|extends
name|FieldBased
block|{
DECL|method|Resident
specifier|public
name|Resident
parameter_list|()
block|{
name|super
argument_list|(
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
operator|<
name|Object
argument_list|,
name|AtomicFieldData
operator|>
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|Soft
specifier|static
class|class
name|Soft
extends|extends
name|FieldBased
block|{
DECL|method|Soft
specifier|public
name|Soft
parameter_list|()
block|{
name|super
argument_list|(
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|softValues
argument_list|()
operator|.
operator|<
name|Object
argument_list|,
name|AtomicFieldData
operator|>
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_interface

end_unit

