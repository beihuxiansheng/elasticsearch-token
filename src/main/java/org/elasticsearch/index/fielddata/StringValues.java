begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.fielddata
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticSearchIllegalStateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_interface
DECL|interface|StringValues
specifier|public
interface|interface
name|StringValues
block|{
comment|/**      * Is one of the documents in this field data values is multi valued?      */
DECL|method|isMultiValued
name|boolean
name|isMultiValued
parameter_list|()
function_decl|;
comment|/**      * Is there a value for this doc?      */
DECL|method|hasValue
name|boolean
name|hasValue
parameter_list|(
name|int
name|docId
parameter_list|)
function_decl|;
DECL|method|getValue
name|String
name|getValue
parameter_list|(
name|int
name|docId
parameter_list|)
function_decl|;
DECL|method|getValues
name|StringArrayRef
name|getValues
parameter_list|(
name|int
name|docId
parameter_list|)
function_decl|;
DECL|method|getIter
name|Iter
name|getIter
parameter_list|(
name|int
name|docId
parameter_list|)
function_decl|;
comment|/**      * Go over all the possible values.      */
DECL|method|forEachValueInDoc
name|void
name|forEachValueInDoc
parameter_list|(
name|int
name|docId
parameter_list|,
name|ValueInDocProc
name|proc
parameter_list|)
function_decl|;
DECL|interface|ValueInDocProc
specifier|public
specifier|static
interface|interface
name|ValueInDocProc
block|{
DECL|method|onValue
name|void
name|onValue
parameter_list|(
name|int
name|docId
parameter_list|,
name|String
name|value
parameter_list|)
function_decl|;
DECL|method|onMissing
name|void
name|onMissing
parameter_list|(
name|int
name|docId
parameter_list|)
function_decl|;
block|}
DECL|interface|Iter
specifier|static
interface|interface
name|Iter
block|{
DECL|method|hasNext
name|boolean
name|hasNext
parameter_list|()
function_decl|;
DECL|method|next
name|String
name|next
parameter_list|()
function_decl|;
DECL|class|Empty
specifier|static
class|class
name|Empty
implements|implements
name|Iter
block|{
DECL|field|INSTANCE
specifier|public
specifier|static
specifier|final
name|Empty
name|INSTANCE
init|=
operator|new
name|Empty
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|hasNext
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|next
specifier|public
name|String
name|next
parameter_list|()
block|{
throw|throw
operator|new
name|ElasticSearchIllegalStateException
argument_list|()
throw|;
block|}
block|}
DECL|class|Single
specifier|static
class|class
name|Single
implements|implements
name|Iter
block|{
DECL|field|value
specifier|public
name|String
name|value
decl_stmt|;
DECL|field|done
specifier|public
name|boolean
name|done
decl_stmt|;
DECL|method|reset
specifier|public
name|Single
name|reset
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
name|this
operator|.
name|done
operator|=
literal|false
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|hasNext
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
operator|!
name|done
return|;
block|}
annotation|@
name|Override
DECL|method|next
specifier|public
name|String
name|next
parameter_list|()
block|{
assert|assert
operator|!
name|done
assert|;
name|done
operator|=
literal|true
expr_stmt|;
return|return
name|value
return|;
block|}
block|}
block|}
DECL|class|ShortBased
specifier|public
specifier|static
class|class
name|ShortBased
implements|implements
name|StringValues
block|{
DECL|field|values
specifier|private
specifier|final
name|ShortValues
name|values
decl_stmt|;
DECL|field|arrayScratch
specifier|private
specifier|final
name|StringArrayRef
name|arrayScratch
init|=
operator|new
name|StringArrayRef
argument_list|(
operator|new
name|String
index|[
literal|1
index|]
argument_list|,
literal|1
argument_list|)
decl_stmt|;
DECL|field|valuesIter
specifier|private
specifier|final
name|ValuesIter
name|valuesIter
init|=
operator|new
name|ValuesIter
argument_list|()
decl_stmt|;
DECL|field|proc
specifier|private
specifier|final
name|Proc
name|proc
init|=
operator|new
name|Proc
argument_list|()
decl_stmt|;
DECL|method|ShortBased
specifier|public
name|ShortBased
parameter_list|(
name|ShortValues
name|values
parameter_list|)
block|{
name|this
operator|.
name|values
operator|=
name|values
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isMultiValued
specifier|public
name|boolean
name|isMultiValued
parameter_list|()
block|{
return|return
name|values
operator|.
name|isMultiValued
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|hasValue
specifier|public
name|boolean
name|hasValue
parameter_list|(
name|int
name|docId
parameter_list|)
block|{
return|return
name|values
operator|.
name|hasValue
argument_list|(
name|docId
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getValue
specifier|public
name|String
name|getValue
parameter_list|(
name|int
name|docId
parameter_list|)
block|{
if|if
condition|(
operator|!
name|values
operator|.
name|hasValue
argument_list|(
name|docId
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|Short
operator|.
name|toString
argument_list|(
name|values
operator|.
name|getValue
argument_list|(
name|docId
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getValues
specifier|public
name|StringArrayRef
name|getValues
parameter_list|(
name|int
name|docId
parameter_list|)
block|{
name|ShortArrayRef
name|arrayRef
init|=
name|values
operator|.
name|getValues
argument_list|(
name|docId
argument_list|)
decl_stmt|;
name|int
name|size
init|=
name|arrayRef
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|==
literal|0
condition|)
return|return
name|StringArrayRef
operator|.
name|EMPTY
return|;
name|arrayScratch
operator|.
name|reset
argument_list|(
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|arrayRef
operator|.
name|start
init|;
name|i
operator|<
name|arrayRef
operator|.
name|end
condition|;
name|i
operator|++
control|)
block|{
name|arrayScratch
operator|.
name|values
index|[
name|arrayScratch
operator|.
name|end
operator|++
index|]
operator|=
name|Short
operator|.
name|toString
argument_list|(
name|arrayRef
operator|.
name|values
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|arrayScratch
return|;
block|}
annotation|@
name|Override
DECL|method|getIter
specifier|public
name|Iter
name|getIter
parameter_list|(
name|int
name|docId
parameter_list|)
block|{
return|return
name|valuesIter
operator|.
name|reset
argument_list|(
name|values
operator|.
name|getIter
argument_list|(
name|docId
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|forEachValueInDoc
specifier|public
name|void
name|forEachValueInDoc
parameter_list|(
name|int
name|docId
parameter_list|,
name|ValueInDocProc
name|proc
parameter_list|)
block|{
name|values
operator|.
name|forEachValueInDoc
argument_list|(
name|docId
argument_list|,
name|this
operator|.
name|proc
operator|.
name|reset
argument_list|(
name|proc
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|class|ValuesIter
specifier|static
class|class
name|ValuesIter
implements|implements
name|Iter
block|{
DECL|field|iter
specifier|private
name|ShortValues
operator|.
name|Iter
name|iter
decl_stmt|;
DECL|method|reset
specifier|private
name|ValuesIter
name|reset
parameter_list|(
name|ShortValues
operator|.
name|Iter
name|iter
parameter_list|)
block|{
name|this
operator|.
name|iter
operator|=
name|iter
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|hasNext
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|iter
operator|.
name|hasNext
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|next
specifier|public
name|String
name|next
parameter_list|()
block|{
return|return
name|Short
operator|.
name|toString
argument_list|(
name|iter
operator|.
name|next
argument_list|()
argument_list|)
return|;
block|}
block|}
DECL|class|Proc
specifier|static
class|class
name|Proc
implements|implements
name|ShortValues
operator|.
name|ValueInDocProc
block|{
DECL|field|proc
specifier|private
name|ValueInDocProc
name|proc
decl_stmt|;
DECL|method|reset
specifier|private
name|Proc
name|reset
parameter_list|(
name|ValueInDocProc
name|proc
parameter_list|)
block|{
name|this
operator|.
name|proc
operator|=
name|proc
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|onValue
specifier|public
name|void
name|onValue
parameter_list|(
name|int
name|docId
parameter_list|,
name|short
name|value
parameter_list|)
block|{
name|proc
operator|.
name|onValue
argument_list|(
name|docId
argument_list|,
name|Short
operator|.
name|toString
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onMissing
specifier|public
name|void
name|onMissing
parameter_list|(
name|int
name|docId
parameter_list|)
block|{
name|proc
operator|.
name|onMissing
argument_list|(
name|docId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|IntBased
specifier|public
specifier|static
class|class
name|IntBased
implements|implements
name|StringValues
block|{
DECL|field|values
specifier|private
specifier|final
name|IntValues
name|values
decl_stmt|;
DECL|field|arrayScratch
specifier|private
specifier|final
name|StringArrayRef
name|arrayScratch
init|=
operator|new
name|StringArrayRef
argument_list|(
operator|new
name|String
index|[
literal|1
index|]
argument_list|,
literal|1
argument_list|)
decl_stmt|;
DECL|field|valuesIter
specifier|private
specifier|final
name|ValuesIter
name|valuesIter
init|=
operator|new
name|ValuesIter
argument_list|()
decl_stmt|;
DECL|field|proc
specifier|private
specifier|final
name|Proc
name|proc
init|=
operator|new
name|Proc
argument_list|()
decl_stmt|;
DECL|method|IntBased
specifier|public
name|IntBased
parameter_list|(
name|IntValues
name|values
parameter_list|)
block|{
name|this
operator|.
name|values
operator|=
name|values
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isMultiValued
specifier|public
name|boolean
name|isMultiValued
parameter_list|()
block|{
return|return
name|values
operator|.
name|isMultiValued
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|hasValue
specifier|public
name|boolean
name|hasValue
parameter_list|(
name|int
name|docId
parameter_list|)
block|{
return|return
name|values
operator|.
name|hasValue
argument_list|(
name|docId
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getValue
specifier|public
name|String
name|getValue
parameter_list|(
name|int
name|docId
parameter_list|)
block|{
if|if
condition|(
operator|!
name|values
operator|.
name|hasValue
argument_list|(
name|docId
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|Integer
operator|.
name|toString
argument_list|(
name|values
operator|.
name|getValue
argument_list|(
name|docId
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getValues
specifier|public
name|StringArrayRef
name|getValues
parameter_list|(
name|int
name|docId
parameter_list|)
block|{
name|IntArrayRef
name|arrayRef
init|=
name|values
operator|.
name|getValues
argument_list|(
name|docId
argument_list|)
decl_stmt|;
name|int
name|size
init|=
name|arrayRef
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|==
literal|0
condition|)
return|return
name|StringArrayRef
operator|.
name|EMPTY
return|;
name|arrayScratch
operator|.
name|reset
argument_list|(
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|arrayRef
operator|.
name|start
init|;
name|i
operator|<
name|arrayRef
operator|.
name|end
condition|;
name|i
operator|++
control|)
block|{
name|arrayScratch
operator|.
name|values
index|[
name|arrayScratch
operator|.
name|end
operator|++
index|]
operator|=
name|Integer
operator|.
name|toString
argument_list|(
name|arrayRef
operator|.
name|values
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|arrayScratch
return|;
block|}
annotation|@
name|Override
DECL|method|getIter
specifier|public
name|Iter
name|getIter
parameter_list|(
name|int
name|docId
parameter_list|)
block|{
return|return
name|valuesIter
operator|.
name|reset
argument_list|(
name|values
operator|.
name|getIter
argument_list|(
name|docId
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|forEachValueInDoc
specifier|public
name|void
name|forEachValueInDoc
parameter_list|(
name|int
name|docId
parameter_list|,
name|ValueInDocProc
name|proc
parameter_list|)
block|{
name|values
operator|.
name|forEachValueInDoc
argument_list|(
name|docId
argument_list|,
name|this
operator|.
name|proc
operator|.
name|reset
argument_list|(
name|proc
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|class|ValuesIter
specifier|static
class|class
name|ValuesIter
implements|implements
name|Iter
block|{
DECL|field|iter
specifier|private
name|IntValues
operator|.
name|Iter
name|iter
decl_stmt|;
DECL|method|reset
specifier|private
name|ValuesIter
name|reset
parameter_list|(
name|IntValues
operator|.
name|Iter
name|iter
parameter_list|)
block|{
name|this
operator|.
name|iter
operator|=
name|iter
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|hasNext
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|iter
operator|.
name|hasNext
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|next
specifier|public
name|String
name|next
parameter_list|()
block|{
return|return
name|Integer
operator|.
name|toString
argument_list|(
name|iter
operator|.
name|next
argument_list|()
argument_list|)
return|;
block|}
block|}
DECL|class|Proc
specifier|static
class|class
name|Proc
implements|implements
name|IntValues
operator|.
name|ValueInDocProc
block|{
DECL|field|proc
specifier|private
name|ValueInDocProc
name|proc
decl_stmt|;
DECL|method|reset
specifier|private
name|Proc
name|reset
parameter_list|(
name|ValueInDocProc
name|proc
parameter_list|)
block|{
name|this
operator|.
name|proc
operator|=
name|proc
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|onValue
specifier|public
name|void
name|onValue
parameter_list|(
name|int
name|docId
parameter_list|,
name|int
name|value
parameter_list|)
block|{
name|proc
operator|.
name|onValue
argument_list|(
name|docId
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onMissing
specifier|public
name|void
name|onMissing
parameter_list|(
name|int
name|docId
parameter_list|)
block|{
name|proc
operator|.
name|onMissing
argument_list|(
name|docId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|LongBased
specifier|public
specifier|static
class|class
name|LongBased
implements|implements
name|StringValues
block|{
DECL|field|values
specifier|private
specifier|final
name|LongValues
name|values
decl_stmt|;
DECL|field|arrayScratch
specifier|private
specifier|final
name|StringArrayRef
name|arrayScratch
init|=
operator|new
name|StringArrayRef
argument_list|(
operator|new
name|String
index|[
literal|1
index|]
argument_list|,
literal|1
argument_list|)
decl_stmt|;
DECL|field|valuesIter
specifier|private
specifier|final
name|ValuesIter
name|valuesIter
init|=
operator|new
name|ValuesIter
argument_list|()
decl_stmt|;
DECL|field|proc
specifier|private
specifier|final
name|Proc
name|proc
init|=
operator|new
name|Proc
argument_list|()
decl_stmt|;
DECL|method|LongBased
specifier|public
name|LongBased
parameter_list|(
name|LongValues
name|values
parameter_list|)
block|{
name|this
operator|.
name|values
operator|=
name|values
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isMultiValued
specifier|public
name|boolean
name|isMultiValued
parameter_list|()
block|{
return|return
name|values
operator|.
name|isMultiValued
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|hasValue
specifier|public
name|boolean
name|hasValue
parameter_list|(
name|int
name|docId
parameter_list|)
block|{
return|return
name|values
operator|.
name|hasValue
argument_list|(
name|docId
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getValue
specifier|public
name|String
name|getValue
parameter_list|(
name|int
name|docId
parameter_list|)
block|{
if|if
condition|(
operator|!
name|values
operator|.
name|hasValue
argument_list|(
name|docId
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|Long
operator|.
name|toString
argument_list|(
name|values
operator|.
name|getValue
argument_list|(
name|docId
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getValues
specifier|public
name|StringArrayRef
name|getValues
parameter_list|(
name|int
name|docId
parameter_list|)
block|{
name|LongArrayRef
name|arrayRef
init|=
name|values
operator|.
name|getValues
argument_list|(
name|docId
argument_list|)
decl_stmt|;
name|int
name|size
init|=
name|arrayRef
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|==
literal|0
condition|)
return|return
name|StringArrayRef
operator|.
name|EMPTY
return|;
name|arrayScratch
operator|.
name|reset
argument_list|(
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|arrayRef
operator|.
name|start
init|;
name|i
operator|<
name|arrayRef
operator|.
name|end
condition|;
name|i
operator|++
control|)
block|{
name|arrayScratch
operator|.
name|values
index|[
name|arrayScratch
operator|.
name|end
operator|++
index|]
operator|=
name|Long
operator|.
name|toString
argument_list|(
name|arrayRef
operator|.
name|values
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|arrayScratch
return|;
block|}
annotation|@
name|Override
DECL|method|getIter
specifier|public
name|Iter
name|getIter
parameter_list|(
name|int
name|docId
parameter_list|)
block|{
return|return
name|valuesIter
operator|.
name|reset
argument_list|(
name|values
operator|.
name|getIter
argument_list|(
name|docId
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|forEachValueInDoc
specifier|public
name|void
name|forEachValueInDoc
parameter_list|(
name|int
name|docId
parameter_list|,
name|ValueInDocProc
name|proc
parameter_list|)
block|{
name|values
operator|.
name|forEachValueInDoc
argument_list|(
name|docId
argument_list|,
name|this
operator|.
name|proc
operator|.
name|reset
argument_list|(
name|proc
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|class|ValuesIter
specifier|static
class|class
name|ValuesIter
implements|implements
name|Iter
block|{
DECL|field|iter
specifier|private
name|LongValues
operator|.
name|Iter
name|iter
decl_stmt|;
DECL|method|reset
specifier|private
name|ValuesIter
name|reset
parameter_list|(
name|LongValues
operator|.
name|Iter
name|iter
parameter_list|)
block|{
name|this
operator|.
name|iter
operator|=
name|iter
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|hasNext
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|iter
operator|.
name|hasNext
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|next
specifier|public
name|String
name|next
parameter_list|()
block|{
return|return
name|Long
operator|.
name|toString
argument_list|(
name|iter
operator|.
name|next
argument_list|()
argument_list|)
return|;
block|}
block|}
DECL|class|Proc
specifier|static
class|class
name|Proc
implements|implements
name|LongValues
operator|.
name|ValueInDocProc
block|{
DECL|field|proc
specifier|private
name|ValueInDocProc
name|proc
decl_stmt|;
DECL|method|reset
specifier|private
name|Proc
name|reset
parameter_list|(
name|ValueInDocProc
name|proc
parameter_list|)
block|{
name|this
operator|.
name|proc
operator|=
name|proc
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|onValue
specifier|public
name|void
name|onValue
parameter_list|(
name|int
name|docId
parameter_list|,
name|long
name|value
parameter_list|)
block|{
name|proc
operator|.
name|onValue
argument_list|(
name|docId
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onMissing
specifier|public
name|void
name|onMissing
parameter_list|(
name|int
name|docId
parameter_list|)
block|{
name|proc
operator|.
name|onMissing
argument_list|(
name|docId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|FloatBased
specifier|public
specifier|static
class|class
name|FloatBased
implements|implements
name|StringValues
block|{
DECL|field|values
specifier|private
specifier|final
name|FloatValues
name|values
decl_stmt|;
DECL|field|arrayScratch
specifier|private
specifier|final
name|StringArrayRef
name|arrayScratch
init|=
operator|new
name|StringArrayRef
argument_list|(
operator|new
name|String
index|[
literal|1
index|]
argument_list|,
literal|1
argument_list|)
decl_stmt|;
DECL|field|valuesIter
specifier|private
specifier|final
name|ValuesIter
name|valuesIter
init|=
operator|new
name|ValuesIter
argument_list|()
decl_stmt|;
DECL|field|proc
specifier|private
specifier|final
name|Proc
name|proc
init|=
operator|new
name|Proc
argument_list|()
decl_stmt|;
DECL|method|FloatBased
specifier|public
name|FloatBased
parameter_list|(
name|FloatValues
name|values
parameter_list|)
block|{
name|this
operator|.
name|values
operator|=
name|values
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isMultiValued
specifier|public
name|boolean
name|isMultiValued
parameter_list|()
block|{
return|return
name|values
operator|.
name|isMultiValued
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|hasValue
specifier|public
name|boolean
name|hasValue
parameter_list|(
name|int
name|docId
parameter_list|)
block|{
return|return
name|values
operator|.
name|hasValue
argument_list|(
name|docId
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getValue
specifier|public
name|String
name|getValue
parameter_list|(
name|int
name|docId
parameter_list|)
block|{
if|if
condition|(
operator|!
name|values
operator|.
name|hasValue
argument_list|(
name|docId
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|Float
operator|.
name|toString
argument_list|(
name|values
operator|.
name|getValue
argument_list|(
name|docId
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getValues
specifier|public
name|StringArrayRef
name|getValues
parameter_list|(
name|int
name|docId
parameter_list|)
block|{
name|FloatArrayRef
name|arrayRef
init|=
name|values
operator|.
name|getValues
argument_list|(
name|docId
argument_list|)
decl_stmt|;
name|int
name|size
init|=
name|arrayRef
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|==
literal|0
condition|)
return|return
name|StringArrayRef
operator|.
name|EMPTY
return|;
name|arrayScratch
operator|.
name|reset
argument_list|(
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|arrayRef
operator|.
name|start
init|;
name|i
operator|<
name|arrayRef
operator|.
name|end
condition|;
name|i
operator|++
control|)
block|{
name|arrayScratch
operator|.
name|values
index|[
name|arrayScratch
operator|.
name|end
operator|++
index|]
operator|=
name|Float
operator|.
name|toString
argument_list|(
name|arrayRef
operator|.
name|values
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|arrayScratch
return|;
block|}
annotation|@
name|Override
DECL|method|getIter
specifier|public
name|Iter
name|getIter
parameter_list|(
name|int
name|docId
parameter_list|)
block|{
return|return
name|valuesIter
operator|.
name|reset
argument_list|(
name|values
operator|.
name|getIter
argument_list|(
name|docId
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|forEachValueInDoc
specifier|public
name|void
name|forEachValueInDoc
parameter_list|(
name|int
name|docId
parameter_list|,
name|ValueInDocProc
name|proc
parameter_list|)
block|{
name|values
operator|.
name|forEachValueInDoc
argument_list|(
name|docId
argument_list|,
name|this
operator|.
name|proc
operator|.
name|reset
argument_list|(
name|proc
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|class|ValuesIter
specifier|static
class|class
name|ValuesIter
implements|implements
name|Iter
block|{
DECL|field|iter
specifier|private
name|FloatValues
operator|.
name|Iter
name|iter
decl_stmt|;
DECL|method|reset
specifier|private
name|ValuesIter
name|reset
parameter_list|(
name|FloatValues
operator|.
name|Iter
name|iter
parameter_list|)
block|{
name|this
operator|.
name|iter
operator|=
name|iter
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|hasNext
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|iter
operator|.
name|hasNext
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|next
specifier|public
name|String
name|next
parameter_list|()
block|{
return|return
name|Float
operator|.
name|toString
argument_list|(
name|iter
operator|.
name|next
argument_list|()
argument_list|)
return|;
block|}
block|}
DECL|class|Proc
specifier|static
class|class
name|Proc
implements|implements
name|FloatValues
operator|.
name|ValueInDocProc
block|{
DECL|field|proc
specifier|private
name|ValueInDocProc
name|proc
decl_stmt|;
DECL|method|reset
specifier|private
name|Proc
name|reset
parameter_list|(
name|ValueInDocProc
name|proc
parameter_list|)
block|{
name|this
operator|.
name|proc
operator|=
name|proc
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|onValue
specifier|public
name|void
name|onValue
parameter_list|(
name|int
name|docId
parameter_list|,
name|float
name|value
parameter_list|)
block|{
name|proc
operator|.
name|onValue
argument_list|(
name|docId
argument_list|,
name|Float
operator|.
name|toString
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onMissing
specifier|public
name|void
name|onMissing
parameter_list|(
name|int
name|docId
parameter_list|)
block|{
name|proc
operator|.
name|onMissing
argument_list|(
name|docId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_interface

end_unit

