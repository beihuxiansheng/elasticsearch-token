begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.fielddata
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticSearchIllegalStateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|ordinals
operator|.
name|Ordinals
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|ordinals
operator|.
name|Ordinals
operator|.
name|Docs
import|;
end_import

begin_comment
comment|/**  * A state-full lightweight per document set of<code>double</code> values.  *  * To iterate over values in a document use the following pattern:  *<pre>  *   DoubleValues values = ..;  *   final int numValues = values.setDocId(docId);  *   for (int i = 0; i< numValues; i++) {  *       double value = values.nextValue();  *       // process value  *   }  *</pre>  */
end_comment

begin_class
DECL|class|DoubleValues
specifier|public
specifier|abstract
class|class
name|DoubleValues
block|{
comment|/**      * An empty {@link DoubleValues instance}      */
DECL|field|EMPTY
specifier|public
specifier|static
specifier|final
name|DoubleValues
name|EMPTY
init|=
operator|new
name|Empty
argument_list|()
decl_stmt|;
DECL|field|multiValued
specifier|private
specifier|final
name|boolean
name|multiValued
decl_stmt|;
DECL|field|docId
specifier|protected
name|int
name|docId
decl_stmt|;
comment|/**      * Creates a new {@link DoubleValues} instance      * @param multiValued<code>true</code> iff this instance is multivalued. Otherwise<code>false</code>.      */
DECL|method|DoubleValues
specifier|protected
name|DoubleValues
parameter_list|(
name|boolean
name|multiValued
parameter_list|)
block|{
name|this
operator|.
name|multiValued
operator|=
name|multiValued
expr_stmt|;
block|}
comment|/**      * Is one of the documents in this field data values is multi valued?      */
DECL|method|isMultiValued
specifier|public
specifier|final
name|boolean
name|isMultiValued
parameter_list|()
block|{
return|return
name|multiValued
return|;
block|}
comment|/**      * Sets iteration to the specified docID and returns the number of      * values for this document ID,      * @param docId document ID      *      * @see #nextValue()      */
DECL|method|setDocument
specifier|public
specifier|abstract
name|int
name|setDocument
parameter_list|(
name|int
name|docId
parameter_list|)
function_decl|;
comment|/**      * Returns the next value for the current docID set to {@link #setDocument(int)}.      * This method should only be called<tt>N</tt> times where<tt>N</tt> is the number      * returned from {@link #setDocument(int)}. If called more than<tt>N</tt> times the behavior      * is undefined.      *<p>      * If this instance returns ordered values the<tt>Nth</tt> value is strictly less than the<tt>N+1</tt> value with      * respect to the {@link AtomicFieldData.Order} returned from {@link #getOrder()}. If this instance returns      *<i>unordered</i> values {@link #getOrder()} must return {@link AtomicFieldData.Order#NONE}      * Note: the values returned are de-duplicated, only unique values are returned.      *</p>      *      * @return the next value for the current docID set to {@link #setDocument(int)}.      */
DECL|method|nextValue
specifier|public
specifier|abstract
name|double
name|nextValue
parameter_list|()
function_decl|;
comment|/**      * Returns the order the values are returned from {@link #nextValue()}.      *<p> Note: {@link DoubleValues} have {@link AtomicFieldData.Order#NUMERIC} by default.</p>      */
DECL|method|getOrder
specifier|public
name|AtomicFieldData
operator|.
name|Order
name|getOrder
parameter_list|()
block|{
return|return
name|AtomicFieldData
operator|.
name|Order
operator|.
name|NUMERIC
return|;
block|}
comment|/**      * Ordinal based {@link DoubleValues}.      */
DECL|class|WithOrdinals
specifier|public
specifier|static
specifier|abstract
class|class
name|WithOrdinals
extends|extends
name|DoubleValues
block|{
DECL|field|ordinals
specifier|protected
specifier|final
name|Docs
name|ordinals
decl_stmt|;
DECL|method|WithOrdinals
specifier|protected
name|WithOrdinals
parameter_list|(
name|Ordinals
operator|.
name|Docs
name|ordinals
parameter_list|)
block|{
name|super
argument_list|(
name|ordinals
operator|.
name|isMultiValued
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|ordinals
operator|=
name|ordinals
expr_stmt|;
block|}
comment|/**          * Returns the associated ordinals instance.          * @return the associated ordinals instance.          */
DECL|method|ordinals
specifier|public
name|Docs
name|ordinals
parameter_list|()
block|{
return|return
name|ordinals
return|;
block|}
comment|/**          * Returns the value for the given ordinal.          * @param ord the ordinal to lookup.          * @return a double value associated with the given ordinal.          */
DECL|method|getValueByOrd
specifier|public
specifier|abstract
name|double
name|getValueByOrd
parameter_list|(
name|long
name|ord
parameter_list|)
function_decl|;
annotation|@
name|Override
DECL|method|setDocument
specifier|public
name|int
name|setDocument
parameter_list|(
name|int
name|docId
parameter_list|)
block|{
name|this
operator|.
name|docId
operator|=
name|docId
expr_stmt|;
return|return
name|ordinals
operator|.
name|setDocument
argument_list|(
name|docId
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|nextValue
specifier|public
name|double
name|nextValue
parameter_list|()
block|{
return|return
name|getValueByOrd
argument_list|(
name|ordinals
operator|.
name|nextOrd
argument_list|()
argument_list|)
return|;
block|}
block|}
comment|/**      * An empty {@link DoubleValues} implementation      */
DECL|class|Empty
specifier|private
specifier|static
class|class
name|Empty
extends|extends
name|DoubleValues
block|{
DECL|method|Empty
name|Empty
parameter_list|()
block|{
name|super
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setDocument
specifier|public
name|int
name|setDocument
parameter_list|(
name|int
name|docId
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|nextValue
specifier|public
name|double
name|nextValue
parameter_list|()
block|{
throw|throw
operator|new
name|ElasticSearchIllegalStateException
argument_list|(
literal|"Empty DoubleValues has no next value"
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

