begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.fielddata.ordinals
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|ordinals
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|RamUsageEstimator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|packed
operator|.
name|PackedInts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|BytesValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|BytesValues
operator|.
name|WithOrdinals
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
DECL|class|SinglePackedOrdinals
specifier|public
class|class
name|SinglePackedOrdinals
extends|extends
name|Ordinals
block|{
comment|// ordinals with value 0 indicates no value
DECL|field|reader
specifier|private
specifier|final
name|PackedInts
operator|.
name|Reader
name|reader
decl_stmt|;
DECL|field|maxOrd
specifier|private
specifier|final
name|long
name|maxOrd
decl_stmt|;
DECL|field|size
specifier|private
name|long
name|size
init|=
operator|-
literal|1
decl_stmt|;
DECL|method|SinglePackedOrdinals
specifier|public
name|SinglePackedOrdinals
parameter_list|(
name|OrdinalsBuilder
name|builder
parameter_list|,
name|float
name|acceptableOverheadRatio
parameter_list|)
block|{
assert|assert
name|builder
operator|.
name|getNumMultiValuesDocs
argument_list|()
operator|==
literal|0
assert|;
name|this
operator|.
name|maxOrd
operator|=
name|builder
operator|.
name|getMaxOrd
argument_list|()
expr_stmt|;
comment|// We don't reuse the builder as-is because it might have been built with a higher overhead ratio
specifier|final
name|PackedInts
operator|.
name|Mutable
name|reader
init|=
name|PackedInts
operator|.
name|getMutable
argument_list|(
name|builder
operator|.
name|maxDoc
argument_list|()
argument_list|,
name|PackedInts
operator|.
name|bitsRequired
argument_list|(
name|maxOrd
argument_list|)
argument_list|,
name|acceptableOverheadRatio
argument_list|)
decl_stmt|;
name|PackedInts
operator|.
name|copy
argument_list|(
name|builder
operator|.
name|getFirstOrdinals
argument_list|()
argument_list|,
literal|0
argument_list|,
name|reader
argument_list|,
literal|0
argument_list|,
name|builder
operator|.
name|maxDoc
argument_list|()
argument_list|,
literal|8
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|this
operator|.
name|reader
operator|=
name|reader
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getMemorySizeInBytes
specifier|public
name|long
name|getMemorySizeInBytes
parameter_list|()
block|{
if|if
condition|(
name|size
operator|==
operator|-
literal|1
condition|)
block|{
name|size
operator|=
name|RamUsageEstimator
operator|.
name|NUM_BYTES_OBJECT_REF
operator|+
name|reader
operator|.
name|ramBytesUsed
argument_list|()
expr_stmt|;
block|}
return|return
name|size
return|;
block|}
annotation|@
name|Override
DECL|method|ordinals
specifier|public
name|WithOrdinals
name|ordinals
parameter_list|(
name|ValuesHolder
name|values
parameter_list|)
block|{
return|return
operator|new
name|Docs
argument_list|(
name|this
argument_list|,
name|values
argument_list|)
return|;
block|}
DECL|class|Docs
specifier|private
specifier|static
class|class
name|Docs
extends|extends
name|BytesValues
operator|.
name|WithOrdinals
block|{
DECL|field|maxOrd
specifier|private
specifier|final
name|long
name|maxOrd
decl_stmt|;
DECL|field|reader
specifier|private
specifier|final
name|PackedInts
operator|.
name|Reader
name|reader
decl_stmt|;
DECL|field|values
specifier|private
specifier|final
name|ValuesHolder
name|values
decl_stmt|;
DECL|field|currentOrdinal
specifier|private
name|long
name|currentOrdinal
decl_stmt|;
DECL|method|Docs
specifier|public
name|Docs
parameter_list|(
name|SinglePackedOrdinals
name|parent
parameter_list|,
name|ValuesHolder
name|values
parameter_list|)
block|{
name|super
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|maxOrd
operator|=
name|parent
operator|.
name|maxOrd
expr_stmt|;
name|this
operator|.
name|reader
operator|=
name|parent
operator|.
name|reader
expr_stmt|;
name|this
operator|.
name|values
operator|=
name|values
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getMaxOrd
specifier|public
name|long
name|getMaxOrd
parameter_list|()
block|{
return|return
name|maxOrd
return|;
block|}
annotation|@
name|Override
DECL|method|getOrd
specifier|public
name|long
name|getOrd
parameter_list|(
name|int
name|docId
parameter_list|)
block|{
return|return
name|currentOrdinal
operator|=
name|reader
operator|.
name|get
argument_list|(
name|docId
argument_list|)
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
DECL|method|nextOrd
specifier|public
name|long
name|nextOrd
parameter_list|()
block|{
assert|assert
name|currentOrdinal
operator|>=
name|MIN_ORDINAL
assert|;
return|return
name|currentOrdinal
return|;
block|}
annotation|@
name|Override
DECL|method|setDocument
specifier|public
name|int
name|setDocument
parameter_list|(
name|int
name|docId
parameter_list|)
block|{
name|currentOrdinal
operator|=
name|reader
operator|.
name|get
argument_list|(
name|docId
argument_list|)
operator|-
literal|1
expr_stmt|;
comment|// either this is> 1 or 0 - in any case it prevents a branch!
return|return
literal|1
operator|+
operator|(
name|int
operator|)
name|Math
operator|.
name|min
argument_list|(
name|currentOrdinal
argument_list|,
literal|0
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|currentOrd
specifier|public
name|long
name|currentOrd
parameter_list|()
block|{
return|return
name|currentOrdinal
return|;
block|}
annotation|@
name|Override
DECL|method|getValueByOrd
specifier|public
name|BytesRef
name|getValueByOrd
parameter_list|(
name|long
name|ord
parameter_list|)
block|{
return|return
name|values
operator|.
name|getValueByOrd
argument_list|(
name|ord
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|copyShared
specifier|public
name|BytesRef
name|copyShared
parameter_list|()
block|{
return|return
name|values
operator|.
name|copy
argument_list|(
name|scratch
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

