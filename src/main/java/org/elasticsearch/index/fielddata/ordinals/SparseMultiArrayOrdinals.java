begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.fielddata.ordinals
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|ordinals
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IntsRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|RamUsage
import|;
end_import

begin_comment
comment|/**  * Ordinals implementation that stores the ordinals into sparse fixed arrays.  *<p/>  * This prevents large ordinal arrays that are created in for example {@link MultiFlatArrayOrdinals} when  * only a few documents have a lot of terms per field.  */
end_comment

begin_class
DECL|class|SparseMultiArrayOrdinals
specifier|public
specifier|final
class|class
name|SparseMultiArrayOrdinals
implements|implements
name|Ordinals
block|{
DECL|field|lookup
specifier|private
specifier|final
name|int
index|[]
name|lookup
decl_stmt|;
DECL|field|pool
specifier|private
specifier|final
name|PositiveIntPool
name|pool
decl_stmt|;
DECL|field|numOrds
specifier|private
specifier|final
name|int
name|numOrds
decl_stmt|;
DECL|field|maxOrd
specifier|private
specifier|final
name|int
name|maxOrd
decl_stmt|;
DECL|field|numDocs
specifier|private
specifier|final
name|int
name|numDocs
decl_stmt|;
DECL|field|size
specifier|private
name|long
name|size
decl_stmt|;
DECL|method|SparseMultiArrayOrdinals
specifier|public
name|SparseMultiArrayOrdinals
parameter_list|(
name|OrdinalsBuilder
name|builder
parameter_list|,
name|int
name|maxSize
parameter_list|)
block|{
name|int
name|blockShift
init|=
name|Math
operator|.
name|min
argument_list|(
name|floorPow2
argument_list|(
name|builder
operator|.
name|getTotalNumOrds
argument_list|()
operator|<<
literal|1
argument_list|)
argument_list|,
name|floorPow2
argument_list|(
name|maxSize
argument_list|)
argument_list|)
decl_stmt|;
name|this
operator|.
name|pool
operator|=
operator|new
name|PositiveIntPool
argument_list|(
name|Math
operator|.
name|max
argument_list|(
literal|4
argument_list|,
name|blockShift
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|numDocs
operator|=
name|builder
operator|.
name|maxDoc
argument_list|()
expr_stmt|;
name|this
operator|.
name|lookup
operator|=
operator|new
name|int
index|[
name|numDocs
index|]
expr_stmt|;
name|this
operator|.
name|numOrds
operator|=
name|builder
operator|.
name|getNumOrds
argument_list|()
expr_stmt|;
name|this
operator|.
name|maxOrd
operator|=
name|numOrds
operator|+
literal|1
expr_stmt|;
name|IntsRef
name|spare
decl_stmt|;
for|for
control|(
name|int
name|doc
init|=
literal|0
init|;
name|doc
operator|<
name|numDocs
condition|;
name|doc
operator|++
control|)
block|{
name|spare
operator|=
name|builder
operator|.
name|docOrds
argument_list|(
name|doc
argument_list|)
expr_stmt|;
specifier|final
name|int
name|size
init|=
name|spare
operator|.
name|length
decl_stmt|;
if|if
condition|(
name|size
operator|==
literal|0
condition|)
block|{
name|lookup
index|[
name|doc
index|]
operator|=
literal|0
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|size
operator|==
literal|1
condition|)
block|{
name|lookup
index|[
name|doc
index|]
operator|=
name|spare
operator|.
name|ints
index|[
name|spare
operator|.
name|offset
index|]
expr_stmt|;
block|}
else|else
block|{
name|int
name|offset
init|=
name|pool
operator|.
name|put
argument_list|(
name|spare
argument_list|)
decl_stmt|;
name|lookup
index|[
name|doc
index|]
operator|=
operator|-
operator|(
name|offset
operator|)
operator|-
literal|1
expr_stmt|;
block|}
block|}
block|}
DECL|method|floorPow2
specifier|private
specifier|static
name|int
name|floorPow2
parameter_list|(
name|int
name|number
parameter_list|)
block|{
return|return
literal|31
operator|-
name|Integer
operator|.
name|numberOfLeadingZeros
argument_list|(
name|number
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hasSingleArrayBackingStorage
specifier|public
name|boolean
name|hasSingleArrayBackingStorage
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|getBackingStorage
specifier|public
name|Object
name|getBackingStorage
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getMemorySizeInBytes
specifier|public
name|long
name|getMemorySizeInBytes
parameter_list|()
block|{
if|if
condition|(
name|size
operator|==
operator|-
literal|1
condition|)
block|{
name|size
operator|=
operator|(
name|RamUsage
operator|.
name|NUM_BYTES_ARRAY_HEADER
operator|+
operator|(
name|RamUsage
operator|.
name|NUM_BYTES_INT
operator|*
name|lookup
operator|.
name|length
operator|)
operator|)
operator|+
name|pool
operator|.
name|getMemorySizeInBytes
argument_list|()
expr_stmt|;
block|}
return|return
name|size
return|;
block|}
annotation|@
name|Override
DECL|method|isMultiValued
specifier|public
name|boolean
name|isMultiValued
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|getNumDocs
specifier|public
name|int
name|getNumDocs
parameter_list|()
block|{
return|return
name|numDocs
return|;
block|}
annotation|@
name|Override
DECL|method|getNumOrds
specifier|public
name|int
name|getNumOrds
parameter_list|()
block|{
return|return
name|numOrds
return|;
block|}
annotation|@
name|Override
DECL|method|getMaxOrd
specifier|public
name|int
name|getMaxOrd
parameter_list|()
block|{
return|return
name|maxOrd
return|;
block|}
annotation|@
name|Override
DECL|method|ordinals
specifier|public
name|Docs
name|ordinals
parameter_list|()
block|{
return|return
operator|new
name|Docs
argument_list|(
name|this
argument_list|,
name|lookup
argument_list|,
name|pool
argument_list|)
return|;
block|}
DECL|class|Docs
specifier|static
class|class
name|Docs
implements|implements
name|Ordinals
operator|.
name|Docs
block|{
DECL|field|parent
specifier|private
specifier|final
name|SparseMultiArrayOrdinals
name|parent
decl_stmt|;
DECL|field|lookup
specifier|private
specifier|final
name|int
index|[]
name|lookup
decl_stmt|;
DECL|field|iter
specifier|private
specifier|final
name|IterImpl
name|iter
decl_stmt|;
DECL|field|pool
specifier|private
specifier|final
name|PositiveIntPool
name|pool
decl_stmt|;
DECL|field|spare
specifier|private
specifier|final
name|IntsRef
name|spare
init|=
operator|new
name|IntsRef
argument_list|(
literal|1
argument_list|)
decl_stmt|;
DECL|method|Docs
specifier|public
name|Docs
parameter_list|(
name|SparseMultiArrayOrdinals
name|parent
parameter_list|,
name|int
index|[]
name|lookup
parameter_list|,
name|PositiveIntPool
name|pool
parameter_list|)
block|{
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
name|this
operator|.
name|lookup
operator|=
name|lookup
expr_stmt|;
name|this
operator|.
name|pool
operator|=
name|pool
expr_stmt|;
name|this
operator|.
name|iter
operator|=
operator|new
name|IterImpl
argument_list|(
name|lookup
argument_list|,
name|pool
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|ordinals
specifier|public
name|Ordinals
name|ordinals
parameter_list|()
block|{
return|return
name|this
operator|.
name|parent
return|;
block|}
annotation|@
name|Override
DECL|method|getNumDocs
specifier|public
name|int
name|getNumDocs
parameter_list|()
block|{
return|return
name|parent
operator|.
name|getNumDocs
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getNumOrds
specifier|public
name|int
name|getNumOrds
parameter_list|()
block|{
return|return
name|parent
operator|.
name|getNumOrds
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getMaxOrd
specifier|public
name|int
name|getMaxOrd
parameter_list|()
block|{
return|return
name|parent
operator|.
name|getMaxOrd
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|isMultiValued
specifier|public
name|boolean
name|isMultiValued
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|getOrd
specifier|public
name|int
name|getOrd
parameter_list|(
name|int
name|docId
parameter_list|)
block|{
name|int
name|pointer
init|=
name|lookup
index|[
name|docId
index|]
decl_stmt|;
if|if
condition|(
name|pointer
operator|<
literal|0
condition|)
block|{
return|return
name|pool
operator|.
name|getFirstFromOffset
argument_list|(
operator|-
operator|(
name|pointer
operator|+
literal|1
operator|)
argument_list|)
return|;
block|}
return|return
name|pointer
return|;
block|}
annotation|@
name|Override
DECL|method|getOrds
specifier|public
name|IntsRef
name|getOrds
parameter_list|(
name|int
name|docId
parameter_list|)
block|{
name|spare
operator|.
name|offset
operator|=
literal|0
expr_stmt|;
name|int
name|pointer
init|=
name|lookup
index|[
name|docId
index|]
decl_stmt|;
if|if
condition|(
name|pointer
operator|==
literal|0
condition|)
block|{
name|spare
operator|.
name|length
operator|=
literal|0
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|pointer
operator|>
literal|0
condition|)
block|{
name|spare
operator|.
name|length
operator|=
literal|1
expr_stmt|;
name|spare
operator|.
name|ints
index|[
literal|0
index|]
operator|=
name|pointer
expr_stmt|;
return|return
name|spare
return|;
block|}
else|else
block|{
name|pool
operator|.
name|fill
argument_list|(
name|spare
argument_list|,
operator|-
operator|(
name|pointer
operator|+
literal|1
operator|)
argument_list|)
expr_stmt|;
return|return
name|spare
return|;
block|}
return|return
name|spare
return|;
block|}
annotation|@
name|Override
DECL|method|getIter
specifier|public
name|Iter
name|getIter
parameter_list|(
name|int
name|docId
parameter_list|)
block|{
return|return
name|iter
operator|.
name|reset
argument_list|(
name|docId
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|forEachOrdinalInDoc
specifier|public
name|void
name|forEachOrdinalInDoc
parameter_list|(
name|int
name|docId
parameter_list|,
name|OrdinalInDocProc
name|proc
parameter_list|)
block|{
name|int
name|pointer
init|=
name|lookup
index|[
name|docId
index|]
decl_stmt|;
if|if
condition|(
name|pointer
operator|>=
literal|0
condition|)
block|{
name|proc
operator|.
name|onOrdinal
argument_list|(
name|docId
argument_list|,
name|pointer
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|pool
operator|.
name|fill
argument_list|(
name|spare
argument_list|,
operator|-
operator|(
name|pointer
operator|+
literal|1
operator|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|spare
operator|.
name|offset
init|;
name|i
operator|<
name|spare
operator|.
name|length
operator|+
name|spare
operator|.
name|offset
condition|;
name|i
operator|++
control|)
block|{
name|proc
operator|.
name|onOrdinal
argument_list|(
name|docId
argument_list|,
name|spare
operator|.
name|ints
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|IterImpl
class|class
name|IterImpl
implements|implements
name|Docs
operator|.
name|Iter
block|{
DECL|field|lookup
specifier|private
specifier|final
name|int
index|[]
name|lookup
decl_stmt|;
DECL|field|pool
specifier|private
specifier|final
name|PositiveIntPool
name|pool
decl_stmt|;
DECL|field|slice
specifier|private
specifier|final
name|IntsRef
name|slice
init|=
operator|new
name|IntsRef
argument_list|(
literal|1
argument_list|)
decl_stmt|;
DECL|field|valuesOffset
specifier|private
name|int
name|valuesOffset
decl_stmt|;
DECL|method|IterImpl
specifier|public
name|IterImpl
parameter_list|(
name|int
index|[]
name|lookup
parameter_list|,
name|PositiveIntPool
name|pool
parameter_list|)
block|{
name|this
operator|.
name|lookup
operator|=
name|lookup
expr_stmt|;
name|this
operator|.
name|pool
operator|=
name|pool
expr_stmt|;
block|}
DECL|method|reset
specifier|public
name|IterImpl
name|reset
parameter_list|(
name|int
name|docId
parameter_list|)
block|{
specifier|final
name|int
name|pointer
init|=
name|lookup
index|[
name|docId
index|]
decl_stmt|;
if|if
condition|(
name|pointer
operator|<
literal|0
condition|)
block|{
name|pool
operator|.
name|fill
argument_list|(
name|slice
argument_list|,
operator|-
operator|(
name|pointer
operator|+
literal|1
operator|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|slice
operator|.
name|ints
index|[
literal|0
index|]
operator|=
name|pointer
expr_stmt|;
name|slice
operator|.
name|offset
operator|=
literal|0
expr_stmt|;
name|slice
operator|.
name|length
operator|=
literal|1
expr_stmt|;
block|}
name|valuesOffset
operator|=
literal|0
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|next
specifier|public
name|int
name|next
parameter_list|()
block|{
if|if
condition|(
name|valuesOffset
operator|>=
name|slice
operator|.
name|length
condition|)
block|{
return|return
literal|0
return|;
block|}
return|return
name|slice
operator|.
name|ints
index|[
name|slice
operator|.
name|offset
operator|+
operator|(
name|valuesOffset
operator|++
operator|)
index|]
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

