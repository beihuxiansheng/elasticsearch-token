begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.fielddata.ordinals
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|ordinals
package|;
end_package

begin_import
import|import
name|gnu
operator|.
name|trove
operator|.
name|list
operator|.
name|array
operator|.
name|TIntArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticSearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|RamUsage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|util
operator|.
name|IntArrayRef
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Ordinals implementation that stores the ordinals into sparse fixed arrays.  *<p/>  * This prevents large ordinal arrays that are created in for example {@link MultiFlatArrayOrdinals} when  * only a few documents have a lot of terms per field.  */
end_comment

begin_class
DECL|class|SparseMultiArrayOrdinals
specifier|public
class|class
name|SparseMultiArrayOrdinals
implements|implements
name|Ordinals
block|{
comment|// Contains pointer in starageOrdinals or the actual ordinal if document has one ordinal
DECL|field|lookup
specifier|private
specifier|final
name|int
index|[]
name|lookup
decl_stmt|;
comment|// Contains the ordinals for documents that have more than one ordinal. Each of this document has a start
comment|// point this array and the last ordinal is marked as negative.
DECL|field|storageOrdinals
specifier|private
specifier|final
name|int
index|[]
index|[]
name|storageOrdinals
decl_stmt|;
comment|// The n-th bit to shift the index of the storage array to inside the lookup pointer
DECL|field|storageShift
specifier|private
specifier|final
name|int
name|storageShift
decl_stmt|;
DECL|field|numOrds
specifier|private
specifier|final
name|int
name|numOrds
decl_stmt|;
DECL|field|numDocs
specifier|private
specifier|final
name|int
name|numDocs
decl_stmt|;
DECL|field|size
specifier|private
name|long
name|size
decl_stmt|;
comment|/**      * @param loadedOrds The ordinals      * @param numOrds    The total number of unique ords      * @param maxSize    The maximum size in elements for each individual storage array      */
DECL|method|SparseMultiArrayOrdinals
specifier|public
name|SparseMultiArrayOrdinals
parameter_list|(
name|int
index|[]
index|[]
name|loadedOrds
parameter_list|,
name|int
name|numOrds
parameter_list|,
name|int
name|maxSize
parameter_list|)
block|{
name|int
name|maxDoc
init|=
name|loadedOrds
index|[
literal|0
index|]
operator|.
name|length
decl_stmt|;
if|if
condition|(
name|loadedOrds
operator|.
name|length
operator|*
name|loadedOrds
index|[
literal|0
index|]
operator|.
name|length
operator|<
name|maxSize
condition|)
block|{
name|maxSize
operator|=
name|loadedOrds
operator|.
name|length
operator|*
name|loadedOrds
index|[
literal|0
index|]
operator|.
name|length
operator|+
literal|1
expr_stmt|;
block|}
name|int
name|tempMaxSize
init|=
name|maxSize
decl_stmt|;
name|int
name|storageShift
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|tempMaxSize
operator|>
literal|0
condition|)
block|{
name|storageShift
operator|++
expr_stmt|;
name|tempMaxSize
operator|=
name|tempMaxSize
operator|>>
literal|1
expr_stmt|;
block|}
name|this
operator|.
name|storageShift
operator|=
name|storageShift
expr_stmt|;
name|this
operator|.
name|lookup
operator|=
operator|new
name|int
index|[
name|maxDoc
index|]
expr_stmt|;
name|this
operator|.
name|numDocs
operator|=
name|loadedOrds
index|[
literal|0
index|]
operator|.
name|length
expr_stmt|;
name|this
operator|.
name|numOrds
operator|=
name|numOrds
expr_stmt|;
name|List
argument_list|<
name|TIntArrayList
argument_list|>
name|allStorageArrays
init|=
operator|new
name|ArrayList
argument_list|<
name|TIntArrayList
argument_list|>
argument_list|()
decl_stmt|;
name|TIntArrayList
name|currentStorageArray
init|=
operator|new
name|TIntArrayList
argument_list|(
name|maxSize
argument_list|)
decl_stmt|;
name|currentStorageArray
operator|.
name|add
argument_list|(
name|Integer
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
name|TIntArrayList
name|currentDocOrs
init|=
operator|new
name|TIntArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|doc
init|=
literal|0
init|;
name|doc
operator|<
name|maxDoc
condition|;
name|doc
operator|++
control|)
block|{
name|currentDocOrs
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|int
index|[]
name|currentOrds
range|:
name|loadedOrds
control|)
block|{
name|int
name|currentOrd
init|=
name|currentOrds
index|[
name|doc
index|]
decl_stmt|;
if|if
condition|(
name|currentOrd
operator|==
literal|0
condition|)
block|{
break|break;
block|}
name|currentDocOrs
operator|.
name|add
argument_list|(
name|currentOrd
argument_list|)
expr_stmt|;
block|}
name|int
name|currentStorageArrayOffset
init|=
name|currentStorageArray
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|currentStorageArrayOffset
operator|+
name|currentDocOrs
operator|.
name|size
argument_list|()
operator|>=
name|maxSize
condition|)
block|{
if|if
condition|(
name|currentDocOrs
operator|.
name|size
argument_list|()
operator|>=
name|maxSize
condition|)
block|{
throw|throw
operator|new
name|ElasticSearchException
argument_list|(
literal|"Doc["
operator|+
name|doc
operator|+
literal|"] has "
operator|+
name|currentDocOrs
operator|.
name|size
argument_list|()
operator|+
literal|" ordinals, but it surpasses the limit of "
operator|+
name|maxSize
argument_list|)
throw|;
block|}
name|allStorageArrays
operator|.
name|add
argument_list|(
name|currentStorageArray
argument_list|)
expr_stmt|;
name|currentStorageArray
operator|=
operator|new
name|TIntArrayList
argument_list|(
name|maxSize
argument_list|)
expr_stmt|;
name|currentStorageArray
operator|.
name|add
argument_list|(
name|Integer
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
name|currentStorageArrayOffset
operator|=
literal|1
expr_stmt|;
block|}
name|int
name|size
init|=
name|currentDocOrs
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|==
literal|0
condition|)
block|{
name|lookup
index|[
name|doc
index|]
operator|=
literal|0
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|size
operator|==
literal|1
condition|)
block|{
name|lookup
index|[
name|doc
index|]
operator|=
name|currentDocOrs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Mark the last ordinal for this doc.
name|currentDocOrs
operator|.
name|set
argument_list|(
name|currentDocOrs
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|,
operator|-
name|currentDocOrs
operator|.
name|get
argument_list|(
name|currentDocOrs
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|currentStorageArray
operator|.
name|addAll
argument_list|(
name|currentDocOrs
argument_list|)
expr_stmt|;
name|lookup
index|[
name|doc
index|]
operator|=
name|allStorageArrays
operator|.
name|size
argument_list|()
operator|<<
name|storageShift
expr_stmt|;
comment|// The left side of storageShift is for index in main array
name|lookup
index|[
name|doc
index|]
operator||=
operator|(
name|currentStorageArrayOffset
operator|&
operator|(
operator|(
literal|1
operator|<<
name|storageShift
operator|)
operator|-
literal|1
operator|)
operator|)
expr_stmt|;
comment|// The right side of storageShift is for index in ordinal array
name|lookup
index|[
name|doc
index|]
operator|=
operator|-
name|lookup
index|[
name|doc
index|]
expr_stmt|;
comment|// Mark this value as 'pointer' into ordinals array
block|}
block|}
if|if
condition|(
operator|!
name|currentStorageArray
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|allStorageArrays
operator|.
name|add
argument_list|(
name|currentStorageArray
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|storageOrdinals
operator|=
operator|new
name|int
index|[
name|allStorageArrays
operator|.
name|size
argument_list|()
index|]
index|[]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|this
operator|.
name|storageOrdinals
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|this
operator|.
name|storageOrdinals
index|[
name|i
index|]
operator|=
name|allStorageArrays
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|toArray
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|hasSingleArrayBackingStorage
specifier|public
name|boolean
name|hasSingleArrayBackingStorage
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|getBackingStorage
specifier|public
name|Object
name|getBackingStorage
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getMemorySizeInBytes
specifier|public
name|long
name|getMemorySizeInBytes
parameter_list|()
block|{
if|if
condition|(
name|size
operator|==
operator|-
literal|1
condition|)
block|{
name|long
name|size
init|=
literal|0
decl_stmt|;
name|size
operator|+=
name|RamUsage
operator|.
name|NUM_BYTES_ARRAY_HEADER
expr_stmt|;
for|for
control|(
name|int
index|[]
name|ordinal
range|:
name|storageOrdinals
control|)
block|{
name|size
operator|+=
name|RamUsage
operator|.
name|NUM_BYTES_INT
operator|*
name|ordinal
operator|.
name|length
operator|+
name|RamUsage
operator|.
name|NUM_BYTES_ARRAY_HEADER
expr_stmt|;
block|}
name|size
operator|+=
name|RamUsage
operator|.
name|NUM_BYTES_ARRAY_HEADER
operator|+
operator|(
name|RamUsage
operator|.
name|NUM_BYTES_INT
operator|*
name|lookup
operator|.
name|length
operator|)
expr_stmt|;
name|this
operator|.
name|size
operator|=
name|size
expr_stmt|;
block|}
return|return
name|size
return|;
block|}
annotation|@
name|Override
DECL|method|isMultiValued
specifier|public
name|boolean
name|isMultiValued
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|getNumDocs
specifier|public
name|int
name|getNumDocs
parameter_list|()
block|{
return|return
name|numDocs
return|;
block|}
annotation|@
name|Override
DECL|method|getNumOrds
specifier|public
name|int
name|getNumOrds
parameter_list|()
block|{
return|return
name|numOrds
return|;
block|}
annotation|@
name|Override
DECL|method|ordinals
specifier|public
name|Docs
name|ordinals
parameter_list|()
block|{
return|return
operator|new
name|Docs
argument_list|(
name|this
argument_list|,
name|lookup
argument_list|,
name|storageOrdinals
argument_list|)
return|;
block|}
DECL|class|Docs
specifier|static
class|class
name|Docs
implements|implements
name|Ordinals
operator|.
name|Docs
block|{
DECL|field|parent
specifier|private
specifier|final
name|SparseMultiArrayOrdinals
name|parent
decl_stmt|;
DECL|field|lookup
specifier|private
specifier|final
name|int
index|[]
name|lookup
decl_stmt|;
DECL|field|ordinals
specifier|private
specifier|final
name|int
index|[]
index|[]
name|ordinals
decl_stmt|;
DECL|field|iter
specifier|private
specifier|final
name|IterImpl
name|iter
decl_stmt|;
DECL|field|intsScratch
specifier|private
specifier|final
name|IntArrayRef
name|intsScratch
decl_stmt|;
DECL|method|Docs
specifier|public
name|Docs
parameter_list|(
name|SparseMultiArrayOrdinals
name|parent
parameter_list|,
name|int
index|[]
name|lookup
parameter_list|,
name|int
index|[]
index|[]
name|ordinals
parameter_list|)
block|{
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
name|this
operator|.
name|lookup
operator|=
name|lookup
expr_stmt|;
name|this
operator|.
name|ordinals
operator|=
name|ordinals
expr_stmt|;
name|this
operator|.
name|iter
operator|=
operator|new
name|IterImpl
argument_list|(
name|lookup
argument_list|,
name|ordinals
argument_list|)
expr_stmt|;
name|this
operator|.
name|intsScratch
operator|=
operator|new
name|IntArrayRef
argument_list|(
operator|new
name|int
index|[
name|parent
operator|.
name|numOrds
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|ordinals
specifier|public
name|Ordinals
name|ordinals
parameter_list|()
block|{
return|return
name|this
operator|.
name|parent
return|;
block|}
annotation|@
name|Override
DECL|method|getNumDocs
specifier|public
name|int
name|getNumDocs
parameter_list|()
block|{
return|return
name|parent
operator|.
name|getNumDocs
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getNumOrds
specifier|public
name|int
name|getNumOrds
parameter_list|()
block|{
return|return
name|parent
operator|.
name|getNumOrds
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|isMultiValued
specifier|public
name|boolean
name|isMultiValued
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|getOrd
specifier|public
name|int
name|getOrd
parameter_list|(
name|int
name|docId
parameter_list|)
block|{
name|int
name|pointer
init|=
name|lookup
index|[
name|docId
index|]
decl_stmt|;
if|if
condition|(
name|pointer
operator|==
literal|0
condition|)
block|{
return|return
literal|0
return|;
block|}
elseif|else
if|if
condition|(
name|pointer
operator|>
literal|0
condition|)
block|{
return|return
name|pointer
return|;
block|}
else|else
block|{
name|pointer
operator|=
operator|-
name|pointer
expr_stmt|;
name|int
name|allOrdsIndex
init|=
name|pointer
operator|>>
name|parent
operator|.
name|storageShift
decl_stmt|;
name|int
name|ordsIndex
init|=
operator|(
name|pointer
operator|&
operator|(
operator|(
literal|1
operator|<<
name|parent
operator|.
name|storageShift
operator|)
operator|-
literal|1
operator|)
operator|)
decl_stmt|;
return|return
name|ordinals
index|[
name|allOrdsIndex
index|]
index|[
name|ordsIndex
index|]
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getOrds
specifier|public
name|IntArrayRef
name|getOrds
parameter_list|(
name|int
name|docId
parameter_list|)
block|{
name|intsScratch
operator|.
name|end
operator|=
literal|0
expr_stmt|;
name|int
name|pointer
init|=
name|lookup
index|[
name|docId
index|]
decl_stmt|;
comment|//            System.out.println("\nPointer: " + pointer);
if|if
condition|(
name|pointer
operator|==
literal|0
condition|)
block|{
return|return
name|IntArrayRef
operator|.
name|EMPTY
return|;
block|}
elseif|else
if|if
condition|(
name|pointer
operator|>
literal|0
condition|)
block|{
name|intsScratch
operator|.
name|end
operator|=
literal|1
expr_stmt|;
name|intsScratch
operator|.
name|values
index|[
literal|0
index|]
operator|=
name|pointer
expr_stmt|;
return|return
name|intsScratch
return|;
block|}
else|else
block|{
name|pointer
operator|=
operator|-
name|pointer
expr_stmt|;
name|int
name|allOrdsIndex
init|=
name|pointer
operator|>>
name|parent
operator|.
name|storageShift
decl_stmt|;
name|int
name|ordsIndex
init|=
operator|(
name|pointer
operator|&
operator|(
operator|(
literal|1
operator|<<
name|parent
operator|.
name|storageShift
operator|)
operator|-
literal|1
operator|)
operator|)
decl_stmt|;
comment|//                System.out.println("Storage index: " + allOrdsIndex);
comment|//                System.out.println("Ordinal index: " + ordsIndex);
name|int
index|[]
name|ords
init|=
name|ordinals
index|[
name|allOrdsIndex
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
name|int
name|ord
decl_stmt|;
while|while
condition|(
operator|(
name|ord
operator|=
name|ords
index|[
name|ordsIndex
operator|++
index|]
operator|)
operator|>
literal|0
condition|)
block|{
name|intsScratch
operator|.
name|values
index|[
name|i
operator|++
index|]
operator|=
name|ord
expr_stmt|;
block|}
name|intsScratch
operator|.
name|values
index|[
name|i
operator|++
index|]
operator|=
operator|-
name|ord
expr_stmt|;
name|intsScratch
operator|.
name|end
operator|=
name|i
expr_stmt|;
return|return
name|intsScratch
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getIter
specifier|public
name|Iter
name|getIter
parameter_list|(
name|int
name|docId
parameter_list|)
block|{
return|return
name|iter
operator|.
name|reset
argument_list|(
name|docId
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|forEachOrdinalInDoc
specifier|public
name|void
name|forEachOrdinalInDoc
parameter_list|(
name|int
name|docId
parameter_list|,
name|OrdinalInDocProc
name|proc
parameter_list|)
block|{
name|int
name|pointer
init|=
name|lookup
index|[
name|docId
index|]
decl_stmt|;
if|if
condition|(
name|pointer
operator|>=
literal|0
condition|)
block|{
name|proc
operator|.
name|onOrdinal
argument_list|(
name|docId
argument_list|,
name|pointer
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|pointer
operator|=
operator|-
name|pointer
expr_stmt|;
name|int
name|allOrdsIndex
init|=
name|pointer
operator|>>
name|parent
operator|.
name|storageShift
decl_stmt|;
name|int
name|ordsIndex
init|=
operator|(
name|pointer
operator|&
operator|(
operator|(
literal|1
operator|<<
name|parent
operator|.
name|storageShift
operator|)
operator|-
literal|1
operator|)
operator|)
decl_stmt|;
name|int
index|[]
name|ords
init|=
name|ordinals
index|[
name|allOrdsIndex
index|]
decl_stmt|;
name|int
name|i
init|=
name|ordsIndex
decl_stmt|;
for|for
control|(
init|;
name|ords
index|[
name|i
index|]
operator|>
literal|0
condition|;
name|i
operator|++
control|)
block|{
name|proc
operator|.
name|onOrdinal
argument_list|(
name|docId
argument_list|,
name|ords
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|proc
operator|.
name|onOrdinal
argument_list|(
name|docId
argument_list|,
operator|-
name|ords
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|IterImpl
class|class
name|IterImpl
implements|implements
name|Docs
operator|.
name|Iter
block|{
DECL|field|lookup
specifier|private
specifier|final
name|int
index|[]
name|lookup
decl_stmt|;
DECL|field|ordinals
specifier|private
specifier|final
name|int
index|[]
index|[]
name|ordinals
decl_stmt|;
DECL|field|pointer
specifier|private
name|int
name|pointer
decl_stmt|;
DECL|field|allOrdsIndex
specifier|private
name|int
name|allOrdsIndex
decl_stmt|;
DECL|field|ordsIndex
specifier|private
name|int
name|ordsIndex
decl_stmt|;
DECL|field|ord
specifier|private
name|int
name|ord
decl_stmt|;
DECL|method|IterImpl
specifier|public
name|IterImpl
parameter_list|(
name|int
index|[]
name|lookup
parameter_list|,
name|int
index|[]
index|[]
name|ordinals
parameter_list|)
block|{
name|this
operator|.
name|lookup
operator|=
name|lookup
expr_stmt|;
name|this
operator|.
name|ordinals
operator|=
name|ordinals
expr_stmt|;
block|}
DECL|method|reset
specifier|public
name|IterImpl
name|reset
parameter_list|(
name|int
name|docId
parameter_list|)
block|{
name|pointer
operator|=
name|lookup
index|[
name|docId
index|]
expr_stmt|;
if|if
condition|(
name|pointer
operator|<
literal|0
condition|)
block|{
name|int
name|pointer
init|=
operator|-
name|this
operator|.
name|pointer
decl_stmt|;
name|allOrdsIndex
operator|=
name|pointer
operator|>>
name|parent
operator|.
name|storageShift
expr_stmt|;
name|ordsIndex
operator|=
operator|(
name|pointer
operator|&
operator|(
operator|(
literal|1
operator|<<
name|parent
operator|.
name|storageShift
operator|)
operator|-
literal|1
operator|)
operator|)
expr_stmt|;
name|ord
operator|=
name|ordinals
index|[
name|allOrdsIndex
index|]
index|[
name|ordsIndex
index|]
expr_stmt|;
block|}
else|else
block|{
name|ord
operator|=
name|pointer
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|next
specifier|public
name|int
name|next
parameter_list|()
block|{
if|if
condition|(
name|ord
operator|<=
literal|0
condition|)
block|{
return|return
literal|0
return|;
block|}
if|if
condition|(
name|pointer
operator|>
literal|0
condition|)
block|{
name|ord
operator|=
literal|0
expr_stmt|;
return|return
name|pointer
return|;
block|}
else|else
block|{
name|ord
operator|=
name|ordinals
index|[
name|allOrdsIndex
index|]
index|[
name|ordsIndex
operator|++
index|]
expr_stmt|;
if|if
condition|(
name|ord
operator|<
literal|0
condition|)
block|{
return|return
operator|-
name|ord
return|;
block|}
return|return
name|ord
return|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

