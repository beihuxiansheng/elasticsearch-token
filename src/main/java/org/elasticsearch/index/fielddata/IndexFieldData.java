begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.fielddata
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|AtomicReaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|FieldComparatorSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|SortField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|fieldcomparator
operator|.
name|SortMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|FieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|settings
operator|.
name|IndexSettings
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_interface
DECL|interface|IndexFieldData
specifier|public
interface|interface
name|IndexFieldData
parameter_list|<
name|FD
extends|extends
name|AtomicFieldData
parameter_list|>
extends|extends
name|IndexComponent
block|{
DECL|class|CommonSettings
specifier|public
specifier|static
class|class
name|CommonSettings
block|{
comment|/**          * Should single value cross documents case be optimized to remove ords. Note, this optimization          * might not be supported by all Field Data implementations, but the ones that do, should consult          * this method to check if it should be done or not.          */
DECL|method|removeOrdsOnSingleValue
specifier|public
specifier|static
name|boolean
name|removeOrdsOnSingleValue
parameter_list|(
name|FieldDataType
name|fieldDataType
parameter_list|)
block|{
return|return
operator|!
literal|"always"
operator|.
name|equals
argument_list|(
name|fieldDataType
operator|.
name|getSettings
argument_list|()
operator|.
name|get
argument_list|(
literal|"ordinals"
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|/**      * The field name.      */
DECL|method|getFieldNames
name|FieldMapper
operator|.
name|Names
name|getFieldNames
parameter_list|()
function_decl|;
comment|/**      * Are the values ordered? (in ascending manner).      */
DECL|method|valuesOrdered
name|boolean
name|valuesOrdered
parameter_list|()
function_decl|;
comment|/**      * Loads the atomic field data for the reader, possibly cached.      */
DECL|method|load
name|FD
name|load
parameter_list|(
name|AtomicReaderContext
name|context
parameter_list|)
function_decl|;
comment|/**      * Loads directly the atomic field data for the reader, ignoring any caching involved.      */
DECL|method|loadDirect
name|FD
name|loadDirect
parameter_list|(
name|AtomicReaderContext
name|context
parameter_list|)
throws|throws
name|Exception
function_decl|;
comment|/**      * Comparator used for sorting.      */
DECL|method|comparatorSource
name|XFieldComparatorSource
name|comparatorSource
parameter_list|(
annotation|@
name|Nullable
name|Object
name|missingValue
parameter_list|,
name|SortMode
name|sortMode
parameter_list|)
function_decl|;
comment|/**      * Clears any resources associated with this field data.      */
DECL|method|clear
name|void
name|clear
parameter_list|()
function_decl|;
DECL|method|clear
name|void
name|clear
parameter_list|(
name|IndexReader
name|reader
parameter_list|)
function_decl|;
comment|/**      * Returns the highest ever seen uniqiue values in an atomic reader.      */
DECL|method|getHighestNumberOfSeenUniqueValues
name|long
name|getHighestNumberOfSeenUniqueValues
parameter_list|()
function_decl|;
comment|// we need this extended source we we have custom comparators to reuse our field data
comment|// in this case, we need to reduce type that will be used when search results are reduced
comment|// on another node (we don't have the custom source them...)
DECL|class|XFieldComparatorSource
specifier|public
specifier|abstract
class|class
name|XFieldComparatorSource
extends|extends
name|FieldComparatorSource
block|{
DECL|method|reducedType
specifier|public
specifier|abstract
name|SortField
operator|.
name|Type
name|reducedType
parameter_list|()
function_decl|;
block|}
DECL|interface|Builder
interface|interface
name|Builder
block|{
DECL|method|build
name|IndexFieldData
name|build
parameter_list|(
name|Index
name|index
parameter_list|,
annotation|@
name|IndexSettings
name|Settings
name|indexSettings
parameter_list|,
name|FieldMapper
operator|.
name|Names
name|fieldNames
parameter_list|,
name|FieldDataType
name|type
parameter_list|,
name|IndexFieldDataCache
name|cache
parameter_list|)
function_decl|;
block|}
DECL|interface|WithOrdinals
specifier|public
interface|interface
name|WithOrdinals
parameter_list|<
name|FD
extends|extends
name|AtomicFieldData
operator|.
name|WithOrdinals
parameter_list|>
extends|extends
name|IndexFieldData
argument_list|<
name|FD
argument_list|>
block|{
comment|/**          * Loads the atomic field data for the reader, possibly cached.          */
DECL|method|load
name|FD
name|load
parameter_list|(
name|AtomicReaderContext
name|context
parameter_list|)
function_decl|;
comment|/**          * Loads directly the atomic field data for the reader, ignoring any caching involved.          */
DECL|method|loadDirect
name|FD
name|loadDirect
parameter_list|(
name|AtomicReaderContext
name|context
parameter_list|)
throws|throws
name|Exception
function_decl|;
block|}
block|}
end_interface

end_unit

