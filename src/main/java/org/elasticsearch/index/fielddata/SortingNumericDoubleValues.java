begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.fielddata
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|ArrayUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|InPlaceMergeSorter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Sorter
import|;
end_import

begin_comment
comment|/**  * Base class for building {@link SortedNumericDoubleValues} instances based on unsorted content.  */
end_comment

begin_class
DECL|class|SortingNumericDoubleValues
specifier|public
specifier|abstract
class|class
name|SortingNumericDoubleValues
extends|extends
name|SortedNumericDoubleValues
block|{
DECL|field|count
specifier|protected
name|int
name|count
decl_stmt|;
DECL|field|values
specifier|protected
name|double
index|[]
name|values
decl_stmt|;
DECL|field|sorter
specifier|private
specifier|final
name|Sorter
name|sorter
decl_stmt|;
DECL|method|SortingNumericDoubleValues
specifier|protected
name|SortingNumericDoubleValues
parameter_list|()
block|{
name|values
operator|=
operator|new
name|double
index|[
literal|1
index|]
expr_stmt|;
name|sorter
operator|=
operator|new
name|InPlaceMergeSorter
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|swap
parameter_list|(
name|int
name|i
parameter_list|,
name|int
name|j
parameter_list|)
block|{
specifier|final
name|double
name|tmp
init|=
name|values
index|[
name|i
index|]
decl_stmt|;
name|values
index|[
name|i
index|]
operator|=
name|values
index|[
name|j
index|]
expr_stmt|;
name|values
index|[
name|j
index|]
operator|=
name|tmp
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|int
name|compare
parameter_list|(
name|int
name|i
parameter_list|,
name|int
name|j
parameter_list|)
block|{
return|return
name|Double
operator|.
name|compare
argument_list|(
name|values
index|[
name|i
index|]
argument_list|,
name|values
index|[
name|j
index|]
argument_list|)
return|;
block|}
block|}
expr_stmt|;
block|}
comment|/**      * Make sure the {@link #values} array can store at least {@link #count} entries.      */
DECL|method|grow
specifier|protected
specifier|final
name|void
name|grow
parameter_list|()
block|{
name|values
operator|=
name|ArrayUtil
operator|.
name|grow
argument_list|(
name|values
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sort values that are stored between offsets<code>0</code> and      * {@link #count} of {@link #values}.      */
DECL|method|sort
specifier|protected
specifier|final
name|void
name|sort
parameter_list|()
block|{
name|sorter
operator|.
name|sort
argument_list|(
literal|0
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
DECL|method|count
specifier|public
specifier|final
name|int
name|count
parameter_list|()
block|{
return|return
name|count
return|;
block|}
DECL|method|valueAt
specifier|public
specifier|final
name|double
name|valueAt
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|values
index|[
name|index
index|]
return|;
block|}
block|}
end_class

end_unit

