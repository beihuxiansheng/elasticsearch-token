begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.fielddata
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
package|;
end_package

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|hash
operator|.
name|MurmurHash3
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|MurmurHash3Values
specifier|public
class|class
name|MurmurHash3Values
block|{
DECL|method|wrap
specifier|public
specifier|static
name|LongValues
name|wrap
parameter_list|(
name|DoubleValues
name|values
parameter_list|)
block|{
return|return
operator|new
name|Double
argument_list|(
name|values
argument_list|)
return|;
block|}
DECL|method|wrap
specifier|public
specifier|static
name|LongValues
name|wrap
parameter_list|(
name|LongValues
name|values
parameter_list|)
block|{
return|return
operator|new
name|Long
argument_list|(
name|values
argument_list|)
return|;
block|}
DECL|method|wrap
specifier|public
specifier|static
name|LongValues
name|wrap
parameter_list|(
name|BytesValues
name|values
parameter_list|)
block|{
return|return
operator|new
name|Bytes
argument_list|(
name|values
argument_list|)
return|;
block|}
DECL|class|Long
specifier|private
specifier|static
class|class
name|Long
extends|extends
name|LongValues
block|{
DECL|field|values
specifier|private
specifier|final
name|LongValues
name|values
decl_stmt|;
DECL|method|Long
specifier|public
name|Long
parameter_list|(
name|LongValues
name|values
parameter_list|)
block|{
name|super
argument_list|(
name|values
operator|.
name|isMultiValued
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|values
operator|=
name|values
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setDocument
specifier|public
name|int
name|setDocument
parameter_list|(
name|int
name|docId
parameter_list|)
block|{
return|return
name|values
operator|.
name|setDocument
argument_list|(
name|docId
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|nextValue
specifier|public
name|long
name|nextValue
parameter_list|()
block|{
return|return
name|MurmurHash3
operator|.
name|hash
argument_list|(
name|values
operator|.
name|nextValue
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getOrder
specifier|public
name|AtomicFieldData
operator|.
name|Order
name|getOrder
parameter_list|()
block|{
return|return
name|AtomicFieldData
operator|.
name|Order
operator|.
name|NONE
return|;
block|}
block|}
DECL|class|Double
specifier|private
specifier|static
class|class
name|Double
extends|extends
name|LongValues
block|{
DECL|field|values
specifier|private
specifier|final
name|DoubleValues
name|values
decl_stmt|;
DECL|method|Double
specifier|public
name|Double
parameter_list|(
name|DoubleValues
name|values
parameter_list|)
block|{
name|super
argument_list|(
name|values
operator|.
name|isMultiValued
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|values
operator|=
name|values
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setDocument
specifier|public
name|int
name|setDocument
parameter_list|(
name|int
name|docId
parameter_list|)
block|{
return|return
name|values
operator|.
name|setDocument
argument_list|(
name|docId
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|nextValue
specifier|public
name|long
name|nextValue
parameter_list|()
block|{
return|return
name|MurmurHash3
operator|.
name|hash
argument_list|(
name|java
operator|.
name|lang
operator|.
name|Double
operator|.
name|doubleToLongBits
argument_list|(
name|values
operator|.
name|nextValue
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getOrder
specifier|public
name|AtomicFieldData
operator|.
name|Order
name|getOrder
parameter_list|()
block|{
return|return
name|AtomicFieldData
operator|.
name|Order
operator|.
name|NONE
return|;
block|}
block|}
DECL|class|Bytes
specifier|private
specifier|static
class|class
name|Bytes
extends|extends
name|LongValues
block|{
DECL|field|hash
specifier|private
specifier|final
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|hash
operator|.
name|MurmurHash3
operator|.
name|Hash128
name|hash
init|=
operator|new
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|hash
operator|.
name|MurmurHash3
operator|.
name|Hash128
argument_list|()
decl_stmt|;
DECL|field|values
specifier|private
specifier|final
name|BytesValues
name|values
decl_stmt|;
DECL|method|Bytes
specifier|public
name|Bytes
parameter_list|(
name|BytesValues
name|values
parameter_list|)
block|{
name|super
argument_list|(
name|values
operator|.
name|isMultiValued
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|values
operator|=
name|values
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setDocument
specifier|public
name|int
name|setDocument
parameter_list|(
name|int
name|docId
parameter_list|)
block|{
return|return
name|values
operator|.
name|setDocument
argument_list|(
name|docId
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|nextValue
specifier|public
name|long
name|nextValue
parameter_list|()
block|{
specifier|final
name|BytesRef
name|next
init|=
name|values
operator|.
name|nextValue
argument_list|()
decl_stmt|;
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|hash
operator|.
name|MurmurHash3
operator|.
name|hash128
argument_list|(
name|next
operator|.
name|bytes
argument_list|,
name|next
operator|.
name|offset
argument_list|,
name|next
operator|.
name|length
argument_list|,
literal|0
argument_list|,
name|hash
argument_list|)
expr_stmt|;
return|return
name|hash
operator|.
name|h1
return|;
block|}
annotation|@
name|Override
DECL|method|getOrder
specifier|public
name|AtomicFieldData
operator|.
name|Order
name|getOrder
parameter_list|()
block|{
return|return
name|AtomicFieldData
operator|.
name|Order
operator|.
name|NONE
return|;
block|}
block|}
block|}
end_class

end_unit

