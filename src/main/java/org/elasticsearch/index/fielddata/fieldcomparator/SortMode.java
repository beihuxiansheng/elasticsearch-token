begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.fielddata.fieldcomparator
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|fieldcomparator
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticSearchIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|AtomicFieldData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|BytesValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|DoubleValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|LongValues
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_comment
comment|/**  * Defines what values to pick in the case a document contains multiple values for a particular field.  */
end_comment

begin_enum
DECL|enum|SortMode
specifier|public
enum|enum
name|SortMode
block|{
comment|/**      * Sum of all the values.      */
DECL|enum constant|SUM
name|SUM
block|{
comment|/**          * Returns the sum of the two values          */
annotation|@
name|Override
specifier|public
name|double
name|apply
parameter_list|(
name|double
name|a
parameter_list|,
name|double
name|b
parameter_list|)
block|{
return|return
name|a
operator|+
name|b
return|;
block|}
comment|/**          * Returns the sum of the two values          */
annotation|@
name|Override
specifier|public
name|long
name|apply
parameter_list|(
name|long
name|a
parameter_list|,
name|long
name|b
parameter_list|)
block|{
return|return
name|a
operator|+
name|b
return|;
block|}
block|}
block|,
comment|/**      * Average of all the values.      */
DECL|enum constant|AVG
name|AVG
block|{
comment|/**          * Returns the sum of the two values          */
annotation|@
name|Override
specifier|public
name|double
name|apply
parameter_list|(
name|double
name|a
parameter_list|,
name|double
name|b
parameter_list|)
block|{
return|return
name|a
operator|+
name|b
return|;
block|}
comment|/**          * Returns the sum of the two values          */
annotation|@
name|Override
specifier|public
name|long
name|apply
parameter_list|(
name|long
name|a
parameter_list|,
name|long
name|b
parameter_list|)
block|{
return|return
name|a
operator|+
name|b
return|;
block|}
comment|/**          * Returns<code>a / Math.max(1.0d, numValues)</code>          */
annotation|@
name|Override
specifier|public
name|double
name|reduce
parameter_list|(
name|double
name|a
parameter_list|,
name|int
name|numValues
parameter_list|)
block|{
return|return
name|a
operator|/
name|Math
operator|.
name|max
argument_list|(
literal|1.0d
argument_list|,
operator|(
name|double
operator|)
name|numValues
argument_list|)
return|;
block|}
comment|/**          * Returns<code>Math.round(a / Math.max(1.0, numValues))</code>          */
annotation|@
name|Override
specifier|public
name|long
name|reduce
parameter_list|(
name|long
name|a
parameter_list|,
name|int
name|numValues
parameter_list|)
block|{
return|return
name|Math
operator|.
name|round
argument_list|(
name|a
operator|/
name|Math
operator|.
name|max
argument_list|(
literal|1.0
argument_list|,
name|numValues
argument_list|)
argument_list|)
return|;
block|}
block|}
block|,
comment|/**      * Pick the lowest value.      */
DECL|enum constant|MIN
name|MIN
block|{
comment|/**          * Equivalent to {@link Math#min(double, double)}          */
annotation|@
name|Override
specifier|public
name|double
name|apply
parameter_list|(
name|double
name|a
parameter_list|,
name|double
name|b
parameter_list|)
block|{
return|return
name|Math
operator|.
name|min
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
return|;
block|}
comment|/**          * Equivalent to {@link Math#min(long, long)}          */
annotation|@
name|Override
specifier|public
name|long
name|apply
parameter_list|(
name|long
name|a
parameter_list|,
name|long
name|b
parameter_list|)
block|{
return|return
name|Math
operator|.
name|min
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
return|;
block|}
comment|/**          * Returns {@link Double#POSITIVE_INFINITY}          */
annotation|@
name|Override
specifier|public
name|double
name|startDouble
parameter_list|()
block|{
return|return
name|Double
operator|.
name|POSITIVE_INFINITY
return|;
block|}
comment|/**          * Returns {@link Long#MAX_VALUE}          */
annotation|@
name|Override
specifier|public
name|long
name|startLong
parameter_list|()
block|{
return|return
name|Long
operator|.
name|MAX_VALUE
return|;
block|}
comment|/**          * Returns the first value returned for the given<tt>docId</tt> or the<tt>defaultValue</tt> if the document          * has no values.          */
annotation|@
name|Override
specifier|public
name|double
name|getRelevantValue
parameter_list|(
name|DoubleValues
name|values
parameter_list|,
name|int
name|docId
parameter_list|,
name|double
name|defaultValue
parameter_list|)
block|{
assert|assert
name|values
operator|.
name|getOrder
argument_list|()
operator|!=
name|AtomicFieldData
operator|.
name|Order
operator|.
name|NONE
assert|;
if|if
condition|(
name|values
operator|.
name|setDocument
argument_list|(
name|docId
argument_list|)
operator|>
literal|0
condition|)
block|{
return|return
name|values
operator|.
name|nextValue
argument_list|()
return|;
block|}
return|return
name|defaultValue
return|;
block|}
comment|/**          * Returns the first value returned for the given<tt>docId</tt> or the<tt>defaultValue</tt> if the document          * has no values.          */
annotation|@
name|Override
specifier|public
name|long
name|getRelevantValue
parameter_list|(
name|LongValues
name|values
parameter_list|,
name|int
name|docId
parameter_list|,
name|long
name|defaultValue
parameter_list|)
block|{
assert|assert
name|values
operator|.
name|getOrder
argument_list|()
operator|!=
name|AtomicFieldData
operator|.
name|Order
operator|.
name|NONE
assert|;
if|if
condition|(
name|values
operator|.
name|setDocument
argument_list|(
name|docId
argument_list|)
operator|>
literal|0
condition|)
block|{
return|return
name|values
operator|.
name|nextValue
argument_list|()
return|;
block|}
return|return
name|defaultValue
return|;
block|}
comment|/**          * Returns the first value returned for the given<tt>docId</tt> or the<tt>defaultValue</tt> if the document          * has no values.          */
annotation|@
name|Override
specifier|public
name|BytesRef
name|getRelevantValue
parameter_list|(
name|BytesValues
name|values
parameter_list|,
name|int
name|docId
parameter_list|,
name|BytesRef
name|defaultValue
parameter_list|)
block|{
assert|assert
name|values
operator|.
name|getOrder
argument_list|()
operator|!=
name|AtomicFieldData
operator|.
name|Order
operator|.
name|NONE
assert|;
if|if
condition|(
name|values
operator|.
name|setDocument
argument_list|(
name|docId
argument_list|)
operator|>
literal|0
condition|)
block|{
return|return
name|values
operator|.
name|nextValue
argument_list|()
return|;
block|}
return|return
name|defaultValue
return|;
block|}
block|}
block|,
comment|/**      * Pick the highest value.      */
DECL|enum constant|MAX
name|MAX
block|{
comment|/**          * Equivalent to {@link Math#max(double, double)}          */
annotation|@
name|Override
specifier|public
name|double
name|apply
parameter_list|(
name|double
name|a
parameter_list|,
name|double
name|b
parameter_list|)
block|{
return|return
name|Math
operator|.
name|max
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
return|;
block|}
comment|/**          * Equivalent to {@link Math#max(long, long)}          */
annotation|@
name|Override
specifier|public
name|long
name|apply
parameter_list|(
name|long
name|a
parameter_list|,
name|long
name|b
parameter_list|)
block|{
return|return
name|Math
operator|.
name|max
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
return|;
block|}
comment|/**          * Returns {@link Double#NEGATIVE_INFINITY}          */
annotation|@
name|Override
specifier|public
name|double
name|startDouble
parameter_list|()
block|{
return|return
name|Double
operator|.
name|NEGATIVE_INFINITY
return|;
block|}
comment|/**          * Returns {@link Long#MIN_VALUE}          */
annotation|@
name|Override
specifier|public
name|long
name|startLong
parameter_list|()
block|{
return|return
name|Long
operator|.
name|MIN_VALUE
return|;
block|}
comment|/**          * Returns the last value returned for the given<tt>docId</tt> or the<tt>defaultValue</tt> if the document          * has no values.          */
annotation|@
name|Override
specifier|public
name|double
name|getRelevantValue
parameter_list|(
name|DoubleValues
name|values
parameter_list|,
name|int
name|docId
parameter_list|,
name|double
name|defaultValue
parameter_list|)
block|{
assert|assert
name|values
operator|.
name|getOrder
argument_list|()
operator|!=
name|AtomicFieldData
operator|.
name|Order
operator|.
name|NONE
assert|;
specifier|final
name|int
name|numValues
init|=
name|values
operator|.
name|setDocument
argument_list|(
name|docId
argument_list|)
decl_stmt|;
name|double
name|retVal
init|=
name|defaultValue
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numValues
condition|;
name|i
operator|++
control|)
block|{
name|retVal
operator|=
name|values
operator|.
name|nextValue
argument_list|()
expr_stmt|;
block|}
return|return
name|retVal
return|;
block|}
comment|/**          * Returns the last value returned for the given<tt>docId</tt> or the<tt>defaultValue</tt> if the document          * has no values.          */
annotation|@
name|Override
specifier|public
name|long
name|getRelevantValue
parameter_list|(
name|LongValues
name|values
parameter_list|,
name|int
name|docId
parameter_list|,
name|long
name|defaultValue
parameter_list|)
block|{
assert|assert
name|values
operator|.
name|getOrder
argument_list|()
operator|!=
name|AtomicFieldData
operator|.
name|Order
operator|.
name|NONE
assert|;
specifier|final
name|int
name|numValues
init|=
name|values
operator|.
name|setDocument
argument_list|(
name|docId
argument_list|)
decl_stmt|;
name|long
name|retVal
init|=
name|defaultValue
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numValues
condition|;
name|i
operator|++
control|)
block|{
name|retVal
operator|=
name|values
operator|.
name|nextValue
argument_list|()
expr_stmt|;
block|}
return|return
name|retVal
return|;
block|}
comment|/**          * Returns the last value returned for the given<tt>docId</tt> or the<tt>defaultValue</tt> if the document          * has no values.          */
annotation|@
name|Override
specifier|public
name|BytesRef
name|getRelevantValue
parameter_list|(
name|BytesValues
name|values
parameter_list|,
name|int
name|docId
parameter_list|,
name|BytesRef
name|defaultValue
parameter_list|)
block|{
assert|assert
name|values
operator|.
name|getOrder
argument_list|()
operator|!=
name|AtomicFieldData
operator|.
name|Order
operator|.
name|NONE
assert|;
specifier|final
name|int
name|numValues
init|=
name|values
operator|.
name|setDocument
argument_list|(
name|docId
argument_list|)
decl_stmt|;
name|BytesRef
name|currentVal
init|=
name|defaultValue
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numValues
condition|;
name|i
operator|++
control|)
block|{
name|currentVal
operator|=
name|values
operator|.
name|nextValue
argument_list|()
expr_stmt|;
block|}
return|return
name|currentVal
return|;
block|}
block|}
block|;
comment|/**      * Applies the sort mode and returns the result. This method is meant to be      * a binary function that is commonly used in a loop to find the relevant      * value for the sort mode in a list of values. For instance if the sort mode      * is {@link SortMode#MAX} this method is equivalent to {@link Math#max(double, double)}.      *      * Note: all implementations are idempotent.      *      * @param a an argument      * @param b another argument      * @return the result of the function.      */
DECL|method|apply
specifier|public
specifier|abstract
name|double
name|apply
parameter_list|(
name|double
name|a
parameter_list|,
name|double
name|b
parameter_list|)
function_decl|;
comment|/**      * Applies the sort mode and returns the result. This method is meant to be      * a binary function that is commonly used in a loop to find the relevant      * value for the sort mode in a list of values. For instance if the sort mode      * is {@link SortMode#MAX} this method is equivalent to {@link Math#max(long, long)}.      *      * Note: all implementations are idempotent.      *      * @param a an argument      * @param b another argument      * @return the result of the function.      */
DECL|method|apply
specifier|public
specifier|abstract
name|long
name|apply
parameter_list|(
name|long
name|a
parameter_list|,
name|long
name|b
parameter_list|)
function_decl|;
comment|/**      * Returns an initial value for the sort mode that is guaranteed to have no impact if passed      * to {@link #apply(double, double)}. This value should be used as the initial value if the      * sort mode is applied to a non-empty list of values. For instance:      *<pre>      *     double relevantValue = sortMode.startDouble();      *     for (int i = 0; i< array.length; i++) {      *         relevantValue = sortMode.apply(array[i], relevantValue);      *     }      *</pre>      *      * Note: This method return<code>0</code> by default.      *      * @return an initial value for the sort mode.      */
DECL|method|startDouble
specifier|public
name|double
name|startDouble
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
comment|/**      * Returns an initial value for the sort mode that is guaranteed to have no impact if passed      * to {@link #apply(long, long)}. This value should be used as the initial value if the      * sort mode is applied to a non-empty list of values. For instance:      *<pre>      *     long relevantValue = sortMode.startLong();      *     for (int i = 0; i< array.length; i++) {      *         relevantValue = sortMode.apply(array[i], relevantValue);      *     }      *</pre>      *      * Note: This method return<code>0</code> by default.      * @return an initial value for the sort mode.      */
DECL|method|startLong
specifier|public
name|long
name|startLong
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
comment|/**      * Returns the aggregated value based on the sort mode. For instance if {@link SortMode#AVG} is used      * this method divides the given value by the number of values. The default implementation returns      * the first argument.      *      * Note: all implementations are idempotent.      */
DECL|method|reduce
specifier|public
name|double
name|reduce
parameter_list|(
name|double
name|a
parameter_list|,
name|int
name|numValues
parameter_list|)
block|{
return|return
name|a
return|;
block|}
comment|/**      * Returns the aggregated value based on the sort mode. For instance if {@link SortMode#AVG} is used      * this method divides the given value by the number of values. The default implementation returns      * the first argument.      *      * Note: all implementations are idempotent.      */
DECL|method|reduce
specifier|public
name|long
name|reduce
parameter_list|(
name|long
name|a
parameter_list|,
name|int
name|numValues
parameter_list|)
block|{
return|return
name|a
return|;
block|}
comment|/**      * A case insensitive version of {@link #valueOf(String)}      *      * @throws ElasticSearchIllegalArgumentException if the given string doesn't match a sort mode or is<code>null</code>.      */
DECL|method|fromString
specifier|public
specifier|static
name|SortMode
name|fromString
parameter_list|(
name|String
name|sortMode
parameter_list|)
block|{
try|try
block|{
return|return
name|valueOf
argument_list|(
name|sortMode
operator|.
name|toUpperCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
throw|throw
operator|new
name|ElasticSearchIllegalArgumentException
argument_list|(
literal|"Illegal sort_mode "
operator|+
name|sortMode
argument_list|)
throw|;
block|}
block|}
comment|/**      * Returns the relevant value for the given document based on the {@link SortMode}. This      * method will apply each value for the given document to {@link #apply(double, double)} and returns      * the reduced value from {@link #reduce(double, int)} if the document has at least one value. Otherwise it will      * return the given default value.      * @param values the values to fetch the relevant value from.      * @param docId the doc id to fetch the relevant value for.      * @param defaultValue the default value if the document has no value      * @return the relevant value or the default value passed to the method.      */
DECL|method|getRelevantValue
specifier|public
name|double
name|getRelevantValue
parameter_list|(
name|DoubleValues
name|values
parameter_list|,
name|int
name|docId
parameter_list|,
name|double
name|defaultValue
parameter_list|)
block|{
specifier|final
name|int
name|numValues
init|=
name|values
operator|.
name|setDocument
argument_list|(
name|docId
argument_list|)
decl_stmt|;
name|double
name|relevantVal
init|=
name|startDouble
argument_list|()
decl_stmt|;
name|double
name|result
init|=
name|defaultValue
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numValues
condition|;
name|i
operator|++
control|)
block|{
name|result
operator|=
name|relevantVal
operator|=
name|apply
argument_list|(
name|relevantVal
argument_list|,
name|values
operator|.
name|nextValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|reduce
argument_list|(
name|result
argument_list|,
name|numValues
argument_list|)
return|;
block|}
comment|/**      * Returns the relevant value for the given document based on the {@link SortMode}. This      * method will apply each value for the given document to {@link #apply(long, long)} and returns      * the reduced value from {@link #reduce(long, int)} if the document has at least one value. Otherwise it will      * return the given default value.      * @param values the values to fetch the relevant value from.      * @param docId the doc id to fetch the relevant value for.      * @param defaultValue the default value if the document has no value      * @return the relevant value or the default value passed to the method.      */
DECL|method|getRelevantValue
specifier|public
name|long
name|getRelevantValue
parameter_list|(
name|LongValues
name|values
parameter_list|,
name|int
name|docId
parameter_list|,
name|long
name|defaultValue
parameter_list|)
block|{
specifier|final
name|int
name|numValues
init|=
name|values
operator|.
name|setDocument
argument_list|(
name|docId
argument_list|)
decl_stmt|;
name|long
name|relevantVal
init|=
name|startLong
argument_list|()
decl_stmt|;
name|long
name|result
init|=
name|defaultValue
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numValues
condition|;
name|i
operator|++
control|)
block|{
name|result
operator|=
name|relevantVal
operator|=
name|apply
argument_list|(
name|relevantVal
argument_list|,
name|values
operator|.
name|nextValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|reduce
argument_list|(
name|result
argument_list|,
name|numValues
argument_list|)
return|;
block|}
comment|/**      * Returns the relevant value for the given document based on the {@link SortMode}      * if the document has at least one value. Otherwise it will return same object given as the default value.      * Note: This method is optional and will throw {@link UnsupportedOperationException} if the sort mode doesn't      * allow a relevant value.      *      * @param values the values to fetch the relevant value from.      * @param docId the doc id to fetch the relevant value for.      * @param defaultValue the default value if the document has no value. This object will never be modified.      * @return the relevant value or the default value passed to the method.      */
DECL|method|getRelevantValue
specifier|public
name|BytesRef
name|getRelevantValue
parameter_list|(
name|BytesValues
name|values
parameter_list|,
name|int
name|docId
parameter_list|,
name|BytesRef
name|defaultValue
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"no relevant bytes value for sort mode: "
operator|+
name|this
operator|.
name|name
argument_list|()
argument_list|)
throw|;
block|}
block|}
end_enum

end_unit

