begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.fielddata.fieldcomparator
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|fieldcomparator
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|FieldComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|SortField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|UnicodeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticSearchIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|IndexFieldData
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
DECL|class|BytesRefFieldComparatorSource
specifier|public
class|class
name|BytesRefFieldComparatorSource
extends|extends
name|IndexFieldData
operator|.
name|XFieldComparatorSource
block|{
comment|/** UTF-8 term containing a single code point: {@link Character#MAX_CODE_POINT} which will compare greater than all other index terms      *  since {@link Character#MAX_CODE_POINT} is a noncharacter and thus shouldn't appear in an index term. */
DECL|field|MAX_TERM
specifier|public
specifier|static
specifier|final
name|BytesRef
name|MAX_TERM
decl_stmt|;
static|static
block|{
name|MAX_TERM
operator|=
operator|new
name|BytesRef
argument_list|()
expr_stmt|;
specifier|final
name|char
index|[]
name|chars
init|=
name|Character
operator|.
name|toChars
argument_list|(
name|Character
operator|.
name|MAX_CODE_POINT
argument_list|)
decl_stmt|;
name|UnicodeUtil
operator|.
name|UTF16toUTF8
argument_list|(
name|chars
argument_list|,
literal|0
argument_list|,
name|chars
operator|.
name|length
argument_list|,
name|MAX_TERM
argument_list|)
expr_stmt|;
block|}
DECL|field|indexFieldData
specifier|private
specifier|final
name|IndexFieldData
argument_list|<
name|?
argument_list|>
name|indexFieldData
decl_stmt|;
DECL|field|sortMode
specifier|private
specifier|final
name|SortMode
name|sortMode
decl_stmt|;
DECL|field|missingValue
specifier|private
specifier|final
name|Object
name|missingValue
decl_stmt|;
DECL|method|BytesRefFieldComparatorSource
specifier|public
name|BytesRefFieldComparatorSource
parameter_list|(
name|IndexFieldData
argument_list|<
name|?
argument_list|>
name|indexFieldData
parameter_list|,
name|Object
name|missingValue
parameter_list|,
name|SortMode
name|sortMode
parameter_list|)
block|{
name|this
operator|.
name|indexFieldData
operator|=
name|indexFieldData
expr_stmt|;
name|this
operator|.
name|sortMode
operator|=
name|sortMode
expr_stmt|;
name|this
operator|.
name|missingValue
operator|=
name|missingValue
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|reducedType
specifier|public
name|SortField
operator|.
name|Type
name|reducedType
parameter_list|()
block|{
return|return
name|SortField
operator|.
name|Type
operator|.
name|STRING
return|;
block|}
annotation|@
name|Override
DECL|method|newComparator
specifier|public
name|FieldComparator
argument_list|<
name|?
argument_list|>
name|newComparator
parameter_list|(
name|String
name|fieldname
parameter_list|,
name|int
name|numHits
parameter_list|,
name|int
name|sortPos
parameter_list|,
name|boolean
name|reversed
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|fieldname
operator|.
name|equals
argument_list|(
name|indexFieldData
operator|.
name|getFieldNames
argument_list|()
operator|.
name|indexName
argument_list|()
argument_list|)
assert|;
name|BytesRef
name|missingBytes
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|missingValue
operator|==
literal|null
operator|||
literal|"_last"
operator|.
name|equals
argument_list|(
name|missingValue
argument_list|)
condition|)
block|{
name|missingBytes
operator|=
name|reversed
condition|?
literal|null
else|:
name|MAX_TERM
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"_first"
operator|.
name|equals
argument_list|(
name|missingValue
argument_list|)
condition|)
block|{
name|missingBytes
operator|=
name|reversed
condition|?
name|MAX_TERM
else|:
literal|null
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|missingValue
operator|instanceof
name|BytesRef
condition|)
block|{
name|missingBytes
operator|=
operator|(
name|BytesRef
operator|)
name|missingValue
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|missingValue
operator|instanceof
name|String
condition|)
block|{
name|missingBytes
operator|=
operator|new
name|BytesRef
argument_list|(
operator|(
name|String
operator|)
name|missingValue
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|missingValue
operator|instanceof
name|byte
index|[]
condition|)
block|{
name|missingBytes
operator|=
operator|new
name|BytesRef
argument_list|(
operator|(
name|byte
index|[]
operator|)
name|missingValue
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ElasticSearchIllegalArgumentException
argument_list|(
literal|"Unsupported missing value: "
operator|+
name|missingValue
argument_list|)
throw|;
block|}
if|if
condition|(
name|indexFieldData
operator|.
name|valuesOrdered
argument_list|()
operator|&&
name|indexFieldData
operator|instanceof
name|IndexFieldData
operator|.
name|WithOrdinals
condition|)
block|{
return|return
operator|new
name|BytesRefOrdValComparator
argument_list|(
operator|(
name|IndexFieldData
operator|.
name|WithOrdinals
argument_list|<
name|?
argument_list|>
operator|)
name|indexFieldData
argument_list|,
name|numHits
argument_list|,
name|sortMode
argument_list|,
name|missingBytes
argument_list|)
return|;
block|}
return|return
operator|new
name|BytesRefValComparator
argument_list|(
name|indexFieldData
argument_list|,
name|numHits
argument_list|,
name|sortMode
argument_list|,
name|missingBytes
argument_list|)
return|;
block|}
block|}
end_class

end_unit

