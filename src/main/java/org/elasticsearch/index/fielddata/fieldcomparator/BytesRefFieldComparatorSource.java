begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.fielddata.fieldcomparator
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|fieldcomparator
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|AtomicReaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|BinaryDocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|RandomAccessOrds
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SortedDocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|FieldCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|FieldComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Scorer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|SortField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Bits
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|FixedBitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|Lucene
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|IndexFieldData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|IndexOrdinalsFieldData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|SortedBinaryDocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|MultiValueMode
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * Comparator source for string/binary values.  */
end_comment

begin_class
DECL|class|BytesRefFieldComparatorSource
specifier|public
class|class
name|BytesRefFieldComparatorSource
extends|extends
name|IndexFieldData
operator|.
name|XFieldComparatorSource
block|{
DECL|field|indexFieldData
specifier|private
specifier|final
name|IndexFieldData
argument_list|<
name|?
argument_list|>
name|indexFieldData
decl_stmt|;
DECL|field|sortMode
specifier|private
specifier|final
name|MultiValueMode
name|sortMode
decl_stmt|;
DECL|field|missingValue
specifier|private
specifier|final
name|Object
name|missingValue
decl_stmt|;
DECL|field|nested
specifier|private
specifier|final
name|Nested
name|nested
decl_stmt|;
DECL|method|BytesRefFieldComparatorSource
specifier|public
name|BytesRefFieldComparatorSource
parameter_list|(
name|IndexFieldData
argument_list|<
name|?
argument_list|>
name|indexFieldData
parameter_list|,
name|Object
name|missingValue
parameter_list|,
name|MultiValueMode
name|sortMode
parameter_list|,
name|Nested
name|nested
parameter_list|)
block|{
name|this
operator|.
name|indexFieldData
operator|=
name|indexFieldData
expr_stmt|;
name|this
operator|.
name|sortMode
operator|=
name|sortMode
expr_stmt|;
name|this
operator|.
name|missingValue
operator|=
name|missingValue
expr_stmt|;
name|this
operator|.
name|nested
operator|=
name|nested
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|reducedType
specifier|public
name|SortField
operator|.
name|Type
name|reducedType
parameter_list|()
block|{
return|return
name|SortField
operator|.
name|Type
operator|.
name|STRING
return|;
block|}
DECL|method|getValues
specifier|protected
name|SortedBinaryDocValues
name|getValues
parameter_list|(
name|AtomicReaderContext
name|context
parameter_list|)
block|{
return|return
name|indexFieldData
operator|.
name|load
argument_list|(
name|context
argument_list|)
operator|.
name|getBytesValues
argument_list|()
return|;
block|}
DECL|method|setScorer
specifier|protected
name|void
name|setScorer
parameter_list|(
name|Scorer
name|scorer
parameter_list|)
block|{}
annotation|@
name|Override
DECL|method|newComparator
specifier|public
name|FieldComparator
argument_list|<
name|?
argument_list|>
name|newComparator
parameter_list|(
name|String
name|fieldname
parameter_list|,
name|int
name|numHits
parameter_list|,
name|int
name|sortPos
parameter_list|,
name|boolean
name|reversed
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|indexFieldData
operator|==
literal|null
operator|||
name|fieldname
operator|.
name|equals
argument_list|(
name|indexFieldData
operator|.
name|getFieldNames
argument_list|()
operator|.
name|indexName
argument_list|()
argument_list|)
assert|;
specifier|final
name|boolean
name|sortMissingLast
init|=
name|sortMissingLast
argument_list|(
name|missingValue
argument_list|)
operator|^
name|reversed
decl_stmt|;
specifier|final
name|BytesRef
name|missingBytes
init|=
operator|(
name|BytesRef
operator|)
name|missingObject
argument_list|(
name|missingValue
argument_list|,
name|reversed
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexFieldData
operator|instanceof
name|IndexOrdinalsFieldData
condition|)
block|{
return|return
operator|new
name|FieldComparator
operator|.
name|TermOrdValComparator
argument_list|(
name|numHits
argument_list|,
literal|null
argument_list|,
name|sortMissingLast
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|SortedDocValues
name|getSortedDocValues
parameter_list|(
name|AtomicReaderContext
name|context
parameter_list|,
name|String
name|field
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|RandomAccessOrds
name|values
init|=
operator|(
operator|(
name|IndexOrdinalsFieldData
operator|)
name|indexFieldData
operator|)
operator|.
name|load
argument_list|(
name|context
argument_list|)
operator|.
name|getOrdinalsValues
argument_list|()
decl_stmt|;
specifier|final
name|SortedDocValues
name|selectedValues
decl_stmt|;
if|if
condition|(
name|nested
operator|==
literal|null
condition|)
block|{
name|selectedValues
operator|=
name|sortMode
operator|.
name|select
argument_list|(
name|values
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|FixedBitSet
name|rootDocs
init|=
name|nested
operator|.
name|rootDocs
argument_list|(
name|context
argument_list|)
decl_stmt|;
specifier|final
name|FixedBitSet
name|innerDocs
init|=
name|nested
operator|.
name|innerDocs
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|selectedValues
operator|=
name|sortMode
operator|.
name|select
argument_list|(
name|values
argument_list|,
name|rootDocs
argument_list|,
name|innerDocs
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sortMissingFirst
argument_list|(
name|missingValue
argument_list|)
operator|||
name|sortMissingLast
argument_list|(
name|missingValue
argument_list|)
condition|)
block|{
return|return
name|selectedValues
return|;
block|}
else|else
block|{
return|return
operator|new
name|ReplaceMissing
argument_list|(
name|selectedValues
argument_list|,
name|missingBytes
argument_list|)
return|;
block|}
block|}
specifier|public
name|BytesRef
name|value
parameter_list|(
name|int
name|slot
parameter_list|)
block|{
comment|// TODO: When serializing the response to the coordinating node, we lose the information about
comment|// whether the comparator sorts missing docs first or last. We should fix it and let
comment|// TopDocs.merge deal with it (it knows how to)
name|BytesRef
name|value
init|=
name|super
operator|.
name|value
argument_list|(
name|slot
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|value
operator|=
name|missingBytes
expr_stmt|;
block|}
return|return
name|value
return|;
block|}
block|}
return|;
block|}
specifier|final
name|BytesRef
name|nullPlaceHolder
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
specifier|final
name|BytesRef
name|nonNullMissingBytes
init|=
name|missingBytes
operator|==
literal|null
condition|?
name|nullPlaceHolder
else|:
name|missingBytes
decl_stmt|;
return|return
operator|new
name|TermValComparator
argument_list|(
name|numHits
argument_list|,
literal|null
argument_list|,
name|sortMissingLast
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|BinaryDocValues
name|getBinaryDocValues
parameter_list|(
name|AtomicReaderContext
name|context
parameter_list|,
name|String
name|field
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|SortedBinaryDocValues
name|values
init|=
name|getValues
argument_list|(
name|context
argument_list|)
decl_stmt|;
specifier|final
name|BinaryDocValues
name|selectedValues
decl_stmt|;
if|if
condition|(
name|nested
operator|==
literal|null
condition|)
block|{
name|selectedValues
operator|=
name|sortMode
operator|.
name|select
argument_list|(
name|values
argument_list|,
name|nonNullMissingBytes
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|FixedBitSet
name|rootDocs
init|=
name|nested
operator|.
name|rootDocs
argument_list|(
name|context
argument_list|)
decl_stmt|;
specifier|final
name|FixedBitSet
name|innerDocs
init|=
name|nested
operator|.
name|innerDocs
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|selectedValues
operator|=
name|sortMode
operator|.
name|select
argument_list|(
name|values
argument_list|,
name|nonNullMissingBytes
argument_list|,
name|rootDocs
argument_list|,
name|innerDocs
argument_list|,
name|context
operator|.
name|reader
argument_list|()
operator|.
name|maxDoc
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|selectedValues
return|;
block|}
annotation|@
name|Override
specifier|protected
name|Bits
name|getDocsWithField
parameter_list|(
name|AtomicReaderContext
name|context
parameter_list|,
name|String
name|field
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|Bits
operator|.
name|MatchAllBits
argument_list|(
name|context
operator|.
name|reader
argument_list|()
operator|.
name|maxDoc
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|isNull
parameter_list|(
name|int
name|doc
parameter_list|,
name|BytesRef
name|term
parameter_list|)
block|{
return|return
name|term
operator|==
name|nullPlaceHolder
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setScorer
parameter_list|(
name|Scorer
name|scorer
parameter_list|)
block|{
name|BytesRefFieldComparatorSource
operator|.
name|this
operator|.
name|setScorer
argument_list|(
name|scorer
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|BytesRef
name|value
parameter_list|(
name|int
name|slot
parameter_list|)
block|{
name|BytesRef
name|value
init|=
name|super
operator|.
name|value
argument_list|(
name|slot
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|value
operator|=
name|missingBytes
expr_stmt|;
block|}
return|return
name|value
return|;
block|}
block|}
return|;
block|}
comment|/**       * A view of a SortedDocValues where missing values       * are replaced with the specified term        */
comment|// TODO: move this out if we need it for other reasons
DECL|class|ReplaceMissing
specifier|static
class|class
name|ReplaceMissing
extends|extends
name|SortedDocValues
block|{
DECL|field|in
specifier|final
name|SortedDocValues
name|in
decl_stmt|;
DECL|field|substituteOrd
specifier|final
name|int
name|substituteOrd
decl_stmt|;
DECL|field|substituteTerm
specifier|final
name|BytesRef
name|substituteTerm
decl_stmt|;
DECL|field|exists
specifier|final
name|boolean
name|exists
decl_stmt|;
DECL|method|ReplaceMissing
name|ReplaceMissing
parameter_list|(
name|SortedDocValues
name|in
parameter_list|,
name|BytesRef
name|term
parameter_list|)
block|{
name|this
operator|.
name|in
operator|=
name|in
expr_stmt|;
name|this
operator|.
name|substituteTerm
operator|=
name|term
expr_stmt|;
name|int
name|sub
init|=
name|in
operator|.
name|lookupTerm
argument_list|(
name|term
argument_list|)
decl_stmt|;
if|if
condition|(
name|sub
operator|<
literal|0
condition|)
block|{
name|substituteOrd
operator|=
operator|-
name|sub
operator|-
literal|1
expr_stmt|;
name|exists
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|substituteOrd
operator|=
name|sub
expr_stmt|;
name|exists
operator|=
literal|true
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getOrd
specifier|public
name|int
name|getOrd
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
name|int
name|ord
init|=
name|in
operator|.
name|getOrd
argument_list|(
name|docID
argument_list|)
decl_stmt|;
if|if
condition|(
name|ord
operator|<
literal|0
condition|)
block|{
return|return
name|substituteOrd
return|;
block|}
elseif|else
if|if
condition|(
name|exists
operator|==
literal|false
operator|&&
name|ord
operator|>=
name|substituteOrd
condition|)
block|{
return|return
name|ord
operator|+
literal|1
return|;
block|}
else|else
block|{
return|return
name|ord
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getValueCount
specifier|public
name|int
name|getValueCount
parameter_list|()
block|{
if|if
condition|(
name|exists
condition|)
block|{
return|return
name|in
operator|.
name|getValueCount
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|in
operator|.
name|getValueCount
argument_list|()
operator|+
literal|1
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|lookupOrd
specifier|public
name|BytesRef
name|lookupOrd
parameter_list|(
name|int
name|ord
parameter_list|)
block|{
if|if
condition|(
name|ord
operator|==
name|substituteOrd
condition|)
block|{
return|return
name|substituteTerm
return|;
block|}
elseif|else
if|if
condition|(
name|exists
operator|==
literal|false
operator|&&
name|ord
operator|>
name|substituteOrd
condition|)
block|{
return|return
name|in
operator|.
name|lookupOrd
argument_list|(
name|ord
operator|-
literal|1
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|in
operator|.
name|lookupOrd
argument_list|(
name|ord
argument_list|)
return|;
block|}
block|}
comment|// we let termsenum etc fall back to the default implementation
block|}
static|static
block|{
assert|assert
name|Lucene
operator|.
name|VERSION
operator|==
name|Version
operator|.
name|LUCENE_4_9
operator|:
literal|"The comparator below is a raw copy of Lucene's, remove it when upgrading to 4.10"
assert|;
block|}
comment|/** Sorts by field's natural Term sort order.  All      *  comparisons are done using BytesRef.compareTo, which is      *  slow for medium to large result sets but possibly      *  very fast for very small results sets. */
DECL|class|TermValComparator
specifier|public
specifier|static
class|class
name|TermValComparator
extends|extends
name|FieldComparator
argument_list|<
name|BytesRef
argument_list|>
block|{
DECL|field|values
specifier|private
specifier|final
name|BytesRef
index|[]
name|values
decl_stmt|;
DECL|field|tempBRs
specifier|private
specifier|final
name|BytesRef
index|[]
name|tempBRs
decl_stmt|;
DECL|field|docTerms
specifier|private
name|BinaryDocValues
name|docTerms
decl_stmt|;
DECL|field|docsWithField
specifier|private
name|Bits
name|docsWithField
decl_stmt|;
DECL|field|field
specifier|private
specifier|final
name|String
name|field
decl_stmt|;
DECL|field|bottom
specifier|private
name|BytesRef
name|bottom
decl_stmt|;
DECL|field|topValue
specifier|private
name|BytesRef
name|topValue
decl_stmt|;
DECL|field|missingSortCmp
specifier|private
specifier|final
name|int
name|missingSortCmp
decl_stmt|;
comment|/** Sole constructor. */
DECL|method|TermValComparator
specifier|public
name|TermValComparator
parameter_list|(
name|int
name|numHits
parameter_list|,
name|String
name|field
parameter_list|,
name|boolean
name|sortMissingLast
parameter_list|)
block|{
name|values
operator|=
operator|new
name|BytesRef
index|[
name|numHits
index|]
expr_stmt|;
name|tempBRs
operator|=
operator|new
name|BytesRef
index|[
name|numHits
index|]
expr_stmt|;
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
name|missingSortCmp
operator|=
name|sortMissingLast
condition|?
literal|1
else|:
operator|-
literal|1
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|compare
specifier|public
name|int
name|compare
parameter_list|(
name|int
name|slot1
parameter_list|,
name|int
name|slot2
parameter_list|)
block|{
specifier|final
name|BytesRef
name|val1
init|=
name|values
index|[
name|slot1
index|]
decl_stmt|;
specifier|final
name|BytesRef
name|val2
init|=
name|values
index|[
name|slot2
index|]
decl_stmt|;
return|return
name|compareValues
argument_list|(
name|val1
argument_list|,
name|val2
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|compareBottom
specifier|public
name|int
name|compareBottom
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
specifier|final
name|BytesRef
name|comparableBytes
init|=
name|getComparableBytes
argument_list|(
name|doc
argument_list|,
name|docTerms
operator|.
name|get
argument_list|(
name|doc
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|compareValues
argument_list|(
name|bottom
argument_list|,
name|comparableBytes
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|copy
specifier|public
name|void
name|copy
parameter_list|(
name|int
name|slot
parameter_list|,
name|int
name|doc
parameter_list|)
block|{
specifier|final
name|BytesRef
name|comparableBytes
init|=
name|getComparableBytes
argument_list|(
name|doc
argument_list|,
name|docTerms
operator|.
name|get
argument_list|(
name|doc
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|comparableBytes
operator|==
literal|null
condition|)
block|{
name|values
index|[
name|slot
index|]
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|tempBRs
index|[
name|slot
index|]
operator|==
literal|null
condition|)
block|{
name|tempBRs
index|[
name|slot
index|]
operator|=
operator|new
name|BytesRef
argument_list|()
expr_stmt|;
block|}
name|values
index|[
name|slot
index|]
operator|=
name|tempBRs
index|[
name|slot
index|]
expr_stmt|;
name|values
index|[
name|slot
index|]
operator|.
name|copyBytes
argument_list|(
name|comparableBytes
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Retrieves the BinaryDocValues for the field in this segment */
DECL|method|getBinaryDocValues
specifier|protected
name|BinaryDocValues
name|getBinaryDocValues
parameter_list|(
name|AtomicReaderContext
name|context
parameter_list|,
name|String
name|field
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|FieldCache
operator|.
name|DEFAULT
operator|.
name|getTerms
argument_list|(
name|context
operator|.
name|reader
argument_list|()
argument_list|,
name|field
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/** Retrieves the set of documents that have a value in this segment */
DECL|method|getDocsWithField
specifier|protected
name|Bits
name|getDocsWithField
parameter_list|(
name|AtomicReaderContext
name|context
parameter_list|,
name|String
name|field
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|FieldCache
operator|.
name|DEFAULT
operator|.
name|getDocsWithField
argument_list|(
name|context
operator|.
name|reader
argument_list|()
argument_list|,
name|field
argument_list|)
return|;
block|}
comment|/** Check whether the given value represents<tt>null</tt>. This can be        *  useful if the {@link BinaryDocValues} returned by {@link #getBinaryDocValues}        *  use a special value as a sentinel. The default implementation checks        *  {@link #getDocsWithField}.        *<p>NOTE: The null value can only be an EMPTY {@link BytesRef}. */
DECL|method|isNull
specifier|protected
name|boolean
name|isNull
parameter_list|(
name|int
name|doc
parameter_list|,
name|BytesRef
name|term
parameter_list|)
block|{
return|return
name|docsWithField
operator|!=
literal|null
operator|&&
name|docsWithField
operator|.
name|get
argument_list|(
name|doc
argument_list|)
operator|==
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|setNextReader
specifier|public
name|FieldComparator
argument_list|<
name|BytesRef
argument_list|>
name|setNextReader
parameter_list|(
name|AtomicReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|docTerms
operator|=
name|getBinaryDocValues
argument_list|(
name|context
argument_list|,
name|field
argument_list|)
expr_stmt|;
name|docsWithField
operator|=
name|getDocsWithField
argument_list|(
name|context
argument_list|,
name|field
argument_list|)
expr_stmt|;
if|if
condition|(
name|docsWithField
operator|instanceof
name|Bits
operator|.
name|MatchAllBits
condition|)
block|{
name|docsWithField
operator|=
literal|null
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|setBottom
specifier|public
name|void
name|setBottom
parameter_list|(
specifier|final
name|int
name|bottom
parameter_list|)
block|{
name|this
operator|.
name|bottom
operator|=
name|values
index|[
name|bottom
index|]
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setTopValue
specifier|public
name|void
name|setTopValue
parameter_list|(
name|BytesRef
name|value
parameter_list|)
block|{
comment|// null is fine: it means the last doc of the prior
comment|// search was missing this value
name|topValue
operator|=
name|value
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|value
specifier|public
name|BytesRef
name|value
parameter_list|(
name|int
name|slot
parameter_list|)
block|{
return|return
name|values
index|[
name|slot
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|compareValues
specifier|public
name|int
name|compareValues
parameter_list|(
name|BytesRef
name|val1
parameter_list|,
name|BytesRef
name|val2
parameter_list|)
block|{
comment|// missing always sorts first:
if|if
condition|(
name|val1
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|val2
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
return|return
name|missingSortCmp
return|;
block|}
elseif|else
if|if
condition|(
name|val2
operator|==
literal|null
condition|)
block|{
return|return
operator|-
name|missingSortCmp
return|;
block|}
return|return
name|val1
operator|.
name|compareTo
argument_list|(
name|val2
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|compareTop
specifier|public
name|int
name|compareTop
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
specifier|final
name|BytesRef
name|comparableBytes
init|=
name|getComparableBytes
argument_list|(
name|doc
argument_list|,
name|docTerms
operator|.
name|get
argument_list|(
name|doc
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|compareValues
argument_list|(
name|topValue
argument_list|,
name|comparableBytes
argument_list|)
return|;
block|}
comment|/**        * Given a document and a term, return the term itself if it exists or        *<tt>null</tt> otherwise.        */
DECL|method|getComparableBytes
specifier|private
name|BytesRef
name|getComparableBytes
parameter_list|(
name|int
name|doc
parameter_list|,
name|BytesRef
name|term
parameter_list|)
block|{
if|if
condition|(
name|term
operator|.
name|length
operator|==
literal|0
operator|&&
name|isNull
argument_list|(
name|doc
argument_list|,
name|term
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|term
return|;
block|}
block|}
block|}
end_class

end_unit

