begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.fielddata
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SortedSetDocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermsEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchIllegalStateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|plain
operator|.
name|BytesValuesWithOrdinalsTermsEnum
import|;
end_import

begin_comment
comment|/**  * A state-full lightweight per document set of<code>byte[]</code> values.  *  * To iterate over values in a document use the following pattern:  *<pre>  *   BytesValues values = ..;  *   final int numValues = values.setDocId(docId);  *   for (int i = 0; i< numValues; i++) {  *       BytesRef value = values.nextValue();  *       // process value  *   }  *</pre>  */
end_comment

begin_class
DECL|class|BytesValues
specifier|public
specifier|abstract
class|class
name|BytesValues
block|{
comment|/**      * An empty {@link BytesValues instance}      */
DECL|field|EMPTY
specifier|public
specifier|static
specifier|final
name|BytesValues
name|EMPTY
init|=
operator|new
name|Empty
argument_list|()
decl_stmt|;
DECL|field|multiValued
specifier|private
specifier|final
name|boolean
name|multiValued
decl_stmt|;
comment|/**      * Creates a new {@link BytesValues} instance      * @param multiValued<code>true</code> iff this instance is multivalued. Otherwise<code>false</code>.      */
DECL|method|BytesValues
specifier|protected
name|BytesValues
parameter_list|(
name|boolean
name|multiValued
parameter_list|)
block|{
name|this
operator|.
name|multiValued
operator|=
name|multiValued
expr_stmt|;
block|}
comment|/**      * Is one of the documents in this field data values is multi valued?      */
DECL|method|isMultiValued
specifier|public
specifier|final
name|boolean
name|isMultiValued
parameter_list|()
block|{
return|return
name|multiValued
return|;
block|}
comment|/**      * Sets iteration to the specified docID and returns the number of      * values for this document ID,      * @param docId document ID      *      * @see #nextValue()      */
DECL|method|setDocument
specifier|public
specifier|abstract
name|int
name|setDocument
parameter_list|(
name|int
name|docId
parameter_list|)
function_decl|;
comment|/**      * Returns the next value for the current docID set to {@link #setDocument(int)}.      * This method should only be called<tt>N</tt> times where<tt>N</tt> is the number      * returned from {@link #setDocument(int)}. If called more than<tt>N</tt> times the behavior      * is undefined. This interface guarantees that the values are returned in order.      *<p>      * If this instance returns ordered values the<tt>Nth</tt> value is strictly less than the<tt>N+1</tt> value with      * respect to the {@link AtomicFieldData.Order} returned from {@link #getOrder()}. If this instance returns      *<i>unordered</i> values {@link #getOrder()} must return {@link AtomicFieldData.Order#NONE}      * Note: the values returned are de-duplicated, only unique values are returned.      *</p>      *      * Note: the returned {@link BytesRef} might be shared across invocations.      *      * @return the next value for the current docID set to {@link #setDocument(int)}.      */
DECL|method|nextValue
specifier|public
specifier|abstract
name|BytesRef
name|nextValue
parameter_list|()
function_decl|;
comment|/**      * Returns the order the values are returned from {@link #nextValue()}.      *<p> Note: {@link BytesValues} have {@link AtomicFieldData.Order#BYTES} by default.</p>      */
DECL|method|getOrder
specifier|public
name|AtomicFieldData
operator|.
name|Order
name|getOrder
parameter_list|()
block|{
return|return
name|AtomicFieldData
operator|.
name|Order
operator|.
name|BYTES
return|;
block|}
comment|/**      * Ordinal based {@link BytesValues}.      */
DECL|class|WithOrdinals
specifier|public
specifier|static
specifier|abstract
class|class
name|WithOrdinals
extends|extends
name|BytesValues
block|{
DECL|field|MIN_ORDINAL
specifier|public
specifier|static
specifier|final
name|long
name|MIN_ORDINAL
init|=
literal|0
decl_stmt|;
DECL|field|MISSING_ORDINAL
specifier|public
specifier|static
specifier|final
name|long
name|MISSING_ORDINAL
init|=
name|SortedSetDocValues
operator|.
name|NO_MORE_ORDS
decl_stmt|;
DECL|method|WithOrdinals
specifier|protected
name|WithOrdinals
parameter_list|(
name|boolean
name|multiValued
parameter_list|)
block|{
name|super
argument_list|(
name|multiValued
argument_list|)
expr_stmt|;
block|}
comment|/**          * Returns total unique ord count;          */
DECL|method|getMaxOrd
specifier|public
specifier|abstract
name|long
name|getMaxOrd
parameter_list|()
function_decl|;
comment|/**          * The ordinal that maps to the relevant docId. If it has no value, returns          *<tt>0</tt>.          */
DECL|method|getOrd
specifier|public
specifier|abstract
name|long
name|getOrd
parameter_list|(
name|int
name|docId
parameter_list|)
function_decl|;
comment|/**          * Returns the next ordinal for the current docID set to {@link #setDocument(int)}.          * This method should only be called<tt>N</tt> times where<tt>N</tt> is the number          * returned from {@link #setDocument(int)}. If called more than<tt>N</tt> times the behavior          * is undefined.          *          * Note: This method will never return<tt>0</tt>.          *          * @return the next ordinal for the current docID set to {@link #setDocument(int)}.          */
DECL|method|nextOrd
specifier|public
specifier|abstract
name|long
name|nextOrd
parameter_list|()
function_decl|;
comment|/**          * Returns the value for the given ordinal.          * @param ord the ordinal to lookup.          * @return a shared {@link BytesRef} instance holding the value associated          *         with the given ordinal or<code>null</code> if ordinal is<tt>0</tt>          */
DECL|method|getValueByOrd
specifier|public
specifier|abstract
name|BytesRef
name|getValueByOrd
parameter_list|(
name|long
name|ord
parameter_list|)
function_decl|;
annotation|@
name|Override
DECL|method|nextValue
specifier|public
name|BytesRef
name|nextValue
parameter_list|()
block|{
return|return
name|getValueByOrd
argument_list|(
name|nextOrd
argument_list|()
argument_list|)
return|;
block|}
comment|/**          * Returns a terms enum to iterate over all the underlying values.          */
DECL|method|getTermsEnum
specifier|public
name|TermsEnum
name|getTermsEnum
parameter_list|()
block|{
return|return
operator|new
name|BytesValuesWithOrdinalsTermsEnum
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
comment|/**      * An empty {@link BytesValues} implementation      */
DECL|class|Empty
specifier|private
specifier|final
specifier|static
class|class
name|Empty
extends|extends
name|BytesValues
block|{
DECL|method|Empty
name|Empty
parameter_list|()
block|{
name|super
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setDocument
specifier|public
name|int
name|setDocument
parameter_list|(
name|int
name|docId
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|nextValue
specifier|public
name|BytesRef
name|nextValue
parameter_list|()
block|{
throw|throw
operator|new
name|ElasticsearchIllegalStateException
argument_list|(
literal|"Empty BytesValues has no next value"
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

