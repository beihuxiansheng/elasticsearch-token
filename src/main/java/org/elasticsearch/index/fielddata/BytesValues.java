begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.fielddata
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticSearchIllegalStateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|ordinals
operator|.
name|Ordinals
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|ordinals
operator|.
name|Ordinals
operator|.
name|Docs
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
DECL|class|BytesValues
specifier|public
specifier|abstract
class|class
name|BytesValues
block|{
DECL|field|EMPTY
specifier|public
specifier|static
specifier|final
name|BytesValues
name|EMPTY
init|=
operator|new
name|Empty
argument_list|()
decl_stmt|;
DECL|field|multiValued
specifier|private
name|boolean
name|multiValued
decl_stmt|;
DECL|field|scratch
specifier|protected
specifier|final
name|BytesRef
name|scratch
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
DECL|method|BytesValues
specifier|protected
name|BytesValues
parameter_list|(
name|boolean
name|multiValued
parameter_list|)
block|{
name|this
operator|.
name|multiValued
operator|=
name|multiValued
expr_stmt|;
block|}
comment|/**      * Is one of the documents in this field data values is multi valued?      */
DECL|method|isMultiValued
specifier|public
specifier|final
name|boolean
name|isMultiValued
parameter_list|()
block|{
return|return
name|multiValued
return|;
block|}
comment|/**      * Is there a value for this doc?      */
DECL|method|hasValue
specifier|public
specifier|abstract
name|boolean
name|hasValue
parameter_list|(
name|int
name|docId
parameter_list|)
function_decl|;
comment|/**      * Converts the provided bytes to "safe" ones from a "non" safe call made (if needed).      */
DECL|method|makeSafe
specifier|public
name|BytesRef
name|makeSafe
parameter_list|(
name|BytesRef
name|bytes
parameter_list|)
block|{
return|return
name|BytesRef
operator|.
name|deepCopyOf
argument_list|(
name|bytes
argument_list|)
return|;
block|}
comment|/**      * Returns a bytes value for a docId. Note, the content of it might be shared across invocation.      */
DECL|method|getValue
specifier|public
name|BytesRef
name|getValue
parameter_list|(
name|int
name|docId
parameter_list|)
block|{
if|if
condition|(
name|hasValue
argument_list|(
name|docId
argument_list|)
condition|)
block|{
return|return
name|getValueScratch
argument_list|(
name|docId
argument_list|,
name|scratch
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Returns the bytes value for the docId, with the provided "ret" which will be filled with the      * result which will also be returned. If there is no value for this docId, the length will be 0.      * Note, the bytes are not "safe".      */
DECL|method|getValueScratch
specifier|public
specifier|abstract
name|BytesRef
name|getValueScratch
parameter_list|(
name|int
name|docId
parameter_list|,
name|BytesRef
name|ret
parameter_list|)
function_decl|;
comment|/**      * Fills the given spare for the given doc ID and returns the hashcode of the reference as defined by      * {@link BytesRef#hashCode()}      */
DECL|method|getValueHashed
specifier|public
name|int
name|getValueHashed
parameter_list|(
name|int
name|docId
parameter_list|,
name|BytesRef
name|spare
parameter_list|)
block|{
return|return
name|getValueScratch
argument_list|(
name|docId
argument_list|,
name|spare
argument_list|)
operator|.
name|hashCode
argument_list|()
return|;
block|}
comment|/**      * Returns a bytes value iterator for a docId. Note, the content of it might be shared across invocation.      */
DECL|method|getIter
specifier|public
specifier|abstract
name|Iter
name|getIter
parameter_list|(
name|int
name|docId
parameter_list|)
function_decl|;
comment|// TODO: maybe this should return null for no values so we can safe one call?
DECL|interface|Iter
specifier|public
specifier|static
interface|interface
name|Iter
block|{
DECL|method|hasNext
name|boolean
name|hasNext
parameter_list|()
function_decl|;
DECL|method|next
name|BytesRef
name|next
parameter_list|()
function_decl|;
DECL|method|hash
name|int
name|hash
parameter_list|()
function_decl|;
DECL|class|Empty
specifier|public
specifier|static
class|class
name|Empty
implements|implements
name|Iter
block|{
DECL|field|INSTANCE
specifier|public
specifier|static
specifier|final
name|Empty
name|INSTANCE
init|=
operator|new
name|Empty
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|hasNext
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|next
specifier|public
name|BytesRef
name|next
parameter_list|()
block|{
throw|throw
operator|new
name|ElasticSearchIllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|hash
specifier|public
name|int
name|hash
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
block|}
DECL|class|Single
specifier|public
specifier|static
class|class
name|Single
implements|implements
name|Iter
block|{
DECL|field|value
specifier|protected
name|BytesRef
name|value
decl_stmt|;
DECL|field|ord
specifier|protected
name|int
name|ord
decl_stmt|;
DECL|field|done
specifier|protected
name|boolean
name|done
decl_stmt|;
DECL|method|reset
specifier|public
name|Single
name|reset
parameter_list|(
name|BytesRef
name|value
parameter_list|,
name|int
name|ord
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
name|this
operator|.
name|ord
operator|=
name|ord
expr_stmt|;
name|this
operator|.
name|done
operator|=
literal|false
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|hasNext
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
operator|!
name|done
return|;
block|}
annotation|@
name|Override
DECL|method|next
specifier|public
name|BytesRef
name|next
parameter_list|()
block|{
assert|assert
operator|!
name|done
assert|;
name|done
operator|=
literal|true
expr_stmt|;
return|return
name|value
return|;
block|}
DECL|method|hash
specifier|public
name|int
name|hash
parameter_list|()
block|{
return|return
name|value
operator|.
name|hashCode
argument_list|()
return|;
block|}
block|}
DECL|class|Multi
specifier|static
class|class
name|Multi
implements|implements
name|Iter
block|{
DECL|field|innerOrd
specifier|private
name|int
name|innerOrd
decl_stmt|;
DECL|field|ord
specifier|protected
name|int
name|ord
decl_stmt|;
DECL|field|withOrds
specifier|private
name|BytesValues
operator|.
name|WithOrdinals
name|withOrds
decl_stmt|;
DECL|field|ordsIter
specifier|private
name|Ordinals
operator|.
name|Docs
operator|.
name|Iter
name|ordsIter
decl_stmt|;
DECL|field|scratch
specifier|private
specifier|final
name|BytesRef
name|scratch
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
DECL|method|Multi
specifier|public
name|Multi
parameter_list|(
name|WithOrdinals
name|withOrds
parameter_list|)
block|{
name|this
operator|.
name|withOrds
operator|=
name|withOrds
expr_stmt|;
assert|assert
name|withOrds
operator|.
name|isMultiValued
argument_list|()
assert|;
block|}
DECL|method|reset
specifier|public
name|Multi
name|reset
parameter_list|(
name|Ordinals
operator|.
name|Docs
operator|.
name|Iter
name|ordsIter
parameter_list|)
block|{
name|this
operator|.
name|ordsIter
operator|=
name|ordsIter
expr_stmt|;
name|innerOrd
operator|=
name|ord
operator|=
name|ordsIter
operator|.
name|next
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|hasNext
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|innerOrd
operator|!=
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|next
specifier|public
name|BytesRef
name|next
parameter_list|()
block|{
name|withOrds
operator|.
name|getValueScratchByOrd
argument_list|(
name|innerOrd
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
name|ord
operator|=
name|innerOrd
expr_stmt|;
name|innerOrd
operator|=
name|ordsIter
operator|.
name|next
argument_list|()
expr_stmt|;
return|return
name|scratch
return|;
block|}
DECL|method|hash
specifier|public
name|int
name|hash
parameter_list|()
block|{
return|return
name|scratch
operator|.
name|hashCode
argument_list|()
return|;
block|}
block|}
block|}
DECL|class|Empty
specifier|public
specifier|static
class|class
name|Empty
extends|extends
name|BytesValues
block|{
DECL|method|Empty
specifier|public
name|Empty
parameter_list|()
block|{
name|super
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hasValue
specifier|public
name|boolean
name|hasValue
parameter_list|(
name|int
name|docId
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|getIter
specifier|public
name|Iter
name|getIter
parameter_list|(
name|int
name|docId
parameter_list|)
block|{
return|return
name|Iter
operator|.
name|Empty
operator|.
name|INSTANCE
return|;
block|}
annotation|@
name|Override
DECL|method|getValueScratch
specifier|public
name|BytesRef
name|getValueScratch
parameter_list|(
name|int
name|docId
parameter_list|,
name|BytesRef
name|ret
parameter_list|)
block|{
name|ret
operator|.
name|length
operator|=
literal|0
expr_stmt|;
return|return
name|ret
return|;
block|}
block|}
comment|/**      * Bytes values that are based on ordinals.      */
DECL|class|WithOrdinals
specifier|public
specifier|static
specifier|abstract
class|class
name|WithOrdinals
extends|extends
name|BytesValues
block|{
DECL|field|ordinals
specifier|protected
specifier|final
name|Docs
name|ordinals
decl_stmt|;
DECL|method|WithOrdinals
specifier|protected
name|WithOrdinals
parameter_list|(
name|Ordinals
operator|.
name|Docs
name|ordinals
parameter_list|)
block|{
name|super
argument_list|(
name|ordinals
operator|.
name|isMultiValued
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|ordinals
operator|=
name|ordinals
expr_stmt|;
block|}
DECL|method|ordinals
specifier|public
name|Ordinals
operator|.
name|Docs
name|ordinals
parameter_list|()
block|{
return|return
name|ordinals
return|;
block|}
DECL|method|getValueByOrd
specifier|public
name|BytesRef
name|getValueByOrd
parameter_list|(
name|int
name|ord
parameter_list|)
block|{
return|return
name|getValueScratchByOrd
argument_list|(
name|ord
argument_list|,
name|scratch
argument_list|)
return|;
block|}
DECL|method|newMultiIter
specifier|protected
name|Iter
operator|.
name|Multi
name|newMultiIter
parameter_list|()
block|{
assert|assert
name|this
operator|.
name|isMultiValued
argument_list|()
assert|;
return|return
operator|new
name|Iter
operator|.
name|Multi
argument_list|(
name|this
argument_list|)
return|;
block|}
DECL|method|newSingleIter
specifier|protected
name|Iter
operator|.
name|Single
name|newSingleIter
parameter_list|()
block|{
assert|assert
operator|!
name|this
operator|.
name|isMultiValued
argument_list|()
assert|;
return|return
operator|new
name|Iter
operator|.
name|Single
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|hasValue
specifier|public
name|boolean
name|hasValue
parameter_list|(
name|int
name|docId
parameter_list|)
block|{
return|return
name|ordinals
operator|.
name|getOrd
argument_list|(
name|docId
argument_list|)
operator|!=
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|getValue
specifier|public
name|BytesRef
name|getValue
parameter_list|(
name|int
name|docId
parameter_list|)
block|{
specifier|final
name|int
name|ord
init|=
name|ordinals
operator|.
name|getOrd
argument_list|(
name|docId
argument_list|)
decl_stmt|;
if|if
condition|(
name|ord
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|getValueScratchByOrd
argument_list|(
name|ord
argument_list|,
name|scratch
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getValueScratch
specifier|public
name|BytesRef
name|getValueScratch
parameter_list|(
name|int
name|docId
parameter_list|,
name|BytesRef
name|ret
parameter_list|)
block|{
return|return
name|getValueScratchByOrd
argument_list|(
name|ordinals
operator|.
name|getOrd
argument_list|(
name|docId
argument_list|)
argument_list|,
name|ret
argument_list|)
return|;
block|}
DECL|method|getSafeValueByOrd
specifier|public
name|BytesRef
name|getSafeValueByOrd
parameter_list|(
name|int
name|ord
parameter_list|)
block|{
return|return
name|getValueScratchByOrd
argument_list|(
name|ord
argument_list|,
operator|new
name|BytesRef
argument_list|()
argument_list|)
return|;
block|}
comment|/**          * Returns the bytes value for the docId, with the provided "ret" which will be filled with the          * result which will also be returned. If there is no value for this docId, the length will be 0.          * Note, the bytes are not "safe".          */
DECL|method|getValueScratchByOrd
specifier|public
specifier|abstract
name|BytesRef
name|getValueScratchByOrd
parameter_list|(
name|int
name|ord
parameter_list|,
name|BytesRef
name|ret
parameter_list|)
function_decl|;
DECL|class|Empty
specifier|public
specifier|static
class|class
name|Empty
extends|extends
name|WithOrdinals
block|{
DECL|method|Empty
specifier|public
name|Empty
parameter_list|(
name|Ordinals
operator|.
name|Docs
name|ordinals
parameter_list|)
block|{
name|super
argument_list|(
name|ordinals
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getValueScratchByOrd
specifier|public
name|BytesRef
name|getValueScratchByOrd
parameter_list|(
name|int
name|ord
parameter_list|,
name|BytesRef
name|ret
parameter_list|)
block|{
name|ret
operator|.
name|length
operator|=
literal|0
expr_stmt|;
return|return
name|ret
return|;
block|}
annotation|@
name|Override
DECL|method|getIter
specifier|public
name|Iter
name|getIter
parameter_list|(
name|int
name|docId
parameter_list|)
block|{
return|return
name|Iter
operator|.
name|Empty
operator|.
name|INSTANCE
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

