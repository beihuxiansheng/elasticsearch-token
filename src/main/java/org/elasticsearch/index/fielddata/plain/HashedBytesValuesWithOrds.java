begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.fielddata.plain
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|plain
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|HashedBytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|ordinals
operator|.
name|Ordinals
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|plain
operator|.
name|FSTPackedBytesAtomicFieldData
operator|.
name|BytesValues
import|;
end_import

begin_comment
comment|/**  * shared utils class - should be factored into HashedBytesValues  */
end_comment

begin_class
DECL|class|HashedBytesValuesWithOrds
specifier|abstract
class|class
name|HashedBytesValuesWithOrds
implements|implements
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|HashedBytesValues
operator|.
name|WithOrdinals
block|{
DECL|field|hashes
specifier|protected
specifier|final
name|int
index|[]
name|hashes
decl_stmt|;
DECL|field|ordinals
specifier|protected
specifier|final
name|Ordinals
operator|.
name|Docs
name|ordinals
decl_stmt|;
DECL|field|scratch1
specifier|protected
specifier|final
name|BytesRef
name|scratch1
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
DECL|field|scratch
specifier|protected
specifier|final
name|HashedBytesRef
name|scratch
init|=
operator|new
name|HashedBytesRef
argument_list|()
decl_stmt|;
DECL|field|withOrds
specifier|protected
specifier|final
name|BytesValues
operator|.
name|WithOrdinals
name|withOrds
decl_stmt|;
DECL|method|HashedBytesValuesWithOrds
name|HashedBytesValuesWithOrds
parameter_list|(
name|BytesValues
operator|.
name|WithOrdinals
name|withOrds
parameter_list|,
name|int
index|[]
name|hashes
parameter_list|)
block|{
name|this
operator|.
name|hashes
operator|=
name|hashes
expr_stmt|;
name|this
operator|.
name|ordinals
operator|=
name|withOrds
operator|.
name|ordinals
argument_list|()
expr_stmt|;
name|this
operator|.
name|withOrds
operator|=
name|withOrds
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isMultiValued
specifier|public
name|boolean
name|isMultiValued
parameter_list|()
block|{
return|return
name|withOrds
operator|.
name|isMultiValued
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|forEachValueInDoc
specifier|public
name|void
name|forEachValueInDoc
parameter_list|(
name|int
name|docId
parameter_list|,
name|ValueInDocProc
name|proc
parameter_list|)
block|{
name|int
name|ord
init|=
name|ordinals
operator|.
name|getOrd
argument_list|(
name|docId
argument_list|)
decl_stmt|;
if|if
condition|(
name|ord
operator|==
literal|0
condition|)
block|{
name|proc
operator|.
name|onMissing
argument_list|(
name|docId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|proc
operator|.
name|onValue
argument_list|(
name|docId
argument_list|,
name|scratch
operator|.
name|reset
argument_list|(
name|withOrds
operator|.
name|getValueScratchByOrd
argument_list|(
name|ord
argument_list|,
name|scratch1
argument_list|)
argument_list|,
name|hashes
index|[
name|ord
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|forEachValueInDocMulti
specifier|protected
specifier|final
name|void
name|forEachValueInDocMulti
parameter_list|(
name|int
name|docId
parameter_list|,
name|ValueInDocProc
name|proc
parameter_list|)
block|{
name|Ordinals
operator|.
name|Docs
operator|.
name|Iter
name|iter
init|=
name|ordinals
operator|.
name|getIter
argument_list|(
name|docId
argument_list|)
decl_stmt|;
name|int
name|ord
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|ord
operator|==
literal|0
condition|)
block|{
name|proc
operator|.
name|onMissing
argument_list|(
name|docId
argument_list|)
expr_stmt|;
return|return;
block|}
do|do
block|{
name|proc
operator|.
name|onValue
argument_list|(
name|docId
argument_list|,
name|scratch
operator|.
name|reset
argument_list|(
name|withOrds
operator|.
name|getValueScratchByOrd
argument_list|(
name|ord
argument_list|,
name|scratch1
argument_list|)
argument_list|,
name|hashes
index|[
name|ord
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
operator|(
name|ord
operator|=
name|iter
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|0
condition|)
do|;
block|}
annotation|@
name|Override
DECL|method|ordinals
specifier|public
name|Ordinals
operator|.
name|Docs
name|ordinals
parameter_list|()
block|{
return|return
name|this
operator|.
name|ordinals
return|;
block|}
annotation|@
name|Override
DECL|method|getValueByOrd
specifier|public
name|HashedBytesRef
name|getValueByOrd
parameter_list|(
name|int
name|ord
parameter_list|)
block|{
return|return
name|scratch
operator|.
name|reset
argument_list|(
name|withOrds
operator|.
name|getValueScratchByOrd
argument_list|(
name|ord
argument_list|,
name|scratch1
argument_list|)
argument_list|,
name|hashes
index|[
name|ord
index|]
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getSafeValueByOrd
specifier|public
name|HashedBytesRef
name|getSafeValueByOrd
parameter_list|(
name|int
name|ord
parameter_list|)
block|{
return|return
operator|new
name|HashedBytesRef
argument_list|(
name|withOrds
operator|.
name|getValueScratchByOrd
argument_list|(
name|ord
argument_list|,
name|scratch1
argument_list|)
argument_list|,
name|hashes
index|[
name|ord
index|]
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hasValue
specifier|public
name|boolean
name|hasValue
parameter_list|(
name|int
name|docId
parameter_list|)
block|{
return|return
name|ordinals
operator|.
name|getOrd
argument_list|(
name|docId
argument_list|)
operator|!=
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|makeSafe
specifier|public
name|HashedBytesRef
name|makeSafe
parameter_list|(
name|HashedBytesRef
name|bytes
parameter_list|)
block|{
return|return
operator|new
name|HashedBytesRef
argument_list|(
name|BytesRef
operator|.
name|deepCopyOf
argument_list|(
name|bytes
operator|.
name|bytes
argument_list|)
argument_list|,
name|bytes
operator|.
name|hash
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getValue
specifier|public
name|HashedBytesRef
name|getValue
parameter_list|(
name|int
name|docId
parameter_list|)
block|{
name|int
name|ord
init|=
name|ordinals
operator|.
name|getOrd
argument_list|(
name|docId
argument_list|)
decl_stmt|;
if|if
condition|(
name|ord
operator|==
literal|0
condition|)
return|return
literal|null
return|;
return|return
name|scratch
operator|.
name|reset
argument_list|(
name|withOrds
operator|.
name|getValueScratchByOrd
argument_list|(
name|ord
argument_list|,
name|scratch1
argument_list|)
argument_list|,
name|hashes
index|[
name|ord
index|]
argument_list|)
return|;
block|}
DECL|class|Single
specifier|final
specifier|static
class|class
name|Single
extends|extends
name|HashedBytesValuesWithOrds
block|{
DECL|field|iter
specifier|private
specifier|final
name|Iter
operator|.
name|Single
name|iter
init|=
operator|new
name|Iter
operator|.
name|Single
argument_list|()
decl_stmt|;
DECL|method|Single
name|Single
parameter_list|(
name|BytesValues
operator|.
name|WithOrdinals
name|withOrds
parameter_list|,
name|int
index|[]
name|hashes
parameter_list|)
block|{
name|super
argument_list|(
name|withOrds
argument_list|,
name|hashes
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getIter
specifier|public
name|Iter
name|getIter
parameter_list|(
name|int
name|docId
parameter_list|)
block|{
name|int
name|ord
init|=
name|ordinals
operator|.
name|getOrd
argument_list|(
name|docId
argument_list|)
decl_stmt|;
if|if
condition|(
name|ord
operator|==
literal|0
condition|)
return|return
name|Iter
operator|.
name|Empty
operator|.
name|INSTANCE
return|;
return|return
name|iter
operator|.
name|reset
argument_list|(
name|scratch
operator|.
name|reset
argument_list|(
name|withOrds
operator|.
name|getValueScratchByOrd
argument_list|(
name|ord
argument_list|,
name|scratch1
argument_list|)
argument_list|,
name|hashes
index|[
name|ord
index|]
argument_list|)
argument_list|)
return|;
block|}
block|}
DECL|class|Multi
specifier|final
specifier|static
class|class
name|Multi
extends|extends
name|HashedBytesValuesWithOrds
block|{
DECL|field|iter
specifier|private
specifier|final
name|HashedBytesValuesWithOrds
operator|.
name|Multi
operator|.
name|MultiIter
name|iter
decl_stmt|;
DECL|method|Multi
name|Multi
parameter_list|(
name|BytesValues
operator|.
name|WithOrdinals
name|withOrds
parameter_list|,
name|int
index|[]
name|hashes
parameter_list|)
block|{
name|super
argument_list|(
name|withOrds
argument_list|,
name|hashes
argument_list|)
expr_stmt|;
name|this
operator|.
name|iter
operator|=
operator|new
name|MultiIter
argument_list|(
name|withOrds
argument_list|,
name|hashes
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isMultiValued
specifier|public
name|boolean
name|isMultiValued
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|getIter
specifier|public
name|Iter
name|getIter
parameter_list|(
name|int
name|docId
parameter_list|)
block|{
return|return
name|iter
operator|.
name|reset
argument_list|(
name|ordinals
operator|.
name|getIter
argument_list|(
name|docId
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|forEachValueInDoc
specifier|public
name|void
name|forEachValueInDoc
parameter_list|(
name|int
name|docId
parameter_list|,
name|ValueInDocProc
name|proc
parameter_list|)
block|{
name|forEachValueInDocMulti
argument_list|(
name|docId
argument_list|,
name|proc
argument_list|)
expr_stmt|;
block|}
DECL|class|MultiIter
specifier|final
specifier|static
class|class
name|MultiIter
implements|implements
name|Iter
block|{
DECL|field|hashes
specifier|private
specifier|final
name|int
index|[]
name|hashes
decl_stmt|;
DECL|field|ordsIter
specifier|private
name|Ordinals
operator|.
name|Docs
operator|.
name|Iter
name|ordsIter
decl_stmt|;
DECL|field|ord
specifier|private
name|int
name|ord
decl_stmt|;
DECL|field|scratch1
specifier|private
specifier|final
name|BytesRef
name|scratch1
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
DECL|field|scratch
specifier|private
specifier|final
name|HashedBytesRef
name|scratch
init|=
operator|new
name|HashedBytesRef
argument_list|()
decl_stmt|;
DECL|field|withOrds
specifier|private
specifier|final
name|BytesValues
operator|.
name|WithOrdinals
name|withOrds
decl_stmt|;
DECL|method|MultiIter
name|MultiIter
parameter_list|(
name|BytesValues
operator|.
name|WithOrdinals
name|withOrds
parameter_list|,
name|int
index|[]
name|hashes
parameter_list|)
block|{
name|this
operator|.
name|hashes
operator|=
name|hashes
expr_stmt|;
name|this
operator|.
name|withOrds
operator|=
name|withOrds
expr_stmt|;
block|}
DECL|method|reset
specifier|public
name|HashedBytesValuesWithOrds
operator|.
name|Multi
operator|.
name|MultiIter
name|reset
parameter_list|(
name|Ordinals
operator|.
name|Docs
operator|.
name|Iter
name|ordsIter
parameter_list|)
block|{
name|this
operator|.
name|ordsIter
operator|=
name|ordsIter
expr_stmt|;
name|this
operator|.
name|ord
operator|=
name|ordsIter
operator|.
name|next
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|hasNext
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|ord
operator|!=
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|next
specifier|public
name|HashedBytesRef
name|next
parameter_list|()
block|{
name|HashedBytesRef
name|value
init|=
name|scratch
operator|.
name|reset
argument_list|(
name|withOrds
operator|.
name|getValueScratchByOrd
argument_list|(
name|ord
argument_list|,
name|scratch1
argument_list|)
argument_list|,
name|hashes
index|[
name|ord
index|]
argument_list|)
decl_stmt|;
name|ord
operator|=
name|ordsIter
operator|.
name|next
argument_list|()
expr_stmt|;
return|return
name|value
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

