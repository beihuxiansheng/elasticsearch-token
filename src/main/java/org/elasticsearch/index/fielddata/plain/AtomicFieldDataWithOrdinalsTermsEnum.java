begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.fielddata.plain
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|plain
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocsAndPositionsEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocsEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermsEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Bits
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|AtomicFieldData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|BytesValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|ordinals
operator|.
name|Ordinals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_comment
comment|/**  * A general {@link org.apache.lucene.index.TermsEnum} to iterate over terms from a {@link AtomicFieldData.WithOrdinals}  * instance.  */
end_comment

begin_class
DECL|class|AtomicFieldDataWithOrdinalsTermsEnum
specifier|public
class|class
name|AtomicFieldDataWithOrdinalsTermsEnum
extends|extends
name|TermsEnum
block|{
DECL|field|bytesValues
specifier|private
specifier|final
name|BytesValues
operator|.
name|WithOrdinals
name|bytesValues
decl_stmt|;
DECL|field|ordinals
specifier|private
specifier|final
name|Ordinals
operator|.
name|Docs
name|ordinals
decl_stmt|;
DECL|field|maxOrd
specifier|private
specifier|final
name|long
name|maxOrd
decl_stmt|;
DECL|field|currentOrd
specifier|private
name|long
name|currentOrd
init|=
name|Ordinals
operator|.
name|MISSING_ORDINAL
decl_stmt|;
DECL|field|currentTerm
specifier|private
name|BytesRef
name|currentTerm
decl_stmt|;
DECL|method|AtomicFieldDataWithOrdinalsTermsEnum
specifier|public
name|AtomicFieldDataWithOrdinalsTermsEnum
parameter_list|(
name|AtomicFieldData
operator|.
name|WithOrdinals
name|afd
parameter_list|)
block|{
name|this
operator|.
name|bytesValues
operator|=
name|afd
operator|.
name|getBytesValues
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|ordinals
operator|=
name|bytesValues
operator|.
name|ordinals
argument_list|()
expr_stmt|;
name|this
operator|.
name|maxOrd
operator|=
name|ordinals
operator|.
name|getMaxOrd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|seekCeil
specifier|public
name|SeekStatus
name|seekCeil
parameter_list|(
name|BytesRef
name|text
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|ord
init|=
name|binarySearch
argument_list|(
name|bytesValues
argument_list|,
name|text
argument_list|)
decl_stmt|;
if|if
condition|(
name|ord
operator|>=
literal|0
condition|)
block|{
name|currentOrd
operator|=
name|ord
expr_stmt|;
name|currentTerm
operator|=
name|bytesValues
operator|.
name|getValueByOrd
argument_list|(
name|currentOrd
argument_list|)
expr_stmt|;
return|return
name|SeekStatus
operator|.
name|FOUND
return|;
block|}
else|else
block|{
name|currentOrd
operator|=
operator|-
name|ord
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|ord
operator|>=
name|maxOrd
condition|)
block|{
return|return
name|SeekStatus
operator|.
name|END
return|;
block|}
else|else
block|{
name|currentTerm
operator|=
name|bytesValues
operator|.
name|getValueByOrd
argument_list|(
name|currentOrd
argument_list|)
expr_stmt|;
return|return
name|SeekStatus
operator|.
name|NOT_FOUND
return|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|seekExact
specifier|public
name|void
name|seekExact
parameter_list|(
name|long
name|ord
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|ord
operator|>=
literal|0
operator|&&
name|ord
operator|<
name|ordinals
operator|.
name|getMaxOrd
argument_list|()
assert|;
name|currentOrd
operator|=
name|ord
expr_stmt|;
if|if
condition|(
name|currentOrd
operator|==
name|Ordinals
operator|.
name|MISSING_ORDINAL
condition|)
block|{
name|currentTerm
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|currentTerm
operator|=
name|bytesValues
operator|.
name|getValueByOrd
argument_list|(
name|currentOrd
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|term
specifier|public
name|BytesRef
name|term
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|currentTerm
return|;
block|}
annotation|@
name|Override
DECL|method|ord
specifier|public
name|long
name|ord
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|currentOrd
return|;
block|}
annotation|@
name|Override
DECL|method|docFreq
specifier|public
name|int
name|docFreq
parameter_list|()
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"docFreq not supported"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|totalTermFreq
specifier|public
name|long
name|totalTermFreq
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
DECL|method|docs
specifier|public
name|DocsEnum
name|docs
parameter_list|(
name|Bits
name|liveDocs
parameter_list|,
name|DocsEnum
name|reuse
parameter_list|,
name|int
name|flags
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"docs not supported"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|docsAndPositions
specifier|public
name|DocsAndPositionsEnum
name|docsAndPositions
parameter_list|(
name|Bits
name|liveDocs
parameter_list|,
name|DocsAndPositionsEnum
name|reuse
parameter_list|,
name|int
name|flags
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"docsAndPositions not supported"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|next
specifier|public
name|BytesRef
name|next
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|++
name|currentOrd
operator|<
name|maxOrd
condition|)
block|{
return|return
name|currentTerm
operator|=
name|bytesValues
operator|.
name|getValueByOrd
argument_list|(
name|currentOrd
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getComparator
specifier|public
name|Comparator
argument_list|<
name|BytesRef
argument_list|>
name|getComparator
parameter_list|()
block|{
return|return
name|BytesRef
operator|.
name|getUTF8SortedAsUnicodeComparator
argument_list|()
return|;
block|}
DECL|method|binarySearch
specifier|final
specifier|private
specifier|static
name|long
name|binarySearch
parameter_list|(
name|BytesValues
operator|.
name|WithOrdinals
name|a
parameter_list|,
name|BytesRef
name|key
parameter_list|)
block|{
name|long
name|low
init|=
literal|1
decl_stmt|;
name|long
name|high
init|=
name|a
operator|.
name|ordinals
argument_list|()
operator|.
name|getMaxOrd
argument_list|()
decl_stmt|;
while|while
condition|(
name|low
operator|<=
name|high
condition|)
block|{
name|long
name|mid
init|=
operator|(
name|low
operator|+
name|high
operator|)
operator|>>>
literal|1
decl_stmt|;
name|BytesRef
name|midVal
init|=
name|a
operator|.
name|getValueByOrd
argument_list|(
name|mid
argument_list|)
decl_stmt|;
name|int
name|cmp
decl_stmt|;
if|if
condition|(
name|midVal
operator|!=
literal|null
condition|)
block|{
name|cmp
operator|=
name|midVal
operator|.
name|compareTo
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cmp
operator|=
operator|-
literal|1
expr_stmt|;
block|}
if|if
condition|(
name|cmp
operator|<
literal|0
condition|)
name|low
operator|=
name|mid
operator|+
literal|1
expr_stmt|;
elseif|else
if|if
condition|(
name|cmp
operator|>
literal|0
condition|)
name|high
operator|=
name|mid
operator|-
literal|1
expr_stmt|;
else|else
return|return
name|mid
return|;
block|}
return|return
operator|-
operator|(
name|low
operator|+
literal|1
operator|)
return|;
block|}
block|}
end_class

end_unit

