begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.fielddata.plain
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|plain
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|BinaryDocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|geo
operator|.
name|GeoPoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|ByteUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|AtomicGeoPointFieldData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|GeoPointValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|ScriptDocValues
import|;
end_import

begin_class
DECL|class|GeoPointBinaryDVAtomicFieldData
specifier|final
class|class
name|GeoPointBinaryDVAtomicFieldData
extends|extends
name|AtomicGeoPointFieldData
argument_list|<
name|ScriptDocValues
argument_list|>
block|{
DECL|field|values
specifier|private
specifier|final
name|BinaryDocValues
name|values
decl_stmt|;
DECL|method|GeoPointBinaryDVAtomicFieldData
name|GeoPointBinaryDVAtomicFieldData
parameter_list|(
name|BinaryDocValues
name|values
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|values
operator|=
name|values
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|ramBytesUsed
specifier|public
name|long
name|ramBytesUsed
parameter_list|()
block|{
return|return
operator|-
literal|1
return|;
comment|// not exposed by Lucene
block|}
annotation|@
name|Override
DECL|method|getScriptValues
specifier|public
name|ScriptDocValues
name|getScriptValues
parameter_list|()
block|{
return|return
operator|new
name|ScriptDocValues
operator|.
name|GeoPoints
argument_list|(
name|getGeoPointValues
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
comment|// no-op
block|}
annotation|@
name|Override
DECL|method|getGeoPointValues
specifier|public
name|GeoPointValues
name|getGeoPointValues
parameter_list|()
block|{
return|return
operator|new
name|GeoPointValues
argument_list|(
literal|true
argument_list|)
block|{
name|BytesRef
name|bytes
decl_stmt|;
name|int
name|i
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
name|int
name|valueCount
init|=
literal|0
decl_stmt|;
specifier|final
name|GeoPoint
name|point
init|=
operator|new
name|GeoPoint
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|int
name|setDocument
parameter_list|(
name|int
name|docId
parameter_list|)
block|{
name|bytes
operator|=
name|values
operator|.
name|get
argument_list|(
name|docId
argument_list|)
expr_stmt|;
assert|assert
name|bytes
operator|.
name|length
operator|%
literal|16
operator|==
literal|0
assert|;
name|i
operator|=
literal|0
expr_stmt|;
return|return
name|valueCount
operator|=
operator|(
name|bytes
operator|.
name|length
operator|>>>
literal|4
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|GeoPoint
name|nextValue
parameter_list|()
block|{
assert|assert
name|i
operator|<
literal|2
operator|*
name|valueCount
assert|;
specifier|final
name|double
name|lat
init|=
name|ByteUtils
operator|.
name|readDoubleLE
argument_list|(
name|bytes
operator|.
name|bytes
argument_list|,
name|bytes
operator|.
name|offset
operator|+
name|i
operator|++
operator|*
literal|8
argument_list|)
decl_stmt|;
specifier|final
name|double
name|lon
init|=
name|ByteUtils
operator|.
name|readDoubleLE
argument_list|(
name|bytes
operator|.
name|bytes
argument_list|,
name|bytes
operator|.
name|offset
operator|+
name|i
operator|++
operator|*
literal|8
argument_list|)
decl_stmt|;
return|return
name|point
operator|.
name|reset
argument_list|(
name|lat
argument_list|,
name|lon
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

