begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.fielddata.plain
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|plain
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|FixedBitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|RamUsage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|ordinals
operator|.
name|Ordinals
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|util
operator|.
name|DoubleArrayRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|util
operator|.
name|IntArrayRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|util
operator|.
name|LongArrayRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|util
operator|.
name|StringArrayRef
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
DECL|class|LongArrayAtomicFieldData
specifier|public
specifier|abstract
class|class
name|LongArrayAtomicFieldData
implements|implements
name|AtomicNumericFieldData
block|{
DECL|field|values
specifier|protected
specifier|final
name|long
index|[]
name|values
decl_stmt|;
DECL|field|numDocs
specifier|private
specifier|final
name|int
name|numDocs
decl_stmt|;
DECL|field|size
specifier|protected
name|long
name|size
init|=
operator|-
literal|1
decl_stmt|;
DECL|method|LongArrayAtomicFieldData
specifier|public
name|LongArrayAtomicFieldData
parameter_list|(
name|long
index|[]
name|values
parameter_list|,
name|int
name|numDocs
parameter_list|)
block|{
name|this
operator|.
name|values
operator|=
name|values
expr_stmt|;
name|this
operator|.
name|numDocs
operator|=
name|numDocs
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getNumDocs
specifier|public
name|int
name|getNumDocs
parameter_list|()
block|{
return|return
name|numDocs
return|;
block|}
DECL|class|WithOrdinals
specifier|public
specifier|static
class|class
name|WithOrdinals
extends|extends
name|LongArrayAtomicFieldData
block|{
DECL|field|ordinals
specifier|private
specifier|final
name|Ordinals
name|ordinals
decl_stmt|;
DECL|method|WithOrdinals
specifier|public
name|WithOrdinals
parameter_list|(
name|long
index|[]
name|values
parameter_list|,
name|int
name|numDocs
parameter_list|,
name|Ordinals
name|ordinals
parameter_list|)
block|{
name|super
argument_list|(
name|values
argument_list|,
name|numDocs
argument_list|)
expr_stmt|;
name|this
operator|.
name|ordinals
operator|=
name|ordinals
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isMultiValued
specifier|public
name|boolean
name|isMultiValued
parameter_list|()
block|{
return|return
name|ordinals
operator|.
name|isMultiValued
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|isValuesOrdered
specifier|public
name|boolean
name|isValuesOrdered
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|getMemorySizeInBytes
specifier|public
name|long
name|getMemorySizeInBytes
parameter_list|()
block|{
if|if
condition|(
name|size
operator|==
operator|-
literal|1
condition|)
block|{
name|size
operator|=
name|RamUsage
operator|.
name|NUM_BYTES_INT
comment|/*size*/
operator|+
name|RamUsage
operator|.
name|NUM_BYTES_INT
comment|/*numDocs*/
operator|+
operator|+
name|RamUsage
operator|.
name|NUM_BYTES_ARRAY_HEADER
operator|+
operator|(
name|values
operator|.
name|length
operator|*
name|RamUsage
operator|.
name|NUM_BYTES_DOUBLE
operator|)
operator|+
name|ordinals
operator|.
name|getMemorySizeInBytes
argument_list|()
expr_stmt|;
block|}
return|return
name|size
return|;
block|}
annotation|@
name|Override
DECL|method|getBytesValues
specifier|public
name|BytesValues
name|getBytesValues
parameter_list|()
block|{
return|return
operator|new
name|BytesValues
operator|.
name|StringBased
argument_list|(
name|getStringValues
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getHashedBytesValues
specifier|public
name|HashedBytesValues
name|getHashedBytesValues
parameter_list|()
block|{
return|return
operator|new
name|HashedBytesValues
operator|.
name|StringBased
argument_list|(
name|getStringValues
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getStringValues
specifier|public
name|StringValues
name|getStringValues
parameter_list|()
block|{
return|return
operator|new
name|StringValues
argument_list|(
name|values
argument_list|,
name|ordinals
operator|.
name|ordinals
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getScriptValues
specifier|public
name|ScriptDocValues
name|getScriptValues
parameter_list|()
block|{
return|return
operator|new
name|ScriptDocValues
operator|.
name|NumericDouble
argument_list|(
name|getDoubleValues
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getByteValues
specifier|public
name|ByteValues
name|getByteValues
parameter_list|()
block|{
return|return
operator|new
name|ByteValues
operator|.
name|LongBased
argument_list|(
name|getLongValues
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getShortValues
specifier|public
name|ShortValues
name|getShortValues
parameter_list|()
block|{
return|return
operator|new
name|ShortValues
operator|.
name|LongBased
argument_list|(
name|getLongValues
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getIntValues
specifier|public
name|IntValues
name|getIntValues
parameter_list|()
block|{
return|return
operator|new
name|IntValues
operator|.
name|LongBased
argument_list|(
name|getLongValues
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getLongValues
specifier|public
name|LongValues
name|getLongValues
parameter_list|()
block|{
return|return
operator|new
name|LongValues
argument_list|(
name|values
argument_list|,
name|ordinals
operator|.
name|ordinals
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getFloatValues
specifier|public
name|FloatValues
name|getFloatValues
parameter_list|()
block|{
return|return
operator|new
name|FloatValues
operator|.
name|DoubleBased
argument_list|(
name|getDoubleValues
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getDoubleValues
specifier|public
name|DoubleValues
name|getDoubleValues
parameter_list|()
block|{
return|return
operator|new
name|DoubleValues
argument_list|(
name|values
argument_list|,
name|ordinals
operator|.
name|ordinals
argument_list|()
argument_list|)
return|;
block|}
DECL|class|StringValues
specifier|static
class|class
name|StringValues
implements|implements
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|StringValues
block|{
DECL|field|values
specifier|private
specifier|final
name|long
index|[]
name|values
decl_stmt|;
DECL|field|ordinals
specifier|private
specifier|final
name|Ordinals
operator|.
name|Docs
name|ordinals
decl_stmt|;
DECL|field|arrayScratch
specifier|private
specifier|final
name|StringArrayRef
name|arrayScratch
init|=
operator|new
name|StringArrayRef
argument_list|(
operator|new
name|String
index|[
literal|1
index|]
argument_list|,
literal|1
argument_list|)
decl_stmt|;
DECL|field|valuesIter
specifier|private
specifier|final
name|ValuesIter
name|valuesIter
decl_stmt|;
DECL|method|StringValues
name|StringValues
parameter_list|(
name|long
index|[]
name|values
parameter_list|,
name|Ordinals
operator|.
name|Docs
name|ordinals
parameter_list|)
block|{
name|this
operator|.
name|values
operator|=
name|values
expr_stmt|;
name|this
operator|.
name|ordinals
operator|=
name|ordinals
expr_stmt|;
name|this
operator|.
name|valuesIter
operator|=
operator|new
name|ValuesIter
argument_list|(
name|values
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hasValue
specifier|public
name|boolean
name|hasValue
parameter_list|(
name|int
name|docId
parameter_list|)
block|{
return|return
name|ordinals
operator|.
name|getOrd
argument_list|(
name|docId
argument_list|)
operator|!=
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|isMultiValued
specifier|public
name|boolean
name|isMultiValued
parameter_list|()
block|{
return|return
name|ordinals
operator|.
name|isMultiValued
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getValue
specifier|public
name|String
name|getValue
parameter_list|(
name|int
name|docId
parameter_list|)
block|{
name|int
name|ord
init|=
name|ordinals
operator|.
name|getOrd
argument_list|(
name|docId
argument_list|)
decl_stmt|;
if|if
condition|(
name|ord
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|Long
operator|.
name|toString
argument_list|(
name|values
index|[
name|ord
index|]
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getValues
specifier|public
name|StringArrayRef
name|getValues
parameter_list|(
name|int
name|docId
parameter_list|)
block|{
name|IntArrayRef
name|ords
init|=
name|ordinals
operator|.
name|getOrds
argument_list|(
name|docId
argument_list|)
decl_stmt|;
name|int
name|size
init|=
name|ords
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|==
literal|0
condition|)
return|return
name|StringArrayRef
operator|.
name|EMPTY
return|;
name|arrayScratch
operator|.
name|reset
argument_list|(
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|ords
operator|.
name|start
init|;
name|i
operator|<
name|ords
operator|.
name|end
condition|;
name|i
operator|++
control|)
block|{
name|arrayScratch
operator|.
name|values
index|[
name|arrayScratch
operator|.
name|end
operator|++
index|]
operator|=
name|Long
operator|.
name|toString
argument_list|(
name|values
index|[
name|ords
operator|.
name|values
index|[
name|i
index|]
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|arrayScratch
return|;
block|}
annotation|@
name|Override
DECL|method|getIter
specifier|public
name|Iter
name|getIter
parameter_list|(
name|int
name|docId
parameter_list|)
block|{
return|return
name|valuesIter
operator|.
name|reset
argument_list|(
name|ordinals
operator|.
name|getIter
argument_list|(
name|docId
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|forEachValueInDoc
specifier|public
name|void
name|forEachValueInDoc
parameter_list|(
name|int
name|docId
parameter_list|,
name|ValueInDocProc
name|proc
parameter_list|)
block|{
name|Ordinals
operator|.
name|Docs
operator|.
name|Iter
name|iter
init|=
name|ordinals
operator|.
name|getIter
argument_list|(
name|docId
argument_list|)
decl_stmt|;
name|int
name|ord
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|ord
operator|==
literal|0
condition|)
block|{
name|proc
operator|.
name|onMissing
argument_list|(
name|docId
argument_list|)
expr_stmt|;
return|return;
block|}
do|do
block|{
name|proc
operator|.
name|onValue
argument_list|(
name|docId
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|values
index|[
name|ord
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
operator|(
name|ord
operator|=
name|iter
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|0
condition|)
do|;
block|}
DECL|class|ValuesIter
specifier|static
class|class
name|ValuesIter
implements|implements
name|Iter
block|{
DECL|field|values
specifier|private
specifier|final
name|long
index|[]
name|values
decl_stmt|;
DECL|field|ordsIter
specifier|private
name|Ordinals
operator|.
name|Docs
operator|.
name|Iter
name|ordsIter
decl_stmt|;
DECL|field|ord
specifier|private
name|int
name|ord
decl_stmt|;
DECL|method|ValuesIter
name|ValuesIter
parameter_list|(
name|long
index|[]
name|values
parameter_list|)
block|{
name|this
operator|.
name|values
operator|=
name|values
expr_stmt|;
block|}
DECL|method|reset
specifier|public
name|ValuesIter
name|reset
parameter_list|(
name|Ordinals
operator|.
name|Docs
operator|.
name|Iter
name|ordsIter
parameter_list|)
block|{
name|this
operator|.
name|ordsIter
operator|=
name|ordsIter
expr_stmt|;
name|this
operator|.
name|ord
operator|=
name|ordsIter
operator|.
name|next
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|hasNext
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|ord
operator|!=
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|next
specifier|public
name|String
name|next
parameter_list|()
block|{
name|String
name|value
init|=
name|Long
operator|.
name|toString
argument_list|(
name|values
index|[
name|ord
index|]
argument_list|)
decl_stmt|;
name|ord
operator|=
name|ordsIter
operator|.
name|next
argument_list|()
expr_stmt|;
return|return
name|value
return|;
block|}
block|}
block|}
DECL|class|LongValues
specifier|static
class|class
name|LongValues
implements|implements
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|LongValues
block|{
DECL|field|values
specifier|private
specifier|final
name|long
index|[]
name|values
decl_stmt|;
DECL|field|ordinals
specifier|private
specifier|final
name|Ordinals
operator|.
name|Docs
name|ordinals
decl_stmt|;
DECL|field|arrayScratch
specifier|private
specifier|final
name|LongArrayRef
name|arrayScratch
init|=
operator|new
name|LongArrayRef
argument_list|(
operator|new
name|long
index|[
literal|1
index|]
argument_list|,
literal|1
argument_list|)
decl_stmt|;
DECL|field|iter
specifier|private
specifier|final
name|ValuesIter
name|iter
decl_stmt|;
DECL|method|LongValues
name|LongValues
parameter_list|(
name|long
index|[]
name|values
parameter_list|,
name|Ordinals
operator|.
name|Docs
name|ordinals
parameter_list|)
block|{
name|this
operator|.
name|values
operator|=
name|values
expr_stmt|;
name|this
operator|.
name|ordinals
operator|=
name|ordinals
expr_stmt|;
name|this
operator|.
name|iter
operator|=
operator|new
name|ValuesIter
argument_list|(
name|values
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isMultiValued
specifier|public
name|boolean
name|isMultiValued
parameter_list|()
block|{
return|return
name|ordinals
operator|.
name|isMultiValued
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|hasValue
specifier|public
name|boolean
name|hasValue
parameter_list|(
name|int
name|docId
parameter_list|)
block|{
return|return
name|ordinals
operator|.
name|getOrd
argument_list|(
name|docId
argument_list|)
operator|!=
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|getValue
specifier|public
name|long
name|getValue
parameter_list|(
name|int
name|docId
parameter_list|)
block|{
return|return
name|values
index|[
name|ordinals
operator|.
name|getOrd
argument_list|(
name|docId
argument_list|)
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|getValueMissing
specifier|public
name|long
name|getValueMissing
parameter_list|(
name|int
name|docId
parameter_list|,
name|long
name|missingValue
parameter_list|)
block|{
name|int
name|ord
init|=
name|ordinals
operator|.
name|getOrd
argument_list|(
name|docId
argument_list|)
decl_stmt|;
if|if
condition|(
name|ord
operator|==
literal|0
condition|)
block|{
return|return
name|missingValue
return|;
block|}
else|else
block|{
return|return
name|values
index|[
name|ord
index|]
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getValues
specifier|public
name|LongArrayRef
name|getValues
parameter_list|(
name|int
name|docId
parameter_list|)
block|{
name|IntArrayRef
name|ords
init|=
name|ordinals
operator|.
name|getOrds
argument_list|(
name|docId
argument_list|)
decl_stmt|;
name|int
name|size
init|=
name|ords
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|==
literal|0
condition|)
return|return
name|LongArrayRef
operator|.
name|EMPTY
return|;
name|arrayScratch
operator|.
name|reset
argument_list|(
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|ords
operator|.
name|start
init|;
name|i
operator|<
name|ords
operator|.
name|end
condition|;
name|i
operator|++
control|)
block|{
name|arrayScratch
operator|.
name|values
index|[
name|arrayScratch
operator|.
name|end
operator|++
index|]
operator|=
name|values
index|[
name|ords
operator|.
name|values
index|[
name|i
index|]
index|]
expr_stmt|;
block|}
return|return
name|arrayScratch
return|;
block|}
annotation|@
name|Override
DECL|method|getIter
specifier|public
name|Iter
name|getIter
parameter_list|(
name|int
name|docId
parameter_list|)
block|{
return|return
name|iter
operator|.
name|reset
argument_list|(
name|ordinals
operator|.
name|getIter
argument_list|(
name|docId
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|forEachValueInDoc
specifier|public
name|void
name|forEachValueInDoc
parameter_list|(
name|int
name|docId
parameter_list|,
name|ValueInDocProc
name|proc
parameter_list|)
block|{
name|Ordinals
operator|.
name|Docs
operator|.
name|Iter
name|iter
init|=
name|ordinals
operator|.
name|getIter
argument_list|(
name|docId
argument_list|)
decl_stmt|;
name|int
name|ord
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|ord
operator|==
literal|0
condition|)
block|{
name|proc
operator|.
name|onMissing
argument_list|(
name|docId
argument_list|)
expr_stmt|;
return|return;
block|}
do|do
block|{
name|proc
operator|.
name|onValue
argument_list|(
name|docId
argument_list|,
name|values
index|[
name|ord
index|]
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
operator|(
name|ord
operator|=
name|iter
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|0
condition|)
do|;
block|}
DECL|class|ValuesIter
specifier|static
class|class
name|ValuesIter
implements|implements
name|Iter
block|{
DECL|field|values
specifier|private
specifier|final
name|long
index|[]
name|values
decl_stmt|;
DECL|field|ordsIter
specifier|private
name|Ordinals
operator|.
name|Docs
operator|.
name|Iter
name|ordsIter
decl_stmt|;
DECL|field|ord
specifier|private
name|int
name|ord
decl_stmt|;
DECL|method|ValuesIter
name|ValuesIter
parameter_list|(
name|long
index|[]
name|values
parameter_list|)
block|{
name|this
operator|.
name|values
operator|=
name|values
expr_stmt|;
block|}
DECL|method|reset
specifier|public
name|ValuesIter
name|reset
parameter_list|(
name|Ordinals
operator|.
name|Docs
operator|.
name|Iter
name|ordsIter
parameter_list|)
block|{
name|this
operator|.
name|ordsIter
operator|=
name|ordsIter
expr_stmt|;
name|this
operator|.
name|ord
operator|=
name|ordsIter
operator|.
name|next
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|hasNext
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|ord
operator|!=
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|next
specifier|public
name|long
name|next
parameter_list|()
block|{
name|long
name|value
init|=
name|values
index|[
name|ord
index|]
decl_stmt|;
name|ord
operator|=
name|ordsIter
operator|.
name|next
argument_list|()
expr_stmt|;
return|return
name|value
return|;
block|}
block|}
block|}
DECL|class|DoubleValues
specifier|static
class|class
name|DoubleValues
implements|implements
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|DoubleValues
block|{
DECL|field|values
specifier|private
specifier|final
name|long
index|[]
name|values
decl_stmt|;
DECL|field|ordinals
specifier|private
specifier|final
name|Ordinals
operator|.
name|Docs
name|ordinals
decl_stmt|;
DECL|field|arrayScratch
specifier|private
specifier|final
name|DoubleArrayRef
name|arrayScratch
init|=
operator|new
name|DoubleArrayRef
argument_list|(
operator|new
name|double
index|[
literal|1
index|]
argument_list|,
literal|1
argument_list|)
decl_stmt|;
DECL|field|iter
specifier|private
specifier|final
name|ValuesIter
name|iter
decl_stmt|;
DECL|method|DoubleValues
name|DoubleValues
parameter_list|(
name|long
index|[]
name|values
parameter_list|,
name|Ordinals
operator|.
name|Docs
name|ordinals
parameter_list|)
block|{
name|this
operator|.
name|values
operator|=
name|values
expr_stmt|;
name|this
operator|.
name|ordinals
operator|=
name|ordinals
expr_stmt|;
name|this
operator|.
name|iter
operator|=
operator|new
name|ValuesIter
argument_list|(
name|values
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isMultiValued
specifier|public
name|boolean
name|isMultiValued
parameter_list|()
block|{
return|return
name|ordinals
operator|.
name|isMultiValued
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|hasValue
specifier|public
name|boolean
name|hasValue
parameter_list|(
name|int
name|docId
parameter_list|)
block|{
return|return
name|ordinals
operator|.
name|getOrd
argument_list|(
name|docId
argument_list|)
operator|!=
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|getValue
specifier|public
name|double
name|getValue
parameter_list|(
name|int
name|docId
parameter_list|)
block|{
return|return
operator|(
name|double
operator|)
name|values
index|[
name|ordinals
operator|.
name|getOrd
argument_list|(
name|docId
argument_list|)
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|getValueMissing
specifier|public
name|double
name|getValueMissing
parameter_list|(
name|int
name|docId
parameter_list|,
name|double
name|missingValue
parameter_list|)
block|{
name|int
name|ord
init|=
name|ordinals
operator|.
name|getOrd
argument_list|(
name|docId
argument_list|)
decl_stmt|;
if|if
condition|(
name|ord
operator|==
literal|0
condition|)
block|{
return|return
name|missingValue
return|;
block|}
else|else
block|{
return|return
operator|(
name|double
operator|)
name|values
index|[
name|ord
index|]
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getValues
specifier|public
name|DoubleArrayRef
name|getValues
parameter_list|(
name|int
name|docId
parameter_list|)
block|{
name|IntArrayRef
name|ords
init|=
name|ordinals
operator|.
name|getOrds
argument_list|(
name|docId
argument_list|)
decl_stmt|;
name|int
name|size
init|=
name|ords
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|==
literal|0
condition|)
return|return
name|DoubleArrayRef
operator|.
name|EMPTY
return|;
name|arrayScratch
operator|.
name|reset
argument_list|(
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|ords
operator|.
name|start
init|;
name|i
operator|<
name|ords
operator|.
name|end
condition|;
name|i
operator|++
control|)
block|{
name|arrayScratch
operator|.
name|values
index|[
name|arrayScratch
operator|.
name|end
operator|++
index|]
operator|=
operator|(
name|double
operator|)
name|values
index|[
name|ords
operator|.
name|values
index|[
name|i
index|]
index|]
expr_stmt|;
block|}
return|return
name|arrayScratch
return|;
block|}
annotation|@
name|Override
DECL|method|getIter
specifier|public
name|Iter
name|getIter
parameter_list|(
name|int
name|docId
parameter_list|)
block|{
return|return
name|iter
operator|.
name|reset
argument_list|(
name|ordinals
operator|.
name|getIter
argument_list|(
name|docId
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|forEachValueInDoc
specifier|public
name|void
name|forEachValueInDoc
parameter_list|(
name|int
name|docId
parameter_list|,
name|ValueInDocProc
name|proc
parameter_list|)
block|{
name|Ordinals
operator|.
name|Docs
operator|.
name|Iter
name|iter
init|=
name|ordinals
operator|.
name|getIter
argument_list|(
name|docId
argument_list|)
decl_stmt|;
name|int
name|ord
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|ord
operator|==
literal|0
condition|)
block|{
name|proc
operator|.
name|onMissing
argument_list|(
name|docId
argument_list|)
expr_stmt|;
return|return;
block|}
do|do
block|{
name|proc
operator|.
name|onValue
argument_list|(
name|docId
argument_list|,
operator|(
name|double
operator|)
name|values
index|[
name|ord
index|]
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
operator|(
name|ord
operator|=
name|iter
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|0
condition|)
do|;
block|}
DECL|class|ValuesIter
specifier|static
class|class
name|ValuesIter
implements|implements
name|Iter
block|{
DECL|field|values
specifier|private
specifier|final
name|long
index|[]
name|values
decl_stmt|;
DECL|field|ordsIter
specifier|private
name|Ordinals
operator|.
name|Docs
operator|.
name|Iter
name|ordsIter
decl_stmt|;
DECL|field|ord
specifier|private
name|int
name|ord
decl_stmt|;
DECL|method|ValuesIter
name|ValuesIter
parameter_list|(
name|long
index|[]
name|values
parameter_list|)
block|{
name|this
operator|.
name|values
operator|=
name|values
expr_stmt|;
block|}
DECL|method|reset
specifier|public
name|ValuesIter
name|reset
parameter_list|(
name|Ordinals
operator|.
name|Docs
operator|.
name|Iter
name|ordsIter
parameter_list|)
block|{
name|this
operator|.
name|ordsIter
operator|=
name|ordsIter
expr_stmt|;
name|this
operator|.
name|ord
operator|=
name|ordsIter
operator|.
name|next
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|hasNext
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|ord
operator|!=
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|next
specifier|public
name|double
name|next
parameter_list|()
block|{
name|double
name|value
init|=
operator|(
name|double
operator|)
name|values
index|[
name|ord
index|]
decl_stmt|;
name|ord
operator|=
name|ordsIter
operator|.
name|next
argument_list|()
expr_stmt|;
return|return
name|value
return|;
block|}
block|}
block|}
block|}
comment|/**      * A single valued case, where not all values are "set", so we have a FixedBitSet that      * indicates which values have an actual value.      */
DECL|class|SingleFixedSet
specifier|public
specifier|static
class|class
name|SingleFixedSet
extends|extends
name|LongArrayAtomicFieldData
block|{
DECL|field|set
specifier|private
specifier|final
name|FixedBitSet
name|set
decl_stmt|;
DECL|method|SingleFixedSet
specifier|public
name|SingleFixedSet
parameter_list|(
name|long
index|[]
name|values
parameter_list|,
name|int
name|numDocs
parameter_list|,
name|FixedBitSet
name|set
parameter_list|)
block|{
name|super
argument_list|(
name|values
argument_list|,
name|numDocs
argument_list|)
expr_stmt|;
name|this
operator|.
name|set
operator|=
name|set
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isMultiValued
specifier|public
name|boolean
name|isMultiValued
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|isValuesOrdered
specifier|public
name|boolean
name|isValuesOrdered
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|getMemorySizeInBytes
specifier|public
name|long
name|getMemorySizeInBytes
parameter_list|()
block|{
if|if
condition|(
name|size
operator|==
operator|-
literal|1
condition|)
block|{
name|size
operator|=
name|RamUsage
operator|.
name|NUM_BYTES_ARRAY_HEADER
operator|+
operator|(
name|values
operator|.
name|length
operator|*
name|RamUsage
operator|.
name|NUM_BYTES_DOUBLE
operator|)
operator|+
operator|(
name|set
operator|.
name|getBits
argument_list|()
operator|.
name|length
operator|*
name|RamUsage
operator|.
name|NUM_BYTES_LONG
operator|)
expr_stmt|;
block|}
return|return
name|size
return|;
block|}
annotation|@
name|Override
DECL|method|getScriptValues
specifier|public
name|ScriptDocValues
name|getScriptValues
parameter_list|()
block|{
return|return
operator|new
name|ScriptDocValues
operator|.
name|NumericDouble
argument_list|(
name|getDoubleValues
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getBytesValues
specifier|public
name|BytesValues
name|getBytesValues
parameter_list|()
block|{
return|return
operator|new
name|BytesValues
operator|.
name|StringBased
argument_list|(
name|getStringValues
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getHashedBytesValues
specifier|public
name|HashedBytesValues
name|getHashedBytesValues
parameter_list|()
block|{
return|return
operator|new
name|HashedBytesValues
operator|.
name|StringBased
argument_list|(
name|getStringValues
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getStringValues
specifier|public
name|StringValues
name|getStringValues
parameter_list|()
block|{
return|return
operator|new
name|StringValues
argument_list|(
name|values
argument_list|,
name|set
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getByteValues
specifier|public
name|ByteValues
name|getByteValues
parameter_list|()
block|{
return|return
operator|new
name|ByteValues
operator|.
name|LongBased
argument_list|(
name|getLongValues
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getShortValues
specifier|public
name|ShortValues
name|getShortValues
parameter_list|()
block|{
return|return
operator|new
name|ShortValues
operator|.
name|LongBased
argument_list|(
name|getLongValues
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getIntValues
specifier|public
name|IntValues
name|getIntValues
parameter_list|()
block|{
return|return
operator|new
name|IntValues
operator|.
name|LongBased
argument_list|(
name|getLongValues
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getLongValues
specifier|public
name|LongValues
name|getLongValues
parameter_list|()
block|{
return|return
operator|new
name|LongValues
argument_list|(
name|values
argument_list|,
name|set
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getFloatValues
specifier|public
name|FloatValues
name|getFloatValues
parameter_list|()
block|{
return|return
operator|new
name|FloatValues
operator|.
name|DoubleBased
argument_list|(
name|getDoubleValues
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getDoubleValues
specifier|public
name|DoubleValues
name|getDoubleValues
parameter_list|()
block|{
return|return
operator|new
name|DoubleValues
argument_list|(
name|values
argument_list|,
name|set
argument_list|)
return|;
block|}
DECL|class|StringValues
specifier|static
class|class
name|StringValues
implements|implements
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|StringValues
block|{
DECL|field|values
specifier|private
specifier|final
name|long
index|[]
name|values
decl_stmt|;
DECL|field|set
specifier|private
specifier|final
name|FixedBitSet
name|set
decl_stmt|;
DECL|field|arrayScratch
specifier|private
specifier|final
name|StringArrayRef
name|arrayScratch
init|=
operator|new
name|StringArrayRef
argument_list|(
operator|new
name|String
index|[
literal|1
index|]
argument_list|,
literal|1
argument_list|)
decl_stmt|;
DECL|field|iter
specifier|private
specifier|final
name|Iter
operator|.
name|Single
name|iter
init|=
operator|new
name|Iter
operator|.
name|Single
argument_list|()
decl_stmt|;
DECL|method|StringValues
name|StringValues
parameter_list|(
name|long
index|[]
name|values
parameter_list|,
name|FixedBitSet
name|set
parameter_list|)
block|{
name|this
operator|.
name|values
operator|=
name|values
expr_stmt|;
name|this
operator|.
name|set
operator|=
name|set
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isMultiValued
specifier|public
name|boolean
name|isMultiValued
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|hasValue
specifier|public
name|boolean
name|hasValue
parameter_list|(
name|int
name|docId
parameter_list|)
block|{
return|return
name|set
operator|.
name|get
argument_list|(
name|docId
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getValue
specifier|public
name|String
name|getValue
parameter_list|(
name|int
name|docId
parameter_list|)
block|{
if|if
condition|(
name|set
operator|.
name|get
argument_list|(
name|docId
argument_list|)
condition|)
block|{
return|return
name|Long
operator|.
name|toString
argument_list|(
name|values
index|[
name|docId
index|]
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getValues
specifier|public
name|StringArrayRef
name|getValues
parameter_list|(
name|int
name|docId
parameter_list|)
block|{
if|if
condition|(
name|set
operator|.
name|get
argument_list|(
name|docId
argument_list|)
condition|)
block|{
name|arrayScratch
operator|.
name|values
index|[
literal|0
index|]
operator|=
name|Long
operator|.
name|toString
argument_list|(
name|values
index|[
name|docId
index|]
argument_list|)
expr_stmt|;
return|return
name|arrayScratch
return|;
block|}
else|else
block|{
return|return
name|StringArrayRef
operator|.
name|EMPTY
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getIter
specifier|public
name|Iter
name|getIter
parameter_list|(
name|int
name|docId
parameter_list|)
block|{
if|if
condition|(
name|set
operator|.
name|get
argument_list|(
name|docId
argument_list|)
condition|)
block|{
return|return
name|iter
operator|.
name|reset
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|values
index|[
name|docId
index|]
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|Iter
operator|.
name|Empty
operator|.
name|INSTANCE
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|forEachValueInDoc
specifier|public
name|void
name|forEachValueInDoc
parameter_list|(
name|int
name|docId
parameter_list|,
name|ValueInDocProc
name|proc
parameter_list|)
block|{
if|if
condition|(
name|set
operator|.
name|get
argument_list|(
name|docId
argument_list|)
condition|)
block|{
name|proc
operator|.
name|onValue
argument_list|(
name|docId
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|values
index|[
name|docId
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|proc
operator|.
name|onMissing
argument_list|(
name|docId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|LongValues
specifier|static
class|class
name|LongValues
implements|implements
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|LongValues
block|{
DECL|field|values
specifier|private
specifier|final
name|long
index|[]
name|values
decl_stmt|;
DECL|field|set
specifier|private
specifier|final
name|FixedBitSet
name|set
decl_stmt|;
DECL|field|arrayScratch
specifier|private
specifier|final
name|LongArrayRef
name|arrayScratch
init|=
operator|new
name|LongArrayRef
argument_list|(
operator|new
name|long
index|[
literal|1
index|]
argument_list|,
literal|1
argument_list|)
decl_stmt|;
DECL|field|iter
specifier|private
specifier|final
name|Iter
operator|.
name|Single
name|iter
init|=
operator|new
name|Iter
operator|.
name|Single
argument_list|()
decl_stmt|;
DECL|method|LongValues
name|LongValues
parameter_list|(
name|long
index|[]
name|values
parameter_list|,
name|FixedBitSet
name|set
parameter_list|)
block|{
name|this
operator|.
name|values
operator|=
name|values
expr_stmt|;
name|this
operator|.
name|set
operator|=
name|set
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isMultiValued
specifier|public
name|boolean
name|isMultiValued
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|hasValue
specifier|public
name|boolean
name|hasValue
parameter_list|(
name|int
name|docId
parameter_list|)
block|{
return|return
name|set
operator|.
name|get
argument_list|(
name|docId
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getValue
specifier|public
name|long
name|getValue
parameter_list|(
name|int
name|docId
parameter_list|)
block|{
return|return
name|values
index|[
name|docId
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|getValueMissing
specifier|public
name|long
name|getValueMissing
parameter_list|(
name|int
name|docId
parameter_list|,
name|long
name|missingValue
parameter_list|)
block|{
if|if
condition|(
name|set
operator|.
name|get
argument_list|(
name|docId
argument_list|)
condition|)
block|{
return|return
name|values
index|[
name|docId
index|]
return|;
block|}
else|else
block|{
return|return
name|missingValue
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getValues
specifier|public
name|LongArrayRef
name|getValues
parameter_list|(
name|int
name|docId
parameter_list|)
block|{
if|if
condition|(
name|set
operator|.
name|get
argument_list|(
name|docId
argument_list|)
condition|)
block|{
name|arrayScratch
operator|.
name|values
index|[
literal|0
index|]
operator|=
name|values
index|[
name|docId
index|]
expr_stmt|;
return|return
name|arrayScratch
return|;
block|}
else|else
block|{
return|return
name|LongArrayRef
operator|.
name|EMPTY
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getIter
specifier|public
name|Iter
name|getIter
parameter_list|(
name|int
name|docId
parameter_list|)
block|{
if|if
condition|(
name|set
operator|.
name|get
argument_list|(
name|docId
argument_list|)
condition|)
block|{
return|return
name|iter
operator|.
name|reset
argument_list|(
name|values
index|[
name|docId
index|]
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|Iter
operator|.
name|Empty
operator|.
name|INSTANCE
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|forEachValueInDoc
specifier|public
name|void
name|forEachValueInDoc
parameter_list|(
name|int
name|docId
parameter_list|,
name|ValueInDocProc
name|proc
parameter_list|)
block|{
if|if
condition|(
name|set
operator|.
name|get
argument_list|(
name|docId
argument_list|)
condition|)
block|{
name|proc
operator|.
name|onValue
argument_list|(
name|docId
argument_list|,
name|values
index|[
name|docId
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|DoubleValues
specifier|static
class|class
name|DoubleValues
implements|implements
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|DoubleValues
block|{
DECL|field|values
specifier|private
specifier|final
name|long
index|[]
name|values
decl_stmt|;
DECL|field|set
specifier|private
specifier|final
name|FixedBitSet
name|set
decl_stmt|;
DECL|field|arrayScratch
specifier|private
specifier|final
name|DoubleArrayRef
name|arrayScratch
init|=
operator|new
name|DoubleArrayRef
argument_list|(
operator|new
name|double
index|[
literal|1
index|]
argument_list|,
literal|1
argument_list|)
decl_stmt|;
DECL|field|iter
specifier|private
specifier|final
name|Iter
operator|.
name|Single
name|iter
init|=
operator|new
name|Iter
operator|.
name|Single
argument_list|()
decl_stmt|;
DECL|method|DoubleValues
name|DoubleValues
parameter_list|(
name|long
index|[]
name|values
parameter_list|,
name|FixedBitSet
name|set
parameter_list|)
block|{
name|this
operator|.
name|values
operator|=
name|values
expr_stmt|;
name|this
operator|.
name|set
operator|=
name|set
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isMultiValued
specifier|public
name|boolean
name|isMultiValued
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|hasValue
specifier|public
name|boolean
name|hasValue
parameter_list|(
name|int
name|docId
parameter_list|)
block|{
return|return
name|set
operator|.
name|get
argument_list|(
name|docId
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getValue
specifier|public
name|double
name|getValue
parameter_list|(
name|int
name|docId
parameter_list|)
block|{
return|return
operator|(
name|double
operator|)
name|values
index|[
name|docId
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|getValueMissing
specifier|public
name|double
name|getValueMissing
parameter_list|(
name|int
name|docId
parameter_list|,
name|double
name|missingValue
parameter_list|)
block|{
if|if
condition|(
name|set
operator|.
name|get
argument_list|(
name|docId
argument_list|)
condition|)
block|{
return|return
operator|(
name|double
operator|)
name|values
index|[
name|docId
index|]
return|;
block|}
else|else
block|{
return|return
name|missingValue
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getValues
specifier|public
name|DoubleArrayRef
name|getValues
parameter_list|(
name|int
name|docId
parameter_list|)
block|{
if|if
condition|(
name|set
operator|.
name|get
argument_list|(
name|docId
argument_list|)
condition|)
block|{
name|arrayScratch
operator|.
name|values
index|[
literal|0
index|]
operator|=
operator|(
name|double
operator|)
name|values
index|[
name|docId
index|]
expr_stmt|;
return|return
name|arrayScratch
return|;
block|}
else|else
block|{
return|return
name|DoubleArrayRef
operator|.
name|EMPTY
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getIter
specifier|public
name|Iter
name|getIter
parameter_list|(
name|int
name|docId
parameter_list|)
block|{
if|if
condition|(
name|set
operator|.
name|get
argument_list|(
name|docId
argument_list|)
condition|)
block|{
return|return
name|iter
operator|.
name|reset
argument_list|(
operator|(
name|double
operator|)
name|values
index|[
name|docId
index|]
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|Iter
operator|.
name|Empty
operator|.
name|INSTANCE
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|forEachValueInDoc
specifier|public
name|void
name|forEachValueInDoc
parameter_list|(
name|int
name|docId
parameter_list|,
name|ValueInDocProc
name|proc
parameter_list|)
block|{
if|if
condition|(
name|set
operator|.
name|get
argument_list|(
name|docId
argument_list|)
condition|)
block|{
name|proc
operator|.
name|onValue
argument_list|(
name|docId
argument_list|,
operator|(
name|double
operator|)
name|values
index|[
name|docId
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * Assumes all the values are "set", and docId is used as the index to the value array.      */
DECL|class|Single
specifier|public
specifier|static
class|class
name|Single
extends|extends
name|LongArrayAtomicFieldData
block|{
comment|/**          * Note, here, we assume that there is no offset by 1 from docId, so position 0          * is the value for docId 0.          */
DECL|method|Single
specifier|public
name|Single
parameter_list|(
name|long
index|[]
name|values
parameter_list|,
name|int
name|numDocs
parameter_list|)
block|{
name|super
argument_list|(
name|values
argument_list|,
name|numDocs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isMultiValued
specifier|public
name|boolean
name|isMultiValued
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|isValuesOrdered
specifier|public
name|boolean
name|isValuesOrdered
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|getMemorySizeInBytes
specifier|public
name|long
name|getMemorySizeInBytes
parameter_list|()
block|{
if|if
condition|(
name|size
operator|==
operator|-
literal|1
condition|)
block|{
name|size
operator|=
name|RamUsage
operator|.
name|NUM_BYTES_ARRAY_HEADER
operator|+
operator|(
name|values
operator|.
name|length
operator|*
name|RamUsage
operator|.
name|NUM_BYTES_DOUBLE
operator|)
expr_stmt|;
block|}
return|return
name|size
return|;
block|}
annotation|@
name|Override
DECL|method|getScriptValues
specifier|public
name|ScriptDocValues
name|getScriptValues
parameter_list|()
block|{
return|return
operator|new
name|ScriptDocValues
operator|.
name|NumericDouble
argument_list|(
name|getDoubleValues
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getBytesValues
specifier|public
name|BytesValues
name|getBytesValues
parameter_list|()
block|{
return|return
operator|new
name|BytesValues
operator|.
name|StringBased
argument_list|(
name|getStringValues
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getHashedBytesValues
specifier|public
name|HashedBytesValues
name|getHashedBytesValues
parameter_list|()
block|{
return|return
operator|new
name|HashedBytesValues
operator|.
name|StringBased
argument_list|(
name|getStringValues
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getStringValues
specifier|public
name|StringValues
name|getStringValues
parameter_list|()
block|{
return|return
operator|new
name|StringValues
argument_list|(
name|values
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getByteValues
specifier|public
name|ByteValues
name|getByteValues
parameter_list|()
block|{
return|return
operator|new
name|ByteValues
operator|.
name|LongBased
argument_list|(
name|getLongValues
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getShortValues
specifier|public
name|ShortValues
name|getShortValues
parameter_list|()
block|{
return|return
operator|new
name|ShortValues
operator|.
name|LongBased
argument_list|(
name|getLongValues
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getIntValues
specifier|public
name|IntValues
name|getIntValues
parameter_list|()
block|{
return|return
operator|new
name|IntValues
operator|.
name|LongBased
argument_list|(
name|getLongValues
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getLongValues
specifier|public
name|LongValues
name|getLongValues
parameter_list|()
block|{
return|return
operator|new
name|LongValues
argument_list|(
name|values
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getFloatValues
specifier|public
name|FloatValues
name|getFloatValues
parameter_list|()
block|{
return|return
operator|new
name|FloatValues
operator|.
name|DoubleBased
argument_list|(
name|getDoubleValues
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getDoubleValues
specifier|public
name|DoubleValues
name|getDoubleValues
parameter_list|()
block|{
return|return
operator|new
name|DoubleValues
argument_list|(
name|values
argument_list|)
return|;
block|}
DECL|class|StringValues
specifier|static
class|class
name|StringValues
implements|implements
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|StringValues
block|{
DECL|field|values
specifier|private
specifier|final
name|long
index|[]
name|values
decl_stmt|;
DECL|field|arrayScratch
specifier|private
specifier|final
name|StringArrayRef
name|arrayScratch
init|=
operator|new
name|StringArrayRef
argument_list|(
operator|new
name|String
index|[
literal|1
index|]
argument_list|,
literal|1
argument_list|)
decl_stmt|;
DECL|field|iter
specifier|private
specifier|final
name|Iter
operator|.
name|Single
name|iter
init|=
operator|new
name|Iter
operator|.
name|Single
argument_list|()
decl_stmt|;
DECL|method|StringValues
name|StringValues
parameter_list|(
name|long
index|[]
name|values
parameter_list|)
block|{
name|this
operator|.
name|values
operator|=
name|values
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isMultiValued
specifier|public
name|boolean
name|isMultiValued
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|hasValue
specifier|public
name|boolean
name|hasValue
parameter_list|(
name|int
name|docId
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|getValue
specifier|public
name|String
name|getValue
parameter_list|(
name|int
name|docId
parameter_list|)
block|{
return|return
name|Long
operator|.
name|toString
argument_list|(
name|values
index|[
name|docId
index|]
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getValues
specifier|public
name|StringArrayRef
name|getValues
parameter_list|(
name|int
name|docId
parameter_list|)
block|{
name|arrayScratch
operator|.
name|values
index|[
literal|0
index|]
operator|=
name|Long
operator|.
name|toString
argument_list|(
name|values
index|[
name|docId
index|]
argument_list|)
expr_stmt|;
return|return
name|arrayScratch
return|;
block|}
annotation|@
name|Override
DECL|method|getIter
specifier|public
name|Iter
name|getIter
parameter_list|(
name|int
name|docId
parameter_list|)
block|{
return|return
name|iter
operator|.
name|reset
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|values
index|[
name|docId
index|]
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|forEachValueInDoc
specifier|public
name|void
name|forEachValueInDoc
parameter_list|(
name|int
name|docId
parameter_list|,
name|ValueInDocProc
name|proc
parameter_list|)
block|{
name|proc
operator|.
name|onValue
argument_list|(
name|docId
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|values
index|[
name|docId
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|LongValues
specifier|static
class|class
name|LongValues
implements|implements
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|LongValues
block|{
DECL|field|values
specifier|private
specifier|final
name|long
index|[]
name|values
decl_stmt|;
DECL|field|arrayScratch
specifier|private
specifier|final
name|LongArrayRef
name|arrayScratch
init|=
operator|new
name|LongArrayRef
argument_list|(
operator|new
name|long
index|[
literal|1
index|]
argument_list|,
literal|1
argument_list|)
decl_stmt|;
DECL|field|iter
specifier|private
specifier|final
name|Iter
operator|.
name|Single
name|iter
init|=
operator|new
name|Iter
operator|.
name|Single
argument_list|()
decl_stmt|;
DECL|method|LongValues
name|LongValues
parameter_list|(
name|long
index|[]
name|values
parameter_list|)
block|{
name|this
operator|.
name|values
operator|=
name|values
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isMultiValued
specifier|public
name|boolean
name|isMultiValued
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|hasValue
specifier|public
name|boolean
name|hasValue
parameter_list|(
name|int
name|docId
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|getValue
specifier|public
name|long
name|getValue
parameter_list|(
name|int
name|docId
parameter_list|)
block|{
return|return
name|values
index|[
name|docId
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|getValueMissing
specifier|public
name|long
name|getValueMissing
parameter_list|(
name|int
name|docId
parameter_list|,
name|long
name|missingValue
parameter_list|)
block|{
return|return
name|values
index|[
name|docId
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|getValues
specifier|public
name|LongArrayRef
name|getValues
parameter_list|(
name|int
name|docId
parameter_list|)
block|{
name|arrayScratch
operator|.
name|values
index|[
literal|0
index|]
operator|=
name|values
index|[
name|docId
index|]
expr_stmt|;
return|return
name|arrayScratch
return|;
block|}
annotation|@
name|Override
DECL|method|getIter
specifier|public
name|Iter
name|getIter
parameter_list|(
name|int
name|docId
parameter_list|)
block|{
return|return
name|iter
operator|.
name|reset
argument_list|(
name|values
index|[
name|docId
index|]
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|forEachValueInDoc
specifier|public
name|void
name|forEachValueInDoc
parameter_list|(
name|int
name|docId
parameter_list|,
name|ValueInDocProc
name|proc
parameter_list|)
block|{
name|proc
operator|.
name|onValue
argument_list|(
name|docId
argument_list|,
name|values
index|[
name|docId
index|]
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|DoubleValues
specifier|static
class|class
name|DoubleValues
implements|implements
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|DoubleValues
block|{
DECL|field|values
specifier|private
specifier|final
name|long
index|[]
name|values
decl_stmt|;
DECL|field|arrayScratch
specifier|private
specifier|final
name|DoubleArrayRef
name|arrayScratch
init|=
operator|new
name|DoubleArrayRef
argument_list|(
operator|new
name|double
index|[
literal|1
index|]
argument_list|,
literal|1
argument_list|)
decl_stmt|;
DECL|field|iter
specifier|private
specifier|final
name|Iter
operator|.
name|Single
name|iter
init|=
operator|new
name|Iter
operator|.
name|Single
argument_list|()
decl_stmt|;
DECL|method|DoubleValues
name|DoubleValues
parameter_list|(
name|long
index|[]
name|values
parameter_list|)
block|{
name|this
operator|.
name|values
operator|=
name|values
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isMultiValued
specifier|public
name|boolean
name|isMultiValued
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|hasValue
specifier|public
name|boolean
name|hasValue
parameter_list|(
name|int
name|docId
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|getValue
specifier|public
name|double
name|getValue
parameter_list|(
name|int
name|docId
parameter_list|)
block|{
return|return
operator|(
name|double
operator|)
name|values
index|[
name|docId
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|getValueMissing
specifier|public
name|double
name|getValueMissing
parameter_list|(
name|int
name|docId
parameter_list|,
name|double
name|missingValue
parameter_list|)
block|{
return|return
operator|(
name|double
operator|)
name|values
index|[
name|docId
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|getValues
specifier|public
name|DoubleArrayRef
name|getValues
parameter_list|(
name|int
name|docId
parameter_list|)
block|{
name|arrayScratch
operator|.
name|values
index|[
literal|0
index|]
operator|=
operator|(
name|double
operator|)
name|values
index|[
name|docId
index|]
expr_stmt|;
return|return
name|arrayScratch
return|;
block|}
annotation|@
name|Override
DECL|method|getIter
specifier|public
name|Iter
name|getIter
parameter_list|(
name|int
name|docId
parameter_list|)
block|{
return|return
name|iter
operator|.
name|reset
argument_list|(
operator|(
name|double
operator|)
name|values
index|[
name|docId
index|]
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|forEachValueInDoc
specifier|public
name|void
name|forEachValueInDoc
parameter_list|(
name|int
name|docId
parameter_list|,
name|ValueInDocProc
name|proc
parameter_list|)
block|{
name|proc
operator|.
name|onValue
argument_list|(
name|docId
argument_list|,
operator|(
name|double
operator|)
name|values
index|[
name|docId
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

