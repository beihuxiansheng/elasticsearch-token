begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.fielddata.plain
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|plain
package|;
end_package

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|cursors
operator|.
name|ObjectCursor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableOpenMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|AtomicFieldData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|BytesValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|ScriptDocValues
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
DECL|class|ParentChildAtomicFieldData
specifier|public
class|class
name|ParentChildAtomicFieldData
implements|implements
name|AtomicFieldData
block|{
DECL|field|typeToIds
specifier|private
specifier|final
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|PagedBytesAtomicFieldData
argument_list|>
name|typeToIds
decl_stmt|;
DECL|field|numberUniqueValues
specifier|private
specifier|final
name|long
name|numberUniqueValues
decl_stmt|;
DECL|field|memorySizeInBytes
specifier|private
specifier|final
name|long
name|memorySizeInBytes
decl_stmt|;
DECL|method|ParentChildAtomicFieldData
specifier|public
name|ParentChildAtomicFieldData
parameter_list|(
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|PagedBytesAtomicFieldData
argument_list|>
name|typeToIds
parameter_list|)
block|{
name|this
operator|.
name|typeToIds
operator|=
name|typeToIds
expr_stmt|;
name|long
name|numValues
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ObjectCursor
argument_list|<
name|PagedBytesAtomicFieldData
argument_list|>
name|cursor
range|:
name|typeToIds
operator|.
name|values
argument_list|()
control|)
block|{
name|numValues
operator|+=
name|cursor
operator|.
name|value
operator|.
name|getNumberUniqueValues
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|numberUniqueValues
operator|=
name|numValues
expr_stmt|;
name|long
name|size
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ObjectCursor
argument_list|<
name|PagedBytesAtomicFieldData
argument_list|>
name|cursor
range|:
name|typeToIds
operator|.
name|values
argument_list|()
control|)
block|{
name|size
operator|+=
name|cursor
operator|.
name|value
operator|.
name|getMemorySizeInBytes
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|memorySizeInBytes
operator|=
name|size
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isMultiValued
specifier|public
name|boolean
name|isMultiValued
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|getNumberUniqueValues
specifier|public
name|long
name|getNumberUniqueValues
parameter_list|()
block|{
return|return
name|numberUniqueValues
return|;
block|}
annotation|@
name|Override
DECL|method|getMemorySizeInBytes
specifier|public
name|long
name|getMemorySizeInBytes
parameter_list|()
block|{
return|return
name|memorySizeInBytes
return|;
block|}
annotation|@
name|Override
DECL|method|getBytesValues
specifier|public
name|BytesValues
name|getBytesValues
parameter_list|(
name|boolean
name|needsHashes
parameter_list|)
block|{
specifier|final
name|BytesValues
index|[]
name|bytesValues
init|=
operator|new
name|BytesValues
index|[
name|typeToIds
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ObjectCursor
argument_list|<
name|PagedBytesAtomicFieldData
argument_list|>
name|cursor
range|:
name|typeToIds
operator|.
name|values
argument_list|()
control|)
block|{
name|bytesValues
index|[
name|index
operator|++
index|]
operator|=
name|cursor
operator|.
name|value
operator|.
name|getBytesValues
argument_list|(
name|needsHashes
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|BytesValues
argument_list|(
literal|true
argument_list|)
block|{
specifier|private
specifier|final
name|BytesRef
index|[]
name|terms
init|=
operator|new
name|BytesRef
index|[
literal|2
index|]
decl_stmt|;
specifier|private
name|int
name|index
decl_stmt|;
annotation|@
name|Override
specifier|public
name|int
name|setDocument
parameter_list|(
name|int
name|docId
parameter_list|)
block|{
name|index
operator|=
literal|0
expr_stmt|;
name|int
name|counter
init|=
literal|0
decl_stmt|;
for|for
control|(
specifier|final
name|BytesValues
name|values
range|:
name|bytesValues
control|)
block|{
name|int
name|numValues
init|=
name|values
operator|.
name|setDocument
argument_list|(
name|docId
argument_list|)
decl_stmt|;
assert|assert
name|numValues
operator|<=
literal|1
operator|:
literal|"Per doc/type combination only a single value is allowed"
assert|;
if|if
condition|(
name|numValues
operator|==
literal|1
condition|)
block|{
name|values
operator|.
name|nextValue
argument_list|()
expr_stmt|;
name|terms
index|[
name|counter
operator|++
index|]
operator|=
name|values
operator|.
name|copyShared
argument_list|()
expr_stmt|;
block|}
block|}
assert|assert
name|counter
operator|<=
literal|2
operator|:
literal|"A single doc can potentially be both parent and child, so the maximum allowed values is 2"
assert|;
if|if
condition|(
name|counter
operator|>
literal|1
condition|)
block|{
name|int
name|cmp
init|=
name|terms
index|[
literal|0
index|]
operator|.
name|compareTo
argument_list|(
name|terms
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|>
literal|0
condition|)
block|{
name|BytesRef
name|temp
init|=
name|terms
index|[
literal|0
index|]
decl_stmt|;
name|terms
index|[
literal|0
index|]
operator|=
name|terms
index|[
literal|1
index|]
expr_stmt|;
name|terms
index|[
literal|1
index|]
operator|=
name|temp
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cmp
operator|==
literal|0
condition|)
block|{
comment|// If the id is the same between types the only omit one. For example: a doc has parent#1 in _uid field and has grand_parent#1 in _parent field.
return|return
literal|1
return|;
block|}
block|}
return|return
name|counter
return|;
block|}
annotation|@
name|Override
specifier|public
name|BytesRef
name|nextValue
parameter_list|()
block|{
name|BytesRef
name|current
init|=
name|terms
index|[
name|index
operator|++
index|]
decl_stmt|;
name|scratch
operator|.
name|bytes
operator|=
name|current
operator|.
name|bytes
expr_stmt|;
name|scratch
operator|.
name|offset
operator|=
name|current
operator|.
name|offset
expr_stmt|;
name|scratch
operator|.
name|length
operator|=
name|current
operator|.
name|length
expr_stmt|;
return|return
name|scratch
return|;
block|}
block|}
return|;
block|}
DECL|method|getBytesValues
specifier|public
name|BytesValues
operator|.
name|WithOrdinals
name|getBytesValues
parameter_list|(
name|String
name|type
parameter_list|)
block|{
name|WithOrdinals
name|atomicFieldData
init|=
name|typeToIds
operator|.
name|get
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|atomicFieldData
operator|!=
literal|null
condition|)
block|{
return|return
name|atomicFieldData
operator|.
name|getBytesValues
argument_list|(
literal|true
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
DECL|method|getAtomicFieldData
specifier|public
name|WithOrdinals
name|getAtomicFieldData
parameter_list|(
name|String
name|type
parameter_list|)
block|{
return|return
name|typeToIds
operator|.
name|get
argument_list|(
name|type
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getScriptValues
specifier|public
name|ScriptDocValues
name|getScriptValues
parameter_list|()
block|{
return|return
operator|new
name|ScriptDocValues
operator|.
name|Strings
argument_list|(
name|getBytesValues
argument_list|(
literal|false
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
for|for
control|(
name|ObjectCursor
argument_list|<
name|PagedBytesAtomicFieldData
argument_list|>
name|cursor
range|:
name|typeToIds
operator|.
name|values
argument_list|()
control|)
block|{
name|cursor
operator|.
name|value
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

