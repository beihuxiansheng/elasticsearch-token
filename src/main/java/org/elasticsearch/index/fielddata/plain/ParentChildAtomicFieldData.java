begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.fielddata.plain
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|plain
package|;
end_package

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|cursors
operator|.
name|ObjectCursor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SortedDocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableOpenMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|AtomicOrdinalsFieldData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|MultiValueMode
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
DECL|class|ParentChildAtomicFieldData
specifier|public
class|class
name|ParentChildAtomicFieldData
extends|extends
name|AbstractAtomicParentChildFieldData
block|{
DECL|field|typeToIds
specifier|private
specifier|final
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|AtomicOrdinalsFieldData
argument_list|>
name|typeToIds
decl_stmt|;
DECL|field|memorySizeInBytes
specifier|private
specifier|final
name|long
name|memorySizeInBytes
decl_stmt|;
DECL|method|ParentChildAtomicFieldData
specifier|public
name|ParentChildAtomicFieldData
parameter_list|(
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|AtomicOrdinalsFieldData
argument_list|>
name|typeToIds
parameter_list|)
block|{
name|this
operator|.
name|typeToIds
operator|=
name|typeToIds
expr_stmt|;
name|long
name|size
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ObjectCursor
argument_list|<
name|AtomicOrdinalsFieldData
argument_list|>
name|cursor
range|:
name|typeToIds
operator|.
name|values
argument_list|()
control|)
block|{
name|size
operator|+=
name|cursor
operator|.
name|value
operator|.
name|ramBytesUsed
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|memorySizeInBytes
operator|=
name|size
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|ramBytesUsed
specifier|public
name|long
name|ramBytesUsed
parameter_list|()
block|{
return|return
name|memorySizeInBytes
return|;
block|}
annotation|@
name|Override
DECL|method|types
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|types
parameter_list|()
block|{
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|types
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ObjectCursor
argument_list|<
name|String
argument_list|>
name|cursor
range|:
name|typeToIds
operator|.
name|keys
argument_list|()
control|)
block|{
name|types
operator|.
name|add
argument_list|(
name|cursor
operator|.
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|types
return|;
block|}
annotation|@
name|Override
DECL|method|getOrdinalsValues
specifier|public
name|SortedDocValues
name|getOrdinalsValues
parameter_list|(
name|String
name|type
parameter_list|)
block|{
name|AtomicOrdinalsFieldData
name|atomicFieldData
init|=
name|typeToIds
operator|.
name|get
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|atomicFieldData
operator|!=
literal|null
condition|)
block|{
return|return
name|MultiValueMode
operator|.
name|MIN
operator|.
name|select
argument_list|(
name|atomicFieldData
operator|.
name|getOrdinalsValues
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|DocValues
operator|.
name|emptySorted
argument_list|()
return|;
block|}
block|}
DECL|method|getAtomicFieldData
specifier|public
name|AtomicOrdinalsFieldData
name|getAtomicFieldData
parameter_list|(
name|String
name|type
parameter_list|)
block|{
return|return
name|typeToIds
operator|.
name|get
argument_list|(
name|type
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
for|for
control|(
name|ObjectCursor
argument_list|<
name|AtomicOrdinalsFieldData
argument_list|>
name|cursor
range|:
name|typeToIds
operator|.
name|values
argument_list|()
control|)
block|{
name|cursor
operator|.
name|value
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

