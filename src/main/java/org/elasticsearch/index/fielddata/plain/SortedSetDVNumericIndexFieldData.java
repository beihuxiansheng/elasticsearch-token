begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.fielddata.plain
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|plain
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|AtomicReaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|FieldComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|SortField
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|IndexFieldData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|IndexNumericFieldData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|fieldcomparator
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|FieldMapper
operator|.
name|Names
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_class
DECL|class|SortedSetDVNumericIndexFieldData
specifier|public
class|class
name|SortedSetDVNumericIndexFieldData
extends|extends
name|DocValuesIndexFieldData
implements|implements
name|IndexNumericFieldData
argument_list|<
name|SortedSetDVNumericAtomicFieldData
argument_list|>
block|{
DECL|field|numericType
specifier|private
specifier|final
name|NumericType
name|numericType
decl_stmt|;
DECL|method|SortedSetDVNumericIndexFieldData
specifier|public
name|SortedSetDVNumericIndexFieldData
parameter_list|(
name|Index
name|index
parameter_list|,
name|Names
name|fieldNames
parameter_list|,
name|NumericType
name|numericType
parameter_list|)
block|{
name|super
argument_list|(
name|index
argument_list|,
name|fieldNames
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|numericType
operator|!=
literal|null
argument_list|,
literal|"numericType must be non-null"
argument_list|)
expr_stmt|;
name|this
operator|.
name|numericType
operator|=
name|numericType
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|valuesOrdered
specifier|public
name|boolean
name|valuesOrdered
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
DECL|method|comparatorSource
specifier|public
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|IndexFieldData
operator|.
name|XFieldComparatorSource
name|comparatorSource
parameter_list|(
specifier|final
name|Object
name|missingValue
parameter_list|,
specifier|final
name|SortMode
name|sortMode
parameter_list|)
block|{
if|if
condition|(
name|sortMode
operator|==
name|SortMode
operator|.
name|SUM
operator|||
name|sortMode
operator|==
name|SortMode
operator|.
name|AVG
condition|)
block|{
comment|// sort based on an aggregation, we can't use ordinals here so it may be slowish
switch|switch
condition|(
name|numericType
condition|)
block|{
case|case
name|FLOAT
case|:
return|return
operator|new
name|FloatValuesComparatorSource
argument_list|(
name|this
argument_list|,
name|missingValue
argument_list|,
name|sortMode
argument_list|)
return|;
case|case
name|DOUBLE
case|:
return|return
operator|new
name|DoubleValuesComparatorSource
argument_list|(
name|this
argument_list|,
name|missingValue
argument_list|,
name|sortMode
argument_list|)
return|;
default|default:
assert|assert
operator|!
name|numericType
operator|.
name|isFloatingPoint
argument_list|()
assert|;
return|return
operator|new
name|LongValuesComparatorSource
argument_list|(
name|this
argument_list|,
name|missingValue
argument_list|,
name|sortMode
argument_list|)
return|;
block|}
block|}
assert|assert
name|sortMode
operator|==
name|SortMode
operator|.
name|MIN
operator|||
name|sortMode
operator|==
name|SortMode
operator|.
name|MAX
assert|;
comment|// Otherwise (MIN/MAX), use ordinal-based comparison -> fast
specifier|final
name|IndexFieldData
operator|.
name|WithOrdinals
argument_list|<
name|?
argument_list|>
name|bytesIndexFieldData
init|=
operator|new
name|SortedSetDVBytesIndexFieldData
argument_list|(
name|index
argument_list|,
name|fieldNames
argument_list|)
decl_stmt|;
return|return
operator|new
name|XFieldComparatorSource
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Type
name|reducedType
parameter_list|()
block|{
return|return
name|numericType
operator|.
name|sortFieldType
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|FieldComparator
argument_list|<
name|?
argument_list|>
name|newComparator
parameter_list|(
name|String
name|fieldname
parameter_list|,
name|int
name|numHits
parameter_list|,
name|int
name|sortPos
parameter_list|,
name|boolean
name|reversed
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|fieldname
operator|.
name|equals
argument_list|(
name|bytesIndexFieldData
operator|.
name|getFieldNames
argument_list|()
operator|.
name|indexName
argument_list|()
argument_list|)
assert|;
specifier|final
name|Number
name|missingNumber
init|=
operator|(
name|Number
operator|)
name|missingObject
argument_list|(
name|missingValue
argument_list|,
name|reversed
argument_list|)
decl_stmt|;
specifier|final
name|BytesRef
name|missingBytes
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
name|numericType
operator|.
name|toIndexForm
argument_list|(
name|missingNumber
argument_list|,
name|missingBytes
argument_list|)
expr_stmt|;
specifier|final
name|BytesRefOrdValComparator
name|in
init|=
operator|new
name|BytesRefOrdValComparator
argument_list|(
operator|(
name|IndexFieldData
operator|.
name|WithOrdinals
argument_list|<
name|?
argument_list|>
operator|)
name|bytesIndexFieldData
argument_list|,
name|numHits
argument_list|,
name|sortMode
argument_list|,
name|missingBytes
argument_list|)
decl_stmt|;
return|return
operator|new
name|NumericFieldComparator
argument_list|(
name|in
argument_list|,
name|numericType
argument_list|)
return|;
block|}
block|}
return|;
block|}
DECL|class|NumericFieldComparator
specifier|private
specifier|static
class|class
name|NumericFieldComparator
extends|extends
name|NestedWrappableComparator
argument_list|<
name|Number
argument_list|>
block|{
DECL|field|in
specifier|final
name|NestedWrappableComparator
argument_list|<
name|BytesRef
argument_list|>
name|in
decl_stmt|;
DECL|field|numericType
specifier|final
name|NumericType
name|numericType
decl_stmt|;
DECL|field|spare
specifier|final
name|BytesRef
name|spare
decl_stmt|;
DECL|method|NumericFieldComparator
specifier|public
name|NumericFieldComparator
parameter_list|(
name|NestedWrappableComparator
argument_list|<
name|BytesRef
argument_list|>
name|in
parameter_list|,
name|NumericType
name|numericType
parameter_list|)
block|{
name|this
operator|.
name|in
operator|=
name|in
expr_stmt|;
name|this
operator|.
name|numericType
operator|=
name|numericType
expr_stmt|;
name|spare
operator|=
operator|new
name|BytesRef
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|compare
specifier|public
name|int
name|compare
parameter_list|(
name|int
name|slot1
parameter_list|,
name|int
name|slot2
parameter_list|)
block|{
return|return
name|in
operator|.
name|compare
argument_list|(
name|slot1
argument_list|,
name|slot2
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|setBottom
specifier|public
name|void
name|setBottom
parameter_list|(
name|int
name|slot
parameter_list|)
block|{
name|in
operator|.
name|setBottom
argument_list|(
name|slot
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|compareBottom
specifier|public
name|int
name|compareBottom
parameter_list|(
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|in
operator|.
name|compareBottom
argument_list|(
name|doc
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|copy
specifier|public
name|void
name|copy
parameter_list|(
name|int
name|slot
parameter_list|,
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
name|in
operator|.
name|copy
argument_list|(
name|slot
argument_list|,
name|doc
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setNextReader
specifier|public
name|FieldComparator
argument_list|<
name|Number
argument_list|>
name|setNextReader
parameter_list|(
name|AtomicReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|NumericFieldComparator
argument_list|(
operator|(
name|NestedWrappableComparator
argument_list|<
name|BytesRef
argument_list|>
operator|)
name|in
operator|.
name|setNextReader
argument_list|(
name|context
argument_list|)
argument_list|,
name|numericType
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|value
specifier|public
name|Number
name|value
parameter_list|(
name|int
name|slot
parameter_list|)
block|{
specifier|final
name|BytesRef
name|value
init|=
name|in
operator|.
name|value
argument_list|(
name|slot
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|numericType
operator|.
name|toNumber
argument_list|(
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|compareDocToValue
specifier|public
name|int
name|compareDocToValue
parameter_list|(
name|int
name|doc
parameter_list|,
name|Number
name|value
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
name|in
operator|.
name|compareDocToValue
argument_list|(
name|doc
argument_list|,
literal|null
argument_list|)
return|;
block|}
name|numericType
operator|.
name|toIndexForm
argument_list|(
name|value
argument_list|,
name|spare
argument_list|)
expr_stmt|;
return|return
name|in
operator|.
name|compareDocToValue
argument_list|(
name|doc
argument_list|,
name|spare
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|missing
specifier|public
name|void
name|missing
parameter_list|(
name|int
name|slot
parameter_list|)
block|{
name|in
operator|.
name|missing
argument_list|(
name|slot
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|compareBottomMissing
specifier|public
name|int
name|compareBottomMissing
parameter_list|()
block|{
return|return
name|in
operator|.
name|compareBottomMissing
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|load
specifier|public
name|SortedSetDVNumericAtomicFieldData
name|load
parameter_list|(
name|AtomicReaderContext
name|context
parameter_list|)
block|{
specifier|final
name|SortedSetDVNumericAtomicFieldData
name|atomicFieldData
init|=
operator|new
name|SortedSetDVNumericAtomicFieldData
argument_list|(
name|context
operator|.
name|reader
argument_list|()
argument_list|,
name|fieldNames
operator|.
name|indexName
argument_list|()
argument_list|,
name|numericType
argument_list|)
decl_stmt|;
name|updateMaxUniqueValueCount
argument_list|(
name|atomicFieldData
operator|.
name|getNumberUniqueValues
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|atomicFieldData
return|;
block|}
annotation|@
name|Override
DECL|method|loadDirect
specifier|public
name|SortedSetDVNumericAtomicFieldData
name|loadDirect
parameter_list|(
name|AtomicReaderContext
name|context
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|load
argument_list|(
name|context
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getNumericType
specifier|public
name|NumericType
name|getNumericType
parameter_list|()
block|{
return|return
name|numericType
return|;
block|}
block|}
end_class

end_unit

