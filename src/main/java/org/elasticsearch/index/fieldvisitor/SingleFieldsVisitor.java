begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.fieldvisitor
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fieldvisitor
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|FieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|internal
operator|.
name|IdFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|internal
operator|.
name|TypeFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|internal
operator|.
name|UidFieldMapper
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
DECL|class|SingleFieldsVisitor
specifier|public
class|class
name|SingleFieldsVisitor
extends|extends
name|FieldsVisitor
block|{
DECL|field|field
specifier|private
name|String
name|field
decl_stmt|;
DECL|method|SingleFieldsVisitor
specifier|public
name|SingleFieldsVisitor
parameter_list|(
name|String
name|field
parameter_list|)
block|{
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|needsField
specifier|public
name|Status
name|needsField
parameter_list|(
name|FieldInfo
name|fieldInfo
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|fieldInfo
operator|.
name|name
operator|.
name|equals
argument_list|(
name|field
argument_list|)
condition|)
block|{
return|return
name|Status
operator|.
name|YES
return|;
block|}
if|if
condition|(
name|fieldInfo
operator|.
name|name
operator|.
name|equals
argument_list|(
name|UidFieldMapper
operator|.
name|NAME
argument_list|)
condition|)
block|{
if|if
condition|(
name|TypeFieldMapper
operator|.
name|NAME
operator|.
name|equals
argument_list|(
name|field
argument_list|)
operator|||
name|IdFieldMapper
operator|.
name|NAME
operator|.
name|equals
argument_list|(
name|field
argument_list|)
condition|)
block|{
return|return
name|Status
operator|.
name|YES
return|;
block|}
block|}
return|return
name|Status
operator|.
name|NO
return|;
block|}
DECL|method|reset
specifier|public
name|void
name|reset
parameter_list|(
name|String
name|field
parameter_list|)
block|{
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
name|super
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
DECL|method|postProcess
specifier|public
name|void
name|postProcess
parameter_list|(
name|FieldMapper
name|mapper
parameter_list|)
block|{
if|if
condition|(
name|uid
operator|!=
literal|null
condition|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|UidFieldMapper
operator|.
name|NAME
case|:
name|addValue
argument_list|(
name|field
argument_list|,
name|uid
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
case|case
name|IdFieldMapper
operator|.
name|NAME
case|:
name|addValue
argument_list|(
name|field
argument_list|,
name|uid
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
case|case
name|TypeFieldMapper
operator|.
name|NAME
case|:
name|addValue
argument_list|(
name|field
argument_list|,
name|uid
operator|.
name|type
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|fieldsValues
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|List
argument_list|<
name|Object
argument_list|>
name|fieldValues
init|=
name|fieldsValues
operator|.
name|get
argument_list|(
name|mapper
operator|.
name|names
argument_list|()
operator|.
name|indexName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|fieldValues
operator|==
literal|null
condition|)
block|{
return|return;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fieldValues
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|fieldValues
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|mapper
operator|.
name|valueForSearch
argument_list|(
name|fieldValues
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

