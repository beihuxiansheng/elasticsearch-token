begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.codec
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|codec
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticSearchIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|AbstractModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Scopes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|assistedinject
operator|.
name|FactoryProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|multibindings
operator|.
name|MapBinder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|NoClassSettingsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|codec
operator|.
name|postingsformat
operator|.
name|PostingFormats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|codec
operator|.
name|postingsformat
operator|.
name|PostingsFormatProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|codec
operator|.
name|postingsformat
operator|.
name|PostingsFormatService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|codec
operator|.
name|postingsformat
operator|.
name|PreBuiltPostingsFormatProvider
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * The {@link CodecModule} creates and loads the {@link CodecService} and  * {@link PostingsFormatService} allowing low level data-structure  * specialization on a Lucene Segment basis.  *<p>  * The codec module is the authoritative source for build-in and custom  * {@link PostingsFormatProvider}. During module bootstrap it processes the  * index settings underneath the  * {@value PostingsFormatProvider#POSTINGS_FORMAT_SETTINGS_PREFIX} and  * instantiates the corresponding {@link PostingsFormatProvider} instances. To  * configure a custom provider implementations the class should reside in the  *<tt>org.elasticsearch.index.codec.postingsformat</tt> package and the  * classname should be suffixed with<tt>PostingsFormatProvider</tt>.<br>  * For example to expose the Elastic-Fantastic format provider one need to  * provide the following configuration settings and classes:  *<ol>  *<li>create a {@link PostingsFormatProvider} subclass in the package  *<tt>org.elasticsearch.index.codec.postingsformat</tt></li>  *   *<li>name the subclass<tt>ElasticFantatsticPostingsFormatProvider</tt></li>  *   *<li>configure the custom format in you index settings under  *<tt>index.codec.postings_format.elastic_fantatic.type : "ElasticFantatic"</tt>  *</li>  *   *<li>provide any postings format settings for this custom format under the  * same key ie.  *<tt>index.codec.postings_format.elastic_fantatic.performance : "crazy_fast"</tt>  *</li>  *</ol>  *   * @see CodecService  *   */
end_comment

begin_class
DECL|class|CodecModule
specifier|public
class|class
name|CodecModule
extends|extends
name|AbstractModule
block|{
DECL|field|indexSettings
specifier|private
specifier|final
name|Settings
name|indexSettings
decl_stmt|;
DECL|field|customProviders
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
extends|extends
name|PostingsFormatProvider
argument_list|>
argument_list|>
name|customProviders
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
DECL|method|CodecModule
specifier|public
name|CodecModule
parameter_list|(
name|Settings
name|indexSettings
parameter_list|)
block|{
name|this
operator|.
name|indexSettings
operator|=
name|indexSettings
expr_stmt|;
block|}
DECL|method|addPostingFormat
specifier|public
name|CodecModule
name|addPostingFormat
parameter_list|(
name|String
name|name
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|PostingsFormatProvider
argument_list|>
name|provider
parameter_list|)
block|{
name|this
operator|.
name|customProviders
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|provider
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|configure
specifier|protected
name|void
name|configure
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
extends|extends
name|PostingsFormatProvider
argument_list|>
argument_list|>
name|postingFormatProviders
init|=
name|Maps
operator|.
name|newHashMap
argument_list|(
name|customProviders
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Settings
argument_list|>
name|postingsFormatsSettings
init|=
name|indexSettings
operator|.
name|getGroups
argument_list|(
name|PostingsFormatProvider
operator|.
name|POSTINGS_FORMAT_SETTINGS_PREFIX
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Settings
argument_list|>
name|entry
range|:
name|postingsFormatsSettings
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|name
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Settings
name|settings
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|String
name|sType
init|=
name|settings
operator|.
name|get
argument_list|(
literal|"type"
argument_list|)
decl_stmt|;
if|if
condition|(
name|sType
operator|==
literal|null
operator|||
name|sType
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ElasticSearchIllegalArgumentException
argument_list|(
literal|"PostingsFormat Factory ["
operator|+
name|name
operator|+
literal|"] must have a type associated with it"
argument_list|)
throw|;
block|}
name|Class
argument_list|<
name|?
extends|extends
name|PostingsFormatProvider
argument_list|>
name|type
decl_stmt|;
try|try
block|{
name|type
operator|=
name|settings
operator|.
name|getAsClass
argument_list|(
literal|"type"
argument_list|,
literal|null
argument_list|,
literal|"org.elasticsearch.index.codec.postingsformat."
argument_list|,
literal|"PostingsFormatProvider"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoClassSettingsException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ElasticSearchIllegalArgumentException
argument_list|(
literal|"The specified type ["
operator|+
name|sType
operator|+
literal|"] for postingsFormat Factory ["
operator|+
name|name
operator|+
literal|"] can't be found"
argument_list|)
throw|;
block|}
name|postingFormatProviders
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
comment|// now bind
name|MapBinder
argument_list|<
name|String
argument_list|,
name|PostingsFormatProvider
operator|.
name|Factory
argument_list|>
name|postingFormatFactoryBinder
init|=
name|MapBinder
operator|.
name|newMapBinder
argument_list|(
name|binder
argument_list|()
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|PostingsFormatProvider
operator|.
name|Factory
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
extends|extends
name|PostingsFormatProvider
argument_list|>
argument_list|>
name|entry
range|:
name|postingFormatProviders
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|postingFormatFactoryBinder
operator|.
name|addBinding
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|toProvider
argument_list|(
name|FactoryProvider
operator|.
name|newFactory
argument_list|(
name|PostingsFormatProvider
operator|.
name|Factory
operator|.
name|class
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
operator|.
name|in
argument_list|(
name|Scopes
operator|.
name|SINGLETON
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|PreBuiltPostingsFormatProvider
operator|.
name|Factory
name|factory
range|:
name|PostingFormats
operator|.
name|listFactories
argument_list|()
control|)
block|{
if|if
condition|(
name|postingFormatProviders
operator|.
name|containsKey
argument_list|(
name|factory
operator|.
name|name
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|postingFormatFactoryBinder
operator|.
name|addBinding
argument_list|(
name|factory
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|toInstance
argument_list|(
name|factory
argument_list|)
expr_stmt|;
block|}
name|bind
argument_list|(
name|PostingsFormatService
operator|.
name|class
argument_list|)
operator|.
name|asEagerSingleton
argument_list|()
expr_stmt|;
name|bind
argument_list|(
name|CodecService
operator|.
name|class
argument_list|)
operator|.
name|asEagerSingleton
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

