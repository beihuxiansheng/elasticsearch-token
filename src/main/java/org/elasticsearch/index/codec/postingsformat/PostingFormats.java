begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.codec.postingsformat
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|codec
operator|.
name|postingsformat
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableCollection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|PostingsFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|MapBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|BloomFilter
import|;
end_import

begin_comment
comment|/**  * This class represents the set of Elasticsearch "built-in"  * {@link PostingsFormatProvider.Factory postings format factories}  *<ul>  *<li><b>bloom_default</b>: a postings format that uses a bloom filter to  * improve term lookup performance. This is useful for primarily keys or fields  * that are used as a delete key</li>  *<li><b>default</b>: the default Elasticsearch postings format offering best  * general purpose performance. This format is used if no postings format is  * specified in the field mapping.</li>  *<li><b>***</b>: other formats from Lucene core (e.g. Lucene41 as of Lucene 4.10)  *</ul>  */
end_comment

begin_class
DECL|class|PostingFormats
specifier|public
class|class
name|PostingFormats
block|{
DECL|field|builtInPostingFormats
specifier|private
specifier|static
specifier|final
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|PreBuiltPostingsFormatProvider
operator|.
name|Factory
argument_list|>
name|builtInPostingFormats
decl_stmt|;
static|static
block|{
name|MapBuilder
argument_list|<
name|String
argument_list|,
name|PreBuiltPostingsFormatProvider
operator|.
name|Factory
argument_list|>
name|builtInPostingFormatsX
init|=
name|MapBuilder
operator|.
name|newMapBuilder
argument_list|()
decl_stmt|;
comment|// Add any PostingsFormat visible in the CLASSPATH (from Lucene core or via user's plugins).  Note that we no longer include
comment|// lucene codecs module since those codecs have no backwards compatibility between releases and can easily cause exceptions that
comment|// look like index corruption on upgrade:
for|for
control|(
name|String
name|luceneName
range|:
name|PostingsFormat
operator|.
name|availablePostingsFormats
argument_list|()
control|)
block|{
name|builtInPostingFormatsX
operator|.
name|put
argument_list|(
name|luceneName
argument_list|,
operator|new
name|PreBuiltPostingsFormatProvider
operator|.
name|Factory
argument_list|(
name|PostingsFormat
operator|.
name|forName
argument_list|(
name|luceneName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|PostingsFormat
name|defaultFormat
init|=
operator|new
name|Elasticsearch090PostingsFormat
argument_list|()
decl_stmt|;
name|builtInPostingFormatsX
operator|.
name|put
argument_list|(
name|PostingsFormatService
operator|.
name|DEFAULT_FORMAT
argument_list|,
operator|new
name|PreBuiltPostingsFormatProvider
operator|.
name|Factory
argument_list|(
name|PostingsFormatService
operator|.
name|DEFAULT_FORMAT
argument_list|,
name|defaultFormat
argument_list|)
argument_list|)
expr_stmt|;
name|builtInPostingFormatsX
operator|.
name|put
argument_list|(
literal|"bloom_default"
argument_list|,
operator|new
name|PreBuiltPostingsFormatProvider
operator|.
name|Factory
argument_list|(
literal|"bloom_default"
argument_list|,
name|wrapInBloom
argument_list|(
name|PostingsFormat
operator|.
name|forName
argument_list|(
literal|"Lucene41"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|builtInPostingFormats
operator|=
name|builtInPostingFormatsX
operator|.
name|immutableMap
argument_list|()
expr_stmt|;
block|}
DECL|field|luceneBloomFilter
specifier|public
specifier|static
specifier|final
name|boolean
name|luceneBloomFilter
init|=
literal|false
decl_stmt|;
DECL|method|wrapInBloom
specifier|static
name|PostingsFormat
name|wrapInBloom
parameter_list|(
name|PostingsFormat
name|delegate
parameter_list|)
block|{
return|return
operator|new
name|BloomFilterPostingsFormat
argument_list|(
name|delegate
argument_list|,
name|BloomFilter
operator|.
name|Factory
operator|.
name|DEFAULT
argument_list|)
return|;
block|}
DECL|method|getAsFactory
specifier|public
specifier|static
name|PostingsFormatProvider
operator|.
name|Factory
name|getAsFactory
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|builtInPostingFormats
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
DECL|method|getAsProvider
specifier|public
specifier|static
name|PostingsFormatProvider
name|getAsProvider
parameter_list|(
name|String
name|name
parameter_list|)
block|{
specifier|final
name|PreBuiltPostingsFormatProvider
operator|.
name|Factory
name|factory
init|=
name|builtInPostingFormats
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
return|return
name|factory
operator|==
literal|null
condition|?
literal|null
else|:
name|factory
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|listFactories
specifier|public
specifier|static
name|ImmutableCollection
argument_list|<
name|PreBuiltPostingsFormatProvider
operator|.
name|Factory
argument_list|>
name|listFactories
parameter_list|()
block|{
return|return
name|builtInPostingFormats
operator|.
name|values
argument_list|()
return|;
block|}
block|}
end_class

end_unit

