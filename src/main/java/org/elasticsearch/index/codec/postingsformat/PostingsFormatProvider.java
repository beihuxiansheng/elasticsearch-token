begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.codec.postingsformat
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|codec
operator|.
name|postingsformat
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|PostingsFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|codec
operator|.
name|CodecModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|settings
operator|.
name|IndexSettings
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * A {@link PostingsFormatProvider} acts as a named container for specific  * {@link PostingsFormat} implementations. Custom {@link PostingsFormat}  * implementations can be exposed via  * {@link CodecModule#addPostingFormat(String, Class)}  *<p>  * Each {@link PostingsFormatProvider} must provide a unique name for its  * postings format in order to map the postings format to a specific field via  * the mapping API. The name provided via {@link #name()} is used to lookup the  * postings format in {@link PostingsFormatService#get(String)} and should be  * identical to the values used in the field mappings.  *</p>  *<p>  * {@link PostingsFormatProvider} instances are initialized with a  * {@link Settings} subset below the  * {@value PostingsFormatProvider#POSTINGS_FORMAT_SETTINGS_PREFIX} prefix and  * will only see the sub-tree below their mapping name. For instance a postings  * format<tt>ElasticFantastic</tt> will see settings below  *<tt>index.codec.postings_format.elastic_fantastic</tt> given that the  * postings format is exposed via  *<tt>index.codec.postings_format.elastic_fantastic.type : "ElasticFantastic"</tt>.  *</p>  *  * @see CodecModule  */
end_comment

begin_interface
DECL|interface|PostingsFormatProvider
specifier|public
interface|interface
name|PostingsFormatProvider
block|{
DECL|field|POSTINGS_FORMAT_SETTINGS_PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|POSTINGS_FORMAT_SETTINGS_PREFIX
init|=
literal|"index.codec.postings_format"
decl_stmt|;
comment|/**      * A helper class to lookup {@link PostingsFormatProvider providers} by their unique {@link PostingsFormatProvider#name() name}      */
DECL|class|Helper
specifier|public
specifier|static
class|class
name|Helper
block|{
comment|/**          * Looks up and creates {@link PostingsFormatProvider} for the given name.          *<p>          * The settings for the created {@link PostingsFormatProvider} is taken from the given index settings.          * All settings with the {@value PostingsFormatProvider#POSTINGS_FORMAT_SETTINGS_PREFIX} prefix          * and the formats name as the key are passed to the factory.          *</p>          *          * @param indexSettings          the index settings to configure the postings format          * @param name                   the name of the postings format to lookup          * @param postingFormatFactories the factory mapping to lookup the {@link Factory} to create the {@link PostingsFormatProvider}          * @return a fully configured {@link PostingsFormatProvider} for the given name.          * @throws org.elasticsearch.ElasticsearchIllegalArgumentException          *          if the no {@link PostingsFormatProvider} for the given name parameter could be found.          */
DECL|method|lookup
specifier|public
specifier|static
name|PostingsFormatProvider
name|lookup
parameter_list|(
annotation|@
name|IndexSettings
name|Settings
name|indexSettings
parameter_list|,
name|String
name|name
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Factory
argument_list|>
name|postingFormatFactories
parameter_list|)
throws|throws
name|ElasticsearchIllegalArgumentException
block|{
name|Factory
name|factory
init|=
name|postingFormatFactories
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|factory
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ElasticsearchIllegalArgumentException
argument_list|(
literal|"failed to find postings_format ["
operator|+
name|name
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|Settings
name|settings
init|=
name|indexSettings
operator|.
name|getGroups
argument_list|(
name|POSTINGS_FORMAT_SETTINGS_PREFIX
argument_list|)
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|settings
operator|==
literal|null
condition|)
block|{
name|settings
operator|=
name|ImmutableSettings
operator|.
name|Builder
operator|.
name|EMPTY_SETTINGS
expr_stmt|;
block|}
return|return
name|factory
operator|.
name|create
argument_list|(
name|name
argument_list|,
name|settings
argument_list|)
return|;
block|}
block|}
comment|/**      * Returns this providers {@link PostingsFormat} instance.      */
DECL|method|get
name|PostingsFormat
name|get
parameter_list|()
function_decl|;
comment|/**      * Returns the name of this providers {@link PostingsFormat}      */
DECL|method|name
name|String
name|name
parameter_list|()
function_decl|;
comment|/**      * A simple factory used to create {@link PostingsFormatProvider} used by      * delegating providers like {@link BloomFilterLucenePostingsFormatProvider} or      * {@link PulsingPostingsFormatProvider}. Those providers wrap other      * postings formats to enrich their capabilities.      */
DECL|interface|Factory
specifier|public
interface|interface
name|Factory
block|{
DECL|method|create
name|PostingsFormatProvider
name|create
parameter_list|(
name|String
name|name
parameter_list|,
name|Settings
name|settings
parameter_list|)
function_decl|;
block|}
block|}
end_interface

end_unit

