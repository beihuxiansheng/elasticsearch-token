begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.codec.docvaluesformat
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|codec
operator|.
name|docvaluesformat
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticSearchIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|MapBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|AbstractIndexComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|codec
operator|.
name|CodecService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|settings
operator|.
name|IndexSettings
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * The {@link DocValuesFormatService} provides access to  * all configured {@link DocValuesFormatProvider} instances by  * {@link DocValuesFormatProvider#name() name}.  *  * @see CodecService  */
end_comment

begin_class
DECL|class|DocValuesFormatService
specifier|public
class|class
name|DocValuesFormatService
extends|extends
name|AbstractIndexComponent
block|{
DECL|field|providers
specifier|private
specifier|final
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|DocValuesFormatProvider
argument_list|>
name|providers
decl_stmt|;
DECL|field|DEFAULT_FORMAT
specifier|public
specifier|final
specifier|static
name|String
name|DEFAULT_FORMAT
init|=
literal|"default"
decl_stmt|;
DECL|method|DocValuesFormatService
specifier|public
name|DocValuesFormatService
parameter_list|(
name|Index
name|index
parameter_list|)
block|{
name|this
argument_list|(
name|index
argument_list|,
name|ImmutableSettings
operator|.
name|Builder
operator|.
name|EMPTY_SETTINGS
argument_list|)
expr_stmt|;
block|}
DECL|method|DocValuesFormatService
specifier|public
name|DocValuesFormatService
parameter_list|(
name|Index
name|index
parameter_list|,
annotation|@
name|IndexSettings
name|Settings
name|indexSettings
parameter_list|)
block|{
name|this
argument_list|(
name|index
argument_list|,
name|indexSettings
argument_list|,
name|ImmutableMap
operator|.
expr|<
name|String
argument_list|,
name|DocValuesFormatProvider
operator|.
name|Factory
operator|>
name|of
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Inject
DECL|method|DocValuesFormatService
specifier|public
name|DocValuesFormatService
parameter_list|(
name|Index
name|index
parameter_list|,
annotation|@
name|IndexSettings
name|Settings
name|indexSettings
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|DocValuesFormatProvider
operator|.
name|Factory
argument_list|>
name|docValuesFormatFactories
parameter_list|)
block|{
name|super
argument_list|(
name|index
argument_list|,
name|indexSettings
argument_list|)
expr_stmt|;
name|MapBuilder
argument_list|<
name|String
argument_list|,
name|DocValuesFormatProvider
argument_list|>
name|providers
init|=
name|MapBuilder
operator|.
name|newMapBuilder
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Settings
argument_list|>
name|docValuesFormatSettings
init|=
name|indexSettings
operator|.
name|getGroups
argument_list|(
name|DocValuesFormatProvider
operator|.
name|DOC_VALUES_FORMAT_SETTINGS_PREFIX
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|DocValuesFormatProvider
operator|.
name|Factory
argument_list|>
name|entry
range|:
name|docValuesFormatFactories
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|name
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|DocValuesFormatProvider
operator|.
name|Factory
name|factory
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Settings
name|settings
init|=
name|docValuesFormatSettings
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|settings
operator|==
literal|null
condition|)
block|{
name|settings
operator|=
name|ImmutableSettings
operator|.
name|Builder
operator|.
name|EMPTY_SETTINGS
expr_stmt|;
block|}
name|providers
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|factory
operator|.
name|create
argument_list|(
name|name
argument_list|,
name|settings
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// This is only needed for tests when guice doesn't have the chance to populate the list of DVF factories
for|for
control|(
name|PreBuiltDocValuesFormatProvider
operator|.
name|Factory
name|factory
range|:
name|DocValuesFormats
operator|.
name|listFactories
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|providers
operator|.
name|containsKey
argument_list|(
name|factory
operator|.
name|name
argument_list|()
argument_list|)
condition|)
block|{
name|providers
operator|.
name|put
argument_list|(
name|factory
operator|.
name|name
argument_list|()
argument_list|,
name|factory
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|this
operator|.
name|providers
operator|=
name|providers
operator|.
name|immutableMap
argument_list|()
expr_stmt|;
block|}
DECL|method|get
specifier|public
name|DocValuesFormatProvider
name|get
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|ElasticSearchIllegalArgumentException
block|{
name|DocValuesFormatProvider
name|provider
init|=
name|providers
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|provider
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ElasticSearchIllegalArgumentException
argument_list|(
literal|"failed to find doc_values_format ["
operator|+
name|name
operator|+
literal|"]"
argument_list|)
throw|;
block|}
return|return
name|provider
return|;
block|}
block|}
end_class

end_unit

