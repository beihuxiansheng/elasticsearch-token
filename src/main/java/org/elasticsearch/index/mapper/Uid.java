begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.mapper
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|HashedBytesArray
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|Uid
specifier|public
specifier|final
class|class
name|Uid
block|{
DECL|field|DELIMITER
specifier|public
specifier|static
specifier|final
name|char
name|DELIMITER
init|=
literal|'#'
decl_stmt|;
DECL|field|DELIMITER_BYTE
specifier|public
specifier|static
specifier|final
name|byte
name|DELIMITER_BYTE
init|=
literal|0x23
decl_stmt|;
DECL|field|DELIMITER_BYTES
specifier|public
specifier|static
specifier|final
name|BytesRef
name|DELIMITER_BYTES
init|=
operator|new
name|BytesRef
argument_list|(
operator|new
name|byte
index|[]
block|{
name|DELIMITER_BYTE
block|}
argument_list|)
decl_stmt|;
DECL|field|type
specifier|private
specifier|final
name|String
name|type
decl_stmt|;
DECL|field|id
specifier|private
specifier|final
name|String
name|id
decl_stmt|;
DECL|method|Uid
specifier|public
name|Uid
parameter_list|(
name|String
name|type
parameter_list|,
name|String
name|id
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
block|}
DECL|method|type
specifier|public
name|String
name|type
parameter_list|()
block|{
return|return
name|type
return|;
block|}
DECL|method|id
specifier|public
name|String
name|id
parameter_list|()
block|{
return|return
name|id
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|Uid
name|uid
init|=
operator|(
name|Uid
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|id
operator|!=
literal|null
condition|?
operator|!
name|id
operator|.
name|equals
argument_list|(
name|uid
operator|.
name|id
argument_list|)
else|:
name|uid
operator|.
name|id
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|type
operator|!=
literal|null
condition|?
operator|!
name|type
operator|.
name|equals
argument_list|(
name|uid
operator|.
name|type
argument_list|)
else|:
name|uid
operator|.
name|type
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
name|type
operator|!=
literal|null
condition|?
name|type
operator|.
name|hashCode
argument_list|()
else|:
literal|0
decl_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|id
operator|!=
literal|null
condition|?
name|id
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|type
operator|+
name|DELIMITER
operator|+
name|id
return|;
block|}
DECL|method|typePrefix
specifier|public
specifier|static
name|String
name|typePrefix
parameter_list|(
name|String
name|type
parameter_list|)
block|{
return|return
name|type
operator|+
name|DELIMITER
return|;
block|}
DECL|method|idFromUid
specifier|public
specifier|static
name|String
name|idFromUid
parameter_list|(
name|String
name|uid
parameter_list|)
block|{
name|int
name|delimiterIndex
init|=
name|uid
operator|.
name|indexOf
argument_list|(
name|DELIMITER
argument_list|)
decl_stmt|;
comment|// type is not allowed to have # in it..., ids can
return|return
name|uid
operator|.
name|substring
argument_list|(
name|delimiterIndex
operator|+
literal|1
argument_list|)
return|;
block|}
DECL|method|idFromUid
specifier|public
specifier|static
name|HashedBytesArray
name|idFromUid
parameter_list|(
name|BytesRef
name|uid
parameter_list|)
block|{
return|return
name|splitUidIntoTypeAndId
argument_list|(
name|uid
argument_list|)
index|[
literal|1
index|]
return|;
block|}
DECL|method|typeFromUid
specifier|public
specifier|static
name|HashedBytesArray
name|typeFromUid
parameter_list|(
name|BytesRef
name|uid
parameter_list|)
block|{
return|return
name|splitUidIntoTypeAndId
argument_list|(
name|uid
argument_list|)
index|[
literal|0
index|]
return|;
block|}
DECL|method|typeFromUid
specifier|public
specifier|static
name|String
name|typeFromUid
parameter_list|(
name|String
name|uid
parameter_list|)
block|{
name|int
name|delimiterIndex
init|=
name|uid
operator|.
name|indexOf
argument_list|(
name|DELIMITER
argument_list|)
decl_stmt|;
comment|// type is not allowed to have # in it..., ids can
return|return
name|uid
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|delimiterIndex
argument_list|)
return|;
block|}
DECL|method|createUid
specifier|public
specifier|static
name|Uid
name|createUid
parameter_list|(
name|String
name|uid
parameter_list|)
block|{
name|int
name|delimiterIndex
init|=
name|uid
operator|.
name|indexOf
argument_list|(
name|DELIMITER
argument_list|)
decl_stmt|;
comment|// type is not allowed to have # in it..., ids can
return|return
operator|new
name|Uid
argument_list|(
name|uid
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|delimiterIndex
argument_list|)
argument_list|,
name|uid
operator|.
name|substring
argument_list|(
name|delimiterIndex
operator|+
literal|1
argument_list|)
argument_list|)
return|;
block|}
DECL|method|createUidAsBytes
specifier|public
specifier|static
name|BytesRef
name|createUidAsBytes
parameter_list|(
name|String
name|type
parameter_list|,
name|String
name|id
parameter_list|)
block|{
name|BytesRef
name|ref
init|=
operator|new
name|BytesRef
argument_list|(
name|type
operator|.
name|length
argument_list|()
operator|+
literal|1
operator|+
name|id
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|ref
operator|.
name|copyChars
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|ref
operator|.
name|append
argument_list|(
name|DELIMITER_BYTES
argument_list|)
expr_stmt|;
name|ref
operator|.
name|append
argument_list|(
operator|new
name|BytesRef
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|ref
return|;
block|}
DECL|method|createUid
specifier|public
specifier|static
name|String
name|createUid
parameter_list|(
name|String
name|type
parameter_list|,
name|String
name|id
parameter_list|)
block|{
return|return
name|createUid
argument_list|(
operator|new
name|StringBuilder
argument_list|()
argument_list|,
name|type
argument_list|,
name|id
argument_list|)
return|;
block|}
DECL|method|createUid
specifier|public
specifier|static
name|String
name|createUid
parameter_list|(
name|StringBuilder
name|sb
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|id
parameter_list|)
block|{
return|return
name|sb
operator|.
name|append
argument_list|(
name|type
argument_list|)
operator|.
name|append
argument_list|(
name|DELIMITER
argument_list|)
operator|.
name|append
argument_list|(
name|id
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
comment|// LUCENE 4 UPGRADE: HashedBytesArray or BytesRef as return type?
DECL|method|splitUidIntoTypeAndId
specifier|public
specifier|static
name|HashedBytesArray
index|[]
name|splitUidIntoTypeAndId
parameter_list|(
name|BytesRef
name|uid
parameter_list|)
block|{
name|int
name|loc
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|uid
operator|.
name|offset
init|;
name|i
operator|<
name|uid
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|uid
operator|.
name|bytes
index|[
name|i
index|]
operator|==
name|DELIMITER_BYTE
condition|)
block|{
comment|// 0x23 is equal to '#'
name|loc
operator|=
name|i
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|loc
operator|==
operator|-
literal|1
condition|)
block|{
return|return
literal|null
return|;
block|}
name|byte
index|[]
name|type
init|=
operator|new
name|byte
index|[
name|loc
operator|-
name|uid
operator|.
name|offset
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|uid
operator|.
name|bytes
argument_list|,
name|uid
operator|.
name|offset
argument_list|,
name|type
argument_list|,
literal|0
argument_list|,
name|type
operator|.
name|length
argument_list|)
expr_stmt|;
name|byte
index|[]
name|id
init|=
operator|new
name|byte
index|[
name|uid
operator|.
name|length
operator|-
name|type
operator|.
name|length
operator|-
literal|1
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|uid
operator|.
name|bytes
argument_list|,
name|loc
operator|+
literal|1
argument_list|,
name|id
argument_list|,
literal|0
argument_list|,
name|id
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
operator|new
name|HashedBytesArray
index|[]
block|{
operator|new
name|HashedBytesArray
argument_list|(
name|type
argument_list|)
block|,
operator|new
name|HashedBytesArray
argument_list|(
name|id
argument_list|)
block|}
return|;
block|}
block|}
end_class

end_unit

