begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.mapper
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
package|;
end_package

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|ContentPath
specifier|public
class|class
name|ContentPath
block|{
DECL|enum|Type
specifier|public
specifier|static
enum|enum
name|Type
block|{
DECL|enum constant|JUST_NAME
name|JUST_NAME
block|,
DECL|enum constant|FULL
name|FULL
block|,     }
DECL|field|pathType
specifier|private
name|Type
name|pathType
decl_stmt|;
DECL|field|delimiter
specifier|private
specifier|final
name|char
name|delimiter
decl_stmt|;
DECL|field|sb
specifier|private
specifier|final
name|StringBuilder
name|sb
decl_stmt|;
DECL|field|offset
specifier|private
specifier|final
name|int
name|offset
decl_stmt|;
DECL|field|index
specifier|private
name|int
name|index
init|=
literal|0
decl_stmt|;
DECL|field|path
specifier|private
name|String
index|[]
name|path
init|=
operator|new
name|String
index|[
literal|10
index|]
decl_stmt|;
DECL|field|sourcePath
specifier|private
name|String
name|sourcePath
decl_stmt|;
DECL|method|ContentPath
specifier|public
name|ContentPath
parameter_list|()
block|{
name|this
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructs a json path with an offset. The offset will result an<tt>offset</tt>      * number of path elements to not be included in {@link #pathAsText(String)}.      */
DECL|method|ContentPath
specifier|public
name|ContentPath
parameter_list|(
name|int
name|offset
parameter_list|)
block|{
name|this
operator|.
name|delimiter
operator|=
literal|'.'
expr_stmt|;
name|this
operator|.
name|sb
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
name|this
operator|.
name|offset
operator|=
name|offset
expr_stmt|;
name|reset
argument_list|()
expr_stmt|;
block|}
DECL|method|reset
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|this
operator|.
name|index
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|sourcePath
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|add
specifier|public
name|void
name|add
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|path
index|[
name|index
operator|++
index|]
operator|=
name|name
expr_stmt|;
if|if
condition|(
name|index
operator|==
name|path
operator|.
name|length
condition|)
block|{
comment|// expand if needed
name|String
index|[]
name|newPath
init|=
operator|new
name|String
index|[
name|path
operator|.
name|length
operator|+
literal|10
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|path
argument_list|,
literal|0
argument_list|,
name|newPath
argument_list|,
literal|0
argument_list|,
name|path
operator|.
name|length
argument_list|)
expr_stmt|;
name|path
operator|=
name|newPath
expr_stmt|;
block|}
block|}
DECL|method|remove
specifier|public
name|void
name|remove
parameter_list|()
block|{
name|path
index|[
name|index
operator|--
index|]
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|pathAsText
specifier|public
name|String
name|pathAsText
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|pathType
operator|==
name|Type
operator|.
name|JUST_NAME
condition|)
block|{
return|return
name|name
return|;
block|}
return|return
name|fullPathAsText
argument_list|(
name|name
argument_list|)
return|;
block|}
DECL|method|fullPathAsText
specifier|public
name|String
name|fullPathAsText
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|sb
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|offset
init|;
name|i
operator|<
name|index
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|path
index|[
name|i
index|]
argument_list|)
operator|.
name|append
argument_list|(
name|delimiter
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|pathType
specifier|public
name|Type
name|pathType
parameter_list|()
block|{
return|return
name|pathType
return|;
block|}
DECL|method|pathType
specifier|public
name|void
name|pathType
parameter_list|(
name|Type
name|type
parameter_list|)
block|{
name|this
operator|.
name|pathType
operator|=
name|type
expr_stmt|;
block|}
DECL|method|sourcePath
specifier|public
name|String
name|sourcePath
parameter_list|(
name|String
name|sourcePath
parameter_list|)
block|{
name|String
name|orig
init|=
name|this
operator|.
name|sourcePath
decl_stmt|;
name|this
operator|.
name|sourcePath
operator|=
name|sourcePath
expr_stmt|;
return|return
name|orig
return|;
block|}
DECL|method|sourcePath
specifier|public
name|String
name|sourcePath
parameter_list|()
block|{
return|return
name|this
operator|.
name|sourcePath
return|;
block|}
block|}
end_class

end_unit

