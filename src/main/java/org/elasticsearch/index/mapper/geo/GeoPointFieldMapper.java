begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.mapper.geo
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|geo
package|;
end_package

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|ObjectOpenHashSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|cursors
operator|.
name|ObjectCursor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|FieldType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocValuesType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchIllegalStateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|geo
operator|.
name|GeoDistance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|geo
operator|.
name|GeoHashUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|geo
operator|.
name|GeoPoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|geo
operator|.
name|GeoUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|DistanceUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|ByteUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|support
operator|.
name|XContentMapValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|NamedAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|FieldDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|ContentPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|FieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|FieldMapperListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|Mapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MapperParsingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MergeContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MergeMappingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|ObjectMapperListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|core
operator|.
name|AbstractFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|core
operator|.
name|DoubleFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|core
operator|.
name|NumberFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|core
operator|.
name|NumberFieldMapper
operator|.
name|CustomNumericDocValuesField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|core
operator|.
name|StringFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|object
operator|.
name|ArrayValueMapperParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|similarity
operator|.
name|SimilarityProvider
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MapperBuilders
operator|.
name|doubleField
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MapperBuilders
operator|.
name|geoPointField
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MapperBuilders
operator|.
name|stringField
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|core
operator|.
name|TypeParsers
operator|.
name|parseField
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|core
operator|.
name|TypeParsers
operator|.
name|parseMultiField
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|core
operator|.
name|TypeParsers
operator|.
name|parsePathType
import|;
end_import

begin_comment
comment|/**  * Parsing: We handle:  *<p/>  * - "field" : "geo_hash"  * - "field" : "lat,lon"  * - "field" : {  * "lat" : 1.1,  * "lon" : 2.1  * }  */
end_comment

begin_class
DECL|class|GeoPointFieldMapper
specifier|public
class|class
name|GeoPointFieldMapper
extends|extends
name|AbstractFieldMapper
argument_list|<
name|GeoPoint
argument_list|>
implements|implements
name|ArrayValueMapperParser
block|{
DECL|field|CONTENT_TYPE
specifier|public
specifier|static
specifier|final
name|String
name|CONTENT_TYPE
init|=
literal|"geo_point"
decl_stmt|;
DECL|class|Names
specifier|public
specifier|static
class|class
name|Names
block|{
DECL|field|LAT
specifier|public
specifier|static
specifier|final
name|String
name|LAT
init|=
literal|"lat"
decl_stmt|;
DECL|field|LAT_SUFFIX
specifier|public
specifier|static
specifier|final
name|String
name|LAT_SUFFIX
init|=
literal|"."
operator|+
name|LAT
decl_stmt|;
DECL|field|LON
specifier|public
specifier|static
specifier|final
name|String
name|LON
init|=
literal|"lon"
decl_stmt|;
DECL|field|LON_SUFFIX
specifier|public
specifier|static
specifier|final
name|String
name|LON_SUFFIX
init|=
literal|"."
operator|+
name|LON
decl_stmt|;
DECL|field|GEOHASH
specifier|public
specifier|static
specifier|final
name|String
name|GEOHASH
init|=
literal|"geohash"
decl_stmt|;
DECL|field|GEOHASH_SUFFIX
specifier|public
specifier|static
specifier|final
name|String
name|GEOHASH_SUFFIX
init|=
literal|"."
operator|+
name|GEOHASH
decl_stmt|;
block|}
DECL|class|Defaults
specifier|public
specifier|static
class|class
name|Defaults
block|{
DECL|field|PATH_TYPE
specifier|public
specifier|static
specifier|final
name|ContentPath
operator|.
name|Type
name|PATH_TYPE
init|=
name|ContentPath
operator|.
name|Type
operator|.
name|FULL
decl_stmt|;
DECL|field|STORE
specifier|public
specifier|static
specifier|final
name|boolean
name|STORE
init|=
literal|false
decl_stmt|;
DECL|field|ENABLE_LATLON
specifier|public
specifier|static
specifier|final
name|boolean
name|ENABLE_LATLON
init|=
literal|false
decl_stmt|;
DECL|field|ENABLE_GEOHASH
specifier|public
specifier|static
specifier|final
name|boolean
name|ENABLE_GEOHASH
init|=
literal|false
decl_stmt|;
DECL|field|ENABLE_GEOHASH_PREFIX
specifier|public
specifier|static
specifier|final
name|boolean
name|ENABLE_GEOHASH_PREFIX
init|=
literal|false
decl_stmt|;
DECL|field|GEO_HASH_PRECISION
specifier|public
specifier|static
specifier|final
name|int
name|GEO_HASH_PRECISION
init|=
name|GeoHashUtils
operator|.
name|PRECISION
decl_stmt|;
DECL|field|NORMALIZE_LAT
specifier|public
specifier|static
specifier|final
name|boolean
name|NORMALIZE_LAT
init|=
literal|true
decl_stmt|;
DECL|field|NORMALIZE_LON
specifier|public
specifier|static
specifier|final
name|boolean
name|NORMALIZE_LON
init|=
literal|true
decl_stmt|;
DECL|field|VALIDATE_LAT
specifier|public
specifier|static
specifier|final
name|boolean
name|VALIDATE_LAT
init|=
literal|true
decl_stmt|;
DECL|field|VALIDATE_LON
specifier|public
specifier|static
specifier|final
name|boolean
name|VALIDATE_LON
init|=
literal|true
decl_stmt|;
DECL|field|FIELD_TYPE
specifier|public
specifier|static
specifier|final
name|FieldType
name|FIELD_TYPE
init|=
operator|new
name|FieldType
argument_list|(
name|StringFieldMapper
operator|.
name|Defaults
operator|.
name|FIELD_TYPE
argument_list|)
decl_stmt|;
static|static
block|{
name|FIELD_TYPE
operator|.
name|setIndexOptions
argument_list|(
name|IndexOptions
operator|.
name|DOCS
argument_list|)
expr_stmt|;
name|FIELD_TYPE
operator|.
name|setTokenized
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|FIELD_TYPE
operator|.
name|setOmitNorms
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|FIELD_TYPE
operator|.
name|freeze
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|Builder
specifier|public
specifier|static
class|class
name|Builder
extends|extends
name|AbstractFieldMapper
operator|.
name|Builder
argument_list|<
name|Builder
argument_list|,
name|GeoPointFieldMapper
argument_list|>
block|{
DECL|field|pathType
specifier|private
name|ContentPath
operator|.
name|Type
name|pathType
init|=
name|Defaults
operator|.
name|PATH_TYPE
decl_stmt|;
DECL|field|enableGeoHash
specifier|private
name|boolean
name|enableGeoHash
init|=
name|Defaults
operator|.
name|ENABLE_GEOHASH
decl_stmt|;
DECL|field|enableGeohashPrefix
specifier|private
name|boolean
name|enableGeohashPrefix
init|=
name|Defaults
operator|.
name|ENABLE_GEOHASH_PREFIX
decl_stmt|;
DECL|field|enableLatLon
specifier|private
name|boolean
name|enableLatLon
init|=
name|Defaults
operator|.
name|ENABLE_LATLON
decl_stmt|;
DECL|field|precisionStep
specifier|private
name|Integer
name|precisionStep
decl_stmt|;
DECL|field|geoHashPrecision
specifier|private
name|int
name|geoHashPrecision
init|=
name|Defaults
operator|.
name|GEO_HASH_PRECISION
decl_stmt|;
DECL|field|validateLat
name|boolean
name|validateLat
init|=
name|Defaults
operator|.
name|VALIDATE_LAT
decl_stmt|;
DECL|field|validateLon
name|boolean
name|validateLon
init|=
name|Defaults
operator|.
name|VALIDATE_LON
decl_stmt|;
DECL|field|normalizeLat
name|boolean
name|normalizeLat
init|=
name|Defaults
operator|.
name|NORMALIZE_LAT
decl_stmt|;
DECL|field|normalizeLon
name|boolean
name|normalizeLon
init|=
name|Defaults
operator|.
name|NORMALIZE_LON
decl_stmt|;
DECL|method|Builder
specifier|public
name|Builder
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
operator|new
name|FieldType
argument_list|(
name|Defaults
operator|.
name|FIELD_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|builder
operator|=
name|this
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|multiFieldPathType
specifier|public
name|Builder
name|multiFieldPathType
parameter_list|(
name|ContentPath
operator|.
name|Type
name|pathType
parameter_list|)
block|{
name|this
operator|.
name|pathType
operator|=
name|pathType
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|enableGeoHash
specifier|public
name|Builder
name|enableGeoHash
parameter_list|(
name|boolean
name|enableGeoHash
parameter_list|)
block|{
name|this
operator|.
name|enableGeoHash
operator|=
name|enableGeoHash
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|geohashPrefix
specifier|public
name|Builder
name|geohashPrefix
parameter_list|(
name|boolean
name|enableGeohashPrefix
parameter_list|)
block|{
name|this
operator|.
name|enableGeohashPrefix
operator|=
name|enableGeohashPrefix
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|enableLatLon
specifier|public
name|Builder
name|enableLatLon
parameter_list|(
name|boolean
name|enableLatLon
parameter_list|)
block|{
name|this
operator|.
name|enableLatLon
operator|=
name|enableLatLon
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|precisionStep
specifier|public
name|Builder
name|precisionStep
parameter_list|(
name|int
name|precisionStep
parameter_list|)
block|{
name|this
operator|.
name|precisionStep
operator|=
name|precisionStep
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|geoHashPrecision
specifier|public
name|Builder
name|geoHashPrecision
parameter_list|(
name|int
name|precision
parameter_list|)
block|{
name|this
operator|.
name|geoHashPrecision
operator|=
name|precision
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|fieldDataSettings
specifier|public
name|Builder
name|fieldDataSettings
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
name|this
operator|.
name|fieldDataSettings
operator|=
name|settings
expr_stmt|;
return|return
name|builder
return|;
block|}
annotation|@
name|Override
DECL|method|build
specifier|public
name|GeoPointFieldMapper
name|build
parameter_list|(
name|BuilderContext
name|context
parameter_list|)
block|{
name|ContentPath
operator|.
name|Type
name|origPathType
init|=
name|context
operator|.
name|path
argument_list|()
operator|.
name|pathType
argument_list|()
decl_stmt|;
name|context
operator|.
name|path
argument_list|()
operator|.
name|pathType
argument_list|(
name|pathType
argument_list|)
expr_stmt|;
name|DoubleFieldMapper
name|latMapper
init|=
literal|null
decl_stmt|;
name|DoubleFieldMapper
name|lonMapper
init|=
literal|null
decl_stmt|;
name|context
operator|.
name|path
argument_list|()
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|enableLatLon
condition|)
block|{
name|NumberFieldMapper
operator|.
name|Builder
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|latMapperBuilder
init|=
name|doubleField
argument_list|(
name|Names
operator|.
name|LAT
argument_list|)
operator|.
name|includeInAll
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|NumberFieldMapper
operator|.
name|Builder
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|lonMapperBuilder
init|=
name|doubleField
argument_list|(
name|Names
operator|.
name|LON
argument_list|)
operator|.
name|includeInAll
argument_list|(
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|precisionStep
operator|!=
literal|null
condition|)
block|{
name|latMapperBuilder
operator|.
name|precisionStep
argument_list|(
name|precisionStep
argument_list|)
expr_stmt|;
name|lonMapperBuilder
operator|.
name|precisionStep
argument_list|(
name|precisionStep
argument_list|)
expr_stmt|;
block|}
name|latMapper
operator|=
operator|(
name|DoubleFieldMapper
operator|)
name|latMapperBuilder
operator|.
name|includeInAll
argument_list|(
literal|false
argument_list|)
operator|.
name|store
argument_list|(
name|fieldType
operator|.
name|stored
argument_list|()
argument_list|)
operator|.
name|docValues
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|lonMapper
operator|=
operator|(
name|DoubleFieldMapper
operator|)
name|lonMapperBuilder
operator|.
name|includeInAll
argument_list|(
literal|false
argument_list|)
operator|.
name|store
argument_list|(
name|fieldType
operator|.
name|stored
argument_list|()
argument_list|)
operator|.
name|docValues
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
name|StringFieldMapper
name|geohashMapper
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|enableGeoHash
condition|)
block|{
name|geohashMapper
operator|=
name|stringField
argument_list|(
name|Names
operator|.
name|GEOHASH
argument_list|)
operator|.
name|index
argument_list|(
literal|true
argument_list|)
operator|.
name|tokenized
argument_list|(
literal|false
argument_list|)
operator|.
name|includeInAll
argument_list|(
literal|false
argument_list|)
operator|.
name|omitNorms
argument_list|(
literal|true
argument_list|)
operator|.
name|indexOptions
argument_list|(
name|IndexOptions
operator|.
name|DOCS
argument_list|)
operator|.
name|build
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
name|context
operator|.
name|path
argument_list|()
operator|.
name|remove
argument_list|()
expr_stmt|;
name|context
operator|.
name|path
argument_list|()
operator|.
name|pathType
argument_list|(
name|origPathType
argument_list|)
expr_stmt|;
comment|// this is important: even if geo points feel like they need to be tokenized to distinguish lat from lon, we actually want to
comment|// store them as a single token.
name|fieldType
operator|.
name|setTokenized
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
operator|new
name|GeoPointFieldMapper
argument_list|(
name|buildNames
argument_list|(
name|context
argument_list|)
argument_list|,
name|fieldType
argument_list|,
name|docValues
argument_list|,
name|indexAnalyzer
argument_list|,
name|searchAnalyzer
argument_list|,
name|similarity
argument_list|,
name|fieldDataSettings
argument_list|,
name|context
operator|.
name|indexSettings
argument_list|()
argument_list|,
name|origPathType
argument_list|,
name|enableLatLon
argument_list|,
name|enableGeoHash
argument_list|,
name|enableGeohashPrefix
argument_list|,
name|precisionStep
argument_list|,
name|geoHashPrecision
argument_list|,
name|latMapper
argument_list|,
name|lonMapper
argument_list|,
name|geohashMapper
argument_list|,
name|validateLon
argument_list|,
name|validateLat
argument_list|,
name|normalizeLon
argument_list|,
name|normalizeLat
argument_list|,
name|multiFieldsBuilder
operator|.
name|build
argument_list|(
name|this
argument_list|,
name|context
argument_list|)
argument_list|)
return|;
block|}
block|}
DECL|class|TypeParser
specifier|public
specifier|static
class|class
name|TypeParser
implements|implements
name|Mapper
operator|.
name|TypeParser
block|{
annotation|@
name|Override
DECL|method|parse
specifier|public
name|Mapper
operator|.
name|Builder
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|parse
parameter_list|(
name|String
name|name
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|node
parameter_list|,
name|ParserContext
name|parserContext
parameter_list|)
throws|throws
name|MapperParsingException
block|{
name|Builder
name|builder
init|=
name|geoPointField
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|parseField
argument_list|(
name|builder
argument_list|,
name|name
argument_list|,
name|node
argument_list|,
name|parserContext
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|iterator
init|=
name|node
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iterator
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|fieldName
init|=
name|Strings
operator|.
name|toUnderscoreCase
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|Object
name|fieldNode
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|fieldName
operator|.
name|equals
argument_list|(
literal|"path"
argument_list|)
operator|&&
name|parserContext
operator|.
name|indexVersionCreated
argument_list|()
operator|.
name|before
argument_list|(
name|Version
operator|.
name|V_2_0_0
argument_list|)
condition|)
block|{
name|builder
operator|.
name|multiFieldPathType
argument_list|(
name|parsePathType
argument_list|(
name|name
argument_list|,
name|fieldNode
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fieldName
operator|.
name|equals
argument_list|(
literal|"lat_lon"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|enableLatLon
argument_list|(
name|XContentMapValues
operator|.
name|nodeBooleanValue
argument_list|(
name|fieldNode
argument_list|)
argument_list|)
expr_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fieldName
operator|.
name|equals
argument_list|(
literal|"geohash"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|enableGeoHash
argument_list|(
name|XContentMapValues
operator|.
name|nodeBooleanValue
argument_list|(
name|fieldNode
argument_list|)
argument_list|)
expr_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fieldName
operator|.
name|equals
argument_list|(
literal|"geohash_prefix"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|geohashPrefix
argument_list|(
name|XContentMapValues
operator|.
name|nodeBooleanValue
argument_list|(
name|fieldNode
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|XContentMapValues
operator|.
name|nodeBooleanValue
argument_list|(
name|fieldNode
argument_list|)
condition|)
block|{
name|builder
operator|.
name|enableGeoHash
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fieldName
operator|.
name|equals
argument_list|(
literal|"precision_step"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|precisionStep
argument_list|(
name|XContentMapValues
operator|.
name|nodeIntegerValue
argument_list|(
name|fieldNode
argument_list|)
argument_list|)
expr_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fieldName
operator|.
name|equals
argument_list|(
literal|"geohash_precision"
argument_list|)
condition|)
block|{
if|if
condition|(
name|fieldNode
operator|instanceof
name|Integer
condition|)
block|{
name|builder
operator|.
name|geoHashPrecision
argument_list|(
name|XContentMapValues
operator|.
name|nodeIntegerValue
argument_list|(
name|fieldNode
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|geoHashPrecision
argument_list|(
name|GeoUtils
operator|.
name|geoHashLevelsForPrecision
argument_list|(
name|fieldNode
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fieldName
operator|.
name|equals
argument_list|(
literal|"validate"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|validateLat
operator|=
name|XContentMapValues
operator|.
name|nodeBooleanValue
argument_list|(
name|fieldNode
argument_list|)
expr_stmt|;
name|builder
operator|.
name|validateLon
operator|=
name|XContentMapValues
operator|.
name|nodeBooleanValue
argument_list|(
name|fieldNode
argument_list|)
expr_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fieldName
operator|.
name|equals
argument_list|(
literal|"validate_lon"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|validateLon
operator|=
name|XContentMapValues
operator|.
name|nodeBooleanValue
argument_list|(
name|fieldNode
argument_list|)
expr_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fieldName
operator|.
name|equals
argument_list|(
literal|"validate_lat"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|validateLat
operator|=
name|XContentMapValues
operator|.
name|nodeBooleanValue
argument_list|(
name|fieldNode
argument_list|)
expr_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fieldName
operator|.
name|equals
argument_list|(
literal|"normalize"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|normalizeLat
operator|=
name|XContentMapValues
operator|.
name|nodeBooleanValue
argument_list|(
name|fieldNode
argument_list|)
expr_stmt|;
name|builder
operator|.
name|normalizeLon
operator|=
name|XContentMapValues
operator|.
name|nodeBooleanValue
argument_list|(
name|fieldNode
argument_list|)
expr_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fieldName
operator|.
name|equals
argument_list|(
literal|"normalize_lat"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|normalizeLat
operator|=
name|XContentMapValues
operator|.
name|nodeBooleanValue
argument_list|(
name|fieldNode
argument_list|)
expr_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fieldName
operator|.
name|equals
argument_list|(
literal|"normalize_lon"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|normalizeLon
operator|=
name|XContentMapValues
operator|.
name|nodeBooleanValue
argument_list|(
name|fieldNode
argument_list|)
expr_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parseMultiField
argument_list|(
name|builder
argument_list|,
name|name
argument_list|,
name|parserContext
argument_list|,
name|fieldName
argument_list|,
name|fieldNode
argument_list|)
condition|)
block|{
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|builder
return|;
block|}
block|}
comment|/**      * A byte-aligned fixed-length encoding for latitudes and longitudes.      */
DECL|class|Encoding
specifier|public
specifier|static
specifier|final
class|class
name|Encoding
block|{
comment|// With 14 bytes we already have better precision than a double since a double has 11 bits of exponent
DECL|field|MAX_NUM_BYTES
specifier|private
specifier|static
specifier|final
name|int
name|MAX_NUM_BYTES
init|=
literal|14
decl_stmt|;
DECL|field|INSTANCES
specifier|private
specifier|static
specifier|final
name|Encoding
index|[]
name|INSTANCES
decl_stmt|;
static|static
block|{
name|INSTANCES
operator|=
operator|new
name|Encoding
index|[
name|MAX_NUM_BYTES
operator|+
literal|1
index|]
expr_stmt|;
for|for
control|(
name|int
name|numBytes
init|=
literal|2
init|;
name|numBytes
operator|<=
name|MAX_NUM_BYTES
condition|;
name|numBytes
operator|+=
literal|2
control|)
block|{
name|INSTANCES
index|[
name|numBytes
index|]
operator|=
operator|new
name|Encoding
argument_list|(
name|numBytes
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Get an instance based on the number of bytes that has been used to encode values. */
DECL|method|of
specifier|public
specifier|static
specifier|final
name|Encoding
name|of
parameter_list|(
name|int
name|numBytesPerValue
parameter_list|)
block|{
specifier|final
name|Encoding
name|instance
init|=
name|INSTANCES
index|[
name|numBytesPerValue
index|]
decl_stmt|;
if|if
condition|(
name|instance
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ElasticsearchIllegalStateException
argument_list|(
literal|"No encoding for "
operator|+
name|numBytesPerValue
operator|+
literal|" bytes per value"
argument_list|)
throw|;
block|}
return|return
name|instance
return|;
block|}
comment|/** Get an instance based on the expected precision. Here are examples of the number of required bytes per value depending on the          *  expected precision:<ul>          *<li>1km: 4 bytes</li>          *<li>3m: 6 bytes</li>          *<li>1m: 8 bytes</li>          *<li>1cm: 8 bytes</li>          *<li>1mm: 10 bytes</li></ul> */
DECL|method|of
specifier|public
specifier|static
specifier|final
name|Encoding
name|of
parameter_list|(
name|DistanceUnit
operator|.
name|Distance
name|precision
parameter_list|)
block|{
for|for
control|(
name|Encoding
name|encoding
range|:
name|INSTANCES
control|)
block|{
if|if
condition|(
name|encoding
operator|!=
literal|null
operator|&&
name|encoding
operator|.
name|precision
argument_list|()
operator|.
name|compareTo
argument_list|(
name|precision
argument_list|)
operator|<=
literal|0
condition|)
block|{
return|return
name|encoding
return|;
block|}
block|}
return|return
name|INSTANCES
index|[
name|MAX_NUM_BYTES
index|]
return|;
block|}
DECL|field|precision
specifier|private
specifier|final
name|DistanceUnit
operator|.
name|Distance
name|precision
decl_stmt|;
DECL|field|numBytes
specifier|private
specifier|final
name|int
name|numBytes
decl_stmt|;
DECL|field|numBytesPerCoordinate
specifier|private
specifier|final
name|int
name|numBytesPerCoordinate
decl_stmt|;
DECL|field|factor
specifier|private
specifier|final
name|double
name|factor
decl_stmt|;
DECL|method|Encoding
specifier|private
name|Encoding
parameter_list|(
name|int
name|numBytes
parameter_list|)
block|{
assert|assert
name|numBytes
operator|>=
literal|1
operator|&&
name|numBytes
operator|<=
name|MAX_NUM_BYTES
assert|;
assert|assert
operator|(
name|numBytes
operator|&
literal|1
operator|)
operator|==
literal|0
assert|;
comment|// we don't support odd numBytes for the moment
name|this
operator|.
name|numBytes
operator|=
name|numBytes
expr_stmt|;
name|this
operator|.
name|numBytesPerCoordinate
operator|=
name|numBytes
operator|/
literal|2
expr_stmt|;
name|this
operator|.
name|factor
operator|=
name|Math
operator|.
name|pow
argument_list|(
literal|2
argument_list|,
operator|-
name|numBytesPerCoordinate
operator|*
literal|8
operator|+
literal|9
argument_list|)
expr_stmt|;
assert|assert
operator|(
literal|1L
operator|<<
operator|(
name|numBytesPerCoordinate
operator|*
literal|8
operator|-
literal|1
operator|)
operator|)
operator|*
name|factor
operator|>
literal|180
operator|&&
operator|(
literal|1L
operator|<<
operator|(
name|numBytesPerCoordinate
operator|*
literal|8
operator|-
literal|2
operator|)
operator|)
operator|*
name|factor
operator|<
literal|180
operator|:
name|numBytesPerCoordinate
operator|+
literal|" "
operator|+
name|factor
assert|;
if|if
condition|(
name|numBytes
operator|==
name|MAX_NUM_BYTES
condition|)
block|{
comment|// no precision loss compared to a double
name|precision
operator|=
operator|new
name|DistanceUnit
operator|.
name|Distance
argument_list|(
literal|0
argument_list|,
name|DistanceUnit
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|precision
operator|=
operator|new
name|DistanceUnit
operator|.
name|Distance
argument_list|(
name|GeoDistance
operator|.
name|PLANE
operator|.
name|calculate
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|factor
operator|/
literal|2
argument_list|,
name|factor
operator|/
literal|2
argument_list|,
name|DistanceUnit
operator|.
name|DEFAULT
argument_list|)
argument_list|,
comment|// factor/2 because we use Math.round instead of a cast to convert the double to a long
name|DistanceUnit
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|precision
specifier|public
name|DistanceUnit
operator|.
name|Distance
name|precision
parameter_list|()
block|{
return|return
name|precision
return|;
block|}
comment|/** The number of bytes required to encode a single geo point. */
DECL|method|numBytes
specifier|public
specifier|final
name|int
name|numBytes
parameter_list|()
block|{
return|return
name|numBytes
return|;
block|}
comment|/** The number of bits required to encode a single coordinate of a geo point. */
DECL|method|numBitsPerCoordinate
specifier|public
name|int
name|numBitsPerCoordinate
parameter_list|()
block|{
return|return
name|numBytesPerCoordinate
operator|<<
literal|3
return|;
block|}
comment|/** Return the bits that encode a latitude/longitude. */
DECL|method|encodeCoordinate
specifier|public
name|long
name|encodeCoordinate
parameter_list|(
name|double
name|lat
parameter_list|)
block|{
return|return
name|Math
operator|.
name|round
argument_list|(
operator|(
name|lat
operator|+
literal|180
operator|)
operator|/
name|factor
argument_list|)
return|;
block|}
comment|/** Decode a sequence of bits into the original coordinate. */
DECL|method|decodeCoordinate
specifier|public
name|double
name|decodeCoordinate
parameter_list|(
name|long
name|bits
parameter_list|)
block|{
return|return
name|bits
operator|*
name|factor
operator|-
literal|180
return|;
block|}
DECL|method|encodeBits
specifier|private
name|void
name|encodeBits
parameter_list|(
name|long
name|bits
parameter_list|,
name|byte
index|[]
name|out
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numBytesPerCoordinate
condition|;
operator|++
name|i
control|)
block|{
name|out
index|[
name|offset
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
name|bits
expr_stmt|;
name|bits
operator|>>>=
literal|8
expr_stmt|;
block|}
assert|assert
name|bits
operator|==
literal|0
assert|;
block|}
DECL|method|decodeBits
specifier|private
name|long
name|decodeBits
parameter_list|(
name|byte
index|[]
name|in
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
name|long
name|r
init|=
name|in
index|[
name|offset
operator|++
index|]
operator|&
literal|0xFFL
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|numBytesPerCoordinate
condition|;
operator|++
name|i
control|)
block|{
name|r
operator|=
operator|(
name|in
index|[
name|offset
operator|++
index|]
operator|&
literal|0xFFL
operator|)
operator|<<
operator|(
name|i
operator|*
literal|8
operator|)
expr_stmt|;
block|}
return|return
name|r
return|;
block|}
comment|/** Encode a geo point into a byte-array, over {@link #numBytes()} bytes. */
DECL|method|encode
specifier|public
name|void
name|encode
parameter_list|(
name|double
name|lat
parameter_list|,
name|double
name|lon
parameter_list|,
name|byte
index|[]
name|out
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
name|encodeBits
argument_list|(
name|encodeCoordinate
argument_list|(
name|lat
argument_list|)
argument_list|,
name|out
argument_list|,
name|offset
argument_list|)
expr_stmt|;
name|encodeBits
argument_list|(
name|encodeCoordinate
argument_list|(
name|lon
argument_list|)
argument_list|,
name|out
argument_list|,
name|offset
operator|+
name|numBytesPerCoordinate
argument_list|)
expr_stmt|;
block|}
comment|/** Decode a geo point from a byte-array, reading {@link #numBytes()} bytes. */
DECL|method|decode
specifier|public
name|GeoPoint
name|decode
parameter_list|(
name|byte
index|[]
name|in
parameter_list|,
name|int
name|offset
parameter_list|,
name|GeoPoint
name|out
parameter_list|)
block|{
specifier|final
name|long
name|latBits
init|=
name|decodeBits
argument_list|(
name|in
argument_list|,
name|offset
argument_list|)
decl_stmt|;
specifier|final
name|long
name|lonBits
init|=
name|decodeBits
argument_list|(
name|in
argument_list|,
name|offset
operator|+
name|numBytesPerCoordinate
argument_list|)
decl_stmt|;
return|return
name|decode
argument_list|(
name|latBits
argument_list|,
name|lonBits
argument_list|,
name|out
argument_list|)
return|;
block|}
comment|/** Decode a geo point from the bits of the encoded latitude and longitudes. */
DECL|method|decode
specifier|public
name|GeoPoint
name|decode
parameter_list|(
name|long
name|latBits
parameter_list|,
name|long
name|lonBits
parameter_list|,
name|GeoPoint
name|out
parameter_list|)
block|{
specifier|final
name|double
name|lat
init|=
name|decodeCoordinate
argument_list|(
name|latBits
argument_list|)
decl_stmt|;
specifier|final
name|double
name|lon
init|=
name|decodeCoordinate
argument_list|(
name|lonBits
argument_list|)
decl_stmt|;
return|return
name|out
operator|.
name|reset
argument_list|(
name|lat
argument_list|,
name|lon
argument_list|)
return|;
block|}
block|}
DECL|field|pathType
specifier|private
specifier|final
name|ContentPath
operator|.
name|Type
name|pathType
decl_stmt|;
DECL|field|enableLatLon
specifier|private
specifier|final
name|boolean
name|enableLatLon
decl_stmt|;
DECL|field|enableGeoHash
specifier|private
specifier|final
name|boolean
name|enableGeoHash
decl_stmt|;
DECL|field|enableGeohashPrefix
specifier|private
specifier|final
name|boolean
name|enableGeohashPrefix
decl_stmt|;
DECL|field|precisionStep
specifier|private
specifier|final
name|Integer
name|precisionStep
decl_stmt|;
DECL|field|geoHashPrecision
specifier|private
specifier|final
name|int
name|geoHashPrecision
decl_stmt|;
DECL|field|latMapper
specifier|private
specifier|final
name|DoubleFieldMapper
name|latMapper
decl_stmt|;
DECL|field|lonMapper
specifier|private
specifier|final
name|DoubleFieldMapper
name|lonMapper
decl_stmt|;
DECL|field|geohashMapper
specifier|private
specifier|final
name|StringFieldMapper
name|geohashMapper
decl_stmt|;
DECL|field|validateLon
specifier|private
name|boolean
name|validateLon
decl_stmt|;
DECL|field|validateLat
specifier|private
name|boolean
name|validateLat
decl_stmt|;
DECL|field|normalizeLon
specifier|private
specifier|final
name|boolean
name|normalizeLon
decl_stmt|;
DECL|field|normalizeLat
specifier|private
specifier|final
name|boolean
name|normalizeLat
decl_stmt|;
DECL|method|GeoPointFieldMapper
specifier|public
name|GeoPointFieldMapper
parameter_list|(
name|FieldMapper
operator|.
name|Names
name|names
parameter_list|,
name|FieldType
name|fieldType
parameter_list|,
name|Boolean
name|docValues
parameter_list|,
name|NamedAnalyzer
name|indexAnalyzer
parameter_list|,
name|NamedAnalyzer
name|searchAnalyzer
parameter_list|,
name|SimilarityProvider
name|similarity
parameter_list|,
annotation|@
name|Nullable
name|Settings
name|fieldDataSettings
parameter_list|,
name|Settings
name|indexSettings
parameter_list|,
name|ContentPath
operator|.
name|Type
name|pathType
parameter_list|,
name|boolean
name|enableLatLon
parameter_list|,
name|boolean
name|enableGeoHash
parameter_list|,
name|boolean
name|enableGeohashPrefix
parameter_list|,
name|Integer
name|precisionStep
parameter_list|,
name|int
name|geoHashPrecision
parameter_list|,
name|DoubleFieldMapper
name|latMapper
parameter_list|,
name|DoubleFieldMapper
name|lonMapper
parameter_list|,
name|StringFieldMapper
name|geohashMapper
parameter_list|,
name|boolean
name|validateLon
parameter_list|,
name|boolean
name|validateLat
parameter_list|,
name|boolean
name|normalizeLon
parameter_list|,
name|boolean
name|normalizeLat
parameter_list|,
name|MultiFields
name|multiFields
parameter_list|)
block|{
name|super
argument_list|(
name|names
argument_list|,
literal|1f
argument_list|,
name|fieldType
argument_list|,
name|docValues
argument_list|,
literal|null
argument_list|,
name|indexAnalyzer
argument_list|,
name|similarity
argument_list|,
literal|null
argument_list|,
name|fieldDataSettings
argument_list|,
name|indexSettings
argument_list|,
name|multiFields
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|pathType
operator|=
name|pathType
expr_stmt|;
name|this
operator|.
name|enableLatLon
operator|=
name|enableLatLon
expr_stmt|;
name|this
operator|.
name|enableGeoHash
operator|=
name|enableGeoHash
operator|||
name|enableGeohashPrefix
expr_stmt|;
comment|// implicitly enable geohashes if geohash_prefix is set
name|this
operator|.
name|enableGeohashPrefix
operator|=
name|enableGeohashPrefix
expr_stmt|;
name|this
operator|.
name|precisionStep
operator|=
name|precisionStep
expr_stmt|;
name|this
operator|.
name|geoHashPrecision
operator|=
name|geoHashPrecision
expr_stmt|;
name|this
operator|.
name|latMapper
operator|=
name|latMapper
expr_stmt|;
name|this
operator|.
name|lonMapper
operator|=
name|lonMapper
expr_stmt|;
name|this
operator|.
name|geohashMapper
operator|=
name|geohashMapper
expr_stmt|;
name|this
operator|.
name|validateLat
operator|=
name|validateLat
expr_stmt|;
name|this
operator|.
name|validateLon
operator|=
name|validateLon
expr_stmt|;
name|this
operator|.
name|normalizeLat
operator|=
name|normalizeLat
expr_stmt|;
name|this
operator|.
name|normalizeLon
operator|=
name|normalizeLon
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|contentType
specifier|protected
name|String
name|contentType
parameter_list|()
block|{
return|return
name|CONTENT_TYPE
return|;
block|}
annotation|@
name|Override
DECL|method|defaultFieldType
specifier|public
name|FieldType
name|defaultFieldType
parameter_list|()
block|{
return|return
name|Defaults
operator|.
name|FIELD_TYPE
return|;
block|}
annotation|@
name|Override
DECL|method|defaultFieldDataType
specifier|public
name|FieldDataType
name|defaultFieldDataType
parameter_list|()
block|{
return|return
operator|new
name|FieldDataType
argument_list|(
literal|"geo_point"
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|defaultDocValues
specifier|protected
name|boolean
name|defaultDocValues
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
DECL|method|latMapper
specifier|public
name|DoubleFieldMapper
name|latMapper
parameter_list|()
block|{
return|return
name|latMapper
return|;
block|}
DECL|method|lonMapper
specifier|public
name|DoubleFieldMapper
name|lonMapper
parameter_list|()
block|{
return|return
name|lonMapper
return|;
block|}
DECL|method|geoHashStringMapper
specifier|public
name|StringFieldMapper
name|geoHashStringMapper
parameter_list|()
block|{
return|return
name|this
operator|.
name|geohashMapper
return|;
block|}
DECL|method|geoHashPrecision
name|int
name|geoHashPrecision
parameter_list|()
block|{
return|return
name|geoHashPrecision
return|;
block|}
DECL|method|isEnableLatLon
specifier|public
name|boolean
name|isEnableLatLon
parameter_list|()
block|{
return|return
name|enableLatLon
return|;
block|}
DECL|method|isEnableGeohashPrefix
specifier|public
name|boolean
name|isEnableGeohashPrefix
parameter_list|()
block|{
return|return
name|enableGeohashPrefix
return|;
block|}
annotation|@
name|Override
DECL|method|value
specifier|public
name|GeoPoint
name|value
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|instanceof
name|GeoPoint
condition|)
block|{
return|return
operator|(
name|GeoPoint
operator|)
name|value
return|;
block|}
else|else
block|{
return|return
name|GeoPoint
operator|.
name|parseFromLatLon
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|parseCreateField
specifier|protected
name|void
name|parseCreateField
parameter_list|(
name|ParseContext
name|context
parameter_list|,
name|List
argument_list|<
name|Field
argument_list|>
name|fields
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Parsing is implemented in parse(), this method should NEVER be called"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|parse
specifier|public
name|Mapper
name|parse
parameter_list|(
name|ParseContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|ContentPath
operator|.
name|Type
name|origPathType
init|=
name|context
operator|.
name|path
argument_list|()
operator|.
name|pathType
argument_list|()
decl_stmt|;
name|context
operator|.
name|path
argument_list|()
operator|.
name|pathType
argument_list|(
name|pathType
argument_list|)
expr_stmt|;
name|context
operator|.
name|path
argument_list|()
operator|.
name|add
argument_list|(
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|GeoPoint
name|sparse
init|=
name|context
operator|.
name|parseExternalValue
argument_list|(
name|GeoPoint
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|sparse
operator|!=
literal|null
condition|)
block|{
name|parse
argument_list|(
name|context
argument_list|,
name|sparse
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sparse
operator|=
operator|new
name|GeoPoint
argument_list|()
expr_stmt|;
name|XContentParser
operator|.
name|Token
name|token
init|=
name|context
operator|.
name|parser
argument_list|()
operator|.
name|currentToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_ARRAY
condition|)
block|{
name|token
operator|=
name|context
operator|.
name|parser
argument_list|()
operator|.
name|nextToken
argument_list|()
expr_stmt|;
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_ARRAY
condition|)
block|{
comment|// its an array of array of lon/lat [ [1.2, 1.3], [1.4, 1.5] ]
while|while
condition|(
name|token
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_ARRAY
condition|)
block|{
name|parse
argument_list|(
name|context
argument_list|,
name|GeoUtils
operator|.
name|parseGeoPoint
argument_list|(
name|context
operator|.
name|parser
argument_list|()
argument_list|,
name|sparse
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|token
operator|=
name|context
operator|.
name|parser
argument_list|()
operator|.
name|nextToken
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// its an array of other possible values
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_NUMBER
condition|)
block|{
name|double
name|lon
init|=
name|context
operator|.
name|parser
argument_list|()
operator|.
name|doubleValue
argument_list|()
decl_stmt|;
name|token
operator|=
name|context
operator|.
name|parser
argument_list|()
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|double
name|lat
init|=
name|context
operator|.
name|parser
argument_list|()
operator|.
name|doubleValue
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|token
operator|=
name|context
operator|.
name|parser
argument_list|()
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_ARRAY
condition|)
block|{                          }
name|parse
argument_list|(
name|context
argument_list|,
name|sparse
operator|.
name|reset
argument_list|(
name|lat
argument_list|,
name|lon
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
while|while
condition|(
name|token
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_ARRAY
condition|)
block|{
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_STRING
condition|)
block|{
name|parsePointFromString
argument_list|(
name|context
argument_list|,
name|sparse
argument_list|,
name|context
operator|.
name|parser
argument_list|()
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|parse
argument_list|(
name|context
argument_list|,
name|GeoUtils
operator|.
name|parseGeoPoint
argument_list|(
name|context
operator|.
name|parser
argument_list|()
argument_list|,
name|sparse
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|token
operator|=
name|context
operator|.
name|parser
argument_list|()
operator|.
name|nextToken
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_STRING
condition|)
block|{
name|parsePointFromString
argument_list|(
name|context
argument_list|,
name|sparse
argument_list|,
name|context
operator|.
name|parser
argument_list|()
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_NULL
condition|)
block|{
name|parse
argument_list|(
name|context
argument_list|,
name|GeoUtils
operator|.
name|parseGeoPoint
argument_list|(
name|context
operator|.
name|parser
argument_list|()
argument_list|,
name|sparse
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
name|context
operator|.
name|path
argument_list|()
operator|.
name|remove
argument_list|()
expr_stmt|;
name|context
operator|.
name|path
argument_list|()
operator|.
name|pathType
argument_list|(
name|origPathType
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
DECL|method|parseGeohashField
specifier|private
name|void
name|parseGeohashField
parameter_list|(
name|ParseContext
name|context
parameter_list|,
name|String
name|geohash
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|len
init|=
name|Math
operator|.
name|min
argument_list|(
name|geoHashPrecision
argument_list|,
name|geohash
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|min
init|=
name|enableGeohashPrefix
condition|?
literal|1
else|:
name|geohash
operator|.
name|length
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|len
init|;
name|i
operator|>=
name|min
condition|;
name|i
operator|--
control|)
block|{
comment|// side effect of this call is adding the field
name|geohashMapper
operator|.
name|parse
argument_list|(
name|context
operator|.
name|createExternalValueContext
argument_list|(
name|geohash
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|parsePointFromString
specifier|private
name|void
name|parsePointFromString
parameter_list|(
name|ParseContext
name|context
parameter_list|,
name|GeoPoint
name|sparse
parameter_list|,
name|String
name|point
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|point
operator|.
name|indexOf
argument_list|(
literal|','
argument_list|)
operator|<
literal|0
condition|)
block|{
name|parse
argument_list|(
name|context
argument_list|,
name|sparse
operator|.
name|resetFromGeoHash
argument_list|(
name|point
argument_list|)
argument_list|,
name|point
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|parse
argument_list|(
name|context
argument_list|,
name|sparse
operator|.
name|resetFromString
argument_list|(
name|point
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|parse
specifier|private
name|void
name|parse
parameter_list|(
name|ParseContext
name|context
parameter_list|,
name|GeoPoint
name|point
parameter_list|,
name|String
name|geohash
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|normalizeLat
operator|||
name|normalizeLon
condition|)
block|{
name|GeoUtils
operator|.
name|normalizePoint
argument_list|(
name|point
argument_list|,
name|normalizeLat
argument_list|,
name|normalizeLon
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|validateLat
condition|)
block|{
if|if
condition|(
name|point
operator|.
name|lat
argument_list|()
operator|>
literal|90.0
operator|||
name|point
operator|.
name|lat
argument_list|()
operator|<
operator|-
literal|90.0
condition|)
block|{
throw|throw
operator|new
name|ElasticsearchIllegalArgumentException
argument_list|(
literal|"illegal latitude value ["
operator|+
name|point
operator|.
name|lat
argument_list|()
operator|+
literal|"] for "
operator|+
name|name
argument_list|()
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|validateLon
condition|)
block|{
if|if
condition|(
name|point
operator|.
name|lon
argument_list|()
operator|>
literal|180.0
operator|||
name|point
operator|.
name|lon
argument_list|()
operator|<
operator|-
literal|180
condition|)
block|{
throw|throw
operator|new
name|ElasticsearchIllegalArgumentException
argument_list|(
literal|"illegal longitude value ["
operator|+
name|point
operator|.
name|lon
argument_list|()
operator|+
literal|"] for "
operator|+
name|name
argument_list|()
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|fieldType
operator|.
name|indexOptions
argument_list|()
operator|!=
name|IndexOptions
operator|.
name|NONE
operator|||
name|fieldType
operator|.
name|stored
argument_list|()
condition|)
block|{
name|Field
name|field
init|=
operator|new
name|Field
argument_list|(
name|names
operator|.
name|indexName
argument_list|()
argument_list|,
name|Double
operator|.
name|toString
argument_list|(
name|point
operator|.
name|lat
argument_list|()
argument_list|)
operator|+
literal|','
operator|+
name|Double
operator|.
name|toString
argument_list|(
name|point
operator|.
name|lon
argument_list|()
argument_list|)
argument_list|,
name|fieldType
argument_list|)
decl_stmt|;
name|context
operator|.
name|doc
argument_list|()
operator|.
name|add
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|enableGeoHash
condition|)
block|{
if|if
condition|(
name|geohash
operator|==
literal|null
condition|)
block|{
name|geohash
operator|=
name|GeoHashUtils
operator|.
name|encode
argument_list|(
name|point
operator|.
name|lat
argument_list|()
argument_list|,
name|point
operator|.
name|lon
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|parseGeohashField
argument_list|(
name|context
argument_list|,
name|geohash
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|enableLatLon
condition|)
block|{
name|latMapper
operator|.
name|parse
argument_list|(
name|context
operator|.
name|createExternalValueContext
argument_list|(
name|point
operator|.
name|lat
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|lonMapper
operator|.
name|parse
argument_list|(
name|context
operator|.
name|createExternalValueContext
argument_list|(
name|point
operator|.
name|lon
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hasDocValues
argument_list|()
condition|)
block|{
name|CustomGeoPointDocValuesField
name|field
init|=
operator|(
name|CustomGeoPointDocValuesField
operator|)
name|context
operator|.
name|doc
argument_list|()
operator|.
name|getByKey
argument_list|(
name|names
argument_list|()
operator|.
name|indexName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
name|field
operator|=
operator|new
name|CustomGeoPointDocValuesField
argument_list|(
name|names
argument_list|()
operator|.
name|indexName
argument_list|()
argument_list|,
name|point
operator|.
name|lat
argument_list|()
argument_list|,
name|point
operator|.
name|lon
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|doc
argument_list|()
operator|.
name|addWithKey
argument_list|(
name|names
argument_list|()
operator|.
name|indexName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|field
operator|.
name|add
argument_list|(
name|point
operator|.
name|lat
argument_list|()
argument_list|,
name|point
operator|.
name|lon
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|multiFields
operator|.
name|parse
argument_list|(
name|this
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|latMapper
operator|!=
literal|null
condition|)
block|{
name|latMapper
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|lonMapper
operator|!=
literal|null
condition|)
block|{
name|lonMapper
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|geohashMapper
operator|!=
literal|null
condition|)
block|{
name|geohashMapper
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|merge
specifier|public
name|void
name|merge
parameter_list|(
name|Mapper
name|mergeWith
parameter_list|,
name|MergeContext
name|mergeContext
parameter_list|)
throws|throws
name|MergeMappingException
block|{
name|super
operator|.
name|merge
argument_list|(
name|mergeWith
argument_list|,
name|mergeContext
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|mergeWith
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
name|GeoPointFieldMapper
name|fieldMergeWith
init|=
operator|(
name|GeoPointFieldMapper
operator|)
name|mergeWith
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|enableLatLon
operator|!=
name|fieldMergeWith
operator|.
name|enableLatLon
condition|)
block|{
name|mergeContext
operator|.
name|addConflict
argument_list|(
literal|"mapper ["
operator|+
name|names
operator|.
name|fullName
argument_list|()
operator|+
literal|"] has different lat_lon"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|enableGeoHash
operator|!=
name|fieldMergeWith
operator|.
name|enableGeoHash
condition|)
block|{
name|mergeContext
operator|.
name|addConflict
argument_list|(
literal|"mapper ["
operator|+
name|names
operator|.
name|fullName
argument_list|()
operator|+
literal|"] has different geohash"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|geoHashPrecision
operator|!=
name|fieldMergeWith
operator|.
name|geoHashPrecision
condition|)
block|{
name|mergeContext
operator|.
name|addConflict
argument_list|(
literal|"mapper ["
operator|+
name|names
operator|.
name|fullName
argument_list|()
operator|+
literal|"] has different geohash_precision"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|enableGeohashPrefix
operator|!=
name|fieldMergeWith
operator|.
name|enableGeohashPrefix
condition|)
block|{
name|mergeContext
operator|.
name|addConflict
argument_list|(
literal|"mapper ["
operator|+
name|names
operator|.
name|fullName
argument_list|()
operator|+
literal|"] has different geohash_prefix"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|normalizeLat
operator|!=
name|fieldMergeWith
operator|.
name|normalizeLat
condition|)
block|{
name|mergeContext
operator|.
name|addConflict
argument_list|(
literal|"mapper ["
operator|+
name|names
operator|.
name|fullName
argument_list|()
operator|+
literal|"] has different normalize_lat"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|normalizeLon
operator|!=
name|fieldMergeWith
operator|.
name|normalizeLon
condition|)
block|{
name|mergeContext
operator|.
name|addConflict
argument_list|(
literal|"mapper ["
operator|+
name|names
operator|.
name|fullName
argument_list|()
operator|+
literal|"] has different normalize_lon"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|Objects
operator|.
name|equal
argument_list|(
name|this
operator|.
name|precisionStep
argument_list|,
name|fieldMergeWith
operator|.
name|precisionStep
argument_list|)
condition|)
block|{
name|mergeContext
operator|.
name|addConflict
argument_list|(
literal|"mapper ["
operator|+
name|names
operator|.
name|fullName
argument_list|()
operator|+
literal|"] has different precision_step"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|validateLat
operator|!=
name|fieldMergeWith
operator|.
name|validateLat
condition|)
block|{
name|mergeContext
operator|.
name|addConflict
argument_list|(
literal|"mapper ["
operator|+
name|names
operator|.
name|fullName
argument_list|()
operator|+
literal|"] has different validate_lat"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|validateLon
operator|!=
name|fieldMergeWith
operator|.
name|validateLon
condition|)
block|{
name|mergeContext
operator|.
name|addConflict
argument_list|(
literal|"mapper ["
operator|+
name|names
operator|.
name|fullName
argument_list|()
operator|+
literal|"] has different validate_lon"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|traverse
specifier|public
name|void
name|traverse
parameter_list|(
name|FieldMapperListener
name|fieldMapperListener
parameter_list|)
block|{
name|super
operator|.
name|traverse
argument_list|(
name|fieldMapperListener
argument_list|)
expr_stmt|;
if|if
condition|(
name|enableGeoHash
condition|)
block|{
name|geohashMapper
operator|.
name|traverse
argument_list|(
name|fieldMapperListener
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|enableLatLon
condition|)
block|{
name|latMapper
operator|.
name|traverse
argument_list|(
name|fieldMapperListener
argument_list|)
expr_stmt|;
name|lonMapper
operator|.
name|traverse
argument_list|(
name|fieldMapperListener
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|traverse
specifier|public
name|void
name|traverse
parameter_list|(
name|ObjectMapperListener
name|objectMapperListener
parameter_list|)
block|{     }
annotation|@
name|Override
DECL|method|doXContentBody
specifier|protected
name|void
name|doXContentBody
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|boolean
name|includeDefaults
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|doXContentBody
argument_list|(
name|builder
argument_list|,
name|includeDefaults
argument_list|,
name|params
argument_list|)
expr_stmt|;
if|if
condition|(
name|includeDefaults
operator|||
name|pathType
operator|!=
name|Defaults
operator|.
name|PATH_TYPE
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"path"
argument_list|,
name|pathType
operator|.
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|includeDefaults
operator|||
name|enableLatLon
operator|!=
name|Defaults
operator|.
name|ENABLE_LATLON
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"lat_lon"
argument_list|,
name|enableLatLon
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|includeDefaults
operator|||
name|enableGeoHash
operator|!=
name|Defaults
operator|.
name|ENABLE_GEOHASH
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"geohash"
argument_list|,
name|enableGeoHash
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|includeDefaults
operator|||
name|enableGeohashPrefix
operator|!=
name|Defaults
operator|.
name|ENABLE_GEOHASH_PREFIX
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"geohash_prefix"
argument_list|,
name|enableGeohashPrefix
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|includeDefaults
operator|||
name|geoHashPrecision
operator|!=
name|Defaults
operator|.
name|GEO_HASH_PRECISION
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"geohash_precision"
argument_list|,
name|geoHashPrecision
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|includeDefaults
operator|||
name|precisionStep
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"precision_step"
argument_list|,
name|precisionStep
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|includeDefaults
operator|||
name|validateLat
operator|!=
name|Defaults
operator|.
name|VALIDATE_LAT
operator|||
name|validateLon
operator|!=
name|Defaults
operator|.
name|VALIDATE_LON
condition|)
block|{
if|if
condition|(
name|validateLat
operator|&&
name|validateLon
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"validate"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|validateLat
operator|&&
operator|!
name|validateLon
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"validate"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|includeDefaults
operator|||
name|validateLat
operator|!=
name|Defaults
operator|.
name|VALIDATE_LAT
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"validate_lat"
argument_list|,
name|validateLat
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|includeDefaults
operator|||
name|validateLon
operator|!=
name|Defaults
operator|.
name|VALIDATE_LON
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"validate_lon"
argument_list|,
name|validateLon
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|includeDefaults
operator|||
name|normalizeLat
operator|!=
name|Defaults
operator|.
name|NORMALIZE_LAT
operator|||
name|normalizeLon
operator|!=
name|Defaults
operator|.
name|NORMALIZE_LON
condition|)
block|{
if|if
condition|(
name|normalizeLat
operator|&&
name|normalizeLon
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"normalize"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|normalizeLat
operator|&&
operator|!
name|normalizeLon
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"normalize"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|includeDefaults
operator|||
name|normalizeLat
operator|!=
name|Defaults
operator|.
name|NORMALIZE_LAT
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"normalize_lat"
argument_list|,
name|normalizeLat
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|includeDefaults
operator|||
name|normalizeLon
operator|!=
name|Defaults
operator|.
name|NORMALIZE_LON
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"normalize_lon"
argument_list|,
name|normalizeLat
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|class|CustomGeoPointDocValuesField
specifier|public
specifier|static
class|class
name|CustomGeoPointDocValuesField
extends|extends
name|CustomNumericDocValuesField
block|{
DECL|field|TYPE
specifier|public
specifier|static
specifier|final
name|FieldType
name|TYPE
init|=
operator|new
name|FieldType
argument_list|()
decl_stmt|;
static|static
block|{
name|TYPE
operator|.
name|setDocValuesType
argument_list|(
name|DocValuesType
operator|.
name|BINARY
argument_list|)
expr_stmt|;
name|TYPE
operator|.
name|freeze
argument_list|()
expr_stmt|;
block|}
DECL|field|points
specifier|private
specifier|final
name|ObjectOpenHashSet
argument_list|<
name|GeoPoint
argument_list|>
name|points
decl_stmt|;
DECL|method|CustomGeoPointDocValuesField
specifier|public
name|CustomGeoPointDocValuesField
parameter_list|(
name|String
name|name
parameter_list|,
name|double
name|lat
parameter_list|,
name|double
name|lon
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|points
operator|=
operator|new
name|ObjectOpenHashSet
argument_list|<>
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|points
operator|.
name|add
argument_list|(
operator|new
name|GeoPoint
argument_list|(
name|lat
argument_list|,
name|lon
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|add
specifier|public
name|void
name|add
parameter_list|(
name|double
name|lat
parameter_list|,
name|double
name|lon
parameter_list|)
block|{
name|points
operator|.
name|add
argument_list|(
operator|new
name|GeoPoint
argument_list|(
name|lat
argument_list|,
name|lon
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|binaryValue
specifier|public
name|BytesRef
name|binaryValue
parameter_list|()
block|{
specifier|final
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[
name|points
operator|.
name|size
argument_list|()
operator|*
literal|16
index|]
decl_stmt|;
name|int
name|off
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|ObjectCursor
argument_list|<
name|GeoPoint
argument_list|>
argument_list|>
name|it
init|=
name|points
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
specifier|final
name|GeoPoint
name|point
init|=
name|it
operator|.
name|next
argument_list|()
operator|.
name|value
decl_stmt|;
name|ByteUtils
operator|.
name|writeDoubleLE
argument_list|(
name|point
operator|.
name|getLat
argument_list|()
argument_list|,
name|bytes
argument_list|,
name|off
argument_list|)
expr_stmt|;
name|ByteUtils
operator|.
name|writeDoubleLE
argument_list|(
name|point
operator|.
name|getLon
argument_list|()
argument_list|,
name|bytes
argument_list|,
name|off
operator|+
literal|8
argument_list|)
expr_stmt|;
name|off
operator|+=
literal|16
expr_stmt|;
block|}
return|return
operator|new
name|BytesRef
argument_list|(
name|bytes
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

