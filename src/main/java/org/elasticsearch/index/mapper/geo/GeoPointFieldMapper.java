begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.mapper.geo
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|geo
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|FieldType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInfo
operator|.
name|IndexOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticSearchIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|support
operator|.
name|XContentMapValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|NamedAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|codec
operator|.
name|postingsformat
operator|.
name|PostingsFormatProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|field
operator|.
name|data
operator|.
name|FieldDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|core
operator|.
name|AbstractFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|core
operator|.
name|DoubleFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|core
operator|.
name|NumberFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|core
operator|.
name|StringFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|object
operator|.
name|ArrayValueMapperParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|search
operator|.
name|geo
operator|.
name|GeoHashUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|search
operator|.
name|geo
operator|.
name|GeoUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|search
operator|.
name|geo
operator|.
name|Point
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MapperBuilders
operator|.
name|doubleField
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MapperBuilders
operator|.
name|stringField
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|core
operator|.
name|TypeParsers
operator|.
name|parsePathType
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|core
operator|.
name|TypeParsers
operator|.
name|parseStore
import|;
end_import

begin_comment
comment|/**  * Parsing: We handle:  *<p/>  * - "field" : "geo_hash"  * - "field" : "lat,lon"  * - "field" : {  * "lat" : 1.1,  * "lon" : 2.1  * }  */
end_comment

begin_class
DECL|class|GeoPointFieldMapper
specifier|public
class|class
name|GeoPointFieldMapper
implements|implements
name|Mapper
implements|,
name|ArrayValueMapperParser
block|{
DECL|field|CONTENT_TYPE
specifier|public
specifier|static
specifier|final
name|String
name|CONTENT_TYPE
init|=
literal|"geo_point"
decl_stmt|;
DECL|class|Names
specifier|public
specifier|static
class|class
name|Names
block|{
DECL|field|LAT
specifier|public
specifier|static
specifier|final
name|String
name|LAT
init|=
literal|"lat"
decl_stmt|;
DECL|field|LAT_SUFFIX
specifier|public
specifier|static
specifier|final
name|String
name|LAT_SUFFIX
init|=
literal|"."
operator|+
name|LAT
decl_stmt|;
DECL|field|LON
specifier|public
specifier|static
specifier|final
name|String
name|LON
init|=
literal|"lon"
decl_stmt|;
DECL|field|LON_SUFFIX
specifier|public
specifier|static
specifier|final
name|String
name|LON_SUFFIX
init|=
literal|"."
operator|+
name|LON
decl_stmt|;
DECL|field|GEOHASH
specifier|public
specifier|static
specifier|final
name|String
name|GEOHASH
init|=
literal|"geohash"
decl_stmt|;
DECL|field|GEOHASH_SUFFIX
specifier|public
specifier|static
specifier|final
name|String
name|GEOHASH_SUFFIX
init|=
literal|"."
operator|+
name|GEOHASH
decl_stmt|;
block|}
DECL|class|Defaults
specifier|public
specifier|static
class|class
name|Defaults
block|{
DECL|field|PATH_TYPE
specifier|public
specifier|static
specifier|final
name|ContentPath
operator|.
name|Type
name|PATH_TYPE
init|=
name|ContentPath
operator|.
name|Type
operator|.
name|FULL
decl_stmt|;
DECL|field|STORE
specifier|public
specifier|static
specifier|final
name|boolean
name|STORE
init|=
literal|false
decl_stmt|;
DECL|field|ENABLE_LATLON
specifier|public
specifier|static
specifier|final
name|boolean
name|ENABLE_LATLON
init|=
literal|false
decl_stmt|;
DECL|field|ENABLE_GEOHASH
specifier|public
specifier|static
specifier|final
name|boolean
name|ENABLE_GEOHASH
init|=
literal|false
decl_stmt|;
DECL|field|PRECISION
specifier|public
specifier|static
specifier|final
name|int
name|PRECISION
init|=
name|GeoHashUtils
operator|.
name|PRECISION
decl_stmt|;
DECL|field|NORMALIZE_LAT
specifier|public
specifier|static
specifier|final
name|boolean
name|NORMALIZE_LAT
init|=
literal|true
decl_stmt|;
DECL|field|NORMALIZE_LON
specifier|public
specifier|static
specifier|final
name|boolean
name|NORMALIZE_LON
init|=
literal|true
decl_stmt|;
DECL|field|VALIDATE_LAT
specifier|public
specifier|static
specifier|final
name|boolean
name|VALIDATE_LAT
init|=
literal|true
decl_stmt|;
DECL|field|VALIDATE_LON
specifier|public
specifier|static
specifier|final
name|boolean
name|VALIDATE_LON
init|=
literal|true
decl_stmt|;
DECL|field|FIELD_TYPE
specifier|public
specifier|static
specifier|final
name|FieldType
name|FIELD_TYPE
init|=
operator|new
name|FieldType
argument_list|(
name|StringFieldMapper
operator|.
name|Defaults
operator|.
name|FIELD_TYPE
argument_list|)
decl_stmt|;
static|static
block|{
name|FIELD_TYPE
operator|.
name|setIndexed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|FIELD_TYPE
operator|.
name|setTokenized
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|FIELD_TYPE
operator|.
name|setOmitNorms
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|FIELD_TYPE
operator|.
name|setIndexOptions
argument_list|(
name|IndexOptions
operator|.
name|DOCS_ONLY
argument_list|)
expr_stmt|;
name|FIELD_TYPE
operator|.
name|freeze
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|Builder
specifier|public
specifier|static
class|class
name|Builder
extends|extends
name|Mapper
operator|.
name|Builder
argument_list|<
name|Builder
argument_list|,
name|GeoPointFieldMapper
argument_list|>
block|{
DECL|field|pathType
specifier|private
name|ContentPath
operator|.
name|Type
name|pathType
init|=
name|Defaults
operator|.
name|PATH_TYPE
decl_stmt|;
DECL|field|enableGeoHash
specifier|private
name|boolean
name|enableGeoHash
init|=
name|Defaults
operator|.
name|ENABLE_GEOHASH
decl_stmt|;
DECL|field|enableLatLon
specifier|private
name|boolean
name|enableLatLon
init|=
name|Defaults
operator|.
name|ENABLE_LATLON
decl_stmt|;
DECL|field|precisionStep
specifier|private
name|Integer
name|precisionStep
decl_stmt|;
DECL|field|precision
specifier|private
name|int
name|precision
init|=
name|Defaults
operator|.
name|PRECISION
decl_stmt|;
DECL|field|store
specifier|private
name|boolean
name|store
init|=
name|Defaults
operator|.
name|STORE
decl_stmt|;
DECL|field|validateLat
name|boolean
name|validateLat
init|=
name|Defaults
operator|.
name|VALIDATE_LAT
decl_stmt|;
DECL|field|validateLon
name|boolean
name|validateLon
init|=
name|Defaults
operator|.
name|VALIDATE_LON
decl_stmt|;
DECL|field|normalizeLat
name|boolean
name|normalizeLat
init|=
name|Defaults
operator|.
name|NORMALIZE_LAT
decl_stmt|;
DECL|field|normalizeLon
name|boolean
name|normalizeLon
init|=
name|Defaults
operator|.
name|NORMALIZE_LON
decl_stmt|;
DECL|method|Builder
specifier|public
name|Builder
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|builder
operator|=
name|this
expr_stmt|;
block|}
DECL|method|pathType
specifier|public
name|Builder
name|pathType
parameter_list|(
name|ContentPath
operator|.
name|Type
name|pathType
parameter_list|)
block|{
name|this
operator|.
name|pathType
operator|=
name|pathType
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|enableGeoHash
specifier|public
name|Builder
name|enableGeoHash
parameter_list|(
name|boolean
name|enableGeoHash
parameter_list|)
block|{
name|this
operator|.
name|enableGeoHash
operator|=
name|enableGeoHash
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|enableLatLon
specifier|public
name|Builder
name|enableLatLon
parameter_list|(
name|boolean
name|enableLatLon
parameter_list|)
block|{
name|this
operator|.
name|enableLatLon
operator|=
name|enableLatLon
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|precisionStep
specifier|public
name|Builder
name|precisionStep
parameter_list|(
name|int
name|precisionStep
parameter_list|)
block|{
name|this
operator|.
name|precisionStep
operator|=
name|precisionStep
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|precision
specifier|public
name|Builder
name|precision
parameter_list|(
name|int
name|precision
parameter_list|)
block|{
name|this
operator|.
name|precision
operator|=
name|precision
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|store
specifier|public
name|Builder
name|store
parameter_list|(
name|boolean
name|store
parameter_list|)
block|{
name|this
operator|.
name|store
operator|=
name|store
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|build
specifier|public
name|GeoPointFieldMapper
name|build
parameter_list|(
name|BuilderContext
name|context
parameter_list|)
block|{
name|ContentPath
operator|.
name|Type
name|origPathType
init|=
name|context
operator|.
name|path
argument_list|()
operator|.
name|pathType
argument_list|()
decl_stmt|;
name|context
operator|.
name|path
argument_list|()
operator|.
name|pathType
argument_list|(
name|pathType
argument_list|)
expr_stmt|;
name|GeoStringFieldMapper
name|geoStringMapper
init|=
operator|new
name|GeoStringFieldMapper
operator|.
name|Builder
argument_list|(
name|name
argument_list|)
operator|.
name|includeInAll
argument_list|(
literal|false
argument_list|)
operator|.
name|store
argument_list|(
name|store
argument_list|)
operator|.
name|build
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|DoubleFieldMapper
name|latMapper
init|=
literal|null
decl_stmt|;
name|DoubleFieldMapper
name|lonMapper
init|=
literal|null
decl_stmt|;
name|context
operator|.
name|path
argument_list|()
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|enableLatLon
condition|)
block|{
name|NumberFieldMapper
operator|.
name|Builder
name|latMapperBuilder
init|=
name|doubleField
argument_list|(
name|Names
operator|.
name|LAT
argument_list|)
operator|.
name|includeInAll
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|NumberFieldMapper
operator|.
name|Builder
name|lonMapperBuilder
init|=
name|doubleField
argument_list|(
name|Names
operator|.
name|LON
argument_list|)
operator|.
name|includeInAll
argument_list|(
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|precisionStep
operator|!=
literal|null
condition|)
block|{
name|latMapperBuilder
operator|.
name|precisionStep
argument_list|(
name|precisionStep
argument_list|)
expr_stmt|;
name|lonMapperBuilder
operator|.
name|precisionStep
argument_list|(
name|precisionStep
argument_list|)
expr_stmt|;
block|}
name|latMapper
operator|=
operator|(
name|DoubleFieldMapper
operator|)
name|latMapperBuilder
operator|.
name|includeInAll
argument_list|(
literal|false
argument_list|)
operator|.
name|store
argument_list|(
name|store
argument_list|)
operator|.
name|build
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|lonMapper
operator|=
operator|(
name|DoubleFieldMapper
operator|)
name|lonMapperBuilder
operator|.
name|includeInAll
argument_list|(
literal|false
argument_list|)
operator|.
name|store
argument_list|(
name|store
argument_list|)
operator|.
name|build
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
name|StringFieldMapper
name|geohashMapper
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|enableGeoHash
condition|)
block|{
name|geohashMapper
operator|=
name|stringField
argument_list|(
name|Names
operator|.
name|GEOHASH
argument_list|)
operator|.
name|index
argument_list|(
literal|true
argument_list|)
operator|.
name|tokenized
argument_list|(
literal|false
argument_list|)
operator|.
name|includeInAll
argument_list|(
literal|false
argument_list|)
operator|.
name|omitNorms
argument_list|(
literal|true
argument_list|)
operator|.
name|indexOptions
argument_list|(
name|IndexOptions
operator|.
name|DOCS_ONLY
argument_list|)
operator|.
name|build
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
name|context
operator|.
name|path
argument_list|()
operator|.
name|remove
argument_list|()
expr_stmt|;
name|context
operator|.
name|path
argument_list|()
operator|.
name|pathType
argument_list|(
name|origPathType
argument_list|)
expr_stmt|;
return|return
operator|new
name|GeoPointFieldMapper
argument_list|(
name|name
argument_list|,
name|pathType
argument_list|,
name|enableLatLon
argument_list|,
name|enableGeoHash
argument_list|,
name|precisionStep
argument_list|,
name|precision
argument_list|,
name|latMapper
argument_list|,
name|lonMapper
argument_list|,
name|geohashMapper
argument_list|,
name|geoStringMapper
argument_list|,
name|validateLon
argument_list|,
name|validateLat
argument_list|,
name|normalizeLon
argument_list|,
name|normalizeLat
argument_list|)
return|;
block|}
block|}
DECL|class|TypeParser
specifier|public
specifier|static
class|class
name|TypeParser
implements|implements
name|Mapper
operator|.
name|TypeParser
block|{
annotation|@
name|Override
DECL|method|parse
specifier|public
name|Mapper
operator|.
name|Builder
name|parse
parameter_list|(
name|String
name|name
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|node
parameter_list|,
name|ParserContext
name|parserContext
parameter_list|)
throws|throws
name|MapperParsingException
block|{
name|Builder
name|builder
init|=
operator|new
name|Builder
argument_list|(
name|name
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|node
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|fieldName
init|=
name|Strings
operator|.
name|toUnderscoreCase
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|Object
name|fieldNode
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|fieldName
operator|.
name|equals
argument_list|(
literal|"path"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|pathType
argument_list|(
name|parsePathType
argument_list|(
name|name
argument_list|,
name|fieldNode
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fieldName
operator|.
name|equals
argument_list|(
literal|"store"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|store
argument_list|(
name|parseStore
argument_list|(
name|name
argument_list|,
name|fieldNode
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fieldName
operator|.
name|equals
argument_list|(
literal|"lat_lon"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|enableLatLon
argument_list|(
name|XContentMapValues
operator|.
name|nodeBooleanValue
argument_list|(
name|fieldNode
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fieldName
operator|.
name|equals
argument_list|(
literal|"geohash"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|enableGeoHash
argument_list|(
name|XContentMapValues
operator|.
name|nodeBooleanValue
argument_list|(
name|fieldNode
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fieldName
operator|.
name|equals
argument_list|(
literal|"precision_step"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|precisionStep
argument_list|(
name|XContentMapValues
operator|.
name|nodeIntegerValue
argument_list|(
name|fieldNode
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fieldName
operator|.
name|equals
argument_list|(
literal|"geohash_precision"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|precision
argument_list|(
name|XContentMapValues
operator|.
name|nodeIntegerValue
argument_list|(
name|fieldNode
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fieldName
operator|.
name|equals
argument_list|(
literal|"validate"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|validateLat
operator|=
name|XContentMapValues
operator|.
name|nodeBooleanValue
argument_list|(
name|fieldNode
argument_list|)
expr_stmt|;
name|builder
operator|.
name|validateLon
operator|=
name|XContentMapValues
operator|.
name|nodeBooleanValue
argument_list|(
name|fieldNode
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fieldName
operator|.
name|equals
argument_list|(
literal|"validate_lon"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|validateLon
operator|=
name|XContentMapValues
operator|.
name|nodeBooleanValue
argument_list|(
name|fieldNode
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fieldName
operator|.
name|equals
argument_list|(
literal|"validate_lat"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|validateLat
operator|=
name|XContentMapValues
operator|.
name|nodeBooleanValue
argument_list|(
name|fieldNode
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fieldName
operator|.
name|equals
argument_list|(
literal|"normalize"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|normalizeLat
operator|=
name|XContentMapValues
operator|.
name|nodeBooleanValue
argument_list|(
name|fieldNode
argument_list|)
expr_stmt|;
name|builder
operator|.
name|normalizeLon
operator|=
name|XContentMapValues
operator|.
name|nodeBooleanValue
argument_list|(
name|fieldNode
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fieldName
operator|.
name|equals
argument_list|(
literal|"normalize_lat"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|normalizeLat
operator|=
name|XContentMapValues
operator|.
name|nodeBooleanValue
argument_list|(
name|fieldNode
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fieldName
operator|.
name|equals
argument_list|(
literal|"normalize_lon"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|normalizeLon
operator|=
name|XContentMapValues
operator|.
name|nodeBooleanValue
argument_list|(
name|fieldNode
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|builder
return|;
block|}
block|}
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|pathType
specifier|private
specifier|final
name|ContentPath
operator|.
name|Type
name|pathType
decl_stmt|;
DECL|field|enableLatLon
specifier|private
specifier|final
name|boolean
name|enableLatLon
decl_stmt|;
DECL|field|enableGeoHash
specifier|private
specifier|final
name|boolean
name|enableGeoHash
decl_stmt|;
DECL|field|precisionStep
specifier|private
specifier|final
name|Integer
name|precisionStep
decl_stmt|;
DECL|field|precision
specifier|private
specifier|final
name|int
name|precision
decl_stmt|;
DECL|field|latMapper
specifier|private
specifier|final
name|DoubleFieldMapper
name|latMapper
decl_stmt|;
DECL|field|lonMapper
specifier|private
specifier|final
name|DoubleFieldMapper
name|lonMapper
decl_stmt|;
DECL|field|geohashMapper
specifier|private
specifier|final
name|StringFieldMapper
name|geohashMapper
decl_stmt|;
DECL|field|geoStringMapper
specifier|private
specifier|final
name|GeoStringFieldMapper
name|geoStringMapper
decl_stmt|;
DECL|field|validateLon
specifier|private
specifier|final
name|boolean
name|validateLon
decl_stmt|;
DECL|field|validateLat
specifier|private
specifier|final
name|boolean
name|validateLat
decl_stmt|;
DECL|field|normalizeLon
specifier|private
specifier|final
name|boolean
name|normalizeLon
decl_stmt|;
DECL|field|normalizeLat
specifier|private
specifier|final
name|boolean
name|normalizeLat
decl_stmt|;
DECL|method|GeoPointFieldMapper
specifier|public
name|GeoPointFieldMapper
parameter_list|(
name|String
name|name
parameter_list|,
name|ContentPath
operator|.
name|Type
name|pathType
parameter_list|,
name|boolean
name|enableLatLon
parameter_list|,
name|boolean
name|enableGeoHash
parameter_list|,
name|Integer
name|precisionStep
parameter_list|,
name|int
name|precision
parameter_list|,
name|DoubleFieldMapper
name|latMapper
parameter_list|,
name|DoubleFieldMapper
name|lonMapper
parameter_list|,
name|StringFieldMapper
name|geohashMapper
parameter_list|,
name|GeoStringFieldMapper
name|geoStringMapper
parameter_list|,
name|boolean
name|validateLon
parameter_list|,
name|boolean
name|validateLat
parameter_list|,
name|boolean
name|normalizeLon
parameter_list|,
name|boolean
name|normalizeLat
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|pathType
operator|=
name|pathType
expr_stmt|;
name|this
operator|.
name|enableLatLon
operator|=
name|enableLatLon
expr_stmt|;
name|this
operator|.
name|enableGeoHash
operator|=
name|enableGeoHash
expr_stmt|;
name|this
operator|.
name|precisionStep
operator|=
name|precisionStep
expr_stmt|;
name|this
operator|.
name|precision
operator|=
name|precision
expr_stmt|;
name|this
operator|.
name|latMapper
operator|=
name|latMapper
expr_stmt|;
name|this
operator|.
name|lonMapper
operator|=
name|lonMapper
expr_stmt|;
name|this
operator|.
name|geoStringMapper
operator|=
name|geoStringMapper
expr_stmt|;
name|this
operator|.
name|geohashMapper
operator|=
name|geohashMapper
expr_stmt|;
name|this
operator|.
name|geoStringMapper
operator|.
name|geoMapper
operator|=
name|this
expr_stmt|;
name|this
operator|.
name|validateLat
operator|=
name|validateLat
expr_stmt|;
name|this
operator|.
name|validateLon
operator|=
name|validateLon
expr_stmt|;
name|this
operator|.
name|normalizeLat
operator|=
name|normalizeLat
expr_stmt|;
name|this
operator|.
name|normalizeLon
operator|=
name|normalizeLon
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|name
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
name|this
operator|.
name|name
return|;
block|}
DECL|method|latMapper
specifier|public
name|DoubleFieldMapper
name|latMapper
parameter_list|()
block|{
return|return
name|latMapper
return|;
block|}
DECL|method|lonMapper
specifier|public
name|DoubleFieldMapper
name|lonMapper
parameter_list|()
block|{
return|return
name|lonMapper
return|;
block|}
DECL|method|isEnableLatLon
specifier|public
name|boolean
name|isEnableLatLon
parameter_list|()
block|{
return|return
name|enableLatLon
return|;
block|}
annotation|@
name|Override
DECL|method|parse
specifier|public
name|void
name|parse
parameter_list|(
name|ParseContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|ContentPath
operator|.
name|Type
name|origPathType
init|=
name|context
operator|.
name|path
argument_list|()
operator|.
name|pathType
argument_list|()
decl_stmt|;
name|context
operator|.
name|path
argument_list|()
operator|.
name|pathType
argument_list|(
name|pathType
argument_list|)
expr_stmt|;
name|context
operator|.
name|path
argument_list|()
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|XContentParser
operator|.
name|Token
name|token
init|=
name|context
operator|.
name|parser
argument_list|()
operator|.
name|currentToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_ARRAY
condition|)
block|{
name|token
operator|=
name|context
operator|.
name|parser
argument_list|()
operator|.
name|nextToken
argument_list|()
expr_stmt|;
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_ARRAY
condition|)
block|{
comment|// its an array of array of lon/lat [ [1.2, 1.3], [1.4, 1.5] ]
while|while
condition|(
name|token
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_ARRAY
condition|)
block|{
name|token
operator|=
name|context
operator|.
name|parser
argument_list|()
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|double
name|lon
init|=
name|context
operator|.
name|parser
argument_list|()
operator|.
name|doubleValue
argument_list|()
decl_stmt|;
name|token
operator|=
name|context
operator|.
name|parser
argument_list|()
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|double
name|lat
init|=
name|context
operator|.
name|parser
argument_list|()
operator|.
name|doubleValue
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|token
operator|=
name|context
operator|.
name|parser
argument_list|()
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_ARRAY
condition|)
block|{                      }
name|parseLatLon
argument_list|(
name|context
argument_list|,
name|lat
argument_list|,
name|lon
argument_list|)
expr_stmt|;
name|token
operator|=
name|context
operator|.
name|parser
argument_list|()
operator|.
name|nextToken
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// its an array of other possible values
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_NUMBER
condition|)
block|{
name|double
name|lon
init|=
name|context
operator|.
name|parser
argument_list|()
operator|.
name|doubleValue
argument_list|()
decl_stmt|;
name|token
operator|=
name|context
operator|.
name|parser
argument_list|()
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|double
name|lat
init|=
name|context
operator|.
name|parser
argument_list|()
operator|.
name|doubleValue
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|token
operator|=
name|context
operator|.
name|parser
argument_list|()
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_ARRAY
condition|)
block|{                      }
name|parseLatLon
argument_list|(
name|context
argument_list|,
name|lat
argument_list|,
name|lon
argument_list|)
expr_stmt|;
block|}
else|else
block|{
while|while
condition|(
name|token
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_ARRAY
condition|)
block|{
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
condition|)
block|{
name|parseObjectLatLon
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_STRING
condition|)
block|{
name|parseStringLatLon
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
name|token
operator|=
name|context
operator|.
name|parser
argument_list|()
operator|.
name|nextToken
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
condition|)
block|{
name|parseObjectLatLon
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_STRING
condition|)
block|{
name|parseStringLatLon
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
name|context
operator|.
name|path
argument_list|()
operator|.
name|remove
argument_list|()
expr_stmt|;
name|context
operator|.
name|path
argument_list|()
operator|.
name|pathType
argument_list|(
name|origPathType
argument_list|)
expr_stmt|;
block|}
DECL|method|parseStringLatLon
specifier|private
name|void
name|parseStringLatLon
parameter_list|(
name|ParseContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|value
init|=
name|context
operator|.
name|parser
argument_list|()
operator|.
name|text
argument_list|()
decl_stmt|;
name|int
name|comma
init|=
name|value
operator|.
name|indexOf
argument_list|(
literal|','
argument_list|)
decl_stmt|;
if|if
condition|(
name|comma
operator|!=
operator|-
literal|1
condition|)
block|{
name|double
name|lat
init|=
name|Double
operator|.
name|parseDouble
argument_list|(
name|value
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|comma
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|)
decl_stmt|;
name|double
name|lon
init|=
name|Double
operator|.
name|parseDouble
argument_list|(
name|value
operator|.
name|substring
argument_list|(
name|comma
operator|+
literal|1
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|)
decl_stmt|;
name|parseLatLon
argument_list|(
name|context
argument_list|,
name|lat
argument_list|,
name|lon
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// geo hash
name|parseGeohash
argument_list|(
name|context
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|parseObjectLatLon
specifier|private
name|void
name|parseObjectLatLon
parameter_list|(
name|ParseContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|XContentParser
operator|.
name|Token
name|token
decl_stmt|;
name|String
name|currentName
init|=
name|context
operator|.
name|parser
argument_list|()
operator|.
name|currentName
argument_list|()
decl_stmt|;
name|Double
name|lat
init|=
literal|null
decl_stmt|;
name|Double
name|lon
init|=
literal|null
decl_stmt|;
name|String
name|geohash
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|token
operator|=
name|context
operator|.
name|parser
argument_list|()
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
condition|)
block|{
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
condition|)
block|{
name|currentName
operator|=
name|context
operator|.
name|parser
argument_list|()
operator|.
name|currentName
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|.
name|isValue
argument_list|()
condition|)
block|{
if|if
condition|(
name|currentName
operator|.
name|equals
argument_list|(
name|Names
operator|.
name|LAT
argument_list|)
condition|)
block|{
name|lat
operator|=
name|context
operator|.
name|parser
argument_list|()
operator|.
name|doubleValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|currentName
operator|.
name|equals
argument_list|(
name|Names
operator|.
name|LON
argument_list|)
condition|)
block|{
name|lon
operator|=
name|context
operator|.
name|parser
argument_list|()
operator|.
name|doubleValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|currentName
operator|.
name|equals
argument_list|(
name|Names
operator|.
name|GEOHASH
argument_list|)
condition|)
block|{
name|geohash
operator|=
name|context
operator|.
name|parser
argument_list|()
operator|.
name|text
argument_list|()
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|geohash
operator|!=
literal|null
condition|)
block|{
name|parseGeohash
argument_list|(
name|context
argument_list|,
name|geohash
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|lat
operator|!=
literal|null
operator|&&
name|lon
operator|!=
literal|null
condition|)
block|{
name|parseLatLon
argument_list|(
name|context
argument_list|,
name|lat
argument_list|,
name|lon
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|parseLatLon
specifier|private
name|void
name|parseLatLon
parameter_list|(
name|ParseContext
name|context
parameter_list|,
name|double
name|lat
parameter_list|,
name|double
name|lon
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|normalizeLat
operator|||
name|normalizeLon
condition|)
block|{
name|Point
name|point
init|=
operator|new
name|Point
argument_list|(
name|lat
argument_list|,
name|lon
argument_list|)
decl_stmt|;
name|GeoUtils
operator|.
name|normalizePoint
argument_list|(
name|point
argument_list|,
name|normalizeLat
argument_list|,
name|normalizeLon
argument_list|)
expr_stmt|;
name|lat
operator|=
name|point
operator|.
name|lat
expr_stmt|;
name|lon
operator|=
name|point
operator|.
name|lon
expr_stmt|;
block|}
if|if
condition|(
name|validateLat
condition|)
block|{
if|if
condition|(
name|lat
operator|>
literal|90.0
operator|||
name|lat
operator|<
operator|-
literal|90.0
condition|)
block|{
throw|throw
operator|new
name|ElasticSearchIllegalArgumentException
argument_list|(
literal|"illegal latitude value ["
operator|+
name|lat
operator|+
literal|"] for "
operator|+
name|name
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|validateLon
condition|)
block|{
if|if
condition|(
name|lon
operator|>
literal|180.0
operator|||
name|lon
operator|<
operator|-
literal|180
condition|)
block|{
throw|throw
operator|new
name|ElasticSearchIllegalArgumentException
argument_list|(
literal|"illegal longitude value ["
operator|+
name|lon
operator|+
literal|"] for "
operator|+
name|name
argument_list|)
throw|;
block|}
block|}
name|context
operator|.
name|externalValue
argument_list|(
name|Double
operator|.
name|toString
argument_list|(
name|lat
argument_list|)
operator|+
literal|','
operator|+
name|Double
operator|.
name|toString
argument_list|(
name|lon
argument_list|)
argument_list|)
expr_stmt|;
name|geoStringMapper
operator|.
name|parse
argument_list|(
name|context
argument_list|)
expr_stmt|;
if|if
condition|(
name|enableGeoHash
condition|)
block|{
name|context
operator|.
name|externalValue
argument_list|(
name|GeoHashUtils
operator|.
name|encode
argument_list|(
name|lat
argument_list|,
name|lon
argument_list|,
name|precision
argument_list|)
argument_list|)
expr_stmt|;
name|geohashMapper
operator|.
name|parse
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|enableLatLon
condition|)
block|{
name|context
operator|.
name|externalValue
argument_list|(
name|lat
argument_list|)
expr_stmt|;
name|latMapper
operator|.
name|parse
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|context
operator|.
name|externalValue
argument_list|(
name|lon
argument_list|)
expr_stmt|;
name|lonMapper
operator|.
name|parse
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|parseGeohash
specifier|private
name|void
name|parseGeohash
parameter_list|(
name|ParseContext
name|context
parameter_list|,
name|String
name|geohash
parameter_list|)
throws|throws
name|IOException
block|{
name|double
index|[]
name|values
init|=
name|GeoHashUtils
operator|.
name|decode
argument_list|(
name|geohash
argument_list|)
decl_stmt|;
name|double
name|lat
init|=
name|values
index|[
literal|0
index|]
decl_stmt|;
name|double
name|lon
init|=
name|values
index|[
literal|1
index|]
decl_stmt|;
if|if
condition|(
name|normalizeLat
operator|||
name|normalizeLon
condition|)
block|{
name|Point
name|point
init|=
operator|new
name|Point
argument_list|(
name|lat
argument_list|,
name|lon
argument_list|)
decl_stmt|;
name|GeoUtils
operator|.
name|normalizePoint
argument_list|(
name|point
argument_list|,
name|normalizeLat
argument_list|,
name|normalizeLon
argument_list|)
expr_stmt|;
name|lat
operator|=
name|point
operator|.
name|lat
expr_stmt|;
name|lon
operator|=
name|point
operator|.
name|lon
expr_stmt|;
block|}
if|if
condition|(
name|validateLat
condition|)
block|{
if|if
condition|(
name|lat
operator|>
literal|90.0
operator|||
name|lat
operator|<
operator|-
literal|90.0
condition|)
block|{
throw|throw
operator|new
name|ElasticSearchIllegalArgumentException
argument_list|(
literal|"illegal latitude value ["
operator|+
name|lat
operator|+
literal|"] for "
operator|+
name|name
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|validateLon
condition|)
block|{
if|if
condition|(
name|lon
operator|>
literal|180.0
operator|||
name|lon
operator|<
operator|-
literal|180
condition|)
block|{
throw|throw
operator|new
name|ElasticSearchIllegalArgumentException
argument_list|(
literal|"illegal longitude value ["
operator|+
name|lon
operator|+
literal|"] for "
operator|+
name|name
argument_list|)
throw|;
block|}
block|}
name|context
operator|.
name|externalValue
argument_list|(
name|Double
operator|.
name|toString
argument_list|(
name|lat
argument_list|)
operator|+
literal|','
operator|+
name|Double
operator|.
name|toString
argument_list|(
name|lon
argument_list|)
argument_list|)
expr_stmt|;
name|geoStringMapper
operator|.
name|parse
argument_list|(
name|context
argument_list|)
expr_stmt|;
if|if
condition|(
name|enableGeoHash
condition|)
block|{
name|context
operator|.
name|externalValue
argument_list|(
name|geohash
argument_list|)
expr_stmt|;
name|geohashMapper
operator|.
name|parse
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|enableLatLon
condition|)
block|{
name|context
operator|.
name|externalValue
argument_list|(
name|lat
argument_list|)
expr_stmt|;
name|latMapper
operator|.
name|parse
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|context
operator|.
name|externalValue
argument_list|(
name|lon
argument_list|)
expr_stmt|;
name|lonMapper
operator|.
name|parse
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
name|latMapper
operator|!=
literal|null
condition|)
block|{
name|latMapper
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|lonMapper
operator|!=
literal|null
condition|)
block|{
name|lonMapper
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|geohashMapper
operator|!=
literal|null
condition|)
block|{
name|geohashMapper
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|geoStringMapper
operator|!=
literal|null
condition|)
block|{
name|geoStringMapper
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|merge
specifier|public
name|void
name|merge
parameter_list|(
name|Mapper
name|mergeWith
parameter_list|,
name|MergeContext
name|mergeContext
parameter_list|)
throws|throws
name|MergeMappingException
block|{
comment|// TODO
block|}
annotation|@
name|Override
DECL|method|traverse
specifier|public
name|void
name|traverse
parameter_list|(
name|FieldMapperListener
name|fieldMapperListener
parameter_list|)
block|{
name|geoStringMapper
operator|.
name|traverse
argument_list|(
name|fieldMapperListener
argument_list|)
expr_stmt|;
if|if
condition|(
name|enableGeoHash
condition|)
block|{
name|geohashMapper
operator|.
name|traverse
argument_list|(
name|fieldMapperListener
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|enableLatLon
condition|)
block|{
name|latMapper
operator|.
name|traverse
argument_list|(
name|fieldMapperListener
argument_list|)
expr_stmt|;
name|lonMapper
operator|.
name|traverse
argument_list|(
name|fieldMapperListener
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|traverse
specifier|public
name|void
name|traverse
parameter_list|(
name|ObjectMapperListener
name|objectMapperListener
parameter_list|)
block|{     }
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
name|CONTENT_TYPE
argument_list|)
expr_stmt|;
if|if
condition|(
name|pathType
operator|!=
name|Defaults
operator|.
name|PATH_TYPE
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"path"
argument_list|,
name|pathType
operator|.
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|enableLatLon
operator|!=
name|Defaults
operator|.
name|ENABLE_LATLON
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"lat_lon"
argument_list|,
name|enableLatLon
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|enableGeoHash
operator|!=
name|Defaults
operator|.
name|ENABLE_GEOHASH
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"geohash"
argument_list|,
name|enableGeoHash
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|geoStringMapper
operator|.
name|fieldType
argument_list|()
operator|.
name|stored
argument_list|()
operator|!=
name|Defaults
operator|.
name|STORE
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"store"
argument_list|,
name|geoStringMapper
operator|.
name|fieldType
argument_list|()
operator|.
name|stored
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|precision
operator|!=
name|Defaults
operator|.
name|PRECISION
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"geohash_precision"
argument_list|,
name|precision
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|precisionStep
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"precision_step"
argument_list|,
name|precisionStep
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|validateLat
operator|&&
operator|!
name|validateLon
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"validate"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|validateLat
operator|!=
name|Defaults
operator|.
name|VALIDATE_LAT
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"validate_lat"
argument_list|,
name|validateLat
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|validateLon
operator|!=
name|Defaults
operator|.
name|VALIDATE_LON
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"validate_lon"
argument_list|,
name|validateLon
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|normalizeLat
operator|&&
operator|!
name|normalizeLon
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"normalize"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|normalizeLat
operator|!=
name|Defaults
operator|.
name|NORMALIZE_LAT
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"normalize_lat"
argument_list|,
name|normalizeLat
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|normalizeLon
operator|!=
name|Defaults
operator|.
name|NORMALIZE_LON
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"normalize_lon"
argument_list|,
name|normalizeLon
argument_list|)
expr_stmt|;
block|}
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
DECL|class|GeoStringFieldMapper
specifier|public
specifier|static
class|class
name|GeoStringFieldMapper
extends|extends
name|StringFieldMapper
block|{
DECL|class|Builder
specifier|public
specifier|static
class|class
name|Builder
extends|extends
name|AbstractFieldMapper
operator|.
name|OpenBuilder
argument_list|<
name|Builder
argument_list|,
name|StringFieldMapper
argument_list|>
block|{
DECL|field|nullValue
specifier|protected
name|String
name|nullValue
init|=
name|Defaults
operator|.
name|NULL_VALUE
decl_stmt|;
DECL|method|Builder
specifier|public
name|Builder
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
operator|new
name|FieldType
argument_list|(
name|GeoPointFieldMapper
operator|.
name|Defaults
operator|.
name|FIELD_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|=
name|this
expr_stmt|;
block|}
DECL|method|nullValue
specifier|public
name|Builder
name|nullValue
parameter_list|(
name|String
name|nullValue
parameter_list|)
block|{
name|this
operator|.
name|nullValue
operator|=
name|nullValue
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|includeInAll
specifier|public
name|Builder
name|includeInAll
parameter_list|(
name|Boolean
name|includeInAll
parameter_list|)
block|{
name|this
operator|.
name|includeInAll
operator|=
name|includeInAll
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|build
specifier|public
name|GeoStringFieldMapper
name|build
parameter_list|(
name|BuilderContext
name|context
parameter_list|)
block|{
name|GeoStringFieldMapper
name|fieldMapper
init|=
operator|new
name|GeoStringFieldMapper
argument_list|(
name|buildNames
argument_list|(
name|context
argument_list|)
argument_list|,
name|boost
argument_list|,
name|fieldType
argument_list|,
name|nullValue
argument_list|,
name|indexAnalyzer
argument_list|,
name|searchAnalyzer
argument_list|,
name|provider
argument_list|)
decl_stmt|;
name|fieldMapper
operator|.
name|includeInAll
argument_list|(
name|includeInAll
argument_list|)
expr_stmt|;
return|return
name|fieldMapper
return|;
block|}
block|}
DECL|field|geoMapper
name|GeoPointFieldMapper
name|geoMapper
decl_stmt|;
DECL|method|GeoStringFieldMapper
specifier|public
name|GeoStringFieldMapper
parameter_list|(
name|Names
name|names
parameter_list|,
name|float
name|boost
parameter_list|,
name|FieldType
name|fieldType
parameter_list|,
name|String
name|nullValue
parameter_list|,
name|NamedAnalyzer
name|indexAnalyzer
parameter_list|,
name|NamedAnalyzer
name|searchAnalyzer
parameter_list|,
name|PostingsFormatProvider
name|provider
parameter_list|)
block|{
name|super
argument_list|(
name|names
argument_list|,
name|boost
argument_list|,
name|fieldType
argument_list|,
name|nullValue
argument_list|,
name|indexAnalyzer
argument_list|,
name|searchAnalyzer
argument_list|,
name|provider
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|defaultFieldType
specifier|public
name|FieldType
name|defaultFieldType
parameter_list|()
block|{
return|return
name|GeoPointFieldMapper
operator|.
name|Defaults
operator|.
name|FIELD_TYPE
return|;
block|}
annotation|@
name|Override
DECL|method|fieldDataType
specifier|public
name|FieldDataType
name|fieldDataType
parameter_list|()
block|{
return|return
name|GeoPointFieldDataType
operator|.
name|TYPE
return|;
block|}
DECL|method|geoMapper
specifier|public
name|GeoPointFieldMapper
name|geoMapper
parameter_list|()
block|{
return|return
name|geoMapper
return|;
block|}
block|}
block|}
end_class

end_unit

