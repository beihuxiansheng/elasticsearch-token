begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.mapper
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|UnmodifiableIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableOpenMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|regex
operator|.
name|Regex
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * A class that holds a map of field mappers from name, index name, and full name.  */
end_comment

begin_class
DECL|class|FieldMappersLookup
specifier|public
class|class
name|FieldMappersLookup
implements|implements
name|Iterable
argument_list|<
name|FieldMapper
argument_list|>
block|{
DECL|field|mappers
specifier|private
specifier|volatile
name|ImmutableList
argument_list|<
name|FieldMapper
argument_list|>
name|mappers
decl_stmt|;
DECL|field|name
specifier|private
specifier|volatile
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|FieldMappers
argument_list|>
name|name
decl_stmt|;
DECL|field|indexName
specifier|private
specifier|volatile
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|FieldMappers
argument_list|>
name|indexName
decl_stmt|;
DECL|field|fullName
specifier|private
specifier|volatile
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|FieldMappers
argument_list|>
name|fullName
decl_stmt|;
DECL|method|FieldMappersLookup
specifier|public
name|FieldMappersLookup
parameter_list|()
block|{
name|this
operator|.
name|mappers
operator|=
name|ImmutableList
operator|.
name|of
argument_list|()
expr_stmt|;
name|this
operator|.
name|fullName
operator|=
name|ImmutableOpenMap
operator|.
name|of
argument_list|()
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|ImmutableOpenMap
operator|.
name|of
argument_list|()
expr_stmt|;
name|this
operator|.
name|indexName
operator|=
name|ImmutableOpenMap
operator|.
name|of
argument_list|()
expr_stmt|;
block|}
comment|/**      * Adds a new set of mappers.      */
DECL|method|addNewMappers
specifier|public
name|void
name|addNewMappers
parameter_list|(
name|Iterable
argument_list|<
name|FieldMapper
argument_list|>
name|newMappers
parameter_list|)
block|{
specifier|final
name|ImmutableOpenMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|FieldMappers
argument_list|>
name|tempName
init|=
name|ImmutableOpenMap
operator|.
name|builder
argument_list|(
name|name
argument_list|)
decl_stmt|;
specifier|final
name|ImmutableOpenMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|FieldMappers
argument_list|>
name|tempIndexName
init|=
name|ImmutableOpenMap
operator|.
name|builder
argument_list|(
name|indexName
argument_list|)
decl_stmt|;
specifier|final
name|ImmutableOpenMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|FieldMappers
argument_list|>
name|tempFullName
init|=
name|ImmutableOpenMap
operator|.
name|builder
argument_list|(
name|fullName
argument_list|)
decl_stmt|;
for|for
control|(
name|FieldMapper
name|fieldMapper
range|:
name|newMappers
control|)
block|{
name|FieldMappers
name|mappers
init|=
name|tempName
operator|.
name|get
argument_list|(
name|fieldMapper
operator|.
name|names
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|mappers
operator|==
literal|null
condition|)
block|{
name|mappers
operator|=
operator|new
name|FieldMappers
argument_list|(
name|fieldMapper
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|mappers
operator|=
name|mappers
operator|.
name|concat
argument_list|(
name|fieldMapper
argument_list|)
expr_stmt|;
block|}
name|tempName
operator|.
name|put
argument_list|(
name|fieldMapper
operator|.
name|names
argument_list|()
operator|.
name|name
argument_list|()
argument_list|,
name|mappers
argument_list|)
expr_stmt|;
name|mappers
operator|=
name|tempIndexName
operator|.
name|get
argument_list|(
name|fieldMapper
operator|.
name|names
argument_list|()
operator|.
name|indexName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|mappers
operator|==
literal|null
condition|)
block|{
name|mappers
operator|=
operator|new
name|FieldMappers
argument_list|(
name|fieldMapper
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|mappers
operator|=
name|mappers
operator|.
name|concat
argument_list|(
name|fieldMapper
argument_list|)
expr_stmt|;
block|}
name|tempIndexName
operator|.
name|put
argument_list|(
name|fieldMapper
operator|.
name|names
argument_list|()
operator|.
name|indexName
argument_list|()
argument_list|,
name|mappers
argument_list|)
expr_stmt|;
name|mappers
operator|=
name|tempFullName
operator|.
name|get
argument_list|(
name|fieldMapper
operator|.
name|names
argument_list|()
operator|.
name|fullName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|mappers
operator|==
literal|null
condition|)
block|{
name|mappers
operator|=
operator|new
name|FieldMappers
argument_list|(
name|fieldMapper
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|mappers
operator|=
name|mappers
operator|.
name|concat
argument_list|(
name|fieldMapper
argument_list|)
expr_stmt|;
block|}
name|tempFullName
operator|.
name|put
argument_list|(
name|fieldMapper
operator|.
name|names
argument_list|()
operator|.
name|fullName
argument_list|()
argument_list|,
name|mappers
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|mappers
operator|=
name|ImmutableList
operator|.
expr|<
name|FieldMapper
operator|>
name|builder
argument_list|()
operator|.
name|addAll
argument_list|(
name|this
operator|.
name|mappers
argument_list|)
operator|.
name|addAll
argument_list|(
name|newMappers
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|tempName
operator|.
name|build
argument_list|()
expr_stmt|;
name|this
operator|.
name|indexName
operator|=
name|tempIndexName
operator|.
name|build
argument_list|()
expr_stmt|;
name|this
operator|.
name|fullName
operator|=
name|tempFullName
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
comment|/**      * Removes the set of mappers.      */
DECL|method|removeMappers
specifier|public
name|void
name|removeMappers
parameter_list|(
name|Iterable
argument_list|<
name|FieldMapper
argument_list|>
name|mappersToRemove
parameter_list|)
block|{
name|List
argument_list|<
name|FieldMapper
argument_list|>
name|tempMappers
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldMapper
argument_list|>
argument_list|(
name|this
operator|.
name|mappers
argument_list|)
decl_stmt|;
name|ImmutableOpenMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|FieldMappers
argument_list|>
name|tempName
init|=
name|ImmutableOpenMap
operator|.
name|builder
argument_list|(
name|this
operator|.
name|name
argument_list|)
decl_stmt|;
name|ImmutableOpenMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|FieldMappers
argument_list|>
name|tempIndexName
init|=
name|ImmutableOpenMap
operator|.
name|builder
argument_list|(
name|this
operator|.
name|indexName
argument_list|)
decl_stmt|;
name|ImmutableOpenMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|FieldMappers
argument_list|>
name|tempFullName
init|=
name|ImmutableOpenMap
operator|.
name|builder
argument_list|(
name|this
operator|.
name|fullName
argument_list|)
decl_stmt|;
for|for
control|(
name|FieldMapper
name|mapper
range|:
name|mappersToRemove
control|)
block|{
name|FieldMappers
name|mappers
init|=
name|tempName
operator|.
name|get
argument_list|(
name|mapper
operator|.
name|names
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|mappers
operator|!=
literal|null
condition|)
block|{
name|mappers
operator|=
name|mappers
operator|.
name|remove
argument_list|(
name|mapper
argument_list|)
expr_stmt|;
if|if
condition|(
name|mappers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|tempName
operator|.
name|remove
argument_list|(
name|mapper
operator|.
name|names
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|tempName
operator|.
name|put
argument_list|(
name|mapper
operator|.
name|names
argument_list|()
operator|.
name|name
argument_list|()
argument_list|,
name|mappers
argument_list|)
expr_stmt|;
block|}
block|}
name|mappers
operator|=
name|tempIndexName
operator|.
name|get
argument_list|(
name|mapper
operator|.
name|names
argument_list|()
operator|.
name|indexName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|mappers
operator|!=
literal|null
condition|)
block|{
name|mappers
operator|=
name|mappers
operator|.
name|remove
argument_list|(
name|mapper
argument_list|)
expr_stmt|;
if|if
condition|(
name|mappers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|tempIndexName
operator|.
name|remove
argument_list|(
name|mapper
operator|.
name|names
argument_list|()
operator|.
name|indexName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|tempIndexName
operator|.
name|put
argument_list|(
name|mapper
operator|.
name|names
argument_list|()
operator|.
name|indexName
argument_list|()
argument_list|,
name|mappers
argument_list|)
expr_stmt|;
block|}
block|}
name|mappers
operator|=
name|tempFullName
operator|.
name|get
argument_list|(
name|mapper
operator|.
name|names
argument_list|()
operator|.
name|fullName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|mappers
operator|!=
literal|null
condition|)
block|{
name|mappers
operator|=
name|mappers
operator|.
name|remove
argument_list|(
name|mapper
argument_list|)
expr_stmt|;
if|if
condition|(
name|mappers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|tempFullName
operator|.
name|remove
argument_list|(
name|mapper
operator|.
name|names
argument_list|()
operator|.
name|fullName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|tempFullName
operator|.
name|put
argument_list|(
name|mapper
operator|.
name|names
argument_list|()
operator|.
name|fullName
argument_list|()
argument_list|,
name|mappers
argument_list|)
expr_stmt|;
block|}
block|}
name|tempMappers
operator|.
name|remove
argument_list|(
name|mapper
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|mappers
operator|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|tempMappers
argument_list|)
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|tempName
operator|.
name|build
argument_list|()
expr_stmt|;
name|this
operator|.
name|indexName
operator|=
name|tempIndexName
operator|.
name|build
argument_list|()
expr_stmt|;
name|this
operator|.
name|fullName
operator|=
name|tempFullName
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|iterator
specifier|public
name|UnmodifiableIterator
argument_list|<
name|FieldMapper
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|mappers
operator|.
name|iterator
argument_list|()
return|;
block|}
comment|/**      * The list of all mappers.      */
DECL|method|mappers
specifier|public
name|ImmutableList
argument_list|<
name|FieldMapper
argument_list|>
name|mappers
parameter_list|()
block|{
return|return
name|this
operator|.
name|mappers
return|;
block|}
comment|/**      * Is there a mapper (based on unique {@link FieldMapper} identity)?      */
DECL|method|hasMapper
specifier|public
name|boolean
name|hasMapper
parameter_list|(
name|FieldMapper
name|fieldMapper
parameter_list|)
block|{
return|return
name|mappers
operator|.
name|contains
argument_list|(
name|fieldMapper
argument_list|)
return|;
block|}
comment|/**      * Returns the field mappers based on the mapper name.      */
DECL|method|name
specifier|public
name|FieldMappers
name|name
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|this
operator|.
name|name
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
comment|/**      * Returns the field mappers based on the mapper index name.      */
DECL|method|indexName
specifier|public
name|FieldMappers
name|indexName
parameter_list|(
name|String
name|indexName
parameter_list|)
block|{
return|return
name|this
operator|.
name|indexName
operator|.
name|get
argument_list|(
name|indexName
argument_list|)
return|;
block|}
comment|/**      * Returns the field mappers based on the mapper full name.      */
DECL|method|fullName
specifier|public
name|FieldMappers
name|fullName
parameter_list|(
name|String
name|fullName
parameter_list|)
block|{
return|return
name|this
operator|.
name|fullName
operator|.
name|get
argument_list|(
name|fullName
argument_list|)
return|;
block|}
comment|/**      * Returns a set of the index names of a simple match regex like pattern against full name, name and index name.      */
DECL|method|simpleMatchToIndexNames
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|simpleMatchToIndexNames
parameter_list|(
name|String
name|pattern
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|fields
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|FieldMapper
name|fieldMapper
range|:
name|mappers
control|)
block|{
if|if
condition|(
name|Regex
operator|.
name|simpleMatch
argument_list|(
name|pattern
argument_list|,
name|fieldMapper
operator|.
name|names
argument_list|()
operator|.
name|fullName
argument_list|()
argument_list|)
condition|)
block|{
name|fields
operator|.
name|add
argument_list|(
name|fieldMapper
operator|.
name|names
argument_list|()
operator|.
name|indexName
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Regex
operator|.
name|simpleMatch
argument_list|(
name|pattern
argument_list|,
name|fieldMapper
operator|.
name|names
argument_list|()
operator|.
name|indexName
argument_list|()
argument_list|)
condition|)
block|{
name|fields
operator|.
name|add
argument_list|(
name|fieldMapper
operator|.
name|names
argument_list|()
operator|.
name|indexName
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Regex
operator|.
name|simpleMatch
argument_list|(
name|pattern
argument_list|,
name|fieldMapper
operator|.
name|names
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
condition|)
block|{
name|fields
operator|.
name|add
argument_list|(
name|fieldMapper
operator|.
name|names
argument_list|()
operator|.
name|indexName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|fields
return|;
block|}
comment|/**      * Returns a set of the full names of a simple match regex like pattern against full name, name and index name.      */
DECL|method|simpleMatchToFullName
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|simpleMatchToFullName
parameter_list|(
name|String
name|pattern
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|fields
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|FieldMapper
name|fieldMapper
range|:
name|mappers
control|)
block|{
if|if
condition|(
name|Regex
operator|.
name|simpleMatch
argument_list|(
name|pattern
argument_list|,
name|fieldMapper
operator|.
name|names
argument_list|()
operator|.
name|fullName
argument_list|()
argument_list|)
condition|)
block|{
name|fields
operator|.
name|add
argument_list|(
name|fieldMapper
operator|.
name|names
argument_list|()
operator|.
name|fullName
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Regex
operator|.
name|simpleMatch
argument_list|(
name|pattern
argument_list|,
name|fieldMapper
operator|.
name|names
argument_list|()
operator|.
name|indexName
argument_list|()
argument_list|)
condition|)
block|{
name|fields
operator|.
name|add
argument_list|(
name|fieldMapper
operator|.
name|names
argument_list|()
operator|.
name|fullName
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Regex
operator|.
name|simpleMatch
argument_list|(
name|pattern
argument_list|,
name|fieldMapper
operator|.
name|names
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
condition|)
block|{
name|fields
operator|.
name|add
argument_list|(
name|fieldMapper
operator|.
name|names
argument_list|()
operator|.
name|fullName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|fields
return|;
block|}
comment|/**      * Tries to find first based on {@link #fullName(String)}, then by {@link #indexName(String)}, and last      * by {@link #name(String)}.      */
annotation|@
name|Nullable
DECL|method|smartName
specifier|public
name|FieldMappers
name|smartName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|FieldMappers
name|fieldMappers
init|=
name|fullName
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|fieldMappers
operator|!=
literal|null
condition|)
block|{
return|return
name|fieldMappers
return|;
block|}
name|fieldMappers
operator|=
name|indexName
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|fieldMappers
operator|!=
literal|null
condition|)
block|{
return|return
name|fieldMappers
return|;
block|}
return|return
name|name
argument_list|(
name|name
argument_list|)
return|;
block|}
comment|/**      * Tries to find first based on {@link #fullName(String)}, then by {@link #indexName(String)}, and last      * by {@link #name(String)} and return the first mapper for it (see {@link org.elasticsearch.index.mapper.FieldMappers#mapper()}).      */
annotation|@
name|Nullable
DECL|method|smartNameFieldMapper
specifier|public
name|FieldMapper
name|smartNameFieldMapper
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|FieldMappers
name|fieldMappers
init|=
name|smartName
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|fieldMappers
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|fieldMappers
operator|.
name|mapper
argument_list|()
return|;
block|}
block|}
end_class

end_unit

