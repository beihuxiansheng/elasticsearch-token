begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.mapper
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ForwardingSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|CopyOnWriteHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|CopyOnWriteHashSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|regex
operator|.
name|Regex
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * A class that holds a map of field mappers from name, index name, and full name.  */
end_comment

begin_class
DECL|class|FieldMappersLookup
specifier|public
class|class
name|FieldMappersLookup
extends|extends
name|ForwardingSet
argument_list|<
name|FieldMapper
argument_list|<
name|?
argument_list|>
argument_list|>
block|{
DECL|method|add
specifier|private
specifier|static
name|CopyOnWriteHashMap
argument_list|<
name|String
argument_list|,
name|FieldMappers
argument_list|>
name|add
parameter_list|(
name|CopyOnWriteHashMap
argument_list|<
name|String
argument_list|,
name|FieldMappers
argument_list|>
name|map
parameter_list|,
name|String
name|key
parameter_list|,
name|FieldMapper
argument_list|<
name|?
argument_list|>
name|mapper
parameter_list|)
block|{
name|FieldMappers
name|mappers
init|=
name|map
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|mappers
operator|==
literal|null
condition|)
block|{
name|mappers
operator|=
operator|new
name|FieldMappers
argument_list|(
name|mapper
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|mappers
operator|=
name|mappers
operator|.
name|concat
argument_list|(
name|mapper
argument_list|)
expr_stmt|;
block|}
return|return
name|map
operator|.
name|copyAndPut
argument_list|(
name|key
argument_list|,
name|mappers
argument_list|)
return|;
block|}
DECL|method|remove
specifier|private
specifier|static
name|CopyOnWriteHashMap
argument_list|<
name|String
argument_list|,
name|FieldMappers
argument_list|>
name|remove
parameter_list|(
name|CopyOnWriteHashMap
argument_list|<
name|String
argument_list|,
name|FieldMappers
argument_list|>
name|map
parameter_list|,
name|String
name|key
parameter_list|,
name|FieldMapper
argument_list|<
name|?
argument_list|>
name|mapper
parameter_list|)
block|{
name|FieldMappers
name|mappers
init|=
name|map
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|mappers
operator|==
literal|null
condition|)
block|{
return|return
name|map
return|;
block|}
name|mappers
operator|=
name|mappers
operator|.
name|remove
argument_list|(
name|mapper
argument_list|)
expr_stmt|;
if|if
condition|(
name|mappers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|map
operator|.
name|copyAndRemove
argument_list|(
name|key
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|map
operator|.
name|copyAndPut
argument_list|(
name|key
argument_list|,
name|mappers
argument_list|)
return|;
block|}
block|}
DECL|class|MappersLookup
specifier|private
specifier|static
class|class
name|MappersLookup
block|{
DECL|field|name
DECL|field|indexName
DECL|field|fullName
specifier|final
name|CopyOnWriteHashMap
argument_list|<
name|String
argument_list|,
name|FieldMappers
argument_list|>
name|name
decl_stmt|,
name|indexName
decl_stmt|,
name|fullName
decl_stmt|;
DECL|method|MappersLookup
name|MappersLookup
parameter_list|(
name|CopyOnWriteHashMap
argument_list|<
name|String
argument_list|,
name|FieldMappers
argument_list|>
name|name
parameter_list|,
name|CopyOnWriteHashMap
argument_list|<
name|String
argument_list|,
name|FieldMappers
argument_list|>
name|indexName
parameter_list|,
name|CopyOnWriteHashMap
argument_list|<
name|String
argument_list|,
name|FieldMappers
argument_list|>
name|fullName
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|indexName
operator|=
name|indexName
expr_stmt|;
name|this
operator|.
name|fullName
operator|=
name|fullName
expr_stmt|;
block|}
DECL|method|addNewMappers
name|MappersLookup
name|addNewMappers
parameter_list|(
name|Iterable
argument_list|<
name|?
extends|extends
name|FieldMapper
argument_list|<
name|?
argument_list|>
argument_list|>
name|mappers
parameter_list|)
block|{
name|CopyOnWriteHashMap
argument_list|<
name|String
argument_list|,
name|FieldMappers
argument_list|>
name|name
init|=
name|this
operator|.
name|name
decl_stmt|;
name|CopyOnWriteHashMap
argument_list|<
name|String
argument_list|,
name|FieldMappers
argument_list|>
name|indexName
init|=
name|this
operator|.
name|indexName
decl_stmt|;
name|CopyOnWriteHashMap
argument_list|<
name|String
argument_list|,
name|FieldMappers
argument_list|>
name|fullName
init|=
name|this
operator|.
name|fullName
decl_stmt|;
for|for
control|(
name|FieldMapper
argument_list|<
name|?
argument_list|>
name|mapper
range|:
name|mappers
control|)
block|{
name|name
operator|=
name|add
argument_list|(
name|name
argument_list|,
name|mapper
operator|.
name|names
argument_list|()
operator|.
name|name
argument_list|()
argument_list|,
name|mapper
argument_list|)
expr_stmt|;
name|indexName
operator|=
name|add
argument_list|(
name|indexName
argument_list|,
name|mapper
operator|.
name|names
argument_list|()
operator|.
name|indexName
argument_list|()
argument_list|,
name|mapper
argument_list|)
expr_stmt|;
name|fullName
operator|=
name|add
argument_list|(
name|fullName
argument_list|,
name|mapper
operator|.
name|names
argument_list|()
operator|.
name|fullName
argument_list|()
argument_list|,
name|mapper
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|MappersLookup
argument_list|(
name|name
argument_list|,
name|indexName
argument_list|,
name|fullName
argument_list|)
return|;
block|}
DECL|method|removeMappers
name|MappersLookup
name|removeMappers
parameter_list|(
name|Iterable
argument_list|<
name|?
argument_list|>
name|mappers
parameter_list|)
block|{
name|CopyOnWriteHashMap
argument_list|<
name|String
argument_list|,
name|FieldMappers
argument_list|>
name|name
init|=
name|this
operator|.
name|name
decl_stmt|;
name|CopyOnWriteHashMap
argument_list|<
name|String
argument_list|,
name|FieldMappers
argument_list|>
name|indexName
init|=
name|this
operator|.
name|indexName
decl_stmt|;
name|CopyOnWriteHashMap
argument_list|<
name|String
argument_list|,
name|FieldMappers
argument_list|>
name|fullName
init|=
name|this
operator|.
name|fullName
decl_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|mappers
control|)
block|{
if|if
condition|(
operator|!
operator|(
name|o
operator|instanceof
name|FieldMapper
operator|)
condition|)
block|{
continue|continue;
block|}
name|FieldMapper
argument_list|<
name|?
argument_list|>
name|mapper
init|=
operator|(
name|FieldMapper
argument_list|<
name|?
argument_list|>
operator|)
name|o
decl_stmt|;
name|name
operator|=
name|remove
argument_list|(
name|name
argument_list|,
name|mapper
operator|.
name|names
argument_list|()
operator|.
name|name
argument_list|()
argument_list|,
name|mapper
argument_list|)
expr_stmt|;
name|indexName
operator|=
name|remove
argument_list|(
name|indexName
argument_list|,
name|mapper
operator|.
name|names
argument_list|()
operator|.
name|indexName
argument_list|()
argument_list|,
name|mapper
argument_list|)
expr_stmt|;
name|fullName
operator|=
name|remove
argument_list|(
name|fullName
argument_list|,
name|mapper
operator|.
name|names
argument_list|()
operator|.
name|fullName
argument_list|()
argument_list|,
name|mapper
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|MappersLookup
argument_list|(
name|name
argument_list|,
name|indexName
argument_list|,
name|fullName
argument_list|)
return|;
block|}
block|}
DECL|field|mappers
specifier|private
specifier|final
name|CopyOnWriteHashSet
argument_list|<
name|FieldMapper
argument_list|<
name|?
argument_list|>
argument_list|>
name|mappers
decl_stmt|;
DECL|field|lookup
specifier|private
specifier|final
name|MappersLookup
name|lookup
decl_stmt|;
comment|/** Create a new empty instance. */
DECL|method|FieldMappersLookup
specifier|public
name|FieldMappersLookup
parameter_list|()
block|{
name|this
argument_list|(
operator|new
name|CopyOnWriteHashSet
argument_list|<
name|FieldMapper
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
operator|,
operator|new
name|MappersLookup
argument_list|(
operator|new
name|CopyOnWriteHashMap
argument_list|<
name|String
argument_list|,
name|FieldMappers
argument_list|>
argument_list|()
argument_list|,
operator|new
name|CopyOnWriteHashMap
argument_list|<
name|String
argument_list|,
name|FieldMappers
argument_list|>
argument_list|()
argument_list|,
operator|new
name|CopyOnWriteHashMap
argument_list|<
name|String
argument_list|,
name|FieldMappers
argument_list|>
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|FieldMappersLookup
specifier|private
name|FieldMappersLookup
parameter_list|(
name|CopyOnWriteHashSet
argument_list|<
name|FieldMapper
argument_list|<
name|?
argument_list|>
argument_list|>
name|mappers
parameter_list|,
name|MappersLookup
name|lookup
parameter_list|)
block|{
name|this
operator|.
name|mappers
operator|=
name|mappers
expr_stmt|;
name|this
operator|.
name|lookup
operator|=
name|lookup
expr_stmt|;
block|}
comment|/**      * Return a new instance that contains the union of this instance and the provided mappers.      */
DECL|method|copyAndAddAll
specifier|public
name|FieldMappersLookup
name|copyAndAddAll
parameter_list|(
name|Collection
argument_list|<
name|?
extends|extends
name|FieldMapper
argument_list|<
name|?
argument_list|>
argument_list|>
name|newMappers
parameter_list|)
block|{
return|return
operator|new
name|FieldMappersLookup
argument_list|(
name|mappers
operator|.
name|copyAndAddAll
argument_list|(
name|newMappers
argument_list|)
argument_list|,
name|lookup
operator|.
name|addNewMappers
argument_list|(
name|newMappers
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Return a new instance that contains this instance minus the provided mappers.      */
DECL|method|copyAndRemoveAll
specifier|public
name|FieldMappersLookup
name|copyAndRemoveAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|mappersToRemove
parameter_list|)
block|{
specifier|final
name|CopyOnWriteHashSet
argument_list|<
name|FieldMapper
argument_list|<
name|?
argument_list|>
argument_list|>
name|newMappers
init|=
name|mappers
operator|.
name|copyAndRemoveAll
argument_list|(
name|mappersToRemove
argument_list|)
decl_stmt|;
if|if
condition|(
name|newMappers
operator|!=
name|mappers
condition|)
block|{
return|return
operator|new
name|FieldMappersLookup
argument_list|(
name|newMappers
argument_list|,
name|lookup
operator|.
name|removeMappers
argument_list|(
name|mappersToRemove
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|this
return|;
block|}
block|}
comment|/**      * Returns the field mappers based on the mapper name.      */
DECL|method|name
specifier|public
name|FieldMappers
name|name
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|lookup
operator|.
name|name
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
comment|/**      * Returns the field mappers based on the mapper index name.      */
DECL|method|indexName
specifier|public
name|FieldMappers
name|indexName
parameter_list|(
name|String
name|indexName
parameter_list|)
block|{
return|return
name|lookup
operator|.
name|indexName
operator|.
name|get
argument_list|(
name|indexName
argument_list|)
return|;
block|}
comment|/**      * Returns the field mappers based on the mapper full name.      */
DECL|method|fullName
specifier|public
name|FieldMappers
name|fullName
parameter_list|(
name|String
name|fullName
parameter_list|)
block|{
return|return
name|lookup
operator|.
name|fullName
operator|.
name|get
argument_list|(
name|fullName
argument_list|)
return|;
block|}
comment|/**      * Returns a list of the index names of a simple match regex like pattern against full name, name and index name.      */
DECL|method|simpleMatchToIndexNames
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|simpleMatchToIndexNames
parameter_list|(
name|String
name|pattern
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|fields
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|FieldMapper
argument_list|<
name|?
argument_list|>
name|fieldMapper
range|:
name|mappers
control|)
block|{
if|if
condition|(
name|Regex
operator|.
name|simpleMatch
argument_list|(
name|pattern
argument_list|,
name|fieldMapper
operator|.
name|names
argument_list|()
operator|.
name|fullName
argument_list|()
argument_list|)
condition|)
block|{
name|fields
operator|.
name|add
argument_list|(
name|fieldMapper
operator|.
name|names
argument_list|()
operator|.
name|indexName
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Regex
operator|.
name|simpleMatch
argument_list|(
name|pattern
argument_list|,
name|fieldMapper
operator|.
name|names
argument_list|()
operator|.
name|indexName
argument_list|()
argument_list|)
condition|)
block|{
name|fields
operator|.
name|add
argument_list|(
name|fieldMapper
operator|.
name|names
argument_list|()
operator|.
name|indexName
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Regex
operator|.
name|simpleMatch
argument_list|(
name|pattern
argument_list|,
name|fieldMapper
operator|.
name|names
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
condition|)
block|{
name|fields
operator|.
name|add
argument_list|(
name|fieldMapper
operator|.
name|names
argument_list|()
operator|.
name|indexName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|fields
return|;
block|}
comment|/**      * Returns a list of the full names of a simple match regex like pattern against full name, name and index name.      */
DECL|method|simpleMatchToFullName
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|simpleMatchToFullName
parameter_list|(
name|String
name|pattern
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|fields
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|FieldMapper
argument_list|<
name|?
argument_list|>
name|fieldMapper
range|:
name|mappers
control|)
block|{
if|if
condition|(
name|Regex
operator|.
name|simpleMatch
argument_list|(
name|pattern
argument_list|,
name|fieldMapper
operator|.
name|names
argument_list|()
operator|.
name|fullName
argument_list|()
argument_list|)
condition|)
block|{
name|fields
operator|.
name|add
argument_list|(
name|fieldMapper
operator|.
name|names
argument_list|()
operator|.
name|fullName
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Regex
operator|.
name|simpleMatch
argument_list|(
name|pattern
argument_list|,
name|fieldMapper
operator|.
name|names
argument_list|()
operator|.
name|indexName
argument_list|()
argument_list|)
condition|)
block|{
name|fields
operator|.
name|add
argument_list|(
name|fieldMapper
operator|.
name|names
argument_list|()
operator|.
name|fullName
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Regex
operator|.
name|simpleMatch
argument_list|(
name|pattern
argument_list|,
name|fieldMapper
operator|.
name|names
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
condition|)
block|{
name|fields
operator|.
name|add
argument_list|(
name|fieldMapper
operator|.
name|names
argument_list|()
operator|.
name|fullName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|fields
return|;
block|}
comment|/**      * Tries to find first based on {@link #fullName(String)}, then by {@link #indexName(String)}, and last      * by {@link #name(String)}.      */
annotation|@
name|Nullable
DECL|method|smartName
specifier|public
name|FieldMappers
name|smartName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|FieldMappers
name|fieldMappers
init|=
name|fullName
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|fieldMappers
operator|!=
literal|null
condition|)
block|{
return|return
name|fieldMappers
return|;
block|}
name|fieldMappers
operator|=
name|indexName
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|fieldMappers
operator|!=
literal|null
condition|)
block|{
return|return
name|fieldMappers
return|;
block|}
return|return
name|name
argument_list|(
name|name
argument_list|)
return|;
block|}
comment|/**      * Tries to find first based on {@link #fullName(String)}, then by {@link #indexName(String)}, and last      * by {@link #name(String)} and return the first mapper for it (see {@link org.elasticsearch.index.mapper.FieldMappers#mapper()}).      */
annotation|@
name|Nullable
DECL|method|smartNameFieldMapper
specifier|public
name|FieldMapper
argument_list|<
name|?
argument_list|>
name|smartNameFieldMapper
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|FieldMappers
name|fieldMappers
init|=
name|smartName
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|fieldMappers
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|fieldMappers
operator|.
name|mapper
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|delegate
specifier|protected
name|Set
argument_list|<
name|FieldMapper
argument_list|<
name|?
argument_list|>
argument_list|>
name|delegate
parameter_list|()
block|{
return|return
name|mappers
return|;
block|}
block|}
end_class

end_unit

