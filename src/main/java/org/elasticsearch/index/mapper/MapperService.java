begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.mapper
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|AnalyzerWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|FilterClause
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|TermFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|TermsFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanClause
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|MapBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|Streams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|search
operator|.
name|AndFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|search
operator|.
name|NotFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|search
operator|.
name|XBooleanFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|regex
operator|.
name|Regex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|Environment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|FailedToResolveConfigException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|AbstractIndexComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|AnalysisService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|codec
operator|.
name|docvaluesformat
operator|.
name|DocValuesFormatService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|codec
operator|.
name|postingsformat
operator|.
name|PostingsFormatService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|internal
operator|.
name|TypeFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|object
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|search
operator|.
name|nested
operator|.
name|NonNestedDocsFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|settings
operator|.
name|IndexSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|similarity
operator|.
name|SimilarityLookupService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|InvalidTypeNameException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|TypeMissingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|percolator
operator|.
name|PercolatorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArrayList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|MapBuilder
operator|.
name|newMapBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|DocumentMapper
operator|.
name|MergeFlags
operator|.
name|mergeFlags
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|MapperService
specifier|public
class|class
name|MapperService
extends|extends
name|AbstractIndexComponent
implements|implements
name|Iterable
argument_list|<
name|DocumentMapper
argument_list|>
block|{
DECL|field|DEFAULT_MAPPING
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_MAPPING
init|=
literal|"_default_"
decl_stmt|;
DECL|field|analysisService
specifier|private
specifier|final
name|AnalysisService
name|analysisService
decl_stmt|;
comment|/**      * Will create types automatically if they do not exists in the mapping definition yet      */
DECL|field|dynamic
specifier|private
specifier|final
name|boolean
name|dynamic
decl_stmt|;
DECL|field|defaultMappingSource
specifier|private
specifier|volatile
name|String
name|defaultMappingSource
decl_stmt|;
DECL|field|percolatorMappingSource
specifier|private
specifier|volatile
name|String
name|percolatorMappingSource
decl_stmt|;
DECL|field|mappers
specifier|private
specifier|volatile
name|Map
argument_list|<
name|String
argument_list|,
name|DocumentMapper
argument_list|>
name|mappers
init|=
name|ImmutableMap
operator|.
name|of
argument_list|()
decl_stmt|;
DECL|field|typeMutex
specifier|private
specifier|final
name|Object
name|typeMutex
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
DECL|field|mappersMutex
specifier|private
specifier|final
name|Object
name|mappersMutex
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
DECL|field|nameFieldMappers
specifier|private
specifier|volatile
name|Map
argument_list|<
name|String
argument_list|,
name|FieldMappers
argument_list|>
name|nameFieldMappers
init|=
name|ImmutableMap
operator|.
name|of
argument_list|()
decl_stmt|;
DECL|field|indexNameFieldMappers
specifier|private
specifier|volatile
name|Map
argument_list|<
name|String
argument_list|,
name|FieldMappers
argument_list|>
name|indexNameFieldMappers
init|=
name|ImmutableMap
operator|.
name|of
argument_list|()
decl_stmt|;
DECL|field|fullNameFieldMappers
specifier|private
specifier|volatile
name|Map
argument_list|<
name|String
argument_list|,
name|FieldMappers
argument_list|>
name|fullNameFieldMappers
init|=
name|ImmutableMap
operator|.
name|of
argument_list|()
decl_stmt|;
DECL|field|fullPathObjectMappers
specifier|private
specifier|volatile
name|Map
argument_list|<
name|String
argument_list|,
name|ObjectMappers
argument_list|>
name|fullPathObjectMappers
init|=
name|ImmutableMap
operator|.
name|of
argument_list|()
decl_stmt|;
DECL|field|hasNested
specifier|private
name|boolean
name|hasNested
init|=
literal|false
decl_stmt|;
comment|// updated dynamically to true when a nested object is added
DECL|field|documentParser
specifier|private
specifier|final
name|DocumentMapperParser
name|documentParser
decl_stmt|;
DECL|field|fieldMapperListener
specifier|private
specifier|final
name|InternalFieldMapperListener
name|fieldMapperListener
init|=
operator|new
name|InternalFieldMapperListener
argument_list|()
decl_stmt|;
DECL|field|objectMapperListener
specifier|private
specifier|final
name|InternalObjectMapperListener
name|objectMapperListener
init|=
operator|new
name|InternalObjectMapperListener
argument_list|()
decl_stmt|;
DECL|field|searchAnalyzer
specifier|private
specifier|final
name|SmartIndexNameSearchAnalyzer
name|searchAnalyzer
decl_stmt|;
DECL|field|searchQuoteAnalyzer
specifier|private
specifier|final
name|SmartIndexNameSearchQuoteAnalyzer
name|searchQuoteAnalyzer
decl_stmt|;
DECL|field|typeListeners
specifier|private
specifier|final
name|List
argument_list|<
name|DocumentTypeListener
argument_list|>
name|typeListeners
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<
name|DocumentTypeListener
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|Inject
DECL|method|MapperService
specifier|public
name|MapperService
parameter_list|(
name|Index
name|index
parameter_list|,
annotation|@
name|IndexSettings
name|Settings
name|indexSettings
parameter_list|,
name|Environment
name|environment
parameter_list|,
name|AnalysisService
name|analysisService
parameter_list|,
name|PostingsFormatService
name|postingsFormatService
parameter_list|,
name|DocValuesFormatService
name|docValuesFormatService
parameter_list|,
name|SimilarityLookupService
name|similarityLookupService
parameter_list|)
block|{
name|super
argument_list|(
name|index
argument_list|,
name|indexSettings
argument_list|)
expr_stmt|;
name|this
operator|.
name|analysisService
operator|=
name|analysisService
expr_stmt|;
name|this
operator|.
name|documentParser
operator|=
operator|new
name|DocumentMapperParser
argument_list|(
name|index
argument_list|,
name|indexSettings
argument_list|,
name|analysisService
argument_list|,
name|postingsFormatService
argument_list|,
name|docValuesFormatService
argument_list|,
name|similarityLookupService
argument_list|)
expr_stmt|;
name|this
operator|.
name|searchAnalyzer
operator|=
operator|new
name|SmartIndexNameSearchAnalyzer
argument_list|(
name|analysisService
operator|.
name|defaultSearchAnalyzer
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|searchQuoteAnalyzer
operator|=
operator|new
name|SmartIndexNameSearchQuoteAnalyzer
argument_list|(
name|analysisService
operator|.
name|defaultSearchQuoteAnalyzer
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|dynamic
operator|=
name|componentSettings
operator|.
name|getAsBoolean
argument_list|(
literal|"dynamic"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|String
name|defaultMappingLocation
init|=
name|componentSettings
operator|.
name|get
argument_list|(
literal|"default_mapping_location"
argument_list|)
decl_stmt|;
name|URL
name|defaultMappingUrl
decl_stmt|;
if|if
condition|(
name|defaultMappingLocation
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|defaultMappingUrl
operator|=
name|environment
operator|.
name|resolveConfig
argument_list|(
literal|"default-mapping.json"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FailedToResolveConfigException
name|e
parameter_list|)
block|{
comment|// not there, default to the built in one
name|defaultMappingUrl
operator|=
name|indexSettings
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"org/elasticsearch/index/mapper/default-mapping.json"
argument_list|)
expr_stmt|;
if|if
condition|(
name|defaultMappingUrl
operator|==
literal|null
condition|)
block|{
name|defaultMappingUrl
operator|=
name|MapperService
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"org/elasticsearch/index/mapper/default-mapping.json"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
try|try
block|{
name|defaultMappingUrl
operator|=
name|environment
operator|.
name|resolveConfig
argument_list|(
name|defaultMappingLocation
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FailedToResolveConfigException
name|e
parameter_list|)
block|{
comment|// not there, default to the built in one
try|try
block|{
name|defaultMappingUrl
operator|=
operator|new
name|File
argument_list|(
name|defaultMappingLocation
argument_list|)
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e1
parameter_list|)
block|{
throw|throw
operator|new
name|FailedToResolveConfigException
argument_list|(
literal|"Failed to resolve dynamic mapping location ["
operator|+
name|defaultMappingLocation
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
block|}
if|if
condition|(
name|defaultMappingUrl
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"failed to find default-mapping.json in the classpath, using the default template"
argument_list|)
expr_stmt|;
name|defaultMappingSource
operator|=
literal|"{\n"
operator|+
literal|"    \"_default_\":{\n"
operator|+
literal|"    }\n"
operator|+
literal|"}"
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|defaultMappingSource
operator|=
name|Streams
operator|.
name|copyToString
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|defaultMappingUrl
operator|.
name|openStream
argument_list|()
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MapperException
argument_list|(
literal|"Failed to load default mapping source from ["
operator|+
name|defaultMappingLocation
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
name|String
name|percolatorMappingLocation
init|=
name|componentSettings
operator|.
name|get
argument_list|(
literal|"percolator_mapping_location"
argument_list|)
decl_stmt|;
name|URL
name|percolatorMappingUrl
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|percolatorMappingLocation
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|percolatorMappingUrl
operator|=
name|environment
operator|.
name|resolveConfig
argument_list|(
name|percolatorMappingLocation
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FailedToResolveConfigException
name|e
parameter_list|)
block|{
comment|// not there, default to the built in one
try|try
block|{
name|percolatorMappingUrl
operator|=
operator|new
name|File
argument_list|(
name|percolatorMappingLocation
argument_list|)
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e1
parameter_list|)
block|{
throw|throw
operator|new
name|FailedToResolveConfigException
argument_list|(
literal|"Failed to resolve percolator mapping location ["
operator|+
name|defaultMappingLocation
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
block|}
if|if
condition|(
name|percolatorMappingUrl
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|percolatorMappingSource
operator|=
name|Streams
operator|.
name|copyToString
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|percolatorMappingUrl
operator|.
name|openStream
argument_list|()
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MapperException
argument_list|(
literal|"Failed to load default percolator mapping source from ["
operator|+
name|percolatorMappingUrl
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|percolatorMappingSource
operator|=
literal|"{\n"
operator|+
literal|"    \"_percolator\":{\n"
operator|+
literal|"        \"_id\" : {\"index\": \"not_analyzed\"},"
operator|+
literal|"        \"properties\" : {\n"
operator|+
literal|"            \"query\" : {\n"
operator|+
literal|"                \"type\" : \"object\",\n"
operator|+
literal|"                \"enabled\" : false\n"
operator|+
literal|"            }\n"
operator|+
literal|"        }\n"
operator|+
literal|"    }\n"
operator|+
literal|"}"
expr_stmt|;
block|}
if|if
condition|(
name|logger
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"using dynamic[{}], default mapping: default_mapping_location[{}], loaded_from[{}], default percolator mapping: location[{}], loaded_from[{}]"
argument_list|,
name|dynamic
argument_list|,
name|defaultMappingLocation
argument_list|,
name|defaultMappingUrl
argument_list|,
name|percolatorMappingLocation
argument_list|,
name|percolatorMappingUrl
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"using dynamic[{}], default mapping: default_mapping_location[{}], loaded_from[{}] and source[{}], default percolator mapping: location[{}], loaded_from[{}] and source[{}]"
argument_list|,
name|dynamic
argument_list|,
name|defaultMappingLocation
argument_list|,
name|defaultMappingUrl
argument_list|,
name|defaultMappingSource
argument_list|,
name|percolatorMappingLocation
argument_list|,
name|percolatorMappingUrl
argument_list|,
name|percolatorMappingSource
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
for|for
control|(
name|DocumentMapper
name|documentMapper
range|:
name|mappers
operator|.
name|values
argument_list|()
control|)
block|{
name|documentMapper
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|hasNested
specifier|public
name|boolean
name|hasNested
parameter_list|()
block|{
return|return
name|this
operator|.
name|hasNested
return|;
block|}
annotation|@
name|Override
DECL|method|iterator
specifier|public
name|UnmodifiableIterator
argument_list|<
name|DocumentMapper
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|Iterators
operator|.
name|unmodifiableIterator
argument_list|(
name|mappers
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
argument_list|)
return|;
block|}
DECL|method|analysisService
specifier|public
name|AnalysisService
name|analysisService
parameter_list|()
block|{
return|return
name|this
operator|.
name|analysisService
return|;
block|}
DECL|method|documentMapperParser
specifier|public
name|DocumentMapperParser
name|documentMapperParser
parameter_list|()
block|{
return|return
name|this
operator|.
name|documentParser
return|;
block|}
DECL|method|addTypeListener
specifier|public
name|void
name|addTypeListener
parameter_list|(
name|DocumentTypeListener
name|listener
parameter_list|)
block|{
name|typeListeners
operator|.
name|add
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
DECL|method|removeTypeListener
specifier|public
name|void
name|removeTypeListener
parameter_list|(
name|DocumentTypeListener
name|listener
parameter_list|)
block|{
name|typeListeners
operator|.
name|remove
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
DECL|method|merge
specifier|public
name|DocumentMapper
name|merge
parameter_list|(
name|String
name|type
parameter_list|,
name|String
name|mappingSource
parameter_list|,
name|boolean
name|applyDefault
parameter_list|)
block|{
if|if
condition|(
name|DEFAULT_MAPPING
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
comment|// verify we can parse it
name|DocumentMapper
name|mapper
init|=
name|documentParser
operator|.
name|parse
argument_list|(
name|type
argument_list|,
name|mappingSource
argument_list|)
decl_stmt|;
comment|// still add it as a document mapper so we have it registered and, for example, persisted back into
comment|// the cluster meta data if needed, or checked for existence
synchronized|synchronized
init|(
name|typeMutex
init|)
block|{
name|mappers
operator|=
name|newMapBuilder
argument_list|(
name|mappers
argument_list|)
operator|.
name|put
argument_list|(
name|type
argument_list|,
name|mapper
argument_list|)
operator|.
name|map
argument_list|()
expr_stmt|;
block|}
name|defaultMappingSource
operator|=
name|mappingSource
expr_stmt|;
return|return
name|mapper
return|;
block|}
else|else
block|{
return|return
name|merge
argument_list|(
name|parse
argument_list|(
name|type
argument_list|,
name|mappingSource
argument_list|,
name|applyDefault
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|// never expose this to the outside world, we need to reparse the doc mapper so we get fresh
comment|// instances of field mappers to properly remove existing doc mapper
DECL|method|merge
specifier|private
name|DocumentMapper
name|merge
parameter_list|(
name|DocumentMapper
name|mapper
parameter_list|)
block|{
synchronized|synchronized
init|(
name|typeMutex
init|)
block|{
if|if
condition|(
name|mapper
operator|.
name|type
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|InvalidTypeNameException
argument_list|(
literal|"mapping type name is empty"
argument_list|)
throw|;
block|}
if|if
condition|(
name|mapper
operator|.
name|type
argument_list|()
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'_'
operator|&&
operator|!
name|PercolatorService
operator|.
name|Constants
operator|.
name|TYPE_NAME
operator|.
name|equals
argument_list|(
name|mapper
operator|.
name|type
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InvalidTypeNameException
argument_list|(
literal|"mapping type name ["
operator|+
name|mapper
operator|.
name|type
argument_list|()
operator|+
literal|"] can't start with '_'"
argument_list|)
throw|;
block|}
if|if
condition|(
name|mapper
operator|.
name|type
argument_list|()
operator|.
name|contains
argument_list|(
literal|"#"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InvalidTypeNameException
argument_list|(
literal|"mapping type name ["
operator|+
name|mapper
operator|.
name|type
argument_list|()
operator|+
literal|"] should not include '#' in it"
argument_list|)
throw|;
block|}
if|if
condition|(
name|mapper
operator|.
name|type
argument_list|()
operator|.
name|contains
argument_list|(
literal|","
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InvalidTypeNameException
argument_list|(
literal|"mapping type name ["
operator|+
name|mapper
operator|.
name|type
argument_list|()
operator|+
literal|"] should not include ',' in it"
argument_list|)
throw|;
block|}
if|if
condition|(
name|mapper
operator|.
name|type
argument_list|()
operator|.
name|contains
argument_list|(
literal|"."
argument_list|)
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Type [{}] contains a '.', it is recommended not to include it within a type name"
argument_list|,
name|mapper
operator|.
name|type
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// we can add new field/object mappers while the old ones are there
comment|// since we get new instances of those, and when we remove, we remove
comment|// by instance equality
name|DocumentMapper
name|oldMapper
init|=
name|mappers
operator|.
name|get
argument_list|(
name|mapper
operator|.
name|type
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldMapper
operator|!=
literal|null
condition|)
block|{
name|DocumentMapper
operator|.
name|MergeResult
name|result
init|=
name|oldMapper
operator|.
name|merge
argument_list|(
name|mapper
argument_list|,
name|mergeFlags
argument_list|()
operator|.
name|simulate
argument_list|(
literal|false
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|hasConflicts
argument_list|()
condition|)
block|{
comment|// TODO: What should we do???
if|if
condition|(
name|logger
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"merging mapping for type [{}] resulted in conflicts: [{}]"
argument_list|,
name|mapper
operator|.
name|type
argument_list|()
argument_list|,
name|Arrays
operator|.
name|toString
argument_list|(
name|result
operator|.
name|conflicts
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|oldMapper
return|;
block|}
else|else
block|{
name|FieldMapperListener
operator|.
name|Aggregator
name|fieldMappersAgg
init|=
operator|new
name|FieldMapperListener
operator|.
name|Aggregator
argument_list|()
decl_stmt|;
name|mapper
operator|.
name|traverse
argument_list|(
name|fieldMappersAgg
argument_list|)
expr_stmt|;
name|addFieldMappers
argument_list|(
name|fieldMappersAgg
operator|.
name|mappers
operator|.
name|toArray
argument_list|(
operator|new
name|FieldMapper
index|[
name|fieldMappersAgg
operator|.
name|mappers
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|mapper
operator|.
name|addFieldMapperListener
argument_list|(
name|fieldMapperListener
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|ObjectMapperListener
operator|.
name|Aggregator
name|objectMappersAgg
init|=
operator|new
name|ObjectMapperListener
operator|.
name|Aggregator
argument_list|()
decl_stmt|;
name|mapper
operator|.
name|traverse
argument_list|(
name|objectMappersAgg
argument_list|)
expr_stmt|;
name|addObjectMappers
argument_list|(
name|objectMappersAgg
operator|.
name|mappers
operator|.
name|toArray
argument_list|(
operator|new
name|ObjectMapper
index|[
name|objectMappersAgg
operator|.
name|mappers
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|mapper
operator|.
name|addObjectMapperListener
argument_list|(
name|objectMapperListener
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|mappers
operator|=
name|newMapBuilder
argument_list|(
name|mappers
argument_list|)
operator|.
name|put
argument_list|(
name|mapper
operator|.
name|type
argument_list|()
argument_list|,
name|mapper
argument_list|)
operator|.
name|map
argument_list|()
expr_stmt|;
for|for
control|(
name|DocumentTypeListener
name|typeListener
range|:
name|typeListeners
control|)
block|{
name|typeListener
operator|.
name|created
argument_list|(
name|mapper
operator|.
name|type
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|mapper
return|;
block|}
block|}
block|}
DECL|method|addObjectMappers
specifier|private
name|void
name|addObjectMappers
parameter_list|(
name|ObjectMapper
index|[]
name|objectMappers
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mappersMutex
init|)
block|{
name|MapBuilder
argument_list|<
name|String
argument_list|,
name|ObjectMappers
argument_list|>
name|fullPathObjectMappers
init|=
name|newMapBuilder
argument_list|(
name|this
operator|.
name|fullPathObjectMappers
argument_list|)
decl_stmt|;
for|for
control|(
name|ObjectMapper
name|objectMapper
range|:
name|objectMappers
control|)
block|{
name|ObjectMappers
name|mappers
init|=
name|fullPathObjectMappers
operator|.
name|get
argument_list|(
name|objectMapper
operator|.
name|fullPath
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|mappers
operator|==
literal|null
condition|)
block|{
name|mappers
operator|=
operator|new
name|ObjectMappers
argument_list|(
name|objectMapper
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|mappers
operator|=
name|mappers
operator|.
name|concat
argument_list|(
name|objectMapper
argument_list|)
expr_stmt|;
block|}
name|fullPathObjectMappers
operator|.
name|put
argument_list|(
name|objectMapper
operator|.
name|fullPath
argument_list|()
argument_list|,
name|mappers
argument_list|)
expr_stmt|;
comment|// update the hasNested flag
if|if
condition|(
name|objectMapper
operator|.
name|nested
argument_list|()
operator|.
name|isNested
argument_list|()
condition|)
block|{
name|hasNested
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|this
operator|.
name|fullPathObjectMappers
operator|=
name|fullPathObjectMappers
operator|.
name|map
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|addFieldMappers
specifier|private
name|void
name|addFieldMappers
parameter_list|(
name|FieldMapper
index|[]
name|fieldMappers
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mappersMutex
init|)
block|{
name|MapBuilder
argument_list|<
name|String
argument_list|,
name|FieldMappers
argument_list|>
name|nameFieldMappers
init|=
name|newMapBuilder
argument_list|(
name|this
operator|.
name|nameFieldMappers
argument_list|)
decl_stmt|;
name|MapBuilder
argument_list|<
name|String
argument_list|,
name|FieldMappers
argument_list|>
name|indexNameFieldMappers
init|=
name|newMapBuilder
argument_list|(
name|this
operator|.
name|indexNameFieldMappers
argument_list|)
decl_stmt|;
name|MapBuilder
argument_list|<
name|String
argument_list|,
name|FieldMappers
argument_list|>
name|fullNameFieldMappers
init|=
name|newMapBuilder
argument_list|(
name|this
operator|.
name|fullNameFieldMappers
argument_list|)
decl_stmt|;
for|for
control|(
name|FieldMapper
name|fieldMapper
range|:
name|fieldMappers
control|)
block|{
name|FieldMappers
name|mappers
init|=
name|nameFieldMappers
operator|.
name|get
argument_list|(
name|fieldMapper
operator|.
name|names
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|mappers
operator|==
literal|null
condition|)
block|{
name|mappers
operator|=
operator|new
name|FieldMappers
argument_list|(
name|fieldMapper
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|mappers
operator|=
name|mappers
operator|.
name|concat
argument_list|(
name|fieldMapper
argument_list|)
expr_stmt|;
block|}
name|nameFieldMappers
operator|.
name|put
argument_list|(
name|fieldMapper
operator|.
name|names
argument_list|()
operator|.
name|name
argument_list|()
argument_list|,
name|mappers
argument_list|)
expr_stmt|;
name|mappers
operator|=
name|indexNameFieldMappers
operator|.
name|get
argument_list|(
name|fieldMapper
operator|.
name|names
argument_list|()
operator|.
name|indexName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|mappers
operator|==
literal|null
condition|)
block|{
name|mappers
operator|=
operator|new
name|FieldMappers
argument_list|(
name|fieldMapper
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|mappers
operator|=
name|mappers
operator|.
name|concat
argument_list|(
name|fieldMapper
argument_list|)
expr_stmt|;
block|}
name|indexNameFieldMappers
operator|.
name|put
argument_list|(
name|fieldMapper
operator|.
name|names
argument_list|()
operator|.
name|indexName
argument_list|()
argument_list|,
name|mappers
argument_list|)
expr_stmt|;
name|mappers
operator|=
name|fullNameFieldMappers
operator|.
name|get
argument_list|(
name|fieldMapper
operator|.
name|names
argument_list|()
operator|.
name|fullName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|mappers
operator|==
literal|null
condition|)
block|{
name|mappers
operator|=
operator|new
name|FieldMappers
argument_list|(
name|fieldMapper
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|mappers
operator|=
name|mappers
operator|.
name|concat
argument_list|(
name|fieldMapper
argument_list|)
expr_stmt|;
block|}
name|fullNameFieldMappers
operator|.
name|put
argument_list|(
name|fieldMapper
operator|.
name|names
argument_list|()
operator|.
name|fullName
argument_list|()
argument_list|,
name|mappers
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|nameFieldMappers
operator|=
name|nameFieldMappers
operator|.
name|map
argument_list|()
expr_stmt|;
name|this
operator|.
name|indexNameFieldMappers
operator|=
name|indexNameFieldMappers
operator|.
name|map
argument_list|()
expr_stmt|;
name|this
operator|.
name|fullNameFieldMappers
operator|=
name|fullNameFieldMappers
operator|.
name|map
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|remove
specifier|public
name|void
name|remove
parameter_list|(
name|String
name|type
parameter_list|)
block|{
synchronized|synchronized
init|(
name|typeMutex
init|)
block|{
name|DocumentMapper
name|docMapper
init|=
name|mappers
operator|.
name|get
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|docMapper
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|docMapper
operator|.
name|close
argument_list|()
expr_stmt|;
name|mappers
operator|=
name|newMapBuilder
argument_list|(
name|mappers
argument_list|)
operator|.
name|remove
argument_list|(
name|type
argument_list|)
operator|.
name|map
argument_list|()
expr_stmt|;
name|removeObjectAndFieldMappers
argument_list|(
name|docMapper
argument_list|)
expr_stmt|;
for|for
control|(
name|DocumentTypeListener
name|typeListener
range|:
name|typeListeners
control|)
block|{
name|typeListener
operator|.
name|removed
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|removeObjectAndFieldMappers
specifier|private
name|void
name|removeObjectAndFieldMappers
parameter_list|(
name|DocumentMapper
name|docMapper
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mappersMutex
init|)
block|{
comment|// we need to remove those mappers
name|MapBuilder
argument_list|<
name|String
argument_list|,
name|FieldMappers
argument_list|>
name|nameFieldMappers
init|=
name|newMapBuilder
argument_list|(
name|this
operator|.
name|nameFieldMappers
argument_list|)
decl_stmt|;
name|MapBuilder
argument_list|<
name|String
argument_list|,
name|FieldMappers
argument_list|>
name|indexNameFieldMappers
init|=
name|newMapBuilder
argument_list|(
name|this
operator|.
name|indexNameFieldMappers
argument_list|)
decl_stmt|;
name|MapBuilder
argument_list|<
name|String
argument_list|,
name|FieldMappers
argument_list|>
name|fullNameFieldMappers
init|=
name|newMapBuilder
argument_list|(
name|this
operator|.
name|fullNameFieldMappers
argument_list|)
decl_stmt|;
for|for
control|(
name|FieldMapper
name|mapper
range|:
name|docMapper
operator|.
name|mappers
argument_list|()
control|)
block|{
name|FieldMappers
name|mappers
init|=
name|nameFieldMappers
operator|.
name|get
argument_list|(
name|mapper
operator|.
name|names
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|mappers
operator|!=
literal|null
condition|)
block|{
name|mappers
operator|=
name|mappers
operator|.
name|remove
argument_list|(
name|mapper
argument_list|)
expr_stmt|;
if|if
condition|(
name|mappers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|nameFieldMappers
operator|.
name|remove
argument_list|(
name|mapper
operator|.
name|names
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|nameFieldMappers
operator|.
name|put
argument_list|(
name|mapper
operator|.
name|names
argument_list|()
operator|.
name|name
argument_list|()
argument_list|,
name|mappers
argument_list|)
expr_stmt|;
block|}
block|}
name|mappers
operator|=
name|indexNameFieldMappers
operator|.
name|get
argument_list|(
name|mapper
operator|.
name|names
argument_list|()
operator|.
name|indexName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|mappers
operator|!=
literal|null
condition|)
block|{
name|mappers
operator|=
name|mappers
operator|.
name|remove
argument_list|(
name|mapper
argument_list|)
expr_stmt|;
if|if
condition|(
name|mappers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|indexNameFieldMappers
operator|.
name|remove
argument_list|(
name|mapper
operator|.
name|names
argument_list|()
operator|.
name|indexName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|indexNameFieldMappers
operator|.
name|put
argument_list|(
name|mapper
operator|.
name|names
argument_list|()
operator|.
name|indexName
argument_list|()
argument_list|,
name|mappers
argument_list|)
expr_stmt|;
block|}
block|}
name|mappers
operator|=
name|fullNameFieldMappers
operator|.
name|get
argument_list|(
name|mapper
operator|.
name|names
argument_list|()
operator|.
name|fullName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|mappers
operator|!=
literal|null
condition|)
block|{
name|mappers
operator|=
name|mappers
operator|.
name|remove
argument_list|(
name|mapper
argument_list|)
expr_stmt|;
if|if
condition|(
name|mappers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|fullNameFieldMappers
operator|.
name|remove
argument_list|(
name|mapper
operator|.
name|names
argument_list|()
operator|.
name|fullName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fullNameFieldMappers
operator|.
name|put
argument_list|(
name|mapper
operator|.
name|names
argument_list|()
operator|.
name|fullName
argument_list|()
argument_list|,
name|mappers
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|this
operator|.
name|nameFieldMappers
operator|=
name|nameFieldMappers
operator|.
name|map
argument_list|()
expr_stmt|;
name|this
operator|.
name|indexNameFieldMappers
operator|=
name|indexNameFieldMappers
operator|.
name|map
argument_list|()
expr_stmt|;
name|this
operator|.
name|fullNameFieldMappers
operator|=
name|fullNameFieldMappers
operator|.
name|map
argument_list|()
expr_stmt|;
name|MapBuilder
argument_list|<
name|String
argument_list|,
name|ObjectMappers
argument_list|>
name|fullPathObjectMappers
init|=
name|newMapBuilder
argument_list|(
name|this
operator|.
name|fullPathObjectMappers
argument_list|)
decl_stmt|;
for|for
control|(
name|ObjectMapper
name|mapper
range|:
name|docMapper
operator|.
name|objectMappers
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|ObjectMappers
name|mappers
init|=
name|fullPathObjectMappers
operator|.
name|get
argument_list|(
name|mapper
operator|.
name|fullPath
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|mappers
operator|!=
literal|null
condition|)
block|{
name|mappers
operator|=
name|mappers
operator|.
name|remove
argument_list|(
name|mapper
argument_list|)
expr_stmt|;
if|if
condition|(
name|mappers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|fullPathObjectMappers
operator|.
name|remove
argument_list|(
name|mapper
operator|.
name|fullPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fullPathObjectMappers
operator|.
name|put
argument_list|(
name|mapper
operator|.
name|fullPath
argument_list|()
argument_list|,
name|mappers
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|this
operator|.
name|fullPathObjectMappers
operator|=
name|fullPathObjectMappers
operator|.
name|map
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Just parses and returns the mapper without adding it, while still applying default mapping.      */
DECL|method|parse
specifier|public
name|DocumentMapper
name|parse
parameter_list|(
name|String
name|mappingType
parameter_list|,
name|String
name|mappingSource
parameter_list|)
throws|throws
name|MapperParsingException
block|{
return|return
name|parse
argument_list|(
name|mappingType
argument_list|,
name|mappingSource
argument_list|,
literal|true
argument_list|)
return|;
block|}
DECL|method|parse
specifier|public
name|DocumentMapper
name|parse
parameter_list|(
name|String
name|mappingType
parameter_list|,
name|String
name|mappingSource
parameter_list|,
name|boolean
name|applyDefault
parameter_list|)
throws|throws
name|MapperParsingException
block|{
name|String
name|defaultMappingSource
decl_stmt|;
if|if
condition|(
name|PercolatorService
operator|.
name|Constants
operator|.
name|TYPE_NAME
operator|.
name|equals
argument_list|(
name|mappingType
argument_list|)
condition|)
block|{
name|defaultMappingSource
operator|=
name|percolatorMappingSource
expr_stmt|;
block|}
else|else
block|{
name|defaultMappingSource
operator|=
name|this
operator|.
name|defaultMappingSource
expr_stmt|;
block|}
return|return
name|documentParser
operator|.
name|parse
argument_list|(
name|mappingType
argument_list|,
name|mappingSource
argument_list|,
name|applyDefault
condition|?
name|defaultMappingSource
else|:
literal|null
argument_list|)
return|;
block|}
DECL|method|hasMapping
specifier|public
name|boolean
name|hasMapping
parameter_list|(
name|String
name|mappingType
parameter_list|)
block|{
return|return
name|mappers
operator|.
name|containsKey
argument_list|(
name|mappingType
argument_list|)
return|;
block|}
DECL|method|types
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|types
parameter_list|()
block|{
return|return
name|mappers
operator|.
name|keySet
argument_list|()
return|;
block|}
DECL|method|documentMapper
specifier|public
name|DocumentMapper
name|documentMapper
parameter_list|(
name|String
name|type
parameter_list|)
block|{
return|return
name|mappers
operator|.
name|get
argument_list|(
name|type
argument_list|)
return|;
block|}
DECL|method|documentMapperWithAutoCreate
specifier|public
name|DocumentMapper
name|documentMapperWithAutoCreate
parameter_list|(
name|String
name|type
parameter_list|)
block|{
name|DocumentMapper
name|mapper
init|=
name|mappers
operator|.
name|get
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|mapper
operator|!=
literal|null
condition|)
block|{
return|return
name|mapper
return|;
block|}
if|if
condition|(
operator|!
name|dynamic
condition|)
block|{
throw|throw
operator|new
name|TypeMissingException
argument_list|(
name|index
argument_list|,
name|type
argument_list|,
literal|"trying to auto create mapping, but dynamic mapping is disabled"
argument_list|)
throw|;
block|}
comment|// go ahead and dynamically create it
synchronized|synchronized
init|(
name|typeMutex
init|)
block|{
name|mapper
operator|=
name|mappers
operator|.
name|get
argument_list|(
name|type
argument_list|)
expr_stmt|;
if|if
condition|(
name|mapper
operator|!=
literal|null
condition|)
block|{
return|return
name|mapper
return|;
block|}
name|merge
argument_list|(
name|type
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|mappers
operator|.
name|get
argument_list|(
name|type
argument_list|)
return|;
block|}
block|}
comment|/**      * A filter for search. If a filter is required, will return it, otherwise, will return<tt>null</tt>.      */
annotation|@
name|Nullable
DECL|method|searchFilter
specifier|public
name|Filter
name|searchFilter
parameter_list|(
name|String
modifier|...
name|types
parameter_list|)
block|{
name|boolean
name|filterPercolateType
init|=
name|hasMapping
argument_list|(
name|PercolatorService
operator|.
name|Constants
operator|.
name|TYPE_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|types
operator|!=
literal|null
operator|&&
name|filterPercolateType
condition|)
block|{
for|for
control|(
name|String
name|type
range|:
name|types
control|)
block|{
if|if
condition|(
name|PercolatorService
operator|.
name|Constants
operator|.
name|TYPE_NAME
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|filterPercolateType
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
block|}
name|Filter
name|excludePercolatorType
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|filterPercolateType
condition|)
block|{
name|excludePercolatorType
operator|=
operator|new
name|NotFilter
argument_list|(
name|documentMapper
argument_list|(
name|PercolatorService
operator|.
name|Constants
operator|.
name|TYPE_NAME
argument_list|)
operator|.
name|typeFilter
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|types
operator|==
literal|null
operator|||
name|types
operator|.
name|length
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|hasNested
operator|&&
name|filterPercolateType
condition|)
block|{
return|return
operator|new
name|AndFilter
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|excludePercolatorType
argument_list|,
name|NonNestedDocsFilter
operator|.
name|INSTANCE
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|hasNested
condition|)
block|{
return|return
name|NonNestedDocsFilter
operator|.
name|INSTANCE
return|;
block|}
elseif|else
if|if
condition|(
name|filterPercolateType
condition|)
block|{
return|return
name|excludePercolatorType
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
comment|// if we filter by types, we don't need to filter by non nested docs
comment|// since they have different types (starting with __)
if|if
condition|(
name|types
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|DocumentMapper
name|docMapper
init|=
name|documentMapper
argument_list|(
name|types
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|docMapper
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|TermFilter
argument_list|(
operator|new
name|Term
argument_list|(
name|types
index|[
literal|0
index|]
argument_list|)
argument_list|)
return|;
block|}
return|return
name|docMapper
operator|.
name|typeFilter
argument_list|()
return|;
block|}
comment|// see if we can use terms filter
name|boolean
name|useTermsFilter
init|=
literal|true
decl_stmt|;
for|for
control|(
name|String
name|type
range|:
name|types
control|)
block|{
name|DocumentMapper
name|docMapper
init|=
name|documentMapper
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|docMapper
operator|==
literal|null
condition|)
block|{
name|useTermsFilter
operator|=
literal|false
expr_stmt|;
break|break;
block|}
if|if
condition|(
operator|!
name|docMapper
operator|.
name|typeMapper
argument_list|()
operator|.
name|fieldType
argument_list|()
operator|.
name|indexed
argument_list|()
condition|)
block|{
name|useTermsFilter
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|useTermsFilter
condition|)
block|{
name|BytesRef
index|[]
name|typesBytes
init|=
operator|new
name|BytesRef
index|[
name|types
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|typesBytes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|typesBytes
index|[
name|i
index|]
operator|=
operator|new
name|BytesRef
argument_list|(
name|types
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|TermsFilter
name|termsFilter
init|=
operator|new
name|TermsFilter
argument_list|(
name|TypeFieldMapper
operator|.
name|NAME
argument_list|,
name|typesBytes
argument_list|)
decl_stmt|;
if|if
condition|(
name|filterPercolateType
condition|)
block|{
return|return
operator|new
name|AndFilter
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|excludePercolatorType
argument_list|,
name|termsFilter
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|termsFilter
return|;
block|}
block|}
else|else
block|{
comment|// Current bool filter requires that at least one should clause matches, even with a must clause.
name|XBooleanFilter
name|bool
init|=
operator|new
name|XBooleanFilter
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|type
range|:
name|types
control|)
block|{
name|DocumentMapper
name|docMapper
init|=
name|documentMapper
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|docMapper
operator|==
literal|null
condition|)
block|{
name|bool
operator|.
name|add
argument_list|(
operator|new
name|FilterClause
argument_list|(
operator|new
name|TermFilter
argument_list|(
operator|new
name|Term
argument_list|(
name|TypeFieldMapper
operator|.
name|NAME
argument_list|,
name|type
argument_list|)
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|bool
operator|.
name|add
argument_list|(
operator|new
name|FilterClause
argument_list|(
name|docMapper
operator|.
name|typeFilter
argument_list|()
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|filterPercolateType
condition|)
block|{
name|bool
operator|.
name|add
argument_list|(
name|excludePercolatorType
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
block|}
return|return
name|bool
return|;
block|}
block|}
comment|/**      * Returns {@link FieldMappers} for all the {@link FieldMapper}s that are registered      * under the given name across all the different {@link DocumentMapper} types.      *      * @param name The name to return all the {@link FieldMappers} for across all {@link DocumentMapper}s.      * @return All the {@link FieldMappers} for across all {@link DocumentMapper}s      */
DECL|method|name
specifier|public
name|FieldMappers
name|name
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|nameFieldMappers
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
comment|/**      * Returns {@link FieldMappers} for all the {@link FieldMapper}s that are registered      * under the given indexName across all the different {@link DocumentMapper} types.      *      * @param indexName The indexName to return all the {@link FieldMappers} for across all {@link DocumentMapper}s.      * @return All the {@link FieldMappers} across all {@link DocumentMapper}s for the given indexName.      */
DECL|method|indexName
specifier|public
name|FieldMappers
name|indexName
parameter_list|(
name|String
name|indexName
parameter_list|)
block|{
return|return
name|indexNameFieldMappers
operator|.
name|get
argument_list|(
name|indexName
argument_list|)
return|;
block|}
comment|/**      * Returns the {@link FieldMappers} of all the {@link FieldMapper}s that are      * registered under the give fullName across all the different {@link DocumentMapper} types.      *      * @param fullName The full name      * @return All teh {@link FieldMappers} across all the {@link DocumentMapper}s for the given fullName.      */
DECL|method|fullName
specifier|public
name|FieldMappers
name|fullName
parameter_list|(
name|String
name|fullName
parameter_list|)
block|{
return|return
name|fullNameFieldMappers
operator|.
name|get
argument_list|(
name|fullName
argument_list|)
return|;
block|}
comment|/**      * Returns objects mappers based on the full path of the object.      */
DECL|method|objectMapper
specifier|public
name|ObjectMappers
name|objectMapper
parameter_list|(
name|String
name|path
parameter_list|)
block|{
return|return
name|fullPathObjectMappers
operator|.
name|get
argument_list|(
name|path
argument_list|)
return|;
block|}
comment|/**      * Returns all the fields that match the given pattern, with an optional narrowing      * based on a list of types.      */
DECL|method|simpleMatchToIndexNames
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|simpleMatchToIndexNames
parameter_list|(
name|String
name|pattern
parameter_list|,
annotation|@
name|Nullable
name|String
index|[]
name|types
parameter_list|)
block|{
if|if
condition|(
name|types
operator|==
literal|null
operator|||
name|types
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
name|simpleMatchToIndexNames
argument_list|(
name|pattern
argument_list|)
return|;
block|}
if|if
condition|(
name|types
operator|.
name|length
operator|==
literal|1
operator|&&
name|types
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"_all"
argument_list|)
condition|)
block|{
return|return
name|simpleMatchToIndexNames
argument_list|(
name|pattern
argument_list|)
return|;
block|}
if|if
condition|(
operator|!
name|Regex
operator|.
name|isSimpleMatchPattern
argument_list|(
name|pattern
argument_list|)
condition|)
block|{
return|return
name|ImmutableSet
operator|.
name|of
argument_list|(
name|pattern
argument_list|)
return|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|fields
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|type
range|:
name|types
control|)
block|{
name|DocumentMapper
name|possibleDocMapper
init|=
name|mappers
operator|.
name|get
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|possibleDocMapper
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|indexName
range|:
name|possibleDocMapper
operator|.
name|mappers
argument_list|()
operator|.
name|simpleMatchToIndexNames
argument_list|(
name|pattern
argument_list|)
control|)
block|{
name|fields
operator|.
name|add
argument_list|(
name|indexName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|fields
return|;
block|}
comment|/**      * Returns all the fields that match the given pattern. If the pattern is prefixed with a type      * then the fields will be returned with a type prefix.      */
DECL|method|simpleMatchToIndexNames
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|simpleMatchToIndexNames
parameter_list|(
name|String
name|pattern
parameter_list|)
block|{
if|if
condition|(
operator|!
name|Regex
operator|.
name|isSimpleMatchPattern
argument_list|(
name|pattern
argument_list|)
condition|)
block|{
return|return
name|ImmutableSet
operator|.
name|of
argument_list|(
name|pattern
argument_list|)
return|;
block|}
name|int
name|dotIndex
init|=
name|pattern
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
if|if
condition|(
name|dotIndex
operator|!=
operator|-
literal|1
condition|)
block|{
name|String
name|possibleType
init|=
name|pattern
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|dotIndex
argument_list|)
decl_stmt|;
name|DocumentMapper
name|possibleDocMapper
init|=
name|mappers
operator|.
name|get
argument_list|(
name|possibleType
argument_list|)
decl_stmt|;
if|if
condition|(
name|possibleDocMapper
operator|!=
literal|null
condition|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|typedFields
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|indexName
range|:
name|possibleDocMapper
operator|.
name|mappers
argument_list|()
operator|.
name|simpleMatchToIndexNames
argument_list|(
name|pattern
argument_list|)
control|)
block|{
name|typedFields
operator|.
name|add
argument_list|(
name|possibleType
operator|+
literal|"."
operator|+
name|indexName
argument_list|)
expr_stmt|;
block|}
return|return
name|typedFields
return|;
block|}
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|fields
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|FieldMappers
argument_list|>
name|entry
range|:
name|fullNameFieldMappers
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|Regex
operator|.
name|simpleMatch
argument_list|(
name|pattern
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
for|for
control|(
name|FieldMapper
name|mapper
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
name|fields
operator|.
name|add
argument_list|(
name|mapper
operator|.
name|names
argument_list|()
operator|.
name|indexName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|FieldMappers
argument_list|>
name|entry
range|:
name|indexNameFieldMappers
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|Regex
operator|.
name|simpleMatch
argument_list|(
name|pattern
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
for|for
control|(
name|FieldMapper
name|mapper
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
name|fields
operator|.
name|add
argument_list|(
name|mapper
operator|.
name|names
argument_list|()
operator|.
name|indexName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|FieldMappers
argument_list|>
name|entry
range|:
name|nameFieldMappers
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|Regex
operator|.
name|simpleMatch
argument_list|(
name|pattern
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
for|for
control|(
name|FieldMapper
name|mapper
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
name|fields
operator|.
name|add
argument_list|(
name|mapper
operator|.
name|names
argument_list|()
operator|.
name|indexName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|fields
return|;
block|}
DECL|method|smartNameObjectMapper
specifier|public
name|SmartNameObjectMapper
name|smartNameObjectMapper
parameter_list|(
name|String
name|smartName
parameter_list|,
annotation|@
name|Nullable
name|String
index|[]
name|types
parameter_list|)
block|{
if|if
condition|(
name|types
operator|==
literal|null
operator|||
name|types
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
name|smartNameObjectMapper
argument_list|(
name|smartName
argument_list|)
return|;
block|}
if|if
condition|(
name|types
operator|.
name|length
operator|==
literal|1
operator|&&
name|types
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"_all"
argument_list|)
condition|)
block|{
return|return
name|smartNameObjectMapper
argument_list|(
name|smartName
argument_list|)
return|;
block|}
for|for
control|(
name|String
name|type
range|:
name|types
control|)
block|{
name|DocumentMapper
name|possibleDocMapper
init|=
name|mappers
operator|.
name|get
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|possibleDocMapper
operator|!=
literal|null
condition|)
block|{
name|ObjectMapper
name|mapper
init|=
name|possibleDocMapper
operator|.
name|objectMappers
argument_list|()
operator|.
name|get
argument_list|(
name|smartName
argument_list|)
decl_stmt|;
if|if
condition|(
name|mapper
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|SmartNameObjectMapper
argument_list|(
name|mapper
argument_list|,
name|possibleDocMapper
argument_list|)
return|;
block|}
block|}
block|}
comment|// did not find one, see if its prefixed by type
name|int
name|dotIndex
init|=
name|smartName
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
if|if
condition|(
name|dotIndex
operator|!=
operator|-
literal|1
condition|)
block|{
name|String
name|possibleType
init|=
name|smartName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|dotIndex
argument_list|)
decl_stmt|;
name|DocumentMapper
name|possibleDocMapper
init|=
name|mappers
operator|.
name|get
argument_list|(
name|possibleType
argument_list|)
decl_stmt|;
if|if
condition|(
name|possibleDocMapper
operator|!=
literal|null
condition|)
block|{
name|String
name|possiblePath
init|=
name|smartName
operator|.
name|substring
argument_list|(
name|dotIndex
operator|+
literal|1
argument_list|)
decl_stmt|;
name|ObjectMapper
name|mapper
init|=
name|possibleDocMapper
operator|.
name|objectMappers
argument_list|()
operator|.
name|get
argument_list|(
name|possiblePath
argument_list|)
decl_stmt|;
if|if
condition|(
name|mapper
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|SmartNameObjectMapper
argument_list|(
name|mapper
argument_list|,
name|possibleDocMapper
argument_list|)
return|;
block|}
block|}
block|}
comment|// did not explicitly find one under the types provided, or prefixed by type...
return|return
literal|null
return|;
block|}
DECL|method|smartNameObjectMapper
specifier|public
name|SmartNameObjectMapper
name|smartNameObjectMapper
parameter_list|(
name|String
name|smartName
parameter_list|)
block|{
name|int
name|dotIndex
init|=
name|smartName
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
if|if
condition|(
name|dotIndex
operator|!=
operator|-
literal|1
condition|)
block|{
name|String
name|possibleType
init|=
name|smartName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|dotIndex
argument_list|)
decl_stmt|;
name|DocumentMapper
name|possibleDocMapper
init|=
name|mappers
operator|.
name|get
argument_list|(
name|possibleType
argument_list|)
decl_stmt|;
if|if
condition|(
name|possibleDocMapper
operator|!=
literal|null
condition|)
block|{
name|String
name|possiblePath
init|=
name|smartName
operator|.
name|substring
argument_list|(
name|dotIndex
operator|+
literal|1
argument_list|)
decl_stmt|;
name|ObjectMapper
name|mapper
init|=
name|possibleDocMapper
operator|.
name|objectMappers
argument_list|()
operator|.
name|get
argument_list|(
name|possiblePath
argument_list|)
decl_stmt|;
if|if
condition|(
name|mapper
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|SmartNameObjectMapper
argument_list|(
name|mapper
argument_list|,
name|possibleDocMapper
argument_list|)
return|;
block|}
block|}
block|}
name|ObjectMappers
name|mappers
init|=
name|objectMapper
argument_list|(
name|smartName
argument_list|)
decl_stmt|;
if|if
condition|(
name|mappers
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|SmartNameObjectMapper
argument_list|(
name|mappers
operator|.
name|mapper
argument_list|()
argument_list|,
literal|null
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Same as {@link #smartNameFieldMappers(String)} but returns the first field mapper for it. Returns      *<tt>null</tt> if there is none.      */
DECL|method|smartNameFieldMapper
specifier|public
name|FieldMapper
name|smartNameFieldMapper
parameter_list|(
name|String
name|smartName
parameter_list|)
block|{
name|FieldMappers
name|fieldMappers
init|=
name|smartNameFieldMappers
argument_list|(
name|smartName
argument_list|)
decl_stmt|;
if|if
condition|(
name|fieldMappers
operator|!=
literal|null
condition|)
block|{
return|return
name|fieldMappers
operator|.
name|mapper
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|smartNameFieldMapper
specifier|public
name|FieldMapper
name|smartNameFieldMapper
parameter_list|(
name|String
name|smartName
parameter_list|,
annotation|@
name|Nullable
name|String
index|[]
name|types
parameter_list|)
block|{
name|FieldMappers
name|fieldMappers
init|=
name|smartNameFieldMappers
argument_list|(
name|smartName
argument_list|,
name|types
argument_list|)
decl_stmt|;
if|if
condition|(
name|fieldMappers
operator|!=
literal|null
condition|)
block|{
return|return
name|fieldMappers
operator|.
name|mapper
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|smartNameFieldMappers
specifier|public
name|FieldMappers
name|smartNameFieldMappers
parameter_list|(
name|String
name|smartName
parameter_list|,
annotation|@
name|Nullable
name|String
index|[]
name|types
parameter_list|)
block|{
if|if
condition|(
name|types
operator|==
literal|null
operator|||
name|types
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
name|smartNameFieldMappers
argument_list|(
name|smartName
argument_list|)
return|;
block|}
for|for
control|(
name|String
name|type
range|:
name|types
control|)
block|{
name|DocumentMapper
name|documentMapper
init|=
name|mappers
operator|.
name|get
argument_list|(
name|type
argument_list|)
decl_stmt|;
comment|// we found a mapper
if|if
condition|(
name|documentMapper
operator|!=
literal|null
condition|)
block|{
comment|// see if we find a field for it
name|FieldMappers
name|mappers
init|=
name|documentMapper
operator|.
name|mappers
argument_list|()
operator|.
name|smartName
argument_list|(
name|smartName
argument_list|)
decl_stmt|;
if|if
condition|(
name|mappers
operator|!=
literal|null
condition|)
block|{
return|return
name|mappers
return|;
block|}
block|}
block|}
comment|// did not find explicit field in the type provided, see if its prefixed with type
name|int
name|dotIndex
init|=
name|smartName
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
if|if
condition|(
name|dotIndex
operator|!=
operator|-
literal|1
condition|)
block|{
name|String
name|possibleType
init|=
name|smartName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|dotIndex
argument_list|)
decl_stmt|;
name|DocumentMapper
name|possibleDocMapper
init|=
name|mappers
operator|.
name|get
argument_list|(
name|possibleType
argument_list|)
decl_stmt|;
if|if
condition|(
name|possibleDocMapper
operator|!=
literal|null
condition|)
block|{
name|String
name|possibleName
init|=
name|smartName
operator|.
name|substring
argument_list|(
name|dotIndex
operator|+
literal|1
argument_list|)
decl_stmt|;
name|FieldMappers
name|mappers
init|=
name|possibleDocMapper
operator|.
name|mappers
argument_list|()
operator|.
name|smartName
argument_list|(
name|possibleName
argument_list|)
decl_stmt|;
if|if
condition|(
name|mappers
operator|!=
literal|null
condition|)
block|{
return|return
name|mappers
return|;
block|}
block|}
block|}
comment|// we did not find the field mapping in any of the types, so don't go and try to find
comment|// it in other types...
return|return
literal|null
return|;
block|}
comment|/**      * Same as {@link #smartName(String)}, except it returns just the field mappers.      */
DECL|method|smartNameFieldMappers
specifier|public
name|FieldMappers
name|smartNameFieldMappers
parameter_list|(
name|String
name|smartName
parameter_list|)
block|{
name|int
name|dotIndex
init|=
name|smartName
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
if|if
condition|(
name|dotIndex
operator|!=
operator|-
literal|1
condition|)
block|{
name|String
name|possibleType
init|=
name|smartName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|dotIndex
argument_list|)
decl_stmt|;
name|DocumentMapper
name|possibleDocMapper
init|=
name|mappers
operator|.
name|get
argument_list|(
name|possibleType
argument_list|)
decl_stmt|;
if|if
condition|(
name|possibleDocMapper
operator|!=
literal|null
condition|)
block|{
name|String
name|possibleName
init|=
name|smartName
operator|.
name|substring
argument_list|(
name|dotIndex
operator|+
literal|1
argument_list|)
decl_stmt|;
name|FieldMappers
name|mappers
init|=
name|possibleDocMapper
operator|.
name|mappers
argument_list|()
operator|.
name|smartName
argument_list|(
name|possibleName
argument_list|)
decl_stmt|;
if|if
condition|(
name|mappers
operator|!=
literal|null
condition|)
block|{
return|return
name|mappers
return|;
block|}
block|}
block|}
name|FieldMappers
name|mappers
init|=
name|fullName
argument_list|(
name|smartName
argument_list|)
decl_stmt|;
if|if
condition|(
name|mappers
operator|!=
literal|null
condition|)
block|{
return|return
name|mappers
return|;
block|}
name|mappers
operator|=
name|indexName
argument_list|(
name|smartName
argument_list|)
expr_stmt|;
if|if
condition|(
name|mappers
operator|!=
literal|null
condition|)
block|{
return|return
name|mappers
return|;
block|}
return|return
name|name
argument_list|(
name|smartName
argument_list|)
return|;
block|}
DECL|method|smartName
specifier|public
name|SmartNameFieldMappers
name|smartName
parameter_list|(
name|String
name|smartName
parameter_list|,
annotation|@
name|Nullable
name|String
index|[]
name|types
parameter_list|)
block|{
if|if
condition|(
name|types
operator|==
literal|null
operator|||
name|types
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
name|smartName
argument_list|(
name|smartName
argument_list|)
return|;
block|}
if|if
condition|(
name|types
operator|.
name|length
operator|==
literal|1
operator|&&
name|types
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"_all"
argument_list|)
condition|)
block|{
return|return
name|smartName
argument_list|(
name|smartName
argument_list|)
return|;
block|}
for|for
control|(
name|String
name|type
range|:
name|types
control|)
block|{
name|DocumentMapper
name|documentMapper
init|=
name|mappers
operator|.
name|get
argument_list|(
name|type
argument_list|)
decl_stmt|;
comment|// we found a mapper
if|if
condition|(
name|documentMapper
operator|!=
literal|null
condition|)
block|{
comment|// see if we find a field for it
name|FieldMappers
name|mappers
init|=
name|documentMapper
operator|.
name|mappers
argument_list|()
operator|.
name|smartName
argument_list|(
name|smartName
argument_list|)
decl_stmt|;
if|if
condition|(
name|mappers
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|SmartNameFieldMappers
argument_list|(
name|this
argument_list|,
name|mappers
argument_list|,
name|documentMapper
argument_list|,
literal|false
argument_list|)
return|;
block|}
block|}
block|}
comment|// did not find explicit field in the type provided, see if its prefixed with type
name|int
name|dotIndex
init|=
name|smartName
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
if|if
condition|(
name|dotIndex
operator|!=
operator|-
literal|1
condition|)
block|{
name|String
name|possibleType
init|=
name|smartName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|dotIndex
argument_list|)
decl_stmt|;
name|DocumentMapper
name|possibleDocMapper
init|=
name|mappers
operator|.
name|get
argument_list|(
name|possibleType
argument_list|)
decl_stmt|;
if|if
condition|(
name|possibleDocMapper
operator|!=
literal|null
condition|)
block|{
name|String
name|possibleName
init|=
name|smartName
operator|.
name|substring
argument_list|(
name|dotIndex
operator|+
literal|1
argument_list|)
decl_stmt|;
name|FieldMappers
name|mappers
init|=
name|possibleDocMapper
operator|.
name|mappers
argument_list|()
operator|.
name|smartName
argument_list|(
name|possibleName
argument_list|)
decl_stmt|;
if|if
condition|(
name|mappers
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|SmartNameFieldMappers
argument_list|(
name|this
argument_list|,
name|mappers
argument_list|,
name|possibleDocMapper
argument_list|,
literal|true
argument_list|)
return|;
block|}
block|}
block|}
comment|// we did not find the field mapping in any of the types, so don't go and try to find
comment|// it in other types...
return|return
literal|null
return|;
block|}
comment|/**      * Returns smart field mappers based on a smart name. A smart name is one that can optioannly be prefixed      * with a type (and then a '.'). If it is, then the {@link MapperService.SmartNameFieldMappers}      * will have the doc mapper set.      *<p/>      *<p>It also (without the optional type prefix) try and find the {@link FieldMappers} for the specific      * name. It will first try to find it based on the full name (with the dots if its a compound name). If      * it is not found, will try and find it based on the indexName (which can be controlled in the mapping),      * and last, will try it based no the name itself.      *<p/>      *<p>If nothing is found, returns null.      */
DECL|method|smartName
specifier|public
name|SmartNameFieldMappers
name|smartName
parameter_list|(
name|String
name|smartName
parameter_list|)
block|{
name|int
name|dotIndex
init|=
name|smartName
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
if|if
condition|(
name|dotIndex
operator|!=
operator|-
literal|1
condition|)
block|{
name|String
name|possibleType
init|=
name|smartName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|dotIndex
argument_list|)
decl_stmt|;
name|DocumentMapper
name|possibleDocMapper
init|=
name|mappers
operator|.
name|get
argument_list|(
name|possibleType
argument_list|)
decl_stmt|;
if|if
condition|(
name|possibleDocMapper
operator|!=
literal|null
condition|)
block|{
name|String
name|possibleName
init|=
name|smartName
operator|.
name|substring
argument_list|(
name|dotIndex
operator|+
literal|1
argument_list|)
decl_stmt|;
name|FieldMappers
name|mappers
init|=
name|possibleDocMapper
operator|.
name|mappers
argument_list|()
operator|.
name|smartName
argument_list|(
name|possibleName
argument_list|)
decl_stmt|;
if|if
condition|(
name|mappers
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|SmartNameFieldMappers
argument_list|(
name|this
argument_list|,
name|mappers
argument_list|,
name|possibleDocMapper
argument_list|,
literal|true
argument_list|)
return|;
block|}
block|}
block|}
name|FieldMappers
name|fieldMappers
init|=
name|fullName
argument_list|(
name|smartName
argument_list|)
decl_stmt|;
if|if
condition|(
name|fieldMappers
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|SmartNameFieldMappers
argument_list|(
name|this
argument_list|,
name|fieldMappers
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
return|;
block|}
name|fieldMappers
operator|=
name|indexName
argument_list|(
name|smartName
argument_list|)
expr_stmt|;
if|if
condition|(
name|fieldMappers
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|SmartNameFieldMappers
argument_list|(
name|this
argument_list|,
name|fieldMappers
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
return|;
block|}
name|fieldMappers
operator|=
name|name
argument_list|(
name|smartName
argument_list|)
expr_stmt|;
if|if
condition|(
name|fieldMappers
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|SmartNameFieldMappers
argument_list|(
name|this
argument_list|,
name|fieldMappers
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|searchAnalyzer
specifier|public
name|Analyzer
name|searchAnalyzer
parameter_list|()
block|{
return|return
name|this
operator|.
name|searchAnalyzer
return|;
block|}
DECL|method|searchQuoteAnalyzer
specifier|public
name|Analyzer
name|searchQuoteAnalyzer
parameter_list|()
block|{
return|return
name|this
operator|.
name|searchQuoteAnalyzer
return|;
block|}
DECL|method|fieldSearchAnalyzer
specifier|public
name|Analyzer
name|fieldSearchAnalyzer
parameter_list|(
name|String
name|field
parameter_list|)
block|{
return|return
name|this
operator|.
name|searchAnalyzer
operator|.
name|getWrappedAnalyzer
argument_list|(
name|field
argument_list|)
return|;
block|}
DECL|method|fieldSearchQuoteAnalyzer
specifier|public
name|Analyzer
name|fieldSearchQuoteAnalyzer
parameter_list|(
name|String
name|field
parameter_list|)
block|{
return|return
name|this
operator|.
name|searchQuoteAnalyzer
operator|.
name|getWrappedAnalyzer
argument_list|(
name|field
argument_list|)
return|;
block|}
comment|/**      * Resolves the closest inherited {@link ObjectMapper} that is nested.      */
DECL|method|resolveClosestNestedObjectMapper
specifier|public
name|ObjectMapper
name|resolveClosestNestedObjectMapper
parameter_list|(
name|String
name|fieldName
parameter_list|)
block|{
name|int
name|indexOf
init|=
name|fieldName
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexOf
operator|==
operator|-
literal|1
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
do|do
block|{
name|String
name|objectPath
init|=
name|fieldName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|indexOf
argument_list|)
decl_stmt|;
name|ObjectMappers
name|objectMappers
init|=
name|objectMapper
argument_list|(
name|objectPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|objectMappers
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|objectMappers
operator|.
name|hasNested
argument_list|()
condition|)
block|{
for|for
control|(
name|ObjectMapper
name|objectMapper
range|:
name|objectMappers
control|)
block|{
if|if
condition|(
name|objectMapper
operator|.
name|nested
argument_list|()
operator|.
name|isNested
argument_list|()
condition|)
block|{
return|return
name|objectMapper
return|;
block|}
block|}
block|}
name|indexOf
operator|=
name|objectPath
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|indexOf
operator|!=
operator|-
literal|1
condition|)
do|;
block|}
return|return
literal|null
return|;
block|}
DECL|class|SmartNameObjectMapper
specifier|public
specifier|static
class|class
name|SmartNameObjectMapper
block|{
DECL|field|mapper
specifier|private
specifier|final
name|ObjectMapper
name|mapper
decl_stmt|;
DECL|field|docMapper
specifier|private
specifier|final
name|DocumentMapper
name|docMapper
decl_stmt|;
DECL|method|SmartNameObjectMapper
specifier|public
name|SmartNameObjectMapper
parameter_list|(
name|ObjectMapper
name|mapper
parameter_list|,
annotation|@
name|Nullable
name|DocumentMapper
name|docMapper
parameter_list|)
block|{
name|this
operator|.
name|mapper
operator|=
name|mapper
expr_stmt|;
name|this
operator|.
name|docMapper
operator|=
name|docMapper
expr_stmt|;
block|}
DECL|method|hasMapper
specifier|public
name|boolean
name|hasMapper
parameter_list|()
block|{
return|return
name|mapper
operator|!=
literal|null
return|;
block|}
DECL|method|mapper
specifier|public
name|ObjectMapper
name|mapper
parameter_list|()
block|{
return|return
name|mapper
return|;
block|}
DECL|method|hasDocMapper
specifier|public
name|boolean
name|hasDocMapper
parameter_list|()
block|{
return|return
name|docMapper
operator|!=
literal|null
return|;
block|}
DECL|method|docMapper
specifier|public
name|DocumentMapper
name|docMapper
parameter_list|()
block|{
return|return
name|docMapper
return|;
block|}
block|}
DECL|class|SmartNameFieldMappers
specifier|public
specifier|static
class|class
name|SmartNameFieldMappers
block|{
DECL|field|mapperService
specifier|private
specifier|final
name|MapperService
name|mapperService
decl_stmt|;
DECL|field|fieldMappers
specifier|private
specifier|final
name|FieldMappers
name|fieldMappers
decl_stmt|;
DECL|field|docMapper
specifier|private
specifier|final
name|DocumentMapper
name|docMapper
decl_stmt|;
DECL|field|explicitTypeInName
specifier|private
specifier|final
name|boolean
name|explicitTypeInName
decl_stmt|;
DECL|method|SmartNameFieldMappers
specifier|public
name|SmartNameFieldMappers
parameter_list|(
name|MapperService
name|mapperService
parameter_list|,
name|FieldMappers
name|fieldMappers
parameter_list|,
annotation|@
name|Nullable
name|DocumentMapper
name|docMapper
parameter_list|,
name|boolean
name|explicitTypeInName
parameter_list|)
block|{
name|this
operator|.
name|mapperService
operator|=
name|mapperService
expr_stmt|;
name|this
operator|.
name|fieldMappers
operator|=
name|fieldMappers
expr_stmt|;
name|this
operator|.
name|docMapper
operator|=
name|docMapper
expr_stmt|;
name|this
operator|.
name|explicitTypeInName
operator|=
name|explicitTypeInName
expr_stmt|;
block|}
comment|/**          * Has at least one mapper for the field.          */
DECL|method|hasMapper
specifier|public
name|boolean
name|hasMapper
parameter_list|()
block|{
return|return
operator|!
name|fieldMappers
operator|.
name|isEmpty
argument_list|()
return|;
block|}
comment|/**          * The first mapper for the smart named field.          */
DECL|method|mapper
specifier|public
name|FieldMapper
name|mapper
parameter_list|()
block|{
return|return
name|fieldMappers
operator|.
name|mapper
argument_list|()
return|;
block|}
comment|/**          * All the field mappers for the smart name field.          */
DECL|method|fieldMappers
specifier|public
name|FieldMappers
name|fieldMappers
parameter_list|()
block|{
return|return
name|fieldMappers
return|;
block|}
comment|/**          * If the smart name was a typed field, with a type that we resolved, will return          *<tt>true</tt>.          */
DECL|method|hasDocMapper
specifier|public
name|boolean
name|hasDocMapper
parameter_list|()
block|{
return|return
name|docMapper
operator|!=
literal|null
return|;
block|}
comment|/**          * If the smart name was a typed field, with a type that we resolved, will return          * the document mapper for it.          */
DECL|method|docMapper
specifier|public
name|DocumentMapper
name|docMapper
parameter_list|()
block|{
return|return
name|docMapper
return|;
block|}
comment|/**          * Returns<tt>true</tt> if the type is explicitly specified in the name.          */
DECL|method|explicitTypeInName
specifier|public
name|boolean
name|explicitTypeInName
parameter_list|()
block|{
return|return
name|this
operator|.
name|explicitTypeInName
return|;
block|}
DECL|method|explicitTypeInNameWithDocMapper
specifier|public
name|boolean
name|explicitTypeInNameWithDocMapper
parameter_list|()
block|{
return|return
name|explicitTypeInName
operator|&&
name|docMapper
operator|!=
literal|null
return|;
block|}
comment|/**          * The best effort search analyzer associated with this field.          */
DECL|method|searchAnalyzer
specifier|public
name|Analyzer
name|searchAnalyzer
parameter_list|()
block|{
if|if
condition|(
name|hasMapper
argument_list|()
condition|)
block|{
name|Analyzer
name|analyzer
init|=
name|mapper
argument_list|()
operator|.
name|searchAnalyzer
argument_list|()
decl_stmt|;
if|if
condition|(
name|analyzer
operator|!=
literal|null
condition|)
block|{
return|return
name|analyzer
return|;
block|}
block|}
if|if
condition|(
name|docMapper
operator|!=
literal|null
operator|&&
name|docMapper
operator|.
name|searchAnalyzer
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|docMapper
operator|.
name|searchAnalyzer
argument_list|()
return|;
block|}
return|return
name|mapperService
operator|.
name|searchAnalyzer
argument_list|()
return|;
block|}
DECL|method|searchQuoteAnalyzer
specifier|public
name|Analyzer
name|searchQuoteAnalyzer
parameter_list|()
block|{
if|if
condition|(
name|hasMapper
argument_list|()
condition|)
block|{
name|Analyzer
name|analyzer
init|=
name|mapper
argument_list|()
operator|.
name|searchQuoteAnalyzer
argument_list|()
decl_stmt|;
if|if
condition|(
name|analyzer
operator|!=
literal|null
condition|)
block|{
return|return
name|analyzer
return|;
block|}
block|}
if|if
condition|(
name|docMapper
operator|!=
literal|null
operator|&&
name|docMapper
operator|.
name|searchQuotedAnalyzer
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|docMapper
operator|.
name|searchQuotedAnalyzer
argument_list|()
return|;
block|}
return|return
name|mapperService
operator|.
name|searchQuoteAnalyzer
argument_list|()
return|;
block|}
block|}
DECL|class|SmartIndexNameSearchAnalyzer
specifier|final
class|class
name|SmartIndexNameSearchAnalyzer
extends|extends
name|AnalyzerWrapper
block|{
DECL|field|defaultAnalyzer
specifier|private
specifier|final
name|Analyzer
name|defaultAnalyzer
decl_stmt|;
DECL|method|SmartIndexNameSearchAnalyzer
name|SmartIndexNameSearchAnalyzer
parameter_list|(
name|Analyzer
name|defaultAnalyzer
parameter_list|)
block|{
name|this
operator|.
name|defaultAnalyzer
operator|=
name|defaultAnalyzer
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getWrappedAnalyzer
specifier|protected
name|Analyzer
name|getWrappedAnalyzer
parameter_list|(
name|String
name|fieldName
parameter_list|)
block|{
name|int
name|dotIndex
init|=
name|fieldName
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
if|if
condition|(
name|dotIndex
operator|!=
operator|-
literal|1
condition|)
block|{
name|String
name|possibleType
init|=
name|fieldName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|dotIndex
argument_list|)
decl_stmt|;
name|DocumentMapper
name|possibleDocMapper
init|=
name|mappers
operator|.
name|get
argument_list|(
name|possibleType
argument_list|)
decl_stmt|;
if|if
condition|(
name|possibleDocMapper
operator|!=
literal|null
condition|)
block|{
return|return
name|possibleDocMapper
operator|.
name|mappers
argument_list|()
operator|.
name|searchAnalyzer
argument_list|()
return|;
block|}
block|}
name|FieldMappers
name|mappers
init|=
name|fullNameFieldMappers
operator|.
name|get
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
if|if
condition|(
name|mappers
operator|!=
literal|null
operator|&&
name|mappers
operator|.
name|mapper
argument_list|()
operator|!=
literal|null
operator|&&
name|mappers
operator|.
name|mapper
argument_list|()
operator|.
name|searchAnalyzer
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|mappers
operator|.
name|mapper
argument_list|()
operator|.
name|searchAnalyzer
argument_list|()
return|;
block|}
name|mappers
operator|=
name|indexNameFieldMappers
operator|.
name|get
argument_list|(
name|fieldName
argument_list|)
expr_stmt|;
if|if
condition|(
name|mappers
operator|!=
literal|null
operator|&&
name|mappers
operator|.
name|mapper
argument_list|()
operator|!=
literal|null
operator|&&
name|mappers
operator|.
name|mapper
argument_list|()
operator|.
name|searchAnalyzer
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|mappers
operator|.
name|mapper
argument_list|()
operator|.
name|searchAnalyzer
argument_list|()
return|;
block|}
return|return
name|defaultAnalyzer
return|;
block|}
annotation|@
name|Override
DECL|method|wrapComponents
specifier|protected
name|TokenStreamComponents
name|wrapComponents
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|TokenStreamComponents
name|components
parameter_list|)
block|{
return|return
name|components
return|;
block|}
block|}
DECL|class|SmartIndexNameSearchQuoteAnalyzer
specifier|final
class|class
name|SmartIndexNameSearchQuoteAnalyzer
extends|extends
name|AnalyzerWrapper
block|{
DECL|field|defaultAnalyzer
specifier|private
specifier|final
name|Analyzer
name|defaultAnalyzer
decl_stmt|;
DECL|method|SmartIndexNameSearchQuoteAnalyzer
name|SmartIndexNameSearchQuoteAnalyzer
parameter_list|(
name|Analyzer
name|defaultAnalyzer
parameter_list|)
block|{
name|this
operator|.
name|defaultAnalyzer
operator|=
name|defaultAnalyzer
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getWrappedAnalyzer
specifier|protected
name|Analyzer
name|getWrappedAnalyzer
parameter_list|(
name|String
name|fieldName
parameter_list|)
block|{
name|int
name|dotIndex
init|=
name|fieldName
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
if|if
condition|(
name|dotIndex
operator|!=
operator|-
literal|1
condition|)
block|{
name|String
name|possibleType
init|=
name|fieldName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|dotIndex
argument_list|)
decl_stmt|;
name|DocumentMapper
name|possibleDocMapper
init|=
name|mappers
operator|.
name|get
argument_list|(
name|possibleType
argument_list|)
decl_stmt|;
if|if
condition|(
name|possibleDocMapper
operator|!=
literal|null
condition|)
block|{
return|return
name|possibleDocMapper
operator|.
name|mappers
argument_list|()
operator|.
name|searchQuoteAnalyzer
argument_list|()
return|;
block|}
block|}
name|FieldMappers
name|mappers
init|=
name|fullNameFieldMappers
operator|.
name|get
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
if|if
condition|(
name|mappers
operator|!=
literal|null
operator|&&
name|mappers
operator|.
name|mapper
argument_list|()
operator|!=
literal|null
operator|&&
name|mappers
operator|.
name|mapper
argument_list|()
operator|.
name|searchQuoteAnalyzer
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|mappers
operator|.
name|mapper
argument_list|()
operator|.
name|searchQuoteAnalyzer
argument_list|()
return|;
block|}
name|mappers
operator|=
name|indexNameFieldMappers
operator|.
name|get
argument_list|(
name|fieldName
argument_list|)
expr_stmt|;
if|if
condition|(
name|mappers
operator|!=
literal|null
operator|&&
name|mappers
operator|.
name|mapper
argument_list|()
operator|!=
literal|null
operator|&&
name|mappers
operator|.
name|mapper
argument_list|()
operator|.
name|searchQuoteAnalyzer
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|mappers
operator|.
name|mapper
argument_list|()
operator|.
name|searchQuoteAnalyzer
argument_list|()
return|;
block|}
return|return
name|defaultAnalyzer
return|;
block|}
annotation|@
name|Override
DECL|method|wrapComponents
specifier|protected
name|TokenStreamComponents
name|wrapComponents
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|TokenStreamComponents
name|components
parameter_list|)
block|{
return|return
name|components
return|;
block|}
block|}
DECL|class|InternalFieldMapperListener
class|class
name|InternalFieldMapperListener
extends|extends
name|FieldMapperListener
block|{
annotation|@
name|Override
DECL|method|fieldMapper
specifier|public
name|void
name|fieldMapper
parameter_list|(
name|FieldMapper
name|fieldMapper
parameter_list|)
block|{
name|addFieldMappers
argument_list|(
operator|new
name|FieldMapper
index|[]
block|{
name|fieldMapper
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|fieldMappers
specifier|public
name|void
name|fieldMappers
parameter_list|(
name|FieldMapper
modifier|...
name|fieldMappers
parameter_list|)
block|{
name|addFieldMappers
argument_list|(
name|fieldMappers
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|InternalObjectMapperListener
class|class
name|InternalObjectMapperListener
extends|extends
name|ObjectMapperListener
block|{
annotation|@
name|Override
DECL|method|objectMapper
specifier|public
name|void
name|objectMapper
parameter_list|(
name|ObjectMapper
name|objectMapper
parameter_list|)
block|{
name|addObjectMappers
argument_list|(
operator|new
name|ObjectMapper
index|[]
block|{
name|objectMapper
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|objectMappers
specifier|public
name|void
name|objectMappers
parameter_list|(
name|ObjectMapper
modifier|...
name|objectMappers
parameter_list|)
block|{
name|addObjectMappers
argument_list|(
name|objectMappers
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

