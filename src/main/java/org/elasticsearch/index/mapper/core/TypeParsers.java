begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.mapper.core
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|core
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInfo
operator|.
name|IndexOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|joda
operator|.
name|FormatDateTimeFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|joda
operator|.
name|Joda
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|loader
operator|.
name|SettingsLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|NamedAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|ContentPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|FieldMapper
operator|.
name|Loading
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|Mapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MapperParsingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|support
operator|.
name|XContentMapValues
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|FieldMapper
operator|.
name|DOC_VALUES_FORMAT
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|TypeParsers
specifier|public
class|class
name|TypeParsers
block|{
DECL|field|MULTI_FIELD_CONTENT_TYPE
specifier|public
specifier|static
specifier|final
name|String
name|MULTI_FIELD_CONTENT_TYPE
init|=
literal|"multi_field"
decl_stmt|;
DECL|field|multiFieldConverterTypeParser
specifier|public
specifier|static
specifier|final
name|Mapper
operator|.
name|TypeParser
name|multiFieldConverterTypeParser
init|=
operator|new
name|Mapper
operator|.
name|TypeParser
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Mapper
operator|.
name|Builder
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|parse
parameter_list|(
name|String
name|name
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|node
parameter_list|,
name|ParserContext
name|parserContext
parameter_list|)
throws|throws
name|MapperParsingException
block|{
name|ContentPath
operator|.
name|Type
name|pathType
init|=
literal|null
decl_stmt|;
name|AbstractFieldMapper
operator|.
name|Builder
name|mainFieldBuilder
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|AbstractFieldMapper
operator|.
name|Builder
argument_list|>
name|fields
init|=
literal|null
decl_stmt|;
name|String
name|firstType
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|node
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|fieldName
init|=
name|Strings
operator|.
name|toUnderscoreCase
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|Object
name|fieldNode
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|fieldName
operator|.
name|equals
argument_list|(
literal|"path"
argument_list|)
condition|)
block|{
name|pathType
operator|=
name|parsePathType
argument_list|(
name|name
argument_list|,
name|fieldNode
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fieldName
operator|.
name|equals
argument_list|(
literal|"fields"
argument_list|)
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|fieldsNode
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|fieldNode
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry1
range|:
name|fieldsNode
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|propName
init|=
name|entry1
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|propNode
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|entry1
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|String
name|type
decl_stmt|;
name|Object
name|typeNode
init|=
name|propNode
operator|.
name|get
argument_list|(
literal|"type"
argument_list|)
decl_stmt|;
if|if
condition|(
name|typeNode
operator|!=
literal|null
condition|)
block|{
name|type
operator|=
name|typeNode
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|firstType
operator|==
literal|null
condition|)
block|{
name|firstType
operator|=
name|type
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|MapperParsingException
argument_list|(
literal|"No type specified for property ["
operator|+
name|propName
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|Mapper
operator|.
name|TypeParser
name|typeParser
init|=
name|parserContext
operator|.
name|typeParser
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|typeParser
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|MapperParsingException
argument_list|(
literal|"No handler for type ["
operator|+
name|type
operator|+
literal|"] declared on field ["
operator|+
name|fieldName
operator|+
literal|"]"
argument_list|)
throw|;
block|}
if|if
condition|(
name|propName
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|mainFieldBuilder
operator|=
operator|(
name|AbstractFieldMapper
operator|.
name|Builder
operator|)
name|typeParser
operator|.
name|parse
argument_list|(
name|propName
argument_list|,
name|propNode
argument_list|,
name|parserContext
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
block|{
name|fields
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
name|fields
operator|.
name|add
argument_list|(
operator|(
name|AbstractFieldMapper
operator|.
name|Builder
operator|)
name|typeParser
operator|.
name|parse
argument_list|(
name|propName
argument_list|,
name|propNode
argument_list|,
name|parserContext
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|mainFieldBuilder
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
block|{
comment|// No fields at all were specified in multi_field, so lets return a non indexed string field.
return|return
operator|new
name|StringFieldMapper
operator|.
name|Builder
argument_list|(
name|name
argument_list|)
operator|.
name|index
argument_list|(
literal|false
argument_list|)
return|;
block|}
name|Mapper
operator|.
name|TypeParser
name|typeParser
init|=
name|parserContext
operator|.
name|typeParser
argument_list|(
name|firstType
argument_list|)
decl_stmt|;
if|if
condition|(
name|typeParser
operator|==
literal|null
condition|)
block|{
comment|// The first multi field's type is unknown
name|mainFieldBuilder
operator|=
operator|new
name|StringFieldMapper
operator|.
name|Builder
argument_list|(
name|name
argument_list|)
operator|.
name|index
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Mapper
operator|.
name|Builder
name|substitute
init|=
name|typeParser
operator|.
name|parse
argument_list|(
name|name
argument_list|,
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|Object
operator|>
name|emptyMap
argument_list|()
argument_list|,
name|parserContext
argument_list|)
decl_stmt|;
if|if
condition|(
name|substitute
operator|instanceof
name|AbstractFieldMapper
operator|.
name|Builder
condition|)
block|{
name|mainFieldBuilder
operator|=
operator|(
operator|(
name|AbstractFieldMapper
operator|.
name|Builder
operator|)
name|substitute
operator|)
operator|.
name|index
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// The first multi isn't a core field type
name|mainFieldBuilder
operator|=
operator|new
name|StringFieldMapper
operator|.
name|Builder
argument_list|(
name|name
argument_list|)
operator|.
name|index
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|fields
operator|!=
literal|null
operator|&&
name|pathType
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Mapper
operator|.
name|Builder
name|field
range|:
name|fields
control|)
block|{
name|mainFieldBuilder
operator|.
name|addMultiField
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
name|mainFieldBuilder
operator|.
name|multiFieldPathType
argument_list|(
name|pathType
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fields
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Mapper
operator|.
name|Builder
name|field
range|:
name|fields
control|)
block|{
name|mainFieldBuilder
operator|.
name|addMultiField
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|pathType
operator|!=
literal|null
condition|)
block|{
name|mainFieldBuilder
operator|.
name|multiFieldPathType
argument_list|(
name|pathType
argument_list|)
expr_stmt|;
block|}
return|return
name|mainFieldBuilder
return|;
block|}
block|}
decl_stmt|;
DECL|field|DOC_VALUES
specifier|public
specifier|static
specifier|final
name|String
name|DOC_VALUES
init|=
literal|"doc_values"
decl_stmt|;
DECL|field|INDEX_OPTIONS_DOCS
specifier|public
specifier|static
specifier|final
name|String
name|INDEX_OPTIONS_DOCS
init|=
literal|"docs"
decl_stmt|;
DECL|field|INDEX_OPTIONS_FREQS
specifier|public
specifier|static
specifier|final
name|String
name|INDEX_OPTIONS_FREQS
init|=
literal|"freqs"
decl_stmt|;
DECL|field|INDEX_OPTIONS_POSITIONS
specifier|public
specifier|static
specifier|final
name|String
name|INDEX_OPTIONS_POSITIONS
init|=
literal|"positions"
decl_stmt|;
DECL|field|INDEX_OPTIONS_OFFSETS
specifier|public
specifier|static
specifier|final
name|String
name|INDEX_OPTIONS_OFFSETS
init|=
literal|"offsets"
decl_stmt|;
DECL|method|parseNumberField
specifier|public
specifier|static
name|void
name|parseNumberField
parameter_list|(
name|NumberFieldMapper
operator|.
name|Builder
name|builder
parameter_list|,
name|String
name|name
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|numberNode
parameter_list|,
name|Mapper
operator|.
name|TypeParser
operator|.
name|ParserContext
name|parserContext
parameter_list|)
block|{
name|parseField
argument_list|(
name|builder
argument_list|,
name|name
argument_list|,
name|numberNode
argument_list|,
name|parserContext
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|numberNode
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|propName
init|=
name|Strings
operator|.
name|toUnderscoreCase
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|Object
name|propNode
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|propName
operator|.
name|equals
argument_list|(
literal|"precision_step"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|precisionStep
argument_list|(
name|nodeIntegerValue
argument_list|(
name|propNode
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|propName
operator|.
name|equals
argument_list|(
literal|"ignore_malformed"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|ignoreMalformed
argument_list|(
name|nodeBooleanValue
argument_list|(
name|propNode
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|propName
operator|.
name|equals
argument_list|(
literal|"coerce"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|coerce
argument_list|(
name|nodeBooleanValue
argument_list|(
name|propNode
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|propName
operator|.
name|equals
argument_list|(
literal|"omit_norms"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|omitNorms
argument_list|(
name|nodeBooleanValue
argument_list|(
name|propNode
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|propName
operator|.
name|equals
argument_list|(
literal|"similarity"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|similarity
argument_list|(
name|parserContext
operator|.
name|similarityLookupService
argument_list|()
operator|.
name|similarity
argument_list|(
name|propNode
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|parseMultiField
argument_list|(
name|builder
argument_list|,
name|name
argument_list|,
name|numberNode
argument_list|,
name|parserContext
argument_list|,
name|propName
argument_list|,
name|propNode
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|parseField
specifier|public
specifier|static
name|void
name|parseField
parameter_list|(
name|AbstractFieldMapper
operator|.
name|Builder
name|builder
parameter_list|,
name|String
name|name
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|fieldNode
parameter_list|,
name|Mapper
operator|.
name|TypeParser
operator|.
name|ParserContext
name|parserContext
parameter_list|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|fieldNode
operator|.
name|entrySet
argument_list|()
control|)
block|{
specifier|final
name|String
name|propName
init|=
name|Strings
operator|.
name|toUnderscoreCase
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Object
name|propNode
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|propName
operator|.
name|equals
argument_list|(
literal|"index_name"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|indexName
argument_list|(
name|propNode
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|propName
operator|.
name|equals
argument_list|(
literal|"store"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|store
argument_list|(
name|parseStore
argument_list|(
name|name
argument_list|,
name|propNode
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|propName
operator|.
name|equals
argument_list|(
literal|"index"
argument_list|)
condition|)
block|{
name|parseIndex
argument_list|(
name|name
argument_list|,
name|propNode
operator|.
name|toString
argument_list|()
argument_list|,
name|builder
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|propName
operator|.
name|equals
argument_list|(
literal|"tokenized"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|tokenized
argument_list|(
name|nodeBooleanValue
argument_list|(
name|propNode
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|propName
operator|.
name|equals
argument_list|(
name|DOC_VALUES
argument_list|)
condition|)
block|{
name|builder
operator|.
name|docValues
argument_list|(
name|nodeBooleanValue
argument_list|(
name|propNode
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|propName
operator|.
name|equals
argument_list|(
literal|"term_vector"
argument_list|)
condition|)
block|{
name|parseTermVector
argument_list|(
name|name
argument_list|,
name|propNode
operator|.
name|toString
argument_list|()
argument_list|,
name|builder
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|propName
operator|.
name|equals
argument_list|(
literal|"boost"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|boost
argument_list|(
name|nodeFloatValue
argument_list|(
name|propNode
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|propName
operator|.
name|equals
argument_list|(
literal|"store_term_vectors"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|storeTermVectors
argument_list|(
name|nodeBooleanValue
argument_list|(
name|propNode
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|propName
operator|.
name|equals
argument_list|(
literal|"store_term_vector_offsets"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|storeTermVectorOffsets
argument_list|(
name|nodeBooleanValue
argument_list|(
name|propNode
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|propName
operator|.
name|equals
argument_list|(
literal|"store_term_vector_positions"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|storeTermVectorPositions
argument_list|(
name|nodeBooleanValue
argument_list|(
name|propNode
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|propName
operator|.
name|equals
argument_list|(
literal|"store_term_vector_payloads"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|storeTermVectorPayloads
argument_list|(
name|nodeBooleanValue
argument_list|(
name|propNode
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|propName
operator|.
name|equals
argument_list|(
literal|"omit_norms"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|omitNorms
argument_list|(
name|nodeBooleanValue
argument_list|(
name|propNode
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|propName
operator|.
name|equals
argument_list|(
literal|"norms"
argument_list|)
condition|)
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
init|=
name|nodeMapValue
argument_list|(
name|propNode
argument_list|,
literal|"norms"
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry2
range|:
name|properties
operator|.
name|entrySet
argument_list|()
control|)
block|{
specifier|final
name|String
name|propName2
init|=
name|Strings
operator|.
name|toUnderscoreCase
argument_list|(
name|entry2
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Object
name|propNode2
init|=
name|entry2
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|propName2
operator|.
name|equals
argument_list|(
literal|"enabled"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|omitNorms
argument_list|(
operator|!
name|nodeBooleanValue
argument_list|(
name|propNode2
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|propName2
operator|.
name|equals
argument_list|(
name|Loading
operator|.
name|KEY
argument_list|)
condition|)
block|{
name|builder
operator|.
name|normsLoading
argument_list|(
name|Loading
operator|.
name|parse
argument_list|(
name|nodeStringValue
argument_list|(
name|propNode2
argument_list|,
literal|null
argument_list|)
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|propName
operator|.
name|equals
argument_list|(
literal|"omit_term_freq_and_positions"
argument_list|)
condition|)
block|{
specifier|final
name|IndexOptions
name|op
init|=
name|nodeBooleanValue
argument_list|(
name|propNode
argument_list|)
condition|?
name|IndexOptions
operator|.
name|DOCS_ONLY
else|:
name|IndexOptions
operator|.
name|DOCS_AND_FREQS_AND_POSITIONS
decl_stmt|;
if|if
condition|(
name|parserContext
operator|.
name|indexVersionCreated
argument_list|()
operator|.
name|onOrAfter
argument_list|(
name|Version
operator|.
name|V_1_0_0_RC2
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ElasticsearchParseException
argument_list|(
literal|"'omit_term_freq_and_positions' is not supported anymore - use ['index_options' : '"
operator|+
name|op
operator|.
name|name
argument_list|()
operator|+
literal|"']  instead"
argument_list|)
throw|;
block|}
comment|// deprecated option for BW compat
name|builder
operator|.
name|indexOptions
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|propName
operator|.
name|equals
argument_list|(
literal|"index_options"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|indexOptions
argument_list|(
name|nodeIndexOptionValue
argument_list|(
name|propNode
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|propName
operator|.
name|equals
argument_list|(
literal|"analyzer"
argument_list|)
condition|)
block|{
name|NamedAnalyzer
name|analyzer
init|=
name|parserContext
operator|.
name|analysisService
argument_list|()
operator|.
name|analyzer
argument_list|(
name|propNode
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|analyzer
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|MapperParsingException
argument_list|(
literal|"Analyzer ["
operator|+
name|propNode
operator|.
name|toString
argument_list|()
operator|+
literal|"] not found for field ["
operator|+
name|name
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|builder
operator|.
name|indexAnalyzer
argument_list|(
name|analyzer
argument_list|)
expr_stmt|;
name|builder
operator|.
name|searchAnalyzer
argument_list|(
name|analyzer
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|propName
operator|.
name|equals
argument_list|(
literal|"index_analyzer"
argument_list|)
condition|)
block|{
name|NamedAnalyzer
name|analyzer
init|=
name|parserContext
operator|.
name|analysisService
argument_list|()
operator|.
name|analyzer
argument_list|(
name|propNode
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|analyzer
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|MapperParsingException
argument_list|(
literal|"Analyzer ["
operator|+
name|propNode
operator|.
name|toString
argument_list|()
operator|+
literal|"] not found for field ["
operator|+
name|name
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|builder
operator|.
name|indexAnalyzer
argument_list|(
name|analyzer
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|propName
operator|.
name|equals
argument_list|(
literal|"search_analyzer"
argument_list|)
condition|)
block|{
name|NamedAnalyzer
name|analyzer
init|=
name|parserContext
operator|.
name|analysisService
argument_list|()
operator|.
name|analyzer
argument_list|(
name|propNode
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|analyzer
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|MapperParsingException
argument_list|(
literal|"Analyzer ["
operator|+
name|propNode
operator|.
name|toString
argument_list|()
operator|+
literal|"] not found for field ["
operator|+
name|name
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|builder
operator|.
name|searchAnalyzer
argument_list|(
name|analyzer
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|propName
operator|.
name|equals
argument_list|(
literal|"include_in_all"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|includeInAll
argument_list|(
name|nodeBooleanValue
argument_list|(
name|propNode
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|propName
operator|.
name|equals
argument_list|(
literal|"postings_format"
argument_list|)
condition|)
block|{
name|String
name|postingFormatName
init|=
name|propNode
operator|.
name|toString
argument_list|()
decl_stmt|;
name|builder
operator|.
name|postingsFormat
argument_list|(
name|parserContext
operator|.
name|postingFormatService
argument_list|()
operator|.
name|get
argument_list|(
name|postingFormatName
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|propName
operator|.
name|equals
argument_list|(
name|DOC_VALUES_FORMAT
argument_list|)
condition|)
block|{
name|String
name|docValuesFormatName
init|=
name|propNode
operator|.
name|toString
argument_list|()
decl_stmt|;
name|builder
operator|.
name|docValuesFormat
argument_list|(
name|parserContext
operator|.
name|docValuesFormatService
argument_list|()
operator|.
name|get
argument_list|(
name|docValuesFormatName
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|propName
operator|.
name|equals
argument_list|(
literal|"similarity"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|similarity
argument_list|(
name|parserContext
operator|.
name|similarityLookupService
argument_list|()
operator|.
name|similarity
argument_list|(
name|propNode
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|propName
operator|.
name|equals
argument_list|(
literal|"fielddata"
argument_list|)
condition|)
block|{
specifier|final
name|Settings
name|settings
init|=
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|SettingsLoader
operator|.
name|Helper
operator|.
name|loadNestedFromMap
argument_list|(
name|nodeMapValue
argument_list|(
name|propNode
argument_list|,
literal|"fielddata"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|builder
operator|.
name|fieldDataSettings
argument_list|(
name|settings
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|propName
operator|.
name|equals
argument_list|(
literal|"copy_to"
argument_list|)
condition|)
block|{
name|parseCopyFields
argument_list|(
name|propNode
argument_list|,
name|builder
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|parseMultiField
specifier|public
specifier|static
name|void
name|parseMultiField
parameter_list|(
name|AbstractFieldMapper
operator|.
name|Builder
name|builder
parameter_list|,
name|String
name|name
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|node
parameter_list|,
name|Mapper
operator|.
name|TypeParser
operator|.
name|ParserContext
name|parserContext
parameter_list|,
name|String
name|propName
parameter_list|,
name|Object
name|propNode
parameter_list|)
block|{
if|if
condition|(
name|propName
operator|.
name|equals
argument_list|(
literal|"path"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|multiFieldPathType
argument_list|(
name|parsePathType
argument_list|(
name|name
argument_list|,
name|propNode
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|propName
operator|.
name|equals
argument_list|(
literal|"fields"
argument_list|)
condition|)
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|multiFieldsPropNodes
decl_stmt|;
if|if
condition|(
name|propNode
operator|instanceof
name|List
operator|&&
operator|(
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|propNode
operator|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|multiFieldsPropNodes
operator|=
name|Collections
operator|.
name|emptyMap
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|propNode
operator|instanceof
name|Map
condition|)
block|{
name|multiFieldsPropNodes
operator|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|propNode
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|MapperParsingException
argument_list|(
literal|"Expected map for property [fields] on field ["
operator|+
name|propNode
operator|+
literal|"] or "
operator|+
literal|"["
operator|+
name|propName
operator|+
literal|"] but got a "
operator|+
name|propNode
operator|.
name|getClass
argument_list|()
argument_list|)
throw|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|multiFieldEntry
range|:
name|multiFieldsPropNodes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|multiFieldName
init|=
name|multiFieldEntry
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|multiFieldEntry
operator|.
name|getValue
argument_list|()
operator|instanceof
name|Map
operator|)
condition|)
block|{
throw|throw
operator|new
name|MapperParsingException
argument_list|(
literal|"Illegal field ["
operator|+
name|multiFieldName
operator|+
literal|"], only fields can be specified inside fields"
argument_list|)
throw|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|multiFieldNodes
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|multiFieldEntry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|String
name|type
decl_stmt|;
name|Object
name|typeNode
init|=
name|multiFieldNodes
operator|.
name|get
argument_list|(
literal|"type"
argument_list|)
decl_stmt|;
if|if
condition|(
name|typeNode
operator|!=
literal|null
condition|)
block|{
name|type
operator|=
name|typeNode
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|MapperParsingException
argument_list|(
literal|"No type specified for property ["
operator|+
name|multiFieldName
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|Mapper
operator|.
name|TypeParser
name|typeParser
init|=
name|parserContext
operator|.
name|typeParser
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|typeParser
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|MapperParsingException
argument_list|(
literal|"No handler for type ["
operator|+
name|type
operator|+
literal|"] declared on field ["
operator|+
name|multiFieldName
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|builder
operator|.
name|addMultiField
argument_list|(
name|typeParser
operator|.
name|parse
argument_list|(
name|multiFieldName
argument_list|,
name|multiFieldNodes
argument_list|,
name|parserContext
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|nodeIndexOptionValue
specifier|private
specifier|static
name|IndexOptions
name|nodeIndexOptionValue
parameter_list|(
specifier|final
name|Object
name|propNode
parameter_list|)
block|{
specifier|final
name|String
name|value
init|=
name|propNode
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|INDEX_OPTIONS_OFFSETS
operator|.
name|equalsIgnoreCase
argument_list|(
name|value
argument_list|)
condition|)
block|{
return|return
name|IndexOptions
operator|.
name|DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS
return|;
block|}
elseif|else
if|if
condition|(
name|INDEX_OPTIONS_POSITIONS
operator|.
name|equalsIgnoreCase
argument_list|(
name|value
argument_list|)
condition|)
block|{
return|return
name|IndexOptions
operator|.
name|DOCS_AND_FREQS_AND_POSITIONS
return|;
block|}
elseif|else
if|if
condition|(
name|INDEX_OPTIONS_FREQS
operator|.
name|equalsIgnoreCase
argument_list|(
name|value
argument_list|)
condition|)
block|{
return|return
name|IndexOptions
operator|.
name|DOCS_AND_FREQS
return|;
block|}
elseif|else
if|if
condition|(
name|INDEX_OPTIONS_DOCS
operator|.
name|equalsIgnoreCase
argument_list|(
name|value
argument_list|)
condition|)
block|{
return|return
name|IndexOptions
operator|.
name|DOCS_ONLY
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|ElasticsearchParseException
argument_list|(
literal|"Failed to parse index option ["
operator|+
name|value
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
DECL|method|parseDateTimeFormatter
specifier|public
specifier|static
name|FormatDateTimeFormatter
name|parseDateTimeFormatter
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|Object
name|node
parameter_list|)
block|{
return|return
name|Joda
operator|.
name|forPattern
argument_list|(
name|node
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
DECL|method|parseTermVector
specifier|public
specifier|static
name|void
name|parseTermVector
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|String
name|termVector
parameter_list|,
name|AbstractFieldMapper
operator|.
name|Builder
name|builder
parameter_list|)
throws|throws
name|MapperParsingException
block|{
name|termVector
operator|=
name|Strings
operator|.
name|toUnderscoreCase
argument_list|(
name|termVector
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"no"
operator|.
name|equals
argument_list|(
name|termVector
argument_list|)
condition|)
block|{
name|builder
operator|.
name|storeTermVectors
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"yes"
operator|.
name|equals
argument_list|(
name|termVector
argument_list|)
condition|)
block|{
name|builder
operator|.
name|storeTermVectors
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"with_offsets"
operator|.
name|equals
argument_list|(
name|termVector
argument_list|)
condition|)
block|{
name|builder
operator|.
name|storeTermVectorOffsets
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"with_positions"
operator|.
name|equals
argument_list|(
name|termVector
argument_list|)
condition|)
block|{
name|builder
operator|.
name|storeTermVectorPositions
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"with_positions_offsets"
operator|.
name|equals
argument_list|(
name|termVector
argument_list|)
condition|)
block|{
name|builder
operator|.
name|storeTermVectorPositions
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|builder
operator|.
name|storeTermVectorOffsets
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"with_positions_payloads"
operator|.
name|equals
argument_list|(
name|termVector
argument_list|)
condition|)
block|{
name|builder
operator|.
name|storeTermVectorPositions
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|builder
operator|.
name|storeTermVectorPayloads
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"with_positions_offsets_payloads"
operator|.
name|equals
argument_list|(
name|termVector
argument_list|)
condition|)
block|{
name|builder
operator|.
name|storeTermVectorPositions
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|builder
operator|.
name|storeTermVectorOffsets
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|builder
operator|.
name|storeTermVectorPayloads
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|MapperParsingException
argument_list|(
literal|"Wrong value for termVector ["
operator|+
name|termVector
operator|+
literal|"] for field ["
operator|+
name|fieldName
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
DECL|method|parseIndex
specifier|public
specifier|static
name|void
name|parseIndex
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|String
name|index
parameter_list|,
name|AbstractFieldMapper
operator|.
name|Builder
name|builder
parameter_list|)
throws|throws
name|MapperParsingException
block|{
name|index
operator|=
name|Strings
operator|.
name|toUnderscoreCase
argument_list|(
name|index
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"no"
operator|.
name|equals
argument_list|(
name|index
argument_list|)
condition|)
block|{
name|builder
operator|.
name|index
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"not_analyzed"
operator|.
name|equals
argument_list|(
name|index
argument_list|)
condition|)
block|{
name|builder
operator|.
name|index
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|builder
operator|.
name|tokenized
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"analyzed"
operator|.
name|equals
argument_list|(
name|index
argument_list|)
condition|)
block|{
name|builder
operator|.
name|index
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|builder
operator|.
name|tokenized
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|MapperParsingException
argument_list|(
literal|"Wrong value for index ["
operator|+
name|index
operator|+
literal|"] for field ["
operator|+
name|fieldName
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
DECL|method|parseDocValues
specifier|public
specifier|static
name|boolean
name|parseDocValues
parameter_list|(
name|String
name|docValues
parameter_list|)
block|{
if|if
condition|(
literal|"no"
operator|.
name|equals
argument_list|(
name|docValues
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
literal|"yes"
operator|.
name|equals
argument_list|(
name|docValues
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
name|nodeBooleanValue
argument_list|(
name|docValues
argument_list|)
return|;
block|}
block|}
DECL|method|parseStore
specifier|public
specifier|static
name|boolean
name|parseStore
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|String
name|store
parameter_list|)
throws|throws
name|MapperParsingException
block|{
if|if
condition|(
literal|"no"
operator|.
name|equals
argument_list|(
name|store
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
literal|"yes"
operator|.
name|equals
argument_list|(
name|store
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
name|nodeBooleanValue
argument_list|(
name|store
argument_list|)
return|;
block|}
block|}
DECL|method|parsePathType
specifier|public
specifier|static
name|ContentPath
operator|.
name|Type
name|parsePathType
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|path
parameter_list|)
throws|throws
name|MapperParsingException
block|{
name|path
operator|=
name|Strings
operator|.
name|toUnderscoreCase
argument_list|(
name|path
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"just_name"
operator|.
name|equals
argument_list|(
name|path
argument_list|)
condition|)
block|{
return|return
name|ContentPath
operator|.
name|Type
operator|.
name|JUST_NAME
return|;
block|}
elseif|else
if|if
condition|(
literal|"full"
operator|.
name|equals
argument_list|(
name|path
argument_list|)
condition|)
block|{
return|return
name|ContentPath
operator|.
name|Type
operator|.
name|FULL
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|MapperParsingException
argument_list|(
literal|"Wrong value for pathType ["
operator|+
name|path
operator|+
literal|"] for object ["
operator|+
name|name
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|parseCopyFields
specifier|public
specifier|static
name|void
name|parseCopyFields
parameter_list|(
name|Object
name|propNode
parameter_list|,
name|AbstractFieldMapper
operator|.
name|Builder
name|builder
parameter_list|)
block|{
name|AbstractFieldMapper
operator|.
name|CopyTo
operator|.
name|Builder
name|copyToBuilder
init|=
operator|new
name|AbstractFieldMapper
operator|.
name|CopyTo
operator|.
name|Builder
argument_list|()
decl_stmt|;
if|if
condition|(
name|isArray
argument_list|(
name|propNode
argument_list|)
condition|)
block|{
for|for
control|(
name|Object
name|node
range|:
operator|(
name|List
argument_list|<
name|Object
argument_list|>
operator|)
name|propNode
control|)
block|{
name|copyToBuilder
operator|.
name|add
argument_list|(
name|nodeStringValue
argument_list|(
name|node
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|copyToBuilder
operator|.
name|add
argument_list|(
name|nodeStringValue
argument_list|(
name|propNode
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|copyTo
argument_list|(
name|copyToBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

