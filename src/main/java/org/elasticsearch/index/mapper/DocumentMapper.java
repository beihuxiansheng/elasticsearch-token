begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.mapper
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexableField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BitDocIdSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|CloseableThreadLocal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchGenerationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|MapBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|compress
operator|.
name|CompressedString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|compress
operator|.
name|CompressorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|BytesStreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|text
operator|.
name|StringAndBytesText
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|text
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|cache
operator|.
name|bitset
operator|.
name|BitsetFilterCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|internal
operator|.
name|AllFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|internal
operator|.
name|FieldNamesFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|internal
operator|.
name|IdFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|internal
operator|.
name|IndexFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|internal
operator|.
name|ParentFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|internal
operator|.
name|RoutingFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|internal
operator|.
name|SizeFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|internal
operator|.
name|SourceFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|internal
operator|.
name|TTLFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|internal
operator|.
name|TimestampFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|internal
operator|.
name|TypeFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|internal
operator|.
name|UidFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|internal
operator|.
name|VersionFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|object
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|object
operator|.
name|RootObjectMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|ExecutableScript
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|ScriptService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|ScriptService
operator|.
name|ScriptType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArrayList
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayList
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|DocumentMapper
specifier|public
class|class
name|DocumentMapper
implements|implements
name|ToXContent
block|{
comment|/**      * A result of a merge.      */
DECL|class|MergeResult
specifier|public
specifier|static
class|class
name|MergeResult
block|{
DECL|field|conflicts
specifier|private
specifier|final
name|String
index|[]
name|conflicts
decl_stmt|;
DECL|method|MergeResult
specifier|public
name|MergeResult
parameter_list|(
name|String
index|[]
name|conflicts
parameter_list|)
block|{
name|this
operator|.
name|conflicts
operator|=
name|conflicts
expr_stmt|;
block|}
comment|/**          * Does the merge have conflicts or not?          */
DECL|method|hasConflicts
specifier|public
name|boolean
name|hasConflicts
parameter_list|()
block|{
return|return
name|conflicts
operator|.
name|length
operator|>
literal|0
return|;
block|}
comment|/**          * The merge conflicts.          */
DECL|method|conflicts
specifier|public
name|String
index|[]
name|conflicts
parameter_list|()
block|{
return|return
name|this
operator|.
name|conflicts
return|;
block|}
block|}
DECL|class|MergeFlags
specifier|public
specifier|static
class|class
name|MergeFlags
block|{
DECL|method|mergeFlags
specifier|public
specifier|static
name|MergeFlags
name|mergeFlags
parameter_list|()
block|{
return|return
operator|new
name|MergeFlags
argument_list|()
return|;
block|}
DECL|field|simulate
specifier|private
name|boolean
name|simulate
init|=
literal|true
decl_stmt|;
DECL|method|MergeFlags
specifier|public
name|MergeFlags
parameter_list|()
block|{         }
comment|/**          * A simulation run, don't perform actual modifications to the mapping.          */
DECL|method|simulate
specifier|public
name|boolean
name|simulate
parameter_list|()
block|{
return|return
name|simulate
return|;
block|}
DECL|method|simulate
specifier|public
name|MergeFlags
name|simulate
parameter_list|(
name|boolean
name|simulate
parameter_list|)
block|{
name|this
operator|.
name|simulate
operator|=
name|simulate
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * A listener to be called during the parse process.      */
DECL|interface|ParseListener
specifier|public
specifier|static
interface|interface
name|ParseListener
parameter_list|<
name|ParseContext
parameter_list|>
block|{
DECL|field|EMPTY
specifier|public
specifier|static
specifier|final
name|ParseListener
name|EMPTY
init|=
operator|new
name|ParseListenerAdapter
argument_list|()
decl_stmt|;
comment|/**          * Called before a field is added to the document. Return<tt>true</tt> to include          * it in the document.          */
DECL|method|beforeFieldAdded
name|boolean
name|beforeFieldAdded
parameter_list|(
name|FieldMapper
name|fieldMapper
parameter_list|,
name|Field
name|fieldable
parameter_list|,
name|ParseContext
name|parseContent
parameter_list|)
function_decl|;
block|}
DECL|class|ParseListenerAdapter
specifier|public
specifier|static
class|class
name|ParseListenerAdapter
implements|implements
name|ParseListener
block|{
annotation|@
name|Override
DECL|method|beforeFieldAdded
specifier|public
name|boolean
name|beforeFieldAdded
parameter_list|(
name|FieldMapper
name|fieldMapper
parameter_list|,
name|Field
name|fieldable
parameter_list|,
name|Object
name|parseContext
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
block|}
DECL|class|Builder
specifier|public
specifier|static
class|class
name|Builder
block|{
DECL|field|rootMappers
specifier|private
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|RootMapper
argument_list|>
argument_list|,
name|RootMapper
argument_list|>
name|rootMappers
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|sourceTransforms
specifier|private
name|List
argument_list|<
name|SourceTransform
argument_list|>
name|sourceTransforms
decl_stmt|;
DECL|field|index
specifier|private
specifier|final
name|String
name|index
decl_stmt|;
DECL|field|indexSettings
specifier|private
specifier|final
name|Settings
name|indexSettings
decl_stmt|;
DECL|field|rootObjectMapper
specifier|private
specifier|final
name|RootObjectMapper
name|rootObjectMapper
decl_stmt|;
DECL|field|meta
specifier|private
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|meta
init|=
name|ImmutableMap
operator|.
name|of
argument_list|()
decl_stmt|;
DECL|field|builderContext
specifier|private
specifier|final
name|Mapper
operator|.
name|BuilderContext
name|builderContext
decl_stmt|;
DECL|method|Builder
specifier|public
name|Builder
parameter_list|(
name|String
name|index
parameter_list|,
name|Settings
name|indexSettings
parameter_list|,
name|RootObjectMapper
operator|.
name|Builder
name|builder
parameter_list|)
block|{
name|this
operator|.
name|index
operator|=
name|index
expr_stmt|;
name|this
operator|.
name|indexSettings
operator|=
name|indexSettings
expr_stmt|;
name|this
operator|.
name|builderContext
operator|=
operator|new
name|Mapper
operator|.
name|BuilderContext
argument_list|(
name|indexSettings
argument_list|,
operator|new
name|ContentPath
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|rootObjectMapper
operator|=
name|builder
operator|.
name|build
argument_list|(
name|builderContext
argument_list|)
expr_stmt|;
comment|// UID first so it will be the first stored field to load (so will benefit from "fields: []" early termination
name|this
operator|.
name|rootMappers
operator|.
name|put
argument_list|(
name|UidFieldMapper
operator|.
name|class
argument_list|,
operator|new
name|UidFieldMapper
argument_list|(
name|indexSettings
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|rootMappers
operator|.
name|put
argument_list|(
name|IdFieldMapper
operator|.
name|class
argument_list|,
operator|new
name|IdFieldMapper
argument_list|(
name|indexSettings
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|rootMappers
operator|.
name|put
argument_list|(
name|RoutingFieldMapper
operator|.
name|class
argument_list|,
operator|new
name|RoutingFieldMapper
argument_list|(
name|indexSettings
argument_list|)
argument_list|)
expr_stmt|;
comment|// add default mappers, order is important (for example analyzer should come before the rest to set context.analyzer)
name|this
operator|.
name|rootMappers
operator|.
name|put
argument_list|(
name|SizeFieldMapper
operator|.
name|class
argument_list|,
operator|new
name|SizeFieldMapper
argument_list|(
name|indexSettings
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|rootMappers
operator|.
name|put
argument_list|(
name|IndexFieldMapper
operator|.
name|class
argument_list|,
operator|new
name|IndexFieldMapper
argument_list|(
name|indexSettings
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|rootMappers
operator|.
name|put
argument_list|(
name|SourceFieldMapper
operator|.
name|class
argument_list|,
operator|new
name|SourceFieldMapper
argument_list|(
name|indexSettings
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|rootMappers
operator|.
name|put
argument_list|(
name|TypeFieldMapper
operator|.
name|class
argument_list|,
operator|new
name|TypeFieldMapper
argument_list|(
name|indexSettings
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|rootMappers
operator|.
name|put
argument_list|(
name|AllFieldMapper
operator|.
name|class
argument_list|,
operator|new
name|AllFieldMapper
argument_list|(
name|indexSettings
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|rootMappers
operator|.
name|put
argument_list|(
name|TimestampFieldMapper
operator|.
name|class
argument_list|,
operator|new
name|TimestampFieldMapper
argument_list|(
name|indexSettings
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|rootMappers
operator|.
name|put
argument_list|(
name|TTLFieldMapper
operator|.
name|class
argument_list|,
operator|new
name|TTLFieldMapper
argument_list|(
name|indexSettings
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|rootMappers
operator|.
name|put
argument_list|(
name|VersionFieldMapper
operator|.
name|class
argument_list|,
operator|new
name|VersionFieldMapper
argument_list|(
name|indexSettings
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|rootMappers
operator|.
name|put
argument_list|(
name|ParentFieldMapper
operator|.
name|class
argument_list|,
operator|new
name|ParentFieldMapper
argument_list|(
name|indexSettings
argument_list|)
argument_list|)
expr_stmt|;
comment|// _field_names last so that it can see all other fields
name|this
operator|.
name|rootMappers
operator|.
name|put
argument_list|(
name|FieldNamesFieldMapper
operator|.
name|class
argument_list|,
operator|new
name|FieldNamesFieldMapper
argument_list|(
name|indexSettings
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|meta
specifier|public
name|Builder
name|meta
parameter_list|(
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|meta
parameter_list|)
block|{
name|this
operator|.
name|meta
operator|=
name|meta
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|put
specifier|public
name|Builder
name|put
parameter_list|(
name|RootMapper
operator|.
name|Builder
name|mapper
parameter_list|)
block|{
name|RootMapper
name|rootMapper
init|=
operator|(
name|RootMapper
operator|)
name|mapper
operator|.
name|build
argument_list|(
name|builderContext
argument_list|)
decl_stmt|;
name|rootMappers
operator|.
name|put
argument_list|(
name|rootMapper
operator|.
name|getClass
argument_list|()
argument_list|,
name|rootMapper
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|transform
specifier|public
name|Builder
name|transform
parameter_list|(
name|ScriptService
name|scriptService
parameter_list|,
name|String
name|script
parameter_list|,
name|ScriptType
name|scriptType
parameter_list|,
name|String
name|language
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
block|{
if|if
condition|(
name|sourceTransforms
operator|==
literal|null
condition|)
block|{
name|sourceTransforms
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|sourceTransforms
operator|.
name|add
argument_list|(
operator|new
name|ScriptTransform
argument_list|(
name|scriptService
argument_list|,
name|script
argument_list|,
name|scriptType
argument_list|,
name|language
argument_list|,
name|parameters
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|build
specifier|public
name|DocumentMapper
name|build
parameter_list|(
name|DocumentMapperParser
name|docMapperParser
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|rootObjectMapper
argument_list|,
literal|"Mapper builder must have the root object mapper set"
argument_list|)
expr_stmt|;
return|return
operator|new
name|DocumentMapper
argument_list|(
name|index
argument_list|,
name|indexSettings
argument_list|,
name|docMapperParser
argument_list|,
name|rootObjectMapper
argument_list|,
name|meta
argument_list|,
name|rootMappers
argument_list|,
name|sourceTransforms
argument_list|)
return|;
block|}
block|}
DECL|field|cache
specifier|private
name|CloseableThreadLocal
argument_list|<
name|ParseContext
operator|.
name|InternalParseContext
argument_list|>
name|cache
init|=
operator|new
name|CloseableThreadLocal
argument_list|<
name|ParseContext
operator|.
name|InternalParseContext
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|ParseContext
operator|.
name|InternalParseContext
name|initialValue
parameter_list|()
block|{
return|return
operator|new
name|ParseContext
operator|.
name|InternalParseContext
argument_list|(
name|index
argument_list|,
name|indexSettings
argument_list|,
name|docMapperParser
argument_list|,
name|DocumentMapper
operator|.
name|this
argument_list|,
operator|new
name|ContentPath
argument_list|(
literal|0
argument_list|)
argument_list|)
return|;
block|}
block|}
decl_stmt|;
DECL|field|index
specifier|private
specifier|final
name|String
name|index
decl_stmt|;
DECL|field|indexSettings
specifier|private
specifier|final
name|Settings
name|indexSettings
decl_stmt|;
DECL|field|type
specifier|private
specifier|final
name|String
name|type
decl_stmt|;
DECL|field|typeText
specifier|private
specifier|final
name|StringAndBytesText
name|typeText
decl_stmt|;
DECL|field|docMapperParser
specifier|private
specifier|final
name|DocumentMapperParser
name|docMapperParser
decl_stmt|;
DECL|field|meta
specifier|private
specifier|volatile
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|meta
decl_stmt|;
DECL|field|mappingSource
specifier|private
specifier|volatile
name|CompressedString
name|mappingSource
decl_stmt|;
DECL|field|rootObjectMapper
specifier|private
specifier|final
name|RootObjectMapper
name|rootObjectMapper
decl_stmt|;
DECL|field|rootMappers
specifier|private
specifier|final
name|ImmutableMap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|RootMapper
argument_list|>
argument_list|,
name|RootMapper
argument_list|>
name|rootMappers
decl_stmt|;
DECL|field|rootMappersOrdered
specifier|private
specifier|final
name|RootMapper
index|[]
name|rootMappersOrdered
decl_stmt|;
DECL|field|rootMappersNotIncludedInObject
specifier|private
specifier|final
name|RootMapper
index|[]
name|rootMappersNotIncludedInObject
decl_stmt|;
DECL|field|fieldMappers
specifier|private
specifier|volatile
name|DocumentFieldMappers
name|fieldMappers
decl_stmt|;
DECL|field|objectMappers
specifier|private
specifier|volatile
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|ObjectMapper
argument_list|>
name|objectMappers
init|=
name|ImmutableMap
operator|.
name|of
argument_list|()
decl_stmt|;
DECL|field|fieldMapperListeners
specifier|private
specifier|final
name|List
argument_list|<
name|FieldMapperListener
argument_list|>
name|fieldMapperListeners
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|objectMapperListeners
specifier|private
specifier|final
name|List
argument_list|<
name|ObjectMapperListener
argument_list|>
name|objectMapperListeners
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|hasNestedObjects
specifier|private
name|boolean
name|hasNestedObjects
init|=
literal|false
decl_stmt|;
DECL|field|typeFilter
specifier|private
specifier|final
name|Filter
name|typeFilter
decl_stmt|;
DECL|field|mappersMutex
specifier|private
specifier|final
name|Object
name|mappersMutex
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
DECL|field|sourceTransforms
specifier|private
specifier|final
name|List
argument_list|<
name|SourceTransform
argument_list|>
name|sourceTransforms
decl_stmt|;
DECL|method|DocumentMapper
specifier|public
name|DocumentMapper
parameter_list|(
name|String
name|index
parameter_list|,
annotation|@
name|Nullable
name|Settings
name|indexSettings
parameter_list|,
name|DocumentMapperParser
name|docMapperParser
parameter_list|,
name|RootObjectMapper
name|rootObjectMapper
parameter_list|,
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|meta
parameter_list|,
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|RootMapper
argument_list|>
argument_list|,
name|RootMapper
argument_list|>
name|rootMappers
parameter_list|,
name|List
argument_list|<
name|SourceTransform
argument_list|>
name|sourceTransforms
parameter_list|)
block|{
name|this
operator|.
name|index
operator|=
name|index
expr_stmt|;
name|this
operator|.
name|indexSettings
operator|=
name|indexSettings
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|rootObjectMapper
operator|.
name|name
argument_list|()
expr_stmt|;
name|this
operator|.
name|typeText
operator|=
operator|new
name|StringAndBytesText
argument_list|(
name|this
operator|.
name|type
argument_list|)
expr_stmt|;
name|this
operator|.
name|docMapperParser
operator|=
name|docMapperParser
expr_stmt|;
name|this
operator|.
name|meta
operator|=
name|meta
expr_stmt|;
name|this
operator|.
name|rootObjectMapper
operator|=
name|rootObjectMapper
expr_stmt|;
name|this
operator|.
name|sourceTransforms
operator|=
name|sourceTransforms
expr_stmt|;
name|this
operator|.
name|rootMappers
operator|=
name|ImmutableMap
operator|.
name|copyOf
argument_list|(
name|rootMappers
argument_list|)
expr_stmt|;
name|this
operator|.
name|rootMappersOrdered
operator|=
name|rootMappers
operator|.
name|values
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|RootMapper
index|[
name|rootMappers
operator|.
name|values
argument_list|()
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|RootMapper
argument_list|>
name|rootMappersNotIncludedInObjectLst
init|=
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|RootMapper
name|rootMapper
range|:
name|rootMappersOrdered
control|)
block|{
if|if
condition|(
operator|!
name|rootMapper
operator|.
name|includeInObject
argument_list|()
condition|)
block|{
name|rootMappersNotIncludedInObjectLst
operator|.
name|add
argument_list|(
name|rootMapper
argument_list|)
expr_stmt|;
block|}
block|}
name|this
operator|.
name|rootMappersNotIncludedInObject
operator|=
name|rootMappersNotIncludedInObjectLst
operator|.
name|toArray
argument_list|(
operator|new
name|RootMapper
index|[
name|rootMappersNotIncludedInObjectLst
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
name|this
operator|.
name|typeFilter
operator|=
name|typeMapper
argument_list|()
operator|.
name|termFilter
argument_list|(
name|type
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|rootMapper
argument_list|(
name|ParentFieldMapper
operator|.
name|class
argument_list|)
operator|.
name|active
argument_list|()
condition|)
block|{
comment|// mark the routing field mapper as required
name|rootMapper
argument_list|(
name|RoutingFieldMapper
operator|.
name|class
argument_list|)
operator|.
name|markAsRequired
argument_list|()
expr_stmt|;
block|}
name|FieldMapperListener
operator|.
name|Aggregator
name|fieldMappersAgg
init|=
operator|new
name|FieldMapperListener
operator|.
name|Aggregator
argument_list|()
decl_stmt|;
for|for
control|(
name|RootMapper
name|rootMapper
range|:
name|rootMappersOrdered
control|)
block|{
if|if
condition|(
name|rootMapper
operator|.
name|includeInObject
argument_list|()
condition|)
block|{
name|rootObjectMapper
operator|.
name|putMapper
argument_list|(
name|rootMapper
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|rootMapper
operator|instanceof
name|FieldMapper
condition|)
block|{
name|fieldMappersAgg
operator|.
name|mappers
operator|.
name|add
argument_list|(
operator|(
name|FieldMapper
operator|)
name|rootMapper
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// now traverse and get all the statically defined ones
name|rootObjectMapper
operator|.
name|traverse
argument_list|(
name|fieldMappersAgg
argument_list|)
expr_stmt|;
name|this
operator|.
name|fieldMappers
operator|=
operator|new
name|DocumentFieldMappers
argument_list|(
name|docMapperParser
operator|.
name|analysisService
argument_list|)
operator|.
name|copyAndAllAll
argument_list|(
name|fieldMappersAgg
operator|.
name|mappers
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|ObjectMapper
argument_list|>
name|objectMappers
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|rootObjectMapper
operator|.
name|traverse
argument_list|(
operator|new
name|ObjectMapperListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|objectMapper
parameter_list|(
name|ObjectMapper
name|objectMapper
parameter_list|)
block|{
name|objectMappers
operator|.
name|put
argument_list|(
name|objectMapper
operator|.
name|fullPath
argument_list|()
argument_list|,
name|objectMapper
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|this
operator|.
name|objectMappers
operator|=
name|ImmutableMap
operator|.
name|copyOf
argument_list|(
name|objectMappers
argument_list|)
expr_stmt|;
for|for
control|(
name|ObjectMapper
name|objectMapper
range|:
name|objectMappers
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|objectMapper
operator|.
name|nested
argument_list|()
operator|.
name|isNested
argument_list|()
condition|)
block|{
name|hasNestedObjects
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|refreshSource
argument_list|()
expr_stmt|;
block|}
DECL|method|type
specifier|public
name|String
name|type
parameter_list|()
block|{
return|return
name|this
operator|.
name|type
return|;
block|}
DECL|method|typeText
specifier|public
name|Text
name|typeText
parameter_list|()
block|{
return|return
name|this
operator|.
name|typeText
return|;
block|}
DECL|method|meta
specifier|public
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|meta
parameter_list|()
block|{
return|return
name|this
operator|.
name|meta
return|;
block|}
DECL|method|mappingSource
specifier|public
name|CompressedString
name|mappingSource
parameter_list|()
block|{
return|return
name|this
operator|.
name|mappingSource
return|;
block|}
DECL|method|root
specifier|public
name|RootObjectMapper
name|root
parameter_list|()
block|{
return|return
name|this
operator|.
name|rootObjectMapper
return|;
block|}
DECL|method|uidMapper
specifier|public
name|UidFieldMapper
name|uidMapper
parameter_list|()
block|{
return|return
name|rootMapper
argument_list|(
name|UidFieldMapper
operator|.
name|class
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|}
argument_list|)
DECL|method|rootMapper
specifier|public
parameter_list|<
name|T
extends|extends
name|RootMapper
parameter_list|>
name|T
name|rootMapper
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
return|return
operator|(
name|T
operator|)
name|rootMappers
operator|.
name|get
argument_list|(
name|type
argument_list|)
return|;
block|}
DECL|method|indexMapper
specifier|public
name|IndexFieldMapper
name|indexMapper
parameter_list|()
block|{
return|return
name|rootMapper
argument_list|(
name|IndexFieldMapper
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|typeMapper
specifier|public
name|TypeFieldMapper
name|typeMapper
parameter_list|()
block|{
return|return
name|rootMapper
argument_list|(
name|TypeFieldMapper
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|sourceMapper
specifier|public
name|SourceFieldMapper
name|sourceMapper
parameter_list|()
block|{
return|return
name|rootMapper
argument_list|(
name|SourceFieldMapper
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|allFieldMapper
specifier|public
name|AllFieldMapper
name|allFieldMapper
parameter_list|()
block|{
return|return
name|rootMapper
argument_list|(
name|AllFieldMapper
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|idFieldMapper
specifier|public
name|IdFieldMapper
name|idFieldMapper
parameter_list|()
block|{
return|return
name|rootMapper
argument_list|(
name|IdFieldMapper
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|routingFieldMapper
specifier|public
name|RoutingFieldMapper
name|routingFieldMapper
parameter_list|()
block|{
return|return
name|rootMapper
argument_list|(
name|RoutingFieldMapper
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|parentFieldMapper
specifier|public
name|ParentFieldMapper
name|parentFieldMapper
parameter_list|()
block|{
return|return
name|rootMapper
argument_list|(
name|ParentFieldMapper
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|sizeFieldMapper
specifier|public
name|SizeFieldMapper
name|sizeFieldMapper
parameter_list|()
block|{
return|return
name|rootMapper
argument_list|(
name|SizeFieldMapper
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|timestampFieldMapper
specifier|public
name|TimestampFieldMapper
name|timestampFieldMapper
parameter_list|()
block|{
return|return
name|rootMapper
argument_list|(
name|TimestampFieldMapper
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|TTLFieldMapper
specifier|public
name|TTLFieldMapper
name|TTLFieldMapper
parameter_list|()
block|{
return|return
name|rootMapper
argument_list|(
name|TTLFieldMapper
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|IndexFieldMapper
specifier|public
name|IndexFieldMapper
name|IndexFieldMapper
parameter_list|()
block|{
return|return
name|rootMapper
argument_list|(
name|IndexFieldMapper
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|SizeFieldMapper
specifier|public
name|SizeFieldMapper
name|SizeFieldMapper
parameter_list|()
block|{
return|return
name|rootMapper
argument_list|(
name|SizeFieldMapper
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|typeFilter
specifier|public
name|Filter
name|typeFilter
parameter_list|()
block|{
return|return
name|this
operator|.
name|typeFilter
return|;
block|}
DECL|method|hasNestedObjects
specifier|public
name|boolean
name|hasNestedObjects
parameter_list|()
block|{
return|return
name|hasNestedObjects
return|;
block|}
DECL|method|mappers
specifier|public
name|DocumentFieldMappers
name|mappers
parameter_list|()
block|{
return|return
name|this
operator|.
name|fieldMappers
return|;
block|}
DECL|method|objectMappers
specifier|public
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|ObjectMapper
argument_list|>
name|objectMappers
parameter_list|()
block|{
return|return
name|this
operator|.
name|objectMappers
return|;
block|}
DECL|method|parse
specifier|public
name|ParsedDocument
name|parse
parameter_list|(
name|BytesReference
name|source
parameter_list|)
throws|throws
name|MapperParsingException
block|{
return|return
name|parse
argument_list|(
name|SourceToParse
operator|.
name|source
argument_list|(
name|source
argument_list|)
argument_list|)
return|;
block|}
DECL|method|parse
specifier|public
name|ParsedDocument
name|parse
parameter_list|(
name|String
name|type
parameter_list|,
name|String
name|id
parameter_list|,
name|BytesReference
name|source
parameter_list|)
throws|throws
name|MapperParsingException
block|{
return|return
name|parse
argument_list|(
name|SourceToParse
operator|.
name|source
argument_list|(
name|source
argument_list|)
operator|.
name|type
argument_list|(
name|type
argument_list|)
operator|.
name|id
argument_list|(
name|id
argument_list|)
argument_list|)
return|;
block|}
DECL|method|parse
specifier|public
name|ParsedDocument
name|parse
parameter_list|(
name|SourceToParse
name|source
parameter_list|)
throws|throws
name|MapperParsingException
block|{
return|return
name|parse
argument_list|(
name|source
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|parse
specifier|public
name|ParsedDocument
name|parse
parameter_list|(
name|SourceToParse
name|source
parameter_list|,
annotation|@
name|Nullable
name|ParseListener
name|listener
parameter_list|)
throws|throws
name|MapperParsingException
block|{
name|ParseContext
operator|.
name|InternalParseContext
name|context
init|=
name|cache
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|source
operator|.
name|type
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|source
operator|.
name|type
argument_list|()
operator|.
name|equals
argument_list|(
name|this
operator|.
name|type
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|MapperParsingException
argument_list|(
literal|"Type mismatch, provide type ["
operator|+
name|source
operator|.
name|type
argument_list|()
operator|+
literal|"] but mapper is of type ["
operator|+
name|this
operator|.
name|type
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|source
operator|.
name|type
argument_list|(
name|this
operator|.
name|type
argument_list|)
expr_stmt|;
name|XContentParser
name|parser
init|=
name|source
operator|.
name|parser
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|parser
operator|==
literal|null
condition|)
block|{
name|parser
operator|=
name|XContentHelper
operator|.
name|createParser
argument_list|(
name|source
operator|.
name|source
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sourceTransforms
operator|!=
literal|null
condition|)
block|{
name|parser
operator|=
name|transform
argument_list|(
name|parser
argument_list|)
expr_stmt|;
block|}
name|context
operator|.
name|reset
argument_list|(
name|parser
argument_list|,
operator|new
name|ParseContext
operator|.
name|Document
argument_list|()
argument_list|,
name|source
argument_list|,
name|listener
argument_list|)
expr_stmt|;
comment|// will result in START_OBJECT
name|int
name|countDownTokens
init|=
literal|0
decl_stmt|;
name|XContentParser
operator|.
name|Token
name|token
init|=
name|parser
operator|.
name|nextToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|token
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
condition|)
block|{
throw|throw
operator|new
name|MapperParsingException
argument_list|(
literal|"Malformed content, must start with an object"
argument_list|)
throw|;
block|}
name|boolean
name|emptyDoc
init|=
literal|false
decl_stmt|;
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
condition|)
block|{
comment|// empty doc, we can handle it...
name|emptyDoc
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
condition|)
block|{
throw|throw
operator|new
name|MapperParsingException
argument_list|(
literal|"Malformed content, after first object, either the type field or the actual properties should exist"
argument_list|)
throw|;
block|}
for|for
control|(
name|RootMapper
name|rootMapper
range|:
name|rootMappersOrdered
control|)
block|{
name|rootMapper
operator|.
name|preParse
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|emptyDoc
condition|)
block|{
name|rootObjectMapper
operator|.
name|parse
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|countDownTokens
condition|;
name|i
operator|++
control|)
block|{
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|RootMapper
name|rootMapper
range|:
name|rootMappersOrdered
control|)
block|{
name|rootMapper
operator|.
name|postParse
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
comment|// if its already a mapper parsing exception, no need to wrap it...
if|if
condition|(
name|e
operator|instanceof
name|MapperParsingException
condition|)
block|{
throw|throw
operator|(
name|MapperParsingException
operator|)
name|e
throw|;
block|}
comment|// Throw a more meaningful message if the document is empty.
if|if
condition|(
name|source
operator|.
name|source
argument_list|()
operator|!=
literal|null
operator|&&
name|source
operator|.
name|source
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|MapperParsingException
argument_list|(
literal|"failed to parse, document is empty"
argument_list|)
throw|;
block|}
throw|throw
operator|new
name|MapperParsingException
argument_list|(
literal|"failed to parse"
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
comment|// only close the parser when its not provided externally
if|if
condition|(
name|source
operator|.
name|parser
argument_list|()
operator|==
literal|null
operator|&&
name|parser
operator|!=
literal|null
condition|)
block|{
name|parser
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|// reverse the order of docs for nested docs support, parent should be last
if|if
condition|(
name|context
operator|.
name|docs
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|Collections
operator|.
name|reverse
argument_list|(
name|context
operator|.
name|docs
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// apply doc boost
if|if
condition|(
name|context
operator|.
name|docBoost
argument_list|()
operator|!=
literal|1.0f
condition|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|encounteredFields
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|ParseContext
operator|.
name|Document
name|doc
range|:
name|context
operator|.
name|docs
argument_list|()
control|)
block|{
name|encounteredFields
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|IndexableField
name|field
range|:
name|doc
control|)
block|{
if|if
condition|(
name|field
operator|.
name|fieldType
argument_list|()
operator|.
name|indexOptions
argument_list|()
operator|!=
name|IndexOptions
operator|.
name|NONE
operator|&&
operator|!
name|field
operator|.
name|fieldType
argument_list|()
operator|.
name|omitNorms
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|encounteredFields
operator|.
name|contains
argument_list|(
name|field
operator|.
name|name
argument_list|()
argument_list|)
condition|)
block|{
operator|(
operator|(
name|Field
operator|)
name|field
operator|)
operator|.
name|setBoost
argument_list|(
name|context
operator|.
name|docBoost
argument_list|()
operator|*
name|field
operator|.
name|boost
argument_list|()
argument_list|)
expr_stmt|;
name|encounteredFields
operator|.
name|add
argument_list|(
name|field
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
name|ParsedDocument
name|doc
init|=
operator|new
name|ParsedDocument
argument_list|(
name|context
operator|.
name|uid
argument_list|()
argument_list|,
name|context
operator|.
name|version
argument_list|()
argument_list|,
name|context
operator|.
name|id
argument_list|()
argument_list|,
name|context
operator|.
name|type
argument_list|()
argument_list|,
name|source
operator|.
name|routing
argument_list|()
argument_list|,
name|source
operator|.
name|timestamp
argument_list|()
argument_list|,
name|source
operator|.
name|ttl
argument_list|()
argument_list|,
name|context
operator|.
name|docs
argument_list|()
argument_list|,
name|context
operator|.
name|source
argument_list|()
argument_list|,
name|context
operator|.
name|mappingsModified
argument_list|()
argument_list|)
operator|.
name|parent
argument_list|(
name|source
operator|.
name|parent
argument_list|()
argument_list|)
decl_stmt|;
comment|// reset the context to free up memory
name|context
operator|.
name|reset
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
name|doc
return|;
block|}
comment|/**      * Returns the best nested {@link ObjectMapper} instances that is in the scope of the specified nested docId.      */
DECL|method|findNestedObjectMapper
specifier|public
name|ObjectMapper
name|findNestedObjectMapper
parameter_list|(
name|int
name|nestedDocId
parameter_list|,
name|BitsetFilterCache
name|cache
parameter_list|,
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|ObjectMapper
name|nestedObjectMapper
init|=
literal|null
decl_stmt|;
for|for
control|(
name|ObjectMapper
name|objectMapper
range|:
name|objectMappers
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|objectMapper
operator|.
name|nested
argument_list|()
operator|.
name|isNested
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|BitDocIdSet
name|nestedTypeBitSet
init|=
name|cache
operator|.
name|getBitDocIdSetFilter
argument_list|(
name|objectMapper
operator|.
name|nestedTypeFilter
argument_list|()
argument_list|)
operator|.
name|getDocIdSet
argument_list|(
name|context
argument_list|)
decl_stmt|;
if|if
condition|(
name|nestedTypeBitSet
operator|!=
literal|null
operator|&&
name|nestedTypeBitSet
operator|.
name|bits
argument_list|()
operator|.
name|get
argument_list|(
name|nestedDocId
argument_list|)
condition|)
block|{
if|if
condition|(
name|nestedObjectMapper
operator|==
literal|null
condition|)
block|{
name|nestedObjectMapper
operator|=
name|objectMapper
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|nestedObjectMapper
operator|.
name|fullPath
argument_list|()
operator|.
name|length
argument_list|()
operator|<
name|objectMapper
operator|.
name|fullPath
argument_list|()
operator|.
name|length
argument_list|()
condition|)
block|{
name|nestedObjectMapper
operator|=
name|objectMapper
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|nestedObjectMapper
return|;
block|}
comment|/**      * Returns the parent {@link ObjectMapper} instance of the specified object mapper or<code>null</code> if there      * isn't any.      */
comment|// TODO: We should add: ObjectMapper#getParentObjectMapper()
DECL|method|findParentObjectMapper
specifier|public
name|ObjectMapper
name|findParentObjectMapper
parameter_list|(
name|ObjectMapper
name|objectMapper
parameter_list|)
block|{
name|int
name|indexOfLastDot
init|=
name|objectMapper
operator|.
name|fullPath
argument_list|()
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexOfLastDot
operator|!=
operator|-
literal|1
condition|)
block|{
name|String
name|parentNestObjectPath
init|=
name|objectMapper
operator|.
name|fullPath
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|indexOfLastDot
argument_list|)
decl_stmt|;
return|return
name|objectMappers
argument_list|()
operator|.
name|get
argument_list|(
name|parentNestObjectPath
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/**      * Transform the source when it is expressed as a map.  This is public so it can be transformed the source is loaded.      * @param sourceAsMap source to transform.  This may be mutated by the script.      * @return transformed version of transformMe.  This may actually be the same object as sourceAsMap      */
DECL|method|transformSourceAsMap
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|transformSourceAsMap
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|sourceAsMap
parameter_list|)
block|{
if|if
condition|(
name|sourceTransforms
operator|==
literal|null
condition|)
block|{
return|return
name|sourceAsMap
return|;
block|}
for|for
control|(
name|SourceTransform
name|transform
range|:
name|sourceTransforms
control|)
block|{
name|sourceAsMap
operator|=
name|transform
operator|.
name|transformSourceAsMap
argument_list|(
name|sourceAsMap
argument_list|)
expr_stmt|;
block|}
return|return
name|sourceAsMap
return|;
block|}
DECL|method|transform
specifier|private
name|XContentParser
name|transform
parameter_list|(
name|XContentParser
name|parser
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|transformed
init|=
name|transformSourceAsMap
argument_list|(
name|parser
operator|.
name|mapOrderedAndClose
argument_list|()
argument_list|)
decl_stmt|;
name|XContentBuilder
name|builder
init|=
name|XContentFactory
operator|.
name|contentBuilder
argument_list|(
name|parser
operator|.
name|contentType
argument_list|()
argument_list|)
operator|.
name|value
argument_list|(
name|transformed
argument_list|)
decl_stmt|;
return|return
name|parser
operator|.
name|contentType
argument_list|()
operator|.
name|xContent
argument_list|()
operator|.
name|createParser
argument_list|(
name|builder
operator|.
name|bytes
argument_list|()
argument_list|)
return|;
block|}
DECL|method|addFieldMappers
specifier|public
name|void
name|addFieldMappers
parameter_list|(
name|List
argument_list|<
name|FieldMapper
argument_list|<
name|?
argument_list|>
argument_list|>
name|fieldMappers
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mappersMutex
init|)
block|{
name|this
operator|.
name|fieldMappers
operator|=
name|this
operator|.
name|fieldMappers
operator|.
name|copyAndAllAll
argument_list|(
name|fieldMappers
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|FieldMapperListener
name|listener
range|:
name|fieldMapperListeners
control|)
block|{
name|listener
operator|.
name|fieldMappers
argument_list|(
name|fieldMappers
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|addFieldMapperListener
specifier|public
name|void
name|addFieldMapperListener
parameter_list|(
name|FieldMapperListener
name|fieldMapperListener
parameter_list|)
block|{
name|fieldMapperListeners
operator|.
name|add
argument_list|(
name|fieldMapperListener
argument_list|)
expr_stmt|;
block|}
DECL|method|traverse
specifier|public
name|void
name|traverse
parameter_list|(
name|FieldMapperListener
name|listener
parameter_list|)
block|{
for|for
control|(
name|RootMapper
name|rootMapper
range|:
name|rootMappersOrdered
control|)
block|{
if|if
condition|(
operator|!
name|rootMapper
operator|.
name|includeInObject
argument_list|()
operator|&&
name|rootMapper
operator|instanceof
name|FieldMapper
condition|)
block|{
name|listener
operator|.
name|fieldMapper
argument_list|(
operator|(
name|FieldMapper
operator|)
name|rootMapper
argument_list|)
expr_stmt|;
block|}
block|}
name|rootObjectMapper
operator|.
name|traverse
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
DECL|method|addObjectMappers
specifier|public
name|void
name|addObjectMappers
parameter_list|(
name|Collection
argument_list|<
name|ObjectMapper
argument_list|>
name|objectMappers
parameter_list|)
block|{
name|addObjectMappers
argument_list|(
name|objectMappers
operator|.
name|toArray
argument_list|(
operator|new
name|ObjectMapper
index|[
name|objectMappers
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|addObjectMappers
specifier|private
name|void
name|addObjectMappers
parameter_list|(
name|ObjectMapper
modifier|...
name|objectMappers
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mappersMutex
init|)
block|{
name|MapBuilder
argument_list|<
name|String
argument_list|,
name|ObjectMapper
argument_list|>
name|builder
init|=
name|MapBuilder
operator|.
name|newMapBuilder
argument_list|(
name|this
operator|.
name|objectMappers
argument_list|)
decl_stmt|;
for|for
control|(
name|ObjectMapper
name|objectMapper
range|:
name|objectMappers
control|)
block|{
name|builder
operator|.
name|put
argument_list|(
name|objectMapper
operator|.
name|fullPath
argument_list|()
argument_list|,
name|objectMapper
argument_list|)
expr_stmt|;
if|if
condition|(
name|objectMapper
operator|.
name|nested
argument_list|()
operator|.
name|isNested
argument_list|()
condition|)
block|{
name|hasNestedObjects
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|this
operator|.
name|objectMappers
operator|=
name|builder
operator|.
name|immutableMap
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|ObjectMapperListener
name|objectMapperListener
range|:
name|objectMapperListeners
control|)
block|{
name|objectMapperListener
operator|.
name|objectMappers
argument_list|(
name|objectMappers
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|addObjectMapperListener
specifier|public
name|void
name|addObjectMapperListener
parameter_list|(
name|ObjectMapperListener
name|objectMapperListener
parameter_list|)
block|{
name|objectMapperListeners
operator|.
name|add
argument_list|(
name|objectMapperListener
argument_list|)
expr_stmt|;
block|}
DECL|method|traverse
specifier|public
name|void
name|traverse
parameter_list|(
name|ObjectMapperListener
name|listener
parameter_list|)
block|{
name|rootObjectMapper
operator|.
name|traverse
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
DECL|method|merge
specifier|public
specifier|synchronized
name|MergeResult
name|merge
parameter_list|(
name|DocumentMapper
name|mergeWith
parameter_list|,
name|MergeFlags
name|mergeFlags
parameter_list|)
block|{
name|MergeContext
name|mergeContext
init|=
operator|new
name|MergeContext
argument_list|(
name|this
argument_list|,
name|mergeFlags
argument_list|)
decl_stmt|;
assert|assert
name|rootMappers
operator|.
name|size
argument_list|()
operator|==
name|mergeWith
operator|.
name|rootMappers
operator|.
name|size
argument_list|()
assert|;
name|rootObjectMapper
operator|.
name|merge
argument_list|(
name|mergeWith
operator|.
name|rootObjectMapper
argument_list|,
name|mergeContext
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|RootMapper
argument_list|>
argument_list|,
name|RootMapper
argument_list|>
name|entry
range|:
name|rootMappers
operator|.
name|entrySet
argument_list|()
control|)
block|{
comment|// root mappers included in root object will get merge in the rootObjectMapper
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|includeInObject
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|RootMapper
name|mergeWithRootMapper
init|=
name|mergeWith
operator|.
name|rootMappers
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|mergeWithRootMapper
operator|!=
literal|null
condition|)
block|{
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|merge
argument_list|(
name|mergeWithRootMapper
argument_list|,
name|mergeContext
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|mergeFlags
operator|.
name|simulate
argument_list|()
condition|)
block|{
comment|// let the merge with attributes to override the attributes
name|meta
operator|=
name|mergeWith
operator|.
name|meta
argument_list|()
expr_stmt|;
comment|// update the source of the merged one
name|refreshSource
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|MergeResult
argument_list|(
name|mergeContext
operator|.
name|buildConflicts
argument_list|()
argument_list|)
return|;
block|}
DECL|method|refreshSource
specifier|public
name|CompressedString
name|refreshSource
parameter_list|()
throws|throws
name|ElasticsearchGenerationException
block|{
try|try
block|{
name|BytesStreamOutput
name|bStream
init|=
operator|new
name|BytesStreamOutput
argument_list|()
decl_stmt|;
name|XContentBuilder
name|builder
init|=
name|XContentFactory
operator|.
name|contentBuilder
argument_list|(
name|XContentType
operator|.
name|JSON
argument_list|,
name|CompressorFactory
operator|.
name|defaultCompressor
argument_list|()
operator|.
name|streamOutput
argument_list|(
name|bStream
argument_list|)
argument_list|)
decl_stmt|;
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|toXContent
argument_list|(
name|builder
argument_list|,
name|ToXContent
operator|.
name|EMPTY_PARAMS
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|mappingSource
operator|=
operator|new
name|CompressedString
argument_list|(
name|bStream
operator|.
name|bytes
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ElasticsearchGenerationException
argument_list|(
literal|"failed to serialize source for type ["
operator|+
name|type
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
name|cache
operator|.
name|close
argument_list|()
expr_stmt|;
name|rootObjectMapper
operator|.
name|close
argument_list|()
expr_stmt|;
for|for
control|(
name|RootMapper
name|rootMapper
range|:
name|rootMappersOrdered
control|)
block|{
name|rootMapper
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|rootObjectMapper
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|,
operator|new
name|ToXContent
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|sourceTransforms
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|sourceTransforms
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"transform"
argument_list|)
expr_stmt|;
name|sourceTransforms
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|startArray
argument_list|(
literal|"transform"
argument_list|)
expr_stmt|;
for|for
control|(
name|SourceTransform
name|transform
range|:
name|sourceTransforms
control|)
block|{
name|transform
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|meta
operator|!=
literal|null
operator|&&
operator|!
name|meta
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"_meta"
argument_list|,
name|meta
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
return|;
block|}
comment|// no need to pass here id and boost, since they are added to the root object mapper
comment|// in the constructor
block|}
argument_list|,
name|rootMappersNotIncludedInObject
argument_list|)
expr_stmt|;
return|return
name|builder
return|;
block|}
comment|/**      * Transformations to be applied to the source before indexing and/or after loading.      */
DECL|interface|SourceTransform
specifier|private
interface|interface
name|SourceTransform
extends|extends
name|ToXContent
block|{
comment|/**          * Transform the source when it is expressed as a map.  This is public so it can be transformed the source is loaded.          * @param sourceAsMap source to transform.  This may be mutated by the script.          * @return transformed version of transformMe.  This may actually be the same object as sourceAsMap          */
DECL|method|transformSourceAsMap
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|transformSourceAsMap
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|sourceAsMap
parameter_list|)
function_decl|;
block|}
comment|/**      * Script based source transformation.      */
DECL|class|ScriptTransform
specifier|private
specifier|static
class|class
name|ScriptTransform
implements|implements
name|SourceTransform
block|{
DECL|field|scriptService
specifier|private
specifier|final
name|ScriptService
name|scriptService
decl_stmt|;
comment|/**          * Contents of the script to transform the source document before indexing.          */
DECL|field|script
specifier|private
specifier|final
name|String
name|script
decl_stmt|;
comment|/**          * The type of the script to run.          */
DECL|field|scriptType
specifier|private
specifier|final
name|ScriptType
name|scriptType
decl_stmt|;
comment|/**          * Language of the script to transform the source document before indexing.          */
DECL|field|language
specifier|private
specifier|final
name|String
name|language
decl_stmt|;
comment|/**          * Parameters passed to the transform script.          */
DECL|field|parameters
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
decl_stmt|;
DECL|method|ScriptTransform
specifier|public
name|ScriptTransform
parameter_list|(
name|ScriptService
name|scriptService
parameter_list|,
name|String
name|script
parameter_list|,
name|ScriptType
name|scriptType
parameter_list|,
name|String
name|language
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
block|{
name|this
operator|.
name|scriptService
operator|=
name|scriptService
expr_stmt|;
name|this
operator|.
name|script
operator|=
name|script
expr_stmt|;
name|this
operator|.
name|scriptType
operator|=
name|scriptType
expr_stmt|;
name|this
operator|.
name|language
operator|=
name|language
expr_stmt|;
name|this
operator|.
name|parameters
operator|=
name|parameters
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|transformSourceAsMap
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|transformSourceAsMap
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|sourceAsMap
parameter_list|)
block|{
try|try
block|{
comment|// We use the ctx variable and the _source name to be consistent with the update api.
name|ExecutableScript
name|executable
init|=
name|scriptService
operator|.
name|executable
argument_list|(
name|language
argument_list|,
name|script
argument_list|,
name|scriptType
argument_list|,
name|parameters
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|ctx
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|ctx
operator|.
name|put
argument_list|(
literal|"_source"
argument_list|,
name|sourceAsMap
argument_list|)
expr_stmt|;
name|executable
operator|.
name|setNextVar
argument_list|(
literal|"ctx"
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
name|executable
operator|.
name|run
argument_list|()
expr_stmt|;
name|ctx
operator|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|executable
operator|.
name|unwrap
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
return|return
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|ctx
operator|.
name|get
argument_list|(
literal|"_source"
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ElasticsearchIllegalArgumentException
argument_list|(
literal|"failed to execute script"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"script"
argument_list|,
name|script
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"lang"
argument_list|,
name|language
argument_list|)
expr_stmt|;
if|if
condition|(
name|parameters
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"params"
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
block|}
block|}
end_class

end_unit

