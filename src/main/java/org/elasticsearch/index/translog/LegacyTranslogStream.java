begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.translog
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|translog
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|BytesStreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|InputStreamStreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|FileChannel
import|;
end_import

begin_comment
comment|/**  * Version 0 of the translog format, there is no header in this file  */
end_comment

begin_class
DECL|class|LegacyTranslogStream
specifier|public
class|class
name|LegacyTranslogStream
implements|implements
name|TranslogStream
block|{
DECL|field|in
specifier|private
specifier|final
name|InputStreamStreamInput
name|in
decl_stmt|;
DECL|field|fileExists
specifier|private
specifier|final
name|boolean
name|fileExists
decl_stmt|;
DECL|method|LegacyTranslogStream
name|LegacyTranslogStream
parameter_list|(
name|InputStreamStreamInput
name|in
parameter_list|,
name|boolean
name|fileExists
parameter_list|)
block|{
name|this
operator|.
name|in
operator|=
name|in
expr_stmt|;
name|this
operator|.
name|fileExists
operator|=
name|fileExists
expr_stmt|;
block|}
DECL|method|read
specifier|public
name|Translog
operator|.
name|Operation
name|read
parameter_list|()
throws|throws
name|IOException
block|{
assert|assert
name|this
operator|.
name|fileExists
operator|:
literal|"cannot read from a stream for a file that does not exist"
assert|;
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
comment|// ignored operation size
return|return
name|this
operator|.
name|read
argument_list|(
name|in
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|read
specifier|public
name|Translog
operator|.
name|Operation
name|read
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|Translog
operator|.
name|Operation
operator|.
name|Type
name|type
init|=
name|Translog
operator|.
name|Operation
operator|.
name|Type
operator|.
name|fromId
argument_list|(
name|in
operator|.
name|readByte
argument_list|()
argument_list|)
decl_stmt|;
name|Translog
operator|.
name|Operation
name|operation
init|=
name|TranslogStreams
operator|.
name|newOperationFromType
argument_list|(
name|type
argument_list|)
decl_stmt|;
name|operation
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
return|return
name|operation
return|;
block|}
annotation|@
name|Override
DECL|method|readSource
specifier|public
name|Translog
operator|.
name|Source
name|readSource
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
throws|throws
name|IOException
block|{
name|BytesStreamInput
name|in
init|=
operator|new
name|BytesStreamInput
argument_list|(
name|data
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
comment|// the size header
name|Translog
operator|.
name|Operation
operator|.
name|Type
name|type
init|=
name|Translog
operator|.
name|Operation
operator|.
name|Type
operator|.
name|fromId
argument_list|(
name|in
operator|.
name|readByte
argument_list|()
argument_list|)
decl_stmt|;
name|Translog
operator|.
name|Operation
name|operation
init|=
name|TranslogStreams
operator|.
name|newOperationFromType
argument_list|(
name|type
argument_list|)
decl_stmt|;
return|return
name|operation
operator|.
name|readSource
argument_list|(
name|in
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|write
specifier|public
name|void
name|write
parameter_list|(
name|StreamOutput
name|out
parameter_list|,
name|Translog
operator|.
name|Operation
name|op
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeByte
argument_list|(
name|op
operator|.
name|opType
argument_list|()
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|op
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeHeader
specifier|public
name|int
name|writeHeader
parameter_list|(
name|FileChannel
name|channel
parameter_list|)
block|{
comment|// nothing, there is no header for version 0 translog files
return|return
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|this
operator|.
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

