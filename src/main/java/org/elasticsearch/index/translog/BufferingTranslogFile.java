begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.translog
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|translog
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|Channels
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ReleasableLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
DECL|class|BufferingTranslogFile
specifier|public
specifier|final
class|class
name|BufferingTranslogFile
extends|extends
name|TranslogFile
block|{
DECL|field|operationCounter
specifier|private
specifier|volatile
name|int
name|operationCounter
decl_stmt|;
DECL|field|lastPosition
specifier|private
specifier|volatile
name|long
name|lastPosition
decl_stmt|;
DECL|field|lastWrittenPosition
specifier|private
specifier|volatile
name|long
name|lastWrittenPosition
decl_stmt|;
DECL|field|lastSyncPosition
specifier|private
specifier|volatile
name|long
name|lastSyncPosition
init|=
literal|0
decl_stmt|;
DECL|field|buffer
specifier|private
name|byte
index|[]
name|buffer
decl_stmt|;
DECL|field|bufferCount
specifier|private
name|int
name|bufferCount
decl_stmt|;
DECL|field|bufferOs
specifier|private
name|WrapperOutputStream
name|bufferOs
init|=
operator|new
name|WrapperOutputStream
argument_list|()
decl_stmt|;
DECL|method|BufferingTranslogFile
specifier|public
name|BufferingTranslogFile
parameter_list|(
name|ShardId
name|shardId
parameter_list|,
name|long
name|id
parameter_list|,
name|ChannelReference
name|channelReference
parameter_list|,
name|int
name|bufferSize
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|shardId
argument_list|,
name|id
argument_list|,
name|channelReference
argument_list|)
expr_stmt|;
name|this
operator|.
name|buffer
operator|=
operator|new
name|byte
index|[
name|bufferSize
index|]
expr_stmt|;
specifier|final
name|TranslogStream
name|stream
init|=
name|this
operator|.
name|channelReference
operator|.
name|stream
argument_list|()
decl_stmt|;
name|int
name|headerSize
init|=
name|stream
operator|.
name|writeHeader
argument_list|(
name|channelReference
operator|.
name|channel
argument_list|()
argument_list|)
decl_stmt|;
name|this
operator|.
name|lastPosition
operator|+=
name|headerSize
expr_stmt|;
name|this
operator|.
name|lastWrittenPosition
operator|+=
name|headerSize
expr_stmt|;
name|this
operator|.
name|lastSyncPosition
operator|+=
name|headerSize
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|totalOperations
specifier|public
name|int
name|totalOperations
parameter_list|()
block|{
return|return
name|operationCounter
return|;
block|}
annotation|@
name|Override
DECL|method|sizeInBytes
specifier|public
name|long
name|sizeInBytes
parameter_list|()
block|{
return|return
name|lastWrittenPosition
return|;
block|}
annotation|@
name|Override
DECL|method|add
specifier|public
name|Translog
operator|.
name|Location
name|add
parameter_list|(
name|BytesReference
name|data
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|ReleasableLock
name|lock
init|=
name|writeLock
operator|.
name|acquire
argument_list|()
init|)
block|{
name|operationCounter
operator|++
expr_stmt|;
name|long
name|position
init|=
name|lastPosition
decl_stmt|;
if|if
condition|(
name|data
operator|.
name|length
argument_list|()
operator|>=
name|buffer
operator|.
name|length
condition|)
block|{
name|flushBuffer
argument_list|()
expr_stmt|;
comment|// we use the channel to write, since on windows, writing to the RAF might not be reflected
comment|// when reading through the channel
name|data
operator|.
name|writeTo
argument_list|(
name|channelReference
operator|.
name|channel
argument_list|()
argument_list|)
expr_stmt|;
name|lastWrittenPosition
operator|+=
name|data
operator|.
name|length
argument_list|()
expr_stmt|;
name|lastPosition
operator|+=
name|data
operator|.
name|length
argument_list|()
expr_stmt|;
return|return
operator|new
name|Translog
operator|.
name|Location
argument_list|(
name|id
argument_list|,
name|position
argument_list|,
name|data
operator|.
name|length
argument_list|()
argument_list|)
return|;
block|}
if|if
condition|(
name|data
operator|.
name|length
argument_list|()
operator|>
name|buffer
operator|.
name|length
operator|-
name|bufferCount
condition|)
block|{
name|flushBuffer
argument_list|()
expr_stmt|;
block|}
name|data
operator|.
name|writeTo
argument_list|(
name|bufferOs
argument_list|)
expr_stmt|;
name|lastPosition
operator|+=
name|data
operator|.
name|length
argument_list|()
expr_stmt|;
return|return
operator|new
name|Translog
operator|.
name|Location
argument_list|(
name|id
argument_list|,
name|position
argument_list|,
name|data
operator|.
name|length
argument_list|()
argument_list|)
return|;
block|}
block|}
DECL|method|flushBuffer
specifier|private
name|void
name|flushBuffer
parameter_list|()
throws|throws
name|IOException
block|{
assert|assert
name|writeLock
operator|.
name|isHeldByCurrentThread
argument_list|()
assert|;
if|if
condition|(
name|bufferCount
operator|>
literal|0
condition|)
block|{
comment|// we use the channel to write, since on windows, writing to the RAF might not be reflected
comment|// when reading through the channel
name|Channels
operator|.
name|writeToChannel
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|bufferCount
argument_list|,
name|channelReference
operator|.
name|channel
argument_list|()
argument_list|)
expr_stmt|;
name|lastWrittenPosition
operator|+=
name|bufferCount
expr_stmt|;
name|bufferCount
operator|=
literal|0
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|readBytes
specifier|protected
name|void
name|readBytes
parameter_list|(
name|ByteBuffer
name|targetBuffer
parameter_list|,
name|long
name|position
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|ReleasableLock
name|lock
init|=
name|readLock
operator|.
name|acquire
argument_list|()
init|)
block|{
if|if
condition|(
name|position
operator|>=
name|lastWrittenPosition
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|buffer
argument_list|,
call|(
name|int
call|)
argument_list|(
name|position
operator|-
name|lastWrittenPosition
argument_list|)
argument_list|,
name|targetBuffer
operator|.
name|array
argument_list|()
argument_list|,
name|targetBuffer
operator|.
name|position
argument_list|()
argument_list|,
name|targetBuffer
operator|.
name|limit
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
comment|// we don't have to have a read lock here because we only write ahead to the file, so all writes has been complete
comment|// for the requested location.
name|Channels
operator|.
name|readFromFileChannelWithEofException
argument_list|(
name|channelReference
operator|.
name|channel
argument_list|()
argument_list|,
name|position
argument_list|,
name|targetBuffer
argument_list|)
expr_stmt|;
block|}
DECL|method|immutableReader
specifier|public
name|ChannelImmutableReader
name|immutableReader
parameter_list|()
throws|throws
name|TranslogException
block|{
if|if
condition|(
name|channelReference
operator|.
name|tryIncRef
argument_list|()
condition|)
block|{
try|try
init|(
name|ReleasableLock
name|lock
init|=
name|writeLock
operator|.
name|acquire
argument_list|()
init|)
block|{
name|flushBuffer
argument_list|()
expr_stmt|;
name|ChannelImmutableReader
name|reader
init|=
operator|new
name|ChannelImmutableReader
argument_list|(
name|this
operator|.
name|id
argument_list|,
name|channelReference
argument_list|,
name|lastWrittenPosition
argument_list|,
name|operationCounter
argument_list|)
decl_stmt|;
name|channelReference
operator|.
name|incRef
argument_list|()
expr_stmt|;
comment|// for new reader
return|return
name|reader
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TranslogException
argument_list|(
name|shardId
argument_list|,
literal|"exception while creating an immutable reader"
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|channelReference
operator|.
name|decRef
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|TranslogException
argument_list|(
name|shardId
argument_list|,
literal|"can't increment channel ["
operator|+
name|channelReference
operator|+
literal|"] ref count"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|syncNeeded
specifier|public
name|boolean
name|syncNeeded
parameter_list|()
block|{
return|return
name|lastPosition
operator|!=
name|lastSyncPosition
return|;
block|}
annotation|@
name|Override
DECL|method|sync
specifier|public
name|void
name|sync
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|syncNeeded
argument_list|()
condition|)
block|{
return|return;
block|}
try|try
init|(
name|ReleasableLock
name|lock
init|=
name|writeLock
operator|.
name|acquire
argument_list|()
init|)
block|{
name|flushBuffer
argument_list|()
expr_stmt|;
name|lastSyncPosition
operator|=
name|lastPosition
expr_stmt|;
block|}
name|channelReference
operator|.
name|channel
argument_list|()
operator|.
name|force
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doClose
specifier|protected
name|void
name|doClose
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|sync
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|super
operator|.
name|doClose
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|reuse
specifier|public
name|void
name|reuse
parameter_list|(
name|TranslogFile
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|other
operator|instanceof
name|BufferingTranslogFile
operator|)
condition|)
block|{
return|return;
block|}
try|try
init|(
name|ReleasableLock
name|lock
init|=
name|writeLock
operator|.
name|acquire
argument_list|()
init|)
block|{
try|try
block|{
name|flushBuffer
argument_list|()
expr_stmt|;
name|this
operator|.
name|buffer
operator|=
operator|(
operator|(
name|BufferingTranslogFile
operator|)
name|other
operator|)
operator|.
name|buffer
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TranslogException
argument_list|(
name|shardId
argument_list|,
literal|"failed to flush"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|updateBufferSize
specifier|public
name|void
name|updateBufferSize
parameter_list|(
name|int
name|bufferSize
parameter_list|)
block|{
try|try
init|(
name|ReleasableLock
name|lock
init|=
name|writeLock
operator|.
name|acquire
argument_list|()
init|)
block|{
if|if
condition|(
name|this
operator|.
name|buffer
operator|.
name|length
operator|==
name|bufferSize
condition|)
block|{
return|return;
block|}
name|flushBuffer
argument_list|()
expr_stmt|;
name|this
operator|.
name|buffer
operator|=
operator|new
name|byte
index|[
name|bufferSize
index|]
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TranslogException
argument_list|(
name|shardId
argument_list|,
literal|"failed to flush"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|class|WrapperOutputStream
class|class
name|WrapperOutputStream
extends|extends
name|OutputStream
block|{
annotation|@
name|Override
DECL|method|write
specifier|public
name|void
name|write
parameter_list|(
name|int
name|b
parameter_list|)
throws|throws
name|IOException
block|{
name|buffer
index|[
name|bufferCount
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
name|b
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|write
specifier|public
name|void
name|write
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
comment|// we do safety checked when we decide to use this stream...
name|System
operator|.
name|arraycopy
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|buffer
argument_list|,
name|bufferCount
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|bufferCount
operator|+=
name|len
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

