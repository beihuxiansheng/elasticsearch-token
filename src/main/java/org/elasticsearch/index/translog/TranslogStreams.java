begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.translog
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|translog
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|CodecUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|CorruptIndexException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexFormatTooNewException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexFormatTooOldException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|InputStreamDataInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|InputStreamStreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_comment
comment|/**  * Encapsulating class used for operating on translog streams. Static methods  * on this class use the latest version of the stream.  */
end_comment

begin_class
DECL|class|TranslogStreams
specifier|public
class|class
name|TranslogStreams
block|{
comment|/** V0, no header, no checksums */
DECL|field|LEGACY_TRANSLOG_STREAM
specifier|public
specifier|static
name|TranslogStream
name|LEGACY_TRANSLOG_STREAM
init|=
operator|new
name|LegacyTranslogStream
argument_list|()
decl_stmt|;
comment|/** V1, header, with per-op checksums */
DECL|field|CHECKSUMMED_TRANSLOG_STREAM
specifier|public
specifier|static
name|TranslogStream
name|CHECKSUMMED_TRANSLOG_STREAM
init|=
operator|new
name|ChecksummedTranslogStream
argument_list|()
decl_stmt|;
DECL|field|LATEST
specifier|public
specifier|static
name|TranslogStream
name|LATEST
init|=
name|CHECKSUMMED_TRANSLOG_STREAM
decl_stmt|;
DECL|field|TRANSLOG_CODEC
specifier|public
specifier|static
specifier|final
name|String
name|TRANSLOG_CODEC
init|=
literal|"translog"
decl_stmt|;
DECL|field|LUCENE_CODEC_HEADER_BYTE
specifier|private
specifier|static
specifier|final
name|byte
name|LUCENE_CODEC_HEADER_BYTE
init|=
literal|0x3f
decl_stmt|;
DECL|field|UNVERSIONED_TRANSLOG_HEADER_BYTE
specifier|private
specifier|static
specifier|final
name|byte
name|UNVERSIONED_TRANSLOG_HEADER_BYTE
init|=
literal|0x00
decl_stmt|;
comment|/**      * Returns a new empty translog operation for the given {@link Translog.Operation.Type}      */
DECL|method|newOperationFromType
specifier|static
name|Translog
operator|.
name|Operation
name|newOperationFromType
parameter_list|(
name|Translog
operator|.
name|Operation
operator|.
name|Type
name|type
parameter_list|)
throws|throws
name|IOException
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|CREATE
case|:
return|return
operator|new
name|Translog
operator|.
name|Create
argument_list|()
return|;
case|case
name|DELETE
case|:
return|return
operator|new
name|Translog
operator|.
name|Delete
argument_list|()
return|;
case|case
name|DELETE_BY_QUERY
case|:
return|return
operator|new
name|Translog
operator|.
name|DeleteByQuery
argument_list|()
return|;
case|case
name|SAVE
case|:
return|return
operator|new
name|Translog
operator|.
name|Index
argument_list|()
return|;
default|default:
throw|throw
operator|new
name|IOException
argument_list|(
literal|"No type for ["
operator|+
name|type
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
comment|/**      * Read the next {@link Translog.Operation} from the stream using the      * latest translog version      */
DECL|method|readTranslogOperation
specifier|public
specifier|static
name|Translog
operator|.
name|Operation
name|readTranslogOperation
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|LATEST
operator|.
name|read
argument_list|(
name|in
argument_list|)
return|;
block|}
comment|/**      * Write the {@link Translog.Operation} to the output stream using the      * latest translog version      */
DECL|method|writeTranslogOperation
specifier|public
specifier|static
name|void
name|writeTranslogOperation
parameter_list|(
name|StreamOutput
name|out
parameter_list|,
name|Translog
operator|.
name|Operation
name|op
parameter_list|)
throws|throws
name|IOException
block|{
name|LATEST
operator|.
name|write
argument_list|(
name|out
argument_list|,
name|op
argument_list|)
expr_stmt|;
block|}
comment|/**      * Given a file, return a VersionedTranslogStream based on an      * optionally-existing header in the file. If the file does not exist, or      * has zero length, returns the latest version. If the header does not      * exist, assumes Version 0 of the translog file format.      *<p/>      *      * @throws IOException      */
DECL|method|translogStreamFor
specifier|public
specifier|static
name|TranslogStream
name|translogStreamFor
parameter_list|(
name|Path
name|translogFile
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|InputStreamStreamInput
name|headerStream
init|=
operator|new
name|InputStreamStreamInput
argument_list|(
name|Files
operator|.
name|newInputStream
argument_list|(
name|translogFile
argument_list|)
argument_list|)
init|)
block|{
if|if
condition|(
name|Files
operator|.
name|exists
argument_list|(
name|translogFile
argument_list|)
operator|==
literal|false
operator|||
name|Files
operator|.
name|size
argument_list|(
name|translogFile
argument_list|)
operator|==
literal|0
condition|)
block|{
comment|// if it doesn't exist or has no data, use the latest version,
comment|// there aren't any backwards compatibility issues
return|return
name|CHECKSUMMED_TRANSLOG_STREAM
return|;
block|}
comment|// Lucene's CodecUtil writes a magic number of 0x3FD76C17 with the
comment|// header, in binary this looks like:
comment|//
comment|// binary: 0011 1111 1101 0111 0110 1100 0001 0111
comment|// hex   :    3    f    d    7    6    c    1    7
comment|//
comment|// With version 0 of the translog, the first byte is the
comment|// Operation.Type, which will always be between 0-4, so we know if
comment|// we grab the first byte, it can be:
comment|// 0x3f => Lucene's magic number, so we can assume it's version 1 or later
comment|// 0x00 => version 0 of the translog
comment|//
comment|// otherwise the first byte of the translog is corrupted and we
comment|// should bail
name|byte
name|b1
init|=
name|headerStream
operator|.
name|readByte
argument_list|()
decl_stmt|;
if|if
condition|(
name|b1
operator|==
name|LUCENE_CODEC_HEADER_BYTE
condition|)
block|{
comment|// Read 3 more bytes, meaning a whole integer has been read
name|byte
name|b2
init|=
name|headerStream
operator|.
name|readByte
argument_list|()
decl_stmt|;
name|byte
name|b3
init|=
name|headerStream
operator|.
name|readByte
argument_list|()
decl_stmt|;
name|byte
name|b4
init|=
name|headerStream
operator|.
name|readByte
argument_list|()
decl_stmt|;
comment|// Convert the 4 bytes that were read into an integer
name|int
name|header
init|=
operator|(
operator|(
name|b1
operator|&
literal|0xFF
operator|)
operator|<<
literal|24
operator|)
operator|+
operator|(
operator|(
name|b2
operator|&
literal|0xFF
operator|)
operator|<<
literal|16
operator|)
operator|+
operator|(
operator|(
name|b3
operator|&
literal|0xFF
operator|)
operator|<<
literal|8
operator|)
operator|+
operator|(
operator|(
name|b4
operator|&
literal|0xFF
operator|)
operator|<<
literal|0
operator|)
decl_stmt|;
comment|// We confirm CodecUtil's CODEC_MAGIC number (0x3FD76C17)
comment|// ourselves here, because it allows us to read the first
comment|// byte separately
if|if
condition|(
name|header
operator|!=
name|CodecUtil
operator|.
name|CODEC_MAGIC
condition|)
block|{
throw|throw
operator|new
name|TranslogCorruptedException
argument_list|(
literal|"translog looks like version 1 or later, but has corrupted header"
argument_list|)
throw|;
block|}
comment|// Confirm the rest of the header using CodecUtil, extracting
comment|// the translog version
name|int
name|version
init|=
name|CodecUtil
operator|.
name|checkHeaderNoMagic
argument_list|(
operator|new
name|InputStreamDataInput
argument_list|(
name|headerStream
argument_list|)
argument_list|,
name|TRANSLOG_CODEC
argument_list|,
literal|1
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|version
condition|)
block|{
case|case
name|ChecksummedTranslogStream
operator|.
name|VERSION
case|:
return|return
name|CHECKSUMMED_TRANSLOG_STREAM
return|;
default|default:
throw|throw
operator|new
name|TranslogCorruptedException
argument_list|(
literal|"No known translog stream version: "
operator|+
name|version
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|b1
operator|==
name|UNVERSIONED_TRANSLOG_HEADER_BYTE
condition|)
block|{
return|return
name|LEGACY_TRANSLOG_STREAM
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|TranslogCorruptedException
argument_list|(
literal|"Invalid first byte in translog file, got: "
operator|+
name|Long
operator|.
name|toHexString
argument_list|(
name|b1
argument_list|)
operator|+
literal|", expected 0x00 or 0x3f"
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|CorruptIndexException
decl||
name|IndexFormatTooOldException
decl||
name|IndexFormatTooNewException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TranslogCorruptedException
argument_list|(
literal|"Translog header corrupted"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

