begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.translog
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|translog
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|AlreadyClosedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lease
operator|.
name|Releasable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lease
operator|.
name|Releasables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|ESLogger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_class
DECL|class|TranslogSnapshot
specifier|public
class|class
name|TranslogSnapshot
implements|implements
name|Translog
operator|.
name|Snapshot
block|{
DECL|field|orderedTranslogs
specifier|private
specifier|final
name|List
argument_list|<
name|Translog
operator|.
name|Snapshot
argument_list|>
name|orderedTranslogs
decl_stmt|;
DECL|field|closed
specifier|private
name|AtomicBoolean
name|closed
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
DECL|field|estimatedTotalOperations
specifier|private
specifier|final
name|int
name|estimatedTotalOperations
decl_stmt|;
DECL|field|currentTranslog
specifier|private
name|int
name|currentTranslog
decl_stmt|;
comment|/**      * Create a snapshot of translog file channel. The length parameter should be consistent with totalOperations and point      * at the end of the last operation in this snapshot.      */
DECL|method|TranslogSnapshot
specifier|public
name|TranslogSnapshot
parameter_list|(
name|List
argument_list|<
name|Translog
operator|.
name|Snapshot
argument_list|>
name|orderedTranslogs
parameter_list|)
block|{
name|this
operator|.
name|orderedTranslogs
operator|=
name|orderedTranslogs
expr_stmt|;
name|int
name|ops
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Translog
operator|.
name|Snapshot
name|translog
range|:
name|orderedTranslogs
control|)
block|{
specifier|final
name|int
name|tops
init|=
name|translog
operator|.
name|estimatedTotalOperations
argument_list|()
decl_stmt|;
if|if
condition|(
name|tops
operator|<
literal|0
condition|)
block|{
name|ops
operator|=
name|TranslogReader
operator|.
name|UNKNOWN_OP_COUNT
expr_stmt|;
break|break;
block|}
name|ops
operator|+=
name|tops
expr_stmt|;
block|}
name|estimatedTotalOperations
operator|=
name|ops
expr_stmt|;
name|currentTranslog
operator|=
literal|0
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|estimatedTotalOperations
specifier|public
name|int
name|estimatedTotalOperations
parameter_list|()
block|{
return|return
name|estimatedTotalOperations
return|;
block|}
annotation|@
name|Override
DECL|method|next
specifier|public
name|Translog
operator|.
name|Operation
name|next
parameter_list|()
throws|throws
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
for|for
control|(
init|;
name|currentTranslog
operator|<
name|orderedTranslogs
operator|.
name|size
argument_list|()
condition|;
name|currentTranslog
operator|++
control|)
block|{
specifier|final
name|Translog
operator|.
name|Snapshot
name|current
init|=
name|orderedTranslogs
operator|.
name|get
argument_list|(
name|currentTranslog
argument_list|)
decl_stmt|;
name|Translog
operator|.
name|Operation
name|op
init|=
literal|null
decl_stmt|;
try|try
block|{
name|op
operator|=
name|current
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TruncatedTranslogException
name|e
parameter_list|)
block|{
if|if
condition|(
name|estimatedTotalOperations
operator|==
name|TranslogReader
operator|.
name|UNKNOWN_OP_COUNT
condition|)
block|{
comment|// legacy translog file - can have UNKNOWN_OP_COUNT
comment|// file is empty or header has been half-written and should be ignored
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
block|}
if|if
condition|(
name|op
operator|!=
literal|null
condition|)
block|{
return|return
name|op
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|ensureOpen
specifier|protected
name|void
name|ensureOpen
parameter_list|()
block|{
if|if
condition|(
name|closed
operator|.
name|get
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|AlreadyClosedException
argument_list|(
literal|"snapshot already closed"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|ElasticsearchException
block|{
if|if
condition|(
name|closed
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|Releasables
operator|.
name|close
argument_list|(
name|orderedTranslogs
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

