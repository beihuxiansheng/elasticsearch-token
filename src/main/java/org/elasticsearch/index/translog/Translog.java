begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.translog
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|translog
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Accountable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|RamUsageEstimator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchIllegalStateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Streamable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lease
operator|.
name|Releasable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|uid
operator|.
name|Versions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|ByteSizeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|VersionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|Engine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|IndexShardComponent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_interface
DECL|interface|Translog
specifier|public
interface|interface
name|Translog
extends|extends
name|IndexShardComponent
extends|,
name|Closeable
extends|,
name|Accountable
block|{
DECL|field|INACTIVE_SHARD_TRANSLOG_BUFFER
specifier|static
name|ByteSizeValue
name|INACTIVE_SHARD_TRANSLOG_BUFFER
init|=
name|ByteSizeValue
operator|.
name|parseBytesSizeValue
argument_list|(
literal|"1kb"
argument_list|)
decl_stmt|;
DECL|field|TRANSLOG_ID_KEY
specifier|public
specifier|static
specifier|final
name|String
name|TRANSLOG_ID_KEY
init|=
literal|"translog_id"
decl_stmt|;
DECL|method|updateBuffer
name|void
name|updateBuffer
parameter_list|(
name|ByteSizeValue
name|bufferSize
parameter_list|)
function_decl|;
comment|/**      * Returns the id of the current transaction log.      */
DECL|method|currentId
name|long
name|currentId
parameter_list|()
function_decl|;
comment|/**      * Returns the number of operations in the transaction log.      */
DECL|method|estimatedNumberOfOperations
name|int
name|estimatedNumberOfOperations
parameter_list|()
function_decl|;
comment|/**      * Returns the size in bytes of the translog.      */
DECL|method|translogSizeInBytes
name|long
name|translogSizeInBytes
parameter_list|()
function_decl|;
comment|/**      * Creates a new transaction log internally.      *<p/>      *<p>Can only be called by one thread.      * @param id the translog id for the new translog      */
DECL|method|newTranslog
name|void
name|newTranslog
parameter_list|(
name|long
name|id
parameter_list|)
throws|throws
name|TranslogException
throws|,
name|IOException
function_decl|;
comment|/**      * Creates a new transient translog, where added ops will be added to the current one, and to      * it.      *<p/>      *<p>Can only be called by one thread.      */
DECL|method|newTransientTranslog
name|void
name|newTransientTranslog
parameter_list|(
name|long
name|id
parameter_list|)
throws|throws
name|TranslogException
function_decl|;
comment|/**      * Swaps the transient translog to be the current one.      *<p/>      *<p>Can only be called by one thread.      */
DECL|method|makeTransientCurrent
name|void
name|makeTransientCurrent
parameter_list|()
throws|throws
name|IOException
function_decl|;
comment|/**      * Reverts back to not have a transient translog.      */
DECL|method|revertTransient
name|void
name|revertTransient
parameter_list|()
throws|throws
name|IOException
function_decl|;
comment|/**      * Adds a create operation to the transaction log.      */
DECL|method|add
name|Location
name|add
parameter_list|(
name|Operation
name|operation
parameter_list|)
throws|throws
name|TranslogException
function_decl|;
DECL|method|read
name|Translog
operator|.
name|Operation
name|read
parameter_list|(
name|Location
name|location
parameter_list|)
function_decl|;
comment|/**      * Snapshots the current transaction log allowing to safely iterate over the snapshot.      */
DECL|method|snapshot
name|Snapshot
name|snapshot
parameter_list|()
throws|throws
name|TranslogException
function_decl|;
comment|/**      * Snapshots the delta between the current state of the translog, and the state defined      * by the provided snapshot. If a new translog has been created after the provided snapshot      * has been take, will return a snapshot on the current trasnlog.      */
DECL|method|snapshot
name|Snapshot
name|snapshot
parameter_list|(
name|Snapshot
name|snapshot
parameter_list|)
function_decl|;
comment|/**      * Clears unreferenced transaction logs.      */
DECL|method|clearUnreferenced
name|void
name|clearUnreferenced
parameter_list|()
function_decl|;
comment|/**      * Sync's the translog.      */
DECL|method|sync
name|void
name|sync
parameter_list|()
throws|throws
name|IOException
function_decl|;
DECL|method|syncNeeded
name|boolean
name|syncNeeded
parameter_list|()
function_decl|;
DECL|method|syncOnEachOperation
name|void
name|syncOnEachOperation
parameter_list|(
name|boolean
name|syncOnEachOperation
parameter_list|)
function_decl|;
comment|/**      * Returns all translog locations as absolute paths.      * These paths don't contain actual translog files they are      * directories holding the transaction logs.      */
DECL|method|locations
specifier|public
name|Path
index|[]
name|locations
parameter_list|()
function_decl|;
comment|/**      * Returns the translog file with the given id as a Path. This      * will return a relative path.      */
DECL|method|getPath
name|Path
name|getPath
parameter_list|(
name|long
name|translogId
parameter_list|)
function_decl|;
comment|/**      * return stats      */
DECL|method|stats
name|TranslogStats
name|stats
parameter_list|()
function_decl|;
comment|/**      * Returns the largest translog id present in all locations or<tt>-1</tt> if no translog is present.      */
DECL|method|findLargestPresentTranslogId
name|long
name|findLargestPresentTranslogId
parameter_list|()
throws|throws
name|IOException
function_decl|;
DECL|class|Location
specifier|static
class|class
name|Location
implements|implements
name|Accountable
block|{
DECL|field|translogId
specifier|public
specifier|final
name|long
name|translogId
decl_stmt|;
DECL|field|translogLocation
specifier|public
specifier|final
name|long
name|translogLocation
decl_stmt|;
DECL|field|size
specifier|public
specifier|final
name|int
name|size
decl_stmt|;
DECL|method|Location
specifier|public
name|Location
parameter_list|(
name|long
name|translogId
parameter_list|,
name|long
name|translogLocation
parameter_list|,
name|int
name|size
parameter_list|)
block|{
name|this
operator|.
name|translogId
operator|=
name|translogId
expr_stmt|;
name|this
operator|.
name|translogLocation
operator|=
name|translogLocation
expr_stmt|;
name|this
operator|.
name|size
operator|=
name|size
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|ramBytesUsed
specifier|public
name|long
name|ramBytesUsed
parameter_list|()
block|{
return|return
name|RamUsageEstimator
operator|.
name|NUM_BYTES_OBJECT_HEADER
operator|+
literal|2
operator|*
name|RamUsageEstimator
operator|.
name|NUM_BYTES_LONG
operator|+
name|RamUsageEstimator
operator|.
name|NUM_BYTES_INT
return|;
block|}
annotation|@
name|Override
DECL|method|getChildResources
specifier|public
name|Iterable
argument_list|<
name|?
extends|extends
name|Accountable
argument_list|>
name|getChildResources
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"[id: "
operator|+
name|translogId
operator|+
literal|", location: "
operator|+
name|translogLocation
operator|+
literal|", size: "
operator|+
name|size
operator|+
literal|"]"
return|;
block|}
block|}
comment|/**      * A snapshot of the transaction log, allows to iterate over all the transaction log operations.      */
DECL|interface|Snapshot
specifier|static
interface|interface
name|Snapshot
extends|extends
name|Releasable
block|{
comment|/**          * The id of the translog the snapshot was taken with.          */
DECL|method|translogId
name|long
name|translogId
parameter_list|()
function_decl|;
comment|/**          * Returns the current position in the translog stream          */
DECL|method|position
name|long
name|position
parameter_list|()
function_decl|;
comment|/**          * Returns the internal length (*not* number of operations) of this snapshot.          */
DECL|method|length
name|long
name|length
parameter_list|()
function_decl|;
comment|/**          * The total number of operations in the translog.          */
DECL|method|estimatedTotalOperations
name|int
name|estimatedTotalOperations
parameter_list|()
function_decl|;
comment|/**          * Returns the next operation, or null when no more operations are found          */
DECL|method|next
name|Operation
name|next
parameter_list|()
function_decl|;
comment|/**          * Seek to the specified position in the translog stream          */
DECL|method|seekTo
name|void
name|seekTo
parameter_list|(
name|long
name|position
parameter_list|)
function_decl|;
comment|/**          * The length in bytes of this stream.          */
DECL|method|lengthInBytes
name|long
name|lengthInBytes
parameter_list|()
function_decl|;
block|}
comment|/**      * A generic interface representing an operation performed on the transaction log.      * Each is associated with a type.      */
DECL|interface|Operation
specifier|static
interface|interface
name|Operation
extends|extends
name|Streamable
block|{
DECL|enum|Type
specifier|static
enum|enum
name|Type
block|{
DECL|enum constant|CREATE
name|CREATE
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|)
block|,
DECL|enum constant|SAVE
name|SAVE
argument_list|(
operator|(
name|byte
operator|)
literal|2
argument_list|)
block|,
DECL|enum constant|DELETE
name|DELETE
argument_list|(
operator|(
name|byte
operator|)
literal|3
argument_list|)
block|,
DECL|enum constant|DELETE_BY_QUERY
name|DELETE_BY_QUERY
argument_list|(
operator|(
name|byte
operator|)
literal|4
argument_list|)
block|;
DECL|field|id
specifier|private
specifier|final
name|byte
name|id
decl_stmt|;
DECL|method|Type
specifier|private
name|Type
parameter_list|(
name|byte
name|id
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
block|}
DECL|method|id
specifier|public
name|byte
name|id
parameter_list|()
block|{
return|return
name|this
operator|.
name|id
return|;
block|}
DECL|method|fromId
specifier|public
specifier|static
name|Type
name|fromId
parameter_list|(
name|byte
name|id
parameter_list|)
block|{
switch|switch
condition|(
name|id
condition|)
block|{
case|case
literal|1
case|:
return|return
name|CREATE
return|;
case|case
literal|2
case|:
return|return
name|SAVE
return|;
case|case
literal|3
case|:
return|return
name|DELETE
return|;
case|case
literal|4
case|:
return|return
name|DELETE_BY_QUERY
return|;
default|default:
throw|throw
operator|new
name|ElasticsearchIllegalArgumentException
argument_list|(
literal|"No type mapped for ["
operator|+
name|id
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|opType
name|Type
name|opType
parameter_list|()
function_decl|;
DECL|method|estimateSize
name|long
name|estimateSize
parameter_list|()
function_decl|;
DECL|method|getSource
name|Source
name|getSource
parameter_list|()
function_decl|;
block|}
DECL|class|Source
specifier|static
class|class
name|Source
block|{
DECL|field|source
specifier|public
specifier|final
name|BytesReference
name|source
decl_stmt|;
DECL|field|routing
specifier|public
specifier|final
name|String
name|routing
decl_stmt|;
DECL|field|parent
specifier|public
specifier|final
name|String
name|parent
decl_stmt|;
DECL|field|timestamp
specifier|public
specifier|final
name|long
name|timestamp
decl_stmt|;
DECL|field|ttl
specifier|public
specifier|final
name|long
name|ttl
decl_stmt|;
DECL|method|Source
specifier|public
name|Source
parameter_list|(
name|BytesReference
name|source
parameter_list|,
name|String
name|routing
parameter_list|,
name|String
name|parent
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|long
name|ttl
parameter_list|)
block|{
name|this
operator|.
name|source
operator|=
name|source
expr_stmt|;
name|this
operator|.
name|routing
operator|=
name|routing
expr_stmt|;
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
name|this
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
name|this
operator|.
name|ttl
operator|=
name|ttl
expr_stmt|;
block|}
block|}
DECL|class|Create
specifier|static
class|class
name|Create
implements|implements
name|Operation
block|{
DECL|field|SERIALIZATION_FORMAT
specifier|public
specifier|static
specifier|final
name|int
name|SERIALIZATION_FORMAT
init|=
literal|6
decl_stmt|;
DECL|field|id
specifier|private
name|String
name|id
decl_stmt|;
DECL|field|type
specifier|private
name|String
name|type
decl_stmt|;
DECL|field|source
specifier|private
name|BytesReference
name|source
decl_stmt|;
DECL|field|routing
specifier|private
name|String
name|routing
decl_stmt|;
DECL|field|parent
specifier|private
name|String
name|parent
decl_stmt|;
DECL|field|timestamp
specifier|private
name|long
name|timestamp
decl_stmt|;
DECL|field|ttl
specifier|private
name|long
name|ttl
decl_stmt|;
DECL|field|version
specifier|private
name|long
name|version
init|=
name|Versions
operator|.
name|MATCH_ANY
decl_stmt|;
DECL|field|versionType
specifier|private
name|VersionType
name|versionType
init|=
name|VersionType
operator|.
name|INTERNAL
decl_stmt|;
DECL|method|Create
specifier|public
name|Create
parameter_list|()
block|{         }
DECL|method|Create
specifier|public
name|Create
parameter_list|(
name|Engine
operator|.
name|Create
name|create
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|create
operator|.
name|id
argument_list|()
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|create
operator|.
name|type
argument_list|()
expr_stmt|;
name|this
operator|.
name|source
operator|=
name|create
operator|.
name|source
argument_list|()
expr_stmt|;
name|this
operator|.
name|routing
operator|=
name|create
operator|.
name|routing
argument_list|()
expr_stmt|;
name|this
operator|.
name|parent
operator|=
name|create
operator|.
name|parent
argument_list|()
expr_stmt|;
name|this
operator|.
name|timestamp
operator|=
name|create
operator|.
name|timestamp
argument_list|()
expr_stmt|;
name|this
operator|.
name|ttl
operator|=
name|create
operator|.
name|ttl
argument_list|()
expr_stmt|;
name|this
operator|.
name|version
operator|=
name|create
operator|.
name|version
argument_list|()
expr_stmt|;
name|this
operator|.
name|versionType
operator|=
name|create
operator|.
name|versionType
argument_list|()
expr_stmt|;
block|}
DECL|method|Create
specifier|public
name|Create
parameter_list|(
name|String
name|type
parameter_list|,
name|String
name|id
parameter_list|,
name|byte
index|[]
name|source
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|source
operator|=
operator|new
name|BytesArray
argument_list|(
name|source
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|opType
specifier|public
name|Type
name|opType
parameter_list|()
block|{
return|return
name|Type
operator|.
name|CREATE
return|;
block|}
annotation|@
name|Override
DECL|method|estimateSize
specifier|public
name|long
name|estimateSize
parameter_list|()
block|{
return|return
operator|(
operator|(
name|id
operator|.
name|length
argument_list|()
operator|+
name|type
operator|.
name|length
argument_list|()
operator|)
operator|*
literal|2
operator|)
operator|+
name|source
operator|.
name|length
argument_list|()
operator|+
literal|12
return|;
block|}
DECL|method|id
specifier|public
name|String
name|id
parameter_list|()
block|{
return|return
name|this
operator|.
name|id
return|;
block|}
DECL|method|source
specifier|public
name|BytesReference
name|source
parameter_list|()
block|{
return|return
name|this
operator|.
name|source
return|;
block|}
DECL|method|type
specifier|public
name|String
name|type
parameter_list|()
block|{
return|return
name|this
operator|.
name|type
return|;
block|}
DECL|method|routing
specifier|public
name|String
name|routing
parameter_list|()
block|{
return|return
name|this
operator|.
name|routing
return|;
block|}
DECL|method|parent
specifier|public
name|String
name|parent
parameter_list|()
block|{
return|return
name|this
operator|.
name|parent
return|;
block|}
DECL|method|timestamp
specifier|public
name|long
name|timestamp
parameter_list|()
block|{
return|return
name|this
operator|.
name|timestamp
return|;
block|}
DECL|method|ttl
specifier|public
name|long
name|ttl
parameter_list|()
block|{
return|return
name|this
operator|.
name|ttl
return|;
block|}
DECL|method|version
specifier|public
name|long
name|version
parameter_list|()
block|{
return|return
name|this
operator|.
name|version
return|;
block|}
DECL|method|versionType
specifier|public
name|VersionType
name|versionType
parameter_list|()
block|{
return|return
name|versionType
return|;
block|}
annotation|@
name|Override
DECL|method|getSource
specifier|public
name|Source
name|getSource
parameter_list|()
block|{
return|return
operator|new
name|Source
argument_list|(
name|source
argument_list|,
name|routing
argument_list|,
name|parent
argument_list|,
name|timestamp
argument_list|,
name|ttl
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|version
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
comment|// version
name|id
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
name|type
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
name|source
operator|=
name|in
operator|.
name|readBytesReference
argument_list|()
expr_stmt|;
if|if
condition|(
name|version
operator|>=
literal|1
condition|)
block|{
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|routing
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|version
operator|>=
literal|2
condition|)
block|{
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|parent
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|version
operator|>=
literal|3
condition|)
block|{
name|this
operator|.
name|version
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|version
operator|>=
literal|4
condition|)
block|{
name|this
operator|.
name|timestamp
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|version
operator|>=
literal|5
condition|)
block|{
name|this
operator|.
name|ttl
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|version
operator|>=
literal|6
condition|)
block|{
name|this
operator|.
name|versionType
operator|=
name|VersionType
operator|.
name|fromValue
argument_list|(
name|in
operator|.
name|readByte
argument_list|()
argument_list|)
expr_stmt|;
block|}
assert|assert
name|versionType
operator|.
name|validateVersionForWrites
argument_list|(
name|version
argument_list|)
assert|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeVInt
argument_list|(
name|SERIALIZATION_FORMAT
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeString
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeString
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBytesReference
argument_list|(
name|source
argument_list|)
expr_stmt|;
if|if
condition|(
name|routing
operator|==
literal|null
condition|)
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeString
argument_list|(
name|routing
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|parent
operator|==
literal|null
condition|)
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeString
argument_list|(
name|parent
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|writeLong
argument_list|(
name|version
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|ttl
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeByte
argument_list|(
name|versionType
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|Index
specifier|static
class|class
name|Index
implements|implements
name|Operation
block|{
DECL|field|SERIALIZATION_FORMAT
specifier|public
specifier|static
specifier|final
name|int
name|SERIALIZATION_FORMAT
init|=
literal|6
decl_stmt|;
DECL|field|id
specifier|private
name|String
name|id
decl_stmt|;
DECL|field|type
specifier|private
name|String
name|type
decl_stmt|;
DECL|field|version
specifier|private
name|long
name|version
init|=
name|Versions
operator|.
name|MATCH_ANY
decl_stmt|;
DECL|field|versionType
specifier|private
name|VersionType
name|versionType
init|=
name|VersionType
operator|.
name|INTERNAL
decl_stmt|;
DECL|field|source
specifier|private
name|BytesReference
name|source
decl_stmt|;
DECL|field|routing
specifier|private
name|String
name|routing
decl_stmt|;
DECL|field|parent
specifier|private
name|String
name|parent
decl_stmt|;
DECL|field|timestamp
specifier|private
name|long
name|timestamp
decl_stmt|;
DECL|field|ttl
specifier|private
name|long
name|ttl
decl_stmt|;
DECL|method|Index
specifier|public
name|Index
parameter_list|()
block|{         }
DECL|method|Index
specifier|public
name|Index
parameter_list|(
name|Engine
operator|.
name|Index
name|index
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|index
operator|.
name|id
argument_list|()
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|index
operator|.
name|type
argument_list|()
expr_stmt|;
name|this
operator|.
name|source
operator|=
name|index
operator|.
name|source
argument_list|()
expr_stmt|;
name|this
operator|.
name|routing
operator|=
name|index
operator|.
name|routing
argument_list|()
expr_stmt|;
name|this
operator|.
name|parent
operator|=
name|index
operator|.
name|parent
argument_list|()
expr_stmt|;
name|this
operator|.
name|version
operator|=
name|index
operator|.
name|version
argument_list|()
expr_stmt|;
name|this
operator|.
name|timestamp
operator|=
name|index
operator|.
name|timestamp
argument_list|()
expr_stmt|;
name|this
operator|.
name|ttl
operator|=
name|index
operator|.
name|ttl
argument_list|()
expr_stmt|;
name|this
operator|.
name|versionType
operator|=
name|index
operator|.
name|versionType
argument_list|()
expr_stmt|;
block|}
DECL|method|Index
specifier|public
name|Index
parameter_list|(
name|String
name|type
parameter_list|,
name|String
name|id
parameter_list|,
name|byte
index|[]
name|source
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|source
operator|=
operator|new
name|BytesArray
argument_list|(
name|source
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|opType
specifier|public
name|Type
name|opType
parameter_list|()
block|{
return|return
name|Type
operator|.
name|SAVE
return|;
block|}
annotation|@
name|Override
DECL|method|estimateSize
specifier|public
name|long
name|estimateSize
parameter_list|()
block|{
return|return
operator|(
operator|(
name|id
operator|.
name|length
argument_list|()
operator|+
name|type
operator|.
name|length
argument_list|()
operator|)
operator|*
literal|2
operator|)
operator|+
name|source
operator|.
name|length
argument_list|()
operator|+
literal|12
return|;
block|}
DECL|method|type
specifier|public
name|String
name|type
parameter_list|()
block|{
return|return
name|this
operator|.
name|type
return|;
block|}
DECL|method|id
specifier|public
name|String
name|id
parameter_list|()
block|{
return|return
name|this
operator|.
name|id
return|;
block|}
DECL|method|routing
specifier|public
name|String
name|routing
parameter_list|()
block|{
return|return
name|this
operator|.
name|routing
return|;
block|}
DECL|method|parent
specifier|public
name|String
name|parent
parameter_list|()
block|{
return|return
name|this
operator|.
name|parent
return|;
block|}
DECL|method|timestamp
specifier|public
name|long
name|timestamp
parameter_list|()
block|{
return|return
name|this
operator|.
name|timestamp
return|;
block|}
DECL|method|ttl
specifier|public
name|long
name|ttl
parameter_list|()
block|{
return|return
name|this
operator|.
name|ttl
return|;
block|}
DECL|method|source
specifier|public
name|BytesReference
name|source
parameter_list|()
block|{
return|return
name|this
operator|.
name|source
return|;
block|}
DECL|method|version
specifier|public
name|long
name|version
parameter_list|()
block|{
return|return
name|this
operator|.
name|version
return|;
block|}
DECL|method|versionType
specifier|public
name|VersionType
name|versionType
parameter_list|()
block|{
return|return
name|versionType
return|;
block|}
annotation|@
name|Override
DECL|method|getSource
specifier|public
name|Source
name|getSource
parameter_list|()
block|{
return|return
operator|new
name|Source
argument_list|(
name|source
argument_list|,
name|routing
argument_list|,
name|parent
argument_list|,
name|timestamp
argument_list|,
name|ttl
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|version
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
comment|// version
name|id
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
name|type
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
name|source
operator|=
name|in
operator|.
name|readBytesReference
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|version
operator|>=
literal|1
condition|)
block|{
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|routing
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|version
operator|>=
literal|2
condition|)
block|{
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|parent
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|version
operator|>=
literal|3
condition|)
block|{
name|this
operator|.
name|version
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|version
operator|>=
literal|4
condition|)
block|{
name|this
operator|.
name|timestamp
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|version
operator|>=
literal|5
condition|)
block|{
name|this
operator|.
name|ttl
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|version
operator|>=
literal|6
condition|)
block|{
name|this
operator|.
name|versionType
operator|=
name|VersionType
operator|.
name|fromValue
argument_list|(
name|in
operator|.
name|readByte
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ElasticsearchException
argument_list|(
literal|"failed to read ["
operator|+
name|type
operator|+
literal|"]["
operator|+
name|id
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
throw|;
block|}
assert|assert
name|versionType
operator|.
name|validateVersionForWrites
argument_list|(
name|version
argument_list|)
assert|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeVInt
argument_list|(
name|SERIALIZATION_FORMAT
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeString
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeString
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBytesReference
argument_list|(
name|source
argument_list|)
expr_stmt|;
if|if
condition|(
name|routing
operator|==
literal|null
condition|)
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeString
argument_list|(
name|routing
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|parent
operator|==
literal|null
condition|)
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeString
argument_list|(
name|parent
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|writeLong
argument_list|(
name|version
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|ttl
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeByte
argument_list|(
name|versionType
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|Delete
specifier|static
class|class
name|Delete
implements|implements
name|Operation
block|{
DECL|field|SERIALIZATION_FORMAT
specifier|public
specifier|static
specifier|final
name|int
name|SERIALIZATION_FORMAT
init|=
literal|2
decl_stmt|;
DECL|field|uid
specifier|private
name|Term
name|uid
decl_stmt|;
DECL|field|version
specifier|private
name|long
name|version
init|=
name|Versions
operator|.
name|MATCH_ANY
decl_stmt|;
DECL|field|versionType
specifier|private
name|VersionType
name|versionType
init|=
name|VersionType
operator|.
name|INTERNAL
decl_stmt|;
DECL|method|Delete
specifier|public
name|Delete
parameter_list|()
block|{         }
DECL|method|Delete
specifier|public
name|Delete
parameter_list|(
name|Engine
operator|.
name|Delete
name|delete
parameter_list|)
block|{
name|this
argument_list|(
name|delete
operator|.
name|uid
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|version
operator|=
name|delete
operator|.
name|version
argument_list|()
expr_stmt|;
name|this
operator|.
name|versionType
operator|=
name|delete
operator|.
name|versionType
argument_list|()
expr_stmt|;
block|}
DECL|method|Delete
specifier|public
name|Delete
parameter_list|(
name|Term
name|uid
parameter_list|)
block|{
name|this
operator|.
name|uid
operator|=
name|uid
expr_stmt|;
block|}
DECL|method|Delete
specifier|public
name|Delete
parameter_list|(
name|Term
name|uid
parameter_list|,
name|long
name|version
parameter_list|,
name|VersionType
name|versionType
parameter_list|)
block|{
name|this
operator|.
name|uid
operator|=
name|uid
expr_stmt|;
name|this
operator|.
name|version
operator|=
name|version
expr_stmt|;
name|this
operator|.
name|versionType
operator|=
name|versionType
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|opType
specifier|public
name|Type
name|opType
parameter_list|()
block|{
return|return
name|Type
operator|.
name|DELETE
return|;
block|}
annotation|@
name|Override
DECL|method|estimateSize
specifier|public
name|long
name|estimateSize
parameter_list|()
block|{
return|return
operator|(
operator|(
name|uid
operator|.
name|field
argument_list|()
operator|.
name|length
argument_list|()
operator|+
name|uid
operator|.
name|text
argument_list|()
operator|.
name|length
argument_list|()
operator|)
operator|*
literal|2
operator|)
operator|+
literal|20
return|;
block|}
DECL|method|uid
specifier|public
name|Term
name|uid
parameter_list|()
block|{
return|return
name|this
operator|.
name|uid
return|;
block|}
DECL|method|version
specifier|public
name|long
name|version
parameter_list|()
block|{
return|return
name|this
operator|.
name|version
return|;
block|}
DECL|method|versionType
specifier|public
name|VersionType
name|versionType
parameter_list|()
block|{
return|return
name|this
operator|.
name|versionType
return|;
block|}
annotation|@
name|Override
DECL|method|getSource
specifier|public
name|Source
name|getSource
parameter_list|()
block|{
throw|throw
operator|new
name|ElasticsearchIllegalStateException
argument_list|(
literal|"trying to read doc source from delete operation"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|version
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
comment|// version
name|uid
operator|=
operator|new
name|Term
argument_list|(
name|in
operator|.
name|readString
argument_list|()
argument_list|,
name|in
operator|.
name|readString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|version
operator|>=
literal|1
condition|)
block|{
name|this
operator|.
name|version
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|version
operator|>=
literal|2
condition|)
block|{
name|this
operator|.
name|versionType
operator|=
name|VersionType
operator|.
name|fromValue
argument_list|(
name|in
operator|.
name|readByte
argument_list|()
argument_list|)
expr_stmt|;
block|}
assert|assert
name|versionType
operator|.
name|validateVersionForWrites
argument_list|(
name|version
argument_list|)
assert|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeVInt
argument_list|(
name|SERIALIZATION_FORMAT
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeString
argument_list|(
name|uid
operator|.
name|field
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeString
argument_list|(
name|uid
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|version
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeByte
argument_list|(
name|versionType
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|DeleteByQuery
specifier|static
class|class
name|DeleteByQuery
implements|implements
name|Operation
block|{
DECL|field|SERIALIZATION_FORMAT
specifier|public
specifier|static
specifier|final
name|int
name|SERIALIZATION_FORMAT
init|=
literal|2
decl_stmt|;
DECL|field|source
specifier|private
name|BytesReference
name|source
decl_stmt|;
annotation|@
name|Nullable
DECL|field|filteringAliases
specifier|private
name|String
index|[]
name|filteringAliases
decl_stmt|;
DECL|field|types
specifier|private
name|String
index|[]
name|types
init|=
name|Strings
operator|.
name|EMPTY_ARRAY
decl_stmt|;
DECL|method|DeleteByQuery
specifier|public
name|DeleteByQuery
parameter_list|()
block|{         }
DECL|method|DeleteByQuery
specifier|public
name|DeleteByQuery
parameter_list|(
name|Engine
operator|.
name|DeleteByQuery
name|deleteByQuery
parameter_list|)
block|{
name|this
argument_list|(
name|deleteByQuery
operator|.
name|source
argument_list|()
argument_list|,
name|deleteByQuery
operator|.
name|filteringAliases
argument_list|()
argument_list|,
name|deleteByQuery
operator|.
name|types
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|DeleteByQuery
specifier|public
name|DeleteByQuery
parameter_list|(
name|BytesReference
name|source
parameter_list|,
name|String
index|[]
name|filteringAliases
parameter_list|,
name|String
modifier|...
name|types
parameter_list|)
block|{
name|this
operator|.
name|source
operator|=
name|source
expr_stmt|;
name|this
operator|.
name|types
operator|=
name|types
operator|==
literal|null
condition|?
name|Strings
operator|.
name|EMPTY_ARRAY
else|:
name|types
expr_stmt|;
name|this
operator|.
name|filteringAliases
operator|=
name|filteringAliases
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|opType
specifier|public
name|Type
name|opType
parameter_list|()
block|{
return|return
name|Type
operator|.
name|DELETE_BY_QUERY
return|;
block|}
annotation|@
name|Override
DECL|method|estimateSize
specifier|public
name|long
name|estimateSize
parameter_list|()
block|{
return|return
name|source
operator|.
name|length
argument_list|()
operator|+
literal|8
return|;
block|}
DECL|method|source
specifier|public
name|BytesReference
name|source
parameter_list|()
block|{
return|return
name|this
operator|.
name|source
return|;
block|}
DECL|method|filteringAliases
specifier|public
name|String
index|[]
name|filteringAliases
parameter_list|()
block|{
return|return
name|filteringAliases
return|;
block|}
DECL|method|types
specifier|public
name|String
index|[]
name|types
parameter_list|()
block|{
return|return
name|this
operator|.
name|types
return|;
block|}
annotation|@
name|Override
DECL|method|getSource
specifier|public
name|Source
name|getSource
parameter_list|()
block|{
throw|throw
operator|new
name|ElasticsearchIllegalStateException
argument_list|(
literal|"trying to read doc source from delete_by_query operation"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|version
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
comment|// version
name|source
operator|=
name|in
operator|.
name|readBytesReference
argument_list|()
expr_stmt|;
if|if
condition|(
name|version
operator|<
literal|2
condition|)
block|{
comment|// for query_parser_name, which was removed
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
block|}
name|int
name|typesSize
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|typesSize
operator|>
literal|0
condition|)
block|{
name|types
operator|=
operator|new
name|String
index|[
name|typesSize
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|typesSize
condition|;
name|i
operator|++
control|)
block|{
name|types
index|[
name|i
index|]
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|version
operator|>=
literal|1
condition|)
block|{
name|int
name|aliasesSize
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|aliasesSize
operator|>
literal|0
condition|)
block|{
name|filteringAliases
operator|=
operator|new
name|String
index|[
name|aliasesSize
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|aliasesSize
condition|;
name|i
operator|++
control|)
block|{
name|filteringAliases
index|[
name|i
index|]
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeVInt
argument_list|(
name|SERIALIZATION_FORMAT
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBytesReference
argument_list|(
name|source
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|types
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|type
range|:
name|types
control|)
block|{
name|out
operator|.
name|writeString
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|filteringAliases
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|writeVInt
argument_list|(
name|filteringAliases
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|alias
range|:
name|filteringAliases
control|)
block|{
name|out
operator|.
name|writeString
argument_list|(
name|alias
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|out
operator|.
name|writeVInt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_interface

end_unit

