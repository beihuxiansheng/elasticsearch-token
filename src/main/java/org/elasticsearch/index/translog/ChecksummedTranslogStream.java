begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.translog
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|translog
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|CodecUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|InputStreamDataInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|OutputStreamDataOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|InputStreamStreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|NoopStreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|Channels
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|FileChannel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_comment
comment|/**  * Version 1 of the translog file format. Writes a header to identify the  * format, also writes checksums for each operation  */
end_comment

begin_class
DECL|class|ChecksummedTranslogStream
specifier|public
class|class
name|ChecksummedTranslogStream
implements|implements
name|TranslogStream
block|{
DECL|field|VERSION
specifier|public
specifier|static
specifier|final
name|int
name|VERSION
init|=
literal|1
decl_stmt|;
DECL|method|ChecksummedTranslogStream
name|ChecksummedTranslogStream
parameter_list|()
block|{     }
DECL|method|verifyChecksum
specifier|private
name|void
name|verifyChecksum
parameter_list|(
name|BufferedChecksumStreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
comment|// This absolutely must come first, or else reading the checksum becomes part of the checksum
name|long
name|expectedChecksum
init|=
name|in
operator|.
name|getChecksum
argument_list|()
decl_stmt|;
name|long
name|readChecksum
init|=
name|in
operator|.
name|readInt
argument_list|()
operator|&
literal|0xFFFF_FFFFL
decl_stmt|;
if|if
condition|(
name|readChecksum
operator|!=
name|expectedChecksum
condition|)
block|{
throw|throw
operator|new
name|TranslogCorruptedException
argument_list|(
literal|"translog stream is corrupted, expected: 0x"
operator|+
name|Long
operator|.
name|toHexString
argument_list|(
name|expectedChecksum
argument_list|)
operator|+
literal|", got: 0x"
operator|+
name|Long
operator|.
name|toHexString
argument_list|(
name|readChecksum
argument_list|)
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|read
specifier|public
name|Translog
operator|.
name|Operation
name|read
parameter_list|(
name|StreamInput
name|inStream
parameter_list|)
throws|throws
name|IOException
block|{
comment|// TODO: validate size to prevent OOME
name|int
name|opSize
init|=
name|inStream
operator|.
name|readInt
argument_list|()
decl_stmt|;
comment|// This BufferedChecksumStreamInput remains unclosed on purpose,
comment|// because closing it closes the underlying stream, which we don't
comment|// want to do here.
name|BufferedChecksumStreamInput
name|in
init|=
operator|new
name|BufferedChecksumStreamInput
argument_list|(
name|inStream
argument_list|)
decl_stmt|;
name|Translog
operator|.
name|Operation
name|operation
decl_stmt|;
try|try
block|{
name|Translog
operator|.
name|Operation
operator|.
name|Type
name|type
init|=
name|Translog
operator|.
name|Operation
operator|.
name|Type
operator|.
name|fromId
argument_list|(
name|in
operator|.
name|readByte
argument_list|()
argument_list|)
decl_stmt|;
name|operation
operator|=
name|TranslogStreams
operator|.
name|newOperationFromType
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|operation
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|verifyChecksum
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EOFException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TruncatedTranslogException
argument_list|(
literal|"reached premature end of file, translog is truncated"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|AssertionError
decl||
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TranslogCorruptedException
argument_list|(
literal|"translog corruption while reading from stream"
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|operation
return|;
block|}
annotation|@
name|Override
DECL|method|write
specifier|public
name|void
name|write
parameter_list|(
name|StreamOutput
name|outStream
parameter_list|,
name|Translog
operator|.
name|Operation
name|op
parameter_list|)
throws|throws
name|IOException
block|{
comment|// We first write to a NoopStreamOutput to get the size of the
comment|// operation. We could write to a byte array and then send that as an
comment|// alternative, but here we choose to use CPU over allocating new
comment|// byte arrays.
name|NoopStreamOutput
name|noopOut
init|=
operator|new
name|NoopStreamOutput
argument_list|()
decl_stmt|;
name|noopOut
operator|.
name|writeByte
argument_list|(
name|op
operator|.
name|opType
argument_list|()
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|op
operator|.
name|writeTo
argument_list|(
name|noopOut
argument_list|)
expr_stmt|;
name|noopOut
operator|.
name|writeInt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// checksum holder
name|int
name|size
init|=
name|noopOut
operator|.
name|getCount
argument_list|()
decl_stmt|;
comment|// This BufferedChecksumStreamOutput remains unclosed on purpose,
comment|// because closing it closes the underlying stream, which we don't
comment|// want to do here.
name|BufferedChecksumStreamOutput
name|out
init|=
operator|new
name|BufferedChecksumStreamOutput
argument_list|(
name|outStream
argument_list|)
decl_stmt|;
name|outStream
operator|.
name|writeInt
argument_list|(
name|size
argument_list|)
expr_stmt|;
comment|// opSize is not checksummed
name|out
operator|.
name|writeByte
argument_list|(
name|op
operator|.
name|opType
argument_list|()
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|op
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|long
name|checksum
init|=
name|out
operator|.
name|getChecksum
argument_list|()
decl_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
operator|(
name|int
operator|)
name|checksum
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeHeader
specifier|public
name|int
name|writeHeader
parameter_list|(
name|FileChannel
name|channel
parameter_list|)
throws|throws
name|IOException
block|{
comment|// This OutputStreamDataOutput is intentionally not closed because
comment|// closing it will close the FileChannel
name|OutputStreamDataOutput
name|out
init|=
operator|new
name|OutputStreamDataOutput
argument_list|(
name|Channels
operator|.
name|newOutputStream
argument_list|(
name|channel
argument_list|)
argument_list|)
decl_stmt|;
name|CodecUtil
operator|.
name|writeHeader
argument_list|(
name|out
argument_list|,
name|TranslogStreams
operator|.
name|TRANSLOG_CODEC
argument_list|,
name|VERSION
argument_list|)
expr_stmt|;
return|return
name|headerLength
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|headerLength
specifier|public
name|int
name|headerLength
parameter_list|()
block|{
return|return
name|CodecUtil
operator|.
name|headerLength
argument_list|(
name|TranslogStreams
operator|.
name|TRANSLOG_CODEC
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|openInput
specifier|public
name|StreamInput
name|openInput
parameter_list|(
name|Path
name|translogFile
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|InputStream
name|fileInputStream
init|=
name|Files
operator|.
name|newInputStream
argument_list|(
name|translogFile
argument_list|)
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
specifier|final
name|InputStreamStreamInput
name|in
init|=
operator|new
name|InputStreamStreamInput
argument_list|(
name|fileInputStream
argument_list|)
decl_stmt|;
name|CodecUtil
operator|.
name|checkHeader
argument_list|(
operator|new
name|InputStreamDataInput
argument_list|(
name|in
argument_list|)
argument_list|,
name|TranslogStreams
operator|.
name|TRANSLOG_CODEC
argument_list|,
name|VERSION
argument_list|,
name|VERSION
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
return|return
name|in
return|;
block|}
catch|catch
parameter_list|(
name|EOFException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TruncatedTranslogException
argument_list|(
literal|"translog header truncated"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TranslogCorruptedException
argument_list|(
literal|"translog header corrupted"
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|success
operator|==
literal|false
condition|)
block|{
name|IOUtils
operator|.
name|closeWhileHandlingException
argument_list|(
name|fileInputStream
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

