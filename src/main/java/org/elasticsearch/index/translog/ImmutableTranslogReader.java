begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.translog
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|translog
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|Channels
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_comment
comment|/**  * a translog reader which is fixed in length  */
end_comment

begin_class
DECL|class|ImmutableTranslogReader
specifier|public
class|class
name|ImmutableTranslogReader
extends|extends
name|TranslogReader
block|{
DECL|field|totalOperations
specifier|private
specifier|final
name|int
name|totalOperations
decl_stmt|;
DECL|field|length
specifier|protected
specifier|final
name|long
name|length
decl_stmt|;
comment|/**      * Create a snapshot of translog file channel. The length parameter should be consistent with totalOperations and point      * at the end of the last operation in this snapshot.      */
DECL|method|ImmutableTranslogReader
specifier|public
name|ImmutableTranslogReader
parameter_list|(
name|long
name|generation
parameter_list|,
name|ChannelReference
name|channelReference
parameter_list|,
name|long
name|offset
parameter_list|,
name|long
name|length
parameter_list|,
name|int
name|totalOperations
parameter_list|)
block|{
name|super
argument_list|(
name|generation
argument_list|,
name|channelReference
argument_list|,
name|offset
argument_list|)
expr_stmt|;
name|this
operator|.
name|length
operator|=
name|length
expr_stmt|;
name|this
operator|.
name|totalOperations
operator|=
name|totalOperations
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|clone
specifier|public
specifier|final
name|TranslogReader
name|clone
parameter_list|()
block|{
if|if
condition|(
name|channelReference
operator|.
name|tryIncRef
argument_list|()
condition|)
block|{
try|try
block|{
name|ImmutableTranslogReader
name|reader
init|=
name|newReader
argument_list|(
name|generation
argument_list|,
name|channelReference
argument_list|,
name|firstOperationOffset
argument_list|,
name|length
argument_list|,
name|totalOperations
argument_list|)
decl_stmt|;
name|channelReference
operator|.
name|incRef
argument_list|()
expr_stmt|;
comment|// for the new object
return|return
name|reader
return|;
block|}
finally|finally
block|{
name|channelReference
operator|.
name|decRef
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"can't increment translog ["
operator|+
name|generation
operator|+
literal|"] channel ref count"
argument_list|)
throw|;
block|}
block|}
DECL|method|newReader
specifier|protected
name|ImmutableTranslogReader
name|newReader
parameter_list|(
name|long
name|generation
parameter_list|,
name|ChannelReference
name|channelReference
parameter_list|,
name|long
name|offset
parameter_list|,
name|long
name|length
parameter_list|,
name|int
name|totalOperations
parameter_list|)
block|{
return|return
operator|new
name|ImmutableTranslogReader
argument_list|(
name|generation
argument_list|,
name|channelReference
argument_list|,
name|offset
argument_list|,
name|length
argument_list|,
name|totalOperations
argument_list|)
return|;
block|}
DECL|method|sizeInBytes
specifier|public
name|long
name|sizeInBytes
parameter_list|()
block|{
return|return
name|length
return|;
block|}
DECL|method|totalOperations
specifier|public
name|int
name|totalOperations
parameter_list|()
block|{
return|return
name|totalOperations
return|;
block|}
comment|/**      * reads an operation at the given position into the given buffer.      */
DECL|method|readBytes
specifier|protected
name|void
name|readBytes
parameter_list|(
name|ByteBuffer
name|buffer
parameter_list|,
name|long
name|position
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|position
operator|>=
name|length
condition|)
block|{
throw|throw
operator|new
name|EOFException
argument_list|(
literal|"read requested past EOF. pos ["
operator|+
name|position
operator|+
literal|"] end: ["
operator|+
name|length
operator|+
literal|"]"
argument_list|)
throw|;
block|}
if|if
condition|(
name|position
operator|<
name|firstOperationOffset
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"read requested before position of first ops. pos ["
operator|+
name|position
operator|+
literal|"] first op on: ["
operator|+
name|firstOperationOffset
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|Channels
operator|.
name|readFromFileChannelWithEofException
argument_list|(
name|channel
argument_list|,
name|position
argument_list|,
name|buffer
argument_list|)
expr_stmt|;
block|}
DECL|method|getInfo
specifier|public
name|Checkpoint
name|getInfo
parameter_list|()
block|{
return|return
operator|new
name|Checkpoint
argument_list|(
name|length
argument_list|,
name|totalOperations
argument_list|,
name|getGeneration
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

