begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.translog
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|translog
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ReleasableLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReadWriteLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_class
DECL|class|TranslogFile
specifier|public
specifier|abstract
class|class
name|TranslogFile
extends|extends
name|ChannelReader
block|{
DECL|field|shardId
specifier|protected
specifier|final
name|ShardId
name|shardId
decl_stmt|;
DECL|field|readLock
specifier|protected
specifier|final
name|ReleasableLock
name|readLock
decl_stmt|;
DECL|field|writeLock
specifier|protected
specifier|final
name|ReleasableLock
name|writeLock
decl_stmt|;
DECL|method|TranslogFile
specifier|public
name|TranslogFile
parameter_list|(
name|ShardId
name|shardId
parameter_list|,
name|long
name|id
parameter_list|,
name|ChannelReference
name|channelReference
parameter_list|)
block|{
name|super
argument_list|(
name|id
argument_list|,
name|channelReference
argument_list|)
expr_stmt|;
name|this
operator|.
name|shardId
operator|=
name|shardId
expr_stmt|;
name|ReadWriteLock
name|rwl
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
decl_stmt|;
name|readLock
operator|=
operator|new
name|ReleasableLock
argument_list|(
name|rwl
operator|.
name|readLock
argument_list|()
argument_list|)
expr_stmt|;
name|writeLock
operator|=
operator|new
name|ReleasableLock
argument_list|(
name|rwl
operator|.
name|writeLock
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|enum|Type
specifier|public
enum|enum
name|Type
block|{
DECL|method|SIMPLE
DECL|method|SIMPLE
name|SIMPLE
parameter_list|()
block|{
annotation|@
name|Override
specifier|public
name|TranslogFile
name|create
parameter_list|(
name|ShardId
name|shardId
parameter_list|,
name|long
name|id
parameter_list|,
name|ChannelReference
name|channelReference
parameter_list|,
name|int
name|bufferSize
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|SimpleTranslogFile
argument_list|(
name|shardId
argument_list|,
name|id
argument_list|,
name|channelReference
argument_list|)
return|;
block|}
block|}
block|,
DECL|method|BUFFERED
DECL|method|BUFFERED
name|BUFFERED
parameter_list|()
block|{
annotation|@
name|Override
specifier|public
name|TranslogFile
name|create
parameter_list|(
name|ShardId
name|shardId
parameter_list|,
name|long
name|id
parameter_list|,
name|ChannelReference
name|channelReference
parameter_list|,
name|int
name|bufferSize
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|BufferingTranslogFile
argument_list|(
name|shardId
argument_list|,
name|id
argument_list|,
name|channelReference
argument_list|,
name|bufferSize
argument_list|)
return|;
block|}
block|}
block|;
DECL|method|create
specifier|public
specifier|abstract
name|TranslogFile
name|create
parameter_list|(
name|ShardId
name|shardId
parameter_list|,
name|long
name|id
parameter_list|,
name|ChannelReference
name|raf
parameter_list|,
name|int
name|bufferSize
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|fromString
specifier|public
specifier|static
name|Type
name|fromString
parameter_list|(
name|String
name|type
parameter_list|)
block|{
if|if
condition|(
name|SIMPLE
operator|.
name|name
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|type
argument_list|)
condition|)
block|{
return|return
name|SIMPLE
return|;
block|}
elseif|else
if|if
condition|(
name|BUFFERED
operator|.
name|name
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|type
argument_list|)
condition|)
block|{
return|return
name|BUFFERED
return|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No translog fs type ["
operator|+
name|type
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
comment|/** add the given bytes to the translog and return the location they were written at */
DECL|method|add
specifier|public
specifier|abstract
name|Translog
operator|.
name|Location
name|add
parameter_list|(
name|BytesReference
name|data
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/** reuse resources from another translog file, which is guaranteed not to be used anymore */
DECL|method|reuse
specifier|public
specifier|abstract
name|void
name|reuse
parameter_list|(
name|TranslogFile
name|other
parameter_list|)
throws|throws
name|TranslogException
function_decl|;
comment|/** change the size of the internal buffer if relevant */
DECL|method|updateBufferSize
specifier|public
specifier|abstract
name|void
name|updateBufferSize
parameter_list|(
name|int
name|bufferSize
parameter_list|)
throws|throws
name|TranslogException
function_decl|;
comment|/** write all buffered ops to disk and fsync file */
DECL|method|sync
specifier|public
specifier|abstract
name|void
name|sync
parameter_list|()
throws|throws
name|IOException
function_decl|;
comment|/** returns true if there are buffered ops */
DECL|method|syncNeeded
specifier|public
specifier|abstract
name|boolean
name|syncNeeded
parameter_list|()
function_decl|;
annotation|@
name|Override
DECL|method|newSnapshot
specifier|public
name|ChannelSnapshot
name|newSnapshot
parameter_list|()
block|{
return|return
operator|new
name|ChannelSnapshot
argument_list|(
name|immutableReader
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * returns a new reader that follows the current writes (most importantly allows making      * repeated snapshots that includes new content)      */
DECL|method|reader
specifier|public
name|ChannelReader
name|reader
parameter_list|()
block|{
name|channelReference
operator|.
name|incRef
argument_list|()
expr_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|ChannelReader
name|reader
init|=
operator|new
name|InnerReader
argument_list|(
name|this
operator|.
name|id
argument_list|,
name|channelReference
argument_list|)
decl_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
return|return
name|reader
return|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|channelReference
operator|.
name|decRef
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/** returns a new immutable reader which only exposes the current written operation * */
DECL|method|immutableReader
specifier|abstract
specifier|public
name|ChannelImmutableReader
name|immutableReader
parameter_list|()
function_decl|;
DECL|method|assertBytesAtLocation
name|boolean
name|assertBytesAtLocation
parameter_list|(
name|Translog
operator|.
name|Location
name|location
parameter_list|,
name|BytesReference
name|expectedBytes
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteBuffer
name|buffer
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|location
operator|.
name|size
argument_list|)
decl_stmt|;
name|readBytes
argument_list|(
name|buffer
argument_list|,
name|location
operator|.
name|translogLocation
argument_list|)
expr_stmt|;
return|return
operator|new
name|BytesArray
argument_list|(
name|buffer
operator|.
name|array
argument_list|()
argument_list|)
operator|.
name|equals
argument_list|(
name|expectedBytes
argument_list|)
return|;
block|}
comment|/**      * this class is used when one wants a reference to this file which exposes all recently written operation.      * as such it needs access to the internals of the current reader      */
DECL|class|InnerReader
specifier|final
class|class
name|InnerReader
extends|extends
name|ChannelReader
block|{
DECL|method|InnerReader
specifier|public
name|InnerReader
parameter_list|(
name|long
name|id
parameter_list|,
name|ChannelReference
name|channelReference
parameter_list|)
block|{
name|super
argument_list|(
name|id
argument_list|,
name|channelReference
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|sizeInBytes
specifier|public
name|long
name|sizeInBytes
parameter_list|()
block|{
return|return
name|TranslogFile
operator|.
name|this
operator|.
name|sizeInBytes
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|totalOperations
specifier|public
name|int
name|totalOperations
parameter_list|()
block|{
return|return
name|TranslogFile
operator|.
name|this
operator|.
name|totalOperations
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|readBytes
specifier|protected
name|void
name|readBytes
parameter_list|(
name|ByteBuffer
name|buffer
parameter_list|,
name|long
name|position
parameter_list|)
throws|throws
name|IOException
block|{
name|TranslogFile
operator|.
name|this
operator|.
name|readBytes
argument_list|(
name|buffer
argument_list|,
name|position
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|newSnapshot
specifier|public
name|ChannelSnapshot
name|newSnapshot
parameter_list|()
block|{
return|return
name|TranslogFile
operator|.
name|this
operator|.
name|newSnapshot
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

