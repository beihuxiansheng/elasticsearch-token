begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.translog.fs
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|translog
operator|.
name|fs
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|CollectionUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|ReleasablePagedBytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|ReleasableBytesStreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lease
operator|.
name|Releasables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|ByteSizeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|BigArrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentCollections
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FutureUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ReleasableLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|settings
operator|.
name|IndexSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|settings
operator|.
name|IndexSettingsService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|AbstractIndexShardComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|translog
operator|.
name|Translog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|translog
operator|.
name|TranslogException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|translog
operator|.
name|TranslogStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|translog
operator|.
name|TranslogStreams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReadWriteLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|FsTranslog
specifier|public
class|class
name|FsTranslog
extends|extends
name|AbstractIndexShardComponent
implements|implements
name|Translog
implements|,
name|Closeable
block|{
DECL|field|INDEX_TRANSLOG_FS_TYPE
specifier|public
specifier|static
specifier|final
name|String
name|INDEX_TRANSLOG_FS_TYPE
init|=
literal|"index.translog.fs.type"
decl_stmt|;
DECL|field|INDEX_TRANSLOG_BUFFER_SIZE
specifier|public
specifier|static
specifier|final
name|String
name|INDEX_TRANSLOG_BUFFER_SIZE
init|=
literal|"index.translog.fs.buffer_size"
decl_stmt|;
DECL|field|INDEX_TRANSLOG_SYNC_INTERVAL
specifier|public
specifier|static
specifier|final
name|String
name|INDEX_TRANSLOG_SYNC_INTERVAL
init|=
literal|"index.translog.sync_interval"
decl_stmt|;
DECL|field|TRANSLOG_FILE_PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|TRANSLOG_FILE_PREFIX
init|=
literal|"translog-"
decl_stmt|;
DECL|field|PARSE_ID_PATTERN
specifier|static
specifier|final
name|Pattern
name|PARSE_ID_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|TRANSLOG_FILE_PREFIX
operator|+
literal|"(\\d+)(\\.recovering)?$"
argument_list|)
decl_stmt|;
DECL|field|syncInterval
specifier|private
specifier|final
name|TimeValue
name|syncInterval
decl_stmt|;
DECL|field|syncScheduler
specifier|private
specifier|volatile
name|ScheduledFuture
argument_list|<
name|?
argument_list|>
name|syncScheduler
decl_stmt|;
comment|// this is a concurrent set and is not protected by any of the locks. The main reason
comment|// is that is being accessed by two separate classes (additions& reading are done by FsTranslog, remove by FsView when closed)
DECL|field|outstandingViews
specifier|private
specifier|final
name|Set
argument_list|<
name|FsView
argument_list|>
name|outstandingViews
init|=
name|ConcurrentCollections
operator|.
name|newConcurrentSet
argument_list|()
decl_stmt|;
DECL|class|ApplySettings
class|class
name|ApplySettings
implements|implements
name|IndexSettingsService
operator|.
name|Listener
block|{
annotation|@
name|Override
DECL|method|onRefreshSettings
specifier|public
name|void
name|onRefreshSettings
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
name|FsTranslogFile
operator|.
name|Type
name|type
init|=
name|FsTranslogFile
operator|.
name|Type
operator|.
name|fromString
argument_list|(
name|settings
operator|.
name|get
argument_list|(
name|INDEX_TRANSLOG_FS_TYPE
argument_list|,
name|FsTranslog
operator|.
name|this
operator|.
name|type
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|!=
name|FsTranslog
operator|.
name|this
operator|.
name|type
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"updating type from [{}] to [{}]"
argument_list|,
name|FsTranslog
operator|.
name|this
operator|.
name|type
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|FsTranslog
operator|.
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
block|}
block|}
DECL|field|indexSettingsService
specifier|private
specifier|final
name|IndexSettingsService
name|indexSettingsService
decl_stmt|;
DECL|field|bigArrays
specifier|private
specifier|final
name|BigArrays
name|bigArrays
decl_stmt|;
DECL|field|threadPool
specifier|private
specifier|final
name|ThreadPool
name|threadPool
decl_stmt|;
DECL|field|readLock
specifier|protected
specifier|final
name|ReleasableLock
name|readLock
decl_stmt|;
DECL|field|writeLock
specifier|protected
specifier|final
name|ReleasableLock
name|writeLock
decl_stmt|;
DECL|field|location
specifier|private
specifier|final
name|Path
name|location
decl_stmt|;
comment|// protected by the write lock
DECL|field|idGenerator
specifier|private
name|long
name|idGenerator
init|=
literal|1
decl_stmt|;
DECL|field|current
specifier|private
name|FsTranslogFile
name|current
decl_stmt|;
comment|// ordered by age
DECL|field|uncommittedTranslogs
specifier|private
specifier|final
name|List
argument_list|<
name|FsChannelImmutableReader
argument_list|>
name|uncommittedTranslogs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|lastCommittedTranslogId
specifier|private
name|long
name|lastCommittedTranslogId
init|=
operator|-
literal|1
decl_stmt|;
comment|// -1 is safe as it will not cause an translog deletion.
DECL|field|type
specifier|private
name|FsTranslogFile
operator|.
name|Type
name|type
decl_stmt|;
DECL|field|syncOnEachOperation
specifier|private
name|boolean
name|syncOnEachOperation
init|=
literal|false
decl_stmt|;
DECL|field|bufferSize
specifier|private
specifier|volatile
name|int
name|bufferSize
decl_stmt|;
DECL|field|applySettings
specifier|private
specifier|final
name|ApplySettings
name|applySettings
init|=
operator|new
name|ApplySettings
argument_list|()
decl_stmt|;
DECL|field|closed
specifier|private
specifier|final
name|AtomicBoolean
name|closed
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
DECL|method|FsTranslog
specifier|public
name|FsTranslog
parameter_list|(
name|ShardId
name|shardId
parameter_list|,
name|IndexSettingsService
name|indexSettingsService
parameter_list|,
name|BigArrays
name|bigArrays
parameter_list|,
name|Path
name|location
parameter_list|,
name|ThreadPool
name|threadPool
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|shardId
argument_list|,
name|indexSettingsService
operator|.
name|getSettings
argument_list|()
argument_list|,
name|indexSettingsService
argument_list|,
name|bigArrays
argument_list|,
name|location
argument_list|,
name|threadPool
argument_list|)
expr_stmt|;
block|}
DECL|method|FsTranslog
specifier|public
name|FsTranslog
parameter_list|(
name|ShardId
name|shardId
parameter_list|,
annotation|@
name|IndexSettings
name|Settings
name|indexSettings
parameter_list|,
name|BigArrays
name|bigArrays
parameter_list|,
name|Path
name|location
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|shardId
argument_list|,
name|indexSettings
argument_list|,
literal|null
argument_list|,
name|bigArrays
argument_list|,
name|location
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|FsTranslog
specifier|private
name|FsTranslog
parameter_list|(
name|ShardId
name|shardId
parameter_list|,
annotation|@
name|IndexSettings
name|Settings
name|indexSettings
parameter_list|,
annotation|@
name|Nullable
name|IndexSettingsService
name|indexSettingsService
parameter_list|,
name|BigArrays
name|bigArrays
parameter_list|,
name|Path
name|location
parameter_list|,
annotation|@
name|Nullable
name|ThreadPool
name|threadPool
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|shardId
argument_list|,
name|indexSettings
argument_list|)
expr_stmt|;
name|ReadWriteLock
name|rwl
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
decl_stmt|;
name|readLock
operator|=
operator|new
name|ReleasableLock
argument_list|(
name|rwl
operator|.
name|readLock
argument_list|()
argument_list|)
expr_stmt|;
name|writeLock
operator|=
operator|new
name|ReleasableLock
argument_list|(
name|rwl
operator|.
name|writeLock
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|indexSettingsService
operator|=
name|indexSettingsService
expr_stmt|;
name|this
operator|.
name|bigArrays
operator|=
name|bigArrays
expr_stmt|;
name|this
operator|.
name|location
operator|=
name|location
expr_stmt|;
name|Files
operator|.
name|createDirectories
argument_list|(
name|this
operator|.
name|location
argument_list|)
expr_stmt|;
name|this
operator|.
name|threadPool
operator|=
name|threadPool
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|FsTranslogFile
operator|.
name|Type
operator|.
name|fromString
argument_list|(
name|indexSettings
operator|.
name|get
argument_list|(
name|INDEX_TRANSLOG_FS_TYPE
argument_list|,
name|FsTranslogFile
operator|.
name|Type
operator|.
name|BUFFERED
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|bufferSize
operator|=
operator|(
name|int
operator|)
name|indexSettings
operator|.
name|getAsBytesSize
argument_list|(
name|INDEX_TRANSLOG_BUFFER_SIZE
argument_list|,
name|ByteSizeValue
operator|.
name|parseBytesSizeValue
argument_list|(
literal|"64k"
argument_list|)
argument_list|)
operator|.
name|bytes
argument_list|()
expr_stmt|;
comment|// Not really interesting, updated by IndexingMemoryController...
name|syncInterval
operator|=
name|indexSettings
operator|.
name|getAsTime
argument_list|(
name|INDEX_TRANSLOG_SYNC_INTERVAL
argument_list|,
name|TimeValue
operator|.
name|timeValueSeconds
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|syncInterval
operator|.
name|millis
argument_list|()
operator|>
literal|0
operator|&&
name|threadPool
operator|!=
literal|null
condition|)
block|{
name|syncOnEachOperation
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|syncScheduler
operator|=
name|threadPool
operator|.
name|schedule
argument_list|(
name|syncInterval
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|SAME
argument_list|,
operator|new
name|Sync
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|syncInterval
operator|.
name|millis
argument_list|()
operator|==
literal|0
condition|)
block|{
name|syncOnEachOperation
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|indexSettingsService
operator|!=
literal|null
condition|)
block|{
name|indexSettingsService
operator|.
name|addListener
argument_list|(
name|applySettings
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|recoverFromFiles
argument_list|()
expr_stmt|;
comment|// now that we know which files are there, create a new current one.
name|current
operator|=
name|createTranslogFile
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|// close the opened translog files if we fail to create a new translog...
name|IOUtils
operator|.
name|closeWhileHandlingException
argument_list|(
name|uncommittedTranslogs
argument_list|)
expr_stmt|;
throw|throw
name|t
throw|;
block|}
block|}
comment|/** recover all translog files found on disk */
DECL|method|recoverFromFiles
specifier|private
name|void
name|recoverFromFiles
parameter_list|()
throws|throws
name|IOException
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|ArrayList
argument_list|<
name|FsChannelImmutableReader
argument_list|>
name|foundTranslogs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
init|(
name|ReleasableLock
name|lock
init|=
name|writeLock
operator|.
name|acquire
argument_list|()
init|)
block|{
try|try
init|(
name|DirectoryStream
argument_list|<
name|Path
argument_list|>
name|stream
init|=
name|Files
operator|.
name|newDirectoryStream
argument_list|(
name|location
argument_list|,
name|TRANSLOG_FILE_PREFIX
operator|+
literal|"[0-9]*"
argument_list|)
init|)
block|{
for|for
control|(
name|Path
name|file
range|:
name|stream
control|)
block|{
specifier|final
name|long
name|id
init|=
name|parseIdFromFileName
argument_list|(
name|file
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|TranslogException
argument_list|(
name|shardId
argument_list|,
literal|"failed to parse id from file name matching pattern "
operator|+
name|file
argument_list|)
throw|;
block|}
name|idGenerator
operator|=
name|Math
operator|.
name|max
argument_list|(
name|idGenerator
argument_list|,
name|id
operator|+
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|ChannelReference
name|raf
init|=
operator|new
name|InternalChannelReference
argument_list|(
name|id
argument_list|,
name|location
operator|.
name|resolve
argument_list|(
name|getFilename
argument_list|(
name|id
argument_list|)
argument_list|)
argument_list|,
name|StandardOpenOption
operator|.
name|READ
argument_list|)
decl_stmt|;
name|foundTranslogs
operator|.
name|add
argument_list|(
operator|new
name|FsChannelImmutableReader
argument_list|(
name|id
argument_list|,
name|raf
argument_list|,
name|raf
operator|.
name|channel
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|FsChannelReader
operator|.
name|UNKNOWN_OP_COUNT
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"found local translog with id [{}]"
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
block|}
name|CollectionUtil
operator|.
name|timSort
argument_list|(
name|foundTranslogs
argument_list|)
expr_stmt|;
name|uncommittedTranslogs
operator|.
name|addAll
argument_list|(
name|foundTranslogs
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|success
operator|==
literal|false
condition|)
block|{
name|IOUtils
operator|.
name|closeWhileHandlingException
argument_list|(
name|foundTranslogs
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/* extracts the translog id from a file name. returns -1 upon failure */
DECL|method|parseIdFromFileName
specifier|public
specifier|static
name|long
name|parseIdFromFileName
parameter_list|(
name|Path
name|translogFile
parameter_list|)
block|{
specifier|final
name|String
name|fileName
init|=
name|translogFile
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
specifier|final
name|Matcher
name|matcher
init|=
name|PARSE_ID_PATTERN
operator|.
name|matcher
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
if|if
condition|(
name|matcher
operator|.
name|matches
argument_list|()
condition|)
block|{
try|try
block|{
return|return
name|Long
operator|.
name|parseLong
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ElasticsearchException
argument_list|(
literal|"number formatting issue in a file that passed PARSE_ID_PATTERN: "
operator|+
name|fileName
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
return|return
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
DECL|method|updateBuffer
specifier|public
name|void
name|updateBuffer
parameter_list|(
name|ByteSizeValue
name|bufferSize
parameter_list|)
block|{
name|this
operator|.
name|bufferSize
operator|=
name|bufferSize
operator|.
name|bytesAsInt
argument_list|()
expr_stmt|;
try|try
init|(
name|ReleasableLock
name|lock
init|=
name|writeLock
operator|.
name|acquire
argument_list|()
init|)
block|{
name|current
operator|.
name|updateBufferSize
argument_list|(
name|this
operator|.
name|bufferSize
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|isOpen
name|boolean
name|isOpen
parameter_list|()
block|{
return|return
name|closed
operator|.
name|get
argument_list|()
operator|==
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|closed
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
if|if
condition|(
name|indexSettingsService
operator|!=
literal|null
condition|)
block|{
name|indexSettingsService
operator|.
name|removeListener
argument_list|(
name|applySettings
argument_list|)
expr_stmt|;
block|}
try|try
init|(
name|ReleasableLock
name|lock
init|=
name|writeLock
operator|.
name|acquire
argument_list|()
init|)
block|{
try|try
block|{
name|IOUtils
operator|.
name|close
argument_list|(
name|this
operator|.
name|current
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|close
argument_list|(
name|uncommittedTranslogs
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|FutureUtils
operator|.
name|cancel
argument_list|(
name|syncScheduler
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"translog closed"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|location
specifier|public
name|Path
name|location
parameter_list|()
block|{
return|return
name|location
return|;
block|}
annotation|@
name|Override
DECL|method|currentId
specifier|public
name|long
name|currentId
parameter_list|()
block|{
try|try
init|(
name|ReleasableLock
name|lock
init|=
name|readLock
operator|.
name|acquire
argument_list|()
init|)
block|{
return|return
name|current
operator|.
name|translogId
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|totalOperations
specifier|public
name|int
name|totalOperations
parameter_list|()
block|{
name|int
name|ops
init|=
literal|0
decl_stmt|;
try|try
init|(
name|ReleasableLock
name|lock
init|=
name|readLock
operator|.
name|acquire
argument_list|()
init|)
block|{
name|ops
operator|+=
name|current
operator|.
name|totalOperations
argument_list|()
expr_stmt|;
for|for
control|(
name|FsChannelReader
name|translog
range|:
name|uncommittedTranslogs
control|)
block|{
name|int
name|tops
init|=
name|translog
operator|.
name|totalOperations
argument_list|()
decl_stmt|;
if|if
condition|(
name|tops
operator|==
name|FsChannelReader
operator|.
name|UNKNOWN_OP_COUNT
condition|)
block|{
return|return
name|FsChannelReader
operator|.
name|UNKNOWN_OP_COUNT
return|;
block|}
name|ops
operator|+=
name|tops
expr_stmt|;
block|}
block|}
return|return
name|ops
return|;
block|}
annotation|@
name|Override
DECL|method|sizeInBytes
specifier|public
name|long
name|sizeInBytes
parameter_list|()
block|{
name|long
name|size
init|=
literal|0
decl_stmt|;
try|try
init|(
name|ReleasableLock
name|lock
init|=
name|readLock
operator|.
name|acquire
argument_list|()
init|)
block|{
name|size
operator|+=
name|current
operator|.
name|sizeInBytes
argument_list|()
expr_stmt|;
for|for
control|(
name|FsChannelReader
name|translog
range|:
name|uncommittedTranslogs
control|)
block|{
name|size
operator|+=
name|translog
operator|.
name|sizeInBytes
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|size
return|;
block|}
annotation|@
name|Override
DECL|method|markCommitted
specifier|public
name|void
name|markCommitted
parameter_list|(
specifier|final
name|long
name|translogId
parameter_list|)
throws|throws
name|FileNotFoundException
block|{
try|try
init|(
name|ReleasableLock
name|lock
init|=
name|writeLock
operator|.
name|acquire
argument_list|()
init|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"updating translogs on commit of [{}]"
argument_list|,
name|translogId
argument_list|)
expr_stmt|;
if|if
condition|(
name|translogId
operator|<
name|lastCommittedTranslogId
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"committed translog id can only go up (current ["
operator|+
name|lastCommittedTranslogId
operator|+
literal|"], got ["
operator|+
name|translogId
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|boolean
name|found
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|current
operator|.
name|translogId
argument_list|()
operator|==
name|translogId
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|translogId
operator|>
name|current
operator|.
name|translogId
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"committed translog id must be lower or equal to current id (current ["
operator|+
name|current
operator|.
name|translogId
argument_list|()
operator|+
literal|"], got ["
operator|+
name|translogId
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|found
operator|==
literal|false
condition|)
block|{
comment|// try to find it in uncommittedTranslogs
for|for
control|(
name|FsChannelImmutableReader
name|translog
range|:
name|uncommittedTranslogs
control|)
block|{
if|if
condition|(
name|translog
operator|.
name|translogId
argument_list|()
operator|==
name|translogId
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
name|found
operator|==
literal|false
condition|)
block|{
name|ArrayList
argument_list|<
name|Long
argument_list|>
name|currentIds
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|FsChannelReader
name|translog
range|:
name|Iterables
operator|.
name|concat
argument_list|(
name|uncommittedTranslogs
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|current
argument_list|)
argument_list|)
control|)
block|{
name|currentIds
operator|.
name|add
argument_list|(
name|translog
operator|.
name|translogId
argument_list|()
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"committed translog id can not be found (current ["
operator|+
name|Strings
operator|.
name|collectionToCommaDelimitedString
argument_list|(
name|currentIds
argument_list|)
operator|+
literal|"], got ["
operator|+
name|translogId
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|lastCommittedTranslogId
operator|=
name|translogId
expr_stmt|;
while|while
condition|(
name|uncommittedTranslogs
operator|.
name|isEmpty
argument_list|()
operator|==
literal|false
operator|&&
name|uncommittedTranslogs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|translogId
argument_list|()
operator|<
name|translogId
condition|)
block|{
name|FsChannelReader
name|old
init|=
name|uncommittedTranslogs
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|logger
operator|.
name|trace
argument_list|(
literal|"removed [{}] from uncommitted translog list"
argument_list|,
name|old
operator|.
name|translogId
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|old
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"failed to closed old translog [{}] (committed id [{}])"
argument_list|,
name|e
argument_list|,
name|old
argument_list|,
name|translogId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|newTranslog
specifier|public
name|long
name|newTranslog
parameter_list|()
throws|throws
name|TranslogException
throws|,
name|IOException
block|{
try|try
init|(
name|ReleasableLock
name|lock
init|=
name|writeLock
operator|.
name|acquire
argument_list|()
init|)
block|{
specifier|final
name|FsTranslogFile
name|old
init|=
name|current
decl_stmt|;
specifier|final
name|FsTranslogFile
name|newFile
init|=
name|createTranslogFile
argument_list|(
name|old
argument_list|)
decl_stmt|;
name|current
operator|=
name|newFile
expr_stmt|;
name|FsChannelImmutableReader
name|reader
init|=
name|old
operator|.
name|immutableReader
argument_list|()
decl_stmt|;
name|uncommittedTranslogs
operator|.
name|add
argument_list|(
name|reader
argument_list|)
expr_stmt|;
comment|// notify all outstanding views of the new translog (no views are created now as
comment|// we hold a write lock).
for|for
control|(
name|FsView
name|view
range|:
name|outstandingViews
control|)
block|{
name|view
operator|.
name|onNewTranslog
argument_list|(
name|old
operator|.
name|immutableReader
argument_list|()
argument_list|,
name|current
operator|.
name|reader
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|IOUtils
operator|.
name|close
argument_list|(
name|old
argument_list|)
expr_stmt|;
name|logger
operator|.
name|trace
argument_list|(
literal|"current translog set to [{}]"
argument_list|,
name|current
operator|.
name|translogId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|current
operator|.
name|translogId
argument_list|()
return|;
block|}
block|}
DECL|method|createTranslogFile
specifier|protected
name|FsTranslogFile
name|createTranslogFile
parameter_list|(
annotation|@
name|Nullable
name|FsTranslogFile
name|reuse
parameter_list|)
throws|throws
name|IOException
block|{
name|FsTranslogFile
name|newFile
decl_stmt|;
name|long
name|size
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
try|try
block|{
name|long
name|id
init|=
name|idGenerator
operator|++
decl_stmt|;
name|newFile
operator|=
name|type
operator|.
name|create
argument_list|(
name|shardId
argument_list|,
name|id
argument_list|,
operator|new
name|InternalChannelReference
argument_list|(
name|id
argument_list|,
name|location
operator|.
name|resolve
argument_list|(
name|getFilename
argument_list|(
name|id
argument_list|)
argument_list|)
argument_list|,
name|StandardOpenOption
operator|.
name|READ
argument_list|,
name|StandardOpenOption
operator|.
name|WRITE
argument_list|,
name|StandardOpenOption
operator|.
name|CREATE_NEW
argument_list|)
argument_list|,
name|bufferSize
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TranslogException
argument_list|(
name|shardId
argument_list|,
literal|"failed to create new translog file"
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|reuse
operator|!=
literal|null
condition|)
block|{
name|newFile
operator|.
name|reuse
argument_list|(
name|reuse
argument_list|)
expr_stmt|;
block|}
return|return
name|newFile
return|;
block|}
comment|/**      * Read the Operation object from the given location, returns null if the      * Operation could not be read.      */
annotation|@
name|Override
DECL|method|read
specifier|public
name|Translog
operator|.
name|Operation
name|read
parameter_list|(
name|Location
name|location
parameter_list|)
block|{
try|try
init|(
name|ReleasableLock
name|lock
init|=
name|readLock
operator|.
name|acquire
argument_list|()
init|)
block|{
name|FsChannelReader
name|reader
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|current
operator|.
name|translogId
argument_list|()
operator|==
name|location
operator|.
name|translogId
condition|)
block|{
name|reader
operator|=
name|current
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|FsChannelReader
name|translog
range|:
name|uncommittedTranslogs
control|)
block|{
if|if
condition|(
name|translog
operator|.
name|translogId
argument_list|()
operator|==
name|location
operator|.
name|translogId
condition|)
block|{
name|reader
operator|=
name|translog
expr_stmt|;
break|break;
block|}
block|}
block|}
return|return
name|reader
operator|==
literal|null
condition|?
literal|null
else|:
name|reader
operator|.
name|read
argument_list|(
name|location
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ElasticsearchException
argument_list|(
literal|"failed to read source from translog location "
operator|+
name|location
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|add
specifier|public
name|Location
name|add
parameter_list|(
name|Operation
name|operation
parameter_list|)
throws|throws
name|TranslogException
block|{
name|ReleasableBytesStreamOutput
name|out
init|=
operator|new
name|ReleasableBytesStreamOutput
argument_list|(
name|bigArrays
argument_list|)
decl_stmt|;
try|try
block|{
name|TranslogStreams
operator|.
name|writeTranslogOperation
argument_list|(
name|out
argument_list|,
name|operation
argument_list|)
expr_stmt|;
name|ReleasablePagedBytesReference
name|bytes
init|=
name|out
operator|.
name|bytes
argument_list|()
decl_stmt|;
try|try
init|(
name|ReleasableLock
name|lock
init|=
name|readLock
operator|.
name|acquire
argument_list|()
init|)
block|{
name|Location
name|location
init|=
name|current
operator|.
name|add
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
if|if
condition|(
name|syncOnEachOperation
condition|)
block|{
name|current
operator|.
name|sync
argument_list|()
expr_stmt|;
block|}
assert|assert
name|current
operator|.
name|assertBytesAtLocation
argument_list|(
name|location
argument_list|,
name|bytes
argument_list|)
assert|;
return|return
name|location
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TranslogException
argument_list|(
name|shardId
argument_list|,
literal|"Failed to write operation ["
operator|+
name|operation
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|Releasables
operator|.
name|close
argument_list|(
name|out
operator|.
name|bytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|newSnapshot
specifier|public
name|Snapshot
name|newSnapshot
parameter_list|()
block|{
try|try
init|(
name|ReleasableLock
name|lock
init|=
name|readLock
operator|.
name|acquire
argument_list|()
init|)
block|{
comment|// leave one place for current.
specifier|final
name|FsChannelReader
index|[]
name|readers
init|=
name|uncommittedTranslogs
operator|.
name|toArray
argument_list|(
operator|new
name|FsChannelReader
index|[
name|uncommittedTranslogs
operator|.
name|size
argument_list|()
operator|+
literal|1
index|]
argument_list|)
decl_stmt|;
name|readers
index|[
name|readers
operator|.
name|length
operator|-
literal|1
index|]
operator|=
name|current
expr_stmt|;
return|return
name|createdSnapshot
argument_list|(
name|readers
argument_list|)
return|;
block|}
block|}
DECL|method|createdSnapshot
specifier|private
name|Snapshot
name|createdSnapshot
parameter_list|(
name|FsChannelReader
modifier|...
name|translogs
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|FsChannelSnapshot
argument_list|>
name|channelSnapshots
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
for|for
control|(
name|FsChannelReader
name|translog
range|:
name|translogs
control|)
block|{
name|channelSnapshots
operator|.
name|add
argument_list|(
name|translog
operator|.
name|newSnapshot
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Snapshot
name|snapshot
init|=
operator|new
name|FsTranslogSnapshot
argument_list|(
name|channelSnapshots
argument_list|,
name|logger
argument_list|)
decl_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
return|return
name|snapshot
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|success
operator|==
literal|false
condition|)
block|{
name|IOUtils
operator|.
name|closeWhileHandlingException
argument_list|(
name|channelSnapshots
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|newView
specifier|public
name|Translog
operator|.
name|View
name|newView
parameter_list|()
block|{
comment|// we need to acquire the read lock to make sure new translog is created
comment|// and will be missed by the view we're making
try|try
init|(
name|ReleasableLock
name|lock
init|=
name|readLock
operator|.
name|acquire
argument_list|()
init|)
block|{
name|ArrayList
argument_list|<
name|FsChannelReader
argument_list|>
name|translogs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
name|FsChannelImmutableReader
name|translog
range|:
name|uncommittedTranslogs
control|)
block|{
name|translogs
operator|.
name|add
argument_list|(
name|translog
operator|.
name|clone
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|translogs
operator|.
name|add
argument_list|(
name|current
operator|.
name|reader
argument_list|()
argument_list|)
expr_stmt|;
name|FsView
name|view
init|=
operator|new
name|FsView
argument_list|(
name|translogs
argument_list|)
decl_stmt|;
comment|// this is safe as we know that no new translog is being made at the moment
comment|// (we hold a read lock) and the view will be notified of any future one
name|outstandingViews
operator|.
name|add
argument_list|(
name|view
argument_list|)
expr_stmt|;
name|translogs
operator|.
name|clear
argument_list|()
expr_stmt|;
return|return
name|view
return|;
block|}
finally|finally
block|{
comment|// close if anything happend and we didn't reach the clear
name|IOUtils
operator|.
name|closeWhileHandlingException
argument_list|(
name|translogs
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|sync
specifier|public
name|void
name|sync
parameter_list|()
throws|throws
name|IOException
block|{
try|try
init|(
name|ReleasableLock
name|lock
init|=
name|readLock
operator|.
name|acquire
argument_list|()
init|)
block|{
if|if
condition|(
name|closed
operator|.
name|get
argument_list|()
condition|)
block|{
return|return;
block|}
name|current
operator|.
name|sync
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|syncNeeded
specifier|public
name|boolean
name|syncNeeded
parameter_list|()
block|{
try|try
init|(
name|ReleasableLock
name|lock
init|=
name|readLock
operator|.
name|acquire
argument_list|()
init|)
block|{
return|return
name|current
operator|.
name|syncNeeded
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|syncOnEachOperation
specifier|public
name|void
name|syncOnEachOperation
parameter_list|(
name|boolean
name|syncOnEachOperation
parameter_list|)
block|{
name|this
operator|.
name|syncOnEachOperation
operator|=
name|syncOnEachOperation
expr_stmt|;
if|if
condition|(
name|syncOnEachOperation
condition|)
block|{
name|type
operator|=
name|FsTranslogFile
operator|.
name|Type
operator|.
name|SIMPLE
expr_stmt|;
block|}
else|else
block|{
name|type
operator|=
name|FsTranslogFile
operator|.
name|Type
operator|.
name|BUFFERED
expr_stmt|;
block|}
block|}
comment|/** package private for testing */
DECL|method|getFilename
name|String
name|getFilename
parameter_list|(
name|long
name|translogId
parameter_list|)
block|{
return|return
name|TRANSLOG_FILE_PREFIX
operator|+
name|translogId
return|;
block|}
annotation|@
name|Override
DECL|method|stats
specifier|public
name|TranslogStats
name|stats
parameter_list|()
block|{
comment|// acquire lock to make the two numbers roughly consistent (no file change half way)
try|try
init|(
name|ReleasableLock
name|lock
init|=
name|readLock
operator|.
name|acquire
argument_list|()
init|)
block|{
return|return
operator|new
name|TranslogStats
argument_list|(
name|totalOperations
argument_list|()
argument_list|,
name|sizeInBytes
argument_list|()
argument_list|)
return|;
block|}
block|}
DECL|method|isReferencedTranslogId
specifier|private
name|boolean
name|isReferencedTranslogId
parameter_list|(
name|long
name|translogId
parameter_list|)
block|{
return|return
name|translogId
operator|>=
name|lastCommittedTranslogId
return|;
block|}
DECL|class|InternalChannelReference
specifier|private
specifier|final
class|class
name|InternalChannelReference
extends|extends
name|ChannelReference
block|{
DECL|field|translogId
specifier|final
name|long
name|translogId
decl_stmt|;
DECL|method|InternalChannelReference
specifier|public
name|InternalChannelReference
parameter_list|(
name|long
name|translogId
parameter_list|,
name|Path
name|file
parameter_list|,
name|OpenOption
modifier|...
name|openOptions
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|file
argument_list|,
name|openOptions
argument_list|)
expr_stmt|;
name|this
operator|.
name|translogId
operator|=
name|translogId
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|closeInternal
specifier|protected
name|void
name|closeInternal
parameter_list|()
block|{
name|super
operator|.
name|closeInternal
argument_list|()
expr_stmt|;
try|try
init|(
name|ReleasableLock
name|lock
init|=
name|writeLock
operator|.
name|acquire
argument_list|()
init|)
block|{
if|if
condition|(
name|isReferencedTranslogId
argument_list|(
name|translogId
argument_list|)
operator|==
literal|false
condition|)
block|{
comment|// if the given path is not the current we can safely delete the file since all references are released
name|logger
operator|.
name|trace
argument_list|(
literal|"delete translog file - not referenced and not current anymore {}"
argument_list|,
name|file
argument_list|()
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|deleteFilesIgnoringExceptions
argument_list|(
name|file
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * a view into the translog, capturing all translog file at the moment of creation      * and updated with any future translog.      */
DECL|class|FsView
class|class
name|FsView
implements|implements
name|View
block|{
DECL|field|closed
name|boolean
name|closed
decl_stmt|;
comment|// last in this list is always FsTranslog.current
DECL|field|orderedTranslogs
specifier|final
name|List
argument_list|<
name|FsChannelReader
argument_list|>
name|orderedTranslogs
decl_stmt|;
DECL|method|FsView
name|FsView
parameter_list|(
name|List
argument_list|<
name|FsChannelReader
argument_list|>
name|orderedTranslogs
parameter_list|)
block|{
assert|assert
name|orderedTranslogs
operator|.
name|isEmpty
argument_list|()
operator|==
literal|false
assert|;
comment|// clone so we can safely mutate..
name|this
operator|.
name|orderedTranslogs
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|orderedTranslogs
argument_list|)
expr_stmt|;
block|}
comment|/**          * Called by the parent class when ever the current translog changes          *          * @param oldCurrent a new read only reader for the old current (should replace the previous reference)          * @param newCurrent a reader into the new current.          */
DECL|method|onNewTranslog
specifier|synchronized
name|void
name|onNewTranslog
parameter_list|(
name|FsChannelReader
name|oldCurrent
parameter_list|,
name|FsChannelReader
name|newCurrent
parameter_list|)
throws|throws
name|IOException
block|{
comment|// even though the close method removes this view from outstandingViews, there is no synchronisation in place
comment|// between that operation and an ongoing addition of a new translog, already having an iterator.
comment|// As such, this method can be called despite of the fact that we are closed. We need to check and ignore.
if|if
condition|(
name|closed
condition|)
block|{
comment|// we have to close the new references created for as as we will not hold them
name|IOUtils
operator|.
name|close
argument_list|(
name|oldCurrent
argument_list|,
name|newCurrent
argument_list|)
expr_stmt|;
return|return;
block|}
name|orderedTranslogs
operator|.
name|remove
argument_list|(
name|orderedTranslogs
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|orderedTranslogs
operator|.
name|add
argument_list|(
name|oldCurrent
argument_list|)
expr_stmt|;
name|orderedTranslogs
operator|.
name|add
argument_list|(
name|newCurrent
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|minTranslogId
specifier|public
specifier|synchronized
name|long
name|minTranslogId
parameter_list|()
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
return|return
name|orderedTranslogs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|translogId
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|totalOperations
specifier|public
specifier|synchronized
name|int
name|totalOperations
parameter_list|()
block|{
name|int
name|ops
init|=
literal|0
decl_stmt|;
for|for
control|(
name|FsChannelReader
name|translog
range|:
name|orderedTranslogs
control|)
block|{
name|int
name|tops
init|=
name|translog
operator|.
name|totalOperations
argument_list|()
decl_stmt|;
if|if
condition|(
name|tops
operator|==
name|FsChannelReader
operator|.
name|UNKNOWN_OP_COUNT
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
name|ops
operator|+=
name|tops
expr_stmt|;
block|}
return|return
name|ops
return|;
block|}
annotation|@
name|Override
DECL|method|sizeInBytes
specifier|public
specifier|synchronized
name|long
name|sizeInBytes
parameter_list|()
block|{
name|long
name|size
init|=
literal|0
decl_stmt|;
for|for
control|(
name|FsChannelReader
name|translog
range|:
name|orderedTranslogs
control|)
block|{
name|size
operator|+=
name|translog
operator|.
name|sizeInBytes
argument_list|()
expr_stmt|;
block|}
return|return
name|size
return|;
block|}
DECL|method|snapshot
specifier|public
specifier|synchronized
name|Snapshot
name|snapshot
parameter_list|()
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
return|return
name|createdSnapshot
argument_list|(
name|orderedTranslogs
operator|.
name|toArray
argument_list|(
operator|new
name|FsChannelReader
index|[
name|orderedTranslogs
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
return|;
block|}
DECL|method|ensureOpen
name|void
name|ensureOpen
parameter_list|()
block|{
if|if
condition|(
name|closed
condition|)
block|{
throw|throw
operator|new
name|ElasticsearchException
argument_list|(
literal|"View is already closed"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
name|List
argument_list|<
name|FsChannelReader
argument_list|>
name|toClose
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|closed
operator|==
literal|false
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"closing view starting at translog [{}]"
argument_list|,
name|minTranslogId
argument_list|()
argument_list|)
expr_stmt|;
name|closed
operator|=
literal|true
expr_stmt|;
name|outstandingViews
operator|.
name|remove
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|toClose
operator|.
name|addAll
argument_list|(
name|orderedTranslogs
argument_list|)
expr_stmt|;
name|orderedTranslogs
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
try|try
block|{
comment|// Close out of lock to prevent deadlocks between channel close which checks for
comment|// references in InternalChannelReference.closeInternal (waiting on a read lock)
comment|// and other FsTranslog#newTranslog calling FsView.onNewTranslog (while having a write lock)
name|IOUtils
operator|.
name|close
argument_list|(
name|toClose
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ElasticsearchException
argument_list|(
literal|"failed to close view"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
DECL|class|Sync
class|class
name|Sync
implements|implements
name|Runnable
block|{
annotation|@
name|Override
DECL|method|run
specifier|public
name|void
name|run
parameter_list|()
block|{
comment|// don't re-schedule  if its closed..., we are done
if|if
condition|(
name|closed
operator|.
name|get
argument_list|()
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|syncNeeded
argument_list|()
condition|)
block|{
name|threadPool
operator|.
name|executor
argument_list|(
name|ThreadPool
operator|.
name|Names
operator|.
name|FLUSH
argument_list|)
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|sync
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"failed to sync translog"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|closed
operator|.
name|get
argument_list|()
operator|==
literal|false
condition|)
block|{
name|syncScheduler
operator|=
name|threadPool
operator|.
name|schedule
argument_list|(
name|syncInterval
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|SAME
argument_list|,
name|Sync
operator|.
name|this
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|syncScheduler
operator|=
name|threadPool
operator|.
name|schedule
argument_list|(
name|syncInterval
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|SAME
argument_list|,
name|Sync
operator|.
name|this
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

