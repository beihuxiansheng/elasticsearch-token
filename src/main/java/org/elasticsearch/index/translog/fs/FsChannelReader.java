begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.translog.fs
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|translog
operator|.
name|fs
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|translog
operator|.
name|Translog
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|FileChannel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_comment
comment|/**  * A base class for all classes that allows reading ops from translog files  */
end_comment

begin_class
DECL|class|FsChannelReader
specifier|public
specifier|abstract
class|class
name|FsChannelReader
implements|implements
name|Closeable
implements|,
name|Comparable
argument_list|<
name|FsChannelReader
argument_list|>
block|{
DECL|field|UNKNOWN_OP_COUNT
specifier|public
specifier|static
specifier|final
name|int
name|UNKNOWN_OP_COUNT
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|id
specifier|protected
specifier|final
name|long
name|id
decl_stmt|;
DECL|field|channelReference
specifier|protected
specifier|final
name|ChannelReference
name|channelReference
decl_stmt|;
DECL|field|channel
specifier|protected
specifier|final
name|FileChannel
name|channel
decl_stmt|;
DECL|field|closed
specifier|protected
specifier|final
name|AtomicBoolean
name|closed
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
DECL|method|FsChannelReader
specifier|public
name|FsChannelReader
parameter_list|(
name|long
name|id
parameter_list|,
name|ChannelReference
name|channelReference
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|channelReference
operator|=
name|channelReference
expr_stmt|;
name|this
operator|.
name|channel
operator|=
name|channelReference
operator|.
name|channel
argument_list|()
expr_stmt|;
assert|assert
name|channelReference
operator|.
name|assertAttach
argument_list|(
name|this
argument_list|)
assert|;
block|}
DECL|method|translogId
specifier|public
name|long
name|translogId
parameter_list|()
block|{
return|return
name|this
operator|.
name|id
return|;
block|}
DECL|method|sizeInBytes
specifier|abstract
specifier|public
name|long
name|sizeInBytes
parameter_list|()
function_decl|;
comment|/** the position the first operation is written at */
DECL|method|firstPosition
specifier|public
name|long
name|firstPosition
parameter_list|()
block|{
return|return
name|channelReference
operator|.
name|stream
argument_list|()
operator|.
name|headerLength
argument_list|()
return|;
block|}
DECL|method|totalOperations
specifier|abstract
specifier|public
name|int
name|totalOperations
parameter_list|()
function_decl|;
DECL|method|read
specifier|public
name|Translog
operator|.
name|Operation
name|read
parameter_list|(
name|Translog
operator|.
name|Location
name|location
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|location
operator|.
name|translogId
operator|==
name|id
operator|:
literal|"read location's translog id ["
operator|+
name|location
operator|.
name|translogId
operator|+
literal|"] is not ["
operator|+
name|id
operator|+
literal|"]"
assert|;
name|ByteBuffer
name|buffer
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|location
operator|.
name|size
argument_list|)
decl_stmt|;
return|return
name|read
argument_list|(
name|buffer
argument_list|,
name|location
operator|.
name|translogLocation
argument_list|,
name|location
operator|.
name|size
argument_list|)
return|;
block|}
comment|/** read the size of the op (i.e., number of bytes, including the op size) written at the given position */
DECL|method|readSize
specifier|public
name|int
name|readSize
parameter_list|(
name|ByteBuffer
name|reusableBuffer
parameter_list|,
name|long
name|position
parameter_list|)
block|{
comment|// read op size from disk
assert|assert
name|reusableBuffer
operator|.
name|capacity
argument_list|()
operator|>=
literal|4
operator|:
literal|"reusable buffer must have capacity>=4 when reading opSize. got ["
operator|+
name|reusableBuffer
operator|.
name|capacity
argument_list|()
operator|+
literal|"]"
assert|;
try|try
block|{
name|reusableBuffer
operator|.
name|clear
argument_list|()
expr_stmt|;
name|reusableBuffer
operator|.
name|limit
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|readBytes
argument_list|(
name|reusableBuffer
argument_list|,
name|position
argument_list|)
expr_stmt|;
name|reusableBuffer
operator|.
name|flip
argument_list|()
expr_stmt|;
comment|// Add an extra 4 to account for the operation size integer itself
return|return
name|reusableBuffer
operator|.
name|getInt
argument_list|()
operator|+
literal|4
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ElasticsearchException
argument_list|(
literal|"unexpected exception reading from translog snapshot of "
operator|+
name|this
operator|.
name|channelReference
operator|.
name|file
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * reads an operation at the given position and returns it. The buffer length is equal to the number      * of bytes reads.      */
DECL|method|read
specifier|public
name|Translog
operator|.
name|Operation
name|read
parameter_list|(
name|ByteBuffer
name|reusableBuffer
parameter_list|,
name|long
name|position
parameter_list|,
name|int
name|opSize
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|ByteBuffer
name|buffer
decl_stmt|;
if|if
condition|(
name|reusableBuffer
operator|.
name|capacity
argument_list|()
operator|>=
name|opSize
condition|)
block|{
name|buffer
operator|=
name|reusableBuffer
expr_stmt|;
block|}
else|else
block|{
name|buffer
operator|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|opSize
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|clear
argument_list|()
expr_stmt|;
name|buffer
operator|.
name|limit
argument_list|(
name|opSize
argument_list|)
expr_stmt|;
name|readBytes
argument_list|(
name|buffer
argument_list|,
name|position
argument_list|)
expr_stmt|;
name|BytesArray
name|bytesArray
init|=
operator|new
name|BytesArray
argument_list|(
name|buffer
operator|.
name|array
argument_list|()
argument_list|,
literal|0
argument_list|,
name|buffer
operator|.
name|limit
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|channelReference
operator|.
name|stream
argument_list|()
operator|.
name|read
argument_list|(
name|bytesArray
operator|.
name|streamInput
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * reads bytes at position into the given buffer, filling it.      */
DECL|method|readBytes
specifier|abstract
specifier|protected
name|void
name|readBytes
parameter_list|(
name|ByteBuffer
name|buffer
parameter_list|,
name|long
name|position
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/** create snapshot for this channel */
DECL|method|newSnapshot
specifier|abstract
specifier|public
name|FsChannelSnapshot
name|newSnapshot
parameter_list|()
function_decl|;
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|closed
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|doClose
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|doClose
specifier|protected
name|void
name|doClose
parameter_list|()
throws|throws
name|IOException
block|{
assert|assert
name|channelReference
operator|.
name|assertDetach
argument_list|(
name|this
argument_list|)
assert|;
name|channelReference
operator|.
name|decRef
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"translog ["
operator|+
name|id
operator|+
literal|"]["
operator|+
name|channelReference
operator|.
name|file
argument_list|()
operator|+
literal|"]"
return|;
block|}
annotation|@
name|Override
DECL|method|compareTo
specifier|public
name|int
name|compareTo
parameter_list|(
name|FsChannelReader
name|o
parameter_list|)
block|{
return|return
name|Long
operator|.
name|compare
argument_list|(
name|translogId
argument_list|()
argument_list|,
name|o
operator|.
name|translogId
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

