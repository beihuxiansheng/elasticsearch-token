begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.translog.fs
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|translog
operator|.
name|fs
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|translog
operator|.
name|Translog
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_comment
comment|/**  * an implementation of {@link org.elasticsearch.index.translog.Translog.Snapshot}, wrapping  * a {@link FsChannelReader}. This class is NOT thread-safe.  */
end_comment

begin_class
DECL|class|FsChannelSnapshot
specifier|public
class|class
name|FsChannelSnapshot
implements|implements
name|Closeable
block|{
DECL|field|reader
specifier|protected
specifier|final
name|FsChannelReader
name|reader
decl_stmt|;
DECL|field|closed
specifier|protected
specifier|final
name|AtomicBoolean
name|closed
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
comment|// we use an atomic long to allow passing it by reference :(
DECL|field|position
specifier|protected
name|long
name|position
decl_stmt|;
DECL|method|FsChannelSnapshot
specifier|public
name|FsChannelSnapshot
parameter_list|(
name|FsChannelReader
name|reader
parameter_list|)
block|{
name|this
operator|.
name|reader
operator|=
name|reader
expr_stmt|;
name|this
operator|.
name|position
operator|=
name|reader
operator|.
name|firstPosition
argument_list|()
expr_stmt|;
block|}
DECL|method|translogId
specifier|public
name|long
name|translogId
parameter_list|()
block|{
return|return
name|reader
operator|.
name|translogId
argument_list|()
return|;
block|}
DECL|method|estimatedTotalOperations
specifier|public
name|int
name|estimatedTotalOperations
parameter_list|()
block|{
return|return
name|reader
operator|.
name|totalOperations
argument_list|()
return|;
block|}
DECL|method|next
specifier|public
name|Translog
operator|.
name|Operation
name|next
parameter_list|(
name|ByteBuffer
name|reusableBuffer
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|position
operator|>=
name|reader
operator|.
name|sizeInBytes
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|int
name|opSize
init|=
name|reader
operator|.
name|readSize
argument_list|(
name|reusableBuffer
argument_list|,
name|position
argument_list|)
decl_stmt|;
name|Translog
operator|.
name|Operation
name|op
init|=
name|reader
operator|.
name|read
argument_list|(
name|reusableBuffer
argument_list|,
name|position
argument_list|,
name|opSize
argument_list|)
decl_stmt|;
name|position
operator|+=
name|opSize
expr_stmt|;
return|return
name|op
return|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
name|closed
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
try|try
block|{
name|IOUtils
operator|.
name|close
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ElasticsearchException
argument_list|(
literal|"failed to close translogs"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

