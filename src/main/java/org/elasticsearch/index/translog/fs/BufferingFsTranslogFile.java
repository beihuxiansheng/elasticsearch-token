begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.translog.fs
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|translog
operator|.
name|fs
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|Channels
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|translog
operator|.
name|Translog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|translog
operator|.
name|TranslogException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReadWriteLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
DECL|class|BufferingFsTranslogFile
specifier|public
class|class
name|BufferingFsTranslogFile
implements|implements
name|FsTranslogFile
block|{
DECL|field|id
specifier|private
specifier|final
name|long
name|id
decl_stmt|;
DECL|field|shardId
specifier|private
specifier|final
name|ShardId
name|shardId
decl_stmt|;
DECL|field|raf
specifier|private
specifier|final
name|RafReference
name|raf
decl_stmt|;
DECL|field|rwl
specifier|private
specifier|final
name|ReadWriteLock
name|rwl
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
decl_stmt|;
DECL|field|closed
specifier|private
specifier|final
name|AtomicBoolean
name|closed
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
DECL|field|operationCounter
specifier|private
specifier|volatile
name|int
name|operationCounter
decl_stmt|;
DECL|field|lastPosition
specifier|private
specifier|volatile
name|long
name|lastPosition
decl_stmt|;
DECL|field|lastWrittenPosition
specifier|private
specifier|volatile
name|long
name|lastWrittenPosition
decl_stmt|;
DECL|field|lastSyncPosition
specifier|private
specifier|volatile
name|long
name|lastSyncPosition
init|=
literal|0
decl_stmt|;
DECL|field|buffer
specifier|private
name|byte
index|[]
name|buffer
decl_stmt|;
DECL|field|bufferCount
specifier|private
name|int
name|bufferCount
decl_stmt|;
DECL|field|bufferOs
specifier|private
name|WrapperOutputStream
name|bufferOs
init|=
operator|new
name|WrapperOutputStream
argument_list|()
decl_stmt|;
DECL|method|BufferingFsTranslogFile
specifier|public
name|BufferingFsTranslogFile
parameter_list|(
name|ShardId
name|shardId
parameter_list|,
name|long
name|id
parameter_list|,
name|RafReference
name|raf
parameter_list|,
name|int
name|bufferSize
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|shardId
operator|=
name|shardId
expr_stmt|;
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|raf
operator|=
name|raf
expr_stmt|;
name|this
operator|.
name|buffer
operator|=
operator|new
name|byte
index|[
name|bufferSize
index|]
expr_stmt|;
name|raf
operator|.
name|raf
argument_list|()
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|id
specifier|public
name|long
name|id
parameter_list|()
block|{
return|return
name|this
operator|.
name|id
return|;
block|}
DECL|method|estimatedNumberOfOperations
specifier|public
name|int
name|estimatedNumberOfOperations
parameter_list|()
block|{
return|return
name|operationCounter
return|;
block|}
DECL|method|translogSizeInBytes
specifier|public
name|long
name|translogSizeInBytes
parameter_list|()
block|{
return|return
name|lastWrittenPosition
return|;
block|}
annotation|@
name|Override
DECL|method|add
specifier|public
name|Translog
operator|.
name|Location
name|add
parameter_list|(
name|BytesReference
name|data
parameter_list|)
throws|throws
name|IOException
block|{
name|rwl
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|operationCounter
operator|++
expr_stmt|;
name|long
name|position
init|=
name|lastPosition
decl_stmt|;
if|if
condition|(
name|data
operator|.
name|length
argument_list|()
operator|>=
name|buffer
operator|.
name|length
condition|)
block|{
name|flushBuffer
argument_list|()
expr_stmt|;
comment|// we use the channel to write, since on windows, writing to the RAF might not be reflected
comment|// when reading through the channel
name|data
operator|.
name|writeTo
argument_list|(
name|raf
operator|.
name|channel
argument_list|()
argument_list|)
expr_stmt|;
name|lastWrittenPosition
operator|+=
name|data
operator|.
name|length
argument_list|()
expr_stmt|;
name|lastPosition
operator|+=
name|data
operator|.
name|length
argument_list|()
expr_stmt|;
return|return
operator|new
name|Translog
operator|.
name|Location
argument_list|(
name|id
argument_list|,
name|position
argument_list|,
name|data
operator|.
name|length
argument_list|()
argument_list|)
return|;
block|}
if|if
condition|(
name|data
operator|.
name|length
argument_list|()
operator|>
name|buffer
operator|.
name|length
operator|-
name|bufferCount
condition|)
block|{
name|flushBuffer
argument_list|()
expr_stmt|;
block|}
name|data
operator|.
name|writeTo
argument_list|(
name|bufferOs
argument_list|)
expr_stmt|;
name|lastPosition
operator|+=
name|data
operator|.
name|length
argument_list|()
expr_stmt|;
return|return
operator|new
name|Translog
operator|.
name|Location
argument_list|(
name|id
argument_list|,
name|position
argument_list|,
name|data
operator|.
name|length
argument_list|()
argument_list|)
return|;
block|}
finally|finally
block|{
name|rwl
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|flushBuffer
specifier|private
name|void
name|flushBuffer
parameter_list|()
throws|throws
name|IOException
block|{
assert|assert
operator|(
operator|(
operator|(
name|ReentrantReadWriteLock
operator|.
name|WriteLock
operator|)
name|rwl
operator|.
name|writeLock
argument_list|()
operator|)
operator|.
name|isHeldByCurrentThread
argument_list|()
operator|)
assert|;
if|if
condition|(
name|bufferCount
operator|>
literal|0
condition|)
block|{
comment|// we use the channel to write, since on windows, writing to the RAF might not be reflected
comment|// when reading through the channel
name|Channels
operator|.
name|writeToChannel
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|bufferCount
argument_list|,
name|raf
operator|.
name|channel
argument_list|()
argument_list|)
expr_stmt|;
name|lastWrittenPosition
operator|+=
name|bufferCount
expr_stmt|;
name|bufferCount
operator|=
literal|0
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|read
specifier|public
name|byte
index|[]
name|read
parameter_list|(
name|Translog
operator|.
name|Location
name|location
parameter_list|)
throws|throws
name|IOException
block|{
name|rwl
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|location
operator|.
name|translogLocation
operator|>=
name|lastWrittenPosition
condition|)
block|{
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|location
operator|.
name|size
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|buffer
argument_list|,
call|(
name|int
call|)
argument_list|(
name|location
operator|.
name|translogLocation
operator|-
name|lastWrittenPosition
argument_list|)
argument_list|,
name|data
argument_list|,
literal|0
argument_list|,
name|location
operator|.
name|size
argument_list|)
expr_stmt|;
return|return
name|data
return|;
block|}
block|}
finally|finally
block|{
name|rwl
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
comment|// we don't have to have a read lock here because we only write ahead to the file, so all writes has been complete
comment|// for the requested location.
return|return
name|Channels
operator|.
name|readFromFileChannel
argument_list|(
name|raf
operator|.
name|channel
argument_list|()
argument_list|,
name|location
operator|.
name|translogLocation
argument_list|,
name|location
operator|.
name|size
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|snapshot
specifier|public
name|FsChannelSnapshot
name|snapshot
parameter_list|()
throws|throws
name|TranslogException
block|{
if|if
condition|(
name|raf
operator|.
name|increaseRefCount
argument_list|()
condition|)
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|rwl
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|flushBuffer
argument_list|()
expr_stmt|;
name|FsChannelSnapshot
name|snapshot
init|=
operator|new
name|FsChannelSnapshot
argument_list|(
name|this
operator|.
name|id
argument_list|,
name|raf
argument_list|,
name|lastWrittenPosition
argument_list|,
name|operationCounter
argument_list|)
decl_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
return|return
name|snapshot
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TranslogException
argument_list|(
name|shardId
argument_list|,
literal|"exception while creating snapshot"
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|rwl
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|raf
operator|.
name|decreaseRefCount
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|syncNeeded
specifier|public
name|boolean
name|syncNeeded
parameter_list|()
block|{
return|return
name|lastPosition
operator|!=
name|lastSyncPosition
return|;
block|}
annotation|@
name|Override
DECL|method|sync
specifier|public
name|void
name|sync
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|syncNeeded
argument_list|()
condition|)
block|{
return|return;
block|}
name|rwl
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|flushBuffer
argument_list|()
expr_stmt|;
name|lastSyncPosition
operator|=
name|lastPosition
expr_stmt|;
block|}
finally|finally
block|{
name|rwl
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
name|raf
operator|.
name|channel
argument_list|()
operator|.
name|force
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|(
name|boolean
name|delete
parameter_list|)
block|{
if|if
condition|(
operator|!
name|closed
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
return|return;
block|}
try|try
block|{
if|if
condition|(
operator|!
name|delete
condition|)
block|{
try|try
block|{
name|sync
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TranslogException
argument_list|(
name|shardId
argument_list|,
literal|"failed to sync on close"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
finally|finally
block|{
name|raf
operator|.
name|decreaseRefCount
argument_list|(
name|delete
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|reuse
specifier|public
name|void
name|reuse
parameter_list|(
name|FsTranslogFile
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|other
operator|instanceof
name|BufferingFsTranslogFile
operator|)
condition|)
block|{
return|return;
block|}
name|rwl
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|flushBuffer
argument_list|()
expr_stmt|;
name|this
operator|.
name|buffer
operator|=
operator|(
operator|(
name|BufferingFsTranslogFile
operator|)
name|other
operator|)
operator|.
name|buffer
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TranslogException
argument_list|(
name|shardId
argument_list|,
literal|"failed to flush"
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|rwl
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|updateBufferSize
specifier|public
name|void
name|updateBufferSize
parameter_list|(
name|int
name|bufferSize
parameter_list|)
block|{
name|rwl
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|this
operator|.
name|buffer
operator|.
name|length
operator|==
name|bufferSize
condition|)
block|{
return|return;
block|}
name|flushBuffer
argument_list|()
expr_stmt|;
name|this
operator|.
name|buffer
operator|=
operator|new
name|byte
index|[
name|bufferSize
index|]
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TranslogException
argument_list|(
name|shardId
argument_list|,
literal|"failed to flush"
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|rwl
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|WrapperOutputStream
class|class
name|WrapperOutputStream
extends|extends
name|OutputStream
block|{
annotation|@
name|Override
DECL|method|write
specifier|public
name|void
name|write
parameter_list|(
name|int
name|b
parameter_list|)
throws|throws
name|IOException
block|{
name|buffer
index|[
name|bufferCount
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
name|b
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|write
specifier|public
name|void
name|write
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
comment|// we do safety checked when we decide to use this stream...
name|System
operator|.
name|arraycopy
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|buffer
argument_list|,
name|bufferCount
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|bufferCount
operator|+=
name|len
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

