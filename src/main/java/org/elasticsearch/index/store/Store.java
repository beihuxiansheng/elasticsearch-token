begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.store
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|store
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|MapBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|compress
operator|.
name|Compressor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|compress
operator|.
name|CompressorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|Directories
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|store
operator|.
name|BufferedChecksumIndexOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|store
operator|.
name|ChecksumIndexOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|ByteSizeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|settings
operator|.
name|IndexSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|AbstractIndexShardComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|store
operator|.
name|distributor
operator|.
name|Distributor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|store
operator|.
name|support
operator|.
name|ForceSyncDirectory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|Adler32
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
DECL|class|Store
specifier|public
class|class
name|Store
extends|extends
name|AbstractIndexShardComponent
block|{
DECL|field|CHECKSUMS_PREFIX
specifier|static
specifier|final
name|String
name|CHECKSUMS_PREFIX
init|=
literal|"_checksums-"
decl_stmt|;
DECL|method|isChecksum
specifier|public
specifier|static
specifier|final
name|boolean
name|isChecksum
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|name
operator|.
name|startsWith
argument_list|(
name|CHECKSUMS_PREFIX
argument_list|)
return|;
block|}
DECL|field|indexStore
specifier|private
specifier|final
name|IndexStore
name|indexStore
decl_stmt|;
DECL|field|directoryService
specifier|private
specifier|final
name|DirectoryService
name|directoryService
decl_stmt|;
DECL|field|directory
specifier|private
specifier|final
name|StoreDirectory
name|directory
decl_stmt|;
DECL|field|filesMetadata
specifier|private
specifier|volatile
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|StoreFileMetaData
argument_list|>
name|filesMetadata
init|=
name|ImmutableMap
operator|.
name|of
argument_list|()
decl_stmt|;
DECL|field|files
specifier|private
specifier|volatile
name|String
index|[]
name|files
init|=
name|Strings
operator|.
name|EMPTY_ARRAY
decl_stmt|;
DECL|field|mutex
specifier|private
specifier|final
name|Object
name|mutex
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
DECL|field|sync
specifier|private
specifier|final
name|boolean
name|sync
decl_stmt|;
annotation|@
name|Inject
DECL|method|Store
specifier|public
name|Store
parameter_list|(
name|ShardId
name|shardId
parameter_list|,
annotation|@
name|IndexSettings
name|Settings
name|indexSettings
parameter_list|,
name|IndexStore
name|indexStore
parameter_list|,
name|DirectoryService
name|directoryService
parameter_list|,
name|Distributor
name|distributor
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|shardId
argument_list|,
name|indexSettings
argument_list|)
expr_stmt|;
name|this
operator|.
name|indexStore
operator|=
name|indexStore
expr_stmt|;
name|this
operator|.
name|directoryService
operator|=
name|directoryService
expr_stmt|;
name|this
operator|.
name|sync
operator|=
name|componentSettings
operator|.
name|getAsBoolean
argument_list|(
literal|"sync"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// TODO we don't really need to fsync when using shared gateway...
name|this
operator|.
name|directory
operator|=
operator|new
name|StoreDirectory
argument_list|(
name|distributor
argument_list|)
expr_stmt|;
block|}
DECL|method|indexStore
specifier|public
name|IndexStore
name|indexStore
parameter_list|()
block|{
return|return
name|this
operator|.
name|indexStore
return|;
block|}
DECL|method|directory
specifier|public
name|Directory
name|directory
parameter_list|()
block|{
return|return
name|directory
return|;
block|}
DECL|method|list
specifier|public
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|StoreFileMetaData
argument_list|>
name|list
parameter_list|()
throws|throws
name|IOException
block|{
name|ImmutableMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|StoreFileMetaData
argument_list|>
name|builder
init|=
name|ImmutableMap
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|files
control|)
block|{
name|StoreFileMetaData
name|md
init|=
name|metaData
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|md
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|put
argument_list|(
name|md
operator|.
name|name
argument_list|()
argument_list|,
name|md
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|metaData
specifier|public
name|StoreFileMetaData
name|metaData
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|StoreFileMetaData
name|md
init|=
name|filesMetadata
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|md
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// IndexOutput not closed, does not exists
if|if
condition|(
name|md
operator|.
name|length
argument_list|()
operator|==
operator|-
literal|1
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|md
return|;
block|}
DECL|method|deleteContent
specifier|public
name|void
name|deleteContent
parameter_list|()
throws|throws
name|IOException
block|{
name|String
index|[]
name|files
init|=
name|directory
operator|.
name|listAll
argument_list|()
decl_stmt|;
name|IOException
name|lastException
init|=
literal|null
decl_stmt|;
for|for
control|(
name|String
name|file
range|:
name|files
control|)
block|{
if|if
condition|(
name|isChecksum
argument_list|(
name|file
argument_list|)
condition|)
block|{
try|try
block|{
name|directory
operator|.
name|deleteFileChecksum
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|lastException
operator|=
name|e
expr_stmt|;
block|}
block|}
else|else
block|{
try|try
block|{
name|directory
operator|.
name|deleteFile
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|lastException
operator|=
name|e
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|lastException
operator|!=
literal|null
condition|)
block|{
throw|throw
name|lastException
throw|;
block|}
block|}
DECL|method|fullDelete
specifier|public
name|void
name|fullDelete
parameter_list|()
throws|throws
name|IOException
block|{
name|deleteContent
argument_list|()
expr_stmt|;
for|for
control|(
name|Directory
name|delegate
range|:
name|directory
operator|.
name|delegates
argument_list|()
control|)
block|{
name|directoryService
operator|.
name|fullDelete
argument_list|(
name|delegate
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|stats
specifier|public
name|StoreStats
name|stats
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|StoreStats
argument_list|(
name|Directories
operator|.
name|estimateSize
argument_list|(
name|directory
argument_list|)
argument_list|,
name|directoryService
operator|.
name|throttleTimeInNanos
argument_list|()
argument_list|)
return|;
block|}
DECL|method|estimateSize
specifier|public
name|ByteSizeValue
name|estimateSize
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|ByteSizeValue
argument_list|(
name|Directories
operator|.
name|estimateSize
argument_list|(
name|directory
argument_list|)
argument_list|)
return|;
block|}
DECL|method|renameFile
specifier|public
name|void
name|renameFile
parameter_list|(
name|String
name|from
parameter_list|,
name|String
name|to
parameter_list|)
throws|throws
name|IOException
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
name|StoreFileMetaData
name|fromMetaData
init|=
name|filesMetadata
operator|.
name|get
argument_list|(
name|from
argument_list|)
decl_stmt|;
comment|// we should always find this one
if|if
condition|(
name|fromMetaData
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
name|from
argument_list|)
throw|;
block|}
name|directoryService
operator|.
name|renameFile
argument_list|(
name|fromMetaData
operator|.
name|directory
argument_list|()
argument_list|,
name|from
argument_list|,
name|to
argument_list|)
expr_stmt|;
name|StoreFileMetaData
name|toMetaData
init|=
operator|new
name|StoreFileMetaData
argument_list|(
name|to
argument_list|,
name|fromMetaData
operator|.
name|length
argument_list|()
argument_list|,
name|fromMetaData
operator|.
name|checksum
argument_list|()
argument_list|,
name|fromMetaData
operator|.
name|directory
argument_list|()
argument_list|)
decl_stmt|;
name|filesMetadata
operator|=
name|MapBuilder
operator|.
name|newMapBuilder
argument_list|(
name|filesMetadata
argument_list|)
operator|.
name|remove
argument_list|(
name|from
argument_list|)
operator|.
name|put
argument_list|(
name|to
argument_list|,
name|toMetaData
argument_list|)
operator|.
name|immutableMap
argument_list|()
expr_stmt|;
name|files
operator|=
name|filesMetadata
operator|.
name|keySet
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|filesMetadata
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|readChecksums
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|readChecksums
parameter_list|(
name|File
index|[]
name|locations
parameter_list|)
throws|throws
name|IOException
block|{
name|Directory
index|[]
name|dirs
init|=
operator|new
name|Directory
index|[
name|locations
operator|.
name|length
index|]
decl_stmt|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|locations
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|dirs
index|[
name|i
index|]
operator|=
operator|new
name|SimpleFSDirectory
argument_list|(
name|locations
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|readChecksums
argument_list|(
name|dirs
argument_list|,
literal|null
argument_list|)
return|;
block|}
finally|finally
block|{
for|for
control|(
name|Directory
name|dir
range|:
name|dirs
control|)
block|{
if|if
condition|(
name|dir
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
block|}
block|}
DECL|method|readChecksums
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|readChecksums
parameter_list|(
name|Directory
index|[]
name|dirs
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|defaultValue
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|lastFound
init|=
operator|-
literal|1
decl_stmt|;
name|Directory
name|lastDir
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Directory
name|dir
range|:
name|dirs
control|)
block|{
for|for
control|(
name|String
name|name
range|:
name|dir
operator|.
name|listAll
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|isChecksum
argument_list|(
name|name
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|long
name|current
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|name
operator|.
name|substring
argument_list|(
name|CHECKSUMS_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|current
operator|>
name|lastFound
condition|)
block|{
name|lastFound
operator|=
name|current
expr_stmt|;
name|lastDir
operator|=
name|dir
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|lastFound
operator|==
operator|-
literal|1
condition|)
block|{
return|return
name|defaultValue
return|;
block|}
name|IndexInput
name|indexInput
init|=
name|lastDir
operator|.
name|openInput
argument_list|(
name|CHECKSUMS_PREFIX
operator|+
name|lastFound
argument_list|,
name|IOContext
operator|.
name|READONCE
argument_list|)
decl_stmt|;
try|try
block|{
name|indexInput
operator|.
name|readInt
argument_list|()
expr_stmt|;
comment|// version
return|return
name|indexInput
operator|.
name|readStringStringMap
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// failed to load checksums, ignore and return an empty map
return|return
name|defaultValue
return|;
block|}
finally|finally
block|{
name|indexInput
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|writeChecksums
specifier|public
name|void
name|writeChecksums
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|checksumName
init|=
name|CHECKSUMS_PREFIX
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|StoreFileMetaData
argument_list|>
name|files
init|=
name|list
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|mutex
init|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|checksums
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|StoreFileMetaData
name|metaData
range|:
name|files
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|metaData
operator|.
name|checksum
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|checksums
operator|.
name|put
argument_list|(
name|metaData
operator|.
name|name
argument_list|()
argument_list|,
name|metaData
operator|.
name|checksum
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|IndexOutput
name|output
init|=
name|directory
operator|.
name|createOutput
argument_list|(
name|checksumName
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|output
operator|.
name|writeInt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// version
name|output
operator|.
name|writeStringStringMap
argument_list|(
name|checksums
argument_list|)
expr_stmt|;
name|output
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|StoreFileMetaData
name|metaData
range|:
name|files
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|metaData
operator|.
name|name
argument_list|()
operator|.
name|startsWith
argument_list|(
name|CHECKSUMS_PREFIX
argument_list|)
operator|&&
operator|!
name|checksumName
operator|.
name|equals
argument_list|(
name|metaData
operator|.
name|name
argument_list|()
argument_list|)
condition|)
block|{
try|try
block|{
name|directory
operator|.
name|deleteFileChecksum
argument_list|(
name|metaData
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
block|}
comment|/**      * Returns<tt>true</tt> by default.      */
DECL|method|suggestUseCompoundFile
specifier|public
name|boolean
name|suggestUseCompoundFile
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|directory
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**      * Creates a raw output, no checksum is computed, and no compression if enabled.      */
DECL|method|createOutputRaw
specifier|public
name|IndexOutput
name|createOutputRaw
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|directory
operator|.
name|createOutput
argument_list|(
name|name
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**      * Opened an index input in raw form, no decompression for example.      */
DECL|method|openInputRaw
specifier|public
name|IndexInput
name|openInputRaw
parameter_list|(
name|String
name|name
parameter_list|,
name|IOContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|StoreFileMetaData
name|metaData
init|=
name|filesMetadata
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|metaData
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
name|name
argument_list|)
throw|;
block|}
return|return
name|metaData
operator|.
name|directory
argument_list|()
operator|.
name|openInput
argument_list|(
name|name
argument_list|,
name|context
argument_list|)
return|;
block|}
DECL|method|writeChecksum
specifier|public
name|void
name|writeChecksum
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|checksum
parameter_list|)
throws|throws
name|IOException
block|{
comment|// update the metadata to include the checksum and write a new checksums file
synchronized|synchronized
init|(
name|mutex
init|)
block|{
name|StoreFileMetaData
name|metaData
init|=
name|filesMetadata
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|metaData
operator|=
operator|new
name|StoreFileMetaData
argument_list|(
name|metaData
operator|.
name|name
argument_list|()
argument_list|,
name|metaData
operator|.
name|length
argument_list|()
argument_list|,
name|checksum
argument_list|,
name|metaData
operator|.
name|directory
argument_list|()
argument_list|)
expr_stmt|;
name|filesMetadata
operator|=
name|MapBuilder
operator|.
name|newMapBuilder
argument_list|(
name|filesMetadata
argument_list|)
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|metaData
argument_list|)
operator|.
name|immutableMap
argument_list|()
expr_stmt|;
name|writeChecksums
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|writeChecksums
specifier|public
name|void
name|writeChecksums
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|checksums
parameter_list|)
throws|throws
name|IOException
block|{
comment|// update the metadata to include the checksum and write a new checksums file
synchronized|synchronized
init|(
name|mutex
init|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|checksums
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|StoreFileMetaData
name|metaData
init|=
name|filesMetadata
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|metaData
operator|=
operator|new
name|StoreFileMetaData
argument_list|(
name|metaData
operator|.
name|name
argument_list|()
argument_list|,
name|metaData
operator|.
name|length
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|metaData
operator|.
name|directory
argument_list|()
argument_list|)
expr_stmt|;
name|filesMetadata
operator|=
name|MapBuilder
operator|.
name|newMapBuilder
argument_list|(
name|filesMetadata
argument_list|)
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|metaData
argument_list|)
operator|.
name|immutableMap
argument_list|()
expr_stmt|;
block|}
name|writeChecksums
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * The idea of the store directory is to cache file level meta data, as well as md5 of it      */
DECL|class|StoreDirectory
class|class
name|StoreDirectory
extends|extends
name|Directory
implements|implements
name|ForceSyncDirectory
block|{
DECL|field|distributor
specifier|private
specifier|final
name|Distributor
name|distributor
decl_stmt|;
DECL|method|StoreDirectory
name|StoreDirectory
parameter_list|(
name|Distributor
name|distributor
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|distributor
operator|=
name|distributor
expr_stmt|;
synchronized|synchronized
init|(
name|mutex
init|)
block|{
name|MapBuilder
argument_list|<
name|String
argument_list|,
name|StoreFileMetaData
argument_list|>
name|builder
init|=
name|MapBuilder
operator|.
name|newMapBuilder
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|checksums
init|=
name|readChecksums
argument_list|(
name|distributor
operator|.
name|all
argument_list|()
argument_list|,
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Directory
name|delegate
range|:
name|distributor
operator|.
name|all
argument_list|()
control|)
block|{
for|for
control|(
name|String
name|file
range|:
name|delegate
operator|.
name|listAll
argument_list|()
control|)
block|{
name|String
name|checksum
init|=
name|checksums
operator|.
name|get
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|builder
operator|.
name|put
argument_list|(
name|file
argument_list|,
operator|new
name|StoreFileMetaData
argument_list|(
name|file
argument_list|,
name|delegate
operator|.
name|fileLength
argument_list|(
name|file
argument_list|)
argument_list|,
name|checksum
argument_list|,
name|delegate
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|filesMetadata
operator|=
name|builder
operator|.
name|immutableMap
argument_list|()
expr_stmt|;
name|files
operator|=
name|filesMetadata
operator|.
name|keySet
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|filesMetadata
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|delegates
specifier|public
name|Directory
index|[]
name|delegates
parameter_list|()
block|{
return|return
name|distributor
operator|.
name|all
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|copy
specifier|public
name|void
name|copy
parameter_list|(
name|Directory
name|to
parameter_list|,
name|String
name|src
parameter_list|,
name|String
name|dest
parameter_list|,
name|IOContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
comment|// lets the default implementation happen, so we properly open an input and create an output
name|super
operator|.
name|copy
argument_list|(
name|to
argument_list|,
name|src
argument_list|,
name|dest
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|listAll
specifier|public
name|String
index|[]
name|listAll
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|files
return|;
block|}
annotation|@
name|Override
DECL|method|fileExists
specifier|public
name|boolean
name|fileExists
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|filesMetadata
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
return|;
block|}
DECL|method|deleteFileChecksum
specifier|public
name|void
name|deleteFileChecksum
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|StoreFileMetaData
name|metaData
init|=
name|filesMetadata
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|metaData
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|metaData
operator|.
name|directory
argument_list|()
operator|.
name|deleteFile
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|metaData
operator|.
name|directory
argument_list|()
operator|.
name|fileExists
argument_list|(
name|name
argument_list|)
condition|)
block|{
throw|throw
name|e
throw|;
block|}
block|}
block|}
synchronized|synchronized
init|(
name|mutex
init|)
block|{
name|filesMetadata
operator|=
name|MapBuilder
operator|.
name|newMapBuilder
argument_list|(
name|filesMetadata
argument_list|)
operator|.
name|remove
argument_list|(
name|name
argument_list|)
operator|.
name|immutableMap
argument_list|()
expr_stmt|;
name|files
operator|=
name|filesMetadata
operator|.
name|keySet
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|filesMetadata
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|deleteFile
specifier|public
name|void
name|deleteFile
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
comment|// we don't allow to delete the checksums files, only using the deleteChecksum method
if|if
condition|(
name|isChecksum
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return;
block|}
name|StoreFileMetaData
name|metaData
init|=
name|filesMetadata
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|metaData
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|metaData
operator|.
name|directory
argument_list|()
operator|.
name|deleteFile
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|metaData
operator|.
name|directory
argument_list|()
operator|.
name|fileExists
argument_list|(
name|name
argument_list|)
condition|)
block|{
throw|throw
name|e
throw|;
block|}
block|}
block|}
synchronized|synchronized
init|(
name|mutex
init|)
block|{
name|filesMetadata
operator|=
name|MapBuilder
operator|.
name|newMapBuilder
argument_list|(
name|filesMetadata
argument_list|)
operator|.
name|remove
argument_list|(
name|name
argument_list|)
operator|.
name|immutableMap
argument_list|()
expr_stmt|;
name|files
operator|=
name|filesMetadata
operator|.
name|keySet
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|filesMetadata
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**          * Returns the *actual* file length, not the uncompressed one if compression is enabled, this          * messes things up when using compound file format, but it shouldn't be used in any case...          */
annotation|@
name|Override
DECL|method|fileLength
specifier|public
name|long
name|fileLength
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|StoreFileMetaData
name|metaData
init|=
name|filesMetadata
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|metaData
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
name|name
argument_list|)
throw|;
block|}
comment|// not set yet (IndexOutput not closed)
if|if
condition|(
name|metaData
operator|.
name|length
argument_list|()
operator|!=
operator|-
literal|1
condition|)
block|{
return|return
name|metaData
operator|.
name|length
argument_list|()
return|;
block|}
return|return
name|metaData
operator|.
name|directory
argument_list|()
operator|.
name|fileLength
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|createOutput
specifier|public
name|IndexOutput
name|createOutput
parameter_list|(
name|String
name|name
parameter_list|,
name|IOContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|createOutput
argument_list|(
name|name
argument_list|,
name|context
argument_list|,
literal|false
argument_list|)
return|;
block|}
DECL|method|createOutput
specifier|public
name|IndexOutput
name|createOutput
parameter_list|(
name|String
name|name
parameter_list|,
name|IOContext
name|context
parameter_list|,
name|boolean
name|raw
parameter_list|)
throws|throws
name|IOException
block|{
name|Directory
name|directory
decl_stmt|;
if|if
condition|(
name|isChecksum
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|directory
operator|=
name|distributor
operator|.
name|primary
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|directory
operator|=
name|distributor
operator|.
name|any
argument_list|()
expr_stmt|;
block|}
name|IndexOutput
name|out
init|=
name|directory
operator|.
name|createOutput
argument_list|(
name|name
argument_list|,
name|context
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|mutex
init|)
block|{
name|StoreFileMetaData
name|metaData
init|=
operator|new
name|StoreFileMetaData
argument_list|(
name|name
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|,
name|directory
argument_list|)
decl_stmt|;
name|filesMetadata
operator|=
name|MapBuilder
operator|.
name|newMapBuilder
argument_list|(
name|filesMetadata
argument_list|)
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|metaData
argument_list|)
operator|.
name|immutableMap
argument_list|()
expr_stmt|;
name|files
operator|=
name|filesMetadata
operator|.
name|keySet
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|filesMetadata
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
name|boolean
name|computeChecksum
init|=
operator|!
name|raw
decl_stmt|;
if|if
condition|(
name|computeChecksum
condition|)
block|{
comment|// don't compute checksum for segment based files
if|if
condition|(
literal|"segments.gen"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|||
name|name
operator|.
name|startsWith
argument_list|(
literal|"segments"
argument_list|)
condition|)
block|{
name|computeChecksum
operator|=
literal|false
expr_stmt|;
block|}
block|}
if|if
condition|(
name|computeChecksum
condition|)
block|{
name|out
operator|=
operator|new
name|BufferedChecksumIndexOutput
argument_list|(
name|out
argument_list|,
operator|new
name|Adler32
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|StoreIndexOutput
argument_list|(
name|metaData
argument_list|,
name|out
argument_list|,
name|name
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|openInput
specifier|public
name|IndexInput
name|openInput
parameter_list|(
name|String
name|name
parameter_list|,
name|IOContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|StoreFileMetaData
name|metaData
init|=
name|filesMetadata
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|metaData
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
name|name
argument_list|)
throw|;
block|}
name|IndexInput
name|in
init|=
name|metaData
operator|.
name|directory
argument_list|()
operator|.
name|openInput
argument_list|(
name|name
argument_list|,
name|context
argument_list|)
decl_stmt|;
comment|// Only for backward comp. since we now use Lucene codec compression
if|if
condition|(
name|name
operator|.
name|endsWith
argument_list|(
literal|".fdt"
argument_list|)
operator|||
name|name
operator|.
name|endsWith
argument_list|(
literal|".tvf"
argument_list|)
condition|)
block|{
name|Compressor
name|compressor
init|=
name|CompressorFactory
operator|.
name|compressor
argument_list|(
name|in
argument_list|)
decl_stmt|;
if|if
condition|(
name|compressor
operator|!=
literal|null
condition|)
block|{
name|in
operator|=
name|compressor
operator|.
name|indexInput
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|in
return|;
block|}
annotation|@
name|Override
DECL|method|createSlicer
specifier|public
name|IndexInputSlicer
name|createSlicer
parameter_list|(
name|String
name|name
parameter_list|,
name|IOContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|StoreFileMetaData
name|metaData
init|=
name|filesMetadata
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|metaData
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
name|name
argument_list|)
throw|;
block|}
comment|// Only for backward comp. since we now use Lucene codec compression
if|if
condition|(
name|name
operator|.
name|endsWith
argument_list|(
literal|".fdt"
argument_list|)
operator|||
name|name
operator|.
name|endsWith
argument_list|(
literal|".tvf"
argument_list|)
condition|)
block|{
comment|// rely on the slicer from the base class that uses an input, since they might be compressed...
comment|// note, it seems like slicers are only used in compound file format..., so not relevant for now
return|return
name|super
operator|.
name|createSlicer
argument_list|(
name|name
argument_list|,
name|context
argument_list|)
return|;
block|}
return|return
name|metaData
operator|.
name|directory
argument_list|()
operator|.
name|createSlicer
argument_list|(
name|name
argument_list|,
name|context
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|Directory
name|delegate
range|:
name|distributor
operator|.
name|all
argument_list|()
control|)
block|{
name|delegate
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|mutex
init|)
block|{
name|filesMetadata
operator|=
name|ImmutableMap
operator|.
name|of
argument_list|()
expr_stmt|;
name|files
operator|=
name|Strings
operator|.
name|EMPTY_ARRAY
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|makeLock
specifier|public
name|Lock
name|makeLock
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|distributor
operator|.
name|primary
argument_list|()
operator|.
name|makeLock
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|clearLock
specifier|public
name|void
name|clearLock
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|distributor
operator|.
name|primary
argument_list|()
operator|.
name|clearLock
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setLockFactory
specifier|public
name|void
name|setLockFactory
parameter_list|(
name|LockFactory
name|lockFactory
parameter_list|)
throws|throws
name|IOException
block|{
name|distributor
operator|.
name|primary
argument_list|()
operator|.
name|setLockFactory
argument_list|(
name|lockFactory
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getLockFactory
specifier|public
name|LockFactory
name|getLockFactory
parameter_list|()
block|{
return|return
name|distributor
operator|.
name|primary
argument_list|()
operator|.
name|getLockFactory
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getLockID
specifier|public
name|String
name|getLockID
parameter_list|()
block|{
return|return
name|distributor
operator|.
name|primary
argument_list|()
operator|.
name|getLockID
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|sync
specifier|public
name|void
name|sync
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|names
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|sync
condition|)
block|{
name|Map
argument_list|<
name|Directory
argument_list|,
name|Collection
argument_list|<
name|String
argument_list|>
argument_list|>
name|map
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|names
control|)
block|{
name|StoreFileMetaData
name|metaData
init|=
name|filesMetadata
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|metaData
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
name|name
argument_list|)
throw|;
block|}
name|Collection
argument_list|<
name|String
argument_list|>
name|dirNames
init|=
name|map
operator|.
name|get
argument_list|(
name|metaData
operator|.
name|directory
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|dirNames
operator|==
literal|null
condition|)
block|{
name|dirNames
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|metaData
operator|.
name|directory
argument_list|()
argument_list|,
name|dirNames
argument_list|)
expr_stmt|;
block|}
name|dirNames
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Directory
argument_list|,
name|Collection
argument_list|<
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|sync
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|String
name|name
range|:
name|names
control|)
block|{
comment|// write the checksums file when we sync on the segments file (committed)
if|if
condition|(
operator|!
name|name
operator|.
name|equals
argument_list|(
literal|"segments.gen"
argument_list|)
operator|&&
name|name
operator|.
name|startsWith
argument_list|(
literal|"segments"
argument_list|)
condition|)
block|{
name|writeChecksums
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|forceSync
specifier|public
name|void
name|forceSync
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|sync
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|StoreIndexOutput
class|class
name|StoreIndexOutput
extends|extends
name|IndexOutput
block|{
DECL|field|metaData
specifier|private
specifier|final
name|StoreFileMetaData
name|metaData
decl_stmt|;
DECL|field|out
specifier|private
specifier|final
name|IndexOutput
name|out
decl_stmt|;
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
DECL|method|StoreIndexOutput
name|StoreIndexOutput
parameter_list|(
name|StoreFileMetaData
name|metaData
parameter_list|,
name|IndexOutput
name|delegate
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|metaData
operator|=
name|metaData
expr_stmt|;
name|this
operator|.
name|out
operator|=
name|delegate
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|String
name|checksum
init|=
literal|null
decl_stmt|;
name|IndexOutput
name|underlying
init|=
name|out
decl_stmt|;
if|if
condition|(
name|underlying
operator|instanceof
name|BufferedChecksumIndexOutput
condition|)
block|{
name|checksum
operator|=
name|Long
operator|.
name|toString
argument_list|(
operator|(
operator|(
name|BufferedChecksumIndexOutput
operator|)
name|underlying
operator|)
operator|.
name|digest
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|,
name|Character
operator|.
name|MAX_RADIX
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|underlying
operator|instanceof
name|ChecksumIndexOutput
condition|)
block|{
name|checksum
operator|=
name|Long
operator|.
name|toString
argument_list|(
operator|(
operator|(
name|ChecksumIndexOutput
operator|)
name|underlying
operator|)
operator|.
name|digest
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|,
name|Character
operator|.
name|MAX_RADIX
argument_list|)
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|mutex
init|)
block|{
name|StoreFileMetaData
name|md
init|=
operator|new
name|StoreFileMetaData
argument_list|(
name|name
argument_list|,
name|metaData
operator|.
name|directory
argument_list|()
operator|.
name|fileLength
argument_list|(
name|name
argument_list|)
argument_list|,
name|checksum
argument_list|,
name|metaData
operator|.
name|directory
argument_list|()
argument_list|)
decl_stmt|;
name|filesMetadata
operator|=
name|MapBuilder
operator|.
name|newMapBuilder
argument_list|(
name|filesMetadata
argument_list|)
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|md
argument_list|)
operator|.
name|immutableMap
argument_list|()
expr_stmt|;
name|files
operator|=
name|filesMetadata
operator|.
name|keySet
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|filesMetadata
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|copyBytes
specifier|public
name|void
name|copyBytes
parameter_list|(
name|DataInput
name|input
parameter_list|,
name|long
name|numBytes
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|copyBytes
argument_list|(
name|input
argument_list|,
name|numBytes
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getFilePointer
specifier|public
name|long
name|getFilePointer
parameter_list|()
block|{
return|return
name|out
operator|.
name|getFilePointer
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|writeByte
specifier|public
name|void
name|writeByte
parameter_list|(
name|byte
name|b
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeByte
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeBytes
specifier|public
name|void
name|writeBytes
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeBytes
argument_list|(
name|b
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|flush
specifier|public
name|void
name|flush
parameter_list|()
throws|throws
name|IOException
block|{
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|seek
specifier|public
name|void
name|seek
parameter_list|(
name|long
name|pos
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|seek
argument_list|(
name|pos
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|length
specifier|public
name|long
name|length
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|out
operator|.
name|length
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|setLength
specifier|public
name|void
name|setLength
parameter_list|(
name|long
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|setLength
argument_list|(
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|out
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

