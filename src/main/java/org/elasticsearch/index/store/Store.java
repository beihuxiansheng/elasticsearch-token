begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.store
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|store
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|CodecUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ExceptionsHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|compress
operator|.
name|Compressor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|compress
operator|.
name|CompressorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|ESLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|Directories
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|Lucene
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|CloseableIndexComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|codec
operator|.
name|CodecService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|settings
operator|.
name|IndexSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|AbstractIndexShardComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|store
operator|.
name|distributor
operator|.
name|Distributor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|store
operator|.
name|support
operator|.
name|ForceSyncDirectory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|NoSuchFileException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_comment
comment|/**  * A Store provides plain access to files written by an elasticsearch index shard. Each shard  * has a dedicated store that is uses to access lucenes Directory which represents the lowest level  * of file abstraction in lucene used to read and write Lucene indices to.  * This class also provides access to metadata information like checksums for committed files. A committed  * file is a file that belongs to a segment written by a Lucene commit. Files that have not been committed  * ie. created during a merge or a shard refresh / NRT reopen are not considered in the MetadataSnapshot.  *  * Note: If you use a store it's reference count should be increased before using it by calling #incRef and a  * corresponding #decRef must be called in a try/finally block to release the store again ie.:  *<pre>  *      store.incRef();  *      try {  *        // use the store...  *  *      } finally {  *          store.decRef();  *      }  *</pre>  */
end_comment

begin_class
DECL|class|Store
specifier|public
class|class
name|Store
extends|extends
name|AbstractIndexShardComponent
implements|implements
name|CloseableIndexComponent
implements|,
name|Closeable
block|{
DECL|field|CODEC
specifier|private
specifier|static
specifier|final
name|String
name|CODEC
init|=
literal|"store"
decl_stmt|;
DECL|field|VERSION
specifier|private
specifier|static
specifier|final
name|int
name|VERSION
init|=
literal|0
decl_stmt|;
DECL|field|CORRUPTED
specifier|private
specifier|static
specifier|final
name|String
name|CORRUPTED
init|=
literal|"corrupted_"
decl_stmt|;
DECL|field|isClosed
specifier|private
specifier|final
name|AtomicBoolean
name|isClosed
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
DECL|field|refCount
specifier|private
specifier|final
name|AtomicInteger
name|refCount
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|1
argument_list|)
decl_stmt|;
DECL|field|indexStore
specifier|private
specifier|final
name|IndexStore
name|indexStore
decl_stmt|;
DECL|field|codecService
specifier|private
specifier|final
name|CodecService
name|codecService
decl_stmt|;
DECL|field|directoryService
specifier|private
specifier|final
name|DirectoryService
name|directoryService
decl_stmt|;
DECL|field|directory
specifier|private
specifier|final
name|StoreDirectory
name|directory
decl_stmt|;
DECL|field|sync
specifier|private
specifier|final
name|boolean
name|sync
decl_stmt|;
DECL|field|distributorDirectory
specifier|private
specifier|final
name|DistributorDirectory
name|distributorDirectory
decl_stmt|;
annotation|@
name|Inject
DECL|method|Store
specifier|public
name|Store
parameter_list|(
name|ShardId
name|shardId
parameter_list|,
annotation|@
name|IndexSettings
name|Settings
name|indexSettings
parameter_list|,
name|IndexStore
name|indexStore
parameter_list|,
name|CodecService
name|codecService
parameter_list|,
name|DirectoryService
name|directoryService
parameter_list|,
name|Distributor
name|distributor
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|shardId
argument_list|,
name|indexSettings
argument_list|)
expr_stmt|;
name|this
operator|.
name|indexStore
operator|=
name|indexStore
expr_stmt|;
name|this
operator|.
name|codecService
operator|=
name|codecService
expr_stmt|;
name|this
operator|.
name|directoryService
operator|=
name|directoryService
expr_stmt|;
name|this
operator|.
name|sync
operator|=
name|componentSettings
operator|.
name|getAsBoolean
argument_list|(
literal|"sync"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|distributorDirectory
operator|=
operator|new
name|DistributorDirectory
argument_list|(
name|distributor
argument_list|)
expr_stmt|;
name|this
operator|.
name|directory
operator|=
operator|new
name|StoreDirectory
argument_list|(
name|distributorDirectory
argument_list|)
expr_stmt|;
block|}
DECL|method|indexStore
specifier|public
name|IndexStore
name|indexStore
parameter_list|()
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
return|return
name|this
operator|.
name|indexStore
return|;
block|}
DECL|method|directory
specifier|public
name|Directory
name|directory
parameter_list|()
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
return|return
name|directory
return|;
block|}
DECL|method|ensureOpen
specifier|private
specifier|final
name|void
name|ensureOpen
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|refCount
operator|.
name|get
argument_list|()
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|AlreadyClosedException
argument_list|(
literal|"Store is already closed"
argument_list|)
throw|;
block|}
block|}
comment|/**      * Returns a new MetadataSnapshot.      */
DECL|method|getMetadata
specifier|public
name|MetadataSnapshot
name|getMetadata
parameter_list|()
throws|throws
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
name|failIfCorrupted
argument_list|()
expr_stmt|;
return|return
operator|new
name|MetadataSnapshot
argument_list|(
name|distributorDirectory
argument_list|,
name|logger
argument_list|)
return|;
block|}
comment|/**      * Deletes the content of a shard store. Be careful calling this!.      */
DECL|method|deleteContent
specifier|public
name|void
name|deleteContent
parameter_list|()
throws|throws
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
specifier|final
name|String
index|[]
name|files
init|=
name|distributorDirectory
operator|.
name|listAll
argument_list|()
decl_stmt|;
name|IOException
name|lastException
init|=
literal|null
decl_stmt|;
for|for
control|(
name|String
name|file
range|:
name|files
control|)
block|{
try|try
block|{
name|distributorDirectory
operator|.
name|deleteFile
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchFileException
decl||
name|FileNotFoundException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|lastException
operator|=
name|e
expr_stmt|;
block|}
block|}
if|if
condition|(
name|lastException
operator|!=
literal|null
condition|)
block|{
throw|throw
name|lastException
throw|;
block|}
block|}
DECL|method|stats
specifier|public
name|StoreStats
name|stats
parameter_list|()
throws|throws
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
return|return
operator|new
name|StoreStats
argument_list|(
name|Directories
operator|.
name|estimateSize
argument_list|(
name|directory
argument_list|)
argument_list|,
name|directoryService
operator|.
name|throttleTimeInNanos
argument_list|()
argument_list|)
return|;
block|}
DECL|method|renameFile
specifier|public
name|void
name|renameFile
parameter_list|(
name|String
name|from
parameter_list|,
name|String
name|to
parameter_list|)
throws|throws
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
name|distributorDirectory
operator|.
name|renameFile
argument_list|(
name|directoryService
argument_list|,
name|from
argument_list|,
name|to
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns<tt>true</tt> by default.      */
DECL|method|suggestUseCompoundFile
specifier|public
name|boolean
name|suggestUseCompoundFile
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
comment|/**      * Increments the refCount of this Store instance.  RefCounts are used to determine when a      * Store can be closed safely, i.e. as soon as there are no more references. Be sure to always call a      * corresponding {@link #decRef}, in a finally clause; otherwise the store may never be closed.  Note that      * {@link #close} simply calls decRef(), which means that the Store will not really be closed until {@link      * #decRef} has been called for all outstanding references.      *      * Note: Close can safely be called multiple times.      * @see #decRef      * @see #tryIncRef()      * @throws AlreadyClosedException iff the reference counter can not be incremented.      */
DECL|method|incRef
specifier|public
specifier|final
name|void
name|incRef
parameter_list|()
block|{
if|if
condition|(
name|tryIncRef
argument_list|()
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|AlreadyClosedException
argument_list|(
literal|"Store is already closed can't increment refCount current count ["
operator|+
name|refCount
operator|.
name|get
argument_list|()
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
comment|/**      * Tries to increment the refCount of this Store instance. This method will return<tt>true</tt> iff the refCount was      * incremented successfully otherwise<tt>false</tt>. RefCounts are used to determine when a      * Store can be closed safely, i.e. as soon as there are no more references. Be sure to always call a      * corresponding {@link #decRef}, in a finally clause; otherwise the store may never be closed.  Note that      * {@link #close} simply calls decRef(), which means that the Store will not really be closed until {@link      * #decRef} has been called for all outstanding references.      *      * Note: Close can safely be called multiple times.      * @see #decRef()      * @see #incRef()      */
DECL|method|tryIncRef
specifier|public
specifier|final
name|boolean
name|tryIncRef
parameter_list|()
block|{
do|do
block|{
name|int
name|i
init|=
name|refCount
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|refCount
operator|.
name|compareAndSet
argument_list|(
name|i
argument_list|,
name|i
operator|+
literal|1
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
comment|/**      * Decreases the refCount of this Store instance.If the refCount drops to 0, then this      * store is closed.      * @see #incRef      */
DECL|method|decRef
specifier|public
specifier|final
name|void
name|decRef
parameter_list|()
block|{
name|int
name|i
init|=
name|refCount
operator|.
name|decrementAndGet
argument_list|()
decl_stmt|;
assert|assert
name|i
operator|>=
literal|0
assert|;
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
name|closeInternal
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
name|isClosed
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
comment|// only do this once!
name|decRef
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|closeInternal
specifier|private
name|void
name|closeInternal
parameter_list|()
block|{
try|try
block|{
name|directory
operator|.
name|innerClose
argument_list|()
expr_stmt|;
comment|// this closes the distributorDirectory as well
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"failed to close directory"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|readMetadataSnapshot
specifier|public
specifier|static
name|MetadataSnapshot
name|readMetadataSnapshot
parameter_list|(
name|File
index|[]
name|indexLocations
parameter_list|,
name|ESLogger
name|logger
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Directory
index|[]
name|dirs
init|=
operator|new
name|Directory
index|[
name|indexLocations
operator|.
name|length
index|]
decl_stmt|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|indexLocations
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|dirs
index|[
name|i
index|]
operator|=
operator|new
name|SimpleFSDirectory
argument_list|(
name|indexLocations
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|DistributorDirectory
name|dir
init|=
operator|new
name|DistributorDirectory
argument_list|(
name|dirs
argument_list|)
decl_stmt|;
return|return
operator|new
name|MetadataSnapshot
argument_list|(
name|dir
argument_list|,
name|logger
argument_list|)
return|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|close
argument_list|(
name|dirs
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * The returned IndexOutput might validate the files checksum if the file has been written with a newer lucene version      * and the metadata holds the necessary information to detect that it was been written by Lucene 4.8 or newer. If it has only      * a legacy checksum, returned IndexOutput will not verify the checksum.      *      * Note: Checksums are calculated nevertheless since lucene does it by default sicne version 4.8.0. This method only adds the      * verification against the checksum in the given metadata and does not add any significant overhead.      */
DECL|method|createVerifyingOutput
specifier|public
name|IndexOutput
name|createVerifyingOutput
parameter_list|(
specifier|final
name|String
name|filename
parameter_list|,
specifier|final
name|IOContext
name|context
parameter_list|,
specifier|final
name|StoreFileMetaData
name|metadata
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|metadata
operator|.
name|hasLegacyChecksum
argument_list|()
operator|||
name|metadata
operator|.
name|checksum
argument_list|()
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"create legacy output for {}"
argument_list|,
name|filename
argument_list|)
expr_stmt|;
return|return
name|directory
argument_list|()
operator|.
name|createOutput
argument_list|(
name|filename
argument_list|,
name|context
argument_list|)
return|;
block|}
assert|assert
name|metadata
operator|.
name|writtenBy
argument_list|()
operator|!=
literal|null
assert|;
assert|assert
name|metadata
operator|.
name|writtenBy
argument_list|()
operator|.
name|onOrAfter
argument_list|(
name|Version
operator|.
name|LUCENE_48
argument_list|)
assert|;
return|return
operator|new
name|VerifyingIndexOutput
argument_list|(
name|metadata
argument_list|,
name|directory
argument_list|()
operator|.
name|createOutput
argument_list|(
name|filename
argument_list|,
name|context
argument_list|)
argument_list|)
return|;
block|}
DECL|method|verify
specifier|public
specifier|static
name|void
name|verify
parameter_list|(
name|IndexOutput
name|output
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|output
operator|instanceof
name|VerifyingIndexOutput
condition|)
block|{
operator|(
operator|(
name|VerifyingIndexOutput
operator|)
name|output
operator|)
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|checkIntegrity
specifier|public
name|boolean
name|checkIntegrity
parameter_list|(
name|StoreFileMetaData
name|md
parameter_list|)
block|{
if|if
condition|(
name|md
operator|.
name|writtenBy
argument_list|()
operator|!=
literal|null
operator|&&
name|md
operator|.
name|writtenBy
argument_list|()
operator|.
name|onOrAfter
argument_list|(
name|Version
operator|.
name|LUCENE_48
argument_list|)
condition|)
block|{
try|try
init|(
name|IndexInput
name|input
init|=
name|directory
argument_list|()
operator|.
name|openInput
argument_list|(
name|md
operator|.
name|name
argument_list|()
argument_list|,
name|IOContext
operator|.
name|READONCE
argument_list|)
init|)
block|{
name|CodecUtil
operator|.
name|checksumEntireFile
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
DECL|method|isMarkedCorrupted
specifier|public
name|boolean
name|isMarkedCorrupted
parameter_list|()
throws|throws
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
comment|/* marking a store as corrupted is basically adding a _corrupted to all          * the files. This prevent          */
specifier|final
name|String
index|[]
name|files
init|=
name|directory
argument_list|()
operator|.
name|listAll
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|file
range|:
name|files
control|)
block|{
if|if
condition|(
name|file
operator|.
name|startsWith
argument_list|(
name|CORRUPTED
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|failIfCorrupted
specifier|public
name|void
name|failIfCorrupted
parameter_list|()
throws|throws
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
specifier|final
name|String
index|[]
name|files
init|=
name|directory
argument_list|()
operator|.
name|listAll
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|CorruptIndexException
argument_list|>
name|ex
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|file
range|:
name|files
control|)
block|{
if|if
condition|(
name|file
operator|.
name|startsWith
argument_list|(
name|CORRUPTED
argument_list|)
condition|)
block|{
try|try
init|(
name|ChecksumIndexInput
name|input
init|=
name|directory
argument_list|()
operator|.
name|openChecksumInput
argument_list|(
name|file
argument_list|,
name|IOContext
operator|.
name|READONCE
argument_list|)
init|)
block|{
name|CodecUtil
operator|.
name|checkHeader
argument_list|(
name|input
argument_list|,
name|CODEC
argument_list|,
name|VERSION
argument_list|,
name|VERSION
argument_list|)
expr_stmt|;
name|String
name|msg
init|=
name|input
operator|.
name|readString
argument_list|()
decl_stmt|;
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|(
name|this
operator|.
name|shardId
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|" Corrupted index ["
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|file
argument_list|)
operator|.
name|append
argument_list|(
literal|"] caused by: "
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|ex
operator|.
name|add
argument_list|(
operator|new
name|CorruptIndexException
argument_list|(
name|builder
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|CodecUtil
operator|.
name|checkFooter
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|ex
operator|.
name|isEmpty
argument_list|()
operator|==
literal|false
condition|)
block|{
name|ExceptionsHelper
operator|.
name|rethrowAndSuppress
argument_list|(
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * The idea of the store directory is to cache file level meta data, as well as md5 of it      */
DECL|class|StoreDirectory
specifier|public
class|class
name|StoreDirectory
extends|extends
name|FilterDirectory
implements|implements
name|ForceSyncDirectory
block|{
DECL|method|StoreDirectory
name|StoreDirectory
parameter_list|(
name|Directory
name|delegateDirectory
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|delegateDirectory
argument_list|)
expr_stmt|;
block|}
DECL|method|shardId
specifier|public
name|ShardId
name|shardId
parameter_list|()
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
return|return
name|Store
operator|.
name|this
operator|.
name|shardId
argument_list|()
return|;
block|}
annotation|@
name|Nullable
DECL|method|codecService
specifier|public
name|CodecService
name|codecService
parameter_list|()
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
return|return
name|Store
operator|.
name|this
operator|.
name|codecService
return|;
block|}
annotation|@
name|Override
DECL|method|openInput
specifier|public
name|IndexInput
name|openInput
parameter_list|(
name|String
name|name
parameter_list|,
name|IOContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|IndexInput
name|in
init|=
name|super
operator|.
name|openInput
argument_list|(
name|name
argument_list|,
name|context
argument_list|)
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
comment|// Only for backward comp. since we now use Lucene codec compression
if|if
condition|(
name|name
operator|.
name|endsWith
argument_list|(
literal|".fdt"
argument_list|)
operator|||
name|name
operator|.
name|endsWith
argument_list|(
literal|".tvf"
argument_list|)
condition|)
block|{
name|Compressor
name|compressor
init|=
name|CompressorFactory
operator|.
name|compressor
argument_list|(
name|in
argument_list|)
decl_stmt|;
if|if
condition|(
name|compressor
operator|!=
literal|null
condition|)
block|{
name|in
operator|=
name|compressor
operator|.
name|indexInput
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
block|}
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|IOUtils
operator|.
name|closeWhileHandlingException
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|in
return|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
assert|assert
literal|false
operator|:
literal|"Nobody should close this directory except of the Store itself"
assert|;
block|}
annotation|@
name|Override
DECL|method|sync
specifier|public
name|void
name|sync
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|names
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|sync
condition|)
block|{
name|super
operator|.
name|sync
argument_list|(
name|names
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|innerClose
specifier|private
name|void
name|innerClose
parameter_list|()
throws|throws
name|IOException
block|{
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|forceSync
specifier|public
name|void
name|forceSync
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|sync
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"store("
operator|+
name|in
operator|.
name|toString
argument_list|()
operator|+
literal|")"
return|;
block|}
block|}
comment|/**      * Represents a snaphshot of the current directory build from the latest Lucene commit.      * Only files that are part of the last commit are considered in this datastrucutre.      * For backwards compatibility the snapshot might include legacy checksums that      * are derived from a dedicated checksum file written by older elastcisearch version pre 1.3      *      * @see StoreFileMetaData      */
DECL|class|MetadataSnapshot
specifier|public
specifier|final
specifier|static
class|class
name|MetadataSnapshot
implements|implements
name|Iterable
argument_list|<
name|StoreFileMetaData
argument_list|>
block|{
DECL|field|metadata
specifier|private
specifier|final
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|StoreFileMetaData
argument_list|>
name|metadata
decl_stmt|;
DECL|method|MetadataSnapshot
name|MetadataSnapshot
parameter_list|(
name|Directory
name|directory
parameter_list|,
name|ESLogger
name|logger
parameter_list|)
throws|throws
name|IOException
block|{
name|metadata
operator|=
name|buildMetadata
argument_list|(
name|directory
argument_list|,
name|logger
argument_list|)
expr_stmt|;
block|}
DECL|method|buildMetadata
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|StoreFileMetaData
argument_list|>
name|buildMetadata
parameter_list|(
name|Directory
name|directory
parameter_list|,
name|ESLogger
name|logger
parameter_list|)
throws|throws
name|IOException
block|{
name|ImmutableMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|StoreFileMetaData
argument_list|>
name|builder
init|=
name|ImmutableMap
operator|.
name|builder
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|checksumMap
init|=
name|readLegacyChecksums
argument_list|(
name|directory
argument_list|)
decl_stmt|;
try|try
block|{
specifier|final
name|SegmentInfos
name|segmentCommitInfos
decl_stmt|;
try|try
block|{
name|segmentCommitInfos
operator|=
name|Lucene
operator|.
name|readSegmentInfos
argument_list|(
name|directory
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
decl||
name|NoSuchFileException
name|ex
parameter_list|)
block|{
comment|// no segments file -- can't read metadata
name|logger
operator|.
name|trace
argument_list|(
literal|"Can't read segment infos"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
return|return
name|ImmutableMap
operator|.
name|of
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|EOFException
name|eof
parameter_list|)
block|{
comment|// TODO this should be caught by lucene - EOF is almost certainly an index corruption
throw|throw
operator|new
name|CorruptIndexException
argument_list|(
literal|"Read past EOF while reading segment infos"
argument_list|,
name|eof
argument_list|)
throw|;
block|}
name|Version
name|maxVersion
init|=
name|Version
operator|.
name|LUCENE_3_0
decl_stmt|;
comment|// we don't know which version was used to write so we take the max version.
name|Set
argument_list|<
name|String
argument_list|>
name|added
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|SegmentCommitInfo
name|info
range|:
name|segmentCommitInfos
control|)
block|{
specifier|final
name|Version
name|version
init|=
name|Version
operator|.
name|parseLeniently
argument_list|(
name|info
operator|.
name|info
operator|.
name|getVersion
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|version
operator|.
name|onOrAfter
argument_list|(
name|maxVersion
argument_list|)
condition|)
block|{
name|maxVersion
operator|=
name|version
expr_stmt|;
block|}
for|for
control|(
name|String
name|file
range|:
name|Iterables
operator|.
name|concat
argument_list|(
name|info
operator|.
name|info
operator|.
name|files
argument_list|()
argument_list|,
name|info
operator|.
name|files
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|added
operator|.
name|contains
argument_list|(
name|file
argument_list|)
condition|)
block|{
name|String
name|legacyChecksum
init|=
name|checksumMap
operator|.
name|get
argument_list|(
name|file
argument_list|)
decl_stmt|;
if|if
condition|(
name|version
operator|.
name|onOrAfter
argument_list|(
name|Version
operator|.
name|LUCENE_4_8
argument_list|)
operator|&&
name|legacyChecksum
operator|==
literal|null
condition|)
block|{
name|checksumFromLuceneFile
argument_list|(
name|directory
argument_list|,
name|file
argument_list|,
name|builder
argument_list|,
name|logger
argument_list|,
name|version
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|put
argument_list|(
name|file
argument_list|,
operator|new
name|StoreFileMetaData
argument_list|(
name|file
argument_list|,
name|directory
operator|.
name|fileLength
argument_list|(
name|file
argument_list|)
argument_list|,
name|legacyChecksum
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|added
operator|.
name|add
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|String
name|file
range|:
name|Arrays
operator|.
name|asList
argument_list|(
name|segmentCommitInfos
operator|.
name|getSegmentsFileName
argument_list|()
argument_list|,
name|IndexFileNames
operator|.
name|SEGMENTS_GEN
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|added
operator|.
name|contains
argument_list|(
name|file
argument_list|)
condition|)
block|{
try|try
block|{
name|String
name|legacyChecksum
init|=
name|checksumMap
operator|.
name|get
argument_list|(
name|file
argument_list|)
decl_stmt|;
if|if
condition|(
name|maxVersion
operator|.
name|onOrAfter
argument_list|(
name|Version
operator|.
name|LUCENE_4_8
argument_list|)
operator|&&
name|legacyChecksum
operator|==
literal|null
condition|)
block|{
name|checksumFromLuceneFile
argument_list|(
name|directory
argument_list|,
name|file
argument_list|,
name|builder
argument_list|,
name|logger
argument_list|,
name|maxVersion
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|put
argument_list|(
name|file
argument_list|,
operator|new
name|StoreFileMetaData
argument_list|(
name|file
argument_list|,
name|directory
operator|.
name|fileLength
argument_list|(
name|file
argument_list|)
argument_list|,
name|legacyChecksum
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|added
operator|.
name|add
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
decl||
name|NoSuchFileException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|IndexFileNames
operator|.
name|SEGMENTS_GEN
operator|.
name|equals
argument_list|(
name|file
argument_list|)
operator|==
literal|false
condition|)
block|{
comment|// segments.gen is optional
throw|throw
name|ex
throw|;
block|}
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|CorruptIndexException
name|ex
parameter_list|)
block|{
throw|throw
name|ex
throw|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
decl||
name|NoSuchFileException
name|ex
parameter_list|)
block|{
comment|// can't open index | no commit present -- we might open a snapshot index that is not fully restored?
name|logger
operator|.
name|warn
argument_list|(
literal|"Can't open file to read checksums"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
return|return
name|ImmutableMap
operator|.
name|of
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
try|try
block|{
comment|// Lucene checks the checksum after it tries to lookup the codec etc.
comment|// in that case we might get only IAE or similar exceptions while we are really corrupt...
comment|// TODO we should check the checksum in lucene if we hit an exception
name|Lucene
operator|.
name|checkSegmentInfoIntegrity
argument_list|(
name|directory
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CorruptIndexException
name|cex
parameter_list|)
block|{
name|cex
operator|.
name|addSuppressed
argument_list|(
name|ex
argument_list|)
expr_stmt|;
throw|throw
name|cex
throw|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
comment|// ignore...
block|}
throw|throw
name|ex
throw|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|readLegacyChecksums
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|readLegacyChecksums
parameter_list|(
name|Directory
name|directory
parameter_list|)
throws|throws
name|IOException
block|{
synchronized|synchronized
init|(
name|directory
init|)
block|{
name|long
name|lastFound
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|directory
operator|.
name|listAll
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|isChecksum
argument_list|(
name|name
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|long
name|current
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|name
operator|.
name|substring
argument_list|(
name|CHECKSUMS_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|current
operator|>
name|lastFound
condition|)
block|{
name|lastFound
operator|=
name|current
expr_stmt|;
block|}
block|}
if|if
condition|(
name|lastFound
operator|>
operator|-
literal|1
condition|)
block|{
try|try
init|(
name|IndexInput
name|indexInput
init|=
name|directory
operator|.
name|openInput
argument_list|(
name|CHECKSUMS_PREFIX
operator|+
name|lastFound
argument_list|,
name|IOContext
operator|.
name|READONCE
argument_list|)
init|)
block|{
name|indexInput
operator|.
name|readInt
argument_list|()
expr_stmt|;
comment|// version
return|return
name|indexInput
operator|.
name|readStringStringMap
argument_list|()
return|;
block|}
block|}
return|return
operator|new
name|HashMap
argument_list|<>
argument_list|()
return|;
block|}
block|}
DECL|method|checksumFromLuceneFile
specifier|private
specifier|static
name|void
name|checksumFromLuceneFile
parameter_list|(
name|Directory
name|directory
parameter_list|,
name|String
name|file
parameter_list|,
name|ImmutableMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|StoreFileMetaData
argument_list|>
name|builder
parameter_list|,
name|ESLogger
name|logger
parameter_list|,
name|Version
name|version
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|IndexInput
name|in
init|=
name|directory
operator|.
name|openInput
argument_list|(
name|file
argument_list|,
name|IOContext
operator|.
name|READONCE
argument_list|)
init|)
block|{
try|try
block|{
if|if
condition|(
name|in
operator|.
name|length
argument_list|()
operator|<
name|CodecUtil
operator|.
name|footerLength
argument_list|()
condition|)
block|{
comment|// truncated files trigger IAE if we seek negative... these files are really corrupted though
throw|throw
operator|new
name|CorruptIndexException
argument_list|(
literal|"Can't retrieve checksum from file: "
operator|+
name|file
operator|+
literal|" file length must be>= "
operator|+
name|CodecUtil
operator|.
name|footerLength
argument_list|()
operator|+
literal|" but was: "
operator|+
name|in
operator|.
name|length
argument_list|()
argument_list|)
throw|;
block|}
name|String
name|checksum
init|=
name|digestToString
argument_list|(
name|CodecUtil
operator|.
name|retrieveChecksum
argument_list|(
name|in
argument_list|)
argument_list|)
decl_stmt|;
name|builder
operator|.
name|put
argument_list|(
name|file
argument_list|,
operator|new
name|StoreFileMetaData
argument_list|(
name|file
argument_list|,
name|directory
operator|.
name|fileLength
argument_list|(
name|file
argument_list|)
argument_list|,
name|checksum
argument_list|,
name|version
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"Can retrieve checksum from file [{}]"
argument_list|,
name|ex
argument_list|,
name|file
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|iterator
specifier|public
name|Iterator
argument_list|<
name|StoreFileMetaData
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|metadata
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
return|;
block|}
DECL|method|get
specifier|public
name|StoreFileMetaData
name|get
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|metadata
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
DECL|method|asMap
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|StoreFileMetaData
argument_list|>
name|asMap
parameter_list|()
block|{
return|return
name|metadata
return|;
block|}
block|}
DECL|class|LegacyChecksums
specifier|public
specifier|final
specifier|static
class|class
name|LegacyChecksums
block|{
DECL|field|legacyChecksums
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|legacyChecksums
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|add
specifier|public
name|void
name|add
parameter_list|(
name|StoreFileMetaData
name|metaData
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|metaData
operator|.
name|hasLegacyChecksum
argument_list|()
condition|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
comment|// we don't add checksums if they were written by LUCENE_48... now we are using the build in mechanism.
name|legacyChecksums
operator|.
name|put
argument_list|(
name|metaData
operator|.
name|name
argument_list|()
argument_list|,
name|metaData
operator|.
name|checksum
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|write
specifier|public
specifier|synchronized
name|void
name|write
parameter_list|(
name|Store
name|store
parameter_list|)
throws|throws
name|IOException
block|{
synchronized|synchronized
init|(
name|store
operator|.
name|distributorDirectory
init|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|stringStringMap
init|=
name|MetadataSnapshot
operator|.
name|readLegacyChecksums
argument_list|(
name|store
operator|.
name|distributorDirectory
argument_list|)
decl_stmt|;
name|stringStringMap
operator|.
name|putAll
argument_list|(
name|legacyChecksums
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|stringStringMap
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|writeChecksums
argument_list|(
name|store
operator|.
name|directory
argument_list|,
name|stringStringMap
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|writeChecksums
specifier|synchronized
name|void
name|writeChecksums
parameter_list|(
name|Directory
name|directory
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|checksums
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|checksumName
init|=
name|CHECKSUMS_PREFIX
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
while|while
condition|(
name|directory
operator|.
name|fileExists
argument_list|(
name|checksumName
argument_list|)
condition|)
block|{
name|checksumName
operator|=
name|CHECKSUMS_PREFIX
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
try|try
init|(
name|IndexOutput
name|output
init|=
name|directory
operator|.
name|createOutput
argument_list|(
name|checksumName
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
init|)
block|{
name|output
operator|.
name|writeInt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// version
name|output
operator|.
name|writeStringStringMap
argument_list|(
name|checksums
argument_list|)
expr_stmt|;
block|}
name|directory
operator|.
name|sync
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|checksumName
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|clear
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|legacyChecksums
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|method|remove
specifier|public
name|void
name|remove
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|legacyChecksums
operator|.
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
DECL|field|CHECKSUMS_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|CHECKSUMS_PREFIX
init|=
literal|"_checksums-"
decl_stmt|;
DECL|method|isChecksum
specifier|public
specifier|static
specifier|final
name|boolean
name|isChecksum
parameter_list|(
name|String
name|name
parameter_list|)
block|{
comment|// TODO can we drowp .cks
return|return
name|name
operator|.
name|startsWith
argument_list|(
name|CHECKSUMS_PREFIX
argument_list|)
operator|||
name|name
operator|.
name|endsWith
argument_list|(
literal|".cks"
argument_list|)
return|;
comment|// bwcomapt - .cks used to be a previous checksum file
block|}
comment|/**      * Produces a string representation of the given digest value.      */
DECL|method|digestToString
specifier|public
specifier|static
name|String
name|digestToString
parameter_list|(
name|long
name|digest
parameter_list|)
block|{
return|return
name|Long
operator|.
name|toString
argument_list|(
name|digest
argument_list|,
name|Character
operator|.
name|MAX_RADIX
argument_list|)
return|;
block|}
DECL|class|VerifyingIndexOutput
specifier|static
class|class
name|VerifyingIndexOutput
extends|extends
name|IndexOutput
block|{
DECL|field|metadata
specifier|private
specifier|final
name|StoreFileMetaData
name|metadata
decl_stmt|;
DECL|field|output
specifier|private
specifier|final
name|IndexOutput
name|output
decl_stmt|;
DECL|field|writtenBytes
specifier|private
name|long
name|writtenBytes
decl_stmt|;
DECL|field|checksumPosition
specifier|private
specifier|final
name|long
name|checksumPosition
decl_stmt|;
DECL|field|actualChecksum
specifier|private
name|String
name|actualChecksum
decl_stmt|;
DECL|method|VerifyingIndexOutput
name|VerifyingIndexOutput
parameter_list|(
name|StoreFileMetaData
name|metadata
parameter_list|,
name|IndexOutput
name|actualOutput
parameter_list|)
block|{
name|this
operator|.
name|metadata
operator|=
name|metadata
expr_stmt|;
name|this
operator|.
name|output
operator|=
name|actualOutput
expr_stmt|;
name|checksumPosition
operator|=
name|metadata
operator|.
name|length
argument_list|()
operator|-
literal|8
expr_stmt|;
comment|// the last 8 bytes are the checksum
block|}
annotation|@
name|Override
DECL|method|flush
specifier|public
name|void
name|flush
parameter_list|()
throws|throws
name|IOException
block|{
name|output
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|output
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getFilePointer
specifier|public
name|long
name|getFilePointer
parameter_list|()
block|{
return|return
name|output
operator|.
name|getFilePointer
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getChecksum
specifier|public
name|long
name|getChecksum
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|output
operator|.
name|getChecksum
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|length
specifier|public
name|long
name|length
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|output
operator|.
name|length
argument_list|()
return|;
block|}
comment|/**          * Verifies the checksum and compares the written length with the expected file length. This method should bec          * called after all data has been written to this output.          */
DECL|method|verify
specifier|public
name|void
name|verify
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|metadata
operator|.
name|checksum
argument_list|()
operator|.
name|equals
argument_list|(
name|actualChecksum
argument_list|)
operator|&&
name|writtenBytes
operator|==
name|metadata
operator|.
name|length
argument_list|()
condition|)
block|{
return|return;
block|}
throw|throw
operator|new
name|CorruptIndexException
argument_list|(
literal|"verification failed (hardware problem?) : expected="
operator|+
name|metadata
operator|.
name|checksum
argument_list|()
operator|+
literal|" actual="
operator|+
name|actualChecksum
operator|+
literal|" writtenLength="
operator|+
name|writtenBytes
operator|+
literal|" expectedLength="
operator|+
name|metadata
operator|.
name|length
argument_list|()
operator|+
literal|" (resource="
operator|+
name|metadata
operator|.
name|toString
argument_list|()
operator|+
literal|")"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|writeByte
specifier|public
name|void
name|writeByte
parameter_list|(
name|byte
name|b
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|writtenBytes
operator|++
operator|==
name|checksumPosition
condition|)
block|{
name|readAndCompareChecksum
argument_list|()
expr_stmt|;
block|}
name|output
operator|.
name|writeByte
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
DECL|method|readAndCompareChecksum
specifier|private
name|void
name|readAndCompareChecksum
parameter_list|()
throws|throws
name|IOException
block|{
name|actualChecksum
operator|=
name|digestToString
argument_list|(
name|getChecksum
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|metadata
operator|.
name|checksum
argument_list|()
operator|.
name|equals
argument_list|(
name|actualChecksum
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|CorruptIndexException
argument_list|(
literal|"checksum failed (hardware problem?) : expected="
operator|+
name|metadata
operator|.
name|checksum
argument_list|()
operator|+
literal|" actual="
operator|+
name|actualChecksum
operator|+
literal|" (resource="
operator|+
name|metadata
operator|.
name|toString
argument_list|()
operator|+
literal|")"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|writeBytes
specifier|public
name|void
name|writeBytes
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|writtenBytes
operator|+
name|length
operator|>
name|checksumPosition
operator|&&
name|actualChecksum
operator|==
literal|null
condition|)
block|{
assert|assert
name|writtenBytes
operator|<=
name|checksumPosition
assert|;
specifier|final
name|int
name|bytesToWrite
init|=
call|(
name|int
call|)
argument_list|(
name|checksumPosition
operator|-
name|writtenBytes
argument_list|)
decl_stmt|;
name|output
operator|.
name|writeBytes
argument_list|(
name|b
argument_list|,
name|offset
argument_list|,
name|bytesToWrite
argument_list|)
expr_stmt|;
name|readAndCompareChecksum
argument_list|()
expr_stmt|;
name|offset
operator|+=
name|bytesToWrite
expr_stmt|;
name|length
operator|-=
name|bytesToWrite
expr_stmt|;
name|writtenBytes
operator|+=
name|bytesToWrite
expr_stmt|;
block|}
name|output
operator|.
name|writeBytes
argument_list|(
name|b
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|writtenBytes
operator|+=
name|length
expr_stmt|;
block|}
block|}
DECL|method|deleteQuiet
specifier|public
name|void
name|deleteQuiet
parameter_list|(
name|String
modifier|...
name|files
parameter_list|)
block|{
for|for
control|(
name|String
name|file
range|:
name|files
control|)
block|{
try|try
block|{
name|directory
argument_list|()
operator|.
name|deleteFile
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
comment|/**      * Marks this store as corrupted. This method writes a<tt>corrupted_${uuid}</tt> file containing the given exception      * message. If a store contains a<tt>corrupted_${uuid}</tt> file {@link #isMarkedCorrupted()} will return<code>true</code>.      */
DECL|method|markStoreCorrupted
specifier|public
name|void
name|markStoreCorrupted
parameter_list|(
name|CorruptIndexException
name|exception
parameter_list|)
throws|throws
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|isMarkedCorrupted
argument_list|()
condition|)
block|{
name|String
name|uuid
init|=
name|CORRUPTED
operator|+
name|Strings
operator|.
name|randomBase64UUID
argument_list|()
decl_stmt|;
try|try
init|(
name|IndexOutput
name|output
init|=
name|this
operator|.
name|directory
argument_list|()
operator|.
name|createOutput
argument_list|(
name|uuid
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
init|)
block|{
name|CodecUtil
operator|.
name|writeHeader
argument_list|(
name|output
argument_list|,
name|CODEC
argument_list|,
name|VERSION
argument_list|)
expr_stmt|;
name|output
operator|.
name|writeString
argument_list|(
name|ExceptionsHelper
operator|.
name|detailedMessage
argument_list|(
name|exception
argument_list|,
literal|true
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// handles null exception
name|CodecUtil
operator|.
name|writeFooter
argument_list|(
name|output
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Can't mark store as corrupted"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
name|directory
argument_list|()
operator|.
name|sync
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|uuid
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

