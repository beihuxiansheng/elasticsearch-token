begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.store
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|store
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|CodecUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|lucene46
operator|.
name|Lucene46SegmentInfoFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRefBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ExceptionsHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|Tuple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|compress
operator|.
name|Compressor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|compress
operator|.
name|CompressorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|Streams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|ESLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|Directories
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|Lucene
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|store
operator|.
name|InputStreamIndexInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|AbstractRefCounted
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|RefCounted
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|CloseableIndexComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|codec
operator|.
name|CodecService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|settings
operator|.
name|IndexSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|AbstractIndexShardComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|store
operator|.
name|distributor
operator|.
name|Distributor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|NoSuchFileException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|CRC32
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|Checksum
import|;
end_import

begin_comment
comment|/**  * A Store provides plain access to files written by an elasticsearch index shard. Each shard  * has a dedicated store that is uses to access Lucene's Directory which represents the lowest level  * of file abstraction in Lucene used to read and write Lucene indices.  * This class also provides access to metadata information like checksums for committed files. A committed  * file is a file that belongs to a segment written by a Lucene commit. Files that have not been committed  * ie. created during a merge or a shard refresh / NRT reopen are not considered in the MetadataSnapshot.  *  * Note: If you use a store it's reference count should be increased before using it by calling #incRef and a  * corresponding #decRef must be called in a try/finally block to release the store again ie.:  *<pre>  *      store.incRef();  *      try {  *        // use the store...  *  *      } finally {  *          store.decRef();  *      }  *</pre>  */
end_comment

begin_class
DECL|class|Store
specifier|public
class|class
name|Store
extends|extends
name|AbstractIndexShardComponent
implements|implements
name|CloseableIndexComponent
implements|,
name|Closeable
implements|,
name|RefCounted
block|{
DECL|field|CODEC
specifier|private
specifier|static
specifier|final
name|String
name|CODEC
init|=
literal|"store"
decl_stmt|;
DECL|field|VERSION_STACK_TRACE
specifier|private
specifier|static
specifier|final
name|int
name|VERSION_STACK_TRACE
init|=
literal|1
decl_stmt|;
comment|// we write the stack trace too since 1.4.0
DECL|field|VERSION_START
specifier|private
specifier|static
specifier|final
name|int
name|VERSION_START
init|=
literal|0
decl_stmt|;
DECL|field|VERSION
specifier|private
specifier|static
specifier|final
name|int
name|VERSION
init|=
name|VERSION_STACK_TRACE
decl_stmt|;
DECL|field|CORRUPTED
specifier|private
specifier|static
specifier|final
name|String
name|CORRUPTED
init|=
literal|"corrupted_"
decl_stmt|;
DECL|field|isClosed
specifier|private
specifier|final
name|AtomicBoolean
name|isClosed
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
DECL|field|codecService
specifier|private
specifier|final
name|CodecService
name|codecService
decl_stmt|;
DECL|field|directoryService
specifier|private
specifier|final
name|DirectoryService
name|directoryService
decl_stmt|;
DECL|field|directory
specifier|private
specifier|final
name|StoreDirectory
name|directory
decl_stmt|;
DECL|field|distributorDirectory
specifier|private
specifier|final
name|DistributorDirectory
name|distributorDirectory
decl_stmt|;
DECL|field|refCounter
specifier|private
specifier|final
name|AbstractRefCounted
name|refCounter
init|=
operator|new
name|AbstractRefCounted
argument_list|(
literal|"store"
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|closeInternal
parameter_list|()
block|{
comment|// close us once we are done
name|Store
operator|.
name|this
operator|.
name|closeInternal
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
annotation|@
name|Inject
DECL|method|Store
specifier|public
name|Store
parameter_list|(
name|ShardId
name|shardId
parameter_list|,
annotation|@
name|IndexSettings
name|Settings
name|indexSettings
parameter_list|,
name|CodecService
name|codecService
parameter_list|,
name|DirectoryService
name|directoryService
parameter_list|,
name|Distributor
name|distributor
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|shardId
argument_list|,
name|indexSettings
argument_list|)
expr_stmt|;
name|this
operator|.
name|codecService
operator|=
name|codecService
expr_stmt|;
name|this
operator|.
name|directoryService
operator|=
name|directoryService
expr_stmt|;
name|this
operator|.
name|distributorDirectory
operator|=
operator|new
name|DistributorDirectory
argument_list|(
name|distributor
argument_list|)
expr_stmt|;
name|this
operator|.
name|directory
operator|=
operator|new
name|StoreDirectory
argument_list|(
name|distributorDirectory
argument_list|)
expr_stmt|;
block|}
DECL|method|directory
specifier|public
name|Directory
name|directory
parameter_list|()
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
return|return
name|directory
return|;
block|}
comment|/**      * Returns the last committed segments info for this store      * @throws IOException if the index is corrupted or the segments file is not present      */
DECL|method|readLastCommittedSegmentsInfo
specifier|public
name|SegmentInfos
name|readLastCommittedSegmentsInfo
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|readSegmentsInfo
argument_list|(
literal|null
argument_list|,
name|directory
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Returns the segments info for the given commit or for the latest commit if the given commit is<code>null</code>      * @throws IOException if the index is corrupted or the segments file is not present      */
DECL|method|readSegmentsInfo
specifier|private
specifier|static
name|SegmentInfos
name|readSegmentsInfo
parameter_list|(
name|IndexCommit
name|commit
parameter_list|,
name|Directory
name|directory
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
return|return
name|commit
operator|==
literal|null
condition|?
name|Lucene
operator|.
name|readSegmentInfos
argument_list|(
name|directory
argument_list|)
else|:
name|Lucene
operator|.
name|readSegmentInfos
argument_list|(
name|commit
argument_list|,
name|directory
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|EOFException
name|eof
parameter_list|)
block|{
comment|// TODO this should be caught by lucene - EOF is almost certainly an index corruption
throw|throw
operator|new
name|CorruptIndexException
argument_list|(
literal|"Read past EOF while reading segment infos"
argument_list|,
name|eof
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|exception
parameter_list|)
block|{
throw|throw
name|exception
throw|;
comment|// IOExceptions like too many open files are not necessarily a corruption - just bubble it up
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|CorruptIndexException
argument_list|(
literal|"Hit unexpected exception while reading segment infos"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
DECL|method|ensureOpen
specifier|final
name|void
name|ensureOpen
parameter_list|()
block|{
comment|// for testing
if|if
condition|(
name|this
operator|.
name|refCounter
operator|.
name|refCount
argument_list|()
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|AlreadyClosedException
argument_list|(
literal|"store is already closed"
argument_list|)
throw|;
block|}
block|}
comment|/**      * Returns a new MetadataSnapshot for the latest commit in this store or      * an empty snapshot if no index exists or can not be opened.      * @throws CorruptIndexException if the lucene index is corrupted. This can be caused by a checksum mismatch or an      * unexpected exception when opening the index reading the segments file.      */
DECL|method|getMetadataOrEmpty
specifier|public
name|MetadataSnapshot
name|getMetadataOrEmpty
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
return|return
name|getMetadata
argument_list|(
literal|null
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IndexNotFoundException
name|ex
parameter_list|)
block|{
comment|// that's fine - happens all the time no need to log
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
decl||
name|NoSuchFileException
name|ex
parameter_list|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Failed to open / find files while reading metadata snapshot"
argument_list|)
expr_stmt|;
block|}
return|return
name|MetadataSnapshot
operator|.
name|EMPTY
return|;
block|}
comment|/**      * Returns a new MetadataSnapshot for the latest commit in this store.      *      * @throws CorruptIndexException if the lucene index is corrupted. This can be caused by a checksum mismatch or an      * unexpected exception when opening the index reading the segments file.      * @throws FileNotFoundException if one or more files referenced by a commit are not present.      * @throws NoSuchFileException if one or more files referenced by a commit are not present.      * @throws IndexNotFoundException if no index / valid commit-point can be found in this store      */
DECL|method|getMetadata
specifier|public
name|MetadataSnapshot
name|getMetadata
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|getMetadata
argument_list|(
literal|null
argument_list|)
return|;
block|}
comment|/**      * Returns a new MetadataSnapshot for the given commit. If the given commit is<code>null</code>      * the latest commit point is used.      *      * @throws CorruptIndexException if the lucene index is corrupted. This can be caused by a checksum mismatch or an      * unexpected exception when opening the index reading the segments file.      * @throws FileNotFoundException if one or more files referenced by a commit are not present.      * @throws NoSuchFileException if one or more files referenced by a commit are not present.      * @throws IndexNotFoundException if the commit point can't be found in this store      */
DECL|method|getMetadata
specifier|public
name|MetadataSnapshot
name|getMetadata
parameter_list|(
name|IndexCommit
name|commit
parameter_list|)
throws|throws
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
name|failIfCorrupted
argument_list|()
expr_stmt|;
try|try
block|{
return|return
operator|new
name|MetadataSnapshot
argument_list|(
name|commit
argument_list|,
name|distributorDirectory
argument_list|,
name|logger
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|CorruptIndexException
name|ex
parameter_list|)
block|{
name|markStoreCorrupted
argument_list|(
name|ex
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
block|}
comment|/**      * Deletes the content of a shard store. Be careful calling this!.      */
DECL|method|deleteContent
specifier|public
name|void
name|deleteContent
parameter_list|()
throws|throws
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
specifier|final
name|String
index|[]
name|files
init|=
name|distributorDirectory
operator|.
name|listAll
argument_list|()
decl_stmt|;
name|IOException
name|lastException
init|=
literal|null
decl_stmt|;
for|for
control|(
name|String
name|file
range|:
name|files
control|)
block|{
try|try
block|{
name|distributorDirectory
operator|.
name|deleteFile
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchFileException
decl||
name|FileNotFoundException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|lastException
operator|=
name|e
expr_stmt|;
block|}
block|}
if|if
condition|(
name|lastException
operator|!=
literal|null
condition|)
block|{
throw|throw
name|lastException
throw|;
block|}
block|}
DECL|method|stats
specifier|public
name|StoreStats
name|stats
parameter_list|()
throws|throws
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
return|return
operator|new
name|StoreStats
argument_list|(
name|Directories
operator|.
name|estimateSize
argument_list|(
name|directory
argument_list|)
argument_list|,
name|directoryService
operator|.
name|throttleTimeInNanos
argument_list|()
argument_list|)
return|;
block|}
DECL|method|renameFile
specifier|public
name|void
name|renameFile
parameter_list|(
name|String
name|from
parameter_list|,
name|String
name|to
parameter_list|)
throws|throws
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
name|distributorDirectory
operator|.
name|renameFile
argument_list|(
name|directoryService
argument_list|,
name|from
argument_list|,
name|to
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns<tt>true</tt> by default.      */
DECL|method|suggestUseCompoundFile
specifier|public
name|boolean
name|suggestUseCompoundFile
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
comment|/**      * Increments the refCount of this Store instance.  RefCounts are used to determine when a      * Store can be closed safely, i.e. as soon as there are no more references. Be sure to always call a      * corresponding {@link #decRef}, in a finally clause; otherwise the store may never be closed.  Note that      * {@link #close} simply calls decRef(), which means that the Store will not really be closed until {@link      * #decRef} has been called for all outstanding references.      *      * Note: Close can safely be called multiple times.      * @see #decRef      * @see #tryIncRef()      * @throws AlreadyClosedException iff the reference counter can not be incremented.      */
annotation|@
name|Override
DECL|method|incRef
specifier|public
specifier|final
name|void
name|incRef
parameter_list|()
block|{
name|refCounter
operator|.
name|incRef
argument_list|()
expr_stmt|;
block|}
comment|/**      * Tries to increment the refCount of this Store instance. This method will return<tt>true</tt> iff the refCount was      * incremented successfully otherwise<tt>false</tt>. RefCounts are used to determine when a      * Store can be closed safely, i.e. as soon as there are no more references. Be sure to always call a      * corresponding {@link #decRef}, in a finally clause; otherwise the store may never be closed.  Note that      * {@link #close} simply calls decRef(), which means that the Store will not really be closed until {@link      * #decRef} has been called for all outstanding references.      *      * Note: Close can safely be called multiple times.      * @see #decRef()      * @see #incRef()      */
annotation|@
name|Override
DECL|method|tryIncRef
specifier|public
specifier|final
name|boolean
name|tryIncRef
parameter_list|()
block|{
return|return
name|refCounter
operator|.
name|tryIncRef
argument_list|()
return|;
block|}
comment|/**      * Decreases the refCount of this Store instance.If the refCount drops to 0, then this      * store is closed.      * @see #incRef      */
annotation|@
name|Override
DECL|method|decRef
specifier|public
specifier|final
name|void
name|decRef
parameter_list|()
block|{
name|refCounter
operator|.
name|decRef
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
name|isClosed
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
comment|// only do this once!
name|decRef
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|closeInternal
specifier|private
name|void
name|closeInternal
parameter_list|()
block|{
try|try
block|{
name|directory
operator|.
name|innerClose
argument_list|()
expr_stmt|;
comment|// this closes the distributorDirectory as well
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"failed to close directory"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Reads a MetadataSnapshot from the given index locations or returns an empty snapshot if it can't be read.      * @throws IOException if the index we try to read is corrupted      */
DECL|method|readMetadataSnapshot
specifier|public
specifier|static
name|MetadataSnapshot
name|readMetadataSnapshot
parameter_list|(
name|File
index|[]
name|indexLocations
parameter_list|,
name|ESLogger
name|logger
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Directory
index|[]
name|dirs
init|=
operator|new
name|Directory
index|[
name|indexLocations
operator|.
name|length
index|]
decl_stmt|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|indexLocations
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|dirs
index|[
name|i
index|]
operator|=
operator|new
name|SimpleFSDirectory
argument_list|(
name|indexLocations
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|DistributorDirectory
name|dir
init|=
operator|new
name|DistributorDirectory
argument_list|(
name|dirs
argument_list|)
decl_stmt|;
name|failIfCorrupted
argument_list|(
name|dir
argument_list|,
operator|new
name|ShardId
argument_list|(
literal|""
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|new
name|MetadataSnapshot
argument_list|(
literal|null
argument_list|,
name|dir
argument_list|,
name|logger
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IndexNotFoundException
name|ex
parameter_list|)
block|{
comment|// that's fine - happens all the time no need to log
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
decl||
name|NoSuchFileException
name|ex
parameter_list|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Failed to open / find files while reading metadata snapshot"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|close
argument_list|(
name|dirs
argument_list|)
expr_stmt|;
block|}
return|return
name|MetadataSnapshot
operator|.
name|EMPTY
return|;
block|}
comment|/**      * The returned IndexOutput might validate the files checksum if the file has been written with a newer lucene version      * and the metadata holds the necessary information to detect that it was been written by Lucene 4.8 or newer. If it has only      * a legacy checksum, returned IndexOutput will not verify the checksum.      *      * Note: Checksums are calculated nevertheless since lucene does it by default sicne version 4.8.0. This method only adds the      * verification against the checksum in the given metadata and does not add any significant overhead.      */
DECL|method|createVerifyingOutput
specifier|public
name|IndexOutput
name|createVerifyingOutput
parameter_list|(
name|String
name|fileName
parameter_list|,
specifier|final
name|StoreFileMetaData
name|metadata
parameter_list|,
specifier|final
name|IOContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|IndexOutput
name|output
init|=
name|directory
argument_list|()
operator|.
name|createOutput
argument_list|(
name|fileName
argument_list|,
name|context
argument_list|)
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
if|if
condition|(
name|metadata
operator|.
name|hasLegacyChecksum
argument_list|()
operator|||
name|metadata
operator|.
name|checksum
argument_list|()
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"create legacy output for {}"
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
assert|assert
name|metadata
operator|.
name|writtenBy
argument_list|()
operator|!=
literal|null
assert|;
assert|assert
name|metadata
operator|.
name|writtenBy
argument_list|()
operator|.
name|onOrAfter
argument_list|(
name|Version
operator|.
name|LUCENE_48
argument_list|)
assert|;
name|output
operator|=
operator|new
name|VerifyingIndexOutput
argument_list|(
name|metadata
argument_list|,
name|output
argument_list|)
expr_stmt|;
block|}
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|success
operator|==
literal|false
condition|)
block|{
name|IOUtils
operator|.
name|closeWhileHandlingException
argument_list|(
name|output
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|output
return|;
block|}
DECL|method|verify
specifier|public
specifier|static
name|void
name|verify
parameter_list|(
name|IndexOutput
name|output
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|output
operator|instanceof
name|VerifyingIndexOutput
condition|)
block|{
operator|(
operator|(
name|VerifyingIndexOutput
operator|)
name|output
operator|)
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|openVerifyingInput
specifier|public
name|IndexInput
name|openVerifyingInput
parameter_list|(
name|String
name|filename
parameter_list|,
name|IOContext
name|context
parameter_list|,
name|StoreFileMetaData
name|metadata
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|metadata
operator|.
name|hasLegacyChecksum
argument_list|()
operator|||
name|metadata
operator|.
name|checksum
argument_list|()
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"open legacy input for {}"
argument_list|,
name|filename
argument_list|)
expr_stmt|;
return|return
name|directory
argument_list|()
operator|.
name|openInput
argument_list|(
name|filename
argument_list|,
name|context
argument_list|)
return|;
block|}
assert|assert
name|metadata
operator|.
name|writtenBy
argument_list|()
operator|!=
literal|null
assert|;
assert|assert
name|metadata
operator|.
name|writtenBy
argument_list|()
operator|.
name|onOrAfter
argument_list|(
name|Version
operator|.
name|LUCENE_48
argument_list|)
assert|;
return|return
operator|new
name|VerifyingIndexInput
argument_list|(
name|directory
argument_list|()
operator|.
name|openInput
argument_list|(
name|filename
argument_list|,
name|context
argument_list|)
argument_list|)
return|;
block|}
DECL|method|verify
specifier|public
specifier|static
name|void
name|verify
parameter_list|(
name|IndexInput
name|input
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|input
operator|instanceof
name|VerifyingIndexInput
condition|)
block|{
operator|(
operator|(
name|VerifyingIndexInput
operator|)
name|input
operator|)
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|checkIntegrity
specifier|public
name|boolean
name|checkIntegrity
parameter_list|(
name|StoreFileMetaData
name|md
parameter_list|)
block|{
if|if
condition|(
name|md
operator|.
name|writtenBy
argument_list|()
operator|!=
literal|null
operator|&&
name|md
operator|.
name|writtenBy
argument_list|()
operator|.
name|onOrAfter
argument_list|(
name|Version
operator|.
name|LUCENE_48
argument_list|)
condition|)
block|{
try|try
init|(
name|IndexInput
name|input
init|=
name|directory
argument_list|()
operator|.
name|openInput
argument_list|(
name|md
operator|.
name|name
argument_list|()
argument_list|,
name|IOContext
operator|.
name|READONCE
argument_list|)
init|)
block|{
name|CodecUtil
operator|.
name|checksumEntireFile
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
DECL|method|isMarkedCorrupted
specifier|public
name|boolean
name|isMarkedCorrupted
parameter_list|()
throws|throws
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
comment|/* marking a store as corrupted is basically adding a _corrupted to all          * the files. This prevent          */
specifier|final
name|String
index|[]
name|files
init|=
name|directory
argument_list|()
operator|.
name|listAll
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|file
range|:
name|files
control|)
block|{
if|if
condition|(
name|file
operator|.
name|startsWith
argument_list|(
name|CORRUPTED
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|failIfCorrupted
specifier|public
name|void
name|failIfCorrupted
parameter_list|()
throws|throws
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
name|failIfCorrupted
argument_list|(
name|directory
argument_list|,
name|shardId
argument_list|)
expr_stmt|;
block|}
DECL|method|failIfCorrupted
specifier|private
specifier|static
specifier|final
name|void
name|failIfCorrupted
parameter_list|(
name|Directory
name|directory
parameter_list|,
name|ShardId
name|shardId
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
index|[]
name|files
init|=
name|directory
operator|.
name|listAll
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|CorruptIndexException
argument_list|>
name|ex
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|file
range|:
name|files
control|)
block|{
if|if
condition|(
name|file
operator|.
name|startsWith
argument_list|(
name|CORRUPTED
argument_list|)
condition|)
block|{
try|try
init|(
name|ChecksumIndexInput
name|input
init|=
name|directory
operator|.
name|openChecksumInput
argument_list|(
name|file
argument_list|,
name|IOContext
operator|.
name|READONCE
argument_list|)
init|)
block|{
name|int
name|version
init|=
name|CodecUtil
operator|.
name|checkHeader
argument_list|(
name|input
argument_list|,
name|CODEC
argument_list|,
name|VERSION_START
argument_list|,
name|VERSION
argument_list|)
decl_stmt|;
name|String
name|msg
init|=
name|input
operator|.
name|readString
argument_list|()
decl_stmt|;
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|(
name|shardId
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|" Preexisting corrupted index ["
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|file
argument_list|)
operator|.
name|append
argument_list|(
literal|"] caused by: "
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|msg
argument_list|)
expr_stmt|;
if|if
condition|(
name|version
operator|==
name|VERSION_STACK_TRACE
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|System
operator|.
name|lineSeparator
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|input
operator|.
name|readString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ex
operator|.
name|add
argument_list|(
operator|new
name|CorruptIndexException
argument_list|(
name|builder
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|CodecUtil
operator|.
name|checkFooter
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|ex
operator|.
name|isEmpty
argument_list|()
operator|==
literal|false
condition|)
block|{
name|ExceptionsHelper
operator|.
name|rethrowAndSuppress
argument_list|(
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * This exists so {@link org.elasticsearch.index.codec.postingsformat.BloomFilterPostingsFormat} can load its boolean setting; can we find a more straightforward way?      */
DECL|class|StoreDirectory
specifier|public
specifier|final
class|class
name|StoreDirectory
extends|extends
name|FilterDirectory
block|{
DECL|method|StoreDirectory
name|StoreDirectory
parameter_list|(
name|Directory
name|delegateDirectory
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|delegateDirectory
argument_list|)
expr_stmt|;
block|}
DECL|method|shardId
specifier|public
name|ShardId
name|shardId
parameter_list|()
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
return|return
name|Store
operator|.
name|this
operator|.
name|shardId
argument_list|()
return|;
block|}
annotation|@
name|Nullable
DECL|method|codecService
specifier|public
name|CodecService
name|codecService
parameter_list|()
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
return|return
name|Store
operator|.
name|this
operator|.
name|codecService
return|;
block|}
annotation|@
name|Override
DECL|method|openInput
specifier|public
name|IndexInput
name|openInput
parameter_list|(
name|String
name|name
parameter_list|,
name|IOContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|IndexInput
name|in
init|=
name|super
operator|.
name|openInput
argument_list|(
name|name
argument_list|,
name|context
argument_list|)
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
comment|// Only for backward comp. since we now use Lucene codec compression
if|if
condition|(
name|name
operator|.
name|endsWith
argument_list|(
literal|".fdt"
argument_list|)
operator|||
name|name
operator|.
name|endsWith
argument_list|(
literal|".tvf"
argument_list|)
condition|)
block|{
name|Compressor
name|compressor
init|=
name|CompressorFactory
operator|.
name|compressor
argument_list|(
name|in
argument_list|)
decl_stmt|;
if|if
condition|(
name|compressor
operator|!=
literal|null
condition|)
block|{
name|in
operator|=
name|compressor
operator|.
name|indexInput
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
block|}
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|IOUtils
operator|.
name|closeWhileHandlingException
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|in
return|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
assert|assert
literal|false
operator|:
literal|"Nobody should close this directory except of the Store itself"
assert|;
block|}
DECL|method|innerClose
specifier|private
name|void
name|innerClose
parameter_list|()
throws|throws
name|IOException
block|{
assert|assert
name|DistributorDirectory
operator|.
name|assertConsistency
argument_list|(
name|logger
argument_list|,
name|distributorDirectory
argument_list|)
assert|;
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"store("
operator|+
name|in
operator|.
name|toString
argument_list|()
operator|+
literal|")"
return|;
block|}
block|}
comment|/**      * Represents a snaphshot of the current directory build from the latest Lucene commit.      * Only files that are part of the last commit are considered in this datastrucutre.      * For backwards compatibility the snapshot might include legacy checksums that      * are derived from a dedicated checksum file written by older elasticsearch version pre 1.3      *      * Note: This class will ignore the<tt>segments.gen</tt> file since it's optional and might      * change concurrently for safety reasons.      *      * @see StoreFileMetaData      */
DECL|class|MetadataSnapshot
specifier|public
specifier|final
specifier|static
class|class
name|MetadataSnapshot
implements|implements
name|Iterable
argument_list|<
name|StoreFileMetaData
argument_list|>
block|{
DECL|field|metadata
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|StoreFileMetaData
argument_list|>
name|metadata
decl_stmt|;
DECL|field|EMPTY
specifier|public
specifier|static
specifier|final
name|MetadataSnapshot
name|EMPTY
init|=
operator|new
name|MetadataSnapshot
argument_list|()
decl_stmt|;
DECL|method|MetadataSnapshot
specifier|public
name|MetadataSnapshot
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|StoreFileMetaData
argument_list|>
name|metadata
parameter_list|)
block|{
name|this
operator|.
name|metadata
operator|=
name|metadata
expr_stmt|;
block|}
DECL|method|MetadataSnapshot
name|MetadataSnapshot
parameter_list|()
block|{
name|this
operator|.
name|metadata
operator|=
name|Collections
operator|.
name|emptyMap
argument_list|()
expr_stmt|;
block|}
DECL|method|MetadataSnapshot
name|MetadataSnapshot
parameter_list|(
name|IndexCommit
name|commit
parameter_list|,
name|Directory
name|directory
parameter_list|,
name|ESLogger
name|logger
parameter_list|)
throws|throws
name|IOException
block|{
name|metadata
operator|=
name|buildMetadata
argument_list|(
name|commit
argument_list|,
name|directory
argument_list|,
name|logger
argument_list|)
expr_stmt|;
block|}
DECL|method|buildMetadata
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|StoreFileMetaData
argument_list|>
name|buildMetadata
parameter_list|(
name|IndexCommit
name|commit
parameter_list|,
name|Directory
name|directory
parameter_list|,
name|ESLogger
name|logger
parameter_list|)
throws|throws
name|IOException
block|{
name|ImmutableMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|StoreFileMetaData
argument_list|>
name|builder
init|=
name|ImmutableMap
operator|.
name|builder
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|checksumMap
init|=
name|readLegacyChecksums
argument_list|(
name|directory
argument_list|)
operator|.
name|v1
argument_list|()
decl_stmt|;
try|try
block|{
specifier|final
name|SegmentInfos
name|segmentCommitInfos
init|=
name|Store
operator|.
name|readSegmentsInfo
argument_list|(
name|commit
argument_list|,
name|directory
argument_list|)
decl_stmt|;
name|Version
name|maxVersion
init|=
name|Version
operator|.
name|LUCENE_3_0
decl_stmt|;
comment|// we don't know which version was used to write so we take the max version.
for|for
control|(
name|SegmentCommitInfo
name|info
range|:
name|segmentCommitInfos
control|)
block|{
specifier|final
name|Version
name|version
init|=
name|info
operator|.
name|info
operator|.
name|getVersion
argument_list|()
decl_stmt|;
if|if
condition|(
name|version
operator|!=
literal|null
operator|&&
name|version
operator|.
name|onOrAfter
argument_list|(
name|maxVersion
argument_list|)
condition|)
block|{
name|maxVersion
operator|=
name|version
expr_stmt|;
block|}
for|for
control|(
name|String
name|file
range|:
name|info
operator|.
name|files
argument_list|()
control|)
block|{
name|String
name|legacyChecksum
init|=
name|checksumMap
operator|.
name|get
argument_list|(
name|file
argument_list|)
decl_stmt|;
if|if
condition|(
name|version
operator|.
name|onOrAfter
argument_list|(
name|Version
operator|.
name|LUCENE_4_8
argument_list|)
operator|&&
name|legacyChecksum
operator|==
literal|null
condition|)
block|{
name|checksumFromLuceneFile
argument_list|(
name|directory
argument_list|,
name|file
argument_list|,
name|builder
argument_list|,
name|logger
argument_list|,
name|version
argument_list|,
name|Lucene46SegmentInfoFormat
operator|.
name|SI_EXTENSION
operator|.
name|equals
argument_list|(
name|IndexFileNames
operator|.
name|getExtension
argument_list|(
name|file
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|put
argument_list|(
name|file
argument_list|,
operator|new
name|StoreFileMetaData
argument_list|(
name|file
argument_list|,
name|directory
operator|.
name|fileLength
argument_list|(
name|file
argument_list|)
argument_list|,
name|legacyChecksum
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|final
name|String
name|segmentsFile
init|=
name|segmentCommitInfos
operator|.
name|getSegmentsFileName
argument_list|()
decl_stmt|;
name|String
name|legacyChecksum
init|=
name|checksumMap
operator|.
name|get
argument_list|(
name|segmentsFile
argument_list|)
decl_stmt|;
if|if
condition|(
name|maxVersion
operator|.
name|onOrAfter
argument_list|(
name|Version
operator|.
name|LUCENE_4_8
argument_list|)
operator|&&
name|legacyChecksum
operator|==
literal|null
condition|)
block|{
name|checksumFromLuceneFile
argument_list|(
name|directory
argument_list|,
name|segmentsFile
argument_list|,
name|builder
argument_list|,
name|logger
argument_list|,
name|maxVersion
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|put
argument_list|(
name|segmentsFile
argument_list|,
operator|new
name|StoreFileMetaData
argument_list|(
name|segmentsFile
argument_list|,
name|directory
operator|.
name|fileLength
argument_list|(
name|segmentsFile
argument_list|)
argument_list|,
name|legacyChecksum
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|CorruptIndexException
name|ex
parameter_list|)
block|{
throw|throw
name|ex
throw|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
try|try
block|{
comment|// Lucene checks the checksum after it tries to lookup the codec etc.
comment|// in that case we might get only IAE or similar exceptions while we are really corrupt...
comment|// TODO we should check the checksum in lucene if we hit an exception
name|Lucene
operator|.
name|checkSegmentInfoIntegrity
argument_list|(
name|directory
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CorruptIndexException
name|cex
parameter_list|)
block|{
name|cex
operator|.
name|addSuppressed
argument_list|(
name|ex
argument_list|)
expr_stmt|;
throw|throw
name|cex
throw|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
comment|// ignore...
block|}
throw|throw
name|ex
throw|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|readLegacyChecksums
specifier|static
name|Tuple
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|,
name|Long
argument_list|>
name|readLegacyChecksums
parameter_list|(
name|Directory
name|directory
parameter_list|)
throws|throws
name|IOException
block|{
synchronized|synchronized
init|(
name|directory
init|)
block|{
name|long
name|lastFound
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|directory
operator|.
name|listAll
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|isChecksum
argument_list|(
name|name
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|long
name|current
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|name
operator|.
name|substring
argument_list|(
name|CHECKSUMS_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|current
operator|>
name|lastFound
condition|)
block|{
name|lastFound
operator|=
name|current
expr_stmt|;
block|}
block|}
if|if
condition|(
name|lastFound
operator|>
operator|-
literal|1
condition|)
block|{
try|try
init|(
name|IndexInput
name|indexInput
init|=
name|directory
operator|.
name|openInput
argument_list|(
name|CHECKSUMS_PREFIX
operator|+
name|lastFound
argument_list|,
name|IOContext
operator|.
name|READONCE
argument_list|)
init|)
block|{
name|indexInput
operator|.
name|readInt
argument_list|()
expr_stmt|;
comment|// version
return|return
operator|new
name|Tuple
argument_list|(
name|indexInput
operator|.
name|readStringStringMap
argument_list|()
argument_list|,
name|lastFound
argument_list|)
return|;
block|}
block|}
return|return
operator|new
name|Tuple
argument_list|(
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|,
operator|-
literal|1l
argument_list|)
return|;
block|}
block|}
DECL|method|checksumFromLuceneFile
specifier|private
specifier|static
name|void
name|checksumFromLuceneFile
parameter_list|(
name|Directory
name|directory
parameter_list|,
name|String
name|file
parameter_list|,
name|ImmutableMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|StoreFileMetaData
argument_list|>
name|builder
parameter_list|,
name|ESLogger
name|logger
parameter_list|,
name|Version
name|version
parameter_list|,
name|boolean
name|readFileAsHash
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|checksum
decl_stmt|;
specifier|final
name|BytesRefBuilder
name|fileHash
init|=
operator|new
name|BytesRefBuilder
argument_list|()
decl_stmt|;
try|try
init|(
specifier|final
name|IndexInput
name|in
init|=
name|directory
operator|.
name|openInput
argument_list|(
name|file
argument_list|,
name|IOContext
operator|.
name|READONCE
argument_list|)
init|)
block|{
try|try
block|{
if|if
condition|(
name|in
operator|.
name|length
argument_list|()
operator|<
name|CodecUtil
operator|.
name|footerLength
argument_list|()
condition|)
block|{
comment|// truncated files trigger IAE if we seek negative... these files are really corrupted though
throw|throw
operator|new
name|CorruptIndexException
argument_list|(
literal|"Can't retrieve checksum from file: "
operator|+
name|file
operator|+
literal|" file length must be>= "
operator|+
name|CodecUtil
operator|.
name|footerLength
argument_list|()
operator|+
literal|" but was: "
operator|+
name|in
operator|.
name|length
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|readFileAsHash
condition|)
block|{
name|hashFile
argument_list|(
name|fileHash
argument_list|,
operator|new
name|InputStreamIndexInput
argument_list|(
name|in
argument_list|,
name|in
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
name|in
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|checksum
operator|=
name|digestToString
argument_list|(
name|CodecUtil
operator|.
name|retrieveChecksum
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"Can retrieve checksum from file [{}]"
argument_list|,
name|ex
argument_list|,
name|file
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
name|builder
operator|.
name|put
argument_list|(
name|file
argument_list|,
operator|new
name|StoreFileMetaData
argument_list|(
name|file
argument_list|,
name|directory
operator|.
name|fileLength
argument_list|(
name|file
argument_list|)
argument_list|,
name|checksum
argument_list|,
name|version
argument_list|,
name|fileHash
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**          * Computes a strong hash value for small files. Note that this method should only be used for files< 1MB          */
DECL|method|hashFile
specifier|public
specifier|static
name|void
name|hashFile
parameter_list|(
name|BytesRefBuilder
name|fileHash
parameter_list|,
name|InputStream
name|in
parameter_list|,
name|long
name|size
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|len
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|min
argument_list|(
literal|1024
operator|*
literal|1024
argument_list|,
name|size
argument_list|)
decl_stmt|;
comment|// for safety we limit this to 1MB
name|fileHash
operator|.
name|grow
argument_list|(
name|len
argument_list|)
expr_stmt|;
name|fileHash
operator|.
name|setLength
argument_list|(
name|len
argument_list|)
expr_stmt|;
specifier|final
name|int
name|readBytes
init|=
name|Streams
operator|.
name|readFully
argument_list|(
name|in
argument_list|,
name|fileHash
operator|.
name|bytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
decl_stmt|;
assert|assert
name|readBytes
operator|==
name|len
operator|:
name|Integer
operator|.
name|toString
argument_list|(
name|readBytes
argument_list|)
operator|+
literal|" != "
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|len
argument_list|)
assert|;
assert|assert
name|fileHash
operator|.
name|length
argument_list|()
operator|==
name|len
operator|:
name|Integer
operator|.
name|toString
argument_list|(
name|fileHash
operator|.
name|length
argument_list|()
argument_list|)
operator|+
literal|" != "
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|len
argument_list|)
assert|;
block|}
annotation|@
name|Override
DECL|method|iterator
specifier|public
name|Iterator
argument_list|<
name|StoreFileMetaData
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|metadata
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
return|;
block|}
DECL|method|get
specifier|public
name|StoreFileMetaData
name|get
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|metadata
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
DECL|method|asMap
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|StoreFileMetaData
argument_list|>
name|asMap
parameter_list|()
block|{
return|return
name|metadata
return|;
block|}
DECL|field|DEL_FILE_EXTENSION
specifier|private
specifier|static
specifier|final
name|String
name|DEL_FILE_EXTENSION
init|=
literal|"del"
decl_stmt|;
comment|// TODO think about how we can detect if this changes?
DECL|field|FIELD_INFOS_FILE_EXTENSION
specifier|private
specifier|static
specifier|final
name|String
name|FIELD_INFOS_FILE_EXTENSION
init|=
literal|"fnm"
decl_stmt|;
comment|/**          * Returns a diff between the two snapshots that can be used for recovery. The given snapshot is treated as the          * recovery target and this snapshot as the source. The returned diff will hold a list of files that are:          *<ul>          *<li>identical: they exist in both snapshots and they can be considered the same ie. they don't need to be recovered</li>          *<li>different: they exist in both snapshots but their they are not identical</li>          *<li>missing: files that exist in the source but not in the target</li>          *</ul>          * This method groups file into per-segment files and per-commit files. A file is treated as          * identical if and on if all files in it's group are identical. On a per-segment level files for a segment are treated          * as identical iff:          *<ul>          *<li>all files in this segment have the same checksum</li>          *<li>all files in this segment have the same length</li>          *<li>the segments<tt>.si</tt> files hashes are byte-identical Note: This is a using a perfect hash function, The metadata transfers the<tt>.si</tt> file content as it's hash</li>          *</ul>          *          * The<tt>.si</tt> file contains a lot of diagnostics including a timestamp etc. in the future there might be          * unique segment identifiers in there hardening this method further.          *          * The per-commit files handles very similar. A commit is composed of the<tt>segments_N</tt> files as well as generational files like          * deletes (<tt>_x_y.del</tt>) or field-info (<tt>_x_y.fnm</tt>) files. On a per-commit level files for a commit are treated          * as identical iff:          *<ul>          *<li>all files belonging to this commit have the same checksum</li>          *<li>all files belonging to this commit have the same length</li>          *<li>the segments file<tt>segments_N</tt> files hashes are byte-identical Note: This is a using a perfect hash function, The metadata transfers the<tt>segments_N</tt> file content as it's hash</li>          *</ul>          *          * NOTE: this diff will not contain the<tt>segments.gen</tt> file. This file is omitted on recovery.          */
DECL|method|recoveryDiff
specifier|public
name|RecoveryDiff
name|recoveryDiff
parameter_list|(
name|MetadataSnapshot
name|recoveryTargetSnapshot
parameter_list|)
block|{
specifier|final
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|StoreFileMetaData
argument_list|>
name|identical
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
specifier|final
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|StoreFileMetaData
argument_list|>
name|different
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
specifier|final
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|StoreFileMetaData
argument_list|>
name|missing
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|StoreFileMetaData
argument_list|>
argument_list|>
name|perSegment
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|StoreFileMetaData
argument_list|>
name|perCommitStoreFiles
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|StoreFileMetaData
name|meta
range|:
name|this
control|)
block|{
if|if
condition|(
name|IndexFileNames
operator|.
name|SEGMENTS_GEN
operator|.
name|equals
argument_list|(
name|meta
operator|.
name|name
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
comment|// we don't need that file at all
block|}
specifier|final
name|String
name|segmentId
init|=
name|IndexFileNames
operator|.
name|parseSegmentName
argument_list|(
name|meta
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|String
name|extension
init|=
name|IndexFileNames
operator|.
name|getExtension
argument_list|(
name|meta
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
assert|assert
name|FIELD_INFOS_FILE_EXTENSION
operator|.
name|equals
argument_list|(
name|extension
argument_list|)
operator|==
literal|false
operator|||
name|IndexFileNames
operator|.
name|stripExtension
argument_list|(
name|IndexFileNames
operator|.
name|stripSegmentName
argument_list|(
name|meta
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
operator|:
literal|"FieldInfos are generational but updateable DV are not supported in elasticsearch"
assert|;
if|if
condition|(
name|IndexFileNames
operator|.
name|SEGMENTS
operator|.
name|equals
argument_list|(
name|segmentId
argument_list|)
operator|||
name|DEL_FILE_EXTENSION
operator|.
name|equals
argument_list|(
name|extension
argument_list|)
condition|)
block|{
comment|// only treat del files as per-commit files fnm files are generational but only for upgradable DV
name|perCommitStoreFiles
operator|.
name|add
argument_list|(
name|meta
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|List
argument_list|<
name|StoreFileMetaData
argument_list|>
name|perSegStoreFiles
init|=
name|perSegment
operator|.
name|get
argument_list|(
name|segmentId
argument_list|)
decl_stmt|;
if|if
condition|(
name|perSegStoreFiles
operator|==
literal|null
condition|)
block|{
name|perSegStoreFiles
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|perSegment
operator|.
name|put
argument_list|(
name|segmentId
argument_list|,
name|perSegStoreFiles
argument_list|)
expr_stmt|;
block|}
name|perSegStoreFiles
operator|.
name|add
argument_list|(
name|meta
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|ArrayList
argument_list|<
name|StoreFileMetaData
argument_list|>
name|identicalFiles
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|List
argument_list|<
name|StoreFileMetaData
argument_list|>
name|segmentFiles
range|:
name|Iterables
operator|.
name|concat
argument_list|(
name|perSegment
operator|.
name|values
argument_list|()
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
name|perCommitStoreFiles
argument_list|)
argument_list|)
control|)
block|{
name|identicalFiles
operator|.
name|clear
argument_list|()
expr_stmt|;
name|boolean
name|consistent
init|=
literal|true
decl_stmt|;
for|for
control|(
name|StoreFileMetaData
name|meta
range|:
name|segmentFiles
control|)
block|{
name|StoreFileMetaData
name|storeFileMetaData
init|=
name|recoveryTargetSnapshot
operator|.
name|get
argument_list|(
name|meta
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|storeFileMetaData
operator|==
literal|null
condition|)
block|{
name|consistent
operator|=
literal|false
expr_stmt|;
name|missing
operator|.
name|add
argument_list|(
name|meta
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|storeFileMetaData
operator|.
name|isSame
argument_list|(
name|meta
argument_list|)
operator|==
literal|false
condition|)
block|{
name|consistent
operator|=
literal|false
expr_stmt|;
name|different
operator|.
name|add
argument_list|(
name|meta
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|identicalFiles
operator|.
name|add
argument_list|(
name|meta
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|consistent
condition|)
block|{
name|identical
operator|.
name|addAll
argument_list|(
name|identicalFiles
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// make sure all files are added - this can happen if only the deletes are different
name|different
operator|.
name|addAll
argument_list|(
name|identicalFiles
argument_list|)
expr_stmt|;
block|}
block|}
name|RecoveryDiff
name|recoveryDiff
init|=
operator|new
name|RecoveryDiff
argument_list|(
name|identical
operator|.
name|build
argument_list|()
argument_list|,
name|different
operator|.
name|build
argument_list|()
argument_list|,
name|missing
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
assert|assert
name|recoveryDiff
operator|.
name|size
argument_list|()
operator|==
name|this
operator|.
name|metadata
operator|.
name|size
argument_list|()
operator|-
operator|(
name|metadata
operator|.
name|containsKey
argument_list|(
name|IndexFileNames
operator|.
name|SEGMENTS_GEN
argument_list|)
condition|?
literal|1
else|:
literal|0
operator|)
operator|:
literal|"some files are missing recoveryDiff size: ["
operator|+
name|recoveryDiff
operator|.
name|size
argument_list|()
operator|+
literal|"] metadata size: ["
operator|+
name|this
operator|.
name|metadata
operator|.
name|size
argument_list|()
operator|+
literal|"] contains  segments.gen: ["
operator|+
name|metadata
operator|.
name|containsKey
argument_list|(
name|IndexFileNames
operator|.
name|SEGMENTS_GEN
argument_list|)
operator|+
literal|"]"
assert|;
return|return
name|recoveryDiff
return|;
block|}
comment|/**          * Returns the number of files in this snapshot          */
DECL|method|size
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|metadata
operator|.
name|size
argument_list|()
return|;
block|}
block|}
comment|/**      * A class representing the diff between a recovery source and recovery target      * @see MetadataSnapshot#recoveryDiff(org.elasticsearch.index.store.Store.MetadataSnapshot)      */
DECL|class|RecoveryDiff
specifier|public
specifier|static
specifier|final
class|class
name|RecoveryDiff
block|{
comment|/**          *  Files that exist in both snapshots and they can be considered the same ie. they don't need to be recovered          */
DECL|field|identical
specifier|public
specifier|final
name|List
argument_list|<
name|StoreFileMetaData
argument_list|>
name|identical
decl_stmt|;
comment|/**          * Files that exist in both snapshots but their they are not identical          */
DECL|field|different
specifier|public
specifier|final
name|List
argument_list|<
name|StoreFileMetaData
argument_list|>
name|different
decl_stmt|;
comment|/**          * Files that exist in the source but not in the target          */
DECL|field|missing
specifier|public
specifier|final
name|List
argument_list|<
name|StoreFileMetaData
argument_list|>
name|missing
decl_stmt|;
DECL|method|RecoveryDiff
name|RecoveryDiff
parameter_list|(
name|List
argument_list|<
name|StoreFileMetaData
argument_list|>
name|identical
parameter_list|,
name|List
argument_list|<
name|StoreFileMetaData
argument_list|>
name|different
parameter_list|,
name|List
argument_list|<
name|StoreFileMetaData
argument_list|>
name|missing
parameter_list|)
block|{
name|this
operator|.
name|identical
operator|=
name|identical
expr_stmt|;
name|this
operator|.
name|different
operator|=
name|different
expr_stmt|;
name|this
operator|.
name|missing
operator|=
name|missing
expr_stmt|;
block|}
comment|/**          * Returns the sum of the files in this diff.          */
DECL|method|size
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|identical
operator|.
name|size
argument_list|()
operator|+
name|different
operator|.
name|size
argument_list|()
operator|+
name|missing
operator|.
name|size
argument_list|()
return|;
block|}
block|}
DECL|class|LegacyChecksums
specifier|public
specifier|final
specifier|static
class|class
name|LegacyChecksums
block|{
DECL|field|legacyChecksums
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|legacyChecksums
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|add
specifier|public
name|void
name|add
parameter_list|(
name|StoreFileMetaData
name|metaData
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|metaData
operator|.
name|hasLegacyChecksum
argument_list|()
condition|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
comment|// we don't add checksums if they were written by LUCENE_48... now we are using the build in mechanism.
name|legacyChecksums
operator|.
name|put
argument_list|(
name|metaData
operator|.
name|name
argument_list|()
argument_list|,
name|metaData
operator|.
name|checksum
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|write
specifier|public
specifier|synchronized
name|void
name|write
parameter_list|(
name|Store
name|store
parameter_list|)
throws|throws
name|IOException
block|{
synchronized|synchronized
init|(
name|store
operator|.
name|distributorDirectory
init|)
block|{
name|Tuple
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|,
name|Long
argument_list|>
name|tuple
init|=
name|MetadataSnapshot
operator|.
name|readLegacyChecksums
argument_list|(
name|store
operator|.
name|distributorDirectory
argument_list|)
decl_stmt|;
name|tuple
operator|.
name|v1
argument_list|()
operator|.
name|putAll
argument_list|(
name|legacyChecksums
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|tuple
operator|.
name|v1
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|writeChecksums
argument_list|(
name|store
operator|.
name|directory
argument_list|,
name|tuple
operator|.
name|v1
argument_list|()
argument_list|,
name|tuple
operator|.
name|v2
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|writeChecksums
specifier|synchronized
name|void
name|writeChecksums
parameter_list|(
name|Directory
name|directory
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|checksums
parameter_list|,
name|long
name|lastVersion
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|nextVersion
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
while|while
condition|(
name|nextVersion
operator|<=
name|lastVersion
condition|)
block|{
name|nextVersion
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
specifier|final
name|String
name|checksumName
init|=
name|CHECKSUMS_PREFIX
operator|+
name|nextVersion
decl_stmt|;
try|try
init|(
name|IndexOutput
name|output
init|=
name|directory
operator|.
name|createOutput
argument_list|(
name|checksumName
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
init|)
block|{
name|output
operator|.
name|writeInt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// version
name|output
operator|.
name|writeStringStringMap
argument_list|(
name|checksums
argument_list|)
expr_stmt|;
block|}
name|directory
operator|.
name|sync
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|checksumName
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|clear
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|legacyChecksums
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|method|remove
specifier|public
name|void
name|remove
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|legacyChecksums
operator|.
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
DECL|field|CHECKSUMS_PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|CHECKSUMS_PREFIX
init|=
literal|"_checksums-"
decl_stmt|;
DECL|method|isChecksum
specifier|public
specifier|static
specifier|final
name|boolean
name|isChecksum
parameter_list|(
name|String
name|name
parameter_list|)
block|{
comment|// TODO can we drowp .cks
return|return
name|name
operator|.
name|startsWith
argument_list|(
name|CHECKSUMS_PREFIX
argument_list|)
operator|||
name|name
operator|.
name|endsWith
argument_list|(
literal|".cks"
argument_list|)
return|;
comment|// bwcomapt - .cks used to be a previous checksum file
block|}
comment|/**      * Produces a string representation of the given digest value.      */
DECL|method|digestToString
specifier|public
specifier|static
name|String
name|digestToString
parameter_list|(
name|long
name|digest
parameter_list|)
block|{
return|return
name|Long
operator|.
name|toString
argument_list|(
name|digest
argument_list|,
name|Character
operator|.
name|MAX_RADIX
argument_list|)
return|;
block|}
DECL|class|VerifyingIndexOutput
specifier|static
class|class
name|VerifyingIndexOutput
extends|extends
name|IndexOutput
block|{
DECL|field|metadata
specifier|private
specifier|final
name|StoreFileMetaData
name|metadata
decl_stmt|;
DECL|field|output
specifier|private
specifier|final
name|IndexOutput
name|output
decl_stmt|;
DECL|field|writtenBytes
specifier|private
name|long
name|writtenBytes
decl_stmt|;
DECL|field|checksumPosition
specifier|private
specifier|final
name|long
name|checksumPosition
decl_stmt|;
DECL|field|actualChecksum
specifier|private
name|String
name|actualChecksum
decl_stmt|;
DECL|method|VerifyingIndexOutput
name|VerifyingIndexOutput
parameter_list|(
name|StoreFileMetaData
name|metadata
parameter_list|,
name|IndexOutput
name|actualOutput
parameter_list|)
block|{
name|this
operator|.
name|metadata
operator|=
name|metadata
expr_stmt|;
name|this
operator|.
name|output
operator|=
name|actualOutput
expr_stmt|;
name|checksumPosition
operator|=
name|metadata
operator|.
name|length
argument_list|()
operator|-
literal|8
expr_stmt|;
comment|// the last 8 bytes are the checksum
block|}
annotation|@
name|Override
DECL|method|flush
specifier|public
name|void
name|flush
parameter_list|()
throws|throws
name|IOException
block|{
name|output
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|output
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getFilePointer
specifier|public
name|long
name|getFilePointer
parameter_list|()
block|{
return|return
name|output
operator|.
name|getFilePointer
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getChecksum
specifier|public
name|long
name|getChecksum
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|output
operator|.
name|getChecksum
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|length
specifier|public
name|long
name|length
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|output
operator|.
name|length
argument_list|()
return|;
block|}
comment|/**          * Verifies the checksum and compares the written length with the expected file length. This method should bec          * called after all data has been written to this output.          */
DECL|method|verify
specifier|public
name|void
name|verify
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|metadata
operator|.
name|checksum
argument_list|()
operator|.
name|equals
argument_list|(
name|actualChecksum
argument_list|)
operator|&&
name|writtenBytes
operator|==
name|metadata
operator|.
name|length
argument_list|()
condition|)
block|{
return|return;
block|}
throw|throw
operator|new
name|CorruptIndexException
argument_list|(
literal|"verification failed (hardware problem?) : expected="
operator|+
name|metadata
operator|.
name|checksum
argument_list|()
operator|+
literal|" actual="
operator|+
name|actualChecksum
operator|+
literal|" writtenLength="
operator|+
name|writtenBytes
operator|+
literal|" expectedLength="
operator|+
name|metadata
operator|.
name|length
argument_list|()
operator|+
literal|" (resource="
operator|+
name|metadata
operator|.
name|toString
argument_list|()
operator|+
literal|")"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|writeByte
specifier|public
name|void
name|writeByte
parameter_list|(
name|byte
name|b
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|writtenBytes
operator|++
operator|==
name|checksumPosition
condition|)
block|{
name|readAndCompareChecksum
argument_list|()
expr_stmt|;
block|}
name|output
operator|.
name|writeByte
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
DECL|method|readAndCompareChecksum
specifier|private
name|void
name|readAndCompareChecksum
parameter_list|()
throws|throws
name|IOException
block|{
name|actualChecksum
operator|=
name|digestToString
argument_list|(
name|getChecksum
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|metadata
operator|.
name|checksum
argument_list|()
operator|.
name|equals
argument_list|(
name|actualChecksum
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|CorruptIndexException
argument_list|(
literal|"checksum failed (hardware problem?) : expected="
operator|+
name|metadata
operator|.
name|checksum
argument_list|()
operator|+
literal|" actual="
operator|+
name|actualChecksum
operator|+
literal|" (resource="
operator|+
name|metadata
operator|.
name|toString
argument_list|()
operator|+
literal|")"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|writeBytes
specifier|public
name|void
name|writeBytes
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|writtenBytes
operator|+
name|length
operator|>
name|checksumPosition
operator|&&
name|actualChecksum
operator|==
literal|null
condition|)
block|{
assert|assert
name|writtenBytes
operator|<=
name|checksumPosition
assert|;
specifier|final
name|int
name|bytesToWrite
init|=
call|(
name|int
call|)
argument_list|(
name|checksumPosition
operator|-
name|writtenBytes
argument_list|)
decl_stmt|;
name|output
operator|.
name|writeBytes
argument_list|(
name|b
argument_list|,
name|offset
argument_list|,
name|bytesToWrite
argument_list|)
expr_stmt|;
name|readAndCompareChecksum
argument_list|()
expr_stmt|;
name|offset
operator|+=
name|bytesToWrite
expr_stmt|;
name|length
operator|-=
name|bytesToWrite
expr_stmt|;
name|writtenBytes
operator|+=
name|bytesToWrite
expr_stmt|;
block|}
name|output
operator|.
name|writeBytes
argument_list|(
name|b
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|writtenBytes
operator|+=
name|length
expr_stmt|;
block|}
block|}
comment|/**      * Index input that calculates checksum as data is read from the input.      *      * This class supports random access (it is possible to seek backward and forward) in order to accommodate retry      * mechanism that is used in some repository plugins (S3 for example). However, the checksum is only calculated on      * the first read. All consecutive reads of the same data are not used to calculate the checksum.      */
DECL|class|VerifyingIndexInput
specifier|static
class|class
name|VerifyingIndexInput
extends|extends
name|ChecksumIndexInput
block|{
DECL|field|input
specifier|private
specifier|final
name|IndexInput
name|input
decl_stmt|;
DECL|field|digest
specifier|private
specifier|final
name|Checksum
name|digest
decl_stmt|;
DECL|field|checksumPosition
specifier|private
specifier|final
name|long
name|checksumPosition
decl_stmt|;
DECL|field|checksum
specifier|private
specifier|final
name|byte
index|[]
name|checksum
init|=
operator|new
name|byte
index|[
literal|8
index|]
decl_stmt|;
DECL|field|verifiedPosition
specifier|private
name|long
name|verifiedPosition
init|=
literal|0
decl_stmt|;
DECL|method|VerifyingIndexInput
specifier|public
name|VerifyingIndexInput
parameter_list|(
name|IndexInput
name|input
parameter_list|)
block|{
name|this
argument_list|(
name|input
argument_list|,
operator|new
name|BufferedChecksum
argument_list|(
operator|new
name|CRC32
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|VerifyingIndexInput
specifier|public
name|VerifyingIndexInput
parameter_list|(
name|IndexInput
name|input
parameter_list|,
name|Checksum
name|digest
parameter_list|)
block|{
name|super
argument_list|(
literal|"VerifyingIndexInput("
operator|+
name|input
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|this
operator|.
name|input
operator|=
name|input
expr_stmt|;
name|this
operator|.
name|digest
operator|=
name|digest
expr_stmt|;
name|checksumPosition
operator|=
name|input
operator|.
name|length
argument_list|()
operator|-
literal|8
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|readByte
specifier|public
name|byte
name|readByte
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|pos
init|=
name|input
operator|.
name|getFilePointer
argument_list|()
decl_stmt|;
specifier|final
name|byte
name|b
init|=
name|input
operator|.
name|readByte
argument_list|()
decl_stmt|;
name|pos
operator|++
expr_stmt|;
if|if
condition|(
name|pos
operator|>
name|verifiedPosition
condition|)
block|{
if|if
condition|(
name|pos
operator|<=
name|checksumPosition
condition|)
block|{
name|digest
operator|.
name|update
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|checksum
index|[
call|(
name|int
call|)
argument_list|(
name|pos
operator|-
name|checksumPosition
operator|-
literal|1
argument_list|)
index|]
operator|=
name|b
expr_stmt|;
block|}
name|verifiedPosition
operator|=
name|pos
expr_stmt|;
block|}
return|return
name|b
return|;
block|}
annotation|@
name|Override
DECL|method|readBytes
specifier|public
name|void
name|readBytes
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|pos
init|=
name|input
operator|.
name|getFilePointer
argument_list|()
decl_stmt|;
name|input
operator|.
name|readBytes
argument_list|(
name|b
argument_list|,
name|offset
argument_list|,
name|len
argument_list|)
expr_stmt|;
if|if
condition|(
name|pos
operator|+
name|len
operator|>
name|verifiedPosition
condition|)
block|{
comment|// Conversion to int is safe here because (verifiedPosition - pos) can be at most len, which is integer
name|int
name|alreadyVerified
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|verifiedPosition
operator|-
name|pos
argument_list|)
decl_stmt|;
if|if
condition|(
name|pos
operator|<
name|checksumPosition
condition|)
block|{
if|if
condition|(
name|pos
operator|+
name|len
operator|<
name|checksumPosition
condition|)
block|{
name|digest
operator|.
name|update
argument_list|(
name|b
argument_list|,
name|offset
operator|+
name|alreadyVerified
argument_list|,
name|len
operator|-
name|alreadyVerified
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|checksumOffset
init|=
call|(
name|int
call|)
argument_list|(
name|checksumPosition
operator|-
name|pos
argument_list|)
decl_stmt|;
if|if
condition|(
name|checksumOffset
operator|-
name|alreadyVerified
operator|>
literal|0
condition|)
block|{
name|digest
operator|.
name|update
argument_list|(
name|b
argument_list|,
name|offset
operator|+
name|alreadyVerified
argument_list|,
name|checksumOffset
operator|-
name|alreadyVerified
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|arraycopy
argument_list|(
name|b
argument_list|,
name|offset
operator|+
name|checksumOffset
argument_list|,
name|checksum
argument_list|,
literal|0
argument_list|,
name|len
operator|-
name|checksumOffset
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Conversion to int is safe here because checksumPosition is (file length - 8) so
comment|// (pos - checksumPosition) cannot be bigger than 8 unless we are reading after the end of file
assert|assert
name|pos
operator|-
name|checksumPosition
operator|<
literal|8
assert|;
name|System
operator|.
name|arraycopy
argument_list|(
name|b
argument_list|,
name|offset
argument_list|,
name|checksum
argument_list|,
call|(
name|int
call|)
argument_list|(
name|pos
operator|-
name|checksumPosition
argument_list|)
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
name|verifiedPosition
operator|=
name|pos
operator|+
name|len
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getChecksum
specifier|public
name|long
name|getChecksum
parameter_list|()
block|{
return|return
name|digest
operator|.
name|getValue
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|seek
specifier|public
name|void
name|seek
parameter_list|(
name|long
name|pos
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|pos
operator|<
name|verifiedPosition
condition|)
block|{
comment|// going within verified region - just seek there
name|input
operator|.
name|seek
argument_list|(
name|pos
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|verifiedPosition
operator|>
name|getFilePointer
argument_list|()
condition|)
block|{
comment|// portion of the skip region is verified and portion is not
comment|// skipping the verified portion
name|input
operator|.
name|seek
argument_list|(
name|verifiedPosition
argument_list|)
expr_stmt|;
comment|// and checking unverified
name|skipBytes
argument_list|(
name|pos
operator|-
name|verifiedPosition
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|skipBytes
argument_list|(
name|pos
operator|-
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|input
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getFilePointer
specifier|public
name|long
name|getFilePointer
parameter_list|()
block|{
return|return
name|input
operator|.
name|getFilePointer
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|length
specifier|public
name|long
name|length
parameter_list|()
block|{
return|return
name|input
operator|.
name|length
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|clone
specifier|public
name|IndexInput
name|clone
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|slice
specifier|public
name|IndexInput
name|slice
parameter_list|(
name|String
name|sliceDescription
parameter_list|,
name|long
name|offset
parameter_list|,
name|long
name|length
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
DECL|method|getStoredChecksum
specifier|public
name|long
name|getStoredChecksum
parameter_list|()
block|{
return|return
operator|new
name|ByteArrayDataInput
argument_list|(
name|checksum
argument_list|)
operator|.
name|readLong
argument_list|()
return|;
block|}
DECL|method|verify
specifier|public
name|void
name|verify
parameter_list|()
throws|throws
name|CorruptIndexException
block|{
name|long
name|storedChecksum
init|=
name|getStoredChecksum
argument_list|()
decl_stmt|;
if|if
condition|(
name|getChecksum
argument_list|()
operator|==
name|storedChecksum
condition|)
block|{
return|return;
block|}
throw|throw
operator|new
name|CorruptIndexException
argument_list|(
literal|"verification failed : calculated="
operator|+
name|Store
operator|.
name|digestToString
argument_list|(
name|getChecksum
argument_list|()
argument_list|)
operator|+
literal|" stored="
operator|+
name|Store
operator|.
name|digestToString
argument_list|(
name|storedChecksum
argument_list|)
argument_list|)
throw|;
block|}
block|}
DECL|method|deleteQuiet
specifier|public
name|void
name|deleteQuiet
parameter_list|(
name|String
modifier|...
name|files
parameter_list|)
block|{
for|for
control|(
name|String
name|file
range|:
name|files
control|)
block|{
try|try
block|{
name|directory
argument_list|()
operator|.
name|deleteFile
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
comment|/**      * Marks this store as corrupted. This method writes a<tt>corrupted_${uuid}</tt> file containing the given exception      * message. If a store contains a<tt>corrupted_${uuid}</tt> file {@link #isMarkedCorrupted()} will return<code>true</code>.      */
DECL|method|markStoreCorrupted
specifier|public
name|void
name|markStoreCorrupted
parameter_list|(
name|CorruptIndexException
name|exception
parameter_list|)
throws|throws
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|isMarkedCorrupted
argument_list|()
condition|)
block|{
name|String
name|uuid
init|=
name|CORRUPTED
operator|+
name|Strings
operator|.
name|randomBase64UUID
argument_list|()
decl_stmt|;
try|try
init|(
name|IndexOutput
name|output
init|=
name|this
operator|.
name|directory
argument_list|()
operator|.
name|createOutput
argument_list|(
name|uuid
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
init|)
block|{
name|CodecUtil
operator|.
name|writeHeader
argument_list|(
name|output
argument_list|,
name|CODEC
argument_list|,
name|VERSION
argument_list|)
expr_stmt|;
name|output
operator|.
name|writeString
argument_list|(
name|ExceptionsHelper
operator|.
name|detailedMessage
argument_list|(
name|exception
argument_list|,
literal|true
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// handles null exception
name|output
operator|.
name|writeString
argument_list|(
name|ExceptionsHelper
operator|.
name|stackTrace
argument_list|(
name|exception
argument_list|)
argument_list|)
expr_stmt|;
name|CodecUtil
operator|.
name|writeFooter
argument_list|(
name|output
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Can't mark store as corrupted"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
name|directory
argument_list|()
operator|.
name|sync
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|uuid
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

