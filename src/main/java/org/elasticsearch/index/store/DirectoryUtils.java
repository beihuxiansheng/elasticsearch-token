begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.store
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|store
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|FileSwitchDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|FilterDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * Utils for working with {@link Directory} classes.  */
end_comment

begin_class
DECL|class|DirectoryUtils
specifier|public
specifier|final
class|class
name|DirectoryUtils
block|{
DECL|method|DirectoryUtils
specifier|private
name|DirectoryUtils
parameter_list|()
block|{}
comment|// no instance
DECL|method|getLeafDirectory
specifier|static
specifier|final
name|Directory
name|getLeafDirectory
parameter_list|(
name|FilterDirectory
name|dir
parameter_list|)
block|{
name|Directory
name|current
init|=
name|dir
operator|.
name|getDelegate
argument_list|()
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
operator|(
name|current
operator|instanceof
name|FilterDirectory
operator|)
condition|)
block|{
name|current
operator|=
operator|(
operator|(
name|FilterDirectory
operator|)
name|current
operator|)
operator|.
name|getDelegate
argument_list|()
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
return|return
name|current
return|;
block|}
comment|/**      * Tries to extract the leaf of the {@link Directory} if the directory is a {@link FilterDirectory} and cast      * it to the given target class or returns<code>null</code> if the leaf is not assignable to the target class.      * If the given {@link Directory} is a concrete directory it will treated as a leaf and the above applies.      */
DECL|method|getLeaf
specifier|public
specifier|static
parameter_list|<
name|T
extends|extends
name|Directory
parameter_list|>
name|T
name|getLeaf
parameter_list|(
name|Directory
name|dir
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|targetClass
parameter_list|)
block|{
return|return
name|getLeaf
argument_list|(
name|dir
argument_list|,
name|targetClass
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**      * Tries to extract the leaf of the {@link Directory} if the directory is a {@link FilterDirectory} and cast      * it to the given target class or returns the given default value, if the leaf is not assignable to the target class.      * If the given {@link Directory} is a concrete directory it will treated as a leaf and the above applies.      */
DECL|method|getLeaf
specifier|public
specifier|static
parameter_list|<
name|T
extends|extends
name|Directory
parameter_list|>
name|T
name|getLeaf
parameter_list|(
name|Directory
name|dir
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|targetClass
parameter_list|,
name|T
name|defaultValue
parameter_list|)
block|{
name|Directory
name|d
init|=
name|dir
decl_stmt|;
if|if
condition|(
name|dir
operator|instanceof
name|FilterDirectory
condition|)
block|{
name|d
operator|=
name|getLeafDirectory
argument_list|(
operator|(
name|FilterDirectory
operator|)
name|dir
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|d
operator|instanceof
name|FileSwitchDirectory
condition|)
block|{
name|T
name|leaf
init|=
name|getLeaf
argument_list|(
operator|(
operator|(
name|FileSwitchDirectory
operator|)
name|d
operator|)
operator|.
name|getPrimaryDir
argument_list|()
argument_list|,
name|targetClass
argument_list|)
decl_stmt|;
if|if
condition|(
name|leaf
operator|==
literal|null
condition|)
block|{
name|d
operator|=
name|getLeaf
argument_list|(
operator|(
operator|(
name|FileSwitchDirectory
operator|)
name|d
operator|)
operator|.
name|getSecondaryDir
argument_list|()
argument_list|,
name|targetClass
argument_list|,
name|defaultValue
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|d
operator|=
name|leaf
expr_stmt|;
block|}
block|}
if|if
condition|(
name|d
operator|!=
literal|null
operator|&&
name|targetClass
operator|.
name|isAssignableFrom
argument_list|(
name|d
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|targetClass
operator|.
name|cast
argument_list|(
name|d
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|defaultValue
return|;
block|}
block|}
block|}
end_class

end_unit

