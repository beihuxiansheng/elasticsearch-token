begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.store.fs
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|store
operator|.
name|fs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|FileSystemUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|metrics
operator|.
name|CounterMetric
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|settings
operator|.
name|IndexSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|store
operator|.
name|DirectoryService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|store
operator|.
name|IndexStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|store
operator|.
name|StoreException
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
DECL|class|FsDirectoryService
specifier|public
specifier|abstract
class|class
name|FsDirectoryService
extends|extends
name|DirectoryService
implements|implements
name|StoreRateLimiting
operator|.
name|Listener
implements|,
name|StoreRateLimiting
operator|.
name|Provider
block|{
DECL|field|indexStore
specifier|protected
specifier|final
name|IndexStore
name|indexStore
decl_stmt|;
DECL|field|rateLimitingTimeInNanos
specifier|private
specifier|final
name|CounterMetric
name|rateLimitingTimeInNanos
init|=
operator|new
name|CounterMetric
argument_list|()
decl_stmt|;
DECL|method|FsDirectoryService
specifier|public
name|FsDirectoryService
parameter_list|(
name|ShardId
name|shardId
parameter_list|,
annotation|@
name|IndexSettings
name|Settings
name|indexSettings
parameter_list|,
name|IndexStore
name|indexStore
parameter_list|)
block|{
name|super
argument_list|(
name|shardId
argument_list|,
name|indexSettings
argument_list|)
expr_stmt|;
name|this
operator|.
name|indexStore
operator|=
name|indexStore
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|throttleTimeInNanos
specifier|public
name|long
name|throttleTimeInNanos
parameter_list|()
block|{
return|return
name|rateLimitingTimeInNanos
operator|.
name|count
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|rateLimiting
specifier|public
name|StoreRateLimiting
name|rateLimiting
parameter_list|()
block|{
return|return
name|indexStore
operator|.
name|rateLimiting
argument_list|()
return|;
block|}
DECL|method|buildLockFactory
specifier|protected
specifier|final
name|LockFactory
name|buildLockFactory
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|fsLock
init|=
name|componentSettings
operator|.
name|get
argument_list|(
literal|"lock"
argument_list|,
name|componentSettings
operator|.
name|get
argument_list|(
literal|"fs_lock"
argument_list|,
literal|"native"
argument_list|)
argument_list|)
decl_stmt|;
name|LockFactory
name|lockFactory
decl_stmt|;
if|if
condition|(
name|fsLock
operator|.
name|equals
argument_list|(
literal|"native"
argument_list|)
condition|)
block|{
name|lockFactory
operator|=
name|NativeFSLockFactory
operator|.
name|INSTANCE
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fsLock
operator|.
name|equals
argument_list|(
literal|"simple"
argument_list|)
condition|)
block|{
name|lockFactory
operator|=
name|SimpleFSLockFactory
operator|.
name|INSTANCE
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|StoreException
argument_list|(
name|shardId
argument_list|,
literal|"unrecognized fs_lock \""
operator|+
name|fsLock
operator|+
literal|"\": must be native or simple"
argument_list|)
throw|;
block|}
return|return
name|lockFactory
return|;
block|}
annotation|@
name|Override
DECL|method|build
specifier|public
name|Directory
index|[]
name|build
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
index|[]
name|locations
init|=
name|indexStore
operator|.
name|shardIndexLocations
argument_list|(
name|shardId
argument_list|)
decl_stmt|;
name|Directory
index|[]
name|dirs
init|=
operator|new
name|Directory
index|[
name|locations
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dirs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Files
operator|.
name|createDirectories
argument_list|(
name|locations
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|Directory
name|wrapped
init|=
name|newFSDirectory
argument_list|(
name|locations
index|[
name|i
index|]
argument_list|,
name|buildLockFactory
argument_list|()
argument_list|)
decl_stmt|;
name|dirs
index|[
name|i
index|]
operator|=
operator|new
name|RateLimitedFSDirectory
argument_list|(
name|wrapped
argument_list|,
name|this
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
return|return
name|dirs
return|;
block|}
DECL|method|newFSDirectory
specifier|protected
specifier|abstract
name|Directory
name|newFSDirectory
parameter_list|(
name|Path
name|location
parameter_list|,
name|LockFactory
name|lockFactory
parameter_list|)
throws|throws
name|IOException
function_decl|;
annotation|@
name|Override
DECL|method|onPause
specifier|public
name|void
name|onPause
parameter_list|(
name|long
name|nanos
parameter_list|)
block|{
name|rateLimitingTimeInNanos
operator|.
name|inc
argument_list|(
name|nanos
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

