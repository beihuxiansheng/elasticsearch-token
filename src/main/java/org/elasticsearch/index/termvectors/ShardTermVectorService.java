begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.termvectors
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|termvectors
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Fields
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|MultiFields
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticSearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|termvector
operator|.
name|TermVectorRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|termvector
operator|.
name|TermVectorResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|uid
operator|.
name|Versions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|Engine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MapperService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|Uid
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|internal
operator|.
name|UidFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|settings
operator|.
name|IndexSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|AbstractIndexShardComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|service
operator|.
name|IndexShard
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
DECL|class|ShardTermVectorService
specifier|public
class|class
name|ShardTermVectorService
extends|extends
name|AbstractIndexShardComponent
block|{
DECL|field|indexShard
specifier|private
name|IndexShard
name|indexShard
decl_stmt|;
DECL|field|mapperService
specifier|private
name|MapperService
name|mapperService
decl_stmt|;
annotation|@
name|Inject
DECL|method|ShardTermVectorService
specifier|public
name|ShardTermVectorService
parameter_list|(
name|ShardId
name|shardId
parameter_list|,
annotation|@
name|IndexSettings
name|Settings
name|indexSettings
parameter_list|,
name|MapperService
name|mapperService
parameter_list|)
block|{
name|super
argument_list|(
name|shardId
argument_list|,
name|indexSettings
argument_list|)
expr_stmt|;
block|}
comment|// sadly, to overcome cyclic dep, we need to do this and inject it ourselves...
DECL|method|setIndexShard
specifier|public
name|ShardTermVectorService
name|setIndexShard
parameter_list|(
name|IndexShard
name|indexShard
parameter_list|)
block|{
name|this
operator|.
name|indexShard
operator|=
name|indexShard
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getTermVector
specifier|public
name|TermVectorResponse
name|getTermVector
parameter_list|(
name|TermVectorRequest
name|request
parameter_list|)
block|{
specifier|final
name|Engine
operator|.
name|Searcher
name|searcher
init|=
name|indexShard
operator|.
name|acquireSearcher
argument_list|(
literal|"term_vector"
argument_list|)
decl_stmt|;
name|IndexReader
name|topLevelReader
init|=
name|searcher
operator|.
name|reader
argument_list|()
decl_stmt|;
specifier|final
name|TermVectorResponse
name|termVectorResponse
init|=
operator|new
name|TermVectorResponse
argument_list|(
name|request
operator|.
name|index
argument_list|()
argument_list|,
name|request
operator|.
name|type
argument_list|()
argument_list|,
name|request
operator|.
name|id
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Term
name|uidTerm
init|=
operator|new
name|Term
argument_list|(
name|UidFieldMapper
operator|.
name|NAME
argument_list|,
name|Uid
operator|.
name|createUidAsBytes
argument_list|(
name|request
operator|.
name|type
argument_list|()
argument_list|,
name|request
operator|.
name|id
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|Fields
name|topLevelFields
init|=
name|MultiFields
operator|.
name|getFields
argument_list|(
name|topLevelReader
argument_list|)
decl_stmt|;
name|Versions
operator|.
name|DocIdAndVersion
name|docIdAndVersion
init|=
name|Versions
operator|.
name|loadDocIdAndVersion
argument_list|(
name|topLevelReader
argument_list|,
name|uidTerm
argument_list|)
decl_stmt|;
if|if
condition|(
name|docIdAndVersion
operator|!=
literal|null
condition|)
block|{
name|Fields
name|termVectorsByField
init|=
name|docIdAndVersion
operator|.
name|context
operator|.
name|reader
argument_list|()
operator|.
name|getTermVectors
argument_list|(
name|docIdAndVersion
operator|.
name|docId
argument_list|)
decl_stmt|;
name|termVectorResponse
operator|.
name|setFields
argument_list|(
name|termVectorsByField
argument_list|,
name|request
operator|.
name|selectedFields
argument_list|()
argument_list|,
name|request
operator|.
name|getFlags
argument_list|()
argument_list|,
name|topLevelFields
argument_list|)
expr_stmt|;
name|termVectorResponse
operator|.
name|setExists
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|termVectorResponse
operator|.
name|setDocVersion
argument_list|(
name|docIdAndVersion
operator|.
name|version
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|termVectorResponse
operator|.
name|setExists
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|ElasticSearchException
argument_list|(
literal|"failed to execute term vector request"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
finally|finally
block|{
name|searcher
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
return|return
name|termVectorResponse
return|;
block|}
block|}
end_class

end_unit

