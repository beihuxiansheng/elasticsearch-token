begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.termvectors
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|termvectors
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|memory
operator|.
name|MemoryIndex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|termvector
operator|.
name|TermVectorRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|termvector
operator|.
name|TermVectorResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|uid
operator|.
name|Versions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|regex
operator|.
name|Regex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|Engine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|get
operator|.
name|GetField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|get
operator|.
name|GetResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|FieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|Uid
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|core
operator|.
name|StringFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|internal
operator|.
name|UidFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|settings
operator|.
name|IndexSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|AbstractIndexShardComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|service
operator|.
name|IndexShard
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
DECL|class|ShardTermVectorService
specifier|public
class|class
name|ShardTermVectorService
extends|extends
name|AbstractIndexShardComponent
block|{
DECL|field|indexShard
specifier|private
name|IndexShard
name|indexShard
decl_stmt|;
annotation|@
name|Inject
DECL|method|ShardTermVectorService
specifier|public
name|ShardTermVectorService
parameter_list|(
name|ShardId
name|shardId
parameter_list|,
annotation|@
name|IndexSettings
name|Settings
name|indexSettings
parameter_list|)
block|{
name|super
argument_list|(
name|shardId
argument_list|,
name|indexSettings
argument_list|)
expr_stmt|;
block|}
comment|// sadly, to overcome cyclic dep, we need to do this and inject it ourselves...
DECL|method|setIndexShard
specifier|public
name|ShardTermVectorService
name|setIndexShard
parameter_list|(
name|IndexShard
name|indexShard
parameter_list|)
block|{
name|this
operator|.
name|indexShard
operator|=
name|indexShard
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getTermVector
specifier|public
name|TermVectorResponse
name|getTermVector
parameter_list|(
name|TermVectorRequest
name|request
parameter_list|)
block|{
specifier|final
name|Engine
operator|.
name|Searcher
name|searcher
init|=
name|indexShard
operator|.
name|acquireSearcher
argument_list|(
literal|"term_vector"
argument_list|)
decl_stmt|;
name|IndexReader
name|topLevelReader
init|=
name|searcher
operator|.
name|reader
argument_list|()
decl_stmt|;
specifier|final
name|TermVectorResponse
name|termVectorResponse
init|=
operator|new
name|TermVectorResponse
argument_list|(
name|request
operator|.
name|index
argument_list|()
argument_list|,
name|request
operator|.
name|type
argument_list|()
argument_list|,
name|request
operator|.
name|id
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Term
name|uidTerm
init|=
operator|new
name|Term
argument_list|(
name|UidFieldMapper
operator|.
name|NAME
argument_list|,
name|Uid
operator|.
name|createUidAsBytes
argument_list|(
name|request
operator|.
name|type
argument_list|()
argument_list|,
name|request
operator|.
name|id
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|Fields
name|topLevelFields
init|=
name|MultiFields
operator|.
name|getFields
argument_list|(
name|topLevelReader
argument_list|)
decl_stmt|;
name|Versions
operator|.
name|DocIdAndVersion
name|docIdAndVersion
init|=
name|Versions
operator|.
name|loadDocIdAndVersion
argument_list|(
name|topLevelReader
argument_list|,
name|uidTerm
argument_list|)
decl_stmt|;
if|if
condition|(
name|docIdAndVersion
operator|!=
literal|null
condition|)
block|{
comment|/* handle potential wildcards in fields */
if|if
condition|(
name|request
operator|.
name|selectedFields
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|handleFieldWildcards
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
comment|/* generate term vectors if not available */
name|Fields
name|termVectorsByField
init|=
name|docIdAndVersion
operator|.
name|context
operator|.
name|reader
argument_list|()
operator|.
name|getTermVectors
argument_list|(
name|docIdAndVersion
operator|.
name|docId
argument_list|)
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|selectedFields
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|termVectorsByField
operator|=
name|generateTermVectorsIfNeeded
argument_list|(
name|termVectorsByField
argument_list|,
name|request
argument_list|,
name|uidTerm
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|termVectorResponse
operator|.
name|setFields
argument_list|(
name|termVectorsByField
argument_list|,
name|request
operator|.
name|selectedFields
argument_list|()
argument_list|,
name|request
operator|.
name|getFlags
argument_list|()
argument_list|,
name|topLevelFields
argument_list|)
expr_stmt|;
name|termVectorResponse
operator|.
name|setExists
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|termVectorResponse
operator|.
name|setDocVersion
argument_list|(
name|docIdAndVersion
operator|.
name|version
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|termVectorResponse
operator|.
name|setExists
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|ElasticsearchException
argument_list|(
literal|"failed to execute term vector request"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
finally|finally
block|{
name|searcher
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|termVectorResponse
return|;
block|}
DECL|method|handleFieldWildcards
specifier|private
name|void
name|handleFieldWildcards
parameter_list|(
name|TermVectorRequest
name|request
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|fieldNames
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|pattern
range|:
name|request
operator|.
name|selectedFields
argument_list|()
control|)
block|{
name|fieldNames
operator|.
name|addAll
argument_list|(
name|indexShard
operator|.
name|mapperService
argument_list|()
operator|.
name|simpleMatchToIndexNames
argument_list|(
name|pattern
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|request
operator|.
name|selectedFields
argument_list|(
name|fieldNames
operator|.
name|toArray
argument_list|(
name|Strings
operator|.
name|EMPTY_ARRAY
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|generateTermVectorsIfNeeded
specifier|private
name|Fields
name|generateTermVectorsIfNeeded
parameter_list|(
name|Fields
name|termVectorsByField
parameter_list|,
name|TermVectorRequest
name|request
parameter_list|,
name|Term
name|uidTerm
parameter_list|,
name|boolean
name|realTime
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|validFields
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|field
range|:
name|request
operator|.
name|selectedFields
argument_list|()
control|)
block|{
name|FieldMapper
name|fieldMapper
init|=
name|indexShard
operator|.
name|mapperService
argument_list|()
operator|.
name|smartNameFieldMapper
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|fieldMapper
operator|instanceof
name|StringFieldMapper
operator|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|fieldMapper
operator|.
name|fieldType
argument_list|()
operator|.
name|storeTermVectors
argument_list|()
condition|)
block|{
continue|continue;
block|}
comment|// only disallow fields which are not indexed
if|if
condition|(
operator|!
name|fieldMapper
operator|.
name|fieldType
argument_list|()
operator|.
name|indexed
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|validFields
operator|.
name|add
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|validFields
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|termVectorsByField
return|;
block|}
name|Engine
operator|.
name|GetResult
name|get
init|=
name|indexShard
operator|.
name|get
argument_list|(
operator|new
name|Engine
operator|.
name|Get
argument_list|(
name|realTime
argument_list|,
name|uidTerm
argument_list|)
argument_list|)
decl_stmt|;
name|Fields
name|generatedTermVectors
decl_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|get
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
name|termVectorsByField
return|;
block|}
comment|// TODO: support for fetchSourceContext?
name|GetResult
name|getResult
init|=
name|indexShard
operator|.
name|getService
argument_list|()
operator|.
name|get
argument_list|(
name|get
argument_list|,
name|request
operator|.
name|id
argument_list|()
argument_list|,
name|request
operator|.
name|type
argument_list|()
argument_list|,
name|validFields
operator|.
name|toArray
argument_list|(
name|Strings
operator|.
name|EMPTY_ARRAY
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|generatedTermVectors
operator|=
name|generateTermVectors
argument_list|(
name|getResult
operator|.
name|getFields
argument_list|()
operator|.
name|values
argument_list|()
argument_list|,
name|request
operator|.
name|offsets
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|get
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|termVectorsByField
operator|==
literal|null
condition|)
block|{
return|return
name|generatedTermVectors
return|;
block|}
else|else
block|{
return|return
name|mergeFields
argument_list|(
name|request
operator|.
name|selectedFields
argument_list|()
operator|.
name|toArray
argument_list|(
name|Strings
operator|.
name|EMPTY_ARRAY
argument_list|)
argument_list|,
name|termVectorsByField
argument_list|,
name|generatedTermVectors
argument_list|)
return|;
block|}
block|}
DECL|method|generateTermVectors
specifier|private
name|Fields
name|generateTermVectors
parameter_list|(
name|Collection
argument_list|<
name|GetField
argument_list|>
name|getFields
parameter_list|,
name|boolean
name|withOffsets
parameter_list|)
throws|throws
name|IOException
block|{
comment|// store document in memory index
name|MemoryIndex
name|index
init|=
operator|new
name|MemoryIndex
argument_list|(
name|withOffsets
argument_list|)
decl_stmt|;
for|for
control|(
name|GetField
name|getField
range|:
name|getFields
control|)
block|{
name|String
name|field
init|=
name|getField
operator|.
name|getName
argument_list|()
decl_stmt|;
name|Analyzer
name|analyzer
init|=
name|indexShard
operator|.
name|mapperService
argument_list|()
operator|.
name|smartNameFieldMapper
argument_list|(
name|field
argument_list|)
operator|.
name|indexAnalyzer
argument_list|()
decl_stmt|;
if|if
condition|(
name|analyzer
operator|==
literal|null
condition|)
block|{
name|analyzer
operator|=
name|indexShard
operator|.
name|mapperService
argument_list|()
operator|.
name|analysisService
argument_list|()
operator|.
name|defaultIndexAnalyzer
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Object
name|text
range|:
name|getField
operator|.
name|getValues
argument_list|()
control|)
block|{
name|index
operator|.
name|addField
argument_list|(
name|field
argument_list|,
name|text
operator|.
name|toString
argument_list|()
argument_list|,
name|analyzer
argument_list|)
expr_stmt|;
block|}
block|}
comment|// and read vectors from it
return|return
name|MultiFields
operator|.
name|getFields
argument_list|(
name|index
operator|.
name|createSearcher
argument_list|()
operator|.
name|getIndexReader
argument_list|()
argument_list|)
return|;
block|}
DECL|method|mergeFields
specifier|private
name|Fields
name|mergeFields
parameter_list|(
name|String
index|[]
name|fieldNames
parameter_list|,
name|Fields
modifier|...
name|fieldsObject
parameter_list|)
throws|throws
name|IOException
block|{
name|ParallelFields
name|parallelFields
init|=
operator|new
name|ParallelFields
argument_list|()
decl_stmt|;
for|for
control|(
name|Fields
name|fieldObject
range|:
name|fieldsObject
control|)
block|{
assert|assert
name|fieldObject
operator|!=
literal|null
assert|;
for|for
control|(
name|String
name|fieldName
range|:
name|fieldNames
control|)
block|{
name|Terms
name|terms
init|=
name|fieldObject
operator|.
name|terms
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
if|if
condition|(
name|terms
operator|!=
literal|null
condition|)
block|{
name|parallelFields
operator|.
name|addField
argument_list|(
name|fieldName
argument_list|,
name|terms
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|parallelFields
return|;
block|}
comment|// Poached from Lucene ParallelAtomicReader
DECL|class|ParallelFields
specifier|private
specifier|static
specifier|final
class|class
name|ParallelFields
extends|extends
name|Fields
block|{
DECL|field|fields
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Terms
argument_list|>
name|fields
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|ParallelFields
name|ParallelFields
parameter_list|()
block|{         }
DECL|method|addField
name|void
name|addField
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|Terms
name|terms
parameter_list|)
block|{
name|fields
operator|.
name|put
argument_list|(
name|fieldName
argument_list|,
name|terms
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|iterator
specifier|public
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
name|fields
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|terms
specifier|public
name|Terms
name|terms
parameter_list|(
name|String
name|field
parameter_list|)
block|{
return|return
name|fields
operator|.
name|get
argument_list|(
name|field
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|size
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|fields
operator|.
name|size
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

