begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.analysis
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|miscellaneous
operator|.
name|StemmerOverrideFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|miscellaneous
operator|.
name|StemmerOverrideFilter
operator|.
name|StemmerOverrideMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|assistedinject
operator|.
name|Assisted
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|Environment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|settings
operator|.
name|IndexSettings
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
annotation|@
name|AnalysisSettingsRequired
DECL|class|StemmerOverrideTokenFilterFactory
specifier|public
class|class
name|StemmerOverrideTokenFilterFactory
extends|extends
name|AbstractTokenFilterFactory
block|{
DECL|field|overrideMap
specifier|private
specifier|final
name|StemmerOverrideMap
name|overrideMap
decl_stmt|;
annotation|@
name|Inject
DECL|method|StemmerOverrideTokenFilterFactory
specifier|public
name|StemmerOverrideTokenFilterFactory
parameter_list|(
name|Index
name|index
parameter_list|,
annotation|@
name|IndexSettings
name|Settings
name|indexSettings
parameter_list|,
name|Environment
name|env
parameter_list|,
annotation|@
name|Assisted
name|String
name|name
parameter_list|,
annotation|@
name|Assisted
name|Settings
name|settings
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|index
argument_list|,
name|indexSettings
argument_list|,
name|name
argument_list|,
name|settings
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|rules
init|=
name|Analysis
operator|.
name|getWordList
argument_list|(
name|env
argument_list|,
name|settings
argument_list|,
literal|"rules"
argument_list|)
decl_stmt|;
if|if
condition|(
name|rules
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"stemmer override filter requires either `rules` or `rules_path` to be configured"
argument_list|)
throw|;
block|}
name|StemmerOverrideFilter
operator|.
name|Builder
name|builder
init|=
operator|new
name|StemmerOverrideFilter
operator|.
name|Builder
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|parseRules
argument_list|(
name|rules
argument_list|,
name|builder
argument_list|,
literal|"=>"
argument_list|)
expr_stmt|;
name|overrideMap
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|create
specifier|public
name|TokenStream
name|create
parameter_list|(
name|TokenStream
name|tokenStream
parameter_list|)
block|{
return|return
operator|new
name|StemmerOverrideFilter
argument_list|(
name|tokenStream
argument_list|,
name|overrideMap
argument_list|)
return|;
block|}
DECL|method|parseRules
specifier|static
name|void
name|parseRules
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|rules
parameter_list|,
name|StemmerOverrideFilter
operator|.
name|Builder
name|builder
parameter_list|,
name|String
name|mappingSep
parameter_list|)
block|{
for|for
control|(
name|String
name|rule
range|:
name|rules
control|)
block|{
name|String
name|key
decl_stmt|,
name|override
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|mapping
init|=
name|Strings
operator|.
name|splitSmart
argument_list|(
name|rule
argument_list|,
name|mappingSep
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|mapping
operator|.
name|size
argument_list|()
operator|==
literal|2
condition|)
block|{
name|key
operator|=
name|mapping
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
name|override
operator|=
name|mapping
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Invalid Keyword override Rule:"
operator|+
name|rule
argument_list|)
throw|;
block|}
if|if
condition|(
name|key
operator|.
name|isEmpty
argument_list|()
operator|||
name|override
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Invalid Keyword override Rule:"
operator|+
name|rule
argument_list|)
throw|;
block|}
else|else
block|{
name|builder
operator|.
name|add
argument_list|(
name|key
argument_list|,
name|override
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

