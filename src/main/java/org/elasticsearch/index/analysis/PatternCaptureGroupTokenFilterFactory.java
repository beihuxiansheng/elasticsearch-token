begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.analysis
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|pattern
operator|.
name|PatternCaptureGroupTokenFilter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|IllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|assistedinject
operator|.
name|Assisted
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|settings
operator|.
name|IndexSettings
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_class
annotation|@
name|AnalysisSettingsRequired
DECL|class|PatternCaptureGroupTokenFilterFactory
specifier|public
class|class
name|PatternCaptureGroupTokenFilterFactory
extends|extends
name|AbstractTokenFilterFactory
block|{
DECL|field|patterns
specifier|private
specifier|final
name|Pattern
index|[]
name|patterns
decl_stmt|;
DECL|field|preserveOriginal
specifier|private
specifier|final
name|boolean
name|preserveOriginal
decl_stmt|;
DECL|field|PATTERNS_KEY
specifier|private
specifier|static
specifier|final
name|String
name|PATTERNS_KEY
init|=
literal|"patterns"
decl_stmt|;
DECL|field|PRESERVE_ORIG_KEY
specifier|private
specifier|static
specifier|final
name|String
name|PRESERVE_ORIG_KEY
init|=
literal|"preserve_original"
decl_stmt|;
annotation|@
name|Inject
DECL|method|PatternCaptureGroupTokenFilterFactory
specifier|public
name|PatternCaptureGroupTokenFilterFactory
parameter_list|(
name|Index
name|index
parameter_list|,
annotation|@
name|IndexSettings
name|Settings
name|indexSettings
parameter_list|,
annotation|@
name|Assisted
name|String
name|name
parameter_list|,
annotation|@
name|Assisted
name|Settings
name|settings
parameter_list|)
block|{
name|super
argument_list|(
name|index
argument_list|,
name|indexSettings
argument_list|,
name|name
argument_list|,
name|settings
argument_list|)
expr_stmt|;
name|String
index|[]
name|regexes
init|=
name|settings
operator|.
name|getAsArray
argument_list|(
name|PATTERNS_KEY
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|regexes
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"required setting '"
operator|+
name|PATTERNS_KEY
operator|+
literal|"' is missing for token filter ["
operator|+
name|name
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|patterns
operator|=
operator|new
name|Pattern
index|[
name|regexes
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|regexes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|patterns
index|[
name|i
index|]
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
name|regexes
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|preserveOriginal
operator|=
name|settings
operator|.
name|getAsBoolean
argument_list|(
name|PRESERVE_ORIG_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|create
specifier|public
name|TokenFilter
name|create
parameter_list|(
name|TokenStream
name|tokenStream
parameter_list|)
block|{
return|return
operator|new
name|PatternCaptureGroupTokenFilter
argument_list|(
name|tokenStream
argument_list|,
name|preserveOriginal
argument_list|,
name|patterns
argument_list|)
return|;
block|}
block|}
end_class

end_unit

