begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.analysis.phonetic
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|phonetic
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|Encoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|language
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|language
operator|.
name|bm
operator|.
name|BeiderMorseEncoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|language
operator|.
name|bm
operator|.
name|NameType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|language
operator|.
name|bm
operator|.
name|RuleType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticSearchIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|assistedinject
operator|.
name|Assisted
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|AbstractTokenFilterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|AnalysisSettingsRequired
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|settings
operator|.
name|IndexSettings
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
annotation|@
name|AnalysisSettingsRequired
DECL|class|PhoneticTokenFilterFactory
specifier|public
class|class
name|PhoneticTokenFilterFactory
extends|extends
name|AbstractTokenFilterFactory
block|{
DECL|field|encoder
specifier|private
specifier|final
name|Encoder
name|encoder
decl_stmt|;
DECL|field|replace
specifier|private
specifier|final
name|boolean
name|replace
decl_stmt|;
annotation|@
name|Inject
DECL|method|PhoneticTokenFilterFactory
specifier|public
name|PhoneticTokenFilterFactory
parameter_list|(
name|Index
name|index
parameter_list|,
annotation|@
name|IndexSettings
name|Settings
name|indexSettings
parameter_list|,
annotation|@
name|Assisted
name|String
name|name
parameter_list|,
annotation|@
name|Assisted
name|Settings
name|settings
parameter_list|)
block|{
name|super
argument_list|(
name|index
argument_list|,
name|indexSettings
argument_list|,
name|name
argument_list|,
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|replace
operator|=
name|settings
operator|.
name|getAsBoolean
argument_list|(
literal|"replace"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|String
name|encoder
init|=
name|settings
operator|.
name|get
argument_list|(
literal|"encoder"
argument_list|)
decl_stmt|;
if|if
condition|(
name|encoder
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ElasticSearchIllegalArgumentException
argument_list|(
literal|"encoder must be set on phonetic token filter"
argument_list|)
throw|;
block|}
if|if
condition|(
literal|"metaphone"
operator|.
name|equalsIgnoreCase
argument_list|(
name|encoder
argument_list|)
condition|)
block|{
name|this
operator|.
name|encoder
operator|=
operator|new
name|Metaphone
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"soundex"
operator|.
name|equalsIgnoreCase
argument_list|(
name|encoder
argument_list|)
condition|)
block|{
name|this
operator|.
name|encoder
operator|=
operator|new
name|Soundex
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"caverphone1"
operator|.
name|equalsIgnoreCase
argument_list|(
name|encoder
argument_list|)
condition|)
block|{
name|this
operator|.
name|encoder
operator|=
operator|new
name|Caverphone1
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"caverphone2"
operator|.
name|equalsIgnoreCase
argument_list|(
name|encoder
argument_list|)
condition|)
block|{
name|this
operator|.
name|encoder
operator|=
operator|new
name|Caverphone2
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"caverphone"
operator|.
name|equalsIgnoreCase
argument_list|(
name|encoder
argument_list|)
condition|)
block|{
name|this
operator|.
name|encoder
operator|=
operator|new
name|Caverphone2
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"refined_soundex"
operator|.
name|equalsIgnoreCase
argument_list|(
name|encoder
argument_list|)
operator|||
literal|"refinedSoundex"
operator|.
name|equalsIgnoreCase
argument_list|(
name|encoder
argument_list|)
condition|)
block|{
name|this
operator|.
name|encoder
operator|=
operator|new
name|RefinedSoundex
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"cologne"
operator|.
name|equalsIgnoreCase
argument_list|(
name|encoder
argument_list|)
condition|)
block|{
name|this
operator|.
name|encoder
operator|=
operator|new
name|ColognePhonetic
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"double_metaphone"
operator|.
name|equalsIgnoreCase
argument_list|(
name|encoder
argument_list|)
operator|||
literal|"doubleMetaphone"
operator|.
name|equalsIgnoreCase
argument_list|(
name|encoder
argument_list|)
condition|)
block|{
name|DoubleMetaphone
name|doubleMetaphone
init|=
operator|new
name|DoubleMetaphone
argument_list|()
decl_stmt|;
name|doubleMetaphone
operator|.
name|setMaxCodeLen
argument_list|(
name|settings
operator|.
name|getAsInt
argument_list|(
literal|"max_code_len"
argument_list|,
name|doubleMetaphone
operator|.
name|getMaxCodeLen
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|encoder
operator|=
name|doubleMetaphone
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"bm"
operator|.
name|equalsIgnoreCase
argument_list|(
name|encoder
argument_list|)
operator|||
literal|"beider_morse"
operator|.
name|equalsIgnoreCase
argument_list|(
name|encoder
argument_list|)
condition|)
block|{
name|BeiderMorseEncoder
name|bm
init|=
operator|new
name|BeiderMorseEncoder
argument_list|()
decl_stmt|;
name|String
name|ruleType
init|=
name|settings
operator|.
name|get
argument_list|(
literal|"rule_type"
argument_list|,
literal|"approx"
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"approx"
operator|.
name|equalsIgnoreCase
argument_list|(
name|ruleType
argument_list|)
condition|)
block|{
name|bm
operator|.
name|setRuleType
argument_list|(
name|RuleType
operator|.
name|APPROX
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"exact"
operator|.
name|equalsIgnoreCase
argument_list|(
name|ruleType
argument_list|)
condition|)
block|{
name|bm
operator|.
name|setRuleType
argument_list|(
name|RuleType
operator|.
name|EXACT
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ElasticSearchIllegalArgumentException
argument_list|(
literal|"No matching rule type ["
operator|+
name|ruleType
operator|+
literal|"] for beider morse encoder"
argument_list|)
throw|;
block|}
name|String
name|nameType
init|=
name|settings
operator|.
name|get
argument_list|(
literal|"name_type"
argument_list|,
literal|"generic"
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"GENERIC"
operator|.
name|equalsIgnoreCase
argument_list|(
name|nameType
argument_list|)
condition|)
block|{
name|bm
operator|.
name|setNameType
argument_list|(
name|NameType
operator|.
name|GENERIC
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"ASHKENAZI"
operator|.
name|equalsIgnoreCase
argument_list|(
name|nameType
argument_list|)
condition|)
block|{
name|bm
operator|.
name|setNameType
argument_list|(
name|NameType
operator|.
name|ASHKENAZI
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"SEPHARDIC"
operator|.
name|equalsIgnoreCase
argument_list|(
name|nameType
argument_list|)
condition|)
block|{
name|bm
operator|.
name|setNameType
argument_list|(
name|NameType
operator|.
name|SEPHARDIC
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|encoder
operator|=
name|bm
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ElasticSearchIllegalArgumentException
argument_list|(
literal|"unknown encoder ["
operator|+
name|encoder
operator|+
literal|"] for phonetic token filter"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|create
specifier|public
name|TokenStream
name|create
parameter_list|(
name|TokenStream
name|tokenStream
parameter_list|)
block|{
if|if
condition|(
name|encoder
operator|instanceof
name|DoubleMetaphone
condition|)
block|{
return|return
operator|new
name|DoubleMetaphoneFilter
argument_list|(
name|tokenStream
argument_list|,
operator|(
name|DoubleMetaphone
operator|)
name|encoder
argument_list|,
operator|!
name|replace
argument_list|)
return|;
block|}
return|return
operator|new
name|PhoneticFilter
argument_list|(
name|tokenStream
argument_list|,
name|encoder
argument_list|,
name|name
argument_list|()
argument_list|,
operator|!
name|replace
argument_list|)
return|;
block|}
block|}
end_class

end_unit

