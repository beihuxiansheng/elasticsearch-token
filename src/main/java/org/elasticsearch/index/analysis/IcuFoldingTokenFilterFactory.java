begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.analysis
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|icu
operator|.
name|ICUFoldingFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|assistedinject
operator|.
name|Assisted
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|settings
operator|.
name|IndexSettings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|ibm
operator|.
name|icu
operator|.
name|text
operator|.
name|FilteredNormalizer2
import|;
end_import

begin_import
import|import
name|com
operator|.
name|ibm
operator|.
name|icu
operator|.
name|text
operator|.
name|Normalizer2
import|;
end_import

begin_import
import|import
name|com
operator|.
name|ibm
operator|.
name|icu
operator|.
name|text
operator|.
name|UnicodeSet
import|;
end_import

begin_comment
comment|/**  * Uses the {@link org.apache.lucene.analysis.icu.ICUFoldingFilter}.   * Applies foldings from UTR#30 Character Foldings.  *<p>  * Can be filtered to handle certain characters in a specified way (see http://icu-project.org/apiref/icu4j/com/ibm/icu/text/UnicodeSet.html)  * E.g national chars that should be retained (filter : "[^Ã¥Ã¤Ã¶ÃÃÃ]").  *  *<p>The<tt>unicodeSetFilter</tt> attribute can be used to provide the UniCodeSet for filtering.  *  * @author kimchy (shay.banon)  */
end_comment

begin_class
DECL|class|IcuFoldingTokenFilterFactory
specifier|public
class|class
name|IcuFoldingTokenFilterFactory
extends|extends
name|AbstractTokenFilterFactory
block|{
DECL|field|unicodeSetFilter
specifier|private
specifier|final
name|String
name|unicodeSetFilter
decl_stmt|;
DECL|method|IcuFoldingTokenFilterFactory
annotation|@
name|Inject
specifier|public
name|IcuFoldingTokenFilterFactory
parameter_list|(
name|Index
name|index
parameter_list|,
annotation|@
name|IndexSettings
name|Settings
name|indexSettings
parameter_list|,
annotation|@
name|Assisted
name|String
name|name
parameter_list|,
annotation|@
name|Assisted
name|Settings
name|settings
parameter_list|)
block|{
name|super
argument_list|(
name|index
argument_list|,
name|indexSettings
argument_list|,
name|name
argument_list|,
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|unicodeSetFilter
operator|=
name|settings
operator|.
name|get
argument_list|(
literal|"unicodeSetFilter"
argument_list|)
expr_stmt|;
block|}
DECL|method|create
annotation|@
name|Override
specifier|public
name|TokenStream
name|create
parameter_list|(
name|TokenStream
name|tokenStream
parameter_list|)
block|{
comment|// The ICUFoldingFilter is in fact implemented as a ICUNormalizer2Filter.
comment|// ICUFoldingFilter lacks a constructor for adding filtering so we implemement it here
if|if
condition|(
name|unicodeSetFilter
operator|!=
literal|null
condition|)
block|{
name|Normalizer2
name|base
init|=
name|Normalizer2
operator|.
name|getInstance
argument_list|(
name|ICUFoldingFilter
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"utr30.nrm"
argument_list|)
argument_list|,
literal|"utr30"
argument_list|,
name|Normalizer2
operator|.
name|Mode
operator|.
name|COMPOSE
argument_list|)
decl_stmt|;
name|UnicodeSet
name|unicodeSet
init|=
operator|new
name|UnicodeSet
argument_list|(
name|unicodeSetFilter
argument_list|)
decl_stmt|;
name|unicodeSet
operator|.
name|freeze
argument_list|()
expr_stmt|;
name|Normalizer2
name|filtered
init|=
operator|new
name|FilteredNormalizer2
argument_list|(
name|base
argument_list|,
name|unicodeSet
argument_list|)
decl_stmt|;
return|return
operator|new
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|icu
operator|.
name|ICUNormalizer2Filter
argument_list|(
name|tokenStream
argument_list|,
name|filtered
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|ICUFoldingFilter
argument_list|(
name|tokenStream
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

