begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterators
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|Tuple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|NodeEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|ShardLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|aliases
operator|.
name|IndexAliasesService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|AnalysisService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|cache
operator|.
name|IndexCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|cache
operator|.
name|bitset
operator|.
name|BitsetFilterCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|cache
operator|.
name|bitset
operator|.
name|ShardBitsetFilterCacheModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|cache
operator|.
name|filter
operator|.
name|ShardFilterCacheModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|cache
operator|.
name|query
operator|.
name|ShardQueryCacheModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|deletionpolicy
operator|.
name|DeletionPolicyModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|IndexFieldDataService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|ShardFieldDataModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|gateway
operator|.
name|IndexShardGatewayModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|gateway
operator|.
name|IndexShardGatewayService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|get
operator|.
name|ShardGetModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|indexing
operator|.
name|ShardIndexingModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MapperService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|merge
operator|.
name|policy
operator|.
name|MergePolicyModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|merge
operator|.
name|policy
operator|.
name|MergePolicyProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|merge
operator|.
name|scheduler
operator|.
name|MergeSchedulerModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|merge
operator|.
name|scheduler
operator|.
name|MergeSchedulerProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|percolator
operator|.
name|PercolatorQueriesRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|percolator
operator|.
name|PercolatorShardModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|IndexQueryParserService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|search
operator|.
name|stats
operator|.
name|ShardSearchModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|settings
operator|.
name|IndexSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|settings
operator|.
name|IndexSettingsService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|similarity
operator|.
name|SimilarityService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|snapshots
operator|.
name|IndexShardSnapshotModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|store
operator|.
name|IndexStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|store
operator|.
name|Store
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|store
operator|.
name|StoreModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|suggest
operator|.
name|SuggestShardModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|termvectors
operator|.
name|ShardTermVectorsModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|translog
operator|.
name|Translog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|translog
operator|.
name|TranslogModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|translog
operator|.
name|TranslogService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|IndicesLifecycle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|IndicesService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|InternalIndicesLifecycle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
operator|.
name|PluginsService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
operator|.
name|ShardsPluginsModule
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
operator|.
name|newHashMap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|MapBuilder
operator|.
name|newMapBuilder
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|IndexService
specifier|public
class|class
name|IndexService
extends|extends
name|AbstractIndexComponent
implements|implements
name|IndexComponent
implements|,
name|Iterable
argument_list|<
name|IndexShard
argument_list|>
block|{
DECL|field|injector
specifier|private
specifier|final
name|Injector
name|injector
decl_stmt|;
DECL|field|indexSettings
specifier|private
specifier|final
name|Settings
name|indexSettings
decl_stmt|;
DECL|field|pluginsService
specifier|private
specifier|final
name|PluginsService
name|pluginsService
decl_stmt|;
DECL|field|indicesLifecycle
specifier|private
specifier|final
name|InternalIndicesLifecycle
name|indicesLifecycle
decl_stmt|;
DECL|field|analysisService
specifier|private
specifier|final
name|AnalysisService
name|analysisService
decl_stmt|;
DECL|field|mapperService
specifier|private
specifier|final
name|MapperService
name|mapperService
decl_stmt|;
DECL|field|queryParserService
specifier|private
specifier|final
name|IndexQueryParserService
name|queryParserService
decl_stmt|;
DECL|field|similarityService
specifier|private
specifier|final
name|SimilarityService
name|similarityService
decl_stmt|;
DECL|field|aliasesService
specifier|private
specifier|final
name|IndexAliasesService
name|aliasesService
decl_stmt|;
DECL|field|indexCache
specifier|private
specifier|final
name|IndexCache
name|indexCache
decl_stmt|;
DECL|field|indexFieldData
specifier|private
specifier|final
name|IndexFieldDataService
name|indexFieldData
decl_stmt|;
DECL|field|bitsetFilterCache
specifier|private
specifier|final
name|BitsetFilterCache
name|bitsetFilterCache
decl_stmt|;
DECL|field|settingsService
specifier|private
specifier|final
name|IndexSettingsService
name|settingsService
decl_stmt|;
DECL|field|nodeEnv
specifier|private
specifier|final
name|NodeEnvironment
name|nodeEnv
decl_stmt|;
DECL|field|indicesServices
specifier|private
specifier|final
name|IndicesService
name|indicesServices
decl_stmt|;
DECL|field|shards
specifier|private
specifier|volatile
name|ImmutableMap
argument_list|<
name|Integer
argument_list|,
name|Tuple
argument_list|<
name|IndexShard
argument_list|,
name|Injector
argument_list|>
argument_list|>
name|shards
init|=
name|ImmutableMap
operator|.
name|of
argument_list|()
decl_stmt|;
DECL|field|closed
specifier|private
specifier|final
name|AtomicBoolean
name|closed
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
DECL|field|deleted
specifier|private
specifier|final
name|AtomicBoolean
name|deleted
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
annotation|@
name|Inject
DECL|method|IndexService
specifier|public
name|IndexService
parameter_list|(
name|Injector
name|injector
parameter_list|,
name|Index
name|index
parameter_list|,
annotation|@
name|IndexSettings
name|Settings
name|indexSettings
parameter_list|,
name|NodeEnvironment
name|nodeEnv
parameter_list|,
name|AnalysisService
name|analysisService
parameter_list|,
name|MapperService
name|mapperService
parameter_list|,
name|IndexQueryParserService
name|queryParserService
parameter_list|,
name|SimilarityService
name|similarityService
parameter_list|,
name|IndexAliasesService
name|aliasesService
parameter_list|,
name|IndexCache
name|indexCache
parameter_list|,
name|IndexSettingsService
name|settingsService
parameter_list|,
name|IndexFieldDataService
name|indexFieldData
parameter_list|,
name|BitsetFilterCache
name|bitSetFilterCache
parameter_list|,
name|IndicesService
name|indicesServices
parameter_list|)
block|{
name|super
argument_list|(
name|index
argument_list|,
name|indexSettings
argument_list|)
expr_stmt|;
name|this
operator|.
name|injector
operator|=
name|injector
expr_stmt|;
name|this
operator|.
name|indexSettings
operator|=
name|indexSettings
expr_stmt|;
name|this
operator|.
name|analysisService
operator|=
name|analysisService
expr_stmt|;
name|this
operator|.
name|mapperService
operator|=
name|mapperService
expr_stmt|;
name|this
operator|.
name|queryParserService
operator|=
name|queryParserService
expr_stmt|;
name|this
operator|.
name|similarityService
operator|=
name|similarityService
expr_stmt|;
name|this
operator|.
name|aliasesService
operator|=
name|aliasesService
expr_stmt|;
name|this
operator|.
name|indexCache
operator|=
name|indexCache
expr_stmt|;
name|this
operator|.
name|indexFieldData
operator|=
name|indexFieldData
expr_stmt|;
name|this
operator|.
name|settingsService
operator|=
name|settingsService
expr_stmt|;
name|this
operator|.
name|bitsetFilterCache
operator|=
name|bitSetFilterCache
expr_stmt|;
name|this
operator|.
name|pluginsService
operator|=
name|injector
operator|.
name|getInstance
argument_list|(
name|PluginsService
operator|.
name|class
argument_list|)
expr_stmt|;
name|this
operator|.
name|indicesServices
operator|=
name|indicesServices
expr_stmt|;
name|this
operator|.
name|indicesLifecycle
operator|=
operator|(
name|InternalIndicesLifecycle
operator|)
name|injector
operator|.
name|getInstance
argument_list|(
name|IndicesLifecycle
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// inject workarounds for cyclic dep
name|indexCache
operator|.
name|filter
argument_list|()
operator|.
name|setIndexService
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|indexFieldData
operator|.
name|setIndexService
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|bitSetFilterCache
operator|.
name|setIndexService
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|this
operator|.
name|nodeEnv
operator|=
name|nodeEnv
expr_stmt|;
block|}
DECL|method|numberOfShards
specifier|public
name|int
name|numberOfShards
parameter_list|()
block|{
return|return
name|shards
operator|.
name|size
argument_list|()
return|;
block|}
DECL|method|indicesLifecycle
specifier|public
name|InternalIndicesLifecycle
name|indicesLifecycle
parameter_list|()
block|{
return|return
name|this
operator|.
name|indicesLifecycle
return|;
block|}
annotation|@
name|Override
DECL|method|iterator
specifier|public
name|Iterator
argument_list|<
name|IndexShard
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|Iterators
operator|.
name|transform
argument_list|(
name|shards
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
argument_list|,
operator|new
name|Function
argument_list|<
name|Tuple
argument_list|<
name|IndexShard
argument_list|,
name|Injector
argument_list|>
argument_list|,
name|IndexShard
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|IndexShard
name|apply
parameter_list|(
name|Tuple
argument_list|<
name|IndexShard
argument_list|,
name|Injector
argument_list|>
name|input
parameter_list|)
block|{
return|return
name|input
operator|.
name|v1
argument_list|()
return|;
block|}
block|}
argument_list|)
return|;
block|}
DECL|method|hasShard
specifier|public
name|boolean
name|hasShard
parameter_list|(
name|int
name|shardId
parameter_list|)
block|{
return|return
name|shards
operator|.
name|containsKey
argument_list|(
name|shardId
argument_list|)
return|;
block|}
comment|/**      * Return the shard with the provided id, or null if there is no such shard.      */
annotation|@
name|Nullable
DECL|method|shard
specifier|public
name|IndexShard
name|shard
parameter_list|(
name|int
name|shardId
parameter_list|)
block|{
name|Tuple
argument_list|<
name|IndexShard
argument_list|,
name|Injector
argument_list|>
name|indexShardInjectorTuple
init|=
name|shards
operator|.
name|get
argument_list|(
name|shardId
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexShardInjectorTuple
operator|!=
literal|null
condition|)
block|{
return|return
name|indexShardInjectorTuple
operator|.
name|v1
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Return the shard with the provided id, or throw an exception if it doesn't exist.      */
DECL|method|shardSafe
specifier|public
name|IndexShard
name|shardSafe
parameter_list|(
name|int
name|shardId
parameter_list|)
throws|throws
name|IndexShardMissingException
block|{
name|IndexShard
name|indexShard
init|=
name|shard
argument_list|(
name|shardId
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexShard
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IndexShardMissingException
argument_list|(
operator|new
name|ShardId
argument_list|(
name|index
argument_list|,
name|shardId
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|indexShard
return|;
block|}
DECL|method|shardIds
specifier|public
name|Set
argument_list|<
name|Integer
argument_list|>
name|shardIds
parameter_list|()
block|{
return|return
name|shards
operator|.
name|keySet
argument_list|()
return|;
block|}
DECL|method|injector
specifier|public
name|Injector
name|injector
parameter_list|()
block|{
return|return
name|injector
return|;
block|}
DECL|method|settingsService
specifier|public
name|IndexSettingsService
name|settingsService
parameter_list|()
block|{
return|return
name|this
operator|.
name|settingsService
return|;
block|}
DECL|method|cache
specifier|public
name|IndexCache
name|cache
parameter_list|()
block|{
return|return
name|indexCache
return|;
block|}
DECL|method|fieldData
specifier|public
name|IndexFieldDataService
name|fieldData
parameter_list|()
block|{
return|return
name|indexFieldData
return|;
block|}
DECL|method|bitsetFilterCache
specifier|public
name|BitsetFilterCache
name|bitsetFilterCache
parameter_list|()
block|{
return|return
name|bitsetFilterCache
return|;
block|}
DECL|method|analysisService
specifier|public
name|AnalysisService
name|analysisService
parameter_list|()
block|{
return|return
name|this
operator|.
name|analysisService
return|;
block|}
DECL|method|mapperService
specifier|public
name|MapperService
name|mapperService
parameter_list|()
block|{
return|return
name|mapperService
return|;
block|}
DECL|method|queryParserService
specifier|public
name|IndexQueryParserService
name|queryParserService
parameter_list|()
block|{
return|return
name|queryParserService
return|;
block|}
DECL|method|similarityService
specifier|public
name|SimilarityService
name|similarityService
parameter_list|()
block|{
return|return
name|similarityService
return|;
block|}
DECL|method|aliasesService
specifier|public
name|IndexAliasesService
name|aliasesService
parameter_list|()
block|{
return|return
name|aliasesService
return|;
block|}
DECL|method|close
specifier|public
specifier|synchronized
name|void
name|close
parameter_list|(
specifier|final
name|String
name|reason
parameter_list|,
name|boolean
name|delete
parameter_list|)
block|{
if|if
condition|(
name|closed
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|deleted
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
name|delete
argument_list|)
expr_stmt|;
specifier|final
name|Set
argument_list|<
name|Integer
argument_list|>
name|shardIds
init|=
name|shardIds
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|int
name|shardId
range|:
name|shardIds
control|)
block|{
try|try
block|{
name|removeShard
argument_list|(
name|shardId
argument_list|,
name|reason
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"failed to close shard"
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * Return the shard injector for the provided id, or throw an exception if there is no such shard.      */
DECL|method|shardInjectorSafe
specifier|public
name|Injector
name|shardInjectorSafe
parameter_list|(
name|int
name|shardId
parameter_list|)
throws|throws
name|IndexShardMissingException
block|{
name|Tuple
argument_list|<
name|IndexShard
argument_list|,
name|Injector
argument_list|>
name|tuple
init|=
name|shards
operator|.
name|get
argument_list|(
name|shardId
argument_list|)
decl_stmt|;
if|if
condition|(
name|tuple
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IndexShardMissingException
argument_list|(
operator|new
name|ShardId
argument_list|(
name|index
argument_list|,
name|shardId
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|tuple
operator|.
name|v2
argument_list|()
return|;
block|}
DECL|method|indexUUID
specifier|public
name|String
name|indexUUID
parameter_list|()
block|{
return|return
name|indexSettings
operator|.
name|get
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_UUID
argument_list|,
name|IndexMetaData
operator|.
name|INDEX_UUID_NA_VALUE
argument_list|)
return|;
block|}
DECL|method|createShard
specifier|public
specifier|synchronized
name|IndexShard
name|createShard
parameter_list|(
name|int
name|sShardId
parameter_list|,
name|boolean
name|primary
parameter_list|)
block|{
comment|/*          * TODO: we execute this in parallel but it's a synced method. Yet, we might          * be able to serialize the execution via the cluster state in the future. for now we just          * keep it synced.          */
if|if
condition|(
name|closed
operator|.
name|get
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Can't create shard ["
operator|+
name|index
operator|.
name|name
argument_list|()
operator|+
literal|"]["
operator|+
name|sShardId
operator|+
literal|"], closed"
argument_list|)
throw|;
block|}
specifier|final
name|ShardId
name|shardId
init|=
operator|new
name|ShardId
argument_list|(
name|index
argument_list|,
name|sShardId
argument_list|)
decl_stmt|;
name|ShardLock
name|lock
init|=
literal|null
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|Injector
name|shardInjector
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ShardPath
name|path
init|=
name|ShardPath
operator|.
name|loadShardPath
argument_list|(
name|logger
argument_list|,
name|nodeEnv
argument_list|,
name|shardId
argument_list|,
name|indexSettings
argument_list|)
decl_stmt|;
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
name|path
operator|=
name|ShardPath
operator|.
name|selectNewPathForShard
argument_list|(
name|nodeEnv
argument_list|,
name|shardId
argument_list|,
name|indexSettings
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"{} creating using a new path [{}]"
argument_list|,
name|shardId
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"{} creating using an existing path [{}]"
argument_list|,
name|shardId
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
name|lock
operator|=
name|nodeEnv
operator|.
name|shardLock
argument_list|(
name|shardId
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|toMillis
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|shards
operator|.
name|containsKey
argument_list|(
name|shardId
operator|.
name|id
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IndexShardAlreadyExistsException
argument_list|(
name|shardId
operator|+
literal|" already exists"
argument_list|)
throw|;
block|}
name|indicesLifecycle
operator|.
name|beforeIndexShardCreated
argument_list|(
name|shardId
argument_list|,
name|indexSettings
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"creating shard_id {}"
argument_list|,
name|shardId
argument_list|)
expr_stmt|;
comment|// if we are on a shared FS we only own the shard (ie. we can safely delete it) if we are the primary.
specifier|final
name|boolean
name|canDeleteShardContent
init|=
name|IndexMetaData
operator|.
name|isOnSharedFilesystem
argument_list|(
name|indexSettings
argument_list|)
operator|==
literal|false
operator|||
operator|(
name|primary
operator|&&
name|IndexMetaData
operator|.
name|isOnSharedFilesystem
argument_list|(
name|indexSettings
argument_list|)
operator|)
decl_stmt|;
name|ModulesBuilder
name|modules
init|=
operator|new
name|ModulesBuilder
argument_list|()
decl_stmt|;
name|modules
operator|.
name|add
argument_list|(
operator|new
name|ShardsPluginsModule
argument_list|(
name|indexSettings
argument_list|,
name|pluginsService
argument_list|)
argument_list|)
expr_stmt|;
name|modules
operator|.
name|add
argument_list|(
operator|new
name|IndexShardModule
argument_list|(
name|shardId
argument_list|,
name|primary
argument_list|,
name|indexSettings
argument_list|)
argument_list|)
expr_stmt|;
name|modules
operator|.
name|add
argument_list|(
operator|new
name|ShardIndexingModule
argument_list|()
argument_list|)
expr_stmt|;
name|modules
operator|.
name|add
argument_list|(
operator|new
name|ShardSearchModule
argument_list|()
argument_list|)
expr_stmt|;
name|modules
operator|.
name|add
argument_list|(
operator|new
name|ShardGetModule
argument_list|()
argument_list|)
expr_stmt|;
name|modules
operator|.
name|add
argument_list|(
operator|new
name|StoreModule
argument_list|(
name|indexSettings
argument_list|,
name|injector
operator|.
name|getInstance
argument_list|(
name|IndexStore
operator|.
name|class
argument_list|)
operator|.
name|shardDirectory
argument_list|()
argument_list|,
name|lock
argument_list|,
operator|new
name|StoreCloseListener
argument_list|(
name|shardId
argument_list|,
name|canDeleteShardContent
argument_list|)
argument_list|,
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|modules
operator|.
name|add
argument_list|(
operator|new
name|DeletionPolicyModule
argument_list|(
name|indexSettings
argument_list|)
argument_list|)
expr_stmt|;
name|modules
operator|.
name|add
argument_list|(
operator|new
name|MergePolicyModule
argument_list|(
name|indexSettings
argument_list|)
argument_list|)
expr_stmt|;
name|modules
operator|.
name|add
argument_list|(
operator|new
name|MergeSchedulerModule
argument_list|(
name|indexSettings
argument_list|)
argument_list|)
expr_stmt|;
name|modules
operator|.
name|add
argument_list|(
operator|new
name|ShardFilterCacheModule
argument_list|()
argument_list|)
expr_stmt|;
name|modules
operator|.
name|add
argument_list|(
operator|new
name|ShardQueryCacheModule
argument_list|()
argument_list|)
expr_stmt|;
name|modules
operator|.
name|add
argument_list|(
operator|new
name|ShardBitsetFilterCacheModule
argument_list|()
argument_list|)
expr_stmt|;
name|modules
operator|.
name|add
argument_list|(
operator|new
name|ShardFieldDataModule
argument_list|()
argument_list|)
expr_stmt|;
name|modules
operator|.
name|add
argument_list|(
operator|new
name|TranslogModule
argument_list|(
name|indexSettings
argument_list|)
argument_list|)
expr_stmt|;
name|modules
operator|.
name|add
argument_list|(
operator|new
name|IndexShardGatewayModule
argument_list|()
argument_list|)
expr_stmt|;
name|modules
operator|.
name|add
argument_list|(
operator|new
name|PercolatorShardModule
argument_list|()
argument_list|)
expr_stmt|;
name|modules
operator|.
name|add
argument_list|(
operator|new
name|ShardTermVectorsModule
argument_list|()
argument_list|)
expr_stmt|;
name|modules
operator|.
name|add
argument_list|(
operator|new
name|IndexShardSnapshotModule
argument_list|()
argument_list|)
expr_stmt|;
name|modules
operator|.
name|add
argument_list|(
operator|new
name|SuggestShardModule
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|shardInjector
operator|=
name|modules
operator|.
name|createChildInjector
argument_list|(
name|injector
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CreationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IndexShardCreationException
argument_list|(
name|shardId
argument_list|,
name|Injectors
operator|.
name|getFirstErrorFailure
argument_list|(
name|e
argument_list|)
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IndexShardCreationException
argument_list|(
name|shardId
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|IndexShard
name|indexShard
init|=
name|shardInjector
operator|.
name|getInstance
argument_list|(
name|IndexShard
operator|.
name|class
argument_list|)
decl_stmt|;
name|indicesLifecycle
operator|.
name|indexShardStateChanged
argument_list|(
name|indexShard
argument_list|,
literal|null
argument_list|,
literal|"shard created"
argument_list|)
expr_stmt|;
name|indicesLifecycle
operator|.
name|afterIndexShardCreated
argument_list|(
name|indexShard
argument_list|)
expr_stmt|;
name|shards
operator|=
name|newMapBuilder
argument_list|(
name|shards
argument_list|)
operator|.
name|put
argument_list|(
name|shardId
operator|.
name|id
argument_list|()
argument_list|,
operator|new
name|Tuple
argument_list|<>
argument_list|(
name|indexShard
argument_list|,
name|shardInjector
argument_list|)
argument_list|)
operator|.
name|immutableMap
argument_list|()
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
return|return
name|indexShard
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|IndexShardCreationException
argument_list|(
name|shardId
argument_list|,
name|ex
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|success
operator|==
literal|false
condition|)
block|{
name|IOUtils
operator|.
name|closeWhileHandlingException
argument_list|(
name|lock
argument_list|)
expr_stmt|;
if|if
condition|(
name|shardInjector
operator|!=
literal|null
condition|)
block|{
name|IndexShard
name|indexShard
init|=
name|shardInjector
operator|.
name|getInstance
argument_list|(
name|IndexShard
operator|.
name|class
argument_list|)
decl_stmt|;
name|closeShardInjector
argument_list|(
literal|"initialization failed"
argument_list|,
name|shardId
argument_list|,
name|shardInjector
argument_list|,
name|indexShard
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|removeShard
specifier|public
specifier|synchronized
name|void
name|removeShard
parameter_list|(
name|int
name|shardId
parameter_list|,
name|String
name|reason
parameter_list|)
block|{
specifier|final
name|ShardId
name|sId
init|=
operator|new
name|ShardId
argument_list|(
name|index
argument_list|,
name|shardId
argument_list|)
decl_stmt|;
specifier|final
name|Injector
name|shardInjector
decl_stmt|;
specifier|final
name|IndexShard
name|indexShard
decl_stmt|;
if|if
condition|(
name|shards
operator|.
name|containsKey
argument_list|(
name|shardId
argument_list|)
operator|==
literal|false
condition|)
block|{
return|return;
block|}
name|logger
operator|.
name|debug
argument_list|(
literal|"[{}] closing... (reason: [{}])"
argument_list|,
name|shardId
argument_list|,
name|reason
argument_list|)
expr_stmt|;
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|Tuple
argument_list|<
name|IndexShard
argument_list|,
name|Injector
argument_list|>
argument_list|>
name|tmpShardsMap
init|=
name|newHashMap
argument_list|(
name|shards
argument_list|)
decl_stmt|;
name|Tuple
argument_list|<
name|IndexShard
argument_list|,
name|Injector
argument_list|>
name|tuple
init|=
name|tmpShardsMap
operator|.
name|remove
argument_list|(
name|shardId
argument_list|)
decl_stmt|;
name|indexShard
operator|=
name|tuple
operator|.
name|v1
argument_list|()
expr_stmt|;
name|shardInjector
operator|=
name|tuple
operator|.
name|v2
argument_list|()
expr_stmt|;
name|shards
operator|=
name|ImmutableMap
operator|.
name|copyOf
argument_list|(
name|tmpShardsMap
argument_list|)
expr_stmt|;
name|closeShardInjector
argument_list|(
name|reason
argument_list|,
name|sId
argument_list|,
name|shardInjector
argument_list|,
name|indexShard
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"[{}] closed (reason: [{}])"
argument_list|,
name|shardId
argument_list|,
name|reason
argument_list|)
expr_stmt|;
block|}
DECL|method|closeShardInjector
specifier|private
name|void
name|closeShardInjector
parameter_list|(
name|String
name|reason
parameter_list|,
name|ShardId
name|sId
parameter_list|,
name|Injector
name|shardInjector
parameter_list|,
name|IndexShard
name|indexShard
parameter_list|)
block|{
specifier|final
name|int
name|shardId
init|=
name|sId
operator|.
name|id
argument_list|()
decl_stmt|;
try|try
block|{
try|try
block|{
name|indicesLifecycle
operator|.
name|beforeIndexShardClosed
argument_list|(
name|sId
argument_list|,
name|indexShard
argument_list|,
name|indexSettings
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// close everything else even if the beforeIndexShardClosed threw an exception
for|for
control|(
name|Class
argument_list|<
name|?
extends|extends
name|Closeable
argument_list|>
name|closeable
range|:
name|pluginsService
operator|.
name|shardServices
argument_list|()
control|)
block|{
try|try
block|{
name|shardInjector
operator|.
name|getInstance
argument_list|(
name|closeable
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"[{}] failed to clean plugin shard service [{}]"
argument_list|,
name|e
argument_list|,
name|shardId
argument_list|,
name|closeable
argument_list|)
expr_stmt|;
block|}
block|}
comment|// now we can close the translog service, we need to close it before the we close the shard
name|closeInjectorResource
argument_list|(
name|sId
argument_list|,
name|shardInjector
argument_list|,
name|TranslogService
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// this logic is tricky, we want to close the engine so we rollback the changes done to it
comment|// and close the shard so no operations are allowed to it
if|if
condition|(
name|indexShard
operator|!=
literal|null
condition|)
block|{
try|try
block|{
specifier|final
name|boolean
name|flushEngine
init|=
name|deleted
operator|.
name|get
argument_list|()
operator|==
literal|false
operator|&&
name|closed
operator|.
name|get
argument_list|()
decl_stmt|;
comment|// only flush we are we closed (closed index or shutdown) and if we are not deleted
name|indexShard
operator|.
name|close
argument_list|(
name|reason
argument_list|,
name|flushEngine
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"[{}] failed to close index shard"
argument_list|,
name|e
argument_list|,
name|shardId
argument_list|)
expr_stmt|;
comment|// ignore
block|}
block|}
name|closeInjectorResource
argument_list|(
name|sId
argument_list|,
name|shardInjector
argument_list|,
name|MergeSchedulerProvider
operator|.
name|class
argument_list|,
name|MergePolicyProvider
operator|.
name|class
argument_list|,
name|IndexShardGatewayService
operator|.
name|class
argument_list|,
name|Translog
operator|.
name|class
argument_list|,
name|PercolatorQueriesRegistry
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// call this before we close the store, so we can release resources for it
name|indicesLifecycle
operator|.
name|afterIndexShardClosed
argument_list|(
name|sId
argument_list|,
name|indexShard
argument_list|,
name|indexSettings
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
try|try
block|{
name|shardInjector
operator|.
name|getInstance
argument_list|(
name|Store
operator|.
name|class
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"[{}] failed to close store on shard removal (reason: [{}])"
argument_list|,
name|e
argument_list|,
name|shardId
argument_list|,
name|reason
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * This method gets an instance for each of the given classes passed and calls #close() on the returned instance.      * NOTE: this method swallows all exceptions thrown from the close method of the injector and logs them as debug log      */
DECL|method|closeInjectorResource
specifier|private
name|void
name|closeInjectorResource
parameter_list|(
name|ShardId
name|shardId
parameter_list|,
name|Injector
name|shardInjector
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Closeable
argument_list|>
modifier|...
name|toClose
parameter_list|)
block|{
for|for
control|(
name|Class
argument_list|<
name|?
extends|extends
name|Closeable
argument_list|>
name|closeable
range|:
name|toClose
control|)
block|{
try|try
block|{
specifier|final
name|Closeable
name|instance
init|=
name|shardInjector
operator|.
name|getInstance
argument_list|(
name|closeable
argument_list|)
decl_stmt|;
if|if
condition|(
name|instance
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"No instance available for "
operator|+
name|closeable
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
name|IOUtils
operator|.
name|close
argument_list|(
name|instance
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"{} failed to close {}"
argument_list|,
name|t
argument_list|,
name|shardId
argument_list|,
name|Strings
operator|.
name|toUnderscoreCase
argument_list|(
name|closeable
operator|.
name|getSimpleName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|onShardClose
specifier|private
name|void
name|onShardClose
parameter_list|(
name|ShardLock
name|lock
parameter_list|,
name|boolean
name|ownsShard
parameter_list|)
block|{
if|if
condition|(
name|deleted
operator|.
name|get
argument_list|()
condition|)
block|{
comment|// we remove that shards content if this index has been deleted
try|try
block|{
if|if
condition|(
name|ownsShard
condition|)
block|{
try|try
block|{
name|indicesLifecycle
operator|.
name|beforeIndexShardDeleted
argument_list|(
name|lock
operator|.
name|getShardId
argument_list|()
argument_list|,
name|indexSettings
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|indicesServices
operator|.
name|deleteShardStore
argument_list|(
literal|"delete index"
argument_list|,
name|lock
argument_list|,
name|indexSettings
argument_list|)
expr_stmt|;
name|indicesLifecycle
operator|.
name|afterIndexShardDeleted
argument_list|(
name|lock
operator|.
name|getShardId
argument_list|()
argument_list|,
name|indexSettings
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|indicesServices
operator|.
name|addPendingDelete
argument_list|(
name|lock
operator|.
name|getShardId
argument_list|()
argument_list|,
name|indexSettings
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"{} failed to delete shard content - scheduled a retry"
argument_list|,
name|e
argument_list|,
name|lock
operator|.
name|getShardId
argument_list|()
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|StoreCloseListener
specifier|private
class|class
name|StoreCloseListener
implements|implements
name|Store
operator|.
name|OnClose
block|{
DECL|field|shardId
specifier|private
specifier|final
name|ShardId
name|shardId
decl_stmt|;
DECL|field|ownsShard
specifier|private
specifier|final
name|boolean
name|ownsShard
decl_stmt|;
DECL|method|StoreCloseListener
specifier|public
name|StoreCloseListener
parameter_list|(
name|ShardId
name|shardId
parameter_list|,
name|boolean
name|ownsShard
parameter_list|)
block|{
name|this
operator|.
name|shardId
operator|=
name|shardId
expr_stmt|;
name|this
operator|.
name|ownsShard
operator|=
name|ownsShard
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|handle
specifier|public
name|void
name|handle
parameter_list|(
name|ShardLock
name|lock
parameter_list|)
block|{
assert|assert
name|lock
operator|.
name|getShardId
argument_list|()
operator|.
name|equals
argument_list|(
name|shardId
argument_list|)
operator|:
literal|"shard Id mismatch, expected: "
operator|+
name|shardId
operator|+
literal|" but got: "
operator|+
name|lock
operator|.
name|getShardId
argument_list|()
assert|;
name|onShardClose
argument_list|(
name|lock
argument_list|,
name|ownsShard
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getIndexSettings
specifier|public
name|Settings
name|getIndexSettings
parameter_list|()
block|{
return|return
name|indexSettings
return|;
block|}
block|}
end_class

end_unit

