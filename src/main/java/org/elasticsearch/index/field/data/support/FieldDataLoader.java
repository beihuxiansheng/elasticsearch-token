begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.field.data.support
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|field
operator|.
name|data
operator|.
name|support
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermDocs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|StringHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|field
operator|.
name|data
operator|.
name|FieldData
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|FieldDataLoader
specifier|public
class|class
name|FieldDataLoader
block|{
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"StringEquality"
block|}
argument_list|)
DECL|method|load
specifier|public
specifier|static
parameter_list|<
name|T
extends|extends
name|FieldData
parameter_list|>
name|T
name|load
parameter_list|(
name|IndexReader
name|reader
parameter_list|,
name|String
name|field
parameter_list|,
name|TypeLoader
argument_list|<
name|T
argument_list|>
name|loader
parameter_list|)
throws|throws
name|IOException
block|{
name|loader
operator|.
name|init
argument_list|()
expr_stmt|;
name|field
operator|=
name|StringHelper
operator|.
name|intern
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|int
index|[]
argument_list|>
name|ordinals
init|=
operator|new
name|ArrayList
argument_list|<
name|int
index|[]
argument_list|>
argument_list|()
decl_stmt|;
name|int
index|[]
name|idx
init|=
operator|new
name|int
index|[
name|reader
operator|.
name|maxDoc
argument_list|()
index|]
decl_stmt|;
name|ordinals
operator|.
name|add
argument_list|(
operator|new
name|int
index|[
name|reader
operator|.
name|maxDoc
argument_list|()
index|]
argument_list|)
expr_stmt|;
name|int
name|t
init|=
literal|1
decl_stmt|;
comment|// current term number
name|TermDocs
name|termDocs
init|=
name|reader
operator|.
name|termDocs
argument_list|()
decl_stmt|;
name|TermEnum
name|termEnum
init|=
name|reader
operator|.
name|terms
argument_list|(
operator|new
name|Term
argument_list|(
name|field
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
comment|// bulk read (in lucene 4 it won't be needed).
name|int
name|size
init|=
name|Math
operator|.
name|min
argument_list|(
literal|128
argument_list|,
name|reader
operator|.
name|maxDoc
argument_list|()
argument_list|)
decl_stmt|;
name|int
index|[]
name|docs
init|=
operator|new
name|int
index|[
name|size
index|]
decl_stmt|;
name|int
index|[]
name|freqs
init|=
operator|new
name|int
index|[
name|size
index|]
decl_stmt|;
do|do
block|{
name|Term
name|term
init|=
name|termEnum
operator|.
name|term
argument_list|()
decl_stmt|;
if|if
condition|(
name|term
operator|==
literal|null
operator|||
name|term
operator|.
name|field
argument_list|()
operator|!=
name|field
condition|)
break|break;
name|loader
operator|.
name|collectTerm
argument_list|(
name|term
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
name|termDocs
operator|.
name|seek
argument_list|(
name|termEnum
argument_list|)
expr_stmt|;
name|int
name|number
init|=
name|termDocs
operator|.
name|read
argument_list|(
name|docs
argument_list|,
name|freqs
argument_list|)
decl_stmt|;
while|while
condition|(
name|number
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|number
condition|;
name|i
operator|++
control|)
block|{
name|int
name|doc
init|=
name|docs
index|[
name|i
index|]
decl_stmt|;
name|int
index|[]
name|ordinal
decl_stmt|;
if|if
condition|(
name|idx
index|[
name|doc
index|]
operator|>=
name|ordinals
operator|.
name|size
argument_list|()
condition|)
block|{
name|ordinal
operator|=
operator|new
name|int
index|[
name|reader
operator|.
name|maxDoc
argument_list|()
index|]
expr_stmt|;
name|ordinals
operator|.
name|add
argument_list|(
name|ordinal
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ordinal
operator|=
name|ordinals
operator|.
name|get
argument_list|(
name|idx
index|[
name|doc
index|]
argument_list|)
expr_stmt|;
block|}
name|ordinal
index|[
name|doc
index|]
operator|=
name|t
expr_stmt|;
name|idx
index|[
name|doc
index|]
operator|++
expr_stmt|;
block|}
name|number
operator|=
name|termDocs
operator|.
name|read
argument_list|(
name|docs
argument_list|,
name|freqs
argument_list|)
expr_stmt|;
block|}
name|t
operator|++
expr_stmt|;
block|}
do|while
condition|(
name|termEnum
operator|.
name|next
argument_list|()
condition|)
do|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"StopFillCacheException"
argument_list|)
condition|)
block|{
comment|// all is well, in case numeric parsers are used.
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
block|}
finally|finally
block|{
name|termDocs
operator|.
name|close
argument_list|()
expr_stmt|;
name|termEnum
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|ordinals
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return
name|loader
operator|.
name|buildSingleValue
argument_list|(
name|field
argument_list|,
name|ordinals
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
name|int
index|[]
index|[]
name|nativeOrdinals
init|=
operator|new
name|int
index|[
name|ordinals
operator|.
name|size
argument_list|()
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nativeOrdinals
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|nativeOrdinals
index|[
name|i
index|]
operator|=
name|ordinals
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
return|return
name|loader
operator|.
name|buildMultiValue
argument_list|(
name|field
argument_list|,
name|nativeOrdinals
argument_list|)
return|;
block|}
block|}
DECL|interface|TypeLoader
specifier|public
specifier|static
interface|interface
name|TypeLoader
parameter_list|<
name|T
extends|extends
name|FieldData
parameter_list|>
block|{
DECL|method|init
name|void
name|init
parameter_list|()
function_decl|;
DECL|method|collectTerm
name|void
name|collectTerm
parameter_list|(
name|String
name|term
parameter_list|)
function_decl|;
DECL|method|buildSingleValue
name|T
name|buildSingleValue
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|int
index|[]
name|ordinals
parameter_list|)
function_decl|;
DECL|method|buildMultiValue
name|T
name|buildMultiValue
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|int
index|[]
index|[]
name|ordinals
parameter_list|)
function_decl|;
block|}
DECL|class|FreqsTypeLoader
specifier|public
specifier|static
specifier|abstract
class|class
name|FreqsTypeLoader
parameter_list|<
name|T
extends|extends
name|FieldData
parameter_list|>
implements|implements
name|TypeLoader
argument_list|<
name|T
argument_list|>
block|{
DECL|method|FreqsTypeLoader
specifier|protected
name|FreqsTypeLoader
parameter_list|()
block|{         }
annotation|@
name|Override
DECL|method|init
specifier|public
name|void
name|init
parameter_list|()
block|{         }
block|}
block|}
end_class

end_unit

