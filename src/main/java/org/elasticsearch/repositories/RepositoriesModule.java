begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.repositories
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|repositories
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|AbstractModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Module
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|repositories
operator|.
name|fs
operator|.
name|FsRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|repositories
operator|.
name|fs
operator|.
name|FsRepositoryModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|repositories
operator|.
name|uri
operator|.
name|URLRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|repositories
operator|.
name|uri
operator|.
name|URLRepositoryModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|snapshots
operator|.
name|RestoreService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|snapshots
operator|.
name|SnapshotsService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Module responsible for registering other repositories.  *<p/>  * Repositories implemented as plugins should implement {@code onModule(RepositoriesModule module)} method, in which  * they should register repository using {@link #registerRepository(String, Class)} method.  */
end_comment

begin_class
DECL|class|RepositoriesModule
specifier|public
class|class
name|RepositoriesModule
extends|extends
name|AbstractModule
block|{
DECL|field|repositoryTypes
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Module
argument_list|>
argument_list|>
name|repositoryTypes
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
DECL|method|RepositoriesModule
specifier|public
name|RepositoriesModule
parameter_list|()
block|{
name|registerRepository
argument_list|(
name|FsRepository
operator|.
name|TYPE
argument_list|,
name|FsRepositoryModule
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerRepository
argument_list|(
name|URLRepository
operator|.
name|TYPE
argument_list|,
name|URLRepositoryModule
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
comment|/**      * Registers a custom repository type name against a module.      *      * @param type   The type      * @param module The module      */
DECL|method|registerRepository
specifier|public
name|void
name|registerRepository
parameter_list|(
name|String
name|type
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Module
argument_list|>
name|module
parameter_list|)
block|{
name|repositoryTypes
operator|.
name|put
argument_list|(
name|type
argument_list|,
name|module
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|configure
specifier|protected
name|void
name|configure
parameter_list|()
block|{
name|bind
argument_list|(
name|RepositoriesService
operator|.
name|class
argument_list|)
operator|.
name|asEagerSingleton
argument_list|()
expr_stmt|;
name|bind
argument_list|(
name|SnapshotsService
operator|.
name|class
argument_list|)
operator|.
name|asEagerSingleton
argument_list|()
expr_stmt|;
name|bind
argument_list|(
name|RestoreService
operator|.
name|class
argument_list|)
operator|.
name|asEagerSingleton
argument_list|()
expr_stmt|;
name|bind
argument_list|(
name|RepositoryTypesRegistry
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
operator|new
name|RepositoryTypesRegistry
argument_list|(
name|ImmutableMap
operator|.
name|copyOf
argument_list|(
name|repositoryTypes
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

