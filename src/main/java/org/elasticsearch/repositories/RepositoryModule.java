begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.repositories
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|repositories
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Classes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|AbstractModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Module
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Modules
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|SpawnModules
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
operator|.
name|toCamelCase
import|;
end_import

begin_comment
comment|/**  * This module spawns specific repository module  */
end_comment

begin_class
DECL|class|RepositoryModule
specifier|public
class|class
name|RepositoryModule
extends|extends
name|AbstractModule
implements|implements
name|SpawnModules
block|{
DECL|field|repositoryName
specifier|private
name|RepositoryName
name|repositoryName
decl_stmt|;
DECL|field|globalSettings
specifier|private
specifier|final
name|Settings
name|globalSettings
decl_stmt|;
DECL|field|settings
specifier|private
specifier|final
name|Settings
name|settings
decl_stmt|;
DECL|field|typesRegistry
specifier|private
specifier|final
name|RepositoryTypesRegistry
name|typesRegistry
decl_stmt|;
comment|/**      * Spawns module for repository with specified name, type and settings      *      * @param repositoryName repository name and type      * @param settings       repository settings      * @param globalSettings global settings      * @param typesRegistry  registry of repository types      */
DECL|method|RepositoryModule
specifier|public
name|RepositoryModule
parameter_list|(
name|RepositoryName
name|repositoryName
parameter_list|,
name|Settings
name|settings
parameter_list|,
name|Settings
name|globalSettings
parameter_list|,
name|RepositoryTypesRegistry
name|typesRegistry
parameter_list|)
block|{
name|this
operator|.
name|repositoryName
operator|=
name|repositoryName
expr_stmt|;
name|this
operator|.
name|globalSettings
operator|=
name|globalSettings
expr_stmt|;
name|this
operator|.
name|settings
operator|=
name|settings
expr_stmt|;
name|this
operator|.
name|typesRegistry
operator|=
name|typesRegistry
expr_stmt|;
block|}
comment|/**      * Returns repository module.      *<p/>      * First repository type is looked up in typesRegistry and if it's not found there, this module tries to      * load repository by it's class name.      *      * @return repository module      */
annotation|@
name|Override
DECL|method|spawnModules
specifier|public
name|Iterable
argument_list|<
name|?
extends|extends
name|Module
argument_list|>
name|spawnModules
parameter_list|()
block|{
return|return
name|ImmutableList
operator|.
name|of
argument_list|(
name|Modules
operator|.
name|createModule
argument_list|(
name|loadTypeModule
argument_list|(
name|repositoryName
operator|.
name|type
argument_list|()
argument_list|,
literal|"org.elasticsearch.repositories."
argument_list|,
literal|"RepositoryModule"
argument_list|)
argument_list|,
name|globalSettings
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
DECL|method|configure
specifier|protected
name|void
name|configure
parameter_list|()
block|{
name|bind
argument_list|(
name|RepositorySettings
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
operator|new
name|RepositorySettings
argument_list|(
name|globalSettings
argument_list|,
name|settings
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|loadTypeModule
specifier|private
name|Class
argument_list|<
name|?
extends|extends
name|Module
argument_list|>
name|loadTypeModule
parameter_list|(
name|String
name|type
parameter_list|,
name|String
name|prefixPackage
parameter_list|,
name|String
name|suffixClassName
parameter_list|)
block|{
name|Class
argument_list|<
name|?
extends|extends
name|Module
argument_list|>
name|registered
init|=
name|typesRegistry
operator|.
name|type
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|registered
operator|!=
literal|null
condition|)
block|{
return|return
name|registered
return|;
block|}
return|return
name|Classes
operator|.
name|loadClass
argument_list|(
name|globalSettings
operator|.
name|getClassLoader
argument_list|()
argument_list|,
name|type
argument_list|,
name|prefixPackage
argument_list|,
name|suffixClassName
argument_list|)
return|;
block|}
block|}
end_class

end_unit

