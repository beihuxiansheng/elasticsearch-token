begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.repositories.blobstore
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|repositories
operator|.
name|blobstore
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|RateLimiter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|MetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|SnapshotId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|blobstore
operator|.
name|BlobMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|blobstore
operator|.
name|BlobPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|blobstore
operator|.
name|BlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|blobstore
operator|.
name|ImmutableBlobContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|AbstractLifecycleComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|compress
operator|.
name|CompressorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|BytesStreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|metrics
operator|.
name|CounterMetric
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|ByteSizeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|ByteSizeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|snapshots
operator|.
name|IndexShardRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|snapshots
operator|.
name|blobstore
operator|.
name|BlobStoreIndexShardRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|snapshots
operator|.
name|blobstore
operator|.
name|BlobStoreIndexShardRepository
operator|.
name|RateLimiterListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|repositories
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|repositories
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|repositories
operator|.
name|RepositorySettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|snapshots
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|NoSuchFileException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayList
import|;
end_import

begin_comment
comment|/**  * BlobStore - based implementation of Snapshot Repository  *<p/>  * This repository works with any {@link BlobStore} implementation. The blobStore should be initialized in the derived  * class before {@link #doStart()} is called.  *<p/>  *<p/>  * BlobStoreRepository maintains the following structure in the blob store  *<pre>  * {@code  *   STORE_ROOT  *   |- index             - list of all snapshot name as JSON array  *   |- snapshot-20131010 - JSON serialized BlobStoreSnapshot for snapshot "20131010"  *   |- metadata-20131010 - JSON serialized MetaData for snapshot "20131010" (includes only global metadata)  *   |- snapshot-20131011 - JSON serialized BlobStoreSnapshot for snapshot "20131011"  *   |- metadata-20131011 - JSON serialized MetaData for snapshot "20131011"  *   .....  *   |- indices/ - data for all indices  *      |- foo/ - data for index "foo"  *      |  |- snapshot-20131010 - JSON Serialized IndexMetaData for index "foo"  *      |  |- 0/ - data for shard "0" of index "foo"  *      |  |  |- __1 \  *      |  |  |- __2 |  *      |  |  |- __3 |- files from different segments see snapshot-* for their mappings to real segment files  *      |  |  |- __4 |  *      |  |  |- __5 /  *      |  |  .....  *      |  |  |- snapshot-20131010 - JSON serialized BlobStoreIndexShardSnapshot for snapshot "20131010"  *      |  |  |- snapshot-20131011 - JSON serialized BlobStoreIndexShardSnapshot for snapshot "20131011"  *      |  |  *      |  |- 1/ - data for shard "1" of index "foo"  *      |  |  |- __1  *      |  |  .....  *      |  |  *      |  |-2/  *      |  ......  *      |  *      |- bar/ - data for index bar  *      ......  * }  *</pre>  */
end_comment

begin_class
DECL|class|BlobStoreRepository
specifier|public
specifier|abstract
class|class
name|BlobStoreRepository
extends|extends
name|AbstractLifecycleComponent
argument_list|<
name|Repository
argument_list|>
implements|implements
name|Repository
implements|,
name|RateLimiterListener
block|{
DECL|field|snapshotsBlobContainer
specifier|private
name|ImmutableBlobContainer
name|snapshotsBlobContainer
decl_stmt|;
DECL|field|repositoryName
specifier|protected
specifier|final
name|String
name|repositoryName
decl_stmt|;
DECL|field|SNAPSHOT_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|SNAPSHOT_PREFIX
init|=
literal|"snapshot-"
decl_stmt|;
DECL|field|SNAPSHOTS_FILE
specifier|private
specifier|static
specifier|final
name|String
name|SNAPSHOTS_FILE
init|=
literal|"index"
decl_stmt|;
DECL|field|METADATA_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|METADATA_PREFIX
init|=
literal|"metadata-"
decl_stmt|;
DECL|field|indexShardRepository
specifier|private
specifier|final
name|BlobStoreIndexShardRepository
name|indexShardRepository
decl_stmt|;
DECL|field|globalOnlyFormatParams
specifier|private
specifier|final
name|ToXContent
operator|.
name|Params
name|globalOnlyFormatParams
decl_stmt|;
DECL|field|snapshotRateLimiter
specifier|private
specifier|final
name|RateLimiter
name|snapshotRateLimiter
decl_stmt|;
DECL|field|restoreRateLimiter
specifier|private
specifier|final
name|RateLimiter
name|restoreRateLimiter
decl_stmt|;
DECL|field|snapshotRateLimitingTimeInNanos
specifier|private
specifier|final
name|CounterMetric
name|snapshotRateLimitingTimeInNanos
init|=
operator|new
name|CounterMetric
argument_list|()
decl_stmt|;
DECL|field|restoreRateLimitingTimeInNanos
specifier|private
specifier|final
name|CounterMetric
name|restoreRateLimitingTimeInNanos
init|=
operator|new
name|CounterMetric
argument_list|()
decl_stmt|;
comment|/**      * Constructs new BlobStoreRepository      *      * @param repositoryName       repository name      * @param repositorySettings   repository settings      * @param indexShardRepository an instance of IndexShardRepository      */
DECL|method|BlobStoreRepository
specifier|protected
name|BlobStoreRepository
parameter_list|(
name|String
name|repositoryName
parameter_list|,
name|RepositorySettings
name|repositorySettings
parameter_list|,
name|IndexShardRepository
name|indexShardRepository
parameter_list|)
block|{
name|super
argument_list|(
name|repositorySettings
operator|.
name|globalSettings
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|repositoryName
operator|=
name|repositoryName
expr_stmt|;
name|this
operator|.
name|indexShardRepository
operator|=
operator|(
name|BlobStoreIndexShardRepository
operator|)
name|indexShardRepository
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|globalOnlyParams
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|globalOnlyParams
operator|.
name|put
argument_list|(
name|MetaData
operator|.
name|PERSISTENT_ONLY_PARAM
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|globalOnlyParams
operator|.
name|put
argument_list|(
name|MetaData
operator|.
name|GLOBAL_ONLY_PARAM
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|globalOnlyFormatParams
operator|=
operator|new
name|ToXContent
operator|.
name|MapParams
argument_list|(
name|globalOnlyParams
argument_list|)
expr_stmt|;
name|snapshotRateLimiter
operator|=
name|getRateLimiter
argument_list|(
name|repositorySettings
argument_list|,
literal|"max_snapshot_bytes_per_sec"
argument_list|,
operator|new
name|ByteSizeValue
argument_list|(
literal|20
argument_list|,
name|ByteSizeUnit
operator|.
name|MB
argument_list|)
argument_list|)
expr_stmt|;
name|restoreRateLimiter
operator|=
name|getRateLimiter
argument_list|(
name|repositorySettings
argument_list|,
literal|"max_restore_bytes_per_sec"
argument_list|,
operator|new
name|ByteSizeValue
argument_list|(
literal|20
argument_list|,
name|ByteSizeUnit
operator|.
name|MB
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
DECL|method|doStart
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|ElasticsearchException
block|{
name|this
operator|.
name|snapshotsBlobContainer
operator|=
name|blobStore
argument_list|()
operator|.
name|immutableBlobContainer
argument_list|(
name|basePath
argument_list|()
argument_list|)
expr_stmt|;
name|indexShardRepository
operator|.
name|initialize
argument_list|(
name|blobStore
argument_list|()
argument_list|,
name|basePath
argument_list|()
argument_list|,
name|chunkSize
argument_list|()
argument_list|,
name|snapshotRateLimiter
argument_list|,
name|restoreRateLimiter
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
DECL|method|doStop
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|ElasticsearchException
block|{     }
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
DECL|method|doClose
specifier|protected
name|void
name|doClose
parameter_list|()
throws|throws
name|ElasticsearchException
block|{
try|try
block|{
name|blobStore
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"cannot close blob store"
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Returns initialized and ready to use BlobStore      *<p/>      * This method is first called in the {@link #doStart()} method.      *      * @return blob store      */
DECL|method|blobStore
specifier|abstract
specifier|protected
name|BlobStore
name|blobStore
parameter_list|()
function_decl|;
comment|/**      * Returns base path of the repository      */
DECL|method|basePath
specifier|abstract
specifier|protected
name|BlobPath
name|basePath
parameter_list|()
function_decl|;
comment|/**      * Returns true if metadata and snapshot files should be compressed      *      * @return true if compression is needed      */
DECL|method|isCompress
specifier|protected
name|boolean
name|isCompress
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
comment|/**      * Returns data file chunk size.      *<p/>      * This method should return null if no chunking is needed.      *      * @return chunk size      */
DECL|method|chunkSize
specifier|protected
name|ByteSizeValue
name|chunkSize
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
DECL|method|initializeSnapshot
specifier|public
name|void
name|initializeSnapshot
parameter_list|(
name|SnapshotId
name|snapshotId
parameter_list|,
name|ImmutableList
argument_list|<
name|String
argument_list|>
name|indices
parameter_list|,
name|MetaData
name|metaData
parameter_list|)
block|{
try|try
block|{
name|BlobStoreSnapshot
name|blobStoreSnapshot
init|=
name|BlobStoreSnapshot
operator|.
name|builder
argument_list|()
operator|.
name|name
argument_list|(
name|snapshotId
operator|.
name|getSnapshot
argument_list|()
argument_list|)
operator|.
name|indices
argument_list|(
name|indices
argument_list|)
operator|.
name|startTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|BytesStreamOutput
name|bStream
init|=
name|writeSnapshot
argument_list|(
name|blobStoreSnapshot
argument_list|)
decl_stmt|;
name|String
name|snapshotBlobName
init|=
name|snapshotBlobName
argument_list|(
name|snapshotId
argument_list|)
decl_stmt|;
if|if
condition|(
name|snapshotsBlobContainer
operator|.
name|blobExists
argument_list|(
name|snapshotBlobName
argument_list|)
condition|)
block|{
comment|// TODO: Can we make it atomic?
throw|throw
operator|new
name|InvalidSnapshotNameException
argument_list|(
name|snapshotId
argument_list|,
literal|"snapshot with such name already exists"
argument_list|)
throw|;
block|}
name|BytesReference
name|bRef
init|=
name|bStream
operator|.
name|bytes
argument_list|()
decl_stmt|;
name|snapshotsBlobContainer
operator|.
name|writeBlob
argument_list|(
name|snapshotBlobName
argument_list|,
name|bRef
operator|.
name|streamInput
argument_list|()
argument_list|,
name|bRef
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
comment|// Write Global MetaData
comment|// TODO: Check if metadata needs to be written
name|bStream
operator|=
name|writeGlobalMetaData
argument_list|(
name|metaData
argument_list|)
expr_stmt|;
name|bRef
operator|=
name|bStream
operator|.
name|bytes
argument_list|()
expr_stmt|;
name|snapshotsBlobContainer
operator|.
name|writeBlob
argument_list|(
name|metaDataBlobName
argument_list|(
name|snapshotId
argument_list|)
argument_list|,
name|bRef
operator|.
name|streamInput
argument_list|()
argument_list|,
name|bRef
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|index
range|:
name|indices
control|)
block|{
name|IndexMetaData
name|indexMetaData
init|=
name|metaData
operator|.
name|index
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|BlobPath
name|indexPath
init|=
name|basePath
argument_list|()
operator|.
name|add
argument_list|(
literal|"indices"
argument_list|)
operator|.
name|add
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|ImmutableBlobContainer
name|indexMetaDataBlobContainer
init|=
name|blobStore
argument_list|()
operator|.
name|immutableBlobContainer
argument_list|(
name|indexPath
argument_list|)
decl_stmt|;
name|bStream
operator|=
operator|new
name|BytesStreamOutput
argument_list|()
expr_stmt|;
name|StreamOutput
name|stream
init|=
name|bStream
decl_stmt|;
if|if
condition|(
name|isCompress
argument_list|()
condition|)
block|{
name|stream
operator|=
name|CompressorFactory
operator|.
name|defaultCompressor
argument_list|()
operator|.
name|streamOutput
argument_list|(
name|stream
argument_list|)
expr_stmt|;
block|}
name|XContentBuilder
name|builder
init|=
name|XContentFactory
operator|.
name|contentBuilder
argument_list|(
name|XContentType
operator|.
name|JSON
argument_list|,
name|stream
argument_list|)
decl_stmt|;
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|IndexMetaData
operator|.
name|Builder
operator|.
name|toXContent
argument_list|(
name|indexMetaData
argument_list|,
name|builder
argument_list|,
name|ToXContent
operator|.
name|EMPTY_PARAMS
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|close
argument_list|()
expr_stmt|;
name|bRef
operator|=
name|bStream
operator|.
name|bytes
argument_list|()
expr_stmt|;
name|indexMetaDataBlobContainer
operator|.
name|writeBlob
argument_list|(
name|snapshotBlobName
argument_list|(
name|snapshotId
argument_list|)
argument_list|,
name|bRef
operator|.
name|streamInput
argument_list|()
argument_list|,
name|bRef
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|SnapshotCreationException
argument_list|(
name|snapshotId
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
DECL|method|deleteSnapshot
specifier|public
name|void
name|deleteSnapshot
parameter_list|(
name|SnapshotId
name|snapshotId
parameter_list|)
block|{
name|Snapshot
name|snapshot
init|=
name|readSnapshot
argument_list|(
name|snapshotId
argument_list|)
decl_stmt|;
name|MetaData
name|metaData
init|=
name|readSnapshotMetaData
argument_list|(
name|snapshotId
argument_list|,
name|snapshot
operator|.
name|indices
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
try|try
block|{
name|String
name|blobName
init|=
name|snapshotBlobName
argument_list|(
name|snapshotId
argument_list|)
decl_stmt|;
comment|// Delete snapshot file first so we wouldn't end up with partially deleted snapshot that looks OK
name|snapshotsBlobContainer
operator|.
name|deleteBlob
argument_list|(
name|blobName
argument_list|)
expr_stmt|;
name|snapshotsBlobContainer
operator|.
name|deleteBlob
argument_list|(
name|metaDataBlobName
argument_list|(
name|snapshotId
argument_list|)
argument_list|)
expr_stmt|;
comment|// Delete snapshot from the snapshot list
name|ImmutableList
argument_list|<
name|SnapshotId
argument_list|>
name|snapshotIds
init|=
name|snapshots
argument_list|()
decl_stmt|;
if|if
condition|(
name|snapshotIds
operator|.
name|contains
argument_list|(
name|snapshotId
argument_list|)
condition|)
block|{
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|SnapshotId
argument_list|>
name|builder
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|SnapshotId
name|id
range|:
name|snapshotIds
control|)
block|{
if|if
condition|(
operator|!
name|snapshotId
operator|.
name|equals
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|builder
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
name|snapshotIds
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
name|writeSnapshotList
argument_list|(
name|snapshotIds
argument_list|)
expr_stmt|;
comment|// Now delete all indices
for|for
control|(
name|String
name|index
range|:
name|snapshot
operator|.
name|indices
argument_list|()
control|)
block|{
name|BlobPath
name|indexPath
init|=
name|basePath
argument_list|()
operator|.
name|add
argument_list|(
literal|"indices"
argument_list|)
operator|.
name|add
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|ImmutableBlobContainer
name|indexMetaDataBlobContainer
init|=
name|blobStore
argument_list|()
operator|.
name|immutableBlobContainer
argument_list|(
name|indexPath
argument_list|)
decl_stmt|;
try|try
block|{
name|indexMetaDataBlobContainer
operator|.
name|deleteBlob
argument_list|(
name|blobName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"[{}] failed to delete metadata for index [{}]"
argument_list|,
name|ex
argument_list|,
name|snapshotId
argument_list|,
name|index
argument_list|)
expr_stmt|;
block|}
name|IndexMetaData
name|indexMetaData
init|=
name|metaData
operator|.
name|index
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexMetaData
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|indexMetaData
operator|.
name|getNumberOfShards
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|indexShardRepository
operator|.
name|delete
argument_list|(
name|snapshotId
argument_list|,
operator|new
name|ShardId
argument_list|(
name|index
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
name|this
operator|.
name|repositoryName
argument_list|,
literal|"failed to update snapshot in repository"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
DECL|method|finalizeSnapshot
specifier|public
name|Snapshot
name|finalizeSnapshot
parameter_list|(
name|SnapshotId
name|snapshotId
parameter_list|,
name|String
name|failure
parameter_list|,
name|int
name|totalShards
parameter_list|,
name|ImmutableList
argument_list|<
name|SnapshotShardFailure
argument_list|>
name|shardFailures
parameter_list|)
block|{
name|BlobStoreSnapshot
name|snapshot
init|=
operator|(
name|BlobStoreSnapshot
operator|)
name|readSnapshot
argument_list|(
name|snapshotId
argument_list|)
decl_stmt|;
if|if
condition|(
name|snapshot
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SnapshotMissingException
argument_list|(
name|snapshotId
argument_list|)
throw|;
block|}
if|if
condition|(
name|snapshot
operator|.
name|state
argument_list|()
operator|.
name|completed
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SnapshotException
argument_list|(
name|snapshotId
argument_list|,
literal|"snapshot is already closed"
argument_list|)
throw|;
block|}
try|try
block|{
name|String
name|blobName
init|=
name|snapshotBlobName
argument_list|(
name|snapshotId
argument_list|)
decl_stmt|;
name|BlobStoreSnapshot
operator|.
name|Builder
name|updatedSnapshot
init|=
name|BlobStoreSnapshot
operator|.
name|builder
argument_list|()
operator|.
name|snapshot
argument_list|(
name|snapshot
argument_list|)
decl_stmt|;
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|shardFailures
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|updatedSnapshot
operator|.
name|success
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|updatedSnapshot
operator|.
name|partial
argument_list|()
expr_stmt|;
block|}
name|updatedSnapshot
operator|.
name|failures
argument_list|(
name|totalShards
argument_list|,
name|shardFailures
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|updatedSnapshot
operator|.
name|failed
argument_list|(
name|failure
argument_list|)
expr_stmt|;
block|}
name|updatedSnapshot
operator|.
name|endTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|snapshot
operator|=
name|updatedSnapshot
operator|.
name|build
argument_list|()
expr_stmt|;
name|BytesStreamOutput
name|bStream
init|=
name|writeSnapshot
argument_list|(
name|snapshot
argument_list|)
decl_stmt|;
name|BytesReference
name|bRef
init|=
name|bStream
operator|.
name|bytes
argument_list|()
decl_stmt|;
name|snapshotsBlobContainer
operator|.
name|writeBlob
argument_list|(
name|blobName
argument_list|,
name|bRef
operator|.
name|streamInput
argument_list|()
argument_list|,
name|bRef
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|ImmutableList
argument_list|<
name|SnapshotId
argument_list|>
name|snapshotIds
init|=
name|snapshots
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|snapshotIds
operator|.
name|contains
argument_list|(
name|snapshotId
argument_list|)
condition|)
block|{
name|snapshotIds
operator|=
name|ImmutableList
operator|.
expr|<
name|SnapshotId
operator|>
name|builder
argument_list|()
operator|.
name|addAll
argument_list|(
name|snapshotIds
argument_list|)
operator|.
name|add
argument_list|(
name|snapshotId
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
name|writeSnapshotList
argument_list|(
name|snapshotIds
argument_list|)
expr_stmt|;
return|return
name|snapshot
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
name|this
operator|.
name|repositoryName
argument_list|,
literal|"failed to update snapshot in repository"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
DECL|method|snapshots
specifier|public
name|ImmutableList
argument_list|<
name|SnapshotId
argument_list|>
name|snapshots
parameter_list|()
block|{
try|try
block|{
name|List
argument_list|<
name|SnapshotId
argument_list|>
name|snapshots
init|=
name|newArrayList
argument_list|()
decl_stmt|;
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|BlobMetaData
argument_list|>
name|blobs
decl_stmt|;
try|try
block|{
name|blobs
operator|=
name|snapshotsBlobContainer
operator|.
name|listBlobsByPrefix
argument_list|(
name|SNAPSHOT_PREFIX
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|ex
parameter_list|)
block|{
comment|// Fall back in case listBlobsByPrefix isn't supported by the blob store
return|return
name|readSnapshotList
argument_list|()
return|;
block|}
name|int
name|prefixLength
init|=
name|SNAPSHOT_PREFIX
operator|.
name|length
argument_list|()
decl_stmt|;
for|for
control|(
name|BlobMetaData
name|md
range|:
name|blobs
operator|.
name|values
argument_list|()
control|)
block|{
name|String
name|name
init|=
name|md
operator|.
name|name
argument_list|()
operator|.
name|substring
argument_list|(
name|prefixLength
argument_list|)
decl_stmt|;
name|snapshots
operator|.
name|add
argument_list|(
operator|new
name|SnapshotId
argument_list|(
name|repositoryName
argument_list|,
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|snapshots
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
name|repositoryName
argument_list|,
literal|"failed to list snapshots in repository"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
DECL|method|readSnapshotMetaData
specifier|public
name|MetaData
name|readSnapshotMetaData
parameter_list|(
name|SnapshotId
name|snapshotId
parameter_list|,
name|ImmutableList
argument_list|<
name|String
argument_list|>
name|indices
parameter_list|)
block|{
return|return
name|readSnapshotMetaData
argument_list|(
name|snapshotId
argument_list|,
name|indices
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
DECL|method|readSnapshot
specifier|public
name|Snapshot
name|readSnapshot
parameter_list|(
name|SnapshotId
name|snapshotId
parameter_list|)
block|{
try|try
block|{
name|String
name|blobName
init|=
name|snapshotBlobName
argument_list|(
name|snapshotId
argument_list|)
decl_stmt|;
name|int
name|retryCount
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|byte
index|[]
name|data
init|=
name|snapshotsBlobContainer
operator|.
name|readBlobFully
argument_list|(
name|blobName
argument_list|)
decl_stmt|;
comment|// Because we are overriding snapshot during finalization, it's possible that
comment|// we can get an empty or incomplete snapshot for a brief moment
comment|// retrying after some what can resolve the issue
comment|// TODO: switch to atomic update after non-local gateways are removed and we switch to java 1.7
try|try
block|{
return|return
name|readSnapshot
argument_list|(
name|data
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ElasticsearchParseException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|retryCount
operator|++
operator|<
literal|3
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|50
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex1
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
decl||
name|NoSuchFileException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|SnapshotMissingException
argument_list|(
name|snapshotId
argument_list|,
name|ex
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|SnapshotException
argument_list|(
name|snapshotId
argument_list|,
literal|"failed to get snapshots"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
DECL|method|readSnapshotMetaData
specifier|private
name|MetaData
name|readSnapshotMetaData
parameter_list|(
name|SnapshotId
name|snapshotId
parameter_list|,
name|ImmutableList
argument_list|<
name|String
argument_list|>
name|indices
parameter_list|,
name|boolean
name|ignoreIndexErrors
parameter_list|)
block|{
name|MetaData
name|metaData
decl_stmt|;
try|try
block|{
name|byte
index|[]
name|data
init|=
name|snapshotsBlobContainer
operator|.
name|readBlobFully
argument_list|(
name|metaDataBlobName
argument_list|(
name|snapshotId
argument_list|)
argument_list|)
decl_stmt|;
name|metaData
operator|=
name|readMetaData
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
decl||
name|NoSuchFileException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|SnapshotMissingException
argument_list|(
name|snapshotId
argument_list|,
name|ex
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|SnapshotException
argument_list|(
name|snapshotId
argument_list|,
literal|"failed to get snapshots"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
name|MetaData
operator|.
name|Builder
name|metaDataBuilder
init|=
name|MetaData
operator|.
name|builder
argument_list|(
name|metaData
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|index
range|:
name|indices
control|)
block|{
name|BlobPath
name|indexPath
init|=
name|basePath
argument_list|()
operator|.
name|add
argument_list|(
literal|"indices"
argument_list|)
operator|.
name|add
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|ImmutableBlobContainer
name|indexMetaDataBlobContainer
init|=
name|blobStore
argument_list|()
operator|.
name|immutableBlobContainer
argument_list|(
name|indexPath
argument_list|)
decl_stmt|;
try|try
block|{
name|byte
index|[]
name|data
init|=
name|indexMetaDataBlobContainer
operator|.
name|readBlobFully
argument_list|(
name|snapshotBlobName
argument_list|(
name|snapshotId
argument_list|)
argument_list|)
decl_stmt|;
try|try
init|(
name|XContentParser
name|parser
init|=
name|XContentHelper
operator|.
name|createParser
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|length
argument_list|)
init|)
block|{
name|XContentParser
operator|.
name|Token
name|token
decl_stmt|;
if|if
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
condition|)
block|{
name|IndexMetaData
name|indexMetaData
init|=
name|IndexMetaData
operator|.
name|Builder
operator|.
name|fromXContent
argument_list|(
name|parser
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
condition|)
block|{
name|metaDataBuilder
operator|.
name|put
argument_list|(
name|indexMetaData
argument_list|,
literal|false
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
if|if
condition|(
operator|!
name|ignoreIndexErrors
condition|)
block|{
throw|throw
operator|new
name|ElasticsearchParseException
argument_list|(
literal|"unexpected token  ["
operator|+
name|token
operator|+
literal|"]"
argument_list|)
throw|;
block|}
else|else
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"[{}] [{}] unexpected token while reading snapshot metadata [{}]"
argument_list|,
name|snapshotId
argument_list|,
name|index
argument_list|,
name|token
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
if|if
condition|(
operator|!
name|ignoreIndexErrors
condition|)
block|{
throw|throw
operator|new
name|SnapshotException
argument_list|(
name|snapshotId
argument_list|,
literal|"failed to read metadata"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
else|else
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"[{}] [{}] failed to read metadata for index"
argument_list|,
name|snapshotId
argument_list|,
name|index
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|metaDataBuilder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**      * Configures RateLimiter based on repository and global settings      *      * @param repositorySettings repository settings      * @param setting            setting to use to configure rate limiter      * @param defaultRate        default limiting rate      * @return rate limiter or null of no throttling is needed      */
DECL|method|getRateLimiter
specifier|private
name|RateLimiter
name|getRateLimiter
parameter_list|(
name|RepositorySettings
name|repositorySettings
parameter_list|,
name|String
name|setting
parameter_list|,
name|ByteSizeValue
name|defaultRate
parameter_list|)
block|{
name|ByteSizeValue
name|maxSnapshotBytesPerSec
init|=
name|repositorySettings
operator|.
name|settings
argument_list|()
operator|.
name|getAsBytesSize
argument_list|(
name|setting
argument_list|,
name|componentSettings
operator|.
name|getAsBytesSize
argument_list|(
name|setting
argument_list|,
name|defaultRate
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|maxSnapshotBytesPerSec
operator|.
name|bytes
argument_list|()
operator|<=
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
operator|new
name|RateLimiter
operator|.
name|SimpleRateLimiter
argument_list|(
name|maxSnapshotBytesPerSec
operator|.
name|mbFrac
argument_list|()
argument_list|)
return|;
block|}
block|}
comment|/**      * Parses JSON containing snapshot description      *      * @param data snapshot description in JSON format      * @return parsed snapshot description      * @throws IOException parse exceptions      */
DECL|method|readSnapshot
specifier|private
name|BlobStoreSnapshot
name|readSnapshot
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|XContentParser
name|parser
init|=
name|XContentHelper
operator|.
name|createParser
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|length
argument_list|)
init|)
block|{
name|XContentParser
operator|.
name|Token
name|token
decl_stmt|;
if|if
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
condition|)
block|{
if|if
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
condition|)
block|{
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|BlobStoreSnapshot
name|snapshot
init|=
name|BlobStoreSnapshot
operator|.
name|Builder
operator|.
name|fromXContent
argument_list|(
name|parser
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
condition|)
block|{
return|return
name|snapshot
return|;
block|}
block|}
block|}
throw|throw
operator|new
name|ElasticsearchParseException
argument_list|(
literal|"unexpected token  ["
operator|+
name|token
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
comment|/**      * Parses JSON containing cluster metadata      *      * @param data cluster metadata in JSON format      * @return parsed metadata      * @throws IOException parse exceptions      */
DECL|method|readMetaData
specifier|private
name|MetaData
name|readMetaData
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|XContentParser
name|parser
init|=
name|XContentHelper
operator|.
name|createParser
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|length
argument_list|)
init|)
block|{
name|XContentParser
operator|.
name|Token
name|token
decl_stmt|;
if|if
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
condition|)
block|{
if|if
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
condition|)
block|{
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|MetaData
name|metaData
init|=
name|MetaData
operator|.
name|Builder
operator|.
name|fromXContent
argument_list|(
name|parser
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
condition|)
block|{
return|return
name|metaData
return|;
block|}
block|}
block|}
throw|throw
operator|new
name|ElasticsearchParseException
argument_list|(
literal|"unexpected token  ["
operator|+
name|token
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
comment|/**      * Returns name of snapshot blob      *      * @param snapshotId snapshot id      * @return name of snapshot blob      */
DECL|method|snapshotBlobName
specifier|private
name|String
name|snapshotBlobName
parameter_list|(
name|SnapshotId
name|snapshotId
parameter_list|)
block|{
return|return
name|SNAPSHOT_PREFIX
operator|+
name|snapshotId
operator|.
name|getSnapshot
argument_list|()
return|;
block|}
comment|/**      * Returns name of metadata blob      *      * @param snapshotId snapshot id      * @return name of metadata blob      */
DECL|method|metaDataBlobName
specifier|private
name|String
name|metaDataBlobName
parameter_list|(
name|SnapshotId
name|snapshotId
parameter_list|)
block|{
return|return
name|METADATA_PREFIX
operator|+
name|snapshotId
operator|.
name|getSnapshot
argument_list|()
return|;
block|}
comment|/**      * Serializes BlobStoreSnapshot into JSON      *      * @param snapshot - snapshot description      * @return BytesStreamOutput representing JSON serialized BlobStoreSnapshot      * @throws IOException      */
DECL|method|writeSnapshot
specifier|private
name|BytesStreamOutput
name|writeSnapshot
parameter_list|(
name|BlobStoreSnapshot
name|snapshot
parameter_list|)
throws|throws
name|IOException
block|{
name|BytesStreamOutput
name|bStream
init|=
operator|new
name|BytesStreamOutput
argument_list|()
decl_stmt|;
name|StreamOutput
name|stream
init|=
name|bStream
decl_stmt|;
if|if
condition|(
name|isCompress
argument_list|()
condition|)
block|{
name|stream
operator|=
name|CompressorFactory
operator|.
name|defaultCompressor
argument_list|()
operator|.
name|streamOutput
argument_list|(
name|stream
argument_list|)
expr_stmt|;
block|}
name|XContentBuilder
name|builder
init|=
name|XContentFactory
operator|.
name|contentBuilder
argument_list|(
name|XContentType
operator|.
name|JSON
argument_list|,
name|stream
argument_list|)
decl_stmt|;
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|BlobStoreSnapshot
operator|.
name|Builder
operator|.
name|toXContent
argument_list|(
name|snapshot
argument_list|,
name|builder
argument_list|,
name|globalOnlyFormatParams
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|bStream
return|;
block|}
comment|/**      * Serializes global MetaData into JSON      *      * @param metaData - metaData      * @return BytesStreamOutput representing JSON serialized global MetaData      * @throws IOException      */
DECL|method|writeGlobalMetaData
specifier|private
name|BytesStreamOutput
name|writeGlobalMetaData
parameter_list|(
name|MetaData
name|metaData
parameter_list|)
throws|throws
name|IOException
block|{
name|BytesStreamOutput
name|bStream
init|=
operator|new
name|BytesStreamOutput
argument_list|()
decl_stmt|;
name|StreamOutput
name|stream
init|=
name|bStream
decl_stmt|;
if|if
condition|(
name|isCompress
argument_list|()
condition|)
block|{
name|stream
operator|=
name|CompressorFactory
operator|.
name|defaultCompressor
argument_list|()
operator|.
name|streamOutput
argument_list|(
name|stream
argument_list|)
expr_stmt|;
block|}
name|XContentBuilder
name|builder
init|=
name|XContentFactory
operator|.
name|contentBuilder
argument_list|(
name|XContentType
operator|.
name|JSON
argument_list|,
name|stream
argument_list|)
decl_stmt|;
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|MetaData
operator|.
name|Builder
operator|.
name|toXContent
argument_list|(
name|metaData
argument_list|,
name|builder
argument_list|,
name|globalOnlyFormatParams
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|bStream
return|;
block|}
comment|/**      * Writes snapshot index file      *<p/>      * This file can be used by read-only repositories that are unable to list files in the repository      *      * @param snapshots list of snapshot ids      * @throws IOException I/O errors      */
DECL|method|writeSnapshotList
specifier|protected
name|void
name|writeSnapshotList
parameter_list|(
name|ImmutableList
argument_list|<
name|SnapshotId
argument_list|>
name|snapshots
parameter_list|)
throws|throws
name|IOException
block|{
name|BytesStreamOutput
name|bStream
init|=
operator|new
name|BytesStreamOutput
argument_list|()
decl_stmt|;
name|StreamOutput
name|stream
init|=
name|bStream
decl_stmt|;
if|if
condition|(
name|isCompress
argument_list|()
condition|)
block|{
name|stream
operator|=
name|CompressorFactory
operator|.
name|defaultCompressor
argument_list|()
operator|.
name|streamOutput
argument_list|(
name|stream
argument_list|)
expr_stmt|;
block|}
name|XContentBuilder
name|builder
init|=
name|XContentFactory
operator|.
name|contentBuilder
argument_list|(
name|XContentType
operator|.
name|JSON
argument_list|,
name|stream
argument_list|)
decl_stmt|;
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|startArray
argument_list|(
literal|"snapshots"
argument_list|)
expr_stmt|;
for|for
control|(
name|SnapshotId
name|snapshot
range|:
name|snapshots
control|)
block|{
name|builder
operator|.
name|value
argument_list|(
name|snapshot
operator|.
name|getSnapshot
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|close
argument_list|()
expr_stmt|;
name|BytesReference
name|bRef
init|=
name|bStream
operator|.
name|bytes
argument_list|()
decl_stmt|;
name|snapshotsBlobContainer
operator|.
name|writeBlob
argument_list|(
name|SNAPSHOTS_FILE
argument_list|,
name|bRef
operator|.
name|streamInput
argument_list|()
argument_list|,
name|bRef
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Reads snapshot index file      *<p/>      * This file can be used by read-only repositories that are unable to list files in the repository      *      * @return list of snapshots in the repository      * @throws IOException I/O errors      */
DECL|method|readSnapshotList
specifier|protected
name|ImmutableList
argument_list|<
name|SnapshotId
argument_list|>
name|readSnapshotList
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|data
init|=
name|snapshotsBlobContainer
operator|.
name|readBlobFully
argument_list|(
name|SNAPSHOTS_FILE
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|SnapshotId
argument_list|>
name|snapshots
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
init|(
name|XContentParser
name|parser
init|=
name|XContentHelper
operator|.
name|createParser
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|length
argument_list|)
init|)
block|{
if|if
condition|(
name|parser
operator|.
name|nextToken
argument_list|()
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
condition|)
block|{
if|if
condition|(
name|parser
operator|.
name|nextToken
argument_list|()
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
condition|)
block|{
name|String
name|currentFieldName
init|=
name|parser
operator|.
name|currentName
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"snapshots"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
if|if
condition|(
name|parser
operator|.
name|nextToken
argument_list|()
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_ARRAY
condition|)
block|{
while|while
condition|(
name|parser
operator|.
name|nextToken
argument_list|()
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_ARRAY
condition|)
block|{
name|snapshots
operator|.
name|add
argument_list|(
operator|new
name|SnapshotId
argument_list|(
name|repositoryName
argument_list|,
name|parser
operator|.
name|text
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
return|return
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|snapshots
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|onRestorePause
specifier|public
name|void
name|onRestorePause
parameter_list|(
name|long
name|nanos
parameter_list|)
block|{
name|restoreRateLimitingTimeInNanos
operator|.
name|inc
argument_list|(
name|nanos
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onSnapshotPause
specifier|public
name|void
name|onSnapshotPause
parameter_list|(
name|long
name|nanos
parameter_list|)
block|{
name|snapshotRateLimitingTimeInNanos
operator|.
name|inc
argument_list|(
name|nanos
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|snapshotThrottleTimeInNanos
specifier|public
name|long
name|snapshotThrottleTimeInNanos
parameter_list|()
block|{
return|return
name|snapshotRateLimitingTimeInNanos
operator|.
name|count
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|restoreThrottleTimeInNanos
specifier|public
name|long
name|restoreThrottleTimeInNanos
parameter_list|()
block|{
return|return
name|restoreRateLimitingTimeInNanos
operator|.
name|count
argument_list|()
return|;
block|}
block|}
end_class

end_unit

