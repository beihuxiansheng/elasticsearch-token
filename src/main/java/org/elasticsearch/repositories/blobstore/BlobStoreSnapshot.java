begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.repositories.blobstore
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|repositories
operator|.
name|blobstore
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilderString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|snapshots
operator|.
name|Snapshot
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|snapshots
operator|.
name|SnapshotShardFailure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|snapshots
operator|.
name|SnapshotState
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_comment
comment|/**  * Immutable snapshot description for BlobStoreRepository  *<p/>  * Stored in the the root of the repository, see {@link BlobStoreRepository} for more information.  */
end_comment

begin_class
DECL|class|BlobStoreSnapshot
specifier|public
class|class
name|BlobStoreSnapshot
implements|implements
name|Snapshot
block|{
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|version
specifier|private
specifier|final
name|Version
name|version
decl_stmt|;
DECL|field|state
specifier|private
specifier|final
name|SnapshotState
name|state
decl_stmt|;
DECL|field|reason
specifier|private
specifier|final
name|String
name|reason
decl_stmt|;
DECL|field|indices
specifier|private
specifier|final
name|ImmutableList
argument_list|<
name|String
argument_list|>
name|indices
decl_stmt|;
DECL|field|startTime
specifier|private
specifier|final
name|long
name|startTime
decl_stmt|;
DECL|field|endTime
specifier|private
specifier|final
name|long
name|endTime
decl_stmt|;
DECL|field|totalShard
specifier|private
specifier|final
name|int
name|totalShard
decl_stmt|;
DECL|field|successfulShards
specifier|private
specifier|final
name|int
name|successfulShards
decl_stmt|;
DECL|field|shardFailures
specifier|private
specifier|final
name|ImmutableList
argument_list|<
name|SnapshotShardFailure
argument_list|>
name|shardFailures
decl_stmt|;
DECL|method|BlobStoreSnapshot
specifier|private
name|BlobStoreSnapshot
parameter_list|(
name|String
name|name
parameter_list|,
name|ImmutableList
argument_list|<
name|String
argument_list|>
name|indices
parameter_list|,
name|SnapshotState
name|state
parameter_list|,
name|String
name|reason
parameter_list|,
name|Version
name|version
parameter_list|,
name|long
name|startTime
parameter_list|,
name|long
name|endTime
parameter_list|,
name|int
name|totalShard
parameter_list|,
name|int
name|successfulShards
parameter_list|,
name|ImmutableList
argument_list|<
name|SnapshotShardFailure
argument_list|>
name|shardFailures
parameter_list|)
block|{
assert|assert
name|name
operator|!=
literal|null
assert|;
assert|assert
name|indices
operator|!=
literal|null
assert|;
assert|assert
name|state
operator|!=
literal|null
assert|;
assert|assert
name|shardFailures
operator|!=
literal|null
assert|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|indices
operator|=
name|indices
expr_stmt|;
name|this
operator|.
name|state
operator|=
name|state
expr_stmt|;
name|this
operator|.
name|reason
operator|=
name|reason
expr_stmt|;
name|this
operator|.
name|version
operator|=
name|version
expr_stmt|;
name|this
operator|.
name|startTime
operator|=
name|startTime
expr_stmt|;
name|this
operator|.
name|endTime
operator|=
name|endTime
expr_stmt|;
name|this
operator|.
name|totalShard
operator|=
name|totalShard
expr_stmt|;
name|this
operator|.
name|successfulShards
operator|=
name|successfulShards
expr_stmt|;
name|this
operator|.
name|shardFailures
operator|=
name|shardFailures
expr_stmt|;
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
DECL|method|name
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
name|name
return|;
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
DECL|method|state
specifier|public
name|SnapshotState
name|state
parameter_list|()
block|{
return|return
name|state
return|;
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
DECL|method|reason
specifier|public
name|String
name|reason
parameter_list|()
block|{
return|return
name|reason
return|;
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
DECL|method|version
specifier|public
name|Version
name|version
parameter_list|()
block|{
return|return
name|version
return|;
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
DECL|method|indices
specifier|public
name|ImmutableList
argument_list|<
name|String
argument_list|>
name|indices
parameter_list|()
block|{
return|return
name|indices
return|;
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
DECL|method|startTime
specifier|public
name|long
name|startTime
parameter_list|()
block|{
return|return
name|startTime
return|;
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
DECL|method|endTime
specifier|public
name|long
name|endTime
parameter_list|()
block|{
return|return
name|endTime
return|;
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
DECL|method|totalShard
specifier|public
name|int
name|totalShard
parameter_list|()
block|{
return|return
name|totalShard
return|;
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
DECL|method|successfulShards
specifier|public
name|int
name|successfulShards
parameter_list|()
block|{
return|return
name|successfulShards
return|;
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
DECL|method|shardFailures
specifier|public
name|ImmutableList
argument_list|<
name|SnapshotShardFailure
argument_list|>
name|shardFailures
parameter_list|()
block|{
return|return
name|shardFailures
return|;
block|}
comment|/**      * Creates new BlobStoreSnapshot builder      *      * @return      */
DECL|method|builder
specifier|public
specifier|static
name|Builder
name|builder
parameter_list|()
block|{
return|return
operator|new
name|Builder
argument_list|()
return|;
block|}
comment|/**      * Compares two snapshots by their start time      *      * @param o other snapshot      * @return the value {@code 0} if snapshots were created at the same time;      *         a value less than {@code 0} if this snapshot was created before snapshot {@code o}; and      *         a value greater than {@code 0} if this snapshot was created after snapshot {@code o};      */
annotation|@
name|Override
DECL|method|compareTo
specifier|public
name|int
name|compareTo
parameter_list|(
name|Snapshot
name|o
parameter_list|)
block|{
return|return
name|Long
operator|.
name|compare
argument_list|(
name|startTime
argument_list|,
operator|(
operator|(
name|BlobStoreSnapshot
operator|)
name|o
operator|)
operator|.
name|startTime
argument_list|)
return|;
block|}
comment|/**      * BlobStoreSnapshot builder      */
DECL|class|Builder
specifier|public
specifier|static
class|class
name|Builder
block|{
DECL|field|name
specifier|private
name|String
name|name
decl_stmt|;
DECL|field|version
specifier|private
name|Version
name|version
init|=
name|Version
operator|.
name|CURRENT
decl_stmt|;
DECL|field|state
specifier|private
name|SnapshotState
name|state
init|=
name|SnapshotState
operator|.
name|IN_PROGRESS
decl_stmt|;
DECL|field|reason
specifier|private
name|String
name|reason
decl_stmt|;
DECL|field|indices
specifier|private
name|ImmutableList
argument_list|<
name|String
argument_list|>
name|indices
decl_stmt|;
DECL|field|startTime
specifier|private
name|long
name|startTime
decl_stmt|;
DECL|field|endTime
specifier|private
name|long
name|endTime
decl_stmt|;
DECL|field|totalShard
specifier|private
name|int
name|totalShard
decl_stmt|;
DECL|field|successfulShards
specifier|private
name|int
name|successfulShards
decl_stmt|;
DECL|field|shardFailures
specifier|private
name|ImmutableList
argument_list|<
name|SnapshotShardFailure
argument_list|>
name|shardFailures
init|=
name|ImmutableList
operator|.
name|of
argument_list|()
decl_stmt|;
comment|/**          * Copies data from another snapshot into the builder          *          * @param snapshot another snapshot          * @return this builder          */
DECL|method|snapshot
specifier|public
name|Builder
name|snapshot
parameter_list|(
name|BlobStoreSnapshot
name|snapshot
parameter_list|)
block|{
name|name
operator|=
name|snapshot
operator|.
name|name
argument_list|()
expr_stmt|;
name|indices
operator|=
name|snapshot
operator|.
name|indices
argument_list|()
expr_stmt|;
name|version
operator|=
name|snapshot
operator|.
name|version
argument_list|()
expr_stmt|;
name|reason
operator|=
name|snapshot
operator|.
name|reason
argument_list|()
expr_stmt|;
name|state
operator|=
name|snapshot
operator|.
name|state
argument_list|()
expr_stmt|;
name|startTime
operator|=
name|snapshot
operator|.
name|startTime
argument_list|()
expr_stmt|;
name|endTime
operator|=
name|snapshot
operator|.
name|endTime
argument_list|()
expr_stmt|;
name|totalShard
operator|=
name|snapshot
operator|.
name|totalShard
argument_list|()
expr_stmt|;
name|successfulShards
operator|=
name|snapshot
operator|.
name|successfulShards
argument_list|()
expr_stmt|;
name|shardFailures
operator|=
name|snapshot
operator|.
name|shardFailures
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets snapshot name          *          * @param name snapshot name          * @return this builder          */
DECL|method|name
specifier|public
name|Builder
name|name
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets list of indices in the snapshot          *          * @param indices list of indices          * @return this builder          */
DECL|method|indices
specifier|public
name|Builder
name|indices
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|indices
parameter_list|)
block|{
name|this
operator|.
name|indices
operator|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|indices
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets list of indices in the snapshot          *          * @param indices list of indices          * @return this builder          */
DECL|method|indices
specifier|public
name|Builder
name|indices
parameter_list|(
name|String
index|[]
name|indices
parameter_list|)
block|{
name|this
operator|.
name|indices
operator|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|indices
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets snapshot state          *          * @param state snapshot state          * @return this builder          */
DECL|method|state
specifier|public
name|Builder
name|state
parameter_list|(
name|SnapshotState
name|state
parameter_list|)
block|{
name|this
operator|.
name|state
operator|=
name|state
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets snapshot failure reason          *          * @param reason snapshot failure reason          * @return this builder          */
DECL|method|reason
specifier|public
name|Builder
name|reason
parameter_list|(
name|String
name|reason
parameter_list|)
block|{
name|this
operator|.
name|reason
operator|=
name|reason
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Marks snapshot as successful          *          * @return this builder          */
DECL|method|success
specifier|public
name|Builder
name|success
parameter_list|()
block|{
name|this
operator|.
name|state
operator|=
name|SnapshotState
operator|.
name|SUCCESS
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Marks snapshot as partially successful          *          * @return this builder          */
DECL|method|partial
specifier|public
name|Builder
name|partial
parameter_list|()
block|{
name|this
operator|.
name|state
operator|=
name|SnapshotState
operator|.
name|PARTIAL
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Marks snapshot as failed and saves failure reason          *          * @param reason failure reason          * @return this builder          */
DECL|method|failed
specifier|public
name|Builder
name|failed
parameter_list|(
name|String
name|reason
parameter_list|)
block|{
name|this
operator|.
name|state
operator|=
name|SnapshotState
operator|.
name|FAILED
expr_stmt|;
name|this
operator|.
name|reason
operator|=
name|reason
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets version of Elasticsearch that created this snapshot          *          * @param version version          * @return this builder          */
DECL|method|version
specifier|public
name|Builder
name|version
parameter_list|(
name|Version
name|version
parameter_list|)
block|{
name|this
operator|.
name|version
operator|=
name|version
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets snapshot start time          *          * @param startTime snapshot start time          * @return this builder          */
DECL|method|startTime
specifier|public
name|Builder
name|startTime
parameter_list|(
name|long
name|startTime
parameter_list|)
block|{
name|this
operator|.
name|startTime
operator|=
name|startTime
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets snapshot end time          *          * @param endTime snapshot end time          * @return this builder          */
DECL|method|endTime
specifier|public
name|Builder
name|endTime
parameter_list|(
name|long
name|endTime
parameter_list|)
block|{
name|this
operator|.
name|endTime
operator|=
name|endTime
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets total number of shards across all snapshot indices          *          * @param totalShard number of shards          * @return this builder          */
DECL|method|totalShard
specifier|public
name|Builder
name|totalShard
parameter_list|(
name|int
name|totalShard
parameter_list|)
block|{
name|this
operator|.
name|totalShard
operator|=
name|totalShard
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets total number fo shards that were successfully snapshotted          *          * @param successfulShards number of successful shards          * @return this builder          */
DECL|method|successfulShards
specifier|public
name|Builder
name|successfulShards
parameter_list|(
name|int
name|successfulShards
parameter_list|)
block|{
name|this
operator|.
name|successfulShards
operator|=
name|successfulShards
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the list of individual shard failures          *          * @param shardFailures list of shard failures          * @return this builder          */
DECL|method|shardFailures
specifier|public
name|Builder
name|shardFailures
parameter_list|(
name|ImmutableList
argument_list|<
name|SnapshotShardFailure
argument_list|>
name|shardFailures
parameter_list|)
block|{
name|this
operator|.
name|shardFailures
operator|=
name|shardFailures
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the total number of shards and the list of individual shard failures          *          * @param totalShard    number of shards          * @param shardFailures list of shard failures          * @return this builder          */
DECL|method|failures
specifier|public
name|Builder
name|failures
parameter_list|(
name|int
name|totalShard
parameter_list|,
name|ImmutableList
argument_list|<
name|SnapshotShardFailure
argument_list|>
name|shardFailures
parameter_list|)
block|{
name|this
operator|.
name|totalShard
operator|=
name|totalShard
expr_stmt|;
name|this
operator|.
name|successfulShards
operator|=
name|totalShard
operator|-
name|shardFailures
operator|.
name|size
argument_list|()
expr_stmt|;
name|this
operator|.
name|shardFailures
operator|=
name|shardFailures
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Builds new BlobStoreSnapshot          *          * @return          */
DECL|method|build
specifier|public
name|BlobStoreSnapshot
name|build
parameter_list|()
block|{
return|return
operator|new
name|BlobStoreSnapshot
argument_list|(
name|name
argument_list|,
name|indices
argument_list|,
name|state
argument_list|,
name|reason
argument_list|,
name|version
argument_list|,
name|startTime
argument_list|,
name|endTime
argument_list|,
name|totalShard
argument_list|,
name|successfulShards
argument_list|,
name|shardFailures
argument_list|)
return|;
block|}
DECL|class|Fields
specifier|static
specifier|final
class|class
name|Fields
block|{
DECL|field|SNAPSHOT
specifier|static
specifier|final
name|XContentBuilderString
name|SNAPSHOT
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"snapshot"
argument_list|)
decl_stmt|;
DECL|field|NAME
specifier|static
specifier|final
name|XContentBuilderString
name|NAME
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
DECL|field|VERSION_ID
specifier|static
specifier|final
name|XContentBuilderString
name|VERSION_ID
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"version_id"
argument_list|)
decl_stmt|;
DECL|field|INDICES
specifier|static
specifier|final
name|XContentBuilderString
name|INDICES
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"indices"
argument_list|)
decl_stmt|;
DECL|field|STATE
specifier|static
specifier|final
name|XContentBuilderString
name|STATE
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"state"
argument_list|)
decl_stmt|;
DECL|field|REASON
specifier|static
specifier|final
name|XContentBuilderString
name|REASON
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"reason"
argument_list|)
decl_stmt|;
DECL|field|START_TIME
specifier|static
specifier|final
name|XContentBuilderString
name|START_TIME
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"start_time"
argument_list|)
decl_stmt|;
DECL|field|END_TIME
specifier|static
specifier|final
name|XContentBuilderString
name|END_TIME
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"end_time"
argument_list|)
decl_stmt|;
DECL|field|TOTAL_SHARDS
specifier|static
specifier|final
name|XContentBuilderString
name|TOTAL_SHARDS
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"total_shards"
argument_list|)
decl_stmt|;
DECL|field|SUCCESSFUL_SHARDS
specifier|static
specifier|final
name|XContentBuilderString
name|SUCCESSFUL_SHARDS
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"successful_shards"
argument_list|)
decl_stmt|;
DECL|field|FAILURES
specifier|static
specifier|final
name|XContentBuilderString
name|FAILURES
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"failures"
argument_list|)
decl_stmt|;
block|}
comment|/**          * Serializes the snapshot          *          * @param snapshot snapshot to be serialized          * @param builder  XContent builder          * @param params   serialization parameters          * @throws IOException          */
DECL|method|toXContent
specifier|public
specifier|static
name|void
name|toXContent
parameter_list|(
name|BlobStoreSnapshot
name|snapshot
parameter_list|,
name|XContentBuilder
name|builder
parameter_list|,
name|ToXContent
operator|.
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|Fields
operator|.
name|SNAPSHOT
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|NAME
argument_list|,
name|snapshot
operator|.
name|name
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|VERSION_ID
argument_list|,
name|snapshot
operator|.
name|version
operator|.
name|id
argument_list|)
expr_stmt|;
name|builder
operator|.
name|startArray
argument_list|(
name|Fields
operator|.
name|INDICES
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|index
range|:
name|snapshot
operator|.
name|indices
control|)
block|{
name|builder
operator|.
name|value
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|STATE
argument_list|,
name|snapshot
operator|.
name|state
argument_list|)
expr_stmt|;
if|if
condition|(
name|snapshot
operator|.
name|reason
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|REASON
argument_list|,
name|snapshot
operator|.
name|reason
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|START_TIME
argument_list|,
name|snapshot
operator|.
name|startTime
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|END_TIME
argument_list|,
name|snapshot
operator|.
name|endTime
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|TOTAL_SHARDS
argument_list|,
name|snapshot
operator|.
name|totalShard
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|SUCCESSFUL_SHARDS
argument_list|,
name|snapshot
operator|.
name|successfulShards
argument_list|)
expr_stmt|;
name|builder
operator|.
name|startArray
argument_list|(
name|Fields
operator|.
name|FAILURES
argument_list|)
expr_stmt|;
for|for
control|(
name|SnapshotShardFailure
name|shardFailure
range|:
name|snapshot
operator|.
name|shardFailures
control|)
block|{
name|SnapshotShardFailure
operator|.
name|toXContent
argument_list|(
name|shardFailure
argument_list|,
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
comment|/**          * Parses the snapshot          *          * @param parser XContent parser          * @return snapshot          * @throws IOException          */
DECL|method|fromXContent
specifier|public
specifier|static
name|BlobStoreSnapshot
name|fromXContent
parameter_list|(
name|XContentParser
name|parser
parameter_list|)
throws|throws
name|IOException
block|{
name|Builder
name|builder
init|=
operator|new
name|Builder
argument_list|()
decl_stmt|;
name|XContentParser
operator|.
name|Token
name|token
init|=
name|parser
operator|.
name|currentToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
condition|)
block|{
name|String
name|currentFieldName
init|=
name|parser
operator|.
name|currentName
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"snapshot"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
condition|)
block|{
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
condition|)
block|{
name|currentFieldName
operator|=
name|parser
operator|.
name|currentName
argument_list|()
expr_stmt|;
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
if|if
condition|(
name|token
operator|.
name|isValue
argument_list|()
condition|)
block|{
if|if
condition|(
literal|"name"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|builder
operator|.
name|name
argument_list|(
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"state"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|builder
operator|.
name|state
argument_list|(
name|SnapshotState
operator|.
name|valueOf
argument_list|(
name|parser
operator|.
name|text
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"reason"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|builder
operator|.
name|reason
argument_list|(
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"start_time"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|builder
operator|.
name|startTime
argument_list|(
name|parser
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"end_time"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|builder
operator|.
name|endTime
argument_list|(
name|parser
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"total_shards"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|builder
operator|.
name|totalShard
argument_list|(
name|parser
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"successful_shards"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|builder
operator|.
name|successfulShards
argument_list|(
name|parser
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"version_id"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|builder
operator|.
name|version
argument_list|(
name|Version
operator|.
name|fromId
argument_list|(
name|parser
operator|.
name|intValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_ARRAY
condition|)
block|{
if|if
condition|(
literal|"indices"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|indices
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
name|parser
operator|.
name|nextToken
argument_list|()
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_ARRAY
condition|)
block|{
name|indices
operator|.
name|add
argument_list|(
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|indices
argument_list|(
name|indices
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"failures"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|ArrayList
argument_list|<
name|SnapshotShardFailure
argument_list|>
name|failures
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
name|parser
operator|.
name|nextToken
argument_list|()
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_ARRAY
condition|)
block|{
name|failures
operator|.
name|add
argument_list|(
name|SnapshotShardFailure
operator|.
name|fromXContent
argument_list|(
name|parser
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|shardFailures
argument_list|(
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|failures
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// It was probably created by newer version - ignoring
name|parser
operator|.
name|skipChildren
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
condition|)
block|{
comment|// It was probably created by newer version - ignoring
name|parser
operator|.
name|skipChildren
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

