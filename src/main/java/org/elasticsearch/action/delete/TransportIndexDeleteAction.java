begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.delete
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|delete
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionWriteResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|ActionFilters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|replication
operator|.
name|TransportIndexReplicationOperationAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|GroupShardsIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Internal transport action that broadcasts a delete request to all of the shards that belongs to an index.  * Used when routing is required but not specified within the delete request.  */
end_comment

begin_class
DECL|class|TransportIndexDeleteAction
specifier|public
class|class
name|TransportIndexDeleteAction
extends|extends
name|TransportIndexReplicationOperationAction
argument_list|<
name|IndexDeleteRequest
argument_list|,
name|IndexDeleteResponse
argument_list|,
name|ShardDeleteRequest
argument_list|,
name|ShardDeleteResponse
argument_list|>
block|{
DECL|field|ACTION_NAME
specifier|private
specifier|static
specifier|final
name|String
name|ACTION_NAME
init|=
name|DeleteAction
operator|.
name|NAME
operator|+
literal|"[index]"
decl_stmt|;
annotation|@
name|Inject
DECL|method|TransportIndexDeleteAction
specifier|public
name|TransportIndexDeleteAction
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|ClusterService
name|clusterService
parameter_list|,
name|ThreadPool
name|threadPool
parameter_list|,
name|TransportShardDeleteAction
name|deleteAction
parameter_list|,
name|ActionFilters
name|actionFilters
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|,
name|ACTION_NAME
argument_list|,
name|clusterService
argument_list|,
name|threadPool
argument_list|,
name|deleteAction
argument_list|,
name|actionFilters
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|newResponseInstance
specifier|protected
name|IndexDeleteResponse
name|newResponseInstance
parameter_list|(
name|IndexDeleteRequest
name|request
parameter_list|,
name|List
argument_list|<
name|ShardDeleteResponse
argument_list|>
name|shardDeleteResponses
parameter_list|,
name|ActionWriteResponse
operator|.
name|ShardInfo
name|shardInfo
parameter_list|)
block|{
name|IndexDeleteResponse
name|indexDeleteResponse
init|=
operator|new
name|IndexDeleteResponse
argument_list|(
name|request
operator|.
name|index
argument_list|()
argument_list|,
name|shardDeleteResponses
operator|.
name|toArray
argument_list|(
operator|new
name|ShardDeleteResponse
index|[
name|shardDeleteResponses
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|indexDeleteResponse
operator|.
name|setShardInfo
argument_list|(
name|shardInfo
argument_list|)
expr_stmt|;
return|return
name|indexDeleteResponse
return|;
block|}
annotation|@
name|Override
DECL|method|shards
specifier|protected
name|GroupShardsIterator
name|shards
parameter_list|(
name|IndexDeleteRequest
name|request
parameter_list|)
block|{
return|return
name|clusterService
operator|.
name|operationRouting
argument_list|()
operator|.
name|broadcastDeleteShards
argument_list|(
name|clusterService
operator|.
name|state
argument_list|()
argument_list|,
name|request
operator|.
name|index
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|newShardRequestInstance
specifier|protected
name|ShardDeleteRequest
name|newShardRequestInstance
parameter_list|(
name|IndexDeleteRequest
name|request
parameter_list|,
name|int
name|shardId
parameter_list|)
block|{
return|return
operator|new
name|ShardDeleteRequest
argument_list|(
name|request
argument_list|,
name|shardId
argument_list|)
return|;
block|}
block|}
end_class

end_unit

