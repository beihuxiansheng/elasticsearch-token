begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.support
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Holds the action filters injected through plugins, properly sorted by {@link org.elasticsearch.action.support.ActionFilter#order()}  */
end_comment

begin_class
DECL|class|ActionFilters
specifier|public
class|class
name|ActionFilters
block|{
DECL|field|filters
specifier|private
specifier|final
name|ActionFilter
index|[]
name|filters
decl_stmt|;
annotation|@
name|Inject
DECL|method|ActionFilters
specifier|public
name|ActionFilters
parameter_list|(
name|Set
argument_list|<
name|ActionFilter
argument_list|>
name|actionFilters
parameter_list|)
block|{
name|this
operator|.
name|filters
operator|=
name|actionFilters
operator|.
name|toArray
argument_list|(
operator|new
name|ActionFilter
index|[
name|actionFilters
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|filters
argument_list|,
operator|new
name|Comparator
argument_list|<
name|ActionFilter
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|ActionFilter
name|o1
parameter_list|,
name|ActionFilter
name|o2
parameter_list|)
block|{
return|return
name|Integer
operator|.
name|compare
argument_list|(
name|o1
operator|.
name|order
argument_list|()
argument_list|,
name|o2
operator|.
name|order
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns the action filters that have been injected      */
DECL|method|filters
specifier|public
name|ActionFilter
index|[]
name|filters
parameter_list|()
block|{
return|return
name|filters
return|;
block|}
block|}
end_class

end_unit

