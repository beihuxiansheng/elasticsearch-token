begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.support.replication
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|replication
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchIllegalStateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ExceptionsHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|ActionFilters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|IndicesOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|TransportAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|TransportActions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterStateObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|action
operator|.
name|shard
operator|.
name|ShardStateAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|block
operator|.
name|ClusterBlockException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|block
operator|.
name|ClusterBlockLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRouting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRoutingState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|AbstractRunnable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|DocumentAlreadyExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|VersionConflictEngineException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|service
operator|.
name|IndexService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|service
operator|.
name|IndexShard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|IndicesService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|node
operator|.
name|NodeClosedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
DECL|class|TransportShardReplicationOperationAction
specifier|public
specifier|abstract
class|class
name|TransportShardReplicationOperationAction
parameter_list|<
name|Request
extends|extends
name|ShardReplicationOperationRequest
parameter_list|,
name|ReplicaRequest
extends|extends
name|ShardReplicationOperationRequest
parameter_list|,
name|Response
extends|extends
name|ActionResponse
parameter_list|>
extends|extends
name|TransportAction
argument_list|<
name|Request
argument_list|,
name|Response
argument_list|>
block|{
DECL|field|transportService
specifier|protected
specifier|final
name|TransportService
name|transportService
decl_stmt|;
DECL|field|clusterService
specifier|protected
specifier|final
name|ClusterService
name|clusterService
decl_stmt|;
DECL|field|indicesService
specifier|protected
specifier|final
name|IndicesService
name|indicesService
decl_stmt|;
DECL|field|shardStateAction
specifier|protected
specifier|final
name|ShardStateAction
name|shardStateAction
decl_stmt|;
DECL|field|defaultReplicationType
specifier|protected
specifier|final
name|ReplicationType
name|defaultReplicationType
decl_stmt|;
DECL|field|defaultWriteConsistencyLevel
specifier|protected
specifier|final
name|WriteConsistencyLevel
name|defaultWriteConsistencyLevel
decl_stmt|;
DECL|field|transportOptions
specifier|protected
specifier|final
name|TransportRequestOptions
name|transportOptions
decl_stmt|;
DECL|field|transportReplicaAction
specifier|final
name|String
name|transportReplicaAction
decl_stmt|;
DECL|field|executor
specifier|final
name|String
name|executor
decl_stmt|;
DECL|field|checkWriteConsistency
specifier|final
name|boolean
name|checkWriteConsistency
decl_stmt|;
DECL|method|TransportShardReplicationOperationAction
specifier|protected
name|TransportShardReplicationOperationAction
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|String
name|actionName
parameter_list|,
name|TransportService
name|transportService
parameter_list|,
name|ClusterService
name|clusterService
parameter_list|,
name|IndicesService
name|indicesService
parameter_list|,
name|ThreadPool
name|threadPool
parameter_list|,
name|ShardStateAction
name|shardStateAction
parameter_list|,
name|ActionFilters
name|actionFilters
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|,
name|actionName
argument_list|,
name|threadPool
argument_list|,
name|actionFilters
argument_list|)
expr_stmt|;
name|this
operator|.
name|transportService
operator|=
name|transportService
expr_stmt|;
name|this
operator|.
name|clusterService
operator|=
name|clusterService
expr_stmt|;
name|this
operator|.
name|indicesService
operator|=
name|indicesService
expr_stmt|;
name|this
operator|.
name|shardStateAction
operator|=
name|shardStateAction
expr_stmt|;
name|this
operator|.
name|transportReplicaAction
operator|=
name|actionName
operator|+
literal|"[r]"
expr_stmt|;
name|this
operator|.
name|executor
operator|=
name|executor
argument_list|()
expr_stmt|;
name|this
operator|.
name|checkWriteConsistency
operator|=
name|checkWriteConsistency
argument_list|()
expr_stmt|;
name|transportService
operator|.
name|registerHandler
argument_list|(
name|actionName
argument_list|,
operator|new
name|OperationTransportHandler
argument_list|()
argument_list|)
expr_stmt|;
name|transportService
operator|.
name|registerHandler
argument_list|(
name|transportReplicaAction
argument_list|,
operator|new
name|ReplicaOperationTransportHandler
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|transportOptions
operator|=
name|transportOptions
argument_list|()
expr_stmt|;
name|this
operator|.
name|defaultReplicationType
operator|=
name|ReplicationType
operator|.
name|fromString
argument_list|(
name|settings
operator|.
name|get
argument_list|(
literal|"action.replication_type"
argument_list|,
literal|"sync"
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|defaultWriteConsistencyLevel
operator|=
name|WriteConsistencyLevel
operator|.
name|fromString
argument_list|(
name|settings
operator|.
name|get
argument_list|(
literal|"action.write_consistency"
argument_list|,
literal|"quorum"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doExecute
specifier|protected
name|void
name|doExecute
parameter_list|(
name|Request
name|request
parameter_list|,
name|ActionListener
argument_list|<
name|Response
argument_list|>
name|listener
parameter_list|)
block|{
operator|new
name|AsyncShardOperationAction
argument_list|(
name|request
argument_list|,
name|listener
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
DECL|method|newRequestInstance
specifier|protected
specifier|abstract
name|Request
name|newRequestInstance
parameter_list|()
function_decl|;
DECL|method|newReplicaRequestInstance
specifier|protected
specifier|abstract
name|ReplicaRequest
name|newReplicaRequestInstance
parameter_list|()
function_decl|;
DECL|method|newResponseInstance
specifier|protected
specifier|abstract
name|Response
name|newResponseInstance
parameter_list|()
function_decl|;
DECL|method|executor
specifier|protected
specifier|abstract
name|String
name|executor
parameter_list|()
function_decl|;
DECL|method|shardOperationOnPrimary
specifier|protected
specifier|abstract
name|PrimaryResponse
argument_list|<
name|Response
argument_list|,
name|ReplicaRequest
argument_list|>
name|shardOperationOnPrimary
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|PrimaryOperationRequest
name|shardRequest
parameter_list|)
function_decl|;
DECL|method|shardOperationOnReplica
specifier|protected
specifier|abstract
name|void
name|shardOperationOnReplica
parameter_list|(
name|ReplicaOperationRequest
name|shardRequest
parameter_list|)
function_decl|;
comment|/**      * Called once replica operations have been dispatched on the      */
DECL|method|postPrimaryOperation
specifier|protected
name|void
name|postPrimaryOperation
parameter_list|(
name|InternalRequest
name|request
parameter_list|,
name|PrimaryResponse
argument_list|<
name|Response
argument_list|,
name|ReplicaRequest
argument_list|>
name|response
parameter_list|)
block|{      }
DECL|method|shards
specifier|protected
specifier|abstract
name|ShardIterator
name|shards
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|InternalRequest
name|request
parameter_list|)
throws|throws
name|ElasticsearchException
function_decl|;
DECL|method|checkWriteConsistency
specifier|protected
specifier|abstract
name|boolean
name|checkWriteConsistency
parameter_list|()
function_decl|;
DECL|method|checkGlobalBlock
specifier|protected
name|ClusterBlockException
name|checkGlobalBlock
parameter_list|(
name|ClusterState
name|state
parameter_list|)
block|{
return|return
name|state
operator|.
name|blocks
argument_list|()
operator|.
name|globalBlockedException
argument_list|(
name|ClusterBlockLevel
operator|.
name|WRITE
argument_list|)
return|;
block|}
DECL|method|checkRequestBlock
specifier|protected
name|ClusterBlockException
name|checkRequestBlock
parameter_list|(
name|ClusterState
name|state
parameter_list|,
name|InternalRequest
name|request
parameter_list|)
block|{
return|return
name|state
operator|.
name|blocks
argument_list|()
operator|.
name|indexBlockedException
argument_list|(
name|ClusterBlockLevel
operator|.
name|WRITE
argument_list|,
name|request
operator|.
name|concreteIndex
argument_list|()
argument_list|)
return|;
block|}
DECL|method|resolveIndex
specifier|protected
specifier|abstract
name|boolean
name|resolveIndex
parameter_list|()
function_decl|;
comment|/**      * Resolves the request, by default doing nothing. If the resolve      * means a different execution, then return false here to indicate not to continue and execute this request.      */
DECL|method|resolveRequest
specifier|protected
name|boolean
name|resolveRequest
parameter_list|(
name|ClusterState
name|state
parameter_list|,
name|InternalRequest
name|request
parameter_list|,
name|ActionListener
argument_list|<
name|Response
argument_list|>
name|listener
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
DECL|method|transportOptions
specifier|protected
name|TransportRequestOptions
name|transportOptions
parameter_list|()
block|{
return|return
name|TransportRequestOptions
operator|.
name|EMPTY
return|;
block|}
comment|/**      * Should the operations be performed on the replicas as well. Defaults to<tt>false</tt> meaning operations      * will be executed on the replica.      */
DECL|method|ignoreReplicas
specifier|protected
name|boolean
name|ignoreReplicas
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
DECL|method|retryPrimaryException
specifier|protected
name|boolean
name|retryPrimaryException
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
return|return
name|TransportActions
operator|.
name|isShardNotAvailableException
argument_list|(
name|e
argument_list|)
return|;
block|}
comment|/**      * Should an exception be ignored when the operation is performed on the replica.      */
DECL|method|ignoreReplicaException
specifier|protected
name|boolean
name|ignoreReplicaException
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
if|if
condition|(
name|TransportActions
operator|.
name|isShardNotAvailableException
argument_list|(
name|e
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// on version conflict or document missing, it means
comment|// that a new change has crept into the replica, and it's fine
if|if
condition|(
name|isConflictException
argument_list|(
name|e
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|isConflictException
specifier|protected
name|boolean
name|isConflictException
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|Throwable
name|cause
init|=
name|ExceptionsHelper
operator|.
name|unwrapCause
argument_list|(
name|e
argument_list|)
decl_stmt|;
comment|// on version conflict or document missing, it means
comment|// that a new change has crept into the replica, and it's fine
if|if
condition|(
name|cause
operator|instanceof
name|VersionConflictEngineException
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|cause
operator|instanceof
name|DocumentAlreadyExistsException
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|class|OperationTransportHandler
class|class
name|OperationTransportHandler
extends|extends
name|BaseTransportRequestHandler
argument_list|<
name|Request
argument_list|>
block|{
annotation|@
name|Override
DECL|method|newInstance
specifier|public
name|Request
name|newInstance
parameter_list|()
block|{
return|return
name|newRequestInstance
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|executor
specifier|public
name|String
name|executor
parameter_list|()
block|{
return|return
name|ThreadPool
operator|.
name|Names
operator|.
name|SAME
return|;
block|}
annotation|@
name|Override
DECL|method|messageReceived
specifier|public
name|void
name|messageReceived
parameter_list|(
specifier|final
name|Request
name|request
parameter_list|,
specifier|final
name|TransportChannel
name|channel
parameter_list|)
throws|throws
name|Exception
block|{
comment|// no need to have a threaded listener since we just send back a response
name|request
operator|.
name|listenerThreaded
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// if we have a local operation, execute it on a thread since we don't spawn
name|request
operator|.
name|operationThreaded
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|execute
argument_list|(
name|request
argument_list|,
operator|new
name|ActionListener
argument_list|<
name|Response
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|Response
name|result
parameter_list|)
block|{
try|try
block|{
name|channel
operator|.
name|sendResponse
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|onFailure
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
try|try
block|{
name|channel
operator|.
name|sendResponse
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e1
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Failed to send response for "
operator|+
name|actionName
argument_list|,
name|e1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|ReplicaOperationTransportHandler
class|class
name|ReplicaOperationTransportHandler
extends|extends
name|BaseTransportRequestHandler
argument_list|<
name|ReplicaOperationRequest
argument_list|>
block|{
annotation|@
name|Override
DECL|method|newInstance
specifier|public
name|ReplicaOperationRequest
name|newInstance
parameter_list|()
block|{
return|return
operator|new
name|ReplicaOperationRequest
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|executor
specifier|public
name|String
name|executor
parameter_list|()
block|{
return|return
name|executor
return|;
block|}
comment|// we must never reject on because of thread pool capacity on replicas
annotation|@
name|Override
DECL|method|isForceExecution
specifier|public
name|boolean
name|isForceExecution
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|messageReceived
specifier|public
name|void
name|messageReceived
parameter_list|(
specifier|final
name|ReplicaOperationRequest
name|request
parameter_list|,
specifier|final
name|TransportChannel
name|channel
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|shardOperationOnReplica
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failReplicaIfNeeded
argument_list|(
name|request
operator|.
name|shardId
operator|.
name|getIndex
argument_list|()
argument_list|,
name|request
operator|.
name|shardId
operator|.
name|id
argument_list|()
argument_list|,
name|t
argument_list|)
expr_stmt|;
throw|throw
name|t
throw|;
block|}
name|channel
operator|.
name|sendResponse
argument_list|(
name|TransportResponse
operator|.
name|Empty
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|PrimaryOperationRequest
specifier|protected
class|class
name|PrimaryOperationRequest
block|{
DECL|field|shardId
specifier|public
name|ShardId
name|shardId
decl_stmt|;
DECL|field|request
specifier|public
name|Request
name|request
decl_stmt|;
DECL|method|PrimaryOperationRequest
specifier|public
name|PrimaryOperationRequest
parameter_list|(
name|int
name|shardId
parameter_list|,
name|String
name|index
parameter_list|,
name|Request
name|request
parameter_list|)
block|{
name|this
operator|.
name|shardId
operator|=
operator|new
name|ShardId
argument_list|(
name|index
argument_list|,
name|shardId
argument_list|)
expr_stmt|;
name|this
operator|.
name|request
operator|=
name|request
expr_stmt|;
block|}
block|}
DECL|class|ReplicaOperationRequest
specifier|protected
class|class
name|ReplicaOperationRequest
extends|extends
name|TransportRequest
implements|implements
name|IndicesRequest
block|{
DECL|field|shardId
specifier|public
name|ShardId
name|shardId
decl_stmt|;
DECL|field|request
specifier|public
name|ReplicaRequest
name|request
decl_stmt|;
DECL|method|ReplicaOperationRequest
name|ReplicaOperationRequest
parameter_list|()
block|{         }
DECL|method|ReplicaOperationRequest
name|ReplicaOperationRequest
parameter_list|(
name|ShardId
name|shardId
parameter_list|,
name|ReplicaRequest
name|request
parameter_list|)
block|{
name|super
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|this
operator|.
name|shardId
operator|=
name|shardId
expr_stmt|;
name|this
operator|.
name|request
operator|=
name|request
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|indices
specifier|public
name|String
index|[]
name|indices
parameter_list|()
block|{
return|return
name|request
operator|.
name|indices
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|indicesOptions
specifier|public
name|IndicesOptions
name|indicesOptions
parameter_list|()
block|{
return|return
name|request
operator|.
name|indicesOptions
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|int
name|shard
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|in
operator|.
name|getVersion
argument_list|()
operator|.
name|onOrAfter
argument_list|(
name|Version
operator|.
name|V_1_4_0_Beta1
argument_list|)
condition|)
block|{
name|shardId
operator|=
name|ShardId
operator|.
name|readShardId
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|shard
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
block|}
name|request
operator|=
name|newReplicaRequestInstance
argument_list|()
expr_stmt|;
name|request
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
if|if
condition|(
name|in
operator|.
name|getVersion
argument_list|()
operator|.
name|before
argument_list|(
name|Version
operator|.
name|V_1_4_0_Beta1
argument_list|)
condition|)
block|{
assert|assert
name|shard
operator|>=
literal|0
assert|;
comment|//older nodes will send the concrete index as part of the request
name|shardId
operator|=
operator|new
name|ShardId
argument_list|(
name|request
operator|.
name|index
argument_list|()
argument_list|,
name|shard
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
if|if
condition|(
name|out
operator|.
name|getVersion
argument_list|()
operator|.
name|onOrAfter
argument_list|(
name|Version
operator|.
name|V_1_4_0_Beta1
argument_list|)
condition|)
block|{
name|shardId
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeVInt
argument_list|(
name|shardId
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
comment|//older nodes expect the concrete index as part of the request
name|request
operator|.
name|index
argument_list|(
name|shardId
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|request
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|AsyncShardOperationAction
specifier|protected
class|class
name|AsyncShardOperationAction
block|{
DECL|field|listener
specifier|private
specifier|final
name|ActionListener
argument_list|<
name|Response
argument_list|>
name|listener
decl_stmt|;
DECL|field|internalRequest
specifier|private
specifier|final
name|InternalRequest
name|internalRequest
decl_stmt|;
DECL|field|shardIt
specifier|private
specifier|volatile
name|ShardIterator
name|shardIt
decl_stmt|;
DECL|field|primaryOperationStarted
specifier|private
specifier|final
name|AtomicBoolean
name|primaryOperationStarted
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
DECL|field|replicationType
specifier|private
specifier|final
name|ReplicationType
name|replicationType
decl_stmt|;
DECL|field|observer
specifier|private
specifier|volatile
name|ClusterStateObserver
name|observer
decl_stmt|;
DECL|method|AsyncShardOperationAction
name|AsyncShardOperationAction
parameter_list|(
name|Request
name|request
parameter_list|,
name|ActionListener
argument_list|<
name|Response
argument_list|>
name|listener
parameter_list|)
block|{
name|this
operator|.
name|internalRequest
operator|=
operator|new
name|InternalRequest
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|this
operator|.
name|listener
operator|=
name|listener
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|replicationType
argument_list|()
operator|!=
name|ReplicationType
operator|.
name|DEFAULT
condition|)
block|{
name|replicationType
operator|=
name|request
operator|.
name|replicationType
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|replicationType
operator|=
name|defaultReplicationType
expr_stmt|;
block|}
block|}
DECL|method|start
specifier|public
name|void
name|start
parameter_list|()
block|{
name|this
operator|.
name|observer
operator|=
operator|new
name|ClusterStateObserver
argument_list|(
name|clusterService
argument_list|,
name|internalRequest
operator|.
name|request
argument_list|()
operator|.
name|timeout
argument_list|()
argument_list|,
name|logger
argument_list|)
expr_stmt|;
name|doStart
argument_list|()
expr_stmt|;
block|}
comment|/**          * Returns<tt>true</tt> if the action starting to be performed on the primary (or is done).          */
DECL|method|doStart
specifier|protected
name|boolean
name|doStart
parameter_list|()
throws|throws
name|ElasticsearchException
block|{
try|try
block|{
name|ClusterBlockException
name|blockException
init|=
name|checkGlobalBlock
argument_list|(
name|observer
operator|.
name|observedState
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|blockException
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|blockException
operator|.
name|retryable
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"cluster is blocked ({}), scheduling a retry"
argument_list|,
name|blockException
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|retry
argument_list|(
name|blockException
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
else|else
block|{
throw|throw
name|blockException
throw|;
block|}
block|}
if|if
condition|(
name|resolveIndex
argument_list|()
condition|)
block|{
name|internalRequest
operator|.
name|concreteIndex
argument_list|(
name|observer
operator|.
name|observedState
argument_list|()
operator|.
name|metaData
argument_list|()
operator|.
name|concreteSingleIndex
argument_list|(
name|internalRequest
operator|.
name|request
argument_list|()
operator|.
name|index
argument_list|()
argument_list|,
name|internalRequest
operator|.
name|request
argument_list|()
operator|.
name|indicesOptions
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|internalRequest
operator|.
name|concreteIndex
argument_list|(
name|internalRequest
operator|.
name|request
argument_list|()
operator|.
name|index
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// check if we need to execute, and if not, return
if|if
condition|(
operator|!
name|resolveRequest
argument_list|(
name|observer
operator|.
name|observedState
argument_list|()
argument_list|,
name|internalRequest
argument_list|,
name|listener
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
name|blockException
operator|=
name|checkRequestBlock
argument_list|(
name|observer
operator|.
name|observedState
argument_list|()
argument_list|,
name|internalRequest
argument_list|)
expr_stmt|;
if|if
condition|(
name|blockException
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|blockException
operator|.
name|retryable
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"cluster is blocked ({}), scheduling a retry"
argument_list|,
name|blockException
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|retry
argument_list|(
name|blockException
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
else|else
block|{
throw|throw
name|blockException
throw|;
block|}
block|}
name|shardIt
operator|=
name|shards
argument_list|(
name|observer
operator|.
name|observedState
argument_list|()
argument_list|,
name|internalRequest
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|listener
operator|.
name|onFailure
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|// no shardIt, might be in the case between index gateway recovery and shardIt initialization
if|if
condition|(
name|shardIt
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"no shard instances known for shard [{}], scheduling a retry"
argument_list|,
name|shardIt
operator|.
name|shardId
argument_list|()
argument_list|)
expr_stmt|;
name|retry
argument_list|(
literal|null
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|boolean
name|foundPrimary
init|=
literal|false
decl_stmt|;
name|ShardRouting
name|shardX
decl_stmt|;
while|while
condition|(
operator|(
name|shardX
operator|=
name|shardIt
operator|.
name|nextOrNull
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
specifier|final
name|ShardRouting
name|shard
init|=
name|shardX
decl_stmt|;
comment|// we only deal with primary shardIt here...
if|if
condition|(
operator|!
name|shard
operator|.
name|primary
argument_list|()
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
operator|!
name|shard
operator|.
name|active
argument_list|()
operator|||
operator|!
name|observer
operator|.
name|observedState
argument_list|()
operator|.
name|nodes
argument_list|()
operator|.
name|nodeExists
argument_list|(
name|shard
operator|.
name|currentNodeId
argument_list|()
argument_list|)
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"primary shard [{}] is not yet active or we do not know the node it is assigned to [{}], scheduling a retry."
argument_list|,
name|shard
operator|.
name|shardId
argument_list|()
argument_list|,
name|shard
operator|.
name|currentNodeId
argument_list|()
argument_list|)
expr_stmt|;
name|retry
argument_list|(
literal|null
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// check here for consistency
if|if
condition|(
name|checkWriteConsistency
condition|)
block|{
name|WriteConsistencyLevel
name|consistencyLevel
init|=
name|defaultWriteConsistencyLevel
decl_stmt|;
if|if
condition|(
name|internalRequest
operator|.
name|request
argument_list|()
operator|.
name|consistencyLevel
argument_list|()
operator|!=
name|WriteConsistencyLevel
operator|.
name|DEFAULT
condition|)
block|{
name|consistencyLevel
operator|=
name|internalRequest
operator|.
name|request
argument_list|()
operator|.
name|consistencyLevel
argument_list|()
expr_stmt|;
block|}
name|int
name|requiredNumber
init|=
literal|1
decl_stmt|;
if|if
condition|(
name|consistencyLevel
operator|==
name|WriteConsistencyLevel
operator|.
name|QUORUM
operator|&&
name|shardIt
operator|.
name|size
argument_list|()
operator|>
literal|2
condition|)
block|{
comment|// only for more than 2 in the number of shardIt it makes sense, otherwise its 1 shard with 1 replica, quorum is 1 (which is what it is initialized to)
name|requiredNumber
operator|=
operator|(
name|shardIt
operator|.
name|size
argument_list|()
operator|/
literal|2
operator|)
operator|+
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|consistencyLevel
operator|==
name|WriteConsistencyLevel
operator|.
name|ALL
condition|)
block|{
name|requiredNumber
operator|=
name|shardIt
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|shardIt
operator|.
name|sizeActive
argument_list|()
operator|<
name|requiredNumber
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"not enough active copies of shard [{}] to meet write consistency of [{}] (have {}, needed {}), scheduling a retry."
argument_list|,
name|shard
operator|.
name|shardId
argument_list|()
argument_list|,
name|consistencyLevel
argument_list|,
name|shardIt
operator|.
name|sizeActive
argument_list|()
argument_list|,
name|requiredNumber
argument_list|)
expr_stmt|;
name|retry
argument_list|(
literal|null
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
if|if
condition|(
operator|!
name|primaryOperationStarted
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
name|foundPrimary
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|shard
operator|.
name|currentNodeId
argument_list|()
operator|.
name|equals
argument_list|(
name|observer
operator|.
name|observedState
argument_list|()
operator|.
name|nodes
argument_list|()
operator|.
name|localNodeId
argument_list|()
argument_list|)
condition|)
block|{
try|try
block|{
if|if
condition|(
name|internalRequest
operator|.
name|request
argument_list|()
operator|.
name|operationThreaded
argument_list|()
condition|)
block|{
name|internalRequest
operator|.
name|request
argument_list|()
operator|.
name|beforeLocalFork
argument_list|()
expr_stmt|;
name|threadPool
operator|.
name|executor
argument_list|(
name|executor
argument_list|)
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|performOnPrimary
argument_list|(
name|shard
operator|.
name|id
argument_list|()
argument_list|,
name|shard
argument_list|,
name|observer
operator|.
name|observedState
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|listener
operator|.
name|onFailure
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|performOnPrimary
argument_list|(
name|shard
operator|.
name|id
argument_list|()
argument_list|,
name|shard
argument_list|,
name|observer
operator|.
name|observedState
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|listener
operator|.
name|onFailure
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|DiscoveryNode
name|node
init|=
name|observer
operator|.
name|observedState
argument_list|()
operator|.
name|nodes
argument_list|()
operator|.
name|get
argument_list|(
name|shard
operator|.
name|currentNodeId
argument_list|()
argument_list|)
decl_stmt|;
name|transportService
operator|.
name|sendRequest
argument_list|(
name|node
argument_list|,
name|actionName
argument_list|,
name|internalRequest
operator|.
name|request
argument_list|()
argument_list|,
name|transportOptions
argument_list|,
operator|new
name|BaseTransportResponseHandler
argument_list|<
name|Response
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Response
name|newInstance
parameter_list|()
block|{
return|return
name|newResponseInstance
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|executor
parameter_list|()
block|{
return|return
name|ThreadPool
operator|.
name|Names
operator|.
name|SAME
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleResponse
parameter_list|(
name|Response
name|response
parameter_list|)
block|{
name|listener
operator|.
name|onResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleException
parameter_list|(
name|TransportException
name|exp
parameter_list|)
block|{
comment|// if we got disconnected from the node, or the node / shard is not in the right state (being closed)
if|if
condition|(
name|exp
operator|.
name|unwrapCause
argument_list|()
operator|instanceof
name|ConnectTransportException
operator|||
name|exp
operator|.
name|unwrapCause
argument_list|()
operator|instanceof
name|NodeClosedException
operator|||
name|retryPrimaryException
argument_list|(
name|exp
argument_list|)
condition|)
block|{
name|primaryOperationStarted
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// we already marked it as started when we executed it (removed the listener) so pass false
comment|// to re-add to the cluster listener
name|logger
operator|.
name|trace
argument_list|(
literal|"received an error from node the primary was assigned to ({}), scheduling a retry"
argument_list|,
name|exp
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|retry
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|listener
operator|.
name|onFailure
argument_list|(
name|exp
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
comment|// we won't find a primary if there are no shards in the shard iterator, retry...
if|if
condition|(
operator|!
name|foundPrimary
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"couldn't find a eligible primary shard, scheduling for retry."
argument_list|)
expr_stmt|;
name|retry
argument_list|(
literal|null
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|retry
name|void
name|retry
parameter_list|(
annotation|@
name|Nullable
specifier|final
name|Throwable
name|failure
parameter_list|)
block|{
if|if
condition|(
name|observer
operator|.
name|isTimedOut
argument_list|()
condition|)
block|{
comment|// we running as a last attempt after a timeout has happened. don't retry
return|return;
block|}
comment|// make it threaded operation so we fork on the discovery listener thread
name|internalRequest
operator|.
name|request
argument_list|()
operator|.
name|beforeLocalFork
argument_list|()
expr_stmt|;
name|internalRequest
operator|.
name|request
argument_list|()
operator|.
name|operationThreaded
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|observer
operator|.
name|waitForNextChange
argument_list|(
operator|new
name|ClusterStateObserver
operator|.
name|Listener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onNewClusterState
parameter_list|(
name|ClusterState
name|state
parameter_list|)
block|{
name|doStart
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onClusterServiceClose
parameter_list|()
block|{
name|listener
operator|.
name|onFailure
argument_list|(
operator|new
name|NodeClosedException
argument_list|(
name|clusterService
operator|.
name|localNode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onTimeout
parameter_list|(
name|TimeValue
name|timeout
parameter_list|)
block|{
if|if
condition|(
name|doStart
argument_list|()
condition|)
block|{
return|return;
block|}
name|raiseTimeoutFailure
argument_list|(
name|timeout
argument_list|,
name|failure
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|raiseTimeoutFailure
name|void
name|raiseTimeoutFailure
parameter_list|(
name|TimeValue
name|timeout
parameter_list|,
annotation|@
name|Nullable
name|Throwable
name|failure
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|shardIt
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
operator|new
name|UnavailableShardsException
argument_list|(
literal|null
argument_list|,
literal|"no available shards: Timeout waiting for ["
operator|+
name|timeout
operator|+
literal|"], request: "
operator|+
name|internalRequest
operator|.
name|request
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|failure
operator|=
operator|new
name|UnavailableShardsException
argument_list|(
name|shardIt
operator|.
name|shardId
argument_list|()
argument_list|,
literal|"["
operator|+
name|shardIt
operator|.
name|size
argument_list|()
operator|+
literal|"] shardIt, ["
operator|+
name|shardIt
operator|.
name|sizeActive
argument_list|()
operator|+
literal|"] active : Timeout waiting for ["
operator|+
name|timeout
operator|+
literal|"], request: "
operator|+
name|internalRequest
operator|.
name|request
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|listener
operator|.
name|onFailure
argument_list|(
name|failure
argument_list|)
expr_stmt|;
block|}
DECL|method|performOnPrimary
name|void
name|performOnPrimary
parameter_list|(
name|int
name|primaryShardId
parameter_list|,
specifier|final
name|ShardRouting
name|shard
parameter_list|,
name|ClusterState
name|clusterState
parameter_list|)
block|{
try|try
block|{
name|PrimaryResponse
argument_list|<
name|Response
argument_list|,
name|ReplicaRequest
argument_list|>
name|response
init|=
name|shardOperationOnPrimary
argument_list|(
name|clusterState
argument_list|,
operator|new
name|PrimaryOperationRequest
argument_list|(
name|primaryShardId
argument_list|,
name|internalRequest
operator|.
name|concreteIndex
argument_list|()
argument_list|,
name|internalRequest
operator|.
name|request
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|performReplicas
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|internalRequest
operator|.
name|request
operator|.
name|setCanHaveDuplicates
argument_list|()
expr_stmt|;
comment|// shard has not been allocated yet, retry it here
if|if
condition|(
name|retryPrimaryException
argument_list|(
name|e
argument_list|)
condition|)
block|{
name|primaryOperationStarted
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|logger
operator|.
name|trace
argument_list|(
literal|"had an error while performing operation on primary ({}), scheduling a retry."
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|retry
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|e
operator|instanceof
name|ElasticsearchException
operator|&&
operator|(
operator|(
name|ElasticsearchException
operator|)
name|e
operator|)
operator|.
name|status
argument_list|()
operator|==
name|RestStatus
operator|.
name|CONFLICT
condition|)
block|{
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
name|shard
operator|.
name|shortSummary
argument_list|()
operator|+
literal|": Failed to execute ["
operator|+
name|internalRequest
operator|.
name|request
argument_list|()
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|logger
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
name|shard
operator|.
name|shortSummary
argument_list|()
operator|+
literal|": Failed to execute ["
operator|+
name|internalRequest
operator|.
name|request
argument_list|()
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|listener
operator|.
name|onFailure
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|performReplicas
name|void
name|performReplicas
parameter_list|(
specifier|final
name|PrimaryResponse
argument_list|<
name|Response
argument_list|,
name|ReplicaRequest
argument_list|>
name|response
parameter_list|)
block|{
if|if
condition|(
name|ignoreReplicas
argument_list|()
condition|)
block|{
name|postPrimaryOperation
argument_list|(
name|internalRequest
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|listener
operator|.
name|onResponse
argument_list|(
name|response
operator|.
name|response
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|ShardRouting
name|shard
decl_stmt|;
comment|// we double check on the state, if it got changed we need to make sure we take the latest one cause
comment|// maybe a replica shard started its recovery process and we need to apply it there...
comment|// we also need to make sure if the new state has a new primary shard (that we indexed to before) started
comment|// and assigned to another node (while the indexing happened). In that case, we want to apply it on the
comment|// new primary shard as well...
name|ClusterState
name|newState
init|=
name|clusterService
operator|.
name|state
argument_list|()
decl_stmt|;
name|ShardRouting
name|newPrimaryShard
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|observer
operator|.
name|observedState
argument_list|()
operator|!=
name|newState
condition|)
block|{
name|shardIt
operator|.
name|reset
argument_list|()
expr_stmt|;
name|ShardRouting
name|originalPrimaryShard
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|shard
operator|=
name|shardIt
operator|.
name|nextOrNull
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|shard
operator|.
name|primary
argument_list|()
condition|)
block|{
name|originalPrimaryShard
operator|=
name|shard
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|originalPrimaryShard
operator|==
literal|null
operator|||
operator|!
name|originalPrimaryShard
operator|.
name|active
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ElasticsearchIllegalStateException
argument_list|(
literal|"unexpected state, failed to find primary shard on an index operation that succeeded"
argument_list|)
throw|;
block|}
name|observer
operator|.
name|reset
argument_list|(
name|newState
argument_list|)
expr_stmt|;
name|shardIt
operator|=
name|shards
argument_list|(
name|newState
argument_list|,
name|internalRequest
argument_list|)
expr_stmt|;
while|while
condition|(
operator|(
name|shard
operator|=
name|shardIt
operator|.
name|nextOrNull
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|shard
operator|.
name|primary
argument_list|()
condition|)
block|{
if|if
condition|(
name|originalPrimaryShard
operator|.
name|currentNodeId
argument_list|()
operator|.
name|equals
argument_list|(
name|shard
operator|.
name|currentNodeId
argument_list|()
argument_list|)
condition|)
block|{
name|newPrimaryShard
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|newPrimaryShard
operator|=
name|shard
expr_stmt|;
block|}
break|break;
block|}
block|}
name|shardIt
operator|.
name|reset
argument_list|()
expr_stmt|;
name|internalRequest
operator|.
name|request
argument_list|()
operator|.
name|setCanHaveDuplicates
argument_list|()
expr_stmt|;
comment|// safe side, cluster state changed, we might have dups
block|}
else|else
block|{
name|shardIt
operator|.
name|reset
argument_list|()
expr_stmt|;
while|while
condition|(
operator|(
name|shard
operator|=
name|shardIt
operator|.
name|nextOrNull
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|shard
operator|.
name|state
argument_list|()
operator|!=
name|ShardRoutingState
operator|.
name|STARTED
condition|)
block|{
name|internalRequest
operator|.
name|request
argument_list|()
operator|.
name|setCanHaveDuplicates
argument_list|()
expr_stmt|;
block|}
block|}
name|shardIt
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
comment|// initialize the counter
name|int
name|replicaCounter
init|=
name|shardIt
operator|.
name|assignedReplicasIncludingRelocating
argument_list|()
decl_stmt|;
if|if
condition|(
name|newPrimaryShard
operator|!=
literal|null
condition|)
block|{
name|replicaCounter
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|replicaCounter
operator|==
literal|0
condition|)
block|{
name|postPrimaryOperation
argument_list|(
name|internalRequest
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|listener
operator|.
name|onResponse
argument_list|(
name|response
operator|.
name|response
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|replicationType
operator|==
name|ReplicationType
operator|.
name|ASYNC
condition|)
block|{
name|postPrimaryOperation
argument_list|(
name|internalRequest
argument_list|,
name|response
argument_list|)
expr_stmt|;
comment|// async replication, notify the listener
name|listener
operator|.
name|onResponse
argument_list|(
name|response
operator|.
name|response
argument_list|()
argument_list|)
expr_stmt|;
comment|// now, trick the counter so it won't decrease to 0 and notify the listeners
name|replicaCounter
operator|=
name|Integer
operator|.
name|MIN_VALUE
expr_stmt|;
block|}
comment|// we add one to the replica count to do the postPrimaryOperation
name|replicaCounter
operator|++
expr_stmt|;
name|AtomicInteger
name|counter
init|=
operator|new
name|AtomicInteger
argument_list|(
name|replicaCounter
argument_list|)
decl_stmt|;
name|IndexMetaData
name|indexMetaData
init|=
name|observer
operator|.
name|observedState
argument_list|()
operator|.
name|metaData
argument_list|()
operator|.
name|index
argument_list|(
name|internalRequest
operator|.
name|concreteIndex
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|newPrimaryShard
operator|!=
literal|null
condition|)
block|{
name|performOnReplica
argument_list|(
name|response
argument_list|,
name|counter
argument_list|,
name|newPrimaryShard
argument_list|,
name|newPrimaryShard
operator|.
name|currentNodeId
argument_list|()
argument_list|,
name|indexMetaData
argument_list|)
expr_stmt|;
block|}
name|shardIt
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|// reset the iterator
while|while
condition|(
operator|(
name|shard
operator|=
name|shardIt
operator|.
name|nextOrNull
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
comment|// if its unassigned, nothing to do here...
if|if
condition|(
name|shard
operator|.
name|unassigned
argument_list|()
condition|)
block|{
continue|continue;
block|}
comment|// if the shard is primary and relocating, add one to the counter since we perform it on the replica as well
comment|// (and we already did it on the primary)
name|boolean
name|doOnlyOnRelocating
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|shard
operator|.
name|primary
argument_list|()
condition|)
block|{
if|if
condition|(
name|shard
operator|.
name|relocating
argument_list|()
condition|)
block|{
name|doOnlyOnRelocating
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
continue|continue;
block|}
block|}
comment|// we index on a replica that is initializing as well since we might not have got the event
comment|// yet that it was started. We will get an exception IllegalShardState exception if its not started
comment|// and that's fine, we will ignore it
if|if
condition|(
operator|!
name|doOnlyOnRelocating
condition|)
block|{
name|performOnReplica
argument_list|(
name|response
argument_list|,
name|counter
argument_list|,
name|shard
argument_list|,
name|shard
operator|.
name|currentNodeId
argument_list|()
argument_list|,
name|indexMetaData
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|shard
operator|.
name|relocating
argument_list|()
condition|)
block|{
name|performOnReplica
argument_list|(
name|response
argument_list|,
name|counter
argument_list|,
name|shard
argument_list|,
name|shard
operator|.
name|relocatingNodeId
argument_list|()
argument_list|,
name|indexMetaData
argument_list|)
expr_stmt|;
block|}
block|}
comment|// now do the postPrimary operation, and check if the listener needs to be invoked
name|postPrimaryOperation
argument_list|(
name|internalRequest
argument_list|,
name|response
argument_list|)
expr_stmt|;
comment|// we also invoke here in case replicas finish before postPrimaryAction does
if|if
condition|(
name|counter
operator|.
name|decrementAndGet
argument_list|()
operator|==
literal|0
condition|)
block|{
name|listener
operator|.
name|onResponse
argument_list|(
name|response
operator|.
name|response
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|performOnReplica
name|void
name|performOnReplica
parameter_list|(
specifier|final
name|PrimaryResponse
argument_list|<
name|Response
argument_list|,
name|ReplicaRequest
argument_list|>
name|response
parameter_list|,
specifier|final
name|AtomicInteger
name|counter
parameter_list|,
specifier|final
name|ShardRouting
name|shard
parameter_list|,
name|String
name|nodeId
parameter_list|,
specifier|final
name|IndexMetaData
name|indexMetaData
parameter_list|)
block|{
comment|// if we don't have that node, it means that it might have failed and will be created again, in
comment|// this case, we don't have to do the operation, and just let it failover
if|if
condition|(
operator|!
name|observer
operator|.
name|observedState
argument_list|()
operator|.
name|nodes
argument_list|()
operator|.
name|nodeExists
argument_list|(
name|nodeId
argument_list|)
condition|)
block|{
if|if
condition|(
name|counter
operator|.
name|decrementAndGet
argument_list|()
operator|==
literal|0
condition|)
block|{
name|listener
operator|.
name|onResponse
argument_list|(
name|response
operator|.
name|response
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
specifier|final
name|ReplicaOperationRequest
name|shardRequest
init|=
operator|new
name|ReplicaOperationRequest
argument_list|(
name|shardIt
operator|.
name|shardId
argument_list|()
argument_list|,
name|response
operator|.
name|replicaRequest
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|nodeId
operator|.
name|equals
argument_list|(
name|observer
operator|.
name|observedState
argument_list|()
operator|.
name|nodes
argument_list|()
operator|.
name|localNodeId
argument_list|()
argument_list|)
condition|)
block|{
specifier|final
name|DiscoveryNode
name|node
init|=
name|observer
operator|.
name|observedState
argument_list|()
operator|.
name|nodes
argument_list|()
operator|.
name|get
argument_list|(
name|nodeId
argument_list|)
decl_stmt|;
name|transportService
operator|.
name|sendRequest
argument_list|(
name|node
argument_list|,
name|transportReplicaAction
argument_list|,
name|shardRequest
argument_list|,
name|transportOptions
argument_list|,
operator|new
name|EmptyTransportResponseHandler
argument_list|(
name|ThreadPool
operator|.
name|Names
operator|.
name|SAME
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|handleResponse
parameter_list|(
name|TransportResponse
operator|.
name|Empty
name|vResponse
parameter_list|)
block|{
name|finishIfPossible
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleException
parameter_list|(
name|TransportException
name|exp
parameter_list|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"[{}] Transport failure during replica request [{}] "
argument_list|,
name|exp
argument_list|,
name|node
argument_list|,
name|internalRequest
operator|.
name|request
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ignoreReplicaException
argument_list|(
name|exp
argument_list|)
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Failed to perform "
operator|+
name|actionName
operator|+
literal|" on remote replica "
operator|+
name|node
operator|+
name|shardIt
operator|.
name|shardId
argument_list|()
argument_list|,
name|exp
argument_list|)
expr_stmt|;
name|shardStateAction
operator|.
name|shardFailed
argument_list|(
name|shard
argument_list|,
name|indexMetaData
operator|.
name|getUUID
argument_list|()
argument_list|,
literal|"Failed to perform ["
operator|+
name|actionName
operator|+
literal|"] on replica, message ["
operator|+
name|ExceptionsHelper
operator|.
name|detailedMessage
argument_list|(
name|exp
argument_list|)
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
name|finishIfPossible
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|finishIfPossible
parameter_list|()
block|{
if|if
condition|(
name|counter
operator|.
name|decrementAndGet
argument_list|()
operator|==
literal|0
condition|)
block|{
name|listener
operator|.
name|onResponse
argument_list|(
name|response
operator|.
name|response
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|internalRequest
operator|.
name|request
argument_list|()
operator|.
name|operationThreaded
argument_list|()
condition|)
block|{
name|internalRequest
operator|.
name|request
argument_list|()
operator|.
name|beforeLocalFork
argument_list|()
expr_stmt|;
try|try
block|{
name|threadPool
operator|.
name|executor
argument_list|(
name|executor
argument_list|)
operator|.
name|execute
argument_list|(
operator|new
name|AbstractRunnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|shardOperationOnReplica
argument_list|(
name|shardRequest
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|failReplicaIfNeeded
argument_list|(
name|shard
operator|.
name|index
argument_list|()
argument_list|,
name|shard
operator|.
name|id
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|counter
operator|.
name|decrementAndGet
argument_list|()
operator|==
literal|0
condition|)
block|{
name|listener
operator|.
name|onResponse
argument_list|(
name|response
operator|.
name|response
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// we must never reject on because of thread pool capacity on replicas
annotation|@
name|Override
specifier|public
name|boolean
name|isForceExecution
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|failReplicaIfNeeded
argument_list|(
name|shard
operator|.
name|index
argument_list|()
argument_list|,
name|shard
operator|.
name|id
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|// we want to decrement the counter here, in teh failure handling, cause we got rejected
comment|// from executing on the thread pool
if|if
condition|(
name|counter
operator|.
name|decrementAndGet
argument_list|()
operator|==
literal|0
condition|)
block|{
name|listener
operator|.
name|onResponse
argument_list|(
name|response
operator|.
name|response
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
try|try
block|{
name|shardOperationOnReplica
argument_list|(
name|shardRequest
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|failReplicaIfNeeded
argument_list|(
name|shard
operator|.
name|index
argument_list|()
argument_list|,
name|shard
operator|.
name|id
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|counter
operator|.
name|decrementAndGet
argument_list|()
operator|==
literal|0
condition|)
block|{
name|listener
operator|.
name|onResponse
argument_list|(
name|response
operator|.
name|response
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
DECL|method|failReplicaIfNeeded
specifier|private
name|void
name|failReplicaIfNeeded
parameter_list|(
name|String
name|index
parameter_list|,
name|int
name|shardId
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"failure on replica [{}][{}]"
argument_list|,
name|t
argument_list|,
name|index
argument_list|,
name|shardId
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ignoreReplicaException
argument_list|(
name|t
argument_list|)
condition|)
block|{
name|IndexService
name|indexService
init|=
name|indicesService
operator|.
name|indexService
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexService
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"ignoring failed replica [{}][{}] because index was already removed."
argument_list|,
name|index
argument_list|,
name|shardId
argument_list|)
expr_stmt|;
return|return;
block|}
name|IndexShard
name|indexShard
init|=
name|indexService
operator|.
name|shard
argument_list|(
name|shardId
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexShard
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"ignoring failed replica [{}][{}] because index was already removed."
argument_list|,
name|index
argument_list|,
name|shardId
argument_list|)
expr_stmt|;
return|return;
block|}
name|indexShard
operator|.
name|failShard
argument_list|(
name|actionName
operator|+
literal|" failed on replica"
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|PrimaryResponse
specifier|public
specifier|static
class|class
name|PrimaryResponse
parameter_list|<
name|Response
parameter_list|,
name|ReplicaRequest
parameter_list|>
block|{
DECL|field|replicaRequest
specifier|private
specifier|final
name|ReplicaRequest
name|replicaRequest
decl_stmt|;
DECL|field|response
specifier|private
specifier|final
name|Response
name|response
decl_stmt|;
DECL|field|payload
specifier|private
specifier|final
name|Object
name|payload
decl_stmt|;
DECL|method|PrimaryResponse
specifier|public
name|PrimaryResponse
parameter_list|(
name|ReplicaRequest
name|replicaRequest
parameter_list|,
name|Response
name|response
parameter_list|,
name|Object
name|payload
parameter_list|)
block|{
name|this
operator|.
name|replicaRequest
operator|=
name|replicaRequest
expr_stmt|;
name|this
operator|.
name|response
operator|=
name|response
expr_stmt|;
name|this
operator|.
name|payload
operator|=
name|payload
expr_stmt|;
block|}
DECL|method|replicaRequest
specifier|public
name|ReplicaRequest
name|replicaRequest
parameter_list|()
block|{
return|return
name|this
operator|.
name|replicaRequest
return|;
block|}
DECL|method|response
specifier|public
name|Response
name|response
parameter_list|()
block|{
return|return
name|response
return|;
block|}
DECL|method|payload
specifier|public
name|Object
name|payload
parameter_list|()
block|{
return|return
name|payload
return|;
block|}
block|}
comment|/**      * Internal request class that gets built on each node. Holds the original request plus additional info.      */
DECL|class|InternalRequest
specifier|protected
class|class
name|InternalRequest
block|{
DECL|field|request
specifier|final
name|Request
name|request
decl_stmt|;
DECL|field|concreteIndex
name|String
name|concreteIndex
decl_stmt|;
DECL|method|InternalRequest
name|InternalRequest
parameter_list|(
name|Request
name|request
parameter_list|)
block|{
name|this
operator|.
name|request
operator|=
name|request
expr_stmt|;
block|}
DECL|method|request
specifier|public
name|Request
name|request
parameter_list|()
block|{
return|return
name|request
return|;
block|}
DECL|method|concreteIndex
name|void
name|concreteIndex
parameter_list|(
name|String
name|concreteIndex
parameter_list|)
block|{
name|this
operator|.
name|concreteIndex
operator|=
name|concreteIndex
expr_stmt|;
block|}
DECL|method|concreteIndex
specifier|public
name|String
name|concreteIndex
parameter_list|()
block|{
return|return
name|concreteIndex
return|;
block|}
block|}
block|}
end_class

end_unit

