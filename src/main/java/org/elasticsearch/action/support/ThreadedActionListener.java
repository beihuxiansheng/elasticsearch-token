begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.support
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|transport
operator|.
name|TransportClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|ESLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|AbstractRunnable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|EsRejectedExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_comment
comment|/**  * An action listener that wraps another action listener and threading its execution.  */
end_comment

begin_class
DECL|class|ThreadedActionListener
specifier|public
specifier|final
class|class
name|ThreadedActionListener
parameter_list|<
name|Response
parameter_list|>
implements|implements
name|ActionListener
argument_list|<
name|Response
argument_list|>
block|{
comment|/**      * Wrapper that can be used to automatically wrap a listener in a threaded listener if needed.      */
DECL|class|Wrapper
specifier|public
specifier|static
class|class
name|Wrapper
block|{
DECL|field|logger
specifier|private
specifier|final
name|ESLogger
name|logger
decl_stmt|;
DECL|field|threadPool
specifier|private
specifier|final
name|ThreadPool
name|threadPool
decl_stmt|;
DECL|field|threadedListener
specifier|private
specifier|final
name|boolean
name|threadedListener
decl_stmt|;
DECL|method|Wrapper
specifier|public
name|Wrapper
parameter_list|(
name|ESLogger
name|logger
parameter_list|,
name|Settings
name|settings
parameter_list|,
name|ThreadPool
name|threadPool
parameter_list|)
block|{
name|this
operator|.
name|logger
operator|=
name|logger
expr_stmt|;
name|this
operator|.
name|threadPool
operator|=
name|threadPool
expr_stmt|;
comment|// Should the action listener be threaded or not by default. Action listeners are automatically threaded for client
comment|// nodes and transport client in order to make sure client side code is not executed on IO threads.
name|this
operator|.
name|threadedListener
operator|=
name|DiscoveryNode
operator|.
name|clientNode
argument_list|(
name|settings
argument_list|)
operator|||
name|TransportClient
operator|.
name|CLIENT_TYPE
operator|.
name|equals
argument_list|(
name|settings
operator|.
name|get
argument_list|(
name|Client
operator|.
name|CLIENT_TYPE_SETTING
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|wrap
specifier|public
parameter_list|<
name|Response
parameter_list|>
name|ActionListener
argument_list|<
name|Response
argument_list|>
name|wrap
parameter_list|(
name|ActionListener
argument_list|<
name|Response
argument_list|>
name|listener
parameter_list|)
block|{
if|if
condition|(
name|threadedListener
operator|==
literal|false
condition|)
block|{
return|return
name|listener
return|;
block|}
comment|// if its a future, the callback is very lightweight (flipping a bit) so no need to wrap it
if|if
condition|(
name|listener
operator|instanceof
name|Future
condition|)
block|{
return|return
name|listener
return|;
block|}
comment|// already threaded...
if|if
condition|(
name|listener
operator|instanceof
name|ThreadedActionListener
condition|)
block|{
return|return
name|listener
return|;
block|}
return|return
operator|new
name|ThreadedActionListener
argument_list|<>
argument_list|(
name|logger
argument_list|,
name|threadPool
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|LISTENER
argument_list|,
name|listener
argument_list|)
return|;
block|}
block|}
DECL|field|logger
specifier|private
specifier|final
name|ESLogger
name|logger
decl_stmt|;
DECL|field|threadPool
specifier|private
specifier|final
name|ThreadPool
name|threadPool
decl_stmt|;
DECL|field|executor
specifier|private
specifier|final
name|String
name|executor
decl_stmt|;
DECL|field|listener
specifier|private
specifier|final
name|ActionListener
argument_list|<
name|Response
argument_list|>
name|listener
decl_stmt|;
DECL|method|ThreadedActionListener
specifier|public
name|ThreadedActionListener
parameter_list|(
name|ESLogger
name|logger
parameter_list|,
name|ThreadPool
name|threadPool
parameter_list|,
name|String
name|executor
parameter_list|,
name|ActionListener
argument_list|<
name|Response
argument_list|>
name|listener
parameter_list|)
block|{
name|this
operator|.
name|logger
operator|=
name|logger
expr_stmt|;
name|this
operator|.
name|threadPool
operator|=
name|threadPool
expr_stmt|;
name|this
operator|.
name|executor
operator|=
name|executor
expr_stmt|;
name|this
operator|.
name|listener
operator|=
name|listener
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onResponse
specifier|public
name|void
name|onResponse
parameter_list|(
specifier|final
name|Response
name|response
parameter_list|)
block|{
name|threadPool
operator|.
name|executor
argument_list|(
name|executor
argument_list|)
operator|.
name|execute
argument_list|(
operator|new
name|AbstractRunnable
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|doRun
parameter_list|()
throws|throws
name|Exception
block|{
name|listener
operator|.
name|onResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|listener
operator|.
name|onFailure
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onFailure
specifier|public
name|void
name|onFailure
parameter_list|(
specifier|final
name|Throwable
name|e
parameter_list|)
block|{
name|threadPool
operator|.
name|executor
argument_list|(
name|executor
argument_list|)
operator|.
name|execute
argument_list|(
operator|new
name|AbstractRunnable
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|doRun
parameter_list|()
throws|throws
name|Exception
block|{
name|listener
operator|.
name|onFailure
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"failed to execute failure callback on [{}], failure [{}]"
argument_list|,
name|t
argument_list|,
name|listener
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

