begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.support
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|ESLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|node
operator|.
name|settings
operator|.
name|NodeSettingsService
import|;
end_import

begin_comment
comment|/**  * Helper for dealing with destructive operations and wildcard usage.  */
end_comment

begin_class
DECL|class|DestructiveOperations
specifier|public
specifier|final
class|class
name|DestructiveOperations
implements|implements
name|NodeSettingsService
operator|.
name|Listener
block|{
comment|/**      * Setting which controls whether wildcard usage (*, prefix*, _all) is allowed.      */
DECL|field|REQUIRES_NAME
specifier|public
specifier|static
specifier|final
name|String
name|REQUIRES_NAME
init|=
literal|"action.destructive_requires_name"
decl_stmt|;
DECL|field|logger
specifier|private
specifier|final
name|ESLogger
name|logger
decl_stmt|;
DECL|field|destructiveRequiresName
specifier|private
specifier|volatile
name|boolean
name|destructiveRequiresName
decl_stmt|;
comment|// TODO: Turn into a component that can be reused and wired up into all the transport actions where
comment|// this helper logic is required. Note: also added the logger as argument, otherwise the same log
comment|// statement is printed several times, this can removed once this becomes a component.
DECL|method|DestructiveOperations
specifier|public
name|DestructiveOperations
parameter_list|(
name|ESLogger
name|logger
parameter_list|,
name|Settings
name|settings
parameter_list|,
name|NodeSettingsService
name|nodeSettingsService
parameter_list|)
block|{
name|this
operator|.
name|logger
operator|=
name|logger
expr_stmt|;
name|destructiveRequiresName
operator|=
name|settings
operator|.
name|getAsBoolean
argument_list|(
name|DestructiveOperations
operator|.
name|REQUIRES_NAME
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|nodeSettingsService
operator|.
name|addListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
comment|/**      * Fail if there is wildcard usage in indices and the named is required for destructive operations.      */
DECL|method|failDestructive
specifier|public
name|void
name|failDestructive
parameter_list|(
name|String
index|[]
name|aliasesOrIndices
parameter_list|)
block|{
if|if
condition|(
operator|!
name|destructiveRequiresName
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|aliasesOrIndices
operator|==
literal|null
operator|||
name|aliasesOrIndices
operator|.
name|length
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Wildcard expressions or all indices are not allowed"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|aliasesOrIndices
operator|.
name|length
operator|==
literal|1
condition|)
block|{
if|if
condition|(
name|hasWildcardUsage
argument_list|(
name|aliasesOrIndices
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Wildcard expressions or all indices are not allowed"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
for|for
control|(
name|String
name|aliasesOrIndex
range|:
name|aliasesOrIndices
control|)
block|{
if|if
condition|(
name|hasWildcardUsage
argument_list|(
name|aliasesOrIndex
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Wildcard expressions or all indices are not allowed"
argument_list|)
throw|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|onRefreshSettings
specifier|public
name|void
name|onRefreshSettings
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
name|boolean
name|newValue
init|=
name|settings
operator|.
name|getAsBoolean
argument_list|(
literal|"action.destructive_requires_name"
argument_list|,
name|destructiveRequiresName
argument_list|)
decl_stmt|;
if|if
condition|(
name|destructiveRequiresName
operator|!=
name|newValue
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"updating [action.operate_all_indices] from [{}] to [{}]"
argument_list|,
name|destructiveRequiresName
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
name|this
operator|.
name|destructiveRequiresName
operator|=
name|newValue
expr_stmt|;
block|}
block|}
DECL|method|hasWildcardUsage
specifier|private
specifier|static
name|boolean
name|hasWildcardUsage
parameter_list|(
name|String
name|aliasOrIndex
parameter_list|)
block|{
return|return
literal|"_all"
operator|.
name|equals
argument_list|(
name|aliasOrIndex
argument_list|)
operator|||
name|aliasOrIndex
operator|.
name|indexOf
argument_list|(
literal|'*'
argument_list|)
operator|!=
operator|-
literal|1
return|;
block|}
block|}
end_class

end_unit

