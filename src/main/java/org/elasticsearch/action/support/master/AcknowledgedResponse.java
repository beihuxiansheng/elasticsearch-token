begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.support.master
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|master
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * Abstract class that allows to mark action responses that support acknowledgements.  * Facilitates consistency across different api.  */
end_comment

begin_class
DECL|class|AcknowledgedResponse
specifier|public
specifier|abstract
class|class
name|AcknowledgedResponse
extends|extends
name|ActionResponse
block|{
DECL|field|acknowledged
specifier|private
name|boolean
name|acknowledged
decl_stmt|;
DECL|method|AcknowledgedResponse
specifier|protected
name|AcknowledgedResponse
parameter_list|()
block|{      }
DECL|method|AcknowledgedResponse
specifier|protected
name|AcknowledgedResponse
parameter_list|(
name|boolean
name|acknowledged
parameter_list|)
block|{
name|this
operator|.
name|acknowledged
operator|=
name|acknowledged
expr_stmt|;
block|}
comment|/**      * Returns whether the response is acknowledged or not      * @return true if the response is acknowledged, false otherwise      */
DECL|method|isAcknowledged
specifier|public
specifier|final
name|boolean
name|isAcknowledged
parameter_list|()
block|{
return|return
name|acknowledged
return|;
block|}
comment|/**      * Reads the timeout value      */
DECL|method|readAcknowledged
specifier|protected
name|void
name|readAcknowledged
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|readAcknowledged
argument_list|(
name|in
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Reads the timeout value if on or after the specified min version or if the version is<code>null</code>.      */
DECL|method|readAcknowledged
specifier|protected
name|void
name|readAcknowledged
parameter_list|(
name|StreamInput
name|in
parameter_list|,
name|Version
name|minVersion
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|minVersion
operator|==
literal|null
operator|||
name|in
operator|.
name|getVersion
argument_list|()
operator|.
name|onOrAfter
argument_list|(
name|minVersion
argument_list|)
condition|)
block|{
name|acknowledged
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Writes the timeout value      */
DECL|method|writeAcknowledged
specifier|protected
name|void
name|writeAcknowledged
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|writeAcknowledged
argument_list|(
name|out
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Writes the timeout value if on or after the specified min version or if the version is<code>null</code>.      */
DECL|method|writeAcknowledged
specifier|protected
name|void
name|writeAcknowledged
parameter_list|(
name|StreamOutput
name|out
parameter_list|,
name|Version
name|minVersion
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|minVersion
operator|==
literal|null
operator|||
name|out
operator|.
name|getVersion
argument_list|()
operator|.
name|onOrAfter
argument_list|(
name|minVersion
argument_list|)
condition|)
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
name|acknowledged
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

