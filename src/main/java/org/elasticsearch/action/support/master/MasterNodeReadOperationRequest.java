begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.support.master
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|master
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * Base request for master based read operations that allows to read the cluster state from the local node if needed  */
end_comment

begin_class
DECL|class|MasterNodeReadOperationRequest
specifier|public
specifier|abstract
class|class
name|MasterNodeReadOperationRequest
parameter_list|<
name|T
extends|extends
name|MasterNodeReadOperationRequest
parameter_list|>
extends|extends
name|MasterNodeOperationRequest
argument_list|<
name|T
argument_list|>
block|{
DECL|field|local
specifier|protected
name|boolean
name|local
init|=
literal|false
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|local
specifier|public
specifier|final
name|T
name|local
parameter_list|(
name|boolean
name|local
parameter_list|)
block|{
name|this
operator|.
name|local
operator|=
name|local
expr_stmt|;
return|return
operator|(
name|T
operator|)
name|this
return|;
block|}
DECL|method|local
specifier|public
specifier|final
name|boolean
name|local
parameter_list|()
block|{
return|return
name|local
return|;
block|}
comment|/**      * Reads the local flag      */
DECL|method|readLocal
specifier|protected
name|void
name|readLocal
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|readLocal
argument_list|(
name|in
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Reads the local flag if on or after the specified min version or if the version is<code>null</code>.      */
DECL|method|readLocal
specifier|protected
name|void
name|readLocal
parameter_list|(
name|StreamInput
name|in
parameter_list|,
name|Version
name|minVersion
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|minVersion
operator|==
literal|null
operator|||
name|in
operator|.
name|getVersion
argument_list|()
operator|.
name|onOrAfter
argument_list|(
name|minVersion
argument_list|)
condition|)
block|{
name|local
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * writes the local flag      */
DECL|method|writeLocal
specifier|protected
name|void
name|writeLocal
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|writeLocal
argument_list|(
name|out
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * writes the local flag if on or after the specified min version or if the version is<code>null</code>.      */
DECL|method|writeLocal
specifier|protected
name|void
name|writeLocal
parameter_list|(
name|StreamOutput
name|out
parameter_list|,
name|Version
name|minVersion
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|minVersion
operator|==
literal|null
operator|||
name|out
operator|.
name|getVersion
argument_list|()
operator|.
name|onOrAfter
argument_list|(
name|minVersion
argument_list|)
condition|)
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
name|local
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

