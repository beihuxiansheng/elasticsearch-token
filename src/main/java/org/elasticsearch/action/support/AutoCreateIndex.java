begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.support
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Booleans
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|regex
operator|.
name|Regex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
DECL|class|AutoCreateIndex
specifier|public
class|class
name|AutoCreateIndex
block|{
DECL|field|needToCheck
specifier|private
specifier|final
name|boolean
name|needToCheck
decl_stmt|;
DECL|field|globallyDisabled
specifier|private
specifier|final
name|boolean
name|globallyDisabled
decl_stmt|;
DECL|field|matches
specifier|private
specifier|final
name|String
index|[]
name|matches
decl_stmt|;
DECL|field|matches2
specifier|private
specifier|final
name|String
index|[]
name|matches2
decl_stmt|;
DECL|method|AutoCreateIndex
specifier|public
name|AutoCreateIndex
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
name|String
name|value
init|=
name|settings
operator|.
name|get
argument_list|(
literal|"action.auto_create_index"
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
operator|||
name|Booleans
operator|.
name|isExplicitTrue
argument_list|(
name|value
argument_list|)
condition|)
block|{
name|needToCheck
operator|=
literal|true
expr_stmt|;
name|globallyDisabled
operator|=
literal|false
expr_stmt|;
name|matches
operator|=
literal|null
expr_stmt|;
name|matches2
operator|=
literal|null
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Booleans
operator|.
name|isExplicitFalse
argument_list|(
name|value
argument_list|)
condition|)
block|{
name|needToCheck
operator|=
literal|false
expr_stmt|;
name|globallyDisabled
operator|=
literal|true
expr_stmt|;
name|matches
operator|=
literal|null
expr_stmt|;
name|matches2
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|needToCheck
operator|=
literal|true
expr_stmt|;
name|globallyDisabled
operator|=
literal|false
expr_stmt|;
name|matches
operator|=
name|Strings
operator|.
name|commaDelimitedListToStringArray
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|matches2
operator|=
operator|new
name|String
index|[
name|matches
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|matches
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|matches2
index|[
name|i
index|]
operator|=
name|matches
index|[
name|i
index|]
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Do we really need to check if an index should be auto created?      */
DECL|method|needToCheck
specifier|public
name|boolean
name|needToCheck
parameter_list|()
block|{
return|return
name|this
operator|.
name|needToCheck
return|;
block|}
comment|/**      * Should the index be auto created?      */
DECL|method|shouldAutoCreate
specifier|public
name|boolean
name|shouldAutoCreate
parameter_list|(
name|String
name|index
parameter_list|,
name|ClusterState
name|state
parameter_list|)
block|{
if|if
condition|(
operator|!
name|needToCheck
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|state
operator|.
name|metaData
argument_list|()
operator|.
name|hasConcreteIndex
argument_list|(
name|index
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|globallyDisabled
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// matches not set, default value of "true"
if|if
condition|(
name|matches
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|matches
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|char
name|c
init|=
name|matches
index|[
name|i
index|]
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|'-'
condition|)
block|{
if|if
condition|(
name|Regex
operator|.
name|simpleMatch
argument_list|(
name|matches2
index|[
name|i
index|]
argument_list|,
name|index
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|c
operator|==
literal|'+'
condition|)
block|{
if|if
condition|(
name|Regex
operator|.
name|simpleMatch
argument_list|(
name|matches2
index|[
name|i
index|]
argument_list|,
name|index
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|Regex
operator|.
name|simpleMatch
argument_list|(
name|matches
index|[
name|i
index|]
argument_list|,
name|index
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

