begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.admin.indices.segments
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|segments
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
DECL|class|IndexSegments
specifier|public
class|class
name|IndexSegments
implements|implements
name|Iterable
argument_list|<
name|IndexShardSegments
argument_list|>
block|{
DECL|field|index
specifier|private
specifier|final
name|String
name|index
decl_stmt|;
DECL|field|indexShards
specifier|private
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|IndexShardSegments
argument_list|>
name|indexShards
decl_stmt|;
DECL|method|IndexSegments
name|IndexSegments
parameter_list|(
name|String
name|index
parameter_list|,
name|ShardSegments
index|[]
name|shards
parameter_list|)
block|{
name|this
operator|.
name|index
operator|=
name|index
expr_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|List
argument_list|<
name|ShardSegments
argument_list|>
argument_list|>
name|tmpIndexShards
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|ShardSegments
name|shard
range|:
name|shards
control|)
block|{
name|List
argument_list|<
name|ShardSegments
argument_list|>
name|lst
init|=
name|tmpIndexShards
operator|.
name|get
argument_list|(
name|shard
operator|.
name|getShardRouting
argument_list|()
operator|.
name|id
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|lst
operator|==
literal|null
condition|)
block|{
name|lst
operator|=
name|Lists
operator|.
name|newArrayList
argument_list|()
expr_stmt|;
name|tmpIndexShards
operator|.
name|put
argument_list|(
name|shard
operator|.
name|getShardRouting
argument_list|()
operator|.
name|id
argument_list|()
argument_list|,
name|lst
argument_list|)
expr_stmt|;
block|}
name|lst
operator|.
name|add
argument_list|(
name|shard
argument_list|)
expr_stmt|;
block|}
name|indexShards
operator|=
name|Maps
operator|.
name|newHashMap
argument_list|()
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Integer
argument_list|,
name|List
argument_list|<
name|ShardSegments
argument_list|>
argument_list|>
name|entry
range|:
name|tmpIndexShards
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|indexShards
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
operator|new
name|IndexShardSegments
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getShardRouting
argument_list|()
operator|.
name|shardId
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|ShardSegments
index|[
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getIndex
specifier|public
name|String
name|getIndex
parameter_list|()
block|{
return|return
name|this
operator|.
name|index
return|;
block|}
comment|/**      * A shard id to index shard segments map (note, index shard segments is the replication shard group that maps      * to the shard id).      */
DECL|method|getShards
specifier|public
name|Map
argument_list|<
name|Integer
argument_list|,
name|IndexShardSegments
argument_list|>
name|getShards
parameter_list|()
block|{
return|return
name|this
operator|.
name|indexShards
return|;
block|}
annotation|@
name|Override
DECL|method|iterator
specifier|public
name|Iterator
argument_list|<
name|IndexShardSegments
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|indexShards
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
return|;
block|}
block|}
end_class

end_unit

