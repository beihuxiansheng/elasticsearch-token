begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.admin.indices.analyze
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|analyze
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionRequestValidationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|single
operator|.
name|custom
operator|.
name|SingleCustomOperationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ValidateActions
operator|.
name|addValidationError
import|;
end_import

begin_comment
comment|/**  * A request to analyze a text associated with a specific index. Allow to provide  * the actual analyzer name to perform the analysis with.  */
end_comment

begin_class
DECL|class|AnalyzeRequest
specifier|public
class|class
name|AnalyzeRequest
extends|extends
name|SingleCustomOperationRequest
block|{
DECL|field|index
specifier|private
name|String
name|index
decl_stmt|;
DECL|field|text
specifier|private
name|String
name|text
decl_stmt|;
DECL|field|analyzer
specifier|private
name|String
name|analyzer
decl_stmt|;
DECL|field|tokenizer
specifier|private
name|String
name|tokenizer
decl_stmt|;
DECL|field|tokenFilters
specifier|private
name|String
index|[]
name|tokenFilters
decl_stmt|;
DECL|field|field
specifier|private
name|String
name|field
decl_stmt|;
DECL|method|AnalyzeRequest
name|AnalyzeRequest
parameter_list|()
block|{      }
comment|/**      * Constructs a new analyzer request for the provided text.      *      * @param text The text to analyze      */
DECL|method|AnalyzeRequest
specifier|public
name|AnalyzeRequest
parameter_list|(
name|String
name|text
parameter_list|)
block|{
name|this
operator|.
name|text
operator|=
name|text
expr_stmt|;
block|}
comment|/**      * Constructs a new analyzer request for the provided index and text.      *      * @param index The index name      * @param text  The text to analyze      */
DECL|method|AnalyzeRequest
specifier|public
name|AnalyzeRequest
parameter_list|(
annotation|@
name|Nullable
name|String
name|index
parameter_list|,
name|String
name|text
parameter_list|)
block|{
name|this
operator|.
name|index
operator|=
name|index
expr_stmt|;
name|this
operator|.
name|text
operator|=
name|text
expr_stmt|;
block|}
DECL|method|text
specifier|public
name|String
name|text
parameter_list|()
block|{
return|return
name|this
operator|.
name|text
return|;
block|}
DECL|method|index
specifier|public
name|AnalyzeRequest
name|index
parameter_list|(
name|String
name|index
parameter_list|)
block|{
name|this
operator|.
name|index
operator|=
name|index
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|index
specifier|public
name|String
name|index
parameter_list|()
block|{
return|return
name|this
operator|.
name|index
return|;
block|}
DECL|method|analyzer
specifier|public
name|AnalyzeRequest
name|analyzer
parameter_list|(
name|String
name|analyzer
parameter_list|)
block|{
name|this
operator|.
name|analyzer
operator|=
name|analyzer
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|analyzer
specifier|public
name|String
name|analyzer
parameter_list|()
block|{
return|return
name|this
operator|.
name|analyzer
return|;
block|}
DECL|method|tokenizer
specifier|public
name|AnalyzeRequest
name|tokenizer
parameter_list|(
name|String
name|tokenizer
parameter_list|)
block|{
name|this
operator|.
name|tokenizer
operator|=
name|tokenizer
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|tokenizer
specifier|public
name|String
name|tokenizer
parameter_list|()
block|{
return|return
name|this
operator|.
name|tokenizer
return|;
block|}
DECL|method|tokenFilters
specifier|public
name|AnalyzeRequest
name|tokenFilters
parameter_list|(
name|String
modifier|...
name|tokenFilters
parameter_list|)
block|{
name|this
operator|.
name|tokenFilters
operator|=
name|tokenFilters
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|tokenFilters
specifier|public
name|String
index|[]
name|tokenFilters
parameter_list|()
block|{
return|return
name|this
operator|.
name|tokenFilters
return|;
block|}
DECL|method|field
specifier|public
name|AnalyzeRequest
name|field
parameter_list|(
name|String
name|field
parameter_list|)
block|{
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|field
specifier|public
name|String
name|field
parameter_list|()
block|{
return|return
name|this
operator|.
name|field
return|;
block|}
comment|/**      * if this operation hits a node with a local relevant shard, should it be preferred      * to be executed on, or just do plain round robin. Defaults to<tt>true</tt>      */
annotation|@
name|Override
DECL|method|preferLocal
specifier|public
name|AnalyzeRequest
name|preferLocal
parameter_list|(
name|boolean
name|preferLocal
parameter_list|)
block|{
name|super
operator|.
name|preferLocal
argument_list|(
name|preferLocal
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|validate
specifier|public
name|ActionRequestValidationException
name|validate
parameter_list|()
block|{
name|ActionRequestValidationException
name|validationException
init|=
name|super
operator|.
name|validate
argument_list|()
decl_stmt|;
if|if
condition|(
name|text
operator|==
literal|null
condition|)
block|{
name|validationException
operator|=
name|addValidationError
argument_list|(
literal|"text is missing"
argument_list|,
name|validationException
argument_list|)
expr_stmt|;
block|}
return|return
name|validationException
return|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|index
operator|=
name|in
operator|.
name|readUTF
argument_list|()
expr_stmt|;
block|}
name|text
operator|=
name|in
operator|.
name|readUTF
argument_list|()
expr_stmt|;
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|analyzer
operator|=
name|in
operator|.
name|readUTF
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|tokenizer
operator|=
name|in
operator|.
name|readUTF
argument_list|()
expr_stmt|;
block|}
name|int
name|size
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|>
literal|0
condition|)
block|{
name|tokenFilters
operator|=
operator|new
name|String
index|[
name|size
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|tokenFilters
index|[
name|i
index|]
operator|=
name|in
operator|.
name|readUTF
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|field
operator|=
name|in
operator|.
name|readUTF
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
if|if
condition|(
name|index
operator|==
literal|null
condition|)
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeUTF
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeUTF
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|writeUTF
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|writeOption
argument_list|(
name|out
argument_list|,
name|analyzer
argument_list|)
expr_stmt|;
name|writeOption
argument_list|(
name|out
argument_list|,
name|tokenizer
argument_list|)
expr_stmt|;
if|if
condition|(
name|tokenFilters
operator|==
literal|null
condition|)
block|{
name|out
operator|.
name|writeVInt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeVInt
argument_list|(
name|tokenFilters
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|tokenFilter
range|:
name|tokenFilters
control|)
block|{
name|out
operator|.
name|writeUTF
argument_list|(
name|tokenFilter
argument_list|)
expr_stmt|;
block|}
block|}
name|writeOption
argument_list|(
name|out
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
DECL|method|writeOption
specifier|private
name|void
name|writeOption
parameter_list|(
name|StreamOutput
name|out
parameter_list|,
name|String
name|value
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeUTF
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

