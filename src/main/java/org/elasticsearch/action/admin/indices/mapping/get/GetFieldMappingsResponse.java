begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.admin.indices.mapping.get
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|mapping
operator|.
name|get
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|Mapper
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/** Response object for {@link GetFieldMappingsRequest} API */
end_comment

begin_class
DECL|class|GetFieldMappingsResponse
specifier|public
class|class
name|GetFieldMappingsResponse
extends|extends
name|ActionResponse
implements|implements
name|ToXContent
block|{
DECL|field|mappings
specifier|private
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|FieldMappingMetaData
argument_list|>
argument_list|>
argument_list|>
name|mappings
init|=
name|ImmutableMap
operator|.
name|of
argument_list|()
decl_stmt|;
DECL|method|GetFieldMappingsResponse
name|GetFieldMappingsResponse
parameter_list|(
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|FieldMappingMetaData
argument_list|>
argument_list|>
argument_list|>
name|mappings
parameter_list|)
block|{
name|this
operator|.
name|mappings
operator|=
name|mappings
expr_stmt|;
block|}
DECL|method|GetFieldMappingsResponse
name|GetFieldMappingsResponse
parameter_list|()
block|{     }
comment|/** returns the retrieved field mapping. The return map keys are index, type, field (as specified in the request). */
DECL|method|mappings
specifier|public
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|FieldMappingMetaData
argument_list|>
argument_list|>
argument_list|>
name|mappings
parameter_list|()
block|{
return|return
name|mappings
return|;
block|}
comment|/**      * Returns the mappings of a specific field.      *      * @param field field name as specified in the {@link GetFieldMappingsRequest}      * @return FieldMappingMetaData for the requested field or null if not found.      */
DECL|method|fieldMappings
specifier|public
name|FieldMappingMetaData
name|fieldMappings
parameter_list|(
name|String
name|index
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|field
parameter_list|)
block|{
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|FieldMappingMetaData
argument_list|>
argument_list|>
name|indexMapping
init|=
name|mappings
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexMapping
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|FieldMappingMetaData
argument_list|>
name|typeMapping
init|=
name|indexMapping
operator|.
name|get
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|typeMapping
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|typeMapping
operator|.
name|get
argument_list|(
name|field
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|FieldMappingMetaData
argument_list|>
argument_list|>
argument_list|>
name|indexEntry
range|:
name|mappings
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|indexEntry
operator|.
name|getKey
argument_list|()
argument_list|,
name|XContentBuilder
operator|.
name|FieldCaseConversion
operator|.
name|NONE
argument_list|)
expr_stmt|;
name|builder
operator|.
name|startObject
argument_list|(
literal|"mappings"
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|FieldMappingMetaData
argument_list|>
argument_list|>
name|typeEntry
range|:
name|indexEntry
operator|.
name|getValue
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|typeEntry
operator|.
name|getKey
argument_list|()
argument_list|,
name|XContentBuilder
operator|.
name|FieldCaseConversion
operator|.
name|NONE
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|FieldMappingMetaData
argument_list|>
name|fieldEntry
range|:
name|typeEntry
operator|.
name|getValue
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|fieldEntry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|fieldEntry
operator|.
name|getValue
argument_list|()
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
return|return
name|builder
return|;
block|}
DECL|class|FieldMappingMetaData
specifier|public
specifier|static
class|class
name|FieldMappingMetaData
implements|implements
name|ToXContent
block|{
DECL|field|NULL
specifier|public
specifier|static
specifier|final
name|FieldMappingMetaData
name|NULL
init|=
operator|new
name|FieldMappingMetaData
argument_list|(
literal|""
argument_list|,
name|BytesArray
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
DECL|field|fullName
specifier|private
name|String
name|fullName
decl_stmt|;
DECL|field|source
specifier|private
name|BytesReference
name|source
decl_stmt|;
DECL|method|FieldMappingMetaData
specifier|public
name|FieldMappingMetaData
parameter_list|(
name|String
name|fullName
parameter_list|,
name|BytesReference
name|source
parameter_list|)
block|{
name|this
operator|.
name|fullName
operator|=
name|fullName
expr_stmt|;
name|this
operator|.
name|source
operator|=
name|source
expr_stmt|;
block|}
DECL|method|fullName
specifier|public
name|String
name|fullName
parameter_list|()
block|{
return|return
name|fullName
return|;
block|}
comment|/** Returns the mappings as a map. Note that the returned map has a single key which is always the field's {@link Mapper#name}. */
DECL|method|sourceAsMap
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|sourceAsMap
parameter_list|()
block|{
return|return
name|XContentHelper
operator|.
name|convertToMap
argument_list|(
name|source
operator|.
name|array
argument_list|()
argument_list|,
name|source
operator|.
name|arrayOffset
argument_list|()
argument_list|,
name|source
operator|.
name|length
argument_list|()
argument_list|,
literal|true
argument_list|)
operator|.
name|v2
argument_list|()
return|;
block|}
DECL|method|isNull
specifier|public
name|boolean
name|isNull
parameter_list|()
block|{
return|return
name|NULL
operator|.
name|fullName
argument_list|()
operator|.
name|equals
argument_list|(
name|fullName
argument_list|)
operator|&&
name|NULL
operator|.
name|source
operator|.
name|length
argument_list|()
operator|==
name|source
operator|.
name|length
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"full_name"
argument_list|,
name|fullName
argument_list|)
expr_stmt|;
name|XContentHelper
operator|.
name|writeRawField
argument_list|(
literal|"mapping"
argument_list|,
name|source
argument_list|,
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
return|return
name|builder
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|int
name|size
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|ImmutableMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|FieldMappingMetaData
argument_list|>
argument_list|>
argument_list|>
name|indexMapBuilder
init|=
name|ImmutableMap
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|String
name|index
init|=
name|in
operator|.
name|readString
argument_list|()
decl_stmt|;
name|int
name|typesSize
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|ImmutableMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|FieldMappingMetaData
argument_list|>
argument_list|>
name|typeMapBuilder
init|=
name|ImmutableMap
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|typesSize
condition|;
name|j
operator|++
control|)
block|{
name|String
name|type
init|=
name|in
operator|.
name|readString
argument_list|()
decl_stmt|;
name|ImmutableMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|FieldMappingMetaData
argument_list|>
name|fieldMapBuilder
init|=
name|ImmutableMap
operator|.
name|builder
argument_list|()
decl_stmt|;
name|int
name|fieldSize
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|fieldSize
condition|;
name|k
operator|++
control|)
block|{
name|fieldMapBuilder
operator|.
name|put
argument_list|(
name|in
operator|.
name|readString
argument_list|()
argument_list|,
operator|new
name|FieldMappingMetaData
argument_list|(
name|in
operator|.
name|readString
argument_list|()
argument_list|,
name|in
operator|.
name|readBytesReference
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|typeMapBuilder
operator|.
name|put
argument_list|(
name|type
argument_list|,
name|fieldMapBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|indexMapBuilder
operator|.
name|put
argument_list|(
name|index
argument_list|,
name|typeMapBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|mappings
operator|=
name|indexMapBuilder
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|mappings
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|FieldMappingMetaData
argument_list|>
argument_list|>
argument_list|>
name|indexEntry
range|:
name|mappings
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|out
operator|.
name|writeString
argument_list|(
name|indexEntry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|indexEntry
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|FieldMappingMetaData
argument_list|>
argument_list|>
name|typeEntry
range|:
name|indexEntry
operator|.
name|getValue
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|out
operator|.
name|writeString
argument_list|(
name|typeEntry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|typeEntry
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|FieldMappingMetaData
argument_list|>
name|fieldEntry
range|:
name|typeEntry
operator|.
name|getValue
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|out
operator|.
name|writeString
argument_list|(
name|fieldEntry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|FieldMappingMetaData
name|fieldMapping
init|=
name|fieldEntry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|out
operator|.
name|writeString
argument_list|(
name|fieldMapping
operator|.
name|fullName
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBytesReference
argument_list|(
name|fieldMapping
operator|.
name|source
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

