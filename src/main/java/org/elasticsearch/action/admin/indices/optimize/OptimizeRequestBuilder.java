begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.admin.indices.optimize
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|optimize
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|broadcast
operator|.
name|BroadcastOperationRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|IndicesAdminClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|internal
operator|.
name|InternalIndicesAdminClient
import|;
end_import

begin_comment
comment|/**  * A request to optimize one or more indices. In order to optimize on all the indices, pass an empty array or  *<tt>null</tt> for the indices.  *<p/>  *<p>{@link #setWaitForMerge(boolean)} allows to control if the call will block until the optimize completes and  * defaults to<tt>true</tt>.  *<p/>  *<p>{@link #setMaxNumSegments(int)} allows to control the number of segments to optimize down to. By default, will  * cause the optimize process to optimize down to half the configured number of segments.  */
end_comment

begin_class
DECL|class|OptimizeRequestBuilder
specifier|public
class|class
name|OptimizeRequestBuilder
extends|extends
name|BroadcastOperationRequestBuilder
argument_list|<
name|OptimizeRequest
argument_list|,
name|OptimizeResponse
argument_list|,
name|OptimizeRequestBuilder
argument_list|>
block|{
DECL|method|OptimizeRequestBuilder
specifier|public
name|OptimizeRequestBuilder
parameter_list|(
name|IndicesAdminClient
name|indicesClient
parameter_list|)
block|{
name|super
argument_list|(
operator|(
name|InternalIndicesAdminClient
operator|)
name|indicesClient
argument_list|,
operator|new
name|OptimizeRequest
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Should the call block until the optimize completes. Defaults to<tt>true</tt>.      */
DECL|method|setWaitForMerge
specifier|public
name|OptimizeRequestBuilder
name|setWaitForMerge
parameter_list|(
name|boolean
name|waitForMerge
parameter_list|)
block|{
name|request
operator|.
name|waitForMerge
argument_list|(
name|waitForMerge
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Will optimize the index down to<= maxNumSegments. By default, will cause the optimize      * process to optimize down to half the configured number of segments.      */
DECL|method|setMaxNumSegments
specifier|public
name|OptimizeRequestBuilder
name|setMaxNumSegments
parameter_list|(
name|int
name|maxNumSegments
parameter_list|)
block|{
name|request
operator|.
name|maxNumSegments
argument_list|(
name|maxNumSegments
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Should the optimization only expunge deletes from the index, without full optimization.      * Defaults to full optimization (<tt>false</tt>).      */
DECL|method|setOnlyExpungeDeletes
specifier|public
name|OptimizeRequestBuilder
name|setOnlyExpungeDeletes
parameter_list|(
name|boolean
name|onlyExpungeDeletes
parameter_list|)
block|{
name|request
operator|.
name|onlyExpungeDeletes
argument_list|(
name|onlyExpungeDeletes
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Should flush be performed after the optimization. Defaults to<tt>true</tt>.      */
DECL|method|setFlush
specifier|public
name|OptimizeRequestBuilder
name|setFlush
parameter_list|(
name|boolean
name|flush
parameter_list|)
block|{
name|request
operator|.
name|flush
argument_list|(
name|flush
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|doExecute
specifier|protected
name|void
name|doExecute
parameter_list|(
name|ActionListener
argument_list|<
name|OptimizeResponse
argument_list|>
name|listener
parameter_list|)
block|{
operator|(
operator|(
name|IndicesAdminClient
operator|)
name|client
operator|)
operator|.
name|optimize
argument_list|(
name|request
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

