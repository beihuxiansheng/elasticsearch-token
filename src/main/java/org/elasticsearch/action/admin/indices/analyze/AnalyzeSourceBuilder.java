begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.admin.indices.analyze
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|analyze
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|builder
operator|.
name|SearchSourceBuilderException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Builder to create the analyze rquest body.  */
end_comment

begin_class
DECL|class|AnalyzeSourceBuilder
specifier|public
class|class
name|AnalyzeSourceBuilder
implements|implements
name|ToXContent
block|{
DECL|field|text
specifier|private
name|String
name|text
decl_stmt|;
DECL|field|analyzer
specifier|private
name|String
name|analyzer
decl_stmt|;
DECL|field|tokenizer
specifier|private
name|String
name|tokenizer
decl_stmt|;
DECL|field|tokenFilters
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|tokenFilters
decl_stmt|;
DECL|field|charFilters
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|charFilters
decl_stmt|;
DECL|field|field
specifier|private
name|String
name|field
decl_stmt|;
DECL|field|preferLocal
specifier|private
name|boolean
name|preferLocal
decl_stmt|;
DECL|method|setText
specifier|public
name|AnalyzeSourceBuilder
name|setText
parameter_list|(
name|String
name|text
parameter_list|)
block|{
name|this
operator|.
name|text
operator|=
name|text
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setAnalyzer
specifier|public
name|AnalyzeSourceBuilder
name|setAnalyzer
parameter_list|(
name|String
name|analyzer
parameter_list|)
block|{
name|this
operator|.
name|analyzer
operator|=
name|analyzer
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setTokenizer
specifier|public
name|AnalyzeSourceBuilder
name|setTokenizer
parameter_list|(
name|String
name|tokenizer
parameter_list|)
block|{
name|this
operator|.
name|tokenizer
operator|=
name|tokenizer
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setTokenFilters
specifier|public
name|AnalyzeSourceBuilder
name|setTokenFilters
parameter_list|(
name|String
modifier|...
name|tokenFilters
parameter_list|)
block|{
if|if
condition|(
name|tokenFilters
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|tokenFilters
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|tokenFilters
operator|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|tokenFilters
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|this
return|;
block|}
DECL|method|setTokenFilters
specifier|public
name|AnalyzeSourceBuilder
name|setTokenFilters
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|tokenFilters
parameter_list|)
block|{
name|this
operator|.
name|tokenFilters
operator|=
name|tokenFilters
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setCharFilters
specifier|public
name|AnalyzeSourceBuilder
name|setCharFilters
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|charFilters
parameter_list|)
block|{
name|this
operator|.
name|charFilters
operator|=
name|charFilters
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setCharFilters
specifier|public
name|AnalyzeSourceBuilder
name|setCharFilters
parameter_list|(
name|String
modifier|...
name|charFilters
parameter_list|)
block|{
if|if
condition|(
name|charFilters
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|charFilters
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|charFilters
operator|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|charFilters
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|this
return|;
block|}
DECL|method|setField
specifier|public
name|AnalyzeSourceBuilder
name|setField
parameter_list|(
name|String
name|field
parameter_list|)
block|{
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setPreferLocal
specifier|public
name|AnalyzeSourceBuilder
name|setPreferLocal
parameter_list|(
name|boolean
name|preferLocal
parameter_list|)
block|{
name|this
operator|.
name|preferLocal
operator|=
name|preferLocal
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
if|if
condition|(
name|text
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"text"
argument_list|,
name|text
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|analyzer
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
name|analyzer
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tokenizer
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"tokenizer"
argument_list|,
name|tokenizer
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tokenFilters
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|startArray
argument_list|(
literal|"filters"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|tokenFilter
range|:
name|tokenFilters
control|)
block|{
name|builder
operator|.
name|value
argument_list|(
name|tokenFilter
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|charFilters
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|startArray
argument_list|(
literal|"char_filters"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|charFilter
range|:
name|charFilters
control|)
block|{
name|builder
operator|.
name|value
argument_list|(
name|charFilter
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|field
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"field"
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|field
argument_list|(
literal|"prefer_local"
argument_list|,
name|preferLocal
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
DECL|method|buildAsBytes
specifier|public
name|BytesReference
name|buildAsBytes
parameter_list|(
name|XContentType
name|contentType
parameter_list|)
throws|throws
name|SearchSourceBuilderException
block|{
try|try
block|{
name|XContentBuilder
name|builder
init|=
name|XContentFactory
operator|.
name|contentBuilder
argument_list|(
name|contentType
argument_list|)
decl_stmt|;
name|toXContent
argument_list|(
name|builder
argument_list|,
name|ToXContent
operator|.
name|EMPTY_PARAMS
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|bytes
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SearchSourceBuilderException
argument_list|(
literal|"Failed to build search source"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

