begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.admin.indices.mapping.get
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|mapping
operator|.
name|get
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|TransportAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|MapBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|BaseTransportRequestHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReferenceArray
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
DECL|class|TransportGetFieldMappingsAction
specifier|public
class|class
name|TransportGetFieldMappingsAction
extends|extends
name|TransportAction
argument_list|<
name|GetFieldMappingsRequest
argument_list|,
name|GetFieldMappingsResponse
argument_list|>
block|{
DECL|field|clusterService
specifier|private
specifier|final
name|ClusterService
name|clusterService
decl_stmt|;
DECL|field|shardAction
specifier|private
specifier|final
name|TransportGetFieldMappingsIndexAction
name|shardAction
decl_stmt|;
annotation|@
name|Inject
DECL|method|TransportGetFieldMappingsAction
specifier|public
name|TransportGetFieldMappingsAction
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|TransportService
name|transportService
parameter_list|,
name|ClusterService
name|clusterService
parameter_list|,
name|ThreadPool
name|threadPool
parameter_list|,
name|TransportGetFieldMappingsIndexAction
name|shardAction
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|,
name|GetFieldMappingsAction
operator|.
name|NAME
argument_list|,
name|threadPool
argument_list|)
expr_stmt|;
name|this
operator|.
name|clusterService
operator|=
name|clusterService
expr_stmt|;
name|this
operator|.
name|shardAction
operator|=
name|shardAction
expr_stmt|;
name|transportService
operator|.
name|registerHandler
argument_list|(
name|actionName
argument_list|,
operator|new
name|TransportHandler
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doExecute
specifier|protected
name|void
name|doExecute
parameter_list|(
name|GetFieldMappingsRequest
name|request
parameter_list|,
specifier|final
name|ActionListener
argument_list|<
name|GetFieldMappingsResponse
argument_list|>
name|listener
parameter_list|)
block|{
name|ClusterState
name|clusterState
init|=
name|clusterService
operator|.
name|state
argument_list|()
decl_stmt|;
name|String
index|[]
name|concreteIndices
init|=
name|clusterState
operator|.
name|metaData
argument_list|()
operator|.
name|concreteIndices
argument_list|(
name|request
operator|.
name|indicesOptions
argument_list|()
argument_list|,
name|request
operator|.
name|indices
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|AtomicInteger
name|indexCounter
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
specifier|final
name|AtomicInteger
name|completionCounter
init|=
operator|new
name|AtomicInteger
argument_list|(
name|concreteIndices
operator|.
name|length
argument_list|)
decl_stmt|;
specifier|final
name|AtomicReferenceArray
argument_list|<
name|Object
argument_list|>
name|indexResponses
init|=
operator|new
name|AtomicReferenceArray
argument_list|<>
argument_list|(
name|concreteIndices
operator|.
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
name|concreteIndices
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|listener
operator|.
name|onResponse
argument_list|(
operator|new
name|GetFieldMappingsResponse
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|boolean
name|probablySingleFieldRequest
init|=
name|concreteIndices
operator|.
name|length
operator|==
literal|1
operator|&&
name|request
operator|.
name|types
argument_list|()
operator|.
name|length
operator|==
literal|1
operator|&&
name|request
operator|.
name|fields
argument_list|()
operator|.
name|length
operator|==
literal|1
decl_stmt|;
for|for
control|(
specifier|final
name|String
name|index
range|:
name|concreteIndices
control|)
block|{
name|GetFieldMappingsIndexRequest
name|shardRequest
init|=
operator|new
name|GetFieldMappingsIndexRequest
argument_list|(
name|request
argument_list|,
name|index
argument_list|,
name|probablySingleFieldRequest
argument_list|)
decl_stmt|;
comment|// no threading needed, all is done on the index replication one
name|shardRequest
operator|.
name|listenerThreaded
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|shardAction
operator|.
name|execute
argument_list|(
name|shardRequest
argument_list|,
operator|new
name|ActionListener
argument_list|<
name|GetFieldMappingsResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|GetFieldMappingsResponse
name|result
parameter_list|)
block|{
name|indexResponses
operator|.
name|set
argument_list|(
name|indexCounter
operator|.
name|getAndIncrement
argument_list|()
argument_list|,
name|result
argument_list|)
expr_stmt|;
if|if
condition|(
name|completionCounter
operator|.
name|decrementAndGet
argument_list|()
operator|==
literal|0
condition|)
block|{
name|listener
operator|.
name|onResponse
argument_list|(
name|merge
argument_list|(
name|indexResponses
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|int
name|index
init|=
name|indexCounter
operator|.
name|getAndIncrement
argument_list|()
decl_stmt|;
name|indexResponses
operator|.
name|set
argument_list|(
name|index
argument_list|,
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|completionCounter
operator|.
name|decrementAndGet
argument_list|()
operator|==
literal|0
condition|)
block|{
name|listener
operator|.
name|onResponse
argument_list|(
name|merge
argument_list|(
name|indexResponses
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|merge
specifier|private
name|GetFieldMappingsResponse
name|merge
parameter_list|(
name|AtomicReferenceArray
argument_list|<
name|Object
argument_list|>
name|indexResponses
parameter_list|)
block|{
name|MapBuilder
argument_list|<
name|String
argument_list|,
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|GetFieldMappingsResponse
operator|.
name|FieldMappingMetaData
argument_list|>
argument_list|>
argument_list|>
name|mergedResponses
init|=
name|MapBuilder
operator|.
name|newMapBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|indexResponses
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Object
name|element
init|=
name|indexResponses
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|element
operator|instanceof
name|GetFieldMappingsResponse
condition|)
block|{
name|GetFieldMappingsResponse
name|response
init|=
operator|(
name|GetFieldMappingsResponse
operator|)
name|element
decl_stmt|;
name|mergedResponses
operator|.
name|putAll
argument_list|(
name|response
operator|.
name|mappings
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|GetFieldMappingsResponse
argument_list|(
name|mergedResponses
operator|.
name|immutableMap
argument_list|()
argument_list|)
return|;
block|}
DECL|class|TransportHandler
specifier|private
class|class
name|TransportHandler
extends|extends
name|BaseTransportRequestHandler
argument_list|<
name|GetFieldMappingsRequest
argument_list|>
block|{
annotation|@
name|Override
DECL|method|newInstance
specifier|public
name|GetFieldMappingsRequest
name|newInstance
parameter_list|()
block|{
return|return
operator|new
name|GetFieldMappingsRequest
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|executor
specifier|public
name|String
name|executor
parameter_list|()
block|{
return|return
name|ThreadPool
operator|.
name|Names
operator|.
name|SAME
return|;
block|}
annotation|@
name|Override
DECL|method|messageReceived
specifier|public
name|void
name|messageReceived
parameter_list|(
specifier|final
name|GetFieldMappingsRequest
name|request
parameter_list|,
specifier|final
name|TransportChannel
name|channel
parameter_list|)
throws|throws
name|Exception
block|{
comment|// no need for a threaded listener, since we just send a response
name|request
operator|.
name|listenerThreaded
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|execute
argument_list|(
name|request
argument_list|,
operator|new
name|ActionListener
argument_list|<
name|GetFieldMappingsResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|GetFieldMappingsResponse
name|result
parameter_list|)
block|{
try|try
block|{
name|channel
operator|.
name|sendResponse
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|onFailure
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
try|try
block|{
name|channel
operator|.
name|sendResponse
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e1
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Failed to send error response for action ["
operator|+
name|actionName
operator|+
literal|"] and request ["
operator|+
name|request
operator|+
literal|"]"
argument_list|,
name|e1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

