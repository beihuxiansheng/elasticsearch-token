begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.admin.indices.mapping.get
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|mapping
operator|.
name|get
package|;
end_package

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|ObjectIntOpenHashMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Collections2
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|mapping
operator|.
name|get
operator|.
name|GetFieldMappingsResponse
operator|.
name|FieldMappingMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|IndicesOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|TransportAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRouting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|MapBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|regex
operator|.
name|Regex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|AtomicArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexShardMissingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|DocumentMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|FieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|service
operator|.
name|IndexService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|IndicesService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
DECL|class|TransportGetFieldMappingsAction
specifier|public
class|class
name|TransportGetFieldMappingsAction
extends|extends
name|TransportAction
argument_list|<
name|GetFieldMappingsRequest
argument_list|,
name|GetFieldMappingsResponse
argument_list|>
block|{
DECL|field|clusterService
specifier|protected
specifier|final
name|ClusterService
name|clusterService
decl_stmt|;
DECL|field|transportService
specifier|private
specifier|final
name|TransportService
name|transportService
decl_stmt|;
DECL|field|indicesService
specifier|private
specifier|final
name|IndicesService
name|indicesService
decl_stmt|;
DECL|field|shardPicker
specifier|protected
name|AtomicInteger
name|shardPicker
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
annotation|@
name|Inject
DECL|method|TransportGetFieldMappingsAction
specifier|public
name|TransportGetFieldMappingsAction
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|ClusterService
name|clusterService
parameter_list|,
name|TransportService
name|transportService
parameter_list|,
name|IndicesService
name|indicesService
parameter_list|,
name|ThreadPool
name|threadPool
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|,
name|threadPool
argument_list|)
expr_stmt|;
name|this
operator|.
name|clusterService
operator|=
name|clusterService
expr_stmt|;
name|this
operator|.
name|indicesService
operator|=
name|indicesService
expr_stmt|;
name|this
operator|.
name|transportService
operator|=
name|transportService
expr_stmt|;
name|transportService
operator|.
name|registerHandler
argument_list|(
name|GetFieldMappingsAction
operator|.
name|NAME
argument_list|,
operator|new
name|TransportHandler
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doExecute
specifier|protected
name|void
name|doExecute
parameter_list|(
specifier|final
name|GetFieldMappingsRequest
name|request
parameter_list|,
name|ActionListener
argument_list|<
name|GetFieldMappingsResponse
argument_list|>
name|listener
parameter_list|)
block|{
name|ClusterState
name|state
init|=
name|clusterService
operator|.
name|state
argument_list|()
decl_stmt|;
name|String
index|[]
name|concreteIndices
init|=
name|state
operator|.
name|metaData
argument_list|()
operator|.
name|concreteIndices
argument_list|(
name|request
operator|.
name|indices
argument_list|()
argument_list|,
name|request
operator|.
name|indicesOptions
argument_list|()
argument_list|)
decl_stmt|;
name|request
operator|.
name|indices
argument_list|(
name|concreteIndices
argument_list|)
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|local
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"executing request locally"
argument_list|)
expr_stmt|;
name|listener
operator|.
name|onResponse
argument_list|(
operator|new
name|GetFieldMappingsResponse
argument_list|(
name|findMappings
argument_list|(
name|request
operator|.
name|indices
argument_list|()
argument_list|,
name|request
operator|.
name|types
argument_list|()
argument_list|,
name|request
operator|.
name|fields
argument_list|()
argument_list|,
name|request
operator|.
name|includeDefaults
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"executing request with remote forwarding"
argument_list|)
expr_stmt|;
operator|new
name|AsyncAction
argument_list|(
name|request
argument_list|,
name|listener
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|AsyncAction
specifier|protected
class|class
name|AsyncAction
block|{
DECL|field|state
specifier|private
specifier|final
name|ClusterState
name|state
decl_stmt|;
DECL|field|origRequest
specifier|private
specifier|final
name|GetFieldMappingsRequest
name|origRequest
decl_stmt|;
DECL|field|listener
specifier|private
specifier|final
name|ActionListener
argument_list|<
name|GetFieldMappingsResponse
argument_list|>
name|listener
decl_stmt|;
DECL|field|mappingsIdPerIndex
specifier|private
specifier|final
name|ObjectIntOpenHashMap
argument_list|<
name|String
argument_list|>
name|mappingsIdPerIndex
decl_stmt|;
DECL|field|pendingRequests
specifier|private
specifier|final
name|AtomicInteger
name|pendingRequests
decl_stmt|;
DECL|field|indexErrors
specifier|private
specifier|final
name|AtomicArray
argument_list|<
name|Throwable
argument_list|>
name|indexErrors
decl_stmt|;
DECL|field|indexMappings
specifier|private
specifier|final
name|AtomicArray
argument_list|<
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|FieldMappingMetaData
argument_list|>
argument_list|>
argument_list|>
name|indexMappings
decl_stmt|;
DECL|field|shardsPerIndex
specifier|private
specifier|final
name|ShardIterator
index|[]
name|shardsPerIndex
decl_stmt|;
DECL|method|AsyncAction
name|AsyncAction
parameter_list|(
name|GetFieldMappingsRequest
name|origRequest
parameter_list|,
name|ActionListener
argument_list|<
name|GetFieldMappingsResponse
argument_list|>
name|listener
parameter_list|)
block|{
name|this
operator|.
name|origRequest
operator|=
name|origRequest
expr_stmt|;
name|this
operator|.
name|listener
operator|=
name|listener
expr_stmt|;
name|this
operator|.
name|state
operator|=
name|clusterService
operator|.
name|state
argument_list|()
expr_stmt|;
name|String
index|[]
name|concreteIndices
init|=
name|state
operator|.
name|metaData
argument_list|()
operator|.
name|concreteIndices
argument_list|(
name|origRequest
operator|.
name|indices
argument_list|()
argument_list|,
name|origRequest
operator|.
name|indicesOptions
argument_list|()
argument_list|)
decl_stmt|;
comment|// normalize, will be used in the response construction.
name|origRequest
operator|.
name|indices
argument_list|(
name|concreteIndices
argument_list|)
expr_stmt|;
name|mappingsIdPerIndex
operator|=
operator|new
name|ObjectIntOpenHashMap
argument_list|<
name|String
argument_list|>
argument_list|(
name|concreteIndices
operator|.
name|length
argument_list|)
expr_stmt|;
name|pendingRequests
operator|=
operator|new
name|AtomicInteger
argument_list|()
expr_stmt|;
name|indexErrors
operator|=
operator|new
name|AtomicArray
argument_list|<
name|Throwable
argument_list|>
argument_list|(
name|concreteIndices
operator|.
name|length
argument_list|)
expr_stmt|;
name|indexMappings
operator|=
operator|new
name|AtomicArray
argument_list|<
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|FieldMappingMetaData
argument_list|>
argument_list|>
argument_list|>
argument_list|(
name|concreteIndices
operator|.
name|length
argument_list|)
expr_stmt|;
name|shardsPerIndex
operator|=
operator|new
name|ShardIterator
index|[
name|concreteIndices
operator|.
name|length
index|]
expr_stmt|;
comment|// make sure we don't have hot shards
name|int
name|shardSeed
init|=
name|shardPicker
operator|.
name|getAndIncrement
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|id
init|=
literal|0
init|;
name|id
operator|<
name|concreteIndices
operator|.
name|length
condition|;
name|id
operator|++
control|)
block|{
name|String
name|index
init|=
name|concreteIndices
index|[
name|id
index|]
decl_stmt|;
name|mappingsIdPerIndex
operator|.
name|put
argument_list|(
name|index
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|int
name|shardNo
init|=
name|state
operator|.
name|metaData
argument_list|()
operator|.
name|getIndices
argument_list|()
operator|.
name|get
argument_list|(
name|index
argument_list|)
operator|.
name|getNumberOfShards
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|shard
init|=
name|shardNo
operator|-
literal|1
init|;
name|shard
operator|>=
literal|0
condition|;
name|shard
operator|--
control|)
block|{
try|try
block|{
name|shardsPerIndex
index|[
name|id
index|]
operator|=
name|clusterService
operator|.
name|operationRouting
argument_list|()
operator|.
name|getShards
argument_list|(
name|state
argument_list|,
name|index
argument_list|,
operator|(
name|shard
operator|+
name|shardSeed
operator|)
operator|%
name|shardNo
argument_list|,
literal|"_local"
argument_list|)
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|IndexShardMissingException
name|e
parameter_list|)
block|{
if|if
condition|(
name|shard
operator|==
literal|0
condition|)
block|{
comment|// out of shards...
throw|throw
name|e
throw|;
block|}
block|}
block|}
block|}
block|}
DECL|method|start
specifier|public
name|void
name|start
parameter_list|()
block|{
name|sendNodeRequestsForIndices
argument_list|(
name|origRequest
operator|.
name|indices
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|sendNodeRequestsForIndices
specifier|private
name|void
name|sendNodeRequestsForIndices
parameter_list|(
name|String
index|[]
name|indices
parameter_list|)
block|{
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|indicesPerNode
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|indices
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|index
init|=
name|indices
index|[
name|i
index|]
decl_stmt|;
name|int
name|id
init|=
name|mappingsIdPerIndex
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|ShardRouting
name|routing
init|=
name|shardsPerIndex
index|[
name|id
index|]
operator|.
name|firstOrNull
argument_list|()
decl_stmt|;
if|if
condition|(
name|routing
operator|==
literal|null
condition|)
block|{
assert|assert
literal|false
operator|:
literal|"empty shard iterator for index ["
operator|+
name|index
operator|+
literal|"]"
assert|;
continue|continue;
comment|// shouldn't really happen
block|}
name|List
argument_list|<
name|String
argument_list|>
name|indexList
init|=
name|indicesPerNode
operator|.
name|get
argument_list|(
name|routing
operator|.
name|currentNodeId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexList
operator|==
literal|null
condition|)
block|{
name|indexList
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|indicesPerNode
operator|.
name|put
argument_list|(
name|routing
operator|.
name|currentNodeId
argument_list|()
argument_list|,
name|indexList
argument_list|)
expr_stmt|;
block|}
name|indexList
operator|.
name|add
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
name|logger
operator|.
name|trace
argument_list|(
literal|"forwarding request to [{}] nodes"
argument_list|,
name|indicesPerNode
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|pendingRequests
operator|.
name|addAndGet
argument_list|(
name|indicesPerNode
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|DiscoveryNodes
name|nodes
init|=
name|state
operator|.
name|nodes
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|nodeId
range|:
name|indicesPerNode
operator|.
name|keySet
argument_list|()
control|)
block|{
specifier|final
name|GetFieldMappingsRequest
name|nodeRequest
init|=
operator|new
name|GetFieldMappingsRequest
argument_list|(
name|origRequest
argument_list|)
decl_stmt|;
name|nodeRequest
operator|.
name|local
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|nodeRequest
operator|.
name|indices
argument_list|(
name|indicesPerNode
operator|.
name|get
argument_list|(
name|nodeId
argument_list|)
operator|.
name|toArray
argument_list|(
name|Strings
operator|.
name|EMPTY_ARRAY
argument_list|)
argument_list|)
expr_stmt|;
name|nodeRequest
operator|.
name|indicesOptions
argument_list|(
name|IndicesOptions
operator|.
name|fromOptions
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|nodes
operator|.
name|localNodeId
argument_list|()
operator|.
name|equals
argument_list|(
name|nodeId
argument_list|)
condition|)
block|{
try|try
block|{
name|handleNodeResponse
argument_list|(
name|findMappings
argument_list|(
name|nodeRequest
operator|.
name|indices
argument_list|()
argument_list|,
name|nodeRequest
operator|.
name|types
argument_list|()
argument_list|,
name|nodeRequest
operator|.
name|fields
argument_list|()
argument_list|,
name|nodeRequest
operator|.
name|includeDefaults
argument_list|()
argument_list|)
argument_list|,
name|nodeRequest
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|handleNodeException
argument_list|(
name|t
argument_list|,
name|nodeRequest
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{                      }
block|}
else|else
block|{
name|transportService
operator|.
name|sendRequest
argument_list|(
name|nodes
operator|.
name|get
argument_list|(
name|nodeId
argument_list|)
argument_list|,
name|GetFieldMappingsAction
operator|.
name|NAME
argument_list|,
name|nodeRequest
argument_list|,
operator|new
name|BaseTransportResponseHandler
argument_list|<
name|GetFieldMappingsResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|GetFieldMappingsResponse
name|newInstance
parameter_list|()
block|{
return|return
operator|new
name|GetFieldMappingsResponse
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleResponse
parameter_list|(
name|GetFieldMappingsResponse
name|nodeResponse
parameter_list|)
block|{
name|handleNodeResponse
argument_list|(
name|nodeResponse
operator|.
name|mappings
argument_list|()
argument_list|,
name|nodeRequest
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleException
parameter_list|(
name|TransportException
name|exp
parameter_list|)
block|{
name|handleNodeException
argument_list|(
name|exp
argument_list|,
name|nodeRequest
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|executor
parameter_list|()
block|{
return|return
name|ThreadPool
operator|.
name|Names
operator|.
name|SAME
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|handleNodeException
specifier|protected
name|void
name|handleNodeException
parameter_list|(
name|Throwable
name|exp
parameter_list|,
name|GetFieldMappingsRequest
name|nodeRequest
parameter_list|)
block|{
try|try
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|retryIndices
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|index
range|:
name|nodeRequest
operator|.
name|indices
argument_list|()
control|)
block|{
name|int
name|id
init|=
name|mappingsIdPerIndex
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|shardsPerIndex
index|[
name|id
index|]
operator|.
name|nextOrNull
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|// nope.
name|indexErrors
operator|.
name|set
argument_list|(
name|id
argument_list|,
name|exp
argument_list|)
expr_stmt|;
comment|// no point in trying, we will return an error
name|retryIndices
operator|.
name|clear
argument_list|()
expr_stmt|;
break|break;
block|}
else|else
block|{
name|retryIndices
operator|.
name|add
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|retryIndices
operator|.
name|size
argument_list|()
operator|!=
literal|0
condition|)
block|{
comment|// resend requests for failed indices
name|sendNodeRequestsForIndices
argument_list|(
name|retryIndices
operator|.
name|toArray
argument_list|(
name|Strings
operator|.
name|EMPTY_ARRAY
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|pendingRequests
operator|.
name|decrementAndGet
argument_list|()
operator|==
literal|0
condition|)
block|{
name|finnishHim
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|handleNodeResponse
specifier|private
name|void
name|handleNodeResponse
parameter_list|(
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|FieldMappingMetaData
argument_list|>
argument_list|>
argument_list|>
name|mappings
parameter_list|,
name|GetFieldMappingsRequest
name|nodeRequest
parameter_list|)
block|{
try|try
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|retryIndices
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|index
range|:
name|nodeRequest
operator|.
name|indices
argument_list|()
control|)
block|{
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|FieldMappingMetaData
argument_list|>
argument_list|>
name|indexMapping
init|=
name|mappings
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|int
name|id
init|=
name|mappingsIdPerIndex
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexMapping
operator|==
literal|null
condition|)
block|{
comment|// advance the relevant iter, hopefully we have more.
if|if
condition|(
name|shardsPerIndex
index|[
name|id
index|]
operator|.
name|nextOrNull
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|// nope.
name|indexErrors
operator|.
name|set
argument_list|(
name|id
argument_list|,
operator|new
name|IndexShardMissingException
argument_list|(
name|shardsPerIndex
index|[
name|id
index|]
operator|.
name|shardId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// no point in trying, we will return an error
name|retryIndices
operator|.
name|clear
argument_list|()
expr_stmt|;
break|break;
block|}
else|else
block|{
name|retryIndices
operator|.
name|add
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|indexMappings
operator|.
name|set
argument_list|(
name|id
argument_list|,
name|indexMapping
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|retryIndices
operator|.
name|size
argument_list|()
operator|!=
literal|0
condition|)
block|{
comment|// resend requests for failed indices
name|sendNodeRequestsForIndices
argument_list|(
name|retryIndices
operator|.
name|toArray
argument_list|(
name|Strings
operator|.
name|EMPTY_ARRAY
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|pendingRequests
operator|.
name|decrementAndGet
argument_list|()
operator|==
literal|0
condition|)
block|{
name|finnishHim
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|finnishHim
specifier|private
name|void
name|finnishHim
parameter_list|()
block|{
comment|// for simplicity, just return an error if we had any
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|indexErrors
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|indexErrors
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|listener
operator|.
name|onFailure
argument_list|(
name|indexErrors
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|ImmutableMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|FieldMappingMetaData
argument_list|>
argument_list|>
argument_list|>
name|indexMapBuilder
init|=
name|ImmutableMap
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|id
init|=
literal|0
init|;
name|id
operator|<
name|origRequest
operator|.
name|indices
argument_list|()
operator|.
name|length
condition|;
name|id
operator|++
control|)
block|{
name|indexMapBuilder
operator|.
name|put
argument_list|(
name|origRequest
operator|.
name|indices
argument_list|()
index|[
name|id
index|]
argument_list|,
name|indexMappings
operator|.
name|get
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|GetFieldMappingsResponse
name|response
init|=
operator|new
name|GetFieldMappingsResponse
argument_list|(
name|indexMapBuilder
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|listener
operator|.
name|onResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|findMappings
specifier|private
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|FieldMappingMetaData
argument_list|>
argument_list|>
argument_list|>
name|findMappings
parameter_list|(
name|String
index|[]
name|concreteIndices
parameter_list|,
specifier|final
name|String
index|[]
name|types
parameter_list|,
specifier|final
name|String
index|[]
name|fields
parameter_list|,
name|boolean
name|includeDefaults
parameter_list|)
block|{
assert|assert
name|types
operator|!=
literal|null
assert|;
assert|assert
name|concreteIndices
operator|!=
literal|null
assert|;
if|if
condition|(
name|concreteIndices
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
name|ImmutableMap
operator|.
name|of
argument_list|()
return|;
block|}
name|boolean
name|isProbablySingleFieldRequest
init|=
name|concreteIndices
operator|.
name|length
operator|==
literal|1
operator|&&
name|types
operator|.
name|length
operator|==
literal|1
operator|&&
name|fields
operator|.
name|length
operator|==
literal|1
decl_stmt|;
name|ImmutableMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|FieldMappingMetaData
argument_list|>
argument_list|>
argument_list|>
name|indexMapBuilder
init|=
name|ImmutableMap
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|index
range|:
name|concreteIndices
control|)
block|{
name|IndexService
name|indexService
init|=
name|indicesService
operator|.
name|indexService
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexService
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|Collection
argument_list|<
name|String
argument_list|>
name|typeIntersection
decl_stmt|;
if|if
condition|(
name|types
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|typeIntersection
operator|=
name|indexService
operator|.
name|mapperService
argument_list|()
operator|.
name|types
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|typeIntersection
operator|=
name|Collections2
operator|.
name|filter
argument_list|(
name|indexService
operator|.
name|mapperService
argument_list|()
operator|.
name|types
argument_list|()
argument_list|,
operator|new
name|Predicate
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|String
name|type
parameter_list|)
block|{
return|return
name|Regex
operator|.
name|simpleMatch
argument_list|(
name|types
argument_list|,
name|type
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|MapBuilder
argument_list|<
name|String
argument_list|,
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|FieldMappingMetaData
argument_list|>
argument_list|>
name|typeMappings
init|=
operator|new
name|MapBuilder
argument_list|<
name|String
argument_list|,
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|FieldMappingMetaData
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|type
range|:
name|typeIntersection
control|)
block|{
name|DocumentMapper
name|documentMapper
init|=
name|indexService
operator|.
name|mapperService
argument_list|()
operator|.
name|documentMapper
argument_list|(
name|type
argument_list|)
decl_stmt|;
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|FieldMappingMetaData
argument_list|>
name|fieldMapping
init|=
name|findFieldMappingsByType
argument_list|(
name|documentMapper
argument_list|,
name|fields
argument_list|,
name|includeDefaults
argument_list|,
name|isProbablySingleFieldRequest
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fieldMapping
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|typeMappings
operator|.
name|put
argument_list|(
name|type
argument_list|,
name|fieldMapping
argument_list|)
expr_stmt|;
block|}
block|}
name|indexMapBuilder
operator|.
name|put
argument_list|(
name|index
argument_list|,
name|typeMappings
operator|.
name|immutableMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|indexMapBuilder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|field|includeDefaultsParams
specifier|private
specifier|static
specifier|final
name|ToXContent
operator|.
name|Params
name|includeDefaultsParams
init|=
operator|new
name|ToXContent
operator|.
name|Params
argument_list|()
block|{
specifier|final
specifier|static
name|String
name|INCLUDE_DEFAULTS
init|=
literal|"include_defaults"
decl_stmt|;
annotation|@
name|Override
specifier|public
name|String
name|param
parameter_list|(
name|String
name|key
parameter_list|)
block|{
if|if
condition|(
name|INCLUDE_DEFAULTS
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|)
block|{
return|return
literal|"true"
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|param
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|defaultValue
parameter_list|)
block|{
if|if
condition|(
name|INCLUDE_DEFAULTS
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|)
block|{
return|return
literal|"true"
return|;
block|}
return|return
name|defaultValue
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|paramAsBoolean
parameter_list|(
name|String
name|key
parameter_list|,
name|boolean
name|defaultValue
parameter_list|)
block|{
if|if
condition|(
name|INCLUDE_DEFAULTS
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
name|defaultValue
return|;
block|}
specifier|public
name|Boolean
name|paramAsBoolean
parameter_list|(
name|String
name|key
parameter_list|,
name|Boolean
name|defaultValue
parameter_list|)
block|{
if|if
condition|(
name|INCLUDE_DEFAULTS
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
name|defaultValue
return|;
block|}
annotation|@
name|Override
annotation|@
name|Deprecated
specifier|public
name|Boolean
name|paramAsBooleanOptional
parameter_list|(
name|String
name|key
parameter_list|,
name|Boolean
name|defaultValue
parameter_list|)
block|{
return|return
name|paramAsBoolean
argument_list|(
name|key
argument_list|,
name|defaultValue
argument_list|)
return|;
block|}
block|}
decl_stmt|;
DECL|method|findFieldMappingsByType
specifier|private
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|FieldMappingMetaData
argument_list|>
name|findFieldMappingsByType
parameter_list|(
name|DocumentMapper
name|documentMapper
parameter_list|,
name|String
index|[]
name|fields
parameter_list|,
name|boolean
name|includeDefaults
parameter_list|,
name|boolean
name|isProbablySingleFieldRequest
parameter_list|)
throws|throws
name|ElasticsearchException
block|{
name|MapBuilder
argument_list|<
name|String
argument_list|,
name|FieldMappingMetaData
argument_list|>
name|fieldMappings
init|=
operator|new
name|MapBuilder
argument_list|<
name|String
argument_list|,
name|FieldMappingMetaData
argument_list|>
argument_list|()
decl_stmt|;
name|ImmutableList
argument_list|<
name|FieldMapper
argument_list|>
name|allFieldMappers
init|=
name|documentMapper
operator|.
name|mappers
argument_list|()
operator|.
name|mappers
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|field
range|:
name|fields
control|)
block|{
if|if
condition|(
name|Regex
operator|.
name|isMatchAllPattern
argument_list|(
name|field
argument_list|)
condition|)
block|{
for|for
control|(
name|FieldMapper
name|fieldMapper
range|:
name|allFieldMappers
control|)
block|{
name|addFieldMapper
argument_list|(
name|fieldMapper
operator|.
name|names
argument_list|()
operator|.
name|fullName
argument_list|()
argument_list|,
name|fieldMapper
argument_list|,
name|fieldMappings
argument_list|,
name|includeDefaults
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|Regex
operator|.
name|isSimpleMatchPattern
argument_list|(
name|field
argument_list|)
condition|)
block|{
comment|// go through the field mappers 3 times, to make sure we give preference to the resolve order: full name, index name, name.
comment|// also make sure we only store each mapper once.
name|boolean
index|[]
name|resolved
init|=
operator|new
name|boolean
index|[
name|allFieldMappers
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|allFieldMappers
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|FieldMapper
name|fieldMapper
init|=
name|allFieldMappers
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|Regex
operator|.
name|simpleMatch
argument_list|(
name|field
argument_list|,
name|fieldMapper
operator|.
name|names
argument_list|()
operator|.
name|fullName
argument_list|()
argument_list|)
condition|)
block|{
name|addFieldMapper
argument_list|(
name|fieldMapper
operator|.
name|names
argument_list|()
operator|.
name|fullName
argument_list|()
argument_list|,
name|fieldMapper
argument_list|,
name|fieldMappings
argument_list|,
name|includeDefaults
argument_list|)
expr_stmt|;
name|resolved
index|[
name|i
index|]
operator|=
literal|true
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|allFieldMappers
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|resolved
index|[
name|i
index|]
condition|)
block|{
continue|continue;
block|}
name|FieldMapper
name|fieldMapper
init|=
name|allFieldMappers
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|Regex
operator|.
name|simpleMatch
argument_list|(
name|field
argument_list|,
name|fieldMapper
operator|.
name|names
argument_list|()
operator|.
name|indexName
argument_list|()
argument_list|)
condition|)
block|{
name|addFieldMapper
argument_list|(
name|fieldMapper
operator|.
name|names
argument_list|()
operator|.
name|indexName
argument_list|()
argument_list|,
name|fieldMapper
argument_list|,
name|fieldMappings
argument_list|,
name|includeDefaults
argument_list|)
expr_stmt|;
name|resolved
index|[
name|i
index|]
operator|=
literal|true
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|allFieldMappers
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|resolved
index|[
name|i
index|]
condition|)
block|{
continue|continue;
block|}
name|FieldMapper
name|fieldMapper
init|=
name|allFieldMappers
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|Regex
operator|.
name|simpleMatch
argument_list|(
name|field
argument_list|,
name|fieldMapper
operator|.
name|names
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
condition|)
block|{
name|addFieldMapper
argument_list|(
name|fieldMapper
operator|.
name|names
argument_list|()
operator|.
name|name
argument_list|()
argument_list|,
name|fieldMapper
argument_list|,
name|fieldMappings
argument_list|,
name|includeDefaults
argument_list|)
expr_stmt|;
name|resolved
index|[
name|i
index|]
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// not a pattern
name|FieldMapper
name|fieldMapper
init|=
name|documentMapper
operator|.
name|mappers
argument_list|()
operator|.
name|smartNameFieldMapper
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|fieldMapper
operator|!=
literal|null
condition|)
block|{
name|addFieldMapper
argument_list|(
name|field
argument_list|,
name|fieldMapper
argument_list|,
name|fieldMappings
argument_list|,
name|includeDefaults
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|isProbablySingleFieldRequest
condition|)
block|{
name|fieldMappings
operator|.
name|put
argument_list|(
name|field
argument_list|,
name|FieldMappingMetaData
operator|.
name|NULL
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|fieldMappings
operator|.
name|immutableMap
argument_list|()
return|;
block|}
DECL|method|addFieldMapper
specifier|private
name|void
name|addFieldMapper
parameter_list|(
name|String
name|field
parameter_list|,
name|FieldMapper
name|fieldMapper
parameter_list|,
name|MapBuilder
argument_list|<
name|String
argument_list|,
name|FieldMappingMetaData
argument_list|>
name|fieldMappings
parameter_list|,
name|boolean
name|includeDefaults
parameter_list|)
block|{
if|if
condition|(
name|fieldMappings
operator|.
name|containsKey
argument_list|(
name|field
argument_list|)
condition|)
block|{
return|return;
block|}
try|try
block|{
name|XContentBuilder
name|builder
init|=
name|XContentFactory
operator|.
name|contentBuilder
argument_list|(
name|XContentType
operator|.
name|JSON
argument_list|)
decl_stmt|;
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|fieldMapper
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|includeDefaults
condition|?
name|includeDefaultsParams
else|:
name|ToXContent
operator|.
name|EMPTY_PARAMS
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|fieldMappings
operator|.
name|put
argument_list|(
name|field
argument_list|,
operator|new
name|FieldMappingMetaData
argument_list|(
name|fieldMapper
operator|.
name|names
argument_list|()
operator|.
name|fullName
argument_list|()
argument_list|,
name|builder
operator|.
name|bytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ElasticsearchException
argument_list|(
literal|"failed to serialize XContent of field ["
operator|+
name|field
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|class|TransportHandler
specifier|private
class|class
name|TransportHandler
extends|extends
name|BaseTransportRequestHandler
argument_list|<
name|GetFieldMappingsRequest
argument_list|>
block|{
annotation|@
name|Override
DECL|method|newInstance
specifier|public
name|GetFieldMappingsRequest
name|newInstance
parameter_list|()
block|{
return|return
operator|new
name|GetFieldMappingsRequest
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|messageReceived
specifier|public
name|void
name|messageReceived
parameter_list|(
name|GetFieldMappingsRequest
name|request
parameter_list|,
specifier|final
name|TransportChannel
name|channel
parameter_list|)
throws|throws
name|Exception
block|{
comment|// no need to use threaded listener, since we just send a response
name|request
operator|.
name|listenerThreaded
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|execute
argument_list|(
name|request
argument_list|,
operator|new
name|ActionListener
argument_list|<
name|GetFieldMappingsResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|GetFieldMappingsResponse
name|result
parameter_list|)
block|{
try|try
block|{
name|channel
operator|.
name|sendResponse
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|onFailure
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
try|try
block|{
name|channel
operator|.
name|sendResponse
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e1
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Failed to send response for get field mapping"
argument_list|,
name|e1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|executor
specifier|public
name|String
name|executor
parameter_list|()
block|{
return|return
name|ThreadPool
operator|.
name|Names
operator|.
name|SAME
return|;
block|}
block|}
block|}
end_class

end_unit

