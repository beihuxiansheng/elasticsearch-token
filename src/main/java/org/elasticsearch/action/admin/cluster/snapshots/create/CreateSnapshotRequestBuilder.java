begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.admin.cluster.snapshots.create
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|snapshots
operator|.
name|create
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|IndicesOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|master
operator|.
name|MasterNodeOperationRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|ClusterAdminClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|internal
operator|.
name|InternalClusterAdminClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Create snapshot request builder  */
end_comment

begin_class
DECL|class|CreateSnapshotRequestBuilder
specifier|public
class|class
name|CreateSnapshotRequestBuilder
extends|extends
name|MasterNodeOperationRequestBuilder
argument_list|<
name|CreateSnapshotRequest
argument_list|,
name|CreateSnapshotResponse
argument_list|,
name|CreateSnapshotRequestBuilder
argument_list|>
block|{
comment|/**      * Constructs a new create snapshot request builder      *      * @param clusterAdminClient cluster admin client      */
DECL|method|CreateSnapshotRequestBuilder
specifier|public
name|CreateSnapshotRequestBuilder
parameter_list|(
name|ClusterAdminClient
name|clusterAdminClient
parameter_list|)
block|{
name|super
argument_list|(
operator|(
name|InternalClusterAdminClient
operator|)
name|clusterAdminClient
argument_list|,
operator|new
name|CreateSnapshotRequest
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructs a new create snapshot request builder with specified repository and snapshot names      *      * @param clusterAdminClient cluster admin client      * @param repository         repository name      * @param snapshot           snapshot name      */
DECL|method|CreateSnapshotRequestBuilder
specifier|public
name|CreateSnapshotRequestBuilder
parameter_list|(
name|ClusterAdminClient
name|clusterAdminClient
parameter_list|,
name|String
name|repository
parameter_list|,
name|String
name|snapshot
parameter_list|)
block|{
name|super
argument_list|(
operator|(
name|InternalClusterAdminClient
operator|)
name|clusterAdminClient
argument_list|,
operator|new
name|CreateSnapshotRequest
argument_list|(
name|repository
argument_list|,
name|snapshot
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets the snapshot name      *      * @param snapshot snapshot name      * @return this builder      */
DECL|method|setSnapshot
specifier|public
name|CreateSnapshotRequestBuilder
name|setSnapshot
parameter_list|(
name|String
name|snapshot
parameter_list|)
block|{
name|request
operator|.
name|snapshot
argument_list|(
name|snapshot
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the repository name      *      * @param repository repository name      * @return this builder      */
DECL|method|setRepository
specifier|public
name|CreateSnapshotRequestBuilder
name|setRepository
parameter_list|(
name|String
name|repository
parameter_list|)
block|{
name|request
operator|.
name|repository
argument_list|(
name|repository
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets a list of indices that should be included into the snapshot      *<p/>      * The list of indices supports multi-index syntax. For example: "+test*" ,"-test42" will index all indices with      * prefix "test" except index "test42". Aliases are supported. An empty list or {"_all"} will snapshot all open      * indices in the cluster.      *      * @param indices      * @return this builder      */
DECL|method|setIndices
specifier|public
name|CreateSnapshotRequestBuilder
name|setIndices
parameter_list|(
name|String
modifier|...
name|indices
parameter_list|)
block|{
name|request
operator|.
name|indices
argument_list|(
name|indices
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Specifies the indices options. Like what type of requested indices to ignore. For example indices that don't exist.      *      * @param indicesOptions the desired behaviour regarding indices options      * @return this request      */
DECL|method|setIndicesOptions
specifier|public
name|CreateSnapshotRequestBuilder
name|setIndicesOptions
parameter_list|(
name|IndicesOptions
name|indicesOptions
parameter_list|)
block|{
name|request
operator|.
name|indicesOptions
argument_list|(
name|indicesOptions
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * If set to true the request should wait for the snapshot completion before returning.      *      * @param waitForCompletion true if      * @return this builder      */
DECL|method|setWaitForCompletion
specifier|public
name|CreateSnapshotRequestBuilder
name|setWaitForCompletion
parameter_list|(
name|boolean
name|waitForCompletion
parameter_list|)
block|{
name|request
operator|.
name|waitForCompletion
argument_list|(
name|waitForCompletion
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets repository-specific snapshot settings.      *<p/>      * See repository documentation for more information.      *      * @param settings repository-specific snapshot settings      * @return this builder      */
DECL|method|setSettings
specifier|public
name|CreateSnapshotRequestBuilder
name|setSettings
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
name|request
operator|.
name|settings
argument_list|(
name|settings
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets repository-specific snapshot settings.      *<p/>      * See repository documentation for more information.      *      * @param settings repository-specific snapshot settings      * @return this builder      */
DECL|method|setSettings
specifier|public
name|CreateSnapshotRequestBuilder
name|setSettings
parameter_list|(
name|Settings
operator|.
name|Builder
name|settings
parameter_list|)
block|{
name|request
operator|.
name|settings
argument_list|(
name|settings
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets repository-specific snapshot settings in YAML, JSON or properties format      *<p/>      * See repository documentation for more information.      *      * @param source repository-specific snapshot settings      * @return this builder      */
DECL|method|setSettings
specifier|public
name|CreateSnapshotRequestBuilder
name|setSettings
parameter_list|(
name|String
name|source
parameter_list|)
block|{
name|request
operator|.
name|settings
argument_list|(
name|source
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets repository-specific snapshot settings.      *<p/>      * See repository documentation for more information.      *      * @param settings repository-specific snapshot settings      * @return this builder      */
DECL|method|setSettings
specifier|public
name|CreateSnapshotRequestBuilder
name|setSettings
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|settings
parameter_list|)
block|{
name|request
operator|.
name|settings
argument_list|(
name|settings
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Set to true if snapshot should include global cluster state      *      * @param includeGlobalState true if snapshot should include global cluster state      * @return this builder      */
DECL|method|setIncludeGlobalState
specifier|public
name|CreateSnapshotRequestBuilder
name|setIncludeGlobalState
parameter_list|(
name|boolean
name|includeGlobalState
parameter_list|)
block|{
name|request
operator|.
name|includeGlobalState
argument_list|(
name|includeGlobalState
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|doExecute
specifier|protected
name|void
name|doExecute
parameter_list|(
name|ActionListener
argument_list|<
name|CreateSnapshotResponse
argument_list|>
name|listener
parameter_list|)
block|{
operator|(
operator|(
name|ClusterAdminClient
operator|)
name|client
operator|)
operator|.
name|createSnapshot
argument_list|(
name|request
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

