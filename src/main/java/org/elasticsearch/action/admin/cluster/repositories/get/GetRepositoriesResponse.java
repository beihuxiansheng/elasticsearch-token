begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.admin.cluster.repositories.get
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|repositories
operator|.
name|get
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|RepositoryMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_comment
comment|/**  * Get repositories response  */
end_comment

begin_class
DECL|class|GetRepositoriesResponse
specifier|public
class|class
name|GetRepositoriesResponse
extends|extends
name|ActionResponse
implements|implements
name|Iterable
argument_list|<
name|RepositoryMetaData
argument_list|>
block|{
DECL|field|repositories
specifier|private
name|ImmutableList
argument_list|<
name|RepositoryMetaData
argument_list|>
name|repositories
init|=
name|ImmutableList
operator|.
name|of
argument_list|()
decl_stmt|;
DECL|method|GetRepositoriesResponse
name|GetRepositoriesResponse
parameter_list|()
block|{     }
DECL|method|GetRepositoriesResponse
name|GetRepositoriesResponse
parameter_list|(
name|ImmutableList
argument_list|<
name|RepositoryMetaData
argument_list|>
name|repositories
parameter_list|)
block|{
name|this
operator|.
name|repositories
operator|=
name|repositories
expr_stmt|;
block|}
comment|/**      * List of repositories to return      *      * @return list or repositories      */
DECL|method|repositories
specifier|public
name|ImmutableList
argument_list|<
name|RepositoryMetaData
argument_list|>
name|repositories
parameter_list|()
block|{
return|return
name|repositories
return|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|int
name|size
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|RepositoryMetaData
argument_list|>
name|repositoryListBuilder
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|size
condition|;
name|j
operator|++
control|)
block|{
name|repositoryListBuilder
operator|.
name|add
argument_list|(
operator|new
name|RepositoryMetaData
argument_list|(
name|in
operator|.
name|readString
argument_list|()
argument_list|,
name|in
operator|.
name|readString
argument_list|()
argument_list|,
name|ImmutableSettings
operator|.
name|readSettingsFromStream
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|repositories
operator|=
name|repositoryListBuilder
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|repositories
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|RepositoryMetaData
name|repository
range|:
name|repositories
control|)
block|{
name|out
operator|.
name|writeString
argument_list|(
name|repository
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeString
argument_list|(
name|repository
operator|.
name|type
argument_list|()
argument_list|)
expr_stmt|;
name|ImmutableSettings
operator|.
name|writeSettingsToStream
argument_list|(
name|repository
operator|.
name|settings
argument_list|()
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Iterator over the repositories data      *      * @return iterator over the repositories data      */
annotation|@
name|Override
DECL|method|iterator
specifier|public
name|Iterator
argument_list|<
name|RepositoryMetaData
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|repositories
operator|.
name|iterator
argument_list|()
return|;
block|}
block|}
end_class

end_unit

