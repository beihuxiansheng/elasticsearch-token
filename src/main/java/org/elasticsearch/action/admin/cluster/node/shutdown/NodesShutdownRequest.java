begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.admin.cluster.node.shutdown
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|node
operator|.
name|shutdown
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionRequestValidationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|master
operator|.
name|MasterNodeOperationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * @author kimchy (shay.banon)  */
end_comment

begin_class
DECL|class|NodesShutdownRequest
specifier|public
class|class
name|NodesShutdownRequest
extends|extends
name|MasterNodeOperationRequest
block|{
DECL|field|nodesIds
name|String
index|[]
name|nodesIds
init|=
name|Strings
operator|.
name|EMPTY_ARRAY
decl_stmt|;
DECL|field|delay
name|TimeValue
name|delay
init|=
name|TimeValue
operator|.
name|timeValueSeconds
argument_list|(
literal|1
argument_list|)
decl_stmt|;
DECL|field|exit
name|boolean
name|exit
init|=
literal|true
decl_stmt|;
DECL|method|NodesShutdownRequest
name|NodesShutdownRequest
parameter_list|()
block|{     }
DECL|method|NodesShutdownRequest
specifier|public
name|NodesShutdownRequest
parameter_list|(
name|String
modifier|...
name|nodesIds
parameter_list|)
block|{
name|this
operator|.
name|nodesIds
operator|=
name|nodesIds
expr_stmt|;
block|}
DECL|method|nodesIds
specifier|public
name|NodesShutdownRequest
name|nodesIds
parameter_list|(
name|String
modifier|...
name|nodesIds
parameter_list|)
block|{
name|this
operator|.
name|nodesIds
operator|=
name|nodesIds
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * The delay for the shutdown to occur. Defaults to<tt>1s</tt>.      */
DECL|method|delay
specifier|public
name|NodesShutdownRequest
name|delay
parameter_list|(
name|TimeValue
name|delay
parameter_list|)
block|{
name|this
operator|.
name|delay
operator|=
name|delay
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|delay
specifier|public
name|TimeValue
name|delay
parameter_list|()
block|{
return|return
name|this
operator|.
name|delay
return|;
block|}
comment|/**      * The delay for the shutdown to occur. Defaults to<tt>1s</tt>.      */
DECL|method|delay
specifier|public
name|NodesShutdownRequest
name|delay
parameter_list|(
name|String
name|delay
parameter_list|)
block|{
return|return
name|delay
argument_list|(
name|TimeValue
operator|.
name|parseTimeValue
argument_list|(
name|delay
argument_list|,
literal|null
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Should the JVM be exited as well or not. Defaults to<tt>true</tt>.      */
DECL|method|exit
specifier|public
name|NodesShutdownRequest
name|exit
parameter_list|(
name|boolean
name|exit
parameter_list|)
block|{
name|this
operator|.
name|exit
operator|=
name|exit
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Should the JVM be exited as well or not. Defaults to<tt>true</tt>.      */
DECL|method|exit
specifier|public
name|boolean
name|exit
parameter_list|()
block|{
return|return
name|exit
return|;
block|}
DECL|method|validate
annotation|@
name|Override
specifier|public
name|ActionRequestValidationException
name|validate
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
DECL|method|readFrom
annotation|@
name|Override
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|delay
operator|=
name|readTimeValue
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|int
name|size
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|>
literal|0
condition|)
block|{
name|nodesIds
operator|=
operator|new
name|String
index|[
name|size
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodesIds
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|nodesIds
index|[
name|i
index|]
operator|=
name|in
operator|.
name|readUTF
argument_list|()
expr_stmt|;
block|}
block|}
name|exit
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
block|}
DECL|method|writeTo
annotation|@
name|Override
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|delay
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
if|if
condition|(
name|nodesIds
operator|==
literal|null
condition|)
block|{
name|out
operator|.
name|writeVInt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeVInt
argument_list|(
name|nodesIds
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|nodeId
range|:
name|nodesIds
control|)
block|{
name|out
operator|.
name|writeUTF
argument_list|(
name|nodeId
argument_list|)
expr_stmt|;
block|}
block|}
name|out
operator|.
name|writeBoolean
argument_list|(
name|exit
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

