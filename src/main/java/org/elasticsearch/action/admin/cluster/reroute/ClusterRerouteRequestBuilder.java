begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.admin.cluster.reroute
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|reroute
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|master
operator|.
name|AcknowledgedRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|ClusterAdminClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|internal
operator|.
name|InternalClusterAdminClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|command
operator|.
name|AllocationCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_comment
comment|/**  * Builder for a cluster reroute request  */
end_comment

begin_class
DECL|class|ClusterRerouteRequestBuilder
specifier|public
class|class
name|ClusterRerouteRequestBuilder
extends|extends
name|AcknowledgedRequestBuilder
argument_list|<
name|ClusterRerouteRequest
argument_list|,
name|ClusterRerouteResponse
argument_list|,
name|ClusterRerouteRequestBuilder
argument_list|>
block|{
DECL|method|ClusterRerouteRequestBuilder
specifier|public
name|ClusterRerouteRequestBuilder
parameter_list|(
name|ClusterAdminClient
name|clusterClient
parameter_list|)
block|{
name|super
argument_list|(
operator|(
name|InternalClusterAdminClient
operator|)
name|clusterClient
argument_list|,
operator|new
name|ClusterRerouteRequest
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Adds allocation commands to be applied to the cluster. Note, can be empty, in which case      * will simply run a simple "reroute".      */
DECL|method|add
specifier|public
name|ClusterRerouteRequestBuilder
name|add
parameter_list|(
name|AllocationCommand
modifier|...
name|commands
parameter_list|)
block|{
name|request
operator|.
name|add
argument_list|(
name|commands
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets a dry run flag (defaults to<tt>false</tt>) allowing to run the commands without      * actually applying them to the cluster state, and getting the resulting cluster state back.      */
DECL|method|setDryRun
specifier|public
name|ClusterRerouteRequestBuilder
name|setDryRun
parameter_list|(
name|boolean
name|dryRun
parameter_list|)
block|{
name|request
operator|.
name|dryRun
argument_list|(
name|dryRun
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the explain flag (defaults to<tt>false</tt>). If true, the      * request will include an explanation in addition to the cluster state.      */
DECL|method|setExplain
specifier|public
name|ClusterRerouteRequestBuilder
name|setExplain
parameter_list|(
name|boolean
name|explain
parameter_list|)
block|{
name|request
operator|.
name|explain
argument_list|(
name|explain
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the source for the request      */
DECL|method|setSource
specifier|public
name|ClusterRerouteRequestBuilder
name|setSource
parameter_list|(
name|BytesReference
name|source
parameter_list|)
throws|throws
name|Exception
block|{
name|request
operator|.
name|source
argument_list|(
name|source
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|doExecute
specifier|protected
name|void
name|doExecute
parameter_list|(
name|ActionListener
argument_list|<
name|ClusterRerouteResponse
argument_list|>
name|listener
parameter_list|)
block|{
operator|(
operator|(
name|ClusterAdminClient
operator|)
name|client
operator|)
operator|.
name|reroute
argument_list|(
name|request
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

