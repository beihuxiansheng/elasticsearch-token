begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.elasticsearch.action.admin.cluster.stats
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|stats
package|;
end_package

begin_comment
comment|/*  * Licensed to ElasticSearch under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|ObjectIntOpenHashMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|cursors
operator|.
name|ObjectIntCursor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|node
operator|.
name|info
operator|.
name|NodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|node
operator|.
name|info
operator|.
name|PluginInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|node
operator|.
name|stats
operator|.
name|NodeStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Streamable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|transport
operator|.
name|InetSocketTransportAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|transport
operator|.
name|TransportAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|ByteSizeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilderString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|monitor
operator|.
name|fs
operator|.
name|FsStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|monitor
operator|.
name|jvm
operator|.
name|JvmInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|monitor
operator|.
name|os
operator|.
name|OsInfo
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_class
DECL|class|ClusterStatsNodes
specifier|public
class|class
name|ClusterStatsNodes
implements|implements
name|ToXContent
implements|,
name|Streamable
block|{
DECL|field|counts
specifier|private
name|Counts
name|counts
decl_stmt|;
DECL|field|versions
specifier|private
name|Set
argument_list|<
name|Version
argument_list|>
name|versions
decl_stmt|;
DECL|field|os
specifier|private
name|OsStats
name|os
decl_stmt|;
DECL|field|process
specifier|private
name|ProcessStats
name|process
decl_stmt|;
DECL|field|jvm
specifier|private
name|JvmStats
name|jvm
decl_stmt|;
DECL|field|fs
specifier|private
name|FsStats
operator|.
name|Info
name|fs
decl_stmt|;
DECL|field|plugins
specifier|private
name|Set
argument_list|<
name|PluginInfo
argument_list|>
name|plugins
decl_stmt|;
DECL|method|ClusterStatsNodes
specifier|private
name|ClusterStatsNodes
parameter_list|()
block|{     }
DECL|method|ClusterStatsNodes
specifier|public
name|ClusterStatsNodes
parameter_list|(
name|ClusterStatsNodeResponse
index|[]
name|nodeResponses
parameter_list|)
block|{
name|this
operator|.
name|counts
operator|=
operator|new
name|Counts
argument_list|()
expr_stmt|;
name|this
operator|.
name|versions
operator|=
operator|new
name|HashSet
argument_list|<
name|Version
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|os
operator|=
operator|new
name|OsStats
argument_list|()
expr_stmt|;
name|this
operator|.
name|jvm
operator|=
operator|new
name|JvmStats
argument_list|()
expr_stmt|;
name|this
operator|.
name|fs
operator|=
operator|new
name|FsStats
operator|.
name|Info
argument_list|()
expr_stmt|;
name|this
operator|.
name|plugins
operator|=
operator|new
name|HashSet
argument_list|<
name|PluginInfo
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|process
operator|=
operator|new
name|ProcessStats
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|InetAddress
argument_list|>
name|seenAddresses
init|=
operator|new
name|HashSet
argument_list|<
name|InetAddress
argument_list|>
argument_list|(
name|nodeResponses
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|ClusterStatsNodeResponse
name|nodeResponse
range|:
name|nodeResponses
control|)
block|{
name|counts
operator|.
name|addNodeInfo
argument_list|(
name|nodeResponse
operator|.
name|nodeInfo
argument_list|()
argument_list|)
expr_stmt|;
name|versions
operator|.
name|add
argument_list|(
name|nodeResponse
operator|.
name|nodeInfo
argument_list|()
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|process
operator|.
name|addNodeStats
argument_list|(
name|nodeResponse
operator|.
name|nodeStats
argument_list|()
argument_list|)
expr_stmt|;
name|jvm
operator|.
name|addNodeInfoStats
argument_list|(
name|nodeResponse
operator|.
name|nodeInfo
argument_list|()
argument_list|,
name|nodeResponse
operator|.
name|nodeStats
argument_list|()
argument_list|)
expr_stmt|;
name|plugins
operator|.
name|addAll
argument_list|(
name|nodeResponse
operator|.
name|nodeInfo
argument_list|()
operator|.
name|getPlugins
argument_list|()
operator|.
name|getInfos
argument_list|()
argument_list|)
expr_stmt|;
comment|// now do the stats that should be deduped by hardware (implemented by ip deduping)
name|TransportAddress
name|publishAddress
init|=
name|nodeResponse
operator|.
name|nodeInfo
argument_list|()
operator|.
name|getTransport
argument_list|()
operator|.
name|address
argument_list|()
operator|.
name|publishAddress
argument_list|()
decl_stmt|;
name|InetAddress
name|inetAddress
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|publishAddress
operator|.
name|uniqueAddressTypeId
argument_list|()
operator|==
literal|1
condition|)
block|{
name|inetAddress
operator|=
operator|(
operator|(
name|InetSocketTransportAddress
operator|)
name|publishAddress
operator|)
operator|.
name|address
argument_list|()
operator|.
name|getAddress
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|seenAddresses
operator|.
name|add
argument_list|(
name|inetAddress
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|os
operator|.
name|addNodeInfo
argument_list|(
name|nodeResponse
operator|.
name|nodeInfo
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|nodeResponse
operator|.
name|nodeStats
argument_list|()
operator|.
name|getFs
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|fs
operator|.
name|add
argument_list|(
name|nodeResponse
operator|.
name|nodeStats
argument_list|()
operator|.
name|getFs
argument_list|()
operator|.
name|total
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|getCounts
specifier|public
name|Counts
name|getCounts
parameter_list|()
block|{
return|return
name|this
operator|.
name|counts
return|;
block|}
DECL|method|getVersions
specifier|public
name|Set
argument_list|<
name|Version
argument_list|>
name|getVersions
parameter_list|()
block|{
return|return
name|versions
return|;
block|}
DECL|method|getOs
specifier|public
name|OsStats
name|getOs
parameter_list|()
block|{
return|return
name|os
return|;
block|}
DECL|method|getProcess
specifier|public
name|ProcessStats
name|getProcess
parameter_list|()
block|{
return|return
name|process
return|;
block|}
DECL|method|getJvm
specifier|public
name|JvmStats
name|getJvm
parameter_list|()
block|{
return|return
name|jvm
return|;
block|}
DECL|method|getFs
specifier|public
name|FsStats
operator|.
name|Info
name|getFs
parameter_list|()
block|{
return|return
name|fs
return|;
block|}
DECL|method|getPlugins
specifier|public
name|Set
argument_list|<
name|PluginInfo
argument_list|>
name|getPlugins
parameter_list|()
block|{
return|return
name|plugins
return|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|counts
operator|=
name|Counts
operator|.
name|readCounts
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|int
name|size
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|versions
operator|=
operator|new
name|HashSet
argument_list|<
name|Version
argument_list|>
argument_list|(
name|size
argument_list|)
expr_stmt|;
for|for
control|(
init|;
name|size
operator|>
literal|0
condition|;
name|size
operator|--
control|)
block|{
name|versions
operator|.
name|add
argument_list|(
name|Version
operator|.
name|readVersion
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|os
operator|=
name|OsStats
operator|.
name|readOsStats
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|process
operator|=
name|ProcessStats
operator|.
name|readStats
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|jvm
operator|=
name|JvmStats
operator|.
name|readJvmStats
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|fs
operator|=
name|FsStats
operator|.
name|Info
operator|.
name|readInfoFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|size
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
name|plugins
operator|=
operator|new
name|HashSet
argument_list|<
name|PluginInfo
argument_list|>
argument_list|(
name|size
argument_list|)
expr_stmt|;
for|for
control|(
init|;
name|size
operator|>
literal|0
condition|;
name|size
operator|--
control|)
block|{
name|plugins
operator|.
name|add
argument_list|(
name|PluginInfo
operator|.
name|readPluginInfo
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|counts
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|versions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Version
name|v
range|:
name|versions
control|)
name|Version
operator|.
name|writeVersion
argument_list|(
name|v
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|process
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|jvm
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|fs
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|plugins
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|PluginInfo
name|p
range|:
name|plugins
control|)
block|{
name|p
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|readNodeStats
specifier|public
specifier|static
name|ClusterStatsNodes
name|readNodeStats
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|ClusterStatsNodes
name|nodeStats
init|=
operator|new
name|ClusterStatsNodes
argument_list|()
decl_stmt|;
name|nodeStats
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
return|return
name|nodeStats
return|;
block|}
DECL|class|Fields
specifier|static
specifier|final
class|class
name|Fields
block|{
DECL|field|COUNT
specifier|static
specifier|final
name|XContentBuilderString
name|COUNT
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"count"
argument_list|)
decl_stmt|;
DECL|field|VERSIONS
specifier|static
specifier|final
name|XContentBuilderString
name|VERSIONS
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"versions"
argument_list|)
decl_stmt|;
DECL|field|OS
specifier|static
specifier|final
name|XContentBuilderString
name|OS
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"os"
argument_list|)
decl_stmt|;
DECL|field|PROCESS
specifier|static
specifier|final
name|XContentBuilderString
name|PROCESS
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"process"
argument_list|)
decl_stmt|;
DECL|field|JVM
specifier|static
specifier|final
name|XContentBuilderString
name|JVM
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"jvm"
argument_list|)
decl_stmt|;
DECL|field|FS
specifier|static
specifier|final
name|XContentBuilderString
name|FS
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"fs"
argument_list|)
decl_stmt|;
DECL|field|PLUGINS
specifier|static
specifier|final
name|XContentBuilderString
name|PLUGINS
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"plugins"
argument_list|)
decl_stmt|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|Fields
operator|.
name|COUNT
argument_list|)
expr_stmt|;
name|counts
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|startArray
argument_list|(
name|Fields
operator|.
name|VERSIONS
argument_list|)
expr_stmt|;
for|for
control|(
name|Version
name|v
range|:
name|versions
control|)
block|{
name|builder
operator|.
name|value
argument_list|(
name|v
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
name|builder
operator|.
name|startObject
argument_list|(
name|Fields
operator|.
name|OS
argument_list|)
expr_stmt|;
name|os
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|startObject
argument_list|(
name|Fields
operator|.
name|PROCESS
argument_list|)
expr_stmt|;
name|process
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|startObject
argument_list|(
name|Fields
operator|.
name|JVM
argument_list|)
expr_stmt|;
name|jvm
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|FS
argument_list|)
expr_stmt|;
name|fs
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|builder
operator|.
name|startArray
argument_list|(
name|Fields
operator|.
name|PLUGINS
argument_list|)
expr_stmt|;
for|for
control|(
name|PluginInfo
name|pluginInfo
range|:
name|plugins
control|)
block|{
name|pluginInfo
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
DECL|class|Counts
specifier|public
specifier|static
class|class
name|Counts
implements|implements
name|Streamable
implements|,
name|ToXContent
block|{
DECL|field|total
name|int
name|total
decl_stmt|;
DECL|field|masterOnly
name|int
name|masterOnly
decl_stmt|;
DECL|field|dataOnly
name|int
name|dataOnly
decl_stmt|;
DECL|field|masterData
name|int
name|masterData
decl_stmt|;
DECL|field|client
name|int
name|client
decl_stmt|;
DECL|method|addNodeInfo
specifier|public
name|void
name|addNodeInfo
parameter_list|(
name|NodeInfo
name|nodeInfo
parameter_list|)
block|{
name|total
operator|++
expr_stmt|;
name|DiscoveryNode
name|node
init|=
name|nodeInfo
operator|.
name|getNode
argument_list|()
decl_stmt|;
if|if
condition|(
name|node
operator|.
name|masterNode
argument_list|()
condition|)
block|{
if|if
condition|(
name|node
operator|.
name|dataNode
argument_list|()
condition|)
block|{
name|masterData
operator|++
expr_stmt|;
block|}
else|else
block|{
name|masterOnly
operator|++
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|node
operator|.
name|dataNode
argument_list|()
condition|)
block|{
name|dataOnly
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|node
operator|.
name|clientNode
argument_list|()
condition|)
block|{
name|client
operator|++
expr_stmt|;
block|}
block|}
DECL|method|getTotal
specifier|public
name|int
name|getTotal
parameter_list|()
block|{
return|return
name|total
return|;
block|}
DECL|method|getMasterOnly
specifier|public
name|int
name|getMasterOnly
parameter_list|()
block|{
return|return
name|masterOnly
return|;
block|}
DECL|method|getDataOnly
specifier|public
name|int
name|getDataOnly
parameter_list|()
block|{
return|return
name|dataOnly
return|;
block|}
DECL|method|getMasterData
specifier|public
name|int
name|getMasterData
parameter_list|()
block|{
return|return
name|masterData
return|;
block|}
DECL|method|getClient
specifier|public
name|int
name|getClient
parameter_list|()
block|{
return|return
name|client
return|;
block|}
DECL|method|readCounts
specifier|public
specifier|static
name|Counts
name|readCounts
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|Counts
name|c
init|=
operator|new
name|Counts
argument_list|()
decl_stmt|;
name|c
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
return|return
name|c
return|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|total
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
name|masterOnly
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
name|dataOnly
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
name|masterData
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
name|client
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeVInt
argument_list|(
name|total
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|masterOnly
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|dataOnly
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|masterData
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|client
argument_list|)
expr_stmt|;
block|}
DECL|class|Fields
specifier|static
specifier|final
class|class
name|Fields
block|{
DECL|field|TOTAL
specifier|static
specifier|final
name|XContentBuilderString
name|TOTAL
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"total"
argument_list|)
decl_stmt|;
DECL|field|MASTER_ONLY
specifier|static
specifier|final
name|XContentBuilderString
name|MASTER_ONLY
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"master_only"
argument_list|)
decl_stmt|;
DECL|field|DATA_ONLY
specifier|static
specifier|final
name|XContentBuilderString
name|DATA_ONLY
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"data_only"
argument_list|)
decl_stmt|;
DECL|field|MASTER_DATA
specifier|static
specifier|final
name|XContentBuilderString
name|MASTER_DATA
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"master_data"
argument_list|)
decl_stmt|;
DECL|field|CLIENT
specifier|static
specifier|final
name|XContentBuilderString
name|CLIENT
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"client"
argument_list|)
decl_stmt|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|TOTAL
argument_list|,
name|total
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|MASTER_ONLY
argument_list|,
name|masterOnly
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|DATA_ONLY
argument_list|,
name|dataOnly
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|MASTER_DATA
argument_list|,
name|masterData
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|CLIENT
argument_list|,
name|client
argument_list|)
expr_stmt|;
return|return
name|builder
return|;
block|}
block|}
DECL|class|OsStats
specifier|public
specifier|static
class|class
name|OsStats
implements|implements
name|ToXContent
implements|,
name|Streamable
block|{
DECL|field|availableProcessors
name|int
name|availableProcessors
decl_stmt|;
DECL|field|availableMemory
name|long
name|availableMemory
decl_stmt|;
DECL|field|cpus
name|ObjectIntOpenHashMap
argument_list|<
name|OsInfo
operator|.
name|Cpu
argument_list|>
name|cpus
decl_stmt|;
DECL|method|OsStats
specifier|public
name|OsStats
parameter_list|()
block|{
name|cpus
operator|=
operator|new
name|ObjectIntOpenHashMap
argument_list|<
name|org
operator|.
name|elasticsearch
operator|.
name|monitor
operator|.
name|os
operator|.
name|OsInfo
operator|.
name|Cpu
argument_list|>
argument_list|()
expr_stmt|;
block|}
DECL|method|addNodeInfo
specifier|public
name|void
name|addNodeInfo
parameter_list|(
name|NodeInfo
name|nodeInfo
parameter_list|)
block|{
name|availableProcessors
operator|+=
name|nodeInfo
operator|.
name|getOs
argument_list|()
operator|.
name|availableProcessors
argument_list|()
expr_stmt|;
if|if
condition|(
name|nodeInfo
operator|.
name|getOs
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|nodeInfo
operator|.
name|getOs
argument_list|()
operator|.
name|cpu
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|cpus
operator|.
name|addTo
argument_list|(
name|nodeInfo
operator|.
name|getOs
argument_list|()
operator|.
name|cpu
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|nodeInfo
operator|.
name|getOs
argument_list|()
operator|.
name|getMem
argument_list|()
operator|!=
literal|null
operator|&&
name|nodeInfo
operator|.
name|getOs
argument_list|()
operator|.
name|getMem
argument_list|()
operator|.
name|getTotal
argument_list|()
operator|.
name|bytes
argument_list|()
operator|!=
operator|-
literal|1
condition|)
block|{
name|availableMemory
operator|+=
name|nodeInfo
operator|.
name|getOs
argument_list|()
operator|.
name|getMem
argument_list|()
operator|.
name|getTotal
argument_list|()
operator|.
name|bytes
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getAvailableProcessors
specifier|public
name|int
name|getAvailableProcessors
parameter_list|()
block|{
return|return
name|availableProcessors
return|;
block|}
DECL|method|getAvailableMemory
specifier|public
name|ByteSizeValue
name|getAvailableMemory
parameter_list|()
block|{
return|return
operator|new
name|ByteSizeValue
argument_list|(
name|availableMemory
argument_list|)
return|;
block|}
DECL|method|getCpus
specifier|public
name|ObjectIntOpenHashMap
argument_list|<
name|OsInfo
operator|.
name|Cpu
argument_list|>
name|getCpus
parameter_list|()
block|{
return|return
name|cpus
return|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|availableProcessors
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
name|availableMemory
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|int
name|size
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|cpus
operator|=
operator|new
name|ObjectIntOpenHashMap
argument_list|<
name|OsInfo
operator|.
name|Cpu
argument_list|>
argument_list|(
name|size
argument_list|)
expr_stmt|;
for|for
control|(
init|;
name|size
operator|>
literal|0
condition|;
name|size
operator|--
control|)
block|{
name|cpus
operator|.
name|addTo
argument_list|(
name|OsInfo
operator|.
name|Cpu
operator|.
name|readCpu
argument_list|(
name|in
argument_list|)
argument_list|,
name|in
operator|.
name|readVInt
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeVInt
argument_list|(
name|availableProcessors
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|availableMemory
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|cpus
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ObjectIntCursor
argument_list|<
name|OsInfo
operator|.
name|Cpu
argument_list|>
name|c
range|:
name|cpus
control|)
block|{
name|c
operator|.
name|key
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|c
operator|.
name|value
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|readOsStats
specifier|public
specifier|static
name|OsStats
name|readOsStats
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|OsStats
name|os
init|=
operator|new
name|OsStats
argument_list|()
decl_stmt|;
name|os
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
return|return
name|os
return|;
block|}
DECL|class|Fields
specifier|static
specifier|final
class|class
name|Fields
block|{
DECL|field|AVAILABLE_PROCESSORS
specifier|static
specifier|final
name|XContentBuilderString
name|AVAILABLE_PROCESSORS
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"available_processors"
argument_list|)
decl_stmt|;
DECL|field|MEM
specifier|static
specifier|final
name|XContentBuilderString
name|MEM
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"mem"
argument_list|)
decl_stmt|;
DECL|field|TOTAL
specifier|static
specifier|final
name|XContentBuilderString
name|TOTAL
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"total"
argument_list|)
decl_stmt|;
DECL|field|TOTAL_IN_BYTES
specifier|static
specifier|final
name|XContentBuilderString
name|TOTAL_IN_BYTES
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"total_in_bytes"
argument_list|)
decl_stmt|;
DECL|field|CPU
specifier|static
specifier|final
name|XContentBuilderString
name|CPU
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"cpu"
argument_list|)
decl_stmt|;
DECL|field|COUNT
specifier|static
specifier|final
name|XContentBuilderString
name|COUNT
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"count"
argument_list|)
decl_stmt|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|AVAILABLE_PROCESSORS
argument_list|,
name|availableProcessors
argument_list|)
expr_stmt|;
name|builder
operator|.
name|startObject
argument_list|(
name|Fields
operator|.
name|MEM
argument_list|)
expr_stmt|;
name|builder
operator|.
name|byteSizeField
argument_list|(
name|Fields
operator|.
name|TOTAL_IN_BYTES
argument_list|,
name|Fields
operator|.
name|TOTAL
argument_list|,
name|availableMemory
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|startArray
argument_list|(
name|Fields
operator|.
name|CPU
argument_list|)
expr_stmt|;
for|for
control|(
name|ObjectIntCursor
argument_list|<
name|OsInfo
operator|.
name|Cpu
argument_list|>
name|cpu
range|:
name|cpus
control|)
block|{
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|cpu
operator|.
name|key
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|COUNT
argument_list|,
name|cpu
operator|.
name|value
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
block|}
DECL|class|ProcessStats
specifier|public
specifier|static
class|class
name|ProcessStats
implements|implements
name|ToXContent
implements|,
name|Streamable
block|{
DECL|field|count
name|int
name|count
decl_stmt|;
DECL|field|cpuPercent
name|int
name|cpuPercent
decl_stmt|;
DECL|field|totalOpenFileDescriptors
name|long
name|totalOpenFileDescriptors
decl_stmt|;
DECL|method|addNodeStats
specifier|public
name|void
name|addNodeStats
parameter_list|(
name|NodeStats
name|nodeStats
parameter_list|)
block|{
if|if
condition|(
name|nodeStats
operator|.
name|getProcess
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|count
operator|++
expr_stmt|;
if|if
condition|(
name|nodeStats
operator|.
name|getProcess
argument_list|()
operator|.
name|cpu
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// with no sigar, this may not be available
name|cpuPercent
operator|+=
name|nodeStats
operator|.
name|getProcess
argument_list|()
operator|.
name|cpu
argument_list|()
operator|.
name|getPercent
argument_list|()
expr_stmt|;
block|}
name|totalOpenFileDescriptors
operator|+=
name|nodeStats
operator|.
name|getProcess
argument_list|()
operator|.
name|openFileDescriptors
argument_list|()
expr_stmt|;
block|}
comment|/**          * Cpu usage in percentages - 100 is 1 core.          */
DECL|method|getCpuPercent
specifier|public
name|int
name|getCpuPercent
parameter_list|()
block|{
return|return
name|cpuPercent
return|;
block|}
DECL|method|getAvgOpenFileDescriptors
specifier|public
name|long
name|getAvgOpenFileDescriptors
parameter_list|()
block|{
if|if
condition|(
name|count
operator|==
literal|0
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
return|return
name|totalOpenFileDescriptors
operator|/
name|count
return|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|count
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
name|cpuPercent
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
name|totalOpenFileDescriptors
operator|=
name|in
operator|.
name|readVLong
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeVInt
argument_list|(
name|count
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|cpuPercent
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVLong
argument_list|(
name|totalOpenFileDescriptors
argument_list|)
expr_stmt|;
block|}
DECL|method|readStats
specifier|public
specifier|static
name|ProcessStats
name|readStats
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|ProcessStats
name|cpu
init|=
operator|new
name|ProcessStats
argument_list|()
decl_stmt|;
name|cpu
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
return|return
name|cpu
return|;
block|}
DECL|class|Fields
specifier|static
specifier|final
class|class
name|Fields
block|{
DECL|field|CPU
specifier|static
specifier|final
name|XContentBuilderString
name|CPU
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"cpu"
argument_list|)
decl_stmt|;
DECL|field|PERCENT
specifier|static
specifier|final
name|XContentBuilderString
name|PERCENT
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"percent"
argument_list|)
decl_stmt|;
DECL|field|AVG_OPEN_FD
specifier|static
specifier|final
name|XContentBuilderString
name|AVG_OPEN_FD
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"avg_open_file_descriptors"
argument_list|)
decl_stmt|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|Fields
operator|.
name|CPU
argument_list|)
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|PERCENT
argument_list|,
name|cpuPercent
argument_list|)
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|AVG_OPEN_FD
argument_list|,
name|getAvgOpenFileDescriptors
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|builder
return|;
block|}
block|}
DECL|class|JvmStats
specifier|public
specifier|static
class|class
name|JvmStats
implements|implements
name|Streamable
implements|,
name|ToXContent
block|{
DECL|field|versions
name|ObjectIntOpenHashMap
argument_list|<
name|JvmVersion
argument_list|>
name|versions
decl_stmt|;
DECL|field|threads
name|long
name|threads
decl_stmt|;
DECL|field|maxUptime
name|long
name|maxUptime
decl_stmt|;
DECL|field|heapUsed
name|long
name|heapUsed
decl_stmt|;
DECL|field|heapMax
name|long
name|heapMax
decl_stmt|;
DECL|method|JvmStats
name|JvmStats
parameter_list|()
block|{
name|versions
operator|=
operator|new
name|ObjectIntOpenHashMap
argument_list|<
name|JvmVersion
argument_list|>
argument_list|()
expr_stmt|;
name|threads
operator|=
literal|0
expr_stmt|;
name|maxUptime
operator|=
literal|0
expr_stmt|;
name|heapMax
operator|=
literal|0
expr_stmt|;
name|heapUsed
operator|=
literal|0
expr_stmt|;
block|}
DECL|method|getVersions
specifier|public
name|ObjectIntOpenHashMap
argument_list|<
name|JvmVersion
argument_list|>
name|getVersions
parameter_list|()
block|{
return|return
name|versions
return|;
block|}
comment|/**          * The total number of threads in the cluster          */
DECL|method|getThreads
specifier|public
name|long
name|getThreads
parameter_list|()
block|{
return|return
name|threads
return|;
block|}
comment|/**          * The maximum uptime of a node in the cluster          */
DECL|method|getMaxUpTime
specifier|public
name|TimeValue
name|getMaxUpTime
parameter_list|()
block|{
return|return
operator|new
name|TimeValue
argument_list|(
name|maxUptime
argument_list|)
return|;
block|}
comment|/**          * Total heap used in the cluster          */
DECL|method|getHeapUsed
specifier|public
name|ByteSizeValue
name|getHeapUsed
parameter_list|()
block|{
return|return
operator|new
name|ByteSizeValue
argument_list|(
name|heapUsed
argument_list|)
return|;
block|}
comment|/**          * Maximum total heap available to the cluster          */
DECL|method|getHeapMax
specifier|public
name|ByteSizeValue
name|getHeapMax
parameter_list|()
block|{
return|return
operator|new
name|ByteSizeValue
argument_list|(
name|heapMax
argument_list|)
return|;
block|}
DECL|method|addNodeInfoStats
specifier|public
name|void
name|addNodeInfoStats
parameter_list|(
name|NodeInfo
name|nodeInfo
parameter_list|,
name|NodeStats
name|nodeStats
parameter_list|)
block|{
name|versions
operator|.
name|addTo
argument_list|(
operator|new
name|JvmVersion
argument_list|(
name|nodeInfo
operator|.
name|getJvm
argument_list|()
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|org
operator|.
name|elasticsearch
operator|.
name|monitor
operator|.
name|jvm
operator|.
name|JvmStats
name|js
init|=
name|nodeStats
operator|.
name|getJvm
argument_list|()
decl_stmt|;
if|if
condition|(
name|js
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|js
operator|.
name|threads
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|threads
operator|+=
name|js
operator|.
name|threads
argument_list|()
operator|.
name|count
argument_list|()
expr_stmt|;
block|}
name|maxUptime
operator|=
name|Math
operator|.
name|max
argument_list|(
name|maxUptime
argument_list|,
name|js
operator|.
name|uptime
argument_list|()
operator|.
name|millis
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|js
operator|.
name|mem
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|heapUsed
operator|+=
name|js
operator|.
name|mem
argument_list|()
operator|.
name|getHeapUsed
argument_list|()
operator|.
name|bytes
argument_list|()
expr_stmt|;
name|heapMax
operator|+=
name|js
operator|.
name|mem
argument_list|()
operator|.
name|getHeapMax
argument_list|()
operator|.
name|bytes
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|size
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|versions
operator|=
operator|new
name|ObjectIntOpenHashMap
argument_list|<
name|JvmVersion
argument_list|>
argument_list|(
name|size
argument_list|)
expr_stmt|;
for|for
control|(
init|;
name|size
operator|>
literal|0
condition|;
name|size
operator|--
control|)
block|{
name|versions
operator|.
name|addTo
argument_list|(
name|JvmVersion
operator|.
name|readJvmVersion
argument_list|(
name|in
argument_list|)
argument_list|,
name|in
operator|.
name|readVInt
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|threads
operator|=
name|in
operator|.
name|readVLong
argument_list|()
expr_stmt|;
name|maxUptime
operator|=
name|in
operator|.
name|readVLong
argument_list|()
expr_stmt|;
name|heapUsed
operator|=
name|in
operator|.
name|readVLong
argument_list|()
expr_stmt|;
name|heapMax
operator|=
name|in
operator|.
name|readVLong
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeVInt
argument_list|(
name|versions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ObjectIntCursor
argument_list|<
name|JvmVersion
argument_list|>
name|v
range|:
name|versions
control|)
block|{
name|v
operator|.
name|key
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|v
operator|.
name|value
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|writeVLong
argument_list|(
name|threads
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVLong
argument_list|(
name|maxUptime
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVLong
argument_list|(
name|heapUsed
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVLong
argument_list|(
name|heapMax
argument_list|)
expr_stmt|;
block|}
DECL|method|readJvmStats
specifier|public
specifier|static
name|JvmStats
name|readJvmStats
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|JvmStats
name|jvmStats
init|=
operator|new
name|JvmStats
argument_list|()
decl_stmt|;
name|jvmStats
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
return|return
name|jvmStats
return|;
block|}
DECL|class|Fields
specifier|static
specifier|final
class|class
name|Fields
block|{
DECL|field|VERSIONS
specifier|static
specifier|final
name|XContentBuilderString
name|VERSIONS
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"versions"
argument_list|)
decl_stmt|;
DECL|field|VERSION
specifier|static
specifier|final
name|XContentBuilderString
name|VERSION
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"version"
argument_list|)
decl_stmt|;
DECL|field|VM_NAME
specifier|static
specifier|final
name|XContentBuilderString
name|VM_NAME
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"vm_name"
argument_list|)
decl_stmt|;
DECL|field|VM_VERSION
specifier|static
specifier|final
name|XContentBuilderString
name|VM_VERSION
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"vm_version"
argument_list|)
decl_stmt|;
DECL|field|VM_VENDOR
specifier|static
specifier|final
name|XContentBuilderString
name|VM_VENDOR
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"vm_vendor"
argument_list|)
decl_stmt|;
DECL|field|COUNT
specifier|static
specifier|final
name|XContentBuilderString
name|COUNT
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"count"
argument_list|)
decl_stmt|;
DECL|field|THREADS
specifier|static
specifier|final
name|XContentBuilderString
name|THREADS
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"threads"
argument_list|)
decl_stmt|;
DECL|field|MAX_UPTIME
specifier|static
specifier|final
name|XContentBuilderString
name|MAX_UPTIME
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"max_uptime"
argument_list|)
decl_stmt|;
DECL|field|MAX_UPTIME_IN_MILLIS
specifier|static
specifier|final
name|XContentBuilderString
name|MAX_UPTIME_IN_MILLIS
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"max_uptime_in_millis"
argument_list|)
decl_stmt|;
DECL|field|MEM
specifier|static
specifier|final
name|XContentBuilderString
name|MEM
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"mem"
argument_list|)
decl_stmt|;
DECL|field|HEAP_USED
specifier|static
specifier|final
name|XContentBuilderString
name|HEAP_USED
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"heap_used"
argument_list|)
decl_stmt|;
DECL|field|HEAP_USED_IN_BYTES
specifier|static
specifier|final
name|XContentBuilderString
name|HEAP_USED_IN_BYTES
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"heap_used_in_bytes"
argument_list|)
decl_stmt|;
DECL|field|HEAP_MAX
specifier|static
specifier|final
name|XContentBuilderString
name|HEAP_MAX
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"heap_max"
argument_list|)
decl_stmt|;
DECL|field|HEAP_MAX_IN_BYTES
specifier|static
specifier|final
name|XContentBuilderString
name|HEAP_MAX_IN_BYTES
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"heap_max_in_bytes"
argument_list|)
decl_stmt|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|timeValueField
argument_list|(
name|Fields
operator|.
name|MAX_UPTIME_IN_MILLIS
argument_list|,
name|Fields
operator|.
name|MAX_UPTIME
argument_list|,
name|maxUptime
argument_list|)
expr_stmt|;
name|builder
operator|.
name|startArray
argument_list|(
name|Fields
operator|.
name|VERSIONS
argument_list|)
expr_stmt|;
for|for
control|(
name|ObjectIntCursor
argument_list|<
name|JvmVersion
argument_list|>
name|v
range|:
name|versions
control|)
block|{
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|VERSION
argument_list|,
name|v
operator|.
name|key
operator|.
name|version
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|VM_NAME
argument_list|,
name|v
operator|.
name|key
operator|.
name|vmName
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|VM_VERSION
argument_list|,
name|v
operator|.
name|key
operator|.
name|vmVersion
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|VM_VENDOR
argument_list|,
name|v
operator|.
name|key
operator|.
name|vmVendor
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|COUNT
argument_list|,
name|v
operator|.
name|value
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
name|builder
operator|.
name|startObject
argument_list|(
name|Fields
operator|.
name|MEM
argument_list|)
expr_stmt|;
name|builder
operator|.
name|byteSizeField
argument_list|(
name|Fields
operator|.
name|HEAP_USED_IN_BYTES
argument_list|,
name|Fields
operator|.
name|HEAP_USED
argument_list|,
name|heapUsed
argument_list|)
expr_stmt|;
name|builder
operator|.
name|byteSizeField
argument_list|(
name|Fields
operator|.
name|HEAP_MAX_IN_BYTES
argument_list|,
name|Fields
operator|.
name|HEAP_MAX
argument_list|,
name|heapMax
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|THREADS
argument_list|,
name|threads
argument_list|)
expr_stmt|;
return|return
name|builder
return|;
block|}
block|}
DECL|class|JvmVersion
specifier|public
specifier|static
class|class
name|JvmVersion
implements|implements
name|Streamable
block|{
DECL|field|version
name|String
name|version
decl_stmt|;
DECL|field|vmName
name|String
name|vmName
decl_stmt|;
DECL|field|vmVersion
name|String
name|vmVersion
decl_stmt|;
DECL|field|vmVendor
name|String
name|vmVendor
decl_stmt|;
DECL|method|JvmVersion
name|JvmVersion
parameter_list|(
name|JvmInfo
name|jvmInfo
parameter_list|)
block|{
name|version
operator|=
name|jvmInfo
operator|.
name|version
argument_list|()
expr_stmt|;
name|vmName
operator|=
name|jvmInfo
operator|.
name|vmName
argument_list|()
expr_stmt|;
name|vmVersion
operator|=
name|jvmInfo
operator|.
name|vmVersion
argument_list|()
expr_stmt|;
name|vmVendor
operator|=
name|jvmInfo
operator|.
name|vmVendor
argument_list|()
expr_stmt|;
block|}
DECL|method|JvmVersion
name|JvmVersion
parameter_list|()
block|{         }
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|JvmVersion
name|jvm
init|=
operator|(
name|JvmVersion
operator|)
name|o
decl_stmt|;
return|return
name|vmVersion
operator|.
name|equals
argument_list|(
name|jvm
operator|.
name|vmVersion
argument_list|)
operator|&&
name|vmVendor
operator|.
name|equals
argument_list|(
name|jvm
operator|.
name|vmVendor
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|vmVersion
operator|.
name|hashCode
argument_list|()
return|;
block|}
DECL|method|readJvmVersion
specifier|public
specifier|static
name|JvmVersion
name|readJvmVersion
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|JvmVersion
name|jvm
init|=
operator|new
name|JvmVersion
argument_list|()
decl_stmt|;
name|jvm
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
return|return
name|jvm
return|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|version
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
name|vmName
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
name|vmVersion
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
name|vmVendor
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeString
argument_list|(
name|version
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeString
argument_list|(
name|vmName
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeString
argument_list|(
name|vmVersion
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeString
argument_list|(
name|vmVendor
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

