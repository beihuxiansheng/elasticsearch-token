begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.admin.cluster.node.info
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|node
operator|.
name|info
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Streamable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilderString
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_class
DECL|class|PluginInfo
specifier|public
class|class
name|PluginInfo
implements|implements
name|Streamable
implements|,
name|Serializable
implements|,
name|ToXContent
block|{
DECL|field|DESCRIPTION_NOT_AVAILABLE
specifier|public
specifier|static
specifier|final
name|String
name|DESCRIPTION_NOT_AVAILABLE
init|=
literal|"No description found."
decl_stmt|;
DECL|field|VERSION_NOT_AVAILABLE
specifier|public
specifier|static
specifier|final
name|String
name|VERSION_NOT_AVAILABLE
init|=
literal|"NA"
decl_stmt|;
DECL|class|Fields
specifier|static
specifier|final
class|class
name|Fields
block|{
DECL|field|NAME
specifier|static
specifier|final
name|XContentBuilderString
name|NAME
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
DECL|field|DESCRIPTION
specifier|static
specifier|final
name|XContentBuilderString
name|DESCRIPTION
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"description"
argument_list|)
decl_stmt|;
DECL|field|URL
specifier|static
specifier|final
name|XContentBuilderString
name|URL
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"url"
argument_list|)
decl_stmt|;
DECL|field|JVM
specifier|static
specifier|final
name|XContentBuilderString
name|JVM
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"jvm"
argument_list|)
decl_stmt|;
DECL|field|SITE
specifier|static
specifier|final
name|XContentBuilderString
name|SITE
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"site"
argument_list|)
decl_stmt|;
DECL|field|VERSION
specifier|static
specifier|final
name|XContentBuilderString
name|VERSION
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"version"
argument_list|)
decl_stmt|;
DECL|field|ISOLATION
specifier|static
specifier|final
name|XContentBuilderString
name|ISOLATION
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"isolation"
argument_list|)
decl_stmt|;
block|}
DECL|field|name
specifier|private
name|String
name|name
decl_stmt|;
DECL|field|description
specifier|private
name|String
name|description
decl_stmt|;
DECL|field|site
specifier|private
name|boolean
name|site
decl_stmt|;
DECL|field|jvm
specifier|private
name|boolean
name|jvm
decl_stmt|;
DECL|field|version
specifier|private
name|String
name|version
decl_stmt|;
DECL|field|isolation
specifier|private
name|boolean
name|isolation
decl_stmt|;
DECL|method|PluginInfo
specifier|public
name|PluginInfo
parameter_list|()
block|{     }
comment|/**      * Information about plugins      *      * @param name        Its name      * @param description Its description      * @param site        true if it's a site plugin      * @param jvm         true if it's a jvm plugin      * @param version     Version number is applicable (NA otherwise)      * @param isolation   true if it's an isolated plugin      */
DECL|method|PluginInfo
specifier|public
name|PluginInfo
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|description
parameter_list|,
name|boolean
name|site
parameter_list|,
name|boolean
name|jvm
parameter_list|,
name|String
name|version
parameter_list|,
name|boolean
name|isolation
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|description
operator|=
name|description
expr_stmt|;
name|this
operator|.
name|site
operator|=
name|site
expr_stmt|;
name|this
operator|.
name|jvm
operator|=
name|jvm
expr_stmt|;
if|if
condition|(
name|Strings
operator|.
name|hasText
argument_list|(
name|version
argument_list|)
condition|)
block|{
name|this
operator|.
name|version
operator|=
name|version
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|version
operator|=
name|VERSION_NOT_AVAILABLE
expr_stmt|;
block|}
name|this
operator|.
name|isolation
operator|=
name|isolation
expr_stmt|;
block|}
comment|/**      * @return Plugin's name      */
DECL|method|getName
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
comment|/**      * @return Plugin's description if any      */
DECL|method|getDescription
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
name|description
return|;
block|}
comment|/**      * @return true if it's a site plugin      */
DECL|method|isSite
specifier|public
name|boolean
name|isSite
parameter_list|()
block|{
return|return
name|site
return|;
block|}
comment|/**      * @return true if it's a plugin running in the jvm      */
DECL|method|isJvm
specifier|public
name|boolean
name|isJvm
parameter_list|()
block|{
return|return
name|jvm
return|;
block|}
comment|/**      * We compute the URL for sites: "/_plugin/" + name + "/"      *      * @return relative URL for site plugin      */
DECL|method|getUrl
specifier|public
name|String
name|getUrl
parameter_list|()
block|{
if|if
condition|(
name|site
condition|)
block|{
return|return
operator|(
literal|"/_plugin/"
operator|+
name|name
operator|+
literal|"/"
operator|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/**      * @return Version number for the plugin      */
DECL|method|getVersion
specifier|public
name|String
name|getVersion
parameter_list|()
block|{
return|return
name|version
return|;
block|}
comment|/**      * @return Plugin isolation      */
DECL|method|isIsolation
specifier|public
name|boolean
name|isIsolation
parameter_list|()
block|{
return|return
name|isolation
return|;
block|}
DECL|method|readPluginInfo
specifier|public
specifier|static
name|PluginInfo
name|readPluginInfo
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|PluginInfo
name|info
init|=
operator|new
name|PluginInfo
argument_list|()
decl_stmt|;
name|info
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
return|return
name|info
return|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|name
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
name|this
operator|.
name|description
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
name|this
operator|.
name|site
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
name|this
operator|.
name|jvm
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
if|if
condition|(
name|in
operator|.
name|getVersion
argument_list|()
operator|.
name|onOrAfter
argument_list|(
name|Version
operator|.
name|V_1_0_0_RC2
argument_list|)
condition|)
block|{
name|this
operator|.
name|version
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|version
operator|=
name|VERSION_NOT_AVAILABLE
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|getVersion
argument_list|()
operator|.
name|onOrAfter
argument_list|(
name|Version
operator|.
name|V_1_1_0
argument_list|)
condition|)
block|{
name|this
operator|.
name|isolation
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|isolation
operator|=
literal|false
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeString
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeString
argument_list|(
name|description
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|site
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|jvm
argument_list|)
expr_stmt|;
if|if
condition|(
name|out
operator|.
name|getVersion
argument_list|()
operator|.
name|onOrAfter
argument_list|(
name|Version
operator|.
name|V_1_0_0_RC2
argument_list|)
condition|)
block|{
name|out
operator|.
name|writeString
argument_list|(
name|version
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|out
operator|.
name|getVersion
argument_list|()
operator|.
name|onOrAfter
argument_list|(
name|Version
operator|.
name|V_1_1_0
argument_list|)
condition|)
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
name|isolation
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|NAME
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|VERSION
argument_list|,
name|version
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|DESCRIPTION
argument_list|,
name|description
argument_list|)
expr_stmt|;
if|if
condition|(
name|site
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|URL
argument_list|,
name|getUrl
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|JVM
argument_list|,
name|jvm
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|SITE
argument_list|,
name|site
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|ISOLATION
argument_list|,
name|isolation
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|PluginInfo
name|that
init|=
operator|(
name|PluginInfo
operator|)
name|o
decl_stmt|;
if|if
condition|(
operator|!
name|name
operator|.
name|equals
argument_list|(
name|that
operator|.
name|name
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|version
operator|!=
literal|null
condition|?
operator|!
name|version
operator|.
name|equals
argument_list|(
name|that
operator|.
name|version
argument_list|)
else|:
name|that
operator|.
name|version
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|name
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
specifier|final
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|(
literal|"PluginInfo{"
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"name='"
argument_list|)
operator|.
name|append
argument_list|(
name|name
argument_list|)
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", description='"
argument_list|)
operator|.
name|append
argument_list|(
name|description
argument_list|)
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", site="
argument_list|)
operator|.
name|append
argument_list|(
name|site
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", jvm="
argument_list|)
operator|.
name|append
argument_list|(
name|jvm
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", version='"
argument_list|)
operator|.
name|append
argument_list|(
name|version
argument_list|)
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", isolation='"
argument_list|)
operator|.
name|append
argument_list|(
name|isolation
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

