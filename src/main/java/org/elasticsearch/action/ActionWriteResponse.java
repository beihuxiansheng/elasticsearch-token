begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Streamable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilderString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestStatus
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * Base class for write action responses.  */
end_comment

begin_class
DECL|class|ActionWriteResponse
specifier|public
specifier|abstract
class|class
name|ActionWriteResponse
extends|extends
name|ActionResponse
block|{
DECL|field|EMPTY
specifier|public
specifier|final
specifier|static
name|ActionWriteResponse
operator|.
name|ShardInfo
operator|.
name|Failure
index|[]
name|EMPTY
init|=
operator|new
name|ActionWriteResponse
operator|.
name|ShardInfo
operator|.
name|Failure
index|[
literal|0
index|]
decl_stmt|;
DECL|field|shardInfo
specifier|private
name|ShardInfo
name|shardInfo
decl_stmt|;
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|shardInfo
operator|=
name|ActionWriteResponse
operator|.
name|ShardInfo
operator|.
name|readShardInfo
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|shardInfo
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
DECL|method|getShardInfo
specifier|public
name|ShardInfo
name|getShardInfo
parameter_list|()
block|{
return|return
name|shardInfo
return|;
block|}
DECL|method|setShardInfo
specifier|public
name|void
name|setShardInfo
parameter_list|(
name|ShardInfo
name|shardInfo
parameter_list|)
block|{
name|this
operator|.
name|shardInfo
operator|=
name|shardInfo
expr_stmt|;
block|}
DECL|class|ShardInfo
specifier|public
specifier|static
class|class
name|ShardInfo
implements|implements
name|Streamable
implements|,
name|ToXContent
block|{
DECL|field|total
specifier|private
name|int
name|total
decl_stmt|;
DECL|field|successful
specifier|private
name|int
name|successful
decl_stmt|;
DECL|field|pending
specifier|private
name|int
name|pending
decl_stmt|;
DECL|field|failures
specifier|private
name|Failure
index|[]
name|failures
init|=
name|EMPTY
decl_stmt|;
DECL|method|ShardInfo
specifier|public
name|ShardInfo
parameter_list|()
block|{         }
DECL|method|ShardInfo
specifier|public
name|ShardInfo
parameter_list|(
name|int
name|total
parameter_list|,
name|int
name|successful
parameter_list|,
name|int
name|pending
parameter_list|,
name|Failure
modifier|...
name|failures
parameter_list|)
block|{
assert|assert
name|total
operator|>=
literal|0
operator|&&
name|successful
operator|>=
literal|0
operator|&&
name|pending
operator|>=
literal|0
assert|;
name|this
operator|.
name|total
operator|=
name|total
expr_stmt|;
name|this
operator|.
name|successful
operator|=
name|successful
expr_stmt|;
name|this
operator|.
name|pending
operator|=
name|pending
expr_stmt|;
name|this
operator|.
name|failures
operator|=
name|failures
expr_stmt|;
block|}
comment|/**          * @return the total number of shards the write should go to (replicas and primaries). This includes relocating shards, so this number can be higher than the number of shards.          */
DECL|method|getTotal
specifier|public
name|int
name|getTotal
parameter_list|()
block|{
return|return
name|total
return|;
block|}
comment|/**          * @return the total number of shards the write succeeded on (replicas and primaries). This includes relocating shards, so this number can be higher than the number of shards.          */
DECL|method|getSuccessful
specifier|public
name|int
name|getSuccessful
parameter_list|()
block|{
return|return
name|successful
return|;
block|}
comment|/**          * @return the total number of shards a write is still to be performed on at the time this response was          * created. Typically this will only contain 0, but when async replication is used this number is higher than 0.          */
DECL|method|getPending
specifier|public
name|int
name|getPending
parameter_list|()
block|{
return|return
name|pending
return|;
block|}
comment|/**          * @return The total number of replication failures.          */
DECL|method|getFailed
specifier|public
name|int
name|getFailed
parameter_list|()
block|{
return|return
name|failures
operator|.
name|length
return|;
block|}
comment|/**          * @return The replication failures that have been captured in the case writes have failed on replica shards.          */
DECL|method|getFailures
specifier|public
name|Failure
index|[]
name|getFailures
parameter_list|()
block|{
return|return
name|failures
return|;
block|}
DECL|method|status
specifier|public
name|RestStatus
name|status
parameter_list|()
block|{
name|RestStatus
name|status
init|=
name|RestStatus
operator|.
name|OK
decl_stmt|;
for|for
control|(
name|Failure
name|failure
range|:
name|failures
control|)
block|{
if|if
condition|(
name|failure
operator|.
name|primary
argument_list|()
operator|&&
name|failure
operator|.
name|status
argument_list|()
operator|.
name|getStatus
argument_list|()
operator|>
name|status
operator|.
name|getStatus
argument_list|()
condition|)
block|{
name|status
operator|=
name|failure
operator|.
name|status
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|status
return|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|total
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
name|successful
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
name|pending
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
name|int
name|size
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|failures
operator|=
operator|new
name|Failure
index|[
name|size
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|Failure
name|failure
init|=
operator|new
name|Failure
argument_list|()
decl_stmt|;
name|failure
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|failures
index|[
name|i
index|]
operator|=
name|failure
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeVInt
argument_list|(
name|total
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|successful
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|pending
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|failures
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|Failure
name|failure
range|:
name|failures
control|)
block|{
name|failure
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|Fields
operator|.
name|_SHARDS
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|TOTAL
argument_list|,
name|total
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|SUCCESSFUL
argument_list|,
name|successful
argument_list|)
expr_stmt|;
if|if
condition|(
name|pending
operator|>
literal|0
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|PENDING
argument_list|,
name|pending
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|FAILED
argument_list|,
name|getFailed
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|failures
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|builder
operator|.
name|startArray
argument_list|(
name|Fields
operator|.
name|FAILURES
argument_list|)
expr_stmt|;
for|for
control|(
name|Failure
name|failure
range|:
name|failures
control|)
block|{
name|failure
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
DECL|method|readShardInfo
specifier|public
specifier|static
name|ShardInfo
name|readShardInfo
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|ShardInfo
name|shardInfo
init|=
operator|new
name|ShardInfo
argument_list|()
decl_stmt|;
name|shardInfo
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
return|return
name|shardInfo
return|;
block|}
DECL|class|Failure
specifier|public
specifier|static
class|class
name|Failure
implements|implements
name|ShardOperationFailedException
implements|,
name|ToXContent
block|{
DECL|field|index
specifier|private
name|String
name|index
decl_stmt|;
DECL|field|shardId
specifier|private
name|int
name|shardId
decl_stmt|;
DECL|field|nodeId
specifier|private
name|String
name|nodeId
decl_stmt|;
DECL|field|reason
specifier|private
name|String
name|reason
decl_stmt|;
DECL|field|status
specifier|private
name|RestStatus
name|status
decl_stmt|;
DECL|field|primary
specifier|private
name|boolean
name|primary
decl_stmt|;
DECL|method|Failure
specifier|public
name|Failure
parameter_list|(
name|String
name|index
parameter_list|,
name|int
name|shardId
parameter_list|,
annotation|@
name|Nullable
name|String
name|nodeId
parameter_list|,
name|String
name|reason
parameter_list|,
name|RestStatus
name|status
parameter_list|,
name|boolean
name|primary
parameter_list|)
block|{
name|this
operator|.
name|index
operator|=
name|index
expr_stmt|;
name|this
operator|.
name|shardId
operator|=
name|shardId
expr_stmt|;
name|this
operator|.
name|nodeId
operator|=
name|nodeId
expr_stmt|;
name|this
operator|.
name|reason
operator|=
name|reason
expr_stmt|;
name|this
operator|.
name|status
operator|=
name|status
expr_stmt|;
name|this
operator|.
name|primary
operator|=
name|primary
expr_stmt|;
block|}
DECL|method|Failure
name|Failure
parameter_list|()
block|{             }
comment|/**              * @return On what index the failure occurred.              */
annotation|@
name|Override
DECL|method|index
specifier|public
name|String
name|index
parameter_list|()
block|{
return|return
name|index
return|;
block|}
comment|/**              * @return On what shard id the failure occurred.              */
annotation|@
name|Override
DECL|method|shardId
specifier|public
name|int
name|shardId
parameter_list|()
block|{
return|return
name|shardId
return|;
block|}
comment|/**              * @return On what node the failure occurred.              */
annotation|@
name|Nullable
DECL|method|nodeId
specifier|public
name|String
name|nodeId
parameter_list|()
block|{
return|return
name|nodeId
return|;
block|}
comment|/**              * @return A text description of the failure              */
annotation|@
name|Override
DECL|method|reason
specifier|public
name|String
name|reason
parameter_list|()
block|{
return|return
name|reason
return|;
block|}
comment|/**              * @return The status to report if this failure was a primary failure.              */
annotation|@
name|Override
DECL|method|status
specifier|public
name|RestStatus
name|status
parameter_list|()
block|{
return|return
name|status
return|;
block|}
comment|/**              * @return Whether this failure occurred on a primary shard.              * (this only reports true for delete by query)              */
DECL|method|primary
specifier|public
name|boolean
name|primary
parameter_list|()
block|{
return|return
name|primary
return|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|index
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
name|shardId
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
name|nodeId
operator|=
name|in
operator|.
name|readOptionalString
argument_list|()
expr_stmt|;
name|reason
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
name|status
operator|=
name|RestStatus
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|primary
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeString
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|shardId
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalString
argument_list|(
name|nodeId
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeString
argument_list|(
name|reason
argument_list|)
expr_stmt|;
name|RestStatus
operator|.
name|writeTo
argument_list|(
name|out
argument_list|,
name|status
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|primary
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|_INDEX
argument_list|,
name|index
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|_SHARD
argument_list|,
name|shardId
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|_NODE
argument_list|,
name|nodeId
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|REASON
argument_list|,
name|reason
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|STATUS
argument_list|,
name|status
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|PRIMARY
argument_list|,
name|primary
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
DECL|class|Fields
specifier|private
specifier|static
class|class
name|Fields
block|{
DECL|field|_INDEX
specifier|private
specifier|static
specifier|final
name|XContentBuilderString
name|_INDEX
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"_index"
argument_list|)
decl_stmt|;
DECL|field|_SHARD
specifier|private
specifier|static
specifier|final
name|XContentBuilderString
name|_SHARD
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"_shard"
argument_list|)
decl_stmt|;
DECL|field|_NODE
specifier|private
specifier|static
specifier|final
name|XContentBuilderString
name|_NODE
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"_node"
argument_list|)
decl_stmt|;
DECL|field|REASON
specifier|private
specifier|static
specifier|final
name|XContentBuilderString
name|REASON
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"reason"
argument_list|)
decl_stmt|;
DECL|field|STATUS
specifier|private
specifier|static
specifier|final
name|XContentBuilderString
name|STATUS
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"status"
argument_list|)
decl_stmt|;
DECL|field|PRIMARY
specifier|private
specifier|static
specifier|final
name|XContentBuilderString
name|PRIMARY
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"primary"
argument_list|)
decl_stmt|;
block|}
block|}
DECL|class|Fields
specifier|private
specifier|static
class|class
name|Fields
block|{
DECL|field|_SHARDS
specifier|private
specifier|static
specifier|final
name|XContentBuilderString
name|_SHARDS
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"_shards"
argument_list|)
decl_stmt|;
DECL|field|TOTAL
specifier|private
specifier|static
specifier|final
name|XContentBuilderString
name|TOTAL
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"total"
argument_list|)
decl_stmt|;
DECL|field|SUCCESSFUL
specifier|private
specifier|static
specifier|final
name|XContentBuilderString
name|SUCCESSFUL
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"successful"
argument_list|)
decl_stmt|;
DECL|field|PENDING
specifier|private
specifier|static
specifier|final
name|XContentBuilderString
name|PENDING
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"pending"
argument_list|)
decl_stmt|;
DECL|field|FAILED
specifier|private
specifier|static
specifier|final
name|XContentBuilderString
name|FAILED
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"failed"
argument_list|)
decl_stmt|;
DECL|field|FAILURES
specifier|private
specifier|static
specifier|final
name|XContentBuilderString
name|FAILURES
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"failures"
argument_list|)
decl_stmt|;
block|}
block|}
block|}
end_class

end_unit

