begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.search
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|IndicesOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|internal
operator|.
name|InternalClient
import|;
end_import

begin_comment
comment|/**  * A request builder for multiple search requests.  */
end_comment

begin_class
DECL|class|MultiSearchRequestBuilder
specifier|public
class|class
name|MultiSearchRequestBuilder
extends|extends
name|ActionRequestBuilder
argument_list|<
name|MultiSearchRequest
argument_list|,
name|MultiSearchResponse
argument_list|,
name|MultiSearchRequestBuilder
argument_list|>
block|{
DECL|method|MultiSearchRequestBuilder
specifier|public
name|MultiSearchRequestBuilder
parameter_list|(
name|Client
name|client
parameter_list|)
block|{
name|super
argument_list|(
operator|(
name|InternalClient
operator|)
name|client
argument_list|,
operator|new
name|MultiSearchRequest
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Add a search request to execute. Note, the order is important, the search response will be returned in the      * same order as the search requests.      *<p/>      * If ignoreIndices has been set on the search request, then the indicesOptions of the multi search request      * will not be used (if set).      */
DECL|method|add
specifier|public
name|MultiSearchRequestBuilder
name|add
parameter_list|(
name|SearchRequest
name|request
parameter_list|)
block|{
if|if
condition|(
name|request
operator|.
name|indicesOptions
argument_list|()
operator|==
name|IndicesOptions
operator|.
name|strict
argument_list|()
operator|&&
name|request
argument_list|()
operator|.
name|indicesOptions
argument_list|()
operator|!=
name|IndicesOptions
operator|.
name|strict
argument_list|()
condition|)
block|{
name|request
operator|.
name|indicesOptions
argument_list|(
name|request
argument_list|()
operator|.
name|indicesOptions
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|request
operator|.
name|add
argument_list|(
name|request
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Add a search request to execute. Note, the order is important, the search response will be returned in the      * same order as the search requests.      */
DECL|method|add
specifier|public
name|MultiSearchRequestBuilder
name|add
parameter_list|(
name|SearchRequestBuilder
name|request
parameter_list|)
block|{
if|if
condition|(
name|request
operator|.
name|request
argument_list|()
operator|.
name|indicesOptions
argument_list|()
operator|==
name|IndicesOptions
operator|.
name|strict
argument_list|()
operator|&&
name|request
argument_list|()
operator|.
name|indicesOptions
argument_list|()
operator|!=
name|IndicesOptions
operator|.
name|strict
argument_list|()
condition|)
block|{
name|request
operator|.
name|request
argument_list|()
operator|.
name|indicesOptions
argument_list|(
name|request
argument_list|()
operator|.
name|indicesOptions
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|request
operator|.
name|add
argument_list|(
name|request
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Specifies what type of requested indices to ignore and how to deal with wildcard indices expressions.      * For example indices that don't exist.      *      * Invoke this method before invoking {@link #add(SearchRequestBuilder)}.      */
DECL|method|setIndicesOptions
specifier|public
name|MultiSearchRequestBuilder
name|setIndicesOptions
parameter_list|(
name|IndicesOptions
name|indicesOptions
parameter_list|)
block|{
name|request
argument_list|()
operator|.
name|indicesOptions
argument_list|(
name|indicesOptions
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|doExecute
specifier|protected
name|void
name|doExecute
parameter_list|(
name|ActionListener
argument_list|<
name|MultiSearchResponse
argument_list|>
name|listener
parameter_list|)
block|{
operator|(
operator|(
name|Client
operator|)
name|client
operator|)
operator|.
name|multiSearch
argument_list|(
name|request
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

