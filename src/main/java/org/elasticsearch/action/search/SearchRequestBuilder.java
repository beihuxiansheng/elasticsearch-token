begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.search
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticSearchIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|IgnoreIndices
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|internal
operator|.
name|InternalClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|FilterBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|Scroll
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|builder
operator|.
name|SearchSourceBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|facet
operator|.
name|FacetBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|highlight
operator|.
name|HighlightBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|rescore
operator|.
name|RescoreBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|sort
operator|.
name|SortBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|sort
operator|.
name|SortOrder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|SuggestBuilder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * A search action request builder.  */
end_comment

begin_class
DECL|class|SearchRequestBuilder
specifier|public
class|class
name|SearchRequestBuilder
extends|extends
name|ActionRequestBuilder
argument_list|<
name|SearchRequest
argument_list|,
name|SearchResponse
argument_list|,
name|SearchRequestBuilder
argument_list|>
block|{
DECL|field|sourceBuilder
specifier|private
name|SearchSourceBuilder
name|sourceBuilder
decl_stmt|;
DECL|method|SearchRequestBuilder
specifier|public
name|SearchRequestBuilder
parameter_list|(
name|Client
name|client
parameter_list|)
block|{
name|super
argument_list|(
operator|(
name|InternalClient
operator|)
name|client
argument_list|,
operator|new
name|SearchRequest
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets the indices the search will be executed on.      */
DECL|method|setIndices
specifier|public
name|SearchRequestBuilder
name|setIndices
parameter_list|(
name|String
modifier|...
name|indices
parameter_list|)
block|{
name|request
operator|.
name|indices
argument_list|(
name|indices
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * The document types to execute the search against. Defaults to be executed against      * all types.      */
DECL|method|setTypes
specifier|public
name|SearchRequestBuilder
name|setTypes
parameter_list|(
name|String
modifier|...
name|types
parameter_list|)
block|{
name|request
operator|.
name|types
argument_list|(
name|types
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * The search type to execute, defaults to {@link org.elasticsearch.action.search.SearchType#DEFAULT}.      */
DECL|method|setSearchType
specifier|public
name|SearchRequestBuilder
name|setSearchType
parameter_list|(
name|SearchType
name|searchType
parameter_list|)
block|{
name|request
operator|.
name|searchType
argument_list|(
name|searchType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * The a string representation search type to execute, defaults to {@link SearchType#DEFAULT}. Can be      * one of "dfs_query_then_fetch"/"dfsQueryThenFetch", "dfs_query_and_fetch"/"dfsQueryAndFetch",      * "query_then_fetch"/"queryThenFetch", and "query_and_fetch"/"queryAndFetch".      */
DECL|method|setSearchType
specifier|public
name|SearchRequestBuilder
name|setSearchType
parameter_list|(
name|String
name|searchType
parameter_list|)
throws|throws
name|ElasticSearchIllegalArgumentException
block|{
name|request
operator|.
name|searchType
argument_list|(
name|searchType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * If set, will enable scrolling of the search request.      */
DECL|method|setScroll
specifier|public
name|SearchRequestBuilder
name|setScroll
parameter_list|(
name|Scroll
name|scroll
parameter_list|)
block|{
name|request
operator|.
name|scroll
argument_list|(
name|scroll
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * If set, will enable scrolling of the search request for the specified timeout.      */
DECL|method|setScroll
specifier|public
name|SearchRequestBuilder
name|setScroll
parameter_list|(
name|TimeValue
name|keepAlive
parameter_list|)
block|{
name|request
operator|.
name|scroll
argument_list|(
name|keepAlive
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * If set, will enable scrolling of the search request for the specified timeout.      */
DECL|method|setScroll
specifier|public
name|SearchRequestBuilder
name|setScroll
parameter_list|(
name|String
name|keepAlive
parameter_list|)
block|{
name|request
operator|.
name|scroll
argument_list|(
name|keepAlive
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * An optional timeout to control how long search is allowed to take.      */
DECL|method|setTimeout
specifier|public
name|SearchRequestBuilder
name|setTimeout
parameter_list|(
name|TimeValue
name|timeout
parameter_list|)
block|{
name|sourceBuilder
argument_list|()
operator|.
name|timeout
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * An optional timeout to control how long search is allowed to take.      */
DECL|method|setTimeout
specifier|public
name|SearchRequestBuilder
name|setTimeout
parameter_list|(
name|String
name|timeout
parameter_list|)
block|{
name|sourceBuilder
argument_list|()
operator|.
name|timeout
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * A comma separated list of routing values to control the shards the search will be executed on.      */
DECL|method|setRouting
specifier|public
name|SearchRequestBuilder
name|setRouting
parameter_list|(
name|String
name|routing
parameter_list|)
block|{
name|request
operator|.
name|routing
argument_list|(
name|routing
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * The routing values to control the shards that the search will be executed on.      */
DECL|method|setRouting
specifier|public
name|SearchRequestBuilder
name|setRouting
parameter_list|(
name|String
modifier|...
name|routing
parameter_list|)
block|{
name|request
operator|.
name|routing
argument_list|(
name|routing
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the preference to execute the search. Defaults to randomize across shards. Can be set to      *<tt>_local</tt> to prefer local shards,<tt>_primary</tt> to execute only on primary shards, or      * a custom value, which guarantees that the same order will be used across different requests.      */
DECL|method|setPreference
specifier|public
name|SearchRequestBuilder
name|setPreference
parameter_list|(
name|String
name|preference
parameter_list|)
block|{
name|request
operator|.
name|preference
argument_list|(
name|preference
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Controls the the search operation threading model.      */
DECL|method|setOperationThreading
specifier|public
name|SearchRequestBuilder
name|setOperationThreading
parameter_list|(
name|SearchOperationThreading
name|operationThreading
parameter_list|)
block|{
name|request
operator|.
name|operationThreading
argument_list|(
name|operationThreading
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the string representation of the operation threading model. Can be one of      * "no_threads", "single_thread" and "thread_per_shard".      */
DECL|method|setOperationThreading
specifier|public
name|SearchRequestBuilder
name|setOperationThreading
parameter_list|(
name|String
name|operationThreading
parameter_list|)
block|{
name|request
operator|.
name|operationThreading
argument_list|(
name|operationThreading
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Specifies what type of requested indices to ignore. For example indices that don't exist.      */
DECL|method|setIgnoreIndices
specifier|public
name|SearchRequestBuilder
name|setIgnoreIndices
parameter_list|(
name|IgnoreIndices
name|ignoreIndices
parameter_list|)
block|{
name|request
argument_list|()
operator|.
name|ignoreIndices
argument_list|(
name|ignoreIndices
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Constructs a new search source builder with a search query.      *      * @see org.elasticsearch.index.query.QueryBuilders      */
DECL|method|setQuery
specifier|public
name|SearchRequestBuilder
name|setQuery
parameter_list|(
name|QueryBuilder
name|queryBuilder
parameter_list|)
block|{
name|sourceBuilder
argument_list|()
operator|.
name|query
argument_list|(
name|queryBuilder
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Constructs a new search source builder with a raw search query.      */
DECL|method|setQuery
specifier|public
name|SearchRequestBuilder
name|setQuery
parameter_list|(
name|String
name|query
parameter_list|)
block|{
name|sourceBuilder
argument_list|()
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Constructs a new search source builder with a raw search query.      */
DECL|method|setQuery
specifier|public
name|SearchRequestBuilder
name|setQuery
parameter_list|(
name|BytesReference
name|queryBinary
parameter_list|)
block|{
name|sourceBuilder
argument_list|()
operator|.
name|query
argument_list|(
name|queryBinary
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Constructs a new search source builder with a raw search query.      */
DECL|method|setQuery
specifier|public
name|SearchRequestBuilder
name|setQuery
parameter_list|(
name|byte
index|[]
name|queryBinary
parameter_list|)
block|{
name|sourceBuilder
argument_list|()
operator|.
name|query
argument_list|(
name|queryBinary
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Constructs a new search source builder with a raw search query.      */
DECL|method|setQuery
specifier|public
name|SearchRequestBuilder
name|setQuery
parameter_list|(
name|byte
index|[]
name|queryBinary
parameter_list|,
name|int
name|queryBinaryOffset
parameter_list|,
name|int
name|queryBinaryLength
parameter_list|)
block|{
name|sourceBuilder
argument_list|()
operator|.
name|query
argument_list|(
name|queryBinary
argument_list|,
name|queryBinaryOffset
argument_list|,
name|queryBinaryLength
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Constructs a new search source builder with a raw search query.      */
DECL|method|setQuery
specifier|public
name|SearchRequestBuilder
name|setQuery
parameter_list|(
name|XContentBuilder
name|query
parameter_list|)
block|{
name|sourceBuilder
argument_list|()
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Constructs a new search source builder with a raw search query.      */
DECL|method|setQuery
specifier|public
name|SearchRequestBuilder
name|setQuery
parameter_list|(
name|Map
name|query
parameter_list|)
block|{
name|sourceBuilder
argument_list|()
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets a filter on the query executed that only applies to the search query      * (and not facets for example).      */
DECL|method|setFilter
specifier|public
name|SearchRequestBuilder
name|setFilter
parameter_list|(
name|FilterBuilder
name|filter
parameter_list|)
block|{
name|sourceBuilder
argument_list|()
operator|.
name|filter
argument_list|(
name|filter
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets a filter on the query executed that only applies to the search query      * (and not facets for example).      */
DECL|method|setFilter
specifier|public
name|SearchRequestBuilder
name|setFilter
parameter_list|(
name|String
name|filter
parameter_list|)
block|{
name|sourceBuilder
argument_list|()
operator|.
name|filter
argument_list|(
name|filter
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets a filter on the query executed that only applies to the search query      * (and not facets for example).      */
DECL|method|setFilter
specifier|public
name|SearchRequestBuilder
name|setFilter
parameter_list|(
name|BytesReference
name|filter
parameter_list|)
block|{
name|sourceBuilder
argument_list|()
operator|.
name|filter
argument_list|(
name|filter
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets a filter on the query executed that only applies to the search query      * (and not facets for example).      */
DECL|method|setFilter
specifier|public
name|SearchRequestBuilder
name|setFilter
parameter_list|(
name|byte
index|[]
name|filter
parameter_list|)
block|{
name|sourceBuilder
argument_list|()
operator|.
name|filter
argument_list|(
name|filter
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets a filter on the query executed that only applies to the search query      * (and not facets for example).      */
DECL|method|setFilter
specifier|public
name|SearchRequestBuilder
name|setFilter
parameter_list|(
name|byte
index|[]
name|filter
parameter_list|,
name|int
name|filterOffset
parameter_list|,
name|int
name|filterLength
parameter_list|)
block|{
name|sourceBuilder
argument_list|()
operator|.
name|filter
argument_list|(
name|filter
argument_list|,
name|filterOffset
argument_list|,
name|filterLength
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets a filter on the query executed that only applies to the search query      * (and not facets for example).      */
DECL|method|setFilter
specifier|public
name|SearchRequestBuilder
name|setFilter
parameter_list|(
name|XContentBuilder
name|filter
parameter_list|)
block|{
name|sourceBuilder
argument_list|()
operator|.
name|filter
argument_list|(
name|filter
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets a filter on the query executed that only applies to the search query      * (and not facets for example).      */
DECL|method|setFilter
specifier|public
name|SearchRequestBuilder
name|setFilter
parameter_list|(
name|Map
name|filter
parameter_list|)
block|{
name|sourceBuilder
argument_list|()
operator|.
name|filter
argument_list|(
name|filter
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the minimum score below which docs will be filtered out.      */
DECL|method|setMinScore
specifier|public
name|SearchRequestBuilder
name|setMinScore
parameter_list|(
name|float
name|minScore
parameter_list|)
block|{
name|sourceBuilder
argument_list|()
operator|.
name|minScore
argument_list|(
name|minScore
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * From index to start the search from. Defaults to<tt>0</tt>.      */
DECL|method|setFrom
specifier|public
name|SearchRequestBuilder
name|setFrom
parameter_list|(
name|int
name|from
parameter_list|)
block|{
name|sourceBuilder
argument_list|()
operator|.
name|from
argument_list|(
name|from
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * The number of search hits to return. Defaults to<tt>10</tt>.      */
DECL|method|setSize
specifier|public
name|SearchRequestBuilder
name|setSize
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|sourceBuilder
argument_list|()
operator|.
name|size
argument_list|(
name|size
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Should each {@link org.elasticsearch.search.SearchHit} be returned with an      * explanation of the hit (ranking).      */
DECL|method|setExplain
specifier|public
name|SearchRequestBuilder
name|setExplain
parameter_list|(
name|boolean
name|explain
parameter_list|)
block|{
name|sourceBuilder
argument_list|()
operator|.
name|explain
argument_list|(
name|explain
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Should each {@link org.elasticsearch.search.SearchHit} be returned with its      * version.      */
DECL|method|setVersion
specifier|public
name|SearchRequestBuilder
name|setVersion
parameter_list|(
name|boolean
name|version
parameter_list|)
block|{
name|sourceBuilder
argument_list|()
operator|.
name|version
argument_list|(
name|version
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the boost a specific index will receive when the query is executeed against it.      *      * @param index      The index to apply the boost against      * @param indexBoost The boost to apply to the index      */
DECL|method|addIndexBoost
specifier|public
name|SearchRequestBuilder
name|addIndexBoost
parameter_list|(
name|String
name|index
parameter_list|,
name|float
name|indexBoost
parameter_list|)
block|{
name|sourceBuilder
argument_list|()
operator|.
name|indexBoost
argument_list|(
name|index
argument_list|,
name|indexBoost
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * The stats groups this request will be aggregated under.      */
DECL|method|setStats
specifier|public
name|SearchRequestBuilder
name|setStats
parameter_list|(
name|String
modifier|...
name|statsGroups
parameter_list|)
block|{
name|sourceBuilder
argument_list|()
operator|.
name|stats
argument_list|(
name|statsGroups
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets no fields to be loaded, resulting in only id and type to be returned per field.      */
DECL|method|setNoFields
specifier|public
name|SearchRequestBuilder
name|setNoFields
parameter_list|()
block|{
name|sourceBuilder
argument_list|()
operator|.
name|noFields
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Adds a field to load and return (note, it must be stored) as part of the search request.      * If none are specified, the source of the document will be return.      */
DECL|method|addField
specifier|public
name|SearchRequestBuilder
name|addField
parameter_list|(
name|String
name|field
parameter_list|)
block|{
name|sourceBuilder
argument_list|()
operator|.
name|field
argument_list|(
name|field
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Adds a script based field to load and return. The field does not have to be stored,      * but its recommended to use non analyzed or numeric fields.      *      * @param name   The name that will represent this value in the return hit      * @param script The script to use      */
DECL|method|addScriptField
specifier|public
name|SearchRequestBuilder
name|addScriptField
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|script
parameter_list|)
block|{
name|sourceBuilder
argument_list|()
operator|.
name|scriptField
argument_list|(
name|name
argument_list|,
name|script
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Adds a script based field to load and return. The field does not have to be stored,      * but its recommended to use non analyzed or numeric fields.      *      * @param name   The name that will represent this value in the return hit      * @param script The script to use      * @param params Parameters that the script can use.      */
DECL|method|addScriptField
specifier|public
name|SearchRequestBuilder
name|addScriptField
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|script
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
parameter_list|)
block|{
name|sourceBuilder
argument_list|()
operator|.
name|scriptField
argument_list|(
name|name
argument_list|,
name|script
argument_list|,
name|params
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Adds a partial field based on _source, with an "include" and/or "exclude" set which can include simple wildcard      * elements.      *      * @param name    The name of the field      * @param include An optional include (optionally wildcarded) pattern from _source      * @param exclude An optional exclude (optionally wildcarded) pattern from _source      */
DECL|method|addPartialField
specifier|public
name|SearchRequestBuilder
name|addPartialField
parameter_list|(
name|String
name|name
parameter_list|,
annotation|@
name|Nullable
name|String
name|include
parameter_list|,
annotation|@
name|Nullable
name|String
name|exclude
parameter_list|)
block|{
name|sourceBuilder
argument_list|()
operator|.
name|partialField
argument_list|(
name|name
argument_list|,
name|include
argument_list|,
name|exclude
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Adds a partial field based on _source, with an "includes" and/or "excludes set which can include simple wildcard      * elements.      *      * @param name     The name of the field      * @param includes An optional list of includes (optionally wildcarded) patterns from _source      * @param excludes An optional list of excludes (optionally wildcarded) patterns from _source      */
DECL|method|addPartialField
specifier|public
name|SearchRequestBuilder
name|addPartialField
parameter_list|(
name|String
name|name
parameter_list|,
annotation|@
name|Nullable
name|String
index|[]
name|includes
parameter_list|,
annotation|@
name|Nullable
name|String
index|[]
name|excludes
parameter_list|)
block|{
name|sourceBuilder
argument_list|()
operator|.
name|partialField
argument_list|(
name|name
argument_list|,
name|includes
argument_list|,
name|excludes
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Adds a script based field to load and return. The field does not have to be stored,      * but its recommended to use non analyzed or numeric fields.      *      * @param name   The name that will represent this value in the return hit      * @param lang   The language of the script      * @param script The script to use      * @param params Parameters that the script can use (can be<tt>null</tt>).      */
DECL|method|addScriptField
specifier|public
name|SearchRequestBuilder
name|addScriptField
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|lang
parameter_list|,
name|String
name|script
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
parameter_list|)
block|{
name|sourceBuilder
argument_list|()
operator|.
name|scriptField
argument_list|(
name|name
argument_list|,
name|lang
argument_list|,
name|script
argument_list|,
name|params
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Adds a sort against the given field name and the sort ordering.      *      * @param field The name of the field      * @param order The sort ordering      */
DECL|method|addSort
specifier|public
name|SearchRequestBuilder
name|addSort
parameter_list|(
name|String
name|field
parameter_list|,
name|SortOrder
name|order
parameter_list|)
block|{
name|sourceBuilder
argument_list|()
operator|.
name|sort
argument_list|(
name|field
argument_list|,
name|order
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Adds a generic sort builder.      *      * @see org.elasticsearch.search.sort.SortBuilders      */
DECL|method|addSort
specifier|public
name|SearchRequestBuilder
name|addSort
parameter_list|(
name|SortBuilder
name|sort
parameter_list|)
block|{
name|sourceBuilder
argument_list|()
operator|.
name|sort
argument_list|(
name|sort
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Applies when sorting, and controls if scores will be tracked as well. Defaults to      *<tt>false</tt>.      */
DECL|method|setTrackScores
specifier|public
name|SearchRequestBuilder
name|setTrackScores
parameter_list|(
name|boolean
name|trackScores
parameter_list|)
block|{
name|sourceBuilder
argument_list|()
operator|.
name|trackScores
argument_list|(
name|trackScores
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Adds the fields to load and return as part of the search request. If none are specified,      * the source of the document will be returned.      */
DECL|method|addFields
specifier|public
name|SearchRequestBuilder
name|addFields
parameter_list|(
name|String
modifier|...
name|fields
parameter_list|)
block|{
name|sourceBuilder
argument_list|()
operator|.
name|fields
argument_list|(
name|fields
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Adds a facet to the search operation.      */
DECL|method|addFacet
specifier|public
name|SearchRequestBuilder
name|addFacet
parameter_list|(
name|FacetBuilder
name|facet
parameter_list|)
block|{
name|sourceBuilder
argument_list|()
operator|.
name|facet
argument_list|(
name|facet
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets a raw (xcontent) binary representation of facets to use.      */
DECL|method|setFacets
specifier|public
name|SearchRequestBuilder
name|setFacets
parameter_list|(
name|BytesReference
name|facets
parameter_list|)
block|{
name|sourceBuilder
argument_list|()
operator|.
name|facets
argument_list|(
name|facets
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets a raw (xcontent) binary representation of facets to use.      */
DECL|method|setFacets
specifier|public
name|SearchRequestBuilder
name|setFacets
parameter_list|(
name|byte
index|[]
name|facets
parameter_list|)
block|{
name|sourceBuilder
argument_list|()
operator|.
name|facets
argument_list|(
name|facets
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets a raw (xcontent) binary representation of facets to use.      */
DECL|method|setFacets
specifier|public
name|SearchRequestBuilder
name|setFacets
parameter_list|(
name|byte
index|[]
name|facets
parameter_list|,
name|int
name|facetsOffset
parameter_list|,
name|int
name|facetsLength
parameter_list|)
block|{
name|sourceBuilder
argument_list|()
operator|.
name|facets
argument_list|(
name|facets
argument_list|,
name|facetsOffset
argument_list|,
name|facetsLength
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets a raw (xcontent) binary representation of facets to use.      */
DECL|method|setFacets
specifier|public
name|SearchRequestBuilder
name|setFacets
parameter_list|(
name|XContentBuilder
name|facets
parameter_list|)
block|{
name|sourceBuilder
argument_list|()
operator|.
name|facets
argument_list|(
name|facets
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets a raw (xcontent) binary representation of facets to use.      */
DECL|method|setFacets
specifier|public
name|SearchRequestBuilder
name|setFacets
parameter_list|(
name|Map
name|facets
parameter_list|)
block|{
name|sourceBuilder
argument_list|()
operator|.
name|facets
argument_list|(
name|facets
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Adds a field to be highlighted with default fragment size of 100 characters, and      * default number of fragments of 5.      *      * @param name The field to highlight      */
DECL|method|addHighlightedField
specifier|public
name|SearchRequestBuilder
name|addHighlightedField
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|highlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Adds a field to be highlighted with a provided fragment size (in characters), and      * default number of fragments of 5.      *      * @param name         The field to highlight      * @param fragmentSize The size of a fragment in characters      */
DECL|method|addHighlightedField
specifier|public
name|SearchRequestBuilder
name|addHighlightedField
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|fragmentSize
parameter_list|)
block|{
name|highlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
name|name
argument_list|,
name|fragmentSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Adds a field to be highlighted with a provided fragment size (in characters), and      * a provided (maximum) number of fragments.      *      * @param name              The field to highlight      * @param fragmentSize      The size of a fragment in characters      * @param numberOfFragments The (maximum) number of fragments      */
DECL|method|addHighlightedField
specifier|public
name|SearchRequestBuilder
name|addHighlightedField
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|fragmentSize
parameter_list|,
name|int
name|numberOfFragments
parameter_list|)
block|{
name|highlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
name|name
argument_list|,
name|fragmentSize
argument_list|,
name|numberOfFragments
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Adds a field to be highlighted with a provided fragment size (in characters),      * a provided (maximum) number of fragments and an offset for the highlight.      *      * @param name              The field to highlight      * @param fragmentSize      The size of a fragment in characters      * @param numberOfFragments The (maximum) number of fragments      */
DECL|method|addHighlightedField
specifier|public
name|SearchRequestBuilder
name|addHighlightedField
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|fragmentSize
parameter_list|,
name|int
name|numberOfFragments
parameter_list|,
name|int
name|fragmentOffset
parameter_list|)
block|{
name|highlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
name|name
argument_list|,
name|fragmentSize
argument_list|,
name|numberOfFragments
argument_list|,
name|fragmentOffset
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Adds a highlighted field.      */
DECL|method|addHighlightedField
specifier|public
name|SearchRequestBuilder
name|addHighlightedField
parameter_list|(
name|HighlightBuilder
operator|.
name|Field
name|field
parameter_list|)
block|{
name|highlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
name|field
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Set a tag scheme that encapsulates a built in pre and post tags. The allows schemes      * are<tt>styled</tt> and<tt>default</tt>.      *      * @param schemaName The tag scheme name      */
DECL|method|setHighlighterTagsSchema
specifier|public
name|SearchRequestBuilder
name|setHighlighterTagsSchema
parameter_list|(
name|String
name|schemaName
parameter_list|)
block|{
name|highlightBuilder
argument_list|()
operator|.
name|tagsSchema
argument_list|(
name|schemaName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Explicitly set the pre tags that will be used for highlighting.      */
DECL|method|setHighlighterPreTags
specifier|public
name|SearchRequestBuilder
name|setHighlighterPreTags
parameter_list|(
name|String
modifier|...
name|preTags
parameter_list|)
block|{
name|highlightBuilder
argument_list|()
operator|.
name|preTags
argument_list|(
name|preTags
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Explicitly set the post tags that will be used for highlighting.      */
DECL|method|setHighlighterPostTags
specifier|public
name|SearchRequestBuilder
name|setHighlighterPostTags
parameter_list|(
name|String
modifier|...
name|postTags
parameter_list|)
block|{
name|highlightBuilder
argument_list|()
operator|.
name|postTags
argument_list|(
name|postTags
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * The order of fragments per field. By default, ordered by the order in the      * highlighted text. Can be<tt>score</tt>, which then it will be ordered      * by score of the fragments.      */
DECL|method|setHighlighterOrder
specifier|public
name|SearchRequestBuilder
name|setHighlighterOrder
parameter_list|(
name|String
name|order
parameter_list|)
block|{
name|highlightBuilder
argument_list|()
operator|.
name|order
argument_list|(
name|order
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * The encoder to set for highlighting      */
DECL|method|setHighlighterEncoder
specifier|public
name|SearchRequestBuilder
name|setHighlighterEncoder
parameter_list|(
name|String
name|encoder
parameter_list|)
block|{
name|highlightBuilder
argument_list|()
operator|.
name|encoder
argument_list|(
name|encoder
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setHighlighterRequireFieldMatch
specifier|public
name|SearchRequestBuilder
name|setHighlighterRequireFieldMatch
parameter_list|(
name|boolean
name|requireFieldMatch
parameter_list|)
block|{
name|highlightBuilder
argument_list|()
operator|.
name|requireFieldMatch
argument_list|(
name|requireFieldMatch
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * The highlighter type to use.      */
DECL|method|setHighlighterType
specifier|public
name|SearchRequestBuilder
name|setHighlighterType
parameter_list|(
name|String
name|type
parameter_list|)
block|{
name|highlightBuilder
argument_list|()
operator|.
name|highlighterType
argument_list|(
name|type
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Delegates to {@link org.elasticsearch.search.suggest.SuggestBuilder#setText(String)}.      */
DECL|method|setSuggestText
specifier|public
name|SearchRequestBuilder
name|setSuggestText
parameter_list|(
name|String
name|globalText
parameter_list|)
block|{
name|suggestBuilder
argument_list|()
operator|.
name|setText
argument_list|(
name|globalText
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Delegates to {@link org.elasticsearch.search.suggest.SuggestBuilder#addSuggestion(org.elasticsearch.search.suggest.SuggestBuilder.SuggestionBuilder)}.      */
DECL|method|addSuggestion
specifier|public
name|SearchRequestBuilder
name|addSuggestion
parameter_list|(
name|SuggestBuilder
operator|.
name|SuggestionBuilder
argument_list|<
name|?
argument_list|>
name|suggestion
parameter_list|)
block|{
name|suggestBuilder
argument_list|()
operator|.
name|addSuggestion
argument_list|(
name|suggestion
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setRescorer
specifier|public
name|SearchRequestBuilder
name|setRescorer
parameter_list|(
name|RescoreBuilder
operator|.
name|Rescorer
name|rescorer
parameter_list|)
block|{
name|rescoreBuilder
argument_list|()
operator|.
name|rescorer
argument_list|(
name|rescorer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setRescoreWindow
specifier|public
name|SearchRequestBuilder
name|setRescoreWindow
parameter_list|(
name|int
name|window
parameter_list|)
block|{
name|rescoreBuilder
argument_list|()
operator|.
name|windowSize
argument_list|(
name|window
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the source of the request as a json string. Note, settings anything other      * than the search type will cause this source to be overridden, consider using      * {@link #setExtraSource(String)}.      */
DECL|method|setSource
specifier|public
name|SearchRequestBuilder
name|setSource
parameter_list|(
name|String
name|source
parameter_list|)
block|{
name|request
operator|.
name|source
argument_list|(
name|source
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the source of the request as a json string. Allows to set other parameters.      */
DECL|method|setExtraSource
specifier|public
name|SearchRequestBuilder
name|setExtraSource
parameter_list|(
name|String
name|source
parameter_list|)
block|{
name|request
operator|.
name|extraSource
argument_list|(
name|source
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the source of the request as a json string. Note, settings anything other      * than the search type will cause this source to be overridden, consider using      * {@link #setExtraSource(BytesReference)}.      */
DECL|method|setSource
specifier|public
name|SearchRequestBuilder
name|setSource
parameter_list|(
name|BytesReference
name|source
parameter_list|)
block|{
name|request
operator|.
name|source
argument_list|(
name|source
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the source of the request as a json string. Note, settings anything other      * than the search type will cause this source to be overridden, consider using      * {@link #setExtraSource(BytesReference)}.      */
DECL|method|setSource
specifier|public
name|SearchRequestBuilder
name|setSource
parameter_list|(
name|BytesReference
name|source
parameter_list|,
name|boolean
name|unsafe
parameter_list|)
block|{
name|request
operator|.
name|source
argument_list|(
name|source
argument_list|,
name|unsafe
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the source of the request as a json string. Note, settings anything other      * than the search type will cause this source to be overridden, consider using      * {@link #setExtraSource(byte[])}.      */
DECL|method|setSource
specifier|public
name|SearchRequestBuilder
name|setSource
parameter_list|(
name|byte
index|[]
name|source
parameter_list|)
block|{
name|request
operator|.
name|source
argument_list|(
name|source
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the source of the request as a json string. Allows to set other parameters.      */
DECL|method|setExtraSource
specifier|public
name|SearchRequestBuilder
name|setExtraSource
parameter_list|(
name|BytesReference
name|source
parameter_list|)
block|{
name|request
operator|.
name|extraSource
argument_list|(
name|source
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the source of the request as a json string. Allows to set other parameters.      */
DECL|method|setExtraSource
specifier|public
name|SearchRequestBuilder
name|setExtraSource
parameter_list|(
name|BytesReference
name|source
parameter_list|,
name|boolean
name|unsafe
parameter_list|)
block|{
name|request
operator|.
name|extraSource
argument_list|(
name|source
argument_list|,
name|unsafe
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the source of the request as a json string. Allows to set other parameters.      */
DECL|method|setExtraSource
specifier|public
name|SearchRequestBuilder
name|setExtraSource
parameter_list|(
name|byte
index|[]
name|source
parameter_list|)
block|{
name|request
operator|.
name|extraSource
argument_list|(
name|source
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the source of the request as a json string. Note, settings anything other      * than the search type will cause this source to be overridden, consider using      * {@link #setExtraSource(byte[])}.      */
DECL|method|setSource
specifier|public
name|SearchRequestBuilder
name|setSource
parameter_list|(
name|byte
index|[]
name|source
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|request
operator|.
name|source
argument_list|(
name|source
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the source of the request as a json string. Allows to set other parameters.      */
DECL|method|setExtraSource
specifier|public
name|SearchRequestBuilder
name|setExtraSource
parameter_list|(
name|byte
index|[]
name|source
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|request
operator|.
name|extraSource
argument_list|(
name|source
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the source of the request as a json string. Note, settings anything other      * than the search type will cause this source to be overridden, consider using      * {@link #setExtraSource(byte[])}.      */
DECL|method|setSource
specifier|public
name|SearchRequestBuilder
name|setSource
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|)
block|{
name|request
operator|.
name|source
argument_list|(
name|builder
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the source of the request as a json string. Allows to set other parameters.      */
DECL|method|setExtraSource
specifier|public
name|SearchRequestBuilder
name|setExtraSource
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|)
block|{
name|request
operator|.
name|extraSource
argument_list|(
name|builder
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the source of the request as a map. Note, setting anything other than the      * search type will cause this source to be overridden, consider using      * {@link #setExtraSource(java.util.Map)}.      */
DECL|method|setSource
specifier|public
name|SearchRequestBuilder
name|setSource
parameter_list|(
name|Map
name|source
parameter_list|)
block|{
name|request
operator|.
name|source
argument_list|(
name|source
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setExtraSource
specifier|public
name|SearchRequestBuilder
name|setExtraSource
parameter_list|(
name|Map
name|source
parameter_list|)
block|{
name|request
operator|.
name|extraSource
argument_list|(
name|source
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the source builder to be used with this request. Note, any operations done      * on this require builder before are discarded as this internal builder replaces      * what has been built up until this point.      */
DECL|method|internalBuilder
specifier|public
name|SearchRequestBuilder
name|internalBuilder
parameter_list|(
name|SearchSourceBuilder
name|sourceBuilder
parameter_list|)
block|{
name|this
operator|.
name|sourceBuilder
operator|=
name|sourceBuilder
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Returns the internal search source builder used to construct the request.      */
DECL|method|internalBuilder
specifier|public
name|SearchSourceBuilder
name|internalBuilder
parameter_list|()
block|{
return|return
name|sourceBuilder
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|internalBuilder
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|request
specifier|public
name|SearchRequest
name|request
parameter_list|()
block|{
if|if
condition|(
name|sourceBuilder
operator|!=
literal|null
condition|)
block|{
name|request
operator|.
name|source
argument_list|(
name|sourceBuilder
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|request
return|;
block|}
annotation|@
name|Override
DECL|method|doExecute
specifier|protected
name|void
name|doExecute
parameter_list|(
name|ActionListener
argument_list|<
name|SearchResponse
argument_list|>
name|listener
parameter_list|)
block|{
if|if
condition|(
name|sourceBuilder
operator|!=
literal|null
condition|)
block|{
name|request
operator|.
name|source
argument_list|(
name|sourceBuilder
argument_list|()
argument_list|)
expr_stmt|;
block|}
operator|(
operator|(
name|Client
operator|)
name|client
operator|)
operator|.
name|search
argument_list|(
name|request
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
DECL|method|sourceBuilder
specifier|private
name|SearchSourceBuilder
name|sourceBuilder
parameter_list|()
block|{
if|if
condition|(
name|sourceBuilder
operator|==
literal|null
condition|)
block|{
name|sourceBuilder
operator|=
operator|new
name|SearchSourceBuilder
argument_list|()
expr_stmt|;
block|}
return|return
name|sourceBuilder
return|;
block|}
DECL|method|highlightBuilder
specifier|private
name|HighlightBuilder
name|highlightBuilder
parameter_list|()
block|{
return|return
name|sourceBuilder
argument_list|()
operator|.
name|highlighter
argument_list|()
return|;
block|}
DECL|method|suggestBuilder
specifier|private
name|SuggestBuilder
name|suggestBuilder
parameter_list|()
block|{
return|return
name|sourceBuilder
argument_list|()
operator|.
name|suggest
argument_list|()
return|;
block|}
DECL|method|rescoreBuilder
specifier|private
name|RescoreBuilder
name|rescoreBuilder
parameter_list|()
block|{
return|return
name|sourceBuilder
argument_list|()
operator|.
name|rescore
argument_list|()
return|;
block|}
block|}
end_class

end_unit

