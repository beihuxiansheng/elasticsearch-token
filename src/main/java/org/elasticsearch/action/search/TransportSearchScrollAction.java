begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.search
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|type
operator|.
name|ParsedScrollId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|type
operator|.
name|TransportSearchScrollQueryAndFetchAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|type
operator|.
name|TransportSearchScrollQueryThenFetchAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|type
operator|.
name|TransportSearchScrollScanAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|TransportAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|BaseTransportRequestHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportService
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|type
operator|.
name|ParsedScrollId
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|type
operator|.
name|TransportSearchHelper
operator|.
name|parseScrollId
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|TransportSearchScrollAction
specifier|public
class|class
name|TransportSearchScrollAction
extends|extends
name|TransportAction
argument_list|<
name|SearchScrollRequest
argument_list|,
name|SearchResponse
argument_list|>
block|{
DECL|field|queryThenFetchAction
specifier|private
specifier|final
name|TransportSearchScrollQueryThenFetchAction
name|queryThenFetchAction
decl_stmt|;
DECL|field|queryAndFetchAction
specifier|private
specifier|final
name|TransportSearchScrollQueryAndFetchAction
name|queryAndFetchAction
decl_stmt|;
DECL|field|scanAction
specifier|private
specifier|final
name|TransportSearchScrollScanAction
name|scanAction
decl_stmt|;
annotation|@
name|Inject
DECL|method|TransportSearchScrollAction
specifier|public
name|TransportSearchScrollAction
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|ThreadPool
name|threadPool
parameter_list|,
name|TransportService
name|transportService
parameter_list|,
name|TransportSearchScrollQueryThenFetchAction
name|queryThenFetchAction
parameter_list|,
name|TransportSearchScrollQueryAndFetchAction
name|queryAndFetchAction
parameter_list|,
name|TransportSearchScrollScanAction
name|scanAction
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|,
name|SearchScrollAction
operator|.
name|NAME
argument_list|,
name|threadPool
argument_list|)
expr_stmt|;
name|this
operator|.
name|queryThenFetchAction
operator|=
name|queryThenFetchAction
expr_stmt|;
name|this
operator|.
name|queryAndFetchAction
operator|=
name|queryAndFetchAction
expr_stmt|;
name|this
operator|.
name|scanAction
operator|=
name|scanAction
expr_stmt|;
name|transportService
operator|.
name|registerHandler
argument_list|(
name|SearchScrollAction
operator|.
name|NAME
argument_list|,
operator|new
name|TransportHandler
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doExecute
specifier|protected
name|void
name|doExecute
parameter_list|(
name|SearchScrollRequest
name|request
parameter_list|,
name|ActionListener
argument_list|<
name|SearchResponse
argument_list|>
name|listener
parameter_list|)
block|{
try|try
block|{
name|ParsedScrollId
name|scrollId
init|=
name|parseScrollId
argument_list|(
name|request
operator|.
name|scrollId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|scrollId
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|QUERY_THEN_FETCH_TYPE
argument_list|)
condition|)
block|{
name|queryThenFetchAction
operator|.
name|execute
argument_list|(
name|request
argument_list|,
name|scrollId
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|scrollId
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|QUERY_AND_FETCH_TYPE
argument_list|)
condition|)
block|{
name|queryAndFetchAction
operator|.
name|execute
argument_list|(
name|request
argument_list|,
name|scrollId
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|scrollId
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|SCAN
argument_list|)
condition|)
block|{
name|scanAction
operator|.
name|execute
argument_list|(
name|request
argument_list|,
name|scrollId
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ElasticsearchIllegalArgumentException
argument_list|(
literal|"Scroll id type ["
operator|+
name|scrollId
operator|.
name|getType
argument_list|()
operator|+
literal|"] unrecognized"
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|listener
operator|.
name|onFailure
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|TransportHandler
specifier|private
class|class
name|TransportHandler
extends|extends
name|BaseTransportRequestHandler
argument_list|<
name|SearchScrollRequest
argument_list|>
block|{
annotation|@
name|Override
DECL|method|newInstance
specifier|public
name|SearchScrollRequest
name|newInstance
parameter_list|()
block|{
return|return
operator|new
name|SearchScrollRequest
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|messageReceived
specifier|public
name|void
name|messageReceived
parameter_list|(
name|SearchScrollRequest
name|request
parameter_list|,
specifier|final
name|TransportChannel
name|channel
parameter_list|)
throws|throws
name|Exception
block|{
comment|// no need for a threaded listener
name|request
operator|.
name|listenerThreaded
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|execute
argument_list|(
name|request
argument_list|,
operator|new
name|ActionListener
argument_list|<
name|SearchResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|SearchResponse
name|result
parameter_list|)
block|{
try|try
block|{
name|channel
operator|.
name|sendResponse
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|onFailure
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
try|try
block|{
name|channel
operator|.
name|sendResponse
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e1
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Failed to send response for search"
argument_list|,
name|e1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|executor
specifier|public
name|String
name|executor
parameter_list|()
block|{
return|return
name|ThreadPool
operator|.
name|Names
operator|.
name|SAME
return|;
block|}
block|}
block|}
end_class

end_unit

