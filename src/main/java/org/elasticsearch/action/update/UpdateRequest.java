begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.update
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|update
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionRequestValidationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|WriteConsistencyLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|index
operator|.
name|IndexRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|replication
operator|.
name|ReplicationType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|single
operator|.
name|instance
operator|.
name|InstanceShardOperationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ValidateActions
operator|.
name|addValidationError
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
DECL|class|UpdateRequest
specifier|public
class|class
name|UpdateRequest
extends|extends
name|InstanceShardOperationRequest
argument_list|<
name|UpdateRequest
argument_list|>
block|{
DECL|field|type
specifier|private
name|String
name|type
decl_stmt|;
DECL|field|id
specifier|private
name|String
name|id
decl_stmt|;
annotation|@
name|Nullable
DECL|field|routing
specifier|private
name|String
name|routing
decl_stmt|;
annotation|@
name|Nullable
DECL|field|script
name|String
name|script
decl_stmt|;
annotation|@
name|Nullable
DECL|field|scriptLang
name|String
name|scriptLang
decl_stmt|;
annotation|@
name|Nullable
DECL|field|scriptParams
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|scriptParams
decl_stmt|;
DECL|field|fields
specifier|private
name|String
index|[]
name|fields
decl_stmt|;
DECL|field|retryOnConflict
name|int
name|retryOnConflict
init|=
literal|0
decl_stmt|;
DECL|field|percolate
specifier|private
name|String
name|percolate
decl_stmt|;
DECL|field|refresh
specifier|private
name|boolean
name|refresh
init|=
literal|false
decl_stmt|;
DECL|field|replicationType
specifier|private
name|ReplicationType
name|replicationType
init|=
name|ReplicationType
operator|.
name|DEFAULT
decl_stmt|;
DECL|field|consistencyLevel
specifier|private
name|WriteConsistencyLevel
name|consistencyLevel
init|=
name|WriteConsistencyLevel
operator|.
name|DEFAULT
decl_stmt|;
DECL|field|upsertRequest
specifier|private
name|IndexRequest
name|upsertRequest
decl_stmt|;
DECL|field|docAsUpsert
specifier|private
name|boolean
name|docAsUpsert
init|=
literal|false
decl_stmt|;
annotation|@
name|Nullable
DECL|field|doc
specifier|private
name|IndexRequest
name|doc
decl_stmt|;
DECL|method|UpdateRequest
specifier|public
name|UpdateRequest
parameter_list|()
block|{      }
DECL|method|UpdateRequest
specifier|public
name|UpdateRequest
parameter_list|(
name|String
name|index
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|id
parameter_list|)
block|{
name|this
operator|.
name|index
operator|=
name|index
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|validate
specifier|public
name|ActionRequestValidationException
name|validate
parameter_list|()
block|{
name|ActionRequestValidationException
name|validationException
init|=
name|super
operator|.
name|validate
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
name|validationException
operator|=
name|addValidationError
argument_list|(
literal|"type is missing"
argument_list|,
name|validationException
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|id
operator|==
literal|null
condition|)
block|{
name|validationException
operator|=
name|addValidationError
argument_list|(
literal|"id is missing"
argument_list|,
name|validationException
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|script
operator|==
literal|null
operator|&&
name|doc
operator|==
literal|null
condition|)
block|{
name|validationException
operator|=
name|addValidationError
argument_list|(
literal|"script or doc is missing"
argument_list|,
name|validationException
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|script
operator|!=
literal|null
operator|&&
name|doc
operator|!=
literal|null
condition|)
block|{
name|validationException
operator|=
name|addValidationError
argument_list|(
literal|"can't provide both script and doc"
argument_list|,
name|validationException
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|doc
operator|==
literal|null
operator|&&
name|docAsUpsert
condition|)
block|{
name|validationException
operator|=
name|addValidationError
argument_list|(
literal|"can't say to upsert doc without providing doc"
argument_list|,
name|validationException
argument_list|)
expr_stmt|;
block|}
return|return
name|validationException
return|;
block|}
comment|/**      * The type of the indexed document.      */
DECL|method|type
specifier|public
name|String
name|type
parameter_list|()
block|{
return|return
name|type
return|;
block|}
comment|/**      * Sets the type of the indexed document.      */
DECL|method|type
specifier|public
name|UpdateRequest
name|type
parameter_list|(
name|String
name|type
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * The id of the indexed document.      */
DECL|method|id
specifier|public
name|String
name|id
parameter_list|()
block|{
return|return
name|id
return|;
block|}
comment|/**      * Sets the id of the indexed document.      */
DECL|method|id
specifier|public
name|UpdateRequest
name|id
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Controls the shard routing of the request. Using this value to hash the shard      * and not the id.      */
DECL|method|routing
specifier|public
name|UpdateRequest
name|routing
parameter_list|(
name|String
name|routing
parameter_list|)
block|{
if|if
condition|(
name|routing
operator|!=
literal|null
operator|&&
name|routing
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|this
operator|.
name|routing
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|routing
operator|=
name|routing
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**      * Sets the parent id of this document. Will simply set the routing to this value, as it is only      * used for routing with delete requests.      */
DECL|method|parent
specifier|public
name|UpdateRequest
name|parent
parameter_list|(
name|String
name|parent
parameter_list|)
block|{
if|if
condition|(
name|routing
operator|==
literal|null
condition|)
block|{
name|routing
operator|=
name|parent
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**      * Controls the shard routing of the request. Using this value to hash the shard      * and not the id.      */
DECL|method|routing
specifier|public
name|String
name|routing
parameter_list|()
block|{
return|return
name|this
operator|.
name|routing
return|;
block|}
DECL|method|shardId
name|int
name|shardId
parameter_list|()
block|{
return|return
name|this
operator|.
name|shardId
return|;
block|}
DECL|method|script
specifier|public
name|String
name|script
parameter_list|()
block|{
return|return
name|this
operator|.
name|script
return|;
block|}
DECL|method|scriptParams
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|scriptParams
parameter_list|()
block|{
return|return
name|this
operator|.
name|scriptParams
return|;
block|}
comment|/**      * The script to execute. Note, make sure not to send different script each times and instead      * use script params if possible with the same (automatically compiled) script.      */
DECL|method|script
specifier|public
name|UpdateRequest
name|script
parameter_list|(
name|String
name|script
parameter_list|)
block|{
name|this
operator|.
name|script
operator|=
name|script
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * The language of the script to execute.      */
DECL|method|scriptLang
specifier|public
name|UpdateRequest
name|scriptLang
parameter_list|(
name|String
name|scriptLang
parameter_list|)
block|{
name|this
operator|.
name|scriptLang
operator|=
name|scriptLang
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|scriptLang
specifier|public
name|String
name|scriptLang
parameter_list|()
block|{
return|return
name|scriptLang
return|;
block|}
comment|/**      * Add a script parameter.      */
DECL|method|addScriptParam
specifier|public
name|UpdateRequest
name|addScriptParam
parameter_list|(
name|String
name|name
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
name|scriptParams
operator|==
literal|null
condition|)
block|{
name|scriptParams
operator|=
name|Maps
operator|.
name|newHashMap
argument_list|()
expr_stmt|;
block|}
name|scriptParams
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the script parameters to use with the script.      */
DECL|method|scriptParams
specifier|public
name|UpdateRequest
name|scriptParams
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|scriptParams
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|scriptParams
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|scriptParams
operator|=
name|scriptParams
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|scriptParams
operator|.
name|putAll
argument_list|(
name|scriptParams
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**      * The script to execute. Note, make sure not to send different script each times and instead      * use script params if possible with the same (automatically compiled) script.      */
DECL|method|script
specifier|public
name|UpdateRequest
name|script
parameter_list|(
name|String
name|script
parameter_list|,
annotation|@
name|Nullable
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|scriptParams
parameter_list|)
block|{
name|this
operator|.
name|script
operator|=
name|script
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|scriptParams
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|scriptParams
operator|.
name|putAll
argument_list|(
name|scriptParams
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|scriptParams
operator|=
name|scriptParams
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**      * The script to execute. Note, make sure not to send different script each times and instead      * use script params if possible with the same (automatically compiled) script.      *      * @param script       The script to execute      * @param scriptLang   The script language      * @param scriptParams The script parameters      */
DECL|method|script
specifier|public
name|UpdateRequest
name|script
parameter_list|(
name|String
name|script
parameter_list|,
annotation|@
name|Nullable
name|String
name|scriptLang
parameter_list|,
annotation|@
name|Nullable
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|scriptParams
parameter_list|)
block|{
name|this
operator|.
name|script
operator|=
name|script
expr_stmt|;
name|this
operator|.
name|scriptLang
operator|=
name|scriptLang
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|scriptParams
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|scriptParams
operator|.
name|putAll
argument_list|(
name|scriptParams
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|scriptParams
operator|=
name|scriptParams
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**      * Explicitly specify the fields that will be returned. By default, nothing is returned.      */
DECL|method|fields
specifier|public
name|UpdateRequest
name|fields
parameter_list|(
name|String
modifier|...
name|fields
parameter_list|)
block|{
name|this
operator|.
name|fields
operator|=
name|fields
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Get the fields to be returned.      */
DECL|method|fields
specifier|public
name|String
index|[]
name|fields
parameter_list|()
block|{
return|return
name|this
operator|.
name|fields
return|;
block|}
comment|/**      * Sets the number of retries of a version conflict occurs because the document was updated between      * getting it and updating it. Defaults to 1.      */
DECL|method|retryOnConflict
specifier|public
name|UpdateRequest
name|retryOnConflict
parameter_list|(
name|int
name|retryOnConflict
parameter_list|)
block|{
name|this
operator|.
name|retryOnConflict
operator|=
name|retryOnConflict
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|retryOnConflict
specifier|public
name|int
name|retryOnConflict
parameter_list|()
block|{
return|return
name|this
operator|.
name|retryOnConflict
return|;
block|}
comment|/**      * Causes the update request document to be percolated. The parameter is the percolate query      * to use to reduce the percolated queries that are going to run against this doc. Can be      * set to<tt>*</tt> to indicate that all percolate queries should be run.      */
DECL|method|percolate
specifier|public
name|UpdateRequest
name|percolate
parameter_list|(
name|String
name|percolate
parameter_list|)
block|{
name|this
operator|.
name|percolate
operator|=
name|percolate
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|percolate
specifier|public
name|String
name|percolate
parameter_list|()
block|{
return|return
name|this
operator|.
name|percolate
return|;
block|}
comment|/**      * Should a refresh be executed post this update operation causing the operation to      * be searchable. Note, heavy indexing should not set this to<tt>true</tt>. Defaults      * to<tt>false</tt>.      */
DECL|method|refresh
specifier|public
name|UpdateRequest
name|refresh
parameter_list|(
name|boolean
name|refresh
parameter_list|)
block|{
name|this
operator|.
name|refresh
operator|=
name|refresh
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|refresh
specifier|public
name|boolean
name|refresh
parameter_list|()
block|{
return|return
name|this
operator|.
name|refresh
return|;
block|}
comment|/**      * The replication type.      */
DECL|method|replicationType
specifier|public
name|ReplicationType
name|replicationType
parameter_list|()
block|{
return|return
name|this
operator|.
name|replicationType
return|;
block|}
comment|/**      * Sets the replication type.      */
DECL|method|replicationType
specifier|public
name|UpdateRequest
name|replicationType
parameter_list|(
name|ReplicationType
name|replicationType
parameter_list|)
block|{
name|this
operator|.
name|replicationType
operator|=
name|replicationType
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|consistencyLevel
specifier|public
name|WriteConsistencyLevel
name|consistencyLevel
parameter_list|()
block|{
return|return
name|this
operator|.
name|consistencyLevel
return|;
block|}
comment|/**      * Sets the consistency level of write. Defaults to {@link org.elasticsearch.action.WriteConsistencyLevel#DEFAULT}      */
DECL|method|consistencyLevel
specifier|public
name|UpdateRequest
name|consistencyLevel
parameter_list|(
name|WriteConsistencyLevel
name|consistencyLevel
parameter_list|)
block|{
name|this
operator|.
name|consistencyLevel
operator|=
name|consistencyLevel
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the doc to use for updates when a script is not specified.      */
DECL|method|doc
specifier|public
name|UpdateRequest
name|doc
parameter_list|(
name|IndexRequest
name|doc
parameter_list|)
block|{
name|this
operator|.
name|doc
operator|=
name|doc
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the doc to use for updates when a script is not specified.      */
DECL|method|doc
specifier|public
name|UpdateRequest
name|doc
parameter_list|(
name|XContentBuilder
name|source
parameter_list|)
block|{
name|safeDoc
argument_list|()
operator|.
name|source
argument_list|(
name|source
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the doc to use for updates when a script is not specified.      */
DECL|method|doc
specifier|public
name|UpdateRequest
name|doc
parameter_list|(
name|Map
name|source
parameter_list|)
block|{
name|safeDoc
argument_list|()
operator|.
name|source
argument_list|(
name|source
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the doc to use for updates when a script is not specified.      */
DECL|method|doc
specifier|public
name|UpdateRequest
name|doc
parameter_list|(
name|Map
name|source
parameter_list|,
name|XContentType
name|contentType
parameter_list|)
block|{
name|safeDoc
argument_list|()
operator|.
name|source
argument_list|(
name|source
argument_list|,
name|contentType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the doc to use for updates when a script is not specified.      */
DECL|method|doc
specifier|public
name|UpdateRequest
name|doc
parameter_list|(
name|String
name|source
parameter_list|)
block|{
name|safeDoc
argument_list|()
operator|.
name|source
argument_list|(
name|source
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the doc to use for updates when a script is not specified.      */
DECL|method|doc
specifier|public
name|UpdateRequest
name|doc
parameter_list|(
name|byte
index|[]
name|source
parameter_list|)
block|{
name|safeDoc
argument_list|()
operator|.
name|source
argument_list|(
name|source
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the doc to use for updates when a script is not specified.      */
DECL|method|doc
specifier|public
name|UpdateRequest
name|doc
parameter_list|(
name|byte
index|[]
name|source
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|safeDoc
argument_list|()
operator|.
name|source
argument_list|(
name|source
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|doc
specifier|public
name|IndexRequest
name|doc
parameter_list|()
block|{
return|return
name|this
operator|.
name|doc
return|;
block|}
DECL|method|safeDoc
specifier|private
name|IndexRequest
name|safeDoc
parameter_list|()
block|{
if|if
condition|(
name|doc
operator|==
literal|null
condition|)
block|{
name|doc
operator|=
operator|new
name|IndexRequest
argument_list|()
expr_stmt|;
block|}
return|return
name|doc
return|;
block|}
comment|/**      * Sets the index request to be used if the document does not exists. Otherwise, a {@link org.elasticsearch.index.engine.DocumentMissingException}      * is thrown.      */
DECL|method|upsert
specifier|public
name|UpdateRequest
name|upsert
parameter_list|(
name|IndexRequest
name|upsertRequest
parameter_list|)
block|{
name|this
operator|.
name|upsertRequest
operator|=
name|upsertRequest
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the doc source of the update request to be used when the document does not exists.      */
DECL|method|upsert
specifier|public
name|UpdateRequest
name|upsert
parameter_list|(
name|XContentBuilder
name|source
parameter_list|)
block|{
name|safeUpsertRequest
argument_list|()
operator|.
name|source
argument_list|(
name|source
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the doc source of the update request to be used when the document does not exists.      */
DECL|method|upsert
specifier|public
name|UpdateRequest
name|upsert
parameter_list|(
name|Map
name|source
parameter_list|)
block|{
name|safeUpsertRequest
argument_list|()
operator|.
name|source
argument_list|(
name|source
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the doc source of the update request to be used when the document does not exists.      */
DECL|method|upsert
specifier|public
name|UpdateRequest
name|upsert
parameter_list|(
name|Map
name|source
parameter_list|,
name|XContentType
name|contentType
parameter_list|)
block|{
name|safeUpsertRequest
argument_list|()
operator|.
name|source
argument_list|(
name|source
argument_list|,
name|contentType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the doc source of the update request to be used when the document does not exists.      */
DECL|method|upsert
specifier|public
name|UpdateRequest
name|upsert
parameter_list|(
name|String
name|source
parameter_list|)
block|{
name|safeUpsertRequest
argument_list|()
operator|.
name|source
argument_list|(
name|source
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the doc source of the update request to be used when the document does not exists.      */
DECL|method|upsert
specifier|public
name|UpdateRequest
name|upsert
parameter_list|(
name|byte
index|[]
name|source
parameter_list|)
block|{
name|safeUpsertRequest
argument_list|()
operator|.
name|source
argument_list|(
name|source
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the doc source of the update request to be used when the document does not exists.      */
DECL|method|upsert
specifier|public
name|UpdateRequest
name|upsert
parameter_list|(
name|byte
index|[]
name|source
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|safeUpsertRequest
argument_list|()
operator|.
name|source
argument_list|(
name|source
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|upsertRequest
specifier|public
name|IndexRequest
name|upsertRequest
parameter_list|()
block|{
return|return
name|this
operator|.
name|upsertRequest
return|;
block|}
DECL|method|safeUpsertRequest
specifier|private
name|IndexRequest
name|safeUpsertRequest
parameter_list|()
block|{
if|if
condition|(
name|upsertRequest
operator|==
literal|null
condition|)
block|{
name|upsertRequest
operator|=
operator|new
name|IndexRequest
argument_list|()
expr_stmt|;
block|}
return|return
name|upsertRequest
return|;
block|}
DECL|method|source
specifier|public
name|UpdateRequest
name|source
parameter_list|(
name|XContentBuilder
name|source
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|source
argument_list|(
name|source
operator|.
name|bytes
argument_list|()
argument_list|)
return|;
block|}
DECL|method|source
specifier|public
name|UpdateRequest
name|source
parameter_list|(
name|byte
index|[]
name|source
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|source
argument_list|(
name|source
argument_list|,
literal|0
argument_list|,
name|source
operator|.
name|length
argument_list|)
return|;
block|}
DECL|method|source
specifier|public
name|UpdateRequest
name|source
parameter_list|(
name|byte
index|[]
name|source
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|source
argument_list|(
operator|new
name|BytesArray
argument_list|(
name|source
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
argument_list|)
return|;
block|}
DECL|method|source
specifier|public
name|UpdateRequest
name|source
parameter_list|(
name|BytesReference
name|source
parameter_list|)
throws|throws
name|Exception
block|{
name|XContentType
name|xContentType
init|=
name|XContentFactory
operator|.
name|xContentType
argument_list|(
name|source
argument_list|)
decl_stmt|;
name|XContentParser
name|parser
init|=
name|XContentFactory
operator|.
name|xContent
argument_list|(
name|xContentType
argument_list|)
operator|.
name|createParser
argument_list|(
name|source
argument_list|)
decl_stmt|;
try|try
block|{
name|XContentParser
operator|.
name|Token
name|t
init|=
name|parser
operator|.
name|nextToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|t
operator|==
literal|null
condition|)
block|{
return|return
name|this
return|;
block|}
name|String
name|currentFieldName
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|t
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
condition|)
block|{
if|if
condition|(
name|t
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
condition|)
block|{
name|currentFieldName
operator|=
name|parser
operator|.
name|currentName
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"script"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|script
operator|=
name|parser
operator|.
name|textOrNull
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"params"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|scriptParams
operator|=
name|parser
operator|.
name|map
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"lang"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|scriptLang
operator|=
name|parser
operator|.
name|text
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"upsert"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|XContentBuilder
name|builder
init|=
name|XContentFactory
operator|.
name|contentBuilder
argument_list|(
name|xContentType
argument_list|)
decl_stmt|;
name|builder
operator|.
name|copyCurrentStructure
argument_list|(
name|parser
argument_list|)
expr_stmt|;
name|safeUpsertRequest
argument_list|()
operator|.
name|source
argument_list|(
name|builder
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"doc"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|XContentBuilder
name|docBuilder
init|=
name|XContentFactory
operator|.
name|contentBuilder
argument_list|(
name|xContentType
argument_list|)
decl_stmt|;
name|docBuilder
operator|.
name|copyCurrentStructure
argument_list|(
name|parser
argument_list|)
expr_stmt|;
name|safeDoc
argument_list|()
operator|.
name|source
argument_list|(
name|docBuilder
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"doc_as_upsert"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|docAsUpsert
argument_list|(
name|parser
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|parser
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
DECL|method|docAsUpsert
specifier|public
name|boolean
name|docAsUpsert
parameter_list|()
block|{
return|return
name|this
operator|.
name|docAsUpsert
return|;
block|}
DECL|method|docAsUpsert
specifier|public
name|void
name|docAsUpsert
parameter_list|(
name|boolean
name|shouldUpsertDoc
parameter_list|)
block|{
name|this
operator|.
name|docAsUpsert
operator|=
name|shouldUpsertDoc
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|doc
operator|!=
literal|null
operator|&&
name|this
operator|.
name|upsertRequest
operator|==
literal|null
condition|)
block|{
name|upsert
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|replicationType
operator|=
name|ReplicationType
operator|.
name|fromId
argument_list|(
name|in
operator|.
name|readByte
argument_list|()
argument_list|)
expr_stmt|;
name|consistencyLevel
operator|=
name|WriteConsistencyLevel
operator|.
name|fromId
argument_list|(
name|in
operator|.
name|readByte
argument_list|()
argument_list|)
expr_stmt|;
name|type
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
name|id
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
name|routing
operator|=
name|in
operator|.
name|readOptionalString
argument_list|()
expr_stmt|;
name|script
operator|=
name|in
operator|.
name|readOptionalString
argument_list|()
expr_stmt|;
name|scriptLang
operator|=
name|in
operator|.
name|readOptionalString
argument_list|()
expr_stmt|;
name|scriptParams
operator|=
name|in
operator|.
name|readMap
argument_list|()
expr_stmt|;
name|retryOnConflict
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
name|percolate
operator|=
name|in
operator|.
name|readOptionalString
argument_list|()
expr_stmt|;
name|refresh
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|doc
operator|=
operator|new
name|IndexRequest
argument_list|()
expr_stmt|;
name|doc
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
name|int
name|size
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|>=
literal|0
condition|)
block|{
name|fields
operator|=
operator|new
name|String
index|[
name|size
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|fields
index|[
name|i
index|]
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|upsertRequest
operator|=
operator|new
name|IndexRequest
argument_list|()
expr_stmt|;
name|upsertRequest
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|getVersion
argument_list|()
operator|.
name|onOrAfter
argument_list|(
name|Version
operator|.
name|V_0_90_2
argument_list|)
condition|)
block|{
name|docAsUpsert
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeByte
argument_list|(
name|replicationType
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeByte
argument_list|(
name|consistencyLevel
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeString
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeString
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalString
argument_list|(
name|routing
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalString
argument_list|(
name|script
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalString
argument_list|(
name|scriptLang
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeMap
argument_list|(
name|scriptParams
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|retryOnConflict
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalString
argument_list|(
name|percolate
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|refresh
argument_list|)
expr_stmt|;
if|if
condition|(
name|doc
operator|==
literal|null
condition|)
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// make sure the basics are set
name|doc
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|doc
operator|.
name|type
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|doc
operator|.
name|id
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|doc
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
block|{
name|out
operator|.
name|writeInt
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeInt
argument_list|(
name|fields
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|field
range|:
name|fields
control|)
block|{
name|out
operator|.
name|writeString
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|upsertRequest
operator|==
literal|null
condition|)
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// make sure the basics are set
name|upsertRequest
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|upsertRequest
operator|.
name|type
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|upsertRequest
operator|.
name|id
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|upsertRequest
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|out
operator|.
name|getVersion
argument_list|()
operator|.
name|onOrAfter
argument_list|(
name|Version
operator|.
name|V_0_90_2
argument_list|)
condition|)
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
name|docAsUpsert
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

