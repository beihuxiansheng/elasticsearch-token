begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.percolate
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|percolate
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticSearchGenerationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|FilterBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|builder
operator|.
name|SearchSourceBuilderException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
DECL|class|PercolateSourceBuilder
specifier|public
class|class
name|PercolateSourceBuilder
implements|implements
name|ToXContent
block|{
DECL|field|docBuilder
specifier|private
name|DocBuilder
name|docBuilder
decl_stmt|;
DECL|field|queryBuilder
specifier|private
name|QueryBuilder
name|queryBuilder
decl_stmt|;
DECL|field|filterBuilder
specifier|private
name|FilterBuilder
name|filterBuilder
decl_stmt|;
DECL|method|percolateDocument
specifier|public
name|DocBuilder
name|percolateDocument
parameter_list|()
block|{
if|if
condition|(
name|docBuilder
operator|==
literal|null
condition|)
block|{
name|docBuilder
operator|=
operator|new
name|DocBuilder
argument_list|()
expr_stmt|;
block|}
return|return
name|docBuilder
return|;
block|}
DECL|method|getDoc
specifier|public
name|DocBuilder
name|getDoc
parameter_list|()
block|{
return|return
name|docBuilder
return|;
block|}
DECL|method|setDoc
specifier|public
name|void
name|setDoc
parameter_list|(
name|DocBuilder
name|docBuilder
parameter_list|)
block|{
name|this
operator|.
name|docBuilder
operator|=
name|docBuilder
expr_stmt|;
block|}
DECL|method|getQueryBuilder
specifier|public
name|QueryBuilder
name|getQueryBuilder
parameter_list|()
block|{
return|return
name|queryBuilder
return|;
block|}
DECL|method|setQueryBuilder
specifier|public
name|void
name|setQueryBuilder
parameter_list|(
name|QueryBuilder
name|queryBuilder
parameter_list|)
block|{
name|this
operator|.
name|queryBuilder
operator|=
name|queryBuilder
expr_stmt|;
block|}
DECL|method|getFilterBuilder
specifier|public
name|FilterBuilder
name|getFilterBuilder
parameter_list|()
block|{
return|return
name|filterBuilder
return|;
block|}
DECL|method|setFilterBuilder
specifier|public
name|void
name|setFilterBuilder
parameter_list|(
name|FilterBuilder
name|filterBuilder
parameter_list|)
block|{
name|this
operator|.
name|filterBuilder
operator|=
name|filterBuilder
expr_stmt|;
block|}
DECL|method|buildAsBytes
specifier|public
name|BytesReference
name|buildAsBytes
parameter_list|(
name|XContentType
name|contentType
parameter_list|)
throws|throws
name|SearchSourceBuilderException
block|{
try|try
block|{
name|XContentBuilder
name|builder
init|=
name|XContentFactory
operator|.
name|contentBuilder
argument_list|(
name|contentType
argument_list|)
decl_stmt|;
name|toXContent
argument_list|(
name|builder
argument_list|,
name|ToXContent
operator|.
name|EMPTY_PARAMS
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|bytes
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SearchSourceBuilderException
argument_list|(
literal|"Failed to build search source"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
if|if
condition|(
name|docBuilder
operator|!=
literal|null
condition|)
block|{
name|docBuilder
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|queryBuilder
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"query"
argument_list|)
expr_stmt|;
name|queryBuilder
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|filterBuilder
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"filter"
argument_list|)
expr_stmt|;
name|filterBuilder
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
DECL|method|docBuilder
specifier|public
specifier|static
name|DocBuilder
name|docBuilder
parameter_list|()
block|{
return|return
operator|new
name|DocBuilder
argument_list|()
return|;
block|}
DECL|class|DocBuilder
specifier|public
specifier|static
class|class
name|DocBuilder
implements|implements
name|ToXContent
block|{
DECL|field|doc
specifier|private
name|BytesReference
name|doc
decl_stmt|;
DECL|method|setDoc
specifier|public
name|DocBuilder
name|setDoc
parameter_list|(
name|BytesReference
name|doc
parameter_list|)
block|{
name|this
operator|.
name|doc
operator|=
name|doc
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setDoc
specifier|public
name|DocBuilder
name|setDoc
parameter_list|(
name|String
name|doc
parameter_list|)
block|{
name|this
operator|.
name|doc
operator|=
operator|new
name|BytesArray
argument_list|(
name|doc
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setDoc
specifier|public
name|DocBuilder
name|setDoc
parameter_list|(
name|XContentBuilder
name|doc
parameter_list|)
block|{
name|this
operator|.
name|doc
operator|=
name|doc
operator|.
name|bytes
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setDoc
specifier|public
name|DocBuilder
name|setDoc
parameter_list|(
name|Map
name|doc
parameter_list|)
block|{
return|return
name|setDoc
argument_list|(
name|doc
argument_list|,
name|PercolateRequest
operator|.
name|contentType
argument_list|)
return|;
block|}
DECL|method|setDoc
specifier|public
name|DocBuilder
name|setDoc
parameter_list|(
name|Map
name|doc
parameter_list|,
name|XContentType
name|contentType
parameter_list|)
block|{
try|try
block|{
return|return
name|setDoc
argument_list|(
name|XContentFactory
operator|.
name|contentBuilder
argument_list|(
name|contentType
argument_list|)
operator|.
name|map
argument_list|(
name|doc
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ElasticSearchGenerationException
argument_list|(
literal|"Failed to generate ["
operator|+
name|doc
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|XContentType
name|contentType
init|=
name|XContentFactory
operator|.
name|xContentType
argument_list|(
name|doc
argument_list|)
decl_stmt|;
if|if
condition|(
name|contentType
operator|==
name|builder
operator|.
name|contentType
argument_list|()
condition|)
block|{
name|builder
operator|.
name|rawField
argument_list|(
literal|"doc"
argument_list|,
name|doc
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|XContentParser
name|parser
init|=
name|XContentFactory
operator|.
name|xContent
argument_list|(
name|contentType
argument_list|)
operator|.
name|createParser
argument_list|(
name|doc
argument_list|)
decl_stmt|;
try|try
block|{
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"doc"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|copyCurrentStructure
argument_list|(
name|parser
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|parser
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|builder
return|;
block|}
block|}
block|}
end_class

end_unit

