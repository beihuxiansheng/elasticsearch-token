begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this   * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.index
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|index
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|UnicodeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticSearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticSearchGenerationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticSearchIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticSearchParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionRequestValidationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|RoutingMissingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|WriteConsistencyLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|replication
operator|.
name|ReplicationType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|replication
operator|.
name|ShardReplicationOperationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|Requests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|MappingMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|MetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|VersionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|internal
operator|.
name|TimestampFieldMapper
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ValidateActions
operator|.
name|addValidationError
import|;
end_import

begin_comment
comment|/**  * Index request to index a typed JSON document into a specific index and make it searchable. Best  * created using {@link org.elasticsearch.client.Requests#indexRequest(String)}.  *<p/>  *<p>The index requires the {@link #index()}, {@link #type(String)}, {@link #id(String)} and  * {@link #source(byte[])} to be set.  *<p/>  *<p>The source (content to index) can be set in its bytes form using ({@link #source(byte[])}),  * its string form ({@link #source(String)}) or using a {@link org.elasticsearch.common.xcontent.XContentBuilder}  * ({@link #source(org.elasticsearch.common.xcontent.XContentBuilder)}).  *<p/>  *<p>If the {@link #id(String)} is not set, it will be automatically generated.  *  * @see IndexResponse  * @see org.elasticsearch.client.Requests#indexRequest(String)  * @see org.elasticsearch.client.Client#index(IndexRequest)  */
end_comment

begin_class
DECL|class|IndexRequest
specifier|public
class|class
name|IndexRequest
extends|extends
name|ShardReplicationOperationRequest
block|{
comment|/**      * Operation type controls if the type of the index operation.      */
DECL|enum|OpType
specifier|public
specifier|static
enum|enum
name|OpType
block|{
comment|/**          * Index the source. If there an existing document with the id, it will          * be replaced.          */
DECL|enum constant|INDEX
name|INDEX
argument_list|(
operator|(
name|byte
operator|)
literal|0
argument_list|)
block|,
comment|/**          * Creates the resource. Simply adds it to the index, if there is an existing          * document with the id, then it won't be removed.          */
DECL|enum constant|CREATE
name|CREATE
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|)
block|;
DECL|field|id
specifier|private
name|byte
name|id
decl_stmt|;
DECL|method|OpType
name|OpType
parameter_list|(
name|byte
name|id
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
block|}
comment|/**          * The internal representation of the operation type.          */
DECL|method|id
specifier|public
name|byte
name|id
parameter_list|()
block|{
return|return
name|id
return|;
block|}
comment|/**          * Constructs the operation type from its internal representation.          */
DECL|method|fromId
specifier|public
specifier|static
name|OpType
name|fromId
parameter_list|(
name|byte
name|id
parameter_list|)
block|{
if|if
condition|(
name|id
operator|==
literal|0
condition|)
block|{
return|return
name|INDEX
return|;
block|}
elseif|else
if|if
condition|(
name|id
operator|==
literal|1
condition|)
block|{
return|return
name|CREATE
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|ElasticSearchIllegalArgumentException
argument_list|(
literal|"No type match for ["
operator|+
name|id
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
block|}
DECL|field|type
specifier|private
name|String
name|type
decl_stmt|;
DECL|field|id
specifier|private
name|String
name|id
decl_stmt|;
annotation|@
name|Nullable
DECL|field|routing
specifier|private
name|String
name|routing
decl_stmt|;
annotation|@
name|Nullable
DECL|field|parent
specifier|private
name|String
name|parent
decl_stmt|;
annotation|@
name|Nullable
DECL|field|timestamp
specifier|private
name|String
name|timestamp
decl_stmt|;
DECL|field|ttl
specifier|private
name|long
name|ttl
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|source
specifier|private
name|byte
index|[]
name|source
decl_stmt|;
DECL|field|sourceOffset
specifier|private
name|int
name|sourceOffset
decl_stmt|;
DECL|field|sourceLength
specifier|private
name|int
name|sourceLength
decl_stmt|;
DECL|field|sourceUnsafe
specifier|private
name|boolean
name|sourceUnsafe
decl_stmt|;
DECL|field|opType
specifier|private
name|OpType
name|opType
init|=
name|OpType
operator|.
name|INDEX
decl_stmt|;
DECL|field|refresh
specifier|private
name|boolean
name|refresh
init|=
literal|false
decl_stmt|;
DECL|field|version
specifier|private
name|long
name|version
init|=
literal|0
decl_stmt|;
DECL|field|versionType
specifier|private
name|VersionType
name|versionType
init|=
name|VersionType
operator|.
name|INTERNAL
decl_stmt|;
DECL|field|percolate
specifier|private
name|String
name|percolate
decl_stmt|;
DECL|field|contentType
specifier|private
name|XContentType
name|contentType
init|=
name|Requests
operator|.
name|INDEX_CONTENT_TYPE
decl_stmt|;
DECL|method|IndexRequest
specifier|public
name|IndexRequest
parameter_list|()
block|{     }
comment|/**      * Constructs a new index request against the specific index. The {@link #type(String)},      * {@link #id(String)} and {@link #source(byte[])} must be set.      */
DECL|method|IndexRequest
specifier|public
name|IndexRequest
parameter_list|(
name|String
name|index
parameter_list|)
block|{
name|this
operator|.
name|index
operator|=
name|index
expr_stmt|;
block|}
comment|/**      * Constructs a new index request against the index, type, id and using the source.      *      * @param index The index to index into      * @param type  The type to index into      * @param id    The id of document      */
DECL|method|IndexRequest
specifier|public
name|IndexRequest
parameter_list|(
name|String
name|index
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|id
parameter_list|)
block|{
name|this
operator|.
name|index
operator|=
name|index
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|validate
specifier|public
name|ActionRequestValidationException
name|validate
parameter_list|()
block|{
name|ActionRequestValidationException
name|validationException
init|=
name|super
operator|.
name|validate
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
name|validationException
operator|=
name|addValidationError
argument_list|(
literal|"type is missing"
argument_list|,
name|validationException
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|source
operator|==
literal|null
condition|)
block|{
name|validationException
operator|=
name|addValidationError
argument_list|(
literal|"source is missing"
argument_list|,
name|validationException
argument_list|)
expr_stmt|;
block|}
return|return
name|validationException
return|;
block|}
comment|/**      * Before we fork on a local thread, make sure we copy over the bytes if they are unsafe      */
annotation|@
name|Override
DECL|method|beforeLocalFork
specifier|public
name|void
name|beforeLocalFork
parameter_list|()
block|{
comment|// only fork if copy over if source is unsafe
if|if
condition|(
name|sourceUnsafe
condition|)
block|{
name|source
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Sets the index the index operation will happen on.      */
annotation|@
name|Override
DECL|method|index
specifier|public
name|IndexRequest
name|index
parameter_list|(
name|String
name|index
parameter_list|)
block|{
name|super
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the content type that will be used when generating a document from user provided objects (like Map).      */
DECL|method|contentType
specifier|public
name|IndexRequest
name|contentType
parameter_list|(
name|XContentType
name|contentType
parameter_list|)
block|{
name|this
operator|.
name|contentType
operator|=
name|contentType
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Should the listener be called on a separate thread if needed.      */
annotation|@
name|Override
DECL|method|listenerThreaded
specifier|public
name|IndexRequest
name|listenerThreaded
parameter_list|(
name|boolean
name|threadedListener
parameter_list|)
block|{
name|super
operator|.
name|listenerThreaded
argument_list|(
name|threadedListener
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Controls if the operation will be executed on a separate thread when executed locally. Defaults      * to<tt>true</tt> when running in embedded mode.      */
annotation|@
name|Override
DECL|method|operationThreaded
specifier|public
name|IndexRequest
name|operationThreaded
parameter_list|(
name|boolean
name|threadedOperation
parameter_list|)
block|{
name|super
operator|.
name|operationThreaded
argument_list|(
name|threadedOperation
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * The type of the indexed document.      */
DECL|method|type
specifier|public
name|String
name|type
parameter_list|()
block|{
return|return
name|type
return|;
block|}
comment|/**      * Sets the type of the indexed document.      */
annotation|@
name|Required
DECL|method|type
specifier|public
name|IndexRequest
name|type
parameter_list|(
name|String
name|type
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * The id of the indexed document. If not set, will be automatically generated.      */
DECL|method|id
specifier|public
name|String
name|id
parameter_list|()
block|{
return|return
name|id
return|;
block|}
comment|/**      * Sets the id of the indexed document. If not set, will be automatically generated.      */
DECL|method|id
specifier|public
name|IndexRequest
name|id
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Controls the shard routing of the request. Using this value to hash the shard      * and not the id.      */
DECL|method|routing
specifier|public
name|IndexRequest
name|routing
parameter_list|(
name|String
name|routing
parameter_list|)
block|{
if|if
condition|(
name|routing
operator|!=
literal|null
operator|&&
name|routing
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|this
operator|.
name|routing
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|routing
operator|=
name|routing
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**      * Controls the shard routing of the request. Using this value to hash the shard      * and not the id.      */
DECL|method|routing
specifier|public
name|String
name|routing
parameter_list|()
block|{
return|return
name|this
operator|.
name|routing
return|;
block|}
comment|/**      * Sets the parent id of this document. If routing is not set, automatically set it as the      * routing as well.      */
DECL|method|parent
specifier|public
name|IndexRequest
name|parent
parameter_list|(
name|String
name|parent
parameter_list|)
block|{
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
if|if
condition|(
name|routing
operator|==
literal|null
condition|)
block|{
name|routing
operator|=
name|parent
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
DECL|method|parent
specifier|public
name|String
name|parent
parameter_list|()
block|{
return|return
name|this
operator|.
name|parent
return|;
block|}
comment|/**      * Sets the timestamp either as millis since the epoch, or, in the configured date format.      */
DECL|method|timestamp
specifier|public
name|IndexRequest
name|timestamp
parameter_list|(
name|String
name|timestamp
parameter_list|)
block|{
name|this
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|timestamp
specifier|public
name|String
name|timestamp
parameter_list|()
block|{
return|return
name|this
operator|.
name|timestamp
return|;
block|}
comment|/**      * Sets the relative ttl value. It musts be> 0 as it makes little sense otherwise. Setting it      * to<tt>null</tt> will reset to have no ttl.      */
DECL|method|ttl
specifier|public
name|IndexRequest
name|ttl
parameter_list|(
name|Long
name|ttl
parameter_list|)
throws|throws
name|ElasticSearchGenerationException
block|{
if|if
condition|(
name|ttl
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|ttl
operator|=
operator|-
literal|1
expr_stmt|;
return|return
name|this
return|;
block|}
if|if
condition|(
name|ttl
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|ElasticSearchIllegalArgumentException
argument_list|(
literal|"TTL value must be> 0. Illegal value provided ["
operator|+
name|ttl
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|this
operator|.
name|ttl
operator|=
name|ttl
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|ttl
specifier|public
name|long
name|ttl
parameter_list|()
block|{
return|return
name|this
operator|.
name|ttl
return|;
block|}
comment|/**      * The source of the document to index, recopied to a new array if it has an offset or unsafe.      */
DECL|method|source
specifier|public
name|byte
index|[]
name|source
parameter_list|()
block|{
if|if
condition|(
name|sourceUnsafe
operator|||
name|sourceOffset
operator|>
literal|0
operator|||
name|source
operator|.
name|length
operator|!=
name|sourceLength
condition|)
block|{
name|source
operator|=
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|source
argument_list|,
name|sourceOffset
argument_list|,
name|sourceOffset
operator|+
name|sourceLength
argument_list|)
expr_stmt|;
name|sourceOffset
operator|=
literal|0
expr_stmt|;
name|sourceUnsafe
operator|=
literal|false
expr_stmt|;
block|}
return|return
name|source
return|;
block|}
DECL|method|underlyingSource
specifier|public
name|byte
index|[]
name|underlyingSource
parameter_list|()
block|{
if|if
condition|(
name|sourceUnsafe
condition|)
block|{
name|source
argument_list|()
expr_stmt|;
block|}
return|return
name|this
operator|.
name|source
return|;
block|}
DECL|method|underlyingSourceOffset
specifier|public
name|int
name|underlyingSourceOffset
parameter_list|()
block|{
if|if
condition|(
name|sourceUnsafe
condition|)
block|{
name|source
argument_list|()
expr_stmt|;
block|}
return|return
name|this
operator|.
name|sourceOffset
return|;
block|}
DECL|method|underlyingSourceLength
specifier|public
name|int
name|underlyingSourceLength
parameter_list|()
block|{
if|if
condition|(
name|sourceUnsafe
condition|)
block|{
name|source
argument_list|()
expr_stmt|;
block|}
return|return
name|this
operator|.
name|sourceLength
return|;
block|}
comment|/**      * Index the Map as a {@link org.elasticsearch.client.Requests#INDEX_CONTENT_TYPE}.      *      * @param source The map to index      */
annotation|@
name|Required
DECL|method|source
specifier|public
name|IndexRequest
name|source
parameter_list|(
name|Map
name|source
parameter_list|)
throws|throws
name|ElasticSearchGenerationException
block|{
return|return
name|source
argument_list|(
name|source
argument_list|,
name|contentType
argument_list|)
return|;
block|}
comment|/**      * Index the Map as the provided content type.      *      * @param source The map to index      */
annotation|@
name|Required
DECL|method|source
specifier|public
name|IndexRequest
name|source
parameter_list|(
name|Map
name|source
parameter_list|,
name|XContentType
name|contentType
parameter_list|)
throws|throws
name|ElasticSearchGenerationException
block|{
try|try
block|{
name|XContentBuilder
name|builder
init|=
name|XContentFactory
operator|.
name|contentBuilder
argument_list|(
name|contentType
argument_list|)
decl_stmt|;
name|builder
operator|.
name|map
argument_list|(
name|source
argument_list|)
expr_stmt|;
return|return
name|source
argument_list|(
name|builder
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ElasticSearchGenerationException
argument_list|(
literal|"Failed to generate ["
operator|+
name|source
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Sets the document source to index.      *<p/>      *<p>Note, its preferable to either set it using {@link #source(org.elasticsearch.common.xcontent.XContentBuilder)}      * or using the {@link #source(byte[])}.      */
annotation|@
name|Required
DECL|method|source
specifier|public
name|IndexRequest
name|source
parameter_list|(
name|String
name|source
parameter_list|)
block|{
name|UnicodeUtil
operator|.
name|UTF8Result
name|result
init|=
name|Unicode
operator|.
name|fromStringAsUtf8
argument_list|(
name|source
argument_list|)
decl_stmt|;
name|this
operator|.
name|source
operator|=
name|result
operator|.
name|result
expr_stmt|;
name|this
operator|.
name|sourceOffset
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|sourceLength
operator|=
name|result
operator|.
name|length
expr_stmt|;
name|this
operator|.
name|sourceUnsafe
operator|=
literal|true
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the content source to index.      */
annotation|@
name|Required
DECL|method|source
specifier|public
name|IndexRequest
name|source
parameter_list|(
name|XContentBuilder
name|sourceBuilder
parameter_list|)
block|{
try|try
block|{
name|source
operator|=
name|sourceBuilder
operator|.
name|underlyingBytes
argument_list|()
expr_stmt|;
name|sourceOffset
operator|=
literal|0
expr_stmt|;
name|sourceLength
operator|=
name|sourceBuilder
operator|.
name|underlyingBytesLength
argument_list|()
expr_stmt|;
name|sourceUnsafe
operator|=
literal|false
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ElasticSearchGenerationException
argument_list|(
literal|"Failed to generate ["
operator|+
name|sourceBuilder
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|this
return|;
block|}
annotation|@
name|Required
DECL|method|source
specifier|public
name|IndexRequest
name|source
parameter_list|(
name|String
name|field1
parameter_list|,
name|Object
name|value1
parameter_list|)
block|{
try|try
block|{
name|XContentBuilder
name|builder
init|=
name|XContentFactory
operator|.
name|contentBuilder
argument_list|(
name|contentType
argument_list|)
decl_stmt|;
name|builder
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
name|field1
argument_list|,
name|value1
argument_list|)
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|source
argument_list|(
name|builder
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ElasticSearchGenerationException
argument_list|(
literal|"Failed to generate"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Required
DECL|method|source
specifier|public
name|IndexRequest
name|source
parameter_list|(
name|String
name|field1
parameter_list|,
name|Object
name|value1
parameter_list|,
name|String
name|field2
parameter_list|,
name|Object
name|value2
parameter_list|)
block|{
try|try
block|{
name|XContentBuilder
name|builder
init|=
name|XContentFactory
operator|.
name|contentBuilder
argument_list|(
name|contentType
argument_list|)
decl_stmt|;
name|builder
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
name|field1
argument_list|,
name|value1
argument_list|)
operator|.
name|field
argument_list|(
name|field2
argument_list|,
name|value2
argument_list|)
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|source
argument_list|(
name|builder
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ElasticSearchGenerationException
argument_list|(
literal|"Failed to generate"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Required
DECL|method|source
specifier|public
name|IndexRequest
name|source
parameter_list|(
name|String
name|field1
parameter_list|,
name|Object
name|value1
parameter_list|,
name|String
name|field2
parameter_list|,
name|Object
name|value2
parameter_list|,
name|String
name|field3
parameter_list|,
name|Object
name|value3
parameter_list|)
block|{
try|try
block|{
name|XContentBuilder
name|builder
init|=
name|XContentFactory
operator|.
name|contentBuilder
argument_list|(
name|contentType
argument_list|)
decl_stmt|;
name|builder
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
name|field1
argument_list|,
name|value1
argument_list|)
operator|.
name|field
argument_list|(
name|field2
argument_list|,
name|value2
argument_list|)
operator|.
name|field
argument_list|(
name|field3
argument_list|,
name|value3
argument_list|)
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|source
argument_list|(
name|builder
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ElasticSearchGenerationException
argument_list|(
literal|"Failed to generate"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Required
DECL|method|source
specifier|public
name|IndexRequest
name|source
parameter_list|(
name|String
name|field1
parameter_list|,
name|Object
name|value1
parameter_list|,
name|String
name|field2
parameter_list|,
name|Object
name|value2
parameter_list|,
name|String
name|field3
parameter_list|,
name|Object
name|value3
parameter_list|,
name|String
name|field4
parameter_list|,
name|Object
name|value4
parameter_list|)
block|{
try|try
block|{
name|XContentBuilder
name|builder
init|=
name|XContentFactory
operator|.
name|contentBuilder
argument_list|(
name|contentType
argument_list|)
decl_stmt|;
name|builder
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
name|field1
argument_list|,
name|value1
argument_list|)
operator|.
name|field
argument_list|(
name|field2
argument_list|,
name|value2
argument_list|)
operator|.
name|field
argument_list|(
name|field3
argument_list|,
name|value3
argument_list|)
operator|.
name|field
argument_list|(
name|field4
argument_list|,
name|value4
argument_list|)
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|source
argument_list|(
name|builder
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ElasticSearchGenerationException
argument_list|(
literal|"Failed to generate"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Sets the document to index in bytes form.      */
DECL|method|source
specifier|public
name|IndexRequest
name|source
parameter_list|(
name|byte
index|[]
name|source
parameter_list|)
block|{
return|return
name|source
argument_list|(
name|source
argument_list|,
literal|0
argument_list|,
name|source
operator|.
name|length
argument_list|)
return|;
block|}
comment|/**      * Sets the document to index in bytes form (assumed to be safe to be used from different      * threads).      *      * @param source The source to index      * @param offset The offset in the byte array      * @param length The length of the data      */
annotation|@
name|Required
DECL|method|source
specifier|public
name|IndexRequest
name|source
parameter_list|(
name|byte
index|[]
name|source
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
return|return
name|source
argument_list|(
name|source
argument_list|,
name|offset
argument_list|,
name|length
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * Sets the document to index in bytes form.      *      * @param source The source to index      * @param offset The offset in the byte array      * @param length The length of the data      * @param unsafe Is the byte array safe to be used form a different thread      */
annotation|@
name|Required
DECL|method|source
specifier|public
name|IndexRequest
name|source
parameter_list|(
name|byte
index|[]
name|source
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|,
name|boolean
name|unsafe
parameter_list|)
block|{
name|this
operator|.
name|source
operator|=
name|source
expr_stmt|;
name|this
operator|.
name|sourceOffset
operator|=
name|offset
expr_stmt|;
name|this
operator|.
name|sourceLength
operator|=
name|length
expr_stmt|;
name|this
operator|.
name|sourceUnsafe
operator|=
name|unsafe
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * A timeout to wait if the index operation can't be performed immediately. Defaults to<tt>1m</tt>.      */
DECL|method|timeout
specifier|public
name|IndexRequest
name|timeout
parameter_list|(
name|TimeValue
name|timeout
parameter_list|)
block|{
name|this
operator|.
name|timeout
operator|=
name|timeout
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * A timeout to wait if the index operation can't be performed immediately. Defaults to<tt>1m</tt>.      */
DECL|method|timeout
specifier|public
name|IndexRequest
name|timeout
parameter_list|(
name|String
name|timeout
parameter_list|)
block|{
return|return
name|timeout
argument_list|(
name|TimeValue
operator|.
name|parseTimeValue
argument_list|(
name|timeout
argument_list|,
literal|null
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Sets the type of operation to perform.      */
DECL|method|opType
specifier|public
name|IndexRequest
name|opType
parameter_list|(
name|OpType
name|opType
parameter_list|)
block|{
name|this
operator|.
name|opType
operator|=
name|opType
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets a string representation of the {@link #opType(org.elasticsearch.action.index.IndexRequest.OpType)}. Can      * be either "index" or "create".      */
DECL|method|opType
specifier|public
name|IndexRequest
name|opType
parameter_list|(
name|String
name|opType
parameter_list|)
throws|throws
name|ElasticSearchIllegalArgumentException
block|{
if|if
condition|(
literal|"create"
operator|.
name|equals
argument_list|(
name|opType
argument_list|)
condition|)
block|{
return|return
name|opType
argument_list|(
name|OpType
operator|.
name|CREATE
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
literal|"index"
operator|.
name|equals
argument_list|(
name|opType
argument_list|)
condition|)
block|{
return|return
name|opType
argument_list|(
name|OpType
operator|.
name|INDEX
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|ElasticSearchIllegalArgumentException
argument_list|(
literal|"No index opType matching ["
operator|+
name|opType
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
comment|/**      * Set the replication type for this operation.      */
annotation|@
name|Override
DECL|method|replicationType
specifier|public
name|IndexRequest
name|replicationType
parameter_list|(
name|ReplicationType
name|replicationType
parameter_list|)
block|{
name|super
operator|.
name|replicationType
argument_list|(
name|replicationType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the consistency level of write. Defaults to {@link org.elasticsearch.action.WriteConsistencyLevel#DEFAULT}      */
annotation|@
name|Override
DECL|method|consistencyLevel
specifier|public
name|IndexRequest
name|consistencyLevel
parameter_list|(
name|WriteConsistencyLevel
name|consistencyLevel
parameter_list|)
block|{
name|super
operator|.
name|consistencyLevel
argument_list|(
name|consistencyLevel
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Set the replication type for this operation.      */
DECL|method|replicationType
specifier|public
name|IndexRequest
name|replicationType
parameter_list|(
name|String
name|replicationType
parameter_list|)
block|{
name|super
operator|.
name|replicationType
argument_list|(
name|ReplicationType
operator|.
name|fromString
argument_list|(
name|replicationType
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Set to<tt>true</tt> to force this index to use {@link OpType#CREATE}.      */
DECL|method|create
specifier|public
name|IndexRequest
name|create
parameter_list|(
name|boolean
name|create
parameter_list|)
block|{
if|if
condition|(
name|create
condition|)
block|{
return|return
name|opType
argument_list|(
name|OpType
operator|.
name|CREATE
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|opType
argument_list|(
name|OpType
operator|.
name|INDEX
argument_list|)
return|;
block|}
block|}
comment|/**      * The type of operation to perform.      */
DECL|method|opType
specifier|public
name|OpType
name|opType
parameter_list|()
block|{
return|return
name|this
operator|.
name|opType
return|;
block|}
comment|/**      * Should a refresh be executed post this index operation causing the operation to      * be searchable. Note, heavy indexing should not set this to<tt>true</tt>. Defaults      * to<tt>false</tt>.      */
DECL|method|refresh
specifier|public
name|IndexRequest
name|refresh
parameter_list|(
name|boolean
name|refresh
parameter_list|)
block|{
name|this
operator|.
name|refresh
operator|=
name|refresh
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|refresh
specifier|public
name|boolean
name|refresh
parameter_list|()
block|{
return|return
name|this
operator|.
name|refresh
return|;
block|}
comment|/**      * Sets the version, which will cause the index operation to only be performed if a matching      * version exists and no changes happened on the doc since then.      */
DECL|method|version
specifier|public
name|IndexRequest
name|version
parameter_list|(
name|long
name|version
parameter_list|)
block|{
name|this
operator|.
name|version
operator|=
name|version
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|version
specifier|public
name|long
name|version
parameter_list|()
block|{
return|return
name|this
operator|.
name|version
return|;
block|}
comment|/**      * Sets the versioning type. Defaults to {@link VersionType#INTERNAL}.      */
DECL|method|versionType
specifier|public
name|IndexRequest
name|versionType
parameter_list|(
name|VersionType
name|versionType
parameter_list|)
block|{
name|this
operator|.
name|versionType
operator|=
name|versionType
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|versionType
specifier|public
name|VersionType
name|versionType
parameter_list|()
block|{
return|return
name|this
operator|.
name|versionType
return|;
block|}
comment|/**      * Causes the index request document to be percolated. The parameter is the percolate query      * to use to reduce the percolated queries that are going to run against this doc. Can be      * set to<tt>*</tt> to indicate that all percolate queries should be run.      */
DECL|method|percolate
specifier|public
name|IndexRequest
name|percolate
parameter_list|(
name|String
name|percolate
parameter_list|)
block|{
name|this
operator|.
name|percolate
operator|=
name|percolate
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|percolate
specifier|public
name|String
name|percolate
parameter_list|()
block|{
return|return
name|this
operator|.
name|percolate
return|;
block|}
DECL|method|process
specifier|public
name|void
name|process
parameter_list|(
name|MetaData
name|metaData
parameter_list|,
name|String
name|aliasOrIndex
parameter_list|,
annotation|@
name|Nullable
name|MappingMetaData
name|mappingMd
parameter_list|,
name|boolean
name|allowIdGeneration
parameter_list|)
throws|throws
name|ElasticSearchException
block|{
comment|// resolve the routing if needed
name|routing
argument_list|(
name|metaData
operator|.
name|resolveIndexRouting
argument_list|(
name|routing
argument_list|,
name|aliasOrIndex
argument_list|)
argument_list|)
expr_stmt|;
comment|// resolve timestamp if provided externally
if|if
condition|(
name|timestamp
operator|!=
literal|null
condition|)
block|{
name|timestamp
operator|=
name|MappingMetaData
operator|.
name|Timestamp
operator|.
name|parseStringTimestamp
argument_list|(
name|timestamp
argument_list|,
name|mappingMd
operator|!=
literal|null
condition|?
name|mappingMd
operator|.
name|timestamp
argument_list|()
operator|.
name|dateTimeFormatter
argument_list|()
else|:
name|TimestampFieldMapper
operator|.
name|Defaults
operator|.
name|DATE_TIME_FORMATTER
argument_list|)
expr_stmt|;
block|}
comment|// extract values if needed
if|if
condition|(
name|mappingMd
operator|!=
literal|null
condition|)
block|{
name|MappingMetaData
operator|.
name|ParseContext
name|parseContext
init|=
name|mappingMd
operator|.
name|createParseContext
argument_list|(
name|id
argument_list|,
name|routing
argument_list|,
name|timestamp
argument_list|)
decl_stmt|;
if|if
condition|(
name|parseContext
operator|.
name|shouldParse
argument_list|()
condition|)
block|{
name|XContentParser
name|parser
init|=
literal|null
decl_stmt|;
try|try
block|{
name|parser
operator|=
name|XContentFactory
operator|.
name|xContent
argument_list|(
name|source
argument_list|,
name|sourceOffset
argument_list|,
name|sourceLength
argument_list|)
operator|.
name|createParser
argument_list|(
name|source
argument_list|,
name|sourceOffset
argument_list|,
name|sourceLength
argument_list|)
expr_stmt|;
name|mappingMd
operator|.
name|parse
argument_list|(
name|parser
argument_list|,
name|parseContext
argument_list|)
expr_stmt|;
if|if
condition|(
name|parseContext
operator|.
name|shouldParseId
argument_list|()
condition|)
block|{
name|id
operator|=
name|parseContext
operator|.
name|id
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|parseContext
operator|.
name|shouldParseRouting
argument_list|()
condition|)
block|{
name|routing
operator|=
name|parseContext
operator|.
name|routing
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|parseContext
operator|.
name|shouldParseTimestamp
argument_list|()
condition|)
block|{
name|timestamp
operator|=
name|parseContext
operator|.
name|timestamp
argument_list|()
expr_stmt|;
name|timestamp
operator|=
name|MappingMetaData
operator|.
name|Timestamp
operator|.
name|parseStringTimestamp
argument_list|(
name|timestamp
argument_list|,
name|mappingMd
operator|.
name|timestamp
argument_list|()
operator|.
name|dateTimeFormatter
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ElasticSearchParseException
argument_list|(
literal|"failed to parse doc to extract routing/timestamp"
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|parser
operator|!=
literal|null
condition|)
block|{
name|parser
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|// might as well check for routing here
if|if
condition|(
name|mappingMd
operator|.
name|routing
argument_list|()
operator|.
name|required
argument_list|()
operator|&&
name|routing
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RoutingMissingException
argument_list|(
name|index
argument_list|,
name|type
argument_list|,
name|id
argument_list|)
throw|;
block|}
block|}
comment|// generate id if not already provided and id generation is allowed
if|if
condition|(
name|allowIdGeneration
condition|)
block|{
if|if
condition|(
name|id
operator|==
literal|null
condition|)
block|{
name|id
argument_list|(
name|UUID
operator|.
name|randomBase64UUID
argument_list|()
argument_list|)
expr_stmt|;
comment|// since we generate the id, change it to CREATE
name|opType
argument_list|(
name|IndexRequest
operator|.
name|OpType
operator|.
name|CREATE
argument_list|)
expr_stmt|;
block|}
block|}
comment|// generate timestamp if not provided, we always have one post this stage...
if|if
condition|(
name|timestamp
operator|==
literal|null
condition|)
block|{
name|timestamp
operator|=
name|String
operator|.
name|valueOf
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|type
operator|=
name|in
operator|.
name|readUTF
argument_list|()
expr_stmt|;
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|id
operator|=
name|in
operator|.
name|readUTF
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|routing
operator|=
name|in
operator|.
name|readUTF
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|parent
operator|=
name|in
operator|.
name|readUTF
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|timestamp
operator|=
name|in
operator|.
name|readUTF
argument_list|()
expr_stmt|;
block|}
name|ttl
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|BytesHolder
name|bytes
init|=
name|in
operator|.
name|readBytesReference
argument_list|()
decl_stmt|;
name|sourceUnsafe
operator|=
literal|false
expr_stmt|;
name|source
operator|=
name|bytes
operator|.
name|bytes
argument_list|()
expr_stmt|;
name|sourceOffset
operator|=
name|bytes
operator|.
name|offset
argument_list|()
expr_stmt|;
name|sourceLength
operator|=
name|bytes
operator|.
name|length
argument_list|()
expr_stmt|;
name|opType
operator|=
name|OpType
operator|.
name|fromId
argument_list|(
name|in
operator|.
name|readByte
argument_list|()
argument_list|)
expr_stmt|;
name|refresh
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
name|version
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|percolate
operator|=
name|in
operator|.
name|readUTF
argument_list|()
expr_stmt|;
block|}
name|versionType
operator|=
name|VersionType
operator|.
name|fromValue
argument_list|(
name|in
operator|.
name|readByte
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeUTF
argument_list|(
name|type
argument_list|)
expr_stmt|;
if|if
condition|(
name|id
operator|==
literal|null
condition|)
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeUTF
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|routing
operator|==
literal|null
condition|)
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeUTF
argument_list|(
name|routing
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|parent
operator|==
literal|null
condition|)
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeUTF
argument_list|(
name|parent
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|timestamp
operator|==
literal|null
condition|)
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeUTF
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|writeLong
argument_list|(
name|ttl
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBytesHolder
argument_list|(
name|source
argument_list|,
name|sourceOffset
argument_list|,
name|sourceLength
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeByte
argument_list|(
name|opType
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|refresh
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|version
argument_list|)
expr_stmt|;
if|if
condition|(
name|percolate
operator|==
literal|null
condition|)
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeUTF
argument_list|(
name|percolate
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|writeByte
argument_list|(
name|versionType
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|String
name|sSource
init|=
literal|"_na_"
decl_stmt|;
try|try
block|{
name|sSource
operator|=
name|Unicode
operator|.
name|fromBytes
argument_list|(
name|source
argument_list|,
name|sourceOffset
argument_list|,
name|sourceLength
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ignore
block|}
return|return
literal|"index {["
operator|+
name|index
operator|+
literal|"]["
operator|+
name|type
operator|+
literal|"]["
operator|+
name|id
operator|+
literal|"], source["
operator|+
name|sSource
operator|+
literal|"]}"
return|;
block|}
block|}
end_class

end_unit

