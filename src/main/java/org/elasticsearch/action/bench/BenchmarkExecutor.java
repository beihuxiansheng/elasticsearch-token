begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.bench
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|bench
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|PriorityQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ExceptionsHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableOpenMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|ESLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|Loggers
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|UnmodifiableIterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Handles execution, listing, and aborting of benchmarks  */
end_comment

begin_class
DECL|class|BenchmarkExecutor
specifier|public
class|class
name|BenchmarkExecutor
block|{
DECL|field|logger
specifier|private
specifier|static
specifier|final
name|ESLogger
name|logger
init|=
name|Loggers
operator|.
name|getLogger
argument_list|(
name|BenchmarkExecutor
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|client
specifier|private
specifier|final
name|Client
name|client
decl_stmt|;
DECL|field|nodeName
specifier|private
name|String
name|nodeName
decl_stmt|;
DECL|field|clusterService
specifier|private
specifier|final
name|ClusterService
name|clusterService
decl_stmt|;
DECL|field|activeBenchmarks
specifier|private
specifier|volatile
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|BenchmarkState
argument_list|>
name|activeBenchmarks
init|=
name|ImmutableOpenMap
operator|.
name|of
argument_list|()
decl_stmt|;
DECL|field|lock
specifier|private
specifier|final
name|Object
name|lock
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
DECL|method|BenchmarkExecutor
specifier|public
name|BenchmarkExecutor
parameter_list|(
name|Client
name|client
parameter_list|,
name|ClusterService
name|clusterService
parameter_list|)
block|{
name|this
operator|.
name|client
operator|=
name|client
expr_stmt|;
name|this
operator|.
name|clusterService
operator|=
name|clusterService
expr_stmt|;
block|}
DECL|class|BenchmarkState
specifier|private
specifier|static
class|class
name|BenchmarkState
block|{
DECL|field|id
specifier|final
name|String
name|id
decl_stmt|;
DECL|field|semaphore
specifier|final
name|StoppableSemaphore
name|semaphore
decl_stmt|;
DECL|field|response
specifier|final
name|BenchmarkResponse
name|response
decl_stmt|;
DECL|method|BenchmarkState
name|BenchmarkState
parameter_list|(
name|BenchmarkRequest
name|request
parameter_list|,
name|BenchmarkResponse
name|response
parameter_list|,
name|StoppableSemaphore
name|semaphore
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|request
operator|.
name|benchmarkName
argument_list|()
expr_stmt|;
name|this
operator|.
name|response
operator|=
name|response
expr_stmt|;
name|this
operator|.
name|semaphore
operator|=
name|semaphore
expr_stmt|;
block|}
block|}
comment|/**      * Aborts a benchmark with the given id      *      * @param benchmarkName The benchmark to abort      * @return              Abort response      */
DECL|method|abortBenchmark
specifier|public
name|AbortBenchmarkNodeResponse
name|abortBenchmark
parameter_list|(
name|String
name|benchmarkName
parameter_list|)
block|{
name|BenchmarkState
name|state
init|=
name|activeBenchmarks
operator|.
name|get
argument_list|(
name|benchmarkName
argument_list|)
decl_stmt|;
if|if
condition|(
name|state
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ElasticsearchException
argument_list|(
literal|"Benchmark ["
operator|+
name|benchmarkName
operator|+
literal|"] not found"
argument_list|)
throw|;
block|}
name|state
operator|.
name|semaphore
operator|.
name|stop
argument_list|()
expr_stmt|;
name|activeBenchmarks
operator|=
name|ImmutableOpenMap
operator|.
name|builder
argument_list|(
name|activeBenchmarks
argument_list|)
operator|.
name|fRemove
argument_list|(
name|benchmarkName
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"Aborted benchmark [{}]"
argument_list|,
name|benchmarkName
argument_list|)
expr_stmt|;
return|return
operator|new
name|AbortBenchmarkNodeResponse
argument_list|(
name|benchmarkName
argument_list|,
name|nodeName
argument_list|)
return|;
block|}
comment|/**      * Reports status of all active benchmarks      *      * @return  Benchmark status response      */
DECL|method|benchmarkStatus
specifier|public
name|BenchmarkStatusNodeResponse
name|benchmarkStatus
parameter_list|()
block|{
name|BenchmarkStatusNodeResponse
name|response
init|=
operator|new
name|BenchmarkStatusNodeResponse
argument_list|()
decl_stmt|;
specifier|final
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|BenchmarkState
argument_list|>
name|activeBenchmarks
init|=
name|this
operator|.
name|activeBenchmarks
decl_stmt|;
name|UnmodifiableIterator
argument_list|<
name|String
argument_list|>
name|iter
init|=
name|activeBenchmarks
operator|.
name|keysIt
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|id
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|BenchmarkState
name|state
init|=
name|activeBenchmarks
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|response
operator|.
name|addBenchResponse
argument_list|(
name|state
operator|.
name|response
argument_list|)
expr_stmt|;
block|}
return|return
name|response
return|;
block|}
comment|/**      * Submits a search benchmark for execution      *      * @param request                   A benchmark request      * @return                          Summary response of executed benchmark      * @throws ElasticsearchException      */
DECL|method|benchmark
specifier|public
name|BenchmarkResponse
name|benchmark
parameter_list|(
name|BenchmarkRequest
name|request
parameter_list|)
throws|throws
name|ElasticsearchException
block|{
specifier|final
name|StoppableSemaphore
name|semaphore
init|=
operator|new
name|StoppableSemaphore
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|CompetitionResult
argument_list|>
name|competitionResults
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|CompetitionResult
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|BenchmarkResponse
name|benchmarkResponse
init|=
operator|new
name|BenchmarkResponse
argument_list|(
name|request
operator|.
name|benchmarkName
argument_list|()
argument_list|,
name|competitionResults
argument_list|)
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|nodeName
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|nodeName
operator|=
name|clusterService
operator|.
name|localNode
argument_list|()
operator|.
name|name
argument_list|()
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|lock
init|)
block|{
if|if
condition|(
name|activeBenchmarks
operator|.
name|containsKey
argument_list|(
name|request
operator|.
name|benchmarkName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ElasticsearchException
argument_list|(
literal|"Benchmark with id ["
operator|+
name|request
operator|.
name|benchmarkName
argument_list|()
operator|+
literal|"] is already running"
argument_list|)
throw|;
block|}
name|activeBenchmarks
operator|=
name|ImmutableOpenMap
operator|.
name|builder
argument_list|(
name|activeBenchmarks
argument_list|)
operator|.
name|fPut
argument_list|(
name|request
operator|.
name|benchmarkName
argument_list|()
argument_list|,
operator|new
name|BenchmarkState
argument_list|(
name|request
argument_list|,
name|benchmarkResponse
argument_list|,
name|semaphore
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
try|try
block|{
for|for
control|(
name|BenchmarkCompetitor
name|competitor
range|:
name|request
operator|.
name|competitors
argument_list|()
control|)
block|{
specifier|final
name|BenchmarkSettings
name|settings
init|=
name|competitor
operator|.
name|settings
argument_list|()
decl_stmt|;
specifier|final
name|int
name|iterations
init|=
name|settings
operator|.
name|iterations
argument_list|()
decl_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"Executing [{}] iterations for benchmark [{}][{}] "
argument_list|,
name|iterations
argument_list|,
name|request
operator|.
name|benchmarkName
argument_list|()
argument_list|,
name|competitor
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|CompetitionIteration
argument_list|>
name|competitionIterations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|iterations
argument_list|)
decl_stmt|;
specifier|final
name|CompetitionResult
name|competitionResult
init|=
operator|new
name|CompetitionResult
argument_list|(
name|competitor
operator|.
name|name
argument_list|()
argument_list|,
name|settings
operator|.
name|concurrency
argument_list|()
argument_list|,
name|settings
operator|.
name|multiplier
argument_list|()
argument_list|,
name|request
operator|.
name|percentiles
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|CompetitionNodeResult
name|competitionNodeResult
init|=
operator|new
name|CompetitionNodeResult
argument_list|(
name|competitor
operator|.
name|name
argument_list|()
argument_list|,
name|nodeName
argument_list|,
name|iterations
argument_list|,
name|competitionIterations
argument_list|)
decl_stmt|;
name|competitionResult
operator|.
name|addCompetitionNodeResult
argument_list|(
name|competitionNodeResult
argument_list|)
expr_stmt|;
name|benchmarkResponse
operator|.
name|competitionResults
operator|.
name|put
argument_list|(
name|competitor
operator|.
name|name
argument_list|()
argument_list|,
name|competitionResult
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|SearchRequest
argument_list|>
name|searchRequests
init|=
name|competitor
operator|.
name|settings
argument_list|()
operator|.
name|searchRequests
argument_list|()
decl_stmt|;
if|if
condition|(
name|settings
operator|.
name|warmup
argument_list|()
condition|)
block|{
specifier|final
name|long
name|beforeWarmup
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|warmUpErrors
init|=
name|warmUp
argument_list|(
name|competitor
argument_list|,
name|searchRequests
argument_list|,
name|semaphore
argument_list|)
decl_stmt|;
specifier|final
name|long
name|afterWarmup
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|competitionNodeResult
operator|.
name|warmUpTime
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|convert
argument_list|(
name|afterWarmup
operator|-
name|beforeWarmup
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|warmUpErrors
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|BenchmarkExecutionException
argument_list|(
literal|"Failed to execute warmup phase"
argument_list|,
name|warmUpErrors
argument_list|)
throw|;
block|}
block|}
specifier|final
name|int
name|numMeasurements
init|=
name|settings
operator|.
name|multiplier
argument_list|()
operator|*
name|searchRequests
operator|.
name|size
argument_list|()
decl_stmt|;
specifier|final
name|long
index|[]
name|timeBuckets
init|=
operator|new
name|long
index|[
name|numMeasurements
index|]
decl_stmt|;
specifier|final
name|long
index|[]
name|docBuckets
init|=
operator|new
name|long
index|[
name|numMeasurements
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iterations
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|settings
operator|.
name|allowCacheClearing
argument_list|()
operator|&&
name|settings
operator|.
name|clearCaches
argument_list|()
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|client
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|clearCache
argument_list|(
name|settings
operator|.
name|clearCaches
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|BenchmarkExecutionException
argument_list|(
literal|"Failed to clear caches"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|// Run the iteration
name|CompetitionIteration
name|ci
init|=
name|runIteration
argument_list|(
name|competitor
argument_list|,
name|searchRequests
argument_list|,
name|timeBuckets
argument_list|,
name|docBuckets
argument_list|,
name|semaphore
argument_list|)
decl_stmt|;
name|ci
operator|.
name|percentiles
argument_list|(
name|request
operator|.
name|percentiles
argument_list|()
argument_list|)
expr_stmt|;
name|competitionIterations
operator|.
name|add
argument_list|(
name|ci
argument_list|)
expr_stmt|;
name|competitionNodeResult
operator|.
name|incrementCompletedIterations
argument_list|()
expr_stmt|;
block|}
name|competitionNodeResult
operator|.
name|totalExecutedQueries
argument_list|(
name|settings
operator|.
name|multiplier
argument_list|()
operator|*
name|searchRequests
operator|.
name|size
argument_list|()
operator|*
name|iterations
argument_list|)
expr_stmt|;
block|}
name|benchmarkResponse
operator|.
name|state
argument_list|(
name|BenchmarkResponse
operator|.
name|State
operator|.
name|COMPLETE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BenchmarkExecutionException
name|e
parameter_list|)
block|{
name|benchmarkResponse
operator|.
name|state
argument_list|(
name|BenchmarkResponse
operator|.
name|State
operator|.
name|FAILED
argument_list|)
expr_stmt|;
name|benchmarkResponse
operator|.
name|errors
argument_list|(
name|e
operator|.
name|errorMessages
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|e
operator|.
name|errorMessages
argument_list|()
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|benchmarkResponse
operator|.
name|state
argument_list|(
name|BenchmarkResponse
operator|.
name|State
operator|.
name|ABORTED
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
synchronized|synchronized
init|(
name|lock
init|)
block|{
name|semaphore
operator|.
name|stop
argument_list|()
expr_stmt|;
name|activeBenchmarks
operator|=
name|ImmutableOpenMap
operator|.
name|builder
argument_list|(
name|activeBenchmarks
argument_list|)
operator|.
name|fRemove
argument_list|(
name|request
operator|.
name|benchmarkName
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|benchmarkResponse
return|;
block|}
DECL|method|warmUp
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|warmUp
parameter_list|(
name|BenchmarkCompetitor
name|competitor
parameter_list|,
name|List
argument_list|<
name|SearchRequest
argument_list|>
name|searchRequests
parameter_list|,
name|StoppableSemaphore
name|stoppableSemaphore
parameter_list|)
throws|throws
name|InterruptedException
block|{
specifier|final
name|StoppableSemaphore
name|semaphore
init|=
name|stoppableSemaphore
operator|.
name|reset
argument_list|(
name|competitor
operator|.
name|settings
argument_list|()
operator|.
name|concurrency
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|totalCount
init|=
operator|new
name|CountDownLatch
argument_list|(
name|searchRequests
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|CopyOnWriteArrayList
argument_list|<
name|String
argument_list|>
name|errorMessages
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|SearchRequest
name|searchRequest
range|:
name|searchRequests
control|)
block|{
name|semaphore
operator|.
name|acquire
argument_list|()
expr_stmt|;
name|client
operator|.
name|search
argument_list|(
name|searchRequest
argument_list|,
operator|new
name|BoundsManagingActionListener
argument_list|<
name|SearchResponse
argument_list|>
argument_list|(
name|semaphore
argument_list|,
name|totalCount
argument_list|,
name|errorMessages
argument_list|)
block|{ }
argument_list|)
expr_stmt|;
block|}
name|totalCount
operator|.
name|await
argument_list|()
expr_stmt|;
return|return
name|errorMessages
return|;
block|}
DECL|method|runIteration
specifier|private
name|CompetitionIteration
name|runIteration
parameter_list|(
name|BenchmarkCompetitor
name|competitor
parameter_list|,
name|List
argument_list|<
name|SearchRequest
argument_list|>
name|searchRequests
parameter_list|,
specifier|final
name|long
index|[]
name|timeBuckets
parameter_list|,
specifier|final
name|long
index|[]
name|docBuckets
parameter_list|,
name|StoppableSemaphore
name|stoppableSemaphore
parameter_list|)
throws|throws
name|InterruptedException
block|{
assert|assert
name|timeBuckets
operator|.
name|length
operator|==
name|competitor
operator|.
name|settings
argument_list|()
operator|.
name|multiplier
argument_list|()
operator|*
name|searchRequests
operator|.
name|size
argument_list|()
assert|;
assert|assert
name|docBuckets
operator|.
name|length
operator|==
name|competitor
operator|.
name|settings
argument_list|()
operator|.
name|multiplier
argument_list|()
operator|*
name|searchRequests
operator|.
name|size
argument_list|()
assert|;
specifier|final
name|StoppableSemaphore
name|semaphore
init|=
name|stoppableSemaphore
operator|.
name|reset
argument_list|(
name|competitor
operator|.
name|settings
argument_list|()
operator|.
name|concurrency
argument_list|()
argument_list|)
decl_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|timeBuckets
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// wipe CPU cache     ;)
name|Arrays
operator|.
name|fill
argument_list|(
name|docBuckets
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// wipe CPU cache     ;)
name|int
name|id
init|=
literal|0
decl_stmt|;
specifier|final
name|CountDownLatch
name|totalCount
init|=
operator|new
name|CountDownLatch
argument_list|(
name|timeBuckets
operator|.
name|length
argument_list|)
decl_stmt|;
specifier|final
name|CopyOnWriteArrayList
argument_list|<
name|String
argument_list|>
name|errorMessages
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|long
name|beforeRun
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|competitor
operator|.
name|settings
argument_list|()
operator|.
name|multiplier
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|SearchRequest
name|searchRequest
range|:
name|searchRequests
control|)
block|{
name|StatisticCollectionActionListener
name|statsListener
init|=
operator|new
name|StatisticCollectionActionListener
argument_list|(
name|semaphore
argument_list|,
name|timeBuckets
argument_list|,
name|docBuckets
argument_list|,
name|id
operator|++
argument_list|,
name|totalCount
argument_list|,
name|errorMessages
argument_list|)
decl_stmt|;
name|semaphore
operator|.
name|acquire
argument_list|()
expr_stmt|;
name|client
operator|.
name|search
argument_list|(
name|searchRequest
argument_list|,
name|statsListener
argument_list|)
expr_stmt|;
block|}
block|}
name|totalCount
operator|.
name|await
argument_list|()
expr_stmt|;
assert|assert
name|id
operator|==
name|timeBuckets
operator|.
name|length
assert|;
specifier|final
name|long
name|afterRun
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|errorMessages
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|BenchmarkExecutionException
argument_list|(
literal|"Too many execution failures"
argument_list|,
name|errorMessages
argument_list|)
throw|;
block|}
assert|assert
name|assertBuckets
argument_list|(
name|timeBuckets
argument_list|)
assert|;
comment|// make sure they are all set
assert|assert
name|assertBuckets
argument_list|(
name|docBuckets
argument_list|)
assert|;
comment|// make sure they are all set
specifier|final
name|long
name|totalTime
init|=
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|convert
argument_list|(
name|afterRun
operator|-
name|beforeRun
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
decl_stmt|;
name|CompetitionIterationData
name|iterationData
init|=
operator|new
name|CompetitionIterationData
argument_list|(
name|timeBuckets
argument_list|)
decl_stmt|;
name|long
name|sumDocs
init|=
operator|new
name|CompetitionIterationData
argument_list|(
name|docBuckets
argument_list|)
operator|.
name|sum
argument_list|()
decl_stmt|;
comment|// Don't track slowest request if there is only one request as that is redundant
name|CompetitionIteration
operator|.
name|SlowRequest
index|[]
name|topN
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|(
name|competitor
operator|.
name|settings
argument_list|()
operator|.
name|numSlowest
argument_list|()
operator|>
literal|0
operator|)
operator|&&
operator|(
name|searchRequests
operator|.
name|size
argument_list|()
operator|>
literal|1
operator|)
condition|)
block|{
name|topN
operator|=
name|getTopN
argument_list|(
name|timeBuckets
argument_list|,
name|searchRequests
argument_list|,
name|competitor
operator|.
name|settings
argument_list|()
operator|.
name|multiplier
argument_list|()
argument_list|,
name|competitor
operator|.
name|settings
argument_list|()
operator|.
name|numSlowest
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|CompetitionIteration
name|round
init|=
operator|new
name|CompetitionIteration
argument_list|(
name|topN
argument_list|,
name|totalTime
argument_list|,
name|timeBuckets
operator|.
name|length
argument_list|,
name|sumDocs
argument_list|,
name|iterationData
argument_list|)
decl_stmt|;
return|return
name|round
return|;
block|}
DECL|method|getTopN
specifier|private
name|CompetitionIteration
operator|.
name|SlowRequest
index|[]
name|getTopN
parameter_list|(
name|long
index|[]
name|buckets
parameter_list|,
name|List
argument_list|<
name|SearchRequest
argument_list|>
name|requests
parameter_list|,
name|int
name|multiplier
parameter_list|,
name|int
name|topN
parameter_list|)
block|{
specifier|final
name|int
name|numRequests
init|=
name|requests
operator|.
name|size
argument_list|()
decl_stmt|;
comment|// collect the top N
specifier|final
name|PriorityQueue
argument_list|<
name|IndexAndTime
argument_list|>
name|topNQueue
init|=
operator|new
name|PriorityQueue
argument_list|<
name|IndexAndTime
argument_list|>
argument_list|(
name|topN
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|boolean
name|lessThan
parameter_list|(
name|IndexAndTime
name|a
parameter_list|,
name|IndexAndTime
name|b
parameter_list|)
block|{
return|return
name|a
operator|.
name|avgTime
operator|<
name|b
operator|.
name|avgTime
return|;
block|}
block|}
decl_stmt|;
assert|assert
name|multiplier
operator|>
literal|0
assert|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numRequests
condition|;
name|i
operator|++
control|)
block|{
name|long
name|sum
init|=
literal|0
decl_stmt|;
name|long
name|max
init|=
name|Long
operator|.
name|MIN_VALUE
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|multiplier
condition|;
name|j
operator|++
control|)
block|{
specifier|final
name|int
name|base
init|=
operator|(
name|numRequests
operator|*
name|j
operator|)
decl_stmt|;
name|sum
operator|+=
name|buckets
index|[
name|i
operator|+
name|base
index|]
expr_stmt|;
name|max
operator|=
name|Math
operator|.
name|max
argument_list|(
name|buckets
index|[
name|i
operator|+
name|base
index|]
argument_list|,
name|max
argument_list|)
expr_stmt|;
block|}
specifier|final
name|long
name|avg
init|=
name|sum
operator|/
name|multiplier
decl_stmt|;
if|if
condition|(
name|topNQueue
operator|.
name|size
argument_list|()
operator|<
name|topN
condition|)
block|{
name|topNQueue
operator|.
name|add
argument_list|(
operator|new
name|IndexAndTime
argument_list|(
name|i
argument_list|,
name|max
argument_list|,
name|avg
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|topNQueue
operator|.
name|top
argument_list|()
operator|.
name|avgTime
operator|<
name|max
condition|)
block|{
name|topNQueue
operator|.
name|top
argument_list|()
operator|.
name|update
argument_list|(
name|i
argument_list|,
name|max
argument_list|,
name|avg
argument_list|)
expr_stmt|;
name|topNQueue
operator|.
name|updateTop
argument_list|()
expr_stmt|;
block|}
block|}
specifier|final
name|CompetitionIteration
operator|.
name|SlowRequest
index|[]
name|slowRequests
init|=
operator|new
name|CompetitionIteration
operator|.
name|SlowRequest
index|[
name|topNQueue
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|i
init|=
name|topNQueue
operator|.
name|size
argument_list|()
operator|-
literal|1
decl_stmt|;
while|while
condition|(
name|topNQueue
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|IndexAndTime
name|pop
init|=
name|topNQueue
operator|.
name|pop
argument_list|()
decl_stmt|;
name|CompetitionIteration
operator|.
name|SlowRequest
name|slow
init|=
operator|new
name|CompetitionIteration
operator|.
name|SlowRequest
argument_list|(
name|pop
operator|.
name|avgTime
argument_list|,
name|pop
operator|.
name|maxTime
argument_list|,
name|requests
operator|.
name|get
argument_list|(
name|pop
operator|.
name|index
argument_list|)
argument_list|)
decl_stmt|;
name|slowRequests
index|[
name|i
operator|--
index|]
operator|=
name|slow
expr_stmt|;
block|}
return|return
name|slowRequests
return|;
block|}
DECL|class|IndexAndTime
specifier|private
specifier|static
class|class
name|IndexAndTime
block|{
DECL|field|index
name|int
name|index
decl_stmt|;
DECL|field|maxTime
name|long
name|maxTime
decl_stmt|;
DECL|field|avgTime
name|long
name|avgTime
decl_stmt|;
DECL|method|IndexAndTime
specifier|public
name|IndexAndTime
parameter_list|(
name|int
name|index
parameter_list|,
name|long
name|maxTime
parameter_list|,
name|long
name|avgTime
parameter_list|)
block|{
name|this
operator|.
name|index
operator|=
name|index
expr_stmt|;
name|this
operator|.
name|maxTime
operator|=
name|maxTime
expr_stmt|;
name|this
operator|.
name|avgTime
operator|=
name|avgTime
expr_stmt|;
block|}
DECL|method|update
specifier|public
name|void
name|update
parameter_list|(
name|int
name|index
parameter_list|,
name|long
name|maxTime
parameter_list|,
name|long
name|avgTime
parameter_list|)
block|{
name|this
operator|.
name|index
operator|=
name|index
expr_stmt|;
name|this
operator|.
name|maxTime
operator|=
name|maxTime
expr_stmt|;
name|this
operator|.
name|avgTime
operator|=
name|avgTime
expr_stmt|;
block|}
block|}
DECL|class|BoundsManagingActionListener
specifier|private
specifier|static
specifier|abstract
class|class
name|BoundsManagingActionListener
parameter_list|<
name|Response
parameter_list|>
implements|implements
name|ActionListener
argument_list|<
name|Response
argument_list|>
block|{
DECL|field|semaphore
specifier|private
specifier|final
name|StoppableSemaphore
name|semaphore
decl_stmt|;
DECL|field|latch
specifier|private
specifier|final
name|CountDownLatch
name|latch
decl_stmt|;
DECL|field|errorMessages
specifier|private
specifier|final
name|CopyOnWriteArrayList
argument_list|<
name|String
argument_list|>
name|errorMessages
decl_stmt|;
DECL|method|BoundsManagingActionListener
specifier|public
name|BoundsManagingActionListener
parameter_list|(
name|StoppableSemaphore
name|semaphore
parameter_list|,
name|CountDownLatch
name|latch
parameter_list|,
name|CopyOnWriteArrayList
argument_list|<
name|String
argument_list|>
name|errorMessages
parameter_list|)
block|{
name|this
operator|.
name|semaphore
operator|=
name|semaphore
expr_stmt|;
name|this
operator|.
name|latch
operator|=
name|latch
expr_stmt|;
name|this
operator|.
name|errorMessages
operator|=
name|errorMessages
expr_stmt|;
block|}
DECL|method|manage
specifier|private
name|void
name|manage
parameter_list|()
block|{
try|try
block|{
name|semaphore
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|onResponse
specifier|public
name|void
name|onResponse
parameter_list|(
name|Response
name|response
parameter_list|)
block|{
name|manage
argument_list|()
expr_stmt|;
block|}
DECL|method|onFailure
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|manage
argument_list|()
expr_stmt|;
if|if
condition|(
name|errorMessages
operator|.
name|size
argument_list|()
operator|<
literal|5
condition|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Failed to execute benchmark [{}]"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|e
operator|=
name|ExceptionsHelper
operator|.
name|unwrapCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|errorMessages
operator|.
name|add
argument_list|(
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|StatisticCollectionActionListener
specifier|private
specifier|static
class|class
name|StatisticCollectionActionListener
extends|extends
name|BoundsManagingActionListener
argument_list|<
name|SearchResponse
argument_list|>
block|{
DECL|field|timeBuckets
specifier|private
specifier|final
name|long
index|[]
name|timeBuckets
decl_stmt|;
DECL|field|bucketId
specifier|private
specifier|final
name|int
name|bucketId
decl_stmt|;
DECL|field|docBuckets
specifier|private
specifier|final
name|long
index|[]
name|docBuckets
decl_stmt|;
DECL|method|StatisticCollectionActionListener
specifier|public
name|StatisticCollectionActionListener
parameter_list|(
name|StoppableSemaphore
name|semaphore
parameter_list|,
name|long
index|[]
name|timeBuckets
parameter_list|,
name|long
index|[]
name|docs
parameter_list|,
name|int
name|bucketId
parameter_list|,
name|CountDownLatch
name|totalCount
parameter_list|,
name|CopyOnWriteArrayList
argument_list|<
name|String
argument_list|>
name|errorMessages
parameter_list|)
block|{
name|super
argument_list|(
name|semaphore
argument_list|,
name|totalCount
argument_list|,
name|errorMessages
argument_list|)
expr_stmt|;
name|this
operator|.
name|bucketId
operator|=
name|bucketId
expr_stmt|;
name|this
operator|.
name|timeBuckets
operator|=
name|timeBuckets
expr_stmt|;
name|this
operator|.
name|docBuckets
operator|=
name|docs
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onResponse
specifier|public
name|void
name|onResponse
parameter_list|(
name|SearchResponse
name|searchResponse
parameter_list|)
block|{
name|super
operator|.
name|onResponse
argument_list|(
name|searchResponse
argument_list|)
expr_stmt|;
name|timeBuckets
index|[
name|bucketId
index|]
operator|=
name|searchResponse
operator|.
name|getTookInMillis
argument_list|()
expr_stmt|;
if|if
condition|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|docBuckets
index|[
name|bucketId
index|]
operator|=
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getTotalHits
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|onFailure
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|timeBuckets
index|[
name|bucketId
index|]
operator|=
operator|-
literal|1
expr_stmt|;
name|docBuckets
index|[
name|bucketId
index|]
operator|=
operator|-
literal|1
expr_stmt|;
name|super
operator|.
name|onFailure
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|StoppableSemaphore
specifier|private
specifier|final
specifier|static
class|class
name|StoppableSemaphore
block|{
DECL|field|semaphore
specifier|private
name|Semaphore
name|semaphore
decl_stmt|;
DECL|field|stopped
specifier|private
specifier|volatile
name|boolean
name|stopped
init|=
literal|false
decl_stmt|;
DECL|method|StoppableSemaphore
specifier|public
name|StoppableSemaphore
parameter_list|(
name|int
name|concurrency
parameter_list|)
block|{
name|semaphore
operator|=
operator|new
name|Semaphore
argument_list|(
name|concurrency
argument_list|)
expr_stmt|;
block|}
DECL|method|reset
specifier|public
name|StoppableSemaphore
name|reset
parameter_list|(
name|int
name|concurrency
parameter_list|)
block|{
name|semaphore
operator|=
operator|new
name|Semaphore
argument_list|(
name|concurrency
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|acquire
specifier|public
name|void
name|acquire
parameter_list|()
throws|throws
name|InterruptedException
block|{
if|if
condition|(
name|stopped
condition|)
block|{
throw|throw
operator|new
name|InterruptedException
argument_list|(
literal|"Benchmark Interrupted"
argument_list|)
throw|;
block|}
name|semaphore
operator|.
name|acquire
argument_list|()
expr_stmt|;
block|}
DECL|method|release
specifier|public
name|void
name|release
parameter_list|()
block|{
name|semaphore
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
DECL|method|stop
specifier|public
name|void
name|stop
parameter_list|()
block|{
name|stopped
operator|=
literal|true
expr_stmt|;
block|}
block|}
DECL|method|assertBuckets
specifier|private
specifier|final
name|boolean
name|assertBuckets
parameter_list|(
name|long
index|[]
name|buckets
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|buckets
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
assert|assert
name|buckets
index|[
name|i
index|]
operator|>=
literal|0
operator|:
literal|"Bucket value was negative: "
operator|+
name|buckets
index|[
name|i
index|]
operator|+
literal|" bucket id: "
operator|+
name|i
assert|;
block|}
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

