begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.bench
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|bench
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Streamable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilderString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Benchmark response.  *  * A benchmark response will contain a mapping of names to results for each competition.  */
end_comment

begin_class
DECL|class|BenchmarkResponse
specifier|public
class|class
name|BenchmarkResponse
extends|extends
name|ActionResponse
implements|implements
name|Streamable
implements|,
name|ToXContent
block|{
DECL|field|benchmarkName
specifier|private
name|String
name|benchmarkName
decl_stmt|;
DECL|field|state
specifier|private
name|State
name|state
init|=
name|State
operator|.
name|RUNNING
decl_stmt|;
DECL|field|verbose
specifier|private
name|boolean
name|verbose
decl_stmt|;
DECL|field|errors
specifier|private
name|String
index|[]
name|errors
init|=
name|Strings
operator|.
name|EMPTY_ARRAY
decl_stmt|;
DECL|field|competitionResults
name|Map
argument_list|<
name|String
argument_list|,
name|CompetitionResult
argument_list|>
name|competitionResults
decl_stmt|;
DECL|method|BenchmarkResponse
specifier|public
name|BenchmarkResponse
parameter_list|()
block|{
name|competitionResults
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
DECL|method|BenchmarkResponse
specifier|public
name|BenchmarkResponse
parameter_list|(
name|String
name|benchmarkName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|CompetitionResult
argument_list|>
name|competitionResults
parameter_list|)
block|{
name|this
operator|.
name|benchmarkName
operator|=
name|benchmarkName
expr_stmt|;
name|this
operator|.
name|competitionResults
operator|=
name|competitionResults
expr_stmt|;
block|}
comment|/**      * Benchmarks can be in one of:      *  RUNNING     - executing normally      *  COMPLETE    - completed normally      *  ABORTED     - aborted      *  FAILED      - execution failed      */
DECL|enum|State
specifier|public
specifier|static
enum|enum
name|State
block|{
DECL|enum constant|RUNNING
name|RUNNING
argument_list|(
operator|(
name|byte
operator|)
literal|0
argument_list|)
block|,
DECL|enum constant|COMPLETE
name|COMPLETE
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|)
block|,
DECL|enum constant|ABORTED
name|ABORTED
argument_list|(
operator|(
name|byte
operator|)
literal|2
argument_list|)
block|,
DECL|enum constant|FAILED
name|FAILED
argument_list|(
operator|(
name|byte
operator|)
literal|3
argument_list|)
block|;
DECL|field|id
specifier|private
specifier|final
name|byte
name|id
decl_stmt|;
DECL|field|STATES
specifier|private
specifier|static
specifier|final
name|State
index|[]
name|STATES
init|=
operator|new
name|State
index|[
name|State
operator|.
name|values
argument_list|()
operator|.
name|length
index|]
decl_stmt|;
static|static
block|{
for|for
control|(
name|State
name|state
range|:
name|State
operator|.
name|values
argument_list|()
control|)
block|{
assert|assert
name|state
operator|.
name|id
argument_list|()
operator|<
name|STATES
operator|.
name|length
operator|&&
name|state
operator|.
name|id
argument_list|()
operator|>=
literal|0
assert|;
name|STATES
index|[
name|state
operator|.
name|id
index|]
operator|=
name|state
expr_stmt|;
block|}
block|}
DECL|method|State
name|State
parameter_list|(
name|byte
name|id
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
block|}
DECL|method|id
specifier|public
name|byte
name|id
parameter_list|()
block|{
return|return
name|id
return|;
block|}
DECL|method|fromId
specifier|public
specifier|static
name|State
name|fromId
parameter_list|(
name|byte
name|id
parameter_list|)
throws|throws
name|ElasticsearchIllegalArgumentException
block|{
if|if
condition|(
name|id
operator|<
literal|0
operator|||
name|id
operator|>=
name|STATES
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|ElasticsearchIllegalArgumentException
argument_list|(
literal|"No mapping for id ["
operator|+
name|id
operator|+
literal|"]"
argument_list|)
throw|;
block|}
return|return
name|STATES
index|[
name|id
index|]
return|;
block|}
block|}
comment|/**      * Name of the benchmark      * @return  Name of the benchmark      */
DECL|method|benchmarkName
specifier|public
name|String
name|benchmarkName
parameter_list|()
block|{
return|return
name|benchmarkName
return|;
block|}
comment|/**      * Sets the benchmark name      * @param benchmarkName Benchmark name      */
DECL|method|benchmarkName
specifier|public
name|void
name|benchmarkName
parameter_list|(
name|String
name|benchmarkName
parameter_list|)
block|{
name|this
operator|.
name|benchmarkName
operator|=
name|benchmarkName
expr_stmt|;
block|}
comment|/**      * Benchmark state      * @return  Benchmark state      */
DECL|method|state
specifier|public
name|State
name|state
parameter_list|()
block|{
return|return
name|state
return|;
block|}
comment|/**      * Sets the state of the benchmark      * @param state State      */
DECL|method|state
specifier|public
name|void
name|state
parameter_list|(
name|State
name|state
parameter_list|)
block|{
name|this
operator|.
name|state
operator|=
name|state
expr_stmt|;
block|}
comment|/**      * Possibly replace the existing state with the new state depending on the severity      * of the new state. More severe states, such as FAILED, will over-write less severe      * ones, such as COMPLETED.      * @param newState  New candidate state      * @return          The merged state      */
DECL|method|mergeState
specifier|public
name|State
name|mergeState
parameter_list|(
name|State
name|newState
parameter_list|)
block|{
if|if
condition|(
name|state
operator|.
name|compareTo
argument_list|(
name|newState
argument_list|)
operator|<
literal|0
condition|)
block|{
name|state
operator|=
name|newState
expr_stmt|;
block|}
return|return
name|state
return|;
block|}
comment|/**      * Map of competition names to competition results      * @return  Map of competition names to competition results      */
DECL|method|competitionResults
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|CompetitionResult
argument_list|>
name|competitionResults
parameter_list|()
block|{
return|return
name|competitionResults
return|;
block|}
comment|/**      * Whether to report verbose statistics      */
DECL|method|verbose
specifier|public
name|boolean
name|verbose
parameter_list|()
block|{
return|return
name|verbose
return|;
block|}
comment|/**      * Sets whether to report verbose statistics      */
DECL|method|verbose
specifier|public
name|void
name|verbose
parameter_list|(
name|boolean
name|verbose
parameter_list|)
block|{
name|this
operator|.
name|verbose
operator|=
name|verbose
expr_stmt|;
block|}
comment|/**      * Whether the benchmark encountered error conditions      * @return  Whether the benchmark encountered error conditions      */
DECL|method|hasErrors
specifier|public
name|boolean
name|hasErrors
parameter_list|()
block|{
return|return
operator|(
name|errors
operator|!=
literal|null
operator|&&
name|errors
operator|.
name|length
operator|>
literal|0
operator|)
return|;
block|}
comment|/**      * Error messages      * @return  Error messages      */
DECL|method|errors
specifier|public
name|String
index|[]
name|errors
parameter_list|()
block|{
return|return
name|this
operator|.
name|errors
return|;
block|}
comment|/**      * Sets error messages      * @param errors    Error messages      */
DECL|method|errors
specifier|public
name|void
name|errors
parameter_list|(
name|String
index|[]
name|errors
parameter_list|)
block|{
name|this
operator|.
name|errors
operator|=
operator|(
name|errors
operator|==
literal|null
operator|)
condition|?
name|Strings
operator|.
name|EMPTY_ARRAY
else|:
name|errors
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|STATUS
argument_list|,
name|state
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|errors
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|array
argument_list|(
name|Fields
operator|.
name|ERRORS
argument_list|,
name|errors
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|startObject
argument_list|(
name|Fields
operator|.
name|COMPETITORS
argument_list|)
expr_stmt|;
if|if
condition|(
name|competitionResults
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|CompetitionResult
argument_list|>
name|entry
range|:
name|competitionResults
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|verbose
argument_list|(
name|verbose
argument_list|)
expr_stmt|;
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|benchmarkName
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
name|state
operator|=
name|State
operator|.
name|fromId
argument_list|(
name|in
operator|.
name|readByte
argument_list|()
argument_list|)
expr_stmt|;
name|errors
operator|=
name|in
operator|.
name|readStringArray
argument_list|()
expr_stmt|;
name|int
name|size
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|String
name|s
init|=
name|in
operator|.
name|readString
argument_list|()
decl_stmt|;
name|CompetitionResult
name|cr
init|=
operator|new
name|CompetitionResult
argument_list|()
decl_stmt|;
name|cr
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|competitionResults
operator|.
name|put
argument_list|(
name|s
argument_list|,
name|cr
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeString
argument_list|(
name|benchmarkName
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeByte
argument_list|(
name|state
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeStringArray
argument_list|(
name|errors
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|competitionResults
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|CompetitionResult
argument_list|>
name|entry
range|:
name|competitionResults
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|out
operator|.
name|writeString
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
try|try
block|{
name|XContentBuilder
name|builder
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|prettyPrint
argument_list|()
decl_stmt|;
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|toXContent
argument_list|(
name|builder
argument_list|,
name|EMPTY_PARAMS
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
operator|.
name|string
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
literal|"{ \"error\" : \""
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|"\"}"
return|;
block|}
block|}
DECL|class|Fields
specifier|static
specifier|final
class|class
name|Fields
block|{
DECL|field|STATUS
specifier|static
specifier|final
name|XContentBuilderString
name|STATUS
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"status"
argument_list|)
decl_stmt|;
DECL|field|ERRORS
specifier|static
specifier|final
name|XContentBuilderString
name|ERRORS
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"errors"
argument_list|)
decl_stmt|;
DECL|field|COMPETITORS
specifier|static
specifier|final
name|XContentBuilderString
name|COMPETITORS
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"competitors"
argument_list|)
decl_stmt|;
block|}
block|}
end_class

end_unit

