begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.bench
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|bench
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|cache
operator|.
name|clear
operator|.
name|ClearIndicesCacheRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Streamable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Settings that define how a benchmark should be executed.  */
end_comment

begin_class
DECL|class|BenchmarkSettings
specifier|public
class|class
name|BenchmarkSettings
implements|implements
name|Streamable
block|{
DECL|field|DEFAULT_CONCURRENCY
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_CONCURRENCY
init|=
literal|5
decl_stmt|;
DECL|field|DEFAULT_ITERATIONS
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_ITERATIONS
init|=
literal|5
decl_stmt|;
DECL|field|DEFAULT_MULTIPLIER
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_MULTIPLIER
init|=
literal|1000
decl_stmt|;
DECL|field|DEFAULT_NUM_SLOWEST
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_NUM_SLOWEST
init|=
literal|1
decl_stmt|;
DECL|field|DEFAULT_WARMUP
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_WARMUP
init|=
literal|true
decl_stmt|;
DECL|field|DEFAULT_SEARCH_TYPE
specifier|public
specifier|static
specifier|final
name|SearchType
name|DEFAULT_SEARCH_TYPE
init|=
name|SearchType
operator|.
name|DEFAULT
decl_stmt|;
DECL|field|concurrency
specifier|private
name|int
name|concurrency
init|=
name|DEFAULT_CONCURRENCY
decl_stmt|;
DECL|field|iterations
specifier|private
name|int
name|iterations
init|=
name|DEFAULT_ITERATIONS
decl_stmt|;
DECL|field|multiplier
specifier|private
name|int
name|multiplier
init|=
name|DEFAULT_MULTIPLIER
decl_stmt|;
DECL|field|numSlowest
specifier|private
name|int
name|numSlowest
init|=
name|DEFAULT_NUM_SLOWEST
decl_stmt|;
DECL|field|warmup
specifier|private
name|boolean
name|warmup
init|=
name|DEFAULT_WARMUP
decl_stmt|;
DECL|field|searchType
specifier|private
name|SearchType
name|searchType
init|=
name|DEFAULT_SEARCH_TYPE
decl_stmt|;
DECL|field|clearCaches
specifier|private
name|ClearIndicesCacheRequest
name|clearCaches
init|=
literal|null
decl_stmt|;
DECL|field|clearCachesSettings
specifier|private
name|ClearCachesSettings
name|clearCachesSettings
init|=
literal|null
decl_stmt|;
DECL|field|indices
specifier|private
name|String
index|[]
name|indices
init|=
name|Strings
operator|.
name|EMPTY_ARRAY
decl_stmt|;
DECL|field|types
specifier|private
name|String
index|[]
name|types
init|=
name|Strings
operator|.
name|EMPTY_ARRAY
decl_stmt|;
DECL|field|searchRequests
specifier|private
name|List
argument_list|<
name|SearchRequest
argument_list|>
name|searchRequests
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|concurrencyFinalized
specifier|private
name|boolean
name|concurrencyFinalized
init|=
literal|false
decl_stmt|;
DECL|field|iterationsFinalized
specifier|private
name|boolean
name|iterationsFinalized
init|=
literal|false
decl_stmt|;
DECL|field|multiplierFinalized
specifier|private
name|boolean
name|multiplierFinalized
init|=
literal|false
decl_stmt|;
DECL|field|numSlowestFinalized
specifier|private
name|boolean
name|numSlowestFinalized
init|=
literal|false
decl_stmt|;
DECL|field|warmupFinalized
specifier|private
name|boolean
name|warmupFinalized
init|=
literal|false
decl_stmt|;
DECL|field|searchTypeFinalized
specifier|private
name|boolean
name|searchTypeFinalized
init|=
literal|false
decl_stmt|;
DECL|field|clearCachesSettingsFinalized
specifier|private
name|boolean
name|clearCachesSettingsFinalized
init|=
literal|false
decl_stmt|;
DECL|field|allowCacheClearing
specifier|private
name|boolean
name|allowCacheClearing
init|=
literal|true
decl_stmt|;
comment|/**      * List of indices to execute on      * @return  Indices      */
DECL|method|indices
specifier|public
name|String
index|[]
name|indices
parameter_list|()
block|{
return|return
name|indices
return|;
block|}
comment|/**      * Sets the indices to execute on      * @param indices   Indices      */
DECL|method|indices
specifier|public
name|void
name|indices
parameter_list|(
name|String
index|[]
name|indices
parameter_list|)
block|{
name|this
operator|.
name|indices
operator|=
operator|(
name|indices
operator|==
literal|null
operator|)
condition|?
name|Strings
operator|.
name|EMPTY_ARRAY
else|:
name|indices
expr_stmt|;
block|}
comment|/**      * List of types to execute on      * @return  Types      */
DECL|method|types
specifier|public
name|String
index|[]
name|types
parameter_list|()
block|{
return|return
name|types
return|;
block|}
comment|/**      * Sets the types to execute on      * @param types Types      */
DECL|method|types
specifier|public
name|void
name|types
parameter_list|(
name|String
index|[]
name|types
parameter_list|)
block|{
name|this
operator|.
name|types
operator|=
operator|(
name|types
operator|==
literal|null
operator|)
condition|?
name|Strings
operator|.
name|EMPTY_ARRAY
else|:
name|types
expr_stmt|;
block|}
comment|/**      * Gets the concurrency level      * @return  Concurrency      */
DECL|method|concurrency
specifier|public
name|int
name|concurrency
parameter_list|()
block|{
return|return
name|concurrency
return|;
block|}
comment|/**      * Sets the concurrency level; determines how many threads will be executing the competition concurrently.      * @param concurrency   Concurrency      * @param finalize      If true, value cannot be overwritten by subsequent calls      */
DECL|method|concurrency
specifier|public
name|void
name|concurrency
parameter_list|(
name|int
name|concurrency
parameter_list|,
name|boolean
name|finalize
parameter_list|)
block|{
if|if
condition|(
name|concurrencyFinalized
condition|)
block|{
return|return;
block|}
name|this
operator|.
name|concurrency
operator|=
name|concurrency
expr_stmt|;
name|concurrencyFinalized
operator|=
name|finalize
expr_stmt|;
block|}
comment|/**      * How many times to the competition.      * @return  Iterations      */
DECL|method|iterations
specifier|public
name|int
name|iterations
parameter_list|()
block|{
return|return
name|iterations
return|;
block|}
comment|/**      * How many times to run the competition. Requests will be executed a total of (iterations * multiplier).      * @param iterations    Iterations      * @param finalize      If true, value cannot be overwritten by subsequent calls      */
DECL|method|iterations
specifier|public
name|void
name|iterations
parameter_list|(
name|int
name|iterations
parameter_list|,
name|boolean
name|finalize
parameter_list|)
block|{
if|if
condition|(
name|iterationsFinalized
condition|)
block|{
return|return;
block|}
name|this
operator|.
name|iterations
operator|=
name|iterations
expr_stmt|;
name|iterationsFinalized
operator|=
name|finalize
expr_stmt|;
block|}
comment|/**      * Gets the multiplier      * @return  Multiplier      */
DECL|method|multiplier
specifier|public
name|int
name|multiplier
parameter_list|()
block|{
return|return
name|multiplier
return|;
block|}
comment|/**      * Sets the multiplier. The multiplier determines how many times each iteration will be run.      * @param multiplier    Multiplier      * @param finalize      If true, value cannot be overwritten by subsequent calls      */
DECL|method|multiplier
specifier|public
name|void
name|multiplier
parameter_list|(
name|int
name|multiplier
parameter_list|,
name|boolean
name|finalize
parameter_list|)
block|{
if|if
condition|(
name|multiplierFinalized
condition|)
block|{
return|return;
block|}
name|this
operator|.
name|multiplier
operator|=
name|multiplier
expr_stmt|;
name|multiplierFinalized
operator|=
name|finalize
expr_stmt|;
block|}
comment|/**      * Gets number of slow requests to track      * @return  Number of slow requests to track      */
DECL|method|numSlowest
specifier|public
name|int
name|numSlowest
parameter_list|()
block|{
return|return
name|numSlowest
return|;
block|}
comment|/**      * How many slow requests to track      * @param numSlowest    Number of slow requests to track      * @param finalize      If true, value cannot be overwritten by subsequent calls      */
DECL|method|numSlowest
specifier|public
name|void
name|numSlowest
parameter_list|(
name|int
name|numSlowest
parameter_list|,
name|boolean
name|finalize
parameter_list|)
block|{
if|if
condition|(
name|numSlowestFinalized
condition|)
block|{
return|return;
block|}
name|this
operator|.
name|numSlowest
operator|=
name|numSlowest
expr_stmt|;
name|numSlowestFinalized
operator|=
name|finalize
expr_stmt|;
block|}
comment|/**      * Whether to run a warmup search request      * @return  True/false      */
DECL|method|warmup
specifier|public
name|boolean
name|warmup
parameter_list|()
block|{
return|return
name|warmup
return|;
block|}
comment|/**      * Whether to run a warmup search request      * @param warmup    True/false      * @param finalize  If true, value cannot be overwritten by subsequent calls      */
DECL|method|warmup
specifier|public
name|void
name|warmup
parameter_list|(
name|boolean
name|warmup
parameter_list|,
name|boolean
name|finalize
parameter_list|)
block|{
if|if
condition|(
name|warmupFinalized
condition|)
block|{
return|return;
block|}
name|this
operator|.
name|warmup
operator|=
name|warmup
expr_stmt|;
name|warmupFinalized
operator|=
name|finalize
expr_stmt|;
block|}
comment|/**      * Gets the search type      * @return  Search type      */
DECL|method|searchType
specifier|public
name|SearchType
name|searchType
parameter_list|()
block|{
return|return
name|searchType
return|;
block|}
comment|/**      * Sets the search type      * @param searchType    Search type      * @param finalize      If true, value cannot be overwritten by subsequent calls      */
DECL|method|searchType
specifier|public
name|void
name|searchType
parameter_list|(
name|SearchType
name|searchType
parameter_list|,
name|boolean
name|finalize
parameter_list|)
block|{
if|if
condition|(
name|searchTypeFinalized
condition|)
block|{
return|return;
block|}
name|this
operator|.
name|searchType
operator|=
name|searchType
expr_stmt|;
name|searchTypeFinalized
operator|=
name|finalize
expr_stmt|;
block|}
comment|/**      * Gets the list of search requests to benchmark      * @return  Search requests      */
DECL|method|searchRequests
specifier|public
name|List
argument_list|<
name|SearchRequest
argument_list|>
name|searchRequests
parameter_list|()
block|{
return|return
name|searchRequests
return|;
block|}
comment|/**      * Adds a search request to benchmark      * @param searchRequest Search request      */
DECL|method|addSearchRequest
specifier|public
name|void
name|addSearchRequest
parameter_list|(
name|SearchRequest
modifier|...
name|searchRequest
parameter_list|)
block|{
name|searchRequests
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|searchRequest
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Gets the clear caches request      * @return  The clear caches request      */
DECL|method|clearCaches
specifier|public
name|ClearIndicesCacheRequest
name|clearCaches
parameter_list|()
block|{
return|return
name|clearCaches
return|;
block|}
DECL|method|allowCacheClearing
specifier|public
name|boolean
name|allowCacheClearing
parameter_list|()
block|{
return|return
name|allowCacheClearing
return|;
block|}
DECL|method|allowCacheClearing
specifier|public
name|void
name|allowCacheClearing
parameter_list|(
name|boolean
name|allowCacheClearing
parameter_list|)
block|{
name|this
operator|.
name|allowCacheClearing
operator|=
name|allowCacheClearing
expr_stmt|;
block|}
comment|/**      * Gets the clear caches settings      * @return  Clear caches settings      */
DECL|method|clearCachesSettings
specifier|public
name|ClearCachesSettings
name|clearCachesSettings
parameter_list|()
block|{
return|return
name|clearCachesSettings
return|;
block|}
comment|/**      * Sets the clear caches settings      * @param clearCachesSettings   Clear caches settings      * @param finalize              If true, value cannot be overwritten by subsequent calls      */
DECL|method|clearCachesSettings
specifier|public
name|void
name|clearCachesSettings
parameter_list|(
name|ClearCachesSettings
name|clearCachesSettings
parameter_list|,
name|boolean
name|finalize
parameter_list|)
block|{
if|if
condition|(
name|clearCachesSettingsFinalized
condition|)
block|{
return|return;
block|}
name|this
operator|.
name|clearCachesSettings
operator|=
name|clearCachesSettings
expr_stmt|;
name|clearCachesSettingsFinalized
operator|=
name|finalize
expr_stmt|;
block|}
comment|/**      * Builds a clear cache request from the settings      */
DECL|method|buildClearCachesRequestFromSettings
specifier|public
name|void
name|buildClearCachesRequestFromSettings
parameter_list|()
block|{
name|clearCaches
operator|=
operator|new
name|ClearIndicesCacheRequest
argument_list|(
name|indices
argument_list|)
expr_stmt|;
name|clearCaches
operator|.
name|filterCache
argument_list|(
name|clearCachesSettings
operator|.
name|filterCache
argument_list|)
expr_stmt|;
name|clearCaches
operator|.
name|fieldDataCache
argument_list|(
name|clearCachesSettings
operator|.
name|fieldDataCache
argument_list|)
expr_stmt|;
name|clearCaches
operator|.
name|idCache
argument_list|(
name|clearCachesSettings
operator|.
name|idCache
argument_list|)
expr_stmt|;
name|clearCaches
operator|.
name|recycler
argument_list|(
name|clearCachesSettings
operator|.
name|recyclerCache
argument_list|)
expr_stmt|;
name|clearCaches
operator|.
name|fields
argument_list|(
name|clearCachesSettings
operator|.
name|fields
argument_list|)
expr_stmt|;
name|clearCaches
operator|.
name|filterKeys
argument_list|(
name|clearCachesSettings
operator|.
name|filterKeys
argument_list|)
expr_stmt|;
block|}
DECL|method|buildSearchRequestsFromSettings
specifier|public
name|void
name|buildSearchRequestsFromSettings
parameter_list|()
block|{
for|for
control|(
name|SearchRequest
name|searchRequest
range|:
name|searchRequests
control|)
block|{
name|searchRequest
operator|.
name|indices
argument_list|(
name|indices
argument_list|)
expr_stmt|;
name|searchRequest
operator|.
name|types
argument_list|(
name|types
argument_list|)
expr_stmt|;
name|searchRequest
operator|.
name|searchType
argument_list|(
name|searchType
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Merge another settings object with this one, ignoring fields which have been finalized.      * This is a convenience so that a global settings object can cascade it's settings      * down to specific competitors w/o inadvertently overwriting anything that has already been set.      * @param otherSettings The settings to merge into this      */
DECL|method|merge
specifier|public
name|void
name|merge
parameter_list|(
name|BenchmarkSettings
name|otherSettings
parameter_list|)
block|{
if|if
condition|(
operator|!
name|concurrencyFinalized
condition|)
block|{
name|concurrency
operator|=
name|otherSettings
operator|.
name|concurrency
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|iterationsFinalized
condition|)
block|{
name|iterations
operator|=
name|otherSettings
operator|.
name|iterations
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|multiplierFinalized
condition|)
block|{
name|multiplier
operator|=
name|otherSettings
operator|.
name|multiplier
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|numSlowestFinalized
condition|)
block|{
name|numSlowest
operator|=
name|otherSettings
operator|.
name|numSlowest
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|warmupFinalized
condition|)
block|{
name|warmup
operator|=
name|otherSettings
operator|.
name|warmup
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|searchTypeFinalized
condition|)
block|{
name|searchType
operator|=
name|otherSettings
operator|.
name|searchType
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|clearCachesSettingsFinalized
condition|)
block|{
name|clearCachesSettings
operator|=
name|otherSettings
operator|.
name|clearCachesSettings
expr_stmt|;
block|}
block|}
DECL|class|ClearCachesSettings
specifier|public
specifier|static
class|class
name|ClearCachesSettings
block|{
DECL|field|filterCache
specifier|private
name|boolean
name|filterCache
init|=
literal|false
decl_stmt|;
DECL|field|fieldDataCache
specifier|private
name|boolean
name|fieldDataCache
init|=
literal|false
decl_stmt|;
DECL|field|idCache
specifier|private
name|boolean
name|idCache
init|=
literal|false
decl_stmt|;
DECL|field|recyclerCache
specifier|private
name|boolean
name|recyclerCache
init|=
literal|false
decl_stmt|;
DECL|field|fields
specifier|private
name|String
index|[]
name|fields
init|=
literal|null
decl_stmt|;
DECL|field|filterKeys
specifier|private
name|String
index|[]
name|filterKeys
init|=
literal|null
decl_stmt|;
DECL|method|filterCache
specifier|public
name|void
name|filterCache
parameter_list|(
name|boolean
name|filterCache
parameter_list|)
block|{
name|this
operator|.
name|filterCache
operator|=
name|filterCache
expr_stmt|;
block|}
DECL|method|fieldDataCache
specifier|public
name|void
name|fieldDataCache
parameter_list|(
name|boolean
name|fieldDataCache
parameter_list|)
block|{
name|this
operator|.
name|fieldDataCache
operator|=
name|fieldDataCache
expr_stmt|;
block|}
DECL|method|idCache
specifier|public
name|void
name|idCache
parameter_list|(
name|boolean
name|idCache
parameter_list|)
block|{
name|this
operator|.
name|idCache
operator|=
name|idCache
expr_stmt|;
block|}
DECL|method|recycler
specifier|public
name|void
name|recycler
parameter_list|(
name|boolean
name|recyclerCache
parameter_list|)
block|{
name|this
operator|.
name|recyclerCache
operator|=
name|recyclerCache
expr_stmt|;
block|}
DECL|method|fields
specifier|public
name|void
name|fields
parameter_list|(
name|String
index|[]
name|fields
parameter_list|)
block|{
name|this
operator|.
name|fields
operator|=
name|fields
expr_stmt|;
block|}
DECL|method|filterKeys
specifier|public
name|void
name|filterKeys
parameter_list|(
name|String
index|[]
name|filterKeys
parameter_list|)
block|{
name|this
operator|.
name|filterKeys
operator|=
name|filterKeys
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|concurrency
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
name|iterations
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
name|multiplier
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
name|numSlowest
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
name|warmup
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
name|indices
operator|=
name|in
operator|.
name|readStringArray
argument_list|()
expr_stmt|;
name|types
operator|=
name|in
operator|.
name|readStringArray
argument_list|()
expr_stmt|;
name|searchType
operator|=
name|SearchType
operator|.
name|fromId
argument_list|(
name|in
operator|.
name|readByte
argument_list|()
argument_list|)
expr_stmt|;
name|clearCaches
operator|=
name|in
operator|.
name|readOptionalStreamable
argument_list|(
operator|new
name|ClearIndicesCacheRequest
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|int
name|size
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|SearchRequest
name|searchRequest
init|=
operator|new
name|SearchRequest
argument_list|()
decl_stmt|;
name|searchRequest
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|searchRequests
operator|.
name|add
argument_list|(
name|searchRequest
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeVInt
argument_list|(
name|concurrency
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|iterations
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|multiplier
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|numSlowest
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|warmup
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeStringArray
argument_list|(
name|indices
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeStringArray
argument_list|(
name|types
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeByte
argument_list|(
name|searchType
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalStreamable
argument_list|(
name|clearCaches
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|searchRequests
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|SearchRequest
name|searchRequest
range|:
name|searchRequests
control|)
block|{
name|searchRequest
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

