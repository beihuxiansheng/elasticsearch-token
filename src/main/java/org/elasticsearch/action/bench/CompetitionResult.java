begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.bench
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|bench
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Streamable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * The result of a benchmark competition. Maintains per-node results.  */
end_comment

begin_class
DECL|class|CompetitionResult
specifier|public
class|class
name|CompetitionResult
implements|implements
name|Streamable
implements|,
name|ToXContent
block|{
DECL|field|competitionName
specifier|private
name|String
name|competitionName
decl_stmt|;
DECL|field|concurrency
specifier|private
name|int
name|concurrency
decl_stmt|;
DECL|field|multiplier
specifier|private
name|int
name|multiplier
decl_stmt|;
DECL|field|verbose
specifier|private
name|boolean
name|verbose
decl_stmt|;
DECL|field|percentiles
specifier|private
name|double
index|[]
name|percentiles
init|=
name|DEFAULT_PERCENTILES
decl_stmt|;
DECL|field|nodeResults
specifier|private
name|List
argument_list|<
name|CompetitionNodeResult
argument_list|>
name|nodeResults
init|=
operator|new
name|ArrayList
argument_list|<
name|CompetitionNodeResult
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|competitionSummary
specifier|private
name|CompetitionSummary
name|competitionSummary
decl_stmt|;
DECL|field|competitionDetails
specifier|private
name|CompetitionDetails
name|competitionDetails
decl_stmt|;
DECL|field|DEFAULT_PERCENTILES
specifier|private
specifier|static
specifier|final
name|double
index|[]
name|DEFAULT_PERCENTILES
init|=
block|{
literal|10
block|,
literal|25
block|,
literal|50
block|,
literal|75
block|,
literal|90
block|,
literal|99
block|}
decl_stmt|;
DECL|method|CompetitionResult
specifier|public
name|CompetitionResult
parameter_list|()
block|{ }
comment|/**      * Constructs a competition result      * @param competitionName   Competition name      * @param concurrency       Concurrency      * @param multiplier        Internal multiplier; each iteration will run this many times to smooth out measurements      * @param percentiles       Which percentiles to report on      */
DECL|method|CompetitionResult
specifier|public
name|CompetitionResult
parameter_list|(
name|String
name|competitionName
parameter_list|,
name|int
name|concurrency
parameter_list|,
name|int
name|multiplier
parameter_list|,
name|double
index|[]
name|percentiles
parameter_list|)
block|{
name|this
argument_list|(
name|competitionName
argument_list|,
name|concurrency
argument_list|,
name|multiplier
argument_list|,
literal|false
argument_list|,
name|percentiles
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructs a competition result      * @param competitionName   Competition name      * @param concurrency       Concurrency      * @param multiplier        Internal multiplier; each iteration will run this many times to smooth out measurements      * @param verbose           Whether to report detailed statistics      * @param percentiles       Which percentiles to report on      */
DECL|method|CompetitionResult
specifier|public
name|CompetitionResult
parameter_list|(
name|String
name|competitionName
parameter_list|,
name|int
name|concurrency
parameter_list|,
name|int
name|multiplier
parameter_list|,
name|boolean
name|verbose
parameter_list|,
name|double
index|[]
name|percentiles
parameter_list|)
block|{
name|this
operator|.
name|competitionName
operator|=
name|competitionName
expr_stmt|;
name|this
operator|.
name|concurrency
operator|=
name|concurrency
expr_stmt|;
name|this
operator|.
name|multiplier
operator|=
name|multiplier
expr_stmt|;
name|this
operator|.
name|verbose
operator|=
name|verbose
expr_stmt|;
name|this
operator|.
name|percentiles
operator|=
operator|(
name|percentiles
operator|!=
literal|null
operator|&&
name|percentiles
operator|.
name|length
operator|>
literal|0
operator|)
condition|?
name|percentiles
else|:
name|DEFAULT_PERCENTILES
expr_stmt|;
name|this
operator|.
name|competitionDetails
operator|=
operator|new
name|CompetitionDetails
argument_list|(
name|nodeResults
argument_list|)
expr_stmt|;
name|this
operator|.
name|competitionSummary
operator|=
operator|new
name|CompetitionSummary
argument_list|(
name|nodeResults
argument_list|,
name|concurrency
argument_list|,
name|multiplier
argument_list|,
name|percentiles
argument_list|)
expr_stmt|;
block|}
comment|/**      * Adds a node-level competition result      * @param nodeResult    Node result      */
DECL|method|addCompetitionNodeResult
specifier|public
name|void
name|addCompetitionNodeResult
parameter_list|(
name|CompetitionNodeResult
name|nodeResult
parameter_list|)
block|{
name|nodeResults
operator|.
name|add
argument_list|(
name|nodeResult
argument_list|)
expr_stmt|;
block|}
comment|/**      * Gets detailed statistics for the competition      * @return  Detailed statistics      */
DECL|method|competitionDetails
specifier|public
name|CompetitionDetails
name|competitionDetails
parameter_list|()
block|{
return|return
name|competitionDetails
return|;
block|}
comment|/**      * Gets summary statistics for the competition      * @return  Summary statistics      */
DECL|method|competitionSummary
specifier|public
name|CompetitionSummary
name|competitionSummary
parameter_list|()
block|{
return|return
name|competitionSummary
return|;
block|}
comment|/**      * Gets the name of the competition      * @return  Name      */
DECL|method|competitionName
specifier|public
name|String
name|competitionName
parameter_list|()
block|{
return|return
name|competitionName
return|;
block|}
comment|/**      * Gets the concurrency level; determines how many threads will be executing the competition concurrently.      * @return  Concurrency      */
DECL|method|concurrency
specifier|public
name|int
name|concurrency
parameter_list|()
block|{
return|return
name|concurrency
return|;
block|}
comment|/**      * Gets the multiplier. The multiplier determines how many times each iteration will be run.      * @return  Multipiler      */
DECL|method|multiplier
specifier|public
name|int
name|multiplier
parameter_list|()
block|{
return|return
name|multiplier
return|;
block|}
comment|/**      * Whether to report detailed statistics      * @return  True/false      */
DECL|method|verbose
specifier|public
name|boolean
name|verbose
parameter_list|()
block|{
return|return
name|verbose
return|;
block|}
comment|/**      * Sets whether to report detailed statistics      * @param verbose   True/false      */
DECL|method|verbose
specifier|public
name|void
name|verbose
parameter_list|(
name|boolean
name|verbose
parameter_list|)
block|{
name|this
operator|.
name|verbose
operator|=
name|verbose
expr_stmt|;
block|}
comment|/**      * Gets list of percentiles to report      * @return  List of percentiles      */
DECL|method|percentiles
specifier|public
name|double
index|[]
name|percentiles
parameter_list|()
block|{
return|return
name|percentiles
return|;
block|}
comment|/**      * Sets the list of percentiles to report      * @param percentiles   Percentiles      */
DECL|method|percentiles
specifier|public
name|void
name|percentiles
parameter_list|(
name|double
index|[]
name|percentiles
parameter_list|)
block|{
name|this
operator|.
name|percentiles
operator|=
name|percentiles
expr_stmt|;
block|}
comment|/**      * Whether any failures were encountered      * @return  True/false      */
DECL|method|hasFailures
specifier|public
name|boolean
name|hasFailures
parameter_list|()
block|{
for|for
control|(
name|CompetitionNodeResult
name|nodeResult
range|:
name|nodeResults
control|)
block|{
if|if
condition|(
name|nodeResult
operator|.
name|failures
argument_list|()
operator|!=
literal|null
operator|&&
name|nodeResult
operator|.
name|failures
argument_list|()
operator|.
name|length
operator|>
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Gets failure messages from node executions      * @return  Node failure messages      */
DECL|method|nodeFailures
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|nodeFailures
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|failures
init|=
literal|null
decl_stmt|;
for|for
control|(
name|CompetitionNodeResult
name|nodeResult
range|:
name|nodeResults
control|)
block|{
if|if
condition|(
name|nodeResult
operator|.
name|failures
argument_list|()
operator|!=
literal|null
operator|&&
name|nodeResult
operator|.
name|failures
argument_list|()
operator|.
name|length
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|failures
operator|==
literal|null
condition|)
block|{
name|failures
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|failures
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|nodeResult
operator|.
name|failures
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|failures
return|;
block|}
comment|/**      * Gets the results for each cluster node that the competition executed on.      * @return  Node-level results      */
DECL|method|nodeResults
specifier|public
name|List
argument_list|<
name|CompetitionNodeResult
argument_list|>
name|nodeResults
parameter_list|()
block|{
return|return
name|nodeResults
return|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|competitionName
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|nodeFailures
init|=
name|nodeFailures
argument_list|()
decl_stmt|;
if|if
condition|(
name|nodeFailures
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|startArray
argument_list|(
literal|"failures"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|failure
range|:
name|nodeFailures
control|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|failure
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
block|}
name|competitionSummary
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
if|if
condition|(
name|verbose
condition|)
block|{
name|competitionDetails
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|competitionName
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
name|concurrency
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
name|multiplier
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
name|verbose
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
name|int
name|size
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|CompetitionNodeResult
name|result
init|=
operator|new
name|CompetitionNodeResult
argument_list|()
decl_stmt|;
name|result
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|nodeResults
operator|.
name|add
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
name|percentiles
operator|=
name|in
operator|.
name|readDoubleArray
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeString
argument_list|(
name|competitionName
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|concurrency
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|multiplier
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|verbose
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|nodeResults
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|CompetitionNodeResult
name|result
range|:
name|nodeResults
control|)
block|{
name|result
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|writeDoubleArray
argument_list|(
name|percentiles
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

