begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.bench
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|bench
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|Tuple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilderString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|CollectionUtil
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Summary statistics for a benchmark search competition.  *  * Statistics are calculated over all iteration results for all nodes  * that executed the competition.  */
end_comment

begin_class
DECL|class|CompetitionSummary
specifier|public
class|class
name|CompetitionSummary
implements|implements
name|ToXContent
block|{
DECL|field|nodeResults
specifier|private
name|List
argument_list|<
name|CompetitionNodeResult
argument_list|>
name|nodeResults
decl_stmt|;
DECL|field|min
name|long
name|min
init|=
literal|0
decl_stmt|;
DECL|field|max
name|long
name|max
init|=
literal|0
decl_stmt|;
DECL|field|totalTime
name|long
name|totalTime
init|=
literal|0
decl_stmt|;
DECL|field|sumTotalHits
name|long
name|sumTotalHits
init|=
literal|0
decl_stmt|;
DECL|field|totalIterations
name|long
name|totalIterations
init|=
literal|0
decl_stmt|;
DECL|field|completedIterations
name|long
name|completedIterations
init|=
literal|0
decl_stmt|;
DECL|field|totalQueries
name|long
name|totalQueries
init|=
literal|0
decl_stmt|;
DECL|field|avgWarmupTime
name|double
name|avgWarmupTime
init|=
literal|0
decl_stmt|;
DECL|field|concurrency
name|int
name|concurrency
init|=
literal|0
decl_stmt|;
DECL|field|multiplier
name|int
name|multiplier
init|=
literal|0
decl_stmt|;
DECL|field|mean
name|double
name|mean
init|=
literal|0
decl_stmt|;
DECL|field|millisPerHit
name|double
name|millisPerHit
init|=
literal|0.0
decl_stmt|;
DECL|field|stdDeviation
name|double
name|stdDeviation
init|=
literal|0.0
decl_stmt|;
DECL|field|queriesPerSecond
name|double
name|queriesPerSecond
init|=
literal|0.0
decl_stmt|;
DECL|field|percentiles
name|double
index|[]
name|percentiles
decl_stmt|;
DECL|field|percentileValues
name|Map
argument_list|<
name|Double
argument_list|,
name|Double
argument_list|>
name|percentileValues
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|slowest
name|List
argument_list|<
name|Tuple
argument_list|<
name|String
argument_list|,
name|CompetitionIteration
operator|.
name|SlowRequest
argument_list|>
argument_list|>
name|slowest
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|CompetitionSummary
specifier|public
name|CompetitionSummary
parameter_list|()
block|{ }
DECL|method|CompetitionSummary
specifier|public
name|CompetitionSummary
parameter_list|(
name|List
argument_list|<
name|CompetitionNodeResult
argument_list|>
name|nodeResults
parameter_list|,
name|int
name|concurrency
parameter_list|,
name|int
name|multiplier
parameter_list|,
name|double
index|[]
name|percentiles
parameter_list|)
block|{
name|this
operator|.
name|nodeResults
operator|=
name|nodeResults
expr_stmt|;
name|this
operator|.
name|concurrency
operator|=
name|concurrency
expr_stmt|;
name|this
operator|.
name|multiplier
operator|=
name|multiplier
expr_stmt|;
name|this
operator|.
name|percentiles
operator|=
name|percentiles
expr_stmt|;
block|}
DECL|method|nodeResults
specifier|public
name|List
argument_list|<
name|CompetitionNodeResult
argument_list|>
name|nodeResults
parameter_list|()
block|{
return|return
name|nodeResults
return|;
block|}
DECL|method|computeSummaryStatistics
specifier|public
name|void
name|computeSummaryStatistics
parameter_list|()
block|{
name|long
name|totalWarmupTime
init|=
literal|0
decl_stmt|;
name|SinglePassStatistics
name|single
init|=
operator|new
name|SinglePassStatistics
argument_list|()
decl_stmt|;
for|for
control|(
name|CompetitionNodeResult
name|nodeResult
range|:
name|nodeResults
control|)
block|{
name|totalWarmupTime
operator|+=
name|nodeResult
operator|.
name|warmUpTime
argument_list|()
expr_stmt|;
name|totalIterations
operator|+=
name|nodeResult
operator|.
name|totalIterations
argument_list|()
expr_stmt|;
name|completedIterations
operator|+=
name|nodeResult
operator|.
name|completedIterations
argument_list|()
expr_stmt|;
comment|// only calculate statistics for iterations completed thus far
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodeResult
operator|.
name|completedIterations
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|CompetitionIteration
name|competitionIteration
init|=
name|nodeResult
operator|.
name|iterations
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|CompetitionIterationData
name|iterationData
init|=
name|competitionIteration
operator|.
name|competitionIterationData
argument_list|()
decl_stmt|;
name|long
index|[]
name|data
init|=
name|iterationData
operator|.
name|data
argument_list|()
decl_stmt|;
for|for
control|(
name|long
name|datum
range|:
name|data
control|)
block|{
if|if
condition|(
name|datum
operator|>
operator|-
literal|1
condition|)
block|{
comment|// ignore unset values in the underlying array
name|single
operator|.
name|push
argument_list|(
name|datum
argument_list|)
expr_stmt|;
block|}
block|}
name|totalQueries
operator|+=
name|competitionIteration
operator|.
name|numQueries
argument_list|()
expr_stmt|;
name|totalTime
operator|+=
name|competitionIteration
operator|.
name|totalTime
argument_list|()
expr_stmt|;
name|sumTotalHits
operator|+=
name|competitionIteration
operator|.
name|sumTotalHits
argument_list|()
expr_stmt|;
comment|// keep track of slowest requests
if|if
condition|(
name|competitionIteration
operator|.
name|slowRequests
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|CompetitionIteration
operator|.
name|SlowRequest
name|slow
range|:
name|competitionIteration
operator|.
name|slowRequests
argument_list|()
control|)
block|{
name|slowest
operator|.
name|add
argument_list|(
operator|new
name|Tuple
argument_list|<>
argument_list|(
name|nodeResult
operator|.
name|nodeName
argument_list|()
argument_list|,
name|slow
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|min
operator|=
name|single
operator|.
name|min
argument_list|()
expr_stmt|;
name|max
operator|=
name|single
operator|.
name|max
argument_list|()
expr_stmt|;
name|mean
operator|=
name|single
operator|.
name|mean
argument_list|()
expr_stmt|;
name|stdDeviation
operator|=
name|single
operator|.
name|stddev
argument_list|()
expr_stmt|;
name|avgWarmupTime
operator|=
operator|(
name|nodeResults
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|)
condition|?
name|totalWarmupTime
operator|/
name|nodeResults
operator|.
name|size
argument_list|()
else|:
literal|0.0
expr_stmt|;
name|queriesPerSecond
operator|=
operator|(
name|single
operator|.
name|sum
argument_list|()
operator|>
literal|0
operator|)
condition|?
operator|(
name|totalQueries
operator|*
operator|(
literal|1000.0
operator|/
operator|(
name|double
operator|)
name|single
operator|.
name|sum
argument_list|()
operator|)
operator|)
else|:
literal|0.0
expr_stmt|;
name|millisPerHit
operator|=
operator|(
name|sumTotalHits
operator|>
literal|0
operator|)
condition|?
operator|(
name|totalTime
operator|/
operator|(
name|double
operator|)
name|sumTotalHits
operator|)
else|:
literal|0.0
expr_stmt|;
for|for
control|(
name|double
name|percentile
range|:
name|percentiles
control|)
block|{
name|percentileValues
operator|.
name|put
argument_list|(
name|percentile
argument_list|,
name|single
operator|.
name|percentile
argument_list|(
name|percentile
operator|/
literal|100.0d
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|CollectionUtil
operator|.
name|timSort
argument_list|(
name|slowest
argument_list|,
operator|new
name|Comparator
argument_list|<
name|Tuple
argument_list|<
name|String
argument_list|,
name|CompetitionIteration
operator|.
name|SlowRequest
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|Tuple
argument_list|<
name|String
argument_list|,
name|CompetitionIteration
operator|.
name|SlowRequest
argument_list|>
name|o1
parameter_list|,
name|Tuple
argument_list|<
name|String
argument_list|,
name|CompetitionIteration
operator|.
name|SlowRequest
argument_list|>
name|o2
parameter_list|)
block|{
return|return
name|Long
operator|.
name|compare
argument_list|(
name|o2
operator|.
name|v2
argument_list|()
operator|.
name|maxTimeTaken
argument_list|()
argument_list|,
name|o1
operator|.
name|v2
argument_list|()
operator|.
name|maxTimeTaken
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|computeSummaryStatistics
argument_list|()
expr_stmt|;
name|builder
operator|.
name|startObject
argument_list|(
name|Fields
operator|.
name|SUMMARY
argument_list|)
expr_stmt|;
name|builder
operator|.
name|startArray
argument_list|(
name|Fields
operator|.
name|NODES
argument_list|)
expr_stmt|;
for|for
control|(
name|CompetitionNodeResult
name|nodeResult
range|:
name|nodeResults
control|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|nodeResult
operator|.
name|nodeName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|TOTAL_ITERATIONS
argument_list|,
name|totalIterations
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|COMPLETED_ITERATIONS
argument_list|,
name|completedIterations
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|TOTAL_QUERIES
argument_list|,
name|totalQueries
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|CONCURRENCY
argument_list|,
name|concurrency
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|MULTIPLIER
argument_list|,
name|multiplier
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|AVG_WARMUP_TIME
argument_list|,
name|avgWarmupTime
argument_list|)
expr_stmt|;
name|builder
operator|.
name|startObject
argument_list|(
name|Fields
operator|.
name|STATISTICS
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|MIN
argument_list|,
name|min
operator|==
name|Long
operator|.
name|MAX_VALUE
condition|?
literal|0
else|:
name|min
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|MAX
argument_list|,
name|max
operator|==
name|Long
operator|.
name|MIN_VALUE
condition|?
literal|0
else|:
name|max
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|MEAN
argument_list|,
name|mean
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|QPS
argument_list|,
name|queriesPerSecond
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|STD_DEV
argument_list|,
name|stdDeviation
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|MILLIS_PER_HIT
argument_list|,
name|millisPerHit
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Double
argument_list|,
name|Double
argument_list|>
name|entry
range|:
name|percentileValues
operator|.
name|entrySet
argument_list|()
control|)
block|{
comment|// Change back to integral value for display purposes
name|builder
operator|.
name|field
argument_list|(
operator|new
name|XContentBuilderString
argument_list|(
literal|"percentile_"
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
argument_list|,
operator|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|isNaN
argument_list|()
operator|)
condition|?
literal|0.0
else|:
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
if|if
condition|(
name|totalIterations
operator|>
literal|0
operator|&&
name|slowest
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|builder
operator|.
name|startArray
argument_list|(
name|Fields
operator|.
name|SLOWEST
argument_list|)
expr_stmt|;
name|int
name|n
init|=
call|(
name|int
call|)
argument_list|(
name|slowest
operator|.
name|size
argument_list|()
operator|/
name|totalIterations
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|NODE
argument_list|,
name|slowest
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|v1
argument_list|()
argument_list|)
expr_stmt|;
name|slowest
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|v2
argument_list|()
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
DECL|class|Fields
specifier|static
specifier|final
class|class
name|Fields
block|{
DECL|field|SUMMARY
specifier|static
specifier|final
name|XContentBuilderString
name|SUMMARY
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"summary"
argument_list|)
decl_stmt|;
DECL|field|NODES
specifier|static
specifier|final
name|XContentBuilderString
name|NODES
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"nodes"
argument_list|)
decl_stmt|;
DECL|field|TOTAL_ITERATIONS
specifier|static
specifier|final
name|XContentBuilderString
name|TOTAL_ITERATIONS
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"total_iterations"
argument_list|)
decl_stmt|;
DECL|field|COMPLETED_ITERATIONS
specifier|static
specifier|final
name|XContentBuilderString
name|COMPLETED_ITERATIONS
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"completed_iterations"
argument_list|)
decl_stmt|;
DECL|field|TOTAL_QUERIES
specifier|static
specifier|final
name|XContentBuilderString
name|TOTAL_QUERIES
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"total_queries"
argument_list|)
decl_stmt|;
DECL|field|CONCURRENCY
specifier|static
specifier|final
name|XContentBuilderString
name|CONCURRENCY
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"concurrency"
argument_list|)
decl_stmt|;
DECL|field|MULTIPLIER
specifier|static
specifier|final
name|XContentBuilderString
name|MULTIPLIER
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"multiplier"
argument_list|)
decl_stmt|;
DECL|field|AVG_WARMUP_TIME
specifier|static
specifier|final
name|XContentBuilderString
name|AVG_WARMUP_TIME
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"avg_warmup_time"
argument_list|)
decl_stmt|;
DECL|field|STATISTICS
specifier|static
specifier|final
name|XContentBuilderString
name|STATISTICS
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"statistics"
argument_list|)
decl_stmt|;
DECL|field|MIN
specifier|static
specifier|final
name|XContentBuilderString
name|MIN
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"min"
argument_list|)
decl_stmt|;
DECL|field|MAX
specifier|static
specifier|final
name|XContentBuilderString
name|MAX
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"max"
argument_list|)
decl_stmt|;
DECL|field|MEAN
specifier|static
specifier|final
name|XContentBuilderString
name|MEAN
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"mean"
argument_list|)
decl_stmt|;
DECL|field|QPS
specifier|static
specifier|final
name|XContentBuilderString
name|QPS
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"qps"
argument_list|)
decl_stmt|;
DECL|field|STD_DEV
specifier|static
specifier|final
name|XContentBuilderString
name|STD_DEV
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"std_dev"
argument_list|)
decl_stmt|;
DECL|field|MILLIS_PER_HIT
specifier|static
specifier|final
name|XContentBuilderString
name|MILLIS_PER_HIT
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"millis_per_hit"
argument_list|)
decl_stmt|;
DECL|field|SLOWEST
specifier|static
specifier|final
name|XContentBuilderString
name|SLOWEST
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"slowest"
argument_list|)
decl_stmt|;
DECL|field|NODE
specifier|static
specifier|final
name|XContentBuilderString
name|NODE
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"node"
argument_list|)
decl_stmt|;
block|}
block|}
end_class

end_unit

