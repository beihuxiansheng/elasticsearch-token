begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.bench
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|bench
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Streamable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilderString
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_comment
comment|/**  * Response for a benchmark abort request  */
end_comment

begin_class
DECL|class|AbortBenchmarkResponse
specifier|public
class|class
name|AbortBenchmarkResponse
extends|extends
name|ActionResponse
implements|implements
name|Streamable
implements|,
name|ToXContent
block|{
DECL|field|benchmarkName
specifier|private
name|String
name|benchmarkName
decl_stmt|;
DECL|field|errorMessage
specifier|private
name|String
name|errorMessage
decl_stmt|;
DECL|field|nodeResponses
specifier|private
name|List
argument_list|<
name|AbortBenchmarkNodeResponse
argument_list|>
name|nodeResponses
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|AbortBenchmarkResponse
name|AbortBenchmarkResponse
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
DECL|method|AbortBenchmarkResponse
name|AbortBenchmarkResponse
parameter_list|(
name|String
name|benchmarkName
parameter_list|)
block|{
name|this
operator|.
name|benchmarkName
operator|=
name|benchmarkName
expr_stmt|;
block|}
DECL|method|AbortBenchmarkResponse
name|AbortBenchmarkResponse
parameter_list|(
name|String
name|benchmarkName
parameter_list|,
name|String
name|errorMessage
parameter_list|)
block|{
name|this
operator|.
name|benchmarkName
operator|=
name|benchmarkName
expr_stmt|;
name|this
operator|.
name|errorMessage
operator|=
name|errorMessage
expr_stmt|;
block|}
DECL|method|addNodeResponse
specifier|public
name|void
name|addNodeResponse
parameter_list|(
name|AbortBenchmarkNodeResponse
name|nodeResponse
parameter_list|)
block|{
name|nodeResponses
operator|.
name|add
argument_list|(
name|nodeResponse
argument_list|)
expr_stmt|;
block|}
DECL|method|getNodeResponses
specifier|public
name|List
argument_list|<
name|AbortBenchmarkNodeResponse
argument_list|>
name|getNodeResponses
parameter_list|()
block|{
return|return
name|nodeResponses
return|;
block|}
DECL|method|getBenchmarkName
specifier|public
name|String
name|getBenchmarkName
parameter_list|()
block|{
return|return
name|benchmarkName
return|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|benchmarkName
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
name|errorMessage
operator|=
name|in
operator|.
name|readOptionalString
argument_list|()
expr_stmt|;
name|int
name|size
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|AbortBenchmarkNodeResponse
name|nodeResponse
init|=
operator|new
name|AbortBenchmarkNodeResponse
argument_list|()
decl_stmt|;
name|nodeResponse
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|nodeResponses
operator|.
name|add
argument_list|(
name|nodeResponse
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeString
argument_list|(
name|benchmarkName
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalString
argument_list|(
name|errorMessage
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|nodeResponses
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|AbortBenchmarkNodeResponse
name|nodeResponse
range|:
name|nodeResponses
control|)
block|{
name|nodeResponse
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|errorMessage
operator|!=
literal|null
operator|&&
operator|!
name|errorMessage
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|ERROR
argument_list|,
name|errorMessage
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|nodeResponses
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|builder
operator|.
name|startArray
argument_list|(
name|Fields
operator|.
name|ABORTED
argument_list|)
expr_stmt|;
for|for
control|(
name|AbortBenchmarkNodeResponse
name|nodeResponse
range|:
name|nodeResponses
control|)
block|{
name|nodeResponse
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
block|}
return|return
name|builder
return|;
block|}
DECL|class|Fields
specifier|static
specifier|final
class|class
name|Fields
block|{
DECL|field|ERROR
specifier|static
specifier|final
name|XContentBuilderString
name|ERROR
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"error"
argument_list|)
decl_stmt|;
DECL|field|ABORTED
specifier|static
specifier|final
name|XContentBuilderString
name|ABORTED
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"aborted_benchmarks"
argument_list|)
decl_stmt|;
block|}
block|}
end_class

end_unit

