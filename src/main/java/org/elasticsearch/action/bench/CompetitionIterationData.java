begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.bench
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|bench
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Streamable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * Holds data points for a single benchmark iteration  *  * Note that the underlying data array may be actively populated, so we take care not  * to compute statistics on uninitialized elements (which are indicated by a value of -1).  * Initialized elements (those with values> -1) will not be changed once set.  */
end_comment

begin_class
DECL|class|CompetitionIterationData
specifier|public
class|class
name|CompetitionIterationData
implements|implements
name|Streamable
block|{
DECL|field|data
specifier|private
name|long
index|[]
name|data
decl_stmt|;
DECL|method|CompetitionIterationData
specifier|public
name|CompetitionIterationData
parameter_list|()
block|{ }
DECL|method|CompetitionIterationData
specifier|public
name|CompetitionIterationData
parameter_list|(
name|long
index|[]
name|data
parameter_list|)
block|{
name|this
operator|.
name|data
operator|=
name|data
expr_stmt|;
block|}
DECL|method|data
specifier|public
name|long
index|[]
name|data
parameter_list|()
block|{
return|return
name|data
return|;
block|}
comment|/**      * The number of data values currently holding valid values      *      * @return      Number of data values currently holding valid values      */
DECL|method|length
specifier|public
name|long
name|length
parameter_list|()
block|{
name|long
name|length
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|data
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|data
index|[
name|i
index|]
operator|<
literal|0
condition|)
block|{
comment|// Data values can be invalid when computing statistics on actively running benchmarks
continue|continue;
block|}
name|length
operator|++
expr_stmt|;
block|}
return|return
name|length
return|;
block|}
comment|/**      * The sum of all currently set values      *      * @return      The sum of all currently set values      */
DECL|method|sum
specifier|public
name|long
name|sum
parameter_list|()
block|{
name|long
name|sum
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|data
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|sum
operator|+=
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|data
index|[
name|i
index|]
argument_list|)
expr_stmt|;
comment|// Data values can be invalid when computing statistics on actively running benchmarks
block|}
return|return
name|sum
return|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|data
operator|=
name|in
operator|.
name|readLongArray
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeLongArray
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

