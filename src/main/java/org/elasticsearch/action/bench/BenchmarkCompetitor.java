begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.bench
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|bench
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionRequestValidationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ValidateActions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Streamable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * A benchmark competitor describes how to run a search benchmark. Multiple competitors may be  * submitted in a single benchmark request, with their results compared.  *  * Competitors are executed in two loops. The outer loop is the iteration loop. The number of times  * this runs is controlled by the 'iterations' variable.  *  * The inner loop is the multiplier loop. This is controlled by the 'multiplier' variable.  *  * The level of concurrency pertains to the number of simultaneous searches that may be executed within  * the inner multiplier loop. Iterations are never run concurrently; they run serially.  */
end_comment

begin_class
DECL|class|BenchmarkCompetitor
specifier|public
class|class
name|BenchmarkCompetitor
implements|implements
name|Streamable
block|{
DECL|field|name
specifier|private
name|String
name|name
decl_stmt|;
DECL|field|settings
specifier|private
name|BenchmarkSettings
name|settings
init|=
operator|new
name|BenchmarkSettings
argument_list|()
decl_stmt|;
comment|/**      * Constructs a competition across the given indices      * @param indices   Indices      */
DECL|method|BenchmarkCompetitor
name|BenchmarkCompetitor
parameter_list|(
name|String
modifier|...
name|indices
parameter_list|)
block|{
name|settings
operator|.
name|indices
argument_list|(
name|indices
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructs a competition      */
DECL|method|BenchmarkCompetitor
name|BenchmarkCompetitor
parameter_list|()
block|{ }
DECL|method|validate
name|ActionRequestValidationException
name|validate
parameter_list|(
name|ActionRequestValidationException
name|validationException
parameter_list|)
block|{
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
name|validationException
operator|=
name|ValidateActions
operator|.
name|addValidationError
argument_list|(
literal|"name must not be null"
argument_list|,
name|validationException
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|settings
operator|.
name|concurrency
argument_list|()
operator|<
literal|1
condition|)
block|{
name|validationException
operator|=
name|ValidateActions
operator|.
name|addValidationError
argument_list|(
literal|"concurrent requests must be>= 1 but was ["
operator|+
name|settings
operator|.
name|concurrency
argument_list|()
operator|+
literal|"]"
argument_list|,
name|validationException
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|settings
operator|.
name|iterations
argument_list|()
operator|<
literal|1
condition|)
block|{
name|validationException
operator|=
name|ValidateActions
operator|.
name|addValidationError
argument_list|(
literal|"iterations must be>= 1 but was ["
operator|+
name|settings
operator|.
name|iterations
argument_list|()
operator|+
literal|"]"
argument_list|,
name|validationException
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|settings
operator|.
name|multiplier
argument_list|()
operator|<
literal|1
condition|)
block|{
name|validationException
operator|=
name|ValidateActions
operator|.
name|addValidationError
argument_list|(
literal|"multiplier must be>= 1 but was ["
operator|+
name|settings
operator|.
name|multiplier
argument_list|()
operator|+
literal|"]"
argument_list|,
name|validationException
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|settings
operator|.
name|numSlowest
argument_list|()
operator|<
literal|0
condition|)
block|{
name|validationException
operator|=
name|ValidateActions
operator|.
name|addValidationError
argument_list|(
literal|"numSlowest must be>= 0 but was ["
operator|+
name|settings
operator|.
name|numSlowest
argument_list|()
operator|+
literal|"]"
argument_list|,
name|validationException
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|settings
operator|.
name|searchType
argument_list|()
operator|==
literal|null
condition|)
block|{
name|validationException
operator|=
name|ValidateActions
operator|.
name|addValidationError
argument_list|(
literal|"searchType must not be null"
argument_list|,
name|validationException
argument_list|)
expr_stmt|;
block|}
return|return
name|validationException
return|;
block|}
comment|/**      * Gets the user-supplied name      * @return  Name      */
DECL|method|name
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
name|name
return|;
block|}
comment|/**      * Sets the user-supplied name      * @param name  Name      */
DECL|method|name
specifier|public
name|void
name|name
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
comment|/**      * Gets the benchmark settings      * @return  Settings      */
DECL|method|settings
specifier|public
name|BenchmarkSettings
name|settings
parameter_list|()
block|{
return|return
name|settings
return|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|name
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
name|settings
operator|=
name|in
operator|.
name|readOptionalStreamable
argument_list|(
operator|new
name|BenchmarkSettings
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeString
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalStreamable
argument_list|(
name|settings
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

