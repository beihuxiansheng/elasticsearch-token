begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.bench
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|bench
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchIllegalStateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|master
operator|.
name|MasterNodeOperationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ProcessedClusterStateUpdateTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|TimeoutClusterStateUpdateTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|BenchmarkMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|MetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableOpenMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|AbstractLifecycleComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDown
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Service component for running benchmarks  */
end_comment

begin_class
DECL|class|BenchmarkService
specifier|public
class|class
name|BenchmarkService
extends|extends
name|AbstractLifecycleComponent
argument_list|<
name|BenchmarkService
argument_list|>
block|{
DECL|field|threadPool
specifier|private
specifier|final
name|ThreadPool
name|threadPool
decl_stmt|;
DECL|field|clusterService
specifier|private
specifier|final
name|ClusterService
name|clusterService
decl_stmt|;
DECL|field|transportService
specifier|private
specifier|final
name|TransportService
name|transportService
decl_stmt|;
DECL|field|executor
specifier|private
specifier|final
name|BenchmarkExecutor
name|executor
decl_stmt|;
comment|/**      * Constructs a service component for running benchmarks      *      * @param settings          Settings      * @param clusterService    Cluster service      * @param threadPool        Thread pool      * @param client            Client      * @param transportService  Transport service      */
annotation|@
name|Inject
DECL|method|BenchmarkService
specifier|public
name|BenchmarkService
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|ClusterService
name|clusterService
parameter_list|,
name|ThreadPool
name|threadPool
parameter_list|,
name|Client
name|client
parameter_list|,
name|TransportService
name|transportService
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|threadPool
operator|=
name|threadPool
expr_stmt|;
name|this
operator|.
name|executor
operator|=
operator|new
name|BenchmarkExecutor
argument_list|(
name|client
argument_list|,
name|clusterService
argument_list|)
expr_stmt|;
name|this
operator|.
name|clusterService
operator|=
name|clusterService
expr_stmt|;
name|this
operator|.
name|transportService
operator|=
name|transportService
expr_stmt|;
name|transportService
operator|.
name|registerHandler
argument_list|(
name|BenchExecutionHandler
operator|.
name|ACTION
argument_list|,
operator|new
name|BenchExecutionHandler
argument_list|()
argument_list|)
expr_stmt|;
name|transportService
operator|.
name|registerHandler
argument_list|(
name|AbortExecutionHandler
operator|.
name|ACTION
argument_list|,
operator|new
name|AbortExecutionHandler
argument_list|()
argument_list|)
expr_stmt|;
name|transportService
operator|.
name|registerHandler
argument_list|(
name|StatusExecutionHandler
operator|.
name|ACTION
argument_list|,
operator|new
name|StatusExecutionHandler
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStart
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|ElasticsearchException
block|{ }
annotation|@
name|Override
DECL|method|doStop
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|ElasticsearchException
block|{ }
annotation|@
name|Override
DECL|method|doClose
specifier|protected
name|void
name|doClose
parameter_list|()
throws|throws
name|ElasticsearchException
block|{ }
comment|/**      * Lists actively running benchmarks on the cluster      *      * @param request   Status request      * @param listener  Response listener      */
DECL|method|listBenchmarks
specifier|public
name|void
name|listBenchmarks
parameter_list|(
specifier|final
name|BenchmarkStatusRequest
name|request
parameter_list|,
specifier|final
name|ActionListener
argument_list|<
name|BenchmarkStatusResponse
argument_list|>
name|listener
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|DiscoveryNode
argument_list|>
name|nodes
init|=
name|availableBenchmarkNodes
argument_list|()
decl_stmt|;
if|if
condition|(
name|nodes
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|listener
operator|.
name|onFailure
argument_list|(
operator|new
name|BenchmarkNodeMissingException
argument_list|(
literal|"No available nodes for executing benchmarks"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|BenchmarkStatusAsyncHandler
name|async
init|=
operator|new
name|BenchmarkStatusAsyncHandler
argument_list|(
name|nodes
operator|.
name|size
argument_list|()
argument_list|,
name|request
argument_list|,
name|listener
argument_list|)
decl_stmt|;
for|for
control|(
name|DiscoveryNode
name|node
range|:
name|nodes
control|)
block|{
if|if
condition|(
name|isBenchmarkNode
argument_list|(
name|node
argument_list|)
condition|)
block|{
name|transportService
operator|.
name|sendRequest
argument_list|(
name|node
argument_list|,
name|StatusExecutionHandler
operator|.
name|ACTION
argument_list|,
operator|new
name|NodeStatusRequest
argument_list|(
name|request
argument_list|)
argument_list|,
name|async
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * Aborts actively running benchmarks on the cluster      *      * @param benchmarkName Benchmark name to abort      * @param listener      Response listener      */
DECL|method|abortBenchmark
specifier|public
name|void
name|abortBenchmark
parameter_list|(
specifier|final
name|String
name|benchmarkName
parameter_list|,
specifier|final
name|ActionListener
argument_list|<
name|AbortBenchmarkResponse
argument_list|>
name|listener
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|DiscoveryNode
argument_list|>
name|nodes
init|=
name|availableBenchmarkNodes
argument_list|()
decl_stmt|;
if|if
condition|(
name|nodes
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|listener
operator|.
name|onFailure
argument_list|(
operator|new
name|BenchmarkNodeMissingException
argument_list|(
literal|"No available nodes for executing benchmarks"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|BenchmarkStateListener
name|benchmarkStateListener
init|=
operator|new
name|BenchmarkStateListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
specifier|final
name|ClusterState
name|newState
parameter_list|,
specifier|final
name|BenchmarkMetaData
operator|.
name|Entry
name|entry
parameter_list|)
block|{
if|if
condition|(
name|entry
operator|!=
literal|null
condition|)
block|{
name|threadPool
operator|.
name|executor
argument_list|(
name|ThreadPool
operator|.
name|Names
operator|.
name|GENERIC
argument_list|)
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
specifier|final
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|DiscoveryNode
argument_list|>
name|nodes
init|=
name|newState
operator|.
name|nodes
argument_list|()
operator|.
name|nodes
argument_list|()
decl_stmt|;
name|BenchmarkAbortAsyncHandler
name|async
init|=
operator|new
name|BenchmarkAbortAsyncHandler
argument_list|(
name|entry
operator|.
name|nodes
argument_list|()
operator|.
name|length
argument_list|,
name|benchmarkName
argument_list|,
name|listener
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|nodeId
range|:
name|entry
operator|.
name|nodes
argument_list|()
control|)
block|{
specifier|final
name|DiscoveryNode
name|node
init|=
name|nodes
operator|.
name|get
argument_list|(
name|nodeId
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|!=
literal|null
condition|)
block|{
name|transportService
operator|.
name|sendRequest
argument_list|(
name|node
argument_list|,
name|AbortExecutionHandler
operator|.
name|ACTION
argument_list|,
operator|new
name|NodeAbortRequest
argument_list|(
name|benchmarkName
argument_list|)
argument_list|,
name|async
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"Node for ID ["
operator|+
name|nodeId
operator|+
literal|"] not found in cluster state - skipping"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|listener
operator|.
name|onFailure
argument_list|(
operator|new
name|BenchmarkMissingException
argument_list|(
literal|"Benchmark with name ["
operator|+
name|benchmarkName
operator|+
literal|"] not found"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|listener
operator|.
name|onFailure
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|clusterService
operator|.
name|submitStateUpdateTask
argument_list|(
literal|"abort_benchmark"
argument_list|,
operator|new
name|AbortBenchmarkTask
argument_list|(
name|benchmarkName
argument_list|,
name|benchmarkStateListener
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Executes benchmarks on the cluster      *      * @param request   Benchmark request      * @param listener  Response listener      */
DECL|method|startBenchmark
specifier|public
name|void
name|startBenchmark
parameter_list|(
specifier|final
name|BenchmarkRequest
name|request
parameter_list|,
specifier|final
name|ActionListener
argument_list|<
name|BenchmarkResponse
argument_list|>
name|listener
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|DiscoveryNode
argument_list|>
name|nodes
init|=
name|availableBenchmarkNodes
argument_list|()
decl_stmt|;
if|if
condition|(
name|nodes
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|listener
operator|.
name|onFailure
argument_list|(
operator|new
name|BenchmarkNodeMissingException
argument_list|(
literal|"No available nodes for executing benchmark ["
operator|+
name|request
operator|.
name|benchmarkName
argument_list|()
operator|+
literal|"]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|BenchmarkStateListener
name|benchListener
init|=
operator|new
name|BenchmarkStateListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
specifier|final
name|ClusterState
name|newState
parameter_list|,
specifier|final
name|BenchmarkMetaData
operator|.
name|Entry
name|entry
parameter_list|)
block|{
name|threadPool
operator|.
name|executor
argument_list|(
name|ThreadPool
operator|.
name|Names
operator|.
name|GENERIC
argument_list|)
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
specifier|final
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|DiscoveryNode
argument_list|>
name|nodes
init|=
name|newState
operator|.
name|nodes
argument_list|()
operator|.
name|nodes
argument_list|()
decl_stmt|;
specifier|final
name|BenchmarkSearchAsyncHandler
name|async
init|=
operator|new
name|BenchmarkSearchAsyncHandler
argument_list|(
name|entry
operator|.
name|nodes
argument_list|()
operator|.
name|length
argument_list|,
name|request
argument_list|,
name|listener
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|nodeId
range|:
name|entry
operator|.
name|nodes
argument_list|()
control|)
block|{
specifier|final
name|DiscoveryNode
name|node
init|=
name|nodes
operator|.
name|get
argument_list|(
name|nodeId
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
name|async
operator|.
name|handleExceptionInternal
argument_list|(
operator|new
name|ElasticsearchIllegalStateException
argument_list|(
literal|"Node for ID ["
operator|+
name|nodeId
operator|+
literal|"] not found in cluster state - skipping"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"Starting benchmark [{}] node [{}]"
argument_list|,
name|request
operator|.
name|benchmarkName
argument_list|()
argument_list|,
name|node
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|transportService
operator|.
name|sendRequest
argument_list|(
name|node
argument_list|,
name|BenchExecutionHandler
operator|.
name|ACTION
argument_list|,
operator|new
name|NodeBenchRequest
argument_list|(
name|request
argument_list|)
argument_list|,
name|async
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|listener
operator|.
name|onFailure
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|clusterService
operator|.
name|submitStateUpdateTask
argument_list|(
literal|"start_benchmark"
argument_list|,
operator|new
name|StartBenchmarkTask
argument_list|(
name|request
argument_list|,
name|benchListener
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|finishBenchmark
specifier|private
name|void
name|finishBenchmark
parameter_list|(
specifier|final
name|BenchmarkResponse
name|benchmarkResponse
parameter_list|,
specifier|final
name|String
name|benchmarkId
parameter_list|,
specifier|final
name|ActionListener
argument_list|<
name|BenchmarkResponse
argument_list|>
name|listener
parameter_list|)
block|{
name|clusterService
operator|.
name|submitStateUpdateTask
argument_list|(
literal|"finish_benchmark"
argument_list|,
operator|new
name|FinishBenchmarkTask
argument_list|(
literal|"finish_benchmark"
argument_list|,
name|benchmarkId
argument_list|,
operator|new
name|BenchmarkStateListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|ClusterState
name|newClusterState
parameter_list|,
name|BenchmarkMetaData
operator|.
name|Entry
name|changed
parameter_list|)
block|{
name|listener
operator|.
name|onResponse
argument_list|(
name|benchmarkResponse
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|listener
operator|.
name|onFailure
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|,
operator|(
name|benchmarkResponse
operator|.
name|state
argument_list|()
operator|!=
name|BenchmarkResponse
operator|.
name|State
operator|.
name|ABORTED
operator|)
operator|&&
operator|(
name|benchmarkResponse
operator|.
name|state
argument_list|()
operator|!=
name|BenchmarkResponse
operator|.
name|State
operator|.
name|FAILED
operator|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|isBenchmarkNode
specifier|private
specifier|final
name|boolean
name|isBenchmarkNode
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|)
block|{
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|attributes
init|=
name|node
operator|.
name|getAttributes
argument_list|()
decl_stmt|;
if|if
condition|(
name|attributes
operator|.
name|containsKey
argument_list|(
literal|"bench"
argument_list|)
condition|)
block|{
name|String
name|bench
init|=
name|attributes
operator|.
name|get
argument_list|(
literal|"bench"
argument_list|)
decl_stmt|;
return|return
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|bench
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|findNodes
specifier|private
name|List
argument_list|<
name|DiscoveryNode
argument_list|>
name|findNodes
parameter_list|(
name|BenchmarkRequest
name|request
parameter_list|)
block|{
specifier|final
name|int
name|numNodes
init|=
name|request
operator|.
name|numExecutorNodes
argument_list|()
decl_stmt|;
specifier|final
name|DiscoveryNodes
name|nodes
init|=
name|clusterService
operator|.
name|state
argument_list|()
operator|.
name|nodes
argument_list|()
decl_stmt|;
name|DiscoveryNode
name|localNode
init|=
name|nodes
operator|.
name|localNode
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|DiscoveryNode
argument_list|>
name|benchmarkNodes
init|=
operator|new
name|ArrayList
argument_list|<
name|DiscoveryNode
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|isBenchmarkNode
argument_list|(
name|localNode
argument_list|)
condition|)
block|{
name|benchmarkNodes
operator|.
name|add
argument_list|(
name|localNode
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|DiscoveryNode
name|node
range|:
name|nodes
control|)
block|{
if|if
condition|(
name|benchmarkNodes
operator|.
name|size
argument_list|()
operator|>=
name|numNodes
condition|)
block|{
return|return
name|benchmarkNodes
return|;
block|}
if|if
condition|(
name|node
operator|!=
name|localNode
operator|&&
name|isBenchmarkNode
argument_list|(
name|node
argument_list|)
condition|)
block|{
name|benchmarkNodes
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|benchmarkNodes
return|;
block|}
DECL|class|BenchExecutionHandler
specifier|private
class|class
name|BenchExecutionHandler
extends|extends
name|BaseTransportRequestHandler
argument_list|<
name|NodeBenchRequest
argument_list|>
block|{
DECL|field|ACTION
specifier|static
specifier|final
name|String
name|ACTION
init|=
literal|"benchmark/executor/start"
decl_stmt|;
annotation|@
name|Override
DECL|method|newInstance
specifier|public
name|NodeBenchRequest
name|newInstance
parameter_list|()
block|{
return|return
operator|new
name|NodeBenchRequest
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|messageReceived
specifier|public
name|void
name|messageReceived
parameter_list|(
name|NodeBenchRequest
name|request
parameter_list|,
name|TransportChannel
name|channel
parameter_list|)
throws|throws
name|Exception
block|{
name|BenchmarkResponse
name|response
init|=
name|executor
operator|.
name|benchmark
argument_list|(
name|request
operator|.
name|request
argument_list|)
decl_stmt|;
name|channel
operator|.
name|sendResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|executor
specifier|public
name|String
name|executor
parameter_list|()
block|{
return|return
name|ThreadPool
operator|.
name|Names
operator|.
name|BENCH
return|;
block|}
block|}
DECL|class|StatusExecutionHandler
specifier|private
class|class
name|StatusExecutionHandler
extends|extends
name|BaseTransportRequestHandler
argument_list|<
name|NodeStatusRequest
argument_list|>
block|{
DECL|field|ACTION
specifier|static
specifier|final
name|String
name|ACTION
init|=
literal|"benchmark/executor/status"
decl_stmt|;
annotation|@
name|Override
DECL|method|newInstance
specifier|public
name|NodeStatusRequest
name|newInstance
parameter_list|()
block|{
return|return
operator|new
name|NodeStatusRequest
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|messageReceived
specifier|public
name|void
name|messageReceived
parameter_list|(
name|NodeStatusRequest
name|request
parameter_list|,
name|TransportChannel
name|channel
parameter_list|)
throws|throws
name|Exception
block|{
name|BenchmarkStatusNodeResponse
name|nodeResponse
init|=
name|executor
operator|.
name|benchmarkStatus
argument_list|()
decl_stmt|;
name|nodeResponse
operator|.
name|nodeName
argument_list|(
name|clusterService
operator|.
name|localNode
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|channel
operator|.
name|sendResponse
argument_list|(
name|nodeResponse
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|executor
specifier|public
name|String
name|executor
parameter_list|()
block|{
return|return
name|ThreadPool
operator|.
name|Names
operator|.
name|BENCH
return|;
block|}
block|}
DECL|class|AbortExecutionHandler
specifier|private
class|class
name|AbortExecutionHandler
extends|extends
name|BaseTransportRequestHandler
argument_list|<
name|NodeAbortRequest
argument_list|>
block|{
DECL|field|ACTION
specifier|static
specifier|final
name|String
name|ACTION
init|=
literal|"benchmark/executor/abort"
decl_stmt|;
annotation|@
name|Override
DECL|method|newInstance
specifier|public
name|NodeAbortRequest
name|newInstance
parameter_list|()
block|{
return|return
operator|new
name|NodeAbortRequest
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|messageReceived
specifier|public
name|void
name|messageReceived
parameter_list|(
name|NodeAbortRequest
name|request
parameter_list|,
name|TransportChannel
name|channel
parameter_list|)
throws|throws
name|Exception
block|{
name|AbortBenchmarkNodeResponse
name|nodeResponse
init|=
name|executor
operator|.
name|abortBenchmark
argument_list|(
name|request
operator|.
name|benchmarkName
argument_list|)
decl_stmt|;
name|nodeResponse
operator|.
name|nodeName
argument_list|(
name|clusterService
operator|.
name|localNode
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|channel
operator|.
name|sendResponse
argument_list|(
name|nodeResponse
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|executor
specifier|public
name|String
name|executor
parameter_list|()
block|{
return|return
name|ThreadPool
operator|.
name|Names
operator|.
name|BENCH
return|;
block|}
block|}
DECL|class|NodeAbortRequest
specifier|public
specifier|static
class|class
name|NodeAbortRequest
extends|extends
name|TransportRequest
block|{
DECL|field|benchmarkName
specifier|private
name|String
name|benchmarkName
decl_stmt|;
DECL|method|NodeAbortRequest
specifier|public
name|NodeAbortRequest
parameter_list|(
name|String
name|benchmarkName
parameter_list|)
block|{
name|this
operator|.
name|benchmarkName
operator|=
name|benchmarkName
expr_stmt|;
block|}
DECL|method|NodeAbortRequest
specifier|public
name|NodeAbortRequest
parameter_list|()
block|{
name|this
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|benchmarkName
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeString
argument_list|(
name|benchmarkName
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|NodeStatusRequest
specifier|public
specifier|static
class|class
name|NodeStatusRequest
extends|extends
name|TransportRequest
block|{
DECL|field|request
specifier|final
name|BenchmarkStatusRequest
name|request
decl_stmt|;
DECL|method|NodeStatusRequest
specifier|public
name|NodeStatusRequest
parameter_list|(
name|BenchmarkStatusRequest
name|request
parameter_list|)
block|{
name|this
operator|.
name|request
operator|=
name|request
expr_stmt|;
block|}
DECL|method|NodeStatusRequest
specifier|public
name|NodeStatusRequest
parameter_list|()
block|{
name|this
argument_list|(
operator|new
name|BenchmarkStatusRequest
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|request
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|request
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|NodeBenchRequest
specifier|public
specifier|static
class|class
name|NodeBenchRequest
extends|extends
name|TransportRequest
block|{
DECL|field|request
specifier|final
name|BenchmarkRequest
name|request
decl_stmt|;
DECL|method|NodeBenchRequest
specifier|public
name|NodeBenchRequest
parameter_list|(
name|BenchmarkRequest
name|request
parameter_list|)
block|{
name|this
operator|.
name|request
operator|=
name|request
expr_stmt|;
block|}
DECL|method|NodeBenchRequest
specifier|public
name|NodeBenchRequest
parameter_list|()
block|{
name|this
argument_list|(
operator|new
name|BenchmarkRequest
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|request
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|request
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|CountDownAsyncHandler
specifier|private
specifier|abstract
class|class
name|CountDownAsyncHandler
parameter_list|<
name|T
extends|extends
name|TransportResponse
parameter_list|>
implements|implements
name|TransportResponseHandler
argument_list|<
name|T
argument_list|>
block|{
DECL|field|countDown
specifier|protected
specifier|final
name|CountDown
name|countDown
decl_stmt|;
DECL|field|responses
specifier|protected
specifier|final
name|CopyOnWriteArrayList
argument_list|<
name|T
argument_list|>
name|responses
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<
name|T
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|failures
specifier|protected
specifier|final
name|CopyOnWriteArrayList
argument_list|<
name|Throwable
argument_list|>
name|failures
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<
name|Throwable
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|CountDownAsyncHandler
specifier|protected
name|CountDownAsyncHandler
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|countDown
operator|=
operator|new
name|CountDown
argument_list|(
name|size
argument_list|)
expr_stmt|;
block|}
DECL|method|newInstance
specifier|public
specifier|abstract
name|T
name|newInstance
parameter_list|()
function_decl|;
DECL|method|sendResponse
specifier|protected
specifier|abstract
name|void
name|sendResponse
parameter_list|()
function_decl|;
annotation|@
name|Override
DECL|method|handleResponse
specifier|public
name|void
name|handleResponse
parameter_list|(
name|T
name|t
parameter_list|)
block|{
name|responses
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
if|if
condition|(
name|countDown
operator|.
name|countDown
argument_list|()
condition|)
block|{
name|sendResponse
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|handleException
specifier|public
name|void
name|handleException
parameter_list|(
name|TransportException
name|t
parameter_list|)
block|{
name|failures
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|logger
operator|.
name|error
argument_list|(
name|t
operator|.
name|getMessage
argument_list|()
argument_list|,
name|t
argument_list|)
expr_stmt|;
if|if
condition|(
name|countDown
operator|.
name|countDown
argument_list|()
condition|)
block|{
name|sendResponse
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|executor
specifier|public
name|String
name|executor
parameter_list|()
block|{
return|return
name|ThreadPool
operator|.
name|Names
operator|.
name|SAME
return|;
block|}
block|}
DECL|class|BenchmarkAbortAsyncHandler
specifier|private
class|class
name|BenchmarkAbortAsyncHandler
extends|extends
name|CountDownAsyncHandler
argument_list|<
name|AbortBenchmarkNodeResponse
argument_list|>
block|{
DECL|field|benchmarkName
specifier|private
specifier|final
name|String
name|benchmarkName
decl_stmt|;
DECL|field|listener
specifier|private
specifier|final
name|ActionListener
argument_list|<
name|AbortBenchmarkResponse
argument_list|>
name|listener
decl_stmt|;
DECL|method|BenchmarkAbortAsyncHandler
specifier|public
name|BenchmarkAbortAsyncHandler
parameter_list|(
name|int
name|size
parameter_list|,
name|String
name|benchmarkName
parameter_list|,
name|ActionListener
argument_list|<
name|AbortBenchmarkResponse
argument_list|>
name|listener
parameter_list|)
block|{
name|super
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|this
operator|.
name|benchmarkName
operator|=
name|benchmarkName
expr_stmt|;
name|this
operator|.
name|listener
operator|=
name|listener
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|newInstance
specifier|public
name|AbortBenchmarkNodeResponse
name|newInstance
parameter_list|()
block|{
return|return
operator|new
name|AbortBenchmarkNodeResponse
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|sendResponse
specifier|protected
name|void
name|sendResponse
parameter_list|()
block|{
name|AbortBenchmarkResponse
name|abortResponse
init|=
operator|new
name|AbortBenchmarkResponse
argument_list|(
name|benchmarkName
argument_list|)
decl_stmt|;
comment|// Merge all node responses into a single response
for|for
control|(
name|AbortBenchmarkNodeResponse
name|nodeResponse
range|:
name|responses
control|)
block|{
name|abortResponse
operator|.
name|addNodeResponse
argument_list|(
name|nodeResponse
argument_list|)
expr_stmt|;
block|}
name|listener
operator|.
name|onResponse
argument_list|(
name|abortResponse
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|BenchmarkStatusAsyncHandler
specifier|private
class|class
name|BenchmarkStatusAsyncHandler
extends|extends
name|CountDownAsyncHandler
argument_list|<
name|BenchmarkStatusNodeResponse
argument_list|>
block|{
DECL|field|request
specifier|private
specifier|final
name|BenchmarkStatusRequest
name|request
decl_stmt|;
DECL|field|listener
specifier|private
specifier|final
name|ActionListener
argument_list|<
name|BenchmarkStatusResponse
argument_list|>
name|listener
decl_stmt|;
DECL|method|BenchmarkStatusAsyncHandler
specifier|public
name|BenchmarkStatusAsyncHandler
parameter_list|(
name|int
name|nodeCount
parameter_list|,
specifier|final
name|BenchmarkStatusRequest
name|request
parameter_list|,
name|ActionListener
argument_list|<
name|BenchmarkStatusResponse
argument_list|>
name|listener
parameter_list|)
block|{
name|super
argument_list|(
name|nodeCount
argument_list|)
expr_stmt|;
name|this
operator|.
name|request
operator|=
name|request
expr_stmt|;
name|this
operator|.
name|listener
operator|=
name|listener
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|newInstance
specifier|public
name|BenchmarkStatusNodeResponse
name|newInstance
parameter_list|()
block|{
return|return
operator|new
name|BenchmarkStatusNodeResponse
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|sendResponse
specifier|protected
name|void
name|sendResponse
parameter_list|()
block|{
name|BenchmarkStatusResponse
name|consolidatedResponse
init|=
operator|new
name|BenchmarkStatusResponse
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|BenchmarkResponse
argument_list|>
argument_list|>
name|nameNodeResponseMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Group node responses by benchmark name
for|for
control|(
name|BenchmarkStatusNodeResponse
name|nodeResponse
range|:
name|responses
control|)
block|{
for|for
control|(
name|BenchmarkResponse
name|benchmarkResponse
range|:
name|nodeResponse
operator|.
name|benchResponses
argument_list|()
control|)
block|{
name|List
argument_list|<
name|BenchmarkResponse
argument_list|>
name|benchmarkResponses
init|=
name|nameNodeResponseMap
operator|.
name|get
argument_list|(
name|benchmarkResponse
operator|.
name|benchmarkName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|benchmarkResponses
operator|==
literal|null
condition|)
block|{
name|benchmarkResponses
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|nameNodeResponseMap
operator|.
name|put
argument_list|(
name|benchmarkResponse
operator|.
name|benchmarkName
argument_list|()
argument_list|,
name|benchmarkResponses
argument_list|)
expr_stmt|;
block|}
name|benchmarkResponses
operator|.
name|add
argument_list|(
name|benchmarkResponse
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|BenchmarkResponse
argument_list|>
argument_list|>
name|entry
range|:
name|nameNodeResponseMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|BenchmarkResponse
name|consolidated
init|=
name|consolidateBenchmarkResponses
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|consolidatedResponse
operator|.
name|addBenchResponse
argument_list|(
name|consolidated
argument_list|)
expr_stmt|;
block|}
name|listener
operator|.
name|onResponse
argument_list|(
name|consolidatedResponse
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|consolidateBenchmarkResponses
specifier|private
name|BenchmarkResponse
name|consolidateBenchmarkResponses
parameter_list|(
name|List
argument_list|<
name|BenchmarkResponse
argument_list|>
name|responses
parameter_list|)
block|{
name|BenchmarkResponse
name|response
init|=
operator|new
name|BenchmarkResponse
argument_list|()
decl_stmt|;
comment|// Merge node responses into a single consolidated response
for|for
control|(
name|BenchmarkResponse
name|r
range|:
name|responses
control|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|CompetitionResult
argument_list|>
name|entry
range|:
name|r
operator|.
name|competitionResults
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|response
operator|.
name|competitionResults
operator|.
name|containsKey
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|response
operator|.
name|competitionResults
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
operator|new
name|CompetitionResult
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|concurrency
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|multiplier
argument_list|()
argument_list|,
literal|false
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|percentiles
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|CompetitionResult
name|cr
init|=
name|response
operator|.
name|competitionResults
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|cr
operator|.
name|nodeResults
argument_list|()
operator|.
name|addAll
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|nodeResults
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|response
operator|.
name|benchmarkName
argument_list|()
operator|==
literal|null
condition|)
block|{
name|response
operator|.
name|benchmarkName
argument_list|(
name|r
operator|.
name|benchmarkName
argument_list|()
argument_list|)
expr_stmt|;
block|}
assert|assert
name|response
operator|.
name|benchmarkName
argument_list|()
operator|.
name|equals
argument_list|(
name|r
operator|.
name|benchmarkName
argument_list|()
argument_list|)
assert|;
name|response
operator|.
name|mergeState
argument_list|(
name|r
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|response
return|;
block|}
DECL|class|BenchmarkSearchAsyncHandler
specifier|private
class|class
name|BenchmarkSearchAsyncHandler
extends|extends
name|CountDownAsyncHandler
argument_list|<
name|BenchmarkResponse
argument_list|>
block|{
DECL|field|listener
specifier|private
specifier|final
name|ActionListener
argument_list|<
name|BenchmarkResponse
argument_list|>
name|listener
decl_stmt|;
DECL|field|request
specifier|private
specifier|final
name|BenchmarkRequest
name|request
decl_stmt|;
DECL|method|BenchmarkSearchAsyncHandler
specifier|public
name|BenchmarkSearchAsyncHandler
parameter_list|(
name|int
name|size
parameter_list|,
name|BenchmarkRequest
name|request
parameter_list|,
name|ActionListener
argument_list|<
name|BenchmarkResponse
argument_list|>
name|listener
parameter_list|)
block|{
name|super
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|this
operator|.
name|listener
operator|=
name|listener
expr_stmt|;
name|this
operator|.
name|request
operator|=
name|request
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|newInstance
specifier|public
name|BenchmarkResponse
name|newInstance
parameter_list|()
block|{
return|return
operator|new
name|BenchmarkResponse
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|sendResponse
specifier|protected
name|void
name|sendResponse
parameter_list|()
block|{
name|BenchmarkResponse
name|response
init|=
name|consolidateBenchmarkResponses
argument_list|(
name|responses
argument_list|)
decl_stmt|;
name|response
operator|.
name|benchmarkName
argument_list|(
name|request
operator|.
name|benchmarkName
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|verbose
argument_list|(
name|request
operator|.
name|verbose
argument_list|()
argument_list|)
expr_stmt|;
name|finishBenchmark
argument_list|(
name|response
argument_list|,
name|request
operator|.
name|benchmarkName
argument_list|()
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
DECL|method|handleExceptionInternal
specifier|public
name|void
name|handleExceptionInternal
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failures
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
if|if
condition|(
name|countDown
operator|.
name|countDown
argument_list|()
condition|)
block|{
name|sendResponse
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|interface|BenchmarkStateListener
specifier|public
specifier|static
interface|interface
name|BenchmarkStateListener
block|{
DECL|method|onResponse
name|void
name|onResponse
parameter_list|(
name|ClusterState
name|newClusterState
parameter_list|,
name|BenchmarkMetaData
operator|.
name|Entry
name|changed
parameter_list|)
function_decl|;
DECL|method|onFailure
name|void
name|onFailure
parameter_list|(
name|Throwable
name|t
parameter_list|)
function_decl|;
block|}
DECL|class|StartBenchmarkTask
specifier|public
specifier|final
class|class
name|StartBenchmarkTask
extends|extends
name|BenchmarkStateChangeAction
argument_list|<
name|BenchmarkRequest
argument_list|>
block|{
DECL|field|stateListener
specifier|private
specifier|final
name|BenchmarkStateListener
name|stateListener
decl_stmt|;
DECL|field|newBenchmark
specifier|private
name|BenchmarkMetaData
operator|.
name|Entry
name|newBenchmark
init|=
literal|null
decl_stmt|;
DECL|method|StartBenchmarkTask
specifier|public
name|StartBenchmarkTask
parameter_list|(
name|BenchmarkRequest
name|request
parameter_list|,
name|BenchmarkStateListener
name|stateListener
parameter_list|)
block|{
name|super
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|this
operator|.
name|stateListener
operator|=
name|stateListener
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|execute
specifier|public
name|ClusterState
name|execute
parameter_list|(
name|ClusterState
name|currentState
parameter_list|)
block|{
name|MetaData
name|metaData
init|=
name|currentState
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|BenchmarkMetaData
name|bmd
init|=
name|metaData
operator|.
name|custom
argument_list|(
name|BenchmarkMetaData
operator|.
name|TYPE
argument_list|)
decl_stmt|;
name|MetaData
operator|.
name|Builder
name|mdBuilder
init|=
name|MetaData
operator|.
name|builder
argument_list|(
name|metaData
argument_list|)
decl_stmt|;
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|BenchmarkMetaData
operator|.
name|Entry
argument_list|>
name|builder
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
if|if
condition|(
name|bmd
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|BenchmarkMetaData
operator|.
name|Entry
name|entry
range|:
name|bmd
operator|.
name|entries
argument_list|()
control|)
block|{
if|if
condition|(
name|request
operator|.
name|benchmarkName
argument_list|()
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|benchmarkId
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|entry
operator|.
name|state
argument_list|()
operator|!=
name|BenchmarkMetaData
operator|.
name|State
operator|.
name|SUCCESS
operator|&&
name|entry
operator|.
name|state
argument_list|()
operator|!=
name|BenchmarkMetaData
operator|.
name|State
operator|.
name|FAILED
condition|)
block|{
throw|throw
operator|new
name|ElasticsearchException
argument_list|(
literal|"A benchmark with ID ["
operator|+
name|request
operator|.
name|benchmarkName
argument_list|()
operator|+
literal|"] is already running in state ["
operator|+
name|entry
operator|.
name|state
argument_list|()
operator|+
literal|"]"
argument_list|)
throw|;
block|}
comment|// just drop the entry it it has finished successfully or it failed!
block|}
else|else
block|{
name|builder
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|List
argument_list|<
name|DiscoveryNode
argument_list|>
name|nodes
init|=
name|findNodes
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|String
index|[]
name|nodeIds
init|=
operator|new
name|String
index|[
name|nodes
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|DiscoveryNode
name|node
range|:
name|nodes
control|)
block|{
name|nodeIds
index|[
name|i
operator|++
index|]
operator|=
name|node
operator|.
name|getId
argument_list|()
expr_stmt|;
block|}
name|newBenchmark
operator|=
operator|new
name|BenchmarkMetaData
operator|.
name|Entry
argument_list|(
name|request
operator|.
name|benchmarkName
argument_list|()
argument_list|,
name|BenchmarkMetaData
operator|.
name|State
operator|.
name|STARTED
argument_list|,
name|nodeIds
argument_list|)
expr_stmt|;
name|bmd
operator|=
operator|new
name|BenchmarkMetaData
argument_list|(
name|builder
operator|.
name|add
argument_list|(
name|newBenchmark
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|mdBuilder
operator|.
name|putCustom
argument_list|(
name|BenchmarkMetaData
operator|.
name|TYPE
argument_list|,
name|bmd
argument_list|)
expr_stmt|;
return|return
name|ClusterState
operator|.
name|builder
argument_list|(
name|currentState
argument_list|)
operator|.
name|metaData
argument_list|(
name|mdBuilder
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|onFailure
specifier|public
name|void
name|onFailure
parameter_list|(
name|String
name|source
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Failed to start benchmark: [{}]"
argument_list|,
name|t
argument_list|,
name|request
operator|.
name|benchmarkName
argument_list|()
argument_list|)
expr_stmt|;
name|newBenchmark
operator|=
literal|null
expr_stmt|;
name|stateListener
operator|.
name|onFailure
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|clusterStateProcessed
specifier|public
name|void
name|clusterStateProcessed
parameter_list|(
name|String
name|source
parameter_list|,
name|ClusterState
name|oldState
parameter_list|,
specifier|final
name|ClusterState
name|newState
parameter_list|)
block|{
if|if
condition|(
name|newBenchmark
operator|!=
literal|null
condition|)
block|{
name|stateListener
operator|.
name|onResponse
argument_list|(
name|newState
argument_list|,
name|newBenchmark
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|timeout
specifier|public
name|TimeValue
name|timeout
parameter_list|()
block|{
return|return
name|request
operator|.
name|masterNodeTimeout
argument_list|()
return|;
block|}
block|}
DECL|class|FinishBenchmarkTask
specifier|public
specifier|final
class|class
name|FinishBenchmarkTask
extends|extends
name|UpdateBenchmarkStateTask
block|{
DECL|field|success
specifier|private
specifier|final
name|boolean
name|success
decl_stmt|;
DECL|method|FinishBenchmarkTask
specifier|public
name|FinishBenchmarkTask
parameter_list|(
name|String
name|reason
parameter_list|,
name|String
name|benchmarkId
parameter_list|,
name|BenchmarkStateListener
name|listener
parameter_list|,
name|boolean
name|success
parameter_list|)
block|{
name|super
argument_list|(
name|reason
argument_list|,
name|benchmarkId
argument_list|,
name|listener
argument_list|)
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|process
specifier|protected
name|BenchmarkMetaData
operator|.
name|Entry
name|process
parameter_list|(
name|BenchmarkMetaData
operator|.
name|Entry
name|entry
parameter_list|)
block|{
name|BenchmarkMetaData
operator|.
name|State
name|state
init|=
name|entry
operator|.
name|state
argument_list|()
decl_stmt|;
assert|assert
name|state
operator|==
name|BenchmarkMetaData
operator|.
name|State
operator|.
name|STARTED
operator|||
name|state
operator|==
name|BenchmarkMetaData
operator|.
name|State
operator|.
name|ABORTED
operator|:
literal|"Expected state: STARTED or ABORTED but was: "
operator|+
name|entry
operator|.
name|state
argument_list|()
assert|;
if|if
condition|(
name|success
condition|)
block|{
return|return
operator|new
name|BenchmarkMetaData
operator|.
name|Entry
argument_list|(
name|entry
argument_list|,
name|BenchmarkMetaData
operator|.
name|State
operator|.
name|SUCCESS
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|BenchmarkMetaData
operator|.
name|Entry
argument_list|(
name|entry
argument_list|,
name|BenchmarkMetaData
operator|.
name|State
operator|.
name|FAILED
argument_list|)
return|;
block|}
block|}
block|}
DECL|class|AbortBenchmarkTask
specifier|public
specifier|final
class|class
name|AbortBenchmarkTask
extends|extends
name|UpdateBenchmarkStateTask
block|{
DECL|method|AbortBenchmarkTask
specifier|public
name|AbortBenchmarkTask
parameter_list|(
name|String
name|benchmarkId
parameter_list|,
name|BenchmarkStateListener
name|listener
parameter_list|)
block|{
name|super
argument_list|(
literal|"abort_benchmark"
argument_list|,
name|benchmarkId
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|process
specifier|protected
name|BenchmarkMetaData
operator|.
name|Entry
name|process
parameter_list|(
name|BenchmarkMetaData
operator|.
name|Entry
name|entry
parameter_list|)
block|{
name|BenchmarkMetaData
operator|.
name|State
name|state
init|=
name|entry
operator|.
name|state
argument_list|()
decl_stmt|;
if|if
condition|(
name|state
operator|!=
name|BenchmarkMetaData
operator|.
name|State
operator|.
name|STARTED
condition|)
block|{
throw|throw
operator|new
name|ElasticsearchIllegalStateException
argument_list|(
literal|"Can't abort benchmark for id: ["
operator|+
name|benchmarkId
operator|+
literal|"] - illegal state ["
operator|+
name|state
operator|+
literal|"]"
argument_list|)
throw|;
block|}
return|return
operator|new
name|BenchmarkMetaData
operator|.
name|Entry
argument_list|(
name|entry
argument_list|,
name|BenchmarkMetaData
operator|.
name|State
operator|.
name|ABORTED
argument_list|)
return|;
block|}
block|}
DECL|class|UpdateBenchmarkStateTask
specifier|public
specifier|abstract
class|class
name|UpdateBenchmarkStateTask
implements|implements
name|ProcessedClusterStateUpdateTask
block|{
DECL|field|reason
specifier|private
specifier|final
name|String
name|reason
decl_stmt|;
DECL|field|benchmarkId
specifier|protected
specifier|final
name|String
name|benchmarkId
decl_stmt|;
DECL|field|listener
specifier|private
specifier|final
name|BenchmarkStateListener
name|listener
decl_stmt|;
DECL|field|instance
specifier|private
name|BenchmarkMetaData
operator|.
name|Entry
name|instance
decl_stmt|;
DECL|method|UpdateBenchmarkStateTask
specifier|protected
name|UpdateBenchmarkStateTask
parameter_list|(
name|String
name|reason
parameter_list|,
name|String
name|benchmarkId
parameter_list|,
name|BenchmarkStateListener
name|listener
parameter_list|)
block|{
name|this
operator|.
name|reason
operator|=
name|reason
expr_stmt|;
name|this
operator|.
name|listener
operator|=
name|listener
expr_stmt|;
name|this
operator|.
name|benchmarkId
operator|=
name|benchmarkId
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|execute
specifier|public
name|ClusterState
name|execute
parameter_list|(
name|ClusterState
name|currentState
parameter_list|)
block|{
name|MetaData
name|metaData
init|=
name|currentState
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|BenchmarkMetaData
name|bmd
init|=
name|metaData
operator|.
name|custom
argument_list|(
name|BenchmarkMetaData
operator|.
name|TYPE
argument_list|)
decl_stmt|;
name|MetaData
operator|.
name|Builder
name|mdBuilder
init|=
name|MetaData
operator|.
name|builder
argument_list|(
name|metaData
argument_list|)
decl_stmt|;
if|if
condition|(
name|bmd
operator|!=
literal|null
operator|&&
operator|!
name|bmd
operator|.
name|entries
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|BenchmarkMetaData
operator|.
name|Entry
argument_list|>
name|builder
init|=
operator|new
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|BenchmarkMetaData
operator|.
name|Entry
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|BenchmarkMetaData
operator|.
name|Entry
name|e
range|:
name|bmd
operator|.
name|entries
argument_list|()
control|)
block|{
if|if
condition|(
name|benchmarkId
operator|==
literal|null
operator|||
name|e
operator|.
name|benchmarkId
argument_list|()
operator|.
name|equals
argument_list|(
name|benchmarkId
argument_list|)
condition|)
block|{
name|e
operator|=
name|process
argument_list|(
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|benchmarkId
operator|!=
literal|null
condition|)
block|{
assert|assert
name|instance
operator|==
literal|null
operator|:
literal|"Illegal state more than one benchmark with he same id ["
operator|+
name|benchmarkId
operator|+
literal|"]"
assert|;
name|instance
operator|=
name|e
expr_stmt|;
block|}
name|found
operator|=
literal|true
expr_stmt|;
block|}
comment|// Don't keep finished benchmarks around in cluster state
if|if
condition|(
name|e
operator|!=
literal|null
operator|&&
operator|(
name|e
operator|.
name|state
argument_list|()
operator|!=
name|BenchmarkMetaData
operator|.
name|State
operator|.
name|SUCCESS
operator|&&
name|e
operator|.
name|state
argument_list|()
operator|!=
name|BenchmarkMetaData
operator|.
name|State
operator|.
name|ABORTED
operator|&&
name|e
operator|.
name|state
argument_list|()
operator|!=
name|BenchmarkMetaData
operator|.
name|State
operator|.
name|FAILED
operator|)
condition|)
block|{
name|builder
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
throw|throw
operator|new
name|ElasticsearchException
argument_list|(
literal|"No Benchmark found for id: ["
operator|+
name|benchmarkId
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|bmd
operator|=
operator|new
name|BenchmarkMetaData
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|bmd
operator|!=
literal|null
condition|)
block|{
name|mdBuilder
operator|.
name|putCustom
argument_list|(
name|BenchmarkMetaData
operator|.
name|TYPE
argument_list|,
name|bmd
argument_list|)
expr_stmt|;
block|}
return|return
name|ClusterState
operator|.
name|builder
argument_list|(
name|currentState
argument_list|)
operator|.
name|metaData
argument_list|(
name|mdBuilder
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|process
specifier|protected
specifier|abstract
name|BenchmarkMetaData
operator|.
name|Entry
name|process
parameter_list|(
name|BenchmarkMetaData
operator|.
name|Entry
name|entry
parameter_list|)
function_decl|;
annotation|@
name|Override
DECL|method|onFailure
specifier|public
name|void
name|onFailure
parameter_list|(
name|String
name|source
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Failed updating benchmark state for ID [{}] triggered by: [{}]"
argument_list|,
name|t
argument_list|,
name|benchmarkId
argument_list|,
name|reason
argument_list|)
expr_stmt|;
name|listener
operator|.
name|onFailure
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|clusterStateProcessed
specifier|public
name|void
name|clusterStateProcessed
parameter_list|(
name|String
name|source
parameter_list|,
name|ClusterState
name|oldState
parameter_list|,
specifier|final
name|ClusterState
name|newState
parameter_list|)
block|{
name|listener
operator|.
name|onResponse
argument_list|(
name|newState
argument_list|,
name|instance
argument_list|)
expr_stmt|;
block|}
DECL|method|reason
specifier|public
name|String
name|reason
parameter_list|()
block|{
return|return
name|reason
return|;
block|}
block|}
DECL|class|BenchmarkStateChangeAction
specifier|public
specifier|abstract
class|class
name|BenchmarkStateChangeAction
parameter_list|<
name|R
extends|extends
name|MasterNodeOperationRequest
parameter_list|>
implements|implements
name|TimeoutClusterStateUpdateTask
block|{
DECL|field|request
specifier|protected
specifier|final
name|R
name|request
decl_stmt|;
DECL|method|BenchmarkStateChangeAction
specifier|public
name|BenchmarkStateChangeAction
parameter_list|(
name|R
name|request
parameter_list|)
block|{
name|this
operator|.
name|request
operator|=
name|request
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|timeout
specifier|public
name|TimeValue
name|timeout
parameter_list|()
block|{
return|return
name|request
operator|.
name|masterNodeTimeout
argument_list|()
return|;
block|}
block|}
DECL|method|availableBenchmarkNodes
specifier|private
name|List
argument_list|<
name|DiscoveryNode
argument_list|>
name|availableBenchmarkNodes
parameter_list|()
block|{
name|DiscoveryNodes
name|nodes
init|=
name|clusterService
operator|.
name|state
argument_list|()
operator|.
name|nodes
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|DiscoveryNode
argument_list|>
name|benchmarkNodes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|nodes
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|DiscoveryNode
name|node
range|:
name|nodes
control|)
block|{
if|if
condition|(
name|isBenchmarkNode
argument_list|(
name|node
argument_list|)
condition|)
block|{
name|benchmarkNodes
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|benchmarkNodes
return|;
block|}
block|}
end_class

end_unit

