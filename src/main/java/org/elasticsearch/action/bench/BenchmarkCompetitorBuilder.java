begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.bench
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|bench
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|bench
operator|.
name|BenchmarkSettings
operator|.
name|ClearCachesSettings
import|;
end_import

begin_comment
comment|/**  * Builder for a benchmark competitor  */
end_comment

begin_class
DECL|class|BenchmarkCompetitorBuilder
specifier|public
class|class
name|BenchmarkCompetitorBuilder
block|{
DECL|field|competitor
specifier|private
specifier|final
name|BenchmarkCompetitor
name|competitor
decl_stmt|;
comment|/**      * Constructs a new competitor builder to run a competition on the given indices      * @param indices   Indices to run against      */
DECL|method|BenchmarkCompetitorBuilder
specifier|public
name|BenchmarkCompetitorBuilder
parameter_list|(
name|String
modifier|...
name|indices
parameter_list|)
block|{
name|competitor
operator|=
operator|new
name|BenchmarkCompetitor
argument_list|(
name|indices
argument_list|)
expr_stmt|;
block|}
comment|/**      * If true, competition will run a 'warmup' round. This is to prevent timings from a cold start.      * @param warmup    Whether to do a warmup      * @return          this      */
DECL|method|setWarmup
specifier|public
name|BenchmarkCompetitorBuilder
name|setWarmup
parameter_list|(
name|boolean
name|warmup
parameter_list|)
block|{
name|competitor
operator|.
name|settings
argument_list|()
operator|.
name|warmup
argument_list|(
name|warmup
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the list if indices to execute against      * @param indices   Indices to run against      * @return          this      */
DECL|method|setIndices
specifier|public
name|BenchmarkCompetitorBuilder
name|setIndices
parameter_list|(
name|String
modifier|...
name|indices
parameter_list|)
block|{
name|competitor
operator|.
name|settings
argument_list|()
operator|.
name|indices
argument_list|(
name|indices
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the types of the indices to execute against      * @param types     Types of indices      * @return          this      */
DECL|method|setTypes
specifier|public
name|BenchmarkCompetitorBuilder
name|setTypes
parameter_list|(
name|String
modifier|...
name|types
parameter_list|)
block|{
name|competitor
operator|.
name|settings
argument_list|()
operator|.
name|types
argument_list|(
name|types
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Whether a competitor is allowed to clear index caches. If true, and if a      * ClearCachesSettings has been set, the competitor will      * submit an index cache clear action at the top of each iteration.      * @param   allowCacheClearing  If true, allow caches to be cleared      * @return  this      */
DECL|method|setAllowCacheClearing
specifier|public
name|BenchmarkCompetitorBuilder
name|setAllowCacheClearing
parameter_list|(
name|boolean
name|allowCacheClearing
parameter_list|)
block|{
name|competitor
operator|.
name|settings
argument_list|()
operator|.
name|allowCacheClearing
argument_list|(
name|allowCacheClearing
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Describes how an index cache clear request should be executed.      * @param clearCachesSettings   Description of how to clear caches      * @return                      this      */
DECL|method|setClearCachesSettings
specifier|public
name|BenchmarkCompetitorBuilder
name|setClearCachesSettings
parameter_list|(
name|ClearCachesSettings
name|clearCachesSettings
parameter_list|)
block|{
name|competitor
operator|.
name|settings
argument_list|()
operator|.
name|clearCachesSettings
argument_list|(
name|clearCachesSettings
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the concurrency level with which to run the competition. This determines the number of      * actively executing searches which the competition will run in parallel.      * @param concurrency   Number of searches to run concurrently      * @return              this      */
DECL|method|setConcurrency
specifier|public
name|BenchmarkCompetitorBuilder
name|setConcurrency
parameter_list|(
name|int
name|concurrency
parameter_list|)
block|{
name|competitor
operator|.
name|settings
argument_list|()
operator|.
name|concurrency
argument_list|(
name|concurrency
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Adds a search request to the competition      * @param searchRequest     Search request      * @return                  this      */
DECL|method|addSearchRequest
specifier|public
name|BenchmarkCompetitorBuilder
name|addSearchRequest
parameter_list|(
name|SearchRequest
modifier|...
name|searchRequest
parameter_list|)
block|{
name|competitor
operator|.
name|settings
argument_list|()
operator|.
name|addSearchRequest
argument_list|(
name|searchRequest
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the number of times to run each competition      * @param iters     Number of times to run the competition      * @return          this      */
DECL|method|setIterations
specifier|public
name|BenchmarkCompetitorBuilder
name|setIterations
parameter_list|(
name|int
name|iters
parameter_list|)
block|{
name|competitor
operator|.
name|settings
argument_list|()
operator|.
name|iterations
argument_list|(
name|iters
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * A 'multiplier' for each iteration. This specifies how many times to execute      * the search requests within each iteration. The resulting number of total searches      * executed will be: iterations X multiplier. Setting a higher multiplier will      * smooth out results and dampen the effect of outliers.      * @param multiplier    Iteration multiplier      * @return              this      */
DECL|method|setMultiplier
specifier|public
name|BenchmarkCompetitorBuilder
name|setMultiplier
parameter_list|(
name|int
name|multiplier
parameter_list|)
block|{
name|competitor
operator|.
name|settings
argument_list|()
operator|.
name|multiplier
argument_list|(
name|multiplier
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the number of slowest requests to report      * @param numSlowest    Number of slow requests to report      * @return              this      */
DECL|method|setNumSlowest
specifier|public
name|BenchmarkCompetitorBuilder
name|setNumSlowest
parameter_list|(
name|int
name|numSlowest
parameter_list|)
block|{
name|competitor
operator|.
name|settings
argument_list|()
operator|.
name|numSlowest
argument_list|(
name|numSlowest
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Builds a competitor      * @return  A new competitor      */
DECL|method|build
specifier|public
name|BenchmarkCompetitor
name|build
parameter_list|()
block|{
return|return
name|competitor
return|;
block|}
comment|/**      * Sets the type of search to execute      * @param searchType    Search type      * @return              this      */
DECL|method|setSearchType
specifier|public
name|BenchmarkCompetitorBuilder
name|setSearchType
parameter_list|(
name|SearchType
name|searchType
parameter_list|)
block|{
name|competitor
operator|.
name|settings
argument_list|()
operator|.
name|searchType
argument_list|(
name|searchType
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the user-supplied name to the competitor      * @param name  Name      * @return      this      */
DECL|method|setName
specifier|public
name|BenchmarkCompetitorBuilder
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|competitor
operator|.
name|name
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
end_class

end_unit

