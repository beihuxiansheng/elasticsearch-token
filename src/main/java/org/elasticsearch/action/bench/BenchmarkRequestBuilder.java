begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.bench
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|bench
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|Client
import|;
end_import

begin_comment
comment|/**  * Request builder for benchmarks  */
end_comment

begin_class
DECL|class|BenchmarkRequestBuilder
specifier|public
class|class
name|BenchmarkRequestBuilder
extends|extends
name|ActionRequestBuilder
argument_list|<
name|BenchmarkRequest
argument_list|,
name|BenchmarkResponse
argument_list|,
name|BenchmarkRequestBuilder
argument_list|,
name|Client
argument_list|>
block|{
DECL|method|BenchmarkRequestBuilder
specifier|public
name|BenchmarkRequestBuilder
parameter_list|(
name|Client
name|client
parameter_list|,
name|String
index|[]
name|indices
parameter_list|)
block|{
name|super
argument_list|(
name|client
argument_list|,
operator|new
name|BenchmarkRequest
argument_list|(
name|indices
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|BenchmarkRequestBuilder
specifier|public
name|BenchmarkRequestBuilder
parameter_list|(
name|Client
name|client
parameter_list|)
block|{
name|super
argument_list|(
name|client
argument_list|,
operator|new
name|BenchmarkRequest
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|setAllowCacheClearing
specifier|public
name|BenchmarkRequestBuilder
name|setAllowCacheClearing
parameter_list|(
name|boolean
name|allowCacheClearing
parameter_list|)
block|{
name|request
operator|.
name|settings
argument_list|()
operator|.
name|allowCacheClearing
argument_list|(
name|allowCacheClearing
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setClearCachesSettings
specifier|public
name|BenchmarkRequestBuilder
name|setClearCachesSettings
parameter_list|(
name|BenchmarkSettings
operator|.
name|ClearCachesSettings
name|clearCachesSettings
parameter_list|)
block|{
name|request
operator|.
name|settings
argument_list|()
operator|.
name|clearCachesSettings
argument_list|(
name|clearCachesSettings
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|addSearchRequest
specifier|public
name|BenchmarkRequestBuilder
name|addSearchRequest
parameter_list|(
name|SearchRequest
modifier|...
name|searchRequest
parameter_list|)
block|{
name|request
operator|.
name|settings
argument_list|()
operator|.
name|addSearchRequest
argument_list|(
name|searchRequest
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|addCompetitor
specifier|public
name|BenchmarkRequestBuilder
name|addCompetitor
parameter_list|(
name|BenchmarkCompetitor
name|competitor
parameter_list|)
block|{
name|request
operator|.
name|addCompetitor
argument_list|(
name|competitor
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|addCompetitor
specifier|public
name|BenchmarkRequestBuilder
name|addCompetitor
parameter_list|(
name|BenchmarkCompetitorBuilder
name|competitorBuilder
parameter_list|)
block|{
return|return
name|addCompetitor
argument_list|(
name|competitorBuilder
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
DECL|method|setNumExecutorNodes
specifier|public
name|BenchmarkRequestBuilder
name|setNumExecutorNodes
parameter_list|(
name|int
name|numExecutorNodes
parameter_list|)
block|{
name|request
operator|.
name|numExecutorNodes
argument_list|(
name|numExecutorNodes
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setIterations
specifier|public
name|BenchmarkRequestBuilder
name|setIterations
parameter_list|(
name|int
name|iterations
parameter_list|)
block|{
name|request
operator|.
name|settings
argument_list|()
operator|.
name|iterations
argument_list|(
name|iterations
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setConcurrency
specifier|public
name|BenchmarkRequestBuilder
name|setConcurrency
parameter_list|(
name|int
name|concurrency
parameter_list|)
block|{
name|request
operator|.
name|settings
argument_list|()
operator|.
name|concurrency
argument_list|(
name|concurrency
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setMultiplier
specifier|public
name|BenchmarkRequestBuilder
name|setMultiplier
parameter_list|(
name|int
name|multiplier
parameter_list|)
block|{
name|request
operator|.
name|settings
argument_list|()
operator|.
name|multiplier
argument_list|(
name|multiplier
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setNumSlowest
specifier|public
name|BenchmarkRequestBuilder
name|setNumSlowest
parameter_list|(
name|int
name|numSlowest
parameter_list|)
block|{
name|request
operator|.
name|settings
argument_list|()
operator|.
name|numSlowest
argument_list|(
name|numSlowest
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setWarmup
specifier|public
name|BenchmarkRequestBuilder
name|setWarmup
parameter_list|(
name|boolean
name|warmup
parameter_list|)
block|{
name|request
operator|.
name|settings
argument_list|()
operator|.
name|warmup
argument_list|(
name|warmup
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setBenchmarkId
specifier|public
name|BenchmarkRequestBuilder
name|setBenchmarkId
parameter_list|(
name|String
name|benchmarkId
parameter_list|)
block|{
name|request
operator|.
name|benchmarkName
argument_list|(
name|benchmarkId
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setSearchType
specifier|public
name|BenchmarkRequestBuilder
name|setSearchType
parameter_list|(
name|SearchType
name|searchType
parameter_list|)
block|{
name|request
operator|.
name|settings
argument_list|()
operator|.
name|searchType
argument_list|(
name|searchType
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setVerbose
specifier|public
name|BenchmarkRequestBuilder
name|setVerbose
parameter_list|(
name|boolean
name|verbose
parameter_list|)
block|{
name|request
operator|.
name|verbose
argument_list|(
name|verbose
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setPercentiles
specifier|public
name|BenchmarkRequestBuilder
name|setPercentiles
parameter_list|(
name|double
index|[]
name|percentiles
parameter_list|)
block|{
name|request
operator|.
name|percentiles
argument_list|(
name|percentiles
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|doExecute
specifier|protected
name|void
name|doExecute
parameter_list|(
name|ActionListener
argument_list|<
name|BenchmarkResponse
argument_list|>
name|listener
parameter_list|)
block|{
name|client
operator|.
name|bench
argument_list|(
name|request
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

