begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.bench
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|bench
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Streamable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Per-node result of competition iterations  */
end_comment

begin_class
DECL|class|CompetitionNodeResult
specifier|public
class|class
name|CompetitionNodeResult
extends|extends
name|ActionResponse
implements|implements
name|Streamable
block|{
DECL|field|competitionName
specifier|private
name|String
name|competitionName
decl_stmt|;
DECL|field|nodeName
specifier|private
name|String
name|nodeName
decl_stmt|;
DECL|field|totalIterations
specifier|private
name|int
name|totalIterations
init|=
literal|0
decl_stmt|;
DECL|field|completedIterations
specifier|private
name|int
name|completedIterations
init|=
literal|0
decl_stmt|;
DECL|field|totalExecutedQueries
specifier|private
name|int
name|totalExecutedQueries
init|=
literal|0
decl_stmt|;
DECL|field|warmUpTime
specifier|private
name|long
name|warmUpTime
init|=
literal|0
decl_stmt|;
DECL|field|failures
specifier|private
name|String
index|[]
name|failures
init|=
name|Strings
operator|.
name|EMPTY_ARRAY
decl_stmt|;
DECL|field|iterations
specifier|private
name|List
argument_list|<
name|CompetitionIteration
argument_list|>
name|iterations
decl_stmt|;
DECL|method|CompetitionNodeResult
specifier|public
name|CompetitionNodeResult
parameter_list|()
block|{
name|iterations
operator|=
operator|new
name|ArrayList
argument_list|<
name|CompetitionIteration
argument_list|>
argument_list|()
expr_stmt|;
block|}
DECL|method|CompetitionNodeResult
specifier|public
name|CompetitionNodeResult
parameter_list|(
name|String
name|competitionName
parameter_list|,
name|String
name|nodeName
parameter_list|,
name|int
name|totalIterations
parameter_list|,
name|List
argument_list|<
name|CompetitionIteration
argument_list|>
name|iterations
parameter_list|)
block|{
name|this
operator|.
name|competitionName
operator|=
name|competitionName
expr_stmt|;
name|this
operator|.
name|nodeName
operator|=
name|nodeName
expr_stmt|;
name|this
operator|.
name|iterations
operator|=
name|iterations
expr_stmt|;
name|this
operator|.
name|totalIterations
operator|=
name|totalIterations
expr_stmt|;
block|}
DECL|method|competitionName
specifier|public
name|String
name|competitionName
parameter_list|()
block|{
return|return
name|competitionName
return|;
block|}
DECL|method|nodeName
specifier|public
name|String
name|nodeName
parameter_list|()
block|{
return|return
name|nodeName
return|;
block|}
DECL|method|totalIterations
specifier|public
name|int
name|totalIterations
parameter_list|()
block|{
return|return
name|totalIterations
return|;
block|}
DECL|method|completedIterations
specifier|public
name|int
name|completedIterations
parameter_list|()
block|{
return|return
name|completedIterations
return|;
block|}
DECL|method|incrementCompletedIterations
specifier|public
name|void
name|incrementCompletedIterations
parameter_list|()
block|{
name|completedIterations
operator|++
expr_stmt|;
block|}
DECL|method|warmUpTime
specifier|public
name|long
name|warmUpTime
parameter_list|()
block|{
return|return
name|warmUpTime
return|;
block|}
DECL|method|warmUpTime
specifier|public
name|void
name|warmUpTime
parameter_list|(
name|long
name|warmUpTime
parameter_list|)
block|{
name|this
operator|.
name|warmUpTime
operator|=
name|warmUpTime
expr_stmt|;
block|}
DECL|method|failures
specifier|public
name|String
index|[]
name|failures
parameter_list|()
block|{
return|return
name|this
operator|.
name|failures
return|;
block|}
DECL|method|failures
specifier|public
name|void
name|failures
parameter_list|(
name|String
index|[]
name|failures
parameter_list|)
block|{
if|if
condition|(
name|failures
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|failures
operator|=
name|Strings
operator|.
name|EMPTY_ARRAY
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|failures
operator|=
name|failures
expr_stmt|;
block|}
block|}
DECL|method|totalExecutedQueries
specifier|public
name|int
name|totalExecutedQueries
parameter_list|()
block|{
return|return
name|totalExecutedQueries
return|;
block|}
DECL|method|totalExecutedQueries
specifier|public
name|void
name|totalExecutedQueries
parameter_list|(
name|int
name|totalExecutedQueries
parameter_list|)
block|{
name|this
operator|.
name|totalExecutedQueries
operator|=
name|totalExecutedQueries
expr_stmt|;
block|}
DECL|method|iterations
specifier|public
name|List
argument_list|<
name|CompetitionIteration
argument_list|>
name|iterations
parameter_list|()
block|{
return|return
name|iterations
return|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|competitionName
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
name|nodeName
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
name|totalIterations
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
name|completedIterations
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
name|totalExecutedQueries
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
name|warmUpTime
operator|=
name|in
operator|.
name|readVLong
argument_list|()
expr_stmt|;
name|failures
operator|=
name|in
operator|.
name|readStringArray
argument_list|()
expr_stmt|;
name|int
name|size
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|CompetitionIteration
name|iteration
init|=
operator|new
name|CompetitionIteration
argument_list|()
decl_stmt|;
name|iteration
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|iterations
operator|.
name|add
argument_list|(
name|iteration
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeString
argument_list|(
name|competitionName
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeString
argument_list|(
name|nodeName
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|totalIterations
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|completedIterations
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|totalExecutedQueries
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVLong
argument_list|(
name|warmUpTime
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeStringArray
argument_list|(
name|failures
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|iterations
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|CompetitionIteration
name|iteration
range|:
name|iterations
control|)
block|{
name|iteration
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

