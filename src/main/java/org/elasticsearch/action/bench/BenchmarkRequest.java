begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.bench
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|bench
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionRequestValidationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ValidateActions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|master
operator|.
name|MasterNodeOperationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * A benchmark request contains one or more competitors, which are descriptions of how to  * perform an individual benchmark. Each competitor has its own settings such as concurrency,  * number of iterations to perform, and what type of search to perform.  */
end_comment

begin_class
DECL|class|BenchmarkRequest
specifier|public
class|class
name|BenchmarkRequest
extends|extends
name|MasterNodeOperationRequest
argument_list|<
name|BenchmarkRequest
argument_list|>
block|{
DECL|field|benchmarkName
specifier|private
name|String
name|benchmarkName
decl_stmt|;
DECL|field|percentiles
specifier|private
name|double
index|[]
name|percentiles
decl_stmt|;
DECL|field|verbose
specifier|private
name|boolean
name|verbose
decl_stmt|;
DECL|field|numExecutorNodes
specifier|private
name|int
name|numExecutorNodes
init|=
literal|1
decl_stmt|;
comment|// How many nodes to run the benchmark on
comment|// Global settings which can be overwritten at the competitor level
DECL|field|settings
specifier|private
name|BenchmarkSettings
name|settings
init|=
operator|new
name|BenchmarkSettings
argument_list|()
decl_stmt|;
DECL|field|competitors
specifier|private
name|List
argument_list|<
name|BenchmarkCompetitor
argument_list|>
name|competitors
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**      * Constructs a benchmark request      */
DECL|method|BenchmarkRequest
specifier|public
name|BenchmarkRequest
parameter_list|()
block|{ }
comment|/**      * Constructs a benchmark request      */
DECL|method|BenchmarkRequest
specifier|public
name|BenchmarkRequest
parameter_list|(
name|String
modifier|...
name|indices
parameter_list|)
block|{
name|settings
argument_list|()
operator|.
name|indices
argument_list|(
name|indices
argument_list|)
expr_stmt|;
block|}
comment|/**      * Validate benchmark request      *      * @return  Null if benchmark request is OK, exception otherwise      */
annotation|@
name|Override
DECL|method|validate
specifier|public
name|ActionRequestValidationException
name|validate
parameter_list|()
block|{
name|ActionRequestValidationException
name|validationException
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|benchmarkName
operator|==
literal|null
condition|)
block|{
name|validationException
operator|=
name|ValidateActions
operator|.
name|addValidationError
argument_list|(
literal|"benchmarkName must not be null"
argument_list|,
name|validationException
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|competitors
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|validationException
operator|=
name|ValidateActions
operator|.
name|addValidationError
argument_list|(
literal|"competitors must not be empty"
argument_list|,
name|validationException
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|numExecutorNodes
operator|<=
literal|0
condition|)
block|{
name|validationException
operator|=
name|ValidateActions
operator|.
name|addValidationError
argument_list|(
literal|"num_executors must not be less than 1"
argument_list|,
name|validationException
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|BenchmarkCompetitor
name|competitor
range|:
name|competitors
control|)
block|{
name|validationException
operator|=
name|competitor
operator|.
name|validate
argument_list|(
name|validationException
argument_list|)
expr_stmt|;
if|if
condition|(
name|validationException
operator|!=
literal|null
condition|)
block|{
break|break;
block|}
block|}
return|return
name|validationException
return|;
block|}
comment|/**      * Cascade top-level benchmark settings to individual competitors while taking care      * not to overwrite any settings which the competitors specifically set.      */
DECL|method|cascadeGlobalSettings
specifier|public
name|void
name|cascadeGlobalSettings
parameter_list|()
block|{
for|for
control|(
name|BenchmarkCompetitor
name|competitor
range|:
name|competitors
control|)
block|{
name|competitor
operator|.
name|settings
argument_list|()
operator|.
name|merge
argument_list|(
name|settings
argument_list|)
expr_stmt|;
if|if
condition|(
name|competitor
operator|.
name|settings
argument_list|()
operator|.
name|searchRequests
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|SearchRequest
name|defaultSearchRequest
range|:
name|settings
operator|.
name|searchRequests
argument_list|()
control|)
block|{
name|SearchRequest
name|copy
init|=
operator|new
name|SearchRequest
argument_list|()
decl_stmt|;
if|if
condition|(
name|defaultSearchRequest
operator|.
name|indices
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|copy
operator|.
name|indices
argument_list|(
name|defaultSearchRequest
operator|.
name|indices
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|copy
operator|.
name|types
argument_list|(
name|defaultSearchRequest
operator|.
name|types
argument_list|()
argument_list|)
expr_stmt|;
name|copy
operator|.
name|searchType
argument_list|(
name|defaultSearchRequest
operator|.
name|searchType
argument_list|()
argument_list|)
expr_stmt|;
name|copy
operator|.
name|source
argument_list|(
name|defaultSearchRequest
operator|.
name|source
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|copy
operator|.
name|extraSource
argument_list|(
name|defaultSearchRequest
operator|.
name|extraSource
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|copy
operator|.
name|routing
argument_list|(
name|defaultSearchRequest
operator|.
name|routing
argument_list|()
argument_list|)
expr_stmt|;
name|copy
operator|.
name|preference
argument_list|(
name|defaultSearchRequest
operator|.
name|preference
argument_list|()
argument_list|)
expr_stmt|;
name|competitor
operator|.
name|settings
argument_list|()
operator|.
name|addSearchRequest
argument_list|(
name|copy
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * Apply late binding for certain settings. Indices and types passed will override previously      * set values. Cache clear requests cannot be constructed until we know the final set of      * indices so do this last.      *      * @param indices   List of indices to execute on      * @param types     List of types to execute on      */
DECL|method|applyLateBoundSettings
specifier|public
name|void
name|applyLateBoundSettings
parameter_list|(
name|String
index|[]
name|indices
parameter_list|,
name|String
index|[]
name|types
parameter_list|)
block|{
if|if
condition|(
name|indices
operator|!=
literal|null
operator|&&
name|indices
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|settings
operator|.
name|indices
argument_list|(
name|indices
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|types
operator|!=
literal|null
operator|&&
name|types
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|settings
operator|.
name|types
argument_list|(
name|types
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|SearchRequest
name|searchRequest
range|:
name|settings
operator|.
name|searchRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|indices
operator|!=
literal|null
operator|&&
name|indices
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|searchRequest
operator|.
name|indices
argument_list|(
name|indices
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|types
operator|!=
literal|null
operator|&&
name|types
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|searchRequest
operator|.
name|types
argument_list|(
name|types
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|settings
operator|.
name|clearCachesSettings
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|settings
operator|.
name|buildClearCachesRequestFromSettings
argument_list|()
expr_stmt|;
block|}
block|}
for|for
control|(
name|BenchmarkCompetitor
name|competitor
range|:
name|competitors
control|)
block|{
if|if
condition|(
name|indices
operator|!=
literal|null
operator|&&
name|indices
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|competitor
operator|.
name|settings
argument_list|()
operator|.
name|indices
argument_list|(
name|indices
argument_list|)
expr_stmt|;
name|competitor
operator|.
name|settings
argument_list|()
operator|.
name|types
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|types
operator|!=
literal|null
operator|&&
name|types
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|competitor
operator|.
name|settings
argument_list|()
operator|.
name|types
argument_list|(
name|types
argument_list|)
expr_stmt|;
block|}
name|competitor
operator|.
name|settings
argument_list|()
operator|.
name|buildSearchRequestsFromSettings
argument_list|()
expr_stmt|;
if|if
condition|(
name|competitor
operator|.
name|settings
argument_list|()
operator|.
name|clearCachesSettings
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|competitor
operator|.
name|settings
argument_list|()
operator|.
name|buildClearCachesRequestFromSettings
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Gets the benchmark settings      * @return  Settings      */
DECL|method|settings
specifier|public
name|BenchmarkSettings
name|settings
parameter_list|()
block|{
return|return
name|settings
return|;
block|}
comment|/**      * Gets the number of nodes in the cluster to execute on.      * @return  Number of nodes      */
DECL|method|numExecutorNodes
specifier|public
name|int
name|numExecutorNodes
parameter_list|()
block|{
return|return
name|numExecutorNodes
return|;
block|}
comment|/**      * Sets the number of nodes in the cluster to execute the benchmark on. We will attempt to      * execute on this many eligible nodes, but will not fail if fewer nodes are available.      * @param numExecutorNodes  Number of nodes      */
DECL|method|numExecutorNodes
specifier|public
name|void
name|numExecutorNodes
parameter_list|(
name|int
name|numExecutorNodes
parameter_list|)
block|{
name|this
operator|.
name|numExecutorNodes
operator|=
name|numExecutorNodes
expr_stmt|;
block|}
comment|/**      * Gets the name of the benchmark      * @return  Benchmark name      */
DECL|method|benchmarkName
specifier|public
name|String
name|benchmarkName
parameter_list|()
block|{
return|return
name|benchmarkName
return|;
block|}
comment|/**      * Sets the name of the benchmark      * @param benchmarkId   Benchmark name      */
DECL|method|benchmarkName
specifier|public
name|void
name|benchmarkName
parameter_list|(
name|String
name|benchmarkId
parameter_list|)
block|{
name|this
operator|.
name|benchmarkName
operator|=
name|benchmarkId
expr_stmt|;
block|}
comment|/**      * Whether to report detailed statistics      * @return  True if verbose on      */
DECL|method|verbose
specifier|public
name|boolean
name|verbose
parameter_list|()
block|{
return|return
name|verbose
return|;
block|}
comment|/**      * Whether to report detailed statistics      * @param verbose   True/false      */
DECL|method|verbose
specifier|public
name|void
name|verbose
parameter_list|(
name|boolean
name|verbose
parameter_list|)
block|{
name|this
operator|.
name|verbose
operator|=
name|verbose
expr_stmt|;
block|}
comment|/**      * Gets the list of percentiles to report      * @return The list of percentiles to report      */
DECL|method|percentiles
specifier|public
name|double
index|[]
name|percentiles
parameter_list|()
block|{
return|return
name|percentiles
return|;
block|}
comment|/**      * Sets the list of percentiles to report      * @param percentiles   The list of percentiles to report      */
DECL|method|percentiles
specifier|public
name|void
name|percentiles
parameter_list|(
name|double
index|[]
name|percentiles
parameter_list|)
block|{
name|this
operator|.
name|percentiles
operator|=
name|percentiles
expr_stmt|;
block|}
comment|/**      * Gets the list of benchmark competitions      * @return  Competitions      */
DECL|method|competitors
specifier|public
name|List
argument_list|<
name|BenchmarkCompetitor
argument_list|>
name|competitors
parameter_list|()
block|{
return|return
name|competitors
return|;
block|}
comment|/**      * Add a benchmark competition      * @param competitor    Competition      */
DECL|method|addCompetitor
specifier|public
name|void
name|addCompetitor
parameter_list|(
name|BenchmarkCompetitor
name|competitor
parameter_list|)
block|{
name|this
operator|.
name|competitors
operator|.
name|add
argument_list|(
name|competitor
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|benchmarkName
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
name|numExecutorNodes
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
name|verbose
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
name|percentiles
operator|=
name|in
operator|.
name|readDoubleArray
argument_list|()
expr_stmt|;
name|int
name|size
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|competitors
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|BenchmarkCompetitor
name|competitor
init|=
operator|new
name|BenchmarkCompetitor
argument_list|()
decl_stmt|;
name|competitor
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|competitors
operator|.
name|add
argument_list|(
name|competitor
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeString
argument_list|(
name|benchmarkName
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|numExecutorNodes
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|verbose
argument_list|)
expr_stmt|;
if|if
condition|(
name|percentiles
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|writeDoubleArray
argument_list|(
name|percentiles
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeVInt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|writeVInt
argument_list|(
name|competitors
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|BenchmarkCompetitor
name|competitor
range|:
name|competitors
control|)
block|{
name|competitor
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

