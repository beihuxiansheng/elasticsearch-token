begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.bench
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|bench
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilderString
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Detailed statistics for each iteration of a benchmark search competition.  */
end_comment

begin_class
DECL|class|CompetitionDetails
specifier|public
class|class
name|CompetitionDetails
implements|implements
name|ToXContent
block|{
DECL|field|nodeResults
specifier|private
name|List
argument_list|<
name|CompetitionNodeResult
argument_list|>
name|nodeResults
decl_stmt|;
DECL|method|CompetitionDetails
specifier|public
name|CompetitionDetails
parameter_list|(
name|List
argument_list|<
name|CompetitionNodeResult
argument_list|>
name|nodeResults
parameter_list|)
block|{
name|this
operator|.
name|nodeResults
operator|=
name|nodeResults
expr_stmt|;
block|}
comment|/**      * Gets node-level competition results      * @return  A list of node-level competition results      */
DECL|method|getNodeResults
specifier|public
name|List
argument_list|<
name|CompetitionNodeResult
argument_list|>
name|getNodeResults
parameter_list|()
block|{
return|return
name|nodeResults
return|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|highestIteration
init|=
name|highestCompletedIteration
argument_list|()
decl_stmt|;
name|computeAllStatistics
argument_list|()
expr_stmt|;
name|CompetitionIteration
name|prototypical
init|=
name|prototypicalIteration
argument_list|()
decl_stmt|;
name|builder
operator|.
name|startObject
argument_list|(
name|Fields
operator|.
name|ITERATIONS
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|highestIteration
condition|;
name|i
operator|++
control|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|ITERATION
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|startObject
argument_list|(
name|Fields
operator|.
name|MIN
argument_list|)
expr_stmt|;
for|for
control|(
name|CompetitionNodeResult
name|nodeResult
range|:
name|nodeResults
control|)
block|{
name|CompetitionIteration
name|iteration
init|=
name|nodeResult
operator|.
name|iterations
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|nodeResult
operator|.
name|nodeName
argument_list|()
argument_list|,
name|iteration
operator|==
literal|null
condition|?
name|Fields
operator|.
name|NULL
else|:
name|iteration
operator|.
name|min
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|startObject
argument_list|(
name|Fields
operator|.
name|MAX
argument_list|)
expr_stmt|;
for|for
control|(
name|CompetitionNodeResult
name|nodeResult
range|:
name|nodeResults
control|)
block|{
name|CompetitionIteration
name|iteration
init|=
name|nodeResult
operator|.
name|iterations
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|nodeResult
operator|.
name|nodeName
argument_list|()
argument_list|,
name|iteration
operator|==
literal|null
condition|?
name|Fields
operator|.
name|NULL
else|:
name|iteration
operator|.
name|max
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|startObject
argument_list|(
name|Fields
operator|.
name|MEAN
argument_list|)
expr_stmt|;
for|for
control|(
name|CompetitionNodeResult
name|nodeResult
range|:
name|nodeResults
control|)
block|{
name|CompetitionIteration
name|iteration
init|=
name|nodeResult
operator|.
name|iterations
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|nodeResult
operator|.
name|nodeName
argument_list|()
argument_list|,
name|iteration
operator|==
literal|null
condition|?
name|Fields
operator|.
name|NULL
else|:
name|iteration
operator|.
name|mean
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|startObject
argument_list|(
name|Fields
operator|.
name|TOTAL_TIME
argument_list|)
expr_stmt|;
for|for
control|(
name|CompetitionNodeResult
name|nodeResult
range|:
name|nodeResults
control|)
block|{
name|CompetitionIteration
name|iteration
init|=
name|nodeResult
operator|.
name|iterations
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|nodeResult
operator|.
name|nodeName
argument_list|()
argument_list|,
name|iteration
operator|==
literal|null
condition|?
name|Fields
operator|.
name|NULL
else|:
name|iteration
operator|.
name|totalTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|startObject
argument_list|(
name|Fields
operator|.
name|QPS
argument_list|)
expr_stmt|;
for|for
control|(
name|CompetitionNodeResult
name|nodeResult
range|:
name|nodeResults
control|)
block|{
name|CompetitionIteration
name|iteration
init|=
name|nodeResult
operator|.
name|iterations
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|nodeResult
operator|.
name|nodeName
argument_list|()
argument_list|,
name|iteration
operator|==
literal|null
condition|?
name|Fields
operator|.
name|NULL
else|:
name|iteration
operator|.
name|queriesPerSecond
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
comment|// All nodes track the same percentiles, so just choose a prototype to iterate
if|if
condition|(
name|prototypical
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Double
argument_list|,
name|Double
argument_list|>
name|entry
range|:
name|prototypical
operator|.
name|percentileValues
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
comment|// Change back to integral value for display purposes
name|builder
operator|.
name|startObject
argument_list|(
operator|new
name|XContentBuilderString
argument_list|(
literal|"percentile_"
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|CompetitionNodeResult
name|nodeResult
range|:
name|nodeResults
control|)
block|{
name|CompetitionIteration
name|iteration
init|=
name|nodeResult
operator|.
name|iterations
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|iteration
operator|!=
literal|null
condition|)
block|{
name|Double
name|value
init|=
name|iteration
operator|.
name|percentileValues
argument_list|()
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|nodeResult
operator|.
name|nodeName
argument_list|()
argument_list|,
operator|(
name|value
operator|.
name|isNaN
argument_list|()
operator|)
condition|?
literal|0.0
else|:
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|field
argument_list|(
name|nodeResult
operator|.
name|nodeName
argument_list|()
argument_list|,
name|Fields
operator|.
name|NULL
argument_list|)
expr_stmt|;
block|}
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
return|return
name|builder
return|;
block|}
comment|/**      * Calculates detailed statistics for each iteration. Should be called prior to      * accessing individual measurements.      */
DECL|method|computeAllStatistics
specifier|public
name|void
name|computeAllStatistics
parameter_list|()
block|{
for|for
control|(
name|CompetitionNodeResult
name|nodeResult
range|:
name|nodeResults
control|)
block|{
for|for
control|(
name|CompetitionIteration
name|iteration
range|:
name|nodeResult
operator|.
name|iterations
argument_list|()
control|)
block|{
name|iteration
operator|.
name|computeStatistics
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|prototypicalIteration
specifier|private
name|CompetitionIteration
name|prototypicalIteration
parameter_list|()
block|{
if|if
condition|(
name|nodeResults
operator|!=
literal|null
operator|&&
name|nodeResults
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|CompetitionNodeResult
name|nodeResult
init|=
name|nodeResults
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodeResult
operator|.
name|iterations
argument_list|()
operator|!=
literal|null
operator|&&
name|nodeResult
operator|.
name|iterations
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
name|nodeResult
operator|.
name|iterations
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|highestCompletedIteration
specifier|private
name|int
name|highestCompletedIteration
parameter_list|()
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|CompetitionNodeResult
name|nodeResult
range|:
name|nodeResults
control|)
block|{
name|count
operator|=
name|Math
operator|.
name|max
argument_list|(
name|count
argument_list|,
name|nodeResult
operator|.
name|completedIterations
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|count
return|;
block|}
DECL|class|Fields
specifier|static
specifier|final
class|class
name|Fields
block|{
DECL|field|ITERATIONS
specifier|static
specifier|final
name|XContentBuilderString
name|ITERATIONS
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"iterations"
argument_list|)
decl_stmt|;
DECL|field|ITERATION
specifier|static
specifier|final
name|XContentBuilderString
name|ITERATION
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"iteration"
argument_list|)
decl_stmt|;
DECL|field|TOTAL_TIME
specifier|static
specifier|final
name|XContentBuilderString
name|TOTAL_TIME
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"total_time"
argument_list|)
decl_stmt|;
DECL|field|MEAN
specifier|static
specifier|final
name|XContentBuilderString
name|MEAN
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"mean"
argument_list|)
decl_stmt|;
DECL|field|MIN
specifier|static
specifier|final
name|XContentBuilderString
name|MIN
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"min"
argument_list|)
decl_stmt|;
DECL|field|MAX
specifier|static
specifier|final
name|XContentBuilderString
name|MAX
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"max"
argument_list|)
decl_stmt|;
DECL|field|QPS
specifier|static
specifier|final
name|XContentBuilderString
name|QPS
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"qps"
argument_list|)
decl_stmt|;
DECL|field|NULL
specifier|static
specifier|final
name|XContentBuilderString
name|NULL
init|=
operator|new
name|XContentBuilderString
argument_list|(
literal|"null"
argument_list|)
decl_stmt|;
block|}
block|}
end_class

end_unit

