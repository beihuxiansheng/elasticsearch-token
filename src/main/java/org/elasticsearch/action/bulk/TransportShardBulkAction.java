begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.bulk
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|bulk
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchIllegalStateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchWrapperException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ExceptionsHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|RoutingMissingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|delete
operator|.
name|DeleteRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|delete
operator|.
name|DeleteResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|index
operator|.
name|IndexRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|index
operator|.
name|IndexResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|replication
operator|.
name|TransportShardReplicationOperationAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|update
operator|.
name|UpdateHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|update
operator|.
name|UpdateRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|update
operator|.
name|UpdateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|action
operator|.
name|index
operator|.
name|MappingUpdatedAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|action
operator|.
name|shard
operator|.
name|ShardStateAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|block
operator|.
name|ClusterBlockException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|block
operator|.
name|ClusterBlockLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|MappingMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|Tuple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|VersionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|DocumentAlreadyExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|Engine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|VersionConflictEngineException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|DocumentMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MapperService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|SourceToParse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|service
operator|.
name|IndexShard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|IndicesService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportRequestOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Performs the index operation.  */
end_comment

begin_class
DECL|class|TransportShardBulkAction
specifier|public
class|class
name|TransportShardBulkAction
extends|extends
name|TransportShardReplicationOperationAction
argument_list|<
name|BulkShardRequest
argument_list|,
name|BulkShardRequest
argument_list|,
name|BulkShardResponse
argument_list|>
block|{
DECL|field|mappingUpdatedAction
specifier|private
specifier|final
name|MappingUpdatedAction
name|mappingUpdatedAction
decl_stmt|;
DECL|field|updateHelper
specifier|private
specifier|final
name|UpdateHelper
name|updateHelper
decl_stmt|;
DECL|field|allowIdGeneration
specifier|private
specifier|final
name|boolean
name|allowIdGeneration
decl_stmt|;
annotation|@
name|Inject
DECL|method|TransportShardBulkAction
specifier|public
name|TransportShardBulkAction
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|TransportService
name|transportService
parameter_list|,
name|ClusterService
name|clusterService
parameter_list|,
name|IndicesService
name|indicesService
parameter_list|,
name|ThreadPool
name|threadPool
parameter_list|,
name|ShardStateAction
name|shardStateAction
parameter_list|,
name|MappingUpdatedAction
name|mappingUpdatedAction
parameter_list|,
name|UpdateHelper
name|updateHelper
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|,
name|transportService
argument_list|,
name|clusterService
argument_list|,
name|indicesService
argument_list|,
name|threadPool
argument_list|,
name|shardStateAction
argument_list|)
expr_stmt|;
name|this
operator|.
name|mappingUpdatedAction
operator|=
name|mappingUpdatedAction
expr_stmt|;
name|this
operator|.
name|updateHelper
operator|=
name|updateHelper
expr_stmt|;
name|this
operator|.
name|allowIdGeneration
operator|=
name|settings
operator|.
name|getAsBoolean
argument_list|(
literal|"action.allow_id_generation"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|executor
specifier|protected
name|String
name|executor
parameter_list|()
block|{
return|return
name|ThreadPool
operator|.
name|Names
operator|.
name|BULK
return|;
block|}
annotation|@
name|Override
DECL|method|checkWriteConsistency
specifier|protected
name|boolean
name|checkWriteConsistency
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|transportOptions
specifier|protected
name|TransportRequestOptions
name|transportOptions
parameter_list|()
block|{
return|return
name|BulkAction
operator|.
name|INSTANCE
operator|.
name|transportOptions
argument_list|(
name|settings
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|newRequestInstance
specifier|protected
name|BulkShardRequest
name|newRequestInstance
parameter_list|()
block|{
return|return
operator|new
name|BulkShardRequest
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|newReplicaRequestInstance
specifier|protected
name|BulkShardRequest
name|newReplicaRequestInstance
parameter_list|()
block|{
return|return
operator|new
name|BulkShardRequest
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|newResponseInstance
specifier|protected
name|BulkShardResponse
name|newResponseInstance
parameter_list|()
block|{
return|return
operator|new
name|BulkShardResponse
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|transportAction
specifier|protected
name|String
name|transportAction
parameter_list|()
block|{
return|return
name|BulkAction
operator|.
name|NAME
operator|+
literal|"/shard"
return|;
block|}
annotation|@
name|Override
DECL|method|checkGlobalBlock
specifier|protected
name|ClusterBlockException
name|checkGlobalBlock
parameter_list|(
name|ClusterState
name|state
parameter_list|,
name|BulkShardRequest
name|request
parameter_list|)
block|{
return|return
name|state
operator|.
name|blocks
argument_list|()
operator|.
name|globalBlockedException
argument_list|(
name|ClusterBlockLevel
operator|.
name|WRITE
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|checkRequestBlock
specifier|protected
name|ClusterBlockException
name|checkRequestBlock
parameter_list|(
name|ClusterState
name|state
parameter_list|,
name|BulkShardRequest
name|request
parameter_list|)
block|{
return|return
name|state
operator|.
name|blocks
argument_list|()
operator|.
name|indexBlockedException
argument_list|(
name|ClusterBlockLevel
operator|.
name|WRITE
argument_list|,
name|request
operator|.
name|index
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|shards
specifier|protected
name|ShardIterator
name|shards
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|BulkShardRequest
name|request
parameter_list|)
block|{
return|return
name|clusterState
operator|.
name|routingTable
argument_list|()
operator|.
name|index
argument_list|(
name|request
operator|.
name|index
argument_list|()
argument_list|)
operator|.
name|shard
argument_list|(
name|request
operator|.
name|shardId
argument_list|()
argument_list|)
operator|.
name|shardsIt
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|shardOperationOnPrimary
specifier|protected
name|PrimaryResponse
argument_list|<
name|BulkShardResponse
argument_list|,
name|BulkShardRequest
argument_list|>
name|shardOperationOnPrimary
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|PrimaryOperationRequest
name|shardRequest
parameter_list|)
block|{
specifier|final
name|BulkShardRequest
name|request
init|=
name|shardRequest
operator|.
name|request
decl_stmt|;
name|IndexShard
name|indexShard
init|=
name|indicesService
operator|.
name|indexServiceSafe
argument_list|(
name|shardRequest
operator|.
name|request
operator|.
name|index
argument_list|()
argument_list|)
operator|.
name|shardSafe
argument_list|(
name|shardRequest
operator|.
name|shardId
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|IndexingOperation
index|[]
name|ops
init|=
literal|null
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|Tuple
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|mappingsToUpdate
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
name|BulkItemResponse
index|[]
name|responses
init|=
operator|new
name|BulkItemResponse
index|[
name|request
operator|.
name|items
argument_list|()
operator|.
name|length
index|]
decl_stmt|;
name|long
index|[]
name|preVersions
init|=
operator|new
name|long
index|[
name|request
operator|.
name|items
argument_list|()
operator|.
name|length
index|]
decl_stmt|;
name|VersionType
index|[]
name|preVersionTypes
init|=
operator|new
name|VersionType
index|[
name|request
operator|.
name|items
argument_list|()
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|requestIndex
init|=
literal|0
init|;
name|requestIndex
operator|<
name|request
operator|.
name|items
argument_list|()
operator|.
name|length
condition|;
name|requestIndex
operator|++
control|)
block|{
name|BulkItemRequest
name|item
init|=
name|request
operator|.
name|items
argument_list|()
index|[
name|requestIndex
index|]
decl_stmt|;
if|if
condition|(
name|item
operator|.
name|request
argument_list|()
operator|instanceof
name|IndexRequest
condition|)
block|{
name|IndexRequest
name|indexRequest
init|=
operator|(
name|IndexRequest
operator|)
name|item
operator|.
name|request
argument_list|()
decl_stmt|;
name|preVersions
index|[
name|requestIndex
index|]
operator|=
name|indexRequest
operator|.
name|version
argument_list|()
expr_stmt|;
name|preVersionTypes
index|[
name|requestIndex
index|]
operator|=
name|indexRequest
operator|.
name|versionType
argument_list|()
expr_stmt|;
try|try
block|{
try|try
block|{
name|WriteResult
name|result
init|=
name|shardIndexOperation
argument_list|(
name|request
argument_list|,
name|indexRequest
argument_list|,
name|clusterState
argument_list|,
name|indexShard
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// add the response
name|IndexResponse
name|indexResponse
init|=
name|result
operator|.
name|response
argument_list|()
decl_stmt|;
name|responses
index|[
name|requestIndex
index|]
operator|=
operator|new
name|BulkItemResponse
argument_list|(
name|item
operator|.
name|id
argument_list|()
argument_list|,
name|indexRequest
operator|.
name|opType
argument_list|()
operator|.
name|lowercase
argument_list|()
argument_list|,
name|indexResponse
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|mappingToUpdate
operator|!=
literal|null
condition|)
block|{
name|mappingsToUpdate
operator|.
name|add
argument_list|(
name|result
operator|.
name|mappingToUpdate
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|result
operator|.
name|op
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|ops
operator|==
literal|null
condition|)
block|{
name|ops
operator|=
operator|new
name|Engine
operator|.
name|IndexingOperation
index|[
name|request
operator|.
name|items
argument_list|()
operator|.
name|length
index|]
expr_stmt|;
block|}
name|ops
index|[
name|requestIndex
index|]
operator|=
name|result
operator|.
name|op
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|WriteFailure
name|e
parameter_list|)
block|{
name|Tuple
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|mappingsToUpdateOnFailure
init|=
name|e
operator|.
name|mappingsToUpdate
decl_stmt|;
if|if
condition|(
name|mappingsToUpdateOnFailure
operator|!=
literal|null
condition|)
block|{
name|mappingsToUpdate
operator|.
name|add
argument_list|(
name|mappingsToUpdateOnFailure
argument_list|)
expr_stmt|;
block|}
throw|throw
name|e
operator|.
name|getCause
argument_list|()
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
comment|// rethrow the failure if we are going to retry on primary and let parent failure to handle it
if|if
condition|(
name|retryPrimaryException
argument_list|(
name|e
argument_list|)
condition|)
block|{
comment|// restore updated versions...
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|requestIndex
condition|;
name|j
operator|++
control|)
block|{
name|applyVersion
argument_list|(
name|request
operator|.
name|items
argument_list|()
index|[
name|j
index|]
argument_list|,
name|preVersions
index|[
name|j
index|]
argument_list|,
name|preVersionTypes
index|[
name|j
index|]
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Tuple
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|mappingToUpdate
range|:
name|mappingsToUpdate
control|)
block|{
name|updateMappingOnMaster
argument_list|(
name|mappingToUpdate
operator|.
name|v1
argument_list|()
argument_list|,
name|mappingToUpdate
operator|.
name|v2
argument_list|()
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|(
name|ElasticsearchException
operator|)
name|e
throw|;
block|}
if|if
condition|(
name|e
operator|instanceof
name|ElasticsearchException
operator|&&
operator|(
operator|(
name|ElasticsearchException
operator|)
name|e
operator|)
operator|.
name|status
argument_list|()
operator|==
name|RestStatus
operator|.
name|CONFLICT
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"[{}][{}] failed to execute bulk item (index) {}"
argument_list|,
name|e
argument_list|,
name|shardRequest
operator|.
name|request
operator|.
name|index
argument_list|()
argument_list|,
name|shardRequest
operator|.
name|shardId
argument_list|,
name|indexRequest
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"[{}][{}] failed to execute bulk item (index) {}"
argument_list|,
name|e
argument_list|,
name|shardRequest
operator|.
name|request
operator|.
name|index
argument_list|()
argument_list|,
name|shardRequest
operator|.
name|shardId
argument_list|,
name|indexRequest
argument_list|)
expr_stmt|;
block|}
name|responses
index|[
name|requestIndex
index|]
operator|=
operator|new
name|BulkItemResponse
argument_list|(
name|item
operator|.
name|id
argument_list|()
argument_list|,
name|indexRequest
operator|.
name|opType
argument_list|()
operator|.
name|lowercase
argument_list|()
argument_list|,
operator|new
name|BulkItemResponse
operator|.
name|Failure
argument_list|(
name|indexRequest
operator|.
name|index
argument_list|()
argument_list|,
name|indexRequest
operator|.
name|type
argument_list|()
argument_list|,
name|indexRequest
operator|.
name|id
argument_list|()
argument_list|,
name|e
argument_list|)
argument_list|)
expr_stmt|;
comment|// nullify the request so it won't execute on the replicas
name|request
operator|.
name|items
argument_list|()
index|[
name|requestIndex
index|]
operator|=
literal|null
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|item
operator|.
name|request
argument_list|()
operator|instanceof
name|DeleteRequest
condition|)
block|{
name|DeleteRequest
name|deleteRequest
init|=
operator|(
name|DeleteRequest
operator|)
name|item
operator|.
name|request
argument_list|()
decl_stmt|;
name|preVersions
index|[
name|requestIndex
index|]
operator|=
name|deleteRequest
operator|.
name|version
argument_list|()
expr_stmt|;
name|preVersionTypes
index|[
name|requestIndex
index|]
operator|=
name|deleteRequest
operator|.
name|versionType
argument_list|()
expr_stmt|;
try|try
block|{
comment|// add the response
name|DeleteResponse
name|deleteResponse
init|=
name|shardDeleteOperation
argument_list|(
name|deleteRequest
argument_list|,
name|indexShard
argument_list|)
operator|.
name|response
argument_list|()
decl_stmt|;
name|responses
index|[
name|requestIndex
index|]
operator|=
operator|new
name|BulkItemResponse
argument_list|(
name|item
operator|.
name|id
argument_list|()
argument_list|,
literal|"delete"
argument_list|,
name|deleteResponse
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
comment|// rethrow the failure if we are going to retry on primary and let parent failure to handle it
if|if
condition|(
name|retryPrimaryException
argument_list|(
name|e
argument_list|)
condition|)
block|{
comment|// restore updated versions...
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|requestIndex
condition|;
name|j
operator|++
control|)
block|{
name|applyVersion
argument_list|(
name|request
operator|.
name|items
argument_list|()
index|[
name|j
index|]
argument_list|,
name|preVersions
index|[
name|j
index|]
argument_list|,
name|preVersionTypes
index|[
name|j
index|]
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|(
name|ElasticsearchException
operator|)
name|e
throw|;
block|}
if|if
condition|(
name|e
operator|instanceof
name|ElasticsearchException
operator|&&
operator|(
operator|(
name|ElasticsearchException
operator|)
name|e
operator|)
operator|.
name|status
argument_list|()
operator|==
name|RestStatus
operator|.
name|CONFLICT
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"[{}][{}] failed to execute bulk item (delete) {}"
argument_list|,
name|e
argument_list|,
name|shardRequest
operator|.
name|request
operator|.
name|index
argument_list|()
argument_list|,
name|shardRequest
operator|.
name|shardId
argument_list|,
name|deleteRequest
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"[{}][{}] failed to execute bulk item (delete) {}"
argument_list|,
name|e
argument_list|,
name|shardRequest
operator|.
name|request
operator|.
name|index
argument_list|()
argument_list|,
name|shardRequest
operator|.
name|shardId
argument_list|,
name|deleteRequest
argument_list|)
expr_stmt|;
block|}
name|responses
index|[
name|requestIndex
index|]
operator|=
operator|new
name|BulkItemResponse
argument_list|(
name|item
operator|.
name|id
argument_list|()
argument_list|,
literal|"delete"
argument_list|,
operator|new
name|BulkItemResponse
operator|.
name|Failure
argument_list|(
name|deleteRequest
operator|.
name|index
argument_list|()
argument_list|,
name|deleteRequest
operator|.
name|type
argument_list|()
argument_list|,
name|deleteRequest
operator|.
name|id
argument_list|()
argument_list|,
name|e
argument_list|)
argument_list|)
expr_stmt|;
comment|// nullify the request so it won't execute on the replicas
name|request
operator|.
name|items
argument_list|()
index|[
name|requestIndex
index|]
operator|=
literal|null
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|item
operator|.
name|request
argument_list|()
operator|instanceof
name|UpdateRequest
condition|)
block|{
name|UpdateRequest
name|updateRequest
init|=
operator|(
name|UpdateRequest
operator|)
name|item
operator|.
name|request
argument_list|()
decl_stmt|;
name|preVersions
index|[
name|requestIndex
index|]
operator|=
name|updateRequest
operator|.
name|version
argument_list|()
expr_stmt|;
name|preVersionTypes
index|[
name|requestIndex
index|]
operator|=
name|updateRequest
operator|.
name|versionType
argument_list|()
expr_stmt|;
comment|//  We need to do the requested retries plus the initial attempt. We don't do< 1+retry_on_conflict because retry_on_conflict may be Integer.MAX_VALUE
for|for
control|(
name|int
name|updateAttemptsCount
init|=
literal|0
init|;
name|updateAttemptsCount
operator|<=
name|updateRequest
operator|.
name|retryOnConflict
argument_list|()
condition|;
name|updateAttemptsCount
operator|++
control|)
block|{
name|UpdateResult
name|updateResult
decl_stmt|;
try|try
block|{
name|updateResult
operator|=
name|shardUpdateOperation
argument_list|(
name|clusterState
argument_list|,
name|request
argument_list|,
name|updateRequest
argument_list|,
name|indexShard
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|updateResult
operator|=
operator|new
name|UpdateResult
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|t
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|updateResult
operator|.
name|success
argument_list|()
condition|)
block|{
switch|switch
condition|(
name|updateResult
operator|.
name|result
operator|.
name|operation
argument_list|()
condition|)
block|{
case|case
name|UPSERT
case|:
case|case
name|INDEX
case|:
name|WriteResult
name|result
init|=
name|updateResult
operator|.
name|writeResult
decl_stmt|;
name|IndexRequest
name|indexRequest
init|=
name|updateResult
operator|.
name|request
argument_list|()
decl_stmt|;
name|BytesReference
name|indexSourceAsBytes
init|=
name|indexRequest
operator|.
name|source
argument_list|()
decl_stmt|;
comment|// add the response
name|IndexResponse
name|indexResponse
init|=
name|result
operator|.
name|response
argument_list|()
decl_stmt|;
name|UpdateResponse
name|updateResponse
init|=
operator|new
name|UpdateResponse
argument_list|(
name|indexResponse
operator|.
name|getIndex
argument_list|()
argument_list|,
name|indexResponse
operator|.
name|getType
argument_list|()
argument_list|,
name|indexResponse
operator|.
name|getId
argument_list|()
argument_list|,
name|indexResponse
operator|.
name|getVersion
argument_list|()
argument_list|,
name|indexResponse
operator|.
name|isCreated
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|updateRequest
operator|.
name|fields
argument_list|()
operator|!=
literal|null
operator|&&
name|updateRequest
operator|.
name|fields
argument_list|()
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|Tuple
argument_list|<
name|XContentType
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|sourceAndContent
init|=
name|XContentHelper
operator|.
name|convertToMap
argument_list|(
name|indexSourceAsBytes
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|updateResponse
operator|.
name|setGetResult
argument_list|(
name|updateHelper
operator|.
name|extractGetResult
argument_list|(
name|updateRequest
argument_list|,
name|indexResponse
operator|.
name|getVersion
argument_list|()
argument_list|,
name|sourceAndContent
operator|.
name|v2
argument_list|()
argument_list|,
name|sourceAndContent
operator|.
name|v1
argument_list|()
argument_list|,
name|indexSourceAsBytes
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|responses
index|[
name|requestIndex
index|]
operator|=
operator|new
name|BulkItemResponse
argument_list|(
name|item
operator|.
name|id
argument_list|()
argument_list|,
literal|"update"
argument_list|,
name|updateResponse
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|mappingToUpdate
operator|!=
literal|null
condition|)
block|{
name|mappingsToUpdate
operator|.
name|add
argument_list|(
name|result
operator|.
name|mappingToUpdate
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|result
operator|.
name|op
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|ops
operator|==
literal|null
condition|)
block|{
name|ops
operator|=
operator|new
name|Engine
operator|.
name|IndexingOperation
index|[
name|request
operator|.
name|items
argument_list|()
operator|.
name|length
index|]
expr_stmt|;
block|}
name|ops
index|[
name|requestIndex
index|]
operator|=
name|result
operator|.
name|op
expr_stmt|;
block|}
comment|// Replace the update request to the translated index request to execute on the replica.
name|request
operator|.
name|items
argument_list|()
index|[
name|requestIndex
index|]
operator|=
operator|new
name|BulkItemRequest
argument_list|(
name|request
operator|.
name|items
argument_list|()
index|[
name|requestIndex
index|]
operator|.
name|id
argument_list|()
argument_list|,
name|indexRequest
argument_list|)
expr_stmt|;
break|break;
case|case
name|DELETE
case|:
name|DeleteResponse
name|response
init|=
name|updateResult
operator|.
name|writeResult
operator|.
name|response
argument_list|()
decl_stmt|;
name|DeleteRequest
name|deleteRequest
init|=
name|updateResult
operator|.
name|request
argument_list|()
decl_stmt|;
name|updateResponse
operator|=
operator|new
name|UpdateResponse
argument_list|(
name|response
operator|.
name|getIndex
argument_list|()
argument_list|,
name|response
operator|.
name|getType
argument_list|()
argument_list|,
name|response
operator|.
name|getId
argument_list|()
argument_list|,
name|response
operator|.
name|getVersion
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|updateResponse
operator|.
name|setGetResult
argument_list|(
name|updateHelper
operator|.
name|extractGetResult
argument_list|(
name|updateRequest
argument_list|,
name|response
operator|.
name|getVersion
argument_list|()
argument_list|,
name|updateResult
operator|.
name|result
operator|.
name|updatedSourceAsMap
argument_list|()
argument_list|,
name|updateResult
operator|.
name|result
operator|.
name|updateSourceContentType
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|responses
index|[
name|requestIndex
index|]
operator|=
operator|new
name|BulkItemResponse
argument_list|(
name|item
operator|.
name|id
argument_list|()
argument_list|,
literal|"update"
argument_list|,
name|updateResponse
argument_list|)
expr_stmt|;
comment|// Replace the update request to the translated delete request to execute on the replica.
name|request
operator|.
name|items
argument_list|()
index|[
name|requestIndex
index|]
operator|=
operator|new
name|BulkItemRequest
argument_list|(
name|request
operator|.
name|items
argument_list|()
index|[
name|requestIndex
index|]
operator|.
name|id
argument_list|()
argument_list|,
name|deleteRequest
argument_list|)
expr_stmt|;
break|break;
case|case
name|NONE
case|:
name|responses
index|[
name|requestIndex
index|]
operator|=
operator|new
name|BulkItemResponse
argument_list|(
name|item
operator|.
name|id
argument_list|()
argument_list|,
literal|"update"
argument_list|,
name|updateResult
operator|.
name|noopResult
argument_list|)
expr_stmt|;
name|request
operator|.
name|items
argument_list|()
index|[
name|requestIndex
index|]
operator|=
literal|null
expr_stmt|;
comment|// No need to go to the replica
break|break;
block|}
comment|// NOTE: Breaking out of the retry_on_conflict loop!
break|break;
block|}
elseif|else
if|if
condition|(
name|updateResult
operator|.
name|failure
argument_list|()
condition|)
block|{
name|Throwable
name|t
init|=
name|updateResult
operator|.
name|error
decl_stmt|;
if|if
condition|(
name|updateResult
operator|.
name|retry
condition|)
block|{
comment|// updateAttemptCount is 0 based and marks current attempt, if it's equal to retryOnConflict we are going out of the iteration
if|if
condition|(
name|updateAttemptsCount
operator|>=
name|updateRequest
operator|.
name|retryOnConflict
argument_list|()
condition|)
block|{
comment|// we can't try any more
name|responses
index|[
name|requestIndex
index|]
operator|=
operator|new
name|BulkItemResponse
argument_list|(
name|item
operator|.
name|id
argument_list|()
argument_list|,
literal|"update"
argument_list|,
operator|new
name|BulkItemResponse
operator|.
name|Failure
argument_list|(
name|updateRequest
operator|.
name|index
argument_list|()
argument_list|,
name|updateRequest
operator|.
name|type
argument_list|()
argument_list|,
name|updateRequest
operator|.
name|id
argument_list|()
argument_list|,
name|t
argument_list|)
argument_list|)
expr_stmt|;
name|request
operator|.
name|items
argument_list|()
index|[
name|requestIndex
index|]
operator|=
literal|null
expr_stmt|;
comment|// do not send to replicas
block|}
block|}
else|else
block|{
comment|// rethrow the failure if we are going to retry on primary and let parent failure to handle it
if|if
condition|(
name|retryPrimaryException
argument_list|(
name|t
argument_list|)
condition|)
block|{
comment|// restore updated versions...
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|requestIndex
condition|;
name|j
operator|++
control|)
block|{
name|applyVersion
argument_list|(
name|request
operator|.
name|items
argument_list|()
index|[
name|j
index|]
argument_list|,
name|preVersions
index|[
name|j
index|]
argument_list|,
name|preVersionTypes
index|[
name|j
index|]
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|(
name|ElasticsearchException
operator|)
name|t
throw|;
block|}
if|if
condition|(
name|updateResult
operator|.
name|result
operator|==
literal|null
condition|)
block|{
name|responses
index|[
name|requestIndex
index|]
operator|=
operator|new
name|BulkItemResponse
argument_list|(
name|item
operator|.
name|id
argument_list|()
argument_list|,
literal|"update"
argument_list|,
operator|new
name|BulkItemResponse
operator|.
name|Failure
argument_list|(
name|updateRequest
operator|.
name|index
argument_list|()
argument_list|,
name|updateRequest
operator|.
name|type
argument_list|()
argument_list|,
name|updateRequest
operator|.
name|id
argument_list|()
argument_list|,
name|t
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
switch|switch
condition|(
name|updateResult
operator|.
name|result
operator|.
name|operation
argument_list|()
condition|)
block|{
case|case
name|UPSERT
case|:
case|case
name|INDEX
case|:
name|IndexRequest
name|indexRequest
init|=
name|updateResult
operator|.
name|request
argument_list|()
decl_stmt|;
if|if
condition|(
name|t
operator|instanceof
name|ElasticsearchException
operator|&&
operator|(
operator|(
name|ElasticsearchException
operator|)
name|t
operator|)
operator|.
name|status
argument_list|()
operator|==
name|RestStatus
operator|.
name|CONFLICT
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"[{}][{}] failed to execute bulk item (index) {}"
argument_list|,
name|t
argument_list|,
name|shardRequest
operator|.
name|request
operator|.
name|index
argument_list|()
argument_list|,
name|shardRequest
operator|.
name|shardId
argument_list|,
name|indexRequest
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"[{}][{}] failed to execute bulk item (index) {}"
argument_list|,
name|t
argument_list|,
name|shardRequest
operator|.
name|request
operator|.
name|index
argument_list|()
argument_list|,
name|shardRequest
operator|.
name|shardId
argument_list|,
name|indexRequest
argument_list|)
expr_stmt|;
block|}
name|responses
index|[
name|requestIndex
index|]
operator|=
operator|new
name|BulkItemResponse
argument_list|(
name|item
operator|.
name|id
argument_list|()
argument_list|,
name|indexRequest
operator|.
name|opType
argument_list|()
operator|.
name|lowercase
argument_list|()
argument_list|,
operator|new
name|BulkItemResponse
operator|.
name|Failure
argument_list|(
name|indexRequest
operator|.
name|index
argument_list|()
argument_list|,
name|indexRequest
operator|.
name|type
argument_list|()
argument_list|,
name|indexRequest
operator|.
name|id
argument_list|()
argument_list|,
name|t
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|DELETE
case|:
name|DeleteRequest
name|deleteRequest
init|=
name|updateResult
operator|.
name|request
argument_list|()
decl_stmt|;
if|if
condition|(
name|t
operator|instanceof
name|ElasticsearchException
operator|&&
operator|(
operator|(
name|ElasticsearchException
operator|)
name|t
operator|)
operator|.
name|status
argument_list|()
operator|==
name|RestStatus
operator|.
name|CONFLICT
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"[{}][{}] failed to execute bulk item (delete) {}"
argument_list|,
name|t
argument_list|,
name|shardRequest
operator|.
name|request
operator|.
name|index
argument_list|()
argument_list|,
name|shardRequest
operator|.
name|shardId
argument_list|,
name|deleteRequest
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"[{}][{}] failed to execute bulk item (delete) {}"
argument_list|,
name|t
argument_list|,
name|shardRequest
operator|.
name|request
operator|.
name|index
argument_list|()
argument_list|,
name|shardRequest
operator|.
name|shardId
argument_list|,
name|deleteRequest
argument_list|)
expr_stmt|;
block|}
name|responses
index|[
name|requestIndex
index|]
operator|=
operator|new
name|BulkItemResponse
argument_list|(
name|item
operator|.
name|id
argument_list|()
argument_list|,
literal|"delete"
argument_list|,
operator|new
name|BulkItemResponse
operator|.
name|Failure
argument_list|(
name|deleteRequest
operator|.
name|index
argument_list|()
argument_list|,
name|deleteRequest
operator|.
name|type
argument_list|()
argument_list|,
name|deleteRequest
operator|.
name|id
argument_list|()
argument_list|,
name|t
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
comment|// nullify the request so it won't execute on the replicas
name|request
operator|.
name|items
argument_list|()
index|[
name|requestIndex
index|]
operator|=
literal|null
expr_stmt|;
comment|// NOTE: Breaking out of the retry_on_conflict loop!
break|break;
block|}
block|}
block|}
block|}
assert|assert
name|responses
index|[
name|requestIndex
index|]
operator|!=
literal|null
assert|;
comment|// we must have set a response somewhere.
assert|assert
name|preVersionTypes
index|[
name|requestIndex
index|]
operator|!=
literal|null
assert|;
block|}
for|for
control|(
name|Tuple
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|mappingToUpdate
range|:
name|mappingsToUpdate
control|)
block|{
name|updateMappingOnMaster
argument_list|(
name|mappingToUpdate
operator|.
name|v1
argument_list|()
argument_list|,
name|mappingToUpdate
operator|.
name|v2
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|request
operator|.
name|refresh
argument_list|()
condition|)
block|{
try|try
block|{
name|indexShard
operator|.
name|refresh
argument_list|(
operator|new
name|Engine
operator|.
name|Refresh
argument_list|(
literal|"refresh_flag_bulk"
argument_list|)
operator|.
name|force
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
name|BulkShardResponse
name|response
init|=
operator|new
name|BulkShardResponse
argument_list|(
operator|new
name|ShardId
argument_list|(
name|request
operator|.
name|index
argument_list|()
argument_list|,
name|request
operator|.
name|shardId
argument_list|()
argument_list|)
argument_list|,
name|responses
argument_list|)
decl_stmt|;
return|return
operator|new
name|PrimaryResponse
argument_list|<>
argument_list|(
name|shardRequest
operator|.
name|request
argument_list|,
name|response
argument_list|,
name|ops
argument_list|)
return|;
block|}
DECL|class|WriteResult
specifier|static
class|class
name|WriteResult
block|{
DECL|field|response
specifier|final
name|Object
name|response
decl_stmt|;
DECL|field|mappingToUpdate
specifier|final
name|Tuple
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|mappingToUpdate
decl_stmt|;
DECL|field|op
specifier|final
name|Engine
operator|.
name|IndexingOperation
name|op
decl_stmt|;
DECL|method|WriteResult
name|WriteResult
parameter_list|(
name|Object
name|response
parameter_list|,
name|Tuple
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|mappingToUpdate
parameter_list|,
name|Engine
operator|.
name|IndexingOperation
name|op
parameter_list|)
block|{
name|this
operator|.
name|response
operator|=
name|response
expr_stmt|;
name|this
operator|.
name|mappingToUpdate
operator|=
name|mappingToUpdate
expr_stmt|;
name|this
operator|.
name|op
operator|=
name|op
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|response
parameter_list|<
name|T
parameter_list|>
name|T
name|response
parameter_list|()
block|{
return|return
operator|(
name|T
operator|)
name|response
return|;
block|}
block|}
DECL|class|WriteFailure
specifier|static
class|class
name|WriteFailure
extends|extends
name|ElasticsearchException
implements|implements
name|ElasticsearchWrapperException
block|{
annotation|@
name|Nullable
DECL|field|mappingsToUpdate
specifier|final
name|Tuple
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|mappingsToUpdate
decl_stmt|;
DECL|method|WriteFailure
name|WriteFailure
parameter_list|(
name|Throwable
name|cause
parameter_list|,
name|Tuple
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|mappingsToUpdate
parameter_list|)
block|{
name|super
argument_list|(
literal|null
argument_list|,
name|cause
argument_list|)
expr_stmt|;
assert|assert
name|cause
operator|!=
literal|null
assert|;
name|this
operator|.
name|mappingsToUpdate
operator|=
name|mappingsToUpdate
expr_stmt|;
block|}
block|}
DECL|method|shardIndexOperation
specifier|private
name|WriteResult
name|shardIndexOperation
parameter_list|(
name|BulkShardRequest
name|request
parameter_list|,
name|IndexRequest
name|indexRequest
parameter_list|,
name|ClusterState
name|clusterState
parameter_list|,
name|IndexShard
name|indexShard
parameter_list|,
name|boolean
name|processed
parameter_list|)
block|{
comment|// validate, if routing is required, that we got routing
name|MappingMetaData
name|mappingMd
init|=
name|clusterState
operator|.
name|metaData
argument_list|()
operator|.
name|index
argument_list|(
name|request
operator|.
name|index
argument_list|()
argument_list|)
operator|.
name|mappingOrDefault
argument_list|(
name|indexRequest
operator|.
name|type
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|mappingMd
operator|!=
literal|null
operator|&&
name|mappingMd
operator|.
name|routing
argument_list|()
operator|.
name|required
argument_list|()
condition|)
block|{
if|if
condition|(
name|indexRequest
operator|.
name|routing
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RoutingMissingException
argument_list|(
name|indexRequest
operator|.
name|index
argument_list|()
argument_list|,
name|indexRequest
operator|.
name|type
argument_list|()
argument_list|,
name|indexRequest
operator|.
name|id
argument_list|()
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
operator|!
name|processed
condition|)
block|{
name|indexRequest
operator|.
name|process
argument_list|(
name|clusterState
operator|.
name|metaData
argument_list|()
argument_list|,
name|indexRequest
operator|.
name|index
argument_list|()
argument_list|,
name|mappingMd
argument_list|,
name|allowIdGeneration
argument_list|)
expr_stmt|;
block|}
name|SourceToParse
name|sourceToParse
init|=
name|SourceToParse
operator|.
name|source
argument_list|(
name|SourceToParse
operator|.
name|Origin
operator|.
name|PRIMARY
argument_list|,
name|indexRequest
operator|.
name|source
argument_list|()
argument_list|)
operator|.
name|type
argument_list|(
name|indexRequest
operator|.
name|type
argument_list|()
argument_list|)
operator|.
name|id
argument_list|(
name|indexRequest
operator|.
name|id
argument_list|()
argument_list|)
operator|.
name|routing
argument_list|(
name|indexRequest
operator|.
name|routing
argument_list|()
argument_list|)
operator|.
name|parent
argument_list|(
name|indexRequest
operator|.
name|parent
argument_list|()
argument_list|)
operator|.
name|timestamp
argument_list|(
name|indexRequest
operator|.
name|timestamp
argument_list|()
argument_list|)
operator|.
name|ttl
argument_list|(
name|indexRequest
operator|.
name|ttl
argument_list|()
argument_list|)
decl_stmt|;
comment|// update mapping on master if needed, we won't update changes to the same type, since once its changed, it won't have mappers added
name|Tuple
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|mappingsToUpdate
init|=
literal|null
decl_stmt|;
name|long
name|version
decl_stmt|;
name|boolean
name|created
decl_stmt|;
name|Engine
operator|.
name|IndexingOperation
name|op
decl_stmt|;
try|try
block|{
if|if
condition|(
name|indexRequest
operator|.
name|opType
argument_list|()
operator|==
name|IndexRequest
operator|.
name|OpType
operator|.
name|INDEX
condition|)
block|{
name|Engine
operator|.
name|Index
name|index
init|=
name|indexShard
operator|.
name|prepareIndex
argument_list|(
name|sourceToParse
argument_list|)
operator|.
name|version
argument_list|(
name|indexRequest
operator|.
name|version
argument_list|()
argument_list|)
operator|.
name|versionType
argument_list|(
name|indexRequest
operator|.
name|versionType
argument_list|()
argument_list|)
operator|.
name|origin
argument_list|(
name|Engine
operator|.
name|Operation
operator|.
name|Origin
operator|.
name|PRIMARY
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|.
name|parsedDoc
argument_list|()
operator|.
name|mappingsModified
argument_list|()
condition|)
block|{
name|mappingsToUpdate
operator|=
name|Tuple
operator|.
name|tuple
argument_list|(
name|indexRequest
operator|.
name|index
argument_list|()
argument_list|,
name|indexRequest
operator|.
name|type
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|indexShard
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|version
operator|=
name|index
operator|.
name|version
argument_list|()
expr_stmt|;
name|op
operator|=
name|index
expr_stmt|;
name|created
operator|=
name|index
operator|.
name|created
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|Engine
operator|.
name|Create
name|create
init|=
name|indexShard
operator|.
name|prepareCreate
argument_list|(
name|sourceToParse
argument_list|)
operator|.
name|version
argument_list|(
name|indexRequest
operator|.
name|version
argument_list|()
argument_list|)
operator|.
name|versionType
argument_list|(
name|indexRequest
operator|.
name|versionType
argument_list|()
argument_list|)
operator|.
name|origin
argument_list|(
name|Engine
operator|.
name|Operation
operator|.
name|Origin
operator|.
name|PRIMARY
argument_list|)
operator|.
name|autoGeneratedId
argument_list|(
name|indexRequest
operator|.
name|autoGeneratedId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|create
operator|.
name|parsedDoc
argument_list|()
operator|.
name|mappingsModified
argument_list|()
condition|)
block|{
name|mappingsToUpdate
operator|=
name|Tuple
operator|.
name|tuple
argument_list|(
name|indexRequest
operator|.
name|index
argument_list|()
argument_list|,
name|indexRequest
operator|.
name|type
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|indexShard
operator|.
name|create
argument_list|(
name|create
argument_list|)
expr_stmt|;
name|version
operator|=
name|create
operator|.
name|version
argument_list|()
expr_stmt|;
name|op
operator|=
name|create
expr_stmt|;
name|created
operator|=
literal|true
expr_stmt|;
block|}
comment|// update the version on request so it will happen on the replicas
name|indexRequest
operator|.
name|versionType
argument_list|(
name|indexRequest
operator|.
name|versionType
argument_list|()
operator|.
name|versionTypeForReplicationAndRecovery
argument_list|()
argument_list|)
expr_stmt|;
name|indexRequest
operator|.
name|version
argument_list|(
name|version
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
throw|throw
operator|new
name|WriteFailure
argument_list|(
name|t
argument_list|,
name|mappingsToUpdate
argument_list|)
throw|;
block|}
assert|assert
name|indexRequest
operator|.
name|versionType
argument_list|()
operator|.
name|validateVersion
argument_list|(
name|indexRequest
operator|.
name|version
argument_list|()
argument_list|)
assert|;
name|IndexResponse
name|indexResponse
init|=
operator|new
name|IndexResponse
argument_list|(
name|indexRequest
operator|.
name|index
argument_list|()
argument_list|,
name|indexRequest
operator|.
name|type
argument_list|()
argument_list|,
name|indexRequest
operator|.
name|id
argument_list|()
argument_list|,
name|version
argument_list|,
name|created
argument_list|)
decl_stmt|;
return|return
operator|new
name|WriteResult
argument_list|(
name|indexResponse
argument_list|,
name|mappingsToUpdate
argument_list|,
name|op
argument_list|)
return|;
block|}
DECL|method|shardDeleteOperation
specifier|private
name|WriteResult
name|shardDeleteOperation
parameter_list|(
name|DeleteRequest
name|deleteRequest
parameter_list|,
name|IndexShard
name|indexShard
parameter_list|)
block|{
name|Engine
operator|.
name|Delete
name|delete
init|=
name|indexShard
operator|.
name|prepareDelete
argument_list|(
name|deleteRequest
operator|.
name|type
argument_list|()
argument_list|,
name|deleteRequest
operator|.
name|id
argument_list|()
argument_list|,
name|deleteRequest
operator|.
name|version
argument_list|()
argument_list|)
operator|.
name|versionType
argument_list|(
name|deleteRequest
operator|.
name|versionType
argument_list|()
argument_list|)
operator|.
name|origin
argument_list|(
name|Engine
operator|.
name|Operation
operator|.
name|Origin
operator|.
name|PRIMARY
argument_list|)
decl_stmt|;
name|indexShard
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
comment|// update the request with the version so it will go to the replicas
name|deleteRequest
operator|.
name|versionType
argument_list|(
name|delete
operator|.
name|versionType
argument_list|()
operator|.
name|versionTypeForReplicationAndRecovery
argument_list|()
argument_list|)
expr_stmt|;
name|deleteRequest
operator|.
name|version
argument_list|(
name|delete
operator|.
name|version
argument_list|()
argument_list|)
expr_stmt|;
assert|assert
name|deleteRequest
operator|.
name|versionType
argument_list|()
operator|.
name|validateVersion
argument_list|(
name|deleteRequest
operator|.
name|version
argument_list|()
argument_list|)
assert|;
name|DeleteResponse
name|deleteResponse
init|=
operator|new
name|DeleteResponse
argument_list|(
name|deleteRequest
operator|.
name|index
argument_list|()
argument_list|,
name|deleteRequest
operator|.
name|type
argument_list|()
argument_list|,
name|deleteRequest
operator|.
name|id
argument_list|()
argument_list|,
name|delete
operator|.
name|version
argument_list|()
argument_list|,
name|delete
operator|.
name|found
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|WriteResult
argument_list|(
name|deleteResponse
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|class|UpdateResult
specifier|static
class|class
name|UpdateResult
block|{
DECL|field|result
specifier|final
name|UpdateHelper
operator|.
name|Result
name|result
decl_stmt|;
DECL|field|actionRequest
specifier|final
name|ActionRequest
name|actionRequest
decl_stmt|;
DECL|field|retry
specifier|final
name|boolean
name|retry
decl_stmt|;
DECL|field|error
specifier|final
name|Throwable
name|error
decl_stmt|;
DECL|field|writeResult
specifier|final
name|WriteResult
name|writeResult
decl_stmt|;
DECL|field|noopResult
specifier|final
name|UpdateResponse
name|noopResult
decl_stmt|;
DECL|method|UpdateResult
name|UpdateResult
parameter_list|(
name|UpdateHelper
operator|.
name|Result
name|result
parameter_list|,
name|ActionRequest
name|actionRequest
parameter_list|,
name|boolean
name|retry
parameter_list|,
name|Throwable
name|error
parameter_list|,
name|WriteResult
name|writeResult
parameter_list|)
block|{
name|this
operator|.
name|result
operator|=
name|result
expr_stmt|;
name|this
operator|.
name|actionRequest
operator|=
name|actionRequest
expr_stmt|;
name|this
operator|.
name|retry
operator|=
name|retry
expr_stmt|;
name|this
operator|.
name|error
operator|=
name|error
expr_stmt|;
name|this
operator|.
name|writeResult
operator|=
name|writeResult
expr_stmt|;
name|this
operator|.
name|noopResult
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|UpdateResult
name|UpdateResult
parameter_list|(
name|UpdateHelper
operator|.
name|Result
name|result
parameter_list|,
name|ActionRequest
name|actionRequest
parameter_list|,
name|WriteResult
name|writeResult
parameter_list|)
block|{
name|this
operator|.
name|result
operator|=
name|result
expr_stmt|;
name|this
operator|.
name|actionRequest
operator|=
name|actionRequest
expr_stmt|;
name|this
operator|.
name|writeResult
operator|=
name|writeResult
expr_stmt|;
name|this
operator|.
name|retry
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|error
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|noopResult
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|UpdateResult
specifier|public
name|UpdateResult
parameter_list|(
name|UpdateHelper
operator|.
name|Result
name|result
parameter_list|,
name|UpdateResponse
name|updateResponse
parameter_list|)
block|{
name|this
operator|.
name|result
operator|=
name|result
expr_stmt|;
name|this
operator|.
name|noopResult
operator|=
name|updateResponse
expr_stmt|;
name|this
operator|.
name|actionRequest
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|writeResult
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|retry
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|error
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|failure
name|boolean
name|failure
parameter_list|()
block|{
return|return
name|error
operator|!=
literal|null
return|;
block|}
DECL|method|success
name|boolean
name|success
parameter_list|()
block|{
return|return
name|noopResult
operator|!=
literal|null
operator|||
name|writeResult
operator|!=
literal|null
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|request
parameter_list|<
name|T
extends|extends
name|ActionRequest
parameter_list|>
name|T
name|request
parameter_list|()
block|{
return|return
operator|(
name|T
operator|)
name|actionRequest
return|;
block|}
block|}
DECL|method|shardUpdateOperation
specifier|private
name|UpdateResult
name|shardUpdateOperation
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|BulkShardRequest
name|bulkShardRequest
parameter_list|,
name|UpdateRequest
name|updateRequest
parameter_list|,
name|IndexShard
name|indexShard
parameter_list|)
block|{
name|UpdateHelper
operator|.
name|Result
name|translate
init|=
name|updateHelper
operator|.
name|prepare
argument_list|(
name|updateRequest
argument_list|,
name|indexShard
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|translate
operator|.
name|operation
argument_list|()
condition|)
block|{
case|case
name|UPSERT
case|:
case|case
name|INDEX
case|:
name|IndexRequest
name|indexRequest
init|=
name|translate
operator|.
name|action
argument_list|()
decl_stmt|;
try|try
block|{
name|WriteResult
name|result
init|=
name|shardIndexOperation
argument_list|(
name|bulkShardRequest
argument_list|,
name|indexRequest
argument_list|,
name|clusterState
argument_list|,
name|indexShard
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
operator|new
name|UpdateResult
argument_list|(
name|translate
argument_list|,
name|indexRequest
argument_list|,
name|result
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|t
operator|=
name|ExceptionsHelper
operator|.
name|unwrapCause
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|boolean
name|retry
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|t
operator|instanceof
name|VersionConflictEngineException
operator|||
operator|(
name|t
operator|instanceof
name|DocumentAlreadyExistsException
operator|&&
name|translate
operator|.
name|operation
argument_list|()
operator|==
name|UpdateHelper
operator|.
name|Operation
operator|.
name|UPSERT
operator|)
condition|)
block|{
name|retry
operator|=
literal|true
expr_stmt|;
block|}
return|return
operator|new
name|UpdateResult
argument_list|(
name|translate
argument_list|,
name|indexRequest
argument_list|,
name|retry
argument_list|,
name|t
argument_list|,
literal|null
argument_list|)
return|;
block|}
case|case
name|DELETE
case|:
name|DeleteRequest
name|deleteRequest
init|=
name|translate
operator|.
name|action
argument_list|()
decl_stmt|;
try|try
block|{
name|WriteResult
name|result
init|=
name|shardDeleteOperation
argument_list|(
name|deleteRequest
argument_list|,
name|indexShard
argument_list|)
decl_stmt|;
return|return
operator|new
name|UpdateResult
argument_list|(
name|translate
argument_list|,
name|deleteRequest
argument_list|,
name|result
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|t
operator|=
name|ExceptionsHelper
operator|.
name|unwrapCause
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|boolean
name|retry
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|t
operator|instanceof
name|VersionConflictEngineException
condition|)
block|{
name|retry
operator|=
literal|true
expr_stmt|;
block|}
return|return
operator|new
name|UpdateResult
argument_list|(
name|translate
argument_list|,
name|deleteRequest
argument_list|,
name|retry
argument_list|,
name|t
argument_list|,
literal|null
argument_list|)
return|;
block|}
case|case
name|NONE
case|:
name|UpdateResponse
name|updateResponse
init|=
name|translate
operator|.
name|action
argument_list|()
decl_stmt|;
return|return
operator|new
name|UpdateResult
argument_list|(
name|translate
argument_list|,
name|updateResponse
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|ElasticsearchIllegalStateException
argument_list|(
literal|"Illegal update operation "
operator|+
name|translate
operator|.
name|operation
argument_list|()
argument_list|)
throw|;
block|}
block|}
DECL|method|shardOperationOnReplica
specifier|protected
name|void
name|shardOperationOnReplica
parameter_list|(
name|ReplicaOperationRequest
name|shardRequest
parameter_list|)
block|{
name|IndexShard
name|indexShard
init|=
name|indicesService
operator|.
name|indexServiceSafe
argument_list|(
name|shardRequest
operator|.
name|request
operator|.
name|index
argument_list|()
argument_list|)
operator|.
name|shardSafe
argument_list|(
name|shardRequest
operator|.
name|shardId
argument_list|)
decl_stmt|;
specifier|final
name|BulkShardRequest
name|request
init|=
name|shardRequest
operator|.
name|request
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|request
operator|.
name|items
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|BulkItemRequest
name|item
init|=
name|request
operator|.
name|items
argument_list|()
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|item
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|item
operator|.
name|request
argument_list|()
operator|instanceof
name|IndexRequest
condition|)
block|{
name|IndexRequest
name|indexRequest
init|=
operator|(
name|IndexRequest
operator|)
name|item
operator|.
name|request
argument_list|()
decl_stmt|;
try|try
block|{
name|SourceToParse
name|sourceToParse
init|=
name|SourceToParse
operator|.
name|source
argument_list|(
name|SourceToParse
operator|.
name|Origin
operator|.
name|REPLICA
argument_list|,
name|indexRequest
operator|.
name|source
argument_list|()
argument_list|)
operator|.
name|type
argument_list|(
name|indexRequest
operator|.
name|type
argument_list|()
argument_list|)
operator|.
name|id
argument_list|(
name|indexRequest
operator|.
name|id
argument_list|()
argument_list|)
operator|.
name|routing
argument_list|(
name|indexRequest
operator|.
name|routing
argument_list|()
argument_list|)
operator|.
name|parent
argument_list|(
name|indexRequest
operator|.
name|parent
argument_list|()
argument_list|)
operator|.
name|timestamp
argument_list|(
name|indexRequest
operator|.
name|timestamp
argument_list|()
argument_list|)
operator|.
name|ttl
argument_list|(
name|indexRequest
operator|.
name|ttl
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexRequest
operator|.
name|opType
argument_list|()
operator|==
name|IndexRequest
operator|.
name|OpType
operator|.
name|INDEX
condition|)
block|{
name|Engine
operator|.
name|Index
name|index
init|=
name|indexShard
operator|.
name|prepareIndex
argument_list|(
name|sourceToParse
argument_list|)
operator|.
name|version
argument_list|(
name|indexRequest
operator|.
name|version
argument_list|()
argument_list|)
operator|.
name|versionType
argument_list|(
name|indexRequest
operator|.
name|versionType
argument_list|()
argument_list|)
operator|.
name|origin
argument_list|(
name|Engine
operator|.
name|Operation
operator|.
name|Origin
operator|.
name|REPLICA
argument_list|)
decl_stmt|;
name|indexShard
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Engine
operator|.
name|Create
name|create
init|=
name|indexShard
operator|.
name|prepareCreate
argument_list|(
name|sourceToParse
argument_list|)
operator|.
name|version
argument_list|(
name|indexRequest
operator|.
name|version
argument_list|()
argument_list|)
operator|.
name|versionType
argument_list|(
name|indexRequest
operator|.
name|versionType
argument_list|()
argument_list|)
operator|.
name|autoGeneratedId
argument_list|(
name|indexRequest
operator|.
name|autoGeneratedId
argument_list|()
argument_list|)
operator|.
name|origin
argument_list|(
name|Engine
operator|.
name|Operation
operator|.
name|Origin
operator|.
name|REPLICA
argument_list|)
decl_stmt|;
name|indexShard
operator|.
name|create
argument_list|(
name|create
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
comment|// ignore, we are on backup
block|}
block|}
elseif|else
if|if
condition|(
name|item
operator|.
name|request
argument_list|()
operator|instanceof
name|DeleteRequest
condition|)
block|{
name|DeleteRequest
name|deleteRequest
init|=
operator|(
name|DeleteRequest
operator|)
name|item
operator|.
name|request
argument_list|()
decl_stmt|;
try|try
block|{
name|Engine
operator|.
name|Delete
name|delete
init|=
name|indexShard
operator|.
name|prepareDelete
argument_list|(
name|deleteRequest
operator|.
name|type
argument_list|()
argument_list|,
name|deleteRequest
operator|.
name|id
argument_list|()
argument_list|,
name|deleteRequest
operator|.
name|version
argument_list|()
argument_list|)
operator|.
name|versionType
argument_list|(
name|deleteRequest
operator|.
name|versionType
argument_list|()
argument_list|)
operator|.
name|origin
argument_list|(
name|Engine
operator|.
name|Operation
operator|.
name|Origin
operator|.
name|REPLICA
argument_list|)
decl_stmt|;
name|indexShard
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
comment|// ignore, we are on backup
block|}
block|}
block|}
if|if
condition|(
name|request
operator|.
name|refresh
argument_list|()
condition|)
block|{
try|try
block|{
name|indexShard
operator|.
name|refresh
argument_list|(
operator|new
name|Engine
operator|.
name|Refresh
argument_list|(
literal|"refresh_flag_bulk"
argument_list|)
operator|.
name|force
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
DECL|method|updateMappingOnMaster
specifier|private
name|void
name|updateMappingOnMaster
parameter_list|(
specifier|final
name|String
name|index
parameter_list|,
specifier|final
name|String
name|type
parameter_list|)
block|{
try|try
block|{
name|MapperService
name|mapperService
init|=
name|indicesService
operator|.
name|indexServiceSafe
argument_list|(
name|index
argument_list|)
operator|.
name|mapperService
argument_list|()
decl_stmt|;
specifier|final
name|DocumentMapper
name|documentMapper
init|=
name|mapperService
operator|.
name|documentMapper
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|documentMapper
operator|==
literal|null
condition|)
block|{
comment|// should not happen
return|return;
block|}
name|IndexMetaData
name|metaData
init|=
name|clusterService
operator|.
name|state
argument_list|()
operator|.
name|metaData
argument_list|()
operator|.
name|index
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|metaData
operator|==
literal|null
condition|)
block|{
return|return;
block|}
comment|// we generate the order id before we get the mapping to send and refresh the source, so
comment|// if 2 happen concurrently, we know that the later order will include the previous one
name|long
name|orderId
init|=
name|mappingUpdatedAction
operator|.
name|generateNextMappingUpdateOrder
argument_list|()
decl_stmt|;
name|documentMapper
operator|.
name|refreshSource
argument_list|()
expr_stmt|;
name|DiscoveryNode
name|node
init|=
name|clusterService
operator|.
name|localNode
argument_list|()
decl_stmt|;
specifier|final
name|MappingUpdatedAction
operator|.
name|MappingUpdatedRequest
name|request
init|=
operator|new
name|MappingUpdatedAction
operator|.
name|MappingUpdatedRequest
argument_list|(
name|index
argument_list|,
name|metaData
operator|.
name|uuid
argument_list|()
argument_list|,
name|type
argument_list|,
name|documentMapper
operator|.
name|mappingSource
argument_list|()
argument_list|,
name|orderId
argument_list|,
name|node
operator|!=
literal|null
condition|?
name|node
operator|.
name|id
argument_list|()
else|:
literal|null
argument_list|)
decl_stmt|;
name|mappingUpdatedAction
operator|.
name|execute
argument_list|(
name|request
argument_list|,
operator|new
name|ActionListener
argument_list|<
name|MappingUpdatedAction
operator|.
name|MappingUpdatedResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|MappingUpdatedAction
operator|.
name|MappingUpdatedResponse
name|mappingUpdatedResponse
parameter_list|)
block|{
comment|// all is well
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"failed to update master on updated mapping for {}"
argument_list|,
name|e
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"failed to update master on updated mapping for index [{}], type [{}]"
argument_list|,
name|e
argument_list|,
name|index
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|applyVersion
specifier|private
name|void
name|applyVersion
parameter_list|(
name|BulkItemRequest
name|item
parameter_list|,
name|long
name|version
parameter_list|,
name|VersionType
name|versionType
parameter_list|)
block|{
if|if
condition|(
name|item
operator|.
name|request
argument_list|()
operator|instanceof
name|IndexRequest
condition|)
block|{
operator|(
operator|(
name|IndexRequest
operator|)
name|item
operator|.
name|request
argument_list|()
operator|)
operator|.
name|version
argument_list|(
name|version
argument_list|)
operator|.
name|versionType
argument_list|(
name|versionType
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|item
operator|.
name|request
argument_list|()
operator|instanceof
name|DeleteRequest
condition|)
block|{
operator|(
operator|(
name|DeleteRequest
operator|)
name|item
operator|.
name|request
argument_list|()
operator|)
operator|.
name|version
argument_list|(
name|version
argument_list|)
operator|.
name|versionType
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|item
operator|.
name|request
argument_list|()
operator|instanceof
name|UpdateRequest
condition|)
block|{
operator|(
operator|(
name|UpdateRequest
operator|)
name|item
operator|.
name|request
argument_list|()
operator|)
operator|.
name|version
argument_list|(
name|version
argument_list|)
operator|.
name|versionType
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// log?
block|}
block|}
block|}
end_class

end_unit

