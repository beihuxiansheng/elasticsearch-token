begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.bulk
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|bulk
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|delete
operator|.
name|DeleteRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|index
operator|.
name|IndexRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|ByteSizeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|ByteSizeValue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Semaphore
import|;
end_import

begin_comment
comment|/**  * A bulk processor is a thread safe bulk processing class, allowing to easily set when to "flush" a new bulk request  * (either based on number of actions, or based on the size), and to easily control the number of concurrent bulk  * requests allowed to be executed in parallel.  *<p/>  * In order to create a new bulk processor, use the {@link Builder}.  */
end_comment

begin_class
DECL|class|BulkProcessor
specifier|public
class|class
name|BulkProcessor
block|{
comment|/**      * A builder used to create a build an instance of a bulk processor.      */
DECL|class|Builder
specifier|public
specifier|static
class|class
name|Builder
block|{
DECL|field|client
specifier|private
specifier|final
name|Client
name|client
decl_stmt|;
DECL|field|listener
specifier|private
specifier|final
name|ActionListener
argument_list|<
name|BulkResponse
argument_list|>
name|listener
decl_stmt|;
DECL|field|concurrentRequests
specifier|private
name|int
name|concurrentRequests
init|=
literal|1
decl_stmt|;
DECL|field|bulkActions
specifier|private
name|int
name|bulkActions
init|=
literal|1000
decl_stmt|;
DECL|field|bulkSize
specifier|private
name|ByteSizeValue
name|bulkSize
init|=
operator|new
name|ByteSizeValue
argument_list|(
literal|5
argument_list|,
name|ByteSizeUnit
operator|.
name|MB
argument_list|)
decl_stmt|;
comment|/**          * Creates a builder of bulk processor with the client to use and the listener that will be used          * to be notified on the completion of bulk requests.          */
DECL|method|Builder
specifier|public
name|Builder
parameter_list|(
name|Client
name|client
parameter_list|,
name|ActionListener
argument_list|<
name|BulkResponse
argument_list|>
name|listener
parameter_list|)
block|{
name|this
operator|.
name|client
operator|=
name|client
expr_stmt|;
name|this
operator|.
name|listener
operator|=
name|listener
expr_stmt|;
block|}
comment|/**          * Sets the number of concurrent requests allowed to be executed. A value of 0 means that only a single          * request will be allowed to be executed. A value of 1 means 1 concurrent request is allowed to be executed          * while accumulating new bulk requests. Defaults to<tt>1</tt>.          */
DECL|method|setConcurrentRequests
specifier|public
name|Builder
name|setConcurrentRequests
parameter_list|(
name|int
name|concurrentRequests
parameter_list|)
block|{
name|this
operator|.
name|concurrentRequests
operator|=
name|concurrentRequests
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets when to flush a new bulk request based on the number of actions currently added. Defaults to          *<tt>1000</tt>. Can be set to<tt>-1</tt> to disable it.          */
DECL|method|setBulkActions
specifier|public
name|Builder
name|setBulkActions
parameter_list|(
name|int
name|bulkActions
parameter_list|)
block|{
name|this
operator|.
name|bulkActions
operator|=
name|bulkActions
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets when to flush a new bulk request based on the size of actions currently added. Defaults to          *<tt>5mb</tt>. Can be set to<tt>-1</tt> to disable it.          */
DECL|method|setBulkSize
specifier|public
name|Builder
name|setBulkSize
parameter_list|(
name|ByteSizeValue
name|bulkSize
parameter_list|)
block|{
name|this
operator|.
name|bulkSize
operator|=
name|bulkSize
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Builds a new bulk processor.          */
DECL|method|build
specifier|public
name|BulkProcessor
name|build
parameter_list|()
block|{
return|return
operator|new
name|BulkProcessor
argument_list|(
name|client
argument_list|,
name|listener
argument_list|,
name|concurrentRequests
argument_list|,
name|bulkActions
argument_list|,
name|bulkSize
argument_list|)
return|;
block|}
block|}
DECL|method|builder
specifier|public
specifier|static
name|Builder
name|builder
parameter_list|(
name|Client
name|client
parameter_list|,
name|ActionListener
argument_list|<
name|BulkResponse
argument_list|>
name|listener
parameter_list|)
block|{
return|return
operator|new
name|Builder
argument_list|(
name|client
argument_list|,
name|listener
argument_list|)
return|;
block|}
DECL|field|client
specifier|private
specifier|final
name|Client
name|client
decl_stmt|;
DECL|field|listener
specifier|private
specifier|final
name|ActionListener
argument_list|<
name|BulkResponse
argument_list|>
name|listener
decl_stmt|;
DECL|field|concurrentRequests
specifier|private
name|int
name|concurrentRequests
decl_stmt|;
DECL|field|bulkActions
specifier|private
specifier|final
name|int
name|bulkActions
decl_stmt|;
DECL|field|bulkSize
specifier|private
specifier|final
name|int
name|bulkSize
decl_stmt|;
DECL|field|semaphore
specifier|private
specifier|final
name|Semaphore
name|semaphore
decl_stmt|;
DECL|field|bulkRequest
specifier|private
name|BulkRequest
name|bulkRequest
decl_stmt|;
DECL|method|BulkProcessor
name|BulkProcessor
parameter_list|(
name|Client
name|client
parameter_list|,
name|ActionListener
argument_list|<
name|BulkResponse
argument_list|>
name|listener
parameter_list|,
name|int
name|concurrentRequests
parameter_list|,
name|int
name|bulkActions
parameter_list|,
name|ByteSizeValue
name|bulkSize
parameter_list|)
block|{
name|this
operator|.
name|client
operator|=
name|client
expr_stmt|;
name|this
operator|.
name|listener
operator|=
name|listener
expr_stmt|;
name|this
operator|.
name|concurrentRequests
operator|=
name|concurrentRequests
expr_stmt|;
name|this
operator|.
name|bulkActions
operator|=
name|bulkActions
expr_stmt|;
name|this
operator|.
name|bulkSize
operator|=
name|bulkSize
operator|.
name|bytesAsInt
argument_list|()
expr_stmt|;
name|this
operator|.
name|semaphore
operator|=
operator|new
name|Semaphore
argument_list|(
name|concurrentRequests
argument_list|)
expr_stmt|;
name|this
operator|.
name|bulkRequest
operator|=
operator|new
name|BulkRequest
argument_list|()
expr_stmt|;
block|}
comment|/**      * Adds an {@link IndexRequest} to the list of actions to execute. Follows the same behavior of {@link IndexRequest}      * (for example, if no id is provided, one will be generated, or usage of the create flag).      */
DECL|method|add
specifier|public
name|BulkProcessor
name|add
parameter_list|(
name|IndexRequest
name|request
parameter_list|)
block|{
return|return
name|add
argument_list|(
operator|(
name|ActionRequest
operator|)
name|request
argument_list|)
return|;
block|}
comment|/**      * Adds an {@link DeleteRequest} to the list of actions to execute.      */
DECL|method|add
specifier|public
name|BulkProcessor
name|add
parameter_list|(
name|DeleteRequest
name|request
parameter_list|)
block|{
return|return
name|add
argument_list|(
operator|(
name|ActionRequest
operator|)
name|request
argument_list|)
return|;
block|}
DECL|method|add
specifier|public
name|BulkProcessor
name|add
parameter_list|(
name|ActionRequest
name|request
parameter_list|)
block|{
name|internalAdd
argument_list|(
name|request
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|internalAdd
specifier|private
specifier|synchronized
name|void
name|internalAdd
parameter_list|(
name|ActionRequest
name|request
parameter_list|)
block|{
name|bulkRequest
operator|.
name|add
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|executeIfNeeded
argument_list|()
expr_stmt|;
block|}
DECL|method|add
specifier|public
specifier|synchronized
name|BulkProcessor
name|add
parameter_list|(
name|BytesReference
name|data
parameter_list|,
name|boolean
name|contentUnsafe
parameter_list|,
annotation|@
name|Nullable
name|String
name|defaultIndex
parameter_list|,
annotation|@
name|Nullable
name|String
name|defaultType
parameter_list|)
throws|throws
name|Exception
block|{
name|bulkRequest
operator|.
name|add
argument_list|(
name|data
argument_list|,
name|contentUnsafe
argument_list|,
name|defaultIndex
argument_list|,
name|defaultType
argument_list|)
expr_stmt|;
name|executeIfNeeded
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|executeIfNeeded
specifier|private
name|void
name|executeIfNeeded
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isOverTheLimit
argument_list|()
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|concurrentRequests
operator|==
literal|0
condition|)
block|{
comment|// execute in a blocking fashion...
try|try
block|{
name|listener
operator|.
name|onResponse
argument_list|(
name|client
operator|.
name|bulk
argument_list|(
name|bulkRequest
argument_list|)
operator|.
name|actionGet
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|listener
operator|.
name|onFailure
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
try|try
block|{
name|semaphore
operator|.
name|acquire
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|listener
operator|.
name|onFailure
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
name|client
operator|.
name|bulk
argument_list|(
name|bulkRequest
argument_list|,
operator|new
name|ActionListener
argument_list|<
name|BulkResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|BulkResponse
name|response
parameter_list|)
block|{
try|try
block|{
name|listener
operator|.
name|onResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|semaphore
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
try|try
block|{
name|listener
operator|.
name|onFailure
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|semaphore
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|bulkRequest
operator|=
operator|new
name|BulkRequest
argument_list|()
expr_stmt|;
block|}
DECL|method|isOverTheLimit
specifier|private
name|boolean
name|isOverTheLimit
parameter_list|()
block|{
if|if
condition|(
name|bulkActions
operator|!=
operator|-
literal|1
operator|&&
name|bulkRequest
operator|.
name|numberOfActions
argument_list|()
operator|>
name|bulkActions
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|bulkSize
operator|!=
operator|-
literal|1
operator|&&
name|bulkRequest
operator|.
name|estimatedSizeInBytes
argument_list|()
operator|>
name|bulkSize
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

