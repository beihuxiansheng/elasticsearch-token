begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.explain
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|explain
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|BaseRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * A builder for {@link ExplainRequest}.  */
end_comment

begin_class
DECL|class|ExplainRequestBuilder
specifier|public
class|class
name|ExplainRequestBuilder
extends|extends
name|BaseRequestBuilder
argument_list|<
name|ExplainRequest
argument_list|,
name|ExplainResponse
argument_list|>
block|{
DECL|field|sourceBuilder
specifier|private
name|ExplainSourceBuilder
name|sourceBuilder
decl_stmt|;
DECL|method|ExplainRequestBuilder
name|ExplainRequestBuilder
parameter_list|(
name|Client
name|client
parameter_list|)
block|{
name|super
argument_list|(
name|client
argument_list|,
operator|new
name|ExplainRequest
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|ExplainRequestBuilder
specifier|public
name|ExplainRequestBuilder
parameter_list|(
name|Client
name|client
parameter_list|,
name|String
name|index
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|id
parameter_list|)
block|{
name|super
argument_list|(
name|client
argument_list|,
operator|new
name|ExplainRequest
argument_list|()
argument_list|)
expr_stmt|;
name|request
argument_list|()
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|request
argument_list|()
operator|.
name|type
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|request
argument_list|()
operator|.
name|id
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets the index to get a score explanation for.      */
DECL|method|setIndex
specifier|public
name|ExplainRequestBuilder
name|setIndex
parameter_list|(
name|String
name|index
parameter_list|)
block|{
name|request
argument_list|()
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the type to get a score explanation for.      */
DECL|method|setType
specifier|public
name|ExplainRequestBuilder
name|setType
parameter_list|(
name|String
name|type
parameter_list|)
block|{
name|request
argument_list|()
operator|.
name|type
argument_list|(
name|type
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the id to get a score explanation for.      */
DECL|method|setId
specifier|public
name|ExplainRequestBuilder
name|setId
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|request
argument_list|()
operator|.
name|id
argument_list|(
name|id
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the routing for sharding.      */
DECL|method|setRouting
specifier|public
name|ExplainRequestBuilder
name|setRouting
parameter_list|(
name|String
name|routing
parameter_list|)
block|{
name|request
argument_list|()
operator|.
name|routing
argument_list|(
name|routing
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Simple sets the routing. Since the parent is only used to get to the right shard.      */
DECL|method|setParent
specifier|public
name|ExplainRequestBuilder
name|setParent
parameter_list|(
name|String
name|parent
parameter_list|)
block|{
name|request
argument_list|()
operator|.
name|parent
argument_list|(
name|parent
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the shard preference.      */
DECL|method|setPreference
specifier|public
name|ExplainRequestBuilder
name|setPreference
parameter_list|(
name|String
name|preference
parameter_list|)
block|{
name|request
argument_list|()
operator|.
name|preference
argument_list|(
name|preference
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the query to get a score explanation for.      */
DECL|method|setQuery
specifier|public
name|ExplainRequestBuilder
name|setQuery
parameter_list|(
name|QueryBuilder
name|queryBuilder
parameter_list|)
block|{
name|sourceBuilder
argument_list|()
operator|.
name|query
argument_list|(
name|queryBuilder
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setSource
specifier|public
name|ExplainRequestBuilder
name|setSource
parameter_list|(
name|BytesReference
name|querySource
parameter_list|,
name|boolean
name|unsafe
parameter_list|)
block|{
name|request
argument_list|()
operator|.
name|source
argument_list|(
name|querySource
argument_list|,
name|unsafe
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets whether the actual explain action should occur in a different thread if executed locally.      */
DECL|method|operationThreaded
specifier|public
name|ExplainRequestBuilder
name|operationThreaded
parameter_list|(
name|boolean
name|threadedOperation
parameter_list|)
block|{
name|request
argument_list|()
operator|.
name|operationThreaded
argument_list|(
name|threadedOperation
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|doExecute
specifier|protected
name|void
name|doExecute
parameter_list|(
name|ActionListener
argument_list|<
name|ExplainResponse
argument_list|>
name|listener
parameter_list|)
block|{
if|if
condition|(
name|sourceBuilder
operator|!=
literal|null
condition|)
block|{
name|request
operator|.
name|source
argument_list|(
name|sourceBuilder
argument_list|)
expr_stmt|;
block|}
name|client
operator|.
name|explain
argument_list|(
name|request
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
DECL|method|sourceBuilder
specifier|private
name|ExplainSourceBuilder
name|sourceBuilder
parameter_list|()
block|{
if|if
condition|(
name|sourceBuilder
operator|==
literal|null
condition|)
block|{
name|sourceBuilder
operator|=
operator|new
name|ExplainSourceBuilder
argument_list|()
expr_stmt|;
block|}
return|return
name|sourceBuilder
return|;
block|}
block|}
end_class

end_unit

