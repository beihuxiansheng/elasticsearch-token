begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.explain
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|explain
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Explanation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticSearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|single
operator|.
name|shard
operator|.
name|TransportShardSingleOperationAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|block
operator|.
name|ClusterBlockException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|block
operator|.
name|ClusterBlockLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|Engine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|get
operator|.
name|GetResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|Uid
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|internal
operator|.
name|UidFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|ParsedQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|service
operator|.
name|IndexService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|service
operator|.
name|IndexShard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|IndicesService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|ScriptService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|SearchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|ShardSearchRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|rescore
operator|.
name|RescoreSearchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|rescore
operator|.
name|Rescorer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * Explain transport action. Computes the explain on the targeted shard.  */
end_comment

begin_comment
comment|// TODO: AggregatedDfs. Currently the idf can be different then when executing a normal search with explain.
end_comment

begin_class
DECL|class|TransportExplainAction
specifier|public
class|class
name|TransportExplainAction
extends|extends
name|TransportShardSingleOperationAction
argument_list|<
name|ExplainRequest
argument_list|,
name|ExplainResponse
argument_list|>
block|{
DECL|field|indicesService
specifier|private
specifier|final
name|IndicesService
name|indicesService
decl_stmt|;
DECL|field|scriptService
specifier|private
specifier|final
name|ScriptService
name|scriptService
decl_stmt|;
annotation|@
name|Inject
DECL|method|TransportExplainAction
specifier|public
name|TransportExplainAction
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|ThreadPool
name|threadPool
parameter_list|,
name|ClusterService
name|clusterService
parameter_list|,
name|TransportService
name|transportService
parameter_list|,
name|IndicesService
name|indicesService
parameter_list|,
name|ScriptService
name|scriptService
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|,
name|threadPool
argument_list|,
name|clusterService
argument_list|,
name|transportService
argument_list|)
expr_stmt|;
name|this
operator|.
name|indicesService
operator|=
name|indicesService
expr_stmt|;
name|this
operator|.
name|scriptService
operator|=
name|scriptService
expr_stmt|;
block|}
DECL|method|transportAction
specifier|protected
name|String
name|transportAction
parameter_list|()
block|{
return|return
name|ExplainAction
operator|.
name|NAME
return|;
block|}
DECL|method|executor
specifier|protected
name|String
name|executor
parameter_list|()
block|{
return|return
name|ThreadPool
operator|.
name|Names
operator|.
name|GET
return|;
comment|// Or use Names.SEARCH?
block|}
annotation|@
name|Override
DECL|method|resolveRequest
specifier|protected
name|void
name|resolveRequest
parameter_list|(
name|ClusterState
name|state
parameter_list|,
name|ExplainRequest
name|request
parameter_list|)
block|{
name|String
name|concreteIndex
init|=
name|state
operator|.
name|metaData
argument_list|()
operator|.
name|concreteIndex
argument_list|(
name|request
operator|.
name|getIndex
argument_list|()
argument_list|)
decl_stmt|;
name|request
operator|.
name|setFilteringAlias
argument_list|(
name|state
operator|.
name|metaData
argument_list|()
operator|.
name|filteringAliases
argument_list|(
name|concreteIndex
argument_list|,
name|request
operator|.
name|getIndex
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|request
operator|.
name|setIndex
argument_list|(
name|state
operator|.
name|metaData
argument_list|()
operator|.
name|concreteIndex
argument_list|(
name|request
operator|.
name|getIndex
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|shardOperation
specifier|protected
name|ExplainResponse
name|shardOperation
parameter_list|(
name|ExplainRequest
name|request
parameter_list|,
name|int
name|shardId
parameter_list|)
throws|throws
name|ElasticSearchException
block|{
name|IndexService
name|indexService
init|=
name|indicesService
operator|.
name|indexService
argument_list|(
name|request
operator|.
name|getIndex
argument_list|()
argument_list|)
decl_stmt|;
name|IndexShard
name|indexShard
init|=
name|indexService
operator|.
name|shardSafe
argument_list|(
name|shardId
argument_list|)
decl_stmt|;
name|Term
name|uidTerm
init|=
operator|new
name|Term
argument_list|(
name|UidFieldMapper
operator|.
name|NAME
argument_list|,
name|Uid
operator|.
name|createUidAsBytes
argument_list|(
name|request
operator|.
name|getType
argument_list|()
argument_list|,
name|request
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|GetResult
name|result
init|=
name|indexShard
operator|.
name|get
argument_list|(
operator|new
name|Engine
operator|.
name|Get
argument_list|(
literal|false
argument_list|,
name|uidTerm
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|result
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
operator|new
name|ExplainResponse
argument_list|(
literal|false
argument_list|)
return|;
block|}
name|SearchContext
name|context
init|=
operator|new
name|SearchContext
argument_list|(
literal|0
argument_list|,
operator|new
name|ShardSearchRequest
argument_list|()
operator|.
name|types
argument_list|(
operator|new
name|String
index|[]
block|{
name|request
operator|.
name|getType
argument_list|()
block|}
argument_list|)
operator|.
name|filteringAliases
argument_list|(
name|request
operator|.
name|getFilteringAlias
argument_list|()
argument_list|)
argument_list|,
literal|null
argument_list|,
name|result
operator|.
name|searcher
argument_list|()
argument_list|,
name|indexService
argument_list|,
name|indexShard
argument_list|,
name|scriptService
argument_list|)
decl_stmt|;
name|SearchContext
operator|.
name|setCurrent
argument_list|(
name|context
argument_list|)
expr_stmt|;
try|try
block|{
name|context
operator|.
name|parsedQuery
argument_list|(
name|parseQuery
argument_list|(
name|request
argument_list|,
name|indexService
argument_list|)
argument_list|)
expr_stmt|;
name|context
operator|.
name|preProcess
argument_list|()
expr_stmt|;
name|int
name|topLevelDocId
init|=
name|result
operator|.
name|docIdAndVersion
argument_list|()
operator|.
name|docId
operator|+
name|result
operator|.
name|docIdAndVersion
argument_list|()
operator|.
name|reader
operator|.
name|docBase
decl_stmt|;
name|Explanation
name|explanation
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|rescore
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|RescoreSearchContext
name|ctx
init|=
name|context
operator|.
name|rescore
argument_list|()
decl_stmt|;
name|Rescorer
name|rescorer
init|=
name|ctx
operator|.
name|rescorer
argument_list|()
decl_stmt|;
name|explanation
operator|=
name|rescorer
operator|.
name|explain
argument_list|(
name|topLevelDocId
argument_list|,
name|context
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|explanation
operator|=
name|context
operator|.
name|searcher
argument_list|()
operator|.
name|explain
argument_list|(
name|context
operator|.
name|query
argument_list|()
argument_list|,
name|topLevelDocId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|request
operator|.
name|getFields
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|request
operator|.
name|getFields
argument_list|()
operator|.
name|length
operator|==
literal|1
operator|&&
literal|"_source"
operator|.
name|equals
argument_list|(
name|request
operator|.
name|getFields
argument_list|()
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
name|request
operator|.
name|setFields
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// Load the _source field
block|}
comment|// Advantage is that we're not opening a second searcher to retrieve the _source. Also
comment|// because we are working in the same searcher in engineGetResult we can be sure that a
comment|// doc isn't deleted between the initial get and this call.
name|GetResult
name|getResult
init|=
name|indexShard
operator|.
name|getService
argument_list|()
operator|.
name|get
argument_list|(
name|result
argument_list|,
name|request
operator|.
name|getId
argument_list|()
argument_list|,
name|request
operator|.
name|getType
argument_list|()
argument_list|,
name|request
operator|.
name|getFields
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|ExplainResponse
argument_list|(
literal|true
argument_list|,
name|explanation
argument_list|,
name|getResult
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|ExplainResponse
argument_list|(
literal|true
argument_list|,
name|explanation
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ElasticSearchException
argument_list|(
literal|"Could not explain"
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|context
operator|.
name|release
argument_list|()
expr_stmt|;
name|SearchContext
operator|.
name|removeCurrent
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|parseQuery
specifier|private
name|ParsedQuery
name|parseQuery
parameter_list|(
name|ExplainRequest
name|request
parameter_list|,
name|IndexService
name|indexService
parameter_list|)
block|{
try|try
block|{
name|XContentParser
name|parser
init|=
name|XContentHelper
operator|.
name|createParser
argument_list|(
name|request
operator|.
name|getSource
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|XContentParser
operator|.
name|Token
name|token
init|=
name|parser
operator|.
name|nextToken
argument_list|()
init|;
name|token
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
condition|;
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
control|)
block|{
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
condition|)
block|{
name|String
name|fieldName
init|=
name|parser
operator|.
name|currentName
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"query"
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
condition|)
block|{
return|return
name|indexService
operator|.
name|queryParserService
argument_list|()
operator|.
name|parse
argument_list|(
name|parser
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
literal|"query_binary"
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
condition|)
block|{
name|byte
index|[]
name|querySource
init|=
name|parser
operator|.
name|binaryValue
argument_list|()
decl_stmt|;
name|XContentParser
name|qSourceParser
init|=
name|XContentFactory
operator|.
name|xContent
argument_list|(
name|querySource
argument_list|)
operator|.
name|createParser
argument_list|(
name|querySource
argument_list|)
decl_stmt|;
return|return
name|indexService
operator|.
name|queryParserService
argument_list|()
operator|.
name|parse
argument_list|(
name|qSourceParser
argument_list|)
return|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ElasticSearchException
argument_list|(
literal|"Couldn't parse query from source."
argument_list|,
name|e
argument_list|)
throw|;
block|}
throw|throw
operator|new
name|ElasticSearchException
argument_list|(
literal|"No query specified"
argument_list|)
throw|;
block|}
DECL|method|newRequest
specifier|protected
name|ExplainRequest
name|newRequest
parameter_list|()
block|{
return|return
operator|new
name|ExplainRequest
argument_list|()
return|;
block|}
DECL|method|newResponse
specifier|protected
name|ExplainResponse
name|newResponse
parameter_list|()
block|{
return|return
operator|new
name|ExplainResponse
argument_list|()
return|;
block|}
DECL|method|checkGlobalBlock
specifier|protected
name|ClusterBlockException
name|checkGlobalBlock
parameter_list|(
name|ClusterState
name|state
parameter_list|,
name|ExplainRequest
name|request
parameter_list|)
block|{
return|return
name|state
operator|.
name|blocks
argument_list|()
operator|.
name|globalBlockedException
argument_list|(
name|ClusterBlockLevel
operator|.
name|READ
argument_list|)
return|;
block|}
DECL|method|checkRequestBlock
specifier|protected
name|ClusterBlockException
name|checkRequestBlock
parameter_list|(
name|ClusterState
name|state
parameter_list|,
name|ExplainRequest
name|request
parameter_list|)
block|{
return|return
name|state
operator|.
name|blocks
argument_list|()
operator|.
name|indexBlockedException
argument_list|(
name|ClusterBlockLevel
operator|.
name|READ
argument_list|,
name|request
operator|.
name|getIndex
argument_list|()
argument_list|)
return|;
block|}
DECL|method|shards
specifier|protected
name|ShardIterator
name|shards
parameter_list|(
name|ClusterState
name|state
parameter_list|,
name|ExplainRequest
name|request
parameter_list|)
throws|throws
name|ElasticSearchException
block|{
return|return
name|clusterService
operator|.
name|operationRouting
argument_list|()
operator|.
name|getShards
argument_list|(
name|clusterService
operator|.
name|state
argument_list|()
argument_list|,
name|request
operator|.
name|getIndex
argument_list|()
argument_list|,
name|request
operator|.
name|getType
argument_list|()
argument_list|,
name|request
operator|.
name|getId
argument_list|()
argument_list|,
name|request
operator|.
name|getRouting
argument_list|()
argument_list|,
name|request
operator|.
name|getPreference
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

