begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.indices.cache.filter.terms
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|cache
operator|.
name|filter
operator|.
name|terms
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|Cache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|CacheBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|Weigher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|AtomicReaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Bits
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticSearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|get
operator|.
name|GetRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|get
operator|.
name|GetResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|AbstractComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|ByteSizeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|ByteSizeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|support
operator|.
name|XContentMapValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|cache
operator|.
name|filter
operator|.
name|support
operator|.
name|CacheKeyFilter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
DECL|class|IndicesTermsFilterCache
specifier|public
class|class
name|IndicesTermsFilterCache
extends|extends
name|AbstractComponent
block|{
DECL|field|NO_TERMS
specifier|private
specifier|static
name|TermsFilterValue
name|NO_TERMS
init|=
operator|new
name|TermsFilterValue
argument_list|(
literal|0
argument_list|,
literal|null
argument_list|)
decl_stmt|;
DECL|field|client
specifier|private
specifier|final
name|Client
name|client
decl_stmt|;
DECL|field|cache
specifier|private
specifier|final
name|Cache
argument_list|<
name|CacheKeyFilter
operator|.
name|Key
argument_list|,
name|TermsFilterValue
argument_list|>
name|cache
decl_stmt|;
annotation|@
name|Inject
DECL|method|IndicesTermsFilterCache
specifier|public
name|IndicesTermsFilterCache
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|Client
name|client
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|client
operator|=
name|client
expr_stmt|;
name|ByteSizeValue
name|size
init|=
name|componentSettings
operator|.
name|getAsBytesSize
argument_list|(
literal|"size"
argument_list|,
operator|new
name|ByteSizeValue
argument_list|(
literal|10
argument_list|,
name|ByteSizeUnit
operator|.
name|MB
argument_list|)
argument_list|)
decl_stmt|;
name|TimeValue
name|expireAfterWrite
init|=
name|componentSettings
operator|.
name|getAsTime
argument_list|(
literal|"expire_after_write"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|TimeValue
name|expireAfterAccess
init|=
name|componentSettings
operator|.
name|getAsTime
argument_list|(
literal|"expire_after_access"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|CacheBuilder
argument_list|<
name|CacheKeyFilter
operator|.
name|Key
argument_list|,
name|TermsFilterValue
argument_list|>
name|builder
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|maximumWeight
argument_list|(
name|size
operator|.
name|bytes
argument_list|()
argument_list|)
operator|.
name|weigher
argument_list|(
operator|new
name|TermsFilterValueWeigher
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|expireAfterAccess
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|expireAfterAccess
argument_list|(
name|expireAfterAccess
operator|.
name|millis
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|expireAfterWrite
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|expireAfterWrite
argument_list|(
name|expireAfterWrite
operator|.
name|millis
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|cache
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
comment|/**      * An external lookup terms filter. Note, already implements the {@link CacheKeyFilter} so no need      * to double cache key it.      */
DECL|method|lookupTermsFilter
specifier|public
name|Filter
name|lookupTermsFilter
parameter_list|(
specifier|final
name|CacheKeyFilter
operator|.
name|Key
name|cacheKey
parameter_list|,
specifier|final
name|TermsLookup
name|lookup
parameter_list|)
block|{
return|return
operator|new
name|LookupTermsFilter
argument_list|(
name|lookup
argument_list|,
name|cacheKey
argument_list|,
name|this
argument_list|)
return|;
block|}
annotation|@
name|Nullable
DECL|method|termsFilter
specifier|private
name|Filter
name|termsFilter
parameter_list|(
specifier|final
name|CacheKeyFilter
operator|.
name|Key
name|cacheKey
parameter_list|,
specifier|final
name|TermsLookup
name|lookup
parameter_list|)
throws|throws
name|RuntimeException
block|{
try|try
block|{
return|return
name|cache
operator|.
name|get
argument_list|(
name|cacheKey
argument_list|,
operator|new
name|Callable
argument_list|<
name|TermsFilterValue
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|TermsFilterValue
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|GetResponse
name|getResponse
init|=
name|client
operator|.
name|get
argument_list|(
operator|new
name|GetRequest
argument_list|(
name|lookup
operator|.
name|getIndex
argument_list|()
argument_list|,
name|lookup
operator|.
name|getType
argument_list|()
argument_list|,
name|lookup
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|preference
argument_list|(
literal|"_local"
argument_list|)
argument_list|)
operator|.
name|actionGet
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|getResponse
operator|.
name|isExists
argument_list|()
condition|)
block|{
return|return
name|NO_TERMS
return|;
block|}
name|List
argument_list|<
name|Object
argument_list|>
name|values
init|=
name|XContentMapValues
operator|.
name|extractRawValues
argument_list|(
name|lookup
operator|.
name|getPath
argument_list|()
argument_list|,
name|getResponse
operator|.
name|getSourceAsMap
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|values
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|NO_TERMS
return|;
block|}
name|Filter
name|filter
init|=
name|lookup
operator|.
name|getFieldMapper
argument_list|()
operator|.
name|termsFilter
argument_list|(
name|values
argument_list|,
name|lookup
operator|.
name|getQueryParseContext
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|TermsFilterValue
argument_list|(
name|estimateSizeInBytes
argument_list|(
name|values
argument_list|)
argument_list|,
name|filter
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|filter
return|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|RuntimeException
condition|)
block|{
throw|throw
operator|(
name|RuntimeException
operator|)
name|e
operator|.
name|getCause
argument_list|()
throw|;
block|}
throw|throw
operator|new
name|ElasticSearchException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
throw|;
block|}
block|}
DECL|method|estimateSizeInBytes
name|long
name|estimateSizeInBytes
parameter_list|(
name|List
argument_list|<
name|Object
argument_list|>
name|terms
parameter_list|)
block|{
name|long
name|size
init|=
literal|8
decl_stmt|;
for|for
control|(
name|Object
name|term
range|:
name|terms
control|)
block|{
if|if
condition|(
name|term
operator|instanceof
name|BytesRef
condition|)
block|{
name|size
operator|+=
operator|(
operator|(
name|BytesRef
operator|)
name|term
operator|)
operator|.
name|length
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|term
operator|instanceof
name|String
condition|)
block|{
name|size
operator|+=
operator|(
operator|(
name|String
operator|)
name|term
operator|)
operator|.
name|length
argument_list|()
operator|/
literal|2
expr_stmt|;
block|}
else|else
block|{
name|size
operator|+=
literal|4
expr_stmt|;
block|}
block|}
return|return
name|size
return|;
block|}
DECL|method|clear
specifier|public
name|void
name|clear
parameter_list|(
name|String
name|reason
parameter_list|)
block|{
name|cache
operator|.
name|invalidateAll
argument_list|()
expr_stmt|;
block|}
DECL|method|clear
specifier|public
name|void
name|clear
parameter_list|(
name|String
name|reason
parameter_list|,
name|String
index|[]
name|keys
parameter_list|)
block|{
for|for
control|(
name|String
name|key
range|:
name|keys
control|)
block|{
name|cache
operator|.
name|invalidate
argument_list|(
operator|new
name|CacheKeyFilter
operator|.
name|Key
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|LookupTermsFilter
specifier|static
class|class
name|LookupTermsFilter
extends|extends
name|Filter
implements|implements
name|CacheKeyFilter
block|{
DECL|field|lookup
specifier|private
specifier|final
name|TermsLookup
name|lookup
decl_stmt|;
DECL|field|cacheKey
specifier|private
specifier|final
name|CacheKeyFilter
operator|.
name|Key
name|cacheKey
decl_stmt|;
DECL|field|cache
specifier|private
specifier|final
name|IndicesTermsFilterCache
name|cache
decl_stmt|;
DECL|method|LookupTermsFilter
name|LookupTermsFilter
parameter_list|(
name|TermsLookup
name|lookup
parameter_list|,
name|CacheKeyFilter
operator|.
name|Key
name|cacheKey
parameter_list|,
name|IndicesTermsFilterCache
name|cache
parameter_list|)
block|{
name|this
operator|.
name|lookup
operator|=
name|lookup
expr_stmt|;
name|this
operator|.
name|cacheKey
operator|=
name|cacheKey
expr_stmt|;
name|this
operator|.
name|cache
operator|=
name|cache
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getDocIdSet
specifier|public
name|DocIdSet
name|getDocIdSet
parameter_list|(
name|AtomicReaderContext
name|context
parameter_list|,
name|Bits
name|acceptDocs
parameter_list|)
throws|throws
name|IOException
block|{
name|Filter
name|filter
init|=
name|cache
operator|.
name|termsFilter
argument_list|(
name|cacheKey
argument_list|,
name|lookup
argument_list|)
decl_stmt|;
if|if
condition|(
name|filter
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
name|filter
operator|.
name|getDocIdSet
argument_list|(
name|context
argument_list|,
name|acceptDocs
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|cacheKey
specifier|public
name|Key
name|cacheKey
parameter_list|()
block|{
return|return
name|this
operator|.
name|cacheKey
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|LookupTermsFilter
name|that
init|=
operator|(
name|LookupTermsFilter
operator|)
name|o
decl_stmt|;
if|if
condition|(
operator|!
name|cacheKey
operator|.
name|equals
argument_list|(
name|that
operator|.
name|cacheKey
argument_list|)
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|cacheKey
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"terms("
operator|+
name|lookup
operator|.
name|toString
argument_list|()
operator|+
literal|")"
return|;
block|}
block|}
DECL|class|TermsFilterValueWeigher
specifier|static
class|class
name|TermsFilterValueWeigher
implements|implements
name|Weigher
argument_list|<
name|CacheKeyFilter
operator|.
name|Key
argument_list|,
name|TermsFilterValue
argument_list|>
block|{
annotation|@
name|Override
DECL|method|weigh
specifier|public
name|int
name|weigh
parameter_list|(
name|CacheKeyFilter
operator|.
name|Key
name|key
parameter_list|,
name|TermsFilterValue
name|value
parameter_list|)
block|{
return|return
call|(
name|int
call|)
argument_list|(
name|key
operator|.
name|bytes
argument_list|()
operator|.
name|length
operator|+
name|value
operator|.
name|sizeInBytes
argument_list|)
return|;
block|}
block|}
comment|// TODO: if TermsFilter exposed sizeInBytes, we won't need this wrapper
DECL|class|TermsFilterValue
specifier|static
class|class
name|TermsFilterValue
block|{
DECL|field|sizeInBytes
specifier|public
specifier|final
name|long
name|sizeInBytes
decl_stmt|;
DECL|field|filter
specifier|public
specifier|final
name|Filter
name|filter
decl_stmt|;
DECL|method|TermsFilterValue
name|TermsFilterValue
parameter_list|(
name|long
name|sizeInBytes
parameter_list|,
name|Filter
name|filter
parameter_list|)
block|{
name|this
operator|.
name|sizeInBytes
operator|=
name|sizeInBytes
expr_stmt|;
name|this
operator|.
name|filter
operator|=
name|filter
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

