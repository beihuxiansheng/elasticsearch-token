begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.indices.cache.query
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|cache
operator|.
name|query
package|;
end_package

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|ObjectHashSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|ObjectSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|Cache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|CacheBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|RemovalListener
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|RemovalNotification
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|Weigher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DirectoryReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Accountable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|RamUsageEstimator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|AbstractComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|BytesStreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|MemorySizeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentCollections
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|EsRejectedExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|IndexShard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|IndexShardState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|SearchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|ShardSearchRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|query
operator|.
name|QueryPhase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|query
operator|.
name|QuerySearchResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
operator|.
name|hasLength
import|;
end_import

begin_comment
comment|/**  * The indices query cache allows to cache a shard level query stage responses, helping with improving  * similar requests that are potentially expensive (because of aggs for example). The cache is fully coherent  * with the semantics of NRT (the index reader version is part of the cache key), and relies on size based  * eviction to evict old reader associated cache entries as well as scheduler reaper to clean readers that  * are no longer used or closed shards.  *<p/>  * Currently, the cache is only enabled for {@link SearchType#COUNT}, and can only be opted in on an index  * level setting that can be dynamically changed and defaults to false.  *<p/>  * There are still several TODOs left in this class, some easily addressable, some more complex, but the support  * is functional.  */
end_comment

begin_class
DECL|class|IndicesQueryCache
specifier|public
class|class
name|IndicesQueryCache
extends|extends
name|AbstractComponent
implements|implements
name|RemovalListener
argument_list|<
name|IndicesQueryCache
operator|.
name|Key
argument_list|,
name|IndicesQueryCache
operator|.
name|Value
argument_list|>
block|{
comment|/**      * A setting to enable or disable query caching on an index level. Its dynamic by default      * since we are checking on the cluster state IndexMetaData always.      */
DECL|field|INDEX_CACHE_QUERY_ENABLED
specifier|public
specifier|static
specifier|final
name|String
name|INDEX_CACHE_QUERY_ENABLED
init|=
literal|"index.cache.query.enable"
decl_stmt|;
DECL|field|INDICES_CACHE_QUERY_CLEAN_INTERVAL
specifier|public
specifier|static
specifier|final
name|String
name|INDICES_CACHE_QUERY_CLEAN_INTERVAL
init|=
literal|"indices.cache.query.clean_interval"
decl_stmt|;
DECL|field|INDICES_CACHE_QUERY_SIZE
specifier|public
specifier|static
specifier|final
name|String
name|INDICES_CACHE_QUERY_SIZE
init|=
literal|"indices.cache.query.size"
decl_stmt|;
DECL|field|INDICES_CACHE_QUERY_EXPIRE
specifier|public
specifier|static
specifier|final
name|String
name|INDICES_CACHE_QUERY_EXPIRE
init|=
literal|"indices.cache.query.expire"
decl_stmt|;
DECL|field|INDICES_CACHE_QUERY_CONCURRENCY_LEVEL
specifier|public
specifier|static
specifier|final
name|String
name|INDICES_CACHE_QUERY_CONCURRENCY_LEVEL
init|=
literal|"indices.cache.query.concurrency_level"
decl_stmt|;
DECL|field|CACHEABLE_SEARCH_TYPES
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|SearchType
argument_list|>
name|CACHEABLE_SEARCH_TYPES
init|=
name|EnumSet
operator|.
name|of
argument_list|(
name|SearchType
operator|.
name|QUERY_THEN_FETCH
argument_list|,
name|SearchType
operator|.
name|QUERY_AND_FETCH
argument_list|)
decl_stmt|;
DECL|field|threadPool
specifier|private
specifier|final
name|ThreadPool
name|threadPool
decl_stmt|;
DECL|field|clusterService
specifier|private
specifier|final
name|ClusterService
name|clusterService
decl_stmt|;
DECL|field|cleanInterval
specifier|private
specifier|final
name|TimeValue
name|cleanInterval
decl_stmt|;
DECL|field|reaper
specifier|private
specifier|final
name|Reaper
name|reaper
decl_stmt|;
DECL|field|registeredClosedListeners
specifier|final
name|ConcurrentMap
argument_list|<
name|CleanupKey
argument_list|,
name|Boolean
argument_list|>
name|registeredClosedListeners
init|=
name|ConcurrentCollections
operator|.
name|newConcurrentMap
argument_list|()
decl_stmt|;
DECL|field|keysToClean
specifier|final
name|Set
argument_list|<
name|CleanupKey
argument_list|>
name|keysToClean
init|=
name|ConcurrentCollections
operator|.
name|newConcurrentSet
argument_list|()
decl_stmt|;
comment|//TODO make these changes configurable on the cluster level
DECL|field|size
specifier|private
specifier|final
name|String
name|size
decl_stmt|;
DECL|field|expire
specifier|private
specifier|final
name|TimeValue
name|expire
decl_stmt|;
DECL|field|concurrencyLevel
specifier|private
specifier|final
name|int
name|concurrencyLevel
decl_stmt|;
DECL|field|cache
specifier|private
specifier|volatile
name|Cache
argument_list|<
name|Key
argument_list|,
name|Value
argument_list|>
name|cache
decl_stmt|;
annotation|@
name|Inject
DECL|method|IndicesQueryCache
specifier|public
name|IndicesQueryCache
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|ClusterService
name|clusterService
parameter_list|,
name|ThreadPool
name|threadPool
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|clusterService
operator|=
name|clusterService
expr_stmt|;
name|this
operator|.
name|threadPool
operator|=
name|threadPool
expr_stmt|;
name|this
operator|.
name|cleanInterval
operator|=
name|settings
operator|.
name|getAsTime
argument_list|(
name|INDICES_CACHE_QUERY_CLEAN_INTERVAL
argument_list|,
name|TimeValue
operator|.
name|timeValueSeconds
argument_list|(
literal|60
argument_list|)
argument_list|)
expr_stmt|;
comment|// this cache can be very small yet still be very effective
name|this
operator|.
name|size
operator|=
name|settings
operator|.
name|get
argument_list|(
name|INDICES_CACHE_QUERY_SIZE
argument_list|,
literal|"1%"
argument_list|)
expr_stmt|;
name|this
operator|.
name|expire
operator|=
name|settings
operator|.
name|getAsTime
argument_list|(
name|INDICES_CACHE_QUERY_EXPIRE
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// defaults to 4, but this is a busy map for all indices, increase it a bit by default
name|this
operator|.
name|concurrencyLevel
operator|=
name|settings
operator|.
name|getAsInt
argument_list|(
name|INDICES_CACHE_QUERY_CONCURRENCY_LEVEL
argument_list|,
literal|16
argument_list|)
expr_stmt|;
if|if
condition|(
name|concurrencyLevel
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"concurrency_level must be> 0 but was: "
operator|+
name|concurrencyLevel
argument_list|)
throw|;
block|}
name|buildCache
argument_list|()
expr_stmt|;
name|this
operator|.
name|reaper
operator|=
operator|new
name|Reaper
argument_list|()
expr_stmt|;
name|threadPool
operator|.
name|schedule
argument_list|(
name|cleanInterval
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|SAME
argument_list|,
name|reaper
argument_list|)
expr_stmt|;
block|}
DECL|method|buildCache
specifier|private
name|void
name|buildCache
parameter_list|()
block|{
name|long
name|sizeInBytes
init|=
name|MemorySizeValue
operator|.
name|parseBytesSizeValueOrHeapRatio
argument_list|(
name|size
argument_list|)
operator|.
name|bytes
argument_list|()
decl_stmt|;
name|CacheBuilder
argument_list|<
name|Key
argument_list|,
name|Value
argument_list|>
name|cacheBuilder
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|maximumWeight
argument_list|(
name|sizeInBytes
argument_list|)
operator|.
name|weigher
argument_list|(
operator|new
name|QueryCacheWeigher
argument_list|()
argument_list|)
operator|.
name|removalListener
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|cacheBuilder
operator|.
name|concurrencyLevel
argument_list|(
name|concurrencyLevel
argument_list|)
expr_stmt|;
if|if
condition|(
name|expire
operator|!=
literal|null
condition|)
block|{
name|cacheBuilder
operator|.
name|expireAfterAccess
argument_list|(
name|expire
operator|.
name|millis
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
name|cache
operator|=
name|cacheBuilder
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
DECL|class|QueryCacheWeigher
specifier|private
specifier|static
class|class
name|QueryCacheWeigher
implements|implements
name|Weigher
argument_list|<
name|Key
argument_list|,
name|Value
argument_list|>
block|{
annotation|@
name|Override
DECL|method|weigh
specifier|public
name|int
name|weigh
parameter_list|(
name|Key
name|key
parameter_list|,
name|Value
name|value
parameter_list|)
block|{
return|return
call|(
name|int
call|)
argument_list|(
name|key
operator|.
name|ramBytesUsed
argument_list|()
operator|+
name|value
operator|.
name|ramBytesUsed
argument_list|()
argument_list|)
return|;
block|}
block|}
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
name|reaper
operator|.
name|close
argument_list|()
expr_stmt|;
name|cache
operator|.
name|invalidateAll
argument_list|()
expr_stmt|;
block|}
DECL|method|clear
specifier|public
name|void
name|clear
parameter_list|(
name|IndexShard
name|shard
parameter_list|)
block|{
if|if
condition|(
name|shard
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|keysToClean
operator|.
name|add
argument_list|(
operator|new
name|CleanupKey
argument_list|(
name|shard
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|trace
argument_list|(
literal|"{} explicit cache clear"
argument_list|,
name|shard
operator|.
name|shardId
argument_list|()
argument_list|)
expr_stmt|;
name|reaper
operator|.
name|reap
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onRemoval
specifier|public
name|void
name|onRemoval
parameter_list|(
name|RemovalNotification
argument_list|<
name|Key
argument_list|,
name|Value
argument_list|>
name|notification
parameter_list|)
block|{
if|if
condition|(
name|notification
operator|.
name|getKey
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|notification
operator|.
name|getKey
argument_list|()
operator|.
name|shard
operator|.
name|queryCache
argument_list|()
operator|.
name|onRemoval
argument_list|(
name|notification
argument_list|)
expr_stmt|;
block|}
comment|/**      * Can the shard request be cached at all?      */
DECL|method|canCache
specifier|public
name|boolean
name|canCache
parameter_list|(
name|ShardSearchRequest
name|request
parameter_list|,
name|SearchContext
name|context
parameter_list|)
block|{
comment|// TODO: for now, template is not supported, though we could use the generated bytes as the key
if|if
condition|(
name|hasLength
argument_list|(
name|request
operator|.
name|templateSource
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// for now, only enable it for requests with no hits
if|if
condition|(
name|context
operator|.
name|size
argument_list|()
operator|!=
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// We cannot cache with DFS because results depend not only on the content of the index but also
comment|// on the overridden statistics. So if you ran two queries on the same index with different stats
comment|// (because an other shard was updated) you would get wrong results because of the scores
comment|// (think about top_hits aggs or scripts using the score)
if|if
condition|(
operator|!
name|CACHEABLE_SEARCH_TYPES
operator|.
name|contains
argument_list|(
name|context
operator|.
name|searchType
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|IndexMetaData
name|index
init|=
name|clusterService
operator|.
name|state
argument_list|()
operator|.
name|getMetaData
argument_list|()
operator|.
name|index
argument_list|(
name|request
operator|.
name|index
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|==
literal|null
condition|)
block|{
comment|// in case we didn't yet have the cluster state, or it just got deleted
return|return
literal|false
return|;
block|}
comment|// if not explicitly set in the request, use the index setting, if not, use the request
if|if
condition|(
name|request
operator|.
name|queryCache
argument_list|()
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|index
operator|.
name|settings
argument_list|()
operator|.
name|getAsBoolean
argument_list|(
name|INDEX_CACHE_QUERY_ENABLED
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|request
operator|.
name|queryCache
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// if the reader is not a directory reader, we can't get the version from it
if|if
condition|(
operator|!
operator|(
name|context
operator|.
name|searcher
argument_list|()
operator|.
name|getIndexReader
argument_list|()
operator|instanceof
name|DirectoryReader
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// if now in millis is used (or in the future, a more generic "isDeterministic" flag
comment|// then we can't cache based on "now" key within the search request, as it is not deterministic
if|if
condition|(
name|context
operator|.
name|nowInMillisUsed
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/**      * Loads the cache result, computing it if needed by executing the query phase and otherwise deserializing the cached      * value into the {@link SearchContext#queryResult() context's query result}. The combination of load + compute allows      * to have a single load operation that will cause other requests with the same key to wait till its loaded an reuse      * the same cache.      */
DECL|method|loadIntoContext
specifier|public
name|void
name|loadIntoContext
parameter_list|(
specifier|final
name|ShardSearchRequest
name|request
parameter_list|,
specifier|final
name|SearchContext
name|context
parameter_list|,
specifier|final
name|QueryPhase
name|queryPhase
parameter_list|)
throws|throws
name|Exception
block|{
assert|assert
name|canCache
argument_list|(
name|request
argument_list|,
name|context
argument_list|)
assert|;
name|Key
name|key
init|=
name|buildKey
argument_list|(
name|request
argument_list|,
name|context
argument_list|)
decl_stmt|;
name|Loader
name|loader
init|=
operator|new
name|Loader
argument_list|(
name|queryPhase
argument_list|,
name|context
argument_list|,
name|key
argument_list|)
decl_stmt|;
name|Value
name|value
init|=
name|cache
operator|.
name|get
argument_list|(
name|key
argument_list|,
name|loader
argument_list|)
decl_stmt|;
if|if
condition|(
name|loader
operator|.
name|isLoaded
argument_list|()
condition|)
block|{
name|key
operator|.
name|shard
operator|.
name|queryCache
argument_list|()
operator|.
name|onMiss
argument_list|()
expr_stmt|;
comment|// see if its the first time we see this reader, and make sure to register a cleanup key
name|CleanupKey
name|cleanupKey
init|=
operator|new
name|CleanupKey
argument_list|(
name|context
operator|.
name|indexShard
argument_list|()
argument_list|,
operator|(
operator|(
name|DirectoryReader
operator|)
name|context
operator|.
name|searcher
argument_list|()
operator|.
name|getIndexReader
argument_list|()
operator|)
operator|.
name|getVersion
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|registeredClosedListeners
operator|.
name|containsKey
argument_list|(
name|cleanupKey
argument_list|)
condition|)
block|{
name|Boolean
name|previous
init|=
name|registeredClosedListeners
operator|.
name|putIfAbsent
argument_list|(
name|cleanupKey
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
decl_stmt|;
if|if
condition|(
name|previous
operator|==
literal|null
condition|)
block|{
name|context
operator|.
name|searcher
argument_list|()
operator|.
name|getIndexReader
argument_list|()
operator|.
name|addReaderClosedListener
argument_list|(
name|cleanupKey
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|key
operator|.
name|shard
operator|.
name|queryCache
argument_list|()
operator|.
name|onHit
argument_list|()
expr_stmt|;
comment|// restore the cached query result into the context
specifier|final
name|QuerySearchResult
name|result
init|=
name|context
operator|.
name|queryResult
argument_list|()
decl_stmt|;
name|result
operator|.
name|readFromWithId
argument_list|(
name|context
operator|.
name|id
argument_list|()
argument_list|,
name|value
operator|.
name|reference
operator|.
name|streamInput
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|shardTarget
argument_list|(
name|context
operator|.
name|shardTarget
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|Loader
specifier|private
specifier|static
class|class
name|Loader
implements|implements
name|Callable
argument_list|<
name|Value
argument_list|>
block|{
DECL|field|queryPhase
specifier|private
specifier|final
name|QueryPhase
name|queryPhase
decl_stmt|;
DECL|field|context
specifier|private
specifier|final
name|SearchContext
name|context
decl_stmt|;
DECL|field|key
specifier|private
specifier|final
name|IndicesQueryCache
operator|.
name|Key
name|key
decl_stmt|;
DECL|field|loaded
specifier|private
name|boolean
name|loaded
decl_stmt|;
DECL|method|Loader
name|Loader
parameter_list|(
name|QueryPhase
name|queryPhase
parameter_list|,
name|SearchContext
name|context
parameter_list|,
name|IndicesQueryCache
operator|.
name|Key
name|key
parameter_list|)
block|{
name|this
operator|.
name|queryPhase
operator|=
name|queryPhase
expr_stmt|;
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
name|this
operator|.
name|key
operator|=
name|key
expr_stmt|;
block|}
DECL|method|isLoaded
specifier|public
name|boolean
name|isLoaded
parameter_list|()
block|{
return|return
name|this
operator|.
name|loaded
return|;
block|}
annotation|@
name|Override
DECL|method|call
specifier|public
name|Value
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|queryPhase
operator|.
name|execute
argument_list|(
name|context
argument_list|)
expr_stmt|;
comment|/* BytesStreamOutput allows to pass the expected size but by default uses              * BigArrays.PAGE_SIZE_IN_BYTES which is 16k. A common cached result ie.              * a date histogram with 3 buckets is ~100byte so 16k might be very wasteful              * since we don't shrink to the actual size once we are done serializing.              * By passing 512 as the expected size we will resize the byte array in the stream              * slowly until we hit the page size and don't waste too much memory for small query              * results.*/
specifier|final
name|int
name|expectedSizeInBytes
init|=
literal|512
decl_stmt|;
try|try
init|(
name|BytesStreamOutput
name|out
init|=
operator|new
name|BytesStreamOutput
argument_list|(
name|expectedSizeInBytes
argument_list|)
init|)
block|{
name|context
operator|.
name|queryResult
argument_list|()
operator|.
name|writeToNoId
argument_list|(
name|out
argument_list|)
expr_stmt|;
comment|// for now, keep the paged data structure, which might have unused bytes to fill a page, but better to keep
comment|// the memory properly paged instead of having varied sized bytes
specifier|final
name|BytesReference
name|reference
init|=
name|out
operator|.
name|bytes
argument_list|()
decl_stmt|;
name|loaded
operator|=
literal|true
expr_stmt|;
name|Value
name|value
init|=
operator|new
name|Value
argument_list|(
name|reference
argument_list|,
name|out
operator|.
name|ramBytesUsed
argument_list|()
argument_list|)
decl_stmt|;
name|key
operator|.
name|shard
operator|.
name|queryCache
argument_list|()
operator|.
name|onCached
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|value
return|;
block|}
block|}
block|}
DECL|class|Value
specifier|public
specifier|static
class|class
name|Value
implements|implements
name|Accountable
block|{
DECL|field|reference
specifier|final
name|BytesReference
name|reference
decl_stmt|;
DECL|field|ramBytesUsed
specifier|final
name|long
name|ramBytesUsed
decl_stmt|;
DECL|method|Value
specifier|public
name|Value
parameter_list|(
name|BytesReference
name|reference
parameter_list|,
name|long
name|ramBytesUsed
parameter_list|)
block|{
name|this
operator|.
name|reference
operator|=
name|reference
expr_stmt|;
name|this
operator|.
name|ramBytesUsed
operator|=
name|ramBytesUsed
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|ramBytesUsed
specifier|public
name|long
name|ramBytesUsed
parameter_list|()
block|{
return|return
name|ramBytesUsed
return|;
block|}
annotation|@
name|Override
DECL|method|getChildResources
specifier|public
name|Collection
argument_list|<
name|Accountable
argument_list|>
name|getChildResources
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
block|}
DECL|class|Key
specifier|public
specifier|static
class|class
name|Key
implements|implements
name|Accountable
block|{
DECL|field|shard
specifier|public
specifier|final
name|IndexShard
name|shard
decl_stmt|;
comment|// use as identity equality
DECL|field|readerVersion
specifier|public
specifier|final
name|long
name|readerVersion
decl_stmt|;
comment|// use the reader version to now keep a reference to a "short" lived reader until its reaped
DECL|field|value
specifier|public
specifier|final
name|BytesReference
name|value
decl_stmt|;
DECL|method|Key
name|Key
parameter_list|(
name|IndexShard
name|shard
parameter_list|,
name|long
name|readerVersion
parameter_list|,
name|BytesReference
name|value
parameter_list|)
block|{
name|this
operator|.
name|shard
operator|=
name|shard
expr_stmt|;
name|this
operator|.
name|readerVersion
operator|=
name|readerVersion
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|ramBytesUsed
specifier|public
name|long
name|ramBytesUsed
parameter_list|()
block|{
return|return
name|RamUsageEstimator
operator|.
name|NUM_BYTES_OBJECT_REF
operator|+
name|RamUsageEstimator
operator|.
name|NUM_BYTES_LONG
operator|+
name|value
operator|.
name|length
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getChildResources
specifier|public
name|Collection
argument_list|<
name|Accountable
argument_list|>
name|getChildResources
parameter_list|()
block|{
comment|// TODO: more detailed ram usage?
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
name|Key
name|key
init|=
operator|(
name|Key
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|readerVersion
operator|!=
name|key
operator|.
name|readerVersion
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|shard
operator|.
name|equals
argument_list|(
name|key
operator|.
name|shard
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|value
operator|.
name|equals
argument_list|(
name|key
operator|.
name|value
argument_list|)
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
name|shard
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
call|(
name|int
call|)
argument_list|(
name|readerVersion
operator|^
operator|(
name|readerVersion
operator|>>>
literal|32
operator|)
argument_list|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|value
operator|.
name|hashCode
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
DECL|class|CleanupKey
specifier|private
class|class
name|CleanupKey
implements|implements
name|IndexReader
operator|.
name|ReaderClosedListener
block|{
DECL|field|indexShard
name|IndexShard
name|indexShard
decl_stmt|;
DECL|field|readerVersion
name|long
name|readerVersion
decl_stmt|;
comment|// use the reader version to now keep a reference to a "short" lived reader until its reaped
DECL|method|CleanupKey
specifier|private
name|CleanupKey
parameter_list|(
name|IndexShard
name|indexShard
parameter_list|,
name|long
name|readerVersion
parameter_list|)
block|{
name|this
operator|.
name|indexShard
operator|=
name|indexShard
expr_stmt|;
name|this
operator|.
name|readerVersion
operator|=
name|readerVersion
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onClose
specifier|public
name|void
name|onClose
parameter_list|(
name|IndexReader
name|reader
parameter_list|)
block|{
name|Boolean
name|remove
init|=
name|registeredClosedListeners
operator|.
name|remove
argument_list|(
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
name|remove
operator|!=
literal|null
condition|)
block|{
name|keysToClean
operator|.
name|add
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
name|CleanupKey
name|that
init|=
operator|(
name|CleanupKey
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|readerVersion
operator|!=
name|that
operator|.
name|readerVersion
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|indexShard
operator|.
name|equals
argument_list|(
name|that
operator|.
name|indexShard
argument_list|)
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
name|indexShard
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
call|(
name|int
call|)
argument_list|(
name|readerVersion
operator|^
operator|(
name|readerVersion
operator|>>>
literal|32
operator|)
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
DECL|class|Reaper
specifier|private
class|class
name|Reaper
implements|implements
name|Runnable
block|{
DECL|field|currentKeysToClean
specifier|private
specifier|final
name|ObjectSet
argument_list|<
name|CleanupKey
argument_list|>
name|currentKeysToClean
init|=
operator|new
name|ObjectHashSet
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|currentFullClean
specifier|private
specifier|final
name|ObjectSet
argument_list|<
name|IndexShard
argument_list|>
name|currentFullClean
init|=
operator|new
name|ObjectHashSet
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|closed
specifier|private
specifier|volatile
name|boolean
name|closed
decl_stmt|;
DECL|method|close
name|void
name|close
parameter_list|()
block|{
name|closed
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run
specifier|public
name|void
name|run
parameter_list|()
block|{
if|if
condition|(
name|closed
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|keysToClean
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|schedule
argument_list|()
expr_stmt|;
return|return;
block|}
try|try
block|{
name|threadPool
operator|.
name|executor
argument_list|(
name|ThreadPool
operator|.
name|Names
operator|.
name|GENERIC
argument_list|)
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|reap
argument_list|()
expr_stmt|;
name|schedule
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EsRejectedExecutionException
name|ex
parameter_list|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"Can not run ReaderCleaner - execution rejected"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|schedule
specifier|private
name|void
name|schedule
parameter_list|()
block|{
try|try
block|{
name|threadPool
operator|.
name|schedule
argument_list|(
name|cleanInterval
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|SAME
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EsRejectedExecutionException
name|ex
parameter_list|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"Can not schedule ReaderCleaner - execution rejected"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|reap
specifier|synchronized
name|void
name|reap
parameter_list|()
block|{
name|currentKeysToClean
operator|.
name|clear
argument_list|()
expr_stmt|;
name|currentFullClean
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|CleanupKey
argument_list|>
name|iterator
init|=
name|keysToClean
operator|.
name|iterator
argument_list|()
init|;
name|iterator
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CleanupKey
name|cleanupKey
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
if|if
condition|(
name|cleanupKey
operator|.
name|readerVersion
operator|==
operator|-
literal|1
operator|||
name|cleanupKey
operator|.
name|indexShard
operator|.
name|state
argument_list|()
operator|==
name|IndexShardState
operator|.
name|CLOSED
condition|)
block|{
comment|// -1 indicates full cleanup, as does a closed shard
name|currentFullClean
operator|.
name|add
argument_list|(
name|cleanupKey
operator|.
name|indexShard
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|currentKeysToClean
operator|.
name|add
argument_list|(
name|cleanupKey
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|currentKeysToClean
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|currentFullClean
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|CleanupKey
name|lookupKey
init|=
operator|new
name|CleanupKey
argument_list|(
literal|null
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Key
argument_list|>
name|iterator
init|=
name|cache
operator|.
name|asMap
argument_list|()
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iterator
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Key
name|key
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|currentFullClean
operator|.
name|contains
argument_list|(
name|key
operator|.
name|shard
argument_list|)
condition|)
block|{
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|lookupKey
operator|.
name|indexShard
operator|=
name|key
operator|.
name|shard
expr_stmt|;
name|lookupKey
operator|.
name|readerVersion
operator|=
name|key
operator|.
name|readerVersion
expr_stmt|;
if|if
condition|(
name|currentKeysToClean
operator|.
name|contains
argument_list|(
name|lookupKey
argument_list|)
condition|)
block|{
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
name|cache
operator|.
name|cleanUp
argument_list|()
expr_stmt|;
name|currentKeysToClean
operator|.
name|clear
argument_list|()
expr_stmt|;
name|currentFullClean
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|buildKey
specifier|private
specifier|static
name|Key
name|buildKey
parameter_list|(
name|ShardSearchRequest
name|request
parameter_list|,
name|SearchContext
name|context
parameter_list|)
throws|throws
name|Exception
block|{
comment|// TODO: for now, this will create different keys for different JSON order
comment|// TODO: tricky to get around this, need to parse and order all, which can be expensive
return|return
operator|new
name|Key
argument_list|(
name|context
operator|.
name|indexShard
argument_list|()
argument_list|,
operator|(
operator|(
name|DirectoryReader
operator|)
name|context
operator|.
name|searcher
argument_list|()
operator|.
name|getIndexReader
argument_list|()
operator|)
operator|.
name|getVersion
argument_list|()
argument_list|,
name|request
operator|.
name|cacheKey
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

