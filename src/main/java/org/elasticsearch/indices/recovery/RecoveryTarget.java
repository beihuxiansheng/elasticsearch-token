begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.indices.recovery
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|recovery
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|AlreadyClosedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ExceptionsHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|StopWatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|AbstractComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|ByteSizeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|AbstractRunnable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexShardMissingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|RecoveryEngineException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|IllegalIndexShardStateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|IndexShardClosedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|IndexShardNotStartedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|IndexShard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|store
operator|.
name|Store
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|store
operator|.
name|StoreFileMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|translog
operator|.
name|Translog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|IndexMissingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|IndicesLifecycle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
operator|.
name|timeValueMillis
import|;
end_import

begin_comment
comment|/**  * The recovery target handles recoveries of peer shards of the shard+node to recover to.  *<p/>  *<p>Note, it can be safely assumed that there will only be a single recovery per shard (index+id) and  * not several of them (since we don't allocate several shard replicas to the same node).  */
end_comment

begin_class
DECL|class|RecoveryTarget
specifier|public
class|class
name|RecoveryTarget
extends|extends
name|AbstractComponent
block|{
DECL|class|Actions
specifier|public
specifier|static
class|class
name|Actions
block|{
DECL|field|FILES_INFO
specifier|public
specifier|static
specifier|final
name|String
name|FILES_INFO
init|=
literal|"internal:index/shard/recovery/filesInfo"
decl_stmt|;
DECL|field|FILE_CHUNK
specifier|public
specifier|static
specifier|final
name|String
name|FILE_CHUNK
init|=
literal|"internal:index/shard/recovery/file_chunk"
decl_stmt|;
DECL|field|CLEAN_FILES
specifier|public
specifier|static
specifier|final
name|String
name|CLEAN_FILES
init|=
literal|"internal:index/shard/recovery/clean_files"
decl_stmt|;
DECL|field|TRANSLOG_OPS
specifier|public
specifier|static
specifier|final
name|String
name|TRANSLOG_OPS
init|=
literal|"internal:index/shard/recovery/translog_ops"
decl_stmt|;
DECL|field|PREPARE_TRANSLOG
specifier|public
specifier|static
specifier|final
name|String
name|PREPARE_TRANSLOG
init|=
literal|"internal:index/shard/recovery/prepare_translog"
decl_stmt|;
DECL|field|FINALIZE
specifier|public
specifier|static
specifier|final
name|String
name|FINALIZE
init|=
literal|"internal:index/shard/recovery/finalize"
decl_stmt|;
block|}
DECL|field|threadPool
specifier|private
specifier|final
name|ThreadPool
name|threadPool
decl_stmt|;
DECL|field|transportService
specifier|private
specifier|final
name|TransportService
name|transportService
decl_stmt|;
DECL|field|recoverySettings
specifier|private
specifier|final
name|RecoverySettings
name|recoverySettings
decl_stmt|;
DECL|field|clusterService
specifier|private
specifier|final
name|ClusterService
name|clusterService
decl_stmt|;
DECL|field|onGoingRecoveries
specifier|private
specifier|final
name|RecoveriesCollection
name|onGoingRecoveries
decl_stmt|;
annotation|@
name|Inject
DECL|method|RecoveryTarget
specifier|public
name|RecoveryTarget
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|ThreadPool
name|threadPool
parameter_list|,
name|TransportService
name|transportService
parameter_list|,
name|IndicesLifecycle
name|indicesLifecycle
parameter_list|,
name|RecoverySettings
name|recoverySettings
parameter_list|,
name|ClusterService
name|clusterService
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|threadPool
operator|=
name|threadPool
expr_stmt|;
name|this
operator|.
name|transportService
operator|=
name|transportService
expr_stmt|;
name|this
operator|.
name|recoverySettings
operator|=
name|recoverySettings
expr_stmt|;
name|this
operator|.
name|clusterService
operator|=
name|clusterService
expr_stmt|;
name|this
operator|.
name|onGoingRecoveries
operator|=
operator|new
name|RecoveriesCollection
argument_list|(
name|logger
argument_list|)
expr_stmt|;
name|transportService
operator|.
name|registerHandler
argument_list|(
name|Actions
operator|.
name|FILES_INFO
argument_list|,
operator|new
name|FilesInfoRequestHandler
argument_list|()
argument_list|)
expr_stmt|;
name|transportService
operator|.
name|registerHandler
argument_list|(
name|Actions
operator|.
name|FILE_CHUNK
argument_list|,
operator|new
name|FileChunkTransportRequestHandler
argument_list|()
argument_list|)
expr_stmt|;
name|transportService
operator|.
name|registerHandler
argument_list|(
name|Actions
operator|.
name|CLEAN_FILES
argument_list|,
operator|new
name|CleanFilesRequestHandler
argument_list|()
argument_list|)
expr_stmt|;
name|transportService
operator|.
name|registerHandler
argument_list|(
name|Actions
operator|.
name|PREPARE_TRANSLOG
argument_list|,
operator|new
name|PrepareForTranslogOperationsRequestHandler
argument_list|()
argument_list|)
expr_stmt|;
name|transportService
operator|.
name|registerHandler
argument_list|(
name|Actions
operator|.
name|TRANSLOG_OPS
argument_list|,
operator|new
name|TranslogOperationsRequestHandler
argument_list|()
argument_list|)
expr_stmt|;
name|transportService
operator|.
name|registerHandler
argument_list|(
name|Actions
operator|.
name|FINALIZE
argument_list|,
operator|new
name|FinalizeRecoveryRequestHandler
argument_list|()
argument_list|)
expr_stmt|;
name|indicesLifecycle
operator|.
name|addListener
argument_list|(
operator|new
name|IndicesLifecycle
operator|.
name|Listener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|beforeIndexShardClosed
parameter_list|(
name|ShardId
name|shardId
parameter_list|,
annotation|@
name|Nullable
name|IndexShard
name|indexShard
parameter_list|)
block|{
if|if
condition|(
name|indexShard
operator|!=
literal|null
condition|)
block|{
name|onGoingRecoveries
operator|.
name|cancelRecoveriesForShard
argument_list|(
name|shardId
argument_list|,
literal|"shard closed"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|recoveryState
specifier|public
name|RecoveryState
name|recoveryState
parameter_list|(
name|IndexShard
name|indexShard
parameter_list|)
block|{
try|try
init|(
name|RecoveriesCollection
operator|.
name|StatusRef
name|statusRef
init|=
name|onGoingRecoveries
operator|.
name|findRecoveryByShard
argument_list|(
name|indexShard
argument_list|)
init|)
block|{
if|if
condition|(
name|statusRef
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|RecoveryStatus
name|recoveryStatus
init|=
name|statusRef
operator|.
name|status
argument_list|()
decl_stmt|;
if|if
condition|(
name|recoveryStatus
operator|.
name|state
argument_list|()
operator|.
name|getTimer
argument_list|()
operator|.
name|startTime
argument_list|()
operator|>
literal|0
operator|&&
name|recoveryStatus
operator|.
name|stage
argument_list|()
operator|!=
name|RecoveryState
operator|.
name|Stage
operator|.
name|DONE
condition|)
block|{
name|recoveryStatus
operator|.
name|state
argument_list|()
operator|.
name|getTimer
argument_list|()
operator|.
name|time
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|recoveryStatus
operator|.
name|state
argument_list|()
operator|.
name|getTimer
argument_list|()
operator|.
name|startTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|recoveryStatus
operator|.
name|state
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// shouldn't really happen, but have to be here due to auto close
throw|throw
operator|new
name|ElasticsearchException
argument_list|(
literal|"error while getting recovery state"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|startRecovery
specifier|public
name|void
name|startRecovery
parameter_list|(
specifier|final
name|IndexShard
name|indexShard
parameter_list|,
specifier|final
name|RecoveryState
operator|.
name|Type
name|recoveryType
parameter_list|,
specifier|final
name|DiscoveryNode
name|sourceNode
parameter_list|,
specifier|final
name|RecoveryListener
name|listener
parameter_list|)
block|{
try|try
block|{
name|indexShard
operator|.
name|recovering
argument_list|(
literal|"from "
operator|+
name|sourceNode
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalIndexShardStateException
name|e
parameter_list|)
block|{
comment|// that's fine, since we might be called concurrently, just ignore this, we are already recovering
name|logger
operator|.
name|debug
argument_list|(
literal|"{} ignore recovery. already in recovering process, {}"
argument_list|,
name|indexShard
operator|.
name|shardId
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// create a new recovery status, and process...
name|RecoveryState
name|recoveryState
init|=
operator|new
name|RecoveryState
argument_list|(
name|indexShard
operator|.
name|shardId
argument_list|()
argument_list|)
decl_stmt|;
name|recoveryState
operator|.
name|setType
argument_list|(
name|recoveryType
argument_list|)
expr_stmt|;
name|recoveryState
operator|.
name|setSourceNode
argument_list|(
name|sourceNode
argument_list|)
expr_stmt|;
name|recoveryState
operator|.
name|setTargetNode
argument_list|(
name|clusterService
operator|.
name|localNode
argument_list|()
argument_list|)
expr_stmt|;
name|recoveryState
operator|.
name|setPrimary
argument_list|(
name|indexShard
operator|.
name|routingEntry
argument_list|()
operator|.
name|primary
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|long
name|recoveryId
init|=
name|onGoingRecoveries
operator|.
name|startRecovery
argument_list|(
name|indexShard
argument_list|,
name|sourceNode
argument_list|,
name|recoveryState
argument_list|,
name|listener
argument_list|)
decl_stmt|;
name|threadPool
operator|.
name|generic
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|RecoveryRunner
argument_list|(
name|recoveryId
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|retryRecovery
specifier|protected
name|void
name|retryRecovery
parameter_list|(
specifier|final
name|long
name|recoveryId
parameter_list|,
name|TimeValue
name|retryAfter
parameter_list|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"will retrying recovery with id [{}] in [{}]"
argument_list|,
name|recoveryId
argument_list|,
name|retryAfter
argument_list|)
expr_stmt|;
name|threadPool
operator|.
name|schedule
argument_list|(
name|retryAfter
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|GENERIC
argument_list|,
operator|new
name|RecoveryRunner
argument_list|(
name|recoveryId
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|doRecovery
specifier|private
name|void
name|doRecovery
parameter_list|(
specifier|final
name|RecoveryStatus
name|recoveryStatus
parameter_list|)
block|{
assert|assert
name|recoveryStatus
operator|.
name|sourceNode
argument_list|()
operator|!=
literal|null
operator|:
literal|"can't do a recovery without a source node"
assert|;
name|logger
operator|.
name|trace
argument_list|(
literal|"collecting local files for {}"
argument_list|,
name|recoveryStatus
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|StoreFileMetaData
argument_list|>
name|existingFiles
decl_stmt|;
try|try
block|{
name|existingFiles
operator|=
name|recoveryStatus
operator|.
name|store
argument_list|()
operator|.
name|getMetadataOrEmpty
argument_list|()
operator|.
name|asMap
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"error while listing local files, recovery as if there are none"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|onGoingRecoveries
operator|.
name|failRecovery
argument_list|(
name|recoveryStatus
operator|.
name|recoveryId
argument_list|()
argument_list|,
operator|new
name|RecoveryFailedException
argument_list|(
name|recoveryStatus
operator|.
name|state
argument_list|()
argument_list|,
literal|"failed to list local files"
argument_list|,
name|e
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return;
block|}
name|StartRecoveryRequest
name|request
init|=
operator|new
name|StartRecoveryRequest
argument_list|(
name|recoveryStatus
operator|.
name|shardId
argument_list|()
argument_list|,
name|recoveryStatus
operator|.
name|sourceNode
argument_list|()
argument_list|,
name|clusterService
operator|.
name|localNode
argument_list|()
argument_list|,
literal|false
argument_list|,
name|existingFiles
argument_list|,
name|recoveryStatus
operator|.
name|state
argument_list|()
operator|.
name|getType
argument_list|()
argument_list|,
name|recoveryStatus
operator|.
name|recoveryId
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"[{}][{}] starting recovery from {}"
argument_list|,
name|request
operator|.
name|shardId
argument_list|()
operator|.
name|index
argument_list|()
operator|.
name|name
argument_list|()
argument_list|,
name|request
operator|.
name|shardId
argument_list|()
operator|.
name|id
argument_list|()
argument_list|,
name|request
operator|.
name|sourceNode
argument_list|()
argument_list|)
expr_stmt|;
name|StopWatch
name|stopWatch
init|=
operator|new
name|StopWatch
argument_list|()
operator|.
name|start
argument_list|()
decl_stmt|;
name|recoveryStatus
operator|.
name|setWaitingRecoveryThread
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
argument_list|)
expr_stmt|;
name|RecoveryResponse
name|recoveryResponse
init|=
name|transportService
operator|.
name|submitRequest
argument_list|(
name|request
operator|.
name|sourceNode
argument_list|()
argument_list|,
name|RecoverySource
operator|.
name|Actions
operator|.
name|START_RECOVERY
argument_list|,
name|request
argument_list|,
operator|new
name|FutureTransportResponseHandler
argument_list|<
name|RecoveryResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|RecoveryResponse
name|newInstance
parameter_list|()
block|{
return|return
operator|new
name|RecoveryResponse
argument_list|()
return|;
block|}
block|}
argument_list|)
operator|.
name|txGet
argument_list|()
decl_stmt|;
name|recoveryStatus
operator|.
name|clearWaitingRecoveryThread
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
argument_list|)
expr_stmt|;
name|stopWatch
operator|.
name|stop
argument_list|()
expr_stmt|;
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'['
argument_list|)
operator|.
name|append
argument_list|(
name|request
operator|.
name|shardId
argument_list|()
operator|.
name|index
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|']'
argument_list|)
operator|.
name|append
argument_list|(
literal|'['
argument_list|)
operator|.
name|append
argument_list|(
name|request
operator|.
name|shardId
argument_list|()
operator|.
name|id
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"] "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"recovery completed from "
argument_list|)
operator|.
name|append
argument_list|(
name|request
operator|.
name|sourceNode
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|", took["
argument_list|)
operator|.
name|append
argument_list|(
name|stopWatch
operator|.
name|totalTime
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"]\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"   phase1: recovered_files ["
argument_list|)
operator|.
name|append
argument_list|(
name|recoveryResponse
operator|.
name|phase1FileNames
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
operator|.
name|append
argument_list|(
literal|" with total_size of ["
argument_list|)
operator|.
name|append
argument_list|(
operator|new
name|ByteSizeValue
argument_list|(
name|recoveryResponse
operator|.
name|phase1TotalSize
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
operator|.
name|append
argument_list|(
literal|", took ["
argument_list|)
operator|.
name|append
argument_list|(
name|timeValueMillis
argument_list|(
name|recoveryResponse
operator|.
name|phase1Time
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"], throttling_wait ["
argument_list|)
operator|.
name|append
argument_list|(
name|timeValueMillis
argument_list|(
name|recoveryResponse
operator|.
name|phase1ThrottlingWaitTime
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|']'
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"         : reusing_files   ["
argument_list|)
operator|.
name|append
argument_list|(
name|recoveryResponse
operator|.
name|phase1ExistingFileNames
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"] with total_size of ["
argument_list|)
operator|.
name|append
argument_list|(
operator|new
name|ByteSizeValue
argument_list|(
name|recoveryResponse
operator|.
name|phase1ExistingTotalSize
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"]\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"   phase2: start took ["
argument_list|)
operator|.
name|append
argument_list|(
name|timeValueMillis
argument_list|(
name|recoveryResponse
operator|.
name|startTime
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"]\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"         : recovered ["
argument_list|)
operator|.
name|append
argument_list|(
name|recoveryResponse
operator|.
name|phase2Operations
argument_list|)
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
operator|.
name|append
argument_list|(
literal|" transaction log operations"
argument_list|)
operator|.
name|append
argument_list|(
literal|", took ["
argument_list|)
operator|.
name|append
argument_list|(
name|timeValueMillis
argument_list|(
name|recoveryResponse
operator|.
name|phase2Time
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"   phase3: recovered ["
argument_list|)
operator|.
name|append
argument_list|(
name|recoveryResponse
operator|.
name|phase3Operations
argument_list|)
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
operator|.
name|append
argument_list|(
literal|" transaction log operations"
argument_list|)
operator|.
name|append
argument_list|(
literal|", took ["
argument_list|)
operator|.
name|append
argument_list|(
name|timeValueMillis
argument_list|(
name|recoveryResponse
operator|.
name|phase3Time
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
name|logger
operator|.
name|trace
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|logger
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"{} recovery completed from [{}], took [{}]"
argument_list|,
name|request
operator|.
name|shardId
argument_list|()
argument_list|,
name|request
operator|.
name|sourceNode
argument_list|()
argument_list|,
name|stopWatch
operator|.
name|totalTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// do this through ongoing recoveries to remove it from the collection
name|onGoingRecoveries
operator|.
name|markRecoveryAsDone
argument_list|(
name|recoveryStatus
operator|.
name|recoveryId
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"[{}][{}] Got exception on recovery"
argument_list|,
name|e
argument_list|,
name|request
operator|.
name|shardId
argument_list|()
operator|.
name|index
argument_list|()
operator|.
name|name
argument_list|()
argument_list|,
name|request
operator|.
name|shardId
argument_list|()
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Throwable
name|cause
init|=
name|ExceptionsHelper
operator|.
name|unwrapCause
argument_list|(
name|e
argument_list|)
decl_stmt|;
if|if
condition|(
name|cause
operator|instanceof
name|RecoveryEngineException
condition|)
block|{
comment|// unwrap an exception that was thrown as part of the recovery
name|cause
operator|=
name|cause
operator|.
name|getCause
argument_list|()
expr_stmt|;
block|}
comment|// do it twice, in case we have double transport exception
name|cause
operator|=
name|ExceptionsHelper
operator|.
name|unwrapCause
argument_list|(
name|cause
argument_list|)
expr_stmt|;
if|if
condition|(
name|cause
operator|instanceof
name|RecoveryEngineException
condition|)
block|{
comment|// unwrap an exception that was thrown as part of the recovery
name|cause
operator|=
name|cause
operator|.
name|getCause
argument_list|()
expr_stmt|;
block|}
comment|// here, we would add checks against exception that need to be retried (and not removeAndClean in this case)
if|if
condition|(
name|cause
operator|instanceof
name|IndexShardNotStartedException
operator|||
name|cause
operator|instanceof
name|IndexMissingException
operator|||
name|cause
operator|instanceof
name|IndexShardMissingException
condition|)
block|{
comment|// if the target is not ready yet, retry
name|retryRecovery
argument_list|(
name|recoveryStatus
operator|.
name|recoveryId
argument_list|()
argument_list|,
name|recoverySettings
operator|.
name|retryDelay
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|cause
operator|instanceof
name|DelayRecoveryException
condition|)
block|{
name|retryRecovery
argument_list|(
name|recoveryStatus
operator|.
name|recoveryId
argument_list|()
argument_list|,
name|recoverySettings
operator|.
name|retryDelay
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|cause
operator|instanceof
name|ConnectTransportException
condition|)
block|{
name|onGoingRecoveries
operator|.
name|failRecovery
argument_list|(
name|recoveryStatus
operator|.
name|recoveryId
argument_list|()
argument_list|,
operator|new
name|RecoveryFailedException
argument_list|(
name|request
argument_list|,
literal|"source node disconnected"
argument_list|,
name|cause
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|cause
operator|instanceof
name|IndexShardClosedException
condition|)
block|{
name|onGoingRecoveries
operator|.
name|failRecovery
argument_list|(
name|recoveryStatus
operator|.
name|recoveryId
argument_list|()
argument_list|,
operator|new
name|RecoveryFailedException
argument_list|(
name|request
argument_list|,
literal|"source shard is closed"
argument_list|,
name|cause
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|cause
operator|instanceof
name|AlreadyClosedException
condition|)
block|{
name|onGoingRecoveries
operator|.
name|failRecovery
argument_list|(
name|recoveryStatus
operator|.
name|recoveryId
argument_list|()
argument_list|,
operator|new
name|RecoveryFailedException
argument_list|(
name|request
argument_list|,
literal|"source shard is closed"
argument_list|,
name|cause
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return;
block|}
name|onGoingRecoveries
operator|.
name|failRecovery
argument_list|(
name|recoveryStatus
operator|.
name|recoveryId
argument_list|()
argument_list|,
operator|new
name|RecoveryFailedException
argument_list|(
name|request
argument_list|,
name|e
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
DECL|interface|RecoveryListener
specifier|public
specifier|static
interface|interface
name|RecoveryListener
block|{
DECL|method|onRecoveryDone
name|void
name|onRecoveryDone
parameter_list|(
name|RecoveryState
name|state
parameter_list|)
function_decl|;
DECL|method|onRecoveryFailure
name|void
name|onRecoveryFailure
parameter_list|(
name|RecoveryState
name|state
parameter_list|,
name|RecoveryFailedException
name|e
parameter_list|,
name|boolean
name|sendShardFailure
parameter_list|)
function_decl|;
block|}
DECL|class|PrepareForTranslogOperationsRequestHandler
class|class
name|PrepareForTranslogOperationsRequestHandler
extends|extends
name|BaseTransportRequestHandler
argument_list|<
name|RecoveryPrepareForTranslogOperationsRequest
argument_list|>
block|{
annotation|@
name|Override
DECL|method|newInstance
specifier|public
name|RecoveryPrepareForTranslogOperationsRequest
name|newInstance
parameter_list|()
block|{
return|return
operator|new
name|RecoveryPrepareForTranslogOperationsRequest
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|executor
specifier|public
name|String
name|executor
parameter_list|()
block|{
return|return
name|ThreadPool
operator|.
name|Names
operator|.
name|GENERIC
return|;
block|}
annotation|@
name|Override
DECL|method|messageReceived
specifier|public
name|void
name|messageReceived
parameter_list|(
name|RecoveryPrepareForTranslogOperationsRequest
name|request
parameter_list|,
name|TransportChannel
name|channel
parameter_list|)
throws|throws
name|Exception
block|{
try|try
init|(
name|RecoveriesCollection
operator|.
name|StatusRef
name|statusRef
init|=
name|onGoingRecoveries
operator|.
name|getStatusSafe
argument_list|(
name|request
operator|.
name|recoveryId
argument_list|()
argument_list|,
name|request
operator|.
name|shardId
argument_list|()
argument_list|)
init|)
block|{
specifier|final
name|RecoveryStatus
name|recoveryStatus
init|=
name|statusRef
operator|.
name|status
argument_list|()
decl_stmt|;
name|recoveryStatus
operator|.
name|indexShard
argument_list|()
operator|.
name|performRecoveryPrepareForTranslog
argument_list|()
expr_stmt|;
name|recoveryStatus
operator|.
name|stage
argument_list|(
name|RecoveryState
operator|.
name|Stage
operator|.
name|TRANSLOG
argument_list|)
expr_stmt|;
name|recoveryStatus
operator|.
name|state
argument_list|()
operator|.
name|getStart
argument_list|()
operator|.
name|checkIndexTime
argument_list|(
name|recoveryStatus
operator|.
name|indexShard
argument_list|()
operator|.
name|checkIndexTook
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|channel
operator|.
name|sendResponse
argument_list|(
name|TransportResponse
operator|.
name|Empty
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|FinalizeRecoveryRequestHandler
class|class
name|FinalizeRecoveryRequestHandler
extends|extends
name|BaseTransportRequestHandler
argument_list|<
name|RecoveryFinalizeRecoveryRequest
argument_list|>
block|{
annotation|@
name|Override
DECL|method|newInstance
specifier|public
name|RecoveryFinalizeRecoveryRequest
name|newInstance
parameter_list|()
block|{
return|return
operator|new
name|RecoveryFinalizeRecoveryRequest
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|executor
specifier|public
name|String
name|executor
parameter_list|()
block|{
return|return
name|ThreadPool
operator|.
name|Names
operator|.
name|GENERIC
return|;
block|}
annotation|@
name|Override
DECL|method|messageReceived
specifier|public
name|void
name|messageReceived
parameter_list|(
name|RecoveryFinalizeRecoveryRequest
name|request
parameter_list|,
name|TransportChannel
name|channel
parameter_list|)
throws|throws
name|Exception
block|{
try|try
init|(
name|RecoveriesCollection
operator|.
name|StatusRef
name|statusRef
init|=
name|onGoingRecoveries
operator|.
name|getStatusSafe
argument_list|(
name|request
operator|.
name|recoveryId
argument_list|()
argument_list|,
name|request
operator|.
name|shardId
argument_list|()
argument_list|)
init|)
block|{
specifier|final
name|RecoveryStatus
name|recoveryStatus
init|=
name|statusRef
operator|.
name|status
argument_list|()
decl_stmt|;
name|recoveryStatus
operator|.
name|indexShard
argument_list|()
operator|.
name|performRecoveryFinalization
argument_list|(
literal|false
argument_list|,
name|recoveryStatus
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
name|recoveryStatus
operator|.
name|state
argument_list|()
operator|.
name|getTimer
argument_list|()
operator|.
name|time
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|recoveryStatus
operator|.
name|state
argument_list|()
operator|.
name|getTimer
argument_list|()
operator|.
name|startTime
argument_list|()
argument_list|)
expr_stmt|;
name|recoveryStatus
operator|.
name|stage
argument_list|(
name|RecoveryState
operator|.
name|Stage
operator|.
name|DONE
argument_list|)
expr_stmt|;
block|}
name|channel
operator|.
name|sendResponse
argument_list|(
name|TransportResponse
operator|.
name|Empty
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|TranslogOperationsRequestHandler
class|class
name|TranslogOperationsRequestHandler
extends|extends
name|BaseTransportRequestHandler
argument_list|<
name|RecoveryTranslogOperationsRequest
argument_list|>
block|{
annotation|@
name|Override
DECL|method|newInstance
specifier|public
name|RecoveryTranslogOperationsRequest
name|newInstance
parameter_list|()
block|{
return|return
operator|new
name|RecoveryTranslogOperationsRequest
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|executor
specifier|public
name|String
name|executor
parameter_list|()
block|{
return|return
name|ThreadPool
operator|.
name|Names
operator|.
name|GENERIC
return|;
block|}
annotation|@
name|Override
DECL|method|messageReceived
specifier|public
name|void
name|messageReceived
parameter_list|(
name|RecoveryTranslogOperationsRequest
name|request
parameter_list|,
name|TransportChannel
name|channel
parameter_list|)
throws|throws
name|Exception
block|{
try|try
init|(
name|RecoveriesCollection
operator|.
name|StatusRef
name|statusRef
init|=
name|onGoingRecoveries
operator|.
name|getStatusSafe
argument_list|(
name|request
operator|.
name|recoveryId
argument_list|()
argument_list|,
name|request
operator|.
name|shardId
argument_list|()
argument_list|)
init|)
block|{
specifier|final
name|RecoveryStatus
name|recoveryStatus
init|=
name|statusRef
operator|.
name|status
argument_list|()
decl_stmt|;
for|for
control|(
name|Translog
operator|.
name|Operation
name|operation
range|:
name|request
operator|.
name|operations
argument_list|()
control|)
block|{
name|recoveryStatus
operator|.
name|indexShard
argument_list|()
operator|.
name|performRecoveryOperation
argument_list|(
name|operation
argument_list|)
expr_stmt|;
name|recoveryStatus
operator|.
name|state
argument_list|()
operator|.
name|getTranslog
argument_list|()
operator|.
name|incrementTranslogOperations
argument_list|()
expr_stmt|;
block|}
block|}
name|channel
operator|.
name|sendResponse
argument_list|(
name|TransportResponse
operator|.
name|Empty
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|FilesInfoRequestHandler
class|class
name|FilesInfoRequestHandler
extends|extends
name|BaseTransportRequestHandler
argument_list|<
name|RecoveryFilesInfoRequest
argument_list|>
block|{
annotation|@
name|Override
DECL|method|newInstance
specifier|public
name|RecoveryFilesInfoRequest
name|newInstance
parameter_list|()
block|{
return|return
operator|new
name|RecoveryFilesInfoRequest
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|executor
specifier|public
name|String
name|executor
parameter_list|()
block|{
return|return
name|ThreadPool
operator|.
name|Names
operator|.
name|GENERIC
return|;
block|}
annotation|@
name|Override
DECL|method|messageReceived
specifier|public
name|void
name|messageReceived
parameter_list|(
name|RecoveryFilesInfoRequest
name|request
parameter_list|,
name|TransportChannel
name|channel
parameter_list|)
throws|throws
name|Exception
block|{
try|try
init|(
name|RecoveriesCollection
operator|.
name|StatusRef
name|statusRef
init|=
name|onGoingRecoveries
operator|.
name|getStatusSafe
argument_list|(
name|request
operator|.
name|recoveryId
argument_list|()
argument_list|,
name|request
operator|.
name|shardId
argument_list|()
argument_list|)
init|)
block|{
specifier|final
name|RecoveryStatus
name|recoveryStatus
init|=
name|statusRef
operator|.
name|status
argument_list|()
decl_stmt|;
specifier|final
name|RecoveryState
operator|.
name|Index
name|index
init|=
name|recoveryStatus
operator|.
name|state
argument_list|()
operator|.
name|getIndex
argument_list|()
decl_stmt|;
name|index
operator|.
name|addFileDetails
argument_list|(
name|request
operator|.
name|phase1FileNames
argument_list|,
name|request
operator|.
name|phase1FileSizes
argument_list|)
expr_stmt|;
name|index
operator|.
name|addReusedFileDetails
argument_list|(
name|request
operator|.
name|phase1ExistingFileNames
argument_list|,
name|request
operator|.
name|phase1ExistingFileSizes
argument_list|)
expr_stmt|;
name|index
operator|.
name|totalByteCount
argument_list|(
name|request
operator|.
name|phase1TotalSize
argument_list|)
expr_stmt|;
name|index
operator|.
name|totalFileCount
argument_list|(
name|request
operator|.
name|phase1FileNames
operator|.
name|size
argument_list|()
operator|+
name|request
operator|.
name|phase1ExistingFileNames
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|index
operator|.
name|reusedByteCount
argument_list|(
name|request
operator|.
name|phase1ExistingTotalSize
argument_list|)
expr_stmt|;
name|index
operator|.
name|reusedFileCount
argument_list|(
name|request
operator|.
name|phase1ExistingFileNames
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// recoveryBytesCount / recoveryFileCount will be set as we go...
name|recoveryStatus
operator|.
name|stage
argument_list|(
name|RecoveryState
operator|.
name|Stage
operator|.
name|INDEX
argument_list|)
expr_stmt|;
name|channel
operator|.
name|sendResponse
argument_list|(
name|TransportResponse
operator|.
name|Empty
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|CleanFilesRequestHandler
class|class
name|CleanFilesRequestHandler
extends|extends
name|BaseTransportRequestHandler
argument_list|<
name|RecoveryCleanFilesRequest
argument_list|>
block|{
annotation|@
name|Override
DECL|method|newInstance
specifier|public
name|RecoveryCleanFilesRequest
name|newInstance
parameter_list|()
block|{
return|return
operator|new
name|RecoveryCleanFilesRequest
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|executor
specifier|public
name|String
name|executor
parameter_list|()
block|{
return|return
name|ThreadPool
operator|.
name|Names
operator|.
name|GENERIC
return|;
block|}
annotation|@
name|Override
DECL|method|messageReceived
specifier|public
name|void
name|messageReceived
parameter_list|(
name|RecoveryCleanFilesRequest
name|request
parameter_list|,
name|TransportChannel
name|channel
parameter_list|)
throws|throws
name|Exception
block|{
try|try
init|(
name|RecoveriesCollection
operator|.
name|StatusRef
name|statusRef
init|=
name|onGoingRecoveries
operator|.
name|getStatusSafe
argument_list|(
name|request
operator|.
name|recoveryId
argument_list|()
argument_list|,
name|request
operator|.
name|shardId
argument_list|()
argument_list|)
init|)
block|{
specifier|final
name|RecoveryStatus
name|recoveryStatus
init|=
name|statusRef
operator|.
name|status
argument_list|()
decl_stmt|;
comment|// first, we go and move files that were created with the recovery id suffix to
comment|// the actual names, its ok if we have a corrupted index here, since we have replicas
comment|// to recover from in case of a full cluster shutdown just when this code executes...
name|recoveryStatus
operator|.
name|renameAllTempFiles
argument_list|()
expr_stmt|;
specifier|final
name|Store
name|store
init|=
name|recoveryStatus
operator|.
name|store
argument_list|()
decl_stmt|;
comment|// now write checksums
name|recoveryStatus
operator|.
name|legacyChecksums
argument_list|()
operator|.
name|write
argument_list|(
name|store
argument_list|)
expr_stmt|;
name|Store
operator|.
name|MetadataSnapshot
name|sourceMetaData
init|=
name|request
operator|.
name|sourceMetaSnapshot
argument_list|()
decl_stmt|;
try|try
block|{
name|store
operator|.
name|cleanupAndVerify
argument_list|(
literal|"recovery CleanFilesRequestHandler"
argument_list|,
name|sourceMetaData
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RecoveryFailedException
argument_list|(
name|recoveryStatus
operator|.
name|state
argument_list|()
argument_list|,
literal|"failed to clean after recovery"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
name|channel
operator|.
name|sendResponse
argument_list|(
name|TransportResponse
operator|.
name|Empty
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|FileChunkTransportRequestHandler
class|class
name|FileChunkTransportRequestHandler
extends|extends
name|BaseTransportRequestHandler
argument_list|<
name|RecoveryFileChunkRequest
argument_list|>
block|{
annotation|@
name|Override
DECL|method|newInstance
specifier|public
name|RecoveryFileChunkRequest
name|newInstance
parameter_list|()
block|{
return|return
operator|new
name|RecoveryFileChunkRequest
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|executor
specifier|public
name|String
name|executor
parameter_list|()
block|{
return|return
name|ThreadPool
operator|.
name|Names
operator|.
name|GENERIC
return|;
block|}
annotation|@
name|Override
DECL|method|messageReceived
specifier|public
name|void
name|messageReceived
parameter_list|(
specifier|final
name|RecoveryFileChunkRequest
name|request
parameter_list|,
name|TransportChannel
name|channel
parameter_list|)
throws|throws
name|Exception
block|{
try|try
init|(
name|RecoveriesCollection
operator|.
name|StatusRef
name|statusRef
init|=
name|onGoingRecoveries
operator|.
name|getStatusSafe
argument_list|(
name|request
operator|.
name|recoveryId
argument_list|()
argument_list|,
name|request
operator|.
name|shardId
argument_list|()
argument_list|)
init|)
block|{
specifier|final
name|RecoveryStatus
name|recoveryStatus
init|=
name|statusRef
operator|.
name|status
argument_list|()
decl_stmt|;
specifier|final
name|Store
name|store
init|=
name|recoveryStatus
operator|.
name|store
argument_list|()
decl_stmt|;
name|IndexOutput
name|indexOutput
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|position
argument_list|()
operator|==
literal|0
condition|)
block|{
name|indexOutput
operator|=
name|recoveryStatus
operator|.
name|openAndPutIndexOutput
argument_list|(
name|request
operator|.
name|name
argument_list|()
argument_list|,
name|request
operator|.
name|metadata
argument_list|()
argument_list|,
name|store
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|indexOutput
operator|=
name|recoveryStatus
operator|.
name|getOpenIndexOutput
argument_list|(
name|request
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|recoverySettings
operator|.
name|rateLimiter
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|recoverySettings
operator|.
name|rateLimiter
argument_list|()
operator|.
name|pause
argument_list|(
name|request
operator|.
name|content
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|BytesReference
name|content
init|=
name|request
operator|.
name|content
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|content
operator|.
name|hasArray
argument_list|()
condition|)
block|{
name|content
operator|=
name|content
operator|.
name|toBytesArray
argument_list|()
expr_stmt|;
block|}
name|indexOutput
operator|.
name|writeBytes
argument_list|(
name|content
operator|.
name|array
argument_list|()
argument_list|,
name|content
operator|.
name|arrayOffset
argument_list|()
argument_list|,
name|content
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|recoveryStatus
operator|.
name|state
argument_list|()
operator|.
name|getIndex
argument_list|()
operator|.
name|addRecoveredByteCount
argument_list|(
name|content
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|RecoveryState
operator|.
name|File
name|file
init|=
name|recoveryStatus
operator|.
name|state
argument_list|()
operator|.
name|getIndex
argument_list|()
operator|.
name|file
argument_list|(
name|request
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|!=
literal|null
condition|)
block|{
name|file
operator|.
name|updateRecovered
argument_list|(
name|request
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|indexOutput
operator|.
name|getFilePointer
argument_list|()
operator|>=
name|request
operator|.
name|length
argument_list|()
operator|||
name|request
operator|.
name|lastChunk
argument_list|()
condition|)
block|{
try|try
block|{
name|Store
operator|.
name|verify
argument_list|(
name|indexOutput
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// we are done
name|indexOutput
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// write the checksum
name|recoveryStatus
operator|.
name|legacyChecksums
argument_list|()
operator|.
name|add
argument_list|(
name|request
operator|.
name|metadata
argument_list|()
argument_list|)
expr_stmt|;
name|store
operator|.
name|directory
argument_list|()
operator|.
name|sync
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|request
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|IndexOutput
name|remove
init|=
name|recoveryStatus
operator|.
name|removeOpenIndexOutputs
argument_list|(
name|request
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
name|recoveryStatus
operator|.
name|state
argument_list|()
operator|.
name|getIndex
argument_list|()
operator|.
name|addRecoveredFileCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
assert|assert
name|remove
operator|==
literal|null
operator|||
name|remove
operator|==
name|indexOutput
assert|;
comment|// remove maybe null if we got finished
block|}
block|}
name|channel
operator|.
name|sendResponse
argument_list|(
name|TransportResponse
operator|.
name|Empty
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|RecoveryRunner
class|class
name|RecoveryRunner
extends|extends
name|AbstractRunnable
block|{
DECL|field|recoveryId
specifier|final
name|long
name|recoveryId
decl_stmt|;
DECL|method|RecoveryRunner
name|RecoveryRunner
parameter_list|(
name|long
name|recoveryId
parameter_list|)
block|{
name|this
operator|.
name|recoveryId
operator|=
name|recoveryId
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onFailure
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
try|try
init|(
name|RecoveriesCollection
operator|.
name|StatusRef
name|statusRef
init|=
name|onGoingRecoveries
operator|.
name|getStatus
argument_list|(
name|recoveryId
argument_list|)
init|)
block|{
if|if
condition|(
name|statusRef
operator|!=
literal|null
condition|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"unexpected error during recovery [{}], failing shard"
argument_list|,
name|t
argument_list|,
name|recoveryId
argument_list|)
expr_stmt|;
name|onGoingRecoveries
operator|.
name|failRecovery
argument_list|(
name|recoveryId
argument_list|,
operator|new
name|RecoveryFailedException
argument_list|(
name|statusRef
operator|.
name|status
argument_list|()
operator|.
name|state
argument_list|()
argument_list|,
literal|"unexpected error"
argument_list|,
name|t
argument_list|)
argument_list|,
literal|true
comment|// be safe
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"unexpected error during recovery, but recovery id [{}] is finished"
argument_list|,
name|t
argument_list|,
name|recoveryId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|doRun
specifier|public
name|void
name|doRun
parameter_list|()
block|{
name|RecoveriesCollection
operator|.
name|StatusRef
name|statusRef
init|=
name|onGoingRecoveries
operator|.
name|getStatus
argument_list|(
name|recoveryId
argument_list|)
decl_stmt|;
if|if
condition|(
name|statusRef
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"not running recovery with id [{}] - can't find it (probably finished)"
argument_list|,
name|recoveryId
argument_list|)
expr_stmt|;
return|return;
block|}
try|try
block|{
name|doRecovery
argument_list|(
name|statusRef
operator|.
name|status
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// make sure we never interrupt the thread after we have released it back to the pool
name|statusRef
operator|.
name|status
argument_list|()
operator|.
name|clearWaitingRecoveryThread
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
argument_list|)
expr_stmt|;
name|statusRef
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

