begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.indices.recovery
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|recovery
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IOContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|action
operator|.
name|index
operator|.
name|MappingUpdatedAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|MappingMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RoutingNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRouting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|StopWatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableOpenMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|AbstractComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|compress
operator|.
name|CompressorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|ByteSizeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|deletionpolicy
operator|.
name|SnapshotIndexCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|Engine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|DocumentMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MapperService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|service
operator|.
name|IndexService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|IllegalIndexShardStateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|IndexShardClosedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|IndexShardState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|service
operator|.
name|InternalIndexShard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|store
operator|.
name|Store
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|store
operator|.
name|StoreFileMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|translog
operator|.
name|Translog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|IndicesService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_comment
comment|/**  * The source recovery accepts recovery requests from other peer shards and start the recovery process from this  * source shard to the target shard.  */
end_comment

begin_class
DECL|class|RecoverySource
specifier|public
class|class
name|RecoverySource
extends|extends
name|AbstractComponent
block|{
DECL|class|Actions
specifier|public
specifier|static
class|class
name|Actions
block|{
DECL|field|START_RECOVERY
specifier|public
specifier|static
specifier|final
name|String
name|START_RECOVERY
init|=
literal|"index/shard/recovery/startRecovery"
decl_stmt|;
block|}
DECL|field|transportService
specifier|private
specifier|final
name|TransportService
name|transportService
decl_stmt|;
DECL|field|indicesService
specifier|private
specifier|final
name|IndicesService
name|indicesService
decl_stmt|;
DECL|field|recoverySettings
specifier|private
specifier|final
name|RecoverySettings
name|recoverySettings
decl_stmt|;
DECL|field|mappingUpdatedAction
specifier|private
specifier|final
name|MappingUpdatedAction
name|mappingUpdatedAction
decl_stmt|;
DECL|field|clusterService
specifier|private
specifier|final
name|ClusterService
name|clusterService
decl_stmt|;
DECL|field|internalActionTimeout
specifier|private
specifier|final
name|TimeValue
name|internalActionTimeout
decl_stmt|;
DECL|field|internalActionLongTimeout
specifier|private
specifier|final
name|TimeValue
name|internalActionLongTimeout
decl_stmt|;
annotation|@
name|Inject
DECL|method|RecoverySource
specifier|public
name|RecoverySource
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|TransportService
name|transportService
parameter_list|,
name|IndicesService
name|indicesService
parameter_list|,
name|RecoverySettings
name|recoverySettings
parameter_list|,
name|MappingUpdatedAction
name|mappingUpdatedAction
parameter_list|,
name|ClusterService
name|clusterService
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|transportService
operator|=
name|transportService
expr_stmt|;
name|this
operator|.
name|indicesService
operator|=
name|indicesService
expr_stmt|;
name|this
operator|.
name|mappingUpdatedAction
operator|=
name|mappingUpdatedAction
expr_stmt|;
name|this
operator|.
name|clusterService
operator|=
name|clusterService
expr_stmt|;
name|this
operator|.
name|recoverySettings
operator|=
name|recoverySettings
expr_stmt|;
name|transportService
operator|.
name|registerHandler
argument_list|(
name|Actions
operator|.
name|START_RECOVERY
argument_list|,
operator|new
name|StartRecoveryTransportRequestHandler
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|internalActionTimeout
operator|=
name|componentSettings
operator|.
name|getAsTime
argument_list|(
literal|"internal_action_timeout"
argument_list|,
name|TimeValue
operator|.
name|timeValueMinutes
argument_list|(
literal|15
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|internalActionLongTimeout
operator|=
operator|new
name|TimeValue
argument_list|(
name|internalActionTimeout
operator|.
name|millis
argument_list|()
operator|*
literal|2
argument_list|)
expr_stmt|;
block|}
DECL|method|recover
specifier|private
name|RecoveryResponse
name|recover
parameter_list|(
specifier|final
name|StartRecoveryRequest
name|request
parameter_list|)
block|{
specifier|final
name|IndexService
name|indexService
init|=
name|indicesService
operator|.
name|indexServiceSafe
argument_list|(
name|request
operator|.
name|shardId
argument_list|()
operator|.
name|index
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|InternalIndexShard
name|shard
init|=
operator|(
name|InternalIndexShard
operator|)
name|indexService
operator|.
name|shardSafe
argument_list|(
name|request
operator|.
name|shardId
argument_list|()
operator|.
name|id
argument_list|()
argument_list|)
decl_stmt|;
comment|// verify that our (the source) shard state is marking the shard to be in recovery mode as well, otherwise
comment|// the index operations will not be routed to it properly
name|RoutingNode
name|node
init|=
name|clusterService
operator|.
name|state
argument_list|()
operator|.
name|readOnlyRoutingNodes
argument_list|()
operator|.
name|node
argument_list|(
name|request
operator|.
name|targetNode
argument_list|()
operator|.
name|id
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"delaying recovery of {} as source node {} is unknown"
argument_list|,
name|request
operator|.
name|shardId
argument_list|()
argument_list|,
name|request
operator|.
name|targetNode
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|DelayRecoveryException
argument_list|(
literal|"source node does not have the node ["
operator|+
name|request
operator|.
name|targetNode
argument_list|()
operator|+
literal|"] in its state yet.."
argument_list|)
throw|;
block|}
name|ShardRouting
name|targetShardRouting
init|=
literal|null
decl_stmt|;
for|for
control|(
name|ShardRouting
name|shardRouting
range|:
name|node
control|)
block|{
if|if
condition|(
name|shardRouting
operator|.
name|shardId
argument_list|()
operator|.
name|equals
argument_list|(
name|request
operator|.
name|shardId
argument_list|()
argument_list|)
condition|)
block|{
name|targetShardRouting
operator|=
name|shardRouting
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|targetShardRouting
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"delaying recovery of {} as it is not listed as assigned to target node {}"
argument_list|,
name|request
operator|.
name|shardId
argument_list|()
argument_list|,
name|request
operator|.
name|targetNode
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|DelayRecoveryException
argument_list|(
literal|"source node does not have the shard listed in its state as allocated on the node"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|targetShardRouting
operator|.
name|initializing
argument_list|()
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"delaying recovery of {} as it is not listed as initializing on the target node {}. known shards state is [{}]"
argument_list|,
name|request
operator|.
name|shardId
argument_list|()
argument_list|,
name|request
operator|.
name|targetNode
argument_list|()
argument_list|,
name|targetShardRouting
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|DelayRecoveryException
argument_list|(
literal|"source node has the state of the target shard to be ["
operator|+
name|targetShardRouting
operator|.
name|state
argument_list|()
operator|+
literal|"], expecting to be [initializing]"
argument_list|)
throw|;
block|}
name|logger
operator|.
name|trace
argument_list|(
literal|"[{}][{}] starting recovery to {}, mark_as_relocated {}"
argument_list|,
name|request
operator|.
name|shardId
argument_list|()
operator|.
name|index
argument_list|()
operator|.
name|name
argument_list|()
argument_list|,
name|request
operator|.
name|shardId
argument_list|()
operator|.
name|id
argument_list|()
argument_list|,
name|request
operator|.
name|targetNode
argument_list|()
argument_list|,
name|request
operator|.
name|markAsRelocated
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|RecoveryResponse
name|response
init|=
operator|new
name|RecoveryResponse
argument_list|()
decl_stmt|;
name|shard
operator|.
name|recover
argument_list|(
operator|new
name|Engine
operator|.
name|RecoveryHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|phase1
parameter_list|(
specifier|final
name|SnapshotIndexCommit
name|snapshot
parameter_list|)
throws|throws
name|ElasticsearchException
block|{
name|long
name|totalSize
init|=
literal|0
decl_stmt|;
name|long
name|existingTotalSize
init|=
literal|0
decl_stmt|;
specifier|final
name|Store
name|store
init|=
name|shard
operator|.
name|store
argument_list|()
decl_stmt|;
name|store
operator|.
name|incRef
argument_list|()
expr_stmt|;
try|try
block|{
name|StopWatch
name|stopWatch
init|=
operator|new
name|StopWatch
argument_list|()
operator|.
name|start
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|snapshot
operator|.
name|getFiles
argument_list|()
control|)
block|{
name|StoreFileMetaData
name|md
init|=
name|store
operator|.
name|metaData
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|boolean
name|useExisting
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|existingFiles
argument_list|()
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
block|{
comment|// we don't compute checksum for segments, so always recover them
if|if
condition|(
operator|!
name|name
operator|.
name|startsWith
argument_list|(
literal|"segments"
argument_list|)
operator|&&
name|md
operator|.
name|isSame
argument_list|(
name|request
operator|.
name|existingFiles
argument_list|()
operator|.
name|get
argument_list|(
name|name
argument_list|)
argument_list|)
condition|)
block|{
name|response
operator|.
name|phase1ExistingFileNames
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|response
operator|.
name|phase1ExistingFileSizes
operator|.
name|add
argument_list|(
name|md
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|existingTotalSize
operator|+=
name|md
operator|.
name|length
argument_list|()
expr_stmt|;
name|useExisting
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"[{}][{}] recovery [phase1] to {}: not recovering [{}], exists in local store and has checksum [{}], size [{}]"
argument_list|,
name|request
operator|.
name|shardId
argument_list|()
operator|.
name|index
argument_list|()
operator|.
name|name
argument_list|()
argument_list|,
name|request
operator|.
name|shardId
argument_list|()
operator|.
name|id
argument_list|()
argument_list|,
name|request
operator|.
name|targetNode
argument_list|()
argument_list|,
name|name
argument_list|,
name|md
operator|.
name|checksum
argument_list|()
argument_list|,
name|md
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|useExisting
condition|)
block|{
if|if
condition|(
name|request
operator|.
name|existingFiles
argument_list|()
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"[{}][{}] recovery [phase1] to {}: recovering [{}], exists in local store, but is different: remote [{}], local [{}]"
argument_list|,
name|request
operator|.
name|shardId
argument_list|()
operator|.
name|index
argument_list|()
operator|.
name|name
argument_list|()
argument_list|,
name|request
operator|.
name|shardId
argument_list|()
operator|.
name|id
argument_list|()
argument_list|,
name|request
operator|.
name|targetNode
argument_list|()
argument_list|,
name|name
argument_list|,
name|request
operator|.
name|existingFiles
argument_list|()
operator|.
name|get
argument_list|(
name|name
argument_list|)
argument_list|,
name|md
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"[{}][{}] recovery [phase1] to {}: recovering [{}], does not exists in remote"
argument_list|,
name|request
operator|.
name|shardId
argument_list|()
operator|.
name|index
argument_list|()
operator|.
name|name
argument_list|()
argument_list|,
name|request
operator|.
name|shardId
argument_list|()
operator|.
name|id
argument_list|()
argument_list|,
name|request
operator|.
name|targetNode
argument_list|()
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
name|response
operator|.
name|phase1FileNames
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|response
operator|.
name|phase1FileSizes
operator|.
name|add
argument_list|(
name|md
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|totalSize
operator|+=
name|md
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
name|response
operator|.
name|phase1TotalSize
operator|=
name|totalSize
expr_stmt|;
name|response
operator|.
name|phase1ExistingTotalSize
operator|=
name|existingTotalSize
expr_stmt|;
name|logger
operator|.
name|trace
argument_list|(
literal|"[{}][{}] recovery [phase1] to {}: recovering_files [{}] with total_size [{}], reusing_files [{}] with total_size [{}]"
argument_list|,
name|request
operator|.
name|shardId
argument_list|()
operator|.
name|index
argument_list|()
operator|.
name|name
argument_list|()
argument_list|,
name|request
operator|.
name|shardId
argument_list|()
operator|.
name|id
argument_list|()
argument_list|,
name|request
operator|.
name|targetNode
argument_list|()
argument_list|,
name|response
operator|.
name|phase1FileNames
operator|.
name|size
argument_list|()
argument_list|,
operator|new
name|ByteSizeValue
argument_list|(
name|totalSize
argument_list|)
argument_list|,
name|response
operator|.
name|phase1ExistingFileNames
operator|.
name|size
argument_list|()
argument_list|,
operator|new
name|ByteSizeValue
argument_list|(
name|existingTotalSize
argument_list|)
argument_list|)
expr_stmt|;
name|RecoveryFilesInfoRequest
name|recoveryInfoFilesRequest
init|=
operator|new
name|RecoveryFilesInfoRequest
argument_list|(
name|request
operator|.
name|recoveryId
argument_list|()
argument_list|,
name|request
operator|.
name|shardId
argument_list|()
argument_list|,
name|response
operator|.
name|phase1FileNames
argument_list|,
name|response
operator|.
name|phase1FileSizes
argument_list|,
name|response
operator|.
name|phase1ExistingFileNames
argument_list|,
name|response
operator|.
name|phase1ExistingFileSizes
argument_list|,
name|response
operator|.
name|phase1TotalSize
argument_list|,
name|response
operator|.
name|phase1ExistingTotalSize
argument_list|)
decl_stmt|;
name|transportService
operator|.
name|submitRequest
argument_list|(
name|request
operator|.
name|targetNode
argument_list|()
argument_list|,
name|RecoveryTarget
operator|.
name|Actions
operator|.
name|FILES_INFO
argument_list|,
name|recoveryInfoFilesRequest
argument_list|,
name|TransportRequestOptions
operator|.
name|options
argument_list|()
operator|.
name|withTimeout
argument_list|(
name|internalActionTimeout
argument_list|)
argument_list|,
name|EmptyTransportResponseHandler
operator|.
name|INSTANCE_SAME
argument_list|)
operator|.
name|txGet
argument_list|()
expr_stmt|;
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
name|response
operator|.
name|phase1FileNames
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|Throwable
argument_list|>
name|lastException
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|fileIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
specifier|final
name|String
name|name
range|:
name|response
operator|.
name|phase1FileNames
control|)
block|{
name|ThreadPoolExecutor
name|pool
decl_stmt|;
name|long
name|fileSize
init|=
name|response
operator|.
name|phase1FileSizes
operator|.
name|get
argument_list|(
name|fileIndex
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileSize
operator|>
name|recoverySettings
operator|.
name|SMALL_FILE_CUTOFF_BYTES
condition|)
block|{
name|pool
operator|=
name|recoverySettings
operator|.
name|concurrentStreamPool
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|pool
operator|=
name|recoverySettings
operator|.
name|concurrentSmallFileStreamPool
argument_list|()
expr_stmt|;
block|}
name|pool
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|IndexInput
name|indexInput
init|=
literal|null
decl_stmt|;
name|store
operator|.
name|incRef
argument_list|()
expr_stmt|;
try|try
block|{
specifier|final
name|int
name|BUFFER_SIZE
init|=
operator|(
name|int
operator|)
name|recoverySettings
operator|.
name|fileChunkSize
argument_list|()
operator|.
name|bytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
name|BUFFER_SIZE
index|]
decl_stmt|;
name|StoreFileMetaData
name|md
init|=
name|store
operator|.
name|metaData
argument_list|(
name|name
argument_list|)
decl_stmt|;
comment|// TODO: maybe use IOContext.READONCE?
name|indexInput
operator|=
name|store
operator|.
name|openInputRaw
argument_list|(
name|name
argument_list|,
name|IOContext
operator|.
name|READ
argument_list|)
expr_stmt|;
name|boolean
name|shouldCompressRequest
init|=
name|recoverySettings
operator|.
name|compress
argument_list|()
decl_stmt|;
if|if
condition|(
name|CompressorFactory
operator|.
name|isCompressed
argument_list|(
name|indexInput
argument_list|)
condition|)
block|{
name|shouldCompressRequest
operator|=
literal|false
expr_stmt|;
block|}
name|long
name|len
init|=
name|indexInput
operator|.
name|length
argument_list|()
decl_stmt|;
name|long
name|readCount
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|readCount
operator|<
name|len
condition|)
block|{
if|if
condition|(
name|shard
operator|.
name|state
argument_list|()
operator|==
name|IndexShardState
operator|.
name|CLOSED
condition|)
block|{
comment|// check if the shard got closed on us
throw|throw
operator|new
name|IndexShardClosedException
argument_list|(
name|shard
operator|.
name|shardId
argument_list|()
argument_list|)
throw|;
block|}
name|int
name|toRead
init|=
name|readCount
operator|+
name|BUFFER_SIZE
operator|>
name|len
condition|?
call|(
name|int
call|)
argument_list|(
name|len
operator|-
name|readCount
argument_list|)
else|:
name|BUFFER_SIZE
decl_stmt|;
name|long
name|position
init|=
name|indexInput
operator|.
name|getFilePointer
argument_list|()
decl_stmt|;
if|if
condition|(
name|recoverySettings
operator|.
name|rateLimiter
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|recoverySettings
operator|.
name|rateLimiter
argument_list|()
operator|.
name|pause
argument_list|(
name|toRead
argument_list|)
expr_stmt|;
block|}
name|indexInput
operator|.
name|readBytes
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|toRead
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|BytesArray
name|content
init|=
operator|new
name|BytesArray
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|toRead
argument_list|)
decl_stmt|;
name|transportService
operator|.
name|submitRequest
argument_list|(
name|request
operator|.
name|targetNode
argument_list|()
argument_list|,
name|RecoveryTarget
operator|.
name|Actions
operator|.
name|FILE_CHUNK
argument_list|,
operator|new
name|RecoveryFileChunkRequest
argument_list|(
name|request
operator|.
name|recoveryId
argument_list|()
argument_list|,
name|request
operator|.
name|shardId
argument_list|()
argument_list|,
name|name
argument_list|,
name|position
argument_list|,
name|len
argument_list|,
name|md
operator|.
name|checksum
argument_list|()
argument_list|,
name|content
argument_list|)
argument_list|,
name|TransportRequestOptions
operator|.
name|options
argument_list|()
operator|.
name|withCompress
argument_list|(
name|shouldCompressRequest
argument_list|)
operator|.
name|withType
argument_list|(
name|TransportRequestOptions
operator|.
name|Type
operator|.
name|RECOVERY
argument_list|)
operator|.
name|withTimeout
argument_list|(
name|internalActionTimeout
argument_list|)
argument_list|,
name|EmptyTransportResponseHandler
operator|.
name|INSTANCE_SAME
argument_list|)
operator|.
name|txGet
argument_list|()
expr_stmt|;
name|readCount
operator|+=
name|toRead
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|lastException
operator|.
name|set
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeWhileHandlingException
argument_list|(
name|indexInput
argument_list|)
expr_stmt|;
try|try
block|{
name|store
operator|.
name|decRef
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|fileIndex
operator|++
expr_stmt|;
block|}
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
if|if
condition|(
name|lastException
operator|.
name|get
argument_list|()
operator|!=
literal|null
condition|)
block|{
throw|throw
name|lastException
operator|.
name|get
argument_list|()
throw|;
block|}
comment|// now, set the clean files request
name|Set
argument_list|<
name|String
argument_list|>
name|snapshotFiles
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
name|snapshot
operator|.
name|getFiles
argument_list|()
argument_list|)
decl_stmt|;
name|transportService
operator|.
name|submitRequest
argument_list|(
name|request
operator|.
name|targetNode
argument_list|()
argument_list|,
name|RecoveryTarget
operator|.
name|Actions
operator|.
name|CLEAN_FILES
argument_list|,
operator|new
name|RecoveryCleanFilesRequest
argument_list|(
name|request
operator|.
name|recoveryId
argument_list|()
argument_list|,
name|shard
operator|.
name|shardId
argument_list|()
argument_list|,
name|snapshotFiles
argument_list|)
argument_list|,
name|TransportRequestOptions
operator|.
name|options
argument_list|()
operator|.
name|withTimeout
argument_list|(
name|internalActionTimeout
argument_list|)
argument_list|,
name|EmptyTransportResponseHandler
operator|.
name|INSTANCE_SAME
argument_list|)
operator|.
name|txGet
argument_list|()
expr_stmt|;
name|stopWatch
operator|.
name|stop
argument_list|()
expr_stmt|;
name|logger
operator|.
name|trace
argument_list|(
literal|"[{}][{}] recovery [phase1] to {}: took [{}]"
argument_list|,
name|request
operator|.
name|shardId
argument_list|()
operator|.
name|index
argument_list|()
operator|.
name|name
argument_list|()
argument_list|,
name|request
operator|.
name|shardId
argument_list|()
operator|.
name|id
argument_list|()
argument_list|,
name|request
operator|.
name|targetNode
argument_list|()
argument_list|,
name|stopWatch
operator|.
name|totalTime
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|phase1Time
operator|=
name|stopWatch
operator|.
name|totalTime
argument_list|()
operator|.
name|millis
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RecoverFilesRecoveryException
argument_list|(
name|request
operator|.
name|shardId
argument_list|()
argument_list|,
name|response
operator|.
name|phase1FileNames
operator|.
name|size
argument_list|()
argument_list|,
operator|new
name|ByteSizeValue
argument_list|(
name|totalSize
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|store
operator|.
name|decRef
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|phase2
parameter_list|(
name|Translog
operator|.
name|Snapshot
name|snapshot
parameter_list|)
throws|throws
name|ElasticsearchException
block|{
if|if
condition|(
name|shard
operator|.
name|state
argument_list|()
operator|==
name|IndexShardState
operator|.
name|CLOSED
condition|)
block|{
throw|throw
operator|new
name|IndexShardClosedException
argument_list|(
name|request
operator|.
name|shardId
argument_list|()
argument_list|)
throw|;
block|}
name|logger
operator|.
name|trace
argument_list|(
literal|"{} recovery [phase2] to {}: start"
argument_list|,
name|request
operator|.
name|shardId
argument_list|()
argument_list|,
name|request
operator|.
name|targetNode
argument_list|()
argument_list|)
expr_stmt|;
name|StopWatch
name|stopWatch
init|=
operator|new
name|StopWatch
argument_list|()
operator|.
name|start
argument_list|()
decl_stmt|;
name|transportService
operator|.
name|submitRequest
argument_list|(
name|request
operator|.
name|targetNode
argument_list|()
argument_list|,
name|RecoveryTarget
operator|.
name|Actions
operator|.
name|PREPARE_TRANSLOG
argument_list|,
operator|new
name|RecoveryPrepareForTranslogOperationsRequest
argument_list|(
name|request
operator|.
name|recoveryId
argument_list|()
argument_list|,
name|request
operator|.
name|shardId
argument_list|()
argument_list|)
argument_list|,
name|TransportRequestOptions
operator|.
name|options
argument_list|()
operator|.
name|withTimeout
argument_list|(
name|internalActionTimeout
argument_list|)
argument_list|,
name|EmptyTransportResponseHandler
operator|.
name|INSTANCE_SAME
argument_list|)
operator|.
name|txGet
argument_list|()
expr_stmt|;
name|stopWatch
operator|.
name|stop
argument_list|()
expr_stmt|;
name|response
operator|.
name|startTime
operator|=
name|stopWatch
operator|.
name|totalTime
argument_list|()
operator|.
name|millis
argument_list|()
expr_stmt|;
name|logger
operator|.
name|trace
argument_list|(
literal|"{} recovery [phase2] to {}: start took [{}]"
argument_list|,
name|request
operator|.
name|shardId
argument_list|()
argument_list|,
name|request
operator|.
name|targetNode
argument_list|()
argument_list|,
name|request
operator|.
name|targetNode
argument_list|()
argument_list|,
name|stopWatch
operator|.
name|totalTime
argument_list|()
argument_list|)
expr_stmt|;
name|logger
operator|.
name|trace
argument_list|(
literal|"{} recovery [phase2] to {}: updating current mapping to master"
argument_list|,
name|request
operator|.
name|shardId
argument_list|()
argument_list|,
name|request
operator|.
name|targetNode
argument_list|()
argument_list|)
expr_stmt|;
name|updateMappingOnMaster
argument_list|()
expr_stmt|;
name|logger
operator|.
name|trace
argument_list|(
literal|"{} recovery [phase2] to {}: sending transaction log operations"
argument_list|,
name|request
operator|.
name|shardId
argument_list|()
argument_list|,
name|request
operator|.
name|targetNode
argument_list|()
argument_list|)
expr_stmt|;
name|stopWatch
operator|=
operator|new
name|StopWatch
argument_list|()
operator|.
name|start
argument_list|()
expr_stmt|;
name|int
name|totalOperations
init|=
name|sendSnapshot
argument_list|(
name|snapshot
argument_list|)
decl_stmt|;
name|stopWatch
operator|.
name|stop
argument_list|()
expr_stmt|;
name|logger
operator|.
name|trace
argument_list|(
literal|"{} recovery [phase2] to {}: took [{}]"
argument_list|,
name|request
operator|.
name|shardId
argument_list|()
argument_list|,
name|request
operator|.
name|targetNode
argument_list|()
argument_list|,
name|stopWatch
operator|.
name|totalTime
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|phase2Time
operator|=
name|stopWatch
operator|.
name|totalTime
argument_list|()
operator|.
name|millis
argument_list|()
expr_stmt|;
name|response
operator|.
name|phase2Operations
operator|=
name|totalOperations
expr_stmt|;
block|}
specifier|private
name|void
name|updateMappingOnMaster
parameter_list|()
block|{
name|IndexMetaData
name|indexMetaData
init|=
name|clusterService
operator|.
name|state
argument_list|()
operator|.
name|metaData
argument_list|()
operator|.
name|getIndices
argument_list|()
operator|.
name|get
argument_list|(
name|indexService
operator|.
name|index
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|MappingMetaData
argument_list|>
name|metaDataMappings
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|indexMetaData
operator|!=
literal|null
condition|)
block|{
name|metaDataMappings
operator|=
name|indexMetaData
operator|.
name|getMappings
argument_list|()
expr_stmt|;
block|}
name|List
argument_list|<
name|DocumentMapper
argument_list|>
name|documentMappersToUpdate
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|DocumentMapper
name|documentMapper
range|:
name|indexService
operator|.
name|mapperService
argument_list|()
control|)
block|{
comment|// default mapping should not be sent back, it can only be updated by put mapping API, and its
comment|// a full in place replace, we don't want to override a potential update coming it
if|if
condition|(
name|documentMapper
operator|.
name|type
argument_list|()
operator|.
name|equals
argument_list|(
name|MapperService
operator|.
name|DEFAULT_MAPPING
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|MappingMetaData
name|mappingMetaData
init|=
name|metaDataMappings
operator|==
literal|null
condition|?
literal|null
else|:
name|metaDataMappings
operator|.
name|get
argument_list|(
name|documentMapper
operator|.
name|type
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|mappingMetaData
operator|==
literal|null
operator|||
operator|!
name|documentMapper
operator|.
name|refreshSource
argument_list|()
operator|.
name|equals
argument_list|(
name|mappingMetaData
operator|.
name|source
argument_list|()
argument_list|)
condition|)
block|{
comment|// not on master yet in the right form
name|documentMappersToUpdate
operator|.
name|add
argument_list|(
name|documentMapper
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|documentMappersToUpdate
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
specifier|final
name|CountDownLatch
name|countDownLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
name|documentMappersToUpdate
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|MappingUpdatedAction
operator|.
name|MappingUpdateListener
name|listener
init|=
operator|new
name|MappingUpdatedAction
operator|.
name|MappingUpdateListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMappingUpdate
parameter_list|()
block|{
name|countDownLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"{} recovery to {}: failed to update mapping on master"
argument_list|,
name|request
operator|.
name|shardId
argument_list|()
argument_list|,
name|request
operator|.
name|targetNode
argument_list|()
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|countDownLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
for|for
control|(
name|DocumentMapper
name|documentMapper
range|:
name|documentMappersToUpdate
control|)
block|{
name|mappingUpdatedAction
operator|.
name|updateMappingOnMaster
argument_list|(
name|indexService
operator|.
name|index
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|documentMapper
argument_list|,
name|indexService
operator|.
name|indexUUID
argument_list|()
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
operator|!
name|countDownLatch
operator|.
name|await
argument_list|(
name|internalActionTimeout
operator|.
name|millis
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"{} recovery [phase2] to {}: waiting on pending mapping update timed out. waited [{}]"
argument_list|,
name|request
operator|.
name|shardId
argument_list|()
argument_list|,
name|request
operator|.
name|targetNode
argument_list|()
argument_list|,
name|internalActionTimeout
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"interrupted while waiting for mapping to update on master"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|phase3
parameter_list|(
name|Translog
operator|.
name|Snapshot
name|snapshot
parameter_list|)
throws|throws
name|ElasticsearchException
block|{
if|if
condition|(
name|shard
operator|.
name|state
argument_list|()
operator|==
name|IndexShardState
operator|.
name|CLOSED
condition|)
block|{
throw|throw
operator|new
name|IndexShardClosedException
argument_list|(
name|request
operator|.
name|shardId
argument_list|()
argument_list|)
throw|;
block|}
name|logger
operator|.
name|trace
argument_list|(
literal|"[{}][{}] recovery [phase3] to {}: sending transaction log operations"
argument_list|,
name|request
operator|.
name|shardId
argument_list|()
operator|.
name|index
argument_list|()
operator|.
name|name
argument_list|()
argument_list|,
name|request
operator|.
name|shardId
argument_list|()
operator|.
name|id
argument_list|()
argument_list|,
name|request
operator|.
name|targetNode
argument_list|()
argument_list|)
expr_stmt|;
name|StopWatch
name|stopWatch
init|=
operator|new
name|StopWatch
argument_list|()
operator|.
name|start
argument_list|()
decl_stmt|;
name|int
name|totalOperations
init|=
name|sendSnapshot
argument_list|(
name|snapshot
argument_list|)
decl_stmt|;
name|transportService
operator|.
name|submitRequest
argument_list|(
name|request
operator|.
name|targetNode
argument_list|()
argument_list|,
name|RecoveryTarget
operator|.
name|Actions
operator|.
name|FINALIZE
argument_list|,
operator|new
name|RecoveryFinalizeRecoveryRequest
argument_list|(
name|request
operator|.
name|recoveryId
argument_list|()
argument_list|,
name|request
operator|.
name|shardId
argument_list|()
argument_list|)
argument_list|,
name|TransportRequestOptions
operator|.
name|options
argument_list|()
operator|.
name|withTimeout
argument_list|(
name|internalActionLongTimeout
argument_list|)
argument_list|,
name|EmptyTransportResponseHandler
operator|.
name|INSTANCE_SAME
argument_list|)
operator|.
name|txGet
argument_list|()
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|markAsRelocated
argument_list|()
condition|)
block|{
comment|// TODO what happens if the recovery process fails afterwards, we need to mark this back to started
try|try
block|{
name|shard
operator|.
name|relocated
argument_list|(
literal|"to "
operator|+
name|request
operator|.
name|targetNode
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalIndexShardStateException
name|e
parameter_list|)
block|{
comment|// we can ignore this exception since, on the other node, when it moved to phase3
comment|// it will also send shard started, which might cause the index shard we work against
comment|// to move be closed by the time we get to the the relocated method
block|}
block|}
name|stopWatch
operator|.
name|stop
argument_list|()
expr_stmt|;
name|logger
operator|.
name|trace
argument_list|(
literal|"[{}][{}] recovery [phase3] to {}: took [{}]"
argument_list|,
name|request
operator|.
name|shardId
argument_list|()
operator|.
name|index
argument_list|()
operator|.
name|name
argument_list|()
argument_list|,
name|request
operator|.
name|shardId
argument_list|()
operator|.
name|id
argument_list|()
argument_list|,
name|request
operator|.
name|targetNode
argument_list|()
argument_list|,
name|stopWatch
operator|.
name|totalTime
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|phase3Time
operator|=
name|stopWatch
operator|.
name|totalTime
argument_list|()
operator|.
name|millis
argument_list|()
expr_stmt|;
name|response
operator|.
name|phase3Operations
operator|=
name|totalOperations
expr_stmt|;
block|}
specifier|private
name|int
name|sendSnapshot
parameter_list|(
name|Translog
operator|.
name|Snapshot
name|snapshot
parameter_list|)
throws|throws
name|ElasticsearchException
block|{
name|int
name|ops
init|=
literal|0
decl_stmt|;
name|long
name|size
init|=
literal|0
decl_stmt|;
name|int
name|totalOperations
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|Translog
operator|.
name|Operation
argument_list|>
name|operations
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
while|while
condition|(
name|snapshot
operator|.
name|hasNext
argument_list|()
condition|)
block|{
if|if
condition|(
name|shard
operator|.
name|state
argument_list|()
operator|==
name|IndexShardState
operator|.
name|CLOSED
condition|)
block|{
throw|throw
operator|new
name|IndexShardClosedException
argument_list|(
name|request
operator|.
name|shardId
argument_list|()
argument_list|)
throw|;
block|}
name|Translog
operator|.
name|Operation
name|operation
init|=
name|snapshot
operator|.
name|next
argument_list|()
decl_stmt|;
name|operations
operator|.
name|add
argument_list|(
name|operation
argument_list|)
expr_stmt|;
name|ops
operator|+=
literal|1
expr_stmt|;
name|size
operator|+=
name|operation
operator|.
name|estimateSize
argument_list|()
expr_stmt|;
name|totalOperations
operator|++
expr_stmt|;
if|if
condition|(
name|ops
operator|>=
name|recoverySettings
operator|.
name|translogOps
argument_list|()
operator|||
name|size
operator|>=
name|recoverySettings
operator|.
name|translogSize
argument_list|()
operator|.
name|bytes
argument_list|()
condition|)
block|{
comment|// don't throttle translog, since we lock for phase3 indexing, so we need to move it as
comment|// fast as possible. Note, sine we index docs to replicas while the index files are recovered
comment|// the lock can potentially be removed, in which case, it might make sense to re-enable
comment|// throttling in this phase
comment|//                        if (recoverySettings.rateLimiter() != null) {
comment|//                            recoverySettings.rateLimiter().pause(size);
comment|//                        }
name|RecoveryTranslogOperationsRequest
name|translogOperationsRequest
init|=
operator|new
name|RecoveryTranslogOperationsRequest
argument_list|(
name|request
operator|.
name|recoveryId
argument_list|()
argument_list|,
name|request
operator|.
name|shardId
argument_list|()
argument_list|,
name|operations
argument_list|)
decl_stmt|;
name|transportService
operator|.
name|submitRequest
argument_list|(
name|request
operator|.
name|targetNode
argument_list|()
argument_list|,
name|RecoveryTarget
operator|.
name|Actions
operator|.
name|TRANSLOG_OPS
argument_list|,
name|translogOperationsRequest
argument_list|,
name|TransportRequestOptions
operator|.
name|options
argument_list|()
operator|.
name|withCompress
argument_list|(
name|recoverySettings
operator|.
name|compress
argument_list|()
argument_list|)
operator|.
name|withType
argument_list|(
name|TransportRequestOptions
operator|.
name|Type
operator|.
name|RECOVERY
argument_list|)
operator|.
name|withTimeout
argument_list|(
name|internalActionLongTimeout
argument_list|)
argument_list|,
name|EmptyTransportResponseHandler
operator|.
name|INSTANCE_SAME
argument_list|)
operator|.
name|txGet
argument_list|()
expr_stmt|;
name|ops
operator|=
literal|0
expr_stmt|;
name|size
operator|=
literal|0
expr_stmt|;
name|operations
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
comment|// send the leftover
if|if
condition|(
operator|!
name|operations
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|RecoveryTranslogOperationsRequest
name|translogOperationsRequest
init|=
operator|new
name|RecoveryTranslogOperationsRequest
argument_list|(
name|request
operator|.
name|recoveryId
argument_list|()
argument_list|,
name|request
operator|.
name|shardId
argument_list|()
argument_list|,
name|operations
argument_list|)
decl_stmt|;
name|transportService
operator|.
name|submitRequest
argument_list|(
name|request
operator|.
name|targetNode
argument_list|()
argument_list|,
name|RecoveryTarget
operator|.
name|Actions
operator|.
name|TRANSLOG_OPS
argument_list|,
name|translogOperationsRequest
argument_list|,
name|TransportRequestOptions
operator|.
name|options
argument_list|()
operator|.
name|withCompress
argument_list|(
name|recoverySettings
operator|.
name|compress
argument_list|()
argument_list|)
operator|.
name|withType
argument_list|(
name|TransportRequestOptions
operator|.
name|Type
operator|.
name|RECOVERY
argument_list|)
operator|.
name|withTimeout
argument_list|(
name|internalActionLongTimeout
argument_list|)
argument_list|,
name|EmptyTransportResponseHandler
operator|.
name|INSTANCE_SAME
argument_list|)
operator|.
name|txGet
argument_list|()
expr_stmt|;
block|}
return|return
name|totalOperations
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
DECL|class|StartRecoveryTransportRequestHandler
class|class
name|StartRecoveryTransportRequestHandler
extends|extends
name|BaseTransportRequestHandler
argument_list|<
name|StartRecoveryRequest
argument_list|>
block|{
annotation|@
name|Override
DECL|method|newInstance
specifier|public
name|StartRecoveryRequest
name|newInstance
parameter_list|()
block|{
return|return
operator|new
name|StartRecoveryRequest
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|executor
specifier|public
name|String
name|executor
parameter_list|()
block|{
return|return
name|ThreadPool
operator|.
name|Names
operator|.
name|GENERIC
return|;
block|}
annotation|@
name|Override
DECL|method|messageReceived
specifier|public
name|void
name|messageReceived
parameter_list|(
specifier|final
name|StartRecoveryRequest
name|request
parameter_list|,
specifier|final
name|TransportChannel
name|channel
parameter_list|)
throws|throws
name|Exception
block|{
name|RecoveryResponse
name|response
init|=
name|recover
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|channel
operator|.
name|sendResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

