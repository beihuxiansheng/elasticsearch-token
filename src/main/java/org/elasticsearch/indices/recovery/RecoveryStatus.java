begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.indices.recovery
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|recovery
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentCollections
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|service
operator|.
name|InternalIndexShard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|store
operator|.
name|Store
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|RecoveryStatus
specifier|public
class|class
name|RecoveryStatus
block|{
DECL|enum|Stage
specifier|public
specifier|static
enum|enum
name|Stage
block|{
DECL|enum constant|INIT
name|INIT
block|,
DECL|enum constant|INDEX
name|INDEX
block|,
DECL|enum constant|TRANSLOG
name|TRANSLOG
block|,
DECL|enum constant|FINALIZE
name|FINALIZE
block|,
DECL|enum constant|DONE
name|DONE
block|}
DECL|field|shardId
specifier|final
name|ShardId
name|shardId
decl_stmt|;
DECL|field|recoveryId
specifier|final
name|long
name|recoveryId
decl_stmt|;
DECL|field|indexShard
specifier|final
name|InternalIndexShard
name|indexShard
decl_stmt|;
DECL|method|RecoveryStatus
specifier|public
name|RecoveryStatus
parameter_list|(
name|long
name|recoveryId
parameter_list|,
name|InternalIndexShard
name|indexShard
parameter_list|)
block|{
name|this
operator|.
name|recoveryId
operator|=
name|recoveryId
expr_stmt|;
name|this
operator|.
name|indexShard
operator|=
name|indexShard
expr_stmt|;
name|this
operator|.
name|shardId
operator|=
name|indexShard
operator|.
name|shardId
argument_list|()
expr_stmt|;
block|}
DECL|field|recoveryThread
specifier|volatile
name|Thread
name|recoveryThread
decl_stmt|;
DECL|field|canceled
specifier|private
specifier|volatile
name|boolean
name|canceled
decl_stmt|;
DECL|field|sentCanceledToSource
specifier|volatile
name|boolean
name|sentCanceledToSource
decl_stmt|;
DECL|field|openIndexOutputs
specifier|private
specifier|volatile
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|IndexOutput
argument_list|>
name|openIndexOutputs
init|=
name|ConcurrentCollections
operator|.
name|newConcurrentMap
argument_list|()
decl_stmt|;
DECL|field|checksums
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|checksums
init|=
name|ConcurrentCollections
operator|.
name|newConcurrentMap
argument_list|()
decl_stmt|;
DECL|field|startTime
specifier|final
name|long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
DECL|field|time
name|long
name|time
decl_stmt|;
DECL|field|phase1FileNames
name|List
argument_list|<
name|String
argument_list|>
name|phase1FileNames
decl_stmt|;
DECL|field|phase1FileSizes
name|List
argument_list|<
name|Long
argument_list|>
name|phase1FileSizes
decl_stmt|;
DECL|field|phase1ExistingFileNames
name|List
argument_list|<
name|String
argument_list|>
name|phase1ExistingFileNames
decl_stmt|;
DECL|field|phase1ExistingFileSizes
name|List
argument_list|<
name|Long
argument_list|>
name|phase1ExistingFileSizes
decl_stmt|;
DECL|field|phase1TotalSize
name|long
name|phase1TotalSize
decl_stmt|;
DECL|field|phase1ExistingTotalSize
name|long
name|phase1ExistingTotalSize
decl_stmt|;
DECL|field|stage
specifier|volatile
name|Stage
name|stage
init|=
name|Stage
operator|.
name|INIT
decl_stmt|;
DECL|field|currentTranslogOperations
specifier|volatile
name|long
name|currentTranslogOperations
init|=
literal|0
decl_stmt|;
DECL|field|currentFilesSize
name|AtomicLong
name|currentFilesSize
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
DECL|method|startTime
specifier|public
name|long
name|startTime
parameter_list|()
block|{
return|return
name|startTime
return|;
block|}
DECL|method|time
specifier|public
name|long
name|time
parameter_list|()
block|{
return|return
name|this
operator|.
name|time
return|;
block|}
DECL|method|phase1TotalSize
specifier|public
name|long
name|phase1TotalSize
parameter_list|()
block|{
return|return
name|phase1TotalSize
return|;
block|}
DECL|method|phase1ExistingTotalSize
specifier|public
name|long
name|phase1ExistingTotalSize
parameter_list|()
block|{
return|return
name|phase1ExistingTotalSize
return|;
block|}
DECL|method|stage
specifier|public
name|Stage
name|stage
parameter_list|()
block|{
return|return
name|stage
return|;
block|}
DECL|method|currentTranslogOperations
specifier|public
name|long
name|currentTranslogOperations
parameter_list|()
block|{
return|return
name|currentTranslogOperations
return|;
block|}
DECL|method|currentFilesSize
specifier|public
name|long
name|currentFilesSize
parameter_list|()
block|{
return|return
name|currentFilesSize
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|isCanceled
specifier|public
name|boolean
name|isCanceled
parameter_list|()
block|{
return|return
name|canceled
return|;
block|}
DECL|method|cancel
specifier|public
specifier|synchronized
name|void
name|cancel
parameter_list|()
block|{
name|canceled
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|getOpenIndexOutput
specifier|public
name|IndexOutput
name|getOpenIndexOutput
parameter_list|(
name|String
name|key
parameter_list|)
block|{
specifier|final
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|IndexOutput
argument_list|>
name|outputs
init|=
name|openIndexOutputs
decl_stmt|;
if|if
condition|(
name|canceled
operator|||
name|outputs
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|outputs
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
DECL|method|cancleAndClearOpenIndexInputs
specifier|public
specifier|synchronized
name|Set
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|IndexOutput
argument_list|>
argument_list|>
name|cancleAndClearOpenIndexInputs
parameter_list|()
block|{
name|cancel
argument_list|()
expr_stmt|;
specifier|final
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|IndexOutput
argument_list|>
name|outputs
init|=
name|openIndexOutputs
decl_stmt|;
name|openIndexOutputs
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|outputs
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Set
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|IndexOutput
argument_list|>
argument_list|>
name|entrySet
init|=
name|outputs
operator|.
name|entrySet
argument_list|()
decl_stmt|;
return|return
name|entrySet
return|;
block|}
DECL|method|removeOpenIndexOutputs
specifier|public
name|IndexOutput
name|removeOpenIndexOutputs
parameter_list|(
name|String
name|name
parameter_list|)
block|{
specifier|final
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|IndexOutput
argument_list|>
name|outputs
init|=
name|openIndexOutputs
decl_stmt|;
if|if
condition|(
name|outputs
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|outputs
operator|.
name|remove
argument_list|(
name|name
argument_list|)
return|;
block|}
DECL|method|openAndPutIndexOutput
specifier|public
specifier|synchronized
name|IndexOutput
name|openAndPutIndexOutput
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|name
parameter_list|,
name|Store
name|store
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|isCanceled
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|IndexOutput
argument_list|>
name|outputs
init|=
name|openIndexOutputs
decl_stmt|;
name|IndexOutput
name|indexOutput
init|=
name|store
operator|.
name|createOutputRaw
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|outputs
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|indexOutput
argument_list|)
expr_stmt|;
return|return
name|indexOutput
return|;
block|}
block|}
end_class

end_unit

