begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.indices.recovery
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|recovery
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentCollections
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|service
operator|.
name|InternalIndexShard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|store
operator|.
name|Store
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|RecoveryStatus
specifier|public
class|class
name|RecoveryStatus
block|{
DECL|field|shardId
specifier|final
name|ShardId
name|shardId
decl_stmt|;
DECL|field|recoveryId
specifier|final
name|long
name|recoveryId
decl_stmt|;
DECL|field|indexShard
specifier|final
name|InternalIndexShard
name|indexShard
decl_stmt|;
DECL|field|recoveryState
specifier|final
name|RecoveryState
name|recoveryState
decl_stmt|;
DECL|method|RecoveryStatus
specifier|public
name|RecoveryStatus
parameter_list|(
name|long
name|recoveryId
parameter_list|,
name|InternalIndexShard
name|indexShard
parameter_list|)
block|{
name|this
operator|.
name|recoveryId
operator|=
name|recoveryId
expr_stmt|;
name|this
operator|.
name|indexShard
operator|=
name|indexShard
expr_stmt|;
name|this
operator|.
name|shardId
operator|=
name|indexShard
operator|.
name|shardId
argument_list|()
expr_stmt|;
name|this
operator|.
name|recoveryState
operator|=
operator|new
name|RecoveryState
argument_list|(
name|shardId
argument_list|)
expr_stmt|;
name|recoveryState
operator|.
name|getTimer
argument_list|()
operator|.
name|startTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|field|recoveryThread
specifier|volatile
name|Thread
name|recoveryThread
decl_stmt|;
DECL|field|canceled
specifier|private
specifier|volatile
name|boolean
name|canceled
decl_stmt|;
DECL|field|sentCanceledToSource
specifier|volatile
name|boolean
name|sentCanceledToSource
decl_stmt|;
DECL|field|openIndexOutputs
specifier|private
specifier|volatile
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|IndexOutput
argument_list|>
name|openIndexOutputs
init|=
name|ConcurrentCollections
operator|.
name|newConcurrentMap
argument_list|()
decl_stmt|;
DECL|field|checksums
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|checksums
init|=
name|ConcurrentCollections
operator|.
name|newConcurrentMap
argument_list|()
decl_stmt|;
DECL|method|recoveryState
specifier|public
name|RecoveryState
name|recoveryState
parameter_list|()
block|{
return|return
name|recoveryState
return|;
block|}
DECL|method|stage
specifier|public
name|void
name|stage
parameter_list|(
name|RecoveryState
operator|.
name|Stage
name|stage
parameter_list|)
block|{
name|recoveryState
operator|.
name|setStage
argument_list|(
name|stage
argument_list|)
expr_stmt|;
block|}
DECL|method|stage
specifier|public
name|RecoveryState
operator|.
name|Stage
name|stage
parameter_list|()
block|{
return|return
name|recoveryState
operator|.
name|getStage
argument_list|()
return|;
block|}
DECL|method|isCanceled
specifier|public
name|boolean
name|isCanceled
parameter_list|()
block|{
return|return
name|canceled
return|;
block|}
DECL|method|cancel
specifier|public
specifier|synchronized
name|void
name|cancel
parameter_list|()
block|{
name|canceled
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|getOpenIndexOutput
specifier|public
name|IndexOutput
name|getOpenIndexOutput
parameter_list|(
name|String
name|key
parameter_list|)
block|{
specifier|final
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|IndexOutput
argument_list|>
name|outputs
init|=
name|openIndexOutputs
decl_stmt|;
if|if
condition|(
name|canceled
operator|||
name|outputs
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|outputs
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
DECL|method|cancleAndClearOpenIndexInputs
specifier|public
specifier|synchronized
name|Set
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|IndexOutput
argument_list|>
argument_list|>
name|cancleAndClearOpenIndexInputs
parameter_list|()
block|{
name|cancel
argument_list|()
expr_stmt|;
specifier|final
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|IndexOutput
argument_list|>
name|outputs
init|=
name|openIndexOutputs
decl_stmt|;
name|openIndexOutputs
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|outputs
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Set
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|IndexOutput
argument_list|>
argument_list|>
name|entrySet
init|=
name|outputs
operator|.
name|entrySet
argument_list|()
decl_stmt|;
return|return
name|entrySet
return|;
block|}
DECL|method|removeOpenIndexOutputs
specifier|public
name|IndexOutput
name|removeOpenIndexOutputs
parameter_list|(
name|String
name|name
parameter_list|)
block|{
specifier|final
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|IndexOutput
argument_list|>
name|outputs
init|=
name|openIndexOutputs
decl_stmt|;
if|if
condition|(
name|outputs
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|outputs
operator|.
name|remove
argument_list|(
name|name
argument_list|)
return|;
block|}
DECL|method|openAndPutIndexOutput
specifier|public
specifier|synchronized
name|IndexOutput
name|openAndPutIndexOutput
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|name
parameter_list|,
name|Store
name|store
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|isCanceled
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|IndexOutput
argument_list|>
name|outputs
init|=
name|openIndexOutputs
decl_stmt|;
name|IndexOutput
name|indexOutput
init|=
name|store
operator|.
name|createOutputRaw
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|outputs
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|indexOutput
argument_list|)
expr_stmt|;
return|return
name|indexOutput
return|;
block|}
block|}
end_class

end_unit

