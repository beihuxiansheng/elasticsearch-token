begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.indices.recovery
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|recovery
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|action
operator|.
name|index
operator|.
name|MappingUpdatedAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|ESLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|deletionpolicy
operator|.
name|SnapshotIndexCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|IndexShard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|translog
operator|.
name|Translog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|IndicesService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportService
import|;
end_import

begin_comment
comment|/**  * A recovery handler that skips phase 1 as well as sending the snapshot. During phase 3 the shard is marked  * as relocated an closed to ensure that the engine is closed and the target can acquire the IW write lock.  */
end_comment

begin_class
DECL|class|SharedFSRecoverySourceHandler
specifier|public
class|class
name|SharedFSRecoverySourceHandler
extends|extends
name|RecoverySourceHandler
block|{
DECL|field|shard
specifier|private
specifier|final
name|IndexShard
name|shard
decl_stmt|;
DECL|field|request
specifier|private
specifier|final
name|StartRecoveryRequest
name|request
decl_stmt|;
DECL|method|SharedFSRecoverySourceHandler
specifier|public
name|SharedFSRecoverySourceHandler
parameter_list|(
name|IndexShard
name|shard
parameter_list|,
name|StartRecoveryRequest
name|request
parameter_list|,
name|RecoverySettings
name|recoverySettings
parameter_list|,
name|TransportService
name|transportService
parameter_list|,
name|ClusterService
name|clusterService
parameter_list|,
name|IndicesService
name|indicesService
parameter_list|,
name|MappingUpdatedAction
name|mappingUpdatedAction
parameter_list|,
name|ESLogger
name|logger
parameter_list|)
block|{
name|super
argument_list|(
name|shard
argument_list|,
name|request
argument_list|,
name|recoverySettings
argument_list|,
name|transportService
argument_list|,
name|clusterService
argument_list|,
name|indicesService
argument_list|,
name|mappingUpdatedAction
argument_list|,
name|logger
argument_list|)
expr_stmt|;
name|this
operator|.
name|shard
operator|=
name|shard
expr_stmt|;
name|this
operator|.
name|request
operator|=
name|request
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|phase1
specifier|public
name|void
name|phase1
parameter_list|(
name|SnapshotIndexCommit
name|snapshot
parameter_list|,
specifier|final
name|Translog
operator|.
name|View
name|translogView
parameter_list|)
block|{
if|if
condition|(
name|request
operator|.
name|recoveryType
argument_list|()
operator|==
name|RecoveryState
operator|.
name|Type
operator|.
name|RELOCATION
operator|&&
name|shard
operator|.
name|routingEntry
argument_list|()
operator|.
name|primary
argument_list|()
condition|)
block|{
comment|// here we simply fail the primary shard since we can't move them (have 2 writers open at the same time)
comment|// by failing the shard we play safe and just go through the entire reallocation procedure of the primary
comment|// it would be ideal to make sure we flushed the translog here but that is not possible in the current design.
name|IllegalStateException
name|exception
init|=
operator|new
name|IllegalStateException
argument_list|(
literal|"Can't relocate primary - failing"
argument_list|)
decl_stmt|;
name|shard
operator|.
name|failShard
argument_list|(
literal|"primary_relocation"
argument_list|,
name|exception
argument_list|)
expr_stmt|;
throw|throw
name|exception
throw|;
block|}
name|logger
operator|.
name|trace
argument_list|(
literal|"{} recovery [phase1] to {}: skipping phase 1 for shared filesystem"
argument_list|,
name|request
operator|.
name|shardId
argument_list|()
argument_list|,
name|request
operator|.
name|targetNode
argument_list|()
argument_list|)
expr_stmt|;
name|prepareTargetForTranslog
argument_list|(
name|translogView
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|sendSnapshot
specifier|protected
name|int
name|sendSnapshot
parameter_list|(
name|Translog
operator|.
name|Snapshot
name|snapshot
parameter_list|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"{} recovery [phase2] to {}: skipping transaction log operations for file sync"
argument_list|,
name|shard
operator|.
name|shardId
argument_list|()
argument_list|,
name|request
operator|.
name|targetNode
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
block|}
end_class

end_unit

