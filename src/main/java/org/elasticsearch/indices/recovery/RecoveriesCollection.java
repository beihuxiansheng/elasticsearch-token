begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.indices.recovery
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|recovery
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|ESLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentCollections
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|IndexShardClosedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|service
operator|.
name|IndexShard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|service
operator|.
name|InternalIndexShard
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_comment
comment|/**  * This class holds a collection of all on going recoveries on the current node (i.e., the node is the target node  * of those recoveries). The class is used to guarantee concurrent semantics such that once a recoveries was done/cancelled/failed  * no other thread will be able to find it. Last, the {@link StatusRef} inner class verifies that recovery temporary files  * and store will only be cleared once on going usage is finished.  */
end_comment

begin_class
DECL|class|RecoveriesCollection
specifier|public
class|class
name|RecoveriesCollection
block|{
comment|/** This is the single source of truth for ongoing recoveries. If it's not here, it was canceled or done */
DECL|field|onGoingRecoveries
specifier|private
specifier|final
name|ConcurrentMap
argument_list|<
name|Long
argument_list|,
name|RecoveryStatus
argument_list|>
name|onGoingRecoveries
init|=
name|ConcurrentCollections
operator|.
name|newConcurrentMap
argument_list|()
decl_stmt|;
DECL|field|logger
specifier|final
specifier|private
name|ESLogger
name|logger
decl_stmt|;
DECL|method|RecoveriesCollection
specifier|public
name|RecoveriesCollection
parameter_list|(
name|ESLogger
name|logger
parameter_list|)
block|{
name|this
operator|.
name|logger
operator|=
name|logger
expr_stmt|;
block|}
comment|/**      * Starts are new recovery for the given shard, source node and state      *      * @return the id of the new recovery.      */
DECL|method|startRecovery
specifier|public
name|long
name|startRecovery
parameter_list|(
name|InternalIndexShard
name|indexShard
parameter_list|,
name|DiscoveryNode
name|sourceNode
parameter_list|,
name|RecoveryState
name|state
parameter_list|,
name|RecoveryTarget
operator|.
name|RecoveryListener
name|listener
parameter_list|)
block|{
name|RecoveryStatus
name|status
init|=
operator|new
name|RecoveryStatus
argument_list|(
name|indexShard
argument_list|,
name|sourceNode
argument_list|,
name|state
argument_list|,
name|listener
argument_list|)
decl_stmt|;
name|RecoveryStatus
name|existingStatus
init|=
name|onGoingRecoveries
operator|.
name|putIfAbsent
argument_list|(
name|status
operator|.
name|recoveryId
argument_list|()
argument_list|,
name|status
argument_list|)
decl_stmt|;
assert|assert
name|existingStatus
operator|==
literal|null
operator|:
literal|"found two RecoveryStatus instances with the same id"
assert|;
name|logger
operator|.
name|trace
argument_list|(
literal|"{} started recovery from {}, id [{}]"
argument_list|,
name|indexShard
operator|.
name|shardId
argument_list|()
argument_list|,
name|sourceNode
argument_list|,
name|status
operator|.
name|recoveryId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|status
operator|.
name|recoveryId
argument_list|()
return|;
block|}
comment|/**      * gets the {@link RecoveryStatus } for a given id. The RecoveryStatus returned has it's ref count already incremented      * to make sure it's safe to use. However, you must call {@link RecoveryStatus#decRef()} when you are done with it, typically      * by using this method in a try-with-resources clause.      *<p/>      * Returns null if recovery is not found      */
DECL|method|getStatus
specifier|public
name|StatusRef
name|getStatus
parameter_list|(
name|long
name|id
parameter_list|)
block|{
name|RecoveryStatus
name|status
init|=
name|onGoingRecoveries
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
operator|!=
literal|null
operator|&&
name|status
operator|.
name|tryIncRef
argument_list|()
condition|)
block|{
return|return
operator|new
name|StatusRef
argument_list|(
name|status
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/** Similar to {@link #getStatus(long)} but throws an exception if no recovery is found */
DECL|method|getStatusSafe
specifier|public
name|StatusRef
name|getStatusSafe
parameter_list|(
name|long
name|id
parameter_list|,
name|ShardId
name|shardId
parameter_list|)
block|{
name|StatusRef
name|statusRef
init|=
name|getStatus
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|statusRef
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IndexShardClosedException
argument_list|(
name|shardId
argument_list|)
throw|;
block|}
assert|assert
name|statusRef
operator|.
name|status
argument_list|()
operator|.
name|shardId
argument_list|()
operator|.
name|equals
argument_list|(
name|shardId
argument_list|)
assert|;
return|return
name|statusRef
return|;
block|}
comment|/** cancel the recovery with the given id (if found) and remove it from the recovery collection */
DECL|method|cancelRecovery
specifier|public
name|void
name|cancelRecovery
parameter_list|(
name|long
name|id
parameter_list|,
name|String
name|reason
parameter_list|)
block|{
name|RecoveryStatus
name|removed
init|=
name|onGoingRecoveries
operator|.
name|remove
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|removed
operator|!=
literal|null
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"{} canceled recovery from {}, id [{}] (reason [{}])"
argument_list|,
name|removed
operator|.
name|shardId
argument_list|()
argument_list|,
name|removed
operator|.
name|sourceNode
argument_list|()
argument_list|,
name|removed
operator|.
name|recoveryId
argument_list|()
argument_list|,
name|reason
argument_list|)
expr_stmt|;
name|removed
operator|.
name|cancel
argument_list|(
name|reason
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * fail the recovery with the given id (if found) and remove it from the recovery collection      *      * @param id               id of the recovery to fail      * @param e                exception with reason for the failure      * @param sendShardFailure true a shard failed message should be sent to the master      */
DECL|method|failRecovery
specifier|public
name|void
name|failRecovery
parameter_list|(
name|long
name|id
parameter_list|,
name|RecoveryFailedException
name|e
parameter_list|,
name|boolean
name|sendShardFailure
parameter_list|)
block|{
name|RecoveryStatus
name|removed
init|=
name|onGoingRecoveries
operator|.
name|remove
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|removed
operator|!=
literal|null
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"{} failing recovery from {}, id [{}]. Send shard failure: [{}]"
argument_list|,
name|removed
operator|.
name|shardId
argument_list|()
argument_list|,
name|removed
operator|.
name|sourceNode
argument_list|()
argument_list|,
name|removed
operator|.
name|recoveryId
argument_list|()
argument_list|,
name|sendShardFailure
argument_list|)
expr_stmt|;
name|removed
operator|.
name|fail
argument_list|(
name|e
argument_list|,
name|sendShardFailure
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** mark the recovery with the given id as done (if found) */
DECL|method|markRecoveryAsDone
specifier|public
name|void
name|markRecoveryAsDone
parameter_list|(
name|long
name|id
parameter_list|)
block|{
name|RecoveryStatus
name|removed
init|=
name|onGoingRecoveries
operator|.
name|remove
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|removed
operator|!=
literal|null
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"{} marking recovery from {} as done, id [{}]"
argument_list|,
name|removed
operator|.
name|shardId
argument_list|()
argument_list|,
name|removed
operator|.
name|sourceNode
argument_list|()
argument_list|,
name|removed
operator|.
name|recoveryId
argument_list|()
argument_list|)
expr_stmt|;
name|removed
operator|.
name|markAsDone
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Try to find an ongoing recovery for a given shard. returns null if not found.      */
annotation|@
name|Nullable
DECL|method|findRecoveryByShard
specifier|public
name|StatusRef
name|findRecoveryByShard
parameter_list|(
name|IndexShard
name|indexShard
parameter_list|)
block|{
for|for
control|(
name|RecoveryStatus
name|recoveryStatus
range|:
name|onGoingRecoveries
operator|.
name|values
argument_list|()
control|)
block|{
comment|// check if the recovery has already finished and if not protect
comment|// against it being closed on us while we check
if|if
condition|(
name|recoveryStatus
operator|.
name|tryIncRef
argument_list|()
condition|)
block|{
try|try
block|{
if|if
condition|(
name|recoveryStatus
operator|.
name|indexShard
argument_list|()
operator|==
name|indexShard
condition|)
block|{
name|recoveryStatus
operator|.
name|incRef
argument_list|()
expr_stmt|;
return|return
operator|new
name|StatusRef
argument_list|(
name|recoveryStatus
argument_list|)
return|;
block|}
block|}
finally|finally
block|{
name|recoveryStatus
operator|.
name|decRef
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/** cancel all ongoing recoveries for the given shard. typically because the shards is closed */
DECL|method|cancelRecoveriesForShard
specifier|public
name|void
name|cancelRecoveriesForShard
parameter_list|(
name|ShardId
name|shardId
parameter_list|,
name|String
name|reason
parameter_list|)
block|{
for|for
control|(
name|RecoveryStatus
name|status
range|:
name|onGoingRecoveries
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|status
operator|.
name|shardId
argument_list|()
operator|.
name|equals
argument_list|(
name|shardId
argument_list|)
condition|)
block|{
name|cancelRecovery
argument_list|(
name|status
operator|.
name|recoveryId
argument_list|()
argument_list|,
name|reason
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * a reference to {@link RecoveryStatus}, which implements {@link AutoCloseable}. closing the reference      * causes {@link RecoveryStatus#decRef()} to be called. This makes sure that the underlying resources      * will not be freed until {@link RecoveriesCollection.StatusRef#close()} is called.      */
DECL|class|StatusRef
specifier|public
specifier|static
class|class
name|StatusRef
implements|implements
name|AutoCloseable
block|{
DECL|field|status
specifier|private
specifier|final
name|RecoveryStatus
name|status
decl_stmt|;
DECL|field|closed
specifier|private
specifier|final
name|AtomicBoolean
name|closed
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
comment|/**          * Important: {@link org.elasticsearch.indices.recovery.RecoveryStatus#tryIncRef()} should          * be *successfully* called on status before          */
DECL|method|StatusRef
specifier|public
name|StatusRef
parameter_list|(
name|RecoveryStatus
name|status
parameter_list|)
block|{
name|this
operator|.
name|status
operator|=
name|status
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
name|closed
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|status
operator|.
name|decRef
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|status
specifier|public
name|RecoveryStatus
name|status
parameter_list|()
block|{
return|return
name|status
return|;
block|}
block|}
block|}
end_class

end_unit

