begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.indices.syncedflush
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|syncedflush
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchIllegalStateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionWriteResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|ActionFilters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|replication
operator|.
name|TransportShardReplicationOperationAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|action
operator|.
name|shard
operator|.
name|ShardStateAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|Tuple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|IndexShard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|IndicesService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArrayList
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
DECL|class|TransportSyncedFlushAction
specifier|public
class|class
name|TransportSyncedFlushAction
extends|extends
name|TransportShardReplicationOperationAction
argument_list|<
name|SyncedFlushRequest
argument_list|,
name|SyncedFlushRequest
argument_list|,
name|SyncedFlushResponse
argument_list|,
name|SyncedFlushReplicaResponse
argument_list|>
block|{
DECL|field|NAME
specifier|public
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"indices:admin/syncedflush"
decl_stmt|;
annotation|@
name|Inject
DECL|method|TransportSyncedFlushAction
specifier|public
name|TransportSyncedFlushAction
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|TransportService
name|transportService
parameter_list|,
name|ClusterService
name|clusterService
parameter_list|,
name|IndicesService
name|indicesService
parameter_list|,
name|ThreadPool
name|threadPool
parameter_list|,
name|ShardStateAction
name|shardStateAction
parameter_list|,
name|ActionFilters
name|actionFilters
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|,
name|NAME
argument_list|,
name|transportService
argument_list|,
name|clusterService
argument_list|,
name|indicesService
argument_list|,
name|threadPool
argument_list|,
name|shardStateAction
argument_list|,
name|actionFilters
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|checkWriteConsistency
specifier|protected
name|boolean
name|checkWriteConsistency
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|resolveIndex
specifier|protected
name|boolean
name|resolveIndex
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|newRequestInstance
specifier|protected
name|SyncedFlushRequest
name|newRequestInstance
parameter_list|()
block|{
return|return
operator|new
name|SyncedFlushRequest
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|newReplicaRequestInstance
specifier|protected
name|SyncedFlushRequest
name|newReplicaRequestInstance
parameter_list|()
block|{
return|return
operator|new
name|SyncedFlushRequest
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|newResponseInstance
specifier|protected
name|SyncedFlushResponse
name|newResponseInstance
parameter_list|()
block|{
return|return
operator|new
name|SyncedFlushResponse
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|newReplicaResponseInstance
specifier|protected
name|SyncedFlushReplicaResponse
name|newReplicaResponseInstance
parameter_list|()
block|{
return|return
operator|new
name|SyncedFlushReplicaResponse
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|executor
specifier|protected
name|String
name|executor
parameter_list|()
block|{
return|return
name|ThreadPool
operator|.
name|Names
operator|.
name|FLUSH
return|;
block|}
annotation|@
name|Override
DECL|method|shards
specifier|protected
name|ShardIterator
name|shards
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|InternalRequest
name|request
parameter_list|)
block|{
comment|// get all shards for id
return|return
name|clusterService
operator|.
name|state
argument_list|()
operator|.
name|routingTable
argument_list|()
operator|.
name|index
argument_list|(
name|request
operator|.
name|concreteIndex
argument_list|()
argument_list|)
operator|.
name|shard
argument_list|(
name|request
operator|.
name|request
argument_list|()
operator|.
name|shardId
argument_list|()
operator|.
name|id
argument_list|()
argument_list|)
operator|.
name|shardsIt
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|shardOperationOnPrimary
specifier|protected
name|Tuple
argument_list|<
name|SyncedFlushResponse
argument_list|,
name|SyncedFlushRequest
argument_list|>
name|shardOperationOnPrimary
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|PrimaryOperationRequest
name|shardRequest
parameter_list|)
throws|throws
name|Throwable
block|{
name|byte
index|[]
name|commitId
init|=
name|shardRequest
operator|.
name|request
operator|.
name|commitIds
argument_list|()
operator|.
name|get
argument_list|(
name|clusterService
operator|.
name|localNode
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|IndexService
name|indexService
init|=
name|indicesService
operator|.
name|indexServiceSafe
argument_list|(
name|shardRequest
operator|.
name|shardId
operator|.
name|getIndex
argument_list|()
argument_list|)
decl_stmt|;
name|IndexShard
name|indexShard
init|=
name|indexService
operator|.
name|shardSafe
argument_list|(
name|shardRequest
operator|.
name|shardId
operator|.
name|id
argument_list|()
argument_list|)
decl_stmt|;
name|SyncedFlushResponse
name|syncedFlushResponse
init|=
operator|new
name|SyncedFlushResponse
argument_list|(
name|indexShard
operator|.
name|syncFlushIfNoPendingChanges
argument_list|(
name|shardRequest
operator|.
name|request
operator|.
name|syncId
argument_list|()
argument_list|,
name|commitId
argument_list|)
argument_list|,
name|shardRequest
operator|.
name|request
operator|.
name|syncId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|syncedFlushResponse
operator|.
name|success
argument_list|()
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|ElasticsearchIllegalStateException
argument_list|(
literal|"could not sync commit on primary"
argument_list|)
throw|;
block|}
return|return
operator|new
name|Tuple
argument_list|<>
argument_list|(
name|syncedFlushResponse
argument_list|,
name|shardRequest
operator|.
name|request
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|shardOperationOnReplica
specifier|protected
name|SyncedFlushReplicaResponse
name|shardOperationOnReplica
parameter_list|(
name|ReplicaOperationRequest
name|shardRequest
parameter_list|)
block|{
name|byte
index|[]
name|commitId
init|=
name|shardRequest
operator|.
name|request
operator|.
name|commitIds
argument_list|()
operator|.
name|get
argument_list|(
name|clusterService
operator|.
name|localNode
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|IndexService
name|indexService
init|=
name|indicesService
operator|.
name|indexServiceSafe
argument_list|(
name|shardRequest
operator|.
name|shardId
operator|.
name|getIndex
argument_list|()
argument_list|)
decl_stmt|;
name|IndexShard
name|indexShard
init|=
name|indexService
operator|.
name|shardSafe
argument_list|(
name|shardRequest
operator|.
name|shardId
operator|.
name|id
argument_list|()
argument_list|)
decl_stmt|;
name|SyncedFlushReplicaResponse
name|syncedFlushReplicaResponse
init|=
operator|new
name|SyncedFlushReplicaResponse
argument_list|()
decl_stmt|;
name|boolean
name|success
init|=
name|indexShard
operator|.
name|syncFlushIfNoPendingChanges
argument_list|(
name|shardRequest
operator|.
name|request
operator|.
name|syncId
argument_list|()
argument_list|,
name|commitId
argument_list|)
decl_stmt|;
name|String
name|message
init|=
name|success
condition|?
literal|"synced flush succeeded"
else|:
literal|"synced flush failed"
decl_stmt|;
name|syncedFlushReplicaResponse
operator|.
name|setResult
argument_list|(
name|success
argument_list|,
name|shardRequest
operator|.
name|request
operator|.
name|index
argument_list|()
argument_list|,
name|shardRequest
operator|.
name|shardId
operator|.
name|id
argument_list|()
argument_list|,
name|shardRequest
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|message
argument_list|)
expr_stmt|;
return|return
name|syncedFlushReplicaResponse
return|;
block|}
DECL|method|onAllReplicasResponded
specifier|protected
name|SyncedFlushResponse
name|onAllReplicasResponded
parameter_list|(
name|SyncedFlushResponse
name|finalResponse
parameter_list|,
name|CopyOnWriteArrayList
argument_list|<
name|SyncedFlushReplicaResponse
argument_list|>
name|replicaResponses
parameter_list|)
block|{
name|List
argument_list|<
name|ActionWriteResponse
operator|.
name|ShardInfo
operator|.
name|Failure
argument_list|>
name|additionalFailures
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|SyncedFlushReplicaResponse
name|replicaResponse
range|:
name|replicaResponses
control|)
block|{
if|if
condition|(
name|replicaResponse
operator|.
name|succeeded
operator|==
literal|false
condition|)
block|{
name|additionalFailures
operator|.
name|add
argument_list|(
operator|new
name|ActionWriteResponse
operator|.
name|ShardInfo
operator|.
name|Failure
argument_list|(
name|replicaResponse
operator|.
name|getIndex
argument_list|()
argument_list|,
name|replicaResponse
operator|.
name|getShardId
argument_list|()
argument_list|,
name|replicaResponse
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|replicaResponse
operator|.
name|getReason
argument_list|()
argument_list|,
name|RestStatus
operator|.
name|CONFLICT
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|additionalFailures
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|finalResponse
operator|.
name|getShardInfo
argument_list|()
operator|.
name|getFailures
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|finalResponse
operator|.
name|setShardInfo
argument_list|(
operator|new
name|ActionWriteResponse
operator|.
name|ShardInfo
argument_list|(
name|finalResponse
operator|.
name|getShardInfo
argument_list|()
operator|.
name|getTotal
argument_list|()
argument_list|,
name|finalResponse
operator|.
name|getShardInfo
argument_list|()
operator|.
name|getTotal
argument_list|()
operator|-
name|additionalFailures
operator|.
name|size
argument_list|()
argument_list|,
name|additionalFailures
operator|.
name|toArray
argument_list|(
operator|new
name|ActionWriteResponse
operator|.
name|ShardInfo
operator|.
name|Failure
index|[
name|additionalFailures
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|finalResponse
return|;
block|}
block|}
end_class

end_unit

