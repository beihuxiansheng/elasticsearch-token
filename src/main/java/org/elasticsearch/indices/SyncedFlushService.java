begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.indices
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|indices
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|node
operator|.
name|liveness
operator|.
name|LivenessRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|flush
operator|.
name|FlushRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|IndexRoutingTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|IndexShardRoutingTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRouting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|AbstractComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentCollections
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexShardMissingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|Engine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|IndexShard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|IndexShardException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_class
DECL|class|SyncedFlushService
specifier|public
class|class
name|SyncedFlushService
extends|extends
name|AbstractComponent
block|{
comment|// nocommmit: check these are ok
DECL|field|PRE_SYNCED_FLUSH_ACTION_NAME
specifier|public
specifier|static
specifier|final
name|String
name|PRE_SYNCED_FLUSH_ACTION_NAME
init|=
literal|"internal:indices/flush/synced/pre"
decl_stmt|;
DECL|field|SYNCED_FLUSH_ACTION_NAME
specifier|public
specifier|static
specifier|final
name|String
name|SYNCED_FLUSH_ACTION_NAME
init|=
literal|"internal:indices/flush/synced/sync"
decl_stmt|;
DECL|field|IN_FLIGHT_OPS_ACTION_NAME
specifier|public
specifier|static
specifier|final
name|String
name|IN_FLIGHT_OPS_ACTION_NAME
init|=
literal|"internal:indices/flush/synced/in_flight"
decl_stmt|;
DECL|field|SETTING_PRE_SYNC_TIMEOUT
specifier|public
specifier|static
specifier|final
name|String
name|SETTING_PRE_SYNC_TIMEOUT
init|=
literal|"indices.flush.synced.presync_timeout"
decl_stmt|;
DECL|field|SETTING_SYNC_TIMEOUT
specifier|public
specifier|static
specifier|final
name|String
name|SETTING_SYNC_TIMEOUT
init|=
literal|"indices.flush.synced.sync_timeout"
decl_stmt|;
DECL|field|SETTING_IN_FLIGHT_OPS_TIMEOUT
specifier|public
specifier|static
specifier|final
name|String
name|SETTING_IN_FLIGHT_OPS_TIMEOUT
init|=
literal|"indices.flush.synced.in_flight_ops_timeout"
decl_stmt|;
DECL|field|indicesService
specifier|private
specifier|final
name|IndicesService
name|indicesService
decl_stmt|;
DECL|field|clusterService
specifier|private
specifier|final
name|ClusterService
name|clusterService
decl_stmt|;
DECL|field|transportService
specifier|private
specifier|final
name|TransportService
name|transportService
decl_stmt|;
DECL|field|preSyncTimeout
specifier|private
specifier|final
name|TimeValue
name|preSyncTimeout
decl_stmt|;
DECL|field|syncTimeout
specifier|private
specifier|final
name|TimeValue
name|syncTimeout
decl_stmt|;
DECL|field|inflightOpsTimeout
specifier|private
specifier|final
name|TimeValue
name|inflightOpsTimeout
decl_stmt|;
annotation|@
name|Inject
DECL|method|SyncedFlushService
specifier|public
name|SyncedFlushService
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|IndicesService
name|indicesService
parameter_list|,
name|ClusterService
name|clusterService
parameter_list|,
name|TransportService
name|transportService
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|indicesService
operator|=
name|indicesService
expr_stmt|;
name|this
operator|.
name|clusterService
operator|=
name|clusterService
expr_stmt|;
name|this
operator|.
name|transportService
operator|=
name|transportService
expr_stmt|;
name|transportService
operator|.
name|registerRequestHandler
argument_list|(
name|PRE_SYNCED_FLUSH_ACTION_NAME
argument_list|,
name|PreSyncedFlushRequest
operator|.
name|class
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|FLUSH
argument_list|,
operator|new
name|PreSyncedFlushTransportHandler
argument_list|()
argument_list|)
expr_stmt|;
name|transportService
operator|.
name|registerRequestHandler
argument_list|(
name|SYNCED_FLUSH_ACTION_NAME
argument_list|,
name|SyncedFlushRequest
operator|.
name|class
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|FLUSH
argument_list|,
operator|new
name|SyncedFlushTransportHandler
argument_list|()
argument_list|)
expr_stmt|;
name|transportService
operator|.
name|registerRequestHandler
argument_list|(
name|IN_FLIGHT_OPS_ACTION_NAME
argument_list|,
name|InFlightOpsRequest
operator|.
name|class
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|SAME
argument_list|,
operator|new
name|InFlightOpCountTransportHandler
argument_list|()
argument_list|)
expr_stmt|;
name|preSyncTimeout
operator|=
name|settings
operator|.
name|getAsTime
argument_list|(
name|SETTING_PRE_SYNC_TIMEOUT
argument_list|,
name|TimeValue
operator|.
name|timeValueMinutes
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|syncTimeout
operator|=
name|settings
operator|.
name|getAsTime
argument_list|(
name|SETTING_SYNC_TIMEOUT
argument_list|,
name|TimeValue
operator|.
name|timeValueMinutes
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|inflightOpsTimeout
operator|=
name|settings
operator|.
name|getAsTime
argument_list|(
name|SETTING_IN_FLIGHT_OPS_TIMEOUT
argument_list|,
name|TimeValue
operator|.
name|timeValueMinutes
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|attemptSyncedFlush
specifier|public
name|SyncedFlushResult
name|attemptSyncedFlush
parameter_list|(
name|ShardId
name|shardId
parameter_list|)
throws|throws
name|ExecutionException
throws|,
name|InterruptedException
block|{
specifier|final
name|ClusterState
name|state
init|=
name|clusterService
operator|.
name|state
argument_list|()
decl_stmt|;
specifier|final
name|IndexRoutingTable
name|indexRoutingTable
init|=
name|state
operator|.
name|routingTable
argument_list|()
operator|.
name|index
argument_list|(
name|shardId
operator|.
name|index
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexRoutingTable
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IndexMissingException
argument_list|(
name|shardId
operator|.
name|index
argument_list|()
argument_list|)
throw|;
block|}
specifier|final
name|IndexShardRoutingTable
name|shardRoutingTable
init|=
name|indexRoutingTable
operator|.
name|shard
argument_list|(
name|shardId
operator|.
name|id
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|shardRoutingTable
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IndexShardMissingException
argument_list|(
name|shardId
argument_list|)
throw|;
block|}
specifier|final
name|List
argument_list|<
name|ShardRouting
argument_list|>
name|activeShards
init|=
name|shardRoutingTable
operator|.
name|activeShards
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|commitIds
init|=
name|sendPreSyncRequests
argument_list|(
name|activeShards
argument_list|,
name|state
argument_list|,
name|shardId
argument_list|)
decl_stmt|;
if|if
condition|(
name|commitIds
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
operator|new
name|SyncedFlushResult
argument_list|(
literal|"all shards failed to commit on pre-sync"
argument_list|)
return|;
block|}
name|int
name|inflight
init|=
name|getInflightOpsCount
argument_list|(
name|shardId
argument_list|,
name|state
argument_list|,
name|shardRoutingTable
argument_list|)
decl_stmt|;
if|if
condition|(
name|inflight
operator|!=
literal|1
condition|)
block|{
return|return
operator|new
name|SyncedFlushResult
argument_list|(
literal|"operation counter on primary is non zero ["
operator|+
name|inflight
operator|+
literal|"]"
argument_list|)
return|;
block|}
name|String
name|syncId
init|=
name|Strings
operator|.
name|base64UUID
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|ShardRouting
argument_list|,
name|SyncedFlushResponse
argument_list|>
name|results
init|=
name|sendSyncRequests
argument_list|(
name|syncId
argument_list|,
name|activeShards
argument_list|,
name|state
argument_list|,
name|commitIds
argument_list|,
name|shardId
argument_list|)
decl_stmt|;
return|return
operator|new
name|SyncedFlushResult
argument_list|(
name|syncId
argument_list|,
name|results
argument_list|)
return|;
block|}
comment|/**      * returns the number of inflight operations on primary. -1 upon error.      */
DECL|method|getInflightOpsCount
specifier|protected
name|int
name|getInflightOpsCount
parameter_list|(
specifier|final
name|ShardId
name|shardId
parameter_list|,
name|ClusterState
name|state
parameter_list|,
name|IndexShardRoutingTable
name|shardRoutingTable
parameter_list|)
block|{
specifier|final
name|ShardRouting
name|primaryShard
init|=
name|shardRoutingTable
operator|.
name|primaryShard
argument_list|()
decl_stmt|;
specifier|final
name|DiscoveryNode
name|primaryNode
init|=
name|state
operator|.
name|nodes
argument_list|()
operator|.
name|get
argument_list|(
name|primaryShard
operator|.
name|currentNodeId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|primaryNode
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"{} failed to resolve node for primary shard {}, skipping sync"
argument_list|,
name|shardId
argument_list|,
name|primaryShard
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
specifier|final
name|AtomicInteger
name|result
init|=
operator|new
name|AtomicInteger
argument_list|(
operator|-
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|transportService
operator|.
name|sendRequest
argument_list|(
name|primaryNode
argument_list|,
name|IN_FLIGHT_OPS_ACTION_NAME
argument_list|,
operator|new
name|InFlightOpsRequest
argument_list|(
name|shardId
argument_list|)
argument_list|,
operator|new
name|BaseTransportResponseHandler
argument_list|<
name|InFlightOpsResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|InFlightOpsResponse
name|newInstance
parameter_list|()
block|{
return|return
operator|new
name|InFlightOpsResponse
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleResponse
parameter_list|(
name|InFlightOpsResponse
name|response
parameter_list|)
block|{
name|result
operator|.
name|set
argument_list|(
name|response
operator|.
name|opCount
argument_list|()
argument_list|)
expr_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleException
parameter_list|(
name|TransportException
name|exp
parameter_list|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"{} unexpected error while retrieving inflight op count"
argument_list|,
name|shardId
argument_list|)
expr_stmt|;
name|result
operator|.
name|set
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|executor
parameter_list|()
block|{
return|return
name|ThreadPool
operator|.
name|Names
operator|.
name|SAME
return|;
block|}
block|}
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|latch
operator|.
name|await
argument_list|(
name|inflightOpsTimeout
operator|.
name|millis
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
operator|==
literal|false
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"{} in flight operation check timed out after [{}]"
argument_list|,
name|shardId
argument_list|,
name|syncTimeout
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"{} interrupted while waiting for in flight operation check"
argument_list|,
name|shardId
argument_list|)
expr_stmt|;
block|}
specifier|final
name|int
name|count
init|=
name|result
operator|.
name|get
argument_list|()
decl_stmt|;
name|logger
operator|.
name|trace
argument_list|(
literal|"{} in flight operation count [{}]"
argument_list|,
name|shardId
argument_list|,
name|count
argument_list|)
expr_stmt|;
return|return
name|count
return|;
block|}
DECL|method|sendSyncRequests
specifier|private
name|Map
argument_list|<
name|ShardRouting
argument_list|,
name|SyncedFlushResponse
argument_list|>
name|sendSyncRequests
parameter_list|(
specifier|final
name|String
name|syncId
parameter_list|,
name|List
argument_list|<
name|ShardRouting
argument_list|>
name|shards
parameter_list|,
name|ClusterState
name|state
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|expectedCommitIds
parameter_list|,
specifier|final
name|ShardId
name|shardId
parameter_list|)
block|{
specifier|final
name|CountDownLatch
name|countDownLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
name|shards
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|ShardRouting
argument_list|,
name|SyncedFlushResponse
argument_list|>
name|results
init|=
name|ConcurrentCollections
operator|.
name|newConcurrentMap
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|ShardRouting
name|shard
range|:
name|shards
control|)
block|{
specifier|final
name|DiscoveryNode
name|node
init|=
name|state
operator|.
name|nodes
argument_list|()
operator|.
name|get
argument_list|(
name|shard
operator|.
name|currentNodeId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"{} is assigned to an unknown node. skipping for sync id [{}]. shard routing {}"
argument_list|,
name|shardId
argument_list|,
name|syncId
argument_list|,
name|shard
argument_list|)
expr_stmt|;
name|results
operator|.
name|put
argument_list|(
name|shard
argument_list|,
operator|new
name|SyncedFlushResponse
argument_list|(
literal|"unknown node"
argument_list|)
argument_list|)
expr_stmt|;
name|countDownLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
continue|continue;
block|}
specifier|final
name|byte
index|[]
name|expectedCommitId
init|=
name|expectedCommitIds
operator|.
name|get
argument_list|(
name|shard
operator|.
name|currentNodeId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|expectedCommitId
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"{} can't resolve expected commit id for {}, skipping for sync id [{}]. shard routing {}"
argument_list|,
name|shardId
argument_list|,
name|syncId
argument_list|,
name|shard
argument_list|)
expr_stmt|;
name|results
operator|.
name|put
argument_list|(
name|shard
argument_list|,
operator|new
name|SyncedFlushResponse
argument_list|(
literal|"no commit id from pre-sync flush"
argument_list|)
argument_list|)
expr_stmt|;
name|countDownLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
continue|continue;
block|}
name|logger
operator|.
name|trace
argument_list|(
literal|"{} sending synced flush request to {}. sync id [{}]."
argument_list|,
name|shardId
argument_list|,
name|shard
argument_list|,
name|syncId
argument_list|)
expr_stmt|;
name|transportService
operator|.
name|sendRequest
argument_list|(
name|node
argument_list|,
name|SYNCED_FLUSH_ACTION_NAME
argument_list|,
operator|new
name|SyncedFlushRequest
argument_list|(
name|shard
operator|.
name|shardId
argument_list|()
argument_list|,
name|syncId
argument_list|,
name|expectedCommitId
argument_list|)
argument_list|,
operator|new
name|BaseTransportResponseHandler
argument_list|<
name|SyncedFlushResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|SyncedFlushResponse
name|newInstance
parameter_list|()
block|{
return|return
operator|new
name|SyncedFlushResponse
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleResponse
parameter_list|(
name|SyncedFlushResponse
name|response
parameter_list|)
block|{
name|SyncedFlushResponse
name|existing
init|=
name|results
operator|.
name|put
argument_list|(
name|shard
argument_list|,
name|response
argument_list|)
decl_stmt|;
assert|assert
name|existing
operator|==
literal|null
operator|:
literal|"got two answers for node ["
operator|+
name|node
operator|+
literal|"]"
assert|;
comment|// count after the assert so we won't decrement twice in handleException
name|countDownLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleException
parameter_list|(
name|TransportException
name|exp
parameter_list|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"{} error while performing synced flush on [{}], skipping"
argument_list|,
name|exp
argument_list|,
name|shardId
argument_list|,
name|shard
argument_list|)
expr_stmt|;
name|results
operator|.
name|put
argument_list|(
name|shard
argument_list|,
operator|new
name|SyncedFlushResponse
argument_list|(
name|exp
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|countDownLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|executor
parameter_list|()
block|{
return|return
name|ThreadPool
operator|.
name|Names
operator|.
name|SAME
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
name|countDownLatch
operator|.
name|await
argument_list|(
name|syncTimeout
operator|.
name|millis
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
operator|==
literal|false
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"{} waiting for synced flush with id [{}] timed out after [{}]. pending ops [{}]"
argument_list|,
name|shardId
argument_list|,
name|syncId
argument_list|,
name|syncTimeout
argument_list|,
name|countDownLatch
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"{} interrupted while waiting for sync requests (sync id [{}])"
argument_list|,
name|shardId
argument_list|,
name|syncId
argument_list|)
expr_stmt|;
block|}
return|return
name|results
return|;
block|}
comment|/**      * send presync requests to all started copies of the given shard      */
DECL|method|sendPreSyncRequests
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|sendPreSyncRequests
parameter_list|(
specifier|final
name|List
argument_list|<
name|ShardRouting
argument_list|>
name|shards
parameter_list|,
specifier|final
name|ClusterState
name|state
parameter_list|,
specifier|final
name|ShardId
name|shardId
parameter_list|)
block|{
specifier|final
name|CountDownLatch
name|countDownLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
name|shards
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|commitIds
init|=
name|ConcurrentCollections
operator|.
name|newConcurrentMap
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|ShardRouting
name|shard
range|:
name|shards
control|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"{} sending pre-synced flush request to {}"
argument_list|,
name|shardId
argument_list|,
name|shard
argument_list|)
expr_stmt|;
specifier|final
name|DiscoveryNode
name|node
init|=
name|state
operator|.
name|nodes
argument_list|()
operator|.
name|get
argument_list|(
name|shard
operator|.
name|currentNodeId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"{} shard routing {} refers to an unknown node. skipping."
argument_list|,
name|shardId
argument_list|,
name|shard
argument_list|)
expr_stmt|;
name|countDownLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
continue|continue;
block|}
name|transportService
operator|.
name|sendRequest
argument_list|(
name|node
argument_list|,
name|PRE_SYNCED_FLUSH_ACTION_NAME
argument_list|,
operator|new
name|PreSyncedFlushRequest
argument_list|(
name|shard
operator|.
name|shardId
argument_list|()
argument_list|)
argument_list|,
operator|new
name|BaseTransportResponseHandler
argument_list|<
name|PreSyncedFlushResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|PreSyncedFlushResponse
name|newInstance
parameter_list|()
block|{
return|return
operator|new
name|PreSyncedFlushResponse
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleResponse
parameter_list|(
name|PreSyncedFlushResponse
name|response
parameter_list|)
block|{
name|byte
index|[]
name|existing
init|=
name|commitIds
operator|.
name|put
argument_list|(
name|node
operator|.
name|id
argument_list|()
argument_list|,
name|response
operator|.
name|commitId
argument_list|()
argument_list|)
decl_stmt|;
assert|assert
name|existing
operator|==
literal|null
operator|:
literal|"got two answers for node ["
operator|+
name|node
operator|+
literal|"]"
assert|;
comment|// count after the assert so we won't decrement twice in handleException
name|countDownLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleException
parameter_list|(
name|TransportException
name|exp
parameter_list|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"{} error while performing pre synced flush on [{}], skipping"
argument_list|,
name|shardId
argument_list|,
name|exp
argument_list|,
name|shard
argument_list|)
expr_stmt|;
name|countDownLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|executor
parameter_list|()
block|{
return|return
name|ThreadPool
operator|.
name|Names
operator|.
name|SAME
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
name|countDownLatch
operator|.
name|await
argument_list|(
name|preSyncTimeout
operator|.
name|millis
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
operator|==
literal|false
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"{} waiting for pre sync flush requests timed out after [{}]. pending ops [{}]"
argument_list|,
name|shardId
argument_list|,
name|preSyncTimeout
argument_list|,
name|countDownLatch
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"{} interrupted while waiting for presync requests"
argument_list|,
name|shardId
argument_list|)
expr_stmt|;
block|}
return|return
name|commitIds
return|;
block|}
DECL|method|performPreSyncedFlush
specifier|private
name|PreSyncedFlushResponse
name|performPreSyncedFlush
parameter_list|(
name|PreSyncedFlushRequest
name|request
parameter_list|)
block|{
name|IndexShard
name|indexShard
init|=
name|indicesService
operator|.
name|indexServiceSafe
argument_list|(
name|request
operator|.
name|shardId
argument_list|()
operator|.
name|getIndex
argument_list|()
argument_list|)
operator|.
name|shardSafe
argument_list|(
name|request
operator|.
name|shardId
argument_list|()
operator|.
name|id
argument_list|()
argument_list|)
decl_stmt|;
name|FlushRequest
name|flushRequest
init|=
operator|new
name|FlushRequest
argument_list|()
operator|.
name|force
argument_list|(
literal|false
argument_list|)
operator|.
name|waitIfOngoing
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|logger
operator|.
name|trace
argument_list|(
literal|"{} performing pre sync flush"
argument_list|,
name|request
operator|.
name|shardId
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
name|id
init|=
name|indexShard
operator|.
name|flush
argument_list|(
name|flushRequest
argument_list|)
decl_stmt|;
name|logger
operator|.
name|trace
argument_list|(
literal|"{} pre sync flush done. commit id {}"
argument_list|,
name|request
operator|.
name|shardId
argument_list|()
argument_list|,
name|id
argument_list|)
expr_stmt|;
return|return
operator|new
name|PreSyncedFlushResponse
argument_list|(
name|id
argument_list|)
return|;
block|}
DECL|method|performSyncedFlush
specifier|private
name|SyncedFlushResponse
name|performSyncedFlush
parameter_list|(
name|SyncedFlushRequest
name|request
parameter_list|)
block|{
name|IndexService
name|indexService
init|=
name|indicesService
operator|.
name|indexServiceSafe
argument_list|(
name|request
operator|.
name|shardId
argument_list|()
operator|.
name|getIndex
argument_list|()
argument_list|)
decl_stmt|;
name|IndexShard
name|indexShard
init|=
name|indexService
operator|.
name|shardSafe
argument_list|(
name|request
operator|.
name|shardId
argument_list|()
operator|.
name|id
argument_list|()
argument_list|)
decl_stmt|;
name|logger
operator|.
name|trace
argument_list|(
literal|"{} performing sync flush. sync id [{}], expected commit id {}"
argument_list|,
name|request
operator|.
name|shardId
argument_list|()
argument_list|,
name|request
operator|.
name|syncId
argument_list|()
argument_list|,
name|request
operator|.
name|expectedCommitId
argument_list|()
argument_list|)
expr_stmt|;
name|Engine
operator|.
name|SyncedFlushResult
name|result
init|=
name|indexShard
operator|.
name|syncFlushIfNoPendingChanges
argument_list|(
name|request
operator|.
name|syncId
argument_list|()
argument_list|,
name|request
operator|.
name|expectedCommitId
argument_list|()
argument_list|)
decl_stmt|;
name|logger
operator|.
name|trace
argument_list|(
literal|"{} sync flush done. sync id [{}], result  [{}]"
argument_list|,
name|request
operator|.
name|shardId
argument_list|()
argument_list|,
name|request
operator|.
name|syncId
argument_list|()
argument_list|,
name|result
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|result
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
operator|new
name|SyncedFlushResponse
argument_list|()
return|;
case|case
name|FAILED_COMMIT_MISMATCH
case|:
return|return
operator|new
name|SyncedFlushResponse
argument_list|(
literal|"commit has changed"
argument_list|)
return|;
case|case
name|FAILED_PENDING_OPERATIONS
case|:
return|return
operator|new
name|SyncedFlushResponse
argument_list|(
literal|"pending operations"
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|ElasticsearchException
argument_list|(
literal|"unknown synced flush result ["
operator|+
name|result
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
DECL|method|performInFlightOps
specifier|private
name|InFlightOpsResponse
name|performInFlightOps
parameter_list|(
name|InFlightOpsRequest
name|request
parameter_list|)
block|{
name|IndexService
name|indexService
init|=
name|indicesService
operator|.
name|indexServiceSafe
argument_list|(
name|request
operator|.
name|shardId
argument_list|()
operator|.
name|getIndex
argument_list|()
argument_list|)
decl_stmt|;
name|IndexShard
name|indexShard
init|=
name|indexService
operator|.
name|shardSafe
argument_list|(
name|request
operator|.
name|shardId
argument_list|()
operator|.
name|id
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexShard
operator|.
name|routingEntry
argument_list|()
operator|.
name|primary
argument_list|()
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|IndexShardException
argument_list|(
name|request
operator|.
name|shardId
argument_list|()
argument_list|,
literal|"expected a primary shard"
argument_list|)
throw|;
block|}
name|int
name|opCount
init|=
name|indexShard
operator|.
name|getOperationsCount
argument_list|()
decl_stmt|;
name|logger
operator|.
name|trace
argument_list|(
literal|"{} in flight operations sampled at [{}]"
argument_list|,
name|request
operator|.
name|shardId
argument_list|()
argument_list|,
name|opCount
argument_list|)
expr_stmt|;
return|return
operator|new
name|InFlightOpsResponse
argument_list|(
name|opCount
argument_list|)
return|;
block|}
DECL|class|SyncedFlushResult
specifier|public
specifier|static
class|class
name|SyncedFlushResult
block|{
DECL|field|failureReason
specifier|private
specifier|final
name|String
name|failureReason
decl_stmt|;
DECL|field|shardResponses
specifier|private
specifier|final
name|Map
argument_list|<
name|ShardRouting
argument_list|,
name|SyncedFlushResponse
argument_list|>
name|shardResponses
decl_stmt|;
DECL|field|syncId
specifier|private
specifier|final
name|String
name|syncId
decl_stmt|;
comment|/**          * failure constructor          */
DECL|method|SyncedFlushResult
name|SyncedFlushResult
parameter_list|(
name|String
name|failureReason
parameter_list|)
block|{
name|this
operator|.
name|syncId
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|failureReason
operator|=
name|failureReason
expr_stmt|;
name|this
operator|.
name|shardResponses
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
comment|/**          * success constructor          */
DECL|method|SyncedFlushResult
name|SyncedFlushResult
parameter_list|(
name|String
name|syncId
parameter_list|,
name|Map
argument_list|<
name|ShardRouting
argument_list|,
name|SyncedFlushResponse
argument_list|>
name|shardResponses
parameter_list|)
block|{
name|this
operator|.
name|failureReason
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|shardResponses
operator|=
name|shardResponses
expr_stmt|;
name|this
operator|.
name|syncId
operator|=
name|syncId
expr_stmt|;
block|}
DECL|method|success
specifier|public
name|boolean
name|success
parameter_list|()
block|{
return|return
name|syncId
operator|!=
literal|null
return|;
block|}
DECL|method|failureReason
specifier|public
name|String
name|failureReason
parameter_list|()
block|{
return|return
name|failureReason
return|;
block|}
DECL|method|syncId
specifier|public
name|String
name|syncId
parameter_list|()
block|{
return|return
name|syncId
return|;
block|}
comment|/**          * total number of shards for which a sync attempt was made          */
DECL|method|totalShards
specifier|public
name|int
name|totalShards
parameter_list|()
block|{
return|return
name|shardResponses
operator|.
name|size
argument_list|()
return|;
block|}
DECL|method|successfulShards
specifier|public
name|int
name|successfulShards
parameter_list|()
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|SyncedFlushResponse
name|result
range|:
name|shardResponses
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|result
operator|.
name|success
argument_list|()
condition|)
block|{
name|i
operator|++
expr_stmt|;
block|}
block|}
return|return
name|i
return|;
block|}
DECL|method|shardResponses
specifier|public
name|Map
argument_list|<
name|ShardRouting
argument_list|,
name|SyncedFlushResponse
argument_list|>
name|shardResponses
parameter_list|()
block|{
return|return
name|shardResponses
return|;
block|}
block|}
DECL|class|PreSyncedFlushRequest
specifier|final
specifier|static
class|class
name|PreSyncedFlushRequest
extends|extends
name|TransportRequest
block|{
DECL|field|shardId
specifier|private
name|ShardId
name|shardId
decl_stmt|;
DECL|method|PreSyncedFlushRequest
name|PreSyncedFlushRequest
parameter_list|()
block|{         }
DECL|method|PreSyncedFlushRequest
specifier|public
name|PreSyncedFlushRequest
parameter_list|(
name|ShardId
name|shardId
parameter_list|)
block|{
name|this
operator|.
name|shardId
operator|=
name|shardId
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"PreSyncedFlushRequest{"
operator|+
literal|"shardId="
operator|+
name|shardId
operator|+
literal|'}'
return|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|shardId
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|this
operator|.
name|shardId
operator|=
name|ShardId
operator|.
name|readShardId
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
DECL|method|shardId
specifier|public
name|ShardId
name|shardId
parameter_list|()
block|{
return|return
name|shardId
return|;
block|}
block|}
DECL|class|PreSyncedFlushResponse
specifier|final
specifier|static
class|class
name|PreSyncedFlushResponse
extends|extends
name|TransportResponse
block|{
DECL|field|commitId
specifier|private
name|byte
index|[]
name|commitId
decl_stmt|;
DECL|method|PreSyncedFlushResponse
name|PreSyncedFlushResponse
parameter_list|()
block|{         }
DECL|method|PreSyncedFlushResponse
name|PreSyncedFlushResponse
parameter_list|(
name|byte
index|[]
name|commitId
parameter_list|)
block|{
name|this
operator|.
name|commitId
operator|=
name|commitId
expr_stmt|;
block|}
DECL|method|commitId
specifier|public
name|byte
index|[]
name|commitId
parameter_list|()
block|{
return|return
name|commitId
return|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|commitId
operator|=
name|in
operator|.
name|readByteArray
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeByteArray
argument_list|(
name|commitId
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|SyncedFlushRequest
specifier|static
specifier|final
class|class
name|SyncedFlushRequest
extends|extends
name|TransportRequest
block|{
DECL|field|syncId
specifier|private
name|String
name|syncId
decl_stmt|;
DECL|field|expectedCommitId
specifier|private
name|byte
index|[]
name|expectedCommitId
decl_stmt|;
DECL|field|shardId
specifier|private
name|ShardId
name|shardId
decl_stmt|;
DECL|method|SyncedFlushRequest
specifier|public
name|SyncedFlushRequest
parameter_list|()
block|{         }
DECL|method|SyncedFlushRequest
specifier|public
name|SyncedFlushRequest
parameter_list|(
name|ShardId
name|shardId
parameter_list|,
name|String
name|syncId
parameter_list|,
name|byte
index|[]
name|expectedCommitId
parameter_list|)
block|{
name|this
operator|.
name|expectedCommitId
operator|=
name|expectedCommitId
expr_stmt|;
name|this
operator|.
name|shardId
operator|=
name|shardId
expr_stmt|;
name|this
operator|.
name|syncId
operator|=
name|syncId
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|shardId
operator|=
name|ShardId
operator|.
name|readShardId
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|expectedCommitId
operator|=
name|in
operator|.
name|readByteArray
argument_list|()
expr_stmt|;
name|syncId
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|shardId
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeByteArray
argument_list|(
name|expectedCommitId
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeString
argument_list|(
name|syncId
argument_list|)
expr_stmt|;
block|}
DECL|method|shardId
specifier|public
name|ShardId
name|shardId
parameter_list|()
block|{
return|return
name|shardId
return|;
block|}
DECL|method|syncId
specifier|public
name|String
name|syncId
parameter_list|()
block|{
return|return
name|syncId
return|;
block|}
DECL|method|expectedCommitId
specifier|public
name|byte
index|[]
name|expectedCommitId
parameter_list|()
block|{
return|return
name|expectedCommitId
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"SyncedFlushRequest{"
operator|+
literal|"shardId="
operator|+
name|shardId
operator|+
literal|",syncId='"
operator|+
name|syncId
operator|+
literal|'\''
operator|+
literal|'}'
return|;
block|}
block|}
DECL|class|SyncedFlushResponse
specifier|static
specifier|final
class|class
name|SyncedFlushResponse
extends|extends
name|TransportResponse
block|{
comment|/**          * a non null value indicates a failure to sync flush. null means success          */
DECL|field|failureReason
name|String
name|failureReason
decl_stmt|;
DECL|method|SyncedFlushResponse
specifier|public
name|SyncedFlushResponse
parameter_list|()
block|{
name|failureReason
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|SyncedFlushResponse
specifier|public
name|SyncedFlushResponse
parameter_list|(
name|String
name|failureReason
parameter_list|)
block|{
name|this
operator|.
name|failureReason
operator|=
name|failureReason
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|failureReason
operator|=
name|in
operator|.
name|readOptionalString
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalString
argument_list|(
name|failureReason
argument_list|)
expr_stmt|;
block|}
DECL|method|success
specifier|public
name|boolean
name|success
parameter_list|()
block|{
return|return
name|failureReason
operator|==
literal|null
return|;
block|}
DECL|method|failureReason
specifier|public
name|String
name|failureReason
parameter_list|()
block|{
return|return
name|failureReason
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"SyncedFlushResponse{"
operator|+
literal|"success="
operator|+
name|success
argument_list|()
operator|+
literal|", failureReason='"
operator|+
name|failureReason
operator|+
literal|'\''
operator|+
literal|'}'
return|;
block|}
block|}
DECL|class|InFlightOpsRequest
specifier|static
specifier|final
class|class
name|InFlightOpsRequest
extends|extends
name|TransportRequest
block|{
DECL|field|shardId
specifier|private
name|ShardId
name|shardId
decl_stmt|;
DECL|method|InFlightOpsRequest
specifier|public
name|InFlightOpsRequest
parameter_list|()
block|{         }
DECL|method|InFlightOpsRequest
specifier|public
name|InFlightOpsRequest
parameter_list|(
name|ShardId
name|shardId
parameter_list|)
block|{
name|this
operator|.
name|shardId
operator|=
name|shardId
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|shardId
operator|=
name|ShardId
operator|.
name|readShardId
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|shardId
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
DECL|method|shardId
specifier|public
name|ShardId
name|shardId
parameter_list|()
block|{
return|return
name|shardId
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"InFlightOpsRequest{"
operator|+
literal|"shardId="
operator|+
name|shardId
operator|+
literal|'}'
return|;
block|}
block|}
DECL|class|InFlightOpsResponse
specifier|static
specifier|final
class|class
name|InFlightOpsResponse
extends|extends
name|TransportResponse
block|{
DECL|field|opCount
name|int
name|opCount
decl_stmt|;
DECL|method|InFlightOpsResponse
specifier|public
name|InFlightOpsResponse
parameter_list|()
block|{         }
DECL|method|InFlightOpsResponse
specifier|public
name|InFlightOpsResponse
parameter_list|(
name|int
name|opCount
parameter_list|)
block|{
name|this
operator|.
name|opCount
operator|=
name|opCount
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|opCount
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|opCount
argument_list|)
expr_stmt|;
block|}
DECL|method|opCount
specifier|public
name|int
name|opCount
parameter_list|()
block|{
return|return
name|opCount
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"InFlightOpsResponse{"
operator|+
literal|"opCount="
operator|+
name|opCount
operator|+
literal|'}'
return|;
block|}
block|}
DECL|class|PreSyncedFlushTransportHandler
specifier|private
class|class
name|PreSyncedFlushTransportHandler
implements|implements
name|TransportRequestHandler
argument_list|<
name|PreSyncedFlushRequest
argument_list|>
block|{
annotation|@
name|Override
DECL|method|messageReceived
specifier|public
name|void
name|messageReceived
parameter_list|(
name|PreSyncedFlushRequest
name|request
parameter_list|,
name|TransportChannel
name|channel
parameter_list|)
throws|throws
name|Exception
block|{
name|channel
operator|.
name|sendResponse
argument_list|(
name|performPreSyncedFlush
argument_list|(
name|request
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|SyncedFlushTransportHandler
specifier|private
class|class
name|SyncedFlushTransportHandler
implements|implements
name|TransportRequestHandler
argument_list|<
name|SyncedFlushRequest
argument_list|>
block|{
annotation|@
name|Override
DECL|method|messageReceived
specifier|public
name|void
name|messageReceived
parameter_list|(
name|SyncedFlushRequest
name|request
parameter_list|,
name|TransportChannel
name|channel
parameter_list|)
throws|throws
name|Exception
block|{
name|channel
operator|.
name|sendResponse
argument_list|(
name|performSyncedFlush
argument_list|(
name|request
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|InFlightOpCountTransportHandler
specifier|private
class|class
name|InFlightOpCountTransportHandler
implements|implements
name|TransportRequestHandler
argument_list|<
name|InFlightOpsRequest
argument_list|>
block|{
annotation|@
name|Override
DECL|method|messageReceived
specifier|public
name|void
name|messageReceived
parameter_list|(
name|InFlightOpsRequest
name|request
parameter_list|,
name|TransportChannel
name|channel
parameter_list|)
throws|throws
name|Exception
block|{
name|channel
operator|.
name|sendResponse
argument_list|(
name|performInFlightOps
argument_list|(
name|request
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

