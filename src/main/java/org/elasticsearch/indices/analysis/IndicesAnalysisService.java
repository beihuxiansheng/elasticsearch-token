begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.indices.analysis
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|analysis
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Tokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|ar
operator|.
name|ArabicAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|ar
operator|.
name|ArabicStemFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|bg
operator|.
name|BulgarianAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|br
operator|.
name|BrazilianAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|br
operator|.
name|BrazilianStemFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|ca
operator|.
name|CatalanAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|charfilter
operator|.
name|HTMLStripCharFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|cjk
operator|.
name|CJKAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|cn
operator|.
name|ChineseAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|core
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|cz
operator|.
name|CzechAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|cz
operator|.
name|CzechStemFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|da
operator|.
name|DanishAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|de
operator|.
name|GermanAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|de
operator|.
name|GermanStemFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|el
operator|.
name|GreekAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|en
operator|.
name|EnglishAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|en
operator|.
name|KStemFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|en
operator|.
name|PorterStemFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|es
operator|.
name|SpanishAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|eu
operator|.
name|BasqueAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|fa
operator|.
name|PersianAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|fi
operator|.
name|FinnishAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|fr
operator|.
name|FrenchAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|fr
operator|.
name|FrenchStemFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|ga
operator|.
name|IrishAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|gl
operator|.
name|GalicianAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|hi
operator|.
name|HindiAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|hu
operator|.
name|HungarianAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|hy
operator|.
name|ArmenianAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|id
operator|.
name|IndonesianAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|it
operator|.
name|ItalianAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|lv
operator|.
name|LatvianAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|miscellaneous
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|ngram
operator|.
name|EdgeNGramTokenFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|ngram
operator|.
name|EdgeNGramTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|ngram
operator|.
name|NGramTokenFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|ngram
operator|.
name|NGramTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|nl
operator|.
name|DutchAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|nl
operator|.
name|DutchStemFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|no
operator|.
name|NorwegianAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|path
operator|.
name|PathHierarchyTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|pattern
operator|.
name|PatternTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|payloads
operator|.
name|TypeAsPayloadTokenFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|pt
operator|.
name|PortugueseAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|reverse
operator|.
name|ReverseStringFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|ro
operator|.
name|RomanianAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|ru
operator|.
name|RussianAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|shingle
operator|.
name|ShingleFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|snowball
operator|.
name|SnowballAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|snowball
operator|.
name|SnowballFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|standard
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|sv
operator|.
name|SwedishAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|th
operator|.
name|ThaiAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tr
operator|.
name|TurkishAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|util
operator|.
name|ElisionFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticSearchIllegalStateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|AbstractComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|Lucene
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|regex
operator|.
name|Regex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentCollections
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
operator|.
name|Builder
operator|.
name|EMPTY_SETTINGS
import|;
end_import

begin_comment
comment|/**  * A node level registry of analyzers, to be reused by different indices which use default analyzers.  */
end_comment

begin_class
DECL|class|IndicesAnalysisService
specifier|public
class|class
name|IndicesAnalysisService
extends|extends
name|AbstractComponent
block|{
DECL|field|analyzerProviderFactories
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|PreBuiltAnalyzerProviderFactory
argument_list|>
name|analyzerProviderFactories
init|=
name|ConcurrentCollections
operator|.
name|newConcurrentMap
argument_list|()
decl_stmt|;
DECL|field|tokenizerFactories
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|PreBuiltTokenizerFactoryFactory
argument_list|>
name|tokenizerFactories
init|=
name|ConcurrentCollections
operator|.
name|newConcurrentMap
argument_list|()
decl_stmt|;
DECL|field|tokenFilterFactories
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|PreBuiltTokenFilterFactoryFactory
argument_list|>
name|tokenFilterFactories
init|=
name|ConcurrentCollections
operator|.
name|newConcurrentMap
argument_list|()
decl_stmt|;
DECL|field|charFilterFactories
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|PreBuiltCharFilterFactoryFactory
argument_list|>
name|charFilterFactories
init|=
name|ConcurrentCollections
operator|.
name|newConcurrentMap
argument_list|()
decl_stmt|;
DECL|method|IndicesAnalysisService
specifier|public
name|IndicesAnalysisService
parameter_list|()
block|{
name|super
argument_list|(
name|EMPTY_SETTINGS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Inject
DECL|method|IndicesAnalysisService
specifier|public
name|IndicesAnalysisService
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|StandardAnalyzer
name|standardAnalyzer
init|=
operator|new
name|StandardAnalyzer
argument_list|(
name|Lucene
operator|.
name|ANALYZER_VERSION
argument_list|)
decl_stmt|;
name|analyzerProviderFactories
operator|.
name|put
argument_list|(
literal|"default"
argument_list|,
operator|new
name|PreBuiltAnalyzerProviderFactory
argument_list|(
literal|"default"
argument_list|,
name|AnalyzerScope
operator|.
name|INDICES
argument_list|,
name|standardAnalyzer
argument_list|)
argument_list|)
expr_stmt|;
name|analyzerProviderFactories
operator|.
name|put
argument_list|(
literal|"standard"
argument_list|,
operator|new
name|PreBuiltAnalyzerProviderFactory
argument_list|(
literal|"standard"
argument_list|,
name|AnalyzerScope
operator|.
name|INDICES
argument_list|,
name|standardAnalyzer
argument_list|)
argument_list|)
expr_stmt|;
name|analyzerProviderFactories
operator|.
name|put
argument_list|(
literal|"keyword"
argument_list|,
operator|new
name|PreBuiltAnalyzerProviderFactory
argument_list|(
literal|"keyword"
argument_list|,
name|AnalyzerScope
operator|.
name|INDICES
argument_list|,
operator|new
name|KeywordAnalyzer
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|analyzerProviderFactories
operator|.
name|put
argument_list|(
literal|"stop"
argument_list|,
operator|new
name|PreBuiltAnalyzerProviderFactory
argument_list|(
literal|"stop"
argument_list|,
name|AnalyzerScope
operator|.
name|INDICES
argument_list|,
operator|new
name|StopAnalyzer
argument_list|(
name|Lucene
operator|.
name|ANALYZER_VERSION
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|analyzerProviderFactories
operator|.
name|put
argument_list|(
literal|"whitespace"
argument_list|,
operator|new
name|PreBuiltAnalyzerProviderFactory
argument_list|(
literal|"whitespace"
argument_list|,
name|AnalyzerScope
operator|.
name|INDICES
argument_list|,
operator|new
name|WhitespaceAnalyzer
argument_list|(
name|Lucene
operator|.
name|ANALYZER_VERSION
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|analyzerProviderFactories
operator|.
name|put
argument_list|(
literal|"simple"
argument_list|,
operator|new
name|PreBuiltAnalyzerProviderFactory
argument_list|(
literal|"simple"
argument_list|,
name|AnalyzerScope
operator|.
name|INDICES
argument_list|,
operator|new
name|SimpleAnalyzer
argument_list|(
name|Lucene
operator|.
name|ANALYZER_VERSION
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|analyzerProviderFactories
operator|.
name|put
argument_list|(
literal|"classic"
argument_list|,
operator|new
name|PreBuiltAnalyzerProviderFactory
argument_list|(
literal|"classic"
argument_list|,
name|AnalyzerScope
operator|.
name|INDICES
argument_list|,
operator|new
name|ClassicAnalyzer
argument_list|(
name|Lucene
operator|.
name|ANALYZER_VERSION
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// extended ones
name|analyzerProviderFactories
operator|.
name|put
argument_list|(
literal|"pattern"
argument_list|,
operator|new
name|PreBuiltAnalyzerProviderFactory
argument_list|(
literal|"pattern"
argument_list|,
name|AnalyzerScope
operator|.
name|INDICES
argument_list|,
operator|new
name|PatternAnalyzer
argument_list|(
name|Lucene
operator|.
name|ANALYZER_VERSION
argument_list|,
name|Regex
operator|.
name|compile
argument_list|(
literal|"\\W+"
comment|/*PatternAnalyzer.NON_WORD_PATTERN*/
argument_list|,
literal|null
argument_list|)
argument_list|,
literal|true
argument_list|,
name|StopAnalyzer
operator|.
name|ENGLISH_STOP_WORDS_SET
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|analyzerProviderFactories
operator|.
name|put
argument_list|(
literal|"snowball"
argument_list|,
operator|new
name|PreBuiltAnalyzerProviderFactory
argument_list|(
literal|"snowball"
argument_list|,
name|AnalyzerScope
operator|.
name|INDICES
argument_list|,
operator|new
name|SnowballAnalyzer
argument_list|(
name|Lucene
operator|.
name|ANALYZER_VERSION
argument_list|,
literal|"English"
argument_list|,
name|StopAnalyzer
operator|.
name|ENGLISH_STOP_WORDS_SET
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|analyzerProviderFactories
operator|.
name|put
argument_list|(
literal|"standard_html_strip"
argument_list|,
operator|new
name|PreBuiltAnalyzerProviderFactory
argument_list|(
literal|"standard_html_strip"
argument_list|,
name|AnalyzerScope
operator|.
name|INDICES
argument_list|,
operator|new
name|StandardHtmlStripAnalyzer
argument_list|(
name|Lucene
operator|.
name|ANALYZER_VERSION
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|analyzerProviderFactories
operator|.
name|put
argument_list|(
literal|"arabic"
argument_list|,
operator|new
name|PreBuiltAnalyzerProviderFactory
argument_list|(
literal|"arabic"
argument_list|,
name|AnalyzerScope
operator|.
name|INDICES
argument_list|,
operator|new
name|ArabicAnalyzer
argument_list|(
name|Lucene
operator|.
name|ANALYZER_VERSION
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|analyzerProviderFactories
operator|.
name|put
argument_list|(
literal|"armenian"
argument_list|,
operator|new
name|PreBuiltAnalyzerProviderFactory
argument_list|(
literal|"armenian"
argument_list|,
name|AnalyzerScope
operator|.
name|INDICES
argument_list|,
operator|new
name|ArmenianAnalyzer
argument_list|(
name|Lucene
operator|.
name|ANALYZER_VERSION
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|analyzerProviderFactories
operator|.
name|put
argument_list|(
literal|"basque"
argument_list|,
operator|new
name|PreBuiltAnalyzerProviderFactory
argument_list|(
literal|"basque"
argument_list|,
name|AnalyzerScope
operator|.
name|INDICES
argument_list|,
operator|new
name|BasqueAnalyzer
argument_list|(
name|Lucene
operator|.
name|ANALYZER_VERSION
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|analyzerProviderFactories
operator|.
name|put
argument_list|(
literal|"brazilian"
argument_list|,
operator|new
name|PreBuiltAnalyzerProviderFactory
argument_list|(
literal|"brazilian"
argument_list|,
name|AnalyzerScope
operator|.
name|INDICES
argument_list|,
operator|new
name|BrazilianAnalyzer
argument_list|(
name|Lucene
operator|.
name|ANALYZER_VERSION
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|analyzerProviderFactories
operator|.
name|put
argument_list|(
literal|"bulgarian"
argument_list|,
operator|new
name|PreBuiltAnalyzerProviderFactory
argument_list|(
literal|"bulgarian"
argument_list|,
name|AnalyzerScope
operator|.
name|INDICES
argument_list|,
operator|new
name|BulgarianAnalyzer
argument_list|(
name|Lucene
operator|.
name|ANALYZER_VERSION
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|analyzerProviderFactories
operator|.
name|put
argument_list|(
literal|"catalan"
argument_list|,
operator|new
name|PreBuiltAnalyzerProviderFactory
argument_list|(
literal|"catalan"
argument_list|,
name|AnalyzerScope
operator|.
name|INDICES
argument_list|,
operator|new
name|CatalanAnalyzer
argument_list|(
name|Lucene
operator|.
name|ANALYZER_VERSION
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|analyzerProviderFactories
operator|.
name|put
argument_list|(
literal|"chinese"
argument_list|,
operator|new
name|PreBuiltAnalyzerProviderFactory
argument_list|(
literal|"chinese"
argument_list|,
name|AnalyzerScope
operator|.
name|INDICES
argument_list|,
operator|new
name|ChineseAnalyzer
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|analyzerProviderFactories
operator|.
name|put
argument_list|(
literal|"cjk"
argument_list|,
operator|new
name|PreBuiltAnalyzerProviderFactory
argument_list|(
literal|"cjk"
argument_list|,
name|AnalyzerScope
operator|.
name|INDICES
argument_list|,
operator|new
name|CJKAnalyzer
argument_list|(
name|Lucene
operator|.
name|ANALYZER_VERSION
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|analyzerProviderFactories
operator|.
name|put
argument_list|(
literal|"czech"
argument_list|,
operator|new
name|PreBuiltAnalyzerProviderFactory
argument_list|(
literal|"czech"
argument_list|,
name|AnalyzerScope
operator|.
name|INDICES
argument_list|,
operator|new
name|CzechAnalyzer
argument_list|(
name|Lucene
operator|.
name|ANALYZER_VERSION
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|analyzerProviderFactories
operator|.
name|put
argument_list|(
literal|"dutch"
argument_list|,
operator|new
name|PreBuiltAnalyzerProviderFactory
argument_list|(
literal|"dutch"
argument_list|,
name|AnalyzerScope
operator|.
name|INDICES
argument_list|,
operator|new
name|DutchAnalyzer
argument_list|(
name|Lucene
operator|.
name|ANALYZER_VERSION
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|analyzerProviderFactories
operator|.
name|put
argument_list|(
literal|"danish"
argument_list|,
operator|new
name|PreBuiltAnalyzerProviderFactory
argument_list|(
literal|"danish"
argument_list|,
name|AnalyzerScope
operator|.
name|INDICES
argument_list|,
operator|new
name|DanishAnalyzer
argument_list|(
name|Lucene
operator|.
name|ANALYZER_VERSION
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|analyzerProviderFactories
operator|.
name|put
argument_list|(
literal|"english"
argument_list|,
operator|new
name|PreBuiltAnalyzerProviderFactory
argument_list|(
literal|"english"
argument_list|,
name|AnalyzerScope
operator|.
name|INDICES
argument_list|,
operator|new
name|EnglishAnalyzer
argument_list|(
name|Lucene
operator|.
name|ANALYZER_VERSION
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|analyzerProviderFactories
operator|.
name|put
argument_list|(
literal|"finnish"
argument_list|,
operator|new
name|PreBuiltAnalyzerProviderFactory
argument_list|(
literal|"finnish"
argument_list|,
name|AnalyzerScope
operator|.
name|INDICES
argument_list|,
operator|new
name|FinnishAnalyzer
argument_list|(
name|Lucene
operator|.
name|ANALYZER_VERSION
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|analyzerProviderFactories
operator|.
name|put
argument_list|(
literal|"french"
argument_list|,
operator|new
name|PreBuiltAnalyzerProviderFactory
argument_list|(
literal|"french"
argument_list|,
name|AnalyzerScope
operator|.
name|INDICES
argument_list|,
operator|new
name|FrenchAnalyzer
argument_list|(
name|Lucene
operator|.
name|ANALYZER_VERSION
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|analyzerProviderFactories
operator|.
name|put
argument_list|(
literal|"galician"
argument_list|,
operator|new
name|PreBuiltAnalyzerProviderFactory
argument_list|(
literal|"galician"
argument_list|,
name|AnalyzerScope
operator|.
name|INDICES
argument_list|,
operator|new
name|GalicianAnalyzer
argument_list|(
name|Lucene
operator|.
name|ANALYZER_VERSION
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|analyzerProviderFactories
operator|.
name|put
argument_list|(
literal|"german"
argument_list|,
operator|new
name|PreBuiltAnalyzerProviderFactory
argument_list|(
literal|"german"
argument_list|,
name|AnalyzerScope
operator|.
name|INDICES
argument_list|,
operator|new
name|GermanAnalyzer
argument_list|(
name|Lucene
operator|.
name|ANALYZER_VERSION
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|analyzerProviderFactories
operator|.
name|put
argument_list|(
literal|"greek"
argument_list|,
operator|new
name|PreBuiltAnalyzerProviderFactory
argument_list|(
literal|"greek"
argument_list|,
name|AnalyzerScope
operator|.
name|INDICES
argument_list|,
operator|new
name|GreekAnalyzer
argument_list|(
name|Lucene
operator|.
name|ANALYZER_VERSION
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|analyzerProviderFactories
operator|.
name|put
argument_list|(
literal|"hindi"
argument_list|,
operator|new
name|PreBuiltAnalyzerProviderFactory
argument_list|(
literal|"hindi"
argument_list|,
name|AnalyzerScope
operator|.
name|INDICES
argument_list|,
operator|new
name|HindiAnalyzer
argument_list|(
name|Lucene
operator|.
name|ANALYZER_VERSION
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|analyzerProviderFactories
operator|.
name|put
argument_list|(
literal|"hungarian"
argument_list|,
operator|new
name|PreBuiltAnalyzerProviderFactory
argument_list|(
literal|"hungarian"
argument_list|,
name|AnalyzerScope
operator|.
name|INDICES
argument_list|,
operator|new
name|HungarianAnalyzer
argument_list|(
name|Lucene
operator|.
name|ANALYZER_VERSION
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|analyzerProviderFactories
operator|.
name|put
argument_list|(
literal|"indonesian"
argument_list|,
operator|new
name|PreBuiltAnalyzerProviderFactory
argument_list|(
literal|"indonesian"
argument_list|,
name|AnalyzerScope
operator|.
name|INDICES
argument_list|,
operator|new
name|IndonesianAnalyzer
argument_list|(
name|Lucene
operator|.
name|ANALYZER_VERSION
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|analyzerProviderFactories
operator|.
name|put
argument_list|(
literal|"irish"
argument_list|,
operator|new
name|PreBuiltAnalyzerProviderFactory
argument_list|(
literal|"irish"
argument_list|,
name|AnalyzerScope
operator|.
name|INDICES
argument_list|,
operator|new
name|IrishAnalyzer
argument_list|(
name|Lucene
operator|.
name|ANALYZER_VERSION
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|analyzerProviderFactories
operator|.
name|put
argument_list|(
literal|"italian"
argument_list|,
operator|new
name|PreBuiltAnalyzerProviderFactory
argument_list|(
literal|"italian"
argument_list|,
name|AnalyzerScope
operator|.
name|INDICES
argument_list|,
operator|new
name|ItalianAnalyzer
argument_list|(
name|Lucene
operator|.
name|ANALYZER_VERSION
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|analyzerProviderFactories
operator|.
name|put
argument_list|(
literal|"latvian"
argument_list|,
operator|new
name|PreBuiltAnalyzerProviderFactory
argument_list|(
literal|"latvian"
argument_list|,
name|AnalyzerScope
operator|.
name|INDICES
argument_list|,
operator|new
name|LatvianAnalyzer
argument_list|(
name|Lucene
operator|.
name|ANALYZER_VERSION
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|analyzerProviderFactories
operator|.
name|put
argument_list|(
literal|"norwegian"
argument_list|,
operator|new
name|PreBuiltAnalyzerProviderFactory
argument_list|(
literal|"norwegian"
argument_list|,
name|AnalyzerScope
operator|.
name|INDICES
argument_list|,
operator|new
name|NorwegianAnalyzer
argument_list|(
name|Lucene
operator|.
name|ANALYZER_VERSION
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|analyzerProviderFactories
operator|.
name|put
argument_list|(
literal|"persian"
argument_list|,
operator|new
name|PreBuiltAnalyzerProviderFactory
argument_list|(
literal|"persian"
argument_list|,
name|AnalyzerScope
operator|.
name|INDICES
argument_list|,
operator|new
name|PersianAnalyzer
argument_list|(
name|Lucene
operator|.
name|ANALYZER_VERSION
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|analyzerProviderFactories
operator|.
name|put
argument_list|(
literal|"portuguese"
argument_list|,
operator|new
name|PreBuiltAnalyzerProviderFactory
argument_list|(
literal|"portuguese"
argument_list|,
name|AnalyzerScope
operator|.
name|INDICES
argument_list|,
operator|new
name|PortugueseAnalyzer
argument_list|(
name|Lucene
operator|.
name|ANALYZER_VERSION
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|analyzerProviderFactories
operator|.
name|put
argument_list|(
literal|"romanian"
argument_list|,
operator|new
name|PreBuiltAnalyzerProviderFactory
argument_list|(
literal|"romanian"
argument_list|,
name|AnalyzerScope
operator|.
name|INDICES
argument_list|,
operator|new
name|RomanianAnalyzer
argument_list|(
name|Lucene
operator|.
name|ANALYZER_VERSION
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|analyzerProviderFactories
operator|.
name|put
argument_list|(
literal|"russian"
argument_list|,
operator|new
name|PreBuiltAnalyzerProviderFactory
argument_list|(
literal|"russian"
argument_list|,
name|AnalyzerScope
operator|.
name|INDICES
argument_list|,
operator|new
name|RussianAnalyzer
argument_list|(
name|Lucene
operator|.
name|ANALYZER_VERSION
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|analyzerProviderFactories
operator|.
name|put
argument_list|(
literal|"spanish"
argument_list|,
operator|new
name|PreBuiltAnalyzerProviderFactory
argument_list|(
literal|"spanish"
argument_list|,
name|AnalyzerScope
operator|.
name|INDICES
argument_list|,
operator|new
name|SpanishAnalyzer
argument_list|(
name|Lucene
operator|.
name|ANALYZER_VERSION
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|analyzerProviderFactories
operator|.
name|put
argument_list|(
literal|"swedish"
argument_list|,
operator|new
name|PreBuiltAnalyzerProviderFactory
argument_list|(
literal|"swedish"
argument_list|,
name|AnalyzerScope
operator|.
name|INDICES
argument_list|,
operator|new
name|SwedishAnalyzer
argument_list|(
name|Lucene
operator|.
name|ANALYZER_VERSION
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|analyzerProviderFactories
operator|.
name|put
argument_list|(
literal|"turkish"
argument_list|,
operator|new
name|PreBuiltAnalyzerProviderFactory
argument_list|(
literal|"turkish"
argument_list|,
name|AnalyzerScope
operator|.
name|INDICES
argument_list|,
operator|new
name|TurkishAnalyzer
argument_list|(
name|Lucene
operator|.
name|ANALYZER_VERSION
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|analyzerProviderFactories
operator|.
name|put
argument_list|(
literal|"thai"
argument_list|,
operator|new
name|PreBuiltAnalyzerProviderFactory
argument_list|(
literal|"thai"
argument_list|,
name|AnalyzerScope
operator|.
name|INDICES
argument_list|,
operator|new
name|ThaiAnalyzer
argument_list|(
name|Lucene
operator|.
name|ANALYZER_VERSION
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Base Tokenizers
name|tokenizerFactories
operator|.
name|put
argument_list|(
literal|"standard"
argument_list|,
operator|new
name|PreBuiltTokenizerFactoryFactory
argument_list|(
operator|new
name|TokenizerFactory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
literal|"standard"
return|;
block|}
annotation|@
name|Override
specifier|public
name|Tokenizer
name|create
parameter_list|(
name|Reader
name|reader
parameter_list|)
block|{
return|return
operator|new
name|StandardTokenizer
argument_list|(
name|Lucene
operator|.
name|ANALYZER_VERSION
argument_list|,
name|reader
argument_list|)
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|tokenizerFactories
operator|.
name|put
argument_list|(
literal|"classic"
argument_list|,
operator|new
name|PreBuiltTokenizerFactoryFactory
argument_list|(
operator|new
name|TokenizerFactory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
literal|"classic"
return|;
block|}
annotation|@
name|Override
specifier|public
name|Tokenizer
name|create
parameter_list|(
name|Reader
name|reader
parameter_list|)
block|{
return|return
operator|new
name|ClassicTokenizer
argument_list|(
name|Lucene
operator|.
name|ANALYZER_VERSION
argument_list|,
name|reader
argument_list|)
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|tokenizerFactories
operator|.
name|put
argument_list|(
literal|"uax_url_email"
argument_list|,
operator|new
name|PreBuiltTokenizerFactoryFactory
argument_list|(
operator|new
name|TokenizerFactory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
literal|"uax_url_email"
return|;
block|}
annotation|@
name|Override
specifier|public
name|Tokenizer
name|create
parameter_list|(
name|Reader
name|reader
parameter_list|)
block|{
return|return
operator|new
name|UAX29URLEmailTokenizer
argument_list|(
name|Lucene
operator|.
name|ANALYZER_VERSION
argument_list|,
name|reader
argument_list|)
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|tokenizerFactories
operator|.
name|put
argument_list|(
literal|"path_hierarchy"
argument_list|,
operator|new
name|PreBuiltTokenizerFactoryFactory
argument_list|(
operator|new
name|TokenizerFactory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
literal|"path_hierarchy"
return|;
block|}
annotation|@
name|Override
specifier|public
name|Tokenizer
name|create
parameter_list|(
name|Reader
name|reader
parameter_list|)
block|{
return|return
operator|new
name|PathHierarchyTokenizer
argument_list|(
name|reader
argument_list|)
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|tokenizerFactories
operator|.
name|put
argument_list|(
literal|"keyword"
argument_list|,
operator|new
name|PreBuiltTokenizerFactoryFactory
argument_list|(
operator|new
name|TokenizerFactory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
literal|"keyword"
return|;
block|}
annotation|@
name|Override
specifier|public
name|Tokenizer
name|create
parameter_list|(
name|Reader
name|reader
parameter_list|)
block|{
return|return
operator|new
name|KeywordTokenizer
argument_list|(
name|reader
argument_list|)
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|tokenizerFactories
operator|.
name|put
argument_list|(
literal|"letter"
argument_list|,
operator|new
name|PreBuiltTokenizerFactoryFactory
argument_list|(
operator|new
name|TokenizerFactory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
literal|"letter"
return|;
block|}
annotation|@
name|Override
specifier|public
name|Tokenizer
name|create
parameter_list|(
name|Reader
name|reader
parameter_list|)
block|{
return|return
operator|new
name|LetterTokenizer
argument_list|(
name|Lucene
operator|.
name|ANALYZER_VERSION
argument_list|,
name|reader
argument_list|)
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|tokenizerFactories
operator|.
name|put
argument_list|(
literal|"lowercase"
argument_list|,
operator|new
name|PreBuiltTokenizerFactoryFactory
argument_list|(
operator|new
name|TokenizerFactory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
literal|"lowercase"
return|;
block|}
annotation|@
name|Override
specifier|public
name|Tokenizer
name|create
parameter_list|(
name|Reader
name|reader
parameter_list|)
block|{
return|return
operator|new
name|LowerCaseTokenizer
argument_list|(
name|Lucene
operator|.
name|ANALYZER_VERSION
argument_list|,
name|reader
argument_list|)
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|tokenizerFactories
operator|.
name|put
argument_list|(
literal|"whitespace"
argument_list|,
operator|new
name|PreBuiltTokenizerFactoryFactory
argument_list|(
operator|new
name|TokenizerFactory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
literal|"whitespace"
return|;
block|}
annotation|@
name|Override
specifier|public
name|Tokenizer
name|create
parameter_list|(
name|Reader
name|reader
parameter_list|)
block|{
return|return
operator|new
name|WhitespaceTokenizer
argument_list|(
name|Lucene
operator|.
name|ANALYZER_VERSION
argument_list|,
name|reader
argument_list|)
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|tokenizerFactories
operator|.
name|put
argument_list|(
literal|"nGram"
argument_list|,
operator|new
name|PreBuiltTokenizerFactoryFactory
argument_list|(
operator|new
name|TokenizerFactory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
literal|"nGram"
return|;
block|}
annotation|@
name|Override
specifier|public
name|Tokenizer
name|create
parameter_list|(
name|Reader
name|reader
parameter_list|)
block|{
return|return
operator|new
name|NGramTokenizer
argument_list|(
name|reader
argument_list|)
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|tokenizerFactories
operator|.
name|put
argument_list|(
literal|"ngram"
argument_list|,
operator|new
name|PreBuiltTokenizerFactoryFactory
argument_list|(
operator|new
name|TokenizerFactory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
literal|"ngram"
return|;
block|}
annotation|@
name|Override
specifier|public
name|Tokenizer
name|create
parameter_list|(
name|Reader
name|reader
parameter_list|)
block|{
return|return
operator|new
name|NGramTokenizer
argument_list|(
name|reader
argument_list|)
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|tokenizerFactories
operator|.
name|put
argument_list|(
literal|"edgeNGram"
argument_list|,
operator|new
name|PreBuiltTokenizerFactoryFactory
argument_list|(
operator|new
name|TokenizerFactory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
literal|"edgeNGram"
return|;
block|}
annotation|@
name|Override
specifier|public
name|Tokenizer
name|create
parameter_list|(
name|Reader
name|reader
parameter_list|)
block|{
return|return
operator|new
name|EdgeNGramTokenizer
argument_list|(
name|reader
argument_list|,
name|EdgeNGramTokenizer
operator|.
name|DEFAULT_SIDE
argument_list|,
name|EdgeNGramTokenizer
operator|.
name|DEFAULT_MIN_GRAM_SIZE
argument_list|,
name|EdgeNGramTokenizer
operator|.
name|DEFAULT_MAX_GRAM_SIZE
argument_list|)
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|tokenizerFactories
operator|.
name|put
argument_list|(
literal|"edge_ngram"
argument_list|,
operator|new
name|PreBuiltTokenizerFactoryFactory
argument_list|(
operator|new
name|TokenizerFactory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
literal|"edge_ngram"
return|;
block|}
annotation|@
name|Override
specifier|public
name|Tokenizer
name|create
parameter_list|(
name|Reader
name|reader
parameter_list|)
block|{
return|return
operator|new
name|EdgeNGramTokenizer
argument_list|(
name|reader
argument_list|,
name|EdgeNGramTokenizer
operator|.
name|DEFAULT_SIDE
argument_list|,
name|EdgeNGramTokenizer
operator|.
name|DEFAULT_MIN_GRAM_SIZE
argument_list|,
name|EdgeNGramTokenizer
operator|.
name|DEFAULT_MAX_GRAM_SIZE
argument_list|)
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|tokenizerFactories
operator|.
name|put
argument_list|(
literal|"pattern"
argument_list|,
operator|new
name|PreBuiltTokenizerFactoryFactory
argument_list|(
operator|new
name|TokenizerFactory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
literal|"pattern"
return|;
block|}
annotation|@
name|Override
specifier|public
name|Tokenizer
name|create
parameter_list|(
name|Reader
name|reader
parameter_list|)
block|{
return|return
operator|new
name|PatternTokenizer
argument_list|(
name|reader
argument_list|,
name|Regex
operator|.
name|compile
argument_list|(
literal|"\\W+"
argument_list|,
literal|null
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
comment|// Token Filters
name|tokenFilterFactories
operator|.
name|put
argument_list|(
literal|"word_delimiter"
argument_list|,
operator|new
name|PreBuiltTokenFilterFactoryFactory
argument_list|(
operator|new
name|TokenFilterFactory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
literal|"word_delimiter"
return|;
block|}
annotation|@
name|Override
specifier|public
name|TokenStream
name|create
parameter_list|(
name|TokenStream
name|tokenStream
parameter_list|)
block|{
return|return
operator|new
name|WordDelimiterFilter
argument_list|(
name|tokenStream
argument_list|,
name|WordDelimiterFilter
operator|.
name|GENERATE_WORD_PARTS
operator||
name|WordDelimiterFilter
operator|.
name|GENERATE_NUMBER_PARTS
operator||
name|WordDelimiterFilter
operator|.
name|SPLIT_ON_CASE_CHANGE
operator||
name|WordDelimiterFilter
operator|.
name|SPLIT_ON_NUMERICS
operator||
name|WordDelimiterFilter
operator|.
name|STEM_ENGLISH_POSSESSIVE
argument_list|,
literal|null
argument_list|)
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|tokenFilterFactories
operator|.
name|put
argument_list|(
literal|"stop"
argument_list|,
operator|new
name|PreBuiltTokenFilterFactoryFactory
argument_list|(
operator|new
name|TokenFilterFactory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
literal|"stop"
return|;
block|}
annotation|@
name|Override
specifier|public
name|TokenStream
name|create
parameter_list|(
name|TokenStream
name|tokenStream
parameter_list|)
block|{
return|return
operator|new
name|StopFilter
argument_list|(
name|Lucene
operator|.
name|ANALYZER_VERSION
argument_list|,
name|tokenStream
argument_list|,
name|StopAnalyzer
operator|.
name|ENGLISH_STOP_WORDS_SET
argument_list|)
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|tokenFilterFactories
operator|.
name|put
argument_list|(
literal|"trim"
argument_list|,
operator|new
name|PreBuiltTokenFilterFactoryFactory
argument_list|(
operator|new
name|TokenFilterFactory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
literal|"trim"
return|;
block|}
annotation|@
name|Override
specifier|public
name|TokenStream
name|create
parameter_list|(
name|TokenStream
name|tokenStream
parameter_list|)
block|{
return|return
operator|new
name|TrimFilter
argument_list|(
name|tokenStream
argument_list|,
literal|false
argument_list|)
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|tokenFilterFactories
operator|.
name|put
argument_list|(
literal|"reverse"
argument_list|,
operator|new
name|PreBuiltTokenFilterFactoryFactory
argument_list|(
operator|new
name|TokenFilterFactory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
literal|"reverse"
return|;
block|}
annotation|@
name|Override
specifier|public
name|TokenStream
name|create
parameter_list|(
name|TokenStream
name|tokenStream
parameter_list|)
block|{
return|return
operator|new
name|ReverseStringFilter
argument_list|(
name|Lucene
operator|.
name|ANALYZER_VERSION
argument_list|,
name|tokenStream
argument_list|)
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|tokenFilterFactories
operator|.
name|put
argument_list|(
literal|"asciifolding"
argument_list|,
operator|new
name|PreBuiltTokenFilterFactoryFactory
argument_list|(
operator|new
name|TokenFilterFactory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
literal|"asciifolding"
return|;
block|}
annotation|@
name|Override
specifier|public
name|TokenStream
name|create
parameter_list|(
name|TokenStream
name|tokenStream
parameter_list|)
block|{
return|return
operator|new
name|ASCIIFoldingFilter
argument_list|(
name|tokenStream
argument_list|)
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|tokenFilterFactories
operator|.
name|put
argument_list|(
literal|"length"
argument_list|,
operator|new
name|PreBuiltTokenFilterFactoryFactory
argument_list|(
operator|new
name|TokenFilterFactory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
literal|"length"
return|;
block|}
annotation|@
name|Override
specifier|public
name|TokenStream
name|create
parameter_list|(
name|TokenStream
name|tokenStream
parameter_list|)
block|{
return|return
operator|new
name|LengthFilter
argument_list|(
literal|true
argument_list|,
name|tokenStream
argument_list|,
literal|0
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|tokenFilterFactories
operator|.
name|put
argument_list|(
literal|"lowercase"
argument_list|,
operator|new
name|PreBuiltTokenFilterFactoryFactory
argument_list|(
operator|new
name|TokenFilterFactory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
literal|"lowercase"
return|;
block|}
annotation|@
name|Override
specifier|public
name|TokenStream
name|create
parameter_list|(
name|TokenStream
name|tokenStream
parameter_list|)
block|{
return|return
operator|new
name|LowerCaseFilter
argument_list|(
name|Lucene
operator|.
name|ANALYZER_VERSION
argument_list|,
name|tokenStream
argument_list|)
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|tokenFilterFactories
operator|.
name|put
argument_list|(
literal|"kstem"
argument_list|,
operator|new
name|PreBuiltTokenFilterFactoryFactory
argument_list|(
operator|new
name|TokenFilterFactory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
literal|"kstem"
return|;
block|}
annotation|@
name|Override
specifier|public
name|TokenStream
name|create
parameter_list|(
name|TokenStream
name|tokenStream
parameter_list|)
block|{
return|return
operator|new
name|KStemFilter
argument_list|(
name|tokenStream
argument_list|)
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|tokenFilterFactories
operator|.
name|put
argument_list|(
literal|"porter_stem"
argument_list|,
operator|new
name|PreBuiltTokenFilterFactoryFactory
argument_list|(
operator|new
name|TokenFilterFactory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
literal|"porter_stem"
return|;
block|}
annotation|@
name|Override
specifier|public
name|TokenStream
name|create
parameter_list|(
name|TokenStream
name|tokenStream
parameter_list|)
block|{
return|return
operator|new
name|PorterStemFilter
argument_list|(
name|tokenStream
argument_list|)
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|tokenFilterFactories
operator|.
name|put
argument_list|(
literal|"standard"
argument_list|,
operator|new
name|PreBuiltTokenFilterFactoryFactory
argument_list|(
operator|new
name|TokenFilterFactory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
literal|"standard"
return|;
block|}
annotation|@
name|Override
specifier|public
name|TokenStream
name|create
parameter_list|(
name|TokenStream
name|tokenStream
parameter_list|)
block|{
return|return
operator|new
name|StandardFilter
argument_list|(
name|Lucene
operator|.
name|ANALYZER_VERSION
argument_list|,
name|tokenStream
argument_list|)
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|tokenFilterFactories
operator|.
name|put
argument_list|(
literal|"classic"
argument_list|,
operator|new
name|PreBuiltTokenFilterFactoryFactory
argument_list|(
operator|new
name|TokenFilterFactory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
literal|"classic"
return|;
block|}
annotation|@
name|Override
specifier|public
name|TokenStream
name|create
parameter_list|(
name|TokenStream
name|tokenStream
parameter_list|)
block|{
return|return
operator|new
name|ClassicFilter
argument_list|(
name|tokenStream
argument_list|)
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|tokenFilterFactories
operator|.
name|put
argument_list|(
literal|"nGram"
argument_list|,
operator|new
name|PreBuiltTokenFilterFactoryFactory
argument_list|(
operator|new
name|TokenFilterFactory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
literal|"nGram"
return|;
block|}
annotation|@
name|Override
specifier|public
name|TokenStream
name|create
parameter_list|(
name|TokenStream
name|tokenStream
parameter_list|)
block|{
return|return
operator|new
name|NGramTokenFilter
argument_list|(
name|tokenStream
argument_list|)
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|tokenFilterFactories
operator|.
name|put
argument_list|(
literal|"ngram"
argument_list|,
operator|new
name|PreBuiltTokenFilterFactoryFactory
argument_list|(
operator|new
name|TokenFilterFactory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
literal|"ngram"
return|;
block|}
annotation|@
name|Override
specifier|public
name|TokenStream
name|create
parameter_list|(
name|TokenStream
name|tokenStream
parameter_list|)
block|{
return|return
operator|new
name|NGramTokenFilter
argument_list|(
name|tokenStream
argument_list|)
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|tokenFilterFactories
operator|.
name|put
argument_list|(
literal|"edgeNGram"
argument_list|,
operator|new
name|PreBuiltTokenFilterFactoryFactory
argument_list|(
operator|new
name|TokenFilterFactory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
literal|"edgeNGram"
return|;
block|}
annotation|@
name|Override
specifier|public
name|TokenStream
name|create
parameter_list|(
name|TokenStream
name|tokenStream
parameter_list|)
block|{
return|return
operator|new
name|EdgeNGramTokenFilter
argument_list|(
name|tokenStream
argument_list|,
name|EdgeNGramTokenFilter
operator|.
name|DEFAULT_SIDE
argument_list|,
name|EdgeNGramTokenFilter
operator|.
name|DEFAULT_MIN_GRAM_SIZE
argument_list|,
name|EdgeNGramTokenFilter
operator|.
name|DEFAULT_MAX_GRAM_SIZE
argument_list|)
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|tokenFilterFactories
operator|.
name|put
argument_list|(
literal|"edge_ngram"
argument_list|,
operator|new
name|PreBuiltTokenFilterFactoryFactory
argument_list|(
operator|new
name|TokenFilterFactory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
literal|"edge_ngram"
return|;
block|}
annotation|@
name|Override
specifier|public
name|TokenStream
name|create
parameter_list|(
name|TokenStream
name|tokenStream
parameter_list|)
block|{
return|return
operator|new
name|EdgeNGramTokenFilter
argument_list|(
name|tokenStream
argument_list|,
name|EdgeNGramTokenFilter
operator|.
name|DEFAULT_SIDE
argument_list|,
name|EdgeNGramTokenFilter
operator|.
name|DEFAULT_MIN_GRAM_SIZE
argument_list|,
name|EdgeNGramTokenFilter
operator|.
name|DEFAULT_MAX_GRAM_SIZE
argument_list|)
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|tokenFilterFactories
operator|.
name|put
argument_list|(
literal|"shingle"
argument_list|,
operator|new
name|PreBuiltTokenFilterFactoryFactory
argument_list|(
operator|new
name|ShingleTokenFilterFactory
operator|.
name|Factory
argument_list|(
literal|"shingle"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tokenFilterFactories
operator|.
name|put
argument_list|(
literal|"unique"
argument_list|,
operator|new
name|PreBuiltTokenFilterFactoryFactory
argument_list|(
operator|new
name|TokenFilterFactory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
literal|"unique"
return|;
block|}
annotation|@
name|Override
specifier|public
name|TokenStream
name|create
parameter_list|(
name|TokenStream
name|tokenStream
parameter_list|)
block|{
return|return
operator|new
name|UniqueTokenFilter
argument_list|(
name|tokenStream
argument_list|)
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|tokenFilterFactories
operator|.
name|put
argument_list|(
literal|"truncate"
argument_list|,
operator|new
name|PreBuiltTokenFilterFactoryFactory
argument_list|(
operator|new
name|TokenFilterFactory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
literal|"truncate"
return|;
block|}
annotation|@
name|Override
specifier|public
name|TokenStream
name|create
parameter_list|(
name|TokenStream
name|tokenStream
parameter_list|)
block|{
return|return
operator|new
name|TruncateTokenFilter
argument_list|(
name|tokenStream
argument_list|,
literal|10
argument_list|)
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
comment|// Extended Token Filters
name|tokenFilterFactories
operator|.
name|put
argument_list|(
literal|"snowball"
argument_list|,
operator|new
name|PreBuiltTokenFilterFactoryFactory
argument_list|(
operator|new
name|TokenFilterFactory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
literal|"snowball"
return|;
block|}
annotation|@
name|Override
specifier|public
name|TokenStream
name|create
parameter_list|(
name|TokenStream
name|tokenStream
parameter_list|)
block|{
return|return
operator|new
name|SnowballFilter
argument_list|(
name|tokenStream
argument_list|,
literal|"English"
argument_list|)
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|tokenFilterFactories
operator|.
name|put
argument_list|(
literal|"stemmer"
argument_list|,
operator|new
name|PreBuiltTokenFilterFactoryFactory
argument_list|(
operator|new
name|TokenFilterFactory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
literal|"stemmer"
return|;
block|}
annotation|@
name|Override
specifier|public
name|TokenStream
name|create
parameter_list|(
name|TokenStream
name|tokenStream
parameter_list|)
block|{
return|return
operator|new
name|PorterStemFilter
argument_list|(
name|tokenStream
argument_list|)
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|tokenFilterFactories
operator|.
name|put
argument_list|(
literal|"elision"
argument_list|,
operator|new
name|PreBuiltTokenFilterFactoryFactory
argument_list|(
operator|new
name|TokenFilterFactory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
literal|"elision"
return|;
block|}
annotation|@
name|Override
specifier|public
name|TokenStream
name|create
parameter_list|(
name|TokenStream
name|tokenStream
parameter_list|)
block|{
comment|// LUCENE 4 UPGRADE: French default for now, make set of articles configurable
return|return
operator|new
name|ElisionFilter
argument_list|(
name|tokenStream
argument_list|,
name|FrenchAnalyzer
operator|.
name|DEFAULT_ARTICLES
argument_list|)
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|tokenFilterFactories
operator|.
name|put
argument_list|(
literal|"arabic_stem"
argument_list|,
operator|new
name|PreBuiltTokenFilterFactoryFactory
argument_list|(
operator|new
name|TokenFilterFactory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
literal|"arabic_stem"
return|;
block|}
annotation|@
name|Override
specifier|public
name|TokenStream
name|create
parameter_list|(
name|TokenStream
name|tokenStream
parameter_list|)
block|{
return|return
operator|new
name|ArabicStemFilter
argument_list|(
name|tokenStream
argument_list|)
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|tokenFilterFactories
operator|.
name|put
argument_list|(
literal|"brazilian_stem"
argument_list|,
operator|new
name|PreBuiltTokenFilterFactoryFactory
argument_list|(
operator|new
name|TokenFilterFactory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
literal|"brazilian_stem"
return|;
block|}
annotation|@
name|Override
specifier|public
name|TokenStream
name|create
parameter_list|(
name|TokenStream
name|tokenStream
parameter_list|)
block|{
return|return
operator|new
name|BrazilianStemFilter
argument_list|(
name|tokenStream
argument_list|)
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|tokenFilterFactories
operator|.
name|put
argument_list|(
literal|"czech_stem"
argument_list|,
operator|new
name|PreBuiltTokenFilterFactoryFactory
argument_list|(
operator|new
name|TokenFilterFactory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
literal|"czech_stem"
return|;
block|}
annotation|@
name|Override
specifier|public
name|TokenStream
name|create
parameter_list|(
name|TokenStream
name|tokenStream
parameter_list|)
block|{
return|return
operator|new
name|CzechStemFilter
argument_list|(
name|tokenStream
argument_list|)
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|tokenFilterFactories
operator|.
name|put
argument_list|(
literal|"dutch_stem"
argument_list|,
operator|new
name|PreBuiltTokenFilterFactoryFactory
argument_list|(
operator|new
name|TokenFilterFactory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
literal|"dutch_stem"
return|;
block|}
annotation|@
name|Override
specifier|public
name|TokenStream
name|create
parameter_list|(
name|TokenStream
name|tokenStream
parameter_list|)
block|{
return|return
operator|new
name|DutchStemFilter
argument_list|(
name|tokenStream
argument_list|)
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|tokenFilterFactories
operator|.
name|put
argument_list|(
literal|"french_stem"
argument_list|,
operator|new
name|PreBuiltTokenFilterFactoryFactory
argument_list|(
operator|new
name|TokenFilterFactory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
literal|"french_stem"
return|;
block|}
annotation|@
name|Override
specifier|public
name|TokenStream
name|create
parameter_list|(
name|TokenStream
name|tokenStream
parameter_list|)
block|{
return|return
operator|new
name|FrenchStemFilter
argument_list|(
name|tokenStream
argument_list|)
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|tokenFilterFactories
operator|.
name|put
argument_list|(
literal|"german_stem"
argument_list|,
operator|new
name|PreBuiltTokenFilterFactoryFactory
argument_list|(
operator|new
name|TokenFilterFactory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
literal|"german_stem"
return|;
block|}
annotation|@
name|Override
specifier|public
name|TokenStream
name|create
parameter_list|(
name|TokenStream
name|tokenStream
parameter_list|)
block|{
return|return
operator|new
name|GermanStemFilter
argument_list|(
name|tokenStream
argument_list|)
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|tokenFilterFactories
operator|.
name|put
argument_list|(
literal|"russian_stem"
argument_list|,
operator|new
name|PreBuiltTokenFilterFactoryFactory
argument_list|(
operator|new
name|TokenFilterFactory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
literal|"russian_stem"
return|;
block|}
annotation|@
name|Override
specifier|public
name|TokenStream
name|create
parameter_list|(
name|TokenStream
name|tokenStream
parameter_list|)
block|{
return|return
operator|new
name|SnowballFilter
argument_list|(
name|tokenStream
argument_list|,
literal|"Russian"
argument_list|)
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|tokenFilterFactories
operator|.
name|put
argument_list|(
literal|"keyword_repeat"
argument_list|,
operator|new
name|PreBuiltTokenFilterFactoryFactory
argument_list|(
operator|new
name|TokenFilterFactory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
literal|"keyword_repeat"
return|;
block|}
annotation|@
name|Override
specifier|public
name|TokenStream
name|create
parameter_list|(
name|TokenStream
name|tokenStream
parameter_list|)
block|{
return|return
operator|new
name|KeywordRepeatFilter
argument_list|(
name|tokenStream
argument_list|)
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|tokenFilterFactories
operator|.
name|put
argument_list|(
literal|"type_as_payload"
argument_list|,
operator|new
name|PreBuiltTokenFilterFactoryFactory
argument_list|(
operator|new
name|TokenFilterFactory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
literal|"type_as_payload"
return|;
block|}
annotation|@
name|Override
specifier|public
name|TokenStream
name|create
parameter_list|(
name|TokenStream
name|tokenStream
parameter_list|)
block|{
return|return
operator|new
name|TypeAsPayloadTokenFilter
argument_list|(
name|tokenStream
argument_list|)
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
comment|// Char Filter
name|charFilterFactories
operator|.
name|put
argument_list|(
literal|"html_strip"
argument_list|,
operator|new
name|PreBuiltCharFilterFactoryFactory
argument_list|(
operator|new
name|CharFilterFactory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
literal|"html_strip"
return|;
block|}
annotation|@
name|Override
specifier|public
name|Reader
name|create
parameter_list|(
name|Reader
name|tokenStream
parameter_list|)
block|{
return|return
operator|new
name|HTMLStripCharFilter
argument_list|(
name|tokenStream
argument_list|)
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|charFilterFactories
operator|.
name|put
argument_list|(
literal|"htmlStrip"
argument_list|,
operator|new
name|PreBuiltCharFilterFactoryFactory
argument_list|(
operator|new
name|CharFilterFactory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
literal|"htmlStrip"
return|;
block|}
annotation|@
name|Override
specifier|public
name|Reader
name|create
parameter_list|(
name|Reader
name|tokenStream
parameter_list|)
block|{
return|return
operator|new
name|HTMLStripCharFilter
argument_list|(
name|tokenStream
argument_list|)
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|hasCharFilter
specifier|public
name|boolean
name|hasCharFilter
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|charFilterFactoryFactory
argument_list|(
name|name
argument_list|)
operator|!=
literal|null
return|;
block|}
DECL|method|charFilterFactories
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|PreBuiltCharFilterFactoryFactory
argument_list|>
name|charFilterFactories
parameter_list|()
block|{
return|return
name|charFilterFactories
return|;
block|}
DECL|method|charFilterFactoryFactory
specifier|public
name|CharFilterFactoryFactory
name|charFilterFactoryFactory
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|charFilterFactories
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
DECL|method|hasTokenFilter
specifier|public
name|boolean
name|hasTokenFilter
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|tokenFilterFactoryFactory
argument_list|(
name|name
argument_list|)
operator|!=
literal|null
return|;
block|}
DECL|method|tokenFilterFactories
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|PreBuiltTokenFilterFactoryFactory
argument_list|>
name|tokenFilterFactories
parameter_list|()
block|{
return|return
name|tokenFilterFactories
return|;
block|}
DECL|method|tokenFilterFactoryFactory
specifier|public
name|TokenFilterFactoryFactory
name|tokenFilterFactoryFactory
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|tokenFilterFactories
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
DECL|method|hasTokenizer
specifier|public
name|boolean
name|hasTokenizer
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|tokenizerFactoryFactory
argument_list|(
name|name
argument_list|)
operator|!=
literal|null
return|;
block|}
DECL|method|tokenizerFactories
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|PreBuiltTokenizerFactoryFactory
argument_list|>
name|tokenizerFactories
parameter_list|()
block|{
return|return
name|tokenizerFactories
return|;
block|}
DECL|method|tokenizerFactoryFactory
specifier|public
name|TokenizerFactoryFactory
name|tokenizerFactoryFactory
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|tokenizerFactories
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
DECL|method|analyzerProviderFactories
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|PreBuiltAnalyzerProviderFactory
argument_list|>
name|analyzerProviderFactories
parameter_list|()
block|{
return|return
name|analyzerProviderFactories
return|;
block|}
DECL|method|analyzerProviderFactory
specifier|public
name|PreBuiltAnalyzerProviderFactory
name|analyzerProviderFactory
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|analyzerProviderFactories
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
DECL|method|hasAnalyzer
specifier|public
name|boolean
name|hasAnalyzer
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|analyzer
argument_list|(
name|name
argument_list|)
operator|!=
literal|null
return|;
block|}
DECL|method|analyzer
specifier|public
name|Analyzer
name|analyzer
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|PreBuiltAnalyzerProviderFactory
name|analyzerProviderFactory
init|=
name|analyzerProviderFactory
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|analyzerProviderFactory
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|analyzerProviderFactory
operator|.
name|analyzer
argument_list|()
return|;
block|}
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
for|for
control|(
name|PreBuiltAnalyzerProviderFactory
name|analyzerProviderFactory
range|:
name|analyzerProviderFactories
operator|.
name|values
argument_list|()
control|)
block|{
try|try
block|{
name|analyzerProviderFactory
operator|.
name|analyzer
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
block|}
end_class

end_unit

