begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.indices.breaker
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|breaker
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|breaker
operator|.
name|CircuitBreaker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|breaker
operator|.
name|MemoryCircuitBreaker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|ESLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|Loggers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|ByteSizeValue
import|;
end_import

begin_comment
comment|/**  * Class that returns a breaker that never breaks  */
end_comment

begin_class
DECL|class|NoneCircuitBreakerService
specifier|public
class|class
name|NoneCircuitBreakerService
extends|extends
name|CircuitBreakerService
block|{
DECL|field|logger
specifier|private
specifier|final
name|ESLogger
name|logger
init|=
name|Loggers
operator|.
name|getLogger
argument_list|(
name|NoneCircuitBreakerService
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|breaker
specifier|private
specifier|final
name|MemoryCircuitBreaker
name|breaker
init|=
operator|new
name|MemoryCircuitBreaker
argument_list|(
operator|new
name|ByteSizeValue
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
argument_list|,
literal|0.0
argument_list|,
name|logger
argument_list|)
decl_stmt|;
DECL|method|NoneCircuitBreakerService
specifier|public
name|NoneCircuitBreakerService
parameter_list|()
block|{
name|super
argument_list|(
name|ImmutableSettings
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getBreaker
specifier|public
name|MemoryCircuitBreaker
name|getBreaker
parameter_list|(
name|CircuitBreaker
operator|.
name|Name
name|name
parameter_list|)
block|{
return|return
name|breaker
return|;
block|}
annotation|@
name|Override
DECL|method|stats
specifier|public
name|AllCircuitBreakerStats
name|stats
parameter_list|()
block|{
return|return
operator|new
name|AllCircuitBreakerStats
argument_list|(
operator|new
name|CircuitBreakerStats
index|[]
block|{
name|stats
argument_list|(
name|CircuitBreaker
operator|.
name|Name
operator|.
name|FIELDDATA
argument_list|)
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|stats
specifier|public
name|CircuitBreakerStats
name|stats
parameter_list|(
name|CircuitBreaker
operator|.
name|Name
name|name
parameter_list|)
block|{
return|return
operator|new
name|CircuitBreakerStats
argument_list|(
name|CircuitBreaker
operator|.
name|Name
operator|.
name|FIELDDATA
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
return|;
block|}
block|}
end_class

end_unit

