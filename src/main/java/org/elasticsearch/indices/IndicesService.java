begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.indices
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|indices
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|stats
operator|.
name|CommonStatsFlags
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|LifecycleComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|service
operator|.
name|IndexService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|store
operator|.
name|Store
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_interface
DECL|interface|IndicesService
specifier|public
interface|interface
name|IndicesService
extends|extends
name|Iterable
argument_list|<
name|IndexService
argument_list|>
extends|,
name|LifecycleComponent
argument_list|<
name|IndicesService
argument_list|>
block|{
comment|/**      * Returns<tt>true</tt> if changes (adding / removing) indices, shards and so on are allowed.      */
DECL|method|changesAllowed
specifier|public
name|boolean
name|changesAllowed
parameter_list|()
function_decl|;
comment|/**      * Returns the node stats indices stats. The<tt>includePrevious</tt> flag controls      * if old shards stats will be aggregated as well (only for relevant stats, such as      * refresh and indexing, not for docs/store).      */
DECL|method|stats
name|NodeIndicesStats
name|stats
parameter_list|(
name|boolean
name|includePrevious
parameter_list|)
function_decl|;
DECL|method|stats
name|NodeIndicesStats
name|stats
parameter_list|(
name|boolean
name|includePrevious
parameter_list|,
name|CommonStatsFlags
name|flags
parameter_list|)
function_decl|;
DECL|method|hasIndex
name|boolean
name|hasIndex
parameter_list|(
name|String
name|index
parameter_list|)
function_decl|;
DECL|method|indicesLifecycle
name|IndicesLifecycle
name|indicesLifecycle
parameter_list|()
function_decl|;
comment|/**      * Returns a snapshot of the started indices and the associated {@link IndexService} instances.      *      * The map being returned is not a live view and subsequent calls can return a different view.      */
DECL|method|indices
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|IndexService
argument_list|>
name|indices
parameter_list|()
function_decl|;
comment|/**      * Returns an IndexService for the specified index if exists otherwise returns<code>null</code>.      *      * Even if the index name appeared in {@link #indices()}<code>null</code> can still be returned as an      * index maybe removed in the meantime, so preferable use the associated {@link IndexService} in order to prevent NPE.      */
annotation|@
name|Nullable
DECL|method|indexService
name|IndexService
name|indexService
parameter_list|(
name|String
name|index
parameter_list|)
function_decl|;
comment|/**      * Returns an IndexService for the specified index if exists otherwise a {@link IndexMissingException} is thrown.      */
DECL|method|indexServiceSafe
name|IndexService
name|indexServiceSafe
parameter_list|(
name|String
name|index
parameter_list|)
throws|throws
name|IndexMissingException
function_decl|;
DECL|method|createIndex
name|IndexService
name|createIndex
parameter_list|(
name|String
name|index
parameter_list|,
name|Settings
name|settings
parameter_list|,
name|String
name|localNodeId
parameter_list|)
throws|throws
name|ElasticsearchException
function_decl|;
comment|/**      * Removes the given index from this service and releases all associated resources. Persistent parts of the index      * like the shards files, state and transaction logs are kept around in the case of a disaster recovery.      * @param index the index to remove      * @param reason  the high level reason causing this removal      */
DECL|method|removeIndex
name|void
name|removeIndex
parameter_list|(
name|String
name|index
parameter_list|,
name|String
name|reason
parameter_list|)
throws|throws
name|ElasticsearchException
function_decl|;
comment|/**      * Deletes the given index. Persistent parts of the index      * like the shards files, state and transaction logs are removed once all resources are released.      *      * Equivalent to {@link #removeIndex(String, String)} but fires      * different lifecycle events to ensure pending resources of this index are immediately removed.      * @param index the index to delete      * @param reason the high level reason causing this delete      */
DECL|method|deleteIndex
name|void
name|deleteIndex
parameter_list|(
name|String
name|index
parameter_list|,
name|String
name|reason
parameter_list|)
throws|throws
name|ElasticsearchException
function_decl|;
comment|/**      * A listener interface that can be used to get notification once a shard or all shards      * of an certain index that are allocated on a node are actually closed. The listener methods      * are invoked once the actual low level instance modifying or reading a shard are closed in contrast to      * removal methods that might return earlier.      */
DECL|interface|IndexCloseListener
specifier|public
specifier|static
interface|interface
name|IndexCloseListener
block|{
comment|/**          * Invoked once all shards are closed or their closing failed.          * @param index the index that got closed          * @param failures the recorded shard closing failures          */
DECL|method|onAllShardsClosed
specifier|public
name|void
name|onAllShardsClosed
parameter_list|(
name|Index
name|index
parameter_list|,
name|List
argument_list|<
name|Throwable
argument_list|>
name|failures
parameter_list|)
function_decl|;
comment|/**          * Invoked once the last resource using the given shard ID is released.          * Yet, this method is called while still holding the shards lock such that          * operations on the shards data can safely be executed in this callback.          */
DECL|method|onShardClosed
specifier|public
name|void
name|onShardClosed
parameter_list|(
name|ShardId
name|shardId
parameter_list|)
function_decl|;
comment|/**          * Invoked if closing the given shard failed.          */
DECL|method|onShardCloseFailed
specifier|public
name|void
name|onShardCloseFailed
parameter_list|(
name|ShardId
name|shardId
parameter_list|,
name|Throwable
name|t
parameter_list|)
function_decl|;
block|}
block|}
end_interface

end_unit

