begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.indices.warmer
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|warmer
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|Engine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|service
operator|.
name|IndexShard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_interface
DECL|interface|IndicesWarmer
specifier|public
interface|interface
name|IndicesWarmer
block|{
DECL|class|Listener
specifier|public
specifier|abstract
class|class
name|Listener
block|{
DECL|method|executor
specifier|public
name|String
name|executor
parameter_list|()
block|{
return|return
name|ThreadPool
operator|.
name|Names
operator|.
name|WARMER
return|;
block|}
comment|/** A handle on the execution of  warm-up action. */
DECL|interface|TerminationHandle
specifier|public
specifier|static
interface|interface
name|TerminationHandle
block|{
DECL|field|NO_WAIT
specifier|public
specifier|static
name|TerminationHandle
name|NO_WAIT
init|=
operator|new
name|TerminationHandle
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|awaitTermination
parameter_list|()
block|{}
block|}
decl_stmt|;
comment|/** Wait until execution of the warm-up action completes. */
DECL|method|awaitTermination
name|void
name|awaitTermination
parameter_list|()
throws|throws
name|InterruptedException
function_decl|;
block|}
comment|/** Queue tasks to warm-up the given segments and return handles that allow to wait for termination of the execution of those tasks. */
DECL|method|warm
specifier|public
specifier|abstract
name|TerminationHandle
name|warm
parameter_list|(
name|IndexShard
name|indexShard
parameter_list|,
name|IndexMetaData
name|indexMetaData
parameter_list|,
name|WarmerContext
name|context
parameter_list|,
name|ThreadPool
name|threadPool
parameter_list|)
function_decl|;
block|}
DECL|class|WarmerContext
specifier|public
specifier|static
class|class
name|WarmerContext
block|{
DECL|field|shardId
specifier|private
specifier|final
name|ShardId
name|shardId
decl_stmt|;
DECL|field|newSearcher
specifier|private
specifier|final
name|Engine
operator|.
name|Searcher
name|newSearcher
decl_stmt|;
DECL|method|WarmerContext
specifier|public
name|WarmerContext
parameter_list|(
name|ShardId
name|shardId
parameter_list|,
name|Engine
operator|.
name|Searcher
name|newSearcher
parameter_list|)
block|{
name|this
operator|.
name|shardId
operator|=
name|shardId
expr_stmt|;
name|this
operator|.
name|newSearcher
operator|=
name|newSearcher
expr_stmt|;
block|}
DECL|method|shardId
specifier|public
name|ShardId
name|shardId
parameter_list|()
block|{
return|return
name|shardId
return|;
block|}
comment|/** Return a searcher instance that only wraps the segments to warm. */
DECL|method|newSearcher
specifier|public
name|Engine
operator|.
name|Searcher
name|newSearcher
parameter_list|()
block|{
return|return
name|newSearcher
return|;
block|}
block|}
DECL|method|addListener
name|void
name|addListener
parameter_list|(
name|Listener
name|listener
parameter_list|)
function_decl|;
DECL|method|removeListener
name|void
name|removeListener
parameter_list|(
name|Listener
name|listener
parameter_list|)
function_decl|;
block|}
end_interface

end_unit

