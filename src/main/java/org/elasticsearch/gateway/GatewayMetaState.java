begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.gateway
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|gateway
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchIllegalStateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterChangedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterStateListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|MetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|DjbHashFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|HashFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|SimpleHashFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|AbstractComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|NodeEnvironment
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|DirectoryStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|GatewayMetaState
specifier|public
class|class
name|GatewayMetaState
extends|extends
name|AbstractComponent
implements|implements
name|ClusterStateListener
block|{
DECL|field|DEPRECATED_SETTING_ROUTING_HASH_FUNCTION
specifier|private
specifier|static
specifier|final
name|String
name|DEPRECATED_SETTING_ROUTING_HASH_FUNCTION
init|=
literal|"cluster.routing.operation.hash.type"
decl_stmt|;
DECL|field|DEPRECATED_SETTING_ROUTING_USE_TYPE
specifier|private
specifier|static
specifier|final
name|String
name|DEPRECATED_SETTING_ROUTING_USE_TYPE
init|=
literal|"cluster.routing.operation.use_type"
decl_stmt|;
DECL|field|nodeEnv
specifier|private
specifier|final
name|NodeEnvironment
name|nodeEnv
decl_stmt|;
DECL|field|metaStateService
specifier|private
specifier|final
name|MetaStateService
name|metaStateService
decl_stmt|;
DECL|field|danglingIndicesState
specifier|private
specifier|final
name|DanglingIndicesState
name|danglingIndicesState
decl_stmt|;
annotation|@
name|Nullable
DECL|field|currentMetaData
specifier|private
specifier|volatile
name|MetaData
name|currentMetaData
decl_stmt|;
annotation|@
name|Inject
DECL|method|GatewayMetaState
specifier|public
name|GatewayMetaState
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|NodeEnvironment
name|nodeEnv
parameter_list|,
name|MetaStateService
name|metaStateService
parameter_list|,
name|DanglingIndicesState
name|danglingIndicesState
parameter_list|,
name|TransportNodesListGatewayMetaState
name|nodesListGatewayMetaState
parameter_list|)
throws|throws
name|Exception
block|{
name|super
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|nodeEnv
operator|=
name|nodeEnv
expr_stmt|;
name|this
operator|.
name|metaStateService
operator|=
name|metaStateService
expr_stmt|;
name|this
operator|.
name|danglingIndicesState
operator|=
name|danglingIndicesState
expr_stmt|;
name|nodesListGatewayMetaState
operator|.
name|init
argument_list|(
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|DiscoveryNode
operator|.
name|masterNode
argument_list|(
name|settings
argument_list|)
operator|||
name|DiscoveryNode
operator|.
name|dataNode
argument_list|(
name|settings
argument_list|)
condition|)
block|{
name|nodeEnv
operator|.
name|ensureAtomicMoveSupported
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|DiscoveryNode
operator|.
name|masterNode
argument_list|(
name|settings
argument_list|)
condition|)
block|{
try|try
block|{
name|ensureNoPre019State
argument_list|()
expr_stmt|;
name|pre20Upgrade
argument_list|()
expr_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|metaStateService
operator|.
name|loadFullState
argument_list|()
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"took {} to load state"
argument_list|,
name|TimeValue
operator|.
name|timeValueMillis
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"failed to read local state, exiting..."
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
block|}
DECL|method|loadMetaState
specifier|public
name|MetaData
name|loadMetaState
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|metaStateService
operator|.
name|loadFullState
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|clusterChanged
specifier|public
name|void
name|clusterChanged
parameter_list|(
name|ClusterChangedEvent
name|event
parameter_list|)
block|{
specifier|final
name|ClusterState
name|state
init|=
name|event
operator|.
name|state
argument_list|()
decl_stmt|;
if|if
condition|(
name|state
operator|.
name|blocks
argument_list|()
operator|.
name|disableStatePersistence
argument_list|()
condition|)
block|{
comment|// reset the current metadata, we need to start fresh...
name|this
operator|.
name|currentMetaData
operator|=
literal|null
expr_stmt|;
return|return;
block|}
name|MetaData
name|newMetaData
init|=
name|state
operator|.
name|metaData
argument_list|()
decl_stmt|;
comment|// we don't check if metaData changed, since we might be called several times and we need to check dangling...
name|boolean
name|success
init|=
literal|true
decl_stmt|;
comment|// only applied to master node, writing the global and index level states
if|if
condition|(
name|state
operator|.
name|nodes
argument_list|()
operator|.
name|localNode
argument_list|()
operator|.
name|masterNode
argument_list|()
condition|)
block|{
comment|// check if the global state changed?
if|if
condition|(
name|currentMetaData
operator|==
literal|null
operator|||
operator|!
name|MetaData
operator|.
name|isGlobalStateEquals
argument_list|(
name|currentMetaData
argument_list|,
name|newMetaData
argument_list|)
condition|)
block|{
try|try
block|{
name|metaStateService
operator|.
name|writeGlobalState
argument_list|(
literal|"changed"
argument_list|,
name|newMetaData
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|success
operator|=
literal|false
expr_stmt|;
block|}
block|}
comment|// check and write changes in indices
for|for
control|(
name|IndexMetaData
name|indexMetaData
range|:
name|newMetaData
control|)
block|{
name|String
name|writeReason
init|=
literal|null
decl_stmt|;
name|IndexMetaData
name|currentIndexMetaData
decl_stmt|;
if|if
condition|(
name|currentMetaData
operator|==
literal|null
condition|)
block|{
comment|// a new event..., check from the state stored
try|try
block|{
name|currentIndexMetaData
operator|=
name|metaStateService
operator|.
name|loadIndexState
argument_list|(
name|indexMetaData
operator|.
name|index
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|ElasticsearchException
argument_list|(
literal|"failed to load index state"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|currentIndexMetaData
operator|=
name|currentMetaData
operator|.
name|index
argument_list|(
name|indexMetaData
operator|.
name|index
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|currentIndexMetaData
operator|==
literal|null
condition|)
block|{
name|writeReason
operator|=
literal|"freshly created"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|currentIndexMetaData
operator|.
name|version
argument_list|()
operator|!=
name|indexMetaData
operator|.
name|version
argument_list|()
condition|)
block|{
name|writeReason
operator|=
literal|"version changed from ["
operator|+
name|currentIndexMetaData
operator|.
name|version
argument_list|()
operator|+
literal|"] to ["
operator|+
name|indexMetaData
operator|.
name|version
argument_list|()
operator|+
literal|"]"
expr_stmt|;
block|}
comment|// we update the writeReason only if we really need to write it
if|if
condition|(
name|writeReason
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
try|try
block|{
name|metaStateService
operator|.
name|writeIndex
argument_list|(
name|writeReason
argument_list|,
name|indexMetaData
argument_list|,
name|currentIndexMetaData
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|success
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
name|danglingIndicesState
operator|.
name|processDanglingIndices
argument_list|(
name|newMetaData
argument_list|)
expr_stmt|;
if|if
condition|(
name|success
condition|)
block|{
name|currentMetaData
operator|=
name|newMetaData
expr_stmt|;
block|}
block|}
comment|/**      * Throws an IAE if a pre 0.19 state is detected      */
DECL|method|ensureNoPre019State
specifier|private
name|void
name|ensureNoPre019State
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|Path
name|dataLocation
range|:
name|nodeEnv
operator|.
name|nodeDataPaths
argument_list|()
control|)
block|{
specifier|final
name|Path
name|stateLocation
init|=
name|dataLocation
operator|.
name|resolve
argument_list|(
name|MetaDataStateFormat
operator|.
name|STATE_DIR_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Files
operator|.
name|exists
argument_list|(
name|stateLocation
argument_list|)
condition|)
block|{
continue|continue;
block|}
try|try
init|(
name|DirectoryStream
argument_list|<
name|Path
argument_list|>
name|stream
init|=
name|Files
operator|.
name|newDirectoryStream
argument_list|(
name|stateLocation
argument_list|)
init|)
block|{
for|for
control|(
name|Path
name|stateFile
range|:
name|stream
control|)
block|{
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"[upgrade]: processing ["
operator|+
name|stateFile
operator|.
name|getFileName
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
name|name
init|=
name|stateFile
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
literal|"metadata-"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ElasticsearchIllegalStateException
argument_list|(
literal|"Detected pre 0.19 metadata file please upgrade to a version before "
operator|+
name|Version
operator|.
name|CURRENT
operator|.
name|minimumCompatibilityVersion
argument_list|()
operator|+
literal|" first to upgrade state structures - metadata found: ["
operator|+
name|stateFile
operator|.
name|getParent
argument_list|()
operator|.
name|toAbsolutePath
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|}
block|}
comment|/**      * Elasticsearch 2.0 deprecated custom routing hash functions. So what we do here is that for old indices, we      * move this old& deprecated node setting to an index setting so that we can keep things backward compatible.      */
DECL|method|pre20Upgrade
specifier|private
name|void
name|pre20Upgrade
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Class
argument_list|<
name|?
extends|extends
name|HashFunction
argument_list|>
name|pre20HashFunction
decl_stmt|;
specifier|final
name|String
name|pre20HashFunctionName
init|=
name|settings
operator|.
name|get
argument_list|(
name|DEPRECATED_SETTING_ROUTING_HASH_FUNCTION
argument_list|,
literal|null
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|hasCustomPre20HashFunction
init|=
name|pre20HashFunctionName
operator|!=
literal|null
decl_stmt|;
comment|// the hash function package has changed we replace the two hash functions if their fully qualified name is used.
if|if
condition|(
name|hasCustomPre20HashFunction
condition|)
block|{
switch|switch
condition|(
name|pre20HashFunctionName
condition|)
block|{
case|case
literal|"org.elasticsearch.cluster.routing.operation.hash.simple.SimpleHashFunction"
case|:
name|pre20HashFunction
operator|=
name|SimpleHashFunction
operator|.
name|class
expr_stmt|;
break|break;
case|case
literal|"org.elasticsearch.cluster.routing.operation.hash.djb.DjbHashFunction"
case|:
name|pre20HashFunction
operator|=
name|DjbHashFunction
operator|.
name|class
expr_stmt|;
break|break;
default|default:
name|pre20HashFunction
operator|=
name|settings
operator|.
name|getAsClass
argument_list|(
name|DEPRECATED_SETTING_ROUTING_HASH_FUNCTION
argument_list|,
name|DjbHashFunction
operator|.
name|class
argument_list|,
literal|"org.elasticsearch.cluster.routing."
argument_list|,
literal|"HashFunction"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|pre20HashFunction
operator|=
name|DjbHashFunction
operator|.
name|class
expr_stmt|;
block|}
specifier|final
name|Boolean
name|pre20UseType
init|=
name|settings
operator|.
name|getAsBoolean
argument_list|(
name|DEPRECATED_SETTING_ROUTING_USE_TYPE
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|MetaData
name|metaData
init|=
name|loadMetaState
argument_list|()
decl_stmt|;
for|for
control|(
name|IndexMetaData
name|indexMetaData
range|:
name|metaData
control|)
block|{
if|if
condition|(
name|indexMetaData
operator|.
name|settings
argument_list|()
operator|.
name|get
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_LEGACY_ROUTING_HASH_FUNCTION
argument_list|)
operator|==
literal|null
operator|&&
name|indexMetaData
operator|.
name|getCreationVersion
argument_list|()
operator|.
name|before
argument_list|(
name|Version
operator|.
name|V_2_0_0
argument_list|)
condition|)
block|{
comment|// these settings need an upgrade
name|Settings
name|indexSettings
init|=
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|indexMetaData
operator|.
name|settings
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_LEGACY_ROUTING_HASH_FUNCTION
argument_list|,
name|pre20HashFunction
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_LEGACY_ROUTING_USE_TYPE
argument_list|,
name|pre20UseType
operator|==
literal|null
condition|?
literal|false
else|:
name|pre20UseType
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|IndexMetaData
name|newMetaData
init|=
name|IndexMetaData
operator|.
name|builder
argument_list|(
name|indexMetaData
argument_list|)
operator|.
name|version
argument_list|(
name|indexMetaData
operator|.
name|version
argument_list|()
argument_list|)
operator|.
name|settings
argument_list|(
name|indexSettings
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|metaStateService
operator|.
name|writeIndex
argument_list|(
literal|"upgrade"
argument_list|,
name|newMetaData
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|indexMetaData
operator|.
name|getCreationVersion
argument_list|()
operator|.
name|onOrAfter
argument_list|(
name|Version
operator|.
name|V_2_0_0
argument_list|)
condition|)
block|{
if|if
condition|(
name|indexMetaData
operator|.
name|getSettings
argument_list|()
operator|.
name|get
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_LEGACY_ROUTING_HASH_FUNCTION
argument_list|)
operator|!=
literal|null
operator|||
name|indexMetaData
operator|.
name|getSettings
argument_list|()
operator|.
name|get
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_LEGACY_ROUTING_USE_TYPE
argument_list|)
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|ElasticsearchIllegalStateException
argument_list|(
literal|"Indices created on or after 2.0 should NOT contain ["
operator|+
name|IndexMetaData
operator|.
name|SETTING_LEGACY_ROUTING_HASH_FUNCTION
operator|+
literal|"] + or ["
operator|+
name|IndexMetaData
operator|.
name|SETTING_LEGACY_ROUTING_USE_TYPE
operator|+
literal|"] in their index settings"
argument_list|)
throw|;
block|}
block|}
block|}
if|if
condition|(
name|hasCustomPre20HashFunction
operator|||
name|pre20UseType
operator|!=
literal|null
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Settings [{}] and [{}] are deprecated. Index settings from your old indices have been updated to record the fact that they "
operator|+
literal|"used some custom routing logic, you can now remove these settings from your `elasticsearch.yml` file"
argument_list|,
name|DEPRECATED_SETTING_ROUTING_HASH_FUNCTION
argument_list|,
name|DEPRECATED_SETTING_ROUTING_USE_TYPE
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

