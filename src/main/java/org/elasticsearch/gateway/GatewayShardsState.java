begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.gateway
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|gateway
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchIllegalStateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterChangedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterStateListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|AbstractComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|NodeEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
DECL|class|GatewayShardsState
specifier|public
class|class
name|GatewayShardsState
extends|extends
name|AbstractComponent
implements|implements
name|ClusterStateListener
block|{
DECL|field|SHARD_STATE_FILE_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|SHARD_STATE_FILE_PREFIX
init|=
literal|"state-"
decl_stmt|;
DECL|field|SHARD_STATE_FILE_PATTERN
specifier|private
specifier|static
specifier|final
name|Pattern
name|SHARD_STATE_FILE_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|SHARD_STATE_FILE_PREFIX
operator|+
literal|"(\\d+)("
operator|+
name|MetaDataStateFormat
operator|.
name|STATE_FILE_EXTENSION
operator|+
literal|")?"
argument_list|)
decl_stmt|;
DECL|field|PRIMARY_KEY
specifier|private
specifier|static
specifier|final
name|String
name|PRIMARY_KEY
init|=
literal|"primary"
decl_stmt|;
DECL|field|VERSION_KEY
specifier|private
specifier|static
specifier|final
name|String
name|VERSION_KEY
init|=
literal|"version"
decl_stmt|;
DECL|field|nodeEnv
specifier|private
specifier|final
name|NodeEnvironment
name|nodeEnv
decl_stmt|;
DECL|field|currentState
specifier|private
specifier|volatile
name|Map
argument_list|<
name|ShardId
argument_list|,
name|ShardStateInfo
argument_list|>
name|currentState
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
annotation|@
name|Inject
DECL|method|GatewayShardsState
specifier|public
name|GatewayShardsState
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|NodeEnvironment
name|nodeEnv
parameter_list|,
name|TransportNodesListGatewayStartedShards
name|listGatewayStartedShards
parameter_list|)
throws|throws
name|Exception
block|{
name|super
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|nodeEnv
operator|=
name|nodeEnv
expr_stmt|;
if|if
condition|(
name|listGatewayStartedShards
operator|!=
literal|null
condition|)
block|{
comment|// for testing
name|listGatewayStartedShards
operator|.
name|initGateway
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|DiscoveryNode
operator|.
name|dataNode
argument_list|(
name|settings
argument_list|)
condition|)
block|{
try|try
block|{
name|ensureNoPre019State
argument_list|()
expr_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|currentState
operator|=
name|loadShardsStateInfo
argument_list|()
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"took {} to load started shards state"
argument_list|,
name|TimeValue
operator|.
name|timeValueMillis
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"failed to read local state (started shards), exiting..."
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
block|}
DECL|method|loadShardInfo
specifier|public
name|ShardStateInfo
name|loadShardInfo
parameter_list|(
name|ShardId
name|shardId
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|loadShardStateInfo
argument_list|(
name|shardId
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|clusterChanged
specifier|public
name|void
name|clusterChanged
parameter_list|(
name|ClusterChangedEvent
name|event
parameter_list|)
block|{
specifier|final
name|ClusterState
name|state
init|=
name|event
operator|.
name|state
argument_list|()
decl_stmt|;
if|if
condition|(
name|state
operator|.
name|blocks
argument_list|()
operator|.
name|disableStatePersistence
argument_list|()
operator|==
literal|false
operator|&&
name|state
operator|.
name|nodes
argument_list|()
operator|.
name|localNode
argument_list|()
operator|.
name|dataNode
argument_list|()
operator|&&
name|event
operator|.
name|routingTableChanged
argument_list|()
condition|)
block|{
comment|// now, add all the ones that are active and on this node
name|RoutingNode
name|routingNode
init|=
name|state
operator|.
name|readOnlyRoutingNodes
argument_list|()
operator|.
name|node
argument_list|(
name|state
operator|.
name|nodes
argument_list|()
operator|.
name|localNodeId
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|ShardId
argument_list|,
name|ShardStateInfo
argument_list|>
name|newState
decl_stmt|;
if|if
condition|(
name|routingNode
operator|!=
literal|null
condition|)
block|{
name|newState
operator|=
name|persistRoutingNodeState
argument_list|(
name|routingNode
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|newState
operator|=
name|Maps
operator|.
name|newHashMap
argument_list|()
expr_stmt|;
block|}
comment|// preserve all shards that:
comment|//   * are not already in the new map AND
comment|//   * belong to an active index AND
comment|//   * used to be on this node but are not yet completely stated on any other node
comment|// since these shards are NOT active on this node the won't need to be written above - we just preserve these
comment|// in this map until they are fully started anywhere else or are re-assigned and we need to update the state
specifier|final
name|RoutingTable
name|indexRoutingTables
init|=
name|state
operator|.
name|routingTable
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ShardId
argument_list|,
name|ShardStateInfo
argument_list|>
name|entry
range|:
name|this
operator|.
name|currentState
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ShardId
name|shardId
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|newState
operator|.
name|containsKey
argument_list|(
name|shardId
argument_list|)
operator|==
literal|false
condition|)
block|{
comment|// this shard used to be here
name|String
name|indexName
init|=
name|shardId
operator|.
name|index
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|state
operator|.
name|metaData
argument_list|()
operator|.
name|hasIndex
argument_list|(
name|indexName
argument_list|)
condition|)
block|{
comment|// it's index is not deleted
name|IndexRoutingTable
name|index
init|=
name|indexRoutingTables
operator|.
name|index
argument_list|(
name|indexName
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|!=
literal|null
operator|&&
name|index
operator|.
name|shard
argument_list|(
name|shardId
operator|.
name|id
argument_list|()
argument_list|)
operator|.
name|allShardsStarted
argument_list|()
operator|==
literal|false
condition|)
block|{
comment|// not all shards are active on another node so we put it back until they are active
name|newState
operator|.
name|put
argument_list|(
name|shardId
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|this
operator|.
name|currentState
operator|=
name|newState
expr_stmt|;
block|}
block|}
DECL|method|persistRoutingNodeState
name|Map
argument_list|<
name|ShardId
argument_list|,
name|ShardStateInfo
argument_list|>
name|persistRoutingNodeState
parameter_list|(
name|RoutingNode
name|routingNode
parameter_list|)
block|{
specifier|final
name|Map
argument_list|<
name|ShardId
argument_list|,
name|ShardStateInfo
argument_list|>
name|newState
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|MutableShardRouting
name|shardRouting
range|:
name|routingNode
control|)
block|{
if|if
condition|(
name|shardRouting
operator|.
name|active
argument_list|()
condition|)
block|{
name|ShardId
name|shardId
init|=
name|shardRouting
operator|.
name|shardId
argument_list|()
decl_stmt|;
name|ShardStateInfo
name|shardStateInfo
init|=
operator|new
name|ShardStateInfo
argument_list|(
name|shardRouting
operator|.
name|version
argument_list|()
argument_list|,
name|shardRouting
operator|.
name|primary
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|ShardStateInfo
name|previous
init|=
name|currentState
operator|.
name|get
argument_list|(
name|shardId
argument_list|)
decl_stmt|;
if|if
condition|(
name|maybeWriteShardState
argument_list|(
name|shardId
argument_list|,
name|shardStateInfo
argument_list|,
name|previous
argument_list|)
condition|)
block|{
name|newState
operator|.
name|put
argument_list|(
name|shardId
argument_list|,
name|shardStateInfo
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|previous
operator|!=
literal|null
condition|)
block|{
name|currentState
operator|.
name|put
argument_list|(
name|shardId
argument_list|,
name|previous
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|newState
return|;
block|}
DECL|method|getCurrentState
name|Map
argument_list|<
name|ShardId
argument_list|,
name|ShardStateInfo
argument_list|>
name|getCurrentState
parameter_list|()
block|{
return|return
name|currentState
return|;
block|}
DECL|method|maybeWriteShardState
name|boolean
name|maybeWriteShardState
parameter_list|(
name|ShardId
name|shardId
parameter_list|,
name|ShardStateInfo
name|shardStateInfo
parameter_list|,
name|ShardStateInfo
name|previousState
parameter_list|)
block|{
specifier|final
name|String
name|writeReason
decl_stmt|;
if|if
condition|(
name|previousState
operator|==
literal|null
condition|)
block|{
name|writeReason
operator|=
literal|"freshly started, version ["
operator|+
name|shardStateInfo
operator|.
name|version
operator|+
literal|"]"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|previousState
operator|.
name|version
operator|<
name|shardStateInfo
operator|.
name|version
condition|)
block|{
name|writeReason
operator|=
literal|"version changed from ["
operator|+
name|previousState
operator|.
name|version
operator|+
literal|"] to ["
operator|+
name|shardStateInfo
operator|.
name|version
operator|+
literal|"]"
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"skip writing shard state - has been written before shardID: "
operator|+
name|shardId
operator|+
literal|" previous version:  ["
operator|+
name|previousState
operator|.
name|version
operator|+
literal|"] current version ["
operator|+
name|shardStateInfo
operator|.
name|version
operator|+
literal|"]"
argument_list|)
expr_stmt|;
assert|assert
name|previousState
operator|.
name|version
operator|<=
name|shardStateInfo
operator|.
name|version
operator|:
literal|"version should not go backwards for shardID: "
operator|+
name|shardId
operator|+
literal|" previous version:  ["
operator|+
name|previousState
operator|.
name|version
operator|+
literal|"] current version ["
operator|+
name|shardStateInfo
operator|.
name|version
operator|+
literal|"]"
assert|;
return|return
name|previousState
operator|.
name|version
operator|==
name|shardStateInfo
operator|.
name|version
return|;
block|}
try|try
block|{
name|writeShardState
argument_list|(
name|writeReason
argument_list|,
name|shardId
argument_list|,
name|shardStateInfo
argument_list|,
name|previousState
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"failed to write shard state for shard "
operator|+
name|shardId
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|// we failed to write the shard state, we will try and write
comment|// it next time...
block|}
return|return
literal|true
return|;
block|}
DECL|method|loadShardsStateInfo
specifier|private
name|Map
argument_list|<
name|ShardId
argument_list|,
name|ShardStateInfo
argument_list|>
name|loadShardsStateInfo
parameter_list|()
throws|throws
name|Exception
block|{
name|Set
argument_list|<
name|ShardId
argument_list|>
name|shardIds
init|=
name|nodeEnv
operator|.
name|findAllShardIds
argument_list|()
decl_stmt|;
name|long
name|highestVersion
init|=
operator|-
literal|1
decl_stmt|;
name|Map
argument_list|<
name|ShardId
argument_list|,
name|ShardStateInfo
argument_list|>
name|shardsState
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|ShardId
name|shardId
range|:
name|shardIds
control|)
block|{
name|ShardStateInfo
name|shardStateInfo
init|=
name|loadShardStateInfo
argument_list|(
name|shardId
argument_list|)
decl_stmt|;
if|if
condition|(
name|shardStateInfo
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|shardsState
operator|.
name|put
argument_list|(
name|shardId
argument_list|,
name|shardStateInfo
argument_list|)
expr_stmt|;
comment|// update the global version
if|if
condition|(
name|shardStateInfo
operator|.
name|version
operator|>
name|highestVersion
condition|)
block|{
name|highestVersion
operator|=
name|shardStateInfo
operator|.
name|version
expr_stmt|;
block|}
block|}
return|return
name|shardsState
return|;
block|}
DECL|method|loadShardStateInfo
specifier|private
name|ShardStateInfo
name|loadShardStateInfo
parameter_list|(
name|ShardId
name|shardId
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|MetaDataStateFormat
operator|.
name|loadLatestState
argument_list|(
name|logger
argument_list|,
name|newShardStateInfoFormat
argument_list|(
literal|false
argument_list|)
argument_list|,
name|SHARD_STATE_FILE_PATTERN
argument_list|,
name|shardId
operator|.
name|toString
argument_list|()
argument_list|,
name|nodeEnv
operator|.
name|shardPaths
argument_list|(
name|shardId
argument_list|)
argument_list|)
return|;
block|}
DECL|method|writeShardState
specifier|private
name|void
name|writeShardState
parameter_list|(
name|String
name|reason
parameter_list|,
name|ShardId
name|shardId
parameter_list|,
name|ShardStateInfo
name|shardStateInfo
parameter_list|,
annotation|@
name|Nullable
name|ShardStateInfo
name|previousStateInfo
parameter_list|)
throws|throws
name|Exception
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"{} writing shard state, reason [{}]"
argument_list|,
name|shardId
argument_list|,
name|reason
argument_list|)
expr_stmt|;
specifier|final
name|boolean
name|deleteOldFiles
init|=
name|previousStateInfo
operator|!=
literal|null
operator|&&
name|previousStateInfo
operator|.
name|version
operator|!=
name|shardStateInfo
operator|.
name|version
decl_stmt|;
name|newShardStateInfoFormat
argument_list|(
name|deleteOldFiles
argument_list|)
operator|.
name|write
argument_list|(
name|shardStateInfo
argument_list|,
name|SHARD_STATE_FILE_PREFIX
argument_list|,
name|shardStateInfo
operator|.
name|version
argument_list|,
name|nodeEnv
operator|.
name|shardPaths
argument_list|(
name|shardId
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|newShardStateInfoFormat
specifier|private
name|MetaDataStateFormat
argument_list|<
name|ShardStateInfo
argument_list|>
name|newShardStateInfoFormat
parameter_list|(
name|boolean
name|deleteOldFiles
parameter_list|)
block|{
return|return
operator|new
name|MetaDataStateFormat
argument_list|<
name|ShardStateInfo
argument_list|>
argument_list|(
name|XContentType
operator|.
name|JSON
argument_list|,
name|deleteOldFiles
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|XContentBuilder
name|newXContentBuilder
parameter_list|(
name|XContentType
name|type
parameter_list|,
name|OutputStream
name|stream
parameter_list|)
throws|throws
name|IOException
block|{
name|XContentBuilder
name|xContentBuilder
init|=
name|super
operator|.
name|newXContentBuilder
argument_list|(
name|type
argument_list|,
name|stream
argument_list|)
decl_stmt|;
name|xContentBuilder
operator|.
name|prettyPrint
argument_list|()
expr_stmt|;
return|return
name|xContentBuilder
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|ShardStateInfo
name|shardStateInfo
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|field
argument_list|(
name|VERSION_KEY
argument_list|,
name|shardStateInfo
operator|.
name|version
argument_list|)
expr_stmt|;
if|if
condition|(
name|shardStateInfo
operator|.
name|primary
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|PRIMARY_KEY
argument_list|,
name|shardStateInfo
operator|.
name|primary
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|ShardStateInfo
name|fromXContent
parameter_list|(
name|XContentParser
name|parser
parameter_list|)
throws|throws
name|IOException
block|{
name|XContentParser
operator|.
name|Token
name|token
init|=
name|parser
operator|.
name|nextToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|token
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|long
name|version
init|=
operator|-
literal|1
decl_stmt|;
name|Boolean
name|primary
init|=
literal|null
decl_stmt|;
name|String
name|currentFieldName
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
condition|)
block|{
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
condition|)
block|{
name|currentFieldName
operator|=
name|parser
operator|.
name|currentName
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|.
name|isValue
argument_list|()
condition|)
block|{
if|if
condition|(
name|VERSION_KEY
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|version
operator|=
name|parser
operator|.
name|longValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|PRIMARY_KEY
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|primary
operator|=
name|parser
operator|.
name|booleanValue
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|CorruptStateException
argument_list|(
literal|"unexpected field in shard state ["
operator|+
name|currentFieldName
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|CorruptStateException
argument_list|(
literal|"unexpected token in shard state ["
operator|+
name|token
operator|.
name|name
argument_list|()
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|primary
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|CorruptStateException
argument_list|(
literal|"missing value for [primary] in shard state"
argument_list|)
throw|;
block|}
if|if
condition|(
name|version
operator|==
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|CorruptStateException
argument_list|(
literal|"missing value for [version] in shard state"
argument_list|)
throw|;
block|}
return|return
operator|new
name|ShardStateInfo
argument_list|(
name|version
argument_list|,
name|primary
argument_list|)
return|;
block|}
block|}
return|;
block|}
DECL|method|ensureNoPre019State
specifier|private
name|void
name|ensureNoPre019State
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|Path
name|dataLocation
range|:
name|nodeEnv
operator|.
name|nodeDataPaths
argument_list|()
control|)
block|{
specifier|final
name|Path
name|stateLocation
init|=
name|dataLocation
operator|.
name|resolve
argument_list|(
name|MetaDataStateFormat
operator|.
name|STATE_DIR_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|Files
operator|.
name|exists
argument_list|(
name|stateLocation
argument_list|)
condition|)
block|{
try|try
init|(
name|DirectoryStream
argument_list|<
name|Path
argument_list|>
name|stream
init|=
name|Files
operator|.
name|newDirectoryStream
argument_list|(
name|stateLocation
argument_list|,
literal|"shards-*"
argument_list|)
init|)
block|{
for|for
control|(
name|Path
name|stateFile
range|:
name|stream
control|)
block|{
throw|throw
operator|new
name|ElasticsearchIllegalStateException
argument_list|(
literal|"Detected pre 0.19 shard state file please upgrade to a version before "
operator|+
name|Version
operator|.
name|CURRENT
operator|.
name|minimumCompatibilityVersion
argument_list|()
operator|+
literal|" first to upgrade state structures - shard state found: ["
operator|+
name|stateFile
operator|.
name|getParent
argument_list|()
operator|.
name|toAbsolutePath
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

