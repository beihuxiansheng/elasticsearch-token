begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.analysis
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|CharTermAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|PositionIncrementAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchIllegalArgumentException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_comment
comment|/**  * This {@link Analyzer} wraps another analyzer and adds a set of prefixes to the  * underlying TokenStream. While these prefixes are iterated the position attribute  * will not be incremented. Also each prefix will be separated from the other tokens  * by a separator character.  * NOTE: The sequence of prefixes needs to be not empty   */
end_comment

begin_class
DECL|class|PrefixAnalyzer
specifier|public
class|class
name|PrefixAnalyzer
extends|extends
name|Analyzer
block|{
DECL|field|separator
specifier|private
specifier|final
name|char
name|separator
decl_stmt|;
DECL|field|prefix
specifier|private
specifier|final
name|Iterable
argument_list|<
name|?
extends|extends
name|CharSequence
argument_list|>
name|prefix
decl_stmt|;
DECL|field|analyzer
specifier|private
specifier|final
name|Analyzer
name|analyzer
decl_stmt|;
comment|/**      * Create a new {@link PrefixAnalyzer}. The separator will be set to the DEFAULT_SEPARATOR.      *       * @param analyzer {@link Analyzer} to wrap      * @param prefix Single prefix       */
DECL|method|PrefixAnalyzer
specifier|public
name|PrefixAnalyzer
parameter_list|(
name|Analyzer
name|analyzer
parameter_list|,
name|char
name|separator
parameter_list|,
name|CharSequence
name|prefix
parameter_list|)
block|{
name|this
argument_list|(
name|analyzer
argument_list|,
name|separator
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
name|prefix
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Create a new {@link PrefixAnalyzer}. The separator will be set to the DEFAULT_SEPARATOR.      *       * @param analyzer {@link Analyzer} to wrap      * @param prefix {@link Iterable} of {@link CharSequence} which keeps all prefixes       */
DECL|method|PrefixAnalyzer
specifier|public
name|PrefixAnalyzer
parameter_list|(
name|Analyzer
name|analyzer
parameter_list|,
name|char
name|separator
parameter_list|,
name|Iterable
argument_list|<
name|?
extends|extends
name|CharSequence
argument_list|>
name|prefix
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|analyzer
operator|=
name|analyzer
expr_stmt|;
name|this
operator|.
name|prefix
operator|=
name|prefix
expr_stmt|;
name|this
operator|.
name|separator
operator|=
name|separator
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createComponents
specifier|protected
name|TokenStreamComponents
name|createComponents
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|Reader
name|reader
parameter_list|)
block|{
name|TokenStreamComponents
name|createComponents
init|=
name|analyzer
operator|.
name|createComponents
argument_list|(
name|fieldName
argument_list|,
name|reader
argument_list|)
decl_stmt|;
name|TokenStream
name|stream
init|=
operator|new
name|PrefixTokenFilter
argument_list|(
name|createComponents
operator|.
name|getTokenStream
argument_list|()
argument_list|,
name|separator
argument_list|,
name|prefix
argument_list|)
decl_stmt|;
name|TokenStreamComponents
name|tsc
init|=
operator|new
name|TokenStreamComponents
argument_list|(
name|createComponents
operator|.
name|getTokenizer
argument_list|()
argument_list|,
name|stream
argument_list|)
decl_stmt|;
return|return
name|tsc
return|;
block|}
comment|/**      * The {@link PrefixTokenFilter} wraps a {@link TokenStream} and adds a set      * prefixes ahead. The position attribute will not be incremented for the prefixes.      */
DECL|class|PrefixTokenFilter
specifier|public
specifier|static
specifier|final
class|class
name|PrefixTokenFilter
extends|extends
name|TokenFilter
block|{
DECL|field|separator
specifier|private
specifier|final
name|char
name|separator
decl_stmt|;
DECL|field|termAttr
specifier|private
specifier|final
name|CharTermAttribute
name|termAttr
init|=
name|addAttribute
argument_list|(
name|CharTermAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|posAttr
specifier|private
specifier|final
name|PositionIncrementAttribute
name|posAttr
init|=
name|addAttribute
argument_list|(
name|PositionIncrementAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|prefixes
specifier|private
specifier|final
name|Iterable
argument_list|<
name|?
extends|extends
name|CharSequence
argument_list|>
name|prefixes
decl_stmt|;
DECL|field|currentPrefix
specifier|private
name|Iterator
argument_list|<
name|?
extends|extends
name|CharSequence
argument_list|>
name|currentPrefix
decl_stmt|;
comment|/**          * Create a new {@link PrefixTokenFilter}. The separator will be set to the DEFAULT_SEPARATOR.          *           * @param input {@link TokenStream} to wrap          * @param separator Character used separate prefixes from other tokens          * @param prefixes {@link Iterable} of {@link CharSequence} which keeps all prefixes           */
DECL|method|PrefixTokenFilter
specifier|public
name|PrefixTokenFilter
parameter_list|(
name|TokenStream
name|input
parameter_list|,
name|char
name|separator
parameter_list|,
name|Iterable
argument_list|<
name|?
extends|extends
name|CharSequence
argument_list|>
name|prefixes
parameter_list|)
block|{
name|super
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|this
operator|.
name|prefixes
operator|=
name|prefixes
expr_stmt|;
name|this
operator|.
name|currentPrefix
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|separator
operator|=
name|separator
expr_stmt|;
if|if
condition|(
name|prefixes
operator|==
literal|null
operator|||
operator|!
name|prefixes
operator|.
name|iterator
argument_list|()
operator|.
name|hasNext
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ElasticsearchIllegalArgumentException
argument_list|(
literal|"one or more prefixes needed"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|incrementToken
specifier|public
name|boolean
name|incrementToken
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|currentPrefix
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|currentPrefix
operator|.
name|hasNext
argument_list|()
condition|)
block|{
return|return
name|input
operator|.
name|incrementToken
argument_list|()
return|;
block|}
else|else
block|{
name|posAttr
operator|.
name|setPositionIncrement
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|currentPrefix
operator|=
name|prefixes
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|termAttr
operator|.
name|setEmpty
argument_list|()
expr_stmt|;
name|posAttr
operator|.
name|setPositionIncrement
argument_list|(
literal|1
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|currentPrefix
operator|.
name|hasNext
argument_list|()
operator|)
operator|:
literal|"one or more prefixes needed"
assert|;
block|}
name|termAttr
operator|.
name|setEmpty
argument_list|()
expr_stmt|;
name|termAttr
operator|.
name|append
argument_list|(
name|currentPrefix
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|termAttr
operator|.
name|append
argument_list|(
name|separator
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|reset
specifier|public
name|void
name|reset
parameter_list|()
throws|throws
name|IOException
block|{
name|super
operator|.
name|reset
argument_list|()
expr_stmt|;
name|currentPrefix
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

