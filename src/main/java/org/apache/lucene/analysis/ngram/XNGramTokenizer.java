begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.apache.lucene.analysis.ngram
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|ngram
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Tokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|CharTermAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|OffsetAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|PositionIncrementAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|PositionLengthAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|Lucene
import|;
end_import

begin_comment
comment|/**  * Tokenizes the input into n-grams of the given size(s).  *<p>On the contrary to {@link NGramTokenFilter}, this class sets offsets so  * that characters between startOffset and endOffset in the original stream are  * the same as the term chars.  *<p>For example, "abcde" would be tokenized as (minGram=2, maxGram=3):  *<table>  *<tr><th>Term</th><td>ab</td><td>abc</td><td>bc</td><td>bcd</td><td>cd</td><td>cde</td><td>de</td></tr>  *<tr><th>Position increment</th><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td></tr>  *<tr><th>Position length</th><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td></tr>  *<tr><th>Offsets</th><td>[0,2[</td><td>[0,3[</td><td>[1,3[</td><td>[1,4[</td><td>[2,4[</td><td>[2,5[</td><td>[3,5[</td></tr>  *</table>  *<a name="version"/>  *<p>Before Lucene 4.4, this class had a different behavior:<ul>  *<li>It didn't support more than 1024 chars of input, the rest was trashed.</li>  *<li>The last whitespaces of the 1024 chars block were trimmed.</li>  *<li>Tokens were emitted in a different order (by increasing lengths).</li></ul>  *<p>Although highly discouraged, it is still possible to use the old behavior  * through {@link Lucene43NGramTokenizer}.  */
end_comment

begin_class
DECL|class|XNGramTokenizer
specifier|public
specifier|final
class|class
name|XNGramTokenizer
extends|extends
name|Tokenizer
block|{
DECL|field|DEFAULT_MIN_NGRAM_SIZE
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_MIN_NGRAM_SIZE
init|=
literal|1
decl_stmt|;
DECL|field|DEFAULT_MAX_NGRAM_SIZE
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_MAX_NGRAM_SIZE
init|=
literal|2
decl_stmt|;
static|static
block|{
comment|// LUCENE MONITOR: this should be in Lucene 4.4 copied from Revision: 1476563
assert|assert
name|Lucene
operator|.
name|VERSION
operator|.
name|ordinal
argument_list|()
operator|<
name|Version
operator|.
name|LUCENE_42
operator|.
name|ordinal
argument_list|()
operator|+
literal|2
operator|:
literal|"Elasticsearch has upgraded to Lucene Version: ["
operator|+
name|Lucene
operator|.
name|VERSION
operator|+
literal|"] this should can be removed"
assert|;
block|}
DECL|field|buffer
specifier|private
name|char
index|[]
name|buffer
decl_stmt|;
DECL|field|bufferStart
DECL|field|bufferEnd
specifier|private
name|int
name|bufferStart
decl_stmt|,
name|bufferEnd
decl_stmt|;
comment|// remaining slice of the buffer
DECL|field|offset
specifier|private
name|int
name|offset
decl_stmt|;
DECL|field|gramSize
specifier|private
name|int
name|gramSize
decl_stmt|;
DECL|field|minGram
DECL|field|maxGram
specifier|private
name|int
name|minGram
decl_stmt|,
name|maxGram
decl_stmt|;
DECL|field|exhausted
specifier|private
name|boolean
name|exhausted
decl_stmt|;
DECL|field|termAtt
specifier|private
specifier|final
name|CharTermAttribute
name|termAtt
init|=
name|addAttribute
argument_list|(
name|CharTermAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|posIncAtt
specifier|private
specifier|final
name|PositionIncrementAttribute
name|posIncAtt
init|=
name|addAttribute
argument_list|(
name|PositionIncrementAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|posLenAtt
specifier|private
specifier|final
name|PositionLengthAttribute
name|posLenAtt
init|=
name|addAttribute
argument_list|(
name|PositionLengthAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|offsetAtt
specifier|private
specifier|final
name|OffsetAttribute
name|offsetAtt
init|=
name|addAttribute
argument_list|(
name|OffsetAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Creates NGramTokenizer with given min and max n-grams.    * @param version the lucene compatibility<a href="#version">version</a>    * @param input {@link Reader} holding the input to be tokenized    * @param minGram the smallest n-gram to generate    * @param maxGram the largest n-gram to generate    */
DECL|method|XNGramTokenizer
specifier|public
name|XNGramTokenizer
parameter_list|(
name|Version
name|version
parameter_list|,
name|Reader
name|input
parameter_list|,
name|int
name|minGram
parameter_list|,
name|int
name|maxGram
parameter_list|)
block|{
name|super
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|init
argument_list|(
name|version
argument_list|,
name|minGram
argument_list|,
name|maxGram
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates NGramTokenizer with given min and max n-grams.    * @param version the lucene compatibility<a href="#version">version</a>    * @param factory {@link org.apache.lucene.util.AttributeSource.AttributeFactory} to use    * @param input {@link Reader} holding the input to be tokenized    * @param minGram the smallest n-gram to generate    * @param maxGram the largest n-gram to generate    */
DECL|method|XNGramTokenizer
specifier|public
name|XNGramTokenizer
parameter_list|(
name|Version
name|version
parameter_list|,
name|AttributeFactory
name|factory
parameter_list|,
name|Reader
name|input
parameter_list|,
name|int
name|minGram
parameter_list|,
name|int
name|maxGram
parameter_list|)
block|{
name|super
argument_list|(
name|factory
argument_list|,
name|input
argument_list|)
expr_stmt|;
name|init
argument_list|(
name|version
argument_list|,
name|minGram
argument_list|,
name|maxGram
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates NGramTokenizer with default min and max n-grams.    * @param version the lucene compatibility<a href="#version">version</a>    * @param input {@link Reader} holding the input to be tokenized    */
DECL|method|XNGramTokenizer
specifier|public
name|XNGramTokenizer
parameter_list|(
name|Version
name|version
parameter_list|,
name|Reader
name|input
parameter_list|)
block|{
name|this
argument_list|(
name|version
argument_list|,
name|input
argument_list|,
name|DEFAULT_MIN_NGRAM_SIZE
argument_list|,
name|DEFAULT_MAX_NGRAM_SIZE
argument_list|)
expr_stmt|;
block|}
DECL|method|init
specifier|private
name|void
name|init
parameter_list|(
name|Version
name|version
parameter_list|,
name|int
name|minGram
parameter_list|,
name|int
name|maxGram
parameter_list|)
block|{
if|if
condition|(
operator|!
name|version
operator|.
name|onOrAfter
argument_list|(
name|Version
operator|.
name|LUCENE_42
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"This class only works with Lucene 4.4+. To emulate the old (broken) behavior of NGramTokenizer, use Lucene43NGramTokenizer"
argument_list|)
throw|;
block|}
if|if
condition|(
name|minGram
operator|<
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"minGram must be greater than zero"
argument_list|)
throw|;
block|}
if|if
condition|(
name|minGram
operator|>
name|maxGram
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"minGram must not be greater than maxGram"
argument_list|)
throw|;
block|}
name|this
operator|.
name|minGram
operator|=
name|minGram
expr_stmt|;
name|this
operator|.
name|maxGram
operator|=
name|maxGram
expr_stmt|;
name|buffer
operator|=
operator|new
name|char
index|[
name|maxGram
operator|+
literal|1024
index|]
expr_stmt|;
block|}
comment|/** Returns the next token in the stream, or null at EOS. */
annotation|@
name|Override
DECL|method|incrementToken
specifier|public
name|boolean
name|incrementToken
parameter_list|()
throws|throws
name|IOException
block|{
name|clearAttributes
argument_list|()
expr_stmt|;
comment|// compact
if|if
condition|(
name|bufferStart
operator|>=
name|buffer
operator|.
name|length
operator|-
name|maxGram
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|buffer
argument_list|,
name|bufferStart
argument_list|,
name|buffer
argument_list|,
literal|0
argument_list|,
name|bufferEnd
operator|-
name|bufferStart
argument_list|)
expr_stmt|;
name|bufferEnd
operator|-=
name|bufferStart
expr_stmt|;
name|bufferStart
operator|=
literal|0
expr_stmt|;
comment|// fill in remaining space
if|if
condition|(
operator|!
name|exhausted
condition|)
block|{
comment|// TODO: refactor to a shared readFully
while|while
condition|(
name|bufferEnd
operator|<
name|buffer
operator|.
name|length
condition|)
block|{
specifier|final
name|int
name|read
init|=
name|input
operator|.
name|read
argument_list|(
name|buffer
argument_list|,
name|bufferEnd
argument_list|,
name|buffer
operator|.
name|length
operator|-
name|bufferEnd
argument_list|)
decl_stmt|;
if|if
condition|(
name|read
operator|==
operator|-
literal|1
condition|)
block|{
name|exhausted
operator|=
literal|true
expr_stmt|;
break|break;
block|}
name|bufferEnd
operator|+=
name|read
expr_stmt|;
block|}
block|}
block|}
comment|// should we go to the next offset?
if|if
condition|(
name|gramSize
operator|>
name|maxGram
operator|||
name|bufferStart
operator|+
name|gramSize
operator|>
name|bufferEnd
condition|)
block|{
name|bufferStart
operator|++
expr_stmt|;
name|offset
operator|++
expr_stmt|;
name|gramSize
operator|=
name|minGram
expr_stmt|;
block|}
comment|// are there enough chars remaining?
if|if
condition|(
name|bufferStart
operator|+
name|gramSize
operator|>
name|bufferEnd
condition|)
block|{
return|return
literal|false
return|;
block|}
name|termAtt
operator|.
name|copyBuffer
argument_list|(
name|buffer
argument_list|,
name|bufferStart
argument_list|,
name|gramSize
argument_list|)
expr_stmt|;
name|posIncAtt
operator|.
name|setPositionIncrement
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|posLenAtt
operator|.
name|setPositionLength
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|offsetAtt
operator|.
name|setOffset
argument_list|(
name|correctOffset
argument_list|(
name|offset
argument_list|)
argument_list|,
name|correctOffset
argument_list|(
name|offset
operator|+
name|gramSize
argument_list|)
argument_list|)
expr_stmt|;
operator|++
name|gramSize
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|end
specifier|public
name|void
name|end
parameter_list|()
block|{
specifier|final
name|int
name|endOffset
init|=
name|correctOffset
argument_list|(
name|offset
operator|+
name|bufferEnd
operator|-
name|bufferStart
argument_list|)
decl_stmt|;
name|offsetAtt
operator|.
name|setOffset
argument_list|(
name|endOffset
argument_list|,
name|endOffset
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|reset
specifier|public
name|void
name|reset
parameter_list|()
throws|throws
name|IOException
block|{
name|super
operator|.
name|reset
argument_list|()
expr_stmt|;
name|bufferStart
operator|=
name|bufferEnd
operator|=
name|buffer
operator|.
name|length
expr_stmt|;
name|offset
operator|=
literal|0
expr_stmt|;
name|gramSize
operator|=
name|minGram
expr_stmt|;
name|exhausted
operator|=
literal|false
expr_stmt|;
block|}
block|}
end_class

end_unit

