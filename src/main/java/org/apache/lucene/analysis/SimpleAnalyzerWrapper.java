begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.analysis
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_comment
comment|/**  * A simple analyzer wrapper, that doesn't allow to wrap components or reader. By disallowing  * it, it means that the thread local resources will be delegated to the wrapped analyzer, and not  * also be allocated on this analyzer.  *  * This solves the problem of per field analyzer wrapper, where it also maintains a thread local  * per field token stream components, while it can safely delegate those and not also hold these  * data structures, which can become expensive memory wise.  */
end_comment

begin_class
DECL|class|SimpleAnalyzerWrapper
specifier|public
specifier|abstract
class|class
name|SimpleAnalyzerWrapper
extends|extends
name|AnalyzerWrapper
block|{
DECL|method|SimpleAnalyzerWrapper
specifier|public
name|SimpleAnalyzerWrapper
parameter_list|()
block|{
name|super
argument_list|(
operator|new
name|DelegatingReuseStrategy
argument_list|()
argument_list|)
expr_stmt|;
operator|(
operator|(
name|DelegatingReuseStrategy
operator|)
name|getReuseStrategy
argument_list|()
operator|)
operator|.
name|wrapper
operator|=
name|this
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|wrapComponents
specifier|protected
specifier|final
name|TokenStreamComponents
name|wrapComponents
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|TokenStreamComponents
name|components
parameter_list|)
block|{
return|return
name|super
operator|.
name|wrapComponents
argument_list|(
name|fieldName
argument_list|,
name|components
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|wrapReader
specifier|protected
specifier|final
name|Reader
name|wrapReader
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|Reader
name|reader
parameter_list|)
block|{
return|return
name|super
operator|.
name|wrapReader
argument_list|(
name|fieldName
argument_list|,
name|reader
argument_list|)
return|;
block|}
DECL|class|DelegatingReuseStrategy
specifier|private
specifier|static
class|class
name|DelegatingReuseStrategy
extends|extends
name|ReuseStrategy
block|{
DECL|field|wrapper
name|AnalyzerWrapper
name|wrapper
decl_stmt|;
annotation|@
name|Override
DECL|method|getReusableComponents
specifier|public
name|TokenStreamComponents
name|getReusableComponents
parameter_list|(
name|Analyzer
name|analyzer
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|Analyzer
name|wrappedAnalyzer
init|=
name|wrapper
operator|.
name|getWrappedAnalyzer
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
return|return
name|wrappedAnalyzer
operator|.
name|getReuseStrategy
argument_list|()
operator|.
name|getReusableComponents
argument_list|(
name|wrappedAnalyzer
argument_list|,
name|fieldName
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|setReusableComponents
specifier|public
name|void
name|setReusableComponents
parameter_list|(
name|Analyzer
name|analyzer
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|TokenStreamComponents
name|components
parameter_list|)
block|{
name|Analyzer
name|wrappedAnalyzer
init|=
name|wrapper
operator|.
name|getWrappedAnalyzer
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
name|wrappedAnalyzer
operator|.
name|getReuseStrategy
argument_list|()
operator|.
name|setReusableComponents
argument_list|(
name|wrappedAnalyzer
argument_list|,
name|fieldName
argument_list|,
name|components
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

