begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.document
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|CloseableThreadLocal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * A string/text field that optimizes the case for non analyzed fields to reuse a thread local token  * stream (instead of creating it each time). This reduces analysis chain overhead and object creation  * (which is significant, yay Attributes).  *<p/>  * Not to be confused with Lucene StringField, this handles analyzed text as well, and relies on providing  * the FieldType. Couldn't come up with a good name for this that is different from Text/String...  */
end_comment

begin_class
DECL|class|XStringField
specifier|public
class|class
name|XStringField
extends|extends
name|Field
block|{
DECL|field|NOT_ANALYZED_TOKENSTREAM
specifier|private
specifier|static
specifier|final
name|CloseableThreadLocal
argument_list|<
name|StringTokenStream
argument_list|>
name|NOT_ANALYZED_TOKENSTREAM
init|=
operator|new
name|CloseableThreadLocal
argument_list|<
name|StringTokenStream
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|StringTokenStream
name|initialValue
parameter_list|()
block|{
return|return
operator|new
name|StringTokenStream
argument_list|()
return|;
block|}
block|}
decl_stmt|;
DECL|method|XStringField
specifier|public
name|XStringField
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|,
name|FieldType
name|fieldType
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|fieldType
argument_list|)
expr_stmt|;
name|fieldsData
operator|=
name|value
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|tokenStream
specifier|public
name|TokenStream
name|tokenStream
parameter_list|(
name|Analyzer
name|analyzer
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|fieldType
argument_list|()
operator|.
name|indexed
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// Only use the cached TokenStream if the value is indexed and not-tokenized
if|if
condition|(
name|fieldType
argument_list|()
operator|.
name|tokenized
argument_list|()
condition|)
block|{
return|return
name|super
operator|.
name|tokenStream
argument_list|(
name|analyzer
argument_list|)
return|;
block|}
name|StringTokenStream
name|nonAnalyzedTokenStream
init|=
name|NOT_ANALYZED_TOKENSTREAM
operator|.
name|get
argument_list|()
decl_stmt|;
name|nonAnalyzedTokenStream
operator|.
name|setValue
argument_list|(
operator|(
name|String
operator|)
name|fieldsData
argument_list|)
expr_stmt|;
return|return
name|nonAnalyzedTokenStream
return|;
block|}
block|}
end_class

end_unit

