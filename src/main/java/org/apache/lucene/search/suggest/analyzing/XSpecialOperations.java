begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.search.suggest.analyzing
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|suggest
operator|.
name|analyzing
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|IdentityHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|ArrayUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IntsRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|RamUsageEstimator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|Automaton
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|State
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|Transition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|fst
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_class
DECL|class|XSpecialOperations
class|class
name|XSpecialOperations
block|{
comment|// TODO Lucene 4.9: remove this once we upgrade; see
comment|// LUCENE-5628
static|static
block|{
assert|assert
name|Version
operator|.
name|CURRENT
operator|.
name|luceneVersion
operator|==
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Version
operator|.
name|LUCENE_48
operator|:
literal|"Remove this code once we upgrade to Lucene 4.9 where LUCENE-5628 is fixed"
assert|;
block|}
DECL|class|PathNode
specifier|private
specifier|static
class|class
name|PathNode
block|{
comment|/** Which state the path node ends on, whose      *  transitions we are enumerating. */
DECL|field|state
specifier|public
name|State
name|state
decl_stmt|;
comment|/** Which state the current transition leads to. */
DECL|field|to
specifier|public
name|State
name|to
decl_stmt|;
comment|/** Which transition we are on. */
DECL|field|transition
specifier|public
name|int
name|transition
decl_stmt|;
comment|/** Which label we are on, in the min-max range of the      *  current Transition */
DECL|field|label
specifier|public
name|int
name|label
decl_stmt|;
DECL|method|resetState
specifier|public
name|void
name|resetState
parameter_list|(
name|State
name|state
parameter_list|)
block|{
assert|assert
name|state
operator|.
name|numTransitions
argument_list|()
operator|!=
literal|0
assert|;
name|this
operator|.
name|state
operator|=
name|state
expr_stmt|;
name|transition
operator|=
literal|0
expr_stmt|;
name|Transition
name|t
init|=
name|state
operator|.
name|transitionsArray
index|[
name|transition
index|]
decl_stmt|;
name|label
operator|=
name|t
operator|.
name|getMin
argument_list|()
expr_stmt|;
name|to
operator|=
name|t
operator|.
name|getDest
argument_list|()
expr_stmt|;
block|}
comment|/** Returns next label of current transition, or      *  advances to next transition and returns its first      *  label, if current one is exhausted.  If there are      *  no more transitions, returns -1. */
DECL|method|nextLabel
specifier|public
name|int
name|nextLabel
parameter_list|()
block|{
if|if
condition|(
name|label
operator|>
name|state
operator|.
name|transitionsArray
index|[
name|transition
index|]
operator|.
name|getMax
argument_list|()
condition|)
block|{
comment|// We've exhaused the current transition's labels;
comment|// move to next transitions:
name|transition
operator|++
expr_stmt|;
if|if
condition|(
name|transition
operator|>=
name|state
operator|.
name|numTransitions
argument_list|()
condition|)
block|{
comment|// We're done iterating transitions leaving this state
return|return
operator|-
literal|1
return|;
block|}
name|Transition
name|t
init|=
name|state
operator|.
name|transitionsArray
index|[
name|transition
index|]
decl_stmt|;
name|label
operator|=
name|t
operator|.
name|getMin
argument_list|()
expr_stmt|;
name|to
operator|=
name|t
operator|.
name|getDest
argument_list|()
expr_stmt|;
block|}
return|return
name|label
operator|++
return|;
block|}
block|}
DECL|method|getNode
specifier|private
specifier|static
name|PathNode
name|getNode
parameter_list|(
name|PathNode
index|[]
name|nodes
parameter_list|,
name|int
name|index
parameter_list|)
block|{
assert|assert
name|index
operator|<
name|nodes
operator|.
name|length
assert|;
if|if
condition|(
name|nodes
index|[
name|index
index|]
operator|==
literal|null
condition|)
block|{
name|nodes
index|[
name|index
index|]
operator|=
operator|new
name|PathNode
argument_list|()
expr_stmt|;
block|}
return|return
name|nodes
index|[
name|index
index|]
return|;
block|}
comment|// TODO: this is a dangerous method ... Automaton could be
comment|// huge ... and it's better in general for caller to
comment|// enumerate& process in a single walk:
comment|/** Returns the set of accepted strings, up to at most    *<code>limit</code> strings. If more than<code>limit</code>     *  strings are accepted, the first limit strings found are returned. If<code>limit</code> == -1, then     *  the limit is infinite.  If the {@link Automaton} has    *  cycles then this method might throw {@code    *  IllegalArgumentException} but that is not guaranteed    *  when the limit is set. */
DECL|method|getFiniteStrings
specifier|public
specifier|static
name|Set
argument_list|<
name|IntsRef
argument_list|>
name|getFiniteStrings
parameter_list|(
name|Automaton
name|a
parameter_list|,
name|int
name|limit
parameter_list|)
block|{
name|Set
argument_list|<
name|IntsRef
argument_list|>
name|results
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|limit
operator|==
operator|-
literal|1
operator|||
name|limit
operator|>
literal|0
condition|)
block|{
comment|// OK
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"limit must be -1 (which means no limit), or> 0; got: "
operator|+
name|limit
argument_list|)
throw|;
block|}
if|if
condition|(
name|a
operator|.
name|getSingleton
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// Easy case: automaton accepts only 1 string
name|results
operator|.
name|add
argument_list|(
name|Util
operator|.
name|toUTF32
argument_list|(
name|a
operator|.
name|getSingleton
argument_list|()
argument_list|,
operator|new
name|IntsRef
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|a
operator|.
name|getInitialState
argument_list|()
operator|.
name|isAccept
argument_list|()
condition|)
block|{
comment|// Special case the empty string, as usual:
name|results
operator|.
name|add
argument_list|(
operator|new
name|IntsRef
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|a
operator|.
name|getInitialState
argument_list|()
operator|.
name|numTransitions
argument_list|()
operator|>
literal|0
operator|&&
operator|(
name|limit
operator|==
operator|-
literal|1
operator|||
name|results
operator|.
name|size
argument_list|()
operator|<
name|limit
operator|)
condition|)
block|{
comment|// TODO: we could use state numbers here and just
comment|// alloc array, but asking for states array can be
comment|// costly (it's lazily computed):
comment|// Tracks which states are in the current path, for
comment|// cycle detection:
name|Set
argument_list|<
name|State
argument_list|>
name|pathStates
init|=
name|Collections
operator|.
name|newSetFromMap
argument_list|(
operator|new
name|IdentityHashMap
argument_list|<
name|State
argument_list|,
name|Boolean
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
comment|// Stack to hold our current state in the
comment|// recursion/iteration:
name|PathNode
index|[]
name|nodes
init|=
operator|new
name|PathNode
index|[
literal|4
index|]
decl_stmt|;
name|pathStates
operator|.
name|add
argument_list|(
name|a
operator|.
name|getInitialState
argument_list|()
argument_list|)
expr_stmt|;
name|PathNode
name|root
init|=
name|getNode
argument_list|(
name|nodes
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|root
operator|.
name|resetState
argument_list|(
name|a
operator|.
name|getInitialState
argument_list|()
argument_list|)
expr_stmt|;
name|IntsRef
name|string
init|=
operator|new
name|IntsRef
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|string
operator|.
name|length
operator|=
literal|1
expr_stmt|;
while|while
condition|(
name|string
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|PathNode
name|node
init|=
name|nodes
index|[
name|string
operator|.
name|length
operator|-
literal|1
index|]
decl_stmt|;
comment|// Get next label leaving the current node:
name|int
name|label
init|=
name|node
operator|.
name|nextLabel
argument_list|()
decl_stmt|;
if|if
condition|(
name|label
operator|!=
operator|-
literal|1
condition|)
block|{
name|string
operator|.
name|ints
index|[
name|string
operator|.
name|length
operator|-
literal|1
index|]
operator|=
name|label
expr_stmt|;
if|if
condition|(
name|node
operator|.
name|to
operator|.
name|isAccept
argument_list|()
condition|)
block|{
comment|// This transition leads to an accept state,
comment|// so we save the current string:
name|results
operator|.
name|add
argument_list|(
name|IntsRef
operator|.
name|deepCopyOf
argument_list|(
name|string
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|results
operator|.
name|size
argument_list|()
operator|==
name|limit
condition|)
block|{
break|break;
block|}
block|}
if|if
condition|(
name|node
operator|.
name|to
operator|.
name|numTransitions
argument_list|()
operator|!=
literal|0
condition|)
block|{
comment|// Now recurse: the destination of this transition has
comment|// outgoing transitions:
if|if
condition|(
name|pathStates
operator|.
name|contains
argument_list|(
name|node
operator|.
name|to
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"automaton has cycles"
argument_list|)
throw|;
block|}
name|pathStates
operator|.
name|add
argument_list|(
name|node
operator|.
name|to
argument_list|)
expr_stmt|;
comment|// Push node onto stack:
if|if
condition|(
name|nodes
operator|.
name|length
operator|==
name|string
operator|.
name|length
condition|)
block|{
name|PathNode
index|[]
name|newNodes
init|=
operator|new
name|PathNode
index|[
name|ArrayUtil
operator|.
name|oversize
argument_list|(
name|nodes
operator|.
name|length
operator|+
literal|1
argument_list|,
name|RamUsageEstimator
operator|.
name|NUM_BYTES_OBJECT_REF
argument_list|)
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|nodes
argument_list|,
literal|0
argument_list|,
name|newNodes
argument_list|,
literal|0
argument_list|,
name|nodes
operator|.
name|length
argument_list|)
expr_stmt|;
name|nodes
operator|=
name|newNodes
expr_stmt|;
block|}
name|getNode
argument_list|(
name|nodes
argument_list|,
name|string
operator|.
name|length
argument_list|)
operator|.
name|resetState
argument_list|(
name|node
operator|.
name|to
argument_list|)
expr_stmt|;
name|string
operator|.
name|length
operator|++
expr_stmt|;
name|string
operator|.
name|grow
argument_list|(
name|string
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// No more transitions leaving this state,
comment|// pop/return back to previous state:
assert|assert
name|pathStates
operator|.
name|contains
argument_list|(
name|node
operator|.
name|state
argument_list|)
assert|;
name|pathStates
operator|.
name|remove
argument_list|(
name|node
operator|.
name|state
argument_list|)
expr_stmt|;
name|string
operator|.
name|length
operator|--
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|results
return|;
block|}
block|}
end_class

end_unit

