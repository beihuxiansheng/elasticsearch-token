begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|AtomicReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|AtomicReaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocsEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Fields
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Terms
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermsEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|TermsFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Bits
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|FixedBitSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_comment
comment|/**  * Similar to {@link TermsFilter} but stores the terms in an array for better memory usage  * when cached, and also uses bulk read  */
end_comment

begin_comment
comment|// LUCENE MONITOR: Against TermsFilter - this is now identical to TermsFilter once 4.1 is released
end_comment

begin_class
DECL|class|XTermsFilter
specifier|public
class|class
name|XTermsFilter
extends|extends
name|Filter
block|{
DECL|field|filterTerms
specifier|private
specifier|final
name|Term
index|[]
name|filterTerms
decl_stmt|;
DECL|field|resetTermsEnum
specifier|private
specifier|final
name|boolean
index|[]
name|resetTermsEnum
decl_stmt|;
comment|// true if the enum must be reset when building the bitset
DECL|field|length
specifier|private
specifier|final
name|int
name|length
decl_stmt|;
comment|/**      * Creates a new {@link XTermsFilter} from the given collection. The collection      * can contain duplicate terms and multiple fields.      */
DECL|method|XTermsFilter
specifier|public
name|XTermsFilter
parameter_list|(
name|Collection
argument_list|<
name|Term
argument_list|>
name|terms
parameter_list|)
block|{
name|this
argument_list|(
name|terms
operator|.
name|toArray
argument_list|(
operator|new
name|Term
index|[
name|terms
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a new {@link XTermsFilter} from the given array. The array can      * contain duplicate terms and multiple fields.      */
DECL|method|XTermsFilter
specifier|public
name|XTermsFilter
parameter_list|(
name|Term
modifier|...
name|terms
parameter_list|)
block|{
if|if
condition|(
name|terms
operator|==
literal|null
operator|||
name|terms
operator|.
name|length
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"TermsFilter requires at least one term"
argument_list|)
throw|;
block|}
name|Arrays
operator|.
name|sort
argument_list|(
name|terms
argument_list|)
expr_stmt|;
name|this
operator|.
name|filterTerms
operator|=
operator|new
name|Term
index|[
name|terms
operator|.
name|length
index|]
expr_stmt|;
name|this
operator|.
name|resetTermsEnum
operator|=
operator|new
name|boolean
index|[
name|terms
operator|.
name|length
index|]
expr_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|terms
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Term
name|currentTerm
init|=
name|terms
index|[
name|i
index|]
decl_stmt|;
name|boolean
name|fieldChanged
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|index
operator|>
literal|0
condition|)
block|{
comment|// deduplicate
if|if
condition|(
name|filterTerms
index|[
name|index
operator|-
literal|1
index|]
operator|.
name|field
argument_list|()
operator|.
name|equals
argument_list|(
name|currentTerm
operator|.
name|field
argument_list|()
argument_list|)
condition|)
block|{
name|fieldChanged
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|filterTerms
index|[
name|index
operator|-
literal|1
index|]
operator|.
name|bytes
argument_list|()
operator|.
name|bytesEquals
argument_list|(
name|currentTerm
operator|.
name|bytes
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
block|}
block|}
name|this
operator|.
name|filterTerms
index|[
name|index
index|]
operator|=
name|currentTerm
expr_stmt|;
name|this
operator|.
name|resetTermsEnum
index|[
name|index
index|]
operator|=
name|index
operator|==
literal|0
operator|||
name|fieldChanged
expr_stmt|;
comment|// mark index 0 so we have a clear path in the iteration
name|index
operator|++
expr_stmt|;
block|}
name|length
operator|=
name|index
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getDocIdSet
specifier|public
name|DocIdSet
name|getDocIdSet
parameter_list|(
name|AtomicReaderContext
name|context
parameter_list|,
name|Bits
name|acceptDocs
parameter_list|)
throws|throws
name|IOException
block|{
name|AtomicReader
name|reader
init|=
name|context
operator|.
name|reader
argument_list|()
decl_stmt|;
name|FixedBitSet
name|result
init|=
literal|null
decl_stmt|;
comment|// lazy init if needed - no need to create a big bitset ahead of time
name|Fields
name|fields
init|=
name|reader
operator|.
name|fields
argument_list|()
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
block|{
return|return
name|result
return|;
block|}
specifier|final
name|BytesRef
name|br
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
name|Terms
name|terms
init|=
literal|null
decl_stmt|;
name|TermsEnum
name|termsEnum
init|=
literal|null
decl_stmt|;
name|DocsEnum
name|docs
init|=
literal|null
decl_stmt|;
assert|assert
name|resetTermsEnum
index|[
literal|0
index|]
assert|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Term
name|term
init|=
name|this
operator|.
name|filterTerms
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|resetTermsEnum
index|[
name|i
index|]
condition|)
block|{
name|terms
operator|=
name|fields
operator|.
name|terms
argument_list|(
name|term
operator|.
name|field
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|terms
operator|==
literal|null
condition|)
block|{
name|i
operator|=
name|skipToNextField
argument_list|(
name|i
operator|+
literal|1
argument_list|,
name|length
argument_list|)
expr_stmt|;
comment|// skip to the next field since this field is not indexed
continue|continue;
block|}
block|}
if|if
condition|(
operator|(
name|termsEnum
operator|=
name|terms
operator|.
name|iterator
argument_list|(
name|termsEnum
argument_list|)
operator|)
operator|!=
literal|null
condition|)
block|{
name|br
operator|.
name|copyBytes
argument_list|(
name|term
operator|.
name|bytes
argument_list|()
argument_list|)
expr_stmt|;
assert|assert
name|termsEnum
operator|!=
literal|null
assert|;
if|if
condition|(
name|termsEnum
operator|.
name|seekExact
argument_list|(
name|br
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|docs
operator|=
name|termsEnum
operator|.
name|docs
argument_list|(
name|acceptDocs
argument_list|,
name|docs
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|docs
operator|.
name|nextDoc
argument_list|()
operator|!=
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|)
block|{
name|result
operator|=
operator|new
name|FixedBitSet
argument_list|(
name|reader
operator|.
name|maxDoc
argument_list|()
argument_list|)
expr_stmt|;
comment|// lazy init but don't do it in the hot loop since we could read many docs
name|result
operator|.
name|set
argument_list|(
name|docs
operator|.
name|docID
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
while|while
condition|(
name|docs
operator|.
name|nextDoc
argument_list|()
operator|!=
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|)
block|{
name|result
operator|.
name|set
argument_list|(
name|docs
operator|.
name|docID
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|result
return|;
block|}
DECL|method|skipToNextField
specifier|private
specifier|final
name|int
name|skipToNextField
parameter_list|(
name|int
name|index
parameter_list|,
name|int
name|length
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
name|index
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|resetTermsEnum
index|[
name|i
index|]
condition|)
block|{
return|return
name|i
operator|-
literal|1
return|;
block|}
block|}
return|return
name|length
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|(
name|obj
operator|==
literal|null
operator|)
operator|||
operator|(
name|obj
operator|.
name|getClass
argument_list|()
operator|!=
name|this
operator|.
name|getClass
argument_list|()
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|XTermsFilter
name|test
init|=
operator|(
name|XTermsFilter
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|filterTerms
operator|!=
name|test
operator|.
name|filterTerms
condition|)
block|{
if|if
condition|(
name|length
operator|==
name|test
operator|.
name|length
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
comment|// can not be null!
if|if
condition|(
operator|!
name|filterTerms
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
name|test
operator|.
name|filterTerms
index|[
name|i
index|]
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|hash
init|=
literal|9
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|hash
operator|=
literal|31
operator|*
name|hash
operator|+
name|filterTerms
index|[
name|i
index|]
operator|.
name|hashCode
argument_list|()
expr_stmt|;
block|}
return|return
name|hash
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|builder
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|append
argument_list|(
name|filterTerms
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

