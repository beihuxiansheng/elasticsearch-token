begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.queries
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanClause
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanClause
operator|.
name|Occur
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|Lucene
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|search
operator|.
name|Queries
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|FieldMapper
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * Extended version of {@link CommonTermsQuery} that allows to pass in a  *<tt>minimumNumberShouldMatch</tt> specification that uses the actual num of high frequent terms  * to calculate the minimum matching terms.  */
end_comment

begin_class
DECL|class|ExtendedCommonTermsQuery
specifier|public
class|class
name|ExtendedCommonTermsQuery
extends|extends
name|CommonTermsQuery
block|{
DECL|field|mapper
specifier|private
specifier|final
name|FieldMapper
argument_list|<
name|?
argument_list|>
name|mapper
decl_stmt|;
DECL|method|ExtendedCommonTermsQuery
specifier|public
name|ExtendedCommonTermsQuery
parameter_list|(
name|Occur
name|highFreqOccur
parameter_list|,
name|Occur
name|lowFreqOccur
parameter_list|,
name|float
name|maxTermFrequency
parameter_list|,
name|boolean
name|disableCoord
parameter_list|,
name|FieldMapper
argument_list|<
name|?
argument_list|>
name|mapper
parameter_list|)
block|{
name|super
argument_list|(
name|highFreqOccur
argument_list|,
name|lowFreqOccur
argument_list|,
name|maxTermFrequency
argument_list|,
name|disableCoord
argument_list|)
expr_stmt|;
name|this
operator|.
name|mapper
operator|=
name|mapper
expr_stmt|;
block|}
DECL|field|lowFreqMinNumShouldMatchSpec
specifier|private
name|String
name|lowFreqMinNumShouldMatchSpec
decl_stmt|;
DECL|field|highFreqMinNumShouldMatchSpec
specifier|private
name|String
name|highFreqMinNumShouldMatchSpec
decl_stmt|;
annotation|@
name|Override
DECL|method|calcLowFreqMinimumNumberShouldMatch
specifier|protected
name|int
name|calcLowFreqMinimumNumberShouldMatch
parameter_list|(
name|int
name|numOptional
parameter_list|)
block|{
return|return
name|calcMinimumNumberShouldMatch
argument_list|(
name|lowFreqMinNumShouldMatchSpec
argument_list|,
name|numOptional
argument_list|)
return|;
block|}
DECL|method|calcMinimumNumberShouldMatch
specifier|protected
name|int
name|calcMinimumNumberShouldMatch
parameter_list|(
name|String
name|spec
parameter_list|,
name|int
name|numOptional
parameter_list|)
block|{
if|if
condition|(
name|spec
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
return|return
name|Queries
operator|.
name|calculateMinShouldMatch
argument_list|(
name|numOptional
argument_list|,
name|spec
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|calcHighFreqMinimumNumberShouldMatch
specifier|protected
name|int
name|calcHighFreqMinimumNumberShouldMatch
parameter_list|(
name|int
name|numOptional
parameter_list|)
block|{
return|return
name|calcMinimumNumberShouldMatch
argument_list|(
name|highFreqMinNumShouldMatchSpec
argument_list|,
name|numOptional
argument_list|)
return|;
block|}
DECL|method|setHighFreqMinimumNumberShouldMatch
specifier|public
name|void
name|setHighFreqMinimumNumberShouldMatch
parameter_list|(
name|String
name|spec
parameter_list|)
block|{
name|this
operator|.
name|highFreqMinNumShouldMatchSpec
operator|=
name|spec
expr_stmt|;
block|}
DECL|method|getHighFreqMinimumNumberShouldMatchSpec
specifier|public
name|String
name|getHighFreqMinimumNumberShouldMatchSpec
parameter_list|()
block|{
return|return
name|highFreqMinNumShouldMatchSpec
return|;
block|}
DECL|method|setLowFreqMinimumNumberShouldMatch
specifier|public
name|void
name|setLowFreqMinimumNumberShouldMatch
parameter_list|(
name|String
name|spec
parameter_list|)
block|{
name|this
operator|.
name|lowFreqMinNumShouldMatchSpec
operator|=
name|spec
expr_stmt|;
block|}
DECL|method|getLowFreqMinimumNumberShouldMatchSpec
specifier|public
name|String
name|getLowFreqMinimumNumberShouldMatchSpec
parameter_list|()
block|{
return|return
name|lowFreqMinNumShouldMatchSpec
return|;
block|}
comment|// LUCENE-UPGRADE: remove this method if on 4.8
annotation|@
name|Override
DECL|method|rewrite
specifier|public
name|Query
name|rewrite
parameter_list|(
name|IndexReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|terms
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
operator|new
name|BooleanQuery
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|terms
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
specifier|final
name|Query
name|tq
init|=
name|newTermQuery
argument_list|(
name|this
operator|.
name|terms
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|tq
operator|.
name|setBoost
argument_list|(
name|getBoost
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|tq
return|;
block|}
return|return
name|super
operator|.
name|rewrite
argument_list|(
name|reader
argument_list|)
return|;
block|}
comment|// LUCENE-UPGRADE: remove this method if on 4.8
annotation|@
name|Override
DECL|method|buildQuery
specifier|protected
name|Query
name|buildQuery
parameter_list|(
specifier|final
name|int
name|maxDoc
parameter_list|,
specifier|final
name|TermContext
index|[]
name|contextArray
parameter_list|,
specifier|final
name|Term
index|[]
name|queryTerms
parameter_list|)
block|{
name|BooleanQuery
name|lowFreq
init|=
operator|new
name|BooleanQuery
argument_list|(
name|disableCoord
argument_list|)
decl_stmt|;
name|BooleanQuery
name|highFreq
init|=
operator|new
name|BooleanQuery
argument_list|(
name|disableCoord
argument_list|)
decl_stmt|;
name|highFreq
operator|.
name|setBoost
argument_list|(
name|highFreqBoost
argument_list|)
expr_stmt|;
name|lowFreq
operator|.
name|setBoost
argument_list|(
name|lowFreqBoost
argument_list|)
expr_stmt|;
name|BooleanQuery
name|query
init|=
operator|new
name|BooleanQuery
argument_list|(
literal|true
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|queryTerms
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|TermContext
name|termContext
init|=
name|contextArray
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|termContext
operator|==
literal|null
condition|)
block|{
name|lowFreq
operator|.
name|add
argument_list|(
name|newTermQuery
argument_list|(
name|queryTerms
index|[
name|i
index|]
argument_list|,
literal|null
argument_list|)
argument_list|,
name|lowFreqOccur
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|(
name|maxTermFrequency
operator|>=
literal|1f
operator|&&
name|termContext
operator|.
name|docFreq
argument_list|()
operator|>
name|maxTermFrequency
operator|)
operator|||
operator|(
name|termContext
operator|.
name|docFreq
argument_list|()
operator|>
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
name|maxTermFrequency
operator|*
operator|(
name|float
operator|)
name|maxDoc
argument_list|)
operator|)
condition|)
block|{
name|highFreq
operator|.
name|add
argument_list|(
name|newTermQuery
argument_list|(
name|queryTerms
index|[
name|i
index|]
argument_list|,
name|termContext
argument_list|)
argument_list|,
name|highFreqOccur
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|lowFreq
operator|.
name|add
argument_list|(
name|newTermQuery
argument_list|(
name|queryTerms
index|[
name|i
index|]
argument_list|,
name|termContext
argument_list|)
argument_list|,
name|lowFreqOccur
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|final
name|int
name|numLowFreqClauses
init|=
name|lowFreq
operator|.
name|clauses
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
specifier|final
name|int
name|numHighFreqClauses
init|=
name|highFreq
operator|.
name|clauses
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|lowFreqOccur
operator|==
name|Occur
operator|.
name|SHOULD
operator|&&
name|numLowFreqClauses
operator|>
literal|0
condition|)
block|{
name|int
name|minMustMatch
init|=
name|calcLowFreqMinimumNumberShouldMatch
argument_list|(
name|numLowFreqClauses
argument_list|)
decl_stmt|;
name|lowFreq
operator|.
name|setMinimumNumberShouldMatch
argument_list|(
name|minMustMatch
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|highFreqOccur
operator|==
name|Occur
operator|.
name|SHOULD
operator|&&
name|numHighFreqClauses
operator|>
literal|0
condition|)
block|{
name|int
name|minMustMatch
init|=
name|calcHighFreqMinimumNumberShouldMatch
argument_list|(
name|numHighFreqClauses
argument_list|)
decl_stmt|;
name|highFreq
operator|.
name|setMinimumNumberShouldMatch
argument_list|(
name|minMustMatch
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|lowFreq
operator|.
name|clauses
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|/*            * if lowFreq is empty we rewrite the high freq terms in a conjunction to            * prevent slow queries.            */
if|if
condition|(
name|highFreq
operator|.
name|getMinimumNumberShouldMatch
argument_list|()
operator|==
literal|0
operator|&&
name|highFreqOccur
operator|!=
name|Occur
operator|.
name|MUST
condition|)
block|{
for|for
control|(
name|BooleanClause
name|booleanClause
range|:
name|highFreq
control|)
block|{
name|booleanClause
operator|.
name|setOccur
argument_list|(
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
block|}
block|}
name|highFreq
operator|.
name|setBoost
argument_list|(
name|getBoost
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|highFreq
return|;
block|}
elseif|else
if|if
condition|(
name|highFreq
operator|.
name|clauses
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// only do low freq terms - we don't have high freq terms
name|lowFreq
operator|.
name|setBoost
argument_list|(
name|getBoost
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|lowFreq
return|;
block|}
else|else
block|{
name|query
operator|.
name|add
argument_list|(
name|highFreq
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
name|lowFreq
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|query
operator|.
name|setBoost
argument_list|(
name|getBoost
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|query
return|;
block|}
block|}
static|static
block|{
assert|assert
name|Version
operator|.
name|LUCENE_47
operator|.
name|onOrAfter
argument_list|(
name|Lucene
operator|.
name|VERSION
argument_list|)
operator|:
literal|"Remove obsolete code after upgrade to lucene 4.8"
assert|;
block|}
comment|//@Override
comment|// LUCENE-UPGRADE: remove this method if on 4.8
DECL|method|newTermQuery
specifier|protected
name|Query
name|newTermQuery
parameter_list|(
name|Term
name|term
parameter_list|,
name|TermContext
name|context
parameter_list|)
block|{
if|if
condition|(
name|mapper
operator|==
literal|null
condition|)
block|{
comment|// this should be super.newTermQuery(term, context) once it's available in the super class
return|return
name|context
operator|==
literal|null
condition|?
operator|new
name|TermQuery
argument_list|(
name|term
argument_list|)
else|:
operator|new
name|TermQuery
argument_list|(
name|term
argument_list|,
name|context
argument_list|)
return|;
block|}
specifier|final
name|Query
name|query
init|=
name|mapper
operator|.
name|queryStringTermQuery
argument_list|(
name|term
argument_list|)
decl_stmt|;
if|if
condition|(
name|query
operator|==
literal|null
condition|)
block|{
comment|// this should be super.newTermQuery(term, context) once it's available in the super class
return|return
name|context
operator|==
literal|null
condition|?
operator|new
name|TermQuery
argument_list|(
name|term
argument_list|)
else|:
operator|new
name|TermQuery
argument_list|(
name|term
argument_list|,
name|context
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|query
return|;
block|}
block|}
block|}
end_class

end_unit

