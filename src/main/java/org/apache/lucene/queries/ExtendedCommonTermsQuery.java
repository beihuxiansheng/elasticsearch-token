begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.apache.lucene.queries
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
package|;
end_package

begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanClause
operator|.
name|Occur
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|search
operator|.
name|Queries
import|;
end_import

begin_comment
comment|/**  * Extended version of {@link CommonTermsQuery} that allows to pass in a   *<tt>minimumNumberShouldMatch</tt> specification that uses the actual num of high frequent terms  * to calculate the minimum matching terms.  */
end_comment

begin_class
DECL|class|ExtendedCommonTermsQuery
specifier|public
class|class
name|ExtendedCommonTermsQuery
extends|extends
name|XCommonTermsQuery
block|{
DECL|method|ExtendedCommonTermsQuery
specifier|public
name|ExtendedCommonTermsQuery
parameter_list|(
name|Occur
name|highFreqOccur
parameter_list|,
name|Occur
name|lowFreqOccur
parameter_list|,
name|float
name|maxTermFrequency
parameter_list|,
name|boolean
name|disableCoord
parameter_list|)
block|{
name|super
argument_list|(
name|highFreqOccur
argument_list|,
name|lowFreqOccur
argument_list|,
name|maxTermFrequency
argument_list|,
name|disableCoord
argument_list|)
expr_stmt|;
block|}
DECL|method|ExtendedCommonTermsQuery
specifier|public
name|ExtendedCommonTermsQuery
parameter_list|(
name|Occur
name|highFreqOccur
parameter_list|,
name|Occur
name|lowFreqOccur
parameter_list|,
name|float
name|maxTermFrequency
parameter_list|)
block|{
name|super
argument_list|(
name|highFreqOccur
argument_list|,
name|lowFreqOccur
argument_list|,
name|maxTermFrequency
argument_list|)
expr_stmt|;
block|}
DECL|field|minNumShouldMatchSpec
specifier|private
name|String
name|minNumShouldMatchSpec
decl_stmt|;
annotation|@
name|Override
DECL|method|getMinimumNumberShouldMatch
specifier|protected
name|int
name|getMinimumNumberShouldMatch
parameter_list|(
name|int
name|numOptional
parameter_list|)
block|{
if|if
condition|(
name|minNumShouldMatchSpec
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
return|return
name|Queries
operator|.
name|calculateMinShouldMatch
argument_list|(
name|numOptional
argument_list|,
name|minNumShouldMatchSpec
argument_list|)
return|;
block|}
DECL|method|setMinimumNumberShouldMatch
specifier|public
name|void
name|setMinimumNumberShouldMatch
parameter_list|(
name|String
name|spec
parameter_list|)
block|{
name|this
operator|.
name|minNumShouldMatchSpec
operator|=
name|spec
expr_stmt|;
block|}
block|}
end_class

end_unit

