begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.apache.lucene.util.packed
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|packed
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|packed
operator|.
name|PackedInts
operator|.
name|Mutable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|packed
operator|.
name|PackedInts
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|Lucene
import|;
end_import

begin_comment
comment|/**  * Simplistic compression for array of unsigned long values.  * Each value is>= 0 and<= a specified maximum value.  The  * values are stored as packed ints, with each value  * consuming a fixed number of bits.  *  * @lucene.internal  */
end_comment

begin_class
DECL|class|XPackedInts
specifier|public
class|class
name|XPackedInts
block|{
static|static
block|{
comment|// LUCENE MONITOR: this should be in Lucene 4.4 copied from Revision: 1492640.
assert|assert
name|Lucene
operator|.
name|VERSION
operator|==
name|Version
operator|.
name|LUCENE_43
operator|:
literal|"Elasticsearch has upgraded to Lucene Version: ["
operator|+
name|Lucene
operator|.
name|VERSION
operator|+
literal|"] this class should be removed"
assert|;
block|}
comment|/** Same as {@link #copy(Reader, int, Mutable, int, int, int)} but using a pre-allocated buffer. */
DECL|method|copy
specifier|static
name|void
name|copy
parameter_list|(
name|Reader
name|src
parameter_list|,
name|int
name|srcPos
parameter_list|,
name|Mutable
name|dest
parameter_list|,
name|int
name|destPos
parameter_list|,
name|int
name|len
parameter_list|,
name|long
index|[]
name|buf
parameter_list|)
block|{
assert|assert
name|buf
operator|.
name|length
operator|>
literal|0
assert|;
name|int
name|remaining
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|len
operator|>
literal|0
condition|)
block|{
specifier|final
name|int
name|read
init|=
name|src
operator|.
name|get
argument_list|(
name|srcPos
argument_list|,
name|buf
argument_list|,
name|remaining
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|len
argument_list|,
name|buf
operator|.
name|length
operator|-
name|remaining
argument_list|)
argument_list|)
decl_stmt|;
assert|assert
name|read
operator|>
literal|0
assert|;
name|srcPos
operator|+=
name|read
expr_stmt|;
name|len
operator|-=
name|read
expr_stmt|;
name|remaining
operator|+=
name|read
expr_stmt|;
specifier|final
name|int
name|written
init|=
name|dest
operator|.
name|set
argument_list|(
name|destPos
argument_list|,
name|buf
argument_list|,
literal|0
argument_list|,
name|remaining
argument_list|)
decl_stmt|;
assert|assert
name|written
operator|>
literal|0
assert|;
name|destPos
operator|+=
name|written
expr_stmt|;
if|if
condition|(
name|written
operator|<
name|remaining
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|buf
argument_list|,
name|written
argument_list|,
name|buf
argument_list|,
literal|0
argument_list|,
name|remaining
operator|-
name|written
argument_list|)
expr_stmt|;
block|}
name|remaining
operator|-=
name|written
expr_stmt|;
block|}
while|while
condition|(
name|remaining
operator|>
literal|0
condition|)
block|{
specifier|final
name|int
name|written
init|=
name|dest
operator|.
name|set
argument_list|(
name|destPos
argument_list|,
name|buf
argument_list|,
literal|0
argument_list|,
name|remaining
argument_list|)
decl_stmt|;
name|destPos
operator|+=
name|written
expr_stmt|;
name|remaining
operator|-=
name|written
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|buf
argument_list|,
name|written
argument_list|,
name|buf
argument_list|,
literal|0
argument_list|,
name|remaining
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Check that the block size is a power of 2, in the right bounds, and return    *  its log in base 2. */
DECL|method|checkBlockSize
specifier|static
name|int
name|checkBlockSize
parameter_list|(
name|int
name|blockSize
parameter_list|,
name|int
name|minBlockSize
parameter_list|,
name|int
name|maxBlockSize
parameter_list|)
block|{
if|if
condition|(
name|blockSize
argument_list|<
name|minBlockSize
operator|||
name|blockSize
argument_list|>
name|maxBlockSize
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"blockSize must be>= "
operator|+
name|minBlockSize
operator|+
literal|" and<= "
operator|+
name|maxBlockSize
operator|+
literal|", got "
operator|+
name|blockSize
argument_list|)
throw|;
block|}
if|if
condition|(
operator|(
name|blockSize
operator|&
operator|(
name|blockSize
operator|-
literal|1
operator|)
operator|)
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"blockSize must be a power of two, got "
operator|+
name|blockSize
argument_list|)
throw|;
block|}
return|return
name|Integer
operator|.
name|numberOfTrailingZeros
argument_list|(
name|blockSize
argument_list|)
return|;
block|}
comment|/** Return the number of blocks required to store<code>size</code> values on    *<code>blockSize</code>. */
DECL|method|numBlocks
specifier|static
name|int
name|numBlocks
parameter_list|(
name|long
name|size
parameter_list|,
name|int
name|blockSize
parameter_list|)
block|{
specifier|final
name|int
name|numBlocks
init|=
call|(
name|int
call|)
argument_list|(
name|size
operator|/
name|blockSize
argument_list|)
operator|+
operator|(
name|size
operator|%
name|blockSize
operator|==
literal|0
condition|?
literal|0
else|:
literal|1
operator|)
decl_stmt|;
if|if
condition|(
operator|(
name|long
operator|)
name|numBlocks
operator|*
name|blockSize
operator|<
name|size
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"size is too large for this block size"
argument_list|)
throw|;
block|}
return|return
name|numBlocks
return|;
block|}
block|}
end_class

end_unit

