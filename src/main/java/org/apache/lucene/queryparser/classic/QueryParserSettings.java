begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.queryparser.classic
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|classic
package|;
end_package

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|ObjectFloatOpenHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|FuzzyQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|MultiTermQuery
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|QueryParserSettings
specifier|public
class|class
name|QueryParserSettings
block|{
DECL|field|DEFAULT_ALLOW_LEADING_WILDCARD
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_ALLOW_LEADING_WILDCARD
init|=
literal|true
decl_stmt|;
DECL|field|DEFAULT_ANALYZE_WILDCARD
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_ANALYZE_WILDCARD
init|=
literal|false
decl_stmt|;
DECL|field|DEFAULT_BOOST
specifier|public
specifier|static
specifier|final
name|float
name|DEFAULT_BOOST
init|=
literal|1.f
decl_stmt|;
DECL|field|queryString
specifier|private
name|String
name|queryString
decl_stmt|;
DECL|field|defaultField
specifier|private
name|String
name|defaultField
decl_stmt|;
DECL|field|boost
specifier|private
name|float
name|boost
init|=
name|DEFAULT_BOOST
decl_stmt|;
DECL|field|defaultOperator
specifier|private
name|MapperQueryParser
operator|.
name|Operator
name|defaultOperator
init|=
name|QueryParser
operator|.
name|Operator
operator|.
name|OR
decl_stmt|;
DECL|field|autoGeneratePhraseQueries
specifier|private
name|boolean
name|autoGeneratePhraseQueries
init|=
literal|false
decl_stmt|;
DECL|field|allowLeadingWildcard
specifier|private
name|boolean
name|allowLeadingWildcard
init|=
name|DEFAULT_ALLOW_LEADING_WILDCARD
decl_stmt|;
DECL|field|lowercaseExpandedTerms
specifier|private
name|boolean
name|lowercaseExpandedTerms
init|=
literal|true
decl_stmt|;
DECL|field|enablePositionIncrements
specifier|private
name|boolean
name|enablePositionIncrements
init|=
literal|true
decl_stmt|;
DECL|field|phraseSlop
specifier|private
name|int
name|phraseSlop
init|=
literal|0
decl_stmt|;
DECL|field|fuzzyMinSim
specifier|private
name|float
name|fuzzyMinSim
init|=
name|FuzzyQuery
operator|.
name|defaultMinSimilarity
decl_stmt|;
DECL|field|fuzzyPrefixLength
specifier|private
name|int
name|fuzzyPrefixLength
init|=
name|FuzzyQuery
operator|.
name|defaultPrefixLength
decl_stmt|;
DECL|field|fuzzyMaxExpansions
specifier|private
name|int
name|fuzzyMaxExpansions
init|=
name|FuzzyQuery
operator|.
name|defaultMaxExpansions
decl_stmt|;
DECL|field|fuzzyRewriteMethod
specifier|private
name|MultiTermQuery
operator|.
name|RewriteMethod
name|fuzzyRewriteMethod
init|=
literal|null
decl_stmt|;
DECL|field|analyzeWildcard
specifier|private
name|boolean
name|analyzeWildcard
init|=
name|DEFAULT_ANALYZE_WILDCARD
decl_stmt|;
DECL|field|escape
specifier|private
name|boolean
name|escape
init|=
literal|false
decl_stmt|;
DECL|field|defaultAnalyzer
specifier|private
name|Analyzer
name|defaultAnalyzer
init|=
literal|null
decl_stmt|;
DECL|field|defaultQuoteAnalyzer
specifier|private
name|Analyzer
name|defaultQuoteAnalyzer
init|=
literal|null
decl_stmt|;
DECL|field|forcedAnalyzer
specifier|private
name|Analyzer
name|forcedAnalyzer
init|=
literal|null
decl_stmt|;
DECL|field|forcedQuoteAnalyzer
specifier|private
name|Analyzer
name|forcedQuoteAnalyzer
init|=
literal|null
decl_stmt|;
DECL|field|quoteFieldSuffix
specifier|private
name|String
name|quoteFieldSuffix
init|=
literal|null
decl_stmt|;
DECL|field|rewriteMethod
specifier|private
name|MultiTermQuery
operator|.
name|RewriteMethod
name|rewriteMethod
init|=
name|MultiTermQuery
operator|.
name|CONSTANT_SCORE_AUTO_REWRITE_DEFAULT
decl_stmt|;
DECL|field|minimumShouldMatch
specifier|private
name|String
name|minimumShouldMatch
decl_stmt|;
DECL|field|lenient
specifier|private
name|boolean
name|lenient
decl_stmt|;
DECL|field|fields
name|List
argument_list|<
name|String
argument_list|>
name|fields
init|=
literal|null
decl_stmt|;
DECL|field|queryTypes
name|Collection
argument_list|<
name|String
argument_list|>
name|queryTypes
init|=
literal|null
decl_stmt|;
DECL|field|boosts
name|ObjectFloatOpenHashMap
argument_list|<
name|String
argument_list|>
name|boosts
init|=
literal|null
decl_stmt|;
DECL|field|tieBreaker
name|float
name|tieBreaker
init|=
literal|0.0f
decl_stmt|;
DECL|field|useDisMax
name|boolean
name|useDisMax
init|=
literal|true
decl_stmt|;
DECL|method|isCacheable
specifier|public
name|boolean
name|isCacheable
parameter_list|()
block|{
comment|// a hack for now :) to determine if a query string is cacheable
return|return
operator|!
name|queryString
operator|.
name|contains
argument_list|(
literal|"now"
argument_list|)
return|;
block|}
DECL|method|queryString
specifier|public
name|String
name|queryString
parameter_list|()
block|{
return|return
name|queryString
return|;
block|}
DECL|method|queryString
specifier|public
name|void
name|queryString
parameter_list|(
name|String
name|queryString
parameter_list|)
block|{
name|this
operator|.
name|queryString
operator|=
name|queryString
expr_stmt|;
block|}
DECL|method|defaultField
specifier|public
name|String
name|defaultField
parameter_list|()
block|{
return|return
name|defaultField
return|;
block|}
DECL|method|defaultField
specifier|public
name|void
name|defaultField
parameter_list|(
name|String
name|defaultField
parameter_list|)
block|{
name|this
operator|.
name|defaultField
operator|=
name|defaultField
expr_stmt|;
block|}
DECL|method|boost
specifier|public
name|float
name|boost
parameter_list|()
block|{
return|return
name|boost
return|;
block|}
DECL|method|boost
specifier|public
name|void
name|boost
parameter_list|(
name|float
name|boost
parameter_list|)
block|{
name|this
operator|.
name|boost
operator|=
name|boost
expr_stmt|;
block|}
DECL|method|defaultOperator
specifier|public
name|QueryParser
operator|.
name|Operator
name|defaultOperator
parameter_list|()
block|{
return|return
name|defaultOperator
return|;
block|}
DECL|method|defaultOperator
specifier|public
name|void
name|defaultOperator
parameter_list|(
name|QueryParser
operator|.
name|Operator
name|defaultOperator
parameter_list|)
block|{
name|this
operator|.
name|defaultOperator
operator|=
name|defaultOperator
expr_stmt|;
block|}
DECL|method|autoGeneratePhraseQueries
specifier|public
name|boolean
name|autoGeneratePhraseQueries
parameter_list|()
block|{
return|return
name|autoGeneratePhraseQueries
return|;
block|}
DECL|method|autoGeneratePhraseQueries
specifier|public
name|void
name|autoGeneratePhraseQueries
parameter_list|(
name|boolean
name|autoGeneratePhraseQueries
parameter_list|)
block|{
name|this
operator|.
name|autoGeneratePhraseQueries
operator|=
name|autoGeneratePhraseQueries
expr_stmt|;
block|}
DECL|method|allowLeadingWildcard
specifier|public
name|boolean
name|allowLeadingWildcard
parameter_list|()
block|{
return|return
name|allowLeadingWildcard
return|;
block|}
DECL|method|allowLeadingWildcard
specifier|public
name|void
name|allowLeadingWildcard
parameter_list|(
name|boolean
name|allowLeadingWildcard
parameter_list|)
block|{
name|this
operator|.
name|allowLeadingWildcard
operator|=
name|allowLeadingWildcard
expr_stmt|;
block|}
DECL|method|lowercaseExpandedTerms
specifier|public
name|boolean
name|lowercaseExpandedTerms
parameter_list|()
block|{
return|return
name|lowercaseExpandedTerms
return|;
block|}
DECL|method|lowercaseExpandedTerms
specifier|public
name|void
name|lowercaseExpandedTerms
parameter_list|(
name|boolean
name|lowercaseExpandedTerms
parameter_list|)
block|{
name|this
operator|.
name|lowercaseExpandedTerms
operator|=
name|lowercaseExpandedTerms
expr_stmt|;
block|}
DECL|method|enablePositionIncrements
specifier|public
name|boolean
name|enablePositionIncrements
parameter_list|()
block|{
return|return
name|enablePositionIncrements
return|;
block|}
DECL|method|enablePositionIncrements
specifier|public
name|void
name|enablePositionIncrements
parameter_list|(
name|boolean
name|enablePositionIncrements
parameter_list|)
block|{
name|this
operator|.
name|enablePositionIncrements
operator|=
name|enablePositionIncrements
expr_stmt|;
block|}
DECL|method|phraseSlop
specifier|public
name|int
name|phraseSlop
parameter_list|()
block|{
return|return
name|phraseSlop
return|;
block|}
DECL|method|phraseSlop
specifier|public
name|void
name|phraseSlop
parameter_list|(
name|int
name|phraseSlop
parameter_list|)
block|{
name|this
operator|.
name|phraseSlop
operator|=
name|phraseSlop
expr_stmt|;
block|}
DECL|method|fuzzyMinSim
specifier|public
name|float
name|fuzzyMinSim
parameter_list|()
block|{
return|return
name|fuzzyMinSim
return|;
block|}
DECL|method|fuzzyMinSim
specifier|public
name|void
name|fuzzyMinSim
parameter_list|(
name|float
name|fuzzyMinSim
parameter_list|)
block|{
name|this
operator|.
name|fuzzyMinSim
operator|=
name|fuzzyMinSim
expr_stmt|;
block|}
DECL|method|fuzzyPrefixLength
specifier|public
name|int
name|fuzzyPrefixLength
parameter_list|()
block|{
return|return
name|fuzzyPrefixLength
return|;
block|}
DECL|method|fuzzyPrefixLength
specifier|public
name|void
name|fuzzyPrefixLength
parameter_list|(
name|int
name|fuzzyPrefixLength
parameter_list|)
block|{
name|this
operator|.
name|fuzzyPrefixLength
operator|=
name|fuzzyPrefixLength
expr_stmt|;
block|}
DECL|method|fuzzyMaxExpansions
specifier|public
name|int
name|fuzzyMaxExpansions
parameter_list|()
block|{
return|return
name|fuzzyMaxExpansions
return|;
block|}
DECL|method|fuzzyMaxExpansions
specifier|public
name|void
name|fuzzyMaxExpansions
parameter_list|(
name|int
name|fuzzyMaxExpansions
parameter_list|)
block|{
name|this
operator|.
name|fuzzyMaxExpansions
operator|=
name|fuzzyMaxExpansions
expr_stmt|;
block|}
DECL|method|fuzzyRewriteMethod
specifier|public
name|MultiTermQuery
operator|.
name|RewriteMethod
name|fuzzyRewriteMethod
parameter_list|()
block|{
return|return
name|fuzzyRewriteMethod
return|;
block|}
DECL|method|fuzzyRewriteMethod
specifier|public
name|void
name|fuzzyRewriteMethod
parameter_list|(
name|MultiTermQuery
operator|.
name|RewriteMethod
name|fuzzyRewriteMethod
parameter_list|)
block|{
name|this
operator|.
name|fuzzyRewriteMethod
operator|=
name|fuzzyRewriteMethod
expr_stmt|;
block|}
DECL|method|escape
specifier|public
name|boolean
name|escape
parameter_list|()
block|{
return|return
name|escape
return|;
block|}
DECL|method|escape
specifier|public
name|void
name|escape
parameter_list|(
name|boolean
name|escape
parameter_list|)
block|{
name|this
operator|.
name|escape
operator|=
name|escape
expr_stmt|;
block|}
DECL|method|defaultAnalyzer
specifier|public
name|Analyzer
name|defaultAnalyzer
parameter_list|()
block|{
return|return
name|defaultAnalyzer
return|;
block|}
DECL|method|defaultAnalyzer
specifier|public
name|void
name|defaultAnalyzer
parameter_list|(
name|Analyzer
name|defaultAnalyzer
parameter_list|)
block|{
name|this
operator|.
name|defaultAnalyzer
operator|=
name|defaultAnalyzer
expr_stmt|;
block|}
DECL|method|defaultQuoteAnalyzer
specifier|public
name|Analyzer
name|defaultQuoteAnalyzer
parameter_list|()
block|{
return|return
name|defaultQuoteAnalyzer
return|;
block|}
DECL|method|defaultQuoteAnalyzer
specifier|public
name|void
name|defaultQuoteAnalyzer
parameter_list|(
name|Analyzer
name|defaultAnalyzer
parameter_list|)
block|{
name|this
operator|.
name|defaultQuoteAnalyzer
operator|=
name|defaultAnalyzer
expr_stmt|;
block|}
DECL|method|forcedAnalyzer
specifier|public
name|Analyzer
name|forcedAnalyzer
parameter_list|()
block|{
return|return
name|forcedAnalyzer
return|;
block|}
DECL|method|forcedAnalyzer
specifier|public
name|void
name|forcedAnalyzer
parameter_list|(
name|Analyzer
name|forcedAnalyzer
parameter_list|)
block|{
name|this
operator|.
name|forcedAnalyzer
operator|=
name|forcedAnalyzer
expr_stmt|;
block|}
DECL|method|forcedQuoteAnalyzer
specifier|public
name|Analyzer
name|forcedQuoteAnalyzer
parameter_list|()
block|{
return|return
name|forcedQuoteAnalyzer
return|;
block|}
DECL|method|forcedQuoteAnalyzer
specifier|public
name|void
name|forcedQuoteAnalyzer
parameter_list|(
name|Analyzer
name|forcedAnalyzer
parameter_list|)
block|{
name|this
operator|.
name|forcedQuoteAnalyzer
operator|=
name|forcedAnalyzer
expr_stmt|;
block|}
DECL|method|analyzeWildcard
specifier|public
name|boolean
name|analyzeWildcard
parameter_list|()
block|{
return|return
name|this
operator|.
name|analyzeWildcard
return|;
block|}
DECL|method|analyzeWildcard
specifier|public
name|void
name|analyzeWildcard
parameter_list|(
name|boolean
name|analyzeWildcard
parameter_list|)
block|{
name|this
operator|.
name|analyzeWildcard
operator|=
name|analyzeWildcard
expr_stmt|;
block|}
DECL|method|rewriteMethod
specifier|public
name|MultiTermQuery
operator|.
name|RewriteMethod
name|rewriteMethod
parameter_list|()
block|{
return|return
name|this
operator|.
name|rewriteMethod
return|;
block|}
DECL|method|rewriteMethod
specifier|public
name|void
name|rewriteMethod
parameter_list|(
name|MultiTermQuery
operator|.
name|RewriteMethod
name|rewriteMethod
parameter_list|)
block|{
name|this
operator|.
name|rewriteMethod
operator|=
name|rewriteMethod
expr_stmt|;
block|}
DECL|method|minimumShouldMatch
specifier|public
name|String
name|minimumShouldMatch
parameter_list|()
block|{
return|return
name|this
operator|.
name|minimumShouldMatch
return|;
block|}
DECL|method|minimumShouldMatch
specifier|public
name|void
name|minimumShouldMatch
parameter_list|(
name|String
name|minimumShouldMatch
parameter_list|)
block|{
name|this
operator|.
name|minimumShouldMatch
operator|=
name|minimumShouldMatch
expr_stmt|;
block|}
DECL|method|quoteFieldSuffix
specifier|public
name|void
name|quoteFieldSuffix
parameter_list|(
name|String
name|quoteFieldSuffix
parameter_list|)
block|{
name|this
operator|.
name|quoteFieldSuffix
operator|=
name|quoteFieldSuffix
expr_stmt|;
block|}
DECL|method|quoteFieldSuffix
specifier|public
name|String
name|quoteFieldSuffix
parameter_list|()
block|{
return|return
name|this
operator|.
name|quoteFieldSuffix
return|;
block|}
DECL|method|lenient
specifier|public
name|void
name|lenient
parameter_list|(
name|boolean
name|lenient
parameter_list|)
block|{
name|this
operator|.
name|lenient
operator|=
name|lenient
expr_stmt|;
block|}
DECL|method|lenient
specifier|public
name|boolean
name|lenient
parameter_list|()
block|{
return|return
name|this
operator|.
name|lenient
return|;
block|}
DECL|method|fields
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|fields
parameter_list|()
block|{
return|return
name|fields
return|;
block|}
DECL|method|fields
specifier|public
name|void
name|fields
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|fields
parameter_list|)
block|{
name|this
operator|.
name|fields
operator|=
name|fields
expr_stmt|;
block|}
DECL|method|queryTypes
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|queryTypes
parameter_list|()
block|{
return|return
name|queryTypes
return|;
block|}
DECL|method|queryTypes
specifier|public
name|void
name|queryTypes
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|queryTypes
parameter_list|)
block|{
name|this
operator|.
name|queryTypes
operator|=
name|queryTypes
expr_stmt|;
block|}
DECL|method|boosts
specifier|public
name|ObjectFloatOpenHashMap
argument_list|<
name|String
argument_list|>
name|boosts
parameter_list|()
block|{
return|return
name|boosts
return|;
block|}
DECL|method|boosts
specifier|public
name|void
name|boosts
parameter_list|(
name|ObjectFloatOpenHashMap
argument_list|<
name|String
argument_list|>
name|boosts
parameter_list|)
block|{
name|this
operator|.
name|boosts
operator|=
name|boosts
expr_stmt|;
block|}
DECL|method|tieBreaker
specifier|public
name|float
name|tieBreaker
parameter_list|()
block|{
return|return
name|tieBreaker
return|;
block|}
DECL|method|tieBreaker
specifier|public
name|void
name|tieBreaker
parameter_list|(
name|float
name|tieBreaker
parameter_list|)
block|{
name|this
operator|.
name|tieBreaker
operator|=
name|tieBreaker
expr_stmt|;
block|}
DECL|method|useDisMax
specifier|public
name|boolean
name|useDisMax
parameter_list|()
block|{
return|return
name|useDisMax
return|;
block|}
DECL|method|useDisMax
specifier|public
name|void
name|useDisMax
parameter_list|(
name|boolean
name|useDisMax
parameter_list|)
block|{
name|this
operator|.
name|useDisMax
operator|=
name|useDisMax
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|QueryParserSettings
name|that
init|=
operator|(
name|QueryParserSettings
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|autoGeneratePhraseQueries
operator|!=
name|that
operator|.
name|autoGeneratePhraseQueries
argument_list|()
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|allowLeadingWildcard
operator|!=
name|that
operator|.
name|allowLeadingWildcard
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|Float
operator|.
name|compare
argument_list|(
name|that
operator|.
name|boost
argument_list|,
name|boost
argument_list|)
operator|!=
literal|0
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|enablePositionIncrements
operator|!=
name|that
operator|.
name|enablePositionIncrements
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|escape
operator|!=
name|that
operator|.
name|escape
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|analyzeWildcard
operator|!=
name|that
operator|.
name|analyzeWildcard
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|Float
operator|.
name|compare
argument_list|(
name|that
operator|.
name|fuzzyMinSim
argument_list|,
name|fuzzyMinSim
argument_list|)
operator|!=
literal|0
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|fuzzyPrefixLength
operator|!=
name|that
operator|.
name|fuzzyPrefixLength
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|fuzzyMaxExpansions
operator|!=
name|that
operator|.
name|fuzzyMaxExpansions
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|fuzzyRewriteMethod
operator|!=
literal|null
condition|?
operator|!
name|fuzzyRewriteMethod
operator|.
name|equals
argument_list|(
name|that
operator|.
name|fuzzyRewriteMethod
argument_list|)
else|:
name|that
operator|.
name|fuzzyRewriteMethod
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|lowercaseExpandedTerms
operator|!=
name|that
operator|.
name|lowercaseExpandedTerms
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|phraseSlop
operator|!=
name|that
operator|.
name|phraseSlop
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|defaultAnalyzer
operator|!=
literal|null
condition|?
operator|!
name|defaultAnalyzer
operator|.
name|equals
argument_list|(
name|that
operator|.
name|defaultAnalyzer
argument_list|)
else|:
name|that
operator|.
name|defaultAnalyzer
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|defaultQuoteAnalyzer
operator|!=
literal|null
condition|?
operator|!
name|defaultQuoteAnalyzer
operator|.
name|equals
argument_list|(
name|that
operator|.
name|defaultQuoteAnalyzer
argument_list|)
else|:
name|that
operator|.
name|defaultQuoteAnalyzer
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|forcedAnalyzer
operator|!=
literal|null
condition|?
operator|!
name|forcedAnalyzer
operator|.
name|equals
argument_list|(
name|that
operator|.
name|forcedAnalyzer
argument_list|)
else|:
name|that
operator|.
name|forcedAnalyzer
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|forcedQuoteAnalyzer
operator|!=
literal|null
condition|?
operator|!
name|forcedQuoteAnalyzer
operator|.
name|equals
argument_list|(
name|that
operator|.
name|forcedQuoteAnalyzer
argument_list|)
else|:
name|that
operator|.
name|forcedQuoteAnalyzer
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|defaultField
operator|!=
literal|null
condition|?
operator|!
name|defaultField
operator|.
name|equals
argument_list|(
name|that
operator|.
name|defaultField
argument_list|)
else|:
name|that
operator|.
name|defaultField
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|defaultOperator
operator|!=
name|that
operator|.
name|defaultOperator
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|queryString
operator|!=
literal|null
condition|?
operator|!
name|queryString
operator|.
name|equals
argument_list|(
name|that
operator|.
name|queryString
argument_list|)
else|:
name|that
operator|.
name|queryString
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|rewriteMethod
operator|!=
literal|null
condition|?
operator|!
name|rewriteMethod
operator|.
name|equals
argument_list|(
name|that
operator|.
name|rewriteMethod
argument_list|)
else|:
name|that
operator|.
name|rewriteMethod
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|minimumShouldMatch
operator|!=
literal|null
condition|?
operator|!
name|minimumShouldMatch
operator|.
name|equals
argument_list|(
name|that
operator|.
name|minimumShouldMatch
argument_list|)
else|:
name|that
operator|.
name|minimumShouldMatch
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|quoteFieldSuffix
operator|!=
literal|null
condition|?
operator|!
name|quoteFieldSuffix
operator|.
name|equals
argument_list|(
name|that
operator|.
name|quoteFieldSuffix
argument_list|)
else|:
name|that
operator|.
name|quoteFieldSuffix
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|lenient
operator|!=
name|that
operator|.
name|lenient
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|Float
operator|.
name|compare
argument_list|(
name|that
operator|.
name|tieBreaker
argument_list|,
name|tieBreaker
argument_list|)
operator|!=
literal|0
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|useDisMax
operator|!=
name|that
operator|.
name|useDisMax
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|boosts
operator|!=
literal|null
condition|?
operator|!
name|boosts
operator|.
name|equals
argument_list|(
name|that
operator|.
name|boosts
argument_list|)
else|:
name|that
operator|.
name|boosts
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|fields
operator|!=
literal|null
condition|?
operator|!
name|fields
operator|.
name|equals
argument_list|(
name|that
operator|.
name|fields
argument_list|)
else|:
name|that
operator|.
name|fields
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|queryTypes
operator|!=
literal|null
condition|?
operator|!
name|queryTypes
operator|.
name|equals
argument_list|(
name|that
operator|.
name|queryTypes
argument_list|)
else|:
name|that
operator|.
name|queryTypes
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
name|queryString
operator|!=
literal|null
condition|?
name|queryString
operator|.
name|hashCode
argument_list|()
else|:
literal|0
decl_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|defaultField
operator|!=
literal|null
condition|?
name|defaultField
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|boost
operator|!=
operator|+
literal|0.0f
condition|?
name|Float
operator|.
name|floatToIntBits
argument_list|(
name|boost
argument_list|)
else|:
literal|0
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|defaultOperator
operator|!=
literal|null
condition|?
name|defaultOperator
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|autoGeneratePhraseQueries
condition|?
literal|1
else|:
literal|0
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|allowLeadingWildcard
condition|?
literal|1
else|:
literal|0
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|lowercaseExpandedTerms
condition|?
literal|1
else|:
literal|0
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|enablePositionIncrements
condition|?
literal|1
else|:
literal|0
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|phraseSlop
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|fuzzyMinSim
operator|!=
operator|+
literal|0.0f
condition|?
name|Float
operator|.
name|floatToIntBits
argument_list|(
name|fuzzyMinSim
argument_list|)
else|:
literal|0
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|fuzzyPrefixLength
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|escape
condition|?
literal|1
else|:
literal|0
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|defaultAnalyzer
operator|!=
literal|null
condition|?
name|defaultAnalyzer
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|defaultQuoteAnalyzer
operator|!=
literal|null
condition|?
name|defaultQuoteAnalyzer
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|forcedAnalyzer
operator|!=
literal|null
condition|?
name|forcedAnalyzer
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|forcedQuoteAnalyzer
operator|!=
literal|null
condition|?
name|forcedQuoteAnalyzer
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|analyzeWildcard
condition|?
literal|1
else|:
literal|0
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|fields
operator|!=
literal|null
condition|?
name|fields
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|queryTypes
operator|!=
literal|null
condition|?
name|queryTypes
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|boosts
operator|!=
literal|null
condition|?
name|boosts
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|tieBreaker
operator|!=
operator|+
literal|0.0f
condition|?
name|Float
operator|.
name|floatToIntBits
argument_list|(
name|tieBreaker
argument_list|)
else|:
literal|0
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|useDisMax
condition|?
literal|1
else|:
literal|0
operator|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

