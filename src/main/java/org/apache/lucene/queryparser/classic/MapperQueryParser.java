begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.queryparser.classic
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|classic
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|CharTermAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|RegExp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|Lucene
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|search
operator|.
name|Queries
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|search
operator|.
name|XFilteredQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|Fuzziness
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|FieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MapperService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|support
operator|.
name|QueryParsers
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|search
operator|.
name|Queries
operator|.
name|fixNegativeQueryIfNeeded
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|search
operator|.
name|Queries
operator|.
name|optimizeQuery
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|support
operator|.
name|QueryParsers
operator|.
name|wrapSmartNameQuery
import|;
end_import

begin_comment
comment|/**  * A query parser that uses the {@link MapperService} in order to build smarter  * queries based on the mapping information.  *<p/>  *<p>Also breaks fields with [type].[name] into a boolean query that must include the type  * as well as the query on the name.  */
end_comment

begin_class
DECL|class|MapperQueryParser
specifier|public
class|class
name|MapperQueryParser
extends|extends
name|QueryParser
block|{
DECL|field|fieldQueryExtensions
specifier|public
specifier|static
specifier|final
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|FieldQueryExtension
argument_list|>
name|fieldQueryExtensions
decl_stmt|;
static|static
block|{
name|fieldQueryExtensions
operator|=
name|ImmutableMap
operator|.
expr|<
name|String
operator|,
name|FieldQueryExtension
operator|>
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|ExistsFieldQueryExtension
operator|.
name|NAME
argument_list|,
operator|new
name|ExistsFieldQueryExtension
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|MissingFieldQueryExtension
operator|.
name|NAME
argument_list|,
operator|new
name|MissingFieldQueryExtension
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
DECL|field|parseContext
specifier|private
specifier|final
name|QueryParseContext
name|parseContext
decl_stmt|;
DECL|field|settings
specifier|private
name|QueryParserSettings
name|settings
decl_stmt|;
DECL|field|quoteAnalyzer
specifier|private
name|Analyzer
name|quoteAnalyzer
decl_stmt|;
DECL|field|forcedAnalyzer
specifier|private
name|boolean
name|forcedAnalyzer
decl_stmt|;
DECL|field|forcedQuoteAnalyzer
specifier|private
name|boolean
name|forcedQuoteAnalyzer
decl_stmt|;
DECL|field|currentMapper
specifier|private
name|FieldMapper
name|currentMapper
decl_stmt|;
DECL|field|analyzeWildcard
specifier|private
name|boolean
name|analyzeWildcard
decl_stmt|;
DECL|field|quoteFieldSuffix
specifier|private
name|String
name|quoteFieldSuffix
decl_stmt|;
DECL|method|MapperQueryParser
specifier|public
name|MapperQueryParser
parameter_list|(
name|QueryParseContext
name|parseContext
parameter_list|)
block|{
name|super
argument_list|(
name|Lucene
operator|.
name|QUERYPARSER_VERSION
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|parseContext
operator|=
name|parseContext
expr_stmt|;
block|}
DECL|method|MapperQueryParser
specifier|public
name|MapperQueryParser
parameter_list|(
name|QueryParserSettings
name|settings
parameter_list|,
name|QueryParseContext
name|parseContext
parameter_list|)
block|{
name|super
argument_list|(
name|Lucene
operator|.
name|QUERYPARSER_VERSION
argument_list|,
name|settings
operator|.
name|defaultField
argument_list|()
argument_list|,
name|settings
operator|.
name|defaultAnalyzer
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|parseContext
operator|=
name|parseContext
expr_stmt|;
name|reset
argument_list|(
name|settings
argument_list|)
expr_stmt|;
block|}
DECL|method|reset
specifier|public
name|void
name|reset
parameter_list|(
name|QueryParserSettings
name|settings
parameter_list|)
block|{
name|this
operator|.
name|settings
operator|=
name|settings
expr_stmt|;
name|this
operator|.
name|field
operator|=
name|settings
operator|.
name|defaultField
argument_list|()
expr_stmt|;
if|if
condition|(
name|settings
operator|.
name|fields
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|settings
operator|.
name|fields
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
comment|// just mark it as the default field
name|this
operator|.
name|field
operator|=
name|settings
operator|.
name|fields
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// otherwise, we need to have the default field being null...
name|this
operator|.
name|field
operator|=
literal|null
expr_stmt|;
block|}
block|}
name|this
operator|.
name|forcedAnalyzer
operator|=
name|settings
operator|.
name|forcedAnalyzer
argument_list|()
operator|!=
literal|null
expr_stmt|;
name|this
operator|.
name|setAnalyzer
argument_list|(
name|forcedAnalyzer
condition|?
name|settings
operator|.
name|forcedAnalyzer
argument_list|()
else|:
name|settings
operator|.
name|defaultAnalyzer
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|settings
operator|.
name|forcedQuoteAnalyzer
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|forcedQuoteAnalyzer
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|quoteAnalyzer
operator|=
name|settings
operator|.
name|forcedQuoteAnalyzer
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|forcedAnalyzer
condition|)
block|{
name|this
operator|.
name|forcedQuoteAnalyzer
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|quoteAnalyzer
operator|=
name|settings
operator|.
name|forcedAnalyzer
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|forcedAnalyzer
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|quoteAnalyzer
operator|=
name|settings
operator|.
name|defaultQuoteAnalyzer
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|quoteFieldSuffix
operator|=
name|settings
operator|.
name|quoteFieldSuffix
argument_list|()
expr_stmt|;
name|setMultiTermRewriteMethod
argument_list|(
name|settings
operator|.
name|rewriteMethod
argument_list|()
argument_list|)
expr_stmt|;
name|setEnablePositionIncrements
argument_list|(
name|settings
operator|.
name|enablePositionIncrements
argument_list|()
argument_list|)
expr_stmt|;
name|setAutoGeneratePhraseQueries
argument_list|(
name|settings
operator|.
name|autoGeneratePhraseQueries
argument_list|()
argument_list|)
expr_stmt|;
name|setAllowLeadingWildcard
argument_list|(
name|settings
operator|.
name|allowLeadingWildcard
argument_list|()
argument_list|)
expr_stmt|;
name|setLowercaseExpandedTerms
argument_list|(
name|settings
operator|.
name|lowercaseExpandedTerms
argument_list|()
argument_list|)
expr_stmt|;
name|setPhraseSlop
argument_list|(
name|settings
operator|.
name|phraseSlop
argument_list|()
argument_list|)
expr_stmt|;
name|setDefaultOperator
argument_list|(
name|settings
operator|.
name|defaultOperator
argument_list|()
argument_list|)
expr_stmt|;
name|setFuzzyMinSim
argument_list|(
name|settings
operator|.
name|fuzzyMinSim
argument_list|()
argument_list|)
expr_stmt|;
name|setFuzzyPrefixLength
argument_list|(
name|settings
operator|.
name|fuzzyPrefixLength
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|analyzeWildcard
operator|=
name|settings
operator|.
name|analyzeWildcard
argument_list|()
expr_stmt|;
block|}
comment|/**      * We override this one so we can get the fuzzy part to be treated as string, so people can do: "age:10~5" or "timestamp:2012-10-10~5d"      */
annotation|@
name|Override
DECL|method|handleBareFuzzy
name|Query
name|handleBareFuzzy
parameter_list|(
name|String
name|qfield
parameter_list|,
name|Token
name|fuzzySlop
parameter_list|,
name|String
name|termImage
parameter_list|)
throws|throws
name|ParseException
block|{
if|if
condition|(
name|fuzzySlop
operator|.
name|image
operator|.
name|length
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return
name|getFuzzyQuery
argument_list|(
name|qfield
argument_list|,
name|termImage
argument_list|,
name|Float
operator|.
name|toString
argument_list|(
name|fuzzyMinSim
argument_list|)
argument_list|)
return|;
block|}
return|return
name|getFuzzyQuery
argument_list|(
name|qfield
argument_list|,
name|termImage
argument_list|,
name|fuzzySlop
operator|.
name|image
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|newTermQuery
specifier|protected
name|Query
name|newTermQuery
parameter_list|(
name|Term
name|term
parameter_list|)
block|{
if|if
condition|(
name|currentMapper
operator|!=
literal|null
condition|)
block|{
name|Query
name|termQuery
init|=
name|currentMapper
operator|.
name|queryStringTermQuery
argument_list|(
name|term
argument_list|)
decl_stmt|;
if|if
condition|(
name|termQuery
operator|!=
literal|null
condition|)
block|{
return|return
name|termQuery
return|;
block|}
block|}
return|return
name|super
operator|.
name|newTermQuery
argument_list|(
name|term
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|newMatchAllDocsQuery
specifier|protected
name|Query
name|newMatchAllDocsQuery
parameter_list|()
block|{
return|return
name|Queries
operator|.
name|newMatchAllQuery
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getFieldQuery
specifier|public
name|Query
name|getFieldQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|String
name|queryText
parameter_list|,
name|boolean
name|quoted
parameter_list|)
throws|throws
name|ParseException
block|{
name|FieldQueryExtension
name|fieldQueryExtension
init|=
name|fieldQueryExtensions
operator|.
name|get
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|fieldQueryExtension
operator|!=
literal|null
condition|)
block|{
return|return
name|fieldQueryExtension
operator|.
name|query
argument_list|(
name|parseContext
argument_list|,
name|queryText
argument_list|)
return|;
block|}
name|Collection
argument_list|<
name|String
argument_list|>
name|fields
init|=
name|extractMultiFields
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|fields
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return
name|getFieldQuerySingle
argument_list|(
name|fields
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|,
name|queryText
argument_list|,
name|quoted
argument_list|)
return|;
block|}
if|if
condition|(
name|settings
operator|.
name|useDisMax
argument_list|()
condition|)
block|{
name|DisjunctionMaxQuery
name|disMaxQuery
init|=
operator|new
name|DisjunctionMaxQuery
argument_list|(
name|settings
operator|.
name|tieBreaker
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|added
init|=
literal|false
decl_stmt|;
for|for
control|(
name|String
name|mField
range|:
name|fields
control|)
block|{
name|Query
name|q
init|=
name|getFieldQuerySingle
argument_list|(
name|mField
argument_list|,
name|queryText
argument_list|,
name|quoted
argument_list|)
decl_stmt|;
if|if
condition|(
name|q
operator|!=
literal|null
condition|)
block|{
name|added
operator|=
literal|true
expr_stmt|;
name|applyBoost
argument_list|(
name|mField
argument_list|,
name|q
argument_list|)
expr_stmt|;
name|disMaxQuery
operator|.
name|add
argument_list|(
name|q
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|added
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|disMaxQuery
return|;
block|}
else|else
block|{
name|List
argument_list|<
name|BooleanClause
argument_list|>
name|clauses
init|=
operator|new
name|ArrayList
argument_list|<
name|BooleanClause
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|mField
range|:
name|fields
control|)
block|{
name|Query
name|q
init|=
name|getFieldQuerySingle
argument_list|(
name|mField
argument_list|,
name|queryText
argument_list|,
name|quoted
argument_list|)
decl_stmt|;
if|if
condition|(
name|q
operator|!=
literal|null
condition|)
block|{
name|applyBoost
argument_list|(
name|mField
argument_list|,
name|q
argument_list|)
expr_stmt|;
name|clauses
operator|.
name|add
argument_list|(
operator|new
name|BooleanClause
argument_list|(
name|q
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|clauses
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
comment|// happens for stopwords
return|return
literal|null
return|;
return|return
name|getBooleanQuery
argument_list|(
name|clauses
argument_list|,
literal|true
argument_list|)
return|;
block|}
block|}
else|else
block|{
return|return
name|getFieldQuerySingle
argument_list|(
name|field
argument_list|,
name|queryText
argument_list|,
name|quoted
argument_list|)
return|;
block|}
block|}
DECL|method|getFieldQuerySingle
specifier|private
name|Query
name|getFieldQuerySingle
parameter_list|(
name|String
name|field
parameter_list|,
name|String
name|queryText
parameter_list|,
name|boolean
name|quoted
parameter_list|)
throws|throws
name|ParseException
block|{
if|if
condition|(
operator|!
name|quoted
operator|&&
name|queryText
operator|.
name|length
argument_list|()
operator|>
literal|1
condition|)
block|{
if|if
condition|(
name|queryText
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'>'
condition|)
block|{
if|if
condition|(
name|queryText
operator|.
name|length
argument_list|()
operator|>
literal|2
condition|)
block|{
if|if
condition|(
name|queryText
operator|.
name|charAt
argument_list|(
literal|1
argument_list|)
operator|==
literal|'='
condition|)
block|{
return|return
name|getRangeQuerySingle
argument_list|(
name|field
argument_list|,
name|queryText
operator|.
name|substring
argument_list|(
literal|2
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
return|;
block|}
block|}
return|return
name|getRangeQuerySingle
argument_list|(
name|field
argument_list|,
name|queryText
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|queryText
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'<'
condition|)
block|{
if|if
condition|(
name|queryText
operator|.
name|length
argument_list|()
operator|>
literal|2
condition|)
block|{
if|if
condition|(
name|queryText
operator|.
name|charAt
argument_list|(
literal|1
argument_list|)
operator|==
literal|'='
condition|)
block|{
return|return
name|getRangeQuerySingle
argument_list|(
name|field
argument_list|,
literal|null
argument_list|,
name|queryText
operator|.
name|substring
argument_list|(
literal|2
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
return|;
block|}
block|}
return|return
name|getRangeQuerySingle
argument_list|(
name|field
argument_list|,
literal|null
argument_list|,
name|queryText
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
return|;
block|}
block|}
name|currentMapper
operator|=
literal|null
expr_stmt|;
name|Analyzer
name|oldAnalyzer
init|=
name|getAnalyzer
argument_list|()
decl_stmt|;
try|try
block|{
name|MapperService
operator|.
name|SmartNameFieldMappers
name|fieldMappers
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|quoted
condition|)
block|{
name|setAnalyzer
argument_list|(
name|quoteAnalyzer
argument_list|)
expr_stmt|;
if|if
condition|(
name|quoteFieldSuffix
operator|!=
literal|null
condition|)
block|{
name|fieldMappers
operator|=
name|parseContext
operator|.
name|smartFieldMappers
argument_list|(
name|field
operator|+
name|quoteFieldSuffix
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|fieldMappers
operator|==
literal|null
condition|)
block|{
name|fieldMappers
operator|=
name|parseContext
operator|.
name|smartFieldMappers
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fieldMappers
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|quoted
condition|)
block|{
if|if
condition|(
operator|!
name|forcedQuoteAnalyzer
condition|)
block|{
name|setAnalyzer
argument_list|(
name|fieldMappers
operator|.
name|searchQuoteAnalyzer
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|forcedAnalyzer
condition|)
block|{
name|setAnalyzer
argument_list|(
name|fieldMappers
operator|.
name|searchAnalyzer
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|currentMapper
operator|=
name|fieldMappers
operator|.
name|fieldMappers
argument_list|()
operator|.
name|mapper
argument_list|()
expr_stmt|;
if|if
condition|(
name|currentMapper
operator|!=
literal|null
condition|)
block|{
name|Query
name|query
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|currentMapper
operator|.
name|useTermQueryWithQueryString
argument_list|()
condition|)
block|{
try|try
block|{
if|if
condition|(
name|fieldMappers
operator|.
name|explicitTypeInNameWithDocMapper
argument_list|()
condition|)
block|{
name|String
index|[]
name|previousTypes
init|=
name|QueryParseContext
operator|.
name|setTypesWithPrevious
argument_list|(
operator|new
name|String
index|[]
block|{
name|fieldMappers
operator|.
name|docMapper
argument_list|()
operator|.
name|type
argument_list|()
block|}
argument_list|)
decl_stmt|;
try|try
block|{
name|query
operator|=
name|currentMapper
operator|.
name|termQuery
argument_list|(
name|queryText
argument_list|,
name|parseContext
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|QueryParseContext
operator|.
name|setTypes
argument_list|(
name|previousTypes
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|query
operator|=
name|currentMapper
operator|.
name|termQuery
argument_list|(
name|queryText
argument_list|,
name|parseContext
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
if|if
condition|(
name|settings
operator|.
name|lenient
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
block|}
block|}
if|if
condition|(
name|query
operator|==
literal|null
condition|)
block|{
name|query
operator|=
name|super
operator|.
name|getFieldQuery
argument_list|(
name|currentMapper
operator|.
name|names
argument_list|()
operator|.
name|indexName
argument_list|()
argument_list|,
name|queryText
argument_list|,
name|quoted
argument_list|)
expr_stmt|;
block|}
return|return
name|wrapSmartNameQuery
argument_list|(
name|query
argument_list|,
name|fieldMappers
argument_list|,
name|parseContext
argument_list|)
return|;
block|}
block|}
return|return
name|super
operator|.
name|getFieldQuery
argument_list|(
name|field
argument_list|,
name|queryText
argument_list|,
name|quoted
argument_list|)
return|;
block|}
finally|finally
block|{
name|setAnalyzer
argument_list|(
name|oldAnalyzer
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getFieldQuery
specifier|protected
name|Query
name|getFieldQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|String
name|queryText
parameter_list|,
name|int
name|slop
parameter_list|)
throws|throws
name|ParseException
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|fields
init|=
name|extractMultiFields
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|settings
operator|.
name|useDisMax
argument_list|()
condition|)
block|{
name|DisjunctionMaxQuery
name|disMaxQuery
init|=
operator|new
name|DisjunctionMaxQuery
argument_list|(
name|settings
operator|.
name|tieBreaker
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|added
init|=
literal|false
decl_stmt|;
for|for
control|(
name|String
name|mField
range|:
name|fields
control|)
block|{
name|Query
name|q
init|=
name|super
operator|.
name|getFieldQuery
argument_list|(
name|mField
argument_list|,
name|queryText
argument_list|,
name|slop
argument_list|)
decl_stmt|;
if|if
condition|(
name|q
operator|!=
literal|null
condition|)
block|{
name|added
operator|=
literal|true
expr_stmt|;
name|applyBoost
argument_list|(
name|mField
argument_list|,
name|q
argument_list|)
expr_stmt|;
name|applySlop
argument_list|(
name|q
argument_list|,
name|slop
argument_list|)
expr_stmt|;
name|disMaxQuery
operator|.
name|add
argument_list|(
name|q
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|added
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|disMaxQuery
return|;
block|}
else|else
block|{
name|List
argument_list|<
name|BooleanClause
argument_list|>
name|clauses
init|=
operator|new
name|ArrayList
argument_list|<
name|BooleanClause
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|mField
range|:
name|fields
control|)
block|{
name|Query
name|q
init|=
name|super
operator|.
name|getFieldQuery
argument_list|(
name|mField
argument_list|,
name|queryText
argument_list|,
name|slop
argument_list|)
decl_stmt|;
if|if
condition|(
name|q
operator|!=
literal|null
condition|)
block|{
name|applyBoost
argument_list|(
name|mField
argument_list|,
name|q
argument_list|)
expr_stmt|;
name|applySlop
argument_list|(
name|q
argument_list|,
name|slop
argument_list|)
expr_stmt|;
name|clauses
operator|.
name|add
argument_list|(
operator|new
name|BooleanClause
argument_list|(
name|q
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|clauses
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
comment|// happens for stopwords
return|return
literal|null
return|;
return|return
name|getBooleanQuery
argument_list|(
name|clauses
argument_list|,
literal|true
argument_list|)
return|;
block|}
block|}
else|else
block|{
return|return
name|super
operator|.
name|getFieldQuery
argument_list|(
name|field
argument_list|,
name|queryText
argument_list|,
name|slop
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getRangeQuery
specifier|protected
name|Query
name|getRangeQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|String
name|part1
parameter_list|,
name|String
name|part2
parameter_list|,
name|boolean
name|startInclusive
parameter_list|,
name|boolean
name|endInclusive
parameter_list|)
throws|throws
name|ParseException
block|{
if|if
condition|(
literal|"*"
operator|.
name|equals
argument_list|(
name|part1
argument_list|)
condition|)
block|{
name|part1
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
literal|"*"
operator|.
name|equals
argument_list|(
name|part2
argument_list|)
condition|)
block|{
name|part2
operator|=
literal|null
expr_stmt|;
block|}
name|Collection
argument_list|<
name|String
argument_list|>
name|fields
init|=
name|extractMultiFields
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
block|{
return|return
name|getRangeQuerySingle
argument_list|(
name|field
argument_list|,
name|part1
argument_list|,
name|part2
argument_list|,
name|startInclusive
argument_list|,
name|endInclusive
argument_list|)
return|;
block|}
if|if
condition|(
name|fields
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return
name|getRangeQuerySingle
argument_list|(
name|fields
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|,
name|part1
argument_list|,
name|part2
argument_list|,
name|startInclusive
argument_list|,
name|endInclusive
argument_list|)
return|;
block|}
if|if
condition|(
name|settings
operator|.
name|useDisMax
argument_list|()
condition|)
block|{
name|DisjunctionMaxQuery
name|disMaxQuery
init|=
operator|new
name|DisjunctionMaxQuery
argument_list|(
name|settings
operator|.
name|tieBreaker
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|added
init|=
literal|false
decl_stmt|;
for|for
control|(
name|String
name|mField
range|:
name|fields
control|)
block|{
name|Query
name|q
init|=
name|getRangeQuerySingle
argument_list|(
name|mField
argument_list|,
name|part1
argument_list|,
name|part2
argument_list|,
name|startInclusive
argument_list|,
name|endInclusive
argument_list|)
decl_stmt|;
if|if
condition|(
name|q
operator|!=
literal|null
condition|)
block|{
name|added
operator|=
literal|true
expr_stmt|;
name|applyBoost
argument_list|(
name|mField
argument_list|,
name|q
argument_list|)
expr_stmt|;
name|disMaxQuery
operator|.
name|add
argument_list|(
name|q
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|added
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|disMaxQuery
return|;
block|}
else|else
block|{
name|List
argument_list|<
name|BooleanClause
argument_list|>
name|clauses
init|=
operator|new
name|ArrayList
argument_list|<
name|BooleanClause
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|mField
range|:
name|fields
control|)
block|{
name|Query
name|q
init|=
name|getRangeQuerySingle
argument_list|(
name|mField
argument_list|,
name|part1
argument_list|,
name|part2
argument_list|,
name|startInclusive
argument_list|,
name|endInclusive
argument_list|)
decl_stmt|;
if|if
condition|(
name|q
operator|!=
literal|null
condition|)
block|{
name|applyBoost
argument_list|(
name|mField
argument_list|,
name|q
argument_list|)
expr_stmt|;
name|clauses
operator|.
name|add
argument_list|(
operator|new
name|BooleanClause
argument_list|(
name|q
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|clauses
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
comment|// happens for stopwords
return|return
literal|null
return|;
return|return
name|getBooleanQuery
argument_list|(
name|clauses
argument_list|,
literal|true
argument_list|)
return|;
block|}
block|}
DECL|method|getRangeQuerySingle
specifier|private
name|Query
name|getRangeQuerySingle
parameter_list|(
name|String
name|field
parameter_list|,
name|String
name|part1
parameter_list|,
name|String
name|part2
parameter_list|,
name|boolean
name|startInclusive
parameter_list|,
name|boolean
name|endInclusive
parameter_list|)
block|{
name|currentMapper
operator|=
literal|null
expr_stmt|;
name|MapperService
operator|.
name|SmartNameFieldMappers
name|fieldMappers
init|=
name|parseContext
operator|.
name|smartFieldMappers
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|fieldMappers
operator|!=
literal|null
condition|)
block|{
name|currentMapper
operator|=
name|fieldMappers
operator|.
name|fieldMappers
argument_list|()
operator|.
name|mapper
argument_list|()
expr_stmt|;
if|if
condition|(
name|currentMapper
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|lowercaseExpandedTerms
operator|&&
operator|!
name|currentMapper
operator|.
name|isNumeric
argument_list|()
condition|)
block|{
name|part1
operator|=
name|part1
operator|==
literal|null
condition|?
literal|null
else|:
name|part1
operator|.
name|toLowerCase
argument_list|(
name|locale
argument_list|)
expr_stmt|;
name|part2
operator|=
name|part2
operator|==
literal|null
condition|?
literal|null
else|:
name|part2
operator|.
name|toLowerCase
argument_list|(
name|locale
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|Query
name|rangeQuery
init|=
name|currentMapper
operator|.
name|rangeQuery
argument_list|(
name|part1
argument_list|,
name|part2
argument_list|,
name|startInclusive
argument_list|,
name|endInclusive
argument_list|,
name|parseContext
argument_list|)
decl_stmt|;
return|return
name|wrapSmartNameQuery
argument_list|(
name|rangeQuery
argument_list|,
name|fieldMappers
argument_list|,
name|parseContext
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
if|if
condition|(
name|settings
operator|.
name|lenient
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
throw|throw
name|e
throw|;
block|}
block|}
block|}
return|return
name|newRangeQuery
argument_list|(
name|field
argument_list|,
name|part1
argument_list|,
name|part2
argument_list|,
name|startInclusive
argument_list|,
name|endInclusive
argument_list|)
return|;
block|}
DECL|method|getFuzzyQuery
specifier|protected
name|Query
name|getFuzzyQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|String
name|termStr
parameter_list|,
name|String
name|minSimilarity
parameter_list|)
throws|throws
name|ParseException
block|{
if|if
condition|(
name|lowercaseExpandedTerms
condition|)
block|{
name|termStr
operator|=
name|termStr
operator|.
name|toLowerCase
argument_list|(
name|locale
argument_list|)
expr_stmt|;
block|}
name|Collection
argument_list|<
name|String
argument_list|>
name|fields
init|=
name|extractMultiFields
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|fields
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return
name|getFuzzyQuerySingle
argument_list|(
name|fields
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|,
name|termStr
argument_list|,
name|minSimilarity
argument_list|)
return|;
block|}
if|if
condition|(
name|settings
operator|.
name|useDisMax
argument_list|()
condition|)
block|{
name|DisjunctionMaxQuery
name|disMaxQuery
init|=
operator|new
name|DisjunctionMaxQuery
argument_list|(
name|settings
operator|.
name|tieBreaker
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|added
init|=
literal|false
decl_stmt|;
for|for
control|(
name|String
name|mField
range|:
name|fields
control|)
block|{
name|Query
name|q
init|=
name|getFuzzyQuerySingle
argument_list|(
name|mField
argument_list|,
name|termStr
argument_list|,
name|minSimilarity
argument_list|)
decl_stmt|;
if|if
condition|(
name|q
operator|!=
literal|null
condition|)
block|{
name|added
operator|=
literal|true
expr_stmt|;
name|applyBoost
argument_list|(
name|mField
argument_list|,
name|q
argument_list|)
expr_stmt|;
name|disMaxQuery
operator|.
name|add
argument_list|(
name|q
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|added
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|disMaxQuery
return|;
block|}
else|else
block|{
name|List
argument_list|<
name|BooleanClause
argument_list|>
name|clauses
init|=
operator|new
name|ArrayList
argument_list|<
name|BooleanClause
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|mField
range|:
name|fields
control|)
block|{
name|Query
name|q
init|=
name|getFuzzyQuerySingle
argument_list|(
name|mField
argument_list|,
name|termStr
argument_list|,
name|minSimilarity
argument_list|)
decl_stmt|;
name|applyBoost
argument_list|(
name|mField
argument_list|,
name|q
argument_list|)
expr_stmt|;
name|clauses
operator|.
name|add
argument_list|(
operator|new
name|BooleanClause
argument_list|(
name|q
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|getBooleanQuery
argument_list|(
name|clauses
argument_list|,
literal|true
argument_list|)
return|;
block|}
block|}
else|else
block|{
return|return
name|getFuzzyQuerySingle
argument_list|(
name|field
argument_list|,
name|termStr
argument_list|,
name|minSimilarity
argument_list|)
return|;
block|}
block|}
DECL|method|getFuzzyQuerySingle
specifier|private
name|Query
name|getFuzzyQuerySingle
parameter_list|(
name|String
name|field
parameter_list|,
name|String
name|termStr
parameter_list|,
name|String
name|minSimilarity
parameter_list|)
throws|throws
name|ParseException
block|{
name|currentMapper
operator|=
literal|null
expr_stmt|;
name|MapperService
operator|.
name|SmartNameFieldMappers
name|fieldMappers
init|=
name|parseContext
operator|.
name|smartFieldMappers
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|fieldMappers
operator|!=
literal|null
condition|)
block|{
name|currentMapper
operator|=
name|fieldMappers
operator|.
name|fieldMappers
argument_list|()
operator|.
name|mapper
argument_list|()
expr_stmt|;
if|if
condition|(
name|currentMapper
operator|!=
literal|null
condition|)
block|{
try|try
block|{
comment|//LUCENE 4 UPGRADE I disabled transpositions here by default - maybe this needs to be changed
name|Query
name|fuzzyQuery
init|=
name|currentMapper
operator|.
name|fuzzyQuery
argument_list|(
name|termStr
argument_list|,
name|Fuzziness
operator|.
name|build
argument_list|(
name|minSimilarity
argument_list|)
argument_list|,
name|fuzzyPrefixLength
argument_list|,
name|settings
operator|.
name|fuzzyMaxExpansions
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
name|wrapSmartNameQuery
argument_list|(
name|fuzzyQuery
argument_list|,
name|fieldMappers
argument_list|,
name|parseContext
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
if|if
condition|(
name|settings
operator|.
name|lenient
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
throw|throw
name|e
throw|;
block|}
block|}
block|}
return|return
name|super
operator|.
name|getFuzzyQuery
argument_list|(
name|field
argument_list|,
name|termStr
argument_list|,
name|Float
operator|.
name|parseFloat
argument_list|(
name|minSimilarity
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|newFuzzyQuery
specifier|protected
name|Query
name|newFuzzyQuery
parameter_list|(
name|Term
name|term
parameter_list|,
name|float
name|minimumSimilarity
parameter_list|,
name|int
name|prefixLength
parameter_list|)
block|{
name|String
name|text
init|=
name|term
operator|.
name|text
argument_list|()
decl_stmt|;
name|int
name|numEdits
init|=
name|FuzzyQuery
operator|.
name|floatToEdits
argument_list|(
name|minimumSimilarity
argument_list|,
name|text
operator|.
name|codePointCount
argument_list|(
literal|0
argument_list|,
name|text
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|//LUCENE 4 UPGRADE I disabled transpositions here by default - maybe this needs to be changed
name|FuzzyQuery
name|query
init|=
operator|new
name|FuzzyQuery
argument_list|(
name|term
argument_list|,
name|numEdits
argument_list|,
name|prefixLength
argument_list|,
name|settings
operator|.
name|fuzzyMaxExpansions
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|QueryParsers
operator|.
name|setRewriteMethod
argument_list|(
name|query
argument_list|,
name|settings
operator|.
name|fuzzyRewriteMethod
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|query
return|;
block|}
annotation|@
name|Override
DECL|method|getPrefixQuery
specifier|protected
name|Query
name|getPrefixQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|String
name|termStr
parameter_list|)
throws|throws
name|ParseException
block|{
if|if
condition|(
name|lowercaseExpandedTerms
condition|)
block|{
name|termStr
operator|=
name|termStr
operator|.
name|toLowerCase
argument_list|(
name|locale
argument_list|)
expr_stmt|;
block|}
name|Collection
argument_list|<
name|String
argument_list|>
name|fields
init|=
name|extractMultiFields
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|fields
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return
name|getPrefixQuerySingle
argument_list|(
name|fields
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|,
name|termStr
argument_list|)
return|;
block|}
if|if
condition|(
name|settings
operator|.
name|useDisMax
argument_list|()
condition|)
block|{
name|DisjunctionMaxQuery
name|disMaxQuery
init|=
operator|new
name|DisjunctionMaxQuery
argument_list|(
name|settings
operator|.
name|tieBreaker
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|added
init|=
literal|false
decl_stmt|;
for|for
control|(
name|String
name|mField
range|:
name|fields
control|)
block|{
name|Query
name|q
init|=
name|getPrefixQuerySingle
argument_list|(
name|mField
argument_list|,
name|termStr
argument_list|)
decl_stmt|;
if|if
condition|(
name|q
operator|!=
literal|null
condition|)
block|{
name|added
operator|=
literal|true
expr_stmt|;
name|applyBoost
argument_list|(
name|mField
argument_list|,
name|q
argument_list|)
expr_stmt|;
name|disMaxQuery
operator|.
name|add
argument_list|(
name|q
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|added
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|disMaxQuery
return|;
block|}
else|else
block|{
name|List
argument_list|<
name|BooleanClause
argument_list|>
name|clauses
init|=
operator|new
name|ArrayList
argument_list|<
name|BooleanClause
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|mField
range|:
name|fields
control|)
block|{
name|Query
name|q
init|=
name|getPrefixQuerySingle
argument_list|(
name|mField
argument_list|,
name|termStr
argument_list|)
decl_stmt|;
if|if
condition|(
name|q
operator|!=
literal|null
condition|)
block|{
name|applyBoost
argument_list|(
name|mField
argument_list|,
name|q
argument_list|)
expr_stmt|;
name|clauses
operator|.
name|add
argument_list|(
operator|new
name|BooleanClause
argument_list|(
name|q
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|clauses
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
comment|// happens for stopwords
return|return
literal|null
return|;
return|return
name|getBooleanQuery
argument_list|(
name|clauses
argument_list|,
literal|true
argument_list|)
return|;
block|}
block|}
else|else
block|{
return|return
name|getPrefixQuerySingle
argument_list|(
name|field
argument_list|,
name|termStr
argument_list|)
return|;
block|}
block|}
DECL|method|getPrefixQuerySingle
specifier|private
name|Query
name|getPrefixQuerySingle
parameter_list|(
name|String
name|field
parameter_list|,
name|String
name|termStr
parameter_list|)
throws|throws
name|ParseException
block|{
name|currentMapper
operator|=
literal|null
expr_stmt|;
name|Analyzer
name|oldAnalyzer
init|=
name|getAnalyzer
argument_list|()
decl_stmt|;
try|try
block|{
name|MapperService
operator|.
name|SmartNameFieldMappers
name|fieldMappers
init|=
name|parseContext
operator|.
name|smartFieldMappers
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|fieldMappers
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|forcedAnalyzer
condition|)
block|{
name|setAnalyzer
argument_list|(
name|fieldMappers
operator|.
name|searchAnalyzer
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|currentMapper
operator|=
name|fieldMappers
operator|.
name|fieldMappers
argument_list|()
operator|.
name|mapper
argument_list|()
expr_stmt|;
if|if
condition|(
name|currentMapper
operator|!=
literal|null
condition|)
block|{
name|Query
name|query
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|currentMapper
operator|.
name|useTermQueryWithQueryString
argument_list|()
condition|)
block|{
if|if
condition|(
name|fieldMappers
operator|.
name|explicitTypeInNameWithDocMapper
argument_list|()
condition|)
block|{
name|String
index|[]
name|previousTypes
init|=
name|QueryParseContext
operator|.
name|setTypesWithPrevious
argument_list|(
operator|new
name|String
index|[]
block|{
name|fieldMappers
operator|.
name|docMapper
argument_list|()
operator|.
name|type
argument_list|()
block|}
argument_list|)
decl_stmt|;
try|try
block|{
name|query
operator|=
name|currentMapper
operator|.
name|prefixQuery
argument_list|(
name|termStr
argument_list|,
name|multiTermRewriteMethod
argument_list|,
name|parseContext
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|QueryParseContext
operator|.
name|setTypes
argument_list|(
name|previousTypes
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|query
operator|=
name|currentMapper
operator|.
name|prefixQuery
argument_list|(
name|termStr
argument_list|,
name|multiTermRewriteMethod
argument_list|,
name|parseContext
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|query
operator|==
literal|null
condition|)
block|{
name|query
operator|=
name|getPossiblyAnalyzedPrefixQuery
argument_list|(
name|currentMapper
operator|.
name|names
argument_list|()
operator|.
name|indexName
argument_list|()
argument_list|,
name|termStr
argument_list|)
expr_stmt|;
block|}
return|return
name|wrapSmartNameQuery
argument_list|(
name|query
argument_list|,
name|fieldMappers
argument_list|,
name|parseContext
argument_list|)
return|;
block|}
block|}
return|return
name|getPossiblyAnalyzedPrefixQuery
argument_list|(
name|field
argument_list|,
name|termStr
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
if|if
condition|(
name|settings
operator|.
name|lenient
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|setAnalyzer
argument_list|(
name|oldAnalyzer
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getPossiblyAnalyzedPrefixQuery
specifier|private
name|Query
name|getPossiblyAnalyzedPrefixQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|String
name|termStr
parameter_list|)
throws|throws
name|ParseException
block|{
if|if
condition|(
operator|!
name|analyzeWildcard
condition|)
block|{
return|return
name|super
operator|.
name|getPrefixQuery
argument_list|(
name|field
argument_list|,
name|termStr
argument_list|)
return|;
block|}
comment|// get Analyzer from superclass and tokenize the term
name|TokenStream
name|source
decl_stmt|;
try|try
block|{
name|source
operator|=
name|getAnalyzer
argument_list|()
operator|.
name|tokenStream
argument_list|(
name|field
argument_list|,
name|termStr
argument_list|)
expr_stmt|;
name|source
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
name|super
operator|.
name|getPrefixQuery
argument_list|(
name|field
argument_list|,
name|termStr
argument_list|)
return|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|tlist
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|CharTermAttribute
name|termAtt
init|=
name|source
operator|.
name|addAttribute
argument_list|(
name|CharTermAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
if|if
condition|(
operator|!
name|source
operator|.
name|incrementToken
argument_list|()
condition|)
break|break;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
break|break;
block|}
name|tlist
operator|.
name|add
argument_list|(
name|termAtt
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|source
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
if|if
condition|(
name|tlist
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return
name|super
operator|.
name|getPrefixQuery
argument_list|(
name|field
argument_list|,
name|tlist
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
comment|// build a boolean query with prefix on each one...
name|List
argument_list|<
name|BooleanClause
argument_list|>
name|clauses
init|=
operator|new
name|ArrayList
argument_list|<
name|BooleanClause
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|token
range|:
name|tlist
control|)
block|{
name|clauses
operator|.
name|add
argument_list|(
operator|new
name|BooleanClause
argument_list|(
name|super
operator|.
name|getPrefixQuery
argument_list|(
name|field
argument_list|,
name|token
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|getBooleanQuery
argument_list|(
name|clauses
argument_list|,
literal|true
argument_list|)
return|;
comment|//return super.getPrefixQuery(field, termStr);
comment|/* this means that the analyzer used either added or consumed * (common for a stemmer) tokens, and we can't build a PrefixQuery */
comment|//            throw new ParseException("Cannot build PrefixQuery with analyzer "
comment|//                    + getAnalyzer().getClass()
comment|//                    + (tlist.size()> 1 ? " - token(s) added" : " - token consumed"));
block|}
block|}
annotation|@
name|Override
DECL|method|getWildcardQuery
specifier|protected
name|Query
name|getWildcardQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|String
name|termStr
parameter_list|)
throws|throws
name|ParseException
block|{
if|if
condition|(
name|termStr
operator|.
name|equals
argument_list|(
literal|"*"
argument_list|)
condition|)
block|{
comment|// we want to optimize for match all query for the "*:*", and "*" cases
if|if
condition|(
literal|"*"
operator|.
name|equals
argument_list|(
name|field
argument_list|)
operator|||
name|Objects
operator|.
name|equal
argument_list|(
name|field
argument_list|,
name|this
operator|.
name|field
argument_list|)
condition|)
block|{
name|String
name|actualField
init|=
name|field
decl_stmt|;
if|if
condition|(
name|actualField
operator|==
literal|null
condition|)
block|{
name|actualField
operator|=
name|this
operator|.
name|field
expr_stmt|;
block|}
if|if
condition|(
name|actualField
operator|==
literal|null
condition|)
block|{
return|return
name|newMatchAllDocsQuery
argument_list|()
return|;
block|}
if|if
condition|(
literal|"*"
operator|.
name|equals
argument_list|(
name|actualField
argument_list|)
operator|||
literal|"_all"
operator|.
name|equals
argument_list|(
name|actualField
argument_list|)
condition|)
block|{
return|return
name|newMatchAllDocsQuery
argument_list|()
return|;
block|}
comment|// effectively, we check if a field exists or not
return|return
name|fieldQueryExtensions
operator|.
name|get
argument_list|(
name|ExistsFieldQueryExtension
operator|.
name|NAME
argument_list|)
operator|.
name|query
argument_list|(
name|parseContext
argument_list|,
name|actualField
argument_list|)
return|;
block|}
block|}
if|if
condition|(
name|lowercaseExpandedTerms
condition|)
block|{
name|termStr
operator|=
name|termStr
operator|.
name|toLowerCase
argument_list|(
name|locale
argument_list|)
expr_stmt|;
block|}
name|Collection
argument_list|<
name|String
argument_list|>
name|fields
init|=
name|extractMultiFields
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|fields
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return
name|getWildcardQuerySingle
argument_list|(
name|fields
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|,
name|termStr
argument_list|)
return|;
block|}
if|if
condition|(
name|settings
operator|.
name|useDisMax
argument_list|()
condition|)
block|{
name|DisjunctionMaxQuery
name|disMaxQuery
init|=
operator|new
name|DisjunctionMaxQuery
argument_list|(
name|settings
operator|.
name|tieBreaker
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|added
init|=
literal|false
decl_stmt|;
for|for
control|(
name|String
name|mField
range|:
name|fields
control|)
block|{
name|Query
name|q
init|=
name|getWildcardQuerySingle
argument_list|(
name|mField
argument_list|,
name|termStr
argument_list|)
decl_stmt|;
if|if
condition|(
name|q
operator|!=
literal|null
condition|)
block|{
name|added
operator|=
literal|true
expr_stmt|;
name|applyBoost
argument_list|(
name|mField
argument_list|,
name|q
argument_list|)
expr_stmt|;
name|disMaxQuery
operator|.
name|add
argument_list|(
name|q
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|added
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|disMaxQuery
return|;
block|}
else|else
block|{
name|List
argument_list|<
name|BooleanClause
argument_list|>
name|clauses
init|=
operator|new
name|ArrayList
argument_list|<
name|BooleanClause
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|mField
range|:
name|fields
control|)
block|{
name|Query
name|q
init|=
name|getWildcardQuerySingle
argument_list|(
name|mField
argument_list|,
name|termStr
argument_list|)
decl_stmt|;
if|if
condition|(
name|q
operator|!=
literal|null
condition|)
block|{
name|applyBoost
argument_list|(
name|mField
argument_list|,
name|q
argument_list|)
expr_stmt|;
name|clauses
operator|.
name|add
argument_list|(
operator|new
name|BooleanClause
argument_list|(
name|q
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|clauses
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
comment|// happens for stopwords
return|return
literal|null
return|;
return|return
name|getBooleanQuery
argument_list|(
name|clauses
argument_list|,
literal|true
argument_list|)
return|;
block|}
block|}
else|else
block|{
return|return
name|getWildcardQuerySingle
argument_list|(
name|field
argument_list|,
name|termStr
argument_list|)
return|;
block|}
block|}
DECL|method|getWildcardQuerySingle
specifier|private
name|Query
name|getWildcardQuerySingle
parameter_list|(
name|String
name|field
parameter_list|,
name|String
name|termStr
parameter_list|)
throws|throws
name|ParseException
block|{
name|String
name|indexedNameField
init|=
name|field
decl_stmt|;
name|currentMapper
operator|=
literal|null
expr_stmt|;
name|Analyzer
name|oldAnalyzer
init|=
name|getAnalyzer
argument_list|()
decl_stmt|;
try|try
block|{
name|MapperService
operator|.
name|SmartNameFieldMappers
name|fieldMappers
init|=
name|parseContext
operator|.
name|smartFieldMappers
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|fieldMappers
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|forcedAnalyzer
condition|)
block|{
name|setAnalyzer
argument_list|(
name|fieldMappers
operator|.
name|searchAnalyzer
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|currentMapper
operator|=
name|fieldMappers
operator|.
name|fieldMappers
argument_list|()
operator|.
name|mapper
argument_list|()
expr_stmt|;
if|if
condition|(
name|currentMapper
operator|!=
literal|null
condition|)
block|{
name|indexedNameField
operator|=
name|currentMapper
operator|.
name|names
argument_list|()
operator|.
name|indexName
argument_list|()
expr_stmt|;
block|}
return|return
name|wrapSmartNameQuery
argument_list|(
name|getPossiblyAnalyzedWildcardQuery
argument_list|(
name|indexedNameField
argument_list|,
name|termStr
argument_list|)
argument_list|,
name|fieldMappers
argument_list|,
name|parseContext
argument_list|)
return|;
block|}
return|return
name|getPossiblyAnalyzedWildcardQuery
argument_list|(
name|indexedNameField
argument_list|,
name|termStr
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
if|if
condition|(
name|settings
operator|.
name|lenient
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|setAnalyzer
argument_list|(
name|oldAnalyzer
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getPossiblyAnalyzedWildcardQuery
specifier|private
name|Query
name|getPossiblyAnalyzedWildcardQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|String
name|termStr
parameter_list|)
throws|throws
name|ParseException
block|{
if|if
condition|(
operator|!
name|analyzeWildcard
condition|)
block|{
return|return
name|super
operator|.
name|getWildcardQuery
argument_list|(
name|field
argument_list|,
name|termStr
argument_list|)
return|;
block|}
name|boolean
name|isWithinToken
init|=
operator|(
operator|!
name|termStr
operator|.
name|startsWith
argument_list|(
literal|"?"
argument_list|)
operator|&&
operator|!
name|termStr
operator|.
name|startsWith
argument_list|(
literal|"*"
argument_list|)
operator|)
decl_stmt|;
name|StringBuilder
name|aggStr
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|StringBuilder
name|tmp
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|termStr
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|char
name|c
init|=
name|termStr
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|'?'
operator|||
name|c
operator|==
literal|'*'
condition|)
block|{
if|if
condition|(
name|isWithinToken
condition|)
block|{
try|try
block|{
name|TokenStream
name|source
init|=
name|getAnalyzer
argument_list|()
operator|.
name|tokenStream
argument_list|(
name|field
argument_list|,
name|tmp
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|source
operator|.
name|reset
argument_list|()
expr_stmt|;
name|CharTermAttribute
name|termAtt
init|=
name|source
operator|.
name|addAttribute
argument_list|(
name|CharTermAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|source
operator|.
name|incrementToken
argument_list|()
condition|)
block|{
name|String
name|term
init|=
name|termAtt
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|term
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// no tokens, just use what we have now
name|aggStr
operator|.
name|append
argument_list|(
name|tmp
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|aggStr
operator|.
name|append
argument_list|(
name|term
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// no tokens, just use what we have now
name|aggStr
operator|.
name|append
argument_list|(
name|tmp
argument_list|)
expr_stmt|;
block|}
name|source
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|aggStr
operator|.
name|append
argument_list|(
name|tmp
argument_list|)
expr_stmt|;
block|}
name|tmp
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|isWithinToken
operator|=
literal|false
expr_stmt|;
name|aggStr
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|tmp
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|isWithinToken
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|isWithinToken
condition|)
block|{
try|try
block|{
name|TokenStream
name|source
init|=
name|getAnalyzer
argument_list|()
operator|.
name|tokenStream
argument_list|(
name|field
argument_list|,
name|tmp
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|source
operator|.
name|reset
argument_list|()
expr_stmt|;
name|CharTermAttribute
name|termAtt
init|=
name|source
operator|.
name|addAttribute
argument_list|(
name|CharTermAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|source
operator|.
name|incrementToken
argument_list|()
condition|)
block|{
name|String
name|term
init|=
name|termAtt
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|term
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// no tokens, just use what we have now
name|aggStr
operator|.
name|append
argument_list|(
name|tmp
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|aggStr
operator|.
name|append
argument_list|(
name|term
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// no tokens, just use what we have now
name|aggStr
operator|.
name|append
argument_list|(
name|tmp
argument_list|)
expr_stmt|;
block|}
name|source
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|aggStr
operator|.
name|append
argument_list|(
name|tmp
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|super
operator|.
name|getWildcardQuery
argument_list|(
name|field
argument_list|,
name|aggStr
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getRegexpQuery
specifier|protected
name|Query
name|getRegexpQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|String
name|termStr
parameter_list|)
throws|throws
name|ParseException
block|{
if|if
condition|(
name|lowercaseExpandedTerms
condition|)
block|{
name|termStr
operator|=
name|termStr
operator|.
name|toLowerCase
argument_list|(
name|locale
argument_list|)
expr_stmt|;
block|}
name|Collection
argument_list|<
name|String
argument_list|>
name|fields
init|=
name|extractMultiFields
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|fields
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return
name|getRegexpQuerySingle
argument_list|(
name|fields
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|,
name|termStr
argument_list|)
return|;
block|}
if|if
condition|(
name|settings
operator|.
name|useDisMax
argument_list|()
condition|)
block|{
name|DisjunctionMaxQuery
name|disMaxQuery
init|=
operator|new
name|DisjunctionMaxQuery
argument_list|(
name|settings
operator|.
name|tieBreaker
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|added
init|=
literal|false
decl_stmt|;
for|for
control|(
name|String
name|mField
range|:
name|fields
control|)
block|{
name|Query
name|q
init|=
name|getRegexpQuerySingle
argument_list|(
name|mField
argument_list|,
name|termStr
argument_list|)
decl_stmt|;
if|if
condition|(
name|q
operator|!=
literal|null
condition|)
block|{
name|added
operator|=
literal|true
expr_stmt|;
name|applyBoost
argument_list|(
name|mField
argument_list|,
name|q
argument_list|)
expr_stmt|;
name|disMaxQuery
operator|.
name|add
argument_list|(
name|q
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|added
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|disMaxQuery
return|;
block|}
else|else
block|{
name|List
argument_list|<
name|BooleanClause
argument_list|>
name|clauses
init|=
operator|new
name|ArrayList
argument_list|<
name|BooleanClause
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|mField
range|:
name|fields
control|)
block|{
name|Query
name|q
init|=
name|getRegexpQuerySingle
argument_list|(
name|mField
argument_list|,
name|termStr
argument_list|)
decl_stmt|;
if|if
condition|(
name|q
operator|!=
literal|null
condition|)
block|{
name|applyBoost
argument_list|(
name|mField
argument_list|,
name|q
argument_list|)
expr_stmt|;
name|clauses
operator|.
name|add
argument_list|(
operator|new
name|BooleanClause
argument_list|(
name|q
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|clauses
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
comment|// happens for stopwords
return|return
literal|null
return|;
return|return
name|getBooleanQuery
argument_list|(
name|clauses
argument_list|,
literal|true
argument_list|)
return|;
block|}
block|}
else|else
block|{
return|return
name|getRegexpQuerySingle
argument_list|(
name|field
argument_list|,
name|termStr
argument_list|)
return|;
block|}
block|}
DECL|method|getRegexpQuerySingle
specifier|private
name|Query
name|getRegexpQuerySingle
parameter_list|(
name|String
name|field
parameter_list|,
name|String
name|termStr
parameter_list|)
throws|throws
name|ParseException
block|{
name|currentMapper
operator|=
literal|null
expr_stmt|;
name|Analyzer
name|oldAnalyzer
init|=
name|getAnalyzer
argument_list|()
decl_stmt|;
try|try
block|{
name|MapperService
operator|.
name|SmartNameFieldMappers
name|fieldMappers
init|=
name|parseContext
operator|.
name|smartFieldMappers
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|fieldMappers
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|forcedAnalyzer
condition|)
block|{
name|setAnalyzer
argument_list|(
name|fieldMappers
operator|.
name|searchAnalyzer
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|currentMapper
operator|=
name|fieldMappers
operator|.
name|fieldMappers
argument_list|()
operator|.
name|mapper
argument_list|()
expr_stmt|;
if|if
condition|(
name|currentMapper
operator|!=
literal|null
condition|)
block|{
name|Query
name|query
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|currentMapper
operator|.
name|useTermQueryWithQueryString
argument_list|()
condition|)
block|{
if|if
condition|(
name|fieldMappers
operator|.
name|explicitTypeInNameWithDocMapper
argument_list|()
condition|)
block|{
name|String
index|[]
name|previousTypes
init|=
name|QueryParseContext
operator|.
name|setTypesWithPrevious
argument_list|(
operator|new
name|String
index|[]
block|{
name|fieldMappers
operator|.
name|docMapper
argument_list|()
operator|.
name|type
argument_list|()
block|}
argument_list|)
decl_stmt|;
try|try
block|{
name|query
operator|=
name|currentMapper
operator|.
name|regexpQuery
argument_list|(
name|termStr
argument_list|,
name|RegExp
operator|.
name|ALL
argument_list|,
name|multiTermRewriteMethod
argument_list|,
name|parseContext
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|QueryParseContext
operator|.
name|setTypes
argument_list|(
name|previousTypes
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|query
operator|=
name|currentMapper
operator|.
name|regexpQuery
argument_list|(
name|termStr
argument_list|,
name|RegExp
operator|.
name|ALL
argument_list|,
name|multiTermRewriteMethod
argument_list|,
name|parseContext
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|query
operator|==
literal|null
condition|)
block|{
name|query
operator|=
name|super
operator|.
name|getRegexpQuery
argument_list|(
name|field
argument_list|,
name|termStr
argument_list|)
expr_stmt|;
block|}
return|return
name|wrapSmartNameQuery
argument_list|(
name|query
argument_list|,
name|fieldMappers
argument_list|,
name|parseContext
argument_list|)
return|;
block|}
block|}
return|return
name|super
operator|.
name|getRegexpQuery
argument_list|(
name|field
argument_list|,
name|termStr
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
if|if
condition|(
name|settings
operator|.
name|lenient
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|setAnalyzer
argument_list|(
name|oldAnalyzer
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getBooleanQuery
specifier|protected
name|Query
name|getBooleanQuery
parameter_list|(
name|List
argument_list|<
name|BooleanClause
argument_list|>
name|clauses
parameter_list|,
name|boolean
name|disableCoord
parameter_list|)
throws|throws
name|ParseException
block|{
name|Query
name|q
init|=
name|super
operator|.
name|getBooleanQuery
argument_list|(
name|clauses
argument_list|,
name|disableCoord
argument_list|)
decl_stmt|;
if|if
condition|(
name|q
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|optimizeQuery
argument_list|(
name|fixNegativeQueryIfNeeded
argument_list|(
name|q
argument_list|)
argument_list|)
return|;
block|}
DECL|method|applyBoost
specifier|private
name|void
name|applyBoost
parameter_list|(
name|String
name|field
parameter_list|,
name|Query
name|q
parameter_list|)
block|{
if|if
condition|(
name|settings
operator|.
name|boosts
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|float
name|boost
init|=
literal|1f
decl_stmt|;
if|if
condition|(
name|settings
operator|.
name|boosts
argument_list|()
operator|.
name|containsKey
argument_list|(
name|field
argument_list|)
condition|)
block|{
name|boost
operator|=
name|settings
operator|.
name|boosts
argument_list|()
operator|.
name|lget
argument_list|()
expr_stmt|;
block|}
name|q
operator|.
name|setBoost
argument_list|(
name|boost
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|applySlop
specifier|private
name|void
name|applySlop
parameter_list|(
name|Query
name|q
parameter_list|,
name|int
name|slop
parameter_list|)
block|{
if|if
condition|(
name|q
operator|instanceof
name|XFilteredQuery
condition|)
block|{
name|applySlop
argument_list|(
operator|(
operator|(
name|XFilteredQuery
operator|)
name|q
operator|)
operator|.
name|getQuery
argument_list|()
argument_list|,
name|slop
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|q
operator|instanceof
name|PhraseQuery
condition|)
block|{
operator|(
operator|(
name|PhraseQuery
operator|)
name|q
operator|)
operator|.
name|setSlop
argument_list|(
name|slop
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|q
operator|instanceof
name|MultiPhraseQuery
condition|)
block|{
operator|(
operator|(
name|MultiPhraseQuery
operator|)
name|q
operator|)
operator|.
name|setSlop
argument_list|(
name|slop
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|extractMultiFields
specifier|private
name|Collection
argument_list|<
name|String
argument_list|>
name|extractMultiFields
parameter_list|(
name|String
name|field
parameter_list|)
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|fields
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|field
operator|!=
literal|null
condition|)
block|{
name|fields
operator|=
name|parseContext
operator|.
name|simpleMatchToIndexNames
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fields
operator|=
name|settings
operator|.
name|fields
argument_list|()
expr_stmt|;
block|}
return|return
name|fields
return|;
block|}
block|}
end_class

end_unit

