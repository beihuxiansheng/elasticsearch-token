begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.apache.lucene.store.bytebuffer
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|bytebuffer
package|;
end_package

begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
DECL|class|ByteBufferIndexOutput
specifier|public
class|class
name|ByteBufferIndexOutput
extends|extends
name|IndexOutput
block|{
DECL|field|EMPTY_BUFFER
specifier|private
specifier|final
specifier|static
name|ByteBuffer
name|EMPTY_BUFFER
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|0
argument_list|)
operator|.
name|asReadOnlyBuffer
argument_list|()
decl_stmt|;
DECL|field|dir
specifier|private
specifier|final
name|ByteBufferDirectory
name|dir
decl_stmt|;
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|allocator
specifier|private
specifier|final
name|ByteBufferAllocator
name|allocator
decl_stmt|;
DECL|field|allocatorType
specifier|private
specifier|final
name|ByteBufferAllocator
operator|.
name|Type
name|allocatorType
decl_stmt|;
DECL|field|BUFFER_SIZE
specifier|private
specifier|final
name|int
name|BUFFER_SIZE
decl_stmt|;
DECL|field|file
specifier|private
specifier|final
name|ByteBufferFileOutput
name|file
decl_stmt|;
DECL|field|currentBuffer
specifier|private
name|ByteBuffer
name|currentBuffer
decl_stmt|;
DECL|field|currentBufferIndex
specifier|private
name|int
name|currentBufferIndex
decl_stmt|;
DECL|field|bufferStart
specifier|private
name|long
name|bufferStart
decl_stmt|;
DECL|method|ByteBufferIndexOutput
specifier|public
name|ByteBufferIndexOutput
parameter_list|(
name|ByteBufferDirectory
name|dir
parameter_list|,
name|String
name|name
parameter_list|,
name|ByteBufferAllocator
name|allocator
parameter_list|,
name|ByteBufferAllocator
operator|.
name|Type
name|allocatorType
parameter_list|,
name|ByteBufferFileOutput
name|file
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|dir
operator|=
name|dir
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|allocator
operator|=
name|allocator
expr_stmt|;
name|this
operator|.
name|allocatorType
operator|=
name|allocatorType
expr_stmt|;
name|this
operator|.
name|BUFFER_SIZE
operator|=
name|file
operator|.
name|bufferSize
expr_stmt|;
name|this
operator|.
name|file
operator|=
name|file
expr_stmt|;
name|currentBufferIndex
operator|=
operator|-
literal|1
expr_stmt|;
name|currentBuffer
operator|=
name|EMPTY_BUFFER
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|flush
argument_list|()
expr_stmt|;
name|dir
operator|.
name|closeOutput
argument_list|(
name|name
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|seek
specifier|public
name|void
name|seek
parameter_list|(
name|long
name|pos
parameter_list|)
throws|throws
name|IOException
block|{
comment|// set the file length in case we seek back
comment|// and flush() has not been called yet
name|setFileLength
argument_list|()
expr_stmt|;
if|if
condition|(
name|pos
operator|<
name|bufferStart
operator|||
name|pos
operator|>=
name|bufferStart
operator|+
name|BUFFER_SIZE
condition|)
block|{
name|currentBufferIndex
operator|=
call|(
name|int
call|)
argument_list|(
name|pos
operator|/
name|BUFFER_SIZE
argument_list|)
expr_stmt|;
name|switchCurrentBuffer
argument_list|()
expr_stmt|;
block|}
name|currentBuffer
operator|.
name|position
argument_list|(
call|(
name|int
call|)
argument_list|(
name|pos
operator|%
name|BUFFER_SIZE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|length
specifier|public
name|long
name|length
parameter_list|()
block|{
return|return
name|file
operator|.
name|getLength
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|writeByte
specifier|public
name|void
name|writeByte
parameter_list|(
name|byte
name|b
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|currentBuffer
operator|.
name|hasRemaining
argument_list|()
condition|)
block|{
name|currentBufferIndex
operator|++
expr_stmt|;
name|switchCurrentBuffer
argument_list|()
expr_stmt|;
block|}
name|currentBuffer
operator|.
name|put
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeBytes
specifier|public
name|void
name|writeBytes
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
while|while
condition|(
name|len
operator|>
literal|0
condition|)
block|{
if|if
condition|(
operator|!
name|currentBuffer
operator|.
name|hasRemaining
argument_list|()
condition|)
block|{
name|currentBufferIndex
operator|++
expr_stmt|;
name|switchCurrentBuffer
argument_list|()
expr_stmt|;
block|}
name|int
name|remainInBuffer
init|=
name|currentBuffer
operator|.
name|remaining
argument_list|()
decl_stmt|;
name|int
name|bytesToCopy
init|=
name|len
operator|<
name|remainInBuffer
condition|?
name|len
else|:
name|remainInBuffer
decl_stmt|;
name|currentBuffer
operator|.
name|put
argument_list|(
name|b
argument_list|,
name|offset
argument_list|,
name|bytesToCopy
argument_list|)
expr_stmt|;
name|offset
operator|+=
name|bytesToCopy
expr_stmt|;
name|len
operator|-=
name|bytesToCopy
expr_stmt|;
block|}
block|}
DECL|method|switchCurrentBuffer
specifier|private
name|void
name|switchCurrentBuffer
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|currentBufferIndex
operator|==
name|file
operator|.
name|numBuffers
argument_list|()
condition|)
block|{
name|currentBuffer
operator|=
name|allocator
operator|.
name|allocate
argument_list|(
name|allocatorType
argument_list|)
expr_stmt|;
name|file
operator|.
name|addBuffer
argument_list|(
name|currentBuffer
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|currentBuffer
operator|=
name|file
operator|.
name|getBuffer
argument_list|(
name|currentBufferIndex
argument_list|)
expr_stmt|;
block|}
name|currentBuffer
operator|.
name|position
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|bufferStart
operator|=
operator|(
name|long
operator|)
name|BUFFER_SIZE
operator|*
operator|(
name|long
operator|)
name|currentBufferIndex
expr_stmt|;
block|}
DECL|method|setFileLength
specifier|private
name|void
name|setFileLength
parameter_list|()
block|{
name|long
name|pointer
init|=
name|bufferStart
operator|+
name|currentBuffer
operator|.
name|position
argument_list|()
decl_stmt|;
if|if
condition|(
name|pointer
operator|>
name|file
operator|.
name|getLength
argument_list|()
condition|)
block|{
name|file
operator|.
name|setLength
argument_list|(
name|pointer
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|flush
specifier|public
name|void
name|flush
parameter_list|()
throws|throws
name|IOException
block|{
name|file
operator|.
name|setLastModified
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|setFileLength
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getFilePointer
specifier|public
name|long
name|getFilePointer
parameter_list|()
block|{
return|return
name|currentBufferIndex
operator|<
literal|0
condition|?
literal|0
else|:
name|bufferStart
operator|+
name|currentBuffer
operator|.
name|position
argument_list|()
return|;
block|}
block|}
end_class

end_unit

