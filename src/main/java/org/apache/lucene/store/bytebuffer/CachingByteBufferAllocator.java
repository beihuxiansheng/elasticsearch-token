begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.apache.lucene.store.bytebuffer
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|bytebuffer
package|;
end_package

begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ArrayBlockingQueue
import|;
end_import

begin_comment
comment|/**  * The caching byte buffer allocator allows to define a global size for both the small and large buffers  * allocated. Those will be reused when possible.  */
end_comment

begin_class
DECL|class|CachingByteBufferAllocator
specifier|public
class|class
name|CachingByteBufferAllocator
extends|extends
name|PlainByteBufferAllocator
block|{
DECL|field|smallCache
specifier|private
specifier|final
name|ArrayBlockingQueue
argument_list|<
name|ByteBuffer
argument_list|>
name|smallCache
decl_stmt|;
DECL|field|largeCache
specifier|private
specifier|final
name|ArrayBlockingQueue
argument_list|<
name|ByteBuffer
argument_list|>
name|largeCache
decl_stmt|;
comment|/**      * @param direct                 If set to true, will allocate direct buffers (off heap).      * @param smallBufferSizeInBytes The size (in bytes) of the small buffer allocation.      * @param largeBufferSizeInBytes The size (in bytes) of the large buffer allocation.      * @param smallCacheSizeInBytes  The size of the small cache buffer in bytes.      * @param largeCacheSizeInBytes  The size of the large cache buffer in bytes.      */
DECL|method|CachingByteBufferAllocator
specifier|public
name|CachingByteBufferAllocator
parameter_list|(
name|boolean
name|direct
parameter_list|,
name|int
name|smallBufferSizeInBytes
parameter_list|,
name|int
name|largeBufferSizeInBytes
parameter_list|,
name|int
name|smallCacheSizeInBytes
parameter_list|,
name|int
name|largeCacheSizeInBytes
parameter_list|)
block|{
name|super
argument_list|(
name|direct
argument_list|,
name|smallBufferSizeInBytes
argument_list|,
name|largeBufferSizeInBytes
argument_list|)
expr_stmt|;
name|this
operator|.
name|smallCache
operator|=
operator|new
name|ArrayBlockingQueue
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|(
name|smallCacheSizeInBytes
operator|/
name|smallBufferSizeInBytes
argument_list|)
expr_stmt|;
name|this
operator|.
name|largeCache
operator|=
operator|new
name|ArrayBlockingQueue
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|(
name|largeCacheSizeInBytes
operator|/
name|largeBufferSizeInBytes
argument_list|)
expr_stmt|;
block|}
DECL|method|allocate
specifier|public
name|ByteBuffer
name|allocate
parameter_list|(
name|Type
name|type
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteBuffer
name|buffer
init|=
name|type
operator|==
name|Type
operator|.
name|SMALL
condition|?
name|smallCache
operator|.
name|poll
argument_list|()
else|:
name|largeCache
operator|.
name|poll
argument_list|()
decl_stmt|;
if|if
condition|(
name|buffer
operator|==
literal|null
condition|)
block|{
name|buffer
operator|=
name|super
operator|.
name|allocate
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
return|return
name|buffer
return|;
block|}
DECL|method|release
specifier|public
name|void
name|release
parameter_list|(
name|ByteBuffer
name|buffer
parameter_list|)
block|{
if|if
condition|(
name|buffer
operator|.
name|capacity
argument_list|()
operator|==
name|smallBufferSizeInBytes
condition|)
block|{
name|boolean
name|success
init|=
name|smallCache
operator|.
name|offer
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|super
operator|.
name|release
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|buffer
operator|.
name|capacity
argument_list|()
operator|==
name|largeBufferSizeInBytes
condition|)
block|{
name|boolean
name|success
init|=
name|largeCache
operator|.
name|offer
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|super
operator|.
name|release
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
block|}
block|}
comment|// otherwise, just ignore it? not our allocation...
block|}
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
for|for
control|(
name|ByteBuffer
name|buffer
range|:
name|smallCache
control|)
block|{
name|super
operator|.
name|release
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
block|}
name|smallCache
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|ByteBuffer
name|buffer
range|:
name|largeCache
control|)
block|{
name|super
operator|.
name|release
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
block|}
name|largeCache
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

