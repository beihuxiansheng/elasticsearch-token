begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.store.bytebuffer
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|bytebuffer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArrayList
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|ByteBufferFile
specifier|public
class|class
name|ByteBufferFile
block|{
DECL|field|buffers
specifier|private
specifier|final
name|CopyOnWriteArrayList
argument_list|<
name|ByteBuffer
argument_list|>
name|buffers
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|dir
specifier|private
specifier|final
name|ByteBufferDirectory
name|dir
decl_stmt|;
DECL|field|bufferSize
specifier|final
name|int
name|bufferSize
decl_stmt|;
DECL|field|length
specifier|private
specifier|volatile
name|long
name|length
decl_stmt|;
comment|// This is publicly modifiable via Directory.touchFile(), so direct access not supported
DECL|field|lastModified
specifier|private
specifier|volatile
name|long
name|lastModified
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
DECL|method|ByteBufferFile
specifier|public
name|ByteBufferFile
parameter_list|(
name|ByteBufferDirectory
name|dir
parameter_list|,
name|int
name|bufferSize
parameter_list|)
block|{
name|this
operator|.
name|dir
operator|=
name|dir
expr_stmt|;
name|this
operator|.
name|bufferSize
operator|=
name|bufferSize
expr_stmt|;
block|}
comment|// For non-stream access from thread that might be concurrent with writing
DECL|method|getLength
specifier|public
name|long
name|getLength
parameter_list|()
block|{
return|return
name|length
return|;
block|}
DECL|method|setLength
specifier|protected
name|void
name|setLength
parameter_list|(
name|long
name|length
parameter_list|)
block|{
name|this
operator|.
name|length
operator|=
name|length
expr_stmt|;
block|}
comment|// For non-stream access from thread that might be concurrent with writing
DECL|method|getLastModified
specifier|public
name|long
name|getLastModified
parameter_list|()
block|{
return|return
name|lastModified
return|;
block|}
DECL|method|setLastModified
specifier|protected
name|void
name|setLastModified
parameter_list|(
name|long
name|lastModified
parameter_list|)
block|{
name|this
operator|.
name|lastModified
operator|=
name|lastModified
expr_stmt|;
block|}
DECL|method|addBuffer
specifier|protected
specifier|final
name|void
name|addBuffer
parameter_list|(
name|ByteBuffer
name|buffer
parameter_list|)
block|{
name|buffers
operator|.
name|add
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
block|}
DECL|method|getBuffer
specifier|protected
specifier|final
name|ByteBuffer
name|getBuffer
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|buffers
operator|.
name|get
argument_list|(
name|index
argument_list|)
return|;
block|}
DECL|method|numBuffers
specifier|protected
specifier|final
name|int
name|numBuffers
parameter_list|()
block|{
return|return
name|buffers
operator|.
name|size
argument_list|()
return|;
block|}
DECL|method|clean
name|void
name|clean
parameter_list|()
block|{
if|if
condition|(
name|buffers
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ByteBuffer
name|buffer
range|:
name|buffers
control|)
block|{
name|dir
operator|.
name|releaseBuffer
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
block|}
name|buffers
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

