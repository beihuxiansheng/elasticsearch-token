begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.apache.lucene.store.bytebuffer
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|bytebuffer
package|;
end_package

begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_comment
comment|/**  * A byte buffer allocator simple allocates byte buffers, and handles releasing  * them. Implementation can include special direct buffer cleaning when releasing  * a buffer, as well as caching of byte buffers.  *<p/>  *<p>There are two types of buffers that can be allocated, small and big. This  * comes in handy when knowing in advance (more or less) the size of the buffers  * needed (large files or small), as well as in caching implementations.  */
end_comment

begin_interface
DECL|interface|ByteBufferAllocator
specifier|public
interface|interface
name|ByteBufferAllocator
block|{
comment|/**      * Helper class to allocator implementations allowing to clean direct buffers.      */
DECL|class|Cleaner
specifier|public
specifier|static
class|class
name|Cleaner
block|{
DECL|field|CLEAN_SUPPORTED
specifier|public
specifier|static
specifier|final
name|boolean
name|CLEAN_SUPPORTED
decl_stmt|;
DECL|field|directBufferCleaner
specifier|private
specifier|static
specifier|final
name|Method
name|directBufferCleaner
decl_stmt|;
DECL|field|directBufferCleanerClean
specifier|private
specifier|static
specifier|final
name|Method
name|directBufferCleanerClean
decl_stmt|;
static|static
block|{
name|Method
name|directBufferCleanerX
init|=
literal|null
decl_stmt|;
name|Method
name|directBufferCleanerCleanX
init|=
literal|null
decl_stmt|;
name|boolean
name|v
decl_stmt|;
try|try
block|{
name|directBufferCleanerX
operator|=
name|Class
operator|.
name|forName
argument_list|(
literal|"java.nio.DirectByteBuffer"
argument_list|)
operator|.
name|getMethod
argument_list|(
literal|"cleaner"
argument_list|)
expr_stmt|;
name|directBufferCleanerX
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|directBufferCleanerCleanX
operator|=
name|Class
operator|.
name|forName
argument_list|(
literal|"sun.misc.Cleaner"
argument_list|)
operator|.
name|getMethod
argument_list|(
literal|"clean"
argument_list|)
expr_stmt|;
name|directBufferCleanerCleanX
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|v
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|v
operator|=
literal|false
expr_stmt|;
block|}
name|CLEAN_SUPPORTED
operator|=
name|v
expr_stmt|;
name|directBufferCleaner
operator|=
name|directBufferCleanerX
expr_stmt|;
name|directBufferCleanerClean
operator|=
name|directBufferCleanerCleanX
expr_stmt|;
block|}
DECL|method|clean
specifier|public
specifier|static
name|void
name|clean
parameter_list|(
name|ByteBuffer
name|buffer
parameter_list|)
block|{
if|if
condition|(
name|CLEAN_SUPPORTED
operator|&&
name|buffer
operator|.
name|isDirect
argument_list|()
condition|)
block|{
try|try
block|{
name|Object
name|cleaner
init|=
name|directBufferCleaner
operator|.
name|invoke
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
name|directBufferCleanerClean
operator|.
name|invoke
argument_list|(
name|cleaner
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// silently ignore exception
block|}
block|}
block|}
block|}
DECL|enum|Type
specifier|public
specifier|static
enum|enum
name|Type
block|{
DECL|enum constant|SMALL
name|SMALL
block|,
DECL|enum constant|LARGE
name|LARGE
block|}
comment|/**      * The size (in bytes) that is allocated for the provided type.      */
DECL|method|sizeInBytes
name|int
name|sizeInBytes
parameter_list|(
name|Type
name|type
parameter_list|)
function_decl|;
comment|/**      * Allocate a byte buffer for the specific type.      */
DECL|method|allocate
name|ByteBuffer
name|allocate
parameter_list|(
name|Type
name|type
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**      * Release the buffer.      */
DECL|method|release
name|void
name|release
parameter_list|(
name|ByteBuffer
name|buffer
parameter_list|)
function_decl|;
comment|/**      * Close the allocator, releasing any cached buffers for example.      */
DECL|method|close
name|void
name|close
parameter_list|()
function_decl|;
block|}
end_interface

end_unit

