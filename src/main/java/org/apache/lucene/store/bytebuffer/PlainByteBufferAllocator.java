begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.apache.lucene.store.bytebuffer
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|bytebuffer
package|;
end_package

begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_comment
comment|/**  * A simple byte buffer allocator that does not caching. The direct flag  * allows to control if the byte buffer will be allocated off heap or not.  */
end_comment

begin_class
DECL|class|PlainByteBufferAllocator
specifier|public
class|class
name|PlainByteBufferAllocator
implements|implements
name|ByteBufferAllocator
block|{
DECL|field|direct
specifier|protected
specifier|final
name|boolean
name|direct
decl_stmt|;
DECL|field|smallBufferSizeInBytes
specifier|protected
specifier|final
name|int
name|smallBufferSizeInBytes
decl_stmt|;
DECL|field|largeBufferSizeInBytes
specifier|protected
specifier|final
name|int
name|largeBufferSizeInBytes
decl_stmt|;
comment|/**      * Constructs a new plain byte buffer allocator that does no caching.      *      * @param direct                 If set to true, will allocate direct buffers (off heap).      * @param smallBufferSizeInBytes The size (in bytes) of the small buffer allocation.      * @param largeBufferSizeInBytes The size (in bytes) of the large buffer allocation.      */
DECL|method|PlainByteBufferAllocator
specifier|public
name|PlainByteBufferAllocator
parameter_list|(
name|boolean
name|direct
parameter_list|,
name|int
name|smallBufferSizeInBytes
parameter_list|,
name|int
name|largeBufferSizeInBytes
parameter_list|)
block|{
name|this
operator|.
name|direct
operator|=
name|direct
expr_stmt|;
name|this
operator|.
name|smallBufferSizeInBytes
operator|=
name|smallBufferSizeInBytes
expr_stmt|;
name|this
operator|.
name|largeBufferSizeInBytes
operator|=
name|largeBufferSizeInBytes
expr_stmt|;
block|}
DECL|method|sizeInBytes
specifier|public
name|int
name|sizeInBytes
parameter_list|(
name|Type
name|type
parameter_list|)
block|{
return|return
name|type
operator|==
name|Type
operator|.
name|SMALL
condition|?
name|smallBufferSizeInBytes
else|:
name|largeBufferSizeInBytes
return|;
block|}
DECL|method|allocate
specifier|public
name|ByteBuffer
name|allocate
parameter_list|(
name|Type
name|type
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|sizeToAllocate
init|=
name|type
operator|==
name|Type
operator|.
name|SMALL
condition|?
name|smallBufferSizeInBytes
else|:
name|largeBufferSizeInBytes
decl_stmt|;
if|if
condition|(
name|direct
condition|)
block|{
return|return
name|ByteBuffer
operator|.
name|allocateDirect
argument_list|(
name|sizeToAllocate
argument_list|)
return|;
block|}
return|return
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|sizeToAllocate
argument_list|)
return|;
block|}
DECL|method|release
specifier|public
name|void
name|release
parameter_list|(
name|ByteBuffer
name|buffer
parameter_list|)
block|{
name|Cleaner
operator|.
name|clean
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
block|}
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
comment|// nothing to do here...
block|}
block|}
end_class

end_unit

