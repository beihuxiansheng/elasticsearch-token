begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.store
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TrackingMergeScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|RateLimiter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
DECL|class|XSimpleFSDirectory
specifier|public
class|class
name|XSimpleFSDirectory
extends|extends
name|SimpleFSDirectory
block|{
DECL|field|rateLimitingProvider
specifier|private
specifier|final
name|StoreRateLimiting
operator|.
name|Provider
name|rateLimitingProvider
decl_stmt|;
DECL|field|rateListener
specifier|private
specifier|final
name|StoreRateLimiting
operator|.
name|Listener
name|rateListener
decl_stmt|;
DECL|method|XSimpleFSDirectory
specifier|public
name|XSimpleFSDirectory
parameter_list|(
name|File
name|path
parameter_list|,
name|LockFactory
name|lockFactory
parameter_list|,
name|StoreRateLimiting
operator|.
name|Provider
name|rateLimitingProvider
parameter_list|,
name|StoreRateLimiting
operator|.
name|Listener
name|rateListener
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|path
argument_list|,
name|lockFactory
argument_list|)
expr_stmt|;
name|this
operator|.
name|rateLimitingProvider
operator|=
name|rateLimitingProvider
expr_stmt|;
name|this
operator|.
name|rateListener
operator|=
name|rateListener
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createOutput
specifier|public
name|IndexOutput
name|createOutput
parameter_list|(
name|String
name|name
parameter_list|,
name|IOContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|StoreRateLimiting
name|rateLimiting
init|=
name|rateLimitingProvider
operator|.
name|rateLimiting
argument_list|()
decl_stmt|;
name|StoreRateLimiting
operator|.
name|Type
name|type
init|=
name|rateLimiting
operator|.
name|getType
argument_list|()
decl_stmt|;
name|RateLimiter
name|limiter
init|=
name|rateLimiting
operator|.
name|getRateLimiter
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|==
name|StoreRateLimiting
operator|.
name|Type
operator|.
name|NONE
operator|||
name|limiter
operator|==
literal|null
condition|)
block|{
return|return
name|super
operator|.
name|createOutput
argument_list|(
name|name
argument_list|,
name|context
argument_list|)
return|;
block|}
if|if
condition|(
name|TrackingMergeScheduler
operator|.
name|getCurrentMerge
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// we are mering, and type is either MERGE or ALL, rate limit...
name|ensureOpen
argument_list|()
expr_stmt|;
name|ensureCanWrite
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
operator|new
name|XFSIndexOutput
argument_list|(
name|this
argument_list|,
name|name
argument_list|,
name|limiter
argument_list|,
name|rateListener
argument_list|)
return|;
block|}
if|if
condition|(
name|type
operator|==
name|StoreRateLimiting
operator|.
name|Type
operator|.
name|ALL
condition|)
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
name|ensureCanWrite
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
operator|new
name|XFSIndexOutput
argument_list|(
name|this
argument_list|,
name|name
argument_list|,
name|limiter
argument_list|,
name|rateListener
argument_list|)
return|;
block|}
comment|// we shouldn't really get here...
return|return
name|super
operator|.
name|createOutput
argument_list|(
name|name
argument_list|,
name|context
argument_list|)
return|;
block|}
block|}
end_class

end_unit

