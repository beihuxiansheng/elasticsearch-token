begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elasticsearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.search.postingshighlight
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|postingshighlight
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|FieldType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|TextField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|highlight
operator|.
name|DefaultEncoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|UnicodeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|highlight
operator|.
name|HighlightUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchLuceneTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|notNullValue
import|;
end_import

begin_class
annotation|@
name|LuceneTestCase
operator|.
name|SuppressCodecs
argument_list|(
block|{
literal|"MockFixedIntBlock"
block|,
literal|"MockVariableIntBlock"
block|,
literal|"MockSep"
block|,
literal|"MockRandom"
block|,
literal|"Lucene3x"
block|}
argument_list|)
DECL|class|CustomPostingsHighlighterTests
specifier|public
class|class
name|CustomPostingsHighlighterTests
extends|extends
name|ElasticsearchLuceneTestCase
block|{
annotation|@
name|Test
DECL|method|testDiscreteHighlightingPerValue
specifier|public
name|void
name|testDiscreteHighlightingPerValue
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriterConfig
name|iwc
init|=
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|iwc
operator|.
name|setMergePolicy
argument_list|(
name|newLogMergePolicy
argument_list|()
argument_list|)
expr_stmt|;
name|RandomIndexWriter
name|iw
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
name|FieldType
name|offsetsType
init|=
operator|new
name|FieldType
argument_list|(
name|TextField
operator|.
name|TYPE_STORED
argument_list|)
decl_stmt|;
name|offsetsType
operator|.
name|setIndexOptions
argument_list|(
name|FieldInfo
operator|.
name|IndexOptions
operator|.
name|DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS
argument_list|)
expr_stmt|;
name|Field
name|body
init|=
operator|new
name|Field
argument_list|(
literal|"body"
argument_list|,
literal|""
argument_list|,
name|offsetsType
argument_list|)
decl_stmt|;
specifier|final
name|String
name|firstValue
init|=
literal|"This is a test. Just a test highlighting from postings highlighter."
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|body
argument_list|)
expr_stmt|;
name|body
operator|.
name|setStringValue
argument_list|(
name|firstValue
argument_list|)
expr_stmt|;
specifier|final
name|String
name|secondValue
init|=
literal|"This is the second value to perform highlighting on."
decl_stmt|;
name|Field
name|body2
init|=
operator|new
name|Field
argument_list|(
literal|"body"
argument_list|,
literal|""
argument_list|,
name|offsetsType
argument_list|)
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|body2
argument_list|)
expr_stmt|;
name|body2
operator|.
name|setStringValue
argument_list|(
name|secondValue
argument_list|)
expr_stmt|;
specifier|final
name|String
name|thirdValue
init|=
literal|"This is the third value to test highlighting with postings."
decl_stmt|;
name|Field
name|body3
init|=
operator|new
name|Field
argument_list|(
literal|"body"
argument_list|,
literal|""
argument_list|,
name|offsetsType
argument_list|)
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|body3
argument_list|)
expr_stmt|;
name|body3
operator|.
name|setStringValue
argument_list|(
name|thirdValue
argument_list|)
expr_stmt|;
name|iw
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|IndexReader
name|ir
init|=
name|iw
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|iw
operator|.
name|close
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|fieldValues
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|fieldValues
operator|.
name|add
argument_list|(
name|firstValue
argument_list|)
expr_stmt|;
name|fieldValues
operator|.
name|add
argument_list|(
name|secondValue
argument_list|)
expr_stmt|;
name|fieldValues
operator|.
name|add
argument_list|(
name|thirdValue
argument_list|)
expr_stmt|;
name|IndexSearcher
name|searcher
init|=
name|newSearcher
argument_list|(
name|ir
argument_list|)
decl_stmt|;
name|Query
name|query
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"body"
argument_list|,
literal|"highlighting"
argument_list|)
argument_list|)
decl_stmt|;
name|BytesRef
index|[]
name|queryTerms
init|=
name|filterTerms
argument_list|(
name|extractTerms
argument_list|(
name|query
argument_list|)
argument_list|,
literal|"body"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|TopDocs
name|topDocs
init|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|null
argument_list|,
literal|10
argument_list|,
name|Sort
operator|.
name|INDEXORDER
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|topDocs
operator|.
name|totalHits
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|docId
init|=
name|topDocs
operator|.
name|scoreDocs
index|[
literal|0
index|]
operator|.
name|doc
decl_stmt|;
comment|//highlighting per value, considering whole values (simulating number_of_fragments=0)
name|CustomPostingsHighlighter
name|highlighter
init|=
operator|new
name|CustomPostingsHighlighter
argument_list|(
operator|new
name|CustomPassageFormatter
argument_list|(
literal|"<b>"
argument_list|,
literal|"</b>"
argument_list|,
operator|new
name|DefaultEncoder
argument_list|()
argument_list|)
argument_list|,
name|fieldValues
argument_list|,
literal|false
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
operator|-
literal|1
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|highlighter
operator|.
name|setBreakIterator
argument_list|(
operator|new
name|WholeBreakIterator
argument_list|()
argument_list|)
expr_stmt|;
name|Snippet
index|[]
name|snippets
init|=
name|highlighter
operator|.
name|highlightDoc
argument_list|(
literal|"body"
argument_list|,
name|queryTerms
argument_list|,
name|searcher
argument_list|,
name|docId
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|snippets
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|snippets
index|[
literal|0
index|]
operator|.
name|getText
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"This is a test. Just a test<b>highlighting</b> from postings highlighter."
argument_list|)
argument_list|)
expr_stmt|;
name|snippets
operator|=
name|highlighter
operator|.
name|highlightDoc
argument_list|(
literal|"body"
argument_list|,
name|queryTerms
argument_list|,
name|searcher
argument_list|,
name|docId
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|snippets
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|snippets
index|[
literal|0
index|]
operator|.
name|getText
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"This is the second value to perform<b>highlighting</b> on."
argument_list|)
argument_list|)
expr_stmt|;
name|snippets
operator|=
name|highlighter
operator|.
name|highlightDoc
argument_list|(
literal|"body"
argument_list|,
name|queryTerms
argument_list|,
name|searcher
argument_list|,
name|docId
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|snippets
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|snippets
index|[
literal|0
index|]
operator|.
name|getText
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"This is the third value to test<b>highlighting</b> with postings."
argument_list|)
argument_list|)
expr_stmt|;
comment|//let's try without whole break iterator as well, to prove that highlighting works the same when working per value (not optimized though)
name|highlighter
operator|=
operator|new
name|CustomPostingsHighlighter
argument_list|(
operator|new
name|CustomPassageFormatter
argument_list|(
literal|"<b>"
argument_list|,
literal|"</b>"
argument_list|,
operator|new
name|DefaultEncoder
argument_list|()
argument_list|)
argument_list|,
name|fieldValues
argument_list|,
literal|false
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
operator|-
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|snippets
operator|=
name|highlighter
operator|.
name|highlightDoc
argument_list|(
literal|"body"
argument_list|,
name|queryTerms
argument_list|,
name|searcher
argument_list|,
name|docId
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|snippets
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|snippets
index|[
literal|0
index|]
operator|.
name|getText
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"Just a test<b>highlighting</b> from postings highlighter."
argument_list|)
argument_list|)
expr_stmt|;
name|snippets
operator|=
name|highlighter
operator|.
name|highlightDoc
argument_list|(
literal|"body"
argument_list|,
name|queryTerms
argument_list|,
name|searcher
argument_list|,
name|docId
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|snippets
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|snippets
index|[
literal|0
index|]
operator|.
name|getText
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"This is the second value to perform<b>highlighting</b> on."
argument_list|)
argument_list|)
expr_stmt|;
name|snippets
operator|=
name|highlighter
operator|.
name|highlightDoc
argument_list|(
literal|"body"
argument_list|,
name|queryTerms
argument_list|,
name|searcher
argument_list|,
name|docId
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|snippets
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|snippets
index|[
literal|0
index|]
operator|.
name|getText
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"This is the third value to test<b>highlighting</b> with postings."
argument_list|)
argument_list|)
expr_stmt|;
name|ir
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/*     Tests that scoring works properly even when using discrete per value highlighting      */
annotation|@
name|Test
DECL|method|testDiscreteHighlightingScoring
specifier|public
name|void
name|testDiscreteHighlightingScoring
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriterConfig
name|iwc
init|=
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|iwc
operator|.
name|setMergePolicy
argument_list|(
name|newLogMergePolicy
argument_list|()
argument_list|)
expr_stmt|;
name|RandomIndexWriter
name|iw
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
name|FieldType
name|offsetsType
init|=
operator|new
name|FieldType
argument_list|(
name|TextField
operator|.
name|TYPE_STORED
argument_list|)
decl_stmt|;
name|offsetsType
operator|.
name|setIndexOptions
argument_list|(
name|FieldInfo
operator|.
name|IndexOptions
operator|.
name|DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS
argument_list|)
expr_stmt|;
comment|//good position but only one match
specifier|final
name|String
name|firstValue
init|=
literal|"This is a test. Just a test1 highlighting from postings highlighter."
decl_stmt|;
name|Field
name|body
init|=
operator|new
name|Field
argument_list|(
literal|"body"
argument_list|,
literal|""
argument_list|,
name|offsetsType
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|body
argument_list|)
expr_stmt|;
name|body
operator|.
name|setStringValue
argument_list|(
name|firstValue
argument_list|)
expr_stmt|;
comment|//two matches, not the best snippet due to its length though
specifier|final
name|String
name|secondValue
init|=
literal|"This is the second highlighting value to perform highlighting on a longer text that gets scored lower."
decl_stmt|;
name|Field
name|body2
init|=
operator|new
name|Field
argument_list|(
literal|"body"
argument_list|,
literal|""
argument_list|,
name|offsetsType
argument_list|)
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|body2
argument_list|)
expr_stmt|;
name|body2
operator|.
name|setStringValue
argument_list|(
name|secondValue
argument_list|)
expr_stmt|;
comment|//two matches and short, will be scored highest
specifier|final
name|String
name|thirdValue
init|=
literal|"This is highlighting the third short highlighting value."
decl_stmt|;
name|Field
name|body3
init|=
operator|new
name|Field
argument_list|(
literal|"body"
argument_list|,
literal|""
argument_list|,
name|offsetsType
argument_list|)
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|body3
argument_list|)
expr_stmt|;
name|body3
operator|.
name|setStringValue
argument_list|(
name|thirdValue
argument_list|)
expr_stmt|;
comment|//one match, same as first but at the end, will be scored lower due to its position
specifier|final
name|String
name|fourthValue
init|=
literal|"Just a test4 highlighting from postings highlighter."
decl_stmt|;
name|Field
name|body4
init|=
operator|new
name|Field
argument_list|(
literal|"body"
argument_list|,
literal|""
argument_list|,
name|offsetsType
argument_list|)
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|body4
argument_list|)
expr_stmt|;
name|body4
operator|.
name|setStringValue
argument_list|(
name|fourthValue
argument_list|)
expr_stmt|;
name|iw
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|IndexReader
name|ir
init|=
name|iw
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|iw
operator|.
name|close
argument_list|()
expr_stmt|;
name|String
name|firstHlValue
init|=
literal|"Just a test1<b>highlighting</b> from postings highlighter."
decl_stmt|;
name|String
name|secondHlValue
init|=
literal|"This is the second<b>highlighting</b> value to perform<b>highlighting</b> on a longer text that gets scored lower."
decl_stmt|;
name|String
name|thirdHlValue
init|=
literal|"This is<b>highlighting</b> the third short<b>highlighting</b> value."
decl_stmt|;
name|String
name|fourthHlValue
init|=
literal|"Just a test4<b>highlighting</b> from postings highlighter."
decl_stmt|;
name|IndexSearcher
name|searcher
init|=
name|newSearcher
argument_list|(
name|ir
argument_list|)
decl_stmt|;
name|Query
name|query
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"body"
argument_list|,
literal|"highlighting"
argument_list|)
argument_list|)
decl_stmt|;
name|BytesRef
index|[]
name|queryTerms
init|=
name|filterTerms
argument_list|(
name|extractTerms
argument_list|(
name|query
argument_list|)
argument_list|,
literal|"body"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|TopDocs
name|topDocs
init|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|null
argument_list|,
literal|10
argument_list|,
name|Sort
operator|.
name|INDEXORDER
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|topDocs
operator|.
name|totalHits
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|docId
init|=
name|topDocs
operator|.
name|scoreDocs
index|[
literal|0
index|]
operator|.
name|doc
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|fieldValues
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|fieldValues
operator|.
name|add
argument_list|(
name|firstValue
argument_list|)
expr_stmt|;
name|fieldValues
operator|.
name|add
argument_list|(
name|secondValue
argument_list|)
expr_stmt|;
name|fieldValues
operator|.
name|add
argument_list|(
name|thirdValue
argument_list|)
expr_stmt|;
name|fieldValues
operator|.
name|add
argument_list|(
name|fourthValue
argument_list|)
expr_stmt|;
name|boolean
name|mergeValues
init|=
literal|true
decl_stmt|;
name|CustomPostingsHighlighter
name|highlighter
init|=
operator|new
name|CustomPostingsHighlighter
argument_list|(
operator|new
name|CustomPassageFormatter
argument_list|(
literal|"<b>"
argument_list|,
literal|"</b>"
argument_list|,
operator|new
name|DefaultEncoder
argument_list|()
argument_list|)
argument_list|,
name|fieldValues
argument_list|,
name|mergeValues
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
operator|-
literal|1
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Snippet
index|[]
name|snippets
init|=
name|highlighter
operator|.
name|highlightDoc
argument_list|(
literal|"body"
argument_list|,
name|queryTerms
argument_list|,
name|searcher
argument_list|,
name|docId
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|snippets
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|snippets
index|[
literal|0
index|]
operator|.
name|getText
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|firstHlValue
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|snippets
index|[
literal|1
index|]
operator|.
name|getText
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|secondHlValue
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|snippets
index|[
literal|2
index|]
operator|.
name|getText
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|thirdHlValue
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|snippets
index|[
literal|3
index|]
operator|.
name|getText
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|fourthHlValue
argument_list|)
argument_list|)
expr_stmt|;
comment|//Let's highlight each separate value and check how the snippets are scored
name|mergeValues
operator|=
literal|false
expr_stmt|;
name|highlighter
operator|=
operator|new
name|CustomPostingsHighlighter
argument_list|(
operator|new
name|CustomPassageFormatter
argument_list|(
literal|"<b>"
argument_list|,
literal|"</b>"
argument_list|,
operator|new
name|DefaultEncoder
argument_list|()
argument_list|)
argument_list|,
name|fieldValues
argument_list|,
name|mergeValues
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
operator|-
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Snippet
argument_list|>
name|snippets2
init|=
operator|new
name|ArrayList
argument_list|<
name|Snippet
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fieldValues
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|snippets2
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|highlighter
operator|.
name|highlightDoc
argument_list|(
literal|"body"
argument_list|,
name|queryTerms
argument_list|,
name|searcher
argument_list|,
name|docId
argument_list|,
literal|5
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|snippets2
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|snippets2
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getText
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|firstHlValue
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|snippets2
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getText
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|secondHlValue
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|snippets2
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getText
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|thirdHlValue
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|snippets2
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|getText
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|fourthHlValue
argument_list|)
argument_list|)
expr_stmt|;
name|Comparator
argument_list|<
name|Snippet
argument_list|>
name|comparator
init|=
operator|new
name|Comparator
argument_list|<
name|Snippet
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|Snippet
name|o1
parameter_list|,
name|Snippet
name|o2
parameter_list|)
block|{
return|return
operator|(
name|int
operator|)
name|Math
operator|.
name|signum
argument_list|(
name|o1
operator|.
name|getScore
argument_list|()
operator|-
name|o2
operator|.
name|getScore
argument_list|()
argument_list|)
return|;
block|}
block|}
decl_stmt|;
comment|//sorting both groups of snippets
name|Arrays
operator|.
name|sort
argument_list|(
name|snippets
argument_list|,
name|comparator
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|snippets2
argument_list|,
name|comparator
argument_list|)
expr_stmt|;
comment|//checking that the snippets are in the same order, regardless of whether we used per value discrete highlighting or not
comment|//we can't compare the scores directly since they are slightly different due to the multiValued separator added when merging values together
comment|//That causes slightly different lengths and start offsets, thus a slightly different score.
comment|//Anyways, that's not an issue. What's important is that the score is computed the same way, so that the produced order is always the same.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|snippets
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertThat
argument_list|(
name|snippets
index|[
name|i
index|]
operator|.
name|getText
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|snippets2
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getText
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ir
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/*     Tests that we produce the same snippets and scores when manually merging values in our own custom highlighter rather than using the built-in code      */
annotation|@
name|Test
DECL|method|testMergeValuesScoring
specifier|public
name|void
name|testMergeValuesScoring
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriterConfig
name|iwc
init|=
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|iwc
operator|.
name|setMergePolicy
argument_list|(
name|newLogMergePolicy
argument_list|()
argument_list|)
expr_stmt|;
name|RandomIndexWriter
name|iw
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
name|FieldType
name|offsetsType
init|=
operator|new
name|FieldType
argument_list|(
name|TextField
operator|.
name|TYPE_STORED
argument_list|)
decl_stmt|;
name|offsetsType
operator|.
name|setIndexOptions
argument_list|(
name|FieldInfo
operator|.
name|IndexOptions
operator|.
name|DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS
argument_list|)
expr_stmt|;
comment|//good position but only one match
specifier|final
name|String
name|firstValue
init|=
literal|"This is a test. Just a test1 highlighting from postings highlighter."
decl_stmt|;
name|Field
name|body
init|=
operator|new
name|Field
argument_list|(
literal|"body"
argument_list|,
literal|""
argument_list|,
name|offsetsType
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|body
argument_list|)
expr_stmt|;
name|body
operator|.
name|setStringValue
argument_list|(
name|firstValue
argument_list|)
expr_stmt|;
comment|//two matches, not the best snippet due to its length though
specifier|final
name|String
name|secondValue
init|=
literal|"This is the second highlighting value to perform highlighting on a longer text that gets scored lower."
decl_stmt|;
name|Field
name|body2
init|=
operator|new
name|Field
argument_list|(
literal|"body"
argument_list|,
literal|""
argument_list|,
name|offsetsType
argument_list|)
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|body2
argument_list|)
expr_stmt|;
name|body2
operator|.
name|setStringValue
argument_list|(
name|secondValue
argument_list|)
expr_stmt|;
comment|//two matches and short, will be scored highest
specifier|final
name|String
name|thirdValue
init|=
literal|"This is highlighting the third short highlighting value."
decl_stmt|;
name|Field
name|body3
init|=
operator|new
name|Field
argument_list|(
literal|"body"
argument_list|,
literal|""
argument_list|,
name|offsetsType
argument_list|)
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|body3
argument_list|)
expr_stmt|;
name|body3
operator|.
name|setStringValue
argument_list|(
name|thirdValue
argument_list|)
expr_stmt|;
comment|//one match, same as first but at the end, will be scored lower due to its position
specifier|final
name|String
name|fourthValue
init|=
literal|"Just a test4 highlighting from postings highlighter."
decl_stmt|;
name|Field
name|body4
init|=
operator|new
name|Field
argument_list|(
literal|"body"
argument_list|,
literal|""
argument_list|,
name|offsetsType
argument_list|)
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|body4
argument_list|)
expr_stmt|;
name|body4
operator|.
name|setStringValue
argument_list|(
name|fourthValue
argument_list|)
expr_stmt|;
name|iw
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|IndexReader
name|ir
init|=
name|iw
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|iw
operator|.
name|close
argument_list|()
expr_stmt|;
name|String
name|firstHlValue
init|=
literal|"Just a test1<b>highlighting</b> from postings highlighter."
decl_stmt|;
name|String
name|secondHlValue
init|=
literal|"This is the second<b>highlighting</b> value to perform<b>highlighting</b> on a longer text that gets scored lower."
decl_stmt|;
name|String
name|thirdHlValue
init|=
literal|"This is<b>highlighting</b> the third short<b>highlighting</b> value."
decl_stmt|;
name|String
name|fourthHlValue
init|=
literal|"Just a test4<b>highlighting</b> from postings highlighter."
decl_stmt|;
name|IndexSearcher
name|searcher
init|=
name|newSearcher
argument_list|(
name|ir
argument_list|)
decl_stmt|;
name|Query
name|query
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"body"
argument_list|,
literal|"highlighting"
argument_list|)
argument_list|)
decl_stmt|;
name|BytesRef
index|[]
name|queryTerms
init|=
name|filterTerms
argument_list|(
name|extractTerms
argument_list|(
name|query
argument_list|)
argument_list|,
literal|"body"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|TopDocs
name|topDocs
init|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|null
argument_list|,
literal|10
argument_list|,
name|Sort
operator|.
name|INDEXORDER
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|topDocs
operator|.
name|totalHits
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|docId
init|=
name|topDocs
operator|.
name|scoreDocs
index|[
literal|0
index|]
operator|.
name|doc
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|fieldValues
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|fieldValues
operator|.
name|add
argument_list|(
name|firstValue
argument_list|)
expr_stmt|;
name|fieldValues
operator|.
name|add
argument_list|(
name|secondValue
argument_list|)
expr_stmt|;
name|fieldValues
operator|.
name|add
argument_list|(
name|thirdValue
argument_list|)
expr_stmt|;
name|fieldValues
operator|.
name|add
argument_list|(
name|fourthValue
argument_list|)
expr_stmt|;
name|boolean
name|mergeValues
init|=
literal|true
decl_stmt|;
name|CustomPostingsHighlighter
name|highlighter
init|=
operator|new
name|CustomPostingsHighlighter
argument_list|(
operator|new
name|CustomPassageFormatter
argument_list|(
literal|"<b>"
argument_list|,
literal|"</b>"
argument_list|,
operator|new
name|DefaultEncoder
argument_list|()
argument_list|)
argument_list|,
name|fieldValues
argument_list|,
name|mergeValues
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
operator|-
literal|1
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Snippet
index|[]
name|snippets
init|=
name|highlighter
operator|.
name|highlightDoc
argument_list|(
literal|"body"
argument_list|,
name|queryTerms
argument_list|,
name|searcher
argument_list|,
name|docId
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|snippets
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|snippets
index|[
literal|0
index|]
operator|.
name|getText
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|firstHlValue
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|snippets
index|[
literal|1
index|]
operator|.
name|getText
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|secondHlValue
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|snippets
index|[
literal|2
index|]
operator|.
name|getText
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|thirdHlValue
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|snippets
index|[
literal|3
index|]
operator|.
name|getText
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|fourthHlValue
argument_list|)
argument_list|)
expr_stmt|;
comment|//testing now our fork / normal postings highlighter, which merges multiple values together using the paragraph separator
name|XPostingsHighlighter
name|highlighter2
init|=
operator|new
name|XPostingsHighlighter
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
operator|-
literal|1
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|char
name|getMultiValuedSeparator
parameter_list|(
name|String
name|field
parameter_list|)
block|{
return|return
name|HighlightUtils
operator|.
name|PARAGRAPH_SEPARATOR
return|;
block|}
annotation|@
name|Override
specifier|protected
name|PassageFormatter
name|getFormatter
parameter_list|(
name|String
name|field
parameter_list|)
block|{
return|return
operator|new
name|CustomPassageFormatter
argument_list|(
literal|"<b>"
argument_list|,
literal|"</b>"
argument_list|,
operator|new
name|DefaultEncoder
argument_list|()
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
index|[]
argument_list|>
name|highlightMap
init|=
name|highlighter2
operator|.
name|highlightFieldsAsObjects
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"body"
block|}
argument_list|,
name|query
argument_list|,
name|searcher
argument_list|,
operator|new
name|int
index|[]
block|{
name|docId
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|5
block|}
argument_list|)
decl_stmt|;
name|Object
index|[]
name|objects
init|=
name|highlightMap
operator|.
name|get
argument_list|(
literal|"body"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|objects
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|objects
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Snippet
index|[]
name|normalSnippets
init|=
operator|(
name|Snippet
index|[]
operator|)
name|objects
index|[
literal|0
index|]
decl_stmt|;
name|assertThat
argument_list|(
name|normalSnippets
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|normalSnippets
index|[
literal|0
index|]
operator|.
name|getText
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|firstHlValue
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|normalSnippets
index|[
literal|1
index|]
operator|.
name|getText
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|secondHlValue
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|normalSnippets
index|[
literal|2
index|]
operator|.
name|getText
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|thirdHlValue
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|normalSnippets
index|[
literal|3
index|]
operator|.
name|getText
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|fourthHlValue
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|normalSnippets
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Snippet
name|normalSnippet
init|=
name|snippets
index|[
literal|0
index|]
decl_stmt|;
name|Snippet
name|customSnippet
init|=
name|normalSnippets
index|[
literal|0
index|]
decl_stmt|;
name|assertThat
argument_list|(
name|customSnippet
operator|.
name|getText
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|normalSnippet
operator|.
name|getText
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|customSnippet
operator|.
name|getScore
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|normalSnippet
operator|.
name|getScore
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ir
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRequireFieldMatch
specifier|public
name|void
name|testRequireFieldMatch
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriterConfig
name|iwc
init|=
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|iwc
operator|.
name|setMergePolicy
argument_list|(
name|newLogMergePolicy
argument_list|()
argument_list|)
expr_stmt|;
name|RandomIndexWriter
name|iw
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
name|FieldType
name|offsetsType
init|=
operator|new
name|FieldType
argument_list|(
name|TextField
operator|.
name|TYPE_STORED
argument_list|)
decl_stmt|;
name|offsetsType
operator|.
name|setIndexOptions
argument_list|(
name|FieldInfo
operator|.
name|IndexOptions
operator|.
name|DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS
argument_list|)
expr_stmt|;
name|Field
name|body
init|=
operator|new
name|Field
argument_list|(
literal|"body"
argument_list|,
literal|""
argument_list|,
name|offsetsType
argument_list|)
decl_stmt|;
name|Field
name|none
init|=
operator|new
name|Field
argument_list|(
literal|"none"
argument_list|,
literal|""
argument_list|,
name|offsetsType
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|body
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|none
argument_list|)
expr_stmt|;
name|String
name|firstValue
init|=
literal|"This is a test. Just a test highlighting from postings. Feel free to ignore."
decl_stmt|;
name|body
operator|.
name|setStringValue
argument_list|(
name|firstValue
argument_list|)
expr_stmt|;
name|none
operator|.
name|setStringValue
argument_list|(
name|firstValue
argument_list|)
expr_stmt|;
name|iw
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|IndexReader
name|ir
init|=
name|iw
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|iw
operator|.
name|close
argument_list|()
expr_stmt|;
name|Query
name|query
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"none"
argument_list|,
literal|"highlighting"
argument_list|)
argument_list|)
decl_stmt|;
name|SortedSet
argument_list|<
name|Term
argument_list|>
name|queryTerms
init|=
name|extractTerms
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|IndexSearcher
name|searcher
init|=
name|newSearcher
argument_list|(
name|ir
argument_list|)
decl_stmt|;
name|TopDocs
name|topDocs
init|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|null
argument_list|,
literal|10
argument_list|,
name|Sort
operator|.
name|INDEXORDER
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|topDocs
operator|.
name|totalHits
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|docId
init|=
name|topDocs
operator|.
name|scoreDocs
index|[
literal|0
index|]
operator|.
name|doc
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|values
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|values
operator|.
name|add
argument_list|(
name|firstValue
argument_list|)
expr_stmt|;
name|CustomPassageFormatter
name|passageFormatter
init|=
operator|new
name|CustomPassageFormatter
argument_list|(
literal|"<b>"
argument_list|,
literal|"</b>"
argument_list|,
operator|new
name|DefaultEncoder
argument_list|()
argument_list|)
decl_stmt|;
name|CustomPostingsHighlighter
name|highlighter
init|=
operator|new
name|CustomPostingsHighlighter
argument_list|(
name|passageFormatter
argument_list|,
name|values
argument_list|,
literal|true
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
operator|-
literal|1
argument_list|,
literal|0
argument_list|)
decl_stmt|;
comment|//no snippets with simulated require field match (we filter the terms ourselves)
name|boolean
name|requireFieldMatch
init|=
literal|true
decl_stmt|;
name|BytesRef
index|[]
name|filteredQueryTerms
init|=
name|filterTerms
argument_list|(
name|queryTerms
argument_list|,
literal|"body"
argument_list|,
name|requireFieldMatch
argument_list|)
decl_stmt|;
name|Snippet
index|[]
name|snippets
init|=
name|highlighter
operator|.
name|highlightDoc
argument_list|(
literal|"body"
argument_list|,
name|filteredQueryTerms
argument_list|,
name|searcher
argument_list|,
name|docId
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|snippets
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|highlighter
operator|=
operator|new
name|CustomPostingsHighlighter
argument_list|(
name|passageFormatter
argument_list|,
name|values
argument_list|,
literal|true
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
operator|-
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|//one snippet without require field match, just passing in the query terms with no filtering on our side
name|requireFieldMatch
operator|=
literal|false
expr_stmt|;
name|filteredQueryTerms
operator|=
name|filterTerms
argument_list|(
name|queryTerms
argument_list|,
literal|"body"
argument_list|,
name|requireFieldMatch
argument_list|)
expr_stmt|;
name|snippets
operator|=
name|highlighter
operator|.
name|highlightDoc
argument_list|(
literal|"body"
argument_list|,
name|filteredQueryTerms
argument_list|,
name|searcher
argument_list|,
name|docId
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|snippets
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|snippets
index|[
literal|0
index|]
operator|.
name|getText
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"Just a test<b>highlighting</b> from postings."
argument_list|)
argument_list|)
expr_stmt|;
name|ir
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNoMatchSize
specifier|public
name|void
name|testNoMatchSize
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriterConfig
name|iwc
init|=
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|iwc
operator|.
name|setMergePolicy
argument_list|(
name|newLogMergePolicy
argument_list|()
argument_list|)
expr_stmt|;
name|RandomIndexWriter
name|iw
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
name|FieldType
name|offsetsType
init|=
operator|new
name|FieldType
argument_list|(
name|TextField
operator|.
name|TYPE_STORED
argument_list|)
decl_stmt|;
name|offsetsType
operator|.
name|setIndexOptions
argument_list|(
name|FieldInfo
operator|.
name|IndexOptions
operator|.
name|DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS
argument_list|)
expr_stmt|;
name|Field
name|body
init|=
operator|new
name|Field
argument_list|(
literal|"body"
argument_list|,
literal|""
argument_list|,
name|offsetsType
argument_list|)
decl_stmt|;
name|Field
name|none
init|=
operator|new
name|Field
argument_list|(
literal|"none"
argument_list|,
literal|""
argument_list|,
name|offsetsType
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|body
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|none
argument_list|)
expr_stmt|;
name|String
name|firstValue
init|=
literal|"This is a test. Just a test highlighting from postings. Feel free to ignore."
decl_stmt|;
name|body
operator|.
name|setStringValue
argument_list|(
name|firstValue
argument_list|)
expr_stmt|;
name|none
operator|.
name|setStringValue
argument_list|(
name|firstValue
argument_list|)
expr_stmt|;
name|iw
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|IndexReader
name|ir
init|=
name|iw
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|iw
operator|.
name|close
argument_list|()
expr_stmt|;
name|Query
name|query
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"none"
argument_list|,
literal|"highlighting"
argument_list|)
argument_list|)
decl_stmt|;
name|SortedSet
argument_list|<
name|Term
argument_list|>
name|queryTerms
init|=
name|extractTerms
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|IndexSearcher
name|searcher
init|=
name|newSearcher
argument_list|(
name|ir
argument_list|)
decl_stmt|;
name|TopDocs
name|topDocs
init|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|null
argument_list|,
literal|10
argument_list|,
name|Sort
operator|.
name|INDEXORDER
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|topDocs
operator|.
name|totalHits
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|docId
init|=
name|topDocs
operator|.
name|scoreDocs
index|[
literal|0
index|]
operator|.
name|doc
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|values
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|values
operator|.
name|add
argument_list|(
name|firstValue
argument_list|)
expr_stmt|;
name|BytesRef
index|[]
name|filteredQueryTerms
init|=
name|filterTerms
argument_list|(
name|queryTerms
argument_list|,
literal|"body"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|CustomPassageFormatter
name|passageFormatter
init|=
operator|new
name|CustomPassageFormatter
argument_list|(
literal|"<b>"
argument_list|,
literal|"</b>"
argument_list|,
operator|new
name|DefaultEncoder
argument_list|()
argument_list|)
decl_stmt|;
name|CustomPostingsHighlighter
name|highlighter
init|=
operator|new
name|CustomPostingsHighlighter
argument_list|(
name|passageFormatter
argument_list|,
name|values
argument_list|,
literal|true
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
operator|-
literal|1
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Snippet
index|[]
name|snippets
init|=
name|highlighter
operator|.
name|highlightDoc
argument_list|(
literal|"body"
argument_list|,
name|filteredQueryTerms
argument_list|,
name|searcher
argument_list|,
name|docId
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|snippets
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|highlighter
operator|=
operator|new
name|CustomPostingsHighlighter
argument_list|(
name|passageFormatter
argument_list|,
name|values
argument_list|,
literal|true
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
operator|-
literal|1
argument_list|,
name|scaledRandomIntBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|snippets
operator|=
name|highlighter
operator|.
name|highlightDoc
argument_list|(
literal|"body"
argument_list|,
name|filteredQueryTerms
argument_list|,
name|searcher
argument_list|,
name|docId
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|snippets
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|snippets
index|[
literal|0
index|]
operator|.
name|getText
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"This is a test."
argument_list|)
argument_list|)
expr_stmt|;
name|ir
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|extractTerms
specifier|private
specifier|static
name|SortedSet
argument_list|<
name|Term
argument_list|>
name|extractTerms
parameter_list|(
name|Query
name|query
parameter_list|)
block|{
name|SortedSet
argument_list|<
name|Term
argument_list|>
name|queryTerms
init|=
operator|new
name|TreeSet
argument_list|<
name|Term
argument_list|>
argument_list|()
decl_stmt|;
name|query
operator|.
name|extractTerms
argument_list|(
name|queryTerms
argument_list|)
expr_stmt|;
return|return
name|queryTerms
return|;
block|}
DECL|method|filterTerms
specifier|private
specifier|static
name|BytesRef
index|[]
name|filterTerms
parameter_list|(
name|SortedSet
argument_list|<
name|Term
argument_list|>
name|queryTerms
parameter_list|,
name|String
name|field
parameter_list|,
name|boolean
name|requireFieldMatch
parameter_list|)
block|{
name|SortedSet
argument_list|<
name|Term
argument_list|>
name|fieldTerms
decl_stmt|;
if|if
condition|(
name|requireFieldMatch
condition|)
block|{
name|Term
name|floor
init|=
operator|new
name|Term
argument_list|(
name|field
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|Term
name|ceiling
init|=
operator|new
name|Term
argument_list|(
name|field
argument_list|,
name|UnicodeUtil
operator|.
name|BIG_TERM
argument_list|)
decl_stmt|;
name|fieldTerms
operator|=
name|queryTerms
operator|.
name|subSet
argument_list|(
name|floor
argument_list|,
name|ceiling
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fieldTerms
operator|=
name|queryTerms
expr_stmt|;
block|}
name|BytesRef
name|terms
index|[]
init|=
operator|new
name|BytesRef
index|[
name|fieldTerms
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|termUpto
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Term
name|term
range|:
name|fieldTerms
control|)
block|{
name|terms
index|[
name|termUpto
operator|++
index|]
operator|=
name|term
operator|.
name|bytes
argument_list|()
expr_stmt|;
block|}
return|return
name|terms
return|;
block|}
block|}
end_class

end_unit

