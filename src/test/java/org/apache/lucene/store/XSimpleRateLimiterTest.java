begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.store
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|testng
operator|.
name|annotations
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|RateLimiter
operator|.
name|SimpleRateLimiter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|Lucene
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|MatcherAssert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|lessThan
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|greaterThan
import|;
end_import

begin_class
DECL|class|XSimpleRateLimiterTest
specifier|public
class|class
name|XSimpleRateLimiterTest
block|{
annotation|@
name|Test
DECL|method|testPause
specifier|public
name|void
name|testPause
parameter_list|()
block|{
name|XSimpleRateLimiter
name|limiter
init|=
operator|new
name|XSimpleRateLimiter
argument_list|(
literal|10
argument_list|)
decl_stmt|;
comment|// 10 MB / Sec
name|limiter
operator|.
name|pause
argument_list|(
literal|2
argument_list|)
expr_stmt|;
comment|//init
name|long
name|pause
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|pause
operator|+=
name|limiter
operator|.
name|pause
argument_list|(
literal|4
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
expr_stmt|;
comment|// fire up 3 * 4 MB
block|}
specifier|final
name|long
name|convert
init|=
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|convert
argument_list|(
name|pause
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|convert
argument_list|,
name|lessThan
argument_list|(
literal|2000l
argument_list|)
argument_list|)
expr_stmt|;
comment|// more than 2 seconds should be an error here!
name|assertThat
argument_list|(
name|convert
argument_list|,
name|greaterThan
argument_list|(
literal|1000l
argument_list|)
argument_list|)
expr_stmt|;
comment|// we should sleep at lease 1 sec
block|}
annotation|@
name|Test
DECL|method|testPauseLucene
specifier|public
name|void
name|testPauseLucene
parameter_list|()
block|{
if|if
condition|(
name|Version
operator|.
name|LUCENE_42
operator|!=
name|Lucene
operator|.
name|VERSION
condition|)
block|{
comment|// once we upgrade test the lucene impl again
name|SimpleRateLimiter
name|limiter
init|=
operator|new
name|SimpleRateLimiter
argument_list|(
literal|10
argument_list|)
decl_stmt|;
comment|// 10 MB / Sec
name|limiter
operator|.
name|pause
argument_list|(
literal|2
argument_list|)
expr_stmt|;
comment|//init
name|long
name|pause
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|pause
operator|+=
name|limiter
operator|.
name|pause
argument_list|(
literal|4
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
expr_stmt|;
comment|// fire up 3 * 4 MB
block|}
specifier|final
name|long
name|convert
init|=
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|convert
argument_list|(
name|pause
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|convert
argument_list|,
name|lessThan
argument_list|(
literal|2000l
argument_list|)
argument_list|)
expr_stmt|;
comment|// more than 2 seconds should be an error here!
name|assertThat
argument_list|(
name|convert
argument_list|,
name|greaterThan
argument_list|(
literal|1000l
argument_list|)
argument_list|)
expr_stmt|;
comment|// we should sleep at lease 1 sec
assert|assert
literal|false
operator|:
literal|"Upgrade XSimpleRateLimiter to Lucene SimpleRateLimiter"
assert|;
block|}
block|}
block|}
end_class

end_unit

