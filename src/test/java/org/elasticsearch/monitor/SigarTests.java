begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.monitor
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|monitor
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hyperic
operator|.
name|sigar
operator|.
name|Sigar
import|;
end_import

begin_class
DECL|class|SigarTests
specifier|public
class|class
name|SigarTests
extends|extends
name|ElasticsearchTestCase
block|{
annotation|@
name|Override
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|assumeTrue
argument_list|(
literal|"we can only ensure sigar is working when running from maven"
argument_list|,
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"tests.maven"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSigarLoads
specifier|public
name|void
name|testSigarLoads
parameter_list|()
throws|throws
name|Exception
block|{
name|Sigar
operator|.
name|load
argument_list|()
expr_stmt|;
block|}
DECL|method|testSigarWorks
specifier|public
name|void
name|testSigarWorks
parameter_list|()
throws|throws
name|Exception
block|{
name|Sigar
name|sigar
init|=
operator|new
name|Sigar
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|sigar
operator|.
name|getCpu
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

