begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.indexlifecycle
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|indexlifecycle
package|;
end_package

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|annotations
operator|.
name|Nightly
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
operator|.
name|Slow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|health
operator|.
name|ClusterHealthResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|health
operator|.
name|ClusterHealthStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|create
operator|.
name|CreateIndexResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|delete
operator|.
name|DeleteIndexResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RoutingNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RoutingNodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|Discovery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchIntegrationTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchIntegrationTest
operator|.
name|ClusterScope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchIntegrationTest
operator|.
name|Scope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|TestCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|Requests
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_REPLICAS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_SHARDS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRoutingState
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
operator|.
name|settingsBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
annotation|@
name|ClusterScope
argument_list|(
name|scope
operator|=
name|Scope
operator|.
name|TEST
argument_list|,
name|numNodes
operator|=
literal|0
argument_list|)
DECL|class|IndexLifecycleActionTests
specifier|public
class|class
name|IndexLifecycleActionTests
extends|extends
name|ElasticsearchIntegrationTest
block|{
annotation|@
name|Slow
annotation|@
name|Test
DECL|method|testIndexLifecycleActions
specifier|public
name|void
name|testIndexLifecycleActions
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
comment|// both run with @Nightly
name|testIndexLifecycleActionsWith11Shards0Backup
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|testIndexLifecycleActionsWith11Shards1Backup
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Slow
annotation|@
name|Nightly
annotation|@
name|Test
DECL|method|testIndexLifecycleActionsWith11Shards1Backup
specifier|public
name|void
name|testIndexLifecycleActionsWith11Shards1Backup
parameter_list|()
throws|throws
name|Exception
block|{
name|Settings
name|settings
init|=
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
literal|11
argument_list|)
operator|.
name|put
argument_list|(
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
literal|"cluster.routing.schedule"
argument_list|,
literal|"20ms"
argument_list|)
comment|// reroute every 20ms so we identify new nodes fast
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// start one server
name|logger
operator|.
name|info
argument_list|(
literal|"Starting sever1"
argument_list|)
expr_stmt|;
specifier|final
name|String
name|server_1
init|=
name|cluster
argument_list|()
operator|.
name|startNode
argument_list|(
name|settings
argument_list|)
decl_stmt|;
specifier|final
name|String
name|node1
init|=
name|getLocalNodeId
argument_list|(
name|server_1
argument_list|)
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Creating index [test]"
argument_list|)
expr_stmt|;
name|CreateIndexResponse
name|createIndexResponse
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|create
argument_list|(
name|createIndexRequest
argument_list|(
literal|"test"
argument_list|)
argument_list|)
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|createIndexResponse
operator|.
name|isAcknowledged
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Running Cluster Health"
argument_list|)
expr_stmt|;
name|ClusterHealthResponse
name|clusterHealth
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareHealth
argument_list|()
operator|.
name|setWaitForEvents
argument_list|(
name|Priority
operator|.
name|LANGUID
argument_list|)
operator|.
name|setWaitForYellowStatus
argument_list|()
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Done Cluster Health, status "
operator|+
name|clusterHealth
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterHealth
operator|.
name|isTimedOut
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterHealth
operator|.
name|getStatus
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|ClusterHealthStatus
operator|.
name|YELLOW
argument_list|)
argument_list|)
expr_stmt|;
name|ClusterState
name|clusterState
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|getState
argument_list|()
decl_stmt|;
name|RoutingNode
name|routingNodeEntry1
init|=
name|clusterState
operator|.
name|readOnlyRoutingNodes
argument_list|()
operator|.
name|node
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|routingNodeEntry1
operator|.
name|numberOfShardsWithState
argument_list|(
name|STARTED
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|11
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Starting server2"
argument_list|)
expr_stmt|;
comment|// start another server
name|String
name|server_2
init|=
name|cluster
argument_list|()
operator|.
name|startNode
argument_list|(
name|settings
argument_list|)
decl_stmt|;
comment|// first wait for 2 nodes in the cluster
name|logger
operator|.
name|info
argument_list|(
literal|"Running Cluster Health"
argument_list|)
expr_stmt|;
name|clusterHealth
operator|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|health
argument_list|(
name|clusterHealthRequest
argument_list|()
operator|.
name|waitForGreenStatus
argument_list|()
operator|.
name|waitForNodes
argument_list|(
literal|"2"
argument_list|)
argument_list|)
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Done Cluster Health, status "
operator|+
name|clusterHealth
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterHealth
operator|.
name|isTimedOut
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterHealth
operator|.
name|getStatus
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|ClusterHealthStatus
operator|.
name|GREEN
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|String
name|node2
init|=
name|getLocalNodeId
argument_list|(
name|server_2
argument_list|)
decl_stmt|;
comment|// explicitly call reroute, so shards will get relocated to the new node (we delay it in ES in case other nodes join)
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareReroute
argument_list|()
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|clusterHealth
operator|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|health
argument_list|(
name|clusterHealthRequest
argument_list|()
operator|.
name|waitForGreenStatus
argument_list|()
operator|.
name|waitForNodes
argument_list|(
literal|"2"
argument_list|)
operator|.
name|waitForRelocatingShards
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|clusterHealth
operator|.
name|isTimedOut
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterHealth
operator|.
name|getStatus
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|ClusterHealthStatus
operator|.
name|GREEN
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterHealth
operator|.
name|getNumberOfDataNodes
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterHealth
operator|.
name|getInitializingShards
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterHealth
operator|.
name|getUnassignedShards
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterHealth
operator|.
name|getRelocatingShards
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterHealth
operator|.
name|getActiveShards
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|22
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterHealth
operator|.
name|getActivePrimaryShards
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|11
argument_list|)
argument_list|)
expr_stmt|;
name|clusterState
operator|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|getState
argument_list|()
expr_stmt|;
name|assertNodesPresent
argument_list|(
name|clusterState
operator|.
name|readOnlyRoutingNodes
argument_list|()
argument_list|,
name|node1
argument_list|,
name|node2
argument_list|)
expr_stmt|;
name|routingNodeEntry1
operator|=
name|clusterState
operator|.
name|readOnlyRoutingNodes
argument_list|()
operator|.
name|node
argument_list|(
name|node1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|routingNodeEntry1
operator|.
name|numberOfShardsWithState
argument_list|(
name|RELOCATING
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|routingNodeEntry1
operator|.
name|numberOfShardsWithState
argument_list|(
name|STARTED
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|11
argument_list|)
argument_list|)
expr_stmt|;
name|RoutingNode
name|routingNodeEntry2
init|=
name|clusterState
operator|.
name|readOnlyRoutingNodes
argument_list|()
operator|.
name|node
argument_list|(
name|node2
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|routingNodeEntry2
operator|.
name|numberOfShardsWithState
argument_list|(
name|INITIALIZING
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|routingNodeEntry2
operator|.
name|numberOfShardsWithState
argument_list|(
name|STARTED
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|11
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Starting server3"
argument_list|)
expr_stmt|;
comment|// start another server
name|String
name|server_3
init|=
name|cluster
argument_list|()
operator|.
name|startNode
argument_list|(
name|settings
argument_list|)
decl_stmt|;
comment|// first wait for 3 nodes in the cluster
name|clusterHealth
operator|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|health
argument_list|(
name|clusterHealthRequest
argument_list|()
operator|.
name|waitForGreenStatus
argument_list|()
operator|.
name|waitForNodes
argument_list|(
literal|"3"
argument_list|)
argument_list|)
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|clusterHealth
operator|.
name|isTimedOut
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterHealth
operator|.
name|getStatus
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|ClusterHealthStatus
operator|.
name|GREEN
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|String
name|node3
init|=
name|getLocalNodeId
argument_list|(
name|server_3
argument_list|)
decl_stmt|;
comment|// explicitly call reroute, so shards will get relocated to the new node (we delay it in ES in case other nodes join)
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareReroute
argument_list|()
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|clusterHealth
operator|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|health
argument_list|(
name|clusterHealthRequest
argument_list|()
operator|.
name|waitForGreenStatus
argument_list|()
operator|.
name|waitForNodes
argument_list|(
literal|"3"
argument_list|)
operator|.
name|waitForRelocatingShards
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|clusterHealth
operator|.
name|isTimedOut
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterHealth
operator|.
name|getStatus
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|ClusterHealthStatus
operator|.
name|GREEN
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterHealth
operator|.
name|getNumberOfDataNodes
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterHealth
operator|.
name|getInitializingShards
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterHealth
operator|.
name|getUnassignedShards
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterHealth
operator|.
name|getRelocatingShards
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterHealth
operator|.
name|getActiveShards
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|22
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterHealth
operator|.
name|getActivePrimaryShards
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|11
argument_list|)
argument_list|)
expr_stmt|;
name|clusterState
operator|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|getState
argument_list|()
expr_stmt|;
name|assertNodesPresent
argument_list|(
name|clusterState
operator|.
name|readOnlyRoutingNodes
argument_list|()
argument_list|,
name|node1
argument_list|,
name|node2
argument_list|,
name|node3
argument_list|)
expr_stmt|;
name|routingNodeEntry1
operator|=
name|clusterState
operator|.
name|readOnlyRoutingNodes
argument_list|()
operator|.
name|node
argument_list|(
name|node1
argument_list|)
expr_stmt|;
name|routingNodeEntry2
operator|=
name|clusterState
operator|.
name|readOnlyRoutingNodes
argument_list|()
operator|.
name|node
argument_list|(
name|node2
argument_list|)
expr_stmt|;
name|RoutingNode
name|routingNodeEntry3
init|=
name|clusterState
operator|.
name|readOnlyRoutingNodes
argument_list|()
operator|.
name|node
argument_list|(
name|node3
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|routingNodeEntry1
operator|.
name|numberOfShardsWithState
argument_list|(
name|STARTED
argument_list|)
operator|+
name|routingNodeEntry2
operator|.
name|numberOfShardsWithState
argument_list|(
name|STARTED
argument_list|)
operator|+
name|routingNodeEntry3
operator|.
name|numberOfShardsWithState
argument_list|(
name|STARTED
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|22
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|routingNodeEntry1
operator|.
name|numberOfShardsWithState
argument_list|(
name|RELOCATING
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|routingNodeEntry1
operator|.
name|numberOfShardsWithState
argument_list|(
name|STARTED
argument_list|)
argument_list|,
name|anyOf
argument_list|(
name|equalTo
argument_list|(
literal|7
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|8
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|routingNodeEntry2
operator|.
name|numberOfShardsWithState
argument_list|(
name|RELOCATING
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|routingNodeEntry2
operator|.
name|numberOfShardsWithState
argument_list|(
name|STARTED
argument_list|)
argument_list|,
name|anyOf
argument_list|(
name|equalTo
argument_list|(
literal|7
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|8
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|routingNodeEntry3
operator|.
name|numberOfShardsWithState
argument_list|(
name|INITIALIZING
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|routingNodeEntry3
operator|.
name|numberOfShardsWithState
argument_list|(
name|STARTED
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|7
argument_list|)
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareUpdateSettings
argument_list|()
operator|.
name|setTransientSettings
argument_list|(
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"discovery.zen.minimum_master_nodes"
argument_list|,
literal|2
argument_list|)
argument_list|)
comment|// we are shutting down a node - make sure we don't have 2 clusters if we test network
operator|.
name|get
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Closing server1"
argument_list|)
expr_stmt|;
comment|// kill the first server
name|cluster
argument_list|()
operator|.
name|stopRandomNode
argument_list|(
name|TestCluster
operator|.
name|nameFilter
argument_list|(
name|server_1
argument_list|)
argument_list|)
expr_stmt|;
comment|// verify health
name|logger
operator|.
name|info
argument_list|(
literal|"Running Cluster Health"
argument_list|)
expr_stmt|;
name|clusterHealth
operator|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|health
argument_list|(
name|clusterHealthRequest
argument_list|()
operator|.
name|waitForGreenStatus
argument_list|()
operator|.
name|waitForNodes
argument_list|(
literal|"2"
argument_list|)
argument_list|)
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Done Cluster Health, status "
operator|+
name|clusterHealth
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterHealth
operator|.
name|isTimedOut
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterHealth
operator|.
name|getStatus
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|ClusterHealthStatus
operator|.
name|GREEN
argument_list|)
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareReroute
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|clusterHealth
operator|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|health
argument_list|(
name|clusterHealthRequest
argument_list|()
operator|.
name|waitForGreenStatus
argument_list|()
operator|.
name|waitForRelocatingShards
argument_list|(
literal|0
argument_list|)
operator|.
name|waitForNodes
argument_list|(
literal|"2"
argument_list|)
argument_list|)
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|clusterHealth
operator|.
name|isTimedOut
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterHealth
operator|.
name|getStatus
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|ClusterHealthStatus
operator|.
name|GREEN
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterHealth
operator|.
name|getRelocatingShards
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterHealth
operator|.
name|getActiveShards
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|22
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterHealth
operator|.
name|getActivePrimaryShards
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|11
argument_list|)
argument_list|)
expr_stmt|;
name|clusterState
operator|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|getState
argument_list|()
expr_stmt|;
name|assertNodesPresent
argument_list|(
name|clusterState
operator|.
name|readOnlyRoutingNodes
argument_list|()
argument_list|,
name|node3
argument_list|,
name|node2
argument_list|)
expr_stmt|;
name|routingNodeEntry2
operator|=
name|clusterState
operator|.
name|readOnlyRoutingNodes
argument_list|()
operator|.
name|node
argument_list|(
name|node2
argument_list|)
expr_stmt|;
name|routingNodeEntry3
operator|=
name|clusterState
operator|.
name|readOnlyRoutingNodes
argument_list|()
operator|.
name|node
argument_list|(
name|node3
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|routingNodeEntry2
operator|.
name|numberOfShardsWithState
argument_list|(
name|STARTED
argument_list|)
operator|+
name|routingNodeEntry3
operator|.
name|numberOfShardsWithState
argument_list|(
name|STARTED
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|22
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|routingNodeEntry2
operator|.
name|numberOfShardsWithState
argument_list|(
name|RELOCATING
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|routingNodeEntry2
operator|.
name|numberOfShardsWithState
argument_list|(
name|STARTED
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|11
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|routingNodeEntry3
operator|.
name|numberOfShardsWithState
argument_list|(
name|RELOCATING
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|routingNodeEntry3
operator|.
name|numberOfShardsWithState
argument_list|(
name|STARTED
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|11
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Deleting index [test]"
argument_list|)
expr_stmt|;
comment|// last, lets delete the index
name|DeleteIndexResponse
name|deleteIndexResponse
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareDelete
argument_list|(
literal|"test"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|deleteIndexResponse
operator|.
name|isAcknowledged
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|clusterState
operator|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|getState
argument_list|()
expr_stmt|;
name|assertNodesPresent
argument_list|(
name|clusterState
operator|.
name|readOnlyRoutingNodes
argument_list|()
argument_list|,
name|node3
argument_list|,
name|node2
argument_list|)
expr_stmt|;
name|routingNodeEntry2
operator|=
name|clusterState
operator|.
name|readOnlyRoutingNodes
argument_list|()
operator|.
name|node
argument_list|(
name|node2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|routingNodeEntry2
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|routingNodeEntry3
operator|=
name|clusterState
operator|.
name|readOnlyRoutingNodes
argument_list|()
operator|.
name|node
argument_list|(
name|node3
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|routingNodeEntry3
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getLocalNodeId
specifier|private
name|String
name|getLocalNodeId
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|Discovery
name|discovery
init|=
name|cluster
argument_list|()
operator|.
name|getInstance
argument_list|(
name|Discovery
operator|.
name|class
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|String
name|nodeId
init|=
name|discovery
operator|.
name|localNode
argument_list|()
operator|.
name|getId
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|nodeId
argument_list|,
name|not
argument_list|(
name|nullValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|nodeId
return|;
block|}
annotation|@
name|Slow
annotation|@
name|Nightly
annotation|@
name|Test
DECL|method|testIndexLifecycleActionsWith11Shards0Backup
specifier|public
name|void
name|testIndexLifecycleActionsWith11Shards0Backup
parameter_list|()
throws|throws
name|Exception
block|{
name|Settings
name|settings
init|=
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
literal|11
argument_list|)
operator|.
name|put
argument_list|(
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
literal|0
argument_list|)
operator|.
name|put
argument_list|(
literal|"cluster.routing.schedule"
argument_list|,
literal|"20ms"
argument_list|)
comment|// reroute every 20ms so we identify new nodes fast
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// start one server
name|logger
operator|.
name|info
argument_list|(
literal|"Starting server1"
argument_list|)
expr_stmt|;
specifier|final
name|String
name|server_1
init|=
name|cluster
argument_list|()
operator|.
name|startNode
argument_list|(
name|settings
argument_list|)
decl_stmt|;
specifier|final
name|String
name|node1
init|=
name|getLocalNodeId
argument_list|(
name|server_1
argument_list|)
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Creating index [test]"
argument_list|)
expr_stmt|;
name|CreateIndexResponse
name|createIndexResponse
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|create
argument_list|(
name|createIndexRequest
argument_list|(
literal|"test"
argument_list|)
argument_list|)
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|createIndexResponse
operator|.
name|isAcknowledged
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Running Cluster Health"
argument_list|)
expr_stmt|;
name|ClusterHealthResponse
name|clusterHealth
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|health
argument_list|(
name|clusterHealthRequest
argument_list|()
operator|.
name|waitForGreenStatus
argument_list|()
argument_list|)
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Done Cluster Health, status "
operator|+
name|clusterHealth
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterHealth
operator|.
name|isTimedOut
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterHealth
operator|.
name|getStatus
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|ClusterHealthStatus
operator|.
name|GREEN
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterHealth
operator|.
name|getRelocatingShards
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterHealth
operator|.
name|getActiveShards
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|11
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterHealth
operator|.
name|getActivePrimaryShards
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|11
argument_list|)
argument_list|)
expr_stmt|;
name|ClusterState
name|clusterState
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|getState
argument_list|()
decl_stmt|;
name|assertNodesPresent
argument_list|(
name|clusterState
operator|.
name|readOnlyRoutingNodes
argument_list|()
argument_list|,
name|node1
argument_list|)
expr_stmt|;
name|RoutingNode
name|routingNodeEntry1
init|=
name|clusterState
operator|.
name|readOnlyRoutingNodes
argument_list|()
operator|.
name|node
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|routingNodeEntry1
operator|.
name|numberOfShardsWithState
argument_list|(
name|STARTED
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|11
argument_list|)
argument_list|)
expr_stmt|;
comment|// start another server
name|logger
operator|.
name|info
argument_list|(
literal|"Starting server2"
argument_list|)
expr_stmt|;
specifier|final
name|String
name|server_2
init|=
name|cluster
argument_list|()
operator|.
name|startNode
argument_list|(
name|settings
argument_list|)
decl_stmt|;
comment|// first wait for 2 nodes in the cluster
name|clusterHealth
operator|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|health
argument_list|(
name|clusterHealthRequest
argument_list|()
operator|.
name|waitForGreenStatus
argument_list|()
operator|.
name|waitForNodes
argument_list|(
literal|"2"
argument_list|)
argument_list|)
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|clusterHealth
operator|.
name|isTimedOut
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterHealth
operator|.
name|getStatus
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|ClusterHealthStatus
operator|.
name|GREEN
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|String
name|node2
init|=
name|getLocalNodeId
argument_list|(
name|server_2
argument_list|)
decl_stmt|;
comment|// explicitly call reroute, so shards will get relocated to the new node (we delay it in ES in case other nodes join)
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareReroute
argument_list|()
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|clusterHealth
operator|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|health
argument_list|(
name|clusterHealthRequest
argument_list|()
operator|.
name|waitForGreenStatus
argument_list|()
operator|.
name|waitForRelocatingShards
argument_list|(
literal|0
argument_list|)
operator|.
name|waitForNodes
argument_list|(
literal|"2"
argument_list|)
argument_list|)
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|clusterHealth
operator|.
name|isTimedOut
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterHealth
operator|.
name|getStatus
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|ClusterHealthStatus
operator|.
name|GREEN
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterHealth
operator|.
name|getNumberOfDataNodes
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterHealth
operator|.
name|getInitializingShards
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterHealth
operator|.
name|getUnassignedShards
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterHealth
operator|.
name|getRelocatingShards
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterHealth
operator|.
name|getActiveShards
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|11
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterHealth
operator|.
name|getActivePrimaryShards
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|11
argument_list|)
argument_list|)
expr_stmt|;
name|clusterState
operator|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|getState
argument_list|()
expr_stmt|;
name|assertNodesPresent
argument_list|(
name|clusterState
operator|.
name|readOnlyRoutingNodes
argument_list|()
argument_list|,
name|node1
argument_list|,
name|node2
argument_list|)
expr_stmt|;
name|routingNodeEntry1
operator|=
name|clusterState
operator|.
name|readOnlyRoutingNodes
argument_list|()
operator|.
name|node
argument_list|(
name|node1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|routingNodeEntry1
operator|.
name|numberOfShardsWithState
argument_list|(
name|RELOCATING
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|routingNodeEntry1
operator|.
name|numberOfShardsWithState
argument_list|(
name|STARTED
argument_list|)
argument_list|,
name|anyOf
argument_list|(
name|equalTo
argument_list|(
literal|6
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|5
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|RoutingNode
name|routingNodeEntry2
init|=
name|clusterState
operator|.
name|readOnlyRoutingNodes
argument_list|()
operator|.
name|node
argument_list|(
name|node2
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|routingNodeEntry2
operator|.
name|numberOfShardsWithState
argument_list|(
name|INITIALIZING
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|routingNodeEntry2
operator|.
name|numberOfShardsWithState
argument_list|(
name|STARTED
argument_list|)
argument_list|,
name|anyOf
argument_list|(
name|equalTo
argument_list|(
literal|5
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|6
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// start another server
name|logger
operator|.
name|info
argument_list|(
literal|"Starting server3"
argument_list|)
expr_stmt|;
specifier|final
name|String
name|server_3
init|=
name|cluster
argument_list|()
operator|.
name|startNode
argument_list|()
decl_stmt|;
comment|// first wait for 3 nodes in the cluster
name|clusterHealth
operator|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|health
argument_list|(
name|clusterHealthRequest
argument_list|()
operator|.
name|waitForGreenStatus
argument_list|()
operator|.
name|waitForNodes
argument_list|(
literal|"3"
argument_list|)
argument_list|)
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|clusterHealth
operator|.
name|isTimedOut
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterHealth
operator|.
name|getStatus
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|ClusterHealthStatus
operator|.
name|GREEN
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|String
name|node3
init|=
name|getLocalNodeId
argument_list|(
name|server_3
argument_list|)
decl_stmt|;
comment|// explicitly call reroute, so shards will get relocated to the new node (we delay it in ES in case other nodes join)
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareReroute
argument_list|()
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|clusterHealth
operator|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|health
argument_list|(
name|clusterHealthRequest
argument_list|()
operator|.
name|waitForGreenStatus
argument_list|()
operator|.
name|waitForNodes
argument_list|(
literal|"3"
argument_list|)
operator|.
name|waitForRelocatingShards
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|clusterHealth
operator|.
name|isTimedOut
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterHealth
operator|.
name|getStatus
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|ClusterHealthStatus
operator|.
name|GREEN
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterHealth
operator|.
name|getNumberOfDataNodes
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterHealth
operator|.
name|getInitializingShards
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterHealth
operator|.
name|getUnassignedShards
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterHealth
operator|.
name|getRelocatingShards
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterHealth
operator|.
name|getActiveShards
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|11
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterHealth
operator|.
name|getActivePrimaryShards
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|11
argument_list|)
argument_list|)
expr_stmt|;
name|clusterState
operator|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|getState
argument_list|()
expr_stmt|;
name|assertNodesPresent
argument_list|(
name|clusterState
operator|.
name|readOnlyRoutingNodes
argument_list|()
argument_list|,
name|node1
argument_list|,
name|node2
argument_list|,
name|node3
argument_list|)
expr_stmt|;
name|routingNodeEntry1
operator|=
name|clusterState
operator|.
name|readOnlyRoutingNodes
argument_list|()
operator|.
name|node
argument_list|(
name|node1
argument_list|)
expr_stmt|;
name|routingNodeEntry2
operator|=
name|clusterState
operator|.
name|readOnlyRoutingNodes
argument_list|()
operator|.
name|node
argument_list|(
name|node2
argument_list|)
expr_stmt|;
name|RoutingNode
name|routingNodeEntry3
init|=
name|clusterState
operator|.
name|readOnlyRoutingNodes
argument_list|()
operator|.
name|node
argument_list|(
name|node3
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|routingNodeEntry1
operator|.
name|numberOfShardsWithState
argument_list|(
name|STARTED
argument_list|)
operator|+
name|routingNodeEntry2
operator|.
name|numberOfShardsWithState
argument_list|(
name|STARTED
argument_list|)
operator|+
name|routingNodeEntry3
operator|.
name|numberOfShardsWithState
argument_list|(
name|STARTED
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|11
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|routingNodeEntry1
operator|.
name|numberOfShardsWithState
argument_list|(
name|RELOCATING
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|routingNodeEntry1
operator|.
name|numberOfShardsWithState
argument_list|(
name|STARTED
argument_list|)
argument_list|,
name|anyOf
argument_list|(
name|equalTo
argument_list|(
literal|5
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|4
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|routingNodeEntry2
operator|.
name|numberOfShardsWithState
argument_list|(
name|RELOCATING
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|routingNodeEntry2
operator|.
name|numberOfShardsWithState
argument_list|(
name|STARTED
argument_list|)
argument_list|,
name|anyOf
argument_list|(
name|equalTo
argument_list|(
literal|5
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|4
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|routingNodeEntry3
operator|.
name|numberOfShardsWithState
argument_list|(
name|INITIALIZING
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|routingNodeEntry3
operator|.
name|numberOfShardsWithState
argument_list|(
name|STARTED
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareUpdateSettings
argument_list|()
operator|.
name|setTransientSettings
argument_list|(
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"discovery.zen.minimum_master_nodes"
argument_list|,
literal|2
argument_list|)
argument_list|)
comment|// we are shutting down a node - make sure we don't have 2 clusters if we test network
operator|.
name|get
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Closing server1"
argument_list|)
expr_stmt|;
comment|// kill the first server
name|cluster
argument_list|()
operator|.
name|stopRandomNode
argument_list|(
name|TestCluster
operator|.
name|nameFilter
argument_list|(
name|server_1
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Running Cluster Health"
argument_list|)
expr_stmt|;
name|clusterHealth
operator|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|health
argument_list|(
name|clusterHealthRequest
argument_list|()
operator|.
name|waitForGreenStatus
argument_list|()
operator|.
name|waitForNodes
argument_list|(
literal|"2"
argument_list|)
argument_list|)
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Done Cluster Health, status "
operator|+
name|clusterHealth
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterHealth
operator|.
name|isTimedOut
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterHealth
operator|.
name|getStatus
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|ClusterHealthStatus
operator|.
name|GREEN
argument_list|)
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareReroute
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Running Cluster Health"
argument_list|)
expr_stmt|;
name|clusterHealth
operator|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|health
argument_list|(
name|clusterHealthRequest
argument_list|()
operator|.
name|waitForGreenStatus
argument_list|()
operator|.
name|waitForNodes
argument_list|(
literal|"2"
argument_list|)
operator|.
name|waitForRelocatingShards
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Done Cluster Health, status "
operator|+
name|clusterHealth
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterHealth
operator|.
name|isTimedOut
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterHealth
operator|.
name|getStatus
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|ClusterHealthStatus
operator|.
name|GREEN
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterHealth
operator|.
name|getRelocatingShards
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterHealth
operator|.
name|getActiveShards
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|11
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterHealth
operator|.
name|getActivePrimaryShards
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|11
argument_list|)
argument_list|)
expr_stmt|;
name|clusterState
operator|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|getState
argument_list|()
expr_stmt|;
name|assertNodesPresent
argument_list|(
name|clusterState
operator|.
name|readOnlyRoutingNodes
argument_list|()
argument_list|,
name|node3
argument_list|,
name|node2
argument_list|)
expr_stmt|;
name|routingNodeEntry2
operator|=
name|clusterState
operator|.
name|readOnlyRoutingNodes
argument_list|()
operator|.
name|node
argument_list|(
name|node2
argument_list|)
expr_stmt|;
name|routingNodeEntry3
operator|=
name|clusterState
operator|.
name|readOnlyRoutingNodes
argument_list|()
operator|.
name|node
argument_list|(
name|node3
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|routingNodeEntry2
operator|.
name|numberOfShardsWithState
argument_list|(
name|STARTED
argument_list|)
operator|+
name|routingNodeEntry3
operator|.
name|numberOfShardsWithState
argument_list|(
name|STARTED
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|11
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|routingNodeEntry2
operator|.
name|numberOfShardsWithState
argument_list|(
name|RELOCATING
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|routingNodeEntry2
operator|.
name|numberOfShardsWithState
argument_list|(
name|INITIALIZING
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|routingNodeEntry2
operator|.
name|numberOfShardsWithState
argument_list|(
name|STARTED
argument_list|)
argument_list|,
name|anyOf
argument_list|(
name|equalTo
argument_list|(
literal|5
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|6
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|routingNodeEntry3
operator|.
name|numberOfShardsWithState
argument_list|(
name|RELOCATING
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|routingNodeEntry3
operator|.
name|numberOfShardsWithState
argument_list|(
name|INITIALIZING
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|routingNodeEntry3
operator|.
name|numberOfShardsWithState
argument_list|(
name|STARTED
argument_list|)
argument_list|,
name|anyOf
argument_list|(
name|equalTo
argument_list|(
literal|5
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|6
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Deleting index [test]"
argument_list|)
expr_stmt|;
comment|// last, lets delete the index
name|DeleteIndexResponse
name|deleteIndexResponse
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|delete
argument_list|(
name|deleteIndexRequest
argument_list|(
literal|"test"
argument_list|)
argument_list|)
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|deleteIndexResponse
operator|.
name|isAcknowledged
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|clusterState
operator|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|getState
argument_list|()
expr_stmt|;
name|assertNodesPresent
argument_list|(
name|clusterState
operator|.
name|readOnlyRoutingNodes
argument_list|()
argument_list|,
name|node3
argument_list|,
name|node2
argument_list|)
expr_stmt|;
name|routingNodeEntry2
operator|=
name|clusterState
operator|.
name|readOnlyRoutingNodes
argument_list|()
operator|.
name|node
argument_list|(
name|node2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|routingNodeEntry2
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|routingNodeEntry3
operator|=
name|clusterState
operator|.
name|readOnlyRoutingNodes
argument_list|()
operator|.
name|node
argument_list|(
name|node3
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|routingNodeEntry3
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertNodesPresent
specifier|private
name|void
name|assertNodesPresent
parameter_list|(
name|RoutingNodes
name|routingNodes
parameter_list|,
name|String
modifier|...
name|nodes
parameter_list|)
block|{
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|keySet
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
name|Iterables
operator|.
name|transform
argument_list|(
name|routingNodes
argument_list|,
operator|new
name|Function
argument_list|<
name|RoutingNode
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|apply
parameter_list|(
name|RoutingNode
name|input
parameter_list|)
block|{
return|return
name|input
operator|.
name|nodeId
argument_list|()
return|;
block|}
block|}
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|keySet
argument_list|,
name|containsInAnyOrder
argument_list|(
name|nodes
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

