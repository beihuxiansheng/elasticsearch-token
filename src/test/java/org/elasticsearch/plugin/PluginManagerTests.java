begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.plugin
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|plugin
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchTimeoutException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|node
operator|.
name|info
operator|.
name|NodesInfoResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|Tuple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|FileSystemUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|Environment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|http
operator|.
name|HttpServerTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|node
operator|.
name|internal
operator|.
name|InternalSettingsPreparer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
operator|.
name|PluginManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|helper
operator|.
name|HttpClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|helper
operator|.
name|HttpClientResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchIntegrationTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchIntegrationTest
operator|.
name|ClusterScope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchIntegrationTest
operator|.
name|Scope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|junit
operator|.
name|annotations
operator|.
name|Network
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|*
import|;
end_import

begin_class
annotation|@
name|ClusterScope
argument_list|(
name|scope
operator|=
name|Scope
operator|.
name|TEST
argument_list|,
name|numNodes
operator|=
literal|0
argument_list|,
name|transportClientRatio
operator|=
literal|0.0
argument_list|)
DECL|class|PluginManagerTests
specifier|public
class|class
name|PluginManagerTests
extends|extends
name|ElasticsearchIntegrationTest
block|{
DECL|field|SETTINGS
specifier|private
specifier|static
specifier|final
name|Settings
name|SETTINGS
init|=
name|ImmutableSettings
operator|.
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"discovery.zen.ping.multicast.enabled"
argument_list|,
literal|false
argument_list|)
operator|.
name|put
argument_list|(
literal|"force.http.enabled"
argument_list|,
literal|true
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
DECL|field|PLUGIN_DIR
specifier|private
specifier|static
specifier|final
name|String
name|PLUGIN_DIR
init|=
literal|"plugins"
decl_stmt|;
annotation|@
name|After
DECL|method|afterTest
specifier|public
name|void
name|afterTest
parameter_list|()
block|{
name|deletePluginsFolder
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|beforeTest
specifier|public
name|void
name|beforeTest
parameter_list|()
block|{
name|deletePluginsFolder
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLocalPluginInstallSingleFolder
specifier|public
name|void
name|testLocalPluginInstallSingleFolder
parameter_list|()
throws|throws
name|Exception
block|{
comment|//When we have only a folder in top-level (no files either) we remove that folder while extracting
name|String
name|pluginName
init|=
literal|"plugin-test"
decl_stmt|;
name|URL
name|url
init|=
name|PluginManagerTests
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"plugin_single_folder.zip"
argument_list|)
decl_stmt|;
name|downloadAndExtract
argument_list|(
name|pluginName
argument_list|,
literal|"file://"
operator|+
name|url
operator|.
name|getFile
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|nodeName
init|=
name|cluster
argument_list|()
operator|.
name|startNode
argument_list|(
name|SETTINGS
argument_list|)
decl_stmt|;
name|assertPluginLoaded
argument_list|(
name|pluginName
argument_list|)
expr_stmt|;
name|assertPluginAvailable
argument_list|(
name|nodeName
argument_list|,
name|pluginName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLocalPluginInstallSiteFolder
specifier|public
name|void
name|testLocalPluginInstallSiteFolder
parameter_list|()
throws|throws
name|Exception
block|{
comment|//When we have only a folder in top-level (no files either) but it's called _site, we make it work
comment|//we can either remove the folder while extracting and then re-add it manually or just leave it as it is
name|String
name|pluginName
init|=
literal|"plugin-test"
decl_stmt|;
name|URL
name|url
init|=
name|PluginManagerTests
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"plugin_folder_site.zip"
argument_list|)
decl_stmt|;
name|downloadAndExtract
argument_list|(
name|pluginName
argument_list|,
literal|"file://"
operator|+
name|url
operator|.
name|getFile
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|nodeName
init|=
name|cluster
argument_list|()
operator|.
name|startNode
argument_list|(
name|SETTINGS
argument_list|)
decl_stmt|;
name|assertPluginLoaded
argument_list|(
name|pluginName
argument_list|)
expr_stmt|;
name|assertPluginAvailable
argument_list|(
name|nodeName
argument_list|,
name|pluginName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLocalPluginWithoutFolders
specifier|public
name|void
name|testLocalPluginWithoutFolders
parameter_list|()
throws|throws
name|Exception
block|{
comment|//When we don't have folders at all in the top-level, but only files, we don't modify anything
name|String
name|pluginName
init|=
literal|"plugin-test"
decl_stmt|;
name|URL
name|url
init|=
name|PluginManagerTests
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"plugin_without_folders.zip"
argument_list|)
decl_stmt|;
name|downloadAndExtract
argument_list|(
name|pluginName
argument_list|,
literal|"file://"
operator|+
name|url
operator|.
name|getFile
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|nodeName
init|=
name|cluster
argument_list|()
operator|.
name|startNode
argument_list|(
name|SETTINGS
argument_list|)
decl_stmt|;
name|assertPluginLoaded
argument_list|(
name|pluginName
argument_list|)
expr_stmt|;
name|assertPluginAvailable
argument_list|(
name|nodeName
argument_list|,
name|pluginName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLocalPluginFolderAndFile
specifier|public
name|void
name|testLocalPluginFolderAndFile
parameter_list|()
throws|throws
name|Exception
block|{
comment|//When we have a single top-level folder but also files in the top-level, we don't modify anything
name|String
name|pluginName
init|=
literal|"plugin-test"
decl_stmt|;
name|URL
name|url
init|=
name|PluginManagerTests
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"plugin_folder_file.zip"
argument_list|)
decl_stmt|;
name|downloadAndExtract
argument_list|(
name|pluginName
argument_list|,
literal|"file://"
operator|+
name|url
operator|.
name|getFile
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|nodeName
init|=
name|cluster
argument_list|()
operator|.
name|startNode
argument_list|(
name|SETTINGS
argument_list|)
decl_stmt|;
name|assertPluginLoaded
argument_list|(
name|pluginName
argument_list|)
expr_stmt|;
name|assertPluginAvailable
argument_list|(
name|nodeName
argument_list|,
name|pluginName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|testSitePluginWithSourceThrows
specifier|public
name|void
name|testSitePluginWithSourceThrows
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|pluginName
init|=
literal|"plugin-with-source"
decl_stmt|;
name|URL
name|url
init|=
name|PluginManagerTests
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"plugin_with_sourcefiles.zip"
argument_list|)
decl_stmt|;
name|downloadAndExtract
argument_list|(
name|pluginName
argument_list|,
literal|"file://"
operator|+
name|url
operator|.
name|getFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * We build a plugin manager instance which wait only for 30 seconds before      * raising an ElasticsearchTimeoutException      */
DECL|method|pluginManager
specifier|private
specifier|static
name|PluginManager
name|pluginManager
parameter_list|(
name|String
name|pluginUrl
parameter_list|)
block|{
name|Tuple
argument_list|<
name|Settings
argument_list|,
name|Environment
argument_list|>
name|initialSettings
init|=
name|InternalSettingsPreparer
operator|.
name|prepareSettings
argument_list|(
name|ImmutableSettings
operator|.
name|settingsBuilder
argument_list|()
operator|.
name|build
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|initialSettings
operator|.
name|v2
argument_list|()
operator|.
name|pluginsFile
argument_list|()
operator|.
name|exists
argument_list|()
condition|)
block|{
name|FileSystemUtils
operator|.
name|mkdirs
argument_list|(
name|initialSettings
operator|.
name|v2
argument_list|()
operator|.
name|pluginsFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|PluginManager
argument_list|(
name|initialSettings
operator|.
name|v2
argument_list|()
argument_list|,
name|pluginUrl
argument_list|,
name|PluginManager
operator|.
name|OutputMode
operator|.
name|SILENT
argument_list|,
name|TimeValue
operator|.
name|timeValueSeconds
argument_list|(
literal|30
argument_list|)
argument_list|)
return|;
block|}
DECL|method|downloadAndExtract
specifier|private
specifier|static
name|void
name|downloadAndExtract
parameter_list|(
name|String
name|pluginName
parameter_list|,
name|String
name|pluginUrl
parameter_list|)
throws|throws
name|IOException
block|{
name|pluginManager
argument_list|(
name|pluginUrl
argument_list|)
operator|.
name|downloadAndExtract
argument_list|(
name|pluginName
argument_list|)
expr_stmt|;
block|}
DECL|method|assertPluginLoaded
specifier|private
name|void
name|assertPluginLoaded
parameter_list|(
name|String
name|pluginName
parameter_list|)
block|{
name|NodesInfoResponse
name|nodesInfoResponse
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareNodesInfo
argument_list|()
operator|.
name|clear
argument_list|()
operator|.
name|setPlugin
argument_list|(
literal|true
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|nodesInfoResponse
operator|.
name|getNodes
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|nodesInfoResponse
operator|.
name|getNodes
argument_list|()
index|[
literal|0
index|]
operator|.
name|getPlugins
argument_list|()
operator|.
name|getInfos
argument_list|()
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|nodesInfoResponse
operator|.
name|getNodes
argument_list|()
index|[
literal|0
index|]
operator|.
name|getPlugins
argument_list|()
operator|.
name|getInfos
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|nodesInfoResponse
operator|.
name|getNodes
argument_list|()
index|[
literal|0
index|]
operator|.
name|getPlugins
argument_list|()
operator|.
name|getInfos
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|pluginName
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|nodesInfoResponse
operator|.
name|getNodes
argument_list|()
index|[
literal|0
index|]
operator|.
name|getPlugins
argument_list|()
operator|.
name|getInfos
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isSite
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertPluginAvailable
specifier|private
name|void
name|assertPluginAvailable
parameter_list|(
name|String
name|nodeName
parameter_list|,
name|String
name|pluginName
parameter_list|)
block|{
name|HttpServerTransport
name|httpServerTransport
init|=
name|cluster
argument_list|()
operator|.
name|getInstance
argument_list|(
name|HttpServerTransport
operator|.
name|class
argument_list|)
decl_stmt|;
name|HttpClient
name|httpClient
init|=
operator|new
name|HttpClient
argument_list|(
name|httpServerTransport
operator|.
name|boundAddress
argument_list|()
operator|.
name|publishAddress
argument_list|()
argument_list|)
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> tested http address [{}]"
argument_list|,
name|httpServerTransport
operator|.
name|info
argument_list|()
operator|.
name|getAddress
argument_list|()
argument_list|)
expr_stmt|;
comment|//checking that the http connector is working properly
name|HttpClientResponse
name|response
init|=
name|checkHttpResponseOK
argument_list|(
name|httpClient
argument_list|,
name|nodeName
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|response
argument_list|()
argument_list|,
name|containsString
argument_list|(
name|nodeName
argument_list|)
argument_list|)
expr_stmt|;
comment|//checking now that the plugin is available
name|checkHttpResponseOK
argument_list|(
name|httpClient
argument_list|,
name|nodeName
argument_list|,
literal|"_plugin/"
operator|+
name|pluginName
operator|+
literal|"/"
argument_list|)
expr_stmt|;
block|}
DECL|method|checkHttpResponseOK
specifier|private
name|HttpClientResponse
name|checkHttpResponseOK
parameter_list|(
name|HttpClient
name|httpClient
parameter_list|,
name|String
name|nodeName
parameter_list|,
name|String
name|url
parameter_list|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"--> trying node [{}], url [/{}]"
argument_list|,
name|nodeName
argument_list|,
name|url
argument_list|)
expr_stmt|;
name|HttpClientResponse
name|response
init|=
name|httpClient
operator|.
name|request
argument_list|(
name|url
argument_list|)
decl_stmt|;
if|if
condition|(
name|response
operator|.
name|errorCode
argument_list|()
operator|!=
name|RestStatus
operator|.
name|OK
operator|.
name|getStatus
argument_list|()
condition|)
block|{
comment|// We want to trace what's going on here before failing the test
name|logger
operator|.
name|info
argument_list|(
literal|"--> error caught [{}], headers [{}]"
argument_list|,
name|response
operator|.
name|errorCode
argument_list|()
argument_list|,
name|response
operator|.
name|getHeaders
argument_list|()
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> cluster state [{}]"
argument_list|,
name|cluster
argument_list|()
operator|.
name|clusterService
argument_list|()
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|response
operator|.
name|errorCode
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|RestStatus
operator|.
name|OK
operator|.
name|getStatus
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
annotation|@
name|Test
DECL|method|testListInstalledEmpty
specifier|public
name|void
name|testListInstalledEmpty
parameter_list|()
throws|throws
name|IOException
block|{
name|File
index|[]
name|plugins
init|=
name|pluginManager
argument_list|(
literal|null
argument_list|)
operator|.
name|getListInstalledPlugins
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|plugins
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|plugins
operator|.
name|length
argument_list|,
name|is
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IOException
operator|.
name|class
argument_list|)
DECL|method|testInstallPluginNull
specifier|public
name|void
name|testInstallPluginNull
parameter_list|()
throws|throws
name|IOException
block|{
name|pluginManager
argument_list|(
literal|null
argument_list|)
operator|.
name|downloadAndExtract
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInstallPlugin
specifier|public
name|void
name|testInstallPlugin
parameter_list|()
throws|throws
name|IOException
block|{
name|PluginManager
name|pluginManager
init|=
name|pluginManager
argument_list|(
literal|"file://"
operator|.
name|concat
argument_list|(
name|PluginManagerTests
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"plugin_with_classfile.zip"
argument_list|)
operator|.
name|getFile
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|pluginManager
operator|.
name|downloadAndExtract
argument_list|(
literal|"plugin"
argument_list|)
expr_stmt|;
name|File
index|[]
name|plugins
init|=
name|pluginManager
operator|.
name|getListInstalledPlugins
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|plugins
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|plugins
operator|.
name|length
argument_list|,
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInstallSitePlugin
specifier|public
name|void
name|testInstallSitePlugin
parameter_list|()
throws|throws
name|IOException
block|{
name|PluginManager
name|pluginManager
init|=
name|pluginManager
argument_list|(
literal|"file://"
operator|.
name|concat
argument_list|(
name|PluginManagerTests
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"plugin_without_folders.zip"
argument_list|)
operator|.
name|getFile
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|pluginManager
operator|.
name|downloadAndExtract
argument_list|(
literal|"plugin-site"
argument_list|)
expr_stmt|;
name|File
index|[]
name|plugins
init|=
name|pluginManager
operator|.
name|getListInstalledPlugins
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|plugins
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|plugins
operator|.
name|length
argument_list|,
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// We want to check that Plugin Manager moves content to _site
name|String
name|pluginDir
init|=
name|PLUGIN_DIR
operator|.
name|concat
argument_list|(
literal|"/plugin-site/_site"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|FileSystemUtils
operator|.
name|exists
argument_list|(
operator|new
name|File
argument_list|(
name|pluginDir
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|singlePluginInstallAndRemove
specifier|private
name|void
name|singlePluginInstallAndRemove
parameter_list|(
name|String
name|pluginShortName
parameter_list|,
name|String
name|pluginCoordinates
parameter_list|)
throws|throws
name|IOException
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"--> trying to download and install [{}]"
argument_list|,
name|pluginShortName
argument_list|)
expr_stmt|;
name|PluginManager
name|pluginManager
init|=
name|pluginManager
argument_list|(
name|pluginCoordinates
argument_list|)
decl_stmt|;
try|try
block|{
name|pluginManager
operator|.
name|downloadAndExtract
argument_list|(
name|pluginShortName
argument_list|)
expr_stmt|;
name|File
index|[]
name|plugins
init|=
name|pluginManager
operator|.
name|getListInstalledPlugins
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|plugins
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|plugins
operator|.
name|length
argument_list|,
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// We remove it
name|pluginManager
operator|.
name|removePlugin
argument_list|(
name|pluginShortName
argument_list|)
expr_stmt|;
name|plugins
operator|=
name|pluginManager
operator|.
name|getListInstalledPlugins
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|plugins
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|plugins
operator|.
name|length
argument_list|,
name|is
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"--> IOException raised while downloading plugin [{}]. Skipping test."
argument_list|,
name|e
argument_list|,
name|pluginShortName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ElasticsearchTimeoutException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"--> timeout exception raised while downloading plugin [{}]. Skipping test."
argument_list|,
name|pluginShortName
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * We are ignoring by default these tests as they require to have an internet access      * To activate the test, use -Dtests.network=true      */
annotation|@
name|Test
annotation|@
name|Network
DECL|method|testInstallPluginWithInternet
specifier|public
name|void
name|testInstallPluginWithInternet
parameter_list|()
throws|throws
name|IOException
block|{
comment|// We test regular form: username/reponame/version
comment|// It should find it in download.elasticsearch.org service
name|singlePluginInstallAndRemove
argument_list|(
literal|"elasticsearch/elasticsearch-transport-thrift/1.5.0"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// We test regular form: groupId/artifactId/version
comment|// It should find it in maven central service
name|singlePluginInstallAndRemove
argument_list|(
literal|"org.elasticsearch/elasticsearch-transport-thrift/1.5.0"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// We test site plugins from github: userName/repoName
comment|// It should find it on github
name|singlePluginInstallAndRemove
argument_list|(
literal|"elasticsearch/kibana"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|deletePluginsFolder
specifier|private
name|void
name|deletePluginsFolder
parameter_list|()
block|{
name|FileSystemUtils
operator|.
name|deleteRecursively
argument_list|(
operator|new
name|File
argument_list|(
name|PLUGIN_DIR
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRemovePlugin
specifier|public
name|void
name|testRemovePlugin
parameter_list|()
throws|throws
name|Exception
block|{
comment|// We want to remove plugin with plugin short name
name|singlePluginInstallAndRemove
argument_list|(
literal|"plugintest"
argument_list|,
literal|"file://"
operator|.
name|concat
argument_list|(
name|PluginManagerTests
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"plugin_without_folders.zip"
argument_list|)
operator|.
name|getFile
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// We want to remove plugin with groupid/artifactid/version form
name|singlePluginInstallAndRemove
argument_list|(
literal|"groupid/plugintest/1.0.0"
argument_list|,
literal|"file://"
operator|.
name|concat
argument_list|(
name|PluginManagerTests
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"plugin_without_folders.zip"
argument_list|)
operator|.
name|getFile
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// We want to remove plugin with groupid/artifactid form
name|singlePluginInstallAndRemove
argument_list|(
literal|"groupid/plugintest"
argument_list|,
literal|"file://"
operator|.
name|concat
argument_list|(
name|PluginManagerTests
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"plugin_without_folders.zip"
argument_list|)
operator|.
name|getFile
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|ElasticsearchIllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|testRemovePluginWithURLForm
specifier|public
name|void
name|testRemovePluginWithURLForm
parameter_list|()
throws|throws
name|Exception
block|{
name|PluginManager
name|pluginManager
init|=
name|pluginManager
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|pluginManager
operator|.
name|removePlugin
argument_list|(
literal|"file://whatever"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

