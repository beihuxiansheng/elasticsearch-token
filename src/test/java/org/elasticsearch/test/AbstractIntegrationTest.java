begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.test
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|test
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
operator|.
name|Builder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterators
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|AbstractRandomizedTest
operator|.
name|IntegrationTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ShardOperationFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|health
operator|.
name|ClusterHealthRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|health
operator|.
name|ClusterHealthResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|health
operator|.
name|ClusterHealthStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|create
operator|.
name|CreateIndexRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|exists
operator|.
name|indices
operator|.
name|IndicesExistsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|flush
operator|.
name|FlushResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|optimize
operator|.
name|OptimizeResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|refresh
operator|.
name|RefreshResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|get
operator|.
name|GetResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|index
operator|.
name|IndexRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|index
operator|.
name|IndexResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|ClearScrollResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|IgnoreIndices
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|broadcast
operator|.
name|BroadcastOperationRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|broadcast
operator|.
name|BroadcastOperationResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|AdminClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|Requests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|MetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|GroupShardsIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRouting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|IndexAlreadyExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|IndexMissingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|IndexTemplateMissingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|ElementType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Retention
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|RetentionPolicy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Target
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticSearchAssertions
operator|.
name|assertAcked
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticSearchAssertions
operator|.
name|assertNoFailures
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|emptyIterable
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_comment
comment|/**  * This abstract base testcase reuses a cluster instance internally and might  * start an abitrary number of nodes in the background. This class might in the  * future add random configureation options to created indices etc. unless  * unless they are explicitly defined by the test.  *<p/>  *<p>  * This test wipes all indices before a testcase is executed and uses  * elasticsearch features like allocation filters to ensure an index is  * allocated only on a certain number of nodes. The test doesn't expose explicit  * information about the client or which client is returned, clients might be  * node clients or transport clients and the returned client might be rotated.  *</p>  *<p/>  * Tests that need more explict control over the cluster or that need to change  * the cluster state aside of per-index settings should not use this class as a  * baseclass. If your test modifies the cluster state with persistent or  * transient settings the baseclass will raise and error.  */
end_comment

begin_class
annotation|@
name|Ignore
annotation|@
name|IntegrationTests
DECL|class|AbstractIntegrationTest
specifier|public
specifier|abstract
class|class
name|AbstractIntegrationTest
extends|extends
name|ElasticSearchTestCase
block|{
DECL|field|globalCluster
specifier|private
specifier|static
specifier|final
name|TestCluster
name|globalCluster
init|=
operator|new
name|TestCluster
argument_list|(
name|SHARED_CLUSTER_SEED
argument_list|,
name|TestCluster
operator|.
name|clusterName
argument_list|(
literal|"shared"
argument_list|,
name|ElasticSearchTestCase
operator|.
name|CHILD_VM_ID
argument_list|,
name|SHARED_CLUSTER_SEED
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|currentCluster
specifier|private
specifier|static
name|TestCluster
name|currentCluster
decl_stmt|;
DECL|field|clusters
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|TestCluster
argument_list|>
name|clusters
init|=
operator|new
name|IdentityHashMap
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|TestCluster
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|Before
DECL|method|before
specifier|public
specifier|final
name|void
name|before
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Scope
name|currentClusterScope
init|=
name|getCurrentClusterScope
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|currentClusterScope
condition|)
block|{
case|case
name|GLOBAL
case|:
name|clearClusters
argument_list|()
expr_stmt|;
name|currentCluster
operator|=
name|globalCluster
expr_stmt|;
break|break;
case|case
name|SUITE
case|:
name|currentCluster
operator|=
name|buildAndPutCluster
argument_list|(
name|currentClusterScope
argument_list|,
literal|false
argument_list|)
expr_stmt|;
break|break;
case|case
name|TEST
case|:
name|currentCluster
operator|=
name|buildAndPutCluster
argument_list|(
name|currentClusterScope
argument_list|,
literal|true
argument_list|)
expr_stmt|;
break|break;
default|default:
assert|assert
literal|false
operator|:
literal|"Unknonw Scope: ["
operator|+
name|currentClusterScope
operator|+
literal|"]"
assert|;
block|}
name|currentCluster
operator|.
name|beforeTest
argument_list|(
name|getRandom
argument_list|()
argument_list|)
expr_stmt|;
name|wipeIndices
argument_list|()
expr_stmt|;
name|wipeTemplates
argument_list|()
expr_stmt|;
name|randomIndexTemplate
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"[{}#{}]: before test"
argument_list|,
name|getTestClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|getTestName
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|buildAndPutCluster
specifier|public
name|TestCluster
name|buildAndPutCluster
parameter_list|(
name|Scope
name|currentClusterScope
parameter_list|,
name|boolean
name|createIfExists
parameter_list|)
throws|throws
name|IOException
block|{
name|TestCluster
name|testCluster
init|=
name|clusters
operator|.
name|get
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|createIfExists
operator|||
name|testCluster
operator|==
literal|null
condition|)
block|{
name|testCluster
operator|=
name|buildTestCluster
argument_list|(
name|currentClusterScope
argument_list|)
expr_stmt|;
block|}
else|else
block|{
assert|assert
name|testCluster
operator|!=
literal|null
assert|;
name|clusters
operator|.
name|remove
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|clearClusters
argument_list|()
expr_stmt|;
name|clusters
operator|.
name|put
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|,
name|testCluster
argument_list|)
expr_stmt|;
return|return
name|testCluster
return|;
block|}
DECL|method|clearClusters
specifier|private
name|void
name|clearClusters
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|clusters
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|IOUtils
operator|.
name|close
argument_list|(
name|clusters
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
name|clusters
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|After
DECL|method|after
specifier|public
name|void
name|after
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"[{}#{}]: cleaning up after test"
argument_list|,
name|getTestClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|getTestName
argument_list|()
argument_list|)
expr_stmt|;
name|Scope
name|currentClusterScope
init|=
name|getCurrentClusterScope
argument_list|()
decl_stmt|;
if|if
condition|(
name|currentClusterScope
operator|==
name|Scope
operator|.
name|TEST
condition|)
block|{
name|clearClusters
argument_list|()
expr_stmt|;
comment|// it is ok to leave persistent / transient cluster state behind if scope is TEST
block|}
else|else
block|{
name|MetaData
name|metaData
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
operator|.
name|getState
argument_list|()
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
literal|"test leaves persistent cluster metadata behind: "
operator|+
name|metaData
operator|.
name|persistentSettings
argument_list|()
operator|.
name|getAsMap
argument_list|()
argument_list|,
name|metaData
operator|.
name|persistentSettings
argument_list|()
operator|.
name|getAsMap
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"test leaves transient cluster metadata behind: "
operator|+
name|metaData
operator|.
name|transientSettings
argument_list|()
operator|.
name|getAsMap
argument_list|()
argument_list|,
name|metaData
operator|.
name|persistentSettings
argument_list|()
operator|.
name|getAsMap
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|wipeIndices
argument_list|()
expr_stmt|;
comment|// wipe after to make sure we fail in the test that
comment|// didn't ack the delete
name|wipeTemplates
argument_list|()
expr_stmt|;
name|ensureAllSearchersClosed
argument_list|()
expr_stmt|;
name|ensureAllFilesClosed
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"[{}#{}]: cleaned up after test"
argument_list|,
name|getTestClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|getTestName
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|currentCluster
operator|.
name|afterTest
argument_list|()
expr_stmt|;
name|currentCluster
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|cluster
specifier|public
specifier|static
name|TestCluster
name|cluster
parameter_list|()
block|{
return|return
name|currentCluster
return|;
block|}
DECL|method|clusterService
specifier|public
name|ClusterService
name|clusterService
parameter_list|()
block|{
return|return
name|cluster
argument_list|()
operator|.
name|clusterService
argument_list|()
return|;
block|}
DECL|method|client
specifier|public
specifier|static
name|Client
name|client
parameter_list|()
block|{
return|return
name|cluster
argument_list|()
operator|.
name|client
argument_list|()
return|;
block|}
DECL|method|randomIndexTemplate
specifier|private
specifier|static
name|void
name|randomIndexTemplate
parameter_list|()
block|{
if|if
condition|(
name|cluster
argument_list|()
operator|.
name|numNodes
argument_list|()
operator|>
literal|0
condition|)
block|{
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|preparePutTemplate
argument_list|(
literal|"random_index_template"
argument_list|)
operator|.
name|setTemplate
argument_list|(
literal|"*"
argument_list|)
operator|.
name|setOrder
argument_list|(
literal|0
argument_list|)
operator|.
name|setSettings
argument_list|(
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|INDEX_SEED_SETTING
argument_list|,
name|getRandom
argument_list|()
operator|.
name|nextLong
argument_list|()
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|clients
specifier|public
specifier|static
name|Iterable
argument_list|<
name|Client
argument_list|>
name|clients
parameter_list|()
block|{
return|return
name|cluster
argument_list|()
return|;
block|}
DECL|method|randomSettingsBuilder
specifier|public
name|ImmutableSettings
operator|.
name|Builder
name|randomSettingsBuilder
parameter_list|()
block|{
comment|// TODO RANDOMIZE
return|return
name|ImmutableSettings
operator|.
name|builder
argument_list|()
return|;
block|}
comment|// TODO Randomize MergePolicyProviderBase.INDEX_COMPOUND_FORMAT [true|false|"true"|"false"|[0..1]| toString([0..1])]
DECL|method|getSettings
specifier|public
name|Settings
name|getSettings
parameter_list|()
block|{
return|return
name|randomSettingsBuilder
argument_list|()
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|wipeIndices
specifier|public
specifier|static
name|void
name|wipeIndices
parameter_list|(
name|String
modifier|...
name|names
parameter_list|)
block|{
if|if
condition|(
name|cluster
argument_list|()
operator|.
name|numNodes
argument_list|()
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareDelete
argument_list|(
name|names
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexMissingException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
DECL|method|wipeIndex
specifier|public
specifier|static
name|void
name|wipeIndex
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|wipeIndices
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
comment|/**      * Deletes index templates, support wildcard notation.      */
DECL|method|wipeTemplates
specifier|public
specifier|static
name|void
name|wipeTemplates
parameter_list|(
name|String
modifier|...
name|templates
parameter_list|)
block|{
if|if
condition|(
name|cluster
argument_list|()
operator|.
name|numNodes
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// if nothing is provided, delete all
if|if
condition|(
name|templates
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|templates
operator|=
operator|new
name|String
index|[]
block|{
literal|"*"
block|}
expr_stmt|;
block|}
for|for
control|(
name|String
name|template
range|:
name|templates
control|)
block|{
try|try
block|{
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareDeleteTemplate
argument_list|(
name|template
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexTemplateMissingException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
block|}
DECL|method|createIndex
specifier|public
name|void
name|createIndex
parameter_list|(
name|String
modifier|...
name|names
parameter_list|)
block|{
for|for
control|(
name|String
name|name
range|:
name|names
control|)
block|{
try|try
block|{
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
name|name
argument_list|)
operator|.
name|setSettings
argument_list|(
name|getSettings
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
catch|catch
parameter_list|(
name|IndexAlreadyExistsException
name|ex
parameter_list|)
block|{
name|wipeIndex
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
name|name
argument_list|)
operator|.
name|setSettings
argument_list|(
name|getSettings
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|prepareCreate
specifier|public
name|CreateIndexRequestBuilder
name|prepareCreate
parameter_list|(
name|String
name|index
parameter_list|,
name|int
name|numNodes
parameter_list|)
block|{
return|return
name|prepareCreate
argument_list|(
name|index
argument_list|,
name|numNodes
argument_list|,
name|ImmutableSettings
operator|.
name|builder
argument_list|()
argument_list|)
return|;
block|}
DECL|method|prepareCreate
specifier|public
name|CreateIndexRequestBuilder
name|prepareCreate
parameter_list|(
name|String
name|index
parameter_list|,
name|int
name|numNodes
parameter_list|,
name|ImmutableSettings
operator|.
name|Builder
name|builder
parameter_list|)
block|{
name|cluster
argument_list|()
operator|.
name|ensureAtLeastNumNodes
argument_list|(
name|numNodes
argument_list|)
expr_stmt|;
name|Settings
name|settings
init|=
name|getSettings
argument_list|()
decl_stmt|;
name|builder
operator|.
name|put
argument_list|(
name|settings
argument_list|)
expr_stmt|;
if|if
condition|(
name|numNodes
operator|>
literal|0
condition|)
block|{
name|getExcludeSettings
argument_list|(
name|index
argument_list|,
name|numNodes
argument_list|,
name|builder
argument_list|)
expr_stmt|;
block|}
return|return
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
name|index
argument_list|)
operator|.
name|setSettings
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getExcludeSettings
specifier|private
name|ImmutableSettings
operator|.
name|Builder
name|getExcludeSettings
parameter_list|(
name|String
name|index
parameter_list|,
name|int
name|num
parameter_list|,
name|ImmutableSettings
operator|.
name|Builder
name|builder
parameter_list|)
block|{
name|String
name|exclude
init|=
name|Joiner
operator|.
name|on
argument_list|(
literal|','
argument_list|)
operator|.
name|join
argument_list|(
name|cluster
argument_list|()
operator|.
name|allButN
argument_list|(
name|num
argument_list|)
argument_list|)
decl_stmt|;
name|builder
operator|.
name|put
argument_list|(
literal|"index.routing.allocation.exclude._name"
argument_list|,
name|exclude
argument_list|)
expr_stmt|;
return|return
name|builder
return|;
block|}
DECL|method|getExcludeNodes
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getExcludeNodes
parameter_list|(
name|String
name|index
parameter_list|,
name|int
name|num
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|nodeExclude
init|=
name|cluster
argument_list|()
operator|.
name|nodeExclude
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|nodesInclude
init|=
name|cluster
argument_list|()
operator|.
name|nodesInclude
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodesInclude
operator|.
name|size
argument_list|()
operator|<
name|num
condition|)
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|limit
init|=
name|Iterators
operator|.
name|limit
argument_list|(
name|nodeExclude
operator|.
name|iterator
argument_list|()
argument_list|,
name|num
operator|-
name|nodesInclude
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|limit
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|limit
operator|.
name|next
argument_list|()
expr_stmt|;
name|limit
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|limit
init|=
name|Iterators
operator|.
name|limit
argument_list|(
name|nodesInclude
operator|.
name|iterator
argument_list|()
argument_list|,
name|nodesInclude
operator|.
name|size
argument_list|()
operator|-
name|num
argument_list|)
decl_stmt|;
while|while
condition|(
name|limit
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|nodeExclude
operator|.
name|add
argument_list|(
name|limit
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|limit
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|nodeExclude
return|;
block|}
DECL|method|allowNodes
specifier|public
name|void
name|allowNodes
parameter_list|(
name|String
name|index
parameter_list|,
name|int
name|numNodes
parameter_list|)
block|{
name|cluster
argument_list|()
operator|.
name|ensureAtLeastNumNodes
argument_list|(
name|numNodes
argument_list|)
expr_stmt|;
name|ImmutableSettings
operator|.
name|Builder
name|builder
init|=
name|ImmutableSettings
operator|.
name|builder
argument_list|()
decl_stmt|;
if|if
condition|(
name|numNodes
operator|>
literal|0
condition|)
block|{
name|getExcludeSettings
argument_list|(
name|index
argument_list|,
name|numNodes
argument_list|,
name|builder
argument_list|)
expr_stmt|;
block|}
name|Settings
name|build
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|build
operator|.
name|getAsMap
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareUpdateSettings
argument_list|(
name|index
argument_list|)
operator|.
name|setSettings
argument_list|(
name|build
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|prepareCreate
specifier|public
name|CreateIndexRequestBuilder
name|prepareCreate
parameter_list|(
name|String
name|index
parameter_list|)
block|{
return|return
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
name|index
argument_list|)
operator|.
name|setSettings
argument_list|(
name|getSettings
argument_list|()
argument_list|)
return|;
block|}
DECL|method|ensureGreen
specifier|public
name|ClusterHealthStatus
name|ensureGreen
parameter_list|()
block|{
name|ClusterHealthResponse
name|actionGet
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|health
argument_list|(
name|Requests
operator|.
name|clusterHealthRequest
argument_list|()
operator|.
name|waitForGreenStatus
argument_list|()
operator|.
name|waitForEvents
argument_list|(
name|Priority
operator|.
name|LANGUID
argument_list|)
operator|.
name|waitForRelocatingShards
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|actionGet
argument_list|()
decl_stmt|;
if|if
condition|(
name|actionGet
operator|.
name|isTimedOut
argument_list|()
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"ensureGreen timed out, cluster state:\n{}\n{}"
argument_list|,
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|getState
argument_list|()
operator|.
name|prettyPrint
argument_list|()
argument_list|,
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|preparePendingClusterTasks
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|prettyPrint
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"timed out waiting for green state"
argument_list|,
name|actionGet
operator|.
name|isTimedOut
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|actionGet
operator|.
name|getStatus
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|ClusterHealthStatus
operator|.
name|GREEN
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|actionGet
operator|.
name|getStatus
argument_list|()
return|;
block|}
DECL|method|waitForRelocation
specifier|public
name|ClusterHealthStatus
name|waitForRelocation
parameter_list|()
block|{
return|return
name|waitForRelocation
argument_list|(
literal|null
argument_list|)
return|;
block|}
DECL|method|waitForRelocation
specifier|public
name|ClusterHealthStatus
name|waitForRelocation
parameter_list|(
name|ClusterHealthStatus
name|status
parameter_list|)
block|{
name|ClusterHealthRequest
name|request
init|=
name|Requests
operator|.
name|clusterHealthRequest
argument_list|()
operator|.
name|waitForRelocatingShards
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
operator|!=
literal|null
condition|)
block|{
name|request
operator|.
name|waitForStatus
argument_list|(
name|status
argument_list|)
expr_stmt|;
block|}
name|ClusterHealthResponse
name|actionGet
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|health
argument_list|(
name|request
argument_list|)
operator|.
name|actionGet
argument_list|()
decl_stmt|;
if|if
condition|(
name|actionGet
operator|.
name|isTimedOut
argument_list|()
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"waitForRelocation timed out (status={}), cluster state:\n{}\n{}"
argument_list|,
name|status
argument_list|,
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|getState
argument_list|()
operator|.
name|prettyPrint
argument_list|()
argument_list|,
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|preparePendingClusterTasks
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|prettyPrint
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"timed out waiting for relocation"
argument_list|,
name|actionGet
operator|.
name|isTimedOut
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|status
operator|!=
literal|null
condition|)
block|{
name|assertThat
argument_list|(
name|actionGet
operator|.
name|getStatus
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|status
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|actionGet
operator|.
name|getStatus
argument_list|()
return|;
block|}
DECL|method|ensureYellow
specifier|public
name|ClusterHealthStatus
name|ensureYellow
parameter_list|()
block|{
name|ClusterHealthResponse
name|actionGet
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|health
argument_list|(
name|Requests
operator|.
name|clusterHealthRequest
argument_list|()
operator|.
name|waitForRelocatingShards
argument_list|(
literal|0
argument_list|)
operator|.
name|waitForYellowStatus
argument_list|()
operator|.
name|waitForEvents
argument_list|(
name|Priority
operator|.
name|LANGUID
argument_list|)
argument_list|)
operator|.
name|actionGet
argument_list|()
decl_stmt|;
if|if
condition|(
name|actionGet
operator|.
name|isTimedOut
argument_list|()
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"ensureYellow timed out, cluster state:\n{}\n{}"
argument_list|,
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|getState
argument_list|()
operator|.
name|prettyPrint
argument_list|()
argument_list|,
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|preparePendingClusterTasks
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|prettyPrint
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"timed out waiting for yellow"
argument_list|,
name|actionGet
operator|.
name|isTimedOut
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|actionGet
operator|.
name|getStatus
argument_list|()
return|;
block|}
DECL|method|commaString
specifier|public
specifier|static
name|String
name|commaString
parameter_list|(
name|Iterable
argument_list|<
name|String
argument_list|>
name|strings
parameter_list|)
block|{
return|return
name|Joiner
operator|.
name|on
argument_list|(
literal|','
argument_list|)
operator|.
name|join
argument_list|(
name|strings
argument_list|)
return|;
block|}
comment|// utils
DECL|method|index
specifier|protected
name|IndexResponse
name|index
parameter_list|(
name|String
name|index
parameter_list|,
name|String
name|type
parameter_list|,
name|XContentBuilder
name|source
parameter_list|)
block|{
return|return
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|index
argument_list|,
name|type
argument_list|)
operator|.
name|setSource
argument_list|(
name|source
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
return|;
block|}
DECL|method|index
specifier|protected
name|IndexResponse
name|index
parameter_list|(
name|String
name|index
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|id
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|source
parameter_list|)
block|{
return|return
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|index
argument_list|,
name|type
argument_list|,
name|id
argument_list|)
operator|.
name|setSource
argument_list|(
name|source
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
return|;
block|}
DECL|method|get
specifier|protected
name|GetResponse
name|get
parameter_list|(
name|String
name|index
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|id
parameter_list|)
block|{
return|return
name|client
argument_list|()
operator|.
name|prepareGet
argument_list|(
name|index
argument_list|,
name|type
argument_list|,
name|id
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
return|;
block|}
DECL|method|index
specifier|protected
name|IndexResponse
name|index
parameter_list|(
name|String
name|index
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|id
parameter_list|,
name|XContentBuilder
name|source
parameter_list|)
block|{
return|return
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|index
argument_list|,
name|type
argument_list|,
name|id
argument_list|)
operator|.
name|setSource
argument_list|(
name|source
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
return|;
block|}
DECL|method|index
specifier|protected
name|IndexResponse
name|index
parameter_list|(
name|String
name|index
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|id
parameter_list|,
name|Object
modifier|...
name|source
parameter_list|)
block|{
return|return
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|index
argument_list|,
name|type
argument_list|,
name|id
argument_list|)
operator|.
name|setSource
argument_list|(
name|source
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
return|;
block|}
DECL|method|refresh
specifier|protected
name|RefreshResponse
name|refresh
parameter_list|()
block|{
name|waitForRelocation
argument_list|()
expr_stmt|;
comment|// TODO RANDOMIZE with flush?
name|RefreshResponse
name|actionGet
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareRefresh
argument_list|()
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertNoFailures
argument_list|(
name|actionGet
argument_list|)
expr_stmt|;
return|return
name|actionGet
return|;
block|}
DECL|method|flushAndRefresh
specifier|protected
name|void
name|flushAndRefresh
parameter_list|()
block|{
name|flush
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
block|}
DECL|method|flush
specifier|protected
name|FlushResponse
name|flush
parameter_list|()
block|{
return|return
name|flush
argument_list|(
literal|true
argument_list|)
return|;
block|}
DECL|method|flush
specifier|protected
name|FlushResponse
name|flush
parameter_list|(
name|boolean
name|ignoreNotAllowed
parameter_list|)
block|{
name|waitForRelocation
argument_list|()
expr_stmt|;
name|FlushResponse
name|actionGet
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareFlush
argument_list|()
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
if|if
condition|(
name|ignoreNotAllowed
condition|)
block|{
for|for
control|(
name|ShardOperationFailedException
name|failure
range|:
name|actionGet
operator|.
name|getShardFailures
argument_list|()
control|)
block|{
name|assertThat
argument_list|(
literal|"unexpected flush failure "
operator|+
name|failure
operator|.
name|reason
argument_list|()
argument_list|,
name|failure
operator|.
name|status
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|RestStatus
operator|.
name|SERVICE_UNAVAILABLE
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|assertNoFailures
argument_list|(
name|actionGet
argument_list|)
expr_stmt|;
block|}
return|return
name|actionGet
return|;
block|}
DECL|method|optimize
specifier|protected
name|OptimizeResponse
name|optimize
parameter_list|()
block|{
name|waitForRelocation
argument_list|()
expr_stmt|;
name|OptimizeResponse
name|actionGet
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareOptimize
argument_list|()
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertNoFailures
argument_list|(
name|actionGet
argument_list|)
expr_stmt|;
return|return
name|actionGet
return|;
block|}
DECL|method|nodeIdsWithIndex
specifier|protected
name|Set
argument_list|<
name|String
argument_list|>
name|nodeIdsWithIndex
parameter_list|(
name|String
modifier|...
name|indices
parameter_list|)
block|{
name|ClusterState
name|state
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
operator|.
name|getState
argument_list|()
decl_stmt|;
name|GroupShardsIterator
name|allAssignedShardsGrouped
init|=
name|state
operator|.
name|routingTable
argument_list|()
operator|.
name|allAssignedShardsGrouped
argument_list|(
name|indices
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|nodes
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ShardIterator
name|shardIterator
range|:
name|allAssignedShardsGrouped
control|)
block|{
for|for
control|(
name|ShardRouting
name|routing
range|:
name|shardIterator
operator|.
name|asUnordered
argument_list|()
control|)
block|{
if|if
condition|(
name|routing
operator|.
name|active
argument_list|()
condition|)
block|{
name|nodes
operator|.
name|add
argument_list|(
name|routing
operator|.
name|currentNodeId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|nodes
return|;
block|}
DECL|method|numAssignedShards
specifier|protected
name|int
name|numAssignedShards
parameter_list|(
name|String
modifier|...
name|indices
parameter_list|)
block|{
name|ClusterState
name|state
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
operator|.
name|getState
argument_list|()
decl_stmt|;
name|GroupShardsIterator
name|allAssignedShardsGrouped
init|=
name|state
operator|.
name|routingTable
argument_list|()
operator|.
name|allAssignedShardsGrouped
argument_list|(
name|indices
argument_list|,
literal|true
argument_list|)
decl_stmt|;
return|return
name|allAssignedShardsGrouped
operator|.
name|size
argument_list|()
return|;
block|}
DECL|method|indexExists
specifier|protected
name|boolean
name|indexExists
parameter_list|(
name|String
name|index
parameter_list|)
block|{
name|IndicesExistsResponse
name|actionGet
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareExists
argument_list|(
name|index
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
return|return
name|actionGet
operator|.
name|isExists
argument_list|()
return|;
block|}
DECL|method|admin
specifier|protected
name|AdminClient
name|admin
parameter_list|()
block|{
return|return
name|client
argument_list|()
operator|.
name|admin
argument_list|()
return|;
block|}
DECL|method|run
specifier|protected
parameter_list|<
name|Res
extends|extends
name|ActionResponse
parameter_list|>
name|Res
name|run
parameter_list|(
name|ActionRequestBuilder
argument_list|<
name|?
argument_list|,
name|Res
argument_list|,
name|?
argument_list|>
name|builder
parameter_list|)
block|{
name|Res
name|actionGet
init|=
name|builder
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
return|return
name|actionGet
return|;
block|}
DECL|method|run
specifier|protected
parameter_list|<
name|Res
extends|extends
name|BroadcastOperationResponse
parameter_list|>
name|Res
name|run
parameter_list|(
name|BroadcastOperationRequestBuilder
argument_list|<
name|?
argument_list|,
name|Res
argument_list|,
name|?
argument_list|>
name|builder
parameter_list|)
block|{
name|Res
name|actionGet
init|=
name|builder
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertNoFailures
argument_list|(
name|actionGet
argument_list|)
expr_stmt|;
return|return
name|actionGet
return|;
block|}
comment|// TODO move this into a base class for integration tests
DECL|method|indexRandom
specifier|public
name|void
name|indexRandom
parameter_list|(
name|boolean
name|forceRefresh
parameter_list|,
name|IndexRequestBuilder
modifier|...
name|builders
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
if|if
condition|(
name|builders
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return;
block|}
name|Random
name|random
init|=
name|getRandom
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|indicesSet
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|builders
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|indicesSet
operator|.
name|add
argument_list|(
name|builders
index|[
name|i
index|]
operator|.
name|request
argument_list|()
operator|.
name|index
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
index|[]
name|indices
init|=
name|indicesSet
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|IndexRequestBuilder
argument_list|>
name|list
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|builders
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|shuffle
argument_list|(
name|list
argument_list|,
name|random
argument_list|)
expr_stmt|;
specifier|final
name|CopyOnWriteArrayList
argument_list|<
name|Throwable
argument_list|>
name|errors
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<
name|Throwable
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|CountDownLatch
argument_list|>
name|latches
init|=
operator|new
name|ArrayList
argument_list|<
name|CountDownLatch
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|frequently
argument_list|()
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Index [{}] docs async: [{}]"
argument_list|,
name|list
operator|.
name|size
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
name|list
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|latches
operator|.
name|add
argument_list|(
name|latch
argument_list|)
expr_stmt|;
for|for
control|(
name|IndexRequestBuilder
name|indexRequestBuilder
range|:
name|list
control|)
block|{
name|indexRequestBuilder
operator|.
name|execute
argument_list|(
operator|new
name|LatchedActionListener
argument_list|<
name|IndexResponse
argument_list|>
argument_list|(
name|latch
argument_list|,
name|errors
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|rarely
argument_list|()
condition|)
block|{
if|if
condition|(
name|rarely
argument_list|()
condition|)
block|{
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareRefresh
argument_list|(
name|indices
argument_list|)
operator|.
name|setIgnoreIndices
argument_list|(
name|IgnoreIndices
operator|.
name|MISSING
argument_list|)
operator|.
name|execute
argument_list|(
operator|new
name|LatchedActionListener
argument_list|<
name|RefreshResponse
argument_list|>
argument_list|(
name|newLatch
argument_list|(
name|latches
argument_list|)
argument_list|,
name|errors
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|rarely
argument_list|()
condition|)
block|{
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareFlush
argument_list|(
name|indices
argument_list|)
operator|.
name|setIgnoreIndices
argument_list|(
name|IgnoreIndices
operator|.
name|MISSING
argument_list|)
operator|.
name|execute
argument_list|(
operator|new
name|LatchedActionListener
argument_list|<
name|FlushResponse
argument_list|>
argument_list|(
name|newLatch
argument_list|(
name|latches
argument_list|)
argument_list|,
name|errors
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|rarely
argument_list|()
condition|)
block|{
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareOptimize
argument_list|(
name|indices
argument_list|)
operator|.
name|setIgnoreIndices
argument_list|(
name|IgnoreIndices
operator|.
name|MISSING
argument_list|)
operator|.
name|setMaxNumSegments
argument_list|(
name|between
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|)
operator|.
name|setFlush
argument_list|(
name|random
operator|.
name|nextBoolean
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|(
operator|new
name|LatchedActionListener
argument_list|<
name|OptimizeResponse
argument_list|>
argument_list|(
name|newLatch
argument_list|(
name|latches
argument_list|)
argument_list|,
name|errors
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Index [{}] docs async: [{}]"
argument_list|,
name|list
operator|.
name|size
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|IndexRequestBuilder
name|indexRequestBuilder
range|:
name|list
control|)
block|{
name|indexRequestBuilder
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
if|if
condition|(
name|rarely
argument_list|()
condition|)
block|{
if|if
condition|(
name|rarely
argument_list|()
condition|)
block|{
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareRefresh
argument_list|(
name|indices
argument_list|)
operator|.
name|setIgnoreIndices
argument_list|(
name|IgnoreIndices
operator|.
name|MISSING
argument_list|)
operator|.
name|execute
argument_list|(
operator|new
name|LatchedActionListener
argument_list|<
name|RefreshResponse
argument_list|>
argument_list|(
name|newLatch
argument_list|(
name|latches
argument_list|)
argument_list|,
name|errors
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|rarely
argument_list|()
condition|)
block|{
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareFlush
argument_list|(
name|indices
argument_list|)
operator|.
name|setIgnoreIndices
argument_list|(
name|IgnoreIndices
operator|.
name|MISSING
argument_list|)
operator|.
name|execute
argument_list|(
operator|new
name|LatchedActionListener
argument_list|<
name|FlushResponse
argument_list|>
argument_list|(
name|newLatch
argument_list|(
name|latches
argument_list|)
argument_list|,
name|errors
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|rarely
argument_list|()
condition|)
block|{
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareOptimize
argument_list|(
name|indices
argument_list|)
operator|.
name|setIgnoreIndices
argument_list|(
name|IgnoreIndices
operator|.
name|MISSING
argument_list|)
operator|.
name|setMaxNumSegments
argument_list|(
name|between
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|)
operator|.
name|setFlush
argument_list|(
name|random
operator|.
name|nextBoolean
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|(
operator|new
name|LatchedActionListener
argument_list|<
name|OptimizeResponse
argument_list|>
argument_list|(
name|newLatch
argument_list|(
name|latches
argument_list|)
argument_list|,
name|errors
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
for|for
control|(
name|CountDownLatch
name|countDownLatch
range|:
name|latches
control|)
block|{
name|countDownLatch
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|errors
argument_list|,
name|emptyIterable
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|forceRefresh
condition|)
block|{
name|assertNoFailures
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareRefresh
argument_list|(
name|indices
argument_list|)
operator|.
name|setIgnoreIndices
argument_list|(
name|IgnoreIndices
operator|.
name|MISSING
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|newLatch
specifier|private
specifier|static
specifier|final
name|CountDownLatch
name|newLatch
parameter_list|(
name|List
argument_list|<
name|CountDownLatch
argument_list|>
name|latches
parameter_list|)
block|{
name|CountDownLatch
name|l
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|latches
operator|.
name|add
argument_list|(
name|l
argument_list|)
expr_stmt|;
return|return
name|l
return|;
block|}
DECL|class|LatchedActionListener
specifier|private
specifier|static
class|class
name|LatchedActionListener
parameter_list|<
name|Response
parameter_list|>
implements|implements
name|ActionListener
argument_list|<
name|Response
argument_list|>
block|{
DECL|field|latch
specifier|private
specifier|final
name|CountDownLatch
name|latch
decl_stmt|;
DECL|field|errors
specifier|private
specifier|final
name|CopyOnWriteArrayList
argument_list|<
name|Throwable
argument_list|>
name|errors
decl_stmt|;
DECL|method|LatchedActionListener
specifier|public
name|LatchedActionListener
parameter_list|(
name|CountDownLatch
name|latch
parameter_list|,
name|CopyOnWriteArrayList
argument_list|<
name|Throwable
argument_list|>
name|errors
parameter_list|)
block|{
name|this
operator|.
name|latch
operator|=
name|latch
expr_stmt|;
name|this
operator|.
name|errors
operator|=
name|errors
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onResponse
specifier|public
name|void
name|onResponse
parameter_list|(
name|Response
name|response
parameter_list|)
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onFailure
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
try|try
block|{
name|errors
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|clearScroll
specifier|public
name|void
name|clearScroll
parameter_list|(
name|String
modifier|...
name|scrollIds
parameter_list|)
block|{
name|ClearScrollResponse
name|clearResponse
init|=
name|client
argument_list|()
operator|.
name|prepareClearScroll
argument_list|()
operator|.
name|setScrollIds
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|scrollIds
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|clearResponse
operator|.
name|isSucceeded
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|enum|Scope
specifier|public
specifier|static
enum|enum
name|Scope
block|{
DECL|enum constant|GLOBAL
DECL|enum constant|SUITE
DECL|enum constant|TEST
name|GLOBAL
block|,
name|SUITE
block|,
name|TEST
block|;     }
DECL|method|getAnnotation
specifier|private
name|ClusterScope
name|getAnnotation
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|)
block|{
if|if
condition|(
name|clazz
operator|==
name|Object
operator|.
name|class
operator|||
name|clazz
operator|==
name|AbstractIntegrationTest
operator|.
name|class
condition|)
block|{
return|return
literal|null
return|;
block|}
name|ClusterScope
name|annotation
init|=
name|clazz
operator|.
name|getAnnotation
argument_list|(
name|ClusterScope
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|annotation
operator|!=
literal|null
condition|)
block|{
return|return
name|annotation
return|;
block|}
return|return
name|getAnnotation
argument_list|(
name|clazz
operator|.
name|getSuperclass
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getCurrentClusterScope
specifier|private
name|Scope
name|getCurrentClusterScope
parameter_list|()
block|{
name|ClusterScope
name|annotation
init|=
name|getAnnotation
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
comment|// if we are not annotated assume global!
return|return
name|annotation
operator|==
literal|null
condition|?
name|Scope
operator|.
name|GLOBAL
else|:
name|annotation
operator|.
name|scope
argument_list|()
return|;
block|}
DECL|method|getNumNodes
specifier|private
name|int
name|getNumNodes
parameter_list|()
block|{
name|ClusterScope
name|annotation
init|=
name|getAnnotation
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|annotation
operator|==
literal|null
condition|?
operator|-
literal|1
else|:
name|annotation
operator|.
name|numNodes
argument_list|()
return|;
block|}
DECL|method|nodeSettings
specifier|protected
name|Settings
name|nodeSettings
parameter_list|(
name|int
name|nodeOrdinal
parameter_list|)
block|{
return|return
name|ImmutableSettings
operator|.
name|EMPTY
return|;
block|}
DECL|method|buildTestCluster
specifier|protected
name|TestCluster
name|buildTestCluster
parameter_list|(
name|Scope
name|scope
parameter_list|)
block|{
name|long
name|currentClusterSeed
init|=
name|randomLong
argument_list|()
decl_stmt|;
name|Builder
argument_list|<
name|Integer
argument_list|,
name|Settings
argument_list|>
name|ordinalMap
init|=
name|ImmutableMap
operator|.
name|builder
argument_list|()
decl_stmt|;
name|int
name|numNodes
init|=
name|getNumNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numNodes
condition|;
name|i
operator|++
control|)
block|{
name|ordinalMap
operator|.
name|put
argument_list|(
name|i
argument_list|,
name|nodeSettings
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|TestCluster
argument_list|(
name|currentClusterSeed
argument_list|,
name|getNumNodes
argument_list|()
argument_list|,
name|TestCluster
operator|.
name|clusterName
argument_list|(
name|scope
operator|.
name|name
argument_list|()
argument_list|,
name|ElasticSearchTestCase
operator|.
name|CHILD_VM_ID
argument_list|,
name|currentClusterSeed
argument_list|)
argument_list|,
name|ordinalMap
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Retention
argument_list|(
name|RetentionPolicy
operator|.
name|RUNTIME
argument_list|)
annotation|@
name|Target
argument_list|(
block|{
name|ElementType
operator|.
name|TYPE
block|}
argument_list|)
DECL|interface|ClusterScope
specifier|public
annotation_defn|@interface
name|ClusterScope
block|{
DECL|field|Scope.GLOBAL
name|Scope
name|scope
parameter_list|()
default|default
name|Scope
operator|.
name|GLOBAL
function_decl|;
name|int
name|numNodes
parameter_list|()
default|default
operator|-
literal|1
function_decl|;
block|}
block|}
end_class

end_unit

