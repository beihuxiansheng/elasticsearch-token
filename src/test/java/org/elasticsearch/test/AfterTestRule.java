begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.test
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|test
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestWatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|Description
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_comment
comment|/**  * A {@link org.junit.rules.TestRule} that detects test failures and allows to run an arbitrary task after a test failed.  * Allows also to run an arbitrary task in any case, regardless of the test result.  * It is possible to force running the first arbitrary task from the outside, as if the test was failed, when e.g. it needs  * to be performed based on external events.  *  * We need it to be able to reset the suite level cluster after each failure, or if there is a problem  * during the after test operations.  */
end_comment

begin_class
DECL|class|AfterTestRule
specifier|public
class|class
name|AfterTestRule
extends|extends
name|TestWatcher
block|{
DECL|field|failed
specifier|private
specifier|final
name|AtomicBoolean
name|failed
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
DECL|field|task
specifier|private
specifier|final
name|Task
name|task
decl_stmt|;
DECL|method|AfterTestRule
specifier|public
name|AfterTestRule
parameter_list|(
name|Task
name|task
parameter_list|)
block|{
name|this
operator|.
name|task
operator|=
name|task
expr_stmt|;
block|}
DECL|method|forceFailure
name|void
name|forceFailure
parameter_list|()
block|{
name|failed
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|failed
specifier|protected
name|void
name|failed
parameter_list|(
name|Throwable
name|e
parameter_list|,
name|Description
name|description
parameter_list|)
block|{
name|failed
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|finished
specifier|protected
name|void
name|finished
parameter_list|(
name|Description
name|description
parameter_list|)
block|{
if|if
condition|(
name|failed
operator|.
name|compareAndSet
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|task
operator|.
name|onTestFailed
argument_list|()
expr_stmt|;
block|}
name|task
operator|.
name|onTestFinished
argument_list|()
expr_stmt|;
block|}
comment|/**      * Task to be executed after each test if required, no-op by default      */
DECL|class|Task
specifier|public
specifier|static
class|class
name|Task
block|{
comment|/**          * The task that needs to be executed after a test fails          */
DECL|method|onTestFailed
name|void
name|onTestFailed
parameter_list|()
block|{          }
comment|/**          * The task that needs to be executed when a test is completed, regardless of its result          */
DECL|method|onTestFinished
name|void
name|onTestFinished
parameter_list|()
block|{          }
block|}
block|}
end_class

end_unit

