begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.test
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|test
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|SearchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_comment
comment|/**  * Like {@link ElasticsearchSingleNodeTest} but for tests that need to extend  * {@link ElasticsearchLuceneTestCase}.  */
end_comment

begin_class
annotation|@
name|Ignore
DECL|class|ElasticsearchSingleNodeLuceneTestCase
specifier|public
specifier|abstract
class|class
name|ElasticsearchSingleNodeLuceneTestCase
extends|extends
name|ElasticsearchLuceneTestCase
block|{
annotation|@
name|After
DECL|method|cleanup
specifier|public
name|void
name|cleanup
parameter_list|()
block|{
name|ElasticsearchSingleNodeTest
operator|.
name|cleanup
argument_list|(
name|resetNodeAfterTest
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|BeforeClass
DECL|method|setUpClass
specifier|public
specifier|static
name|void
name|setUpClass
parameter_list|()
throws|throws
name|Exception
block|{
name|ElasticsearchSingleNodeTest
operator|.
name|setUpClass
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|tearDownClass
specifier|public
specifier|static
name|void
name|tearDownClass
parameter_list|()
block|{
name|ElasticsearchSingleNodeTest
operator|.
name|tearDownClass
argument_list|()
expr_stmt|;
block|}
comment|/**      * This method returns<code>true</code> if the node that is used in the background should be reset      * after each test. This is useful if the test changes the cluster state metadata etc. The default is      *<code>false</code>.      */
DECL|method|resetNodeAfterTest
specifier|protected
name|boolean
name|resetNodeAfterTest
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
comment|/**      * Create a new index on the singleton node with empty index settings.      */
DECL|method|createIndex
specifier|protected
specifier|static
name|IndexService
name|createIndex
parameter_list|(
name|String
name|index
parameter_list|)
block|{
return|return
name|ElasticsearchSingleNodeTest
operator|.
name|createIndex
argument_list|(
name|index
argument_list|)
return|;
block|}
comment|/**      * Create a new index on the singleton node with the provided index settings.      */
DECL|method|createIndex
specifier|protected
specifier|static
name|IndexService
name|createIndex
parameter_list|(
name|String
name|index
parameter_list|,
name|Settings
name|settings
parameter_list|)
block|{
return|return
name|ElasticsearchSingleNodeTest
operator|.
name|createIndex
argument_list|(
name|index
argument_list|,
name|settings
argument_list|)
return|;
block|}
comment|/**      * Create a new search context.      */
DECL|method|createSearchContext
specifier|protected
specifier|static
name|SearchContext
name|createSearchContext
parameter_list|(
name|IndexService
name|indexService
parameter_list|)
block|{
return|return
name|ElasticsearchSingleNodeTest
operator|.
name|createSearchContext
argument_list|(
name|indexService
argument_list|)
return|;
block|}
block|}
end_class

end_unit

