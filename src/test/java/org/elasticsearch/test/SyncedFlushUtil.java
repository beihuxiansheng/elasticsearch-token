begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.test
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|test
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ExceptionsHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|SyncedFlushService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_comment
comment|/** Utils for SyncedFlush */
end_comment

begin_class
DECL|class|SyncedFlushUtil
specifier|public
class|class
name|SyncedFlushUtil
block|{
DECL|method|SyncedFlushUtil
specifier|private
name|SyncedFlushUtil
parameter_list|()
block|{      }
comment|/**      * Blocking version of {@link SyncedFlushService#attemptSyncedFlush(ShardId, ActionListener)}      */
DECL|method|attemptSyncedFlush
specifier|public
specifier|static
name|SyncedFlushService
operator|.
name|SyncedFlushResult
name|attemptSyncedFlush
parameter_list|(
name|SyncedFlushService
name|service
parameter_list|,
name|ShardId
name|shardId
parameter_list|)
block|{
name|SyncResultListener
name|listener
init|=
operator|new
name|SyncResultListener
argument_list|()
decl_stmt|;
name|service
operator|.
name|attemptSyncedFlush
argument_list|(
name|shardId
argument_list|,
name|listener
argument_list|)
expr_stmt|;
try|try
block|{
name|listener
operator|.
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|listener
operator|.
name|error
operator|!=
literal|null
condition|)
block|{
throw|throw
name|ExceptionsHelper
operator|.
name|convertToElastic
argument_list|(
name|listener
operator|.
name|error
argument_list|)
throw|;
block|}
return|return
name|listener
operator|.
name|result
return|;
block|}
DECL|class|SyncResultListener
specifier|public
specifier|static
specifier|final
class|class
name|SyncResultListener
implements|implements
name|ActionListener
argument_list|<
name|SyncedFlushService
operator|.
name|SyncedFlushResult
argument_list|>
block|{
DECL|field|result
specifier|public
specifier|volatile
name|SyncedFlushService
operator|.
name|SyncedFlushResult
name|result
decl_stmt|;
DECL|field|error
specifier|public
specifier|volatile
name|Throwable
name|error
decl_stmt|;
DECL|field|latch
specifier|public
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|onResponse
specifier|public
name|void
name|onResponse
parameter_list|(
name|SyncedFlushService
operator|.
name|SyncedFlushResult
name|syncedFlushResult
parameter_list|)
block|{
name|result
operator|=
name|syncedFlushResult
expr_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onFailure
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|error
operator|=
name|e
expr_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

