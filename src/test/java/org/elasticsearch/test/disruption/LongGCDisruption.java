begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.test.disruption
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|disruption
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_class
DECL|class|LongGCDisruption
specifier|public
class|class
name|LongGCDisruption
extends|extends
name|SingleNodeDisruption
block|{
DECL|field|disrupting
specifier|volatile
name|boolean
name|disrupting
decl_stmt|;
DECL|field|worker
specifier|volatile
name|Thread
name|worker
decl_stmt|;
DECL|field|intervalBetweenDelaysMin
specifier|final
name|long
name|intervalBetweenDelaysMin
decl_stmt|;
DECL|field|intervalBetweenDelaysMax
specifier|final
name|long
name|intervalBetweenDelaysMax
decl_stmt|;
DECL|field|delayDurationMin
specifier|final
name|long
name|delayDurationMin
decl_stmt|;
DECL|field|delayDurationMax
specifier|final
name|long
name|delayDurationMax
decl_stmt|;
DECL|method|LongGCDisruption
specifier|public
name|LongGCDisruption
parameter_list|(
name|Random
name|random
parameter_list|)
block|{
name|this
argument_list|(
literal|null
argument_list|,
name|random
argument_list|)
expr_stmt|;
block|}
DECL|method|LongGCDisruption
specifier|public
name|LongGCDisruption
parameter_list|(
name|String
name|disruptedNode
parameter_list|,
name|Random
name|random
parameter_list|)
block|{
name|this
argument_list|(
name|disruptedNode
argument_list|,
name|random
argument_list|,
literal|100
argument_list|,
literal|200
argument_list|,
literal|300
argument_list|,
literal|20000
argument_list|)
expr_stmt|;
block|}
DECL|method|LongGCDisruption
specifier|public
name|LongGCDisruption
parameter_list|(
name|String
name|disruptedNode
parameter_list|,
name|Random
name|random
parameter_list|,
name|long
name|intervalBetweenDelaysMin
parameter_list|,
name|long
name|intervalBetweenDelaysMax
parameter_list|,
name|long
name|delayDurationMin
parameter_list|,
name|long
name|delayDurationMax
parameter_list|)
block|{
name|this
argument_list|(
name|random
argument_list|,
name|intervalBetweenDelaysMin
argument_list|,
name|intervalBetweenDelaysMax
argument_list|,
name|delayDurationMin
argument_list|,
name|delayDurationMax
argument_list|)
expr_stmt|;
name|this
operator|.
name|disruptedNode
operator|=
name|disruptedNode
expr_stmt|;
block|}
DECL|method|LongGCDisruption
specifier|public
name|LongGCDisruption
parameter_list|(
name|Random
name|random
parameter_list|,
name|long
name|intervalBetweenDelaysMin
parameter_list|,
name|long
name|intervalBetweenDelaysMax
parameter_list|,
name|long
name|delayDurationMin
parameter_list|,
name|long
name|delayDurationMax
parameter_list|)
block|{
name|super
argument_list|(
name|random
argument_list|)
expr_stmt|;
name|this
operator|.
name|intervalBetweenDelaysMin
operator|=
name|intervalBetweenDelaysMin
expr_stmt|;
name|this
operator|.
name|intervalBetweenDelaysMax
operator|=
name|intervalBetweenDelaysMax
expr_stmt|;
name|this
operator|.
name|delayDurationMin
operator|=
name|delayDurationMin
expr_stmt|;
name|this
operator|.
name|delayDurationMax
operator|=
name|delayDurationMax
expr_stmt|;
block|}
DECL|field|thread_ids
specifier|final
specifier|static
name|AtomicInteger
name|thread_ids
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|startDisrupting
specifier|public
name|void
name|startDisrupting
parameter_list|()
block|{
name|disrupting
operator|=
literal|true
expr_stmt|;
name|worker
operator|=
operator|new
name|Thread
argument_list|(
operator|new
name|BackgroundWorker
argument_list|()
argument_list|,
literal|"long_gc_simulation_"
operator|+
name|thread_ids
operator|.
name|incrementAndGet
argument_list|()
argument_list|)
expr_stmt|;
name|worker
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|worker
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|stopDisrupting
specifier|public
name|void
name|stopDisrupting
parameter_list|()
block|{
if|if
condition|(
name|worker
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|logger
operator|.
name|info
argument_list|(
literal|"stopping long GCs on [{}]"
argument_list|,
name|disruptedNode
argument_list|)
expr_stmt|;
name|disrupting
operator|=
literal|false
expr_stmt|;
name|worker
operator|.
name|interrupt
argument_list|()
expr_stmt|;
try|try
block|{
name|worker
operator|.
name|join
argument_list|(
literal|2
operator|*
operator|(
name|intervalBetweenDelaysMax
operator|+
name|delayDurationMax
operator|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"background thread failed to stop"
argument_list|)
expr_stmt|;
block|}
name|worker
operator|=
literal|null
expr_stmt|;
block|}
DECL|field|unsafeClasses
specifier|final
specifier|static
name|Pattern
index|[]
name|unsafeClasses
init|=
operator|new
name|Pattern
index|[]
block|{
comment|// logging has shared JVM locks - we may suspend a thread and block other nodes from doing their thing
name|Pattern
operator|.
name|compile
argument_list|(
literal|"Logger"
argument_list|)
block|}
decl_stmt|;
DECL|method|stopNodeThreads
specifier|private
name|boolean
name|stopNodeThreads
parameter_list|(
name|String
name|node
parameter_list|,
name|Set
argument_list|<
name|Thread
argument_list|>
name|nodeThreads
parameter_list|)
block|{
name|Set
argument_list|<
name|Thread
argument_list|>
name|allThreadsSet
init|=
name|Thread
operator|.
name|getAllStackTraces
argument_list|()
operator|.
name|keySet
argument_list|()
decl_stmt|;
name|boolean
name|stopped
init|=
literal|false
decl_stmt|;
specifier|final
name|String
name|nodeThreadNamePart
init|=
literal|"["
operator|+
name|node
operator|+
literal|"]"
decl_stmt|;
for|for
control|(
name|Thread
name|thread
range|:
name|allThreadsSet
control|)
block|{
name|String
name|name
init|=
name|thread
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|contains
argument_list|(
name|nodeThreadNamePart
argument_list|)
condition|)
block|{
if|if
condition|(
name|thread
operator|.
name|isAlive
argument_list|()
operator|&&
name|nodeThreads
operator|.
name|add
argument_list|(
name|thread
argument_list|)
condition|)
block|{
name|stopped
operator|=
literal|true
expr_stmt|;
name|thread
operator|.
name|suspend
argument_list|()
expr_stmt|;
comment|// double check the thread is not in a shared resource like logging. If so, let it go and come back..
name|boolean
name|safe
init|=
literal|true
decl_stmt|;
name|safe
label|:
for|for
control|(
name|StackTraceElement
name|stackElement
range|:
name|thread
operator|.
name|getStackTrace
argument_list|()
control|)
block|{
name|String
name|className
init|=
name|stackElement
operator|.
name|getClassName
argument_list|()
decl_stmt|;
for|for
control|(
name|Pattern
name|unsafePattern
range|:
name|unsafeClasses
control|)
block|{
if|if
condition|(
name|unsafePattern
operator|.
name|matcher
argument_list|(
name|className
argument_list|)
operator|.
name|find
argument_list|()
condition|)
block|{
name|safe
operator|=
literal|false
expr_stmt|;
break|break
name|safe
break|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|safe
condition|)
block|{
name|thread
operator|.
name|resume
argument_list|()
expr_stmt|;
name|nodeThreads
operator|.
name|remove
argument_list|(
name|thread
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|stopped
return|;
block|}
DECL|method|resumeThreads
specifier|private
name|void
name|resumeThreads
parameter_list|(
name|Set
argument_list|<
name|Thread
argument_list|>
name|threads
parameter_list|)
block|{
for|for
control|(
name|Thread
name|thread
range|:
name|threads
control|)
block|{
name|thread
operator|.
name|resume
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|simulateLongGC
specifier|private
name|void
name|simulateLongGC
parameter_list|(
specifier|final
name|TimeValue
name|duration
parameter_list|)
throws|throws
name|InterruptedException
block|{
specifier|final
name|String
name|disruptionNodeCopy
init|=
name|disruptedNode
decl_stmt|;
if|if
condition|(
name|disruptionNodeCopy
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|logger
operator|.
name|info
argument_list|(
literal|"node [{}] goes into GC for for [{}]"
argument_list|,
name|disruptionNodeCopy
argument_list|,
name|duration
argument_list|)
expr_stmt|;
specifier|final
name|Set
argument_list|<
name|Thread
argument_list|>
name|nodeThreads
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
while|while
condition|(
name|stopNodeThreads
argument_list|(
name|disruptionNodeCopy
argument_list|,
name|nodeThreads
argument_list|)
condition|)
empty_stmt|;
if|if
condition|(
operator|!
name|nodeThreads
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|duration
operator|.
name|millis
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"node [{}] resumes from GC"
argument_list|,
name|disruptionNodeCopy
argument_list|)
expr_stmt|;
name|resumeThreads
argument_list|(
name|nodeThreads
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|expectedTimeToHeal
specifier|public
name|TimeValue
name|expectedTimeToHeal
parameter_list|()
block|{
return|return
name|TimeValue
operator|.
name|timeValueMillis
argument_list|(
literal|0
argument_list|)
return|;
block|}
DECL|class|BackgroundWorker
class|class
name|BackgroundWorker
implements|implements
name|Runnable
block|{
annotation|@
name|Override
DECL|method|run
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
name|disrupting
operator|&&
name|disruptedNode
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|TimeValue
name|duration
init|=
operator|new
name|TimeValue
argument_list|(
name|delayDurationMin
operator|+
name|random
operator|.
name|nextInt
argument_list|(
call|(
name|int
call|)
argument_list|(
name|delayDurationMax
operator|-
name|delayDurationMin
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|simulateLongGC
argument_list|(
name|duration
argument_list|)
expr_stmt|;
name|duration
operator|=
operator|new
name|TimeValue
argument_list|(
name|intervalBetweenDelaysMin
operator|+
name|random
operator|.
name|nextInt
argument_list|(
call|(
name|int
call|)
argument_list|(
name|intervalBetweenDelaysMax
operator|-
name|intervalBetweenDelaysMin
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|disrupting
operator|&&
name|disruptedNode
operator|!=
literal|null
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|duration
operator|.
name|millis
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{                 }
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"error in background worker"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

