begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.test.disruption
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|disruption
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|transport
operator|.
name|MockTransportService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_class
DECL|class|NetworkDisconnectPartition
specifier|public
class|class
name|NetworkDisconnectPartition
extends|extends
name|NetworkPartition
block|{
DECL|method|NetworkDisconnectPartition
specifier|public
name|NetworkDisconnectPartition
parameter_list|(
name|Random
name|random
parameter_list|)
block|{
name|super
argument_list|(
name|random
argument_list|)
expr_stmt|;
block|}
DECL|method|NetworkDisconnectPartition
specifier|public
name|NetworkDisconnectPartition
parameter_list|(
name|String
name|node1
parameter_list|,
name|String
name|node2
parameter_list|,
name|Random
name|random
parameter_list|)
block|{
name|super
argument_list|(
name|node1
argument_list|,
name|node2
argument_list|,
name|random
argument_list|)
expr_stmt|;
block|}
DECL|method|NetworkDisconnectPartition
specifier|public
name|NetworkDisconnectPartition
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|nodesSideOne
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|nodesSideTwo
parameter_list|,
name|Random
name|random
parameter_list|)
block|{
name|super
argument_list|(
name|nodesSideOne
argument_list|,
name|nodesSideTwo
argument_list|,
name|random
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getPartitionDescription
specifier|protected
name|String
name|getPartitionDescription
parameter_list|()
block|{
return|return
literal|"disconnected"
return|;
block|}
annotation|@
name|Override
DECL|method|applyDisruption
name|void
name|applyDisruption
parameter_list|(
name|DiscoveryNode
name|node1
parameter_list|,
name|MockTransportService
name|transportService1
parameter_list|,
name|DiscoveryNode
name|node2
parameter_list|,
name|MockTransportService
name|transportService2
parameter_list|)
block|{
name|transportService1
operator|.
name|addFailToSendNoConnectRule
argument_list|(
name|node2
argument_list|)
expr_stmt|;
name|transportService2
operator|.
name|addFailToSendNoConnectRule
argument_list|(
name|node1
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

