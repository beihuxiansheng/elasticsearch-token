begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.test
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|test
package|;
end_package

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|RandomizedContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|SeedUtils
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|AbstractRandomizedTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ExceptionsHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ShardOperationFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|health
operator|.
name|ClusterHealthRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|health
operator|.
name|ClusterHealthResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|health
operator|.
name|ClusterHealthStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|create
operator|.
name|CreateIndexRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|exists
operator|.
name|indices
operator|.
name|IndicesExistsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|flush
operator|.
name|FlushResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|optimize
operator|.
name|OptimizeResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|refresh
operator|.
name|RefreshResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|bulk
operator|.
name|BulkRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|bulk
operator|.
name|BulkResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|get
operator|.
name|GetResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|index
operator|.
name|IndexRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|index
operator|.
name|IndexResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|ClearScrollResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|IndicesOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|AdminClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|Requests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|internal
operator|.
name|InternalClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|MetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|Tuple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|EsRejectedExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|zen
operator|.
name|elect
operator|.
name|ElectMasterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|client
operator|.
name|RandomizingClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|ElementType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Retention
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|RetentionPolicy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Target
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_REPLICAS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_SHARDS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
operator|.
name|settingsBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|TestCluster
operator|.
name|clusterName
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertAcked
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertNoFailures
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|emptyIterable
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_comment
comment|/**  * {@link ElasticsearchIntegrationTest} is an abstract base class to run integration  * tests against a JVM private Elasticsearch Cluster. The test class supports 3 different  * cluster scopes.  *<ul>  *<li>{@link Scope#GLOBAL} - uses a cluster shared across test suites. This cluster doesn't allow any modifications to  * the cluster settings and will fail if any persistent cluster settings are applied during tear down.</li>  *<li>{@link Scope#TEST} - uses a new cluster for each individual test method.</li>  *<li>{@link Scope#SUITE} - uses a cluster shared across all test method in the same suite</li>  *</ul>  *<p/>  * The most common test scope it {@link Scope#GLOBAL} which shares a cluster per JVM. This cluster is only set-up once  * and can be used as long as the tests work on a per index basis without changing any cluster wide settings or require  * any specific node configuration. This is the best performing option since it sets up the cluster only once.  *<p/>  * If the tests need specific node settings or change persistent and/or transient cluster settings either {@link Scope#TEST}  * or {@link Scope#SUITE} should be used. To configure a scope for the test cluster the {@link ClusterScope} annotation  * should be used, here is an example:  *<pre>  *  * @ClusterScope(scope=Scope.TEST) public class SomeIntegrationTest extends ElasticsearchIntegrationTest {  * @Test public void testMethod() {}  * }  *</pre>  *<p/>  * If no {@link ClusterScope} annotation is present on an integration test the default scope it {@link Scope#GLOBAL}  *<p/>  * A test cluster creates a set of nodes in the background before the test starts. The number of nodes in the cluster is  * determined at random and can change across tests. The minimum number of nodes in the shared global cluster is<code>2</code>.  * For other scopes the {@link ClusterScope} allows configuring the initial number of nodes that are created before  * the tests start.  *<p/>  *<pre>  * @ClusterScope(scope=Scope.SUITE, numNodes=3)  * public class SomeIntegrationTest extends ElasticsearchIntegrationTest {  * @Test public void testMethod() {}  * }  *</pre>  *<p/>  * Note, the {@link ElasticsearchIntegrationTest} uses randomized settings on a cluster and index level. For instance  * each test might use different directory implementation for each test or will return a random client to one of the  * nodes in the cluster for each call to {@link #client()}. Test failures might only be reproducible if the correct  * system properties are passed to the test execution environment.  *<p/>  *<p>  * This class supports the following system properties (passed with -Dkey=value to the application)  *<ul>  *<li>-D{@value #TESTS_CLIENT_RATIO} - a double value in the interval [0..1] which defines the ration between node and transport clients used</li>  *<li>-D{@value TestCluster#TESTS_ENABLE_MOCK_MODULES} - a boolean value to enable or disable mock modules. This is  * useful to test the system without asserting modules that to make sure they don't hide any bugs in production.</li>  *<li>-D{@value org.elasticsearch.test.TestCluster#SETTING_INDEX_SEED} - a random seed used to initialize the index random context.  *</ul>  *</p>  */
end_comment

begin_class
annotation|@
name|Ignore
annotation|@
name|AbstractRandomizedTest
operator|.
name|IntegrationTests
DECL|class|ElasticsearchIntegrationTest
specifier|public
specifier|abstract
class|class
name|ElasticsearchIntegrationTest
extends|extends
name|ElasticsearchTestCase
block|{
DECL|field|GLOBAL_CLUSTER
specifier|private
specifier|static
name|TestCluster
name|GLOBAL_CLUSTER
decl_stmt|;
comment|/**      * Key used to set the transport client ratio via the commandline -D{@value #TESTS_CLIENT_RATIO}      */
DECL|field|TESTS_CLIENT_RATIO
specifier|public
specifier|static
specifier|final
name|String
name|TESTS_CLIENT_RATIO
init|=
literal|"tests.client.ratio"
decl_stmt|;
comment|/**      * Threshold at which indexing switches from frequently async to frequently bulk.      */
DECL|field|FREQUENT_BULK_THRESHOLD
specifier|private
specifier|static
specifier|final
name|int
name|FREQUENT_BULK_THRESHOLD
init|=
literal|300
decl_stmt|;
comment|/**      * Maximum number of async operations that indexRandom will kick off at one time.      */
DECL|field|MAX_IN_FLIGHT_ASYNC_INDEXES
specifier|private
specifier|static
specifier|final
name|int
name|MAX_IN_FLIGHT_ASYNC_INDEXES
init|=
literal|150
decl_stmt|;
comment|/**      * Maximum number of documents in a single bulk index request.      */
DECL|field|MAX_BULK_INDEX_REQUEST_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|MAX_BULK_INDEX_REQUEST_SIZE
init|=
literal|1000
decl_stmt|;
comment|/**      * The current cluster depending on the configured {@link Scope}.      * By default if no {@link ClusterScope} is configured this will hold a reference to the global cluster carried      * on across test suites.      */
DECL|field|currentCluster
specifier|private
specifier|static
name|TestCluster
name|currentCluster
decl_stmt|;
DECL|field|TRANSPORT_CLIENT_RATIO
specifier|private
specifier|static
specifier|final
name|double
name|TRANSPORT_CLIENT_RATIO
init|=
name|transportClientRatio
argument_list|()
decl_stmt|;
DECL|field|clusters
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|TestCluster
argument_list|>
name|clusters
init|=
operator|new
name|IdentityHashMap
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|beforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|initializeGlobalCluster
argument_list|()
expr_stmt|;
block|}
DECL|method|initializeGlobalCluster
specifier|private
specifier|static
name|void
name|initializeGlobalCluster
parameter_list|()
block|{
comment|// Initialize lazily. No need for volatiles/ CASs since each JVM runs at most one test
comment|// suite at any given moment.
if|if
condition|(
name|GLOBAL_CLUSTER
operator|==
literal|null
condition|)
block|{
name|long
name|masterSeed
init|=
name|SeedUtils
operator|.
name|parseSeed
argument_list|(
name|RandomizedContext
operator|.
name|current
argument_list|()
operator|.
name|getRunnerSeedAsString
argument_list|()
argument_list|)
decl_stmt|;
name|GLOBAL_CLUSTER
operator|=
operator|new
name|TestCluster
argument_list|(
name|masterSeed
argument_list|,
name|clusterName
argument_list|(
literal|"shared"
argument_list|,
name|ElasticsearchTestCase
operator|.
name|CHILD_VM_ID
argument_list|,
name|masterSeed
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Before
DECL|method|before
specifier|public
specifier|final
name|void
name|before
parameter_list|()
throws|throws
name|IOException
block|{
assert|assert
name|Thread
operator|.
name|getDefaultUncaughtExceptionHandler
argument_list|()
operator|instanceof
name|ElasticsearchUncaughtExceptionHandler
assert|;
try|try
block|{
specifier|final
name|Scope
name|currentClusterScope
init|=
name|getCurrentClusterScope
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|currentClusterScope
condition|)
block|{
case|case
name|GLOBAL
case|:
name|clearClusters
argument_list|()
expr_stmt|;
name|currentCluster
operator|=
name|GLOBAL_CLUSTER
expr_stmt|;
break|break;
case|case
name|SUITE
case|:
name|currentCluster
operator|=
name|buildAndPutCluster
argument_list|(
name|currentClusterScope
argument_list|,
literal|false
argument_list|)
expr_stmt|;
break|break;
case|case
name|TEST
case|:
name|currentCluster
operator|=
name|buildAndPutCluster
argument_list|(
name|currentClusterScope
argument_list|,
literal|true
argument_list|)
expr_stmt|;
break|break;
default|default:
name|fail
argument_list|(
literal|"Unknown Scope: ["
operator|+
name|currentClusterScope
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
name|currentCluster
operator|.
name|beforeTest
argument_list|(
name|getRandom
argument_list|()
argument_list|,
name|getPerTestTransportClientRatio
argument_list|()
argument_list|)
expr_stmt|;
name|cluster
argument_list|()
operator|.
name|wipe
argument_list|()
expr_stmt|;
name|cluster
argument_list|()
operator|.
name|randomIndexTemplate
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"[{}#{}]: before test"
argument_list|,
name|getTestClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|getTestName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OutOfMemoryError
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"unable to create new native thread"
argument_list|)
condition|)
block|{
name|ElasticsearchTestCase
operator|.
name|printStackDump
argument_list|(
name|logger
argument_list|)
expr_stmt|;
block|}
throw|throw
name|e
throw|;
block|}
block|}
DECL|method|buildAndPutCluster
specifier|public
name|TestCluster
name|buildAndPutCluster
parameter_list|(
name|Scope
name|currentClusterScope
parameter_list|,
name|boolean
name|createIfExists
parameter_list|)
throws|throws
name|IOException
block|{
name|TestCluster
name|testCluster
init|=
name|clusters
operator|.
name|get
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|createIfExists
operator|||
name|testCluster
operator|==
literal|null
condition|)
block|{
name|testCluster
operator|=
name|buildTestCluster
argument_list|(
name|currentClusterScope
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|clusters
operator|.
name|remove
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|clearClusters
argument_list|()
expr_stmt|;
name|clusters
operator|.
name|put
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|,
name|testCluster
argument_list|)
expr_stmt|;
return|return
name|testCluster
return|;
block|}
DECL|method|clearClusters
specifier|private
name|void
name|clearClusters
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|clusters
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|TestCluster
name|cluster
range|:
name|clusters
operator|.
name|values
argument_list|()
control|)
block|{
name|cluster
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|clusters
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|After
DECL|method|after
specifier|public
specifier|final
name|void
name|after
parameter_list|()
throws|throws
name|IOException
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"[{}#{}]: cleaning up after test"
argument_list|,
name|getTestClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|getTestName
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Scope
name|currentClusterScope
init|=
name|getCurrentClusterScope
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|currentClusterScope
operator|!=
name|Scope
operator|.
name|TEST
condition|)
block|{
name|MetaData
name|metaData
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
operator|.
name|getState
argument_list|()
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
literal|"test leaves persistent cluster metadata behind: "
operator|+
name|metaData
operator|.
name|persistentSettings
argument_list|()
operator|.
name|getAsMap
argument_list|()
argument_list|,
name|metaData
operator|.
name|persistentSettings
argument_list|()
operator|.
name|getAsMap
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"test leaves transient cluster metadata behind: "
operator|+
name|metaData
operator|.
name|transientSettings
argument_list|()
operator|.
name|getAsMap
argument_list|()
argument_list|,
name|metaData
operator|.
name|transientSettings
argument_list|()
operator|.
name|getAsMap
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|cluster
argument_list|()
operator|.
name|wipe
argument_list|()
expr_stmt|;
comment|// wipe after to make sure we fail in the test that didn't ack the delete
name|cluster
argument_list|()
operator|.
name|assertAfterTest
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|currentClusterScope
operator|==
name|Scope
operator|.
name|TEST
condition|)
block|{
name|clearClusters
argument_list|()
expr_stmt|;
comment|// it is ok to leave persistent / transient cluster state behind if scope is TEST
block|}
block|}
name|logger
operator|.
name|info
argument_list|(
literal|"[{}#{}]: cleaned up after test"
argument_list|,
name|getTestClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|getTestName
argument_list|()
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OutOfMemoryError
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"unable to create new native thread"
argument_list|)
condition|)
block|{
name|ElasticsearchTestCase
operator|.
name|printStackDump
argument_list|(
name|logger
argument_list|)
expr_stmt|;
block|}
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
comment|// if we failed that means that something broke horribly so we should
comment|// clear all clusters and if the current cluster is the global we shut that one
comment|// down as well to prevent subsequent tests from failing due to the same problem.
name|clearClusters
argument_list|()
expr_stmt|;
if|if
condition|(
name|currentCluster
operator|==
name|GLOBAL_CLUSTER
condition|)
block|{
name|GLOBAL_CLUSTER
operator|.
name|close
argument_list|()
expr_stmt|;
name|GLOBAL_CLUSTER
operator|=
literal|null
expr_stmt|;
name|initializeGlobalCluster
argument_list|()
expr_stmt|;
comment|// re-init that cluster
block|}
block|}
name|currentCluster
operator|.
name|afterTest
argument_list|()
expr_stmt|;
name|currentCluster
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|cluster
specifier|public
specifier|static
name|TestCluster
name|cluster
parameter_list|()
block|{
return|return
name|currentCluster
return|;
block|}
DECL|method|clusterService
specifier|public
name|ClusterService
name|clusterService
parameter_list|()
block|{
return|return
name|cluster
argument_list|()
operator|.
name|clusterService
argument_list|()
return|;
block|}
DECL|method|client
specifier|public
specifier|static
name|Client
name|client
parameter_list|()
block|{
name|Client
name|client
init|=
name|cluster
argument_list|()
operator|.
name|client
argument_list|()
decl_stmt|;
if|if
condition|(
name|frequently
argument_list|()
condition|)
block|{
name|client
operator|=
operator|new
name|RandomizingClient
argument_list|(
operator|(
name|InternalClient
operator|)
name|client
argument_list|,
name|getRandom
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|client
return|;
block|}
DECL|method|clients
specifier|public
specifier|static
name|Iterable
argument_list|<
name|Client
argument_list|>
name|clients
parameter_list|()
block|{
return|return
name|cluster
argument_list|()
return|;
block|}
DECL|method|minimumNumberOfShards
specifier|protected
name|int
name|minimumNumberOfShards
parameter_list|()
block|{
return|return
name|TestCluster
operator|.
name|DEFAULT_MIN_NUM_SHARDS
return|;
block|}
DECL|method|maximumNumberOfShards
specifier|protected
name|int
name|maximumNumberOfShards
parameter_list|()
block|{
return|return
name|TestCluster
operator|.
name|DEFAULT_MAX_NUM_SHARDS
return|;
block|}
DECL|method|numberOfShards
specifier|protected
name|int
name|numberOfShards
parameter_list|()
block|{
return|return
name|between
argument_list|(
name|minimumNumberOfShards
argument_list|()
argument_list|,
name|maximumNumberOfShards
argument_list|()
argument_list|)
return|;
block|}
DECL|method|minimumNumberOfReplicas
specifier|protected
name|int
name|minimumNumberOfReplicas
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
DECL|method|maximumNumberOfReplicas
specifier|protected
name|int
name|maximumNumberOfReplicas
parameter_list|()
block|{
return|return
name|cluster
argument_list|()
operator|.
name|dataNodes
argument_list|()
operator|-
literal|1
return|;
block|}
DECL|method|numberOfReplicas
specifier|protected
name|int
name|numberOfReplicas
parameter_list|()
block|{
return|return
name|between
argument_list|(
name|minimumNumberOfReplicas
argument_list|()
argument_list|,
name|maximumNumberOfReplicas
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Returns a settings object used in {@link #createIndex(String...)} and {@link #prepareCreate(String)} and friends.      * This method can be overwritten by subclasses to set defaults for the indices that are created by the test.      * By default it returns a settings object that sets a random number of shards. Number of shards and replicas      * can be controlled through specific methods.      */
DECL|method|indexSettings
specifier|public
name|Settings
name|indexSettings
parameter_list|()
block|{
name|ImmutableSettings
operator|.
name|Builder
name|builder
init|=
name|ImmutableSettings
operator|.
name|builder
argument_list|()
decl_stmt|;
name|int
name|numberOfShards
init|=
name|numberOfShards
argument_list|()
decl_stmt|;
if|if
condition|(
name|numberOfShards
operator|>
literal|0
condition|)
block|{
name|builder
operator|.
name|put
argument_list|(
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
name|numberOfShards
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
name|int
name|numberOfReplicas
init|=
name|numberOfReplicas
argument_list|()
decl_stmt|;
if|if
condition|(
name|numberOfReplicas
operator|>=
literal|0
condition|)
block|{
name|builder
operator|.
name|put
argument_list|(
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
name|numberOfReplicas
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**      * Creates one or more indices and asserts that the indices are acknowledged. If one of the indices      * already exists this method will fail and wipe all the indices created so far.      */
DECL|method|createIndex
specifier|public
specifier|final
name|void
name|createIndex
parameter_list|(
name|String
modifier|...
name|names
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|created
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|names
control|)
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|created
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
operator|&&
operator|!
name|created
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|cluster
argument_list|()
operator|.
name|wipeIndices
argument_list|(
name|created
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|created
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * Creates a new {@link CreateIndexRequestBuilder} with the settings obtained from {@link #indexSettings()}.      */
DECL|method|prepareCreate
specifier|public
specifier|final
name|CreateIndexRequestBuilder
name|prepareCreate
parameter_list|(
name|String
name|index
parameter_list|)
block|{
return|return
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
name|index
argument_list|)
operator|.
name|setSettings
argument_list|(
name|indexSettings
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Creates a new {@link CreateIndexRequestBuilder} with the settings obtained from {@link #indexSettings()}.      * The index that is created with this builder will only be allowed to allocate on the number of nodes passed to this      * method.      *<p>      * This method uses allocation deciders to filter out certain nodes to allocate the created index on. It defines allocation      * rules based on<code>index.routing.allocation.exclude._name</code>.      *</p>      */
DECL|method|prepareCreate
specifier|public
specifier|final
name|CreateIndexRequestBuilder
name|prepareCreate
parameter_list|(
name|String
name|index
parameter_list|,
name|int
name|numNodes
parameter_list|)
block|{
return|return
name|prepareCreate
argument_list|(
name|index
argument_list|,
name|numNodes
argument_list|,
name|ImmutableSettings
operator|.
name|builder
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Creates a new {@link CreateIndexRequestBuilder} with the settings obtained from {@link #indexSettings()}.      * The index that is created with this builder will only be allowed to allocate on the number of nodes passed to this      * method.      *<p>      * This method uses allocation deciders to filter out certain nodes to allocate the created index on. It defines allocation      * rules based on<code>index.routing.allocation.exclude._name</code>.      *</p>      */
DECL|method|prepareCreate
specifier|public
name|CreateIndexRequestBuilder
name|prepareCreate
parameter_list|(
name|String
name|index
parameter_list|,
name|int
name|numNodes
parameter_list|,
name|ImmutableSettings
operator|.
name|Builder
name|settingsBuilder
parameter_list|)
block|{
name|cluster
argument_list|()
operator|.
name|ensureAtLeastNumNodes
argument_list|(
name|numNodes
argument_list|)
expr_stmt|;
name|ImmutableSettings
operator|.
name|Builder
name|builder
init|=
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|indexSettings
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|settingsBuilder
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|numNodes
operator|>
literal|0
condition|)
block|{
name|getExcludeSettings
argument_list|(
name|index
argument_list|,
name|numNodes
argument_list|,
name|builder
argument_list|)
expr_stmt|;
block|}
return|return
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
name|index
argument_list|)
operator|.
name|setSettings
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getExcludeSettings
specifier|private
name|ImmutableSettings
operator|.
name|Builder
name|getExcludeSettings
parameter_list|(
name|String
name|index
parameter_list|,
name|int
name|num
parameter_list|,
name|ImmutableSettings
operator|.
name|Builder
name|builder
parameter_list|)
block|{
name|String
name|exclude
init|=
name|Joiner
operator|.
name|on
argument_list|(
literal|','
argument_list|)
operator|.
name|join
argument_list|(
name|cluster
argument_list|()
operator|.
name|allButN
argument_list|(
name|num
argument_list|)
argument_list|)
decl_stmt|;
name|builder
operator|.
name|put
argument_list|(
literal|"index.routing.allocation.exclude._name"
argument_list|,
name|exclude
argument_list|)
expr_stmt|;
return|return
name|builder
return|;
block|}
comment|/**      * Restricts the given index to be allocated on<code>n</code> nodes using the allocation deciders.      * Yet if the shards can't be allocated on any other node shards for this index will remain allocated on      * more than<code>n</code> nodes.      */
DECL|method|allowNodes
specifier|public
name|void
name|allowNodes
parameter_list|(
name|String
name|index
parameter_list|,
name|int
name|n
parameter_list|)
block|{
assert|assert
name|index
operator|!=
literal|null
assert|;
name|cluster
argument_list|()
operator|.
name|ensureAtLeastNumNodes
argument_list|(
name|n
argument_list|)
expr_stmt|;
name|ImmutableSettings
operator|.
name|Builder
name|builder
init|=
name|ImmutableSettings
operator|.
name|builder
argument_list|()
decl_stmt|;
if|if
condition|(
name|n
operator|>
literal|0
condition|)
block|{
name|getExcludeSettings
argument_list|(
name|index
argument_list|,
name|n
argument_list|,
name|builder
argument_list|)
expr_stmt|;
block|}
name|Settings
name|build
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|build
operator|.
name|getAsMap
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"allowNodes: updating [{}]'s setting to [{}]"
argument_list|,
name|index
argument_list|,
name|build
operator|.
name|toDelimitedString
argument_list|(
literal|';'
argument_list|)
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareUpdateSettings
argument_list|(
name|index
argument_list|)
operator|.
name|setSettings
argument_list|(
name|build
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Ensures the cluster has a green state via the cluster health API. This method will also wait for relocations.      * It is useful to ensure that all action on the cluster have finished and all shards that were currently relocating      * are now allocated and started.      */
DECL|method|ensureGreen
specifier|public
name|ClusterHealthStatus
name|ensureGreen
parameter_list|(
name|String
modifier|...
name|indices
parameter_list|)
block|{
name|ClusterHealthResponse
name|actionGet
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|health
argument_list|(
name|Requests
operator|.
name|clusterHealthRequest
argument_list|(
name|indices
argument_list|)
operator|.
name|waitForGreenStatus
argument_list|()
operator|.
name|waitForEvents
argument_list|(
name|Priority
operator|.
name|LANGUID
argument_list|)
operator|.
name|waitForRelocatingShards
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|actionGet
argument_list|()
decl_stmt|;
if|if
condition|(
name|actionGet
operator|.
name|isTimedOut
argument_list|()
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"ensureGreen timed out, cluster state:\n{}\n{}"
argument_list|,
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|getState
argument_list|()
operator|.
name|prettyPrint
argument_list|()
argument_list|,
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|preparePendingClusterTasks
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|prettyPrint
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"timed out waiting for green state"
argument_list|,
name|actionGet
operator|.
name|isTimedOut
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|actionGet
operator|.
name|getStatus
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|ClusterHealthStatus
operator|.
name|GREEN
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|actionGet
operator|.
name|getStatus
argument_list|()
return|;
block|}
comment|/**      * Waits for all relocating shards to become active using the cluster health API.      */
DECL|method|waitForRelocation
specifier|public
name|ClusterHealthStatus
name|waitForRelocation
parameter_list|()
block|{
return|return
name|waitForRelocation
argument_list|(
literal|null
argument_list|)
return|;
block|}
comment|/**      * Waits for all relocating shards to become active and the cluster has reached the given health status      * using the cluster health API.      */
DECL|method|waitForRelocation
specifier|public
name|ClusterHealthStatus
name|waitForRelocation
parameter_list|(
name|ClusterHealthStatus
name|status
parameter_list|)
block|{
name|ClusterHealthRequest
name|request
init|=
name|Requests
operator|.
name|clusterHealthRequest
argument_list|()
operator|.
name|waitForRelocatingShards
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
operator|!=
literal|null
condition|)
block|{
name|request
operator|.
name|waitForStatus
argument_list|(
name|status
argument_list|)
expr_stmt|;
block|}
name|ClusterHealthResponse
name|actionGet
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|health
argument_list|(
name|request
argument_list|)
operator|.
name|actionGet
argument_list|()
decl_stmt|;
if|if
condition|(
name|actionGet
operator|.
name|isTimedOut
argument_list|()
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"waitForRelocation timed out (status={}), cluster state:\n{}\n{}"
argument_list|,
name|status
argument_list|,
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|getState
argument_list|()
operator|.
name|prettyPrint
argument_list|()
argument_list|,
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|preparePendingClusterTasks
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|prettyPrint
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"timed out waiting for relocation"
argument_list|,
name|actionGet
operator|.
name|isTimedOut
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|status
operator|!=
literal|null
condition|)
block|{
name|assertThat
argument_list|(
name|actionGet
operator|.
name|getStatus
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|status
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|actionGet
operator|.
name|getStatus
argument_list|()
return|;
block|}
comment|/**      * Sets the cluster's minimum master node and make sure the response is acknowledge.      * Note: this doesn't guaranty the new settings is in effect, just that it has been received bu all nodes.      */
DECL|method|setMinimumMasterNodes
specifier|public
name|void
name|setMinimumMasterNodes
parameter_list|(
name|int
name|n
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareUpdateSettings
argument_list|()
operator|.
name|setTransientSettings
argument_list|(
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
name|ElectMasterService
operator|.
name|DISCOVERY_ZEN_MINIMUM_MASTER_NODES
argument_list|,
name|n
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|isAcknowledged
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Ensures the cluster has a yellow state via the cluster health API.      */
DECL|method|ensureYellow
specifier|public
name|ClusterHealthStatus
name|ensureYellow
parameter_list|(
name|String
modifier|...
name|indices
parameter_list|)
block|{
name|ClusterHealthResponse
name|actionGet
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|health
argument_list|(
name|Requests
operator|.
name|clusterHealthRequest
argument_list|(
name|indices
argument_list|)
operator|.
name|waitForRelocatingShards
argument_list|(
literal|0
argument_list|)
operator|.
name|waitForYellowStatus
argument_list|()
operator|.
name|waitForEvents
argument_list|(
name|Priority
operator|.
name|LANGUID
argument_list|)
argument_list|)
operator|.
name|actionGet
argument_list|()
decl_stmt|;
if|if
condition|(
name|actionGet
operator|.
name|isTimedOut
argument_list|()
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"ensureYellow timed out, cluster state:\n{}\n{}"
argument_list|,
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|getState
argument_list|()
operator|.
name|prettyPrint
argument_list|()
argument_list|,
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|preparePendingClusterTasks
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|prettyPrint
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"timed out waiting for yellow"
argument_list|,
name|actionGet
operator|.
name|isTimedOut
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|actionGet
operator|.
name|getStatus
argument_list|()
return|;
block|}
comment|/**      * Ensures the cluster is in a searchable state for the given indices. This means a searchable copy of each      * shard is available on the cluster.      */
DECL|method|ensureSearchable
specifier|protected
name|ClusterHealthStatus
name|ensureSearchable
parameter_list|(
name|String
modifier|...
name|indices
parameter_list|)
block|{
comment|// this is just a temporary thing but it's easier to change if it is encapsulated.
return|return
name|ensureGreen
argument_list|(
name|indices
argument_list|)
return|;
block|}
comment|/**      * Syntactic sugar for:      *<pre>      *   client().prepareIndex(index, type).setSource(source).execute().actionGet();      *</pre>      */
DECL|method|index
specifier|protected
specifier|final
name|IndexResponse
name|index
parameter_list|(
name|String
name|index
parameter_list|,
name|String
name|type
parameter_list|,
name|XContentBuilder
name|source
parameter_list|)
block|{
return|return
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|index
argument_list|,
name|type
argument_list|)
operator|.
name|setSource
argument_list|(
name|source
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
return|;
block|}
comment|/**      * Syntactic sugar for:      *<pre>      *   client().prepareIndex(index, type).setSource(source).execute().actionGet();      *</pre>      */
DECL|method|index
specifier|protected
specifier|final
name|IndexResponse
name|index
parameter_list|(
name|String
name|index
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|id
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|source
parameter_list|)
block|{
return|return
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|index
argument_list|,
name|type
argument_list|,
name|id
argument_list|)
operator|.
name|setSource
argument_list|(
name|source
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
return|;
block|}
comment|/**      * Syntactic sugar for:      *<pre>      *   client().prepareGet(index, type, id).execute().actionGet();      *</pre>      */
DECL|method|get
specifier|protected
specifier|final
name|GetResponse
name|get
parameter_list|(
name|String
name|index
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|id
parameter_list|)
block|{
return|return
name|client
argument_list|()
operator|.
name|prepareGet
argument_list|(
name|index
argument_list|,
name|type
argument_list|,
name|id
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
return|;
block|}
comment|/**      * Syntactic sugar for:      *<pre>      *   return client().prepareIndex(index, type, id).setSource(source).execute().actionGet();      *</pre>      */
DECL|method|index
specifier|protected
specifier|final
name|IndexResponse
name|index
parameter_list|(
name|String
name|index
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|id
parameter_list|,
name|XContentBuilder
name|source
parameter_list|)
block|{
return|return
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|index
argument_list|,
name|type
argument_list|,
name|id
argument_list|)
operator|.
name|setSource
argument_list|(
name|source
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
return|;
block|}
comment|/**      * Syntactic sugar for:      *<pre>      *   return client().prepareIndex(index, type, id).setSource(source).execute().actionGet();      *</pre>      */
DECL|method|index
specifier|protected
specifier|final
name|IndexResponse
name|index
parameter_list|(
name|String
name|index
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|id
parameter_list|,
name|Object
modifier|...
name|source
parameter_list|)
block|{
return|return
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|index
argument_list|,
name|type
argument_list|,
name|id
argument_list|)
operator|.
name|setSource
argument_list|(
name|source
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
return|;
block|}
comment|/**      * Waits for relocations and refreshes all indices in the cluster.      *      * @see #waitForRelocation()      */
DECL|method|refresh
specifier|protected
specifier|final
name|RefreshResponse
name|refresh
parameter_list|()
block|{
name|waitForRelocation
argument_list|()
expr_stmt|;
comment|// TODO RANDOMIZE with flush?
name|RefreshResponse
name|actionGet
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareRefresh
argument_list|()
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertNoFailures
argument_list|(
name|actionGet
argument_list|)
expr_stmt|;
return|return
name|actionGet
return|;
block|}
comment|/**      * Flushes and refreshes all indices in the cluster      */
DECL|method|flushAndRefresh
specifier|protected
specifier|final
name|void
name|flushAndRefresh
parameter_list|()
block|{
name|flush
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
block|}
comment|/**      * Flushes all indices in the cluster      */
DECL|method|flush
specifier|protected
specifier|final
name|FlushResponse
name|flush
parameter_list|()
block|{
return|return
name|flush
argument_list|(
literal|true
argument_list|)
return|;
block|}
DECL|method|flush
specifier|private
name|FlushResponse
name|flush
parameter_list|(
name|boolean
name|ignoreNotAllowed
parameter_list|)
block|{
name|waitForRelocation
argument_list|()
expr_stmt|;
name|FlushResponse
name|actionGet
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareFlush
argument_list|()
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
if|if
condition|(
name|ignoreNotAllowed
condition|)
block|{
for|for
control|(
name|ShardOperationFailedException
name|failure
range|:
name|actionGet
operator|.
name|getShardFailures
argument_list|()
control|)
block|{
name|assertThat
argument_list|(
literal|"unexpected flush failure "
operator|+
name|failure
operator|.
name|reason
argument_list|()
argument_list|,
name|failure
operator|.
name|status
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|RestStatus
operator|.
name|SERVICE_UNAVAILABLE
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|assertNoFailures
argument_list|(
name|actionGet
argument_list|)
expr_stmt|;
block|}
return|return
name|actionGet
return|;
block|}
comment|/**      * Waits for all relocations and optimized all indices in the cluster to 1 segment.      */
DECL|method|optimize
specifier|protected
name|OptimizeResponse
name|optimize
parameter_list|()
block|{
name|waitForRelocation
argument_list|()
expr_stmt|;
name|OptimizeResponse
name|actionGet
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareOptimize
argument_list|()
operator|.
name|setForce
argument_list|(
name|randomBoolean
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertNoFailures
argument_list|(
name|actionGet
argument_list|)
expr_stmt|;
return|return
name|actionGet
return|;
block|}
comment|/**      * Returns<code>true</code> iff the given index exists otherwise<code>false</code>      */
DECL|method|indexExists
specifier|protected
name|boolean
name|indexExists
parameter_list|(
name|String
name|index
parameter_list|)
block|{
name|IndicesExistsResponse
name|actionGet
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareExists
argument_list|(
name|index
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
return|return
name|actionGet
operator|.
name|isExists
argument_list|()
return|;
block|}
comment|/**      * Returns a random admin client. This client can either be a node or a transport client pointing to any of      * the nodes in the cluster.      */
DECL|method|admin
specifier|protected
name|AdminClient
name|admin
parameter_list|()
block|{
return|return
name|client
argument_list|()
operator|.
name|admin
argument_list|()
return|;
block|}
comment|/**      * Convenience method that forwards to {@link #indexRandom(boolean, List)}.      */
DECL|method|indexRandom
specifier|public
name|void
name|indexRandom
parameter_list|(
name|boolean
name|forceRefresh
parameter_list|,
name|IndexRequestBuilder
modifier|...
name|builders
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
name|indexRandom
argument_list|(
name|forceRefresh
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|builders
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Indexes the given {@link IndexRequestBuilder} instances randomly. It shuffles the given builders and either      * indexes they in a blocking or async fashion. This is very useful to catch problems that relate to internal document      * ids or index segment creations. Some features might have bug when a given document is the first or the last in a      * segment or if only one document is in a segment etc. This method prevents issues like this by randomizing the index      * layout.      */
DECL|method|indexRandom
specifier|public
name|void
name|indexRandom
parameter_list|(
name|boolean
name|forceRefresh
parameter_list|,
name|List
argument_list|<
name|IndexRequestBuilder
argument_list|>
name|builders
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
if|if
condition|(
name|builders
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return;
block|}
name|Random
name|random
init|=
name|getRandom
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|indicesSet
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|IndexRequestBuilder
name|builder
range|:
name|builders
control|)
block|{
name|indicesSet
operator|.
name|add
argument_list|(
name|builder
operator|.
name|request
argument_list|()
operator|.
name|index
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
index|[]
name|indices
init|=
name|indicesSet
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|indicesSet
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|shuffle
argument_list|(
name|builders
argument_list|,
name|random
argument_list|)
expr_stmt|;
specifier|final
name|CopyOnWriteArrayList
argument_list|<
name|Tuple
argument_list|<
name|IndexRequestBuilder
argument_list|,
name|Throwable
argument_list|>
argument_list|>
name|errors
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|CountDownLatch
argument_list|>
name|inFlightAsyncOperations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// If you are indexing just a few documents then frequently do it one at a time.  If many then frequently in bulk.
if|if
condition|(
name|builders
operator|.
name|size
argument_list|()
operator|<
name|FREQUENT_BULK_THRESHOLD
condition|?
name|frequently
argument_list|()
else|:
name|rarely
argument_list|()
condition|)
block|{
if|if
condition|(
name|frequently
argument_list|()
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Index [{}] docs async: [{}] bulk: [{}]"
argument_list|,
name|builders
operator|.
name|size
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|IndexRequestBuilder
name|indexRequestBuilder
range|:
name|builders
control|)
block|{
name|indexRequestBuilder
operator|.
name|execute
argument_list|(
operator|new
name|PayloadLatchedActionListener
argument_list|<
name|IndexResponse
argument_list|,
name|IndexRequestBuilder
argument_list|>
argument_list|(
name|indexRequestBuilder
argument_list|,
name|newLatch
argument_list|(
name|inFlightAsyncOperations
argument_list|)
argument_list|,
name|errors
argument_list|)
argument_list|)
expr_stmt|;
name|postIndexAsyncActions
argument_list|(
name|indices
argument_list|,
name|inFlightAsyncOperations
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Index [{}] docs async: [{}] bulk: [{}]"
argument_list|,
name|builders
operator|.
name|size
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|IndexRequestBuilder
name|indexRequestBuilder
range|:
name|builders
control|)
block|{
name|indexRequestBuilder
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|postIndexAsyncActions
argument_list|(
name|indices
argument_list|,
name|inFlightAsyncOperations
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Index [{}] docs async: [{}] bulk: [{}]"
argument_list|,
name|builders
operator|.
name|size
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|List
argument_list|<
name|IndexRequestBuilder
argument_list|>
name|segmented
range|:
name|Lists
operator|.
name|partition
argument_list|(
name|builders
argument_list|,
name|between
argument_list|(
name|MAX_BULK_INDEX_REQUEST_SIZE
operator|/
literal|2
argument_list|,
name|MAX_BULK_INDEX_REQUEST_SIZE
argument_list|)
argument_list|)
control|)
block|{
name|BulkRequestBuilder
name|bulkBuilder
init|=
name|client
argument_list|()
operator|.
name|prepareBulk
argument_list|()
decl_stmt|;
for|for
control|(
name|IndexRequestBuilder
name|indexRequestBuilder
range|:
name|segmented
control|)
block|{
name|bulkBuilder
operator|.
name|add
argument_list|(
name|indexRequestBuilder
argument_list|)
expr_stmt|;
block|}
name|BulkResponse
name|actionGet
init|=
name|bulkBuilder
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|actionGet
operator|.
name|hasFailures
argument_list|()
condition|?
name|actionGet
operator|.
name|buildFailureMessage
argument_list|()
else|:
literal|""
argument_list|,
name|actionGet
operator|.
name|hasFailures
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|CountDownLatch
name|operation
range|:
name|inFlightAsyncOperations
control|)
block|{
name|operation
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
specifier|final
name|List
argument_list|<
name|Throwable
argument_list|>
name|actualErrors
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Tuple
argument_list|<
name|IndexRequestBuilder
argument_list|,
name|Throwable
argument_list|>
name|tuple
range|:
name|errors
control|)
block|{
if|if
condition|(
name|ExceptionsHelper
operator|.
name|unwrapCause
argument_list|(
name|tuple
operator|.
name|v2
argument_list|()
argument_list|)
operator|instanceof
name|EsRejectedExecutionException
condition|)
block|{
name|tuple
operator|.
name|v1
argument_list|()
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
comment|// re-index if rejected
block|}
else|else
block|{
name|actualErrors
operator|.
name|add
argument_list|(
name|tuple
operator|.
name|v2
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|assertThat
argument_list|(
name|actualErrors
argument_list|,
name|emptyIterable
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|forceRefresh
condition|)
block|{
name|assertNoFailures
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareRefresh
argument_list|(
name|indices
argument_list|)
operator|.
name|setIndicesOptions
argument_list|(
name|IndicesOptions
operator|.
name|lenient
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|newLatch
specifier|private
specifier|static
name|CountDownLatch
name|newLatch
parameter_list|(
name|List
argument_list|<
name|CountDownLatch
argument_list|>
name|latches
parameter_list|)
block|{
name|CountDownLatch
name|l
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|latches
operator|.
name|add
argument_list|(
name|l
argument_list|)
expr_stmt|;
return|return
name|l
return|;
block|}
comment|/**      * Maybe refresh, optimize, or flush then always make sure there aren't too many in flight async operations.       */
DECL|method|postIndexAsyncActions
specifier|private
name|void
name|postIndexAsyncActions
parameter_list|(
name|String
index|[]
name|indices
parameter_list|,
name|List
argument_list|<
name|CountDownLatch
argument_list|>
name|inFlightAsyncOperations
parameter_list|)
throws|throws
name|InterruptedException
block|{
if|if
condition|(
name|rarely
argument_list|()
condition|)
block|{
if|if
condition|(
name|rarely
argument_list|()
condition|)
block|{
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareRefresh
argument_list|(
name|indices
argument_list|)
operator|.
name|setIndicesOptions
argument_list|(
name|IndicesOptions
operator|.
name|lenient
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|(
operator|new
name|LatchedActionListener
argument_list|<
name|RefreshResponse
argument_list|>
argument_list|(
name|newLatch
argument_list|(
name|inFlightAsyncOperations
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|rarely
argument_list|()
condition|)
block|{
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareFlush
argument_list|(
name|indices
argument_list|)
operator|.
name|setIndicesOptions
argument_list|(
name|IndicesOptions
operator|.
name|lenient
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|(
operator|new
name|LatchedActionListener
argument_list|<
name|FlushResponse
argument_list|>
argument_list|(
name|newLatch
argument_list|(
name|inFlightAsyncOperations
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|rarely
argument_list|()
condition|)
block|{
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareOptimize
argument_list|(
name|indices
argument_list|)
operator|.
name|setIndicesOptions
argument_list|(
name|IndicesOptions
operator|.
name|lenient
argument_list|()
argument_list|)
operator|.
name|setMaxNumSegments
argument_list|(
name|between
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|)
operator|.
name|setFlush
argument_list|(
name|randomBoolean
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|(
operator|new
name|LatchedActionListener
argument_list|<
name|OptimizeResponse
argument_list|>
argument_list|(
name|newLatch
argument_list|(
name|inFlightAsyncOperations
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
while|while
condition|(
name|inFlightAsyncOperations
operator|.
name|size
argument_list|()
operator|>
name|MAX_IN_FLIGHT_ASYNC_INDEXES
condition|)
block|{
name|int
name|waitFor
init|=
name|between
argument_list|(
literal|0
argument_list|,
name|inFlightAsyncOperations
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|inFlightAsyncOperations
operator|.
name|remove
argument_list|(
name|waitFor
argument_list|)
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|LatchedActionListener
specifier|private
class|class
name|LatchedActionListener
parameter_list|<
name|Response
parameter_list|>
implements|implements
name|ActionListener
argument_list|<
name|Response
argument_list|>
block|{
DECL|field|latch
specifier|private
specifier|final
name|CountDownLatch
name|latch
decl_stmt|;
DECL|method|LatchedActionListener
specifier|public
name|LatchedActionListener
parameter_list|(
name|CountDownLatch
name|latch
parameter_list|)
block|{
name|this
operator|.
name|latch
operator|=
name|latch
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onResponse
specifier|public
specifier|final
name|void
name|onResponse
parameter_list|(
name|Response
name|response
parameter_list|)
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onFailure
specifier|public
specifier|final
name|void
name|onFailure
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
try|try
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Action Failed"
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|addError
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|addError
specifier|protected
name|void
name|addError
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{         }
block|}
DECL|class|PayloadLatchedActionListener
specifier|private
class|class
name|PayloadLatchedActionListener
parameter_list|<
name|Response
parameter_list|,
name|T
parameter_list|>
extends|extends
name|LatchedActionListener
argument_list|<
name|Response
argument_list|>
block|{
DECL|field|errors
specifier|private
specifier|final
name|CopyOnWriteArrayList
argument_list|<
name|Tuple
argument_list|<
name|T
argument_list|,
name|Throwable
argument_list|>
argument_list|>
name|errors
decl_stmt|;
DECL|field|builder
specifier|private
specifier|final
name|T
name|builder
decl_stmt|;
DECL|method|PayloadLatchedActionListener
specifier|public
name|PayloadLatchedActionListener
parameter_list|(
name|T
name|builder
parameter_list|,
name|CountDownLatch
name|latch
parameter_list|,
name|CopyOnWriteArrayList
argument_list|<
name|Tuple
argument_list|<
name|T
argument_list|,
name|Throwable
argument_list|>
argument_list|>
name|errors
parameter_list|)
block|{
name|super
argument_list|(
name|latch
argument_list|)
expr_stmt|;
name|this
operator|.
name|errors
operator|=
name|errors
expr_stmt|;
name|this
operator|.
name|builder
operator|=
name|builder
expr_stmt|;
block|}
DECL|method|addError
specifier|protected
name|void
name|addError
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|errors
operator|.
name|add
argument_list|(
operator|new
name|Tuple
argument_list|<>
argument_list|(
name|builder
argument_list|,
name|t
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Clears the given scroll Ids      */
DECL|method|clearScroll
specifier|public
name|void
name|clearScroll
parameter_list|(
name|String
modifier|...
name|scrollIds
parameter_list|)
block|{
name|ClearScrollResponse
name|clearResponse
init|=
name|client
argument_list|()
operator|.
name|prepareClearScroll
argument_list|()
operator|.
name|setScrollIds
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|scrollIds
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|clearResponse
operator|.
name|isSucceeded
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * The scope of a test cluster used together with      * {@link ClusterScope} annotations on {@link ElasticsearchIntegrationTest} subclasses.      */
DECL|enum|Scope
specifier|public
specifier|static
enum|enum
name|Scope
block|{
comment|/**          * A globally shared cluster. This cluster doesn't allow modification of transient or persistent          * cluster settings.          */
DECL|enum constant|GLOBAL
name|GLOBAL
block|,
comment|/**          * A cluster shared across all method in a single test suite          */
DECL|enum constant|SUITE
name|SUITE
block|,
comment|/**          * A test exclusive test cluster          */
DECL|enum constant|TEST
name|TEST
block|}
DECL|method|getAnnotation
specifier|private
name|ClusterScope
name|getAnnotation
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|)
block|{
if|if
condition|(
name|clazz
operator|==
name|Object
operator|.
name|class
operator|||
name|clazz
operator|==
name|ElasticsearchIntegrationTest
operator|.
name|class
condition|)
block|{
return|return
literal|null
return|;
block|}
name|ClusterScope
name|annotation
init|=
name|clazz
operator|.
name|getAnnotation
argument_list|(
name|ClusterScope
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|annotation
operator|!=
literal|null
condition|)
block|{
return|return
name|annotation
return|;
block|}
return|return
name|getAnnotation
argument_list|(
name|clazz
operator|.
name|getSuperclass
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getCurrentClusterScope
specifier|private
name|Scope
name|getCurrentClusterScope
parameter_list|()
block|{
name|ClusterScope
name|annotation
init|=
name|getAnnotation
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
comment|// if we are not annotated assume global!
return|return
name|annotation
operator|==
literal|null
condition|?
name|Scope
operator|.
name|GLOBAL
else|:
name|annotation
operator|.
name|scope
argument_list|()
return|;
block|}
DECL|method|getNumNodes
specifier|private
name|int
name|getNumNodes
parameter_list|()
block|{
name|ClusterScope
name|annotation
init|=
name|getAnnotation
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|annotation
operator|==
literal|null
condition|?
operator|-
literal|1
else|:
name|annotation
operator|.
name|numNodes
argument_list|()
return|;
block|}
DECL|method|getMinNumNodes
specifier|private
name|int
name|getMinNumNodes
parameter_list|()
block|{
name|ClusterScope
name|annotation
init|=
name|getAnnotation
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|annotation
operator|==
literal|null
condition|?
name|TestCluster
operator|.
name|DEFAULT_MIN_NUM_NODES
else|:
name|annotation
operator|.
name|minNumNodes
argument_list|()
return|;
block|}
DECL|method|getMaxNumNodes
specifier|private
name|int
name|getMaxNumNodes
parameter_list|()
block|{
name|ClusterScope
name|annotation
init|=
name|getAnnotation
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|annotation
operator|==
literal|null
condition|?
name|TestCluster
operator|.
name|DEFAULT_MAX_NUM_NODES
else|:
name|annotation
operator|.
name|maxNumNodes
argument_list|()
return|;
block|}
comment|/**      * This method is used to obtain settings for the<tt>Nth</tt> node in the cluster.      * Nodes in this cluster are associated with an ordinal number such that nodes can      * be started with specific configurations. This method might be called multiple      * times with the same ordinal and is expected to return the same value for each invocation.      * In other words subclasses must ensure this method is idempotent.      */
DECL|method|nodeSettings
specifier|protected
name|Settings
name|nodeSettings
parameter_list|(
name|int
name|nodeOrdinal
parameter_list|)
block|{
return|return
name|ImmutableSettings
operator|.
name|EMPTY
return|;
block|}
DECL|method|buildTestCluster
specifier|private
name|TestCluster
name|buildTestCluster
parameter_list|(
name|Scope
name|scope
parameter_list|)
block|{
name|long
name|currentClusterSeed
init|=
name|randomLong
argument_list|()
decl_stmt|;
name|int
name|numNodes
init|=
name|getNumNodes
argument_list|()
decl_stmt|;
name|NodeSettingsSource
name|nodeSettingsSource
decl_stmt|;
if|if
condition|(
name|numNodes
operator|>
literal|0
condition|)
block|{
name|NodeSettingsSource
operator|.
name|Immutable
operator|.
name|Builder
name|nodesSettings
init|=
name|NodeSettingsSource
operator|.
name|Immutable
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numNodes
condition|;
name|i
operator|++
control|)
block|{
name|nodesSettings
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|nodeSettings
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|nodeSettingsSource
operator|=
name|nodesSettings
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|nodeSettingsSource
operator|=
operator|new
name|NodeSettingsSource
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Settings
name|settings
parameter_list|(
name|int
name|nodeOrdinal
parameter_list|)
block|{
return|return
name|nodeSettings
argument_list|(
name|nodeOrdinal
argument_list|)
return|;
block|}
block|}
expr_stmt|;
block|}
name|int
name|minNumNodes
decl_stmt|,
name|maxNumNodes
decl_stmt|;
if|if
condition|(
name|numNodes
operator|>=
literal|0
condition|)
block|{
name|minNumNodes
operator|=
name|maxNumNodes
operator|=
name|numNodes
expr_stmt|;
block|}
else|else
block|{
name|minNumNodes
operator|=
name|getMinNumNodes
argument_list|()
expr_stmt|;
name|maxNumNodes
operator|=
name|getMaxNumNodes
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|TestCluster
argument_list|(
name|currentClusterSeed
argument_list|,
name|minNumNodes
argument_list|,
name|maxNumNodes
argument_list|,
name|clusterName
argument_list|(
name|scope
operator|.
name|name
argument_list|()
argument_list|,
name|ElasticsearchTestCase
operator|.
name|CHILD_VM_ID
argument_list|,
name|currentClusterSeed
argument_list|)
argument_list|,
name|nodeSettingsSource
argument_list|)
return|;
block|}
comment|/**      * Defines a cluster scope for a {@link ElasticsearchIntegrationTest} subclass.      * By default if no {@link ClusterScope} annotation is present {@link Scope#GLOBAL} is used      * together with randomly chosen settings like number of nodes etc.      */
annotation|@
name|Retention
argument_list|(
name|RetentionPolicy
operator|.
name|RUNTIME
argument_list|)
annotation|@
name|Target
argument_list|(
block|{
name|ElementType
operator|.
name|TYPE
block|}
argument_list|)
DECL|interface|ClusterScope
specifier|public
annotation_defn|@interface
name|ClusterScope
block|{
comment|/**          * Returns the scope. {@link Scope#GLOBAL} is default.          */
DECL|field|Scope.GLOBAL
name|Scope
name|scope
parameter_list|()
default|default
name|Scope
operator|.
name|GLOBAL
function_decl|;
comment|/**          * Returns the number of nodes in the cluster. Default is<tt>-1</tt> which means          * a random number of nodes is used, where the minimum and maximum number of nodes          * are either the specified ones or the default ones if not specified.          */
name|int
name|numNodes
parameter_list|()
default|default
operator|-
literal|1
function_decl|;
comment|/**          * Returns the minimum number of nodes in the cluster. Default is {@link TestCluster#DEFAULT_MIN_NUM_NODES}.          * Ignored when {@link ClusterScope#numNodes()} is set.          */
DECL|field|TestCluster.DEFAULT_MIN_NUM_NODES
name|int
name|minNumNodes
parameter_list|()
default|default
name|TestCluster
operator|.
name|DEFAULT_MIN_NUM_NODES
function_decl|;
comment|/**          * Returns the maximum number of nodes in the cluster.  Default is {@link TestCluster#DEFAULT_MAX_NUM_NODES}.          * Ignored when {@link ClusterScope#numNodes()} is set.          */
DECL|field|TestCluster.DEFAULT_MAX_NUM_NODES
name|int
name|maxNumNodes
parameter_list|()
default|default
name|TestCluster
operator|.
name|DEFAULT_MAX_NUM_NODES
function_decl|;
comment|/**          * Returns the transport client ratio. By default this returns<code>-1</code> which means a random          * ratio in the interval<code>[0..1]</code> is used.          */
name|double
name|transportClientRatio
parameter_list|()
default|default
operator|-
literal|1
function_decl|;
block|}
comment|/**      * Returns the client ratio configured via      */
DECL|method|transportClientRatio
specifier|private
specifier|static
name|double
name|transportClientRatio
parameter_list|()
block|{
name|String
name|property
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|TESTS_CLIENT_RATIO
argument_list|)
decl_stmt|;
if|if
condition|(
name|property
operator|==
literal|null
operator|||
name|property
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Double
operator|.
name|NaN
return|;
block|}
return|return
name|Double
operator|.
name|parseDouble
argument_list|(
name|property
argument_list|)
return|;
block|}
comment|/**      * Returns the transport client ratio from the class level annotation or via      * {@link System#getProperty(String)} if available. If both are not available this will      * return a random ratio in the interval<tt>[0..1]</tt>      */
DECL|method|getPerTestTransportClientRatio
specifier|protected
name|double
name|getPerTestTransportClientRatio
parameter_list|()
block|{
specifier|final
name|ClusterScope
name|annotation
init|=
name|getAnnotation
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
name|double
name|perTestRatio
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|annotation
operator|!=
literal|null
condition|)
block|{
name|perTestRatio
operator|=
name|annotation
operator|.
name|transportClientRatio
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|perTestRatio
operator|==
operator|-
literal|1
condition|)
block|{
return|return
name|Double
operator|.
name|isNaN
argument_list|(
name|TRANSPORT_CLIENT_RATIO
argument_list|)
condition|?
name|randomDouble
argument_list|()
else|:
name|TRANSPORT_CLIENT_RATIO
return|;
block|}
assert|assert
name|perTestRatio
operator|>=
literal|0.0
operator|&&
name|perTestRatio
operator|<=
literal|1.0
assert|;
return|return
name|perTestRatio
return|;
block|}
comment|/**      * Returns a random numeric field data format from the choices of "array",      * "compressed", or "doc_values".      */
DECL|method|randomNumericFieldDataFormat
specifier|public
specifier|static
name|String
name|randomNumericFieldDataFormat
parameter_list|()
block|{
return|return
name|randomFrom
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"array"
argument_list|,
literal|"compressed"
argument_list|,
literal|"doc_values"
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Returns a random bytes field data format from the choices of      * "paged_bytes", "fst", or "doc_values".      */
DECL|method|randomBytesFieldDataFormat
specifier|public
specifier|static
name|String
name|randomBytesFieldDataFormat
parameter_list|()
block|{
return|return
name|randomFrom
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"paged_bytes"
argument_list|,
literal|"fst"
argument_list|,
literal|"doc_values"
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getNumShards
specifier|protected
name|NumShards
name|getNumShards
parameter_list|(
name|String
name|index
parameter_list|)
block|{
name|MetaData
name|metaData
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|getState
argument_list|()
operator|.
name|metaData
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|metaData
operator|.
name|hasIndex
argument_list|(
name|index
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|numShards
init|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|metaData
operator|.
name|index
argument_list|(
name|index
argument_list|)
operator|.
name|settings
argument_list|()
operator|.
name|get
argument_list|(
name|SETTING_NUMBER_OF_SHARDS
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|numReplicas
init|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|metaData
operator|.
name|index
argument_list|(
name|index
argument_list|)
operator|.
name|settings
argument_list|()
operator|.
name|get
argument_list|(
name|SETTING_NUMBER_OF_REPLICAS
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|NumShards
argument_list|(
name|numShards
argument_list|,
name|numReplicas
argument_list|)
return|;
block|}
DECL|class|NumShards
specifier|protected
specifier|static
class|class
name|NumShards
block|{
DECL|field|numPrimaries
specifier|public
specifier|final
name|int
name|numPrimaries
decl_stmt|;
DECL|field|numReplicas
specifier|public
specifier|final
name|int
name|numReplicas
decl_stmt|;
DECL|field|totalNumShards
specifier|public
specifier|final
name|int
name|totalNumShards
decl_stmt|;
DECL|field|dataCopies
specifier|public
specifier|final
name|int
name|dataCopies
decl_stmt|;
DECL|method|NumShards
specifier|private
name|NumShards
parameter_list|(
name|int
name|numPrimaries
parameter_list|,
name|int
name|numReplicas
parameter_list|)
block|{
name|this
operator|.
name|numPrimaries
operator|=
name|numPrimaries
expr_stmt|;
name|this
operator|.
name|numReplicas
operator|=
name|numReplicas
expr_stmt|;
name|this
operator|.
name|dataCopies
operator|=
name|numReplicas
operator|+
literal|1
expr_stmt|;
name|this
operator|.
name|totalNumShards
operator|=
name|numPrimaries
operator|*
name|dataCopies
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

