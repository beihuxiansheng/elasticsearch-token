begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.test
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|test
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|DiscoveryModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|zen
operator|.
name|ZenDiscoveryModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|netty
operator|.
name|NettyTransportModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * Abstract base class for backwards compatibility tests. Subclasses of this class  * can run tests against a mixed version cluster. A subset of the nodes in the cluster  * are started in dedicated process running off a full fledged elasticsearch release.  * Nodes can be "upgraded" from the "backwards" node to an "new" node where "new" nodes  * version corresponds to current version.  * The purpose of this test class is to run tests in scenarios where clusters are in an  * intermediate state during a rolling upgrade as well as upgrade situations. The clients  * accessed via #client() are random clients to the nodes in the cluster which might  * execute requests on the "new" as well as the "old" nodes.  *<p>  *   Note: this base class is still experimental and might have bugs or leave external processes running behind.  *</p>  * Backwards compatibility tests are disabled by default via {@link BackwardsCompatibilityTest} annotation.  * The following system variables control the test execution:  *<ul>  *<li>  *<tt>{@value #TESTS_BACKWARDS_COMPATIBILITY}</tt> enables / disables  *          tests annotated with {@link BackwardsCompatibilityTest} (defaults to  *<tt>false</tt>)  *</li>  *<li>  *<tt>{@value #TESTS_BACKWARDS_COMPATIBILITY_VERSION}</tt>  *          sets the version to run the external nodes from formatted as<i>X.Y.Z</i>.  *          The tests class will try to locate a release folder<i>elasticsearch-X.Y.Z</i>  *          within path passed via {@value #TESTS_BACKWARDS_COMPATIBILITY_PATH}  *          depending on this system variable.  *</li>  *<li>  *<tt>{@value #TESTS_BACKWARDS_COMPATIBILITY_PATH}</tt> the path to the  *          elasticsearch releases to run backwards compatibility tests against.  *</li>  *</ul>  *  */
end_comment

begin_comment
comment|// the transportClientRatio is tricky here since we don't fully control the cluster nodes
end_comment

begin_class
annotation|@
name|ElasticsearchBackwardsCompatIntegrationTest
operator|.
name|BackwardsCompatibilityTest
annotation|@
name|ElasticsearchIntegrationTest
operator|.
name|ClusterScope
argument_list|(
name|minNumDataNodes
operator|=
literal|0
argument_list|,
name|maxNumDataNodes
operator|=
literal|2
argument_list|,
name|scope
operator|=
name|ElasticsearchIntegrationTest
operator|.
name|Scope
operator|.
name|SUITE
argument_list|,
name|numClientNodes
operator|=
literal|0
argument_list|,
name|transportClientRatio
operator|=
literal|0.0
argument_list|)
annotation|@
name|Ignore
DECL|class|ElasticsearchBackwardsCompatIntegrationTest
specifier|public
specifier|abstract
class|class
name|ElasticsearchBackwardsCompatIntegrationTest
extends|extends
name|ElasticsearchIntegrationTest
block|{
DECL|method|backwardsCompatibilityPath
specifier|private
specifier|static
name|File
name|backwardsCompatibilityPath
parameter_list|()
block|{
name|String
name|path
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|TESTS_BACKWARDS_COMPATIBILITY_PATH
argument_list|)
decl_stmt|;
name|String
name|version
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|TESTS_BACKWARDS_COMPATIBILITY_VERSION
argument_list|)
decl_stmt|;
if|if
condition|(
name|path
operator|==
literal|null
operator|||
name|path
operator|.
name|isEmpty
argument_list|()
operator|||
name|version
operator|==
literal|null
operator|||
name|version
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid Backwards tests location path:"
operator|+
name|path
operator|+
literal|" version: "
operator|+
name|version
argument_list|)
throw|;
block|}
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|path
argument_list|,
literal|"elasticsearch-"
operator|+
name|version
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Backwards tests location is not a directory: "
operator|+
name|file
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|file
return|;
block|}
DECL|method|backwardsCluster
specifier|public
name|CompositeTestCluster
name|backwardsCluster
parameter_list|()
block|{
return|return
operator|(
name|CompositeTestCluster
operator|)
name|immutableCluster
argument_list|()
return|;
block|}
DECL|method|buildTestCluster
specifier|protected
name|ImmutableTestCluster
name|buildTestCluster
parameter_list|(
name|Scope
name|scope
parameter_list|)
throws|throws
name|IOException
block|{
name|ImmutableTestCluster
name|cluster
init|=
name|super
operator|.
name|buildTestCluster
argument_list|(
name|scope
argument_list|)
decl_stmt|;
return|return
operator|new
name|CompositeTestCluster
argument_list|(
operator|(
name|TestCluster
operator|)
name|cluster
argument_list|,
name|between
argument_list|(
name|minExternalNodes
argument_list|()
argument_list|,
name|maxExternalNodes
argument_list|()
argument_list|)
argument_list|,
operator|new
name|ExternalNode
argument_list|(
name|backwardsCompatibilityPath
argument_list|()
argument_list|,
name|randomLong
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
DECL|method|minExternalNodes
specifier|protected
name|int
name|minExternalNodes
parameter_list|()
block|{
return|return
literal|1
return|;
block|}
DECL|method|maxExternalNodes
specifier|protected
name|int
name|maxExternalNodes
parameter_list|()
block|{
return|return
literal|2
return|;
block|}
annotation|@
name|Override
DECL|method|maximumNumberOfReplicas
specifier|protected
name|int
name|maximumNumberOfReplicas
parameter_list|()
block|{
return|return
literal|1
return|;
block|}
DECL|method|nodeSettings
specifier|protected
name|Settings
name|nodeSettings
parameter_list|(
name|int
name|nodeOrdinal
parameter_list|)
block|{
return|return
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|TransportModule
operator|.
name|TRANSPORT_TYPE_KEY
argument_list|,
name|NettyTransportModule
operator|.
name|class
argument_list|)
comment|// run same transport  / disco as external
operator|.
name|put
argument_list|(
name|DiscoveryModule
operator|.
name|DISCOVERY_TYPE_KEY
argument_list|,
name|ZenDiscoveryModule
operator|.
name|class
argument_list|)
operator|.
name|put
argument_list|(
literal|"gateway.type"
argument_list|,
literal|"local"
argument_list|)
comment|// we require local gateway to mimic upgrades of nodes
operator|.
name|put
argument_list|(
literal|"discovery.type"
argument_list|,
literal|"zen"
argument_list|)
comment|// zen is needed since we start external nodes
operator|.
name|put
argument_list|(
name|TransportModule
operator|.
name|TRANSPORT_SERVICE_TYPE_KEY
argument_list|,
name|TransportService
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
end_class

end_unit

