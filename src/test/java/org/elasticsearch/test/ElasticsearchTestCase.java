begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.test
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|test
package|;
end_package

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|LifecycleScope
import|;
end_import

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|RandomizedTest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|annotations
operator|.
name|*
import|;
end_import

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|annotations
operator|.
name|ThreadLeakScope
operator|.
name|Scope
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|MockDirectoryWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|AbstractRandomizedTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TimeUnits
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|uninverting
operator|.
name|UninvertingReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|Requests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|DjbHashFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|ESLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|Loggers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|EsAbortPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|EsRejectedExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|Environment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|NodeEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|cache
operator|.
name|recycler
operator|.
name|MockBigArrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|cache
operator|.
name|recycler
operator|.
name|MockPageCacheRecycler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|junit
operator|.
name|listeners
operator|.
name|LoggingListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|search
operator|.
name|MockSearchService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|store
operator|.
name|MockDirectoryHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|ElementType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Retention
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|RetentionPolicy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Target
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertAllFilesClosed
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertAllSearchersClosed
import|;
end_import

begin_comment
comment|/**  * Base testcase for randomized unit testing with Elasticsearch  */
end_comment

begin_class
annotation|@
name|ThreadLeakScope
argument_list|(
name|Scope
operator|.
name|SUITE
argument_list|)
annotation|@
name|ThreadLeakLingering
argument_list|(
name|linger
operator|=
literal|5000
argument_list|)
comment|// 5 sec lingering
annotation|@
name|TimeoutSuite
argument_list|(
name|millis
operator|=
literal|20
operator|*
name|TimeUnits
operator|.
name|MINUTE
argument_list|)
comment|// timeout the suite after 20min and fail the test.
annotation|@
name|Listeners
argument_list|(
name|LoggingListener
operator|.
name|class
argument_list|)
DECL|class|ElasticsearchTestCase
specifier|public
specifier|abstract
class|class
name|ElasticsearchTestCase
extends|extends
name|AbstractRandomizedTest
block|{
DECL|field|defaultHandler
specifier|private
specifier|static
name|Thread
operator|.
name|UncaughtExceptionHandler
name|defaultHandler
decl_stmt|;
DECL|field|logger
specifier|protected
specifier|final
name|ESLogger
name|logger
init|=
name|Loggers
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|TESTS_SECURITY_MANAGER
specifier|public
specifier|static
specifier|final
name|String
name|TESTS_SECURITY_MANAGER
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"tests.security.manager"
argument_list|)
decl_stmt|;
DECL|field|JAVA_SECURTY_POLICY
specifier|public
specifier|static
specifier|final
name|String
name|JAVA_SECURTY_POLICY
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.security.policy"
argument_list|)
decl_stmt|;
comment|/**      * Property that allows to adapt the tests behaviour to older features/bugs based on the input version      */
DECL|field|TESTS_COMPATIBILITY
specifier|private
specifier|static
specifier|final
name|String
name|TESTS_COMPATIBILITY
init|=
literal|"tests.compatibility"
decl_stmt|;
DECL|field|GLOABL_COMPATIBILITY_VERSION
specifier|private
specifier|static
specifier|final
name|Version
name|GLOABL_COMPATIBILITY_VERSION
init|=
name|Version
operator|.
name|fromString
argument_list|(
name|compatibilityVersionProperty
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|ASSERTIONS_ENABLED
specifier|public
specifier|static
specifier|final
name|boolean
name|ASSERTIONS_ENABLED
decl_stmt|;
static|static
block|{
name|boolean
name|enabled
init|=
literal|false
decl_stmt|;
assert|assert
name|enabled
operator|=
literal|true
assert|;
name|ASSERTIONS_ENABLED
operator|=
name|enabled
expr_stmt|;
if|if
condition|(
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|Strings
operator|.
name|hasLength
argument_list|(
name|TESTS_SECURITY_MANAGER
argument_list|)
condition|?
name|TESTS_SECURITY_MANAGER
else|:
literal|"true"
argument_list|)
operator|&&
name|JAVA_SECURTY_POLICY
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|setSecurityManager
argument_list|(
operator|new
name|SecurityManager
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|After
DECL|method|ensureNoFieldCacheUse
specifier|public
name|void
name|ensureNoFieldCacheUse
parameter_list|()
block|{
comment|// field cache should NEVER get loaded.
name|String
index|[]
name|entries
init|=
name|UninvertingReader
operator|.
name|getUninvertedStats
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"fieldcache must never be used, got="
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|entries
argument_list|)
argument_list|,
literal|0
argument_list|,
name|entries
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
comment|/**      * Runs the code block for 10 seconds waiting for no assertion to trip.      */
DECL|method|assertBusy
specifier|public
specifier|static
name|void
name|assertBusy
parameter_list|(
name|Runnable
name|codeBlock
parameter_list|)
throws|throws
name|Exception
block|{
name|assertBusy
argument_list|(
name|Executors
operator|.
name|callable
argument_list|(
name|codeBlock
argument_list|)
argument_list|,
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
DECL|method|assertBusy
specifier|public
specifier|static
name|void
name|assertBusy
parameter_list|(
name|Runnable
name|codeBlock
parameter_list|,
name|long
name|maxWaitTime
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
throws|throws
name|Exception
block|{
name|assertBusy
argument_list|(
name|Executors
operator|.
name|callable
argument_list|(
name|codeBlock
argument_list|)
argument_list|,
name|maxWaitTime
argument_list|,
name|unit
argument_list|)
expr_stmt|;
block|}
comment|/**      * Runs the code block for 10 seconds waiting for no assertion to trip.      */
DECL|method|assertBusy
specifier|public
specifier|static
parameter_list|<
name|V
parameter_list|>
name|V
name|assertBusy
parameter_list|(
name|Callable
argument_list|<
name|V
argument_list|>
name|codeBlock
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|assertBusy
argument_list|(
name|codeBlock
argument_list|,
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
return|;
block|}
comment|/**      * Runs the code block for the provided interval, waiting for no assertions to trip.      */
DECL|method|assertBusy
specifier|public
specifier|static
parameter_list|<
name|V
parameter_list|>
name|V
name|assertBusy
parameter_list|(
name|Callable
argument_list|<
name|V
argument_list|>
name|codeBlock
parameter_list|,
name|long
name|maxWaitTime
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
throws|throws
name|Exception
block|{
name|long
name|maxTimeInMillis
init|=
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|convert
argument_list|(
name|maxWaitTime
argument_list|,
name|unit
argument_list|)
decl_stmt|;
name|long
name|iterations
init|=
name|Math
operator|.
name|max
argument_list|(
name|Math
operator|.
name|round
argument_list|(
name|Math
operator|.
name|log10
argument_list|(
name|maxTimeInMillis
argument_list|)
operator|/
name|Math
operator|.
name|log10
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|long
name|timeInMillis
init|=
literal|1
decl_stmt|;
name|long
name|sum
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|AssertionError
argument_list|>
name|failures
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iterations
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
return|return
name|codeBlock
operator|.
name|call
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|AssertionError
name|e
parameter_list|)
block|{
name|failures
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|sum
operator|+=
name|timeInMillis
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|timeInMillis
argument_list|)
expr_stmt|;
name|timeInMillis
operator|*=
literal|2
expr_stmt|;
block|}
name|timeInMillis
operator|=
name|maxTimeInMillis
operator|-
name|sum
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|Math
operator|.
name|max
argument_list|(
name|timeInMillis
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
return|return
name|codeBlock
operator|.
name|call
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|AssertionError
name|e
parameter_list|)
block|{
for|for
control|(
name|AssertionError
name|failure
range|:
name|failures
control|)
block|{
name|e
operator|.
name|addSuppressed
argument_list|(
name|failure
argument_list|)
expr_stmt|;
block|}
throw|throw
name|e
throw|;
block|}
block|}
DECL|method|awaitBusy
specifier|public
specifier|static
name|boolean
name|awaitBusy
parameter_list|(
name|Predicate
argument_list|<
name|?
argument_list|>
name|breakPredicate
parameter_list|)
throws|throws
name|InterruptedException
block|{
return|return
name|awaitBusy
argument_list|(
name|breakPredicate
argument_list|,
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
return|;
block|}
DECL|method|awaitBusy
specifier|public
specifier|static
name|boolean
name|awaitBusy
parameter_list|(
name|Predicate
argument_list|<
name|?
argument_list|>
name|breakPredicate
parameter_list|,
name|long
name|maxWaitTime
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|long
name|maxTimeInMillis
init|=
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|convert
argument_list|(
name|maxWaitTime
argument_list|,
name|unit
argument_list|)
decl_stmt|;
name|long
name|iterations
init|=
name|Math
operator|.
name|max
argument_list|(
name|Math
operator|.
name|round
argument_list|(
name|Math
operator|.
name|log10
argument_list|(
name|maxTimeInMillis
argument_list|)
operator|/
name|Math
operator|.
name|log10
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|long
name|timeInMillis
init|=
literal|1
decl_stmt|;
name|long
name|sum
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iterations
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|breakPredicate
operator|.
name|apply
argument_list|(
literal|null
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
name|sum
operator|+=
name|timeInMillis
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|timeInMillis
argument_list|)
expr_stmt|;
name|timeInMillis
operator|*=
literal|2
expr_stmt|;
block|}
name|timeInMillis
operator|=
name|maxTimeInMillis
operator|-
name|sum
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|Math
operator|.
name|max
argument_list|(
name|timeInMillis
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|breakPredicate
operator|.
name|apply
argument_list|(
literal|null
argument_list|)
return|;
block|}
DECL|field|numericTypes
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|numericTypes
init|=
operator|new
name|String
index|[]
block|{
literal|"byte"
block|,
literal|"short"
block|,
literal|"integer"
block|,
literal|"long"
block|}
decl_stmt|;
DECL|method|randomNumericType
specifier|public
specifier|static
name|String
name|randomNumericType
parameter_list|(
name|Random
name|random
parameter_list|)
block|{
return|return
name|numericTypes
index|[
name|random
operator|.
name|nextInt
argument_list|(
name|numericTypes
operator|.
name|length
argument_list|)
index|]
return|;
block|}
comment|/**      * Returns a {@link java.nio.file.Path} pointing to the class path relative resource given      * as the first argument. In contrast to      *<code>getClass().getResource(...).getFile()</code> this method will not      * return URL encoded paths if the parent path contains spaces or other      * non-standard characters.      */
DECL|method|getResourcePath
specifier|public
name|Path
name|getResourcePath
parameter_list|(
name|String
name|relativePath
parameter_list|)
block|{
name|URI
name|uri
init|=
name|URI
operator|.
name|create
argument_list|(
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
name|relativePath
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|PathUtils
operator|.
name|get
argument_list|(
name|uri
argument_list|)
return|;
block|}
annotation|@
name|After
DECL|method|ensureAllPagesReleased
specifier|public
name|void
name|ensureAllPagesReleased
parameter_list|()
throws|throws
name|Exception
block|{
name|MockPageCacheRecycler
operator|.
name|ensureAllPagesAreReleased
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|ensureAllArraysReleased
specifier|public
name|void
name|ensureAllArraysReleased
parameter_list|()
throws|throws
name|Exception
block|{
name|MockBigArrays
operator|.
name|ensureAllArraysAreReleased
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|ensureAllSearchContextsReleased
specifier|public
name|void
name|ensureAllSearchContextsReleased
parameter_list|()
throws|throws
name|Exception
block|{
name|assertBusy
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|MockSearchService
operator|.
name|assertNoInFLightContext
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|hasUnclosedWrapper
specifier|public
specifier|static
name|boolean
name|hasUnclosedWrapper
parameter_list|()
block|{
for|for
control|(
name|MockDirectoryWrapper
name|w
range|:
name|MockDirectoryHelper
operator|.
name|wrappers
control|)
block|{
if|if
condition|(
name|w
operator|.
name|isOpen
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|BeforeClass
DECL|method|setBeforeClass
specifier|public
specifier|static
name|void
name|setBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|closeAfterSuite
argument_list|(
operator|new
name|Closeable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|assertAllFilesClosed
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|closeAfterSuite
argument_list|(
operator|new
name|Closeable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|assertAllSearchersClosed
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|defaultHandler
operator|=
name|Thread
operator|.
name|getDefaultUncaughtExceptionHandler
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|setDefaultUncaughtExceptionHandler
argument_list|(
operator|new
name|ElasticsearchUncaughtExceptionHandler
argument_list|(
name|defaultHandler
argument_list|)
argument_list|)
expr_stmt|;
name|Requests
operator|.
name|CONTENT_TYPE
operator|=
name|randomXContentType
argument_list|()
expr_stmt|;
name|Requests
operator|.
name|INDEX_CONTENT_TYPE
operator|=
name|randomXContentType
argument_list|()
expr_stmt|;
block|}
DECL|method|randomXContentType
specifier|public
specifier|static
name|XContentType
name|randomXContentType
parameter_list|()
block|{
return|return
name|randomFrom
argument_list|(
name|XContentType
operator|.
name|values
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|AfterClass
DECL|method|resetAfterClass
specifier|public
specifier|static
name|void
name|resetAfterClass
parameter_list|()
block|{
name|Thread
operator|.
name|setDefaultUncaughtExceptionHandler
argument_list|(
name|defaultHandler
argument_list|)
expr_stmt|;
name|Requests
operator|.
name|CONTENT_TYPE
operator|=
name|XContentType
operator|.
name|SMILE
expr_stmt|;
name|Requests
operator|.
name|INDEX_CONTENT_TYPE
operator|=
name|XContentType
operator|.
name|JSON
expr_stmt|;
block|}
DECL|method|maybeDocValues
specifier|public
specifier|static
name|boolean
name|maybeDocValues
parameter_list|()
block|{
return|return
name|randomBoolean
argument_list|()
return|;
block|}
DECL|field|SORTED_VERSIONS
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|Version
argument_list|>
name|SORTED_VERSIONS
decl_stmt|;
static|static
block|{
name|Field
index|[]
name|declaredFields
init|=
name|Version
operator|.
name|class
operator|.
name|getDeclaredFields
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Integer
argument_list|>
name|ids
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Field
name|field
range|:
name|declaredFields
control|)
block|{
specifier|final
name|int
name|mod
init|=
name|field
operator|.
name|getModifiers
argument_list|()
decl_stmt|;
if|if
condition|(
name|Modifier
operator|.
name|isStatic
argument_list|(
name|mod
argument_list|)
operator|&&
name|Modifier
operator|.
name|isFinal
argument_list|(
name|mod
argument_list|)
operator|&&
name|Modifier
operator|.
name|isPublic
argument_list|(
name|mod
argument_list|)
condition|)
block|{
if|if
condition|(
name|field
operator|.
name|getType
argument_list|()
operator|==
name|Version
operator|.
name|class
condition|)
block|{
try|try
block|{
name|Version
name|object
init|=
operator|(
name|Version
operator|)
name|field
operator|.
name|get
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|ids
operator|.
name|add
argument_list|(
name|object
operator|.
name|id
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
name|List
argument_list|<
name|Integer
argument_list|>
name|idList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|ids
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|idList
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|reverse
argument_list|(
name|idList
argument_list|)
expr_stmt|;
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|Version
argument_list|>
name|version
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|Integer
name|integer
range|:
name|idList
control|)
block|{
name|version
operator|.
name|add
argument_list|(
name|Version
operator|.
name|fromId
argument_list|(
name|integer
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|SORTED_VERSIONS
operator|=
name|version
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
comment|/**      * @return the {@link Version} before the {@link Version#CURRENT}      */
DECL|method|getPreviousVersion
specifier|public
specifier|static
name|Version
name|getPreviousVersion
parameter_list|()
block|{
name|Version
name|version
init|=
name|SORTED_VERSIONS
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
assert|assert
name|version
operator|.
name|before
argument_list|(
name|Version
operator|.
name|CURRENT
argument_list|)
assert|;
return|return
name|version
return|;
block|}
comment|/**      * A random {@link Version}.      *      * @return a random {@link Version} from all available versions      */
DECL|method|randomVersion
specifier|public
specifier|static
name|Version
name|randomVersion
parameter_list|()
block|{
return|return
name|randomVersion
argument_list|(
name|getRandom
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * A random {@link Version}.      *       * @param random      *            the {@link Random} to use to generate the random version      *      * @return a random {@link Version} from all available versions      */
DECL|method|randomVersion
specifier|public
specifier|static
name|Version
name|randomVersion
parameter_list|(
name|Random
name|random
parameter_list|)
block|{
return|return
name|SORTED_VERSIONS
operator|.
name|get
argument_list|(
name|random
operator|.
name|nextInt
argument_list|(
name|SORTED_VERSIONS
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Returns immutable list of all known versions.      */
DECL|method|allVersions
specifier|public
specifier|static
name|List
argument_list|<
name|Version
argument_list|>
name|allVersions
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|SORTED_VERSIONS
argument_list|)
return|;
block|}
comment|/**      * A random {@link Version} from<code>minVersion</code> to      *<code>maxVersion</code> (inclusive).      *       * @param minVersion      *            the minimum version (inclusive)      * @param maxVersion      *            the maximum version (inclusive)      * @return a random {@link Version} from<code>minVersion</code> to      *<code>maxVersion</code> (inclusive)      */
DECL|method|randomVersionBetween
specifier|public
specifier|static
name|Version
name|randomVersionBetween
parameter_list|(
name|Version
name|minVersion
parameter_list|,
name|Version
name|maxVersion
parameter_list|)
block|{
return|return
name|randomVersionBetween
argument_list|(
name|getRandom
argument_list|()
argument_list|,
name|minVersion
argument_list|,
name|maxVersion
argument_list|)
return|;
block|}
comment|/**      * A random {@link Version} from<code>minVersion</code> to      *<code>maxVersion</code> (inclusive).      *       * @param random      *            the {@link Random} to use to generate the random version      * @param minVersion      *            the minimum version (inclusive)      * @param maxVersion      *            the maximum version (inclusive)      * @return a random {@link Version} from<code>minVersion</code> to      *<code>maxVersion</code> (inclusive)      */
DECL|method|randomVersionBetween
specifier|public
specifier|static
name|Version
name|randomVersionBetween
parameter_list|(
name|Random
name|random
parameter_list|,
name|Version
name|minVersion
parameter_list|,
name|Version
name|maxVersion
parameter_list|)
block|{
name|int
name|minVersionIndex
init|=
name|SORTED_VERSIONS
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|minVersion
operator|!=
literal|null
condition|)
block|{
name|minVersionIndex
operator|=
name|SORTED_VERSIONS
operator|.
name|indexOf
argument_list|(
name|minVersion
argument_list|)
expr_stmt|;
block|}
name|int
name|maxVersionIndex
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|maxVersion
operator|!=
literal|null
condition|)
block|{
name|maxVersionIndex
operator|=
name|SORTED_VERSIONS
operator|.
name|indexOf
argument_list|(
name|maxVersion
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|minVersionIndex
operator|==
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"minVersion ["
operator|+
name|minVersion
operator|+
literal|"] does not exist."
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|maxVersionIndex
operator|==
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"maxVersion ["
operator|+
name|maxVersion
operator|+
literal|"] does not exist."
argument_list|)
throw|;
block|}
else|else
block|{
comment|// minVersionIndex is inclusive so need to add 1 to this index
name|int
name|range
init|=
name|minVersionIndex
operator|+
literal|1
operator|-
name|maxVersionIndex
decl_stmt|;
return|return
name|SORTED_VERSIONS
operator|.
name|get
argument_list|(
name|maxVersionIndex
operator|+
name|random
operator|.
name|nextInt
argument_list|(
name|range
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|/**      * Return consistent index settings for the provided index version.      */
DECL|method|settings
specifier|public
specifier|static
name|ImmutableSettings
operator|.
name|Builder
name|settings
parameter_list|(
name|Version
name|version
parameter_list|)
block|{
name|ImmutableSettings
operator|.
name|Builder
name|builder
init|=
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_VERSION_CREATED
argument_list|,
name|version
argument_list|)
decl_stmt|;
if|if
condition|(
name|version
operator|.
name|before
argument_list|(
name|Version
operator|.
name|V_2_0_0
argument_list|)
condition|)
block|{
name|builder
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_LEGACY_ROUTING_HASH_FUNCTION
argument_list|,
name|DjbHashFunction
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
return|;
block|}
DECL|class|ElasticsearchUncaughtExceptionHandler
specifier|static
specifier|final
class|class
name|ElasticsearchUncaughtExceptionHandler
implements|implements
name|Thread
operator|.
name|UncaughtExceptionHandler
block|{
DECL|field|parent
specifier|private
specifier|final
name|Thread
operator|.
name|UncaughtExceptionHandler
name|parent
decl_stmt|;
DECL|field|logger
specifier|private
specifier|final
name|ESLogger
name|logger
init|=
name|Loggers
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|method|ElasticsearchUncaughtExceptionHandler
specifier|private
name|ElasticsearchUncaughtExceptionHandler
parameter_list|(
name|Thread
operator|.
name|UncaughtExceptionHandler
name|parent
parameter_list|)
block|{
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|uncaughtException
specifier|public
name|void
name|uncaughtException
parameter_list|(
name|Thread
name|t
parameter_list|,
name|Throwable
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|EsRejectedExecutionException
condition|)
block|{
if|if
condition|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|EsAbortPolicy
operator|.
name|SHUTTING_DOWN_KEY
argument_list|)
condition|)
block|{
return|return;
comment|// ignore the EsRejectedExecutionException when a node shuts down
block|}
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|OutOfMemoryError
condition|)
block|{
if|if
condition|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"unable to create new native thread"
argument_list|)
condition|)
block|{
name|printStackDump
argument_list|(
name|logger
argument_list|)
expr_stmt|;
block|}
block|}
name|parent
operator|.
name|uncaughtException
argument_list|(
name|t
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|printStackDump
specifier|protected
specifier|static
specifier|final
name|void
name|printStackDump
parameter_list|(
name|ESLogger
name|logger
parameter_list|)
block|{
comment|// print stack traces if we can't create any native thread anymore
name|Map
argument_list|<
name|Thread
argument_list|,
name|StackTraceElement
index|[]
argument_list|>
name|allStackTraces
init|=
name|Thread
operator|.
name|getAllStackTraces
argument_list|()
decl_stmt|;
name|logger
operator|.
name|error
argument_list|(
name|formatThreadStacks
argument_list|(
name|allStackTraces
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Dump threads and their current stack trace.      */
DECL|method|formatThreadStacks
specifier|private
specifier|static
name|String
name|formatThreadStacks
parameter_list|(
name|Map
argument_list|<
name|Thread
argument_list|,
name|StackTraceElement
index|[]
argument_list|>
name|threads
parameter_list|)
block|{
name|StringBuilder
name|message
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|int
name|cnt
init|=
literal|1
decl_stmt|;
specifier|final
name|Formatter
name|f
init|=
operator|new
name|Formatter
argument_list|(
name|message
argument_list|,
name|Locale
operator|.
name|ENGLISH
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Thread
argument_list|,
name|StackTraceElement
index|[]
argument_list|>
name|e
range|:
name|threads
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|isAlive
argument_list|()
condition|)
name|f
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|,
literal|"\n  %2d) %s"
argument_list|,
name|cnt
operator|++
argument_list|,
name|threadName
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
operator|.
name|flush
argument_list|()
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|message
operator|.
name|append
argument_list|(
literal|"\n        at (empty stack)"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|StackTraceElement
name|ste
range|:
name|e
operator|.
name|getValue
argument_list|()
control|)
block|{
name|message
operator|.
name|append
argument_list|(
literal|"\n        at "
argument_list|)
operator|.
name|append
argument_list|(
name|ste
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|message
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|threadName
specifier|private
specifier|static
name|String
name|threadName
parameter_list|(
name|Thread
name|t
parameter_list|)
block|{
return|return
literal|"Thread["
operator|+
literal|"id="
operator|+
name|t
operator|.
name|getId
argument_list|()
operator|+
literal|", name="
operator|+
name|t
operator|.
name|getName
argument_list|()
operator|+
literal|", state="
operator|+
name|t
operator|.
name|getState
argument_list|()
operator|+
literal|", group="
operator|+
name|groupName
argument_list|(
name|t
operator|.
name|getThreadGroup
argument_list|()
argument_list|)
operator|+
literal|"]"
return|;
block|}
DECL|method|groupName
specifier|private
specifier|static
name|String
name|groupName
parameter_list|(
name|ThreadGroup
name|threadGroup
parameter_list|)
block|{
if|if
condition|(
name|threadGroup
operator|==
literal|null
condition|)
block|{
return|return
literal|"{null group}"
return|;
block|}
else|else
block|{
return|return
name|threadGroup
operator|.
name|getName
argument_list|()
return|;
block|}
block|}
DECL|method|randomFrom
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|randomFrom
parameter_list|(
name|T
modifier|...
name|values
parameter_list|)
block|{
return|return
name|RandomizedTest
operator|.
name|randomFrom
argument_list|(
name|values
argument_list|)
return|;
block|}
DECL|method|generateRandomStringArray
specifier|public
specifier|static
name|String
index|[]
name|generateRandomStringArray
parameter_list|(
name|int
name|maxArraySize
parameter_list|,
name|int
name|maxStringSize
parameter_list|,
name|boolean
name|allowNull
parameter_list|)
block|{
if|if
condition|(
name|allowNull
operator|&&
name|randomBoolean
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
index|[]
name|array
init|=
operator|new
name|String
index|[
name|randomInt
argument_list|(
name|maxArraySize
argument_list|)
index|]
decl_stmt|;
comment|// allow empty arrays
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|array
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|array
index|[
name|i
index|]
operator|=
name|randomAsciiOfLength
argument_list|(
name|maxStringSize
argument_list|)
expr_stmt|;
block|}
return|return
name|array
return|;
block|}
DECL|method|generateRandomStringArray
specifier|public
specifier|static
name|String
index|[]
name|generateRandomStringArray
parameter_list|(
name|int
name|maxArraySize
parameter_list|,
name|int
name|maxStringSize
parameter_list|)
block|{
return|return
name|generateRandomStringArray
argument_list|(
name|maxArraySize
argument_list|,
name|maxStringSize
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * If a test is annotated with {@link org.elasticsearch.test.ElasticsearchTestCase.CompatibilityVersion}      * all randomized settings will only contain settings or mappings which are compatible with the specified version ID.      */
annotation|@
name|Retention
argument_list|(
name|RetentionPolicy
operator|.
name|RUNTIME
argument_list|)
annotation|@
name|Target
argument_list|(
block|{
name|ElementType
operator|.
name|TYPE
block|}
argument_list|)
annotation|@
name|Ignore
DECL|interface|CompatibilityVersion
specifier|public
annotation_defn|@interface
name|CompatibilityVersion
block|{
DECL|method|version
name|int
name|version
parameter_list|()
function_decl|;
block|}
comment|/**      * Returns a global compatibility version that is set via the      * {@value #TESTS_COMPATIBILITY} or {@value #TESTS_BACKWARDS_COMPATIBILITY_VERSION} system property.      * If both are unset the current version is used as the global compatibility version. This      * compatibility version is used for static randomization. For per-suite compatibility version see      * {@link #compatibilityVersion()}      */
DECL|method|globalCompatibilityVersion
specifier|public
specifier|static
name|Version
name|globalCompatibilityVersion
parameter_list|()
block|{
return|return
name|GLOABL_COMPATIBILITY_VERSION
return|;
block|}
comment|/**      * Retruns the tests compatibility version.      */
DECL|method|compatibilityVersion
specifier|public
name|Version
name|compatibilityVersion
parameter_list|()
block|{
return|return
name|compatibilityVersion
argument_list|(
name|getClass
argument_list|()
argument_list|)
return|;
block|}
DECL|method|compatibilityVersion
specifier|private
name|Version
name|compatibilityVersion
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|)
block|{
if|if
condition|(
name|clazz
operator|==
name|Object
operator|.
name|class
operator|||
name|clazz
operator|==
name|ElasticsearchIntegrationTest
operator|.
name|class
condition|)
block|{
return|return
name|globalCompatibilityVersion
argument_list|()
return|;
block|}
name|CompatibilityVersion
name|annotation
init|=
name|clazz
operator|.
name|getAnnotation
argument_list|(
name|CompatibilityVersion
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|annotation
operator|!=
literal|null
condition|)
block|{
return|return
name|Version
operator|.
name|smallest
argument_list|(
name|Version
operator|.
name|fromId
argument_list|(
name|annotation
operator|.
name|version
argument_list|()
argument_list|)
argument_list|,
name|compatibilityVersion
argument_list|(
name|clazz
operator|.
name|getSuperclass
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
return|return
name|compatibilityVersion
argument_list|(
name|clazz
operator|.
name|getSuperclass
argument_list|()
argument_list|)
return|;
block|}
DECL|method|compatibilityVersionProperty
specifier|private
specifier|static
name|String
name|compatibilityVersionProperty
parameter_list|()
block|{
specifier|final
name|String
name|version
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|TESTS_COMPATIBILITY
argument_list|)
decl_stmt|;
if|if
condition|(
name|Strings
operator|.
name|hasLength
argument_list|(
name|version
argument_list|)
condition|)
block|{
return|return
name|version
return|;
block|}
return|return
name|System
operator|.
name|getProperty
argument_list|(
name|TESTS_BACKWARDS_COMPATIBILITY_VERSION
argument_list|)
return|;
block|}
DECL|method|terminate
specifier|public
specifier|static
name|boolean
name|terminate
parameter_list|(
name|ExecutorService
modifier|...
name|services
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|boolean
name|terminated
init|=
literal|true
decl_stmt|;
for|for
control|(
name|ExecutorService
name|service
range|:
name|services
control|)
block|{
if|if
condition|(
name|service
operator|!=
literal|null
condition|)
block|{
name|terminated
operator|&=
name|ThreadPool
operator|.
name|terminate
argument_list|(
name|service
argument_list|,
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|terminated
return|;
block|}
DECL|method|terminate
specifier|public
specifier|static
name|boolean
name|terminate
parameter_list|(
name|ThreadPool
name|service
parameter_list|)
throws|throws
name|InterruptedException
block|{
return|return
name|ThreadPool
operator|.
name|terminate
argument_list|(
name|service
argument_list|,
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
return|;
block|}
comment|// TODO: these method names stink, but are a temporary solution.
comment|// see https://github.com/carrotsearch/randomizedtesting/pull/178
comment|/**      * Returns a temporary file      */
DECL|method|newTempFilePath
specifier|public
name|Path
name|newTempFilePath
parameter_list|()
block|{
return|return
name|newTempFile
argument_list|()
operator|.
name|toPath
argument_list|()
return|;
block|}
comment|/**      * Returns a temporary directory      */
DECL|method|newTempDirPath
specifier|public
name|Path
name|newTempDirPath
parameter_list|()
block|{
return|return
name|newTempDir
argument_list|()
operator|.
name|toPath
argument_list|()
return|;
block|}
comment|/**      * Returns a temporary directory      */
DECL|method|newTempDirPath
specifier|public
specifier|static
name|Path
name|newTempDirPath
parameter_list|(
name|LifecycleScope
name|scope
parameter_list|)
block|{
return|return
name|newTempDir
argument_list|(
name|scope
argument_list|)
operator|.
name|toPath
argument_list|()
return|;
block|}
comment|/**      * Returns a random number of temporary paths.      */
DECL|method|tmpPaths
specifier|public
name|String
index|[]
name|tmpPaths
parameter_list|()
block|{
specifier|final
name|int
name|numPaths
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
decl_stmt|;
specifier|final
name|String
index|[]
name|absPaths
init|=
operator|new
name|String
index|[
name|numPaths
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numPaths
condition|;
name|i
operator|++
control|)
block|{
name|absPaths
index|[
name|i
index|]
operator|=
name|newTempDirPath
argument_list|()
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
return|return
name|absPaths
return|;
block|}
DECL|method|newNodeEnvironment
specifier|public
name|NodeEnvironment
name|newNodeEnvironment
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|newNodeEnvironment
argument_list|(
name|ImmutableSettings
operator|.
name|EMPTY
argument_list|)
return|;
block|}
DECL|method|newNodeEnvironment
specifier|public
name|NodeEnvironment
name|newNodeEnvironment
parameter_list|(
name|Settings
name|settings
parameter_list|)
throws|throws
name|IOException
block|{
name|Settings
name|build
init|=
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|settings
argument_list|)
operator|.
name|put
argument_list|(
literal|"path.home"
argument_list|,
name|newTempDirPath
argument_list|()
operator|.
name|toAbsolutePath
argument_list|()
argument_list|)
operator|.
name|putArray
argument_list|(
literal|"path.data"
argument_list|,
name|tmpPaths
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
operator|new
name|NodeEnvironment
argument_list|(
name|build
argument_list|,
operator|new
name|Environment
argument_list|(
name|build
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

