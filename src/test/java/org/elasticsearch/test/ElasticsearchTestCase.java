begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.test
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|test
package|;
end_package

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|RandomizedContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|RandomizedTest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|annotations
operator|.
name|Listeners
import|;
end_import

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|annotations
operator|.
name|ThreadLeakLingering
import|;
end_import

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|annotations
operator|.
name|ThreadLeakScope
import|;
end_import

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|annotations
operator|.
name|ThreadLeakScope
operator|.
name|Scope
import|;
end_import

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|annotations
operator|.
name|TimeoutSuite
import|;
end_import

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|generators
operator|.
name|RandomInts
import|;
end_import

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|generators
operator|.
name|RandomPicks
import|;
end_import

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|generators
operator|.
name|RandomStrings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|uninverting
operator|.
name|UninvertingReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
operator|.
name|SuppressCodecs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TimeUnits
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|Requests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|DjbHashFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|ESLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|Loggers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|EsAbortPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|EsExecutors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|EsRejectedExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|Environment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|NodeEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|cache
operator|.
name|recycler
operator|.
name|MockBigArrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|cache
operator|.
name|recycler
operator|.
name|MockPageCacheRecycler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|junit
operator|.
name|listeners
operator|.
name|LoggingListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|junit
operator|.
name|listeners
operator|.
name|ReproduceInfoPrinter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|search
operator|.
name|MockSearchService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Formatter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertAllFilesClosed
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertAllSearchersClosed
import|;
end_import

begin_comment
comment|/**  * Base testcase for randomized unit testing with Elasticsearch  */
end_comment

begin_class
annotation|@
name|Listeners
argument_list|(
block|{
name|ReproduceInfoPrinter
operator|.
name|class
block|,
name|LoggingListener
operator|.
name|class
block|}
argument_list|)
annotation|@
name|ThreadLeakScope
argument_list|(
name|Scope
operator|.
name|SUITE
argument_list|)
annotation|@
name|ThreadLeakLingering
argument_list|(
name|linger
operator|=
literal|5000
argument_list|)
comment|// 5 sec lingering
annotation|@
name|TimeoutSuite
argument_list|(
name|millis
operator|=
literal|20
operator|*
name|TimeUnits
operator|.
name|MINUTE
argument_list|)
annotation|@
name|LuceneTestCase
operator|.
name|SuppressSysoutChecks
argument_list|(
name|bugUrl
operator|=
literal|"we log a lot on purpose"
argument_list|)
annotation|@
name|SuppressCodecs
argument_list|(
block|{
literal|"SimpleText"
block|,
literal|"Memory"
block|,
literal|"CheapBastard"
block|,
literal|"Direct"
block|}
argument_list|)
comment|// slow ones
annotation|@
name|LuceneTestCase
operator|.
name|SuppressReproduceLine
DECL|class|ElasticsearchTestCase
specifier|public
specifier|abstract
class|class
name|ElasticsearchTestCase
extends|extends
name|LuceneTestCase
block|{
static|static
block|{
name|SecurityHack
operator|.
name|ensureInitialized
argument_list|()
expr_stmt|;
block|}
DECL|field|defaultHandler
specifier|private
specifier|static
name|Thread
operator|.
name|UncaughtExceptionHandler
name|defaultHandler
decl_stmt|;
DECL|field|logger
specifier|protected
specifier|final
name|ESLogger
name|logger
init|=
name|Loggers
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
comment|// setup mock filesystems for this test run. we change PathUtils
comment|// so that all accesses are plumbed thru any mock wrappers
annotation|@
name|BeforeClass
DECL|method|setUpFileSystem
specifier|public
specifier|static
name|void
name|setUpFileSystem
parameter_list|()
block|{
try|try
block|{
name|Field
name|field
init|=
name|PathUtils
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"DEFAULT"
argument_list|)
decl_stmt|;
name|field
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|field
operator|.
name|set
argument_list|(
literal|null
argument_list|,
name|LuceneTestCase
operator|.
name|getBaseTempDirForTestClass
argument_list|()
operator|.
name|getFileSystem
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ReflectiveOperationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|()
throw|;
block|}
block|}
annotation|@
name|BeforeClass
DECL|method|setBeforeClass
specifier|public
specifier|static
name|void
name|setBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|closeAfterSuite
argument_list|(
operator|new
name|Closeable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|assertAllFilesClosed
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|closeAfterSuite
argument_list|(
operator|new
name|Closeable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|assertAllSearchersClosed
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|defaultHandler
operator|=
name|Thread
operator|.
name|getDefaultUncaughtExceptionHandler
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|setDefaultUncaughtExceptionHandler
argument_list|(
operator|new
name|ElasticsearchUncaughtExceptionHandler
argument_list|(
name|defaultHandler
argument_list|)
argument_list|)
expr_stmt|;
name|Requests
operator|.
name|CONTENT_TYPE
operator|=
name|randomFrom
argument_list|(
name|XContentType
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
name|Requests
operator|.
name|INDEX_CONTENT_TYPE
operator|=
name|randomFrom
argument_list|(
name|XContentType
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|resetAfterClass
specifier|public
specifier|static
name|void
name|resetAfterClass
parameter_list|()
block|{
name|Thread
operator|.
name|setDefaultUncaughtExceptionHandler
argument_list|(
name|defaultHandler
argument_list|)
expr_stmt|;
name|Requests
operator|.
name|CONTENT_TYPE
operator|=
name|XContentType
operator|.
name|SMILE
expr_stmt|;
name|Requests
operator|.
name|INDEX_CONTENT_TYPE
operator|=
name|XContentType
operator|.
name|JSON
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|restoreFileSystem
specifier|public
specifier|static
name|void
name|restoreFileSystem
parameter_list|()
block|{
try|try
block|{
name|Field
name|field1
init|=
name|PathUtils
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"ACTUAL_DEFAULT"
argument_list|)
decl_stmt|;
name|field1
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Field
name|field2
init|=
name|PathUtils
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"DEFAULT"
argument_list|)
decl_stmt|;
name|field2
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|field2
operator|.
name|set
argument_list|(
literal|null
argument_list|,
name|field1
operator|.
name|get
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ReflectiveOperationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|()
throw|;
block|}
block|}
annotation|@
name|BeforeClass
DECL|method|setUpProcessors
specifier|public
specifier|static
name|void
name|setUpProcessors
parameter_list|()
block|{
name|int
name|numCpu
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
name|EsExecutors
operator|.
name|DEFAULT_SYSPROP
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|numCpu
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|numCpu
argument_list|,
name|EsExecutors
operator|.
name|boundedNumberOfProcessors
argument_list|(
name|ImmutableSettings
operator|.
name|EMPTY
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|restoreProcessors
specifier|public
specifier|static
name|void
name|restoreProcessors
parameter_list|()
block|{
name|System
operator|.
name|clearProperty
argument_list|(
name|EsExecutors
operator|.
name|DEFAULT_SYSPROP
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|ensureAllPagesReleased
specifier|public
name|void
name|ensureAllPagesReleased
parameter_list|()
throws|throws
name|Exception
block|{
name|MockPageCacheRecycler
operator|.
name|ensureAllPagesAreReleased
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|ensureAllArraysReleased
specifier|public
name|void
name|ensureAllArraysReleased
parameter_list|()
throws|throws
name|Exception
block|{
name|MockBigArrays
operator|.
name|ensureAllArraysAreReleased
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|ensureAllSearchContextsReleased
specifier|public
name|void
name|ensureAllSearchContextsReleased
parameter_list|()
throws|throws
name|Exception
block|{
name|assertBusy
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|MockSearchService
operator|.
name|assertNoInFLightContext
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|disableQueryCache
specifier|public
name|void
name|disableQueryCache
parameter_list|()
block|{
comment|// TODO: Parent/child and other things does not work with the query cache
name|IndexSearcher
operator|.
name|setDefaultQueryCache
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|ensureNoFieldCacheUse
specifier|public
name|void
name|ensureNoFieldCacheUse
parameter_list|()
block|{
comment|// field cache should NEVER get loaded.
name|String
index|[]
name|entries
init|=
name|UninvertingReader
operator|.
name|getUninvertedStats
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"fieldcache must never be used, got="
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|entries
argument_list|)
argument_list|,
literal|0
argument_list|,
name|entries
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
comment|// old shit:
comment|// -----------------------------------------------------------------
comment|// Suite and test case setup/ cleanup.
comment|// -----------------------------------------------------------------
comment|/** MockFSDirectoryService sets this: */
DECL|field|checkIndexFailed
specifier|public
specifier|static
name|boolean
name|checkIndexFailed
decl_stmt|;
comment|/**      * For subclasses to override. Overrides must call {@code super.setUp()}.      */
annotation|@
name|Override
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|checkIndexFailed
operator|=
literal|false
expr_stmt|;
block|}
comment|/**      * For subclasses to override. Overrides must call {@code super.tearDown()}.      */
annotation|@
name|After
DECL|method|tearDown
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|assertFalse
argument_list|(
literal|"at least one shard failed CheckIndex"
argument_list|,
name|checkIndexFailed
argument_list|)
expr_stmt|;
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
comment|// -----------------------------------------------------------------
comment|// Test facilities and facades for subclasses.
comment|// -----------------------------------------------------------------
comment|// old helper stuff, a lot of it is bad news and we should see if its all used
comment|/** Shortcut for {@link RandomizedContext#getRandom()}. Use {@link #random()} instead. */
DECL|method|getRandom
specifier|public
specifier|static
name|Random
name|getRandom
parameter_list|()
block|{
comment|// TODO: replace uses of this function with random()
return|return
name|random
argument_list|()
return|;
block|}
comment|/** Shortcut for {@link RandomizedContext#current()}. */
DECL|method|getContext
specifier|public
specifier|static
name|RandomizedContext
name|getContext
parameter_list|()
block|{
return|return
name|RandomizedTest
operator|.
name|getContext
argument_list|()
return|;
block|}
comment|/**      * Returns a "scaled" random number between min and max (inclusive).      * @see RandomizedTest#scaledRandomIntBetween(int, int);      */
DECL|method|scaledRandomIntBetween
specifier|public
specifier|static
name|int
name|scaledRandomIntBetween
parameter_list|(
name|int
name|min
parameter_list|,
name|int
name|max
parameter_list|)
block|{
return|return
name|RandomizedTest
operator|.
name|scaledRandomIntBetween
argument_list|(
name|min
argument_list|,
name|max
argument_list|)
return|;
block|}
comment|/**       * A random integer from<code>min</code> to<code>max</code> (inclusive).      * @see #scaledRandomIntBetween(int, int)      */
DECL|method|randomIntBetween
specifier|public
specifier|static
name|int
name|randomIntBetween
parameter_list|(
name|int
name|min
parameter_list|,
name|int
name|max
parameter_list|)
block|{
return|return
name|RandomInts
operator|.
name|randomIntBetween
argument_list|(
name|random
argument_list|()
argument_list|,
name|min
argument_list|,
name|max
argument_list|)
return|;
block|}
comment|/**      * Returns a "scaled" number of iterations for loops which can have a variable      * iteration count. This method is effectively       * an alias to {@link #scaledRandomIntBetween(int, int)}.      */
DECL|method|iterations
specifier|public
specifier|static
name|int
name|iterations
parameter_list|(
name|int
name|min
parameter_list|,
name|int
name|max
parameter_list|)
block|{
return|return
name|scaledRandomIntBetween
argument_list|(
name|min
argument_list|,
name|max
argument_list|)
return|;
block|}
comment|/**       * An alias for {@link #randomIntBetween(int, int)}.       *       * @see #scaledRandomIntBetween(int, int)      */
DECL|method|between
specifier|public
specifier|static
name|int
name|between
parameter_list|(
name|int
name|min
parameter_list|,
name|int
name|max
parameter_list|)
block|{
return|return
name|randomIntBetween
argument_list|(
name|min
argument_list|,
name|max
argument_list|)
return|;
block|}
comment|/**      * The exact opposite of {@link #rarely()}.      */
DECL|method|frequently
specifier|public
specifier|static
name|boolean
name|frequently
parameter_list|()
block|{
return|return
operator|!
name|rarely
argument_list|()
return|;
block|}
DECL|method|randomBoolean
specifier|public
specifier|static
name|boolean
name|randomBoolean
parameter_list|()
block|{
return|return
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
return|;
block|}
DECL|method|randomByte
specifier|public
specifier|static
name|byte
name|randomByte
parameter_list|()
block|{
return|return
operator|(
name|byte
operator|)
name|random
argument_list|()
operator|.
name|nextInt
argument_list|()
return|;
block|}
DECL|method|randomShort
specifier|public
specifier|static
name|short
name|randomShort
parameter_list|()
block|{
return|return
operator|(
name|short
operator|)
name|random
argument_list|()
operator|.
name|nextInt
argument_list|()
return|;
block|}
DECL|method|randomInt
specifier|public
specifier|static
name|int
name|randomInt
parameter_list|()
block|{
return|return
name|random
argument_list|()
operator|.
name|nextInt
argument_list|()
return|;
block|}
DECL|method|randomFloat
specifier|public
specifier|static
name|float
name|randomFloat
parameter_list|()
block|{
return|return
name|random
argument_list|()
operator|.
name|nextFloat
argument_list|()
return|;
block|}
DECL|method|randomDouble
specifier|public
specifier|static
name|double
name|randomDouble
parameter_list|()
block|{
return|return
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
return|;
block|}
DECL|method|randomLong
specifier|public
specifier|static
name|long
name|randomLong
parameter_list|()
block|{
return|return
name|random
argument_list|()
operator|.
name|nextLong
argument_list|()
return|;
block|}
comment|/** Pick a random object from the given array. The array must not be empty. */
DECL|method|randomFrom
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|randomFrom
parameter_list|(
name|T
modifier|...
name|array
parameter_list|)
block|{
return|return
name|RandomPicks
operator|.
name|randomFrom
argument_list|(
name|random
argument_list|()
argument_list|,
name|array
argument_list|)
return|;
block|}
comment|/** Pick a random object from the given list. */
DECL|method|randomFrom
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|randomFrom
parameter_list|(
name|List
argument_list|<
name|T
argument_list|>
name|list
parameter_list|)
block|{
return|return
name|RandomPicks
operator|.
name|randomFrom
argument_list|(
name|random
argument_list|()
argument_list|,
name|list
argument_list|)
return|;
block|}
comment|/** A random integer from 0..max (inclusive). */
DECL|method|randomInt
specifier|public
specifier|static
name|int
name|randomInt
parameter_list|(
name|int
name|max
parameter_list|)
block|{
return|return
name|RandomizedTest
operator|.
name|randomInt
argument_list|(
name|max
argument_list|)
return|;
block|}
DECL|method|randomAsciiOfLengthBetween
specifier|public
specifier|static
name|String
name|randomAsciiOfLengthBetween
parameter_list|(
name|int
name|minCodeUnits
parameter_list|,
name|int
name|maxCodeUnits
parameter_list|)
block|{
return|return
name|RandomizedTest
operator|.
name|randomAsciiOfLengthBetween
argument_list|(
name|minCodeUnits
argument_list|,
name|maxCodeUnits
argument_list|)
return|;
block|}
DECL|method|randomAsciiOfLength
specifier|public
specifier|static
name|String
name|randomAsciiOfLength
parameter_list|(
name|int
name|codeUnits
parameter_list|)
block|{
return|return
name|RandomizedTest
operator|.
name|randomAsciiOfLength
argument_list|(
name|codeUnits
argument_list|)
return|;
block|}
DECL|method|randomUnicodeOfLengthBetween
specifier|public
specifier|static
name|String
name|randomUnicodeOfLengthBetween
parameter_list|(
name|int
name|minCodeUnits
parameter_list|,
name|int
name|maxCodeUnits
parameter_list|)
block|{
return|return
name|RandomizedTest
operator|.
name|randomUnicodeOfLengthBetween
argument_list|(
name|minCodeUnits
argument_list|,
name|maxCodeUnits
argument_list|)
return|;
block|}
DECL|method|randomUnicodeOfLength
specifier|public
specifier|static
name|String
name|randomUnicodeOfLength
parameter_list|(
name|int
name|codeUnits
parameter_list|)
block|{
return|return
name|RandomizedTest
operator|.
name|randomUnicodeOfLength
argument_list|(
name|codeUnits
argument_list|)
return|;
block|}
DECL|method|randomUnicodeOfCodepointLengthBetween
specifier|public
specifier|static
name|String
name|randomUnicodeOfCodepointLengthBetween
parameter_list|(
name|int
name|minCodePoints
parameter_list|,
name|int
name|maxCodePoints
parameter_list|)
block|{
return|return
name|RandomizedTest
operator|.
name|randomUnicodeOfCodepointLengthBetween
argument_list|(
name|minCodePoints
argument_list|,
name|maxCodePoints
argument_list|)
return|;
block|}
DECL|method|randomUnicodeOfCodepointLength
specifier|public
specifier|static
name|String
name|randomUnicodeOfCodepointLength
parameter_list|(
name|int
name|codePoints
parameter_list|)
block|{
return|return
name|RandomizedTest
operator|.
name|randomUnicodeOfCodepointLength
argument_list|(
name|codePoints
argument_list|)
return|;
block|}
DECL|method|randomRealisticUnicodeOfLengthBetween
specifier|public
specifier|static
name|String
name|randomRealisticUnicodeOfLengthBetween
parameter_list|(
name|int
name|minCodeUnits
parameter_list|,
name|int
name|maxCodeUnits
parameter_list|)
block|{
return|return
name|RandomizedTest
operator|.
name|randomRealisticUnicodeOfLengthBetween
argument_list|(
name|minCodeUnits
argument_list|,
name|maxCodeUnits
argument_list|)
return|;
block|}
DECL|method|randomRealisticUnicodeOfLength
specifier|public
specifier|static
name|String
name|randomRealisticUnicodeOfLength
parameter_list|(
name|int
name|codeUnits
parameter_list|)
block|{
return|return
name|RandomizedTest
operator|.
name|randomRealisticUnicodeOfLength
argument_list|(
name|codeUnits
argument_list|)
return|;
block|}
DECL|method|randomRealisticUnicodeOfCodepointLengthBetween
specifier|public
specifier|static
name|String
name|randomRealisticUnicodeOfCodepointLengthBetween
parameter_list|(
name|int
name|minCodePoints
parameter_list|,
name|int
name|maxCodePoints
parameter_list|)
block|{
return|return
name|RandomizedTest
operator|.
name|randomRealisticUnicodeOfCodepointLengthBetween
argument_list|(
name|minCodePoints
argument_list|,
name|maxCodePoints
argument_list|)
return|;
block|}
DECL|method|randomRealisticUnicodeOfCodepointLength
specifier|public
specifier|static
name|String
name|randomRealisticUnicodeOfCodepointLength
parameter_list|(
name|int
name|codePoints
parameter_list|)
block|{
return|return
name|RandomizedTest
operator|.
name|randomRealisticUnicodeOfCodepointLength
argument_list|(
name|codePoints
argument_list|)
return|;
block|}
comment|/**      * Runs the code block for 10 seconds waiting for no assertion to trip.      */
DECL|method|assertBusy
specifier|public
specifier|static
name|void
name|assertBusy
parameter_list|(
name|Runnable
name|codeBlock
parameter_list|)
throws|throws
name|Exception
block|{
name|assertBusy
argument_list|(
name|Executors
operator|.
name|callable
argument_list|(
name|codeBlock
argument_list|)
argument_list|,
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
DECL|method|assertBusy
specifier|public
specifier|static
name|void
name|assertBusy
parameter_list|(
name|Runnable
name|codeBlock
parameter_list|,
name|long
name|maxWaitTime
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
throws|throws
name|Exception
block|{
name|assertBusy
argument_list|(
name|Executors
operator|.
name|callable
argument_list|(
name|codeBlock
argument_list|)
argument_list|,
name|maxWaitTime
argument_list|,
name|unit
argument_list|)
expr_stmt|;
block|}
comment|/**      * Runs the code block for 10 seconds waiting for no assertion to trip.      */
DECL|method|assertBusy
specifier|public
specifier|static
parameter_list|<
name|V
parameter_list|>
name|V
name|assertBusy
parameter_list|(
name|Callable
argument_list|<
name|V
argument_list|>
name|codeBlock
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|assertBusy
argument_list|(
name|codeBlock
argument_list|,
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
return|;
block|}
comment|/**      * Runs the code block for the provided interval, waiting for no assertions to trip.      */
DECL|method|assertBusy
specifier|public
specifier|static
parameter_list|<
name|V
parameter_list|>
name|V
name|assertBusy
parameter_list|(
name|Callable
argument_list|<
name|V
argument_list|>
name|codeBlock
parameter_list|,
name|long
name|maxWaitTime
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
throws|throws
name|Exception
block|{
name|long
name|maxTimeInMillis
init|=
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|convert
argument_list|(
name|maxWaitTime
argument_list|,
name|unit
argument_list|)
decl_stmt|;
name|long
name|iterations
init|=
name|Math
operator|.
name|max
argument_list|(
name|Math
operator|.
name|round
argument_list|(
name|Math
operator|.
name|log10
argument_list|(
name|maxTimeInMillis
argument_list|)
operator|/
name|Math
operator|.
name|log10
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|long
name|timeInMillis
init|=
literal|1
decl_stmt|;
name|long
name|sum
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|AssertionError
argument_list|>
name|failures
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iterations
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
return|return
name|codeBlock
operator|.
name|call
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|AssertionError
name|e
parameter_list|)
block|{
name|failures
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|sum
operator|+=
name|timeInMillis
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|timeInMillis
argument_list|)
expr_stmt|;
name|timeInMillis
operator|*=
literal|2
expr_stmt|;
block|}
name|timeInMillis
operator|=
name|maxTimeInMillis
operator|-
name|sum
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|Math
operator|.
name|max
argument_list|(
name|timeInMillis
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
return|return
name|codeBlock
operator|.
name|call
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|AssertionError
name|e
parameter_list|)
block|{
for|for
control|(
name|AssertionError
name|failure
range|:
name|failures
control|)
block|{
name|e
operator|.
name|addSuppressed
argument_list|(
name|failure
argument_list|)
expr_stmt|;
block|}
throw|throw
name|e
throw|;
block|}
block|}
DECL|method|awaitBusy
specifier|public
specifier|static
name|boolean
name|awaitBusy
parameter_list|(
name|Predicate
argument_list|<
name|?
argument_list|>
name|breakPredicate
parameter_list|)
throws|throws
name|InterruptedException
block|{
return|return
name|awaitBusy
argument_list|(
name|breakPredicate
argument_list|,
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
return|;
block|}
DECL|method|awaitBusy
specifier|public
specifier|static
name|boolean
name|awaitBusy
parameter_list|(
name|Predicate
argument_list|<
name|?
argument_list|>
name|breakPredicate
parameter_list|,
name|long
name|maxWaitTime
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|long
name|maxTimeInMillis
init|=
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|convert
argument_list|(
name|maxWaitTime
argument_list|,
name|unit
argument_list|)
decl_stmt|;
name|long
name|iterations
init|=
name|Math
operator|.
name|max
argument_list|(
name|Math
operator|.
name|round
argument_list|(
name|Math
operator|.
name|log10
argument_list|(
name|maxTimeInMillis
argument_list|)
operator|/
name|Math
operator|.
name|log10
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|long
name|timeInMillis
init|=
literal|1
decl_stmt|;
name|long
name|sum
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iterations
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|breakPredicate
operator|.
name|apply
argument_list|(
literal|null
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
name|sum
operator|+=
name|timeInMillis
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|timeInMillis
argument_list|)
expr_stmt|;
name|timeInMillis
operator|*=
literal|2
expr_stmt|;
block|}
name|timeInMillis
operator|=
name|maxTimeInMillis
operator|-
name|sum
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|Math
operator|.
name|max
argument_list|(
name|timeInMillis
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|breakPredicate
operator|.
name|apply
argument_list|(
literal|null
argument_list|)
return|;
block|}
comment|/**      * Returns a {@link java.nio.file.Path} pointing to the class path relative resource given      * as the first argument. In contrast to      *<code>getClass().getResource(...).getFile()</code> this method will not      * return URL encoded paths if the parent path contains spaces or other      * non-standard characters.      */
annotation|@
name|Override
DECL|method|getDataPath
specifier|public
name|Path
name|getDataPath
parameter_list|(
name|String
name|relativePath
parameter_list|)
block|{
comment|// we override LTC behavior here: wrap even resources with mockfilesystems,
comment|// because some code is buggy when it comes to multiple nio.2 filesystems
comment|// (e.g. FileSystemUtils, and likely some tests)
try|try
block|{
return|return
name|PathUtils
operator|.
name|get
argument_list|(
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
name|relativePath
argument_list|)
operator|.
name|toURI
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"resource not found: "
operator|+
name|relativePath
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Return consistent index settings for the provided index version.      */
DECL|method|settings
specifier|public
specifier|static
name|ImmutableSettings
operator|.
name|Builder
name|settings
parameter_list|(
name|Version
name|version
parameter_list|)
block|{
name|ImmutableSettings
operator|.
name|Builder
name|builder
init|=
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_VERSION_CREATED
argument_list|,
name|version
argument_list|)
decl_stmt|;
if|if
condition|(
name|version
operator|.
name|before
argument_list|(
name|Version
operator|.
name|V_2_0_0
argument_list|)
condition|)
block|{
name|builder
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_LEGACY_ROUTING_HASH_FUNCTION
argument_list|,
name|DjbHashFunction
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
return|;
block|}
DECL|class|ElasticsearchUncaughtExceptionHandler
specifier|static
specifier|final
class|class
name|ElasticsearchUncaughtExceptionHandler
implements|implements
name|Thread
operator|.
name|UncaughtExceptionHandler
block|{
DECL|field|parent
specifier|private
specifier|final
name|Thread
operator|.
name|UncaughtExceptionHandler
name|parent
decl_stmt|;
DECL|field|logger
specifier|private
specifier|final
name|ESLogger
name|logger
init|=
name|Loggers
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|method|ElasticsearchUncaughtExceptionHandler
specifier|private
name|ElasticsearchUncaughtExceptionHandler
parameter_list|(
name|Thread
operator|.
name|UncaughtExceptionHandler
name|parent
parameter_list|)
block|{
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|uncaughtException
specifier|public
name|void
name|uncaughtException
parameter_list|(
name|Thread
name|t
parameter_list|,
name|Throwable
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|EsRejectedExecutionException
condition|)
block|{
if|if
condition|(
name|e
operator|.
name|getMessage
argument_list|()
operator|!=
literal|null
operator|&&
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|EsAbortPolicy
operator|.
name|SHUTTING_DOWN_KEY
argument_list|)
condition|)
block|{
return|return;
comment|// ignore the EsRejectedExecutionException when a node shuts down
block|}
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|OutOfMemoryError
condition|)
block|{
if|if
condition|(
name|e
operator|.
name|getMessage
argument_list|()
operator|!=
literal|null
operator|&&
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"unable to create new native thread"
argument_list|)
condition|)
block|{
name|printStackDump
argument_list|(
name|logger
argument_list|)
expr_stmt|;
block|}
block|}
name|parent
operator|.
name|uncaughtException
argument_list|(
name|t
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|printStackDump
specifier|protected
specifier|static
specifier|final
name|void
name|printStackDump
parameter_list|(
name|ESLogger
name|logger
parameter_list|)
block|{
comment|// print stack traces if we can't create any native thread anymore
name|Map
argument_list|<
name|Thread
argument_list|,
name|StackTraceElement
index|[]
argument_list|>
name|allStackTraces
init|=
name|Thread
operator|.
name|getAllStackTraces
argument_list|()
decl_stmt|;
name|logger
operator|.
name|error
argument_list|(
name|formatThreadStacks
argument_list|(
name|allStackTraces
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Dump threads and their current stack trace.      */
DECL|method|formatThreadStacks
specifier|private
specifier|static
name|String
name|formatThreadStacks
parameter_list|(
name|Map
argument_list|<
name|Thread
argument_list|,
name|StackTraceElement
index|[]
argument_list|>
name|threads
parameter_list|)
block|{
name|StringBuilder
name|message
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|int
name|cnt
init|=
literal|1
decl_stmt|;
specifier|final
name|Formatter
name|f
init|=
operator|new
name|Formatter
argument_list|(
name|message
argument_list|,
name|Locale
operator|.
name|ENGLISH
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Thread
argument_list|,
name|StackTraceElement
index|[]
argument_list|>
name|e
range|:
name|threads
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|isAlive
argument_list|()
condition|)
name|f
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|,
literal|"\n  %2d) %s"
argument_list|,
name|cnt
operator|++
argument_list|,
name|threadName
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
operator|.
name|flush
argument_list|()
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|message
operator|.
name|append
argument_list|(
literal|"\n        at (empty stack)"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|StackTraceElement
name|ste
range|:
name|e
operator|.
name|getValue
argument_list|()
control|)
block|{
name|message
operator|.
name|append
argument_list|(
literal|"\n        at "
argument_list|)
operator|.
name|append
argument_list|(
name|ste
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|message
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|threadName
specifier|private
specifier|static
name|String
name|threadName
parameter_list|(
name|Thread
name|t
parameter_list|)
block|{
return|return
literal|"Thread["
operator|+
literal|"id="
operator|+
name|t
operator|.
name|getId
argument_list|()
operator|+
literal|", name="
operator|+
name|t
operator|.
name|getName
argument_list|()
operator|+
literal|", state="
operator|+
name|t
operator|.
name|getState
argument_list|()
operator|+
literal|", group="
operator|+
name|groupName
argument_list|(
name|t
operator|.
name|getThreadGroup
argument_list|()
argument_list|)
operator|+
literal|"]"
return|;
block|}
DECL|method|groupName
specifier|private
specifier|static
name|String
name|groupName
parameter_list|(
name|ThreadGroup
name|threadGroup
parameter_list|)
block|{
if|if
condition|(
name|threadGroup
operator|==
literal|null
condition|)
block|{
return|return
literal|"{null group}"
return|;
block|}
else|else
block|{
return|return
name|threadGroup
operator|.
name|getName
argument_list|()
return|;
block|}
block|}
DECL|method|generateRandomStringArray
specifier|public
specifier|static
name|String
index|[]
name|generateRandomStringArray
parameter_list|(
name|int
name|maxArraySize
parameter_list|,
name|int
name|maxStringSize
parameter_list|,
name|boolean
name|allowNull
parameter_list|)
block|{
if|if
condition|(
name|allowNull
operator|&&
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
index|[]
name|array
init|=
operator|new
name|String
index|[
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|maxArraySize
argument_list|)
index|]
decl_stmt|;
comment|// allow empty arrays
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|array
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|array
index|[
name|i
index|]
operator|=
name|RandomStrings
operator|.
name|randomAsciiOfLength
argument_list|(
name|random
argument_list|()
argument_list|,
name|maxStringSize
argument_list|)
expr_stmt|;
block|}
return|return
name|array
return|;
block|}
DECL|method|terminate
specifier|public
specifier|static
name|boolean
name|terminate
parameter_list|(
name|ExecutorService
modifier|...
name|services
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|boolean
name|terminated
init|=
literal|true
decl_stmt|;
for|for
control|(
name|ExecutorService
name|service
range|:
name|services
control|)
block|{
if|if
condition|(
name|service
operator|!=
literal|null
condition|)
block|{
name|terminated
operator|&=
name|ThreadPool
operator|.
name|terminate
argument_list|(
name|service
argument_list|,
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|terminated
return|;
block|}
DECL|method|terminate
specifier|public
specifier|static
name|boolean
name|terminate
parameter_list|(
name|ThreadPool
name|service
parameter_list|)
throws|throws
name|InterruptedException
block|{
return|return
name|ThreadPool
operator|.
name|terminate
argument_list|(
name|service
argument_list|,
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
return|;
block|}
comment|/**      * Returns a random number of temporary paths.      */
DECL|method|tmpPaths
specifier|public
name|String
index|[]
name|tmpPaths
parameter_list|()
block|{
specifier|final
name|int
name|numPaths
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
decl_stmt|;
specifier|final
name|String
index|[]
name|absPaths
init|=
operator|new
name|String
index|[
name|numPaths
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numPaths
condition|;
name|i
operator|++
control|)
block|{
name|absPaths
index|[
name|i
index|]
operator|=
name|createTempDir
argument_list|()
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
return|return
name|absPaths
return|;
block|}
DECL|method|newNodeEnvironment
specifier|public
name|NodeEnvironment
name|newNodeEnvironment
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|newNodeEnvironment
argument_list|(
name|ImmutableSettings
operator|.
name|EMPTY
argument_list|)
return|;
block|}
DECL|method|newNodeEnvironment
specifier|public
name|NodeEnvironment
name|newNodeEnvironment
parameter_list|(
name|Settings
name|settings
parameter_list|)
throws|throws
name|IOException
block|{
name|Settings
name|build
init|=
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|settings
argument_list|)
operator|.
name|put
argument_list|(
literal|"path.home"
argument_list|,
name|createTempDir
argument_list|()
operator|.
name|toAbsolutePath
argument_list|()
argument_list|)
operator|.
name|putArray
argument_list|(
literal|"path.data"
argument_list|,
name|tmpPaths
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
operator|new
name|NodeEnvironment
argument_list|(
name|build
argument_list|,
operator|new
name|Environment
argument_list|(
name|build
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

