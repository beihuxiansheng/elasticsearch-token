begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.test
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|test
package|;
end_package

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|ObjectArrayList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|SeedUtils
import|;
end_import

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|generators
operator|.
name|RandomInts
import|;
end_import

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|generators
operator|.
name|RandomPicks
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicates
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Collections2
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterators
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchIllegalStateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|node
operator|.
name|stats
operator|.
name|NodeStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|node
operator|.
name|stats
operator|.
name|NodesStatsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|state
operator|.
name|ClusterStateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cache
operator|.
name|recycler
operator|.
name|CacheRecycler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cache
operator|.
name|recycler
operator|.
name|PageCacheRecyclerModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|node
operator|.
name|NodeClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|transport
operator|.
name|TransportClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRouting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|FileSystemUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|ESLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|Loggers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|network
operator|.
name|NetworkUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
operator|.
name|Builder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|transport
operator|.
name|TransportAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|BigArraysModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|NodeEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|IndexEngineModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|FieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|merge
operator|.
name|policy
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|merge
operator|.
name|scheduler
operator|.
name|ConcurrentMergeSchedulerProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|merge
operator|.
name|scheduler
operator|.
name|MergeSchedulerModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|merge
operator|.
name|scheduler
operator|.
name|MergeSchedulerProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|merge
operator|.
name|scheduler
operator|.
name|SerialMergeSchedulerProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|IndexMissingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|IndexTemplateMissingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|node
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|node
operator|.
name|internal
operator|.
name|InternalNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|repositories
operator|.
name|RepositoryMissingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|cache
operator|.
name|recycler
operator|.
name|MockBigArraysModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|cache
operator|.
name|recycler
operator|.
name|MockPageCacheRecyclerModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|engine
operator|.
name|MockEngineModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|store
operator|.
name|MockFSIndexStoreModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|transport
operator|.
name|AssertingLocalTransportModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|Transport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|RandomizedTest
operator|.
name|systemPropertyAsBoolean
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
operator|.
name|newTreeMap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
operator|.
name|rarely
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
operator|.
name|usually
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_REPLICAS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_SHARDS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
operator|.
name|settingsBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|node
operator|.
name|NodeBuilder
operator|.
name|nodeBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertAcked
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertAllFilesClosed
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertAllSearchersClosed
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_comment
comment|/**  * TestCluster manages a set of JVM private nodes and allows convenient access to them.  * The cluster supports randomized configuration such that nodes started in the cluster will  * automatically load asserting services tracking resources like file handles or open searchers.  *<p>  * The Cluster is bound to a test lifecycle where tests must call {@link #beforeTest(java.util.Random, double)} and  * {@link #afterTest()} to initialize and reset the cluster in order to be more reproducible. The term "more" relates  * to the async nature of Elasticsearch in combination with randomized testing. Once Threads and asynchronous calls  * are involved reproducibility is very limited. This class should only be used through {@link ElasticsearchIntegrationTest}.  *</p>  */
end_comment

begin_class
DECL|class|TestCluster
specifier|public
specifier|final
class|class
name|TestCluster
implements|implements
name|Iterable
argument_list|<
name|Client
argument_list|>
block|{
DECL|field|logger
specifier|private
specifier|final
name|ESLogger
name|logger
init|=
name|Loggers
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
comment|/**      * A boolean value to enable or disable mock modules. This is useful to test the      * system without asserting modules that to make sure they don't hide any bugs in      * production.      *      * @see ElasticsearchIntegrationTest      */
DECL|field|TESTS_ENABLE_MOCK_MODULES
specifier|public
specifier|static
specifier|final
name|String
name|TESTS_ENABLE_MOCK_MODULES
init|=
literal|"tests.enable_mock_modules"
decl_stmt|;
comment|/**      * A node level setting that holds a per node random seed that is consistent across node restarts      */
DECL|field|SETTING_CLUSTER_NODE_SEED
specifier|public
specifier|static
specifier|final
name|String
name|SETTING_CLUSTER_NODE_SEED
init|=
literal|"test.cluster.node.seed"
decl_stmt|;
comment|/**      * Key used to retrieve the index random seed from the index settings on a running node.      * The value of this seed can be used to initialize a random context for a specific index.      * It's set once per test via a generic index template.      */
DECL|field|SETTING_INDEX_SEED
specifier|public
specifier|static
specifier|final
name|String
name|SETTING_INDEX_SEED
init|=
literal|"index.tests.seed"
decl_stmt|;
DECL|field|CLUSTER_NAME_KEY
specifier|private
specifier|static
specifier|final
name|String
name|CLUSTER_NAME_KEY
init|=
literal|"cluster.name"
decl_stmt|;
DECL|field|ENABLE_MOCK_MODULES
specifier|private
specifier|static
specifier|final
name|boolean
name|ENABLE_MOCK_MODULES
init|=
name|systemPropertyAsBoolean
argument_list|(
name|TESTS_ENABLE_MOCK_MODULES
argument_list|,
literal|true
argument_list|)
decl_stmt|;
DECL|field|DEFAULT_MIN_NUM_NODES
specifier|static
specifier|final
name|int
name|DEFAULT_MIN_NUM_NODES
init|=
literal|2
decl_stmt|;
DECL|field|DEFAULT_MAX_NUM_NODES
specifier|static
specifier|final
name|int
name|DEFAULT_MAX_NUM_NODES
init|=
literal|6
decl_stmt|;
DECL|field|DEFAULT_MIN_NUM_SHARDS
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_MIN_NUM_SHARDS
init|=
literal|1
decl_stmt|;
DECL|field|DEFAULT_MAX_NUM_SHARDS
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_MAX_NUM_SHARDS
init|=
literal|10
decl_stmt|;
comment|/* sorted map to make traverse order reproducible */
DECL|field|nodes
specifier|private
specifier|final
name|TreeMap
argument_list|<
name|String
argument_list|,
name|NodeAndClient
argument_list|>
name|nodes
init|=
name|newTreeMap
argument_list|()
decl_stmt|;
DECL|field|dataDirToClean
specifier|private
specifier|final
name|Set
argument_list|<
name|File
argument_list|>
name|dataDirToClean
init|=
operator|new
name|HashSet
argument_list|<
name|File
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|clusterName
specifier|private
specifier|final
name|String
name|clusterName
decl_stmt|;
DECL|field|open
specifier|private
specifier|final
name|AtomicBoolean
name|open
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|true
argument_list|)
decl_stmt|;
DECL|field|defaultSettings
specifier|private
specifier|final
name|Settings
name|defaultSettings
decl_stmt|;
DECL|field|random
specifier|private
name|Random
name|random
decl_stmt|;
DECL|field|nextNodeId
specifier|private
name|AtomicInteger
name|nextNodeId
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|/* Each shared node has a node seed that is used to start up the node and get default settings      * this is important if a node is randomly shut down in a test since the next test relies on a      * fully shared cluster to be more reproducible */
DECL|field|sharedNodesSeeds
specifier|private
specifier|final
name|long
index|[]
name|sharedNodesSeeds
decl_stmt|;
DECL|field|transportClientRatio
specifier|private
name|double
name|transportClientRatio
init|=
literal|0.0
decl_stmt|;
DECL|field|nodeSettingsSource
specifier|private
specifier|final
name|NodeSettingsSource
name|nodeSettingsSource
decl_stmt|;
DECL|method|TestCluster
specifier|public
name|TestCluster
parameter_list|(
name|long
name|clusterSeed
parameter_list|,
name|String
name|clusterName
parameter_list|)
block|{
name|this
argument_list|(
name|clusterSeed
argument_list|,
name|DEFAULT_MIN_NUM_NODES
argument_list|,
name|DEFAULT_MAX_NUM_NODES
argument_list|,
name|clusterName
argument_list|,
name|NodeSettingsSource
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
block|}
DECL|method|TestCluster
specifier|public
name|TestCluster
parameter_list|(
name|long
name|clusterSeed
parameter_list|,
name|int
name|minNumNodes
parameter_list|,
name|int
name|maxNumNodes
parameter_list|,
name|String
name|clusterName
parameter_list|)
block|{
name|this
argument_list|(
name|clusterSeed
argument_list|,
name|minNumNodes
argument_list|,
name|maxNumNodes
argument_list|,
name|clusterName
argument_list|,
name|NodeSettingsSource
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
block|}
DECL|method|TestCluster
specifier|public
name|TestCluster
parameter_list|(
name|long
name|clusterSeed
parameter_list|,
name|int
name|minNumNodes
parameter_list|,
name|int
name|maxNumNodes
parameter_list|,
name|String
name|clusterName
parameter_list|,
name|NodeSettingsSource
name|nodeSettingsSource
parameter_list|)
block|{
name|this
operator|.
name|clusterName
operator|=
name|clusterName
expr_stmt|;
if|if
condition|(
name|minNumNodes
operator|<
literal|0
operator|||
name|maxNumNodes
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"minimum and maximum number of nodes must be>= 0"
argument_list|)
throw|;
block|}
if|if
condition|(
name|maxNumNodes
operator|<
name|minNumNodes
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"maximum number of nodes must be>= minimum number of nodes"
argument_list|)
throw|;
block|}
name|Random
name|random
init|=
operator|new
name|Random
argument_list|(
name|clusterSeed
argument_list|)
decl_stmt|;
name|int
name|numSharedNodes
decl_stmt|;
if|if
condition|(
name|minNumNodes
operator|==
name|maxNumNodes
condition|)
block|{
name|numSharedNodes
operator|=
name|minNumNodes
expr_stmt|;
block|}
else|else
block|{
name|numSharedNodes
operator|=
name|minNumNodes
operator|+
name|random
operator|.
name|nextInt
argument_list|(
name|maxNumNodes
operator|-
name|minNumNodes
argument_list|)
expr_stmt|;
block|}
assert|assert
name|numSharedNodes
operator|>=
literal|0
assert|;
comment|/*          *  TODO          *  - we might want start some master only nodes?          *  - we could add a flag that returns a client to the master all the time?          *  - we could add a flag that never returns a client to the master          *  - along those lines use a dedicated node that is master eligible and let all other nodes be only data nodes          */
name|sharedNodesSeeds
operator|=
operator|new
name|long
index|[
name|numSharedNodes
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sharedNodesSeeds
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|sharedNodesSeeds
index|[
name|i
index|]
operator|=
name|random
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
name|logger
operator|.
name|info
argument_list|(
literal|"Setup TestCluster [{}] with seed [{}] using [{}] nodes"
argument_list|,
name|clusterName
argument_list|,
name|SeedUtils
operator|.
name|formatSeed
argument_list|(
name|clusterSeed
argument_list|)
argument_list|,
name|numSharedNodes
argument_list|)
expr_stmt|;
name|this
operator|.
name|nodeSettingsSource
operator|=
name|nodeSettingsSource
expr_stmt|;
name|Builder
name|builder
init|=
name|ImmutableSettings
operator|.
name|settingsBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|random
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
operator|==
literal|0
condition|)
block|{
comment|// sometimes set this
comment|// randomize (multi/single) data path, special case for 0, don't set it at all...
specifier|final
name|int
name|numOfDataPaths
init|=
name|random
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
decl_stmt|;
if|if
condition|(
name|numOfDataPaths
operator|>
literal|0
condition|)
block|{
name|StringBuilder
name|dataPath
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numOfDataPaths
condition|;
name|i
operator|++
control|)
block|{
name|dataPath
operator|.
name|append
argument_list|(
literal|"data/d"
argument_list|)
operator|.
name|append
argument_list|(
name|i
argument_list|)
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|put
argument_list|(
literal|"path.data"
argument_list|,
name|dataPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|defaultSettings
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
DECL|method|getClusterName
specifier|public
name|String
name|getClusterName
parameter_list|()
block|{
return|return
name|clusterName
return|;
block|}
DECL|method|isLocalTransportConfigured
specifier|private
specifier|static
name|boolean
name|isLocalTransportConfigured
parameter_list|()
block|{
if|if
condition|(
literal|"local"
operator|.
name|equals
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"es.node.mode"
argument_list|,
literal|"network"
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"es.node.local"
argument_list|,
literal|"false"
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getSettings
specifier|private
name|Settings
name|getSettings
parameter_list|(
name|int
name|nodeOrdinal
parameter_list|,
name|long
name|nodeSeed
parameter_list|,
name|Settings
name|others
parameter_list|)
block|{
name|Builder
name|builder
init|=
name|ImmutableSettings
operator|.
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
name|defaultSettings
argument_list|)
operator|.
name|put
argument_list|(
name|getRandomNodeSettings
argument_list|(
name|nodeSeed
argument_list|)
argument_list|)
decl_stmt|;
name|Settings
name|settings
init|=
name|nodeSettingsSource
operator|.
name|settings
argument_list|(
name|nodeOrdinal
argument_list|)
decl_stmt|;
if|if
condition|(
name|settings
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|settings
operator|.
name|get
argument_list|(
name|CLUSTER_NAME_KEY
argument_list|)
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|ElasticsearchIllegalStateException
argument_list|(
literal|"Tests must not set a '"
operator|+
name|CLUSTER_NAME_KEY
operator|+
literal|"' as a node setting set '"
operator|+
name|CLUSTER_NAME_KEY
operator|+
literal|"': ["
operator|+
name|settings
operator|.
name|get
argument_list|(
name|CLUSTER_NAME_KEY
argument_list|)
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|builder
operator|.
name|put
argument_list|(
name|settings
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|others
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|put
argument_list|(
name|others
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|put
argument_list|(
name|CLUSTER_NAME_KEY
argument_list|,
name|clusterName
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|getRandomNodeSettings
specifier|private
specifier|static
name|Settings
name|getRandomNodeSettings
parameter_list|(
name|long
name|seed
parameter_list|)
block|{
name|Random
name|random
init|=
operator|new
name|Random
argument_list|(
name|seed
argument_list|)
decl_stmt|;
name|Builder
name|builder
init|=
name|ImmutableSettings
operator|.
name|settingsBuilder
argument_list|()
comment|/* use RAM directories in 10% of the runs */
comment|//.put("index.store.type", random.nextInt(10) == 0 ? MockRamIndexStoreModule.class.getName() : MockFSIndexStoreModule.class.getName())
comment|// decrease the routing schedule so new nodes will be added quickly - some random value between 30 and 80 ms
operator|.
name|put
argument_list|(
literal|"cluster.routing.schedule"
argument_list|,
operator|(
literal|30
operator|+
name|random
operator|.
name|nextInt
argument_list|(
literal|50
argument_list|)
operator|)
operator|+
literal|"ms"
argument_list|)
comment|// default to non gateway
operator|.
name|put
argument_list|(
literal|"gateway.type"
argument_list|,
literal|"none"
argument_list|)
operator|.
name|put
argument_list|(
name|SETTING_CLUSTER_NODE_SEED
argument_list|,
name|seed
argument_list|)
decl_stmt|;
if|if
condition|(
name|ENABLE_MOCK_MODULES
operator|&&
name|usually
argument_list|(
name|random
argument_list|)
condition|)
block|{
name|builder
operator|.
name|put
argument_list|(
literal|"index.store.type"
argument_list|,
name|MockFSIndexStoreModule
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// no RAM dir for now!
name|builder
operator|.
name|put
argument_list|(
name|IndexEngineModule
operator|.
name|EngineSettings
operator|.
name|ENGINE_TYPE
argument_list|,
name|MockEngineModule
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|put
argument_list|(
name|PageCacheRecyclerModule
operator|.
name|CACHE_IMPL
argument_list|,
name|MockPageCacheRecyclerModule
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|put
argument_list|(
name|BigArraysModule
operator|.
name|IMPL
argument_list|,
name|MockBigArraysModule
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isLocalTransportConfigured
argument_list|()
condition|)
block|{
name|builder
operator|.
name|put
argument_list|(
name|TransportModule
operator|.
name|TRANSPORT_TYPE_KEY
argument_list|,
name|AssertingLocalTransportModule
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|put
argument_list|(
name|Transport
operator|.
name|TransportSettings
operator|.
name|TRANSPORT_TCP_COMPRESS
argument_list|,
name|rarely
argument_list|(
name|random
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|put
argument_list|(
literal|"type"
argument_list|,
name|RandomPicks
operator|.
name|randomFrom
argument_list|(
name|random
argument_list|,
name|CacheRecycler
operator|.
name|Type
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|random
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|builder
operator|.
name|put
argument_list|(
literal|"cache.recycler.page.type"
argument_list|,
name|RandomPicks
operator|.
name|randomFrom
argument_list|(
name|random
argument_list|,
name|CacheRecycler
operator|.
name|Type
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|random
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
operator|==
literal|0
condition|)
block|{
comment|// 10% of the nodes have a very frequent check interval
name|builder
operator|.
name|put
argument_list|(
name|SearchService
operator|.
name|KEEPALIVE_INTERVAL_KEY
argument_list|,
name|TimeValue
operator|.
name|timeValueMillis
argument_list|(
literal|10
operator|+
name|random
operator|.
name|nextInt
argument_list|(
literal|2000
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|random
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
operator|!=
literal|0
condition|)
block|{
comment|// 90% of the time - 10% of the time we don't set anything
name|builder
operator|.
name|put
argument_list|(
name|SearchService
operator|.
name|KEEPALIVE_INTERVAL_KEY
argument_list|,
name|TimeValue
operator|.
name|timeValueSeconds
argument_list|(
literal|10
operator|+
name|random
operator|.
name|nextInt
argument_list|(
literal|5
operator|*
literal|60
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|random
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
comment|// sometimes set a
name|builder
operator|.
name|put
argument_list|(
name|SearchService
operator|.
name|DEFAUTL_KEEPALIVE_KEY
argument_list|,
name|TimeValue
operator|.
name|timeValueSeconds
argument_list|(
literal|100
operator|+
name|random
operator|.
name|nextInt
argument_list|(
literal|5
operator|*
literal|60
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|random
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
comment|// change threadpool types to make sure we don't have components that rely on the type of thread pools
for|for
control|(
name|String
name|name
range|:
name|Arrays
operator|.
name|asList
argument_list|(
name|ThreadPool
operator|.
name|Names
operator|.
name|BULK
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|FLUSH
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|GET
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|INDEX
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|MANAGEMENT
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|MERGE
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|OPTIMIZE
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|PERCOLATE
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|REFRESH
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|SEARCH
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|SNAPSHOT
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|SUGGEST
argument_list|,
name|ThreadPool
operator|.
name|Names
operator|.
name|WARMER
argument_list|)
control|)
block|{
if|if
condition|(
name|random
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
specifier|final
name|String
name|type
init|=
name|RandomPicks
operator|.
name|randomFrom
argument_list|(
name|random
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"fixed"
argument_list|,
literal|"cached"
argument_list|,
literal|"scaling"
argument_list|)
argument_list|)
decl_stmt|;
name|builder
operator|.
name|put
argument_list|(
name|ThreadPool
operator|.
name|THREADPOOL_GROUP
operator|+
name|name
operator|+
literal|".type"
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|builder
operator|.
name|put
argument_list|(
literal|"plugins.isolation"
argument_list|,
name|random
operator|.
name|nextBoolean
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|clusterName
specifier|public
specifier|static
name|String
name|clusterName
parameter_list|(
name|String
name|prefix
parameter_list|,
name|String
name|childVMId
parameter_list|,
name|long
name|clusterSeed
parameter_list|)
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|(
name|prefix
argument_list|)
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|'-'
argument_list|)
operator|.
name|append
argument_list|(
name|NetworkUtils
operator|.
name|getLocalAddress
argument_list|()
operator|.
name|getHostName
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"-CHILD_VM=["
argument_list|)
operator|.
name|append
argument_list|(
name|childVMId
argument_list|)
operator|.
name|append
argument_list|(
literal|']'
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"-CLUSTER_SEED=["
argument_list|)
operator|.
name|append
argument_list|(
name|clusterSeed
argument_list|)
operator|.
name|append
argument_list|(
literal|']'
argument_list|)
expr_stmt|;
comment|// if multiple maven task run on a single host we better have an identifier that doesn't rely on input params
name|builder
operator|.
name|append
argument_list|(
literal|"-HASH=["
argument_list|)
operator|.
name|append
argument_list|(
name|SeedUtils
operator|.
name|formatSeed
argument_list|(
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|']'
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|ensureOpen
specifier|private
name|void
name|ensureOpen
parameter_list|()
block|{
if|if
condition|(
operator|!
name|open
operator|.
name|get
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Cluster is already closed"
argument_list|)
throw|;
block|}
block|}
DECL|method|getOrBuildRandomNode
specifier|private
specifier|synchronized
name|NodeAndClient
name|getOrBuildRandomNode
parameter_list|()
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
name|NodeAndClient
name|randomNodeAndClient
init|=
name|getRandomNodeAndClient
argument_list|()
decl_stmt|;
if|if
condition|(
name|randomNodeAndClient
operator|!=
literal|null
condition|)
block|{
return|return
name|randomNodeAndClient
return|;
block|}
name|NodeAndClient
name|buildNode
init|=
name|buildNode
argument_list|()
decl_stmt|;
name|buildNode
operator|.
name|node
argument_list|()
operator|.
name|start
argument_list|()
expr_stmt|;
name|publishNode
argument_list|(
name|buildNode
argument_list|)
expr_stmt|;
return|return
name|buildNode
return|;
block|}
DECL|method|getRandomNodeAndClient
specifier|private
specifier|synchronized
name|NodeAndClient
name|getRandomNodeAndClient
parameter_list|()
block|{
name|Predicate
argument_list|<
name|NodeAndClient
argument_list|>
name|all
init|=
name|Predicates
operator|.
name|alwaysTrue
argument_list|()
decl_stmt|;
return|return
name|getRandomNodeAndClient
argument_list|(
name|all
argument_list|)
return|;
block|}
DECL|method|getRandomNodeAndClient
specifier|private
specifier|synchronized
name|NodeAndClient
name|getRandomNodeAndClient
parameter_list|(
name|Predicate
argument_list|<
name|NodeAndClient
argument_list|>
name|predicate
parameter_list|)
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
name|Collection
argument_list|<
name|NodeAndClient
argument_list|>
name|values
init|=
name|Collections2
operator|.
name|filter
argument_list|(
name|nodes
operator|.
name|values
argument_list|()
argument_list|,
name|predicate
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|values
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|int
name|whichOne
init|=
name|random
operator|.
name|nextInt
argument_list|(
name|values
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|NodeAndClient
name|nodeAndClient
range|:
name|values
control|)
block|{
if|if
condition|(
name|whichOne
operator|--
operator|==
literal|0
condition|)
block|{
return|return
name|nodeAndClient
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Ensures that at least<code>n</code> nodes are present in the cluster.      * if more nodes than<code>n</code> are present this method will not      * stop any of the running nodes.      */
DECL|method|ensureAtLeastNumNodes
specifier|public
specifier|synchronized
name|void
name|ensureAtLeastNumNodes
parameter_list|(
name|int
name|n
parameter_list|)
block|{
name|int
name|size
init|=
name|nodes
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|size
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"increasing cluster size from {} to {}"
argument_list|,
name|size
argument_list|,
name|n
argument_list|)
expr_stmt|;
name|NodeAndClient
name|buildNode
init|=
name|buildNode
argument_list|()
decl_stmt|;
name|buildNode
operator|.
name|node
argument_list|()
operator|.
name|start
argument_list|()
expr_stmt|;
name|publishNode
argument_list|(
name|buildNode
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Ensures that at most<code>n</code> are up and running.      * If less nodes that<code>n</code> are running this method      * will not start any additional nodes.      */
DECL|method|ensureAtMostNumNodes
specifier|public
specifier|synchronized
name|void
name|ensureAtMostNumNodes
parameter_list|(
name|int
name|n
parameter_list|)
block|{
if|if
condition|(
name|nodes
operator|.
name|size
argument_list|()
operator|<=
name|n
condition|)
block|{
return|return;
block|}
comment|// prevent killing the master if possible
specifier|final
name|Iterator
argument_list|<
name|NodeAndClient
argument_list|>
name|values
init|=
name|n
operator|==
literal|0
condition|?
name|nodes
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
else|:
name|Iterators
operator|.
name|filter
argument_list|(
name|nodes
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
argument_list|,
name|Predicates
operator|.
name|not
argument_list|(
operator|new
name|MasterNodePredicate
argument_list|(
name|getMasterName
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Iterator
argument_list|<
name|NodeAndClient
argument_list|>
name|limit
init|=
name|Iterators
operator|.
name|limit
argument_list|(
name|values
argument_list|,
name|nodes
operator|.
name|size
argument_list|()
operator|-
name|n
argument_list|)
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"changing cluster size from {} to {}"
argument_list|,
name|nodes
operator|.
name|size
argument_list|()
operator|-
name|n
argument_list|,
name|n
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|NodeAndClient
argument_list|>
name|nodesToRemove
init|=
operator|new
name|HashSet
argument_list|<
name|NodeAndClient
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|limit
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|NodeAndClient
name|next
init|=
name|limit
operator|.
name|next
argument_list|()
decl_stmt|;
name|nodesToRemove
operator|.
name|add
argument_list|(
name|next
argument_list|)
expr_stmt|;
name|next
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|NodeAndClient
name|toRemove
range|:
name|nodesToRemove
control|)
block|{
name|nodes
operator|.
name|remove
argument_list|(
name|toRemove
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|buildNode
specifier|private
name|NodeAndClient
name|buildNode
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|Version
name|version
parameter_list|)
block|{
name|int
name|ord
init|=
name|nextNodeId
operator|.
name|getAndIncrement
argument_list|()
decl_stmt|;
return|return
name|buildNode
argument_list|(
name|ord
argument_list|,
name|random
operator|.
name|nextLong
argument_list|()
argument_list|,
name|settings
argument_list|,
name|version
argument_list|)
return|;
block|}
DECL|method|buildNode
specifier|private
name|NodeAndClient
name|buildNode
parameter_list|()
block|{
name|int
name|ord
init|=
name|nextNodeId
operator|.
name|getAndIncrement
argument_list|()
decl_stmt|;
return|return
name|buildNode
argument_list|(
name|ord
argument_list|,
name|random
operator|.
name|nextLong
argument_list|()
argument_list|,
literal|null
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
return|;
block|}
DECL|method|buildNode
specifier|private
name|NodeAndClient
name|buildNode
parameter_list|(
name|int
name|nodeId
parameter_list|,
name|long
name|seed
parameter_list|,
name|Settings
name|settings
parameter_list|,
name|Version
name|version
parameter_list|)
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
name|settings
operator|=
name|getSettings
argument_list|(
name|nodeId
argument_list|,
name|seed
argument_list|,
name|settings
argument_list|)
expr_stmt|;
name|String
name|name
init|=
name|buildNodeName
argument_list|(
name|nodeId
argument_list|)
decl_stmt|;
assert|assert
operator|!
name|nodes
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
assert|;
name|Settings
name|finalSettings
init|=
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
name|settings
argument_list|)
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
name|name
argument_list|)
operator|.
name|put
argument_list|(
literal|"discovery.id.seed"
argument_list|,
name|seed
argument_list|)
operator|.
name|put
argument_list|(
literal|"tests.mock.version"
argument_list|,
name|version
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Node
name|node
init|=
name|nodeBuilder
argument_list|()
operator|.
name|settings
argument_list|(
name|finalSettings
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
operator|new
name|NodeAndClient
argument_list|(
name|name
argument_list|,
name|node
argument_list|,
operator|new
name|RandomClientFactory
argument_list|()
argument_list|)
return|;
block|}
DECL|method|buildNodeName
specifier|private
name|String
name|buildNodeName
parameter_list|(
name|int
name|id
parameter_list|)
block|{
return|return
literal|"node_"
operator|+
name|id
return|;
block|}
DECL|method|client
specifier|public
specifier|synchronized
name|Client
name|client
parameter_list|()
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
comment|/* Randomly return a client to one of the nodes in the cluster */
return|return
name|getOrBuildRandomNode
argument_list|()
operator|.
name|client
argument_list|(
name|random
argument_list|)
return|;
block|}
comment|/**      * Returns a node client to the current master node.      * Note: use this with care tests should not rely on a certain nodes client.      */
DECL|method|masterClient
specifier|public
specifier|synchronized
name|Client
name|masterClient
parameter_list|()
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
name|NodeAndClient
name|randomNodeAndClient
init|=
name|getRandomNodeAndClient
argument_list|(
operator|new
name|MasterNodePredicate
argument_list|(
name|getMasterName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|randomNodeAndClient
operator|!=
literal|null
condition|)
block|{
return|return
name|randomNodeAndClient
operator|.
name|nodeClient
argument_list|()
return|;
comment|// ensure node client master is requested
block|}
name|Assert
operator|.
name|fail
argument_list|(
literal|"No master client found"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
comment|// can't happen
block|}
comment|/**      * Returns a node client to random node but not the master. This method will fail if no non-master client is available.      */
DECL|method|nonMasterClient
specifier|public
specifier|synchronized
name|Client
name|nonMasterClient
parameter_list|()
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
name|NodeAndClient
name|randomNodeAndClient
init|=
name|getRandomNodeAndClient
argument_list|(
name|Predicates
operator|.
name|not
argument_list|(
operator|new
name|MasterNodePredicate
argument_list|(
name|getMasterName
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|randomNodeAndClient
operator|!=
literal|null
condition|)
block|{
return|return
name|randomNodeAndClient
operator|.
name|nodeClient
argument_list|()
return|;
comment|// ensure node client non-master is requested
block|}
name|Assert
operator|.
name|fail
argument_list|(
literal|"No non-master client found"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
comment|// can't happen
block|}
comment|/**      * Returns a client to a node started with "node.client: true"      */
DECL|method|clientNodeClient
specifier|public
specifier|synchronized
name|Client
name|clientNodeClient
parameter_list|()
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
name|NodeAndClient
name|randomNodeAndClient
init|=
name|getRandomNodeAndClient
argument_list|(
operator|new
name|ClientNodePredicate
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|randomNodeAndClient
operator|!=
literal|null
condition|)
block|{
return|return
name|randomNodeAndClient
operator|.
name|client
argument_list|(
name|random
argument_list|)
return|;
block|}
name|startNodeClient
argument_list|(
name|ImmutableSettings
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
return|return
name|getRandomNodeAndClient
argument_list|(
operator|new
name|ClientNodePredicate
argument_list|()
argument_list|)
operator|.
name|client
argument_list|(
name|random
argument_list|)
return|;
block|}
comment|/**      * Returns a transport client      */
DECL|method|transportClient
specifier|public
specifier|synchronized
name|Client
name|transportClient
parameter_list|()
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
comment|// randomly return a transport client going to one of the nodes in the cluster
return|return
name|getOrBuildRandomNode
argument_list|()
operator|.
name|transportClient
argument_list|()
return|;
block|}
comment|/**      * Returns a node client to a given node.      */
DECL|method|client
specifier|public
specifier|synchronized
name|Client
name|client
parameter_list|(
name|String
name|nodeName
parameter_list|)
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
name|NodeAndClient
name|nodeAndClient
init|=
name|nodes
operator|.
name|get
argument_list|(
name|nodeName
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodeAndClient
operator|!=
literal|null
condition|)
block|{
return|return
name|nodeAndClient
operator|.
name|client
argument_list|(
name|random
argument_list|)
return|;
block|}
name|Assert
operator|.
name|fail
argument_list|(
literal|"No node found with name: ["
operator|+
name|nodeName
operator|+
literal|"]"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
comment|// can't happen
block|}
comment|/**      * Returns a "smart" node client to a random node in the cluster      */
DECL|method|smartClient
specifier|public
specifier|synchronized
name|Client
name|smartClient
parameter_list|()
block|{
name|NodeAndClient
name|randomNodeAndClient
init|=
name|getRandomNodeAndClient
argument_list|()
decl_stmt|;
if|if
condition|(
name|randomNodeAndClient
operator|!=
literal|null
condition|)
block|{
return|return
name|randomNodeAndClient
operator|.
name|nodeClient
argument_list|()
return|;
block|}
name|Assert
operator|.
name|fail
argument_list|(
literal|"No smart client found"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
comment|// can't happen
block|}
comment|/**      * Returns a random node that applies to the given predicate.      * The predicate can filter nodes based on the nodes settings.      * If all nodes are filtered out this method will return<code>null</code>      */
DECL|method|client
specifier|public
specifier|synchronized
name|Client
name|client
parameter_list|(
specifier|final
name|Predicate
argument_list|<
name|Settings
argument_list|>
name|filterPredicate
parameter_list|)
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
specifier|final
name|NodeAndClient
name|randomNodeAndClient
init|=
name|getRandomNodeAndClient
argument_list|(
operator|new
name|Predicate
argument_list|<
name|NodeAndClient
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|NodeAndClient
name|nodeAndClient
parameter_list|)
block|{
return|return
name|filterPredicate
operator|.
name|apply
argument_list|(
name|nodeAndClient
operator|.
name|node
operator|.
name|settings
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|randomNodeAndClient
operator|!=
literal|null
condition|)
block|{
return|return
name|randomNodeAndClient
operator|.
name|client
argument_list|(
name|random
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|open
operator|.
name|compareAndSet
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|IOUtils
operator|.
name|closeWhileHandlingException
argument_list|(
name|nodes
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
name|nodes
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|NodeAndClient
specifier|private
specifier|final
class|class
name|NodeAndClient
implements|implements
name|Closeable
block|{
DECL|field|node
specifier|private
name|InternalNode
name|node
decl_stmt|;
DECL|field|client
specifier|private
name|Client
name|client
decl_stmt|;
DECL|field|nodeClient
specifier|private
name|Client
name|nodeClient
decl_stmt|;
DECL|field|transportClient
specifier|private
name|Client
name|transportClient
decl_stmt|;
DECL|field|closed
specifier|private
specifier|final
name|AtomicBoolean
name|closed
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
DECL|field|clientFactory
specifier|private
specifier|final
name|ClientFactory
name|clientFactory
decl_stmt|;
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
DECL|method|NodeAndClient
name|NodeAndClient
parameter_list|(
name|String
name|name
parameter_list|,
name|Node
name|node
parameter_list|,
name|ClientFactory
name|factory
parameter_list|)
block|{
name|this
operator|.
name|node
operator|=
operator|(
name|InternalNode
operator|)
name|node
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|clientFactory
operator|=
name|factory
expr_stmt|;
block|}
DECL|method|node
name|Node
name|node
parameter_list|()
block|{
if|if
condition|(
name|closed
operator|.
name|get
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"already closed"
argument_list|)
throw|;
block|}
return|return
name|node
return|;
block|}
DECL|method|client
name|Client
name|client
parameter_list|(
name|Random
name|random
parameter_list|)
block|{
if|if
condition|(
name|closed
operator|.
name|get
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"already closed"
argument_list|)
throw|;
block|}
if|if
condition|(
name|client
operator|!=
literal|null
condition|)
block|{
return|return
name|client
return|;
block|}
return|return
name|client
operator|=
name|clientFactory
operator|.
name|client
argument_list|(
name|node
argument_list|,
name|clusterName
argument_list|,
name|random
argument_list|)
return|;
block|}
DECL|method|nodeClient
name|Client
name|nodeClient
parameter_list|()
block|{
if|if
condition|(
name|closed
operator|.
name|get
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"already closed"
argument_list|)
throw|;
block|}
if|if
condition|(
name|nodeClient
operator|==
literal|null
condition|)
block|{
name|Client
name|maybeNodeClient
init|=
name|client
argument_list|(
name|random
argument_list|)
decl_stmt|;
if|if
condition|(
name|client
operator|instanceof
name|NodeClient
condition|)
block|{
name|nodeClient
operator|=
name|maybeNodeClient
expr_stmt|;
block|}
else|else
block|{
name|nodeClient
operator|=
name|node
operator|.
name|client
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|nodeClient
return|;
block|}
DECL|method|transportClient
name|Client
name|transportClient
parameter_list|()
block|{
if|if
condition|(
name|closed
operator|.
name|get
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"already closed"
argument_list|)
throw|;
block|}
if|if
condition|(
name|transportClient
operator|==
literal|null
condition|)
block|{
name|Client
name|maybeTransportClient
init|=
name|client
argument_list|(
name|random
argument_list|)
decl_stmt|;
if|if
condition|(
name|maybeTransportClient
operator|instanceof
name|TransportClient
condition|)
block|{
name|transportClient
operator|=
name|maybeTransportClient
expr_stmt|;
block|}
else|else
block|{
name|transportClient
operator|=
name|TransportClientFactory
operator|.
name|NO_SNIFF_CLIENT_FACTORY
operator|.
name|client
argument_list|(
name|node
argument_list|,
name|clusterName
argument_list|,
name|random
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|transportClient
return|;
block|}
DECL|method|resetClient
name|void
name|resetClient
parameter_list|()
block|{
if|if
condition|(
name|closed
operator|.
name|get
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"already closed"
argument_list|)
throw|;
block|}
if|if
condition|(
name|client
operator|!=
literal|null
condition|)
block|{
name|client
operator|.
name|close
argument_list|()
expr_stmt|;
name|client
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|nodeClient
operator|!=
literal|null
condition|)
block|{
name|nodeClient
operator|.
name|close
argument_list|()
expr_stmt|;
name|nodeClient
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|transportClient
operator|!=
literal|null
condition|)
block|{
name|transportClient
operator|.
name|close
argument_list|()
expr_stmt|;
name|transportClient
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|restart
name|void
name|restart
parameter_list|(
name|RestartCallback
name|callback
parameter_list|)
throws|throws
name|Exception
block|{
assert|assert
name|callback
operator|!=
literal|null
assert|;
if|if
condition|(
operator|!
name|node
operator|.
name|isClosed
argument_list|()
condition|)
block|{
name|node
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|Settings
name|newSettings
init|=
name|callback
operator|.
name|onNodeStopped
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|newSettings
operator|==
literal|null
condition|)
block|{
name|newSettings
operator|=
name|ImmutableSettings
operator|.
name|EMPTY
expr_stmt|;
block|}
if|if
condition|(
name|callback
operator|.
name|clearData
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|NodeEnvironment
name|nodeEnv
init|=
name|getInstanceFromNode
argument_list|(
name|NodeEnvironment
operator|.
name|class
argument_list|,
name|node
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodeEnv
operator|.
name|hasNodeFile
argument_list|()
condition|)
block|{
name|FileSystemUtils
operator|.
name|deleteRecursively
argument_list|(
name|nodeEnv
operator|.
name|nodeDataLocations
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|node
operator|=
operator|(
name|InternalNode
operator|)
name|nodeBuilder
argument_list|()
operator|.
name|settings
argument_list|(
name|node
operator|.
name|settings
argument_list|()
argument_list|)
operator|.
name|settings
argument_list|(
name|newSettings
argument_list|)
operator|.
name|node
argument_list|()
expr_stmt|;
name|resetClient
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
name|closed
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|client
operator|!=
literal|null
condition|)
block|{
name|client
operator|.
name|close
argument_list|()
expr_stmt|;
name|client
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|nodeClient
operator|!=
literal|null
condition|)
block|{
name|nodeClient
operator|.
name|close
argument_list|()
expr_stmt|;
name|nodeClient
operator|=
literal|null
expr_stmt|;
block|}
name|node
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|ClientFactory
specifier|static
class|class
name|ClientFactory
block|{
DECL|method|client
specifier|public
name|Client
name|client
parameter_list|(
name|Node
name|node
parameter_list|,
name|String
name|clusterName
parameter_list|,
name|Random
name|random
parameter_list|)
block|{
return|return
name|node
operator|.
name|client
argument_list|()
return|;
block|}
block|}
DECL|class|TransportClientFactory
specifier|static
class|class
name|TransportClientFactory
extends|extends
name|ClientFactory
block|{
DECL|field|sniff
specifier|private
name|boolean
name|sniff
decl_stmt|;
DECL|field|NO_SNIFF_CLIENT_FACTORY
specifier|public
specifier|static
name|TransportClientFactory
name|NO_SNIFF_CLIENT_FACTORY
init|=
operator|new
name|TransportClientFactory
argument_list|(
literal|false
argument_list|)
decl_stmt|;
DECL|field|SNIFF_CLIENT_FACTORY
specifier|public
specifier|static
name|TransportClientFactory
name|SNIFF_CLIENT_FACTORY
init|=
operator|new
name|TransportClientFactory
argument_list|(
literal|true
argument_list|)
decl_stmt|;
DECL|method|TransportClientFactory
specifier|private
name|TransportClientFactory
parameter_list|(
name|boolean
name|sniff
parameter_list|)
block|{
name|this
operator|.
name|sniff
operator|=
name|sniff
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|client
specifier|public
name|Client
name|client
parameter_list|(
name|Node
name|node
parameter_list|,
name|String
name|clusterName
parameter_list|,
name|Random
name|random
parameter_list|)
block|{
name|TransportAddress
name|addr
init|=
operator|(
operator|(
name|InternalNode
operator|)
name|node
operator|)
operator|.
name|injector
argument_list|()
operator|.
name|getInstance
argument_list|(
name|TransportService
operator|.
name|class
argument_list|)
operator|.
name|boundAddress
argument_list|()
operator|.
name|publishAddress
argument_list|()
decl_stmt|;
name|TransportClient
name|client
init|=
operator|new
name|TransportClient
argument_list|(
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"client.transport.nodes_sampler_interval"
argument_list|,
literal|"1s"
argument_list|)
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
literal|"transport_client_"
operator|+
name|node
operator|.
name|settings
argument_list|()
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|CLUSTER_NAME_KEY
argument_list|,
name|clusterName
argument_list|)
operator|.
name|put
argument_list|(
literal|"client.transport.sniff"
argument_list|,
name|sniff
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|client
operator|.
name|addTransportAddress
argument_list|(
name|addr
argument_list|)
expr_stmt|;
return|return
name|client
return|;
block|}
block|}
DECL|class|RandomClientFactory
class|class
name|RandomClientFactory
extends|extends
name|ClientFactory
block|{
annotation|@
name|Override
DECL|method|client
specifier|public
name|Client
name|client
parameter_list|(
name|Node
name|node
parameter_list|,
name|String
name|clusterName
parameter_list|,
name|Random
name|random
parameter_list|)
block|{
name|double
name|nextDouble
init|=
name|random
operator|.
name|nextDouble
argument_list|()
decl_stmt|;
if|if
condition|(
name|nextDouble
operator|<
name|transportClientRatio
condition|)
block|{
if|if
condition|(
name|logger
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"Using transport client for node [{}] sniff: [{}]"
argument_list|,
name|node
operator|.
name|settings
argument_list|()
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/* no sniff client for now - doesn't work will all tests since it might throw NoNodeAvailableException if nodes are shut down.                  * we first need support of transportClientRatio as annotations or so                  */
return|return
name|TransportClientFactory
operator|.
name|NO_SNIFF_CLIENT_FACTORY
operator|.
name|client
argument_list|(
name|node
argument_list|,
name|clusterName
argument_list|,
name|random
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|node
operator|.
name|client
argument_list|()
return|;
block|}
block|}
block|}
comment|/**      * This method should be executed before each test to reset the cluster to it's initial state.      */
DECL|method|beforeTest
specifier|public
specifier|synchronized
name|void
name|beforeTest
parameter_list|(
name|Random
name|random
parameter_list|,
name|double
name|transportClientRatio
parameter_list|)
block|{
name|reset
argument_list|(
name|random
argument_list|,
literal|true
argument_list|,
name|transportClientRatio
argument_list|)
expr_stmt|;
block|}
DECL|method|reset
specifier|private
specifier|synchronized
name|void
name|reset
parameter_list|(
name|Random
name|random
parameter_list|,
name|boolean
name|wipeData
parameter_list|,
name|double
name|transportClientRatio
parameter_list|)
block|{
assert|assert
name|transportClientRatio
operator|>=
literal|0.0
operator|&&
name|transportClientRatio
operator|<=
literal|1.0
assert|;
name|logger
operator|.
name|debug
argument_list|(
literal|"Reset test cluster with transport client ratio: [{}]"
argument_list|,
name|transportClientRatio
argument_list|)
expr_stmt|;
name|this
operator|.
name|transportClientRatio
operator|=
name|transportClientRatio
expr_stmt|;
name|this
operator|.
name|random
operator|=
operator|new
name|Random
argument_list|(
name|random
operator|.
name|nextLong
argument_list|()
argument_list|)
expr_stmt|;
name|resetClients
argument_list|()
expr_stmt|;
comment|/* reset all clients - each test gets its own client based on the Random instance created above. */
if|if
condition|(
name|wipeData
condition|)
block|{
name|wipeDataDirectories
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|nextNodeId
operator|.
name|get
argument_list|()
operator|==
name|sharedNodesSeeds
operator|.
name|length
operator|&&
name|nodes
operator|.
name|size
argument_list|()
operator|==
name|sharedNodesSeeds
operator|.
name|length
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"Cluster hasn't changed - moving out - nodes: [{}] nextNodeId: [{}] numSharedNodes: [{}]"
argument_list|,
name|nodes
operator|.
name|keySet
argument_list|()
argument_list|,
name|nextNodeId
operator|.
name|get
argument_list|()
argument_list|,
name|sharedNodesSeeds
operator|.
name|length
argument_list|)
expr_stmt|;
return|return;
block|}
name|logger
operator|.
name|debug
argument_list|(
literal|"Cluster is NOT consistent - restarting shared nodes - nodes: [{}] nextNodeId: [{}] numSharedNodes: [{}]"
argument_list|,
name|nodes
operator|.
name|keySet
argument_list|()
argument_list|,
name|nextNodeId
operator|.
name|get
argument_list|()
argument_list|,
name|sharedNodesSeeds
operator|.
name|length
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|NodeAndClient
argument_list|>
name|sharedNodes
init|=
operator|new
name|HashSet
argument_list|<
name|NodeAndClient
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sharedNodesSeeds
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|buildNodeName
init|=
name|buildNodeName
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|NodeAndClient
name|nodeAndClient
init|=
name|nodes
operator|.
name|get
argument_list|(
name|buildNodeName
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodeAndClient
operator|==
literal|null
condition|)
block|{
name|changed
operator|=
literal|true
expr_stmt|;
name|nodeAndClient
operator|=
name|buildNode
argument_list|(
name|i
argument_list|,
name|sharedNodesSeeds
index|[
name|i
index|]
argument_list|,
literal|null
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
expr_stmt|;
name|nodeAndClient
operator|.
name|node
operator|.
name|start
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Start Shared Node [{}] not shared"
argument_list|,
name|nodeAndClient
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
name|sharedNodes
operator|.
name|add
argument_list|(
name|nodeAndClient
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|changed
operator|&&
name|sharedNodes
operator|.
name|size
argument_list|()
operator|==
name|nodes
operator|.
name|size
argument_list|()
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"Cluster is consistent - moving out - nodes: [{}] nextNodeId: [{}] numSharedNodes: [{}]"
argument_list|,
name|nodes
operator|.
name|keySet
argument_list|()
argument_list|,
name|nextNodeId
operator|.
name|get
argument_list|()
argument_list|,
name|sharedNodesSeeds
operator|.
name|length
argument_list|)
expr_stmt|;
if|if
condition|(
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareHealth
argument_list|()
operator|.
name|setWaitForNodes
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|sharedNodesSeeds
operator|.
name|length
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
return|return;
comment|// we are consistent - return
block|}
for|for
control|(
name|NodeAndClient
name|nodeAndClient
range|:
name|sharedNodes
control|)
block|{
name|nodes
operator|.
name|remove
argument_list|(
name|nodeAndClient
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
comment|// trash the remaining nodes
specifier|final
name|Collection
argument_list|<
name|NodeAndClient
argument_list|>
name|toShutDown
init|=
name|nodes
operator|.
name|values
argument_list|()
decl_stmt|;
for|for
control|(
name|NodeAndClient
name|nodeAndClient
range|:
name|toShutDown
control|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"Close Node [{}] not shared"
argument_list|,
name|nodeAndClient
operator|.
name|name
argument_list|)
expr_stmt|;
name|nodeAndClient
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|nodes
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|NodeAndClient
name|nodeAndClient
range|:
name|sharedNodes
control|)
block|{
name|publishNode
argument_list|(
name|nodeAndClient
argument_list|)
expr_stmt|;
block|}
name|nextNodeId
operator|.
name|set
argument_list|(
name|sharedNodesSeeds
operator|.
name|length
argument_list|)
expr_stmt|;
assert|assert
name|size
argument_list|()
operator|==
name|sharedNodesSeeds
operator|.
name|length
assert|;
if|if
condition|(
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareHealth
argument_list|()
operator|.
name|setWaitForNodes
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|sharedNodesSeeds
operator|.
name|length
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
name|logger
operator|.
name|debug
argument_list|(
literal|"Cluster is consistent again - nodes: [{}] nextNodeId: [{}] numSharedNodes: [{}]"
argument_list|,
name|nodes
operator|.
name|keySet
argument_list|()
argument_list|,
name|nextNodeId
operator|.
name|get
argument_list|()
argument_list|,
name|sharedNodesSeeds
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
DECL|method|wipe
specifier|public
name|void
name|wipe
parameter_list|()
block|{
name|wipeIndices
argument_list|(
literal|"_all"
argument_list|)
expr_stmt|;
name|wipeTemplates
argument_list|()
expr_stmt|;
name|wipeRepositories
argument_list|()
expr_stmt|;
block|}
comment|/**      * Deletes the given indices from the tests cluster. If no index name is passed to this method      * all indices are removed.      */
DECL|method|wipeIndices
specifier|public
name|void
name|wipeIndices
parameter_list|(
name|String
modifier|...
name|indices
parameter_list|)
block|{
assert|assert
name|indices
operator|!=
literal|null
operator|&&
name|indices
operator|.
name|length
operator|>
literal|0
assert|;
if|if
condition|(
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareDelete
argument_list|(
name|indices
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexMissingException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
catch|catch
parameter_list|(
name|ElasticsearchIllegalArgumentException
name|e
parameter_list|)
block|{
comment|// Happens if `action.destructive_requires_name` is set to true
comment|// which is the case in the CloseIndexDisableCloseAllTests
if|if
condition|(
literal|"_all"
operator|.
name|equals
argument_list|(
name|indices
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
name|ClusterStateResponse
name|clusterStateResponse
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|ObjectArrayList
argument_list|<
name|String
argument_list|>
name|concreteIndices
init|=
operator|new
name|ObjectArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|IndexMetaData
name|indexMetaData
range|:
name|clusterStateResponse
operator|.
name|getState
argument_list|()
operator|.
name|metaData
argument_list|()
control|)
block|{
name|concreteIndices
operator|.
name|add
argument_list|(
name|indexMetaData
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|concreteIndices
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareDelete
argument_list|(
name|concreteIndices
operator|.
name|toArray
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
comment|/**      * Deletes index templates, support wildcard notation.      * If no template name is passed to this method all templates are removed.      */
DECL|method|wipeTemplates
specifier|public
name|void
name|wipeTemplates
parameter_list|(
name|String
modifier|...
name|templates
parameter_list|)
block|{
if|if
condition|(
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// if nothing is provided, delete all
if|if
condition|(
name|templates
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|templates
operator|=
operator|new
name|String
index|[]
block|{
literal|"*"
block|}
expr_stmt|;
block|}
for|for
control|(
name|String
name|template
range|:
name|templates
control|)
block|{
try|try
block|{
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareDeleteTemplate
argument_list|(
name|template
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexTemplateMissingException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
block|}
comment|/**      * Deletes repositories, supports wildcard notation.      */
DECL|method|wipeRepositories
specifier|public
name|void
name|wipeRepositories
parameter_list|(
name|String
modifier|...
name|repositories
parameter_list|)
block|{
if|if
condition|(
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// if nothing is provided, delete all
if|if
condition|(
name|repositories
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|repositories
operator|=
operator|new
name|String
index|[]
block|{
literal|"*"
block|}
expr_stmt|;
block|}
for|for
control|(
name|String
name|repository
range|:
name|repositories
control|)
block|{
try|try
block|{
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareDeleteRepository
argument_list|(
name|repository
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryMissingException
name|ex
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
block|}
comment|/**      * Ensures that the breaker statistics are reset to 0 since we wiped all indices and that      * means all stats should be set to 0 otherwise something is wrong with the field data      * calculation.      */
DECL|method|ensureEstimatedStats
specifier|public
name|void
name|ensureEstimatedStats
parameter_list|()
block|{
if|if
condition|(
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|NodesStatsResponse
name|nodeStats
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareNodesStats
argument_list|()
operator|.
name|clear
argument_list|()
operator|.
name|setBreaker
argument_list|(
literal|true
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
for|for
control|(
name|NodeStats
name|stats
range|:
name|nodeStats
operator|.
name|getNodes
argument_list|()
control|)
block|{
name|assertThat
argument_list|(
literal|"Breaker not reset to 0 on node: "
operator|+
name|stats
operator|.
name|getNode
argument_list|()
argument_list|,
name|stats
operator|.
name|getBreaker
argument_list|()
operator|.
name|getEstimated
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Creates a randomized index template. This template is used to pass in randomized settings on a      * per index basis.      */
DECL|method|randomIndexTemplate
specifier|public
name|void
name|randomIndexTemplate
parameter_list|()
block|{
comment|// TODO move settings for random directory etc here into the index based randomized settings.
if|if
condition|(
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|ImmutableSettings
operator|.
name|Builder
name|builder
init|=
name|setRandomNormsLoading
argument_list|(
name|setRandomMerge
argument_list|(
name|random
argument_list|,
name|ImmutableSettings
operator|.
name|builder
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|SETTING_INDEX_SEED
argument_list|,
name|random
operator|.
name|nextLong
argument_list|()
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
name|RandomInts
operator|.
name|randomIntBetween
argument_list|(
name|random
argument_list|,
name|DEFAULT_MIN_NUM_SHARDS
argument_list|,
name|DEFAULT_MAX_NUM_SHARDS
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
name|RandomInts
operator|.
name|randomIntBetween
argument_list|(
name|random
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|preparePutTemplate
argument_list|(
literal|"random_index_template"
argument_list|)
operator|.
name|setTemplate
argument_list|(
literal|"*"
argument_list|)
operator|.
name|setOrder
argument_list|(
literal|0
argument_list|)
operator|.
name|setSettings
argument_list|(
name|builder
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|setRandomNormsLoading
specifier|private
name|ImmutableSettings
operator|.
name|Builder
name|setRandomNormsLoading
parameter_list|(
name|ImmutableSettings
operator|.
name|Builder
name|builder
parameter_list|)
block|{
if|if
condition|(
name|random
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|builder
operator|.
name|put
argument_list|(
name|SearchService
operator|.
name|NORMS_LOADING_KEY
argument_list|,
name|RandomPicks
operator|.
name|randomFrom
argument_list|(
name|random
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|FieldMapper
operator|.
name|Loading
operator|.
name|EAGER
argument_list|,
name|FieldMapper
operator|.
name|Loading
operator|.
name|LAZY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
return|;
block|}
DECL|method|setRandomMerge
specifier|private
specifier|static
name|ImmutableSettings
operator|.
name|Builder
name|setRandomMerge
parameter_list|(
name|Random
name|random
parameter_list|,
name|ImmutableSettings
operator|.
name|Builder
name|builder
parameter_list|)
block|{
if|if
condition|(
name|random
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|builder
operator|.
name|put
argument_list|(
name|AbstractMergePolicyProvider
operator|.
name|INDEX_COMPOUND_FORMAT
argument_list|,
name|random
operator|.
name|nextBoolean
argument_list|()
condition|?
name|random
operator|.
name|nextDouble
argument_list|()
else|:
name|random
operator|.
name|nextBoolean
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Class
argument_list|<
name|?
extends|extends
name|MergePolicyProvider
argument_list|<
name|?
argument_list|>
argument_list|>
name|mergePolicy
init|=
name|TieredMergePolicyProvider
operator|.
name|class
decl_stmt|;
switch|switch
condition|(
name|random
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
condition|)
block|{
case|case
literal|4
case|:
name|mergePolicy
operator|=
name|LogByteSizeMergePolicyProvider
operator|.
name|class
expr_stmt|;
break|break;
case|case
literal|3
case|:
name|mergePolicy
operator|=
name|LogDocMergePolicyProvider
operator|.
name|class
expr_stmt|;
break|break;
case|case
literal|0
case|:
name|mergePolicy
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|mergePolicy
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|put
argument_list|(
name|MergePolicyModule
operator|.
name|MERGE_POLICY_TYPE_KEY
argument_list|,
name|mergePolicy
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|random
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|builder
operator|.
name|put
argument_list|(
name|MergeSchedulerProvider
operator|.
name|FORCE_ASYNC_MERGE
argument_list|,
name|random
operator|.
name|nextBoolean
argument_list|()
argument_list|)
expr_stmt|;
block|}
switch|switch
condition|(
name|random
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
condition|)
block|{
case|case
literal|4
case|:
name|builder
operator|.
name|put
argument_list|(
name|MergeSchedulerModule
operator|.
name|MERGE_SCHEDULER_TYPE_KEY
argument_list|,
name|SerialMergeSchedulerProvider
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
literal|3
case|:
name|builder
operator|.
name|put
argument_list|(
name|MergeSchedulerModule
operator|.
name|MERGE_SCHEDULER_TYPE_KEY
argument_list|,
name|ConcurrentMergeSchedulerProvider
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
return|return
name|builder
return|;
block|}
comment|/**      * This method should be executed during tearDown      */
DECL|method|afterTest
specifier|public
specifier|synchronized
name|void
name|afterTest
parameter_list|()
block|{
name|wipeDataDirectories
argument_list|()
expr_stmt|;
name|resetClients
argument_list|()
expr_stmt|;
comment|/* reset all clients - each test gets its own client based on the Random instance created above. */
block|}
DECL|method|assertAfterTest
specifier|public
name|void
name|assertAfterTest
parameter_list|()
throws|throws
name|IOException
block|{
name|assertAllSearchersClosed
argument_list|()
expr_stmt|;
name|assertAllFilesClosed
argument_list|()
expr_stmt|;
name|ensureEstimatedStats
argument_list|()
expr_stmt|;
block|}
DECL|method|resetClients
specifier|private
name|void
name|resetClients
parameter_list|()
block|{
specifier|final
name|Collection
argument_list|<
name|NodeAndClient
argument_list|>
name|nodesAndClients
init|=
name|nodes
operator|.
name|values
argument_list|()
decl_stmt|;
for|for
control|(
name|NodeAndClient
name|nodeAndClient
range|:
name|nodesAndClients
control|)
block|{
name|nodeAndClient
operator|.
name|resetClient
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|wipeDataDirectories
specifier|private
name|void
name|wipeDataDirectories
parameter_list|()
block|{
if|if
condition|(
operator|!
name|dataDirToClean
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Wipe data directory for all nodes locations: {}"
argument_list|,
name|this
operator|.
name|dataDirToClean
argument_list|)
expr_stmt|;
try|try
block|{
name|FileSystemUtils
operator|.
name|deleteRecursively
argument_list|(
name|dataDirToClean
operator|.
name|toArray
argument_list|(
operator|new
name|File
index|[
name|dataDirToClean
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|this
operator|.
name|dataDirToClean
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Returns a reference to a random nodes {@link ClusterService}      */
DECL|method|clusterService
specifier|public
specifier|synchronized
name|ClusterService
name|clusterService
parameter_list|()
block|{
return|return
name|getInstance
argument_list|(
name|ClusterService
operator|.
name|class
argument_list|)
return|;
block|}
comment|/**      * Returns an Iterable to all instances for the given class&gt;T&lt; across all nodes in the cluster.      */
DECL|method|getInstances
specifier|public
specifier|synchronized
parameter_list|<
name|T
parameter_list|>
name|Iterable
argument_list|<
name|T
argument_list|>
name|getInstances
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|)
block|{
name|List
argument_list|<
name|T
argument_list|>
name|instances
init|=
operator|new
name|ArrayList
argument_list|<
name|T
argument_list|>
argument_list|(
name|nodes
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|NodeAndClient
name|nodeAndClient
range|:
name|nodes
operator|.
name|values
argument_list|()
control|)
block|{
name|instances
operator|.
name|add
argument_list|(
name|getInstanceFromNode
argument_list|(
name|clazz
argument_list|,
name|nodeAndClient
operator|.
name|node
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|instances
return|;
block|}
comment|/**      * Returns a reference to the given nodes instances of the given class&gt;T&lt;      */
DECL|method|getInstance
specifier|public
specifier|synchronized
parameter_list|<
name|T
parameter_list|>
name|T
name|getInstance
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|,
specifier|final
name|String
name|node
parameter_list|)
block|{
specifier|final
name|Predicate
argument_list|<
name|TestCluster
operator|.
name|NodeAndClient
argument_list|>
name|predicate
decl_stmt|;
if|if
condition|(
name|node
operator|!=
literal|null
condition|)
block|{
name|predicate
operator|=
operator|new
name|Predicate
argument_list|<
name|TestCluster
operator|.
name|NodeAndClient
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|apply
parameter_list|(
name|NodeAndClient
name|nodeAndClient
parameter_list|)
block|{
return|return
name|node
operator|.
name|equals
argument_list|(
name|nodeAndClient
operator|.
name|name
argument_list|)
return|;
block|}
block|}
expr_stmt|;
block|}
else|else
block|{
name|predicate
operator|=
name|Predicates
operator|.
name|alwaysTrue
argument_list|()
expr_stmt|;
block|}
name|NodeAndClient
name|randomNodeAndClient
init|=
name|getRandomNodeAndClient
argument_list|(
name|predicate
argument_list|)
decl_stmt|;
assert|assert
name|randomNodeAndClient
operator|!=
literal|null
assert|;
return|return
name|getInstanceFromNode
argument_list|(
name|clazz
argument_list|,
name|randomNodeAndClient
operator|.
name|node
argument_list|)
return|;
block|}
comment|/**      * Returns a reference to a random nodes instances of the given class&gt;T&lt;      */
DECL|method|getInstance
specifier|public
specifier|synchronized
parameter_list|<
name|T
parameter_list|>
name|T
name|getInstance
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|)
block|{
return|return
name|getInstance
argument_list|(
name|clazz
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|getInstanceFromNode
specifier|private
specifier|synchronized
parameter_list|<
name|T
parameter_list|>
name|T
name|getInstanceFromNode
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|,
name|InternalNode
name|node
parameter_list|)
block|{
return|return
name|node
operator|.
name|injector
argument_list|()
operator|.
name|getInstance
argument_list|(
name|clazz
argument_list|)
return|;
block|}
comment|/**      * Returns the number of nodes in the cluster.      */
DECL|method|size
specifier|public
specifier|synchronized
name|int
name|size
parameter_list|()
block|{
return|return
name|this
operator|.
name|nodes
operator|.
name|size
argument_list|()
return|;
block|}
comment|/**      * Stops a random node in the cluster.      */
DECL|method|stopRandomNode
specifier|public
specifier|synchronized
name|void
name|stopRandomNode
parameter_list|()
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
name|NodeAndClient
name|nodeAndClient
init|=
name|getRandomNodeAndClient
argument_list|()
decl_stmt|;
if|if
condition|(
name|nodeAndClient
operator|!=
literal|null
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Closing random node [{}] "
argument_list|,
name|nodeAndClient
operator|.
name|name
argument_list|)
expr_stmt|;
name|nodes
operator|.
name|remove
argument_list|(
name|nodeAndClient
operator|.
name|name
argument_list|)
expr_stmt|;
name|nodeAndClient
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Stops a random node in the cluster that applies to the given filter or non if the non of the nodes applies to the      * filter.      */
DECL|method|stopRandomNode
specifier|public
specifier|synchronized
name|void
name|stopRandomNode
parameter_list|(
specifier|final
name|Predicate
argument_list|<
name|Settings
argument_list|>
name|filter
parameter_list|)
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
name|NodeAndClient
name|nodeAndClient
init|=
name|getRandomNodeAndClient
argument_list|(
operator|new
name|Predicate
argument_list|<
name|TestCluster
operator|.
name|NodeAndClient
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|NodeAndClient
name|nodeAndClient
parameter_list|)
block|{
return|return
name|filter
operator|.
name|apply
argument_list|(
name|nodeAndClient
operator|.
name|node
operator|.
name|settings
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodeAndClient
operator|!=
literal|null
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Closing filtered random node [{}] "
argument_list|,
name|nodeAndClient
operator|.
name|name
argument_list|)
expr_stmt|;
name|nodes
operator|.
name|remove
argument_list|(
name|nodeAndClient
operator|.
name|name
argument_list|)
expr_stmt|;
name|nodeAndClient
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Stops the current master node forcefully      */
DECL|method|stopCurrentMasterNode
specifier|public
specifier|synchronized
name|void
name|stopCurrentMasterNode
parameter_list|()
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
assert|assert
name|size
argument_list|()
operator|>
literal|0
assert|;
name|String
name|masterNodeName
init|=
name|getMasterName
argument_list|()
decl_stmt|;
assert|assert
name|nodes
operator|.
name|containsKey
argument_list|(
name|masterNodeName
argument_list|)
assert|;
name|logger
operator|.
name|info
argument_list|(
literal|"Closing master node [{}] "
argument_list|,
name|masterNodeName
argument_list|)
expr_stmt|;
name|NodeAndClient
name|remove
init|=
name|nodes
operator|.
name|remove
argument_list|(
name|masterNodeName
argument_list|)
decl_stmt|;
name|remove
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**      * Stops the any of the current nodes but not the master node.      */
DECL|method|stopRandomNonMasterNode
specifier|public
name|void
name|stopRandomNonMasterNode
parameter_list|()
block|{
name|NodeAndClient
name|nodeAndClient
init|=
name|getRandomNodeAndClient
argument_list|(
name|Predicates
operator|.
name|not
argument_list|(
operator|new
name|MasterNodePredicate
argument_list|(
name|getMasterName
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodeAndClient
operator|!=
literal|null
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Closing random non master node [{}] current master [{}] "
argument_list|,
name|nodeAndClient
operator|.
name|name
argument_list|,
name|getMasterName
argument_list|()
argument_list|)
expr_stmt|;
name|nodes
operator|.
name|remove
argument_list|(
name|nodeAndClient
operator|.
name|name
argument_list|)
expr_stmt|;
name|nodeAndClient
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Restarts a random node in the cluster      */
DECL|method|restartRandomNode
specifier|public
name|void
name|restartRandomNode
parameter_list|()
throws|throws
name|Exception
block|{
name|restartRandomNode
argument_list|(
name|EMPTY_CALLBACK
argument_list|)
expr_stmt|;
block|}
comment|/**      * Restarts a random node in the cluster and calls the callback during restart.      */
DECL|method|restartRandomNode
specifier|public
name|void
name|restartRandomNode
parameter_list|(
name|RestartCallback
name|callback
parameter_list|)
throws|throws
name|Exception
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
name|NodeAndClient
name|nodeAndClient
init|=
name|getRandomNodeAndClient
argument_list|()
decl_stmt|;
if|if
condition|(
name|nodeAndClient
operator|!=
literal|null
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Restarting random node [{}] "
argument_list|,
name|nodeAndClient
operator|.
name|name
argument_list|)
expr_stmt|;
name|nodeAndClient
operator|.
name|restart
argument_list|(
name|callback
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|restartAllNodes
specifier|private
name|void
name|restartAllNodes
parameter_list|(
name|boolean
name|rollingRestart
parameter_list|,
name|RestartCallback
name|callback
parameter_list|)
throws|throws
name|Exception
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|NodeAndClient
argument_list|>
name|toRemove
init|=
operator|new
name|ArrayList
argument_list|<
name|TestCluster
operator|.
name|NodeAndClient
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
name|NodeAndClient
name|nodeAndClient
range|:
name|nodes
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|callback
operator|.
name|doRestart
argument_list|(
name|nodeAndClient
operator|.
name|name
argument_list|)
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Closing node [{}] during restart"
argument_list|,
name|nodeAndClient
operator|.
name|name
argument_list|)
expr_stmt|;
name|toRemove
operator|.
name|add
argument_list|(
name|nodeAndClient
argument_list|)
expr_stmt|;
name|nodeAndClient
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
for|for
control|(
name|NodeAndClient
name|nodeAndClient
range|:
name|toRemove
control|)
block|{
name|nodes
operator|.
name|remove
argument_list|(
name|nodeAndClient
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
block|}
name|logger
operator|.
name|info
argument_list|(
literal|"Restarting remaining nodes rollingRestart [{}]"
argument_list|,
name|rollingRestart
argument_list|)
expr_stmt|;
if|if
condition|(
name|rollingRestart
condition|)
block|{
name|int
name|numNodesRestarted
init|=
literal|0
decl_stmt|;
for|for
control|(
name|NodeAndClient
name|nodeAndClient
range|:
name|nodes
operator|.
name|values
argument_list|()
control|)
block|{
name|callback
operator|.
name|doAfterNodes
argument_list|(
name|numNodesRestarted
operator|++
argument_list|,
name|nodeAndClient
operator|.
name|nodeClient
argument_list|()
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Restarting node [{}] "
argument_list|,
name|nodeAndClient
operator|.
name|name
argument_list|)
expr_stmt|;
name|nodeAndClient
operator|.
name|restart
argument_list|(
name|callback
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|int
name|numNodesRestarted
init|=
literal|0
decl_stmt|;
for|for
control|(
name|NodeAndClient
name|nodeAndClient
range|:
name|nodes
operator|.
name|values
argument_list|()
control|)
block|{
name|callback
operator|.
name|doAfterNodes
argument_list|(
name|numNodesRestarted
operator|++
argument_list|,
name|nodeAndClient
operator|.
name|nodeClient
argument_list|()
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Stopping node [{}] "
argument_list|,
name|nodeAndClient
operator|.
name|name
argument_list|)
expr_stmt|;
name|nodeAndClient
operator|.
name|node
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|NodeAndClient
name|nodeAndClient
range|:
name|nodes
operator|.
name|values
argument_list|()
control|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Starting node [{}] "
argument_list|,
name|nodeAndClient
operator|.
name|name
argument_list|)
expr_stmt|;
name|nodeAndClient
operator|.
name|restart
argument_list|(
name|callback
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|field|EMPTY_CALLBACK
specifier|private
specifier|static
specifier|final
name|RestartCallback
name|EMPTY_CALLBACK
init|=
operator|new
name|RestartCallback
argument_list|()
block|{
specifier|public
name|Settings
name|onNodeStopped
parameter_list|(
name|String
name|node
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
comment|/**      * Restarts all nodes in the cluster. It first stops all nodes and then restarts all the nodes again.      */
DECL|method|fullRestart
specifier|public
name|void
name|fullRestart
parameter_list|()
throws|throws
name|Exception
block|{
name|fullRestart
argument_list|(
name|EMPTY_CALLBACK
argument_list|)
expr_stmt|;
block|}
comment|/**      * Restarts all nodes in a rolling restart fashion ie. only restarts on node a time.      */
DECL|method|rollingRestart
specifier|public
name|void
name|rollingRestart
parameter_list|()
throws|throws
name|Exception
block|{
name|rollingRestart
argument_list|(
name|EMPTY_CALLBACK
argument_list|)
expr_stmt|;
block|}
comment|/**      * Restarts all nodes in a rolling restart fashion ie. only restarts on node a time.      */
DECL|method|rollingRestart
specifier|public
name|void
name|rollingRestart
parameter_list|(
name|RestartCallback
name|function
parameter_list|)
throws|throws
name|Exception
block|{
name|restartAllNodes
argument_list|(
literal|true
argument_list|,
name|function
argument_list|)
expr_stmt|;
block|}
comment|/**      * Restarts all nodes in the cluster. It first stops all nodes and then restarts all the nodes again.      */
DECL|method|fullRestart
specifier|public
name|void
name|fullRestart
parameter_list|(
name|RestartCallback
name|function
parameter_list|)
throws|throws
name|Exception
block|{
name|restartAllNodes
argument_list|(
literal|false
argument_list|,
name|function
argument_list|)
expr_stmt|;
block|}
DECL|method|getMasterName
specifier|private
name|String
name|getMasterName
parameter_list|()
block|{
try|try
block|{
name|ClusterState
name|state
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
operator|.
name|getState
argument_list|()
decl_stmt|;
return|return
name|state
operator|.
name|nodes
argument_list|()
operator|.
name|masterNode
argument_list|()
operator|.
name|name
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Can't fetch cluster state"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Can't get master node "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|allButN
specifier|synchronized
name|Set
argument_list|<
name|String
argument_list|>
name|allButN
parameter_list|(
name|int
name|numNodes
parameter_list|)
block|{
return|return
name|nRandomNodes
argument_list|(
name|size
argument_list|()
operator|-
name|numNodes
argument_list|)
return|;
block|}
DECL|method|nRandomNodes
specifier|private
specifier|synchronized
name|Set
argument_list|<
name|String
argument_list|>
name|nRandomNodes
parameter_list|(
name|int
name|numNodes
parameter_list|)
block|{
assert|assert
name|size
argument_list|()
operator|>=
name|numNodes
assert|;
return|return
name|Sets
operator|.
name|newHashSet
argument_list|(
name|Iterators
operator|.
name|limit
argument_list|(
name|this
operator|.
name|nodes
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
argument_list|,
name|numNodes
argument_list|)
argument_list|)
return|;
block|}
DECL|method|startNodeClient
specifier|public
specifier|synchronized
name|void
name|startNodeClient
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
comment|// currently unused
name|startNode
argument_list|(
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
name|settings
argument_list|)
operator|.
name|put
argument_list|(
literal|"node.client"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns a set of nodes that have at least one shard of the given index.      */
DECL|method|nodesInclude
specifier|public
specifier|synchronized
name|Set
argument_list|<
name|String
argument_list|>
name|nodesInclude
parameter_list|(
name|String
name|index
parameter_list|)
block|{
if|if
condition|(
name|clusterService
argument_list|()
operator|.
name|state
argument_list|()
operator|.
name|routingTable
argument_list|()
operator|.
name|hasIndex
argument_list|(
name|index
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|ShardRouting
argument_list|>
name|allShards
init|=
name|clusterService
argument_list|()
operator|.
name|state
argument_list|()
operator|.
name|routingTable
argument_list|()
operator|.
name|allShards
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|DiscoveryNodes
name|discoveryNodes
init|=
name|clusterService
argument_list|()
operator|.
name|state
argument_list|()
operator|.
name|getNodes
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|nodes
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ShardRouting
name|shardRouting
range|:
name|allShards
control|)
block|{
if|if
condition|(
name|shardRouting
operator|.
name|assignedToNode
argument_list|()
condition|)
block|{
name|DiscoveryNode
name|discoveryNode
init|=
name|discoveryNodes
operator|.
name|get
argument_list|(
name|shardRouting
operator|.
name|currentNodeId
argument_list|()
argument_list|)
decl_stmt|;
name|nodes
operator|.
name|add
argument_list|(
name|discoveryNode
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|nodes
return|;
block|}
return|return
name|Collections
operator|.
name|emptySet
argument_list|()
return|;
block|}
comment|/**      * Starts a node with default settings and returns it's name.      */
DECL|method|startNode
specifier|public
name|String
name|startNode
parameter_list|()
block|{
return|return
name|startNode
argument_list|(
name|ImmutableSettings
operator|.
name|EMPTY
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
return|;
block|}
comment|/**      * Starts a node with default settings ad the specified version and returns it's name.      */
DECL|method|startNode
specifier|public
name|String
name|startNode
parameter_list|(
name|Version
name|version
parameter_list|)
block|{
return|return
name|startNode
argument_list|(
name|ImmutableSettings
operator|.
name|EMPTY
argument_list|,
name|version
argument_list|)
return|;
block|}
comment|/**      * Starts a node with the given settings builder and returns it's name.      */
DECL|method|startNode
specifier|public
name|String
name|startNode
parameter_list|(
name|Settings
operator|.
name|Builder
name|settings
parameter_list|)
block|{
return|return
name|startNode
argument_list|(
name|settings
operator|.
name|build
argument_list|()
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
return|;
block|}
comment|/**      * Starts a node with the given settings and returns it's name.      */
DECL|method|startNode
specifier|public
name|String
name|startNode
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
return|return
name|startNode
argument_list|(
name|settings
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
return|;
block|}
DECL|method|startNode
specifier|public
name|String
name|startNode
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|Version
name|version
parameter_list|)
block|{
name|NodeAndClient
name|buildNode
init|=
name|buildNode
argument_list|(
name|settings
argument_list|,
name|version
argument_list|)
decl_stmt|;
name|buildNode
operator|.
name|node
argument_list|()
operator|.
name|start
argument_list|()
expr_stmt|;
name|publishNode
argument_list|(
name|buildNode
argument_list|)
expr_stmt|;
return|return
name|buildNode
operator|.
name|name
return|;
block|}
DECL|method|publishNode
specifier|private
name|void
name|publishNode
parameter_list|(
name|NodeAndClient
name|nodeAndClient
parameter_list|)
block|{
assert|assert
operator|!
name|nodeAndClient
operator|.
name|node
argument_list|()
operator|.
name|isClosed
argument_list|()
assert|;
name|NodeEnvironment
name|nodeEnv
init|=
name|getInstanceFromNode
argument_list|(
name|NodeEnvironment
operator|.
name|class
argument_list|,
name|nodeAndClient
operator|.
name|node
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodeEnv
operator|.
name|hasNodeFile
argument_list|()
condition|)
block|{
name|dataDirToClean
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|nodeEnv
operator|.
name|nodeDataLocations
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|nodes
operator|.
name|put
argument_list|(
name|nodeAndClient
operator|.
name|name
argument_list|,
name|nodeAndClient
argument_list|)
expr_stmt|;
block|}
DECL|method|closeNonSharedNodes
specifier|public
name|void
name|closeNonSharedNodes
parameter_list|(
name|boolean
name|wipeData
parameter_list|)
block|{
name|reset
argument_list|(
name|random
argument_list|,
name|wipeData
argument_list|,
name|transportClientRatio
argument_list|)
expr_stmt|;
block|}
DECL|method|dataNodes
specifier|public
name|int
name|dataNodes
parameter_list|()
block|{
return|return
name|dataNodeAndClients
argument_list|()
operator|.
name|size
argument_list|()
return|;
block|}
DECL|method|dataNodeAndClients
specifier|private
name|Collection
argument_list|<
name|NodeAndClient
argument_list|>
name|dataNodeAndClients
parameter_list|()
block|{
return|return
name|Collections2
operator|.
name|filter
argument_list|(
name|nodes
operator|.
name|values
argument_list|()
argument_list|,
operator|new
name|DataNodePredicate
argument_list|()
argument_list|)
return|;
block|}
DECL|class|DataNodePredicate
specifier|private
specifier|static
specifier|final
class|class
name|DataNodePredicate
implements|implements
name|Predicate
argument_list|<
name|NodeAndClient
argument_list|>
block|{
annotation|@
name|Override
DECL|method|apply
specifier|public
name|boolean
name|apply
parameter_list|(
name|NodeAndClient
name|nodeAndClient
parameter_list|)
block|{
return|return
name|nodeAndClient
operator|.
name|node
operator|.
name|settings
argument_list|()
operator|.
name|getAsBoolean
argument_list|(
literal|"node.data"
argument_list|,
literal|true
argument_list|)
return|;
block|}
block|}
DECL|class|MasterNodePredicate
specifier|private
specifier|static
specifier|final
class|class
name|MasterNodePredicate
implements|implements
name|Predicate
argument_list|<
name|NodeAndClient
argument_list|>
block|{
DECL|field|masterNodeName
specifier|private
specifier|final
name|String
name|masterNodeName
decl_stmt|;
DECL|method|MasterNodePredicate
specifier|public
name|MasterNodePredicate
parameter_list|(
name|String
name|masterNodeName
parameter_list|)
block|{
name|this
operator|.
name|masterNodeName
operator|=
name|masterNodeName
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|apply
specifier|public
name|boolean
name|apply
parameter_list|(
name|NodeAndClient
name|nodeAndClient
parameter_list|)
block|{
return|return
name|masterNodeName
operator|.
name|equals
argument_list|(
name|nodeAndClient
operator|.
name|name
argument_list|)
return|;
block|}
block|}
DECL|class|ClientNodePredicate
specifier|private
specifier|static
specifier|final
class|class
name|ClientNodePredicate
implements|implements
name|Predicate
argument_list|<
name|NodeAndClient
argument_list|>
block|{
annotation|@
name|Override
DECL|method|apply
specifier|public
name|boolean
name|apply
parameter_list|(
name|NodeAndClient
name|nodeAndClient
parameter_list|)
block|{
return|return
name|nodeAndClient
operator|.
name|node
operator|.
name|settings
argument_list|()
operator|.
name|getAsBoolean
argument_list|(
literal|"node.client"
argument_list|,
literal|false
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|iterator
specifier|public
specifier|synchronized
name|Iterator
argument_list|<
name|Client
argument_list|>
name|iterator
parameter_list|()
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
specifier|final
name|Iterator
argument_list|<
name|NodeAndClient
argument_list|>
name|iterator
init|=
name|nodes
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
return|return
operator|new
name|Iterator
argument_list|<
name|Client
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|iterator
operator|.
name|hasNext
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Client
name|next
parameter_list|()
block|{
return|return
name|iterator
operator|.
name|next
argument_list|()
operator|.
name|client
argument_list|(
name|random
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|""
argument_list|)
throw|;
block|}
block|}
return|;
block|}
comment|/**      * Returns a predicate that only accepts settings of nodes with one of the given names.      */
DECL|method|nameFilter
specifier|public
specifier|static
name|Predicate
argument_list|<
name|Settings
argument_list|>
name|nameFilter
parameter_list|(
name|String
modifier|...
name|nodeName
parameter_list|)
block|{
return|return
operator|new
name|NodeNamePredicate
argument_list|(
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|nodeName
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
DECL|class|NodeNamePredicate
specifier|private
specifier|static
specifier|final
class|class
name|NodeNamePredicate
implements|implements
name|Predicate
argument_list|<
name|Settings
argument_list|>
block|{
DECL|field|nodeNames
specifier|private
specifier|final
name|HashSet
argument_list|<
name|String
argument_list|>
name|nodeNames
decl_stmt|;
DECL|method|NodeNamePredicate
specifier|public
name|NodeNamePredicate
parameter_list|(
name|HashSet
argument_list|<
name|String
argument_list|>
name|nodeNames
parameter_list|)
block|{
name|this
operator|.
name|nodeNames
operator|=
name|nodeNames
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|apply
specifier|public
name|boolean
name|apply
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
return|return
name|nodeNames
operator|.
name|contains
argument_list|(
name|settings
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|/**      * An abstract class that is called during {@link #rollingRestart(org.elasticsearch.test.TestCluster.RestartCallback)}      * and / or {@link #fullRestart(org.elasticsearch.test.TestCluster.RestartCallback)} to execute actions at certain      * stages of the restart.      */
DECL|class|RestartCallback
specifier|public
specifier|static
specifier|abstract
class|class
name|RestartCallback
block|{
comment|/**          * Executed once the give node name has been stopped.          */
DECL|method|onNodeStopped
specifier|public
name|Settings
name|onNodeStopped
parameter_list|(
name|String
name|nodeName
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|ImmutableSettings
operator|.
name|EMPTY
return|;
block|}
comment|/**          * Executed for each node before the<tt>n+1</tt> node is restarted. The given client is          * an active client to the node that will be restarted next.          */
DECL|method|doAfterNodes
specifier|public
name|void
name|doAfterNodes
parameter_list|(
name|int
name|n
parameter_list|,
name|Client
name|client
parameter_list|)
throws|throws
name|Exception
block|{         }
comment|/**          * If this returns<code>true</code> all data for the node with the given node name will be cleared including          * gateways and all index data. Returns<code>false</code> by default.          */
DECL|method|clearData
specifier|public
name|boolean
name|clearData
parameter_list|(
name|String
name|nodeName
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
comment|/**          * If this returns<code>false</code> the node with the given node name will not be restarted. It will be          * closed and removed from the cluster. Returns<code>true</code> by default.          */
DECL|method|doRestart
specifier|public
name|boolean
name|doRestart
parameter_list|(
name|String
name|nodeName
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
end_class

end_unit

