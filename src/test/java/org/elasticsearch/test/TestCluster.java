begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.test
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|test
package|;
end_package

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|SeedUtils
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicates
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Collections2
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterators
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|transport
operator|.
name|TransportClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|block
operator|.
name|ClusterBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|block
operator|.
name|ClusterBlockLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRouting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|FileSystemUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|ESLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|Loggers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|network
operator|.
name|NetworkUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
operator|.
name|Builder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|transport
operator|.
name|TransportAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|NodeEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|gateway
operator|.
name|Gateway
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|store
operator|.
name|mock
operator|.
name|MockFSIndexStoreModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|node
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|node
operator|.
name|internal
operator|.
name|InternalNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
operator|.
name|newTreeMap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
operator|.
name|settingsBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|node
operator|.
name|NodeBuilder
operator|.
name|nodeBuilder
import|;
end_import

begin_class
DECL|class|TestCluster
specifier|public
class|class
name|TestCluster
implements|implements
name|Closeable
implements|,
name|Iterable
argument_list|<
name|Client
argument_list|>
block|{
DECL|field|logger
specifier|protected
specifier|final
name|ESLogger
name|logger
init|=
name|Loggers
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
comment|/* sorted map to make traverse order reproducible */
DECL|field|nodes
specifier|private
specifier|final
name|TreeMap
argument_list|<
name|String
argument_list|,
name|NodeAndClient
argument_list|>
name|nodes
init|=
name|newTreeMap
argument_list|()
decl_stmt|;
DECL|field|dataDirToClean
specifier|private
specifier|final
name|Set
argument_list|<
name|File
argument_list|>
name|dataDirToClean
init|=
operator|new
name|HashSet
argument_list|<
name|File
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|clusterName
specifier|private
specifier|final
name|String
name|clusterName
decl_stmt|;
DECL|field|open
specifier|private
specifier|final
name|AtomicBoolean
name|open
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|true
argument_list|)
decl_stmt|;
DECL|field|defaultSettings
specifier|private
specifier|final
name|Settings
name|defaultSettings
decl_stmt|;
DECL|field|random
specifier|private
name|Random
name|random
decl_stmt|;
DECL|field|nextNodeId
specifier|private
name|AtomicInteger
name|nextNodeId
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|/* We have a fixed number of shared nodes that we keep around across tests */
DECL|field|numSharedNodes
specifier|private
specifier|final
name|int
name|numSharedNodes
decl_stmt|;
comment|/* Each shared node has a node seed that is used to start up the node and get default settings      * this is important if a node is randomly shut down in a test since the next test relies on a      * fully shared cluster to be more reproducible */
DECL|field|sharedNodesSeeds
specifier|private
specifier|final
name|long
index|[]
name|sharedNodesSeeds
decl_stmt|;
DECL|field|perNodeSettingsMap
specifier|private
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|Settings
argument_list|>
name|perNodeSettingsMap
decl_stmt|;
DECL|field|EMPTY
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|Settings
argument_list|>
name|EMPTY
init|=
name|Collections
operator|.
name|emptyMap
argument_list|()
decl_stmt|;
DECL|method|TestCluster
specifier|public
name|TestCluster
parameter_list|(
name|long
name|clusterSeed
parameter_list|,
name|String
name|clusterName
parameter_list|)
block|{
name|this
argument_list|(
name|clusterSeed
argument_list|,
operator|-
literal|1
argument_list|,
name|clusterName
argument_list|,
name|EMPTY
argument_list|)
expr_stmt|;
block|}
DECL|method|TestCluster
specifier|public
name|TestCluster
parameter_list|(
name|long
name|clusterSeed
parameter_list|,
name|int
name|numNodes
parameter_list|,
name|String
name|clusterName
parameter_list|,
name|Map
argument_list|<
name|Integer
argument_list|,
name|Settings
argument_list|>
name|perNodeSettings
parameter_list|)
block|{
name|this
operator|.
name|clusterName
operator|=
name|clusterName
expr_stmt|;
name|Random
name|random
init|=
operator|new
name|Random
argument_list|(
name|clusterSeed
argument_list|)
decl_stmt|;
name|numSharedNodes
operator|=
name|numNodes
operator|==
operator|-
literal|1
condition|?
literal|2
operator|+
name|random
operator|.
name|nextInt
argument_list|(
literal|4
argument_list|)
else|:
name|numNodes
expr_stmt|;
comment|// at least 2 nodes if randomized
assert|assert
name|numSharedNodes
operator|>=
literal|0
assert|;
comment|/*          *  TODO           *  - we might want start some master only nodes?          *  - we could add a flag that returns a client to the master all the time?          *  - we could add a flag that never returns a client to the master           *  - along those lines use a dedicated node that is master eligible and let all other nodes be only data nodes          */
name|sharedNodesSeeds
operator|=
operator|new
name|long
index|[
name|numSharedNodes
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sharedNodesSeeds
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|sharedNodesSeeds
index|[
name|i
index|]
operator|=
name|random
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
name|logger
operator|.
name|info
argument_list|(
literal|"Setup TestCluster [{}] with seed [{}] using [{}] nodes"
argument_list|,
name|clusterName
argument_list|,
name|SeedUtils
operator|.
name|formatSeed
argument_list|(
name|clusterSeed
argument_list|)
argument_list|,
name|numSharedNodes
argument_list|)
expr_stmt|;
name|this
operator|.
name|defaultSettings
operator|=
name|ImmutableSettings
operator|.
name|settingsBuilder
argument_list|()
comment|/* use RAM directories in 10% of the runs */
comment|//                .put("index.store.type", random.nextInt(10) == 0 ? MockRamIndexStoreModule.class.getName() : MockFSIndexStoreModule.class.getName())
operator|.
name|put
argument_list|(
literal|"index.store.type"
argument_list|,
name|MockFSIndexStoreModule
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
comment|// no RAM dir for now!
operator|.
name|put
argument_list|(
literal|"cluster.name"
argument_list|,
name|clusterName
argument_list|)
comment|// decrease the routing schedule so new nodes will be added quickly - some random value between 30 and 80 ms
operator|.
name|put
argument_list|(
literal|"cluster.routing.schedule"
argument_list|,
operator|(
literal|30
operator|+
name|random
operator|.
name|nextInt
argument_list|(
literal|50
argument_list|)
operator|)
operator|+
literal|"ms"
argument_list|)
comment|// default to non gateway
operator|.
name|put
argument_list|(
literal|"gateway.type"
argument_list|,
literal|"none"
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|this
operator|.
name|perNodeSettingsMap
operator|=
name|perNodeSettings
expr_stmt|;
block|}
DECL|method|getSettings
specifier|private
name|Settings
name|getSettings
parameter_list|(
name|int
name|nodeOrdinal
parameter_list|,
name|Settings
name|others
parameter_list|)
block|{
name|Builder
name|builder
init|=
name|ImmutableSettings
operator|.
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
name|defaultSettings
argument_list|)
decl_stmt|;
name|Settings
name|settings
init|=
name|perNodeSettingsMap
operator|.
name|get
argument_list|(
name|nodeOrdinal
argument_list|)
decl_stmt|;
if|if
condition|(
name|settings
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|put
argument_list|(
name|settings
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|others
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|put
argument_list|(
name|others
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|clusterName
specifier|public
specifier|static
name|String
name|clusterName
parameter_list|(
name|String
name|prefix
parameter_list|,
name|String
name|childVMId
parameter_list|,
name|long
name|clusterSeed
parameter_list|)
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|(
name|prefix
argument_list|)
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|'-'
argument_list|)
operator|.
name|append
argument_list|(
name|NetworkUtils
operator|.
name|getLocalAddress
argument_list|()
operator|.
name|getHostName
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"-CHILD_VM=["
argument_list|)
operator|.
name|append
argument_list|(
name|childVMId
argument_list|)
operator|.
name|append
argument_list|(
literal|']'
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"-CLUSTER_SEED=["
argument_list|)
operator|.
name|append
argument_list|(
name|clusterSeed
argument_list|)
operator|.
name|append
argument_list|(
literal|']'
argument_list|)
expr_stmt|;
comment|// if multiple maven task run on a single host we better have an identifier that doesn't rely on input params
name|builder
operator|.
name|append
argument_list|(
literal|"-HASH=["
argument_list|)
operator|.
name|append
argument_list|(
name|SeedUtils
operator|.
name|formatSeed
argument_list|(
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|']'
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|ensureOpen
specifier|private
name|void
name|ensureOpen
parameter_list|()
block|{
if|if
condition|(
operator|!
name|open
operator|.
name|get
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Cluster is already closed"
argument_list|)
throw|;
block|}
block|}
DECL|method|getOrBuildRandomNode
specifier|private
specifier|synchronized
name|Node
name|getOrBuildRandomNode
parameter_list|()
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
name|NodeAndClient
name|randomNodeAndClient
init|=
name|getRandomNodeAndClient
argument_list|()
decl_stmt|;
if|if
condition|(
name|randomNodeAndClient
operator|!=
literal|null
condition|)
block|{
return|return
name|randomNodeAndClient
operator|.
name|node
argument_list|()
return|;
block|}
name|NodeAndClient
name|buildNode
init|=
name|buildNode
argument_list|()
decl_stmt|;
name|buildNode
operator|.
name|node
argument_list|()
operator|.
name|start
argument_list|()
expr_stmt|;
name|publishNode
argument_list|(
name|buildNode
argument_list|)
expr_stmt|;
return|return
name|buildNode
operator|.
name|node
argument_list|()
return|;
block|}
DECL|method|getRandomNodeAndClient
specifier|private
specifier|synchronized
name|NodeAndClient
name|getRandomNodeAndClient
parameter_list|()
block|{
name|Predicate
argument_list|<
name|NodeAndClient
argument_list|>
name|all
init|=
name|Predicates
operator|.
name|alwaysTrue
argument_list|()
decl_stmt|;
return|return
name|getRandomNodeAndClient
argument_list|(
name|all
argument_list|)
return|;
block|}
DECL|method|getRandomNodeAndClient
specifier|private
specifier|synchronized
name|NodeAndClient
name|getRandomNodeAndClient
parameter_list|(
name|Predicate
argument_list|<
name|NodeAndClient
argument_list|>
name|predicate
parameter_list|)
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
name|Collection
argument_list|<
name|NodeAndClient
argument_list|>
name|values
init|=
name|Collections2
operator|.
name|filter
argument_list|(
name|nodes
operator|.
name|values
argument_list|()
argument_list|,
name|predicate
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|values
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|int
name|whichOne
init|=
name|random
operator|.
name|nextInt
argument_list|(
name|values
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|NodeAndClient
name|nodeAndClient
range|:
name|values
control|)
block|{
if|if
condition|(
name|whichOne
operator|--
operator|==
literal|0
condition|)
block|{
return|return
name|nodeAndClient
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|ensureAtLeastNumNodes
specifier|public
specifier|synchronized
name|void
name|ensureAtLeastNumNodes
parameter_list|(
name|int
name|num
parameter_list|)
block|{
name|int
name|size
init|=
name|nodes
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|size
init|;
name|i
operator|<
name|num
condition|;
name|i
operator|++
control|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"increasing cluster size from {} to {}"
argument_list|,
name|size
argument_list|,
name|num
argument_list|)
expr_stmt|;
name|NodeAndClient
name|buildNode
init|=
name|buildNode
argument_list|()
decl_stmt|;
name|buildNode
operator|.
name|node
argument_list|()
operator|.
name|start
argument_list|()
expr_stmt|;
name|publishNode
argument_list|(
name|buildNode
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|ensureAtMostNumNodes
specifier|public
specifier|synchronized
name|void
name|ensureAtMostNumNodes
parameter_list|(
name|int
name|num
parameter_list|)
block|{
if|if
condition|(
name|nodes
operator|.
name|size
argument_list|()
operator|<=
name|num
condition|)
block|{
return|return;
block|}
name|Collection
argument_list|<
name|NodeAndClient
argument_list|>
name|values
init|=
name|nodes
operator|.
name|values
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|NodeAndClient
argument_list|>
name|limit
init|=
name|Iterators
operator|.
name|limit
argument_list|(
name|values
operator|.
name|iterator
argument_list|()
argument_list|,
name|nodes
operator|.
name|size
argument_list|()
operator|-
name|num
argument_list|)
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"reducing cluster size from {} to {}"
argument_list|,
name|nodes
operator|.
name|size
argument_list|()
operator|-
name|num
argument_list|,
name|num
argument_list|)
expr_stmt|;
while|while
condition|(
name|limit
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|NodeAndClient
name|next
init|=
name|limit
operator|.
name|next
argument_list|()
decl_stmt|;
name|limit
operator|.
name|remove
argument_list|()
expr_stmt|;
name|next
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|buildNode
specifier|private
name|NodeAndClient
name|buildNode
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
name|int
name|ord
init|=
name|nextNodeId
operator|.
name|getAndIncrement
argument_list|()
decl_stmt|;
return|return
name|buildNode
argument_list|(
name|ord
argument_list|,
name|random
operator|.
name|nextLong
argument_list|()
argument_list|,
name|settings
argument_list|)
return|;
block|}
DECL|method|buildNode
specifier|private
name|NodeAndClient
name|buildNode
parameter_list|()
block|{
name|int
name|ord
init|=
name|nextNodeId
operator|.
name|getAndIncrement
argument_list|()
decl_stmt|;
return|return
name|buildNode
argument_list|(
name|ord
argument_list|,
name|random
operator|.
name|nextLong
argument_list|()
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|buildNode
specifier|private
name|NodeAndClient
name|buildNode
parameter_list|(
name|int
name|nodeId
parameter_list|,
name|long
name|seed
parameter_list|,
name|Settings
name|settings
parameter_list|)
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
name|settings
operator|=
name|getSettings
argument_list|(
name|nodeId
argument_list|,
name|settings
argument_list|)
expr_stmt|;
name|String
name|name
init|=
name|buildNodeName
argument_list|(
name|nodeId
argument_list|)
decl_stmt|;
assert|assert
operator|!
name|nodes
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
assert|;
name|Settings
name|finalSettings
init|=
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
name|settings
argument_list|)
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
name|name
argument_list|)
operator|.
name|put
argument_list|(
literal|"discovery.id.seed"
argument_list|,
name|seed
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Node
name|node
init|=
name|nodeBuilder
argument_list|()
operator|.
name|settings
argument_list|(
name|finalSettings
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
operator|new
name|NodeAndClient
argument_list|(
name|name
argument_list|,
name|node
argument_list|,
operator|new
name|RandomClientFactory
argument_list|()
argument_list|)
return|;
block|}
DECL|method|buildNodeName
specifier|private
name|String
name|buildNodeName
parameter_list|(
name|int
name|id
parameter_list|)
block|{
return|return
literal|"node_"
operator|+
name|id
return|;
block|}
DECL|method|client
specifier|public
specifier|synchronized
name|Client
name|client
parameter_list|()
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
comment|/* Randomly return a client to one of the nodes in the cluster */
return|return
name|getOrBuildRandomNode
argument_list|()
operator|.
name|client
argument_list|()
return|;
block|}
DECL|method|masterClient
specifier|public
specifier|synchronized
name|Client
name|masterClient
parameter_list|()
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
name|NodeAndClient
name|randomNodeAndClient
init|=
name|getRandomNodeAndClient
argument_list|(
operator|new
name|MasterNodePredicate
argument_list|(
name|getMasterName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|randomNodeAndClient
operator|!=
literal|null
condition|)
block|{
return|return
name|randomNodeAndClient
operator|.
name|client
argument_list|(
name|random
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|nonMasterClient
specifier|public
specifier|synchronized
name|Client
name|nonMasterClient
parameter_list|()
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
name|NodeAndClient
name|randomNodeAndClient
init|=
name|getRandomNodeAndClient
argument_list|(
name|Predicates
operator|.
name|not
argument_list|(
operator|new
name|MasterNodePredicate
argument_list|(
name|getMasterName
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|randomNodeAndClient
operator|!=
literal|null
condition|)
block|{
return|return
name|randomNodeAndClient
operator|.
name|client
argument_list|(
name|random
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|clientNodeClient
specifier|public
specifier|synchronized
name|Client
name|clientNodeClient
parameter_list|()
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
name|NodeAndClient
name|randomNodeAndClient
init|=
name|getRandomNodeAndClient
argument_list|(
operator|new
name|ClientNodePredicate
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|randomNodeAndClient
operator|!=
literal|null
condition|)
block|{
return|return
name|randomNodeAndClient
operator|.
name|client
argument_list|(
name|random
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|client
specifier|public
specifier|synchronized
name|Client
name|client
parameter_list|(
specifier|final
name|Predicate
argument_list|<
name|Settings
argument_list|>
name|filterPredicate
parameter_list|)
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
specifier|final
name|NodeAndClient
name|randomNodeAndClient
init|=
name|getRandomNodeAndClient
argument_list|(
operator|new
name|Predicate
argument_list|<
name|NodeAndClient
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|NodeAndClient
name|nodeAndClient
parameter_list|)
block|{
return|return
name|filterPredicate
operator|.
name|apply
argument_list|(
name|nodeAndClient
operator|.
name|node
operator|.
name|settings
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|randomNodeAndClient
operator|!=
literal|null
condition|)
block|{
return|return
name|randomNodeAndClient
operator|.
name|client
argument_list|(
name|random
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|open
operator|.
name|compareAndSet
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|IOUtils
operator|.
name|closeWhileHandlingException
argument_list|(
name|nodes
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
name|nodes
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|waitForNoBlocks
specifier|public
specifier|synchronized
name|ImmutableSet
argument_list|<
name|ClusterBlock
argument_list|>
name|waitForNoBlocks
parameter_list|(
name|TimeValue
name|timeout
parameter_list|,
name|Node
name|node
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|ImmutableSet
argument_list|<
name|ClusterBlock
argument_list|>
name|blocks
decl_stmt|;
do|do
block|{
name|blocks
operator|=
name|node
operator|.
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|setLocal
argument_list|(
literal|true
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
operator|.
name|getState
argument_list|()
operator|.
name|blocks
argument_list|()
operator|.
name|global
argument_list|(
name|ClusterBlockLevel
operator|.
name|METADATA
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
operator|!
name|blocks
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
operator|<
name|timeout
operator|.
name|millis
argument_list|()
condition|)
do|;
return|return
name|blocks
return|;
block|}
DECL|class|NodeAndClient
specifier|private
specifier|final
class|class
name|NodeAndClient
implements|implements
name|Closeable
block|{
DECL|field|node
specifier|private
specifier|final
name|InternalNode
name|node
decl_stmt|;
DECL|field|client
specifier|private
name|Client
name|client
decl_stmt|;
DECL|field|closed
specifier|private
specifier|final
name|AtomicBoolean
name|closed
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
DECL|field|clientFactory
specifier|private
specifier|final
name|ClientFactory
name|clientFactory
decl_stmt|;
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
DECL|method|NodeAndClient
name|NodeAndClient
parameter_list|(
name|String
name|name
parameter_list|,
name|Node
name|node
parameter_list|,
name|ClientFactory
name|factory
parameter_list|)
block|{
name|this
operator|.
name|node
operator|=
operator|(
name|InternalNode
operator|)
name|node
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|clientFactory
operator|=
name|factory
expr_stmt|;
block|}
DECL|method|node
name|Node
name|node
parameter_list|()
block|{
if|if
condition|(
name|closed
operator|.
name|get
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"already closed"
argument_list|)
throw|;
block|}
return|return
name|node
return|;
block|}
DECL|method|client
name|Client
name|client
parameter_list|(
name|Random
name|random
parameter_list|)
block|{
if|if
condition|(
name|closed
operator|.
name|get
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"already closed"
argument_list|)
throw|;
block|}
if|if
condition|(
name|client
operator|!=
literal|null
condition|)
block|{
return|return
name|client
return|;
block|}
return|return
name|client
operator|=
name|clientFactory
operator|.
name|client
argument_list|(
name|node
argument_list|,
name|clusterName
argument_list|,
name|random
argument_list|)
return|;
block|}
DECL|method|resetClient
name|void
name|resetClient
parameter_list|()
block|{
if|if
condition|(
name|closed
operator|.
name|get
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"already closed"
argument_list|)
throw|;
block|}
if|if
condition|(
name|client
operator|!=
literal|null
condition|)
block|{
name|client
operator|.
name|close
argument_list|()
expr_stmt|;
name|client
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
name|closed
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|client
operator|!=
literal|null
condition|)
block|{
name|client
operator|.
name|close
argument_list|()
expr_stmt|;
name|client
operator|=
literal|null
expr_stmt|;
block|}
name|node
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|ClientFactory
specifier|public
specifier|static
class|class
name|ClientFactory
block|{
DECL|method|client
specifier|public
name|Client
name|client
parameter_list|(
name|Node
name|node
parameter_list|,
name|String
name|clusterName
parameter_list|,
name|Random
name|random
parameter_list|)
block|{
return|return
name|node
operator|.
name|client
argument_list|()
return|;
block|}
block|}
DECL|class|TransportClientFactory
specifier|public
specifier|static
class|class
name|TransportClientFactory
extends|extends
name|ClientFactory
block|{
DECL|field|sniff
specifier|private
name|boolean
name|sniff
decl_stmt|;
DECL|field|NO_SNIFF_CLIENT_FACTORY
specifier|public
specifier|static
name|TransportClientFactory
name|NO_SNIFF_CLIENT_FACTORY
init|=
operator|new
name|TransportClientFactory
argument_list|(
literal|false
argument_list|)
decl_stmt|;
DECL|field|SNIFF_CLIENT_FACTORY
specifier|public
specifier|static
name|TransportClientFactory
name|SNIFF_CLIENT_FACTORY
init|=
operator|new
name|TransportClientFactory
argument_list|(
literal|true
argument_list|)
decl_stmt|;
DECL|method|TransportClientFactory
specifier|public
name|TransportClientFactory
parameter_list|(
name|boolean
name|sniff
parameter_list|)
block|{
name|this
operator|.
name|sniff
operator|=
name|sniff
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|client
specifier|public
name|Client
name|client
parameter_list|(
name|Node
name|node
parameter_list|,
name|String
name|clusterName
parameter_list|,
name|Random
name|random
parameter_list|)
block|{
name|TransportAddress
name|addr
init|=
operator|(
operator|(
name|InternalNode
operator|)
name|node
operator|)
operator|.
name|injector
argument_list|()
operator|.
name|getInstance
argument_list|(
name|TransportService
operator|.
name|class
argument_list|)
operator|.
name|boundAddress
argument_list|()
operator|.
name|publishAddress
argument_list|()
decl_stmt|;
name|TransportClient
name|client
init|=
operator|new
name|TransportClient
argument_list|(
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"client.transport.nodes_sampler_interval"
argument_list|,
literal|"30s"
argument_list|)
operator|.
name|put
argument_list|(
literal|"cluster.name"
argument_list|,
name|clusterName
argument_list|)
operator|.
name|put
argument_list|(
literal|"client.transport.sniff"
argument_list|,
name|sniff
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|client
operator|.
name|addTransportAddress
argument_list|(
name|addr
argument_list|)
expr_stmt|;
return|return
name|client
return|;
block|}
block|}
DECL|class|RandomClientFactory
specifier|public
specifier|static
class|class
name|RandomClientFactory
extends|extends
name|ClientFactory
block|{
annotation|@
name|Override
DECL|method|client
specifier|public
name|Client
name|client
parameter_list|(
name|Node
name|node
parameter_list|,
name|String
name|clusterName
parameter_list|,
name|Random
name|random
parameter_list|)
block|{
switch|switch
condition|(
name|random
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
condition|)
block|{
case|case
literal|5
case|:
return|return
name|TransportClientFactory
operator|.
name|NO_SNIFF_CLIENT_FACTORY
operator|.
name|client
argument_list|(
name|node
argument_list|,
name|clusterName
argument_list|,
name|random
argument_list|)
return|;
case|case
literal|3
case|:
return|return
name|TransportClientFactory
operator|.
name|SNIFF_CLIENT_FACTORY
operator|.
name|client
argument_list|(
name|node
argument_list|,
name|clusterName
argument_list|,
name|random
argument_list|)
return|;
default|default:
return|return
name|node
operator|.
name|client
argument_list|()
return|;
block|}
block|}
block|}
DECL|method|beforeTest
specifier|public
specifier|synchronized
name|void
name|beforeTest
parameter_list|(
name|Random
name|random
parameter_list|)
block|{
name|this
operator|.
name|random
operator|=
operator|new
name|Random
argument_list|(
name|random
operator|.
name|nextLong
argument_list|()
argument_list|)
expr_stmt|;
name|resetClients
argument_list|()
expr_stmt|;
comment|/* reset all clients - each test gets it's own client based on the Random instance created above. */
name|wipeDataDirectories
argument_list|()
expr_stmt|;
if|if
condition|(
name|nextNodeId
operator|.
name|get
argument_list|()
operator|==
name|sharedNodesSeeds
operator|.
name|length
operator|&&
name|nodes
operator|.
name|size
argument_list|()
operator|==
name|sharedNodesSeeds
operator|.
name|length
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"Cluster hasn't changed - moving out - nodes: [{}] nextNodeId: [{}] numSharedNodes: [{}]"
argument_list|,
name|nodes
operator|.
name|keySet
argument_list|()
argument_list|,
name|nextNodeId
operator|.
name|get
argument_list|()
argument_list|,
name|sharedNodesSeeds
operator|.
name|length
argument_list|)
expr_stmt|;
return|return;
block|}
name|logger
operator|.
name|debug
argument_list|(
literal|"Cluster is NOT consistent - restarting shared nodes - nodes: [{}] nextNodeId: [{}] numSharedNodes: [{}]"
argument_list|,
name|nodes
operator|.
name|keySet
argument_list|()
argument_list|,
name|nextNodeId
operator|.
name|get
argument_list|()
argument_list|,
name|sharedNodesSeeds
operator|.
name|length
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|NodeAndClient
argument_list|>
name|sharedNodes
init|=
operator|new
name|HashSet
argument_list|<
name|NodeAndClient
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sharedNodesSeeds
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|buildNodeName
init|=
name|buildNodeName
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|NodeAndClient
name|nodeAndClient
init|=
name|nodes
operator|.
name|get
argument_list|(
name|buildNodeName
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodeAndClient
operator|==
literal|null
condition|)
block|{
name|changed
operator|=
literal|true
expr_stmt|;
name|nodeAndClient
operator|=
name|buildNode
argument_list|(
name|i
argument_list|,
name|sharedNodesSeeds
index|[
name|i
index|]
argument_list|,
name|defaultSettings
argument_list|)
expr_stmt|;
name|nodeAndClient
operator|.
name|node
operator|.
name|start
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Start Shared Node [{}] not shared"
argument_list|,
name|nodeAndClient
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
name|sharedNodes
operator|.
name|add
argument_list|(
name|nodeAndClient
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|changed
operator|&&
name|sharedNodes
operator|.
name|size
argument_list|()
operator|==
name|nodes
operator|.
name|size
argument_list|()
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"Cluster is consistent - moving out - nodes: [{}] nextNodeId: [{}] numSharedNodes: [{}]"
argument_list|,
name|nodes
operator|.
name|keySet
argument_list|()
argument_list|,
name|nextNodeId
operator|.
name|get
argument_list|()
argument_list|,
name|sharedNodesSeeds
operator|.
name|length
argument_list|)
expr_stmt|;
if|if
condition|(
name|numNodes
argument_list|()
operator|>
literal|0
condition|)
block|{
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareHealth
argument_list|()
operator|.
name|setWaitForNodes
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|sharedNodesSeeds
operator|.
name|length
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
return|return;
comment|// we are consistent - return
block|}
for|for
control|(
name|NodeAndClient
name|nodeAndClient
range|:
name|sharedNodes
control|)
block|{
name|nodes
operator|.
name|remove
argument_list|(
name|nodeAndClient
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
comment|// trash the remaining nodes
specifier|final
name|Collection
argument_list|<
name|NodeAndClient
argument_list|>
name|toShutDown
init|=
name|nodes
operator|.
name|values
argument_list|()
decl_stmt|;
for|for
control|(
name|NodeAndClient
name|nodeAndClient
range|:
name|toShutDown
control|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"Close Node [{}] not shared"
argument_list|,
name|nodeAndClient
operator|.
name|name
argument_list|)
expr_stmt|;
name|nodeAndClient
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|nodes
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|NodeAndClient
name|nodeAndClient
range|:
name|sharedNodes
control|)
block|{
name|publishNode
argument_list|(
name|nodeAndClient
argument_list|)
expr_stmt|;
block|}
name|nextNodeId
operator|.
name|set
argument_list|(
name|sharedNodesSeeds
operator|.
name|length
argument_list|)
expr_stmt|;
assert|assert
name|numNodes
argument_list|()
operator|==
name|sharedNodesSeeds
operator|.
name|length
assert|;
if|if
condition|(
name|numNodes
argument_list|()
operator|>
literal|0
condition|)
block|{
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareHealth
argument_list|()
operator|.
name|setWaitForNodes
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|sharedNodesSeeds
operator|.
name|length
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
name|logger
operator|.
name|debug
argument_list|(
literal|"Cluster is consistent again - nodes: [{}] nextNodeId: [{}] numSharedNodes: [{}]"
argument_list|,
name|nodes
operator|.
name|keySet
argument_list|()
argument_list|,
name|nextNodeId
operator|.
name|get
argument_list|()
argument_list|,
name|sharedNodesSeeds
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
DECL|method|afterTest
specifier|public
specifier|synchronized
name|void
name|afterTest
parameter_list|()
block|{
name|wipeDataDirectories
argument_list|()
expr_stmt|;
block|}
DECL|method|resetClients
specifier|private
name|void
name|resetClients
parameter_list|()
block|{
specifier|final
name|Collection
argument_list|<
name|NodeAndClient
argument_list|>
name|nodesAndClients
init|=
name|nodes
operator|.
name|values
argument_list|()
decl_stmt|;
for|for
control|(
name|NodeAndClient
name|nodeAndClient
range|:
name|nodesAndClients
control|)
block|{
name|nodeAndClient
operator|.
name|resetClient
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|wipeDataDirectories
specifier|private
name|void
name|wipeDataDirectories
parameter_list|()
block|{
if|if
condition|(
operator|!
name|dataDirToClean
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Wipe data directory for all nodes locations: {}"
argument_list|,
name|this
operator|.
name|dataDirToClean
argument_list|)
expr_stmt|;
try|try
block|{
name|FileSystemUtils
operator|.
name|deleteRecursively
argument_list|(
name|dataDirToClean
operator|.
name|toArray
argument_list|(
operator|new
name|File
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|this
operator|.
name|dataDirToClean
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|clusterService
specifier|public
specifier|synchronized
name|ClusterService
name|clusterService
parameter_list|()
block|{
return|return
name|getInstance
argument_list|(
name|ClusterService
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|getInstances
specifier|public
specifier|synchronized
parameter_list|<
name|T
parameter_list|>
name|Iterable
argument_list|<
name|T
argument_list|>
name|getInstances
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|)
block|{
name|List
argument_list|<
name|T
argument_list|>
name|instances
init|=
operator|new
name|ArrayList
argument_list|<
name|T
argument_list|>
argument_list|(
name|nodes
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|NodeAndClient
name|nodeAndClient
range|:
name|nodes
operator|.
name|values
argument_list|()
control|)
block|{
name|instances
operator|.
name|add
argument_list|(
name|getInstanceFromNode
argument_list|(
name|clazz
argument_list|,
name|nodeAndClient
operator|.
name|node
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|instances
return|;
block|}
DECL|method|getInstance
specifier|public
specifier|synchronized
parameter_list|<
name|T
parameter_list|>
name|T
name|getInstance
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|,
specifier|final
name|String
name|node
parameter_list|)
block|{
specifier|final
name|Predicate
argument_list|<
name|TestCluster
operator|.
name|NodeAndClient
argument_list|>
name|predicate
decl_stmt|;
if|if
condition|(
name|node
operator|!=
literal|null
condition|)
block|{
name|predicate
operator|=
operator|new
name|Predicate
argument_list|<
name|TestCluster
operator|.
name|NodeAndClient
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|apply
parameter_list|(
name|NodeAndClient
name|nodeAndClient
parameter_list|)
block|{
return|return
name|node
operator|.
name|equals
argument_list|(
name|nodeAndClient
operator|.
name|name
argument_list|)
return|;
block|}
block|}
expr_stmt|;
block|}
else|else
block|{
name|predicate
operator|=
name|Predicates
operator|.
name|alwaysTrue
argument_list|()
expr_stmt|;
block|}
name|NodeAndClient
name|randomNodeAndClient
init|=
name|getRandomNodeAndClient
argument_list|(
name|predicate
argument_list|)
decl_stmt|;
assert|assert
name|randomNodeAndClient
operator|!=
literal|null
assert|;
return|return
name|getInstanceFromNode
argument_list|(
name|clazz
argument_list|,
name|randomNodeAndClient
operator|.
name|node
argument_list|)
return|;
block|}
DECL|method|getInstance
specifier|public
specifier|synchronized
parameter_list|<
name|T
parameter_list|>
name|T
name|getInstance
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|)
block|{
return|return
name|getInstance
argument_list|(
name|clazz
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|getInstanceFromNode
specifier|private
specifier|synchronized
parameter_list|<
name|T
parameter_list|>
name|T
name|getInstanceFromNode
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|,
name|InternalNode
name|node
parameter_list|)
block|{
return|return
name|node
operator|.
name|injector
argument_list|()
operator|.
name|getInstance
argument_list|(
name|clazz
argument_list|)
return|;
block|}
DECL|method|numNodes
specifier|public
specifier|synchronized
name|int
name|numNodes
parameter_list|()
block|{
return|return
name|this
operator|.
name|nodes
operator|.
name|size
argument_list|()
return|;
block|}
DECL|method|stopRandomNode
specifier|public
specifier|synchronized
name|void
name|stopRandomNode
parameter_list|()
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
name|NodeAndClient
name|nodeAndClient
init|=
name|getRandomNodeAndClient
argument_list|()
decl_stmt|;
if|if
condition|(
name|nodeAndClient
operator|!=
literal|null
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Closing random node [{}] "
argument_list|,
name|nodeAndClient
operator|.
name|name
argument_list|)
expr_stmt|;
name|nodes
operator|.
name|remove
argument_list|(
name|nodeAndClient
operator|.
name|name
argument_list|)
expr_stmt|;
name|nodeAndClient
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|stopRandomNode
specifier|public
specifier|synchronized
name|void
name|stopRandomNode
parameter_list|(
specifier|final
name|Predicate
argument_list|<
name|Settings
argument_list|>
name|filter
parameter_list|)
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
name|NodeAndClient
name|nodeAndClient
init|=
name|getRandomNodeAndClient
argument_list|(
operator|new
name|Predicate
argument_list|<
name|TestCluster
operator|.
name|NodeAndClient
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|NodeAndClient
name|nodeAndClient
parameter_list|)
block|{
return|return
name|filter
operator|.
name|apply
argument_list|(
name|nodeAndClient
operator|.
name|node
operator|.
name|settings
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodeAndClient
operator|!=
literal|null
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Closing filtered random node [{}] "
argument_list|,
name|nodeAndClient
operator|.
name|name
argument_list|)
expr_stmt|;
name|nodes
operator|.
name|remove
argument_list|(
name|nodeAndClient
operator|.
name|name
argument_list|)
expr_stmt|;
name|nodeAndClient
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|stopCurrentMasterNode
specifier|public
specifier|synchronized
name|void
name|stopCurrentMasterNode
parameter_list|()
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
assert|assert
name|numNodes
argument_list|()
operator|>
literal|0
assert|;
name|String
name|masterNodeName
init|=
name|getMasterName
argument_list|()
decl_stmt|;
assert|assert
name|nodes
operator|.
name|containsKey
argument_list|(
name|masterNodeName
argument_list|)
assert|;
name|logger
operator|.
name|info
argument_list|(
literal|"Closing master node [{}] "
argument_list|,
name|masterNodeName
argument_list|)
expr_stmt|;
name|NodeAndClient
name|remove
init|=
name|nodes
operator|.
name|remove
argument_list|(
name|masterNodeName
argument_list|)
decl_stmt|;
name|remove
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|stopRandomNonMasterNode
specifier|public
name|void
name|stopRandomNonMasterNode
parameter_list|()
block|{
name|NodeAndClient
name|nodeAndClient
init|=
name|getRandomNodeAndClient
argument_list|(
name|Predicates
operator|.
name|not
argument_list|(
operator|new
name|MasterNodePredicate
argument_list|(
name|getMasterName
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodeAndClient
operator|!=
literal|null
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Closing random non master node [{}] current master [{}] "
argument_list|,
name|nodeAndClient
operator|.
name|name
argument_list|,
name|getMasterName
argument_list|()
argument_list|)
expr_stmt|;
name|nodes
operator|.
name|remove
argument_list|(
name|nodeAndClient
operator|.
name|name
argument_list|)
expr_stmt|;
name|nodeAndClient
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getMasterName
specifier|private
name|String
name|getMasterName
parameter_list|()
block|{
try|try
block|{
name|ClusterState
name|state
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
operator|.
name|getState
argument_list|()
decl_stmt|;
return|return
name|state
operator|.
name|nodes
argument_list|()
operator|.
name|masterNode
argument_list|()
operator|.
name|name
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Can't fetch cluster state"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Can't get master node "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|allButN
specifier|public
specifier|synchronized
name|Set
argument_list|<
name|String
argument_list|>
name|allButN
parameter_list|(
name|int
name|numNodes
parameter_list|)
block|{
return|return
name|nRandomNodes
argument_list|(
name|numNodes
argument_list|()
operator|-
name|numNodes
argument_list|)
return|;
block|}
DECL|method|nRandomNodes
specifier|public
specifier|synchronized
name|Set
argument_list|<
name|String
argument_list|>
name|nRandomNodes
parameter_list|(
name|int
name|numNodes
parameter_list|)
block|{
assert|assert
name|numNodes
argument_list|()
operator|>=
name|numNodes
assert|;
return|return
name|Sets
operator|.
name|newHashSet
argument_list|(
name|Iterators
operator|.
name|limit
argument_list|(
name|this
operator|.
name|nodes
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
argument_list|,
name|numNodes
argument_list|)
argument_list|)
return|;
block|}
DECL|method|startNodeClient
specifier|public
specifier|synchronized
name|void
name|startNodeClient
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
comment|// currently unused
name|startNode
argument_list|(
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
name|settings
argument_list|)
operator|.
name|put
argument_list|(
literal|"node.client"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|nodesInclude
specifier|public
specifier|synchronized
name|Set
argument_list|<
name|String
argument_list|>
name|nodesInclude
parameter_list|(
name|String
name|index
parameter_list|)
block|{
if|if
condition|(
name|clusterService
argument_list|()
operator|.
name|state
argument_list|()
operator|.
name|routingTable
argument_list|()
operator|.
name|hasIndex
argument_list|(
name|index
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|ShardRouting
argument_list|>
name|allShards
init|=
name|clusterService
argument_list|()
operator|.
name|state
argument_list|()
operator|.
name|routingTable
argument_list|()
operator|.
name|allShards
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|DiscoveryNodes
name|discoveryNodes
init|=
name|clusterService
argument_list|()
operator|.
name|state
argument_list|()
operator|.
name|getNodes
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|nodes
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ShardRouting
name|shardRouting
range|:
name|allShards
control|)
block|{
if|if
condition|(
name|shardRouting
operator|.
name|assignedToNode
argument_list|()
condition|)
block|{
name|DiscoveryNode
name|discoveryNode
init|=
name|discoveryNodes
operator|.
name|get
argument_list|(
name|shardRouting
operator|.
name|currentNodeId
argument_list|()
argument_list|)
decl_stmt|;
name|nodes
operator|.
name|add
argument_list|(
name|discoveryNode
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|nodes
return|;
block|}
return|return
name|Collections
operator|.
name|emptySet
argument_list|()
return|;
block|}
DECL|method|nodeExclude
specifier|public
specifier|synchronized
name|Set
argument_list|<
name|String
argument_list|>
name|nodeExclude
parameter_list|(
name|String
name|index
parameter_list|)
block|{
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|nodesInclude
init|=
name|nodesInclude
argument_list|(
name|index
argument_list|)
decl_stmt|;
return|return
name|Sets
operator|.
name|newHashSet
argument_list|(
name|Iterators
operator|.
name|transform
argument_list|(
name|Iterators
operator|.
name|filter
argument_list|(
name|nodes
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
argument_list|,
operator|new
name|Predicate
argument_list|<
name|NodeAndClient
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|NodeAndClient
name|nodeAndClient
parameter_list|)
block|{
return|return
operator|!
name|nodesInclude
operator|.
name|contains
argument_list|(
name|nodeAndClient
operator|.
name|name
argument_list|)
return|;
block|}
block|}
argument_list|)
argument_list|,
operator|new
name|Function
argument_list|<
name|NodeAndClient
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|apply
parameter_list|(
name|NodeAndClient
name|nodeAndClient
parameter_list|)
block|{
return|return
name|nodeAndClient
operator|.
name|name
return|;
block|}
block|}
argument_list|)
argument_list|)
return|;
block|}
DECL|method|startNode
specifier|public
name|String
name|startNode
parameter_list|()
block|{
return|return
name|startNode
argument_list|(
name|ImmutableSettings
operator|.
name|EMPTY
argument_list|)
return|;
block|}
DECL|method|startNode
specifier|public
name|String
name|startNode
parameter_list|(
name|Settings
operator|.
name|Builder
name|settings
parameter_list|)
block|{
return|return
name|startNode
argument_list|(
name|settings
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
DECL|method|startNode
specifier|public
name|String
name|startNode
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
name|NodeAndClient
name|buildNode
init|=
name|buildNode
argument_list|(
name|settings
argument_list|)
decl_stmt|;
name|buildNode
operator|.
name|node
argument_list|()
operator|.
name|start
argument_list|()
expr_stmt|;
name|publishNode
argument_list|(
name|buildNode
argument_list|)
expr_stmt|;
return|return
name|buildNode
operator|.
name|name
return|;
block|}
DECL|method|publishNode
specifier|private
name|void
name|publishNode
parameter_list|(
name|NodeAndClient
name|nodeAndClient
parameter_list|)
block|{
assert|assert
operator|!
name|nodeAndClient
operator|.
name|node
argument_list|()
operator|.
name|isClosed
argument_list|()
assert|;
name|NodeEnvironment
name|nodeEnv
init|=
name|getInstanceFromNode
argument_list|(
name|NodeEnvironment
operator|.
name|class
argument_list|,
name|nodeAndClient
operator|.
name|node
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodeEnv
operator|.
name|hasNodeFile
argument_list|()
condition|)
block|{
name|dataDirToClean
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|nodeEnv
operator|.
name|nodeDataLocations
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|nodes
operator|.
name|put
argument_list|(
name|nodeAndClient
operator|.
name|name
argument_list|,
name|nodeAndClient
argument_list|)
expr_stmt|;
block|}
DECL|method|resetAllGateways
specifier|public
name|void
name|resetAllGateways
parameter_list|()
throws|throws
name|Exception
block|{
name|Collection
argument_list|<
name|NodeAndClient
argument_list|>
name|values
init|=
name|this
operator|.
name|nodes
operator|.
name|values
argument_list|()
decl_stmt|;
for|for
control|(
name|NodeAndClient
name|nodeAndClient
range|:
name|values
control|)
block|{
name|getInstanceFromNode
argument_list|(
name|Gateway
operator|.
name|class
argument_list|,
operator|(
operator|(
name|InternalNode
operator|)
name|nodeAndClient
operator|.
name|node
operator|)
argument_list|)
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|closeAllNodesAndReset
specifier|public
name|void
name|closeAllNodesAndReset
parameter_list|()
block|{
name|beforeTest
argument_list|(
name|random
argument_list|)
expr_stmt|;
block|}
DECL|class|MasterNodePredicate
specifier|private
specifier|static
specifier|final
class|class
name|MasterNodePredicate
implements|implements
name|Predicate
argument_list|<
name|NodeAndClient
argument_list|>
block|{
DECL|field|masterNodeName
specifier|private
specifier|final
name|String
name|masterNodeName
decl_stmt|;
DECL|method|MasterNodePredicate
specifier|public
name|MasterNodePredicate
parameter_list|(
name|String
name|masterNodeName
parameter_list|)
block|{
name|this
operator|.
name|masterNodeName
operator|=
name|masterNodeName
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|apply
specifier|public
name|boolean
name|apply
parameter_list|(
name|NodeAndClient
name|nodeAndClient
parameter_list|)
block|{
return|return
name|masterNodeName
operator|.
name|equals
argument_list|(
name|nodeAndClient
operator|.
name|name
argument_list|)
return|;
block|}
block|}
DECL|class|ClientNodePredicate
specifier|private
specifier|static
specifier|final
class|class
name|ClientNodePredicate
implements|implements
name|Predicate
argument_list|<
name|NodeAndClient
argument_list|>
block|{
annotation|@
name|Override
DECL|method|apply
specifier|public
name|boolean
name|apply
parameter_list|(
name|NodeAndClient
name|nodeAndClient
parameter_list|)
block|{
return|return
name|nodeAndClient
operator|.
name|node
operator|.
name|settings
argument_list|()
operator|.
name|getAsBoolean
argument_list|(
literal|"node.client"
argument_list|,
literal|false
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|iterator
specifier|public
specifier|synchronized
name|Iterator
argument_list|<
name|Client
argument_list|>
name|iterator
parameter_list|()
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
specifier|final
name|Iterator
argument_list|<
name|NodeAndClient
argument_list|>
name|iterator
init|=
name|nodes
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
return|return
operator|new
name|Iterator
argument_list|<
name|Client
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|iterator
operator|.
name|hasNext
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Client
name|next
parameter_list|()
block|{
return|return
name|iterator
operator|.
name|next
argument_list|()
operator|.
name|client
argument_list|(
name|random
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|""
argument_list|)
throw|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

