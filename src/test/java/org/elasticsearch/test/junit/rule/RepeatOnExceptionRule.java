begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.test.junit.rule
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|junit
operator|.
name|rule
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|ESLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|Description
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|model
operator|.
name|Statement
import|;
end_import

begin_comment
comment|/**  * A helper rule to catch all BindTransportExceptions  * and rerun the test for a configured number of times  *  * Note: Be aware, that when a test is repeated, the @After and @Before  * annotated methods are not run a second time  *  */
end_comment

begin_class
DECL|class|RepeatOnExceptionRule
specifier|public
class|class
name|RepeatOnExceptionRule
implements|implements
name|TestRule
block|{
DECL|field|logger
specifier|private
name|ESLogger
name|logger
decl_stmt|;
DECL|field|retryCount
specifier|private
name|int
name|retryCount
decl_stmt|;
DECL|field|expectedException
specifier|private
name|Class
name|expectedException
decl_stmt|;
comment|/**      *      * @param logger the es logger from the test class      * @param retryCount number of amounts to try a single test before failing      * @param expectedException The exception class you want to catch      *      */
DECL|method|RepeatOnExceptionRule
specifier|public
name|RepeatOnExceptionRule
parameter_list|(
name|ESLogger
name|logger
parameter_list|,
name|int
name|retryCount
parameter_list|,
name|Class
name|expectedException
parameter_list|)
block|{
name|this
operator|.
name|logger
operator|=
name|logger
expr_stmt|;
name|this
operator|.
name|retryCount
operator|=
name|retryCount
expr_stmt|;
name|this
operator|.
name|expectedException
operator|=
name|expectedException
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|apply
specifier|public
name|Statement
name|apply
parameter_list|(
specifier|final
name|Statement
name|base
parameter_list|,
name|Description
name|description
parameter_list|)
block|{
return|return
operator|new
name|Statement
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|evaluate
parameter_list|()
throws|throws
name|Throwable
block|{
name|Throwable
name|caughtThrowable
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|retryCount
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|base
operator|.
name|evaluate
argument_list|()
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|t
operator|.
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|expectedException
argument_list|)
condition|)
block|{
name|caughtThrowable
operator|=
name|t
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Exception [{}] occurred, rerunning the test after [{}] failures"
argument_list|,
name|t
argument_list|,
name|t
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|logger
operator|.
name|error
argument_list|(
literal|"Giving up after [{}] failures... marking test as failed"
argument_list|,
name|retryCount
argument_list|)
expr_stmt|;
throw|throw
name|caughtThrowable
throw|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

