begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.test
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|test
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|ESLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|ESLoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|testng
operator|.
name|ITestContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|testng
operator|.
name|ITestListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|testng
operator|.
name|ITestResult
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
DECL|class|TestNGLoggingListener
specifier|public
class|class
name|TestNGLoggingListener
implements|implements
name|ITestListener
block|{
DECL|field|logger
specifier|private
name|ESLogger
name|logger
init|=
name|ESLoggerFactory
operator|.
name|getLogger
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
DECL|method|extractTestName
specifier|private
name|String
name|extractTestName
parameter_list|(
name|ITestResult
name|result
parameter_list|)
block|{
name|String
name|testName
init|=
name|result
operator|.
name|getInstanceName
argument_list|()
decl_stmt|;
if|if
condition|(
name|testName
operator|.
name|startsWith
argument_list|(
literal|"org.elasticsearch."
argument_list|)
condition|)
block|{
name|testName
operator|=
name|testName
operator|.
name|substring
argument_list|(
literal|"org.elasticsearch."
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|testName
operator|.
name|startsWith
argument_list|(
literal|"test."
argument_list|)
condition|)
block|{
name|testName
operator|=
name|testName
operator|.
name|substring
argument_list|(
literal|"test."
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|testName
operator|+
literal|"#"
operator|+
name|result
operator|.
name|getName
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|onTestStart
specifier|public
name|void
name|onTestStart
parameter_list|(
name|ITestResult
name|result
parameter_list|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"==> Test Starting [{}]"
argument_list|,
name|extractTestName
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onTestSuccess
specifier|public
name|void
name|onTestSuccess
parameter_list|(
name|ITestResult
name|result
parameter_list|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"==> Test Success [{}]"
argument_list|,
name|extractTestName
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onTestFailure
specifier|public
name|void
name|onTestFailure
parameter_list|(
name|ITestResult
name|result
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"==> Test Success [{}]"
argument_list|,
name|extractTestName
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onTestSkipped
specifier|public
name|void
name|onTestSkipped
parameter_list|(
name|ITestResult
name|result
parameter_list|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"==> Test Skipped [{}]"
argument_list|,
name|extractTestName
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onTestFailedButWithinSuccessPercentage
specifier|public
name|void
name|onTestFailedButWithinSuccessPercentage
parameter_list|(
name|ITestResult
name|result
parameter_list|)
block|{     }
annotation|@
name|Override
DECL|method|onStart
specifier|public
name|void
name|onStart
parameter_list|(
name|ITestContext
name|context
parameter_list|)
block|{     }
annotation|@
name|Override
DECL|method|onFinish
specifier|public
name|void
name|onFinish
parameter_list|(
name|ITestContext
name|context
parameter_list|)
block|{     }
block|}
end_class

end_unit

