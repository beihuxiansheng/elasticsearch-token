begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.test
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|test
package|;
end_package

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|RandomizedTest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|annotations
operator|.
name|Listeners
import|;
end_import

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|annotations
operator|.
name|ThreadLeakLingering
import|;
end_import

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|annotations
operator|.
name|ThreadLeakScope
import|;
end_import

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|annotations
operator|.
name|ThreadLeakScope
operator|.
name|Scope
import|;
end_import

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|annotations
operator|.
name|TimeoutSuite
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|Codec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
operator|.
name|SuppressFileSystems
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TimeUnits
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|junit
operator|.
name|listeners
operator|.
name|LoggingListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|junit
operator|.
name|listeners
operator|.
name|ReproduceInfoPrinter
import|;
end_import

begin_comment
comment|/**  * Base testcase for lucene based testing. This class should be used if low level lucene features are tested.  */
end_comment

begin_class
annotation|@
name|Listeners
argument_list|(
block|{
name|ReproduceInfoPrinter
operator|.
name|class
block|,
name|LoggingListener
operator|.
name|class
block|}
argument_list|)
annotation|@
name|ThreadLeakScope
argument_list|(
name|Scope
operator|.
name|SUITE
argument_list|)
annotation|@
name|ThreadLeakLingering
argument_list|(
name|linger
operator|=
literal|5000
argument_list|)
comment|// 5 sec lingering
annotation|@
name|TimeoutSuite
argument_list|(
name|millis
operator|=
name|TimeUnits
operator|.
name|HOUR
argument_list|)
annotation|@
name|LuceneTestCase
operator|.
name|SuppressSysoutChecks
argument_list|(
name|bugUrl
operator|=
literal|"we log a lot on purpose"
argument_list|)
annotation|@
name|SuppressFileSystems
argument_list|(
literal|"ExtrasFS"
argument_list|)
comment|// we aren't ready for this yet.
DECL|class|ElasticsearchLuceneTestCase
specifier|public
specifier|abstract
class|class
name|ElasticsearchLuceneTestCase
extends|extends
name|LuceneTestCase
block|{
DECL|field|DEFAULT_CODEC
specifier|private
specifier|static
specifier|final
name|Codec
name|DEFAULT_CODEC
init|=
name|Codec
operator|.
name|getDefault
argument_list|()
decl_stmt|;
comment|/**      * Returns the lucene default codec without any randomization      */
DECL|method|actualDefaultCodec
specifier|public
specifier|static
name|Codec
name|actualDefaultCodec
parameter_list|()
block|{
return|return
name|DEFAULT_CODEC
return|;
block|}
comment|/**      * Forcefully reset the default codec      */
DECL|method|forceDefaultCodec
specifier|public
specifier|static
name|void
name|forceDefaultCodec
parameter_list|()
block|{
name|Codec
operator|.
name|setDefault
argument_list|(
name|DEFAULT_CODEC
argument_list|)
expr_stmt|;
block|}
DECL|method|scaledRandomIntBetween
specifier|public
specifier|static
name|int
name|scaledRandomIntBetween
parameter_list|(
name|int
name|min
parameter_list|,
name|int
name|max
parameter_list|)
block|{
return|return
name|RandomizedTest
operator|.
name|scaledRandomIntBetween
argument_list|(
name|min
argument_list|,
name|max
argument_list|)
return|;
block|}
block|}
end_class

end_unit

