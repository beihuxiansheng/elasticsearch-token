begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.test.unit.index.store.memory
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|unit
operator|.
name|index
operator|.
name|store
operator|.
name|memory
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|bytebuffer
operator|.
name|ByteBufferDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cache
operator|.
name|memory
operator|.
name|ByteBufferCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|MatcherAssert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|SimpleByteBufferStoreTests
specifier|public
class|class
name|SimpleByteBufferStoreTests
block|{
annotation|@
name|Test
DECL|method|test1BufferNoCache
specifier|public
name|void
name|test1BufferNoCache
parameter_list|()
throws|throws
name|Exception
block|{
name|ByteBufferCache
name|cache
init|=
operator|new
name|ByteBufferCache
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|ByteBufferDirectory
name|dir
init|=
operator|new
name|ByteBufferDirectory
argument_list|(
name|cache
argument_list|)
decl_stmt|;
name|insertData
argument_list|(
name|dir
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|verifyData
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
name|cache
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|test1Buffer
specifier|public
name|void
name|test1Buffer
parameter_list|()
throws|throws
name|Exception
block|{
name|ByteBufferCache
name|cache
init|=
operator|new
name|ByteBufferCache
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|ByteBufferDirectory
name|dir
init|=
operator|new
name|ByteBufferDirectory
argument_list|(
name|cache
argument_list|)
decl_stmt|;
name|insertData
argument_list|(
name|dir
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|verifyData
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
name|cache
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|test3Buffer
specifier|public
name|void
name|test3Buffer
parameter_list|()
throws|throws
name|Exception
block|{
name|ByteBufferCache
name|cache
init|=
operator|new
name|ByteBufferCache
argument_list|(
literal|3
argument_list|,
literal|10
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|ByteBufferDirectory
name|dir
init|=
operator|new
name|ByteBufferDirectory
argument_list|(
name|cache
argument_list|)
decl_stmt|;
name|insertData
argument_list|(
name|dir
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|verifyData
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
name|cache
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|test10Buffer
specifier|public
name|void
name|test10Buffer
parameter_list|()
throws|throws
name|Exception
block|{
name|ByteBufferCache
name|cache
init|=
operator|new
name|ByteBufferCache
argument_list|(
literal|10
argument_list|,
literal|20
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|ByteBufferDirectory
name|dir
init|=
operator|new
name|ByteBufferDirectory
argument_list|(
name|cache
argument_list|)
decl_stmt|;
name|insertData
argument_list|(
name|dir
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|verifyData
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
name|cache
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|test15Buffer
specifier|public
name|void
name|test15Buffer
parameter_list|()
throws|throws
name|Exception
block|{
name|ByteBufferCache
name|cache
init|=
operator|new
name|ByteBufferCache
argument_list|(
literal|15
argument_list|,
literal|30
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|ByteBufferDirectory
name|dir
init|=
operator|new
name|ByteBufferDirectory
argument_list|(
name|cache
argument_list|)
decl_stmt|;
name|insertData
argument_list|(
name|dir
argument_list|,
literal|15
argument_list|)
expr_stmt|;
name|verifyData
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
name|cache
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|test40Buffer
specifier|public
name|void
name|test40Buffer
parameter_list|()
throws|throws
name|Exception
block|{
name|ByteBufferCache
name|cache
init|=
operator|new
name|ByteBufferCache
argument_list|(
literal|40
argument_list|,
literal|80
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|ByteBufferDirectory
name|dir
init|=
operator|new
name|ByteBufferDirectory
argument_list|(
name|cache
argument_list|)
decl_stmt|;
name|insertData
argument_list|(
name|dir
argument_list|,
literal|40
argument_list|)
expr_stmt|;
name|verifyData
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
name|cache
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSimpleLocking
specifier|public
name|void
name|testSimpleLocking
parameter_list|()
throws|throws
name|Exception
block|{
name|ByteBufferCache
name|cache
init|=
operator|new
name|ByteBufferCache
argument_list|(
literal|40
argument_list|,
literal|80
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|ByteBufferDirectory
name|dir
init|=
operator|new
name|ByteBufferDirectory
argument_list|(
name|cache
argument_list|)
decl_stmt|;
name|Lock
name|lock
init|=
name|dir
operator|.
name|makeLock
argument_list|(
literal|"testlock"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|lock
operator|.
name|isLocked
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|lock
operator|.
name|obtain
argument_list|(
literal|200
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|lock
operator|.
name|isLocked
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|assertThat
argument_list|(
name|lock
operator|.
name|obtain
argument_list|(
literal|200
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"lock should be thrown"
argument_list|,
literal|false
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LockObtainFailedException
name|e
parameter_list|)
block|{
comment|// all is well
block|}
name|lock
operator|.
name|release
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|lock
operator|.
name|isLocked
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
name|cache
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|insertData
specifier|private
name|void
name|insertData
parameter_list|(
name|ByteBufferDirectory
name|dir
parameter_list|,
name|int
name|bufferSizeInBytes
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|test
init|=
operator|new
name|byte
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|4
block|,
literal|5
block|,
literal|6
block|,
literal|7
block|,
literal|8
block|}
decl_stmt|;
name|IndexOutput
name|indexOutput
init|=
name|dir
operator|.
name|createOutput
argument_list|(
literal|"value1"
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
name|indexOutput
operator|.
name|writeBytes
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|2
block|,
literal|4
block|,
literal|6
block|,
literal|7
block|,
literal|8
block|}
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|indexOutput
operator|.
name|writeInt
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|indexOutput
operator|.
name|writeLong
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|indexOutput
operator|.
name|writeInt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|indexOutput
operator|.
name|writeInt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|indexOutput
operator|.
name|writeBytes
argument_list|(
name|test
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|indexOutput
operator|.
name|writeBytes
argument_list|(
name|test
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|indexOutput
operator|.
name|seek
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|indexOutput
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
literal|8
argument_list|)
expr_stmt|;
if|if
condition|(
name|bufferSizeInBytes
operator|>
literal|4
condition|)
block|{
name|indexOutput
operator|.
name|seek
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|indexOutput
operator|.
name|writeBytes
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|1
block|,
literal|2
block|}
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
name|indexOutput
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|verifyData
specifier|private
name|void
name|verifyData
parameter_list|(
name|ByteBufferDirectory
name|dir
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|test
init|=
operator|new
name|byte
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|4
block|,
literal|5
block|,
literal|6
block|,
literal|7
block|,
literal|8
block|}
decl_stmt|;
name|assertThat
argument_list|(
name|dir
operator|.
name|fileExists
argument_list|(
literal|"value1"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|dir
operator|.
name|fileLength
argument_list|(
literal|"value1"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|38l
argument_list|)
argument_list|)
expr_stmt|;
name|IndexInput
name|indexInput
init|=
name|dir
operator|.
name|openInput
argument_list|(
literal|"value1"
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
name|indexInput
operator|.
name|readBytes
argument_list|(
name|test
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|test
index|[
literal|0
index|]
argument_list|,
name|equalTo
argument_list|(
operator|(
name|byte
operator|)
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|indexInput
operator|.
name|readInt
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|indexInput
operator|.
name|readLong
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|(
name|long
operator|)
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|indexInput
operator|.
name|readInt
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|indexInput
operator|.
name|readInt
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|indexInput
operator|.
name|readBytes
argument_list|(
name|test
argument_list|,
literal|0
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|test
index|[
literal|0
index|]
argument_list|,
name|equalTo
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|test
index|[
literal|7
index|]
argument_list|,
name|equalTo
argument_list|(
operator|(
name|byte
operator|)
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|indexInput
operator|.
name|readBytes
argument_list|(
name|test
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|test
index|[
literal|0
index|]
argument_list|,
name|equalTo
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|test
index|[
literal|4
index|]
argument_list|,
name|equalTo
argument_list|(
operator|(
name|byte
operator|)
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|indexInput
operator|.
name|seek
argument_list|(
literal|28
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|indexInput
operator|.
name|readByte
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|(
name|byte
operator|)
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|indexInput
operator|.
name|seek
argument_list|(
literal|30
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|indexInput
operator|.
name|readByte
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|(
name|byte
operator|)
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|indexInput
operator|.
name|seek
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|indexInput
operator|.
name|readBytes
argument_list|(
name|test
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|test
index|[
literal|0
index|]
argument_list|,
name|equalTo
argument_list|(
operator|(
name|byte
operator|)
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|indexInput
operator|.
name|close
argument_list|()
expr_stmt|;
name|indexInput
operator|=
name|dir
operator|.
name|openInput
argument_list|(
literal|"value1"
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
comment|// iterate over all the data
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|38
condition|;
name|i
operator|++
control|)
block|{
name|indexInput
operator|.
name|readByte
argument_list|()
expr_stmt|;
block|}
name|indexInput
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

