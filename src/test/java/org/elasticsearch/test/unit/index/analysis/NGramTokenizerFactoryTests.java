begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.test.unit.index.analysis
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|unit
operator|.
name|index
operator|.
name|analysis
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticSearchIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|EdgeNGramTokenizerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|NGramTokenizerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|testng
operator|.
name|annotations
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|testng
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_class
DECL|class|NGramTokenizerFactoryTests
specifier|public
class|class
name|NGramTokenizerFactoryTests
block|{
annotation|@
name|Test
DECL|method|testParseTokenChars
specifier|public
name|void
name|testParseTokenChars
parameter_list|()
block|{
specifier|final
name|Index
name|index
init|=
operator|new
name|Index
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|name
init|=
literal|"ngr"
decl_stmt|;
specifier|final
name|Settings
name|indexSettings
init|=
name|ImmutableSettings
operator|.
name|EMPTY
decl_stmt|;
for|for
control|(
name|String
name|tokenChars
range|:
name|Arrays
operator|.
name|asList
argument_list|(
literal|"letters"
argument_list|,
literal|"number"
argument_list|,
literal|"DIRECTIONALITY_UNDEFINED"
argument_list|)
control|)
block|{
specifier|final
name|Settings
name|settings
init|=
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"min_gram"
argument_list|,
literal|2
argument_list|)
operator|.
name|put
argument_list|(
literal|"max_gram"
argument_list|,
literal|3
argument_list|)
operator|.
name|put
argument_list|(
literal|"token_chars"
argument_list|,
name|tokenChars
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
operator|new
name|NGramTokenizerFactory
argument_list|(
name|index
argument_list|,
name|indexSettings
argument_list|,
name|name
argument_list|,
name|settings
argument_list|)
operator|.
name|create
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ElasticSearchIllegalArgumentException
name|expected
parameter_list|)
block|{
comment|// OK
block|}
block|}
for|for
control|(
name|String
name|tokenChars
range|:
name|Arrays
operator|.
name|asList
argument_list|(
literal|"letter"
argument_list|,
literal|" digit "
argument_list|,
literal|"punctuation"
argument_list|,
literal|"DIGIT"
argument_list|,
literal|"CoNtRoL"
argument_list|,
literal|"dash_punctuation"
argument_list|)
control|)
block|{
specifier|final
name|Settings
name|settings
init|=
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"min_gram"
argument_list|,
literal|2
argument_list|)
operator|.
name|put
argument_list|(
literal|"max_gram"
argument_list|,
literal|3
argument_list|)
operator|.
name|put
argument_list|(
literal|"token_chars"
argument_list|,
name|tokenChars
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
operator|new
name|NGramTokenizerFactory
argument_list|(
name|index
argument_list|,
name|indexSettings
argument_list|,
name|name
argument_list|,
name|settings
argument_list|)
operator|.
name|create
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
comment|// no exception
block|}
block|}
annotation|@
name|Test
DECL|method|testPreTokenization
specifier|public
name|void
name|testPreTokenization
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Make sure that pretokenization works well and that it can be used even with token chars which are supplementary characters
specifier|final
name|Index
name|index
init|=
operator|new
name|Index
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|name
init|=
literal|"ngr"
decl_stmt|;
specifier|final
name|Settings
name|indexSettings
init|=
name|ImmutableSettings
operator|.
name|EMPTY
decl_stmt|;
name|Settings
name|settings
init|=
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"min_gram"
argument_list|,
literal|2
argument_list|)
operator|.
name|put
argument_list|(
literal|"max_gram"
argument_list|,
literal|3
argument_list|)
operator|.
name|put
argument_list|(
literal|"token_chars"
argument_list|,
literal|"letter,digit"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|AnalysisTestsHelper
operator|.
name|assertSimpleTSOutput
argument_list|(
operator|new
name|NGramTokenizerFactory
argument_list|(
name|index
argument_list|,
name|indexSettings
argument_list|,
name|name
argument_list|,
name|settings
argument_list|)
operator|.
name|create
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"Ãbc dÃ©f g\uD801\uDC00f "
argument_list|)
argument_list|)
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Ãb"
block|,
literal|"Ãbc"
block|,
literal|"bc"
block|,
literal|"dÃ©"
block|,
literal|"dÃ©f"
block|,
literal|"Ã©f"
block|,
literal|"g\uD801\uDC00"
block|,
literal|"g\uD801\uDC00f"
block|,
literal|"\uD801\uDC00f"
block|}
argument_list|)
expr_stmt|;
name|settings
operator|=
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"min_gram"
argument_list|,
literal|2
argument_list|)
operator|.
name|put
argument_list|(
literal|"max_gram"
argument_list|,
literal|3
argument_list|)
operator|.
name|put
argument_list|(
literal|"token_chars"
argument_list|,
literal|"letter,digit,punctuation,whitespace,symbol"
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|AnalysisTestsHelper
operator|.
name|assertSimpleTSOutput
argument_list|(
operator|new
name|NGramTokenizerFactory
argument_list|(
name|index
argument_list|,
name|indexSettings
argument_list|,
name|name
argument_list|,
name|settings
argument_list|)
operator|.
name|create
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|" a!$ 9"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|String
index|[]
block|{
literal|" a"
block|,
literal|" a!"
block|,
literal|"a!"
block|,
literal|"a!$"
block|,
literal|"!$"
block|,
literal|"!$ "
block|,
literal|"$ "
block|,
literal|"$ 9"
block|,
literal|" 9"
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPreTokenizationEdge
specifier|public
name|void
name|testPreTokenizationEdge
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Make sure that pretokenization works well and that it can be used even with token chars which are supplementary characters
specifier|final
name|Index
name|index
init|=
operator|new
name|Index
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|name
init|=
literal|"ngr"
decl_stmt|;
specifier|final
name|Settings
name|indexSettings
init|=
name|ImmutableSettings
operator|.
name|EMPTY
decl_stmt|;
name|Settings
name|settings
init|=
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"min_gram"
argument_list|,
literal|2
argument_list|)
operator|.
name|put
argument_list|(
literal|"max_gram"
argument_list|,
literal|3
argument_list|)
operator|.
name|put
argument_list|(
literal|"token_chars"
argument_list|,
literal|"letter,digit"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|AnalysisTestsHelper
operator|.
name|assertSimpleTSOutput
argument_list|(
operator|new
name|EdgeNGramTokenizerFactory
argument_list|(
name|index
argument_list|,
name|indexSettings
argument_list|,
name|name
argument_list|,
name|settings
argument_list|)
operator|.
name|create
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"Ãbc dÃ©f g\uD801\uDC00f "
argument_list|)
argument_list|)
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Ãb"
block|,
literal|"Ãbc"
block|,
literal|"dÃ©"
block|,
literal|"dÃ©f"
block|,
literal|"g\uD801\uDC00"
block|,
literal|"g\uD801\uDC00f"
block|}
argument_list|)
expr_stmt|;
name|settings
operator|=
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"min_gram"
argument_list|,
literal|2
argument_list|)
operator|.
name|put
argument_list|(
literal|"max_gram"
argument_list|,
literal|3
argument_list|)
operator|.
name|put
argument_list|(
literal|"token_chars"
argument_list|,
literal|"letter,digit,punctuation,whitespace,symbol"
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|AnalysisTestsHelper
operator|.
name|assertSimpleTSOutput
argument_list|(
operator|new
name|EdgeNGramTokenizerFactory
argument_list|(
name|index
argument_list|,
name|indexSettings
argument_list|,
name|name
argument_list|,
name|settings
argument_list|)
operator|.
name|create
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|" a!$ 9"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|String
index|[]
block|{
literal|" a"
block|,
literal|" a!"
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

