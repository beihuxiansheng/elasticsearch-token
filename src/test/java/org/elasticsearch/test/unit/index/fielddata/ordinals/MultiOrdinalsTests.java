begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.test.unit.index.fielddata.ordinals
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|unit
operator|.
name|index
operator|.
name|fielddata
operator|.
name|ordinals
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|MatcherAssert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IntsRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|ordinals
operator|.
name|Ordinals
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|ordinals
operator|.
name|OrdinalsBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|testng
operator|.
name|annotations
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
DECL|class|MultiOrdinalsTests
specifier|public
specifier|abstract
class|class
name|MultiOrdinalsTests
block|{
DECL|method|creationMultiOrdinals
specifier|protected
specifier|final
name|Ordinals
name|creationMultiOrdinals
parameter_list|(
name|OrdinalsBuilder
name|builder
parameter_list|)
block|{
return|return
name|this
operator|.
name|creationMultiOrdinals
argument_list|(
name|builder
argument_list|,
name|ImmutableSettings
operator|.
name|builder
argument_list|()
argument_list|)
return|;
block|}
DECL|method|creationMultiOrdinals
specifier|protected
specifier|abstract
name|Ordinals
name|creationMultiOrdinals
parameter_list|(
name|OrdinalsBuilder
name|builder
parameter_list|,
name|ImmutableSettings
operator|.
name|Builder
name|settings
parameter_list|)
function_decl|;
annotation|@
name|Test
DECL|method|testRandomValues
specifier|public
name|void
name|testRandomValues
parameter_list|()
block|{
name|Random
name|random
init|=
operator|new
name|Random
argument_list|(
literal|100
argument_list|)
decl_stmt|;
name|int
name|numDocs
init|=
literal|100
operator|+
name|random
operator|.
name|nextInt
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
name|int
name|numOrdinals
init|=
literal|1
operator|+
name|random
operator|.
name|nextInt
argument_list|(
literal|200
argument_list|)
decl_stmt|;
name|int
name|numValues
init|=
literal|100
operator|+
name|random
operator|.
name|nextInt
argument_list|(
literal|100000
argument_list|)
decl_stmt|;
name|OrdinalsBuilder
name|builder
init|=
operator|new
name|OrdinalsBuilder
argument_list|(
name|numDocs
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|OrdAndId
argument_list|>
name|ordsAndIdSet
init|=
operator|new
name|HashSet
argument_list|<
name|OrdAndId
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numValues
condition|;
name|i
operator|++
control|)
block|{
name|ordsAndIdSet
operator|.
name|add
argument_list|(
operator|new
name|OrdAndId
argument_list|(
literal|1
operator|+
name|random
operator|.
name|nextInt
argument_list|(
name|numOrdinals
argument_list|)
argument_list|,
name|random
operator|.
name|nextInt
argument_list|(
name|numDocs
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|OrdAndId
argument_list|>
name|ordsAndIds
init|=
operator|new
name|ArrayList
argument_list|<
name|OrdAndId
argument_list|>
argument_list|(
name|ordsAndIdSet
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|ordsAndIds
argument_list|,
operator|new
name|Comparator
argument_list|<
name|OrdAndId
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|OrdAndId
name|o1
parameter_list|,
name|OrdAndId
name|o2
parameter_list|)
block|{
if|if
condition|(
name|o1
operator|.
name|ord
operator|<
name|o2
operator|.
name|ord
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
if|if
condition|(
name|o1
operator|.
name|ord
operator|==
name|o2
operator|.
name|ord
condition|)
block|{
if|if
condition|(
name|o1
operator|.
name|id
operator|<
name|o2
operator|.
name|id
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
if|if
condition|(
name|o1
operator|.
name|id
operator|>
name|o2
operator|.
name|id
condition|)
block|{
return|return
literal|1
return|;
block|}
return|return
literal|0
return|;
block|}
return|return
literal|1
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|int
name|lastOrd
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|OrdAndId
name|ordAndId
range|:
name|ordsAndIds
control|)
block|{
if|if
condition|(
name|lastOrd
operator|!=
name|ordAndId
operator|.
name|ord
condition|)
block|{
name|lastOrd
operator|=
name|ordAndId
operator|.
name|ord
expr_stmt|;
name|builder
operator|.
name|nextOrdinal
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|addDoc
argument_list|(
name|ordAndId
operator|.
name|id
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|ordsAndIds
argument_list|,
operator|new
name|Comparator
argument_list|<
name|OrdAndId
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|OrdAndId
name|o1
parameter_list|,
name|OrdAndId
name|o2
parameter_list|)
block|{
if|if
condition|(
name|o1
operator|.
name|id
operator|<
name|o2
operator|.
name|id
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
if|if
condition|(
name|o1
operator|.
name|id
operator|==
name|o2
operator|.
name|id
condition|)
block|{
if|if
condition|(
name|o1
operator|.
name|ord
operator|<
name|o2
operator|.
name|ord
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
if|if
condition|(
name|o1
operator|.
name|ord
operator|>
name|o2
operator|.
name|ord
condition|)
block|{
return|return
literal|1
return|;
block|}
return|return
literal|0
return|;
block|}
return|return
literal|1
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|Ordinals
name|ords
init|=
name|creationMultiOrdinals
argument_list|(
name|builder
argument_list|)
decl_stmt|;
name|Ordinals
operator|.
name|Docs
name|docs
init|=
name|ords
operator|.
name|ordinals
argument_list|()
decl_stmt|;
name|int
name|docId
init|=
name|ordsAndIds
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|id
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|docOrds
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|OrdAndId
name|ordAndId
range|:
name|ordsAndIds
control|)
block|{
if|if
condition|(
name|docId
operator|==
name|ordAndId
operator|.
name|id
condition|)
block|{
name|docOrds
operator|.
name|add
argument_list|(
name|ordAndId
operator|.
name|ord
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|docOrds
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|assertThat
argument_list|(
name|docs
operator|.
name|getOrd
argument_list|(
name|docId
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|docOrds
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|IntsRef
name|ref
init|=
name|docs
operator|.
name|getOrds
argument_list|(
name|docId
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|ref
operator|.
name|offset
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|ref
operator|.
name|offset
init|;
name|i
operator|<
name|ref
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertThat
argument_list|(
name|ref
operator|.
name|ints
index|[
name|i
index|]
argument_list|,
name|equalTo
argument_list|(
name|docOrds
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|int
index|[]
name|array
init|=
operator|new
name|int
index|[
name|docOrds
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|array
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|array
index|[
name|i
index|]
operator|=
name|docOrds
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|assertIter
argument_list|(
name|docs
operator|.
name|getIter
argument_list|(
name|docId
argument_list|)
argument_list|,
name|array
argument_list|)
expr_stmt|;
name|docs
operator|.
name|forEachOrdinalInDoc
argument_list|(
name|docId
argument_list|,
name|assertOrdinalInProcDoc
argument_list|(
name|array
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
name|docId
operator|+
literal|1
init|;
name|i
operator|<
name|ordAndId
operator|.
name|id
condition|;
name|i
operator|++
control|)
block|{
name|assertThat
argument_list|(
name|docs
operator|.
name|getOrd
argument_list|(
name|i
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|docId
operator|=
name|ordAndId
operator|.
name|id
expr_stmt|;
name|docOrds
operator|.
name|clear
argument_list|()
expr_stmt|;
name|docOrds
operator|.
name|add
argument_list|(
name|ordAndId
operator|.
name|ord
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|OrdAndId
specifier|public
specifier|static
class|class
name|OrdAndId
block|{
DECL|field|ord
specifier|final
name|int
name|ord
decl_stmt|;
DECL|field|id
specifier|final
name|int
name|id
decl_stmt|;
DECL|method|OrdAndId
specifier|public
name|OrdAndId
parameter_list|(
name|int
name|ord
parameter_list|,
name|int
name|id
parameter_list|)
block|{
name|this
operator|.
name|ord
operator|=
name|ord
expr_stmt|;
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
specifier|final
name|int
name|prime
init|=
literal|31
decl_stmt|;
name|int
name|result
init|=
literal|1
decl_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
name|id
expr_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
name|ord
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|getClass
argument_list|()
operator|!=
name|obj
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|OrdAndId
name|other
init|=
operator|(
name|OrdAndId
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|id
operator|!=
name|other
operator|.
name|id
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|ord
operator|!=
name|other
operator|.
name|ord
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
block|}
annotation|@
name|Test
DECL|method|testOrdinals
specifier|public
name|void
name|testOrdinals
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|maxDoc
init|=
literal|7
decl_stmt|;
name|int
name|maxOrds
init|=
literal|32
decl_stmt|;
name|OrdinalsBuilder
name|builder
init|=
operator|new
name|OrdinalsBuilder
argument_list|(
name|maxDoc
argument_list|)
decl_stmt|;
name|builder
operator|.
name|nextOrdinal
argument_list|()
expr_stmt|;
comment|// 1
name|builder
operator|.
name|addDoc
argument_list|(
literal|1
argument_list|)
operator|.
name|addDoc
argument_list|(
literal|4
argument_list|)
operator|.
name|addDoc
argument_list|(
literal|5
argument_list|)
operator|.
name|addDoc
argument_list|(
literal|6
argument_list|)
expr_stmt|;
name|builder
operator|.
name|nextOrdinal
argument_list|()
expr_stmt|;
comment|// 2
name|builder
operator|.
name|addDoc
argument_list|(
literal|0
argument_list|)
operator|.
name|addDoc
argument_list|(
literal|5
argument_list|)
operator|.
name|addDoc
argument_list|(
literal|6
argument_list|)
expr_stmt|;
name|builder
operator|.
name|nextOrdinal
argument_list|()
expr_stmt|;
comment|// 3
name|builder
operator|.
name|addDoc
argument_list|(
literal|2
argument_list|)
operator|.
name|addDoc
argument_list|(
literal|4
argument_list|)
operator|.
name|addDoc
argument_list|(
literal|5
argument_list|)
operator|.
name|addDoc
argument_list|(
literal|6
argument_list|)
expr_stmt|;
name|builder
operator|.
name|nextOrdinal
argument_list|()
expr_stmt|;
comment|// 4
name|builder
operator|.
name|addDoc
argument_list|(
literal|0
argument_list|)
operator|.
name|addDoc
argument_list|(
literal|4
argument_list|)
operator|.
name|addDoc
argument_list|(
literal|5
argument_list|)
operator|.
name|addDoc
argument_list|(
literal|6
argument_list|)
expr_stmt|;
name|builder
operator|.
name|nextOrdinal
argument_list|()
expr_stmt|;
comment|// 5
name|builder
operator|.
name|addDoc
argument_list|(
literal|4
argument_list|)
operator|.
name|addDoc
argument_list|(
literal|5
argument_list|)
operator|.
name|addDoc
argument_list|(
literal|6
argument_list|)
expr_stmt|;
name|int
name|ord
init|=
name|builder
operator|.
name|nextOrdinal
argument_list|()
decl_stmt|;
comment|// 6
name|builder
operator|.
name|addDoc
argument_list|(
literal|4
argument_list|)
operator|.
name|addDoc
argument_list|(
literal|5
argument_list|)
operator|.
name|addDoc
argument_list|(
literal|6
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|ord
init|;
name|i
operator|<
name|maxOrds
condition|;
name|i
operator|++
control|)
block|{
name|builder
operator|.
name|nextOrdinal
argument_list|()
expr_stmt|;
name|builder
operator|.
name|addDoc
argument_list|(
literal|5
argument_list|)
operator|.
name|addDoc
argument_list|(
literal|6
argument_list|)
expr_stmt|;
block|}
name|Ordinals
name|ordinals
init|=
name|creationMultiOrdinals
argument_list|(
name|builder
argument_list|)
decl_stmt|;
name|Ordinals
operator|.
name|Docs
name|docs
init|=
name|ordinals
operator|.
name|ordinals
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|docs
operator|.
name|getNumDocs
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|maxDoc
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|docs
operator|.
name|getNumOrds
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|maxOrds
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|docs
operator|.
name|getMaxOrd
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|maxOrds
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Includes null ord
name|assertThat
argument_list|(
name|docs
operator|.
name|isMultiValued
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// Document 1
name|assertThat
argument_list|(
name|docs
operator|.
name|getOrd
argument_list|(
literal|0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|IntsRef
name|ref
init|=
name|docs
operator|.
name|getOrds
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|ref
operator|.
name|offset
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ref
operator|.
name|ints
index|[
literal|0
index|]
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ref
operator|.
name|ints
index|[
literal|1
index|]
argument_list|,
name|equalTo
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ref
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertIter
argument_list|(
name|docs
operator|.
name|getIter
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|2
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|docs
operator|.
name|forEachOrdinalInDoc
argument_list|(
literal|0
argument_list|,
name|assertOrdinalInProcDoc
argument_list|(
literal|2
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
comment|// Document 2
name|assertThat
argument_list|(
name|docs
operator|.
name|getOrd
argument_list|(
literal|1
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|ref
operator|=
name|docs
operator|.
name|getOrds
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ref
operator|.
name|offset
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ref
operator|.
name|ints
index|[
literal|0
index|]
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ref
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertIter
argument_list|(
name|docs
operator|.
name|getIter
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|docs
operator|.
name|forEachOrdinalInDoc
argument_list|(
literal|1
argument_list|,
name|assertOrdinalInProcDoc
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Document 3
name|assertThat
argument_list|(
name|docs
operator|.
name|getOrd
argument_list|(
literal|2
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|ref
operator|=
name|docs
operator|.
name|getOrds
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ref
operator|.
name|offset
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ref
operator|.
name|ints
index|[
literal|0
index|]
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ref
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertIter
argument_list|(
name|docs
operator|.
name|getIter
argument_list|(
literal|2
argument_list|)
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|docs
operator|.
name|forEachOrdinalInDoc
argument_list|(
literal|2
argument_list|,
name|assertOrdinalInProcDoc
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
comment|// Document 4
name|assertThat
argument_list|(
name|docs
operator|.
name|getOrd
argument_list|(
literal|3
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|ref
operator|=
name|docs
operator|.
name|getOrds
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ref
operator|.
name|offset
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ref
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertIter
argument_list|(
name|docs
operator|.
name|getIter
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|docs
operator|.
name|forEachOrdinalInDoc
argument_list|(
literal|3
argument_list|,
name|assertOrdinalInProcDoc
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// Document 5
name|assertThat
argument_list|(
name|docs
operator|.
name|getOrd
argument_list|(
literal|4
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|ref
operator|=
name|docs
operator|.
name|getOrds
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ref
operator|.
name|offset
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ref
operator|.
name|ints
index|[
literal|0
index|]
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ref
operator|.
name|ints
index|[
literal|1
index|]
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ref
operator|.
name|ints
index|[
literal|2
index|]
argument_list|,
name|equalTo
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ref
operator|.
name|ints
index|[
literal|3
index|]
argument_list|,
name|equalTo
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ref
operator|.
name|ints
index|[
literal|4
index|]
argument_list|,
name|equalTo
argument_list|(
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ref
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertIter
argument_list|(
name|docs
operator|.
name|getIter
argument_list|(
literal|4
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|docs
operator|.
name|forEachOrdinalInDoc
argument_list|(
literal|4
argument_list|,
name|assertOrdinalInProcDoc
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|,
literal|6
argument_list|)
argument_list|)
expr_stmt|;
comment|// Document 6
name|assertThat
argument_list|(
name|docs
operator|.
name|getOrd
argument_list|(
literal|5
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|ref
operator|=
name|docs
operator|.
name|getOrds
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ref
operator|.
name|offset
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|int
index|[]
name|expectedOrds
init|=
operator|new
name|int
index|[
name|maxOrds
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxOrds
condition|;
name|i
operator|++
control|)
block|{
name|expectedOrds
index|[
name|i
index|]
operator|=
name|i
operator|+
literal|1
expr_stmt|;
name|assertThat
argument_list|(
name|ref
operator|.
name|ints
index|[
name|i
index|]
argument_list|,
name|equalTo
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertIter
argument_list|(
name|docs
operator|.
name|getIter
argument_list|(
literal|5
argument_list|)
argument_list|,
name|expectedOrds
argument_list|)
expr_stmt|;
name|docs
operator|.
name|forEachOrdinalInDoc
argument_list|(
literal|5
argument_list|,
name|assertOrdinalInProcDoc
argument_list|(
name|expectedOrds
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ref
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
name|maxOrds
argument_list|)
argument_list|)
expr_stmt|;
comment|// Document 7
name|assertThat
argument_list|(
name|docs
operator|.
name|getOrd
argument_list|(
literal|6
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|ref
operator|=
name|docs
operator|.
name|getOrds
argument_list|(
literal|6
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ref
operator|.
name|offset
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|expectedOrds
operator|=
operator|new
name|int
index|[
name|maxOrds
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxOrds
condition|;
name|i
operator|++
control|)
block|{
name|expectedOrds
index|[
name|i
index|]
operator|=
name|i
operator|+
literal|1
expr_stmt|;
name|assertThat
argument_list|(
name|ref
operator|.
name|ints
index|[
name|i
index|]
argument_list|,
name|equalTo
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertIter
argument_list|(
name|docs
operator|.
name|getIter
argument_list|(
literal|6
argument_list|)
argument_list|,
name|expectedOrds
argument_list|)
expr_stmt|;
name|docs
operator|.
name|forEachOrdinalInDoc
argument_list|(
literal|6
argument_list|,
name|assertOrdinalInProcDoc
argument_list|(
name|expectedOrds
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ref
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
name|maxOrds
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertIter
specifier|protected
specifier|static
name|void
name|assertIter
parameter_list|(
name|Ordinals
operator|.
name|Docs
operator|.
name|Iter
name|iter
parameter_list|,
name|int
modifier|...
name|expectedOrdinals
parameter_list|)
block|{
for|for
control|(
name|int
name|expectedOrdinal
range|:
name|expectedOrdinals
control|)
block|{
name|assertThat
argument_list|(
name|iter
operator|.
name|next
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expectedOrdinal
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|iter
operator|.
name|next
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// Last one should always be 0
name|assertThat
argument_list|(
name|iter
operator|.
name|next
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// Just checking it stays 0
block|}
DECL|method|assertOrdinalInProcDoc
specifier|protected
specifier|static
name|Ordinals
operator|.
name|Docs
operator|.
name|OrdinalInDocProc
name|assertOrdinalInProcDoc
parameter_list|(
name|int
modifier|...
name|expectedOrdinals
parameter_list|)
block|{
return|return
operator|new
name|AssertingOrdinalInDocProc
argument_list|(
name|expectedOrdinals
argument_list|)
return|;
block|}
DECL|class|AssertingOrdinalInDocProc
specifier|static
class|class
name|AssertingOrdinalInDocProc
implements|implements
name|Ordinals
operator|.
name|Docs
operator|.
name|OrdinalInDocProc
block|{
DECL|field|expectedOrdinals
specifier|private
specifier|final
name|int
index|[]
name|expectedOrdinals
decl_stmt|;
DECL|field|index
specifier|private
name|int
name|index
init|=
literal|0
decl_stmt|;
DECL|method|AssertingOrdinalInDocProc
name|AssertingOrdinalInDocProc
parameter_list|(
name|int
modifier|...
name|expectedOrdinals
parameter_list|)
block|{
name|this
operator|.
name|expectedOrdinals
operator|=
name|expectedOrdinals
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onOrdinal
specifier|public
name|void
name|onOrdinal
parameter_list|(
name|int
name|docId
parameter_list|,
name|int
name|ordinal
parameter_list|)
block|{
name|assertThat
argument_list|(
name|ordinal
argument_list|,
name|equalTo
argument_list|(
name|expectedOrdinals
index|[
name|index
operator|++
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

