begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.test.unit.index.fielddata.ordinals
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|unit
operator|.
name|index
operator|.
name|fielddata
operator|.
name|ordinals
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticSearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|ordinals
operator|.
name|Ordinals
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|ordinals
operator|.
name|SparseMultiArrayOrdinals
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|util
operator|.
name|IntArrayRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|testng
operator|.
name|annotations
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|MatcherAssert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|testng
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
DECL|class|SparseMultiOrdinalsTests
specifier|public
class|class
name|SparseMultiOrdinalsTests
extends|extends
name|MultiOrdinalsTests
block|{
annotation|@
name|Override
DECL|method|creationMultiOrdinals
specifier|protected
name|Ordinals
name|creationMultiOrdinals
parameter_list|(
name|int
index|[]
index|[]
name|ordinals
parameter_list|,
name|int
name|maxOrds
parameter_list|)
block|{
return|return
operator|new
name|SparseMultiArrayOrdinals
argument_list|(
name|ordinals
argument_list|,
name|maxOrds
argument_list|,
literal|64
argument_list|)
return|;
block|}
annotation|@
name|Test
DECL|method|testMultiValuesSurpassOrdinalsLimit
specifier|public
name|void
name|testMultiValuesSurpassOrdinalsLimit
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|maxDoc
init|=
literal|2
decl_stmt|;
name|int
name|maxOrds
init|=
literal|128
decl_stmt|;
name|int
index|[]
index|[]
name|ords
init|=
operator|new
name|int
index|[
name|maxOrds
index|]
index|[
name|maxDoc
index|]
decl_stmt|;
comment|// Doc 1
name|ords
index|[
literal|0
index|]
index|[
literal|0
index|]
operator|=
literal|2
expr_stmt|;
name|ords
index|[
literal|1
index|]
index|[
literal|0
index|]
operator|=
literal|4
expr_stmt|;
comment|// Doc 2
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxOrds
condition|;
name|i
operator|++
control|)
block|{
name|ords
index|[
name|i
index|]
index|[
literal|1
index|]
operator|=
operator|(
name|i
operator|+
literal|1
operator|)
expr_stmt|;
block|}
try|try
block|{
name|creationMultiOrdinals
argument_list|(
name|ords
argument_list|,
name|maxOrds
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Exception should have been throwed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ElasticSearchException
name|e
parameter_list|)
block|{          }
block|}
annotation|@
name|Test
DECL|method|testMultiValuesDocsWithOverlappingStorageArrays
specifier|public
name|void
name|testMultiValuesDocsWithOverlappingStorageArrays
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|maxDoc
init|=
literal|7
decl_stmt|;
name|int
name|maxOrds
init|=
literal|15
decl_stmt|;
name|int
index|[]
index|[]
name|ords
init|=
operator|new
name|int
index|[
name|maxOrds
index|]
index|[
name|maxDoc
index|]
decl_stmt|;
comment|// Doc 1
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|ords
index|[
name|i
index|]
index|[
literal|0
index|]
operator|=
operator|(
name|i
operator|+
literal|1
operator|)
expr_stmt|;
block|}
comment|// Doc 2
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|15
condition|;
name|i
operator|++
control|)
block|{
name|ords
index|[
name|i
index|]
index|[
literal|1
index|]
operator|=
operator|(
name|i
operator|+
literal|1
operator|)
expr_stmt|;
block|}
comment|// Doc 3
name|ords
index|[
literal|0
index|]
index|[
literal|2
index|]
operator|=
literal|1
expr_stmt|;
comment|// Doc 4
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|ords
index|[
name|i
index|]
index|[
literal|3
index|]
operator|=
operator|(
name|i
operator|+
literal|1
operator|)
expr_stmt|;
block|}
comment|// Doc 5
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|6
condition|;
name|i
operator|++
control|)
block|{
name|ords
index|[
name|i
index|]
index|[
literal|4
index|]
operator|=
operator|(
name|i
operator|+
literal|1
operator|)
expr_stmt|;
block|}
comment|// Doc 6
name|ords
index|[
literal|0
index|]
index|[
literal|5
index|]
operator|=
literal|2
expr_stmt|;
comment|// Doc 7
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|ords
index|[
name|i
index|]
index|[
literal|6
index|]
operator|=
operator|(
name|i
operator|+
literal|1
operator|)
expr_stmt|;
block|}
name|Ordinals
name|ordinals
init|=
operator|new
name|SparseMultiArrayOrdinals
argument_list|(
name|ords
argument_list|,
name|maxOrds
argument_list|,
literal|20
argument_list|)
decl_stmt|;
name|Ordinals
operator|.
name|Docs
name|docs
init|=
name|ordinals
operator|.
name|ordinals
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|docs
operator|.
name|getNumDocs
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|maxDoc
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|docs
operator|.
name|getNumOrds
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|maxOrds
argument_list|)
argument_list|)
expr_stmt|;
comment|// Includes null ord
name|assertThat
argument_list|(
name|docs
operator|.
name|isMultiValued
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// Document 1
name|assertThat
argument_list|(
name|docs
operator|.
name|getOrd
argument_list|(
literal|0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|IntArrayRef
name|ref
init|=
name|docs
operator|.
name|getOrds
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|ref
operator|.
name|start
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|assertThat
argument_list|(
name|ref
operator|.
name|values
index|[
name|i
index|]
argument_list|,
name|equalTo
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|ref
operator|.
name|end
argument_list|,
name|equalTo
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
comment|// Document 2
name|assertThat
argument_list|(
name|docs
operator|.
name|getOrd
argument_list|(
literal|1
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|ref
operator|=
name|docs
operator|.
name|getOrds
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ref
operator|.
name|start
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|15
condition|;
name|i
operator|++
control|)
block|{
name|assertThat
argument_list|(
name|ref
operator|.
name|values
index|[
name|i
index|]
argument_list|,
name|equalTo
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|ref
operator|.
name|end
argument_list|,
name|equalTo
argument_list|(
literal|15
argument_list|)
argument_list|)
expr_stmt|;
comment|// Document 3
name|assertThat
argument_list|(
name|docs
operator|.
name|getOrd
argument_list|(
literal|2
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|ref
operator|=
name|docs
operator|.
name|getOrds
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ref
operator|.
name|start
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ref
operator|.
name|values
index|[
literal|0
index|]
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ref
operator|.
name|end
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Document 4
name|assertThat
argument_list|(
name|docs
operator|.
name|getOrd
argument_list|(
literal|3
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|ref
operator|=
name|docs
operator|.
name|getOrds
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ref
operator|.
name|start
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|assertThat
argument_list|(
name|ref
operator|.
name|values
index|[
name|i
index|]
argument_list|,
name|equalTo
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|ref
operator|.
name|end
argument_list|,
name|equalTo
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
comment|// Document 5
name|assertThat
argument_list|(
name|docs
operator|.
name|getOrd
argument_list|(
literal|4
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|ref
operator|=
name|docs
operator|.
name|getOrds
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ref
operator|.
name|start
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|6
condition|;
name|i
operator|++
control|)
block|{
name|assertThat
argument_list|(
name|ref
operator|.
name|values
index|[
name|i
index|]
argument_list|,
name|equalTo
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|ref
operator|.
name|end
argument_list|,
name|equalTo
argument_list|(
literal|6
argument_list|)
argument_list|)
expr_stmt|;
comment|// Document 6
name|assertThat
argument_list|(
name|docs
operator|.
name|getOrd
argument_list|(
literal|5
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|ref
operator|=
name|docs
operator|.
name|getOrds
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ref
operator|.
name|start
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ref
operator|.
name|values
index|[
literal|0
index|]
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ref
operator|.
name|end
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Document 7
name|assertThat
argument_list|(
name|docs
operator|.
name|getOrd
argument_list|(
literal|6
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|ref
operator|=
name|docs
operator|.
name|getOrds
argument_list|(
literal|6
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ref
operator|.
name|start
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|assertThat
argument_list|(
name|ref
operator|.
name|values
index|[
name|i
index|]
argument_list|,
name|equalTo
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|ref
operator|.
name|end
argument_list|,
name|equalTo
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

