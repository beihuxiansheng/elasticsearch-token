begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.test.unit.cluster.metadata
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|unit
operator|.
name|cluster
operator|.
name|metadata
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|IgnoreIndices
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|AliasMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|MetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|testng
operator|.
name|annotations
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
operator|.
name|newHashSet
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|MatcherAssert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
DECL|class|MetaDataTests
specifier|public
class|class
name|MetaDataTests
block|{
annotation|@
name|Test
DECL|method|convertWildcardsJustIndicesTests
specifier|public
name|void
name|convertWildcardsJustIndicesTests
parameter_list|()
block|{
name|MetaData
operator|.
name|Builder
name|mdBuilder
init|=
name|MetaData
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|indexBuilder
argument_list|(
literal|"testXXX"
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|indexBuilder
argument_list|(
literal|"testXYY"
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|indexBuilder
argument_list|(
literal|"testYYY"
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|indexBuilder
argument_list|(
literal|"kuku"
argument_list|)
argument_list|)
decl_stmt|;
name|MetaData
name|md
init|=
name|mdBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|newHashSet
argument_list|(
name|md
operator|.
name|convertFromWildcards
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"testXXX"
block|}
argument_list|,
literal|true
argument_list|,
name|IgnoreIndices
operator|.
name|MISSING
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|newHashSet
argument_list|(
literal|"testXXX"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|newHashSet
argument_list|(
name|md
operator|.
name|convertFromWildcards
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"testXXX"
block|,
literal|"testYYY"
block|}
argument_list|,
literal|true
argument_list|,
name|IgnoreIndices
operator|.
name|MISSING
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|newHashSet
argument_list|(
literal|"testXXX"
argument_list|,
literal|"testYYY"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|newHashSet
argument_list|(
name|md
operator|.
name|convertFromWildcards
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"testXXX"
block|,
literal|"ku*"
block|}
argument_list|,
literal|true
argument_list|,
name|IgnoreIndices
operator|.
name|MISSING
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|newHashSet
argument_list|(
literal|"testXXX"
argument_list|,
literal|"kuku"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|newHashSet
argument_list|(
name|md
operator|.
name|convertFromWildcards
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"test*"
block|}
argument_list|,
literal|true
argument_list|,
name|IgnoreIndices
operator|.
name|MISSING
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|newHashSet
argument_list|(
literal|"testXXX"
argument_list|,
literal|"testXYY"
argument_list|,
literal|"testYYY"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|newHashSet
argument_list|(
name|md
operator|.
name|convertFromWildcards
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"testX*"
block|}
argument_list|,
literal|true
argument_list|,
name|IgnoreIndices
operator|.
name|MISSING
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|newHashSet
argument_list|(
literal|"testXXX"
argument_list|,
literal|"testXYY"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|newHashSet
argument_list|(
name|md
operator|.
name|convertFromWildcards
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"testX*"
block|,
literal|"kuku"
block|}
argument_list|,
literal|true
argument_list|,
name|IgnoreIndices
operator|.
name|MISSING
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|newHashSet
argument_list|(
literal|"testXXX"
argument_list|,
literal|"testXYY"
argument_list|,
literal|"kuku"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|convertWildcardsTests
specifier|public
name|void
name|convertWildcardsTests
parameter_list|()
block|{
name|MetaData
operator|.
name|Builder
name|mdBuilder
init|=
name|MetaData
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|indexBuilder
argument_list|(
literal|"testXXX"
argument_list|)
operator|.
name|putAlias
argument_list|(
name|AliasMetaData
operator|.
name|builder
argument_list|(
literal|"alias1"
argument_list|)
argument_list|)
operator|.
name|putAlias
argument_list|(
name|AliasMetaData
operator|.
name|builder
argument_list|(
literal|"alias2"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|indexBuilder
argument_list|(
literal|"testXYY"
argument_list|)
operator|.
name|putAlias
argument_list|(
name|AliasMetaData
operator|.
name|builder
argument_list|(
literal|"alias2"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|indexBuilder
argument_list|(
literal|"testYYY"
argument_list|)
operator|.
name|putAlias
argument_list|(
name|AliasMetaData
operator|.
name|builder
argument_list|(
literal|"alias3"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|indexBuilder
argument_list|(
literal|"kuku"
argument_list|)
argument_list|)
decl_stmt|;
name|MetaData
name|md
init|=
name|mdBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|newHashSet
argument_list|(
name|md
operator|.
name|convertFromWildcards
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"testYY*"
block|,
literal|"alias*"
block|}
argument_list|,
literal|true
argument_list|,
name|IgnoreIndices
operator|.
name|MISSING
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|newHashSet
argument_list|(
literal|"alias1"
argument_list|,
literal|"alias2"
argument_list|,
literal|"alias3"
argument_list|,
literal|"testYYY"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|newHashSet
argument_list|(
name|md
operator|.
name|convertFromWildcards
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-kuku"
block|}
argument_list|,
literal|true
argument_list|,
name|IgnoreIndices
operator|.
name|MISSING
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|newHashSet
argument_list|(
literal|"testXXX"
argument_list|,
literal|"testXYY"
argument_list|,
literal|"testYYY"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|newHashSet
argument_list|(
name|md
operator|.
name|convertFromWildcards
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"+test*"
block|,
literal|"-testYYY"
block|}
argument_list|,
literal|true
argument_list|,
name|IgnoreIndices
operator|.
name|MISSING
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|newHashSet
argument_list|(
literal|"testXXX"
argument_list|,
literal|"testXYY"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|indexBuilder
specifier|private
name|IndexMetaData
operator|.
name|Builder
name|indexBuilder
parameter_list|(
name|String
name|index
parameter_list|)
block|{
return|return
name|IndexMetaData
operator|.
name|builder
argument_list|(
name|index
argument_list|)
operator|.
name|settings
argument_list|(
name|ImmutableSettings
operator|.
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
literal|0
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

