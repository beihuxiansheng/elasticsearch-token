begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.test.unit.cluster.node
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|unit
operator|.
name|cluster
operator|.
name|node
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNodeFilters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|transport
operator|.
name|DummyTransportAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|testng
operator|.
name|annotations
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|MatcherAssert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNodeFilters
operator|.
name|OpType
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
annotation|@
name|Test
DECL|class|DiscoveryNodeFiltersTests
specifier|public
class|class
name|DiscoveryNodeFiltersTests
block|{
annotation|@
name|Test
DECL|method|nameMatch
specifier|public
name|void
name|nameMatch
parameter_list|()
block|{
name|Settings
name|settings
init|=
name|ImmutableSettings
operator|.
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"xxx.name"
argument_list|,
literal|"name1"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|DiscoveryNodeFilters
name|filters
init|=
name|DiscoveryNodeFilters
operator|.
name|buildFromSettings
argument_list|(
name|OR
argument_list|,
literal|"xxx."
argument_list|,
name|settings
argument_list|)
decl_stmt|;
name|DiscoveryNode
name|node
init|=
operator|new
name|DiscoveryNode
argument_list|(
literal|"name1"
argument_list|,
literal|"id1"
argument_list|,
name|DummyTransportAddress
operator|.
name|INSTANCE
argument_list|,
name|ImmutableMap
operator|.
expr|<
name|String
argument_list|,
name|String
operator|>
name|of
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|filters
operator|.
name|match
argument_list|(
name|node
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|node
operator|=
operator|new
name|DiscoveryNode
argument_list|(
literal|"name2"
argument_list|,
literal|"id2"
argument_list|,
name|DummyTransportAddress
operator|.
name|INSTANCE
argument_list|,
name|ImmutableMap
operator|.
expr|<
name|String
argument_list|,
name|String
operator|>
name|of
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filters
operator|.
name|match
argument_list|(
name|node
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|idMatch
specifier|public
name|void
name|idMatch
parameter_list|()
block|{
name|Settings
name|settings
init|=
name|ImmutableSettings
operator|.
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"xxx._id"
argument_list|,
literal|"id1"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|DiscoveryNodeFilters
name|filters
init|=
name|DiscoveryNodeFilters
operator|.
name|buildFromSettings
argument_list|(
name|OR
argument_list|,
literal|"xxx."
argument_list|,
name|settings
argument_list|)
decl_stmt|;
name|DiscoveryNode
name|node
init|=
operator|new
name|DiscoveryNode
argument_list|(
literal|"name1"
argument_list|,
literal|"id1"
argument_list|,
name|DummyTransportAddress
operator|.
name|INSTANCE
argument_list|,
name|ImmutableMap
operator|.
expr|<
name|String
argument_list|,
name|String
operator|>
name|of
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|filters
operator|.
name|match
argument_list|(
name|node
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|node
operator|=
operator|new
name|DiscoveryNode
argument_list|(
literal|"name2"
argument_list|,
literal|"id2"
argument_list|,
name|DummyTransportAddress
operator|.
name|INSTANCE
argument_list|,
name|ImmutableMap
operator|.
expr|<
name|String
argument_list|,
name|String
operator|>
name|of
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filters
operator|.
name|match
argument_list|(
name|node
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|idOrNameMatch
specifier|public
name|void
name|idOrNameMatch
parameter_list|()
block|{
name|Settings
name|settings
init|=
name|ImmutableSettings
operator|.
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"xxx._id"
argument_list|,
literal|"id1,blah"
argument_list|)
operator|.
name|put
argument_list|(
literal|"xxx.name"
argument_list|,
literal|"blah,name2"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|DiscoveryNodeFilters
name|filters
init|=
name|DiscoveryNodeFilters
operator|.
name|buildFromSettings
argument_list|(
name|OR
argument_list|,
literal|"xxx."
argument_list|,
name|settings
argument_list|)
decl_stmt|;
name|DiscoveryNode
name|node
init|=
operator|new
name|DiscoveryNode
argument_list|(
literal|"name1"
argument_list|,
literal|"id1"
argument_list|,
name|DummyTransportAddress
operator|.
name|INSTANCE
argument_list|,
name|ImmutableMap
operator|.
expr|<
name|String
argument_list|,
name|String
operator|>
name|of
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|filters
operator|.
name|match
argument_list|(
name|node
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|node
operator|=
operator|new
name|DiscoveryNode
argument_list|(
literal|"name2"
argument_list|,
literal|"id2"
argument_list|,
name|DummyTransportAddress
operator|.
name|INSTANCE
argument_list|,
name|ImmutableMap
operator|.
expr|<
name|String
argument_list|,
name|String
operator|>
name|of
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filters
operator|.
name|match
argument_list|(
name|node
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|node
operator|=
operator|new
name|DiscoveryNode
argument_list|(
literal|"name3"
argument_list|,
literal|"id3"
argument_list|,
name|DummyTransportAddress
operator|.
name|INSTANCE
argument_list|,
name|ImmutableMap
operator|.
expr|<
name|String
argument_list|,
name|String
operator|>
name|of
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filters
operator|.
name|match
argument_list|(
name|node
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|tagAndGroupMatch
specifier|public
name|void
name|tagAndGroupMatch
parameter_list|()
block|{
name|Settings
name|settings
init|=
name|ImmutableSettings
operator|.
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"xxx.tag"
argument_list|,
literal|"A"
argument_list|)
operator|.
name|put
argument_list|(
literal|"xxx.group"
argument_list|,
literal|"B"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|DiscoveryNodeFilters
name|filters
init|=
name|DiscoveryNodeFilters
operator|.
name|buildFromSettings
argument_list|(
name|AND
argument_list|,
literal|"xxx."
argument_list|,
name|settings
argument_list|)
decl_stmt|;
name|DiscoveryNode
name|node
init|=
operator|new
name|DiscoveryNode
argument_list|(
literal|"name1"
argument_list|,
literal|"id1"
argument_list|,
name|DummyTransportAddress
operator|.
name|INSTANCE
argument_list|,
name|ImmutableMap
operator|.
expr|<
name|String
argument_list|,
name|String
operator|>
name|of
argument_list|(
literal|"tag"
argument_list|,
literal|"A"
argument_list|,
literal|"group"
argument_list|,
literal|"B"
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|filters
operator|.
name|match
argument_list|(
name|node
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|node
operator|=
operator|new
name|DiscoveryNode
argument_list|(
literal|"name2"
argument_list|,
literal|"id2"
argument_list|,
name|DummyTransportAddress
operator|.
name|INSTANCE
argument_list|,
name|ImmutableMap
operator|.
expr|<
name|String
argument_list|,
name|String
operator|>
name|of
argument_list|(
literal|"tag"
argument_list|,
literal|"A"
argument_list|,
literal|"group"
argument_list|,
literal|"B"
argument_list|,
literal|"name"
argument_list|,
literal|"X"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filters
operator|.
name|match
argument_list|(
name|node
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|node
operator|=
operator|new
name|DiscoveryNode
argument_list|(
literal|"name3"
argument_list|,
literal|"id3"
argument_list|,
name|DummyTransportAddress
operator|.
name|INSTANCE
argument_list|,
name|ImmutableMap
operator|.
expr|<
name|String
argument_list|,
name|String
operator|>
name|of
argument_list|(
literal|"tag"
argument_list|,
literal|"A"
argument_list|,
literal|"group"
argument_list|,
literal|"F"
argument_list|,
literal|"name"
argument_list|,
literal|"X"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filters
operator|.
name|match
argument_list|(
name|node
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|node
operator|=
operator|new
name|DiscoveryNode
argument_list|(
literal|"name4"
argument_list|,
literal|"id4"
argument_list|,
name|DummyTransportAddress
operator|.
name|INSTANCE
argument_list|,
name|ImmutableMap
operator|.
expr|<
name|String
argument_list|,
name|String
operator|>
name|of
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filters
operator|.
name|match
argument_list|(
name|node
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|starMatch
specifier|public
name|void
name|starMatch
parameter_list|()
block|{
name|Settings
name|settings
init|=
name|ImmutableSettings
operator|.
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"xxx.name"
argument_list|,
literal|"*"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|DiscoveryNodeFilters
name|filters
init|=
name|DiscoveryNodeFilters
operator|.
name|buildFromSettings
argument_list|(
name|OR
argument_list|,
literal|"xxx."
argument_list|,
name|settings
argument_list|)
decl_stmt|;
name|DiscoveryNode
name|node
init|=
operator|new
name|DiscoveryNode
argument_list|(
literal|"name1"
argument_list|,
literal|"id1"
argument_list|,
name|DummyTransportAddress
operator|.
name|INSTANCE
argument_list|,
name|ImmutableMap
operator|.
expr|<
name|String
argument_list|,
name|String
operator|>
name|of
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|filters
operator|.
name|match
argument_list|(
name|node
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

