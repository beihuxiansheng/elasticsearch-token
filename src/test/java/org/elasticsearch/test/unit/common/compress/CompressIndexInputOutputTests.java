begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.elasticsearch.test.unit.common.compress
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|unit
operator|.
name|common
operator|.
name|compress
package|;
end_package

begin_import
import|import
name|jsr166y
operator|.
name|ThreadLocalRandom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|MapFieldSelector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriterConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|RAMDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|RandomStringGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|compress
operator|.
name|CompressedIndexInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|compress
operator|.
name|CompressedIndexOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|compress
operator|.
name|Compressor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|compress
operator|.
name|CompressorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|Lucene
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|SizeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|testng
operator|.
name|annotations
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|testng
operator|.
name|annotations
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|MatcherAssert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
annotation|@
name|Test
DECL|class|CompressIndexInputOutputTests
specifier|public
class|class
name|CompressIndexInputOutputTests
block|{
DECL|field|compressor
specifier|private
name|Compressor
name|compressor
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|buildCompressor
specifier|public
name|void
name|buildCompressor
parameter_list|()
block|{
name|this
operator|.
name|compressor
operator|=
name|CompressorFactory
operator|.
name|defaultCompressor
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|empty
specifier|public
name|void
name|empty
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
operator|new
name|RAMDirectory
argument_list|()
decl_stmt|;
name|IndexOutput
name|out
init|=
name|compressor
operator|.
name|indexOutput
argument_list|(
name|dir
operator|.
name|createOutput
argument_list|(
literal|"test"
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexInput
name|in
init|=
name|compressor
operator|.
name|indexInput
argument_list|(
name|dir
operator|.
name|openInput
argument_list|(
literal|"test"
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|in
operator|.
name|readByte
argument_list|()
expr_stmt|;
assert|assert
literal|false
assert|;
block|}
catch|catch
parameter_list|(
name|EOFException
name|e
parameter_list|)
block|{
comment|// all is well
block|}
name|in
operator|.
name|seek
argument_list|(
literal|100
argument_list|)
expr_stmt|;
try|try
block|{
name|in
operator|.
name|readByte
argument_list|()
expr_stmt|;
assert|assert
literal|false
assert|;
block|}
catch|catch
parameter_list|(
name|EOFException
name|e
parameter_list|)
block|{
comment|// all is well
block|}
block|}
annotation|@
name|Test
DECL|method|simple
specifier|public
name|void
name|simple
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
operator|new
name|RAMDirectory
argument_list|()
decl_stmt|;
name|IndexOutput
name|out
init|=
name|compressor
operator|.
name|indexOutput
argument_list|(
name|dir
operator|.
name|createOutput
argument_list|(
literal|"test"
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|pos1
init|=
name|out
operator|.
name|getFilePointer
argument_list|()
decl_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|long
name|pos2
init|=
name|out
operator|.
name|getFilePointer
argument_list|()
decl_stmt|;
name|out
operator|.
name|writeString
argument_list|(
literal|"test1"
argument_list|)
expr_stmt|;
name|long
name|pos3
init|=
name|out
operator|.
name|getFilePointer
argument_list|()
decl_stmt|;
name|String
name|largeString
init|=
name|RandomStringGenerator
operator|.
name|random
argument_list|(
literal|0xFFFF
operator|+
literal|5
argument_list|)
decl_stmt|;
name|out
operator|.
name|writeString
argument_list|(
name|largeString
argument_list|)
expr_stmt|;
name|long
name|pos4
init|=
name|out
operator|.
name|getFilePointer
argument_list|()
decl_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|long
name|pos5
init|=
name|out
operator|.
name|getFilePointer
argument_list|()
decl_stmt|;
name|out
operator|.
name|writeString
argument_list|(
literal|"test2"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexInput
name|in
init|=
name|compressor
operator|.
name|indexInput
argument_list|(
name|dir
operator|.
name|openInput
argument_list|(
literal|"test"
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|in
operator|.
name|readInt
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|in
operator|.
name|readString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"test1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|in
operator|.
name|readString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|largeString
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|in
operator|.
name|readInt
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|in
operator|.
name|readString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"test2"
argument_list|)
argument_list|)
expr_stmt|;
name|in
operator|.
name|seek
argument_list|(
name|pos3
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|in
operator|.
name|readString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|largeString
argument_list|)
argument_list|)
expr_stmt|;
name|in
operator|.
name|seek
argument_list|(
name|pos2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|in
operator|.
name|readString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"test1"
argument_list|)
argument_list|)
expr_stmt|;
name|in
operator|.
name|seek
argument_list|(
name|pos5
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|in
operator|.
name|readString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"test2"
argument_list|)
argument_list|)
expr_stmt|;
name|in
operator|.
name|seek
argument_list|(
name|pos1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|in
operator|.
name|readInt
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|in
operator|.
name|seek
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|byte
index|[]
name|full
init|=
operator|new
name|byte
index|[
operator|(
name|int
operator|)
name|in
operator|.
name|length
argument_list|()
index|]
decl_stmt|;
name|in
operator|.
name|readBytes
argument_list|(
name|full
argument_list|,
literal|0
argument_list|,
name|full
operator|.
name|length
argument_list|)
expr_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|seek1Compressed
specifier|public
name|void
name|seek1Compressed
parameter_list|()
throws|throws
name|Exception
block|{
name|seek1
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|seek1UnCompressed
specifier|public
name|void
name|seek1UnCompressed
parameter_list|()
throws|throws
name|Exception
block|{
name|seek1
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|seek1
specifier|private
name|void
name|seek1
parameter_list|(
name|boolean
name|compressed
parameter_list|)
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
operator|new
name|RAMDirectory
argument_list|()
decl_stmt|;
name|IndexOutput
name|out
init|=
name|compressed
condition|?
name|compressor
operator|.
name|indexOutput
argument_list|(
name|dir
operator|.
name|createOutput
argument_list|(
literal|"test"
argument_list|)
argument_list|)
else|:
name|dir
operator|.
name|createOutput
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|long
name|pos1
init|=
name|out
operator|.
name|getFilePointer
argument_list|()
decl_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|long
name|pos2
init|=
name|out
operator|.
name|getFilePointer
argument_list|()
decl_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|long
name|posX
init|=
name|out
operator|.
name|getFilePointer
argument_list|()
decl_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|long
name|pos3
init|=
name|out
operator|.
name|getFilePointer
argument_list|()
decl_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
comment|//IndexInput in = dir.openInput("test");
name|IndexInput
name|in
init|=
name|compressed
condition|?
name|compressor
operator|.
name|indexInput
argument_list|(
name|dir
operator|.
name|openInput
argument_list|(
literal|"test"
argument_list|)
argument_list|)
else|:
name|dir
operator|.
name|openInput
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|in
operator|.
name|seek
argument_list|(
name|pos2
argument_list|)
expr_stmt|;
comment|// now "skip"
name|int
name|numBytes
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|in
operator|.
name|getFilePointer
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|posX
argument_list|)
argument_list|)
expr_stmt|;
name|in
operator|.
name|seek
argument_list|(
name|in
operator|.
name|getFilePointer
argument_list|()
operator|+
name|numBytes
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|in
operator|.
name|readVInt
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|in
operator|.
name|readInt
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|copyBytes
specifier|public
name|void
name|copyBytes
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
operator|new
name|RAMDirectory
argument_list|()
decl_stmt|;
name|IndexOutput
name|out
init|=
name|compressor
operator|.
name|indexOutput
argument_list|(
name|dir
operator|.
name|createOutput
argument_list|(
literal|"test"
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|pos1
init|=
name|out
operator|.
name|getFilePointer
argument_list|()
decl_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|long
name|pos2
init|=
name|out
operator|.
name|getFilePointer
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|pos2
argument_list|,
name|equalTo
argument_list|(
literal|4l
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeString
argument_list|(
literal|"test1"
argument_list|)
expr_stmt|;
name|long
name|pos3
init|=
name|out
operator|.
name|getFilePointer
argument_list|()
decl_stmt|;
name|String
name|largeString
init|=
name|RandomStringGenerator
operator|.
name|random
argument_list|(
literal|0xFFFF
operator|+
literal|5
argument_list|)
decl_stmt|;
name|out
operator|.
name|writeString
argument_list|(
name|largeString
argument_list|)
expr_stmt|;
name|long
name|pos4
init|=
name|out
operator|.
name|getFilePointer
argument_list|()
decl_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|long
name|pos5
init|=
name|out
operator|.
name|getFilePointer
argument_list|()
decl_stmt|;
name|out
operator|.
name|writeString
argument_list|(
literal|"test2"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|out
operator|.
name|length
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|out
operator|.
name|getFilePointer
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|length
init|=
name|out
operator|.
name|length
argument_list|()
decl_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|CompressedIndexOutput
name|out2
init|=
name|compressor
operator|.
name|indexOutput
argument_list|(
name|dir
operator|.
name|createOutput
argument_list|(
literal|"test2"
argument_list|)
argument_list|)
decl_stmt|;
name|out2
operator|.
name|writeString
argument_list|(
literal|"mergeStart"
argument_list|)
expr_stmt|;
name|long
name|startMergePos
init|=
name|out2
operator|.
name|getFilePointer
argument_list|()
decl_stmt|;
name|CompressedIndexInput
name|testInput
init|=
name|compressor
operator|.
name|indexInput
argument_list|(
name|dir
operator|.
name|openInput
argument_list|(
literal|"test"
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|testInput
operator|.
name|length
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|out2
operator|.
name|copyBytes
argument_list|(
name|testInput
argument_list|,
name|testInput
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|endMergePos
init|=
name|out2
operator|.
name|getFilePointer
argument_list|()
decl_stmt|;
name|out2
operator|.
name|writeString
argument_list|(
literal|"mergeEnd"
argument_list|)
expr_stmt|;
name|out2
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexInput
name|in
init|=
name|compressor
operator|.
name|indexInput
argument_list|(
name|dir
operator|.
name|openInput
argument_list|(
literal|"test2"
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|in
operator|.
name|readString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"mergeStart"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|in
operator|.
name|readInt
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|in
operator|.
name|readString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"test1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|in
operator|.
name|readString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|largeString
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|in
operator|.
name|readInt
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|in
operator|.
name|readString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"test2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|in
operator|.
name|readString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"mergeEnd"
argument_list|)
argument_list|)
expr_stmt|;
name|in
operator|.
name|seek
argument_list|(
name|pos1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|in
operator|.
name|readString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"mergeStart"
argument_list|)
argument_list|)
expr_stmt|;
name|in
operator|.
name|seek
argument_list|(
name|endMergePos
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|in
operator|.
name|readString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"mergeEnd"
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|in
operator|.
name|readByte
argument_list|()
expr_stmt|;
assert|assert
literal|false
assert|;
block|}
catch|catch
parameter_list|(
name|EOFException
name|e
parameter_list|)
block|{
comment|// all is well, we reached hte end...
block|}
block|}
annotation|@
name|Test
DECL|method|lucene
specifier|public
name|void
name|lucene
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|AtomicBoolean
name|compressed
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|Directory
name|dir
init|=
operator|new
name|RAMDirectory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|IndexOutput
name|createOutput
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|compressed
operator|.
name|get
argument_list|()
operator|&&
name|name
operator|.
name|endsWith
argument_list|(
literal|".fdt"
argument_list|)
condition|)
block|{
return|return
name|compressor
operator|.
name|indexOutput
argument_list|(
name|super
operator|.
name|createOutput
argument_list|(
name|name
argument_list|)
argument_list|)
return|;
block|}
return|return
name|super
operator|.
name|createOutput
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|IndexInput
name|openInput
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|name
operator|.
name|endsWith
argument_list|(
literal|".fdt"
argument_list|)
condition|)
block|{
name|IndexInput
name|in
init|=
name|super
operator|.
name|openInput
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|Compressor
name|compressor1
init|=
name|CompressorFactory
operator|.
name|compressor
argument_list|(
name|in
argument_list|)
decl_stmt|;
if|if
condition|(
name|compressor1
operator|!=
literal|null
condition|)
block|{
return|return
name|compressor1
operator|.
name|indexInput
argument_list|(
name|in
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|in
return|;
block|}
block|}
return|return
name|super
operator|.
name|openInput
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|IndexInput
name|openInput
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|bufferSize
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|name
operator|.
name|endsWith
argument_list|(
literal|".fdt"
argument_list|)
condition|)
block|{
name|IndexInput
name|in
init|=
name|super
operator|.
name|openInput
argument_list|(
name|name
argument_list|,
name|bufferSize
argument_list|)
decl_stmt|;
comment|// in case the override called openInput(String)
if|if
condition|(
name|in
operator|instanceof
name|CompressedIndexInput
condition|)
block|{
return|return
name|in
return|;
block|}
name|Compressor
name|compressor1
init|=
name|CompressorFactory
operator|.
name|compressor
argument_list|(
name|in
argument_list|)
decl_stmt|;
if|if
condition|(
name|compressor1
operator|!=
literal|null
condition|)
block|{
return|return
name|compressor1
operator|.
name|indexInput
argument_list|(
name|in
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|in
return|;
block|}
block|}
return|return
name|super
operator|.
name|openInput
argument_list|(
name|name
argument_list|,
name|bufferSize
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|Lucene
operator|.
name|VERSION
argument_list|,
name|Lucene
operator|.
name|STANDARD_ANALYZER
argument_list|)
argument_list|)
decl_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|createDoc
argument_list|(
literal|1
argument_list|,
operator|(
name|int
operator|)
name|SizeValue
operator|.
name|parseSizeValue
argument_list|(
literal|"100b"
argument_list|)
operator|.
name|singles
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|createDoc
argument_list|(
literal|2
argument_list|,
operator|(
name|int
operator|)
name|SizeValue
operator|.
name|parseSizeValue
argument_list|(
literal|"5k"
argument_list|)
operator|.
name|singles
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|createDoc
argument_list|(
literal|3
argument_list|,
operator|(
name|int
operator|)
name|SizeValue
operator|.
name|parseSizeValue
argument_list|(
literal|"2k"
argument_list|)
operator|.
name|singles
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|createDoc
argument_list|(
literal|4
argument_list|,
operator|(
name|int
operator|)
name|SizeValue
operator|.
name|parseSizeValue
argument_list|(
literal|"1k"
argument_list|)
operator|.
name|singles
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|writer
operator|.
name|forceMerge
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|writer
operator|.
name|waitForMerges
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|compressed
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|createDoc
argument_list|(
literal|5
argument_list|,
operator|(
name|int
operator|)
name|SizeValue
operator|.
name|parseSizeValue
argument_list|(
literal|"2k"
argument_list|)
operator|.
name|singles
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|createDoc
argument_list|(
literal|6
argument_list|,
operator|(
name|int
operator|)
name|SizeValue
operator|.
name|parseSizeValue
argument_list|(
literal|"1k"
argument_list|)
operator|.
name|singles
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|writer
operator|.
name|forceMerge
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|writer
operator|.
name|waitForMerges
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|writer
argument_list|)
expr_stmt|;
block|}
DECL|method|verify
specifier|private
name|void
name|verify
parameter_list|(
name|IndexWriter
name|writer
parameter_list|)
throws|throws
name|Exception
block|{
name|IndexReader
name|reader
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|writer
argument_list|,
literal|true
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|reader
operator|.
name|maxDoc
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|reader
operator|.
name|isDeleted
argument_list|(
name|i
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|Document
name|document
init|=
name|reader
operator|.
name|document
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|checkDoc
argument_list|(
name|document
argument_list|)
expr_stmt|;
name|document
operator|=
name|reader
operator|.
name|document
argument_list|(
name|i
argument_list|,
operator|new
name|MapFieldSelector
argument_list|(
literal|"id"
argument_list|,
literal|"field"
argument_list|,
literal|"count"
argument_list|)
argument_list|)
expr_stmt|;
name|checkDoc
argument_list|(
name|document
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|int
name|doc
init|=
name|ThreadLocalRandom
operator|.
name|current
argument_list|()
operator|.
name|nextInt
argument_list|(
name|reader
operator|.
name|maxDoc
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|reader
operator|.
name|isDeleted
argument_list|(
name|i
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|Document
name|document
init|=
name|reader
operator|.
name|document
argument_list|(
name|doc
argument_list|)
decl_stmt|;
name|checkDoc
argument_list|(
name|document
argument_list|)
expr_stmt|;
name|document
operator|=
name|reader
operator|.
name|document
argument_list|(
name|doc
argument_list|,
operator|new
name|MapFieldSelector
argument_list|(
literal|"id"
argument_list|,
literal|"field"
argument_list|,
literal|"count"
argument_list|)
argument_list|)
expr_stmt|;
name|checkDoc
argument_list|(
name|document
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|checkDoc
specifier|private
name|void
name|checkDoc
parameter_list|(
name|Document
name|document
parameter_list|)
block|{
name|String
name|id
init|=
name|document
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
decl_stmt|;
name|String
name|field
init|=
name|document
operator|.
name|get
argument_list|(
literal|"field"
argument_list|)
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|oldIdx
init|=
name|idx
decl_stmt|;
name|idx
operator|=
name|field
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|,
name|oldIdx
argument_list|)
expr_stmt|;
if|if
condition|(
name|idx
operator|==
operator|-
literal|1
condition|)
block|{
break|break;
block|}
name|count
operator|++
expr_stmt|;
name|assertThat
argument_list|(
name|field
operator|.
name|substring
argument_list|(
name|oldIdx
argument_list|,
name|idx
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|count
argument_list|,
name|equalTo
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|document
operator|.
name|get
argument_list|(
literal|"count"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|createDoc
specifier|private
name|Document
name|createDoc
parameter_list|(
name|int
name|id
parameter_list|,
name|int
name|size
parameter_list|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"id"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|id
argument_list|)
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|NOT_ANALYZED
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"size"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|size
argument_list|)
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|NOT_ANALYZED
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"skip"
argument_list|,
name|RandomStringGenerator
operator|.
name|random
argument_list|(
literal|50
argument_list|)
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|count
operator|++
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|>=
name|size
condition|)
block|{
break|break;
block|}
block|}
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"count"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|count
argument_list|)
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|NOT_ANALYZED
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"field"
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|NOT_ANALYZED
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"skip"
argument_list|,
name|RandomStringGenerator
operator|.
name|random
argument_list|(
literal|50
argument_list|)
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|doc
return|;
block|}
block|}
end_class

end_unit

