begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.test.unit.common.lucene.versioned
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|unit
operator|.
name|common
operator|.
name|lucene
operator|.
name|versioned
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|RAMDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|Lucene
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|versioned
operator|.
name|ConcurrentVersionedMapLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|versioned
operator|.
name|VersionedIndexReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|versioned
operator|.
name|VersionedMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|testng
operator|.
name|annotations
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|testng
operator|.
name|annotations
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|testng
operator|.
name|annotations
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|DocumentBuilder
operator|.
name|doc
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|DocumentBuilder
operator|.
name|field
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|MatcherAssert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|VersionedIndexReaderTests
specifier|public
class|class
name|VersionedIndexReaderTests
block|{
DECL|field|dir
specifier|private
name|RAMDirectory
name|dir
decl_stmt|;
DECL|field|indexReader
specifier|private
name|IndexReader
name|indexReader
decl_stmt|;
DECL|field|indexWriter
specifier|private
name|IndexWriter
name|indexWriter
decl_stmt|;
DECL|field|versionedMap
specifier|private
name|VersionedMap
name|versionedMap
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|versionedMap
operator|=
operator|new
name|ConcurrentVersionedMapLong
argument_list|()
expr_stmt|;
name|dir
operator|=
operator|new
name|RAMDirectory
argument_list|()
expr_stmt|;
name|indexWriter
operator|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|Lucene
operator|.
name|VERSION
argument_list|,
name|Lucene
operator|.
name|STANDARD_ANALYZER
argument_list|)
argument_list|)
expr_stmt|;
name|indexWriter
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|()
operator|.
name|add
argument_list|(
name|field
argument_list|(
literal|"value"
argument_list|,
literal|"0"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|indexWriter
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|()
operator|.
name|add
argument_list|(
name|field
argument_list|(
literal|"value"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|indexWriter
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|()
operator|.
name|add
argument_list|(
name|field
argument_list|(
literal|"value"
argument_list|,
literal|"2"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|indexWriter
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|()
operator|.
name|add
argument_list|(
name|field
argument_list|(
literal|"value"
argument_list|,
literal|"3"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|indexWriter
operator|.
name|commit
argument_list|()
expr_stmt|;
name|indexReader
operator|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|tearDown
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|indexWriter
operator|.
name|close
argument_list|()
expr_stmt|;
name|indexReader
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|verifyExpected
specifier|public
name|void
name|verifyExpected
parameter_list|()
throws|throws
name|Exception
block|{
name|TermDocs
name|termDocs
decl_stmt|;
name|Document
name|doc
init|=
name|indexReader
operator|.
name|document
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|doc
operator|.
name|getFieldable
argument_list|(
literal|"value"
argument_list|)
operator|.
name|stringValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"0"
argument_list|)
argument_list|)
expr_stmt|;
name|termDocs
operator|=
name|indexReader
operator|.
name|termDocs
argument_list|(
operator|new
name|Term
argument_list|(
literal|"value"
argument_list|,
literal|"0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|termDocs
operator|.
name|next
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|termDocs
operator|.
name|next
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|=
name|indexReader
operator|.
name|document
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|doc
operator|.
name|getFieldable
argument_list|(
literal|"value"
argument_list|)
operator|.
name|stringValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|termDocs
operator|=
name|indexReader
operator|.
name|termDocs
argument_list|(
operator|new
name|Term
argument_list|(
literal|"value"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|termDocs
operator|.
name|next
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|termDocs
operator|.
name|next
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|=
name|indexReader
operator|.
name|document
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|doc
operator|.
name|getFieldable
argument_list|(
literal|"value"
argument_list|)
operator|.
name|stringValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|termDocs
operator|=
name|indexReader
operator|.
name|termDocs
argument_list|(
operator|new
name|Term
argument_list|(
literal|"value"
argument_list|,
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|termDocs
operator|.
name|next
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|termDocs
operator|.
name|next
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|=
name|indexReader
operator|.
name|document
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|doc
operator|.
name|getFieldable
argument_list|(
literal|"value"
argument_list|)
operator|.
name|stringValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
name|termDocs
operator|=
name|indexReader
operator|.
name|termDocs
argument_list|(
operator|new
name|Term
argument_list|(
literal|"value"
argument_list|,
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|termDocs
operator|.
name|next
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|termDocs
operator|.
name|next
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSimple
specifier|public
name|void
name|testSimple
parameter_list|()
throws|throws
name|Exception
block|{
name|TermDocs
name|termDocs
decl_stmt|;
comment|// open a versioned index reader in version 0
name|VersionedIndexReader
name|versionedIndexReader
init|=
operator|new
name|VersionedIndexReader
argument_list|(
name|indexReader
argument_list|,
literal|0
argument_list|,
name|versionedMap
argument_list|)
decl_stmt|;
comment|// delete doc 0 in version 1
name|versionedMap
operator|.
name|putVersion
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// we can see doc 0 still (versioned reader is on version 0)
name|termDocs
operator|=
name|versionedIndexReader
operator|.
name|termDocs
argument_list|(
operator|new
name|Term
argument_list|(
literal|"value"
argument_list|,
literal|"0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|termDocs
operator|.
name|next
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|termDocs
operator|.
name|next
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// make sure we see doc 1, it was never deleted
name|termDocs
operator|=
name|versionedIndexReader
operator|.
name|termDocs
argument_list|(
operator|new
name|Term
argument_list|(
literal|"value"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|termDocs
operator|.
name|next
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|termDocs
operator|.
name|next
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// delete doc 1 in version 2, we still
name|versionedMap
operator|.
name|putVersion
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// we can see doc 0 still (versioned reader is on version 0)
name|termDocs
operator|=
name|versionedIndexReader
operator|.
name|termDocs
argument_list|(
operator|new
name|Term
argument_list|(
literal|"value"
argument_list|,
literal|"0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|termDocs
operator|.
name|next
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// we can see doc 1 still (versioned reader is on version 0)
name|termDocs
operator|=
name|versionedIndexReader
operator|.
name|termDocs
argument_list|(
operator|new
name|Term
argument_list|(
literal|"value"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|termDocs
operator|.
name|next
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// move the versioned reader to 1
name|versionedIndexReader
operator|=
operator|new
name|VersionedIndexReader
argument_list|(
name|indexReader
argument_list|,
literal|1
argument_list|,
name|versionedMap
argument_list|)
expr_stmt|;
comment|// we now can't see the deleted version 0
name|termDocs
operator|=
name|versionedIndexReader
operator|.
name|termDocs
argument_list|(
operator|new
name|Term
argument_list|(
literal|"value"
argument_list|,
literal|"0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|termDocs
operator|.
name|next
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// we can still see deleted version 1
name|termDocs
operator|=
name|versionedIndexReader
operator|.
name|termDocs
argument_list|(
operator|new
name|Term
argument_list|(
literal|"value"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|termDocs
operator|.
name|next
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

