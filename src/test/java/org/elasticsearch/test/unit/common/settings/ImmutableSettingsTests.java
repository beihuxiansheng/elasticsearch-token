begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.test.unit.common.settings
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|unit
operator|.
name|common
operator|.
name|settings
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|NoClassSettingsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|unit
operator|.
name|common
operator|.
name|settings
operator|.
name|bar
operator|.
name|BarTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|unit
operator|.
name|common
operator|.
name|settings
operator|.
name|foo
operator|.
name|FooTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|testng
operator|.
name|annotations
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
operator|.
name|settingsBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|MatcherAssert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
DECL|class|ImmutableSettingsTests
specifier|public
class|class
name|ImmutableSettingsTests
block|{
annotation|@
name|Test
DECL|method|testGetAsClass
specifier|public
name|void
name|testGetAsClass
parameter_list|()
block|{
name|Settings
name|settings
init|=
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"test.class"
argument_list|,
literal|"bar"
argument_list|)
operator|.
name|put
argument_list|(
literal|"test.class.package"
argument_list|,
literal|"org.elasticsearch.test.unit.common.settings.bar"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// Assert that defaultClazz is loaded if setting is not specified
name|assertThat
argument_list|(
name|settings
operator|.
name|getAsClass
argument_list|(
literal|"no.settings"
argument_list|,
name|FooTest
operator|.
name|class
argument_list|,
literal|"org.elasticsearch.test.unit.common.settings."
argument_list|,
literal|"Test"
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|FooTest
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Assert that correct class is loaded if setting contain name without package
name|assertThat
argument_list|(
name|settings
operator|.
name|getAsClass
argument_list|(
literal|"test.class"
argument_list|,
name|FooTest
operator|.
name|class
argument_list|,
literal|"org.elasticsearch.test.unit.common.settings."
argument_list|,
literal|"Test"
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|BarTest
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Assert that class cannot be loaded if wrong packagePrefix is specified
try|try
block|{
name|settings
operator|.
name|getAsClass
argument_list|(
literal|"test.class"
argument_list|,
name|FooTest
operator|.
name|class
argument_list|,
literal|"com.example.elasticsearch.test.unit..common.settings."
argument_list|,
literal|"Test"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"Class with wrong package name shouldn't be loaded"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoClassSettingsException
name|ex
parameter_list|)
block|{
comment|// Ignore
block|}
comment|// Assert that package name in settings is getting correctly applied
name|assertThat
argument_list|(
name|settings
operator|.
name|getAsClass
argument_list|(
literal|"test.class.package"
argument_list|,
name|FooTest
operator|.
name|class
argument_list|,
literal|"com.example.elasticsearch.test.unit.common.settings."
argument_list|,
literal|"Test"
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|BarTest
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLoadFromDelimitedString
specifier|public
name|void
name|testLoadFromDelimitedString
parameter_list|()
block|{
name|Settings
name|settings
init|=
name|settingsBuilder
argument_list|()
operator|.
name|loadFromDelimitedString
argument_list|(
literal|"key1=value1;key2=value2"
argument_list|,
literal|';'
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|settings
operator|.
name|get
argument_list|(
literal|"key1"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"value1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|settings
operator|.
name|get
argument_list|(
literal|"key2"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"value2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|settings
operator|.
name|getAsMap
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|settings
operator|.
name|toDelimitedString
argument_list|(
literal|';'
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"key1=value1;key2=value2;"
argument_list|)
argument_list|)
expr_stmt|;
name|settings
operator|=
name|settingsBuilder
argument_list|()
operator|.
name|loadFromDelimitedString
argument_list|(
literal|"key1=value1;key2=value2;"
argument_list|,
literal|';'
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|settings
operator|.
name|get
argument_list|(
literal|"key1"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"value1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|settings
operator|.
name|get
argument_list|(
literal|"key2"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"value2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|settings
operator|.
name|getAsMap
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|settings
operator|.
name|toDelimitedString
argument_list|(
literal|';'
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"key1=value1;key2=value2;"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expectedExceptions
operator|=
name|NoClassSettingsException
operator|.
name|class
argument_list|)
DECL|method|testThatAllClassNotFoundExceptionsAreCaught
specifier|public
name|void
name|testThatAllClassNotFoundExceptionsAreCaught
parameter_list|()
block|{
comment|// this should be nGram in order to really work, but for sure not not throw a NoClassDefFoundError
name|Settings
name|settings
init|=
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"type"
argument_list|,
literal|"ngram"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|settings
operator|.
name|getAsClass
argument_list|(
literal|"type"
argument_list|,
literal|null
argument_list|,
literal|"org.elasticsearch.index.analysis."
argument_list|,
literal|"TokenFilterFactory"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReplacePropertiesPlaceholderSystemProperty
specifier|public
name|void
name|testReplacePropertiesPlaceholderSystemProperty
parameter_list|()
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"sysProp1"
argument_list|,
literal|"sysVal1"
argument_list|)
expr_stmt|;
try|try
block|{
name|Settings
name|settings
init|=
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"setting1"
argument_list|,
literal|"${sysProp1}"
argument_list|)
operator|.
name|replacePropertyPlaceholders
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|settings
operator|.
name|get
argument_list|(
literal|"setting1"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"sysVal1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|System
operator|.
name|clearProperty
argument_list|(
literal|"sysProp1"
argument_list|)
expr_stmt|;
block|}
name|Settings
name|settings
init|=
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"setting1"
argument_list|,
literal|"${sysProp1:defaultVal1}"
argument_list|)
operator|.
name|replacePropertyPlaceholders
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|settings
operator|.
name|get
argument_list|(
literal|"setting1"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"defaultVal1"
argument_list|)
argument_list|)
expr_stmt|;
name|settings
operator|=
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"setting1"
argument_list|,
literal|"${sysProp1:}"
argument_list|)
operator|.
name|replacePropertyPlaceholders
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|settings
operator|.
name|get
argument_list|(
literal|"setting1"
argument_list|)
argument_list|,
name|is
argument_list|(
name|nullValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReplacePropertiesPlaceholderIgnoreEnvUnset
specifier|public
name|void
name|testReplacePropertiesPlaceholderIgnoreEnvUnset
parameter_list|()
block|{
name|Settings
name|settings
init|=
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"setting1"
argument_list|,
literal|"${env.UNSET_ENV_VAR}"
argument_list|)
operator|.
name|replacePropertyPlaceholders
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|settings
operator|.
name|get
argument_list|(
literal|"setting1"
argument_list|)
argument_list|,
name|is
argument_list|(
name|nullValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

