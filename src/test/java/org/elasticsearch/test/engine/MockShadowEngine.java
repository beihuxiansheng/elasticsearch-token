begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.test.engine
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|engine
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|AssertingDirectoryReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DirectoryReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|AssertingIndexSearcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|SearcherManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|EngineConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|EngineException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|ShadowEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchIntegrationTest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_class
DECL|class|MockShadowEngine
specifier|public
class|class
name|MockShadowEngine
extends|extends
name|ShadowEngine
block|{
DECL|field|mockContext
specifier|private
specifier|final
name|MockInternalEngine
operator|.
name|MockContext
name|mockContext
decl_stmt|;
DECL|field|INFLIGHT_ENGINE_SEARCHERS
specifier|public
specifier|static
specifier|final
name|ConcurrentMap
argument_list|<
name|AssertingSearcher
argument_list|,
name|RuntimeException
argument_list|>
name|INFLIGHT_ENGINE_SEARCHERS
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|MockShadowEngine
specifier|public
name|MockShadowEngine
parameter_list|(
name|EngineConfig
name|config
parameter_list|)
block|{
name|super
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|Settings
name|indexSettings
init|=
name|config
operator|.
name|getIndexSettings
argument_list|()
decl_stmt|;
specifier|final
name|long
name|seed
init|=
name|indexSettings
operator|.
name|getAsLong
argument_list|(
name|ElasticsearchIntegrationTest
operator|.
name|SETTING_INDEX_SEED
argument_list|,
literal|0l
argument_list|)
decl_stmt|;
name|Random
name|random
init|=
operator|new
name|Random
argument_list|(
name|seed
argument_list|)
decl_stmt|;
specifier|final
name|double
name|ratio
init|=
name|indexSettings
operator|.
name|getAsDouble
argument_list|(
name|MockInternalEngine
operator|.
name|WRAP_READER_RATIO
argument_list|,
literal|0.0d
argument_list|)
decl_stmt|;
comment|// DISABLED by default - AssertingDR is crazy slow
name|Class
argument_list|<
name|?
extends|extends
name|AssertingDirectoryReader
argument_list|>
name|wrapper
init|=
name|indexSettings
operator|.
name|getAsClass
argument_list|(
name|MockInternalEngine
operator|.
name|READER_WRAPPER_TYPE
argument_list|,
name|AssertingDirectoryReader
operator|.
name|class
argument_list|)
decl_stmt|;
name|boolean
name|wrapReader
init|=
name|random
operator|.
name|nextDouble
argument_list|()
operator|<
name|ratio
decl_stmt|;
name|logger
operator|.
name|trace
argument_list|(
literal|"Using [{}] for shard [{}] seed: [{}] wrapReader: [{}]"
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|shardId
argument_list|,
name|seed
argument_list|,
name|wrapReader
argument_list|)
expr_stmt|;
name|mockContext
operator|=
operator|new
name|MockInternalEngine
operator|.
name|MockContext
argument_list|(
name|random
argument_list|,
name|wrapReader
argument_list|,
name|wrapper
argument_list|,
name|indexSettings
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
comment|// log debug if we have pending searchers
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|AssertingSearcher
argument_list|,
name|RuntimeException
argument_list|>
name|entry
range|:
name|INFLIGHT_ENGINE_SEARCHERS
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"Unreleased Searchers instance for shard [{}]"
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|shardId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|newSearcher
specifier|protected
name|Searcher
name|newSearcher
parameter_list|(
name|String
name|source
parameter_list|,
name|IndexSearcher
name|searcher
parameter_list|,
name|SearcherManager
name|manager
parameter_list|)
throws|throws
name|EngineException
block|{
name|IndexReader
name|reader
init|=
name|searcher
operator|.
name|getIndexReader
argument_list|()
decl_stmt|;
name|IndexReader
name|wrappedReader
init|=
name|reader
decl_stmt|;
if|if
condition|(
name|reader
operator|instanceof
name|DirectoryReader
operator|&&
name|mockContext
operator|.
name|wrapReader
condition|)
block|{
name|wrappedReader
operator|=
name|wrapReader
argument_list|(
operator|(
name|DirectoryReader
operator|)
name|reader
argument_list|)
expr_stmt|;
block|}
comment|// this executes basic query checks and asserts that weights are normalized only once etc.
specifier|final
name|AssertingIndexSearcher
name|assertingIndexSearcher
init|=
operator|new
name|AssertingIndexSearcher
argument_list|(
name|mockContext
operator|.
name|random
argument_list|,
name|wrappedReader
argument_list|)
decl_stmt|;
name|assertingIndexSearcher
operator|.
name|setSimilarity
argument_list|(
name|searcher
operator|.
name|getSimilarity
argument_list|()
argument_list|)
expr_stmt|;
comment|// pass the original searcher to the super.newSearcher() method to make
comment|// sure this is the searcher that will be released later on. If we wrap
comment|// an index reader here must not pass the wrapped version to the manager
comment|// on release otherwise the reader will be closed too early. - good
comment|// news, stuff will fail all over the place if we don't get this
comment|// right here
return|return
operator|new
name|AssertingSearcher
argument_list|(
name|assertingIndexSearcher
argument_list|,
name|super
operator|.
name|newSearcher
argument_list|(
name|source
argument_list|,
name|searcher
argument_list|,
name|manager
argument_list|)
argument_list|,
name|shardId
argument_list|,
name|INFLIGHT_ENGINE_SEARCHERS
argument_list|,
name|logger
argument_list|)
return|;
block|}
DECL|method|wrapReader
specifier|private
name|DirectoryReader
name|wrapReader
parameter_list|(
name|DirectoryReader
name|reader
parameter_list|)
block|{
try|try
block|{
name|Constructor
argument_list|<
name|?
argument_list|>
index|[]
name|constructors
init|=
name|mockContext
operator|.
name|wrapper
operator|.
name|getConstructors
argument_list|()
decl_stmt|;
name|Constructor
argument_list|<
name|?
argument_list|>
name|nonRandom
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Constructor
argument_list|<
name|?
argument_list|>
name|constructor
range|:
name|constructors
control|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|parameterTypes
init|=
name|constructor
operator|.
name|getParameterTypes
argument_list|()
decl_stmt|;
if|if
condition|(
name|parameterTypes
operator|.
name|length
operator|>
literal|0
operator|&&
name|parameterTypes
index|[
literal|0
index|]
operator|==
name|DirectoryReader
operator|.
name|class
condition|)
block|{
if|if
condition|(
name|parameterTypes
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|nonRandom
operator|=
name|constructor
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parameterTypes
operator|.
name|length
operator|==
literal|2
operator|&&
name|parameterTypes
index|[
literal|1
index|]
operator|==
name|Settings
operator|.
name|class
condition|)
block|{
return|return
operator|(
name|DirectoryReader
operator|)
name|constructor
operator|.
name|newInstance
argument_list|(
name|reader
argument_list|,
name|mockContext
operator|.
name|indexSettings
argument_list|)
return|;
block|}
block|}
block|}
if|if
condition|(
name|nonRandom
operator|!=
literal|null
condition|)
block|{
return|return
operator|(
name|DirectoryReader
operator|)
name|nonRandom
operator|.
name|newInstance
argument_list|(
name|reader
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ElasticsearchException
argument_list|(
literal|"Can not wrap reader"
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|reader
return|;
block|}
block|}
end_class

end_unit

