begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.test.stress.leaks
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|stress
operator|.
name|leaks
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|monitor
operator|.
name|jvm
operator|.
name|JvmService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|monitor
operator|.
name|network
operator|.
name|NetworkService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|monitor
operator|.
name|os
operator|.
name|OsService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|monitor
operator|.
name|process
operator|.
name|ProcessService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|node
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|node
operator|.
name|internal
operator|.
name|InternalNode
import|;
end_import

begin_class
DECL|class|GenericStatsLeak
specifier|public
class|class
name|GenericStatsLeak
block|{
DECL|method|main
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|InternalNode
name|node
init|=
operator|(
name|InternalNode
operator|)
name|NodeBuilder
operator|.
name|nodeBuilder
argument_list|()
operator|.
name|settings
argument_list|(
name|ImmutableSettings
operator|.
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"monitor.os.refresh_interval"
argument_list|,
literal|0
argument_list|)
operator|.
name|put
argument_list|(
literal|"monitor.process.refresh_interval"
argument_list|,
literal|0
argument_list|)
operator|.
name|put
argument_list|(
literal|"monitor.network.refresh_interval"
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|.
name|node
argument_list|()
decl_stmt|;
name|JvmService
name|jvmService
init|=
name|node
operator|.
name|injector
argument_list|()
operator|.
name|getInstance
argument_list|(
name|JvmService
operator|.
name|class
argument_list|)
decl_stmt|;
name|OsService
name|osService
init|=
name|node
operator|.
name|injector
argument_list|()
operator|.
name|getInstance
argument_list|(
name|OsService
operator|.
name|class
argument_list|)
decl_stmt|;
name|ProcessService
name|processService
init|=
name|node
operator|.
name|injector
argument_list|()
operator|.
name|getInstance
argument_list|(
name|ProcessService
operator|.
name|class
argument_list|)
decl_stmt|;
name|NetworkService
name|networkService
init|=
name|node
operator|.
name|injector
argument_list|()
operator|.
name|getInstance
argument_list|(
name|NetworkService
operator|.
name|class
argument_list|)
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|jvmService
operator|.
name|stats
argument_list|()
expr_stmt|;
name|osService
operator|.
name|stats
argument_list|()
expr_stmt|;
name|processService
operator|.
name|stats
argument_list|()
expr_stmt|;
name|networkService
operator|.
name|stats
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

