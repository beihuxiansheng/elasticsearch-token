begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.test.hamcrest
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticSearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionFuture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ShardOperationFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|create
operator|.
name|CreateIndexRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|create
operator|.
name|CreateIndexResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|delete
operator|.
name|DeleteIndexRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|delete
operator|.
name|DeleteIndexResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|mapping
operator|.
name|put
operator|.
name|PutMappingRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|mapping
operator|.
name|put
operator|.
name|PutMappingResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|count
operator|.
name|CountResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|ShardSearchFailure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|broadcast
operator|.
name|BroadcastOperationResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|master
operator|.
name|AcknowledgedResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|BytesStreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|BytesStreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Streamable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchHit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|Suggest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|MatcherAssert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|ElasticsearchAssertions
specifier|public
class|class
name|ElasticsearchAssertions
block|{
DECL|method|assertAcked
specifier|public
specifier|static
name|void
name|assertAcked
parameter_list|(
name|AcknowledgedResponse
name|response
parameter_list|)
block|{
name|assertThat
argument_list|(
name|response
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" failed - not acked"
argument_list|,
name|response
operator|.
name|isAcknowledged
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertVersionSerializable
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
DECL|method|assertAcked
specifier|public
specifier|static
name|void
name|assertAcked
parameter_list|(
name|PutMappingRequestBuilder
name|builder
parameter_list|)
block|{
name|assertAcked
argument_list|(
name|builder
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|assertAcked
specifier|private
specifier|static
name|void
name|assertAcked
parameter_list|(
name|PutMappingResponse
name|response
parameter_list|)
block|{
name|assertThat
argument_list|(
literal|"Put Mapping failed - not acked"
argument_list|,
name|response
operator|.
name|isAcknowledged
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertVersionSerializable
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
DECL|method|assertAcked
specifier|public
specifier|static
name|void
name|assertAcked
parameter_list|(
name|DeleteIndexRequestBuilder
name|builder
parameter_list|)
block|{
name|assertAcked
argument_list|(
name|builder
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|assertAcked
specifier|public
specifier|static
name|void
name|assertAcked
parameter_list|(
name|CreateIndexRequestBuilder
name|builder
parameter_list|)
block|{
name|assertAcked
argument_list|(
name|builder
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|assertAcked
specifier|public
specifier|static
name|void
name|assertAcked
parameter_list|(
name|DeleteIndexResponse
name|response
parameter_list|)
block|{
name|assertThat
argument_list|(
literal|"Delete Index failed - not acked"
argument_list|,
name|response
operator|.
name|isAcknowledged
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertVersionSerializable
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
DECL|method|assertAcked
specifier|public
specifier|static
name|void
name|assertAcked
parameter_list|(
name|CreateIndexResponse
name|response
parameter_list|)
block|{
name|assertThat
argument_list|(
literal|"Create Index failed - not acked"
argument_list|,
name|response
operator|.
name|isAcknowledged
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertVersionSerializable
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
DECL|method|formatShardStatus
specifier|public
specifier|static
name|String
name|formatShardStatus
parameter_list|(
name|BroadcastOperationResponse
name|response
parameter_list|)
block|{
name|String
name|msg
init|=
literal|" Total shards: "
operator|+
name|response
operator|.
name|getTotalShards
argument_list|()
operator|+
literal|" Successful shards: "
operator|+
name|response
operator|.
name|getSuccessfulShards
argument_list|()
operator|+
literal|"& "
operator|+
name|response
operator|.
name|getFailedShards
argument_list|()
operator|+
literal|" shard failures:"
decl_stmt|;
for|for
control|(
name|ShardOperationFailedException
name|failure
range|:
name|response
operator|.
name|getShardFailures
argument_list|()
control|)
block|{
name|msg
operator|+=
literal|"\n "
operator|+
name|failure
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
return|return
name|msg
return|;
block|}
DECL|method|formatShardStatus
specifier|public
specifier|static
name|String
name|formatShardStatus
parameter_list|(
name|SearchResponse
name|response
parameter_list|)
block|{
name|String
name|msg
init|=
literal|" Total shards: "
operator|+
name|response
operator|.
name|getTotalShards
argument_list|()
operator|+
literal|" Successful shards: "
operator|+
name|response
operator|.
name|getSuccessfulShards
argument_list|()
operator|+
literal|"& "
operator|+
name|response
operator|.
name|getFailedShards
argument_list|()
operator|+
literal|" shard failures:"
decl_stmt|;
for|for
control|(
name|ShardSearchFailure
name|failure
range|:
name|response
operator|.
name|getShardFailures
argument_list|()
control|)
block|{
name|msg
operator|+=
literal|"\n "
operator|+
name|failure
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
return|return
name|msg
return|;
block|}
comment|/*      * assertions      */
DECL|method|assertHitCount
specifier|public
specifier|static
name|void
name|assertHitCount
parameter_list|(
name|SearchResponse
name|searchResponse
parameter_list|,
name|long
name|expectedHitCount
parameter_list|)
block|{
if|if
condition|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|totalHits
argument_list|()
operator|!=
name|expectedHitCount
condition|)
block|{
name|fail
argument_list|(
literal|"Hit count is "
operator|+
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|totalHits
argument_list|()
operator|+
literal|" but "
operator|+
name|expectedHitCount
operator|+
literal|" was expected. "
operator|+
name|formatShardStatus
argument_list|(
name|searchResponse
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertVersionSerializable
argument_list|(
name|searchResponse
argument_list|)
expr_stmt|;
block|}
DECL|method|assertSearchHits
specifier|public
specifier|static
name|void
name|assertSearchHits
parameter_list|(
name|SearchResponse
name|searchResponse
parameter_list|,
name|String
modifier|...
name|ids
parameter_list|)
block|{
name|String
name|shardStatus
init|=
name|formatShardStatus
argument_list|(
name|searchResponse
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
literal|"Expected different hit count. "
operator|+
name|shardStatus
argument_list|,
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
name|ids
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|idsSet
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|ids
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|SearchHit
name|hit
range|:
name|searchResponse
operator|.
name|getHits
argument_list|()
control|)
block|{
name|assertThat
argument_list|(
literal|"Expected id: "
operator|+
name|hit
operator|.
name|getId
argument_list|()
operator|+
literal|" in the result but wasn't."
operator|+
name|shardStatus
argument_list|,
name|idsSet
operator|.
name|remove
argument_list|(
name|hit
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
literal|"Expected ids: "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|idsSet
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
argument_list|)
operator|+
literal|" in the result - result size differs."
operator|+
name|shardStatus
argument_list|,
name|idsSet
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertVersionSerializable
argument_list|(
name|searchResponse
argument_list|)
expr_stmt|;
block|}
DECL|method|assertOrderedSearchHits
specifier|public
specifier|static
name|void
name|assertOrderedSearchHits
parameter_list|(
name|SearchResponse
name|searchResponse
parameter_list|,
name|String
modifier|...
name|ids
parameter_list|)
block|{
name|String
name|shardStatus
init|=
name|formatShardStatus
argument_list|(
name|searchResponse
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
literal|"Expected different hit count. "
operator|+
name|shardStatus
argument_list|,
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
name|ids
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ids
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|SearchHit
name|hit
init|=
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
index|[
name|i
index|]
decl_stmt|;
name|assertThat
argument_list|(
literal|"Expected id: "
operator|+
name|ids
index|[
name|i
index|]
operator|+
literal|" at position "
operator|+
name|i
operator|+
literal|" but wasn't."
operator|+
name|shardStatus
argument_list|,
name|hit
operator|.
name|getId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|ids
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertVersionSerializable
argument_list|(
name|searchResponse
argument_list|)
expr_stmt|;
block|}
DECL|method|assertHitCount
specifier|public
specifier|static
name|void
name|assertHitCount
parameter_list|(
name|CountResponse
name|countResponse
parameter_list|,
name|long
name|expectedHitCount
parameter_list|)
block|{
if|if
condition|(
name|countResponse
operator|.
name|getCount
argument_list|()
operator|!=
name|expectedHitCount
condition|)
block|{
name|fail
argument_list|(
literal|"Count is "
operator|+
name|countResponse
operator|.
name|getCount
argument_list|()
operator|+
literal|" but "
operator|+
name|expectedHitCount
operator|+
literal|" was expected. "
operator|+
name|formatShardStatus
argument_list|(
name|countResponse
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertVersionSerializable
argument_list|(
name|countResponse
argument_list|)
expr_stmt|;
block|}
DECL|method|assertFirstHit
specifier|public
specifier|static
name|void
name|assertFirstHit
parameter_list|(
name|SearchResponse
name|searchResponse
parameter_list|,
name|Matcher
argument_list|<
name|SearchHit
argument_list|>
name|matcher
parameter_list|)
block|{
name|assertSearchHit
argument_list|(
name|searchResponse
argument_list|,
literal|1
argument_list|,
name|matcher
argument_list|)
expr_stmt|;
block|}
DECL|method|assertSecondHit
specifier|public
specifier|static
name|void
name|assertSecondHit
parameter_list|(
name|SearchResponse
name|searchResponse
parameter_list|,
name|Matcher
argument_list|<
name|SearchHit
argument_list|>
name|matcher
parameter_list|)
block|{
name|assertSearchHit
argument_list|(
name|searchResponse
argument_list|,
literal|2
argument_list|,
name|matcher
argument_list|)
expr_stmt|;
block|}
DECL|method|assertThirdHit
specifier|public
specifier|static
name|void
name|assertThirdHit
parameter_list|(
name|SearchResponse
name|searchResponse
parameter_list|,
name|Matcher
argument_list|<
name|SearchHit
argument_list|>
name|matcher
parameter_list|)
block|{
name|assertSearchHit
argument_list|(
name|searchResponse
argument_list|,
literal|3
argument_list|,
name|matcher
argument_list|)
expr_stmt|;
block|}
DECL|method|assertSearchHit
specifier|public
specifier|static
name|void
name|assertSearchHit
parameter_list|(
name|SearchResponse
name|searchResponse
parameter_list|,
name|int
name|number
parameter_list|,
name|Matcher
argument_list|<
name|SearchHit
argument_list|>
name|matcher
parameter_list|)
block|{
assert|assert
name|number
operator|>
literal|0
assert|;
name|assertThat
argument_list|(
literal|"SearchHit number must be greater than 0"
argument_list|,
name|number
argument_list|,
name|greaterThan
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|totalHits
argument_list|()
argument_list|,
name|greaterThanOrEqualTo
argument_list|(
operator|(
name|long
operator|)
name|number
argument_list|)
argument_list|)
expr_stmt|;
name|assertSearchHit
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
name|number
operator|-
literal|1
argument_list|)
argument_list|,
name|matcher
argument_list|)
expr_stmt|;
name|assertVersionSerializable
argument_list|(
name|searchResponse
argument_list|)
expr_stmt|;
block|}
DECL|method|assertNoFailures
specifier|public
specifier|static
name|void
name|assertNoFailures
parameter_list|(
name|SearchResponse
name|searchResponse
parameter_list|)
block|{
name|assertThat
argument_list|(
literal|"Unexpected ShardFailures: "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|searchResponse
operator|.
name|getShardFailures
argument_list|()
argument_list|)
argument_list|,
name|searchResponse
operator|.
name|getShardFailures
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertVersionSerializable
argument_list|(
name|searchResponse
argument_list|)
expr_stmt|;
block|}
DECL|method|assertNoFailures
specifier|public
specifier|static
name|void
name|assertNoFailures
parameter_list|(
name|BroadcastOperationResponse
name|response
parameter_list|)
block|{
name|assertThat
argument_list|(
literal|"Unexpected ShardFailures: "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|response
operator|.
name|getShardFailures
argument_list|()
argument_list|)
argument_list|,
name|response
operator|.
name|getFailedShards
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertVersionSerializable
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
DECL|method|assertSearchHit
specifier|public
specifier|static
name|void
name|assertSearchHit
parameter_list|(
name|SearchHit
name|searchHit
parameter_list|,
name|Matcher
argument_list|<
name|SearchHit
argument_list|>
name|matcher
parameter_list|)
block|{
name|assertThat
argument_list|(
name|searchHit
argument_list|,
name|matcher
argument_list|)
expr_stmt|;
name|assertVersionSerializable
argument_list|(
name|searchHit
argument_list|)
expr_stmt|;
block|}
DECL|method|assertHighlight
specifier|public
specifier|static
name|void
name|assertHighlight
parameter_list|(
name|SearchResponse
name|resp
parameter_list|,
name|int
name|hit
parameter_list|,
name|String
name|field
parameter_list|,
name|int
name|fragment
parameter_list|,
name|Matcher
argument_list|<
name|String
argument_list|>
name|matcher
parameter_list|)
block|{
name|assertHighlight
argument_list|(
name|resp
argument_list|,
name|hit
argument_list|,
name|field
argument_list|,
name|fragment
argument_list|,
name|greaterThan
argument_list|(
name|fragment
argument_list|)
argument_list|,
name|matcher
argument_list|)
expr_stmt|;
block|}
DECL|method|assertHighlight
specifier|public
specifier|static
name|void
name|assertHighlight
parameter_list|(
name|SearchResponse
name|resp
parameter_list|,
name|int
name|hit
parameter_list|,
name|String
name|field
parameter_list|,
name|int
name|fragment
parameter_list|,
name|int
name|totalFragments
parameter_list|,
name|Matcher
argument_list|<
name|String
argument_list|>
name|matcher
parameter_list|)
block|{
name|assertHighlight
argument_list|(
name|resp
argument_list|,
name|hit
argument_list|,
name|field
argument_list|,
name|fragment
argument_list|,
name|equalTo
argument_list|(
name|totalFragments
argument_list|)
argument_list|,
name|matcher
argument_list|)
expr_stmt|;
block|}
DECL|method|assertHighlight
specifier|public
specifier|static
name|void
name|assertHighlight
parameter_list|(
name|SearchHit
name|hit
parameter_list|,
name|String
name|field
parameter_list|,
name|int
name|fragment
parameter_list|,
name|Matcher
argument_list|<
name|String
argument_list|>
name|matcher
parameter_list|)
block|{
name|assertHighlight
argument_list|(
name|hit
argument_list|,
name|field
argument_list|,
name|fragment
argument_list|,
name|greaterThan
argument_list|(
name|fragment
argument_list|)
argument_list|,
name|matcher
argument_list|)
expr_stmt|;
block|}
DECL|method|assertHighlight
specifier|public
specifier|static
name|void
name|assertHighlight
parameter_list|(
name|SearchHit
name|hit
parameter_list|,
name|String
name|field
parameter_list|,
name|int
name|fragment
parameter_list|,
name|int
name|totalFragments
parameter_list|,
name|Matcher
argument_list|<
name|String
argument_list|>
name|matcher
parameter_list|)
block|{
name|assertHighlight
argument_list|(
name|hit
argument_list|,
name|field
argument_list|,
name|fragment
argument_list|,
name|equalTo
argument_list|(
name|totalFragments
argument_list|)
argument_list|,
name|matcher
argument_list|)
expr_stmt|;
block|}
DECL|method|assertHighlight
specifier|private
specifier|static
name|void
name|assertHighlight
parameter_list|(
name|SearchResponse
name|resp
parameter_list|,
name|int
name|hit
parameter_list|,
name|String
name|field
parameter_list|,
name|int
name|fragment
parameter_list|,
name|Matcher
argument_list|<
name|Integer
argument_list|>
name|fragmentsMatcher
parameter_list|,
name|Matcher
argument_list|<
name|String
argument_list|>
name|matcher
parameter_list|)
block|{
name|assertNoFailures
argument_list|(
name|resp
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"not enough hits"
argument_list|,
name|resp
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
operator|.
name|length
argument_list|,
name|greaterThan
argument_list|(
name|hit
argument_list|)
argument_list|)
expr_stmt|;
name|assertHighlight
argument_list|(
name|resp
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
index|[
name|hit
index|]
argument_list|,
name|field
argument_list|,
name|fragment
argument_list|,
name|fragmentsMatcher
argument_list|,
name|matcher
argument_list|)
expr_stmt|;
name|assertVersionSerializable
argument_list|(
name|resp
argument_list|)
expr_stmt|;
block|}
DECL|method|assertHighlight
specifier|private
specifier|static
name|void
name|assertHighlight
parameter_list|(
name|SearchHit
name|hit
parameter_list|,
name|String
name|field
parameter_list|,
name|int
name|fragment
parameter_list|,
name|Matcher
argument_list|<
name|Integer
argument_list|>
name|fragmentsMatcher
parameter_list|,
name|Matcher
argument_list|<
name|String
argument_list|>
name|matcher
parameter_list|)
block|{
name|assertThat
argument_list|(
name|hit
operator|.
name|getHighlightFields
argument_list|()
argument_list|,
name|hasKey
argument_list|(
name|field
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|hit
operator|.
name|getHighlightFields
argument_list|()
operator|.
name|get
argument_list|(
name|field
argument_list|)
operator|.
name|fragments
argument_list|()
operator|.
name|length
argument_list|,
name|fragmentsMatcher
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|hit
operator|.
name|highlightFields
argument_list|()
operator|.
name|get
argument_list|(
name|field
argument_list|)
operator|.
name|fragments
argument_list|()
index|[
name|fragment
index|]
operator|.
name|string
argument_list|()
argument_list|,
name|matcher
argument_list|)
expr_stmt|;
block|}
DECL|method|assertNotHighlighted
specifier|public
specifier|static
name|void
name|assertNotHighlighted
parameter_list|(
name|SearchResponse
name|resp
parameter_list|,
name|int
name|hit
parameter_list|,
name|String
name|field
parameter_list|)
block|{
name|assertNoFailures
argument_list|(
name|resp
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"not enough hits"
argument_list|,
name|resp
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
operator|.
name|length
argument_list|,
name|greaterThan
argument_list|(
name|hit
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|resp
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
index|[
name|hit
index|]
operator|.
name|getHighlightFields
argument_list|()
argument_list|,
name|not
argument_list|(
name|hasKey
argument_list|(
name|field
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertSuggestionSize
specifier|public
specifier|static
name|void
name|assertSuggestionSize
parameter_list|(
name|Suggest
name|searchSuggest
parameter_list|,
name|int
name|entry
parameter_list|,
name|int
name|size
parameter_list|,
name|String
name|key
parameter_list|)
block|{
name|assertThat
argument_list|(
name|searchSuggest
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchSuggest
operator|.
name|size
argument_list|()
argument_list|,
name|greaterThanOrEqualTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchSuggest
operator|.
name|getSuggestion
argument_list|(
name|key
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchSuggest
operator|.
name|getSuggestion
argument_list|(
name|key
argument_list|)
operator|.
name|getEntries
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|greaterThanOrEqualTo
argument_list|(
name|entry
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchSuggest
operator|.
name|getSuggestion
argument_list|(
name|key
argument_list|)
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
name|entry
argument_list|)
operator|.
name|getOptions
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|size
argument_list|)
argument_list|)
expr_stmt|;
name|assertVersionSerializable
argument_list|(
name|searchSuggest
argument_list|)
expr_stmt|;
block|}
DECL|method|assertSuggestion
specifier|public
specifier|static
name|void
name|assertSuggestion
parameter_list|(
name|Suggest
name|searchSuggest
parameter_list|,
name|int
name|entry
parameter_list|,
name|int
name|ord
parameter_list|,
name|String
name|key
parameter_list|,
name|String
name|text
parameter_list|)
block|{
name|assertThat
argument_list|(
name|searchSuggest
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchSuggest
operator|.
name|size
argument_list|()
argument_list|,
name|greaterThanOrEqualTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchSuggest
operator|.
name|getSuggestion
argument_list|(
name|key
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchSuggest
operator|.
name|getSuggestion
argument_list|(
name|key
argument_list|)
operator|.
name|getEntries
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|greaterThanOrEqualTo
argument_list|(
name|entry
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchSuggest
operator|.
name|getSuggestion
argument_list|(
name|key
argument_list|)
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
name|entry
argument_list|)
operator|.
name|getOptions
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
name|ord
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchSuggest
operator|.
name|getSuggestion
argument_list|(
name|key
argument_list|)
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
name|entry
argument_list|)
operator|.
name|getOptions
argument_list|()
operator|.
name|get
argument_list|(
name|ord
argument_list|)
operator|.
name|getText
argument_list|()
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|text
argument_list|)
argument_list|)
expr_stmt|;
name|assertVersionSerializable
argument_list|(
name|searchSuggest
argument_list|)
expr_stmt|;
block|}
comment|/**      * Assert suggestion returns exactly the provided text.      */
DECL|method|assertSuggestion
specifier|public
specifier|static
name|void
name|assertSuggestion
parameter_list|(
name|Suggest
name|searchSuggest
parameter_list|,
name|int
name|entry
parameter_list|,
name|String
name|key
parameter_list|,
name|String
modifier|...
name|text
parameter_list|)
block|{
name|assertSuggestion
argument_list|(
name|searchSuggest
argument_list|,
name|entry
argument_list|,
name|key
argument_list|,
name|text
operator|.
name|length
argument_list|,
name|text
argument_list|)
expr_stmt|;
block|}
comment|/**      * Assert suggestion returns size suggestions and the first are the provided      * text.      */
DECL|method|assertSuggestion
specifier|public
specifier|static
name|void
name|assertSuggestion
parameter_list|(
name|Suggest
name|searchSuggest
parameter_list|,
name|int
name|entry
parameter_list|,
name|String
name|key
parameter_list|,
name|int
name|size
parameter_list|,
name|String
modifier|...
name|text
parameter_list|)
block|{
name|assertSuggestionSize
argument_list|(
name|searchSuggest
argument_list|,
name|entry
argument_list|,
name|size
argument_list|,
name|key
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|text
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertSuggestion
argument_list|(
name|searchSuggest
argument_list|,
name|entry
argument_list|,
name|i
argument_list|,
name|key
argument_list|,
name|text
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*      * matchers      */
DECL|method|hasId
specifier|public
specifier|static
name|Matcher
argument_list|<
name|SearchHit
argument_list|>
name|hasId
parameter_list|(
specifier|final
name|String
name|id
parameter_list|)
block|{
return|return
operator|new
name|ElasticsearchMatchers
operator|.
name|SearchHitHasIdMatcher
argument_list|(
name|id
argument_list|)
return|;
block|}
DECL|method|hasType
specifier|public
specifier|static
name|Matcher
argument_list|<
name|SearchHit
argument_list|>
name|hasType
parameter_list|(
specifier|final
name|String
name|type
parameter_list|)
block|{
return|return
operator|new
name|ElasticsearchMatchers
operator|.
name|SearchHitHasTypeMatcher
argument_list|(
name|type
argument_list|)
return|;
block|}
DECL|method|hasIndex
specifier|public
specifier|static
name|Matcher
argument_list|<
name|SearchHit
argument_list|>
name|hasIndex
parameter_list|(
specifier|final
name|String
name|index
parameter_list|)
block|{
return|return
operator|new
name|ElasticsearchMatchers
operator|.
name|SearchHitHasIndexMatcher
argument_list|(
name|index
argument_list|)
return|;
block|}
DECL|method|assertBooleanSubQuery
specifier|public
specifier|static
parameter_list|<
name|T
extends|extends
name|Query
parameter_list|>
name|T
name|assertBooleanSubQuery
parameter_list|(
name|Query
name|query
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|subqueryType
parameter_list|,
name|int
name|i
parameter_list|)
block|{
name|assertThat
argument_list|(
name|query
argument_list|,
name|instanceOf
argument_list|(
name|BooleanQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|BooleanQuery
name|q
init|=
operator|(
name|BooleanQuery
operator|)
name|query
decl_stmt|;
name|assertThat
argument_list|(
name|q
operator|.
name|getClauses
argument_list|()
operator|.
name|length
argument_list|,
name|greaterThan
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|q
operator|.
name|getClauses
argument_list|()
index|[
name|i
index|]
operator|.
name|getQuery
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|subqueryType
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|(
name|T
operator|)
name|q
operator|.
name|getClauses
argument_list|()
index|[
name|i
index|]
operator|.
name|getQuery
argument_list|()
return|;
block|}
DECL|method|assertThrows
specifier|public
specifier|static
parameter_list|<
name|E
extends|extends
name|Throwable
parameter_list|>
name|void
name|assertThrows
parameter_list|(
name|ActionRequestBuilder
argument_list|<
name|?
argument_list|,
name|?
argument_list|,
name|?
argument_list|>
name|builder
parameter_list|,
name|Class
argument_list|<
name|E
argument_list|>
name|exceptionClass
parameter_list|)
block|{
name|assertThrows
argument_list|(
name|builder
operator|.
name|execute
argument_list|()
argument_list|,
name|exceptionClass
argument_list|)
expr_stmt|;
block|}
DECL|method|assertThrows
specifier|public
specifier|static
parameter_list|<
name|E
extends|extends
name|Throwable
parameter_list|>
name|void
name|assertThrows
parameter_list|(
name|ActionRequestBuilder
argument_list|<
name|?
argument_list|,
name|?
argument_list|,
name|?
argument_list|>
name|builder
parameter_list|,
name|Class
argument_list|<
name|E
argument_list|>
name|exceptionClass
parameter_list|,
name|String
name|extraInfo
parameter_list|)
block|{
name|assertThrows
argument_list|(
name|builder
operator|.
name|execute
argument_list|()
argument_list|,
name|exceptionClass
argument_list|,
name|extraInfo
argument_list|)
expr_stmt|;
block|}
DECL|method|assertThrows
specifier|public
specifier|static
parameter_list|<
name|E
extends|extends
name|Throwable
parameter_list|>
name|void
name|assertThrows
parameter_list|(
name|ActionFuture
name|future
parameter_list|,
name|Class
argument_list|<
name|E
argument_list|>
name|exceptionClass
parameter_list|)
block|{
name|assertThrows
argument_list|(
name|future
argument_list|,
name|exceptionClass
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|assertThrows
specifier|public
specifier|static
parameter_list|<
name|E
extends|extends
name|Throwable
parameter_list|>
name|void
name|assertThrows
parameter_list|(
name|ActionFuture
name|future
parameter_list|,
name|Class
argument_list|<
name|E
argument_list|>
name|exceptionClass
parameter_list|,
name|String
name|extraInfo
parameter_list|)
block|{
name|boolean
name|fail
init|=
literal|false
decl_stmt|;
name|extraInfo
operator|=
name|extraInfo
operator|==
literal|null
operator|||
name|extraInfo
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
name|extraInfo
operator|+
literal|": "
expr_stmt|;
name|extraInfo
operator|+=
literal|"expected a "
operator|+
name|exceptionClass
operator|+
literal|" exception to be thrown"
expr_stmt|;
try|try
block|{
name|future
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|fail
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ElasticSearchException
name|esException
parameter_list|)
block|{
name|assertThat
argument_list|(
name|extraInfo
argument_list|,
name|esException
operator|.
name|unwrapCause
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|exceptionClass
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|extraInfo
argument_list|,
name|e
argument_list|,
name|instanceOf
argument_list|(
name|exceptionClass
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// has to be outside catch clause to get a proper message
if|if
condition|(
name|fail
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
name|extraInfo
argument_list|)
throw|;
block|}
block|}
DECL|method|serialize
specifier|private
specifier|static
name|BytesReference
name|serialize
parameter_list|(
name|Version
name|version
parameter_list|,
name|Streamable
name|streamable
parameter_list|)
throws|throws
name|IOException
block|{
name|BytesStreamOutput
name|output
init|=
operator|new
name|BytesStreamOutput
argument_list|()
decl_stmt|;
name|output
operator|.
name|setVersion
argument_list|(
name|version
argument_list|)
expr_stmt|;
name|streamable
operator|.
name|writeTo
argument_list|(
name|output
argument_list|)
expr_stmt|;
name|output
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return
name|output
operator|.
name|bytes
argument_list|()
return|;
block|}
DECL|method|assertVersionSerializable
specifier|public
specifier|static
name|void
name|assertVersionSerializable
parameter_list|(
name|Streamable
name|streamable
parameter_list|)
block|{
assert|assert
name|Version
operator|.
name|CURRENT
operator|.
name|after
argument_list|(
name|ElasticsearchTestCase
operator|.
name|getPreviousVersion
argument_list|()
argument_list|)
assert|;
name|assertVersionSerializable
argument_list|(
name|ElasticsearchTestCase
operator|.
name|randomVersion
argument_list|()
argument_list|,
name|streamable
argument_list|)
expr_stmt|;
block|}
DECL|method|assertVersionSerializable
specifier|public
specifier|static
name|void
name|assertVersionSerializable
parameter_list|(
name|Version
name|version
parameter_list|,
name|Streamable
name|streamable
parameter_list|)
block|{
try|try
block|{
name|Streamable
name|newInstance
init|=
name|tryCreateNewInstance
argument_list|(
name|streamable
argument_list|)
decl_stmt|;
if|if
condition|(
name|newInstance
operator|==
literal|null
condition|)
block|{
return|return;
comment|// can't create a new instance - we never modify a
comment|// streamable that comes in.
block|}
if|if
condition|(
name|streamable
operator|instanceof
name|ActionRequest
condition|)
block|{
operator|(
operator|(
name|ActionRequest
argument_list|<
name|?
argument_list|>
operator|)
name|streamable
operator|)
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
name|BytesReference
name|orig
init|=
name|serialize
argument_list|(
name|version
argument_list|,
name|streamable
argument_list|)
decl_stmt|;
name|StreamInput
name|input
init|=
operator|new
name|BytesStreamInput
argument_list|(
name|orig
argument_list|)
decl_stmt|;
name|input
operator|.
name|setVersion
argument_list|(
name|version
argument_list|)
expr_stmt|;
name|newInstance
operator|.
name|readFrom
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"Stream should be fully read with version ["
operator|+
name|version
operator|+
literal|"] for streamable ["
operator|+
name|streamable
operator|+
literal|"]"
argument_list|,
name|input
operator|.
name|available
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"Serialization failed with version ["
operator|+
name|version
operator|+
literal|"] bytes should be equal for streamable ["
operator|+
name|streamable
operator|+
literal|"]"
argument_list|,
name|serialize
argument_list|(
name|version
argument_list|,
name|streamable
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|orig
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"failed to check serialization - version ["
operator|+
name|version
operator|+
literal|"] for streamable ["
operator|+
name|streamable
operator|+
literal|"]"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
DECL|method|tryCreateNewInstance
specifier|private
specifier|static
name|Streamable
name|tryCreateNewInstance
parameter_list|(
name|Streamable
name|streamable
parameter_list|)
throws|throws
name|NoSuchMethodException
throws|,
name|InstantiationException
throws|,
name|IllegalAccessException
throws|,
name|InvocationTargetException
block|{
try|try
block|{
name|Class
argument_list|<
name|?
extends|extends
name|Streamable
argument_list|>
name|clazz
init|=
name|streamable
operator|.
name|getClass
argument_list|()
decl_stmt|;
name|Constructor
argument_list|<
name|?
extends|extends
name|Streamable
argument_list|>
name|constructor
init|=
name|clazz
operator|.
name|getDeclaredConstructor
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|constructor
argument_list|,
name|Matchers
operator|.
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|constructor
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Streamable
name|newInstance
init|=
name|constructor
operator|.
name|newInstance
argument_list|()
decl_stmt|;
return|return
name|newInstance
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

