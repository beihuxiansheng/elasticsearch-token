begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.test.hamcrest
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
package|;
end_package

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|Description
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|TypeSafeMatcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_comment
comment|/**  * Matcher that supports regular expression and allows to provide optional flags  */
end_comment

begin_class
DECL|class|RegexMatcher
specifier|public
class|class
name|RegexMatcher
extends|extends
name|TypeSafeMatcher
argument_list|<
name|String
argument_list|>
block|{
DECL|field|regex
specifier|private
specifier|final
name|String
name|regex
decl_stmt|;
DECL|field|pattern
specifier|private
specifier|final
name|Pattern
name|pattern
decl_stmt|;
DECL|method|RegexMatcher
specifier|public
name|RegexMatcher
parameter_list|(
name|String
name|regex
parameter_list|)
block|{
name|this
operator|.
name|regex
operator|=
name|regex
expr_stmt|;
name|this
operator|.
name|pattern
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
name|regex
argument_list|)
expr_stmt|;
block|}
DECL|method|RegexMatcher
specifier|public
name|RegexMatcher
parameter_list|(
name|String
name|regex
parameter_list|,
name|int
name|flag
parameter_list|)
block|{
name|this
operator|.
name|regex
operator|=
name|regex
expr_stmt|;
name|this
operator|.
name|pattern
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
name|regex
argument_list|,
name|flag
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|matchesSafely
specifier|protected
name|boolean
name|matchesSafely
parameter_list|(
name|String
name|item
parameter_list|)
block|{
return|return
name|pattern
operator|.
name|matcher
argument_list|(
name|item
argument_list|)
operator|.
name|find
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|describeTo
specifier|public
name|void
name|describeTo
parameter_list|(
name|Description
name|description
parameter_list|)
block|{
name|description
operator|.
name|appendText
argument_list|(
name|regex
argument_list|)
expr_stmt|;
block|}
DECL|method|matches
specifier|public
specifier|static
name|RegexMatcher
name|matches
parameter_list|(
name|String
name|regex
parameter_list|)
block|{
return|return
operator|new
name|RegexMatcher
argument_list|(
name|regex
argument_list|)
return|;
block|}
DECL|method|matches
specifier|public
specifier|static
name|RegexMatcher
name|matches
parameter_list|(
name|String
name|regex
parameter_list|,
name|int
name|flag
parameter_list|)
block|{
return|return
operator|new
name|RegexMatcher
argument_list|(
name|regex
argument_list|,
name|flag
argument_list|)
return|;
block|}
block|}
end_class

end_unit

