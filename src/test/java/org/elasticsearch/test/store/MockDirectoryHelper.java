begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.test.store
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|store
package|;
end_package

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|SeedUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|MockDirectoryWrapper
operator|.
name|Throttling
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cache
operator|.
name|memory
operator|.
name|ByteBufferCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|ESLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentCollections
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|store
operator|.
name|DirectoryService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|store
operator|.
name|IndexStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|store
operator|.
name|fs
operator|.
name|FsDirectoryService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|store
operator|.
name|fs
operator|.
name|MmapFsDirectoryService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|store
operator|.
name|fs
operator|.
name|NioFsDirectoryService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|store
operator|.
name|fs
operator|.
name|SimpleFsDirectoryService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|store
operator|.
name|memory
operator|.
name|ByteBufferDirectoryService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|store
operator|.
name|ram
operator|.
name|RamDirectoryService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchIntegrationTest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_class
DECL|class|MockDirectoryHelper
specifier|public
class|class
name|MockDirectoryHelper
block|{
DECL|field|RANDOM_IO_EXCEPTION_RATE
specifier|public
specifier|static
specifier|final
name|String
name|RANDOM_IO_EXCEPTION_RATE
init|=
literal|"index.store.mock.random.io_exception_rate"
decl_stmt|;
DECL|field|RANDOM_IO_EXCEPTION_RATE_ON_OPEN
specifier|public
specifier|static
specifier|final
name|String
name|RANDOM_IO_EXCEPTION_RATE_ON_OPEN
init|=
literal|"index.store.mock.random.io_exception_rate_on_open"
decl_stmt|;
DECL|field|RANDOM_THROTTLE
specifier|public
specifier|static
specifier|final
name|String
name|RANDOM_THROTTLE
init|=
literal|"index.store.mock.random.throttle"
decl_stmt|;
DECL|field|CHECK_INDEX_ON_CLOSE
specifier|public
specifier|static
specifier|final
name|String
name|CHECK_INDEX_ON_CLOSE
init|=
literal|"index.store.mock.check_index_on_close"
decl_stmt|;
DECL|field|RANDOM_PREVENT_DOUBLE_WRITE
specifier|public
specifier|static
specifier|final
name|String
name|RANDOM_PREVENT_DOUBLE_WRITE
init|=
literal|"index.store.mock.random.prevent_double_write"
decl_stmt|;
DECL|field|RANDOM_NO_DELETE_OPEN_FILE
specifier|public
specifier|static
specifier|final
name|String
name|RANDOM_NO_DELETE_OPEN_FILE
init|=
literal|"index.store.mock.random.no_delete_open_file"
decl_stmt|;
DECL|field|RANDOM_FAIL_ON_CLOSE
specifier|public
specifier|static
specifier|final
name|String
name|RANDOM_FAIL_ON_CLOSE
init|=
literal|"index.store.mock.random.fail_on_close"
decl_stmt|;
DECL|field|wrappers
specifier|public
specifier|static
specifier|final
name|Set
argument_list|<
name|ElasticsearchMockDirectoryWrapper
argument_list|>
name|wrappers
init|=
name|ConcurrentCollections
operator|.
name|newConcurrentSet
argument_list|()
decl_stmt|;
DECL|field|random
specifier|private
specifier|final
name|Random
name|random
decl_stmt|;
DECL|field|randomIOExceptionRate
specifier|private
specifier|final
name|double
name|randomIOExceptionRate
decl_stmt|;
DECL|field|randomIOExceptionRateOnOpen
specifier|private
specifier|final
name|double
name|randomIOExceptionRateOnOpen
decl_stmt|;
DECL|field|throttle
specifier|private
specifier|final
name|Throttling
name|throttle
decl_stmt|;
DECL|field|checkIndexOnClose
specifier|private
specifier|final
name|boolean
name|checkIndexOnClose
decl_stmt|;
DECL|field|indexSettings
specifier|private
specifier|final
name|Settings
name|indexSettings
decl_stmt|;
DECL|field|shardId
specifier|private
specifier|final
name|ShardId
name|shardId
decl_stmt|;
DECL|field|preventDoubleWrite
specifier|private
specifier|final
name|boolean
name|preventDoubleWrite
decl_stmt|;
DECL|field|noDeleteOpenFile
specifier|private
specifier|final
name|boolean
name|noDeleteOpenFile
decl_stmt|;
DECL|field|logger
specifier|private
specifier|final
name|ESLogger
name|logger
decl_stmt|;
DECL|field|failOnClose
specifier|private
specifier|final
name|boolean
name|failOnClose
decl_stmt|;
DECL|method|MockDirectoryHelper
specifier|public
name|MockDirectoryHelper
parameter_list|(
name|ShardId
name|shardId
parameter_list|,
name|Settings
name|indexSettings
parameter_list|,
name|ESLogger
name|logger
parameter_list|)
block|{
specifier|final
name|long
name|seed
init|=
name|indexSettings
operator|.
name|getAsLong
argument_list|(
name|ElasticsearchIntegrationTest
operator|.
name|INDEX_SEED_SETTING
argument_list|,
literal|0l
argument_list|)
decl_stmt|;
name|random
operator|=
operator|new
name|Random
argument_list|(
name|seed
argument_list|)
expr_stmt|;
name|randomIOExceptionRate
operator|=
name|indexSettings
operator|.
name|getAsDouble
argument_list|(
name|RANDOM_IO_EXCEPTION_RATE
argument_list|,
literal|0.0d
argument_list|)
expr_stmt|;
name|randomIOExceptionRateOnOpen
operator|=
name|indexSettings
operator|.
name|getAsDouble
argument_list|(
name|RANDOM_IO_EXCEPTION_RATE_ON_OPEN
argument_list|,
literal|0.0d
argument_list|)
expr_stmt|;
name|preventDoubleWrite
operator|=
name|indexSettings
operator|.
name|getAsBoolean
argument_list|(
name|RANDOM_PREVENT_DOUBLE_WRITE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// true is default in MDW
name|noDeleteOpenFile
operator|=
name|indexSettings
operator|.
name|getAsBoolean
argument_list|(
name|RANDOM_NO_DELETE_OPEN_FILE
argument_list|,
name|random
operator|.
name|nextBoolean
argument_list|()
argument_list|)
expr_stmt|;
comment|// true is default in MDW
name|random
operator|.
name|nextInt
argument_list|(
name|shardId
operator|.
name|getId
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
comment|// some randomness per shard
name|throttle
operator|=
name|Throttling
operator|.
name|valueOf
argument_list|(
name|indexSettings
operator|.
name|get
argument_list|(
name|RANDOM_THROTTLE
argument_list|,
name|random
operator|.
name|nextDouble
argument_list|()
operator|<
literal|0.1
condition|?
literal|"SOMETIMES"
else|:
literal|"NEVER"
argument_list|)
argument_list|)
expr_stmt|;
name|checkIndexOnClose
operator|=
name|indexSettings
operator|.
name|getAsBoolean
argument_list|(
name|CHECK_INDEX_ON_CLOSE
argument_list|,
name|random
operator|.
name|nextDouble
argument_list|()
operator|<
literal|0.1
argument_list|)
expr_stmt|;
name|failOnClose
operator|=
name|indexSettings
operator|.
name|getAsBoolean
argument_list|(
name|RANDOM_FAIL_ON_CLOSE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|logger
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"Using MockDirWrapper with seed [{}] throttle: [{}] checkIndexOnClose: [{}]"
argument_list|,
name|SeedUtils
operator|.
name|formatSeed
argument_list|(
name|seed
argument_list|)
argument_list|,
name|throttle
argument_list|,
name|checkIndexOnClose
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|indexSettings
operator|=
name|indexSettings
expr_stmt|;
name|this
operator|.
name|shardId
operator|=
name|shardId
expr_stmt|;
name|this
operator|.
name|logger
operator|=
name|logger
expr_stmt|;
block|}
DECL|method|wrap
specifier|public
name|Directory
name|wrap
parameter_list|(
name|Directory
name|dir
parameter_list|)
block|{
specifier|final
name|ElasticsearchMockDirectoryWrapper
name|w
init|=
operator|new
name|ElasticsearchMockDirectoryWrapper
argument_list|(
name|random
argument_list|,
name|dir
argument_list|,
name|logger
argument_list|,
name|failOnClose
argument_list|)
decl_stmt|;
name|w
operator|.
name|setRandomIOExceptionRate
argument_list|(
name|randomIOExceptionRate
argument_list|)
expr_stmt|;
name|w
operator|.
name|setRandomIOExceptionRateOnOpen
argument_list|(
name|randomIOExceptionRateOnOpen
argument_list|)
expr_stmt|;
name|w
operator|.
name|setThrottling
argument_list|(
name|throttle
argument_list|)
expr_stmt|;
name|w
operator|.
name|setCheckIndexOnClose
argument_list|(
name|checkIndexOnClose
argument_list|)
expr_stmt|;
name|w
operator|.
name|setPreventDoubleWrite
argument_list|(
name|preventDoubleWrite
argument_list|)
expr_stmt|;
name|w
operator|.
name|setNoDeleteOpenFile
argument_list|(
name|noDeleteOpenFile
argument_list|)
expr_stmt|;
name|wrappers
operator|.
name|add
argument_list|(
name|w
argument_list|)
expr_stmt|;
return|return
name|w
return|;
block|}
DECL|method|wrapAllInplace
specifier|public
name|Directory
index|[]
name|wrapAllInplace
parameter_list|(
name|Directory
index|[]
name|dirs
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dirs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|dirs
index|[
name|i
index|]
operator|=
name|wrap
argument_list|(
name|dirs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|dirs
return|;
block|}
DECL|method|randomDirectorService
specifier|public
name|FsDirectoryService
name|randomDirectorService
parameter_list|(
name|IndexStore
name|indexStore
parameter_list|)
block|{
if|if
condition|(
operator|(
name|Constants
operator|.
name|WINDOWS
operator|||
name|Constants
operator|.
name|SUN_OS
operator|)
operator|&&
name|Constants
operator|.
name|JRE_IS_64BIT
operator|&&
name|MMapDirectory
operator|.
name|UNMAP_SUPPORTED
condition|)
block|{
return|return
operator|new
name|MmapFsDirectoryService
argument_list|(
name|shardId
argument_list|,
name|indexSettings
argument_list|,
name|indexStore
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|Constants
operator|.
name|WINDOWS
condition|)
block|{
return|return
operator|new
name|SimpleFsDirectoryService
argument_list|(
name|shardId
argument_list|,
name|indexSettings
argument_list|,
name|indexStore
argument_list|)
return|;
block|}
switch|switch
condition|(
name|random
operator|.
name|nextInt
argument_list|(
literal|3
argument_list|)
condition|)
block|{
case|case
literal|1
case|:
return|return
operator|new
name|MmapFsDirectoryService
argument_list|(
name|shardId
argument_list|,
name|indexSettings
argument_list|,
name|indexStore
argument_list|)
return|;
case|case
literal|0
case|:
return|return
operator|new
name|SimpleFsDirectoryService
argument_list|(
name|shardId
argument_list|,
name|indexSettings
argument_list|,
name|indexStore
argument_list|)
return|;
default|default:
return|return
operator|new
name|NioFsDirectoryService
argument_list|(
name|shardId
argument_list|,
name|indexSettings
argument_list|,
name|indexStore
argument_list|)
return|;
block|}
block|}
DECL|method|randomRamDirecoryService
specifier|public
name|DirectoryService
name|randomRamDirecoryService
parameter_list|(
name|ByteBufferCache
name|byteBufferCache
parameter_list|)
block|{
switch|switch
condition|(
name|random
operator|.
name|nextInt
argument_list|(
literal|2
argument_list|)
condition|)
block|{
case|case
literal|0
case|:
return|return
operator|new
name|RamDirectoryService
argument_list|(
name|shardId
argument_list|,
name|indexSettings
argument_list|)
return|;
default|default:
return|return
operator|new
name|ByteBufferDirectoryService
argument_list|(
name|shardId
argument_list|,
name|indexSettings
argument_list|,
name|byteBufferCache
argument_list|)
return|;
block|}
block|}
DECL|class|ElasticsearchMockDirectoryWrapper
specifier|public
specifier|static
specifier|final
class|class
name|ElasticsearchMockDirectoryWrapper
extends|extends
name|MockDirectoryWrapper
block|{
DECL|field|logger
specifier|private
specifier|final
name|ESLogger
name|logger
decl_stmt|;
DECL|field|failOnClose
specifier|private
specifier|final
name|boolean
name|failOnClose
decl_stmt|;
DECL|method|ElasticsearchMockDirectoryWrapper
specifier|public
name|ElasticsearchMockDirectoryWrapper
parameter_list|(
name|Random
name|random
parameter_list|,
name|Directory
name|delegate
parameter_list|,
name|ESLogger
name|logger
parameter_list|,
name|boolean
name|failOnClose
parameter_list|)
block|{
name|super
argument_list|(
name|random
argument_list|,
name|delegate
argument_list|)
expr_stmt|;
name|this
operator|.
name|logger
operator|=
name|logger
expr_stmt|;
name|this
operator|.
name|failOnClose
operator|=
name|failOnClose
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|failOnClose
condition|)
block|{
throw|throw
name|ex
throw|;
block|}
comment|// we catch the exception on close to properly close shards even if there are open files
comment|// the test framework will call closeWithRuntimeException after the test exits to fail
comment|// on unclosed files.
name|logger
operator|.
name|debug
argument_list|(
literal|"MockDirectoryWrapper#close() threw exception"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|closeWithRuntimeException
specifier|public
name|void
name|closeWithRuntimeException
parameter_list|()
throws|throws
name|IOException
block|{
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// force fail if open files etc. called in tear down of ElasticsearchIntegrationTest
block|}
annotation|@
name|Override
DECL|method|openInput
specifier|public
specifier|synchronized
name|IndexInput
name|openInput
parameter_list|(
name|String
name|name
parameter_list|,
name|IOContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|CloseTrackingMockIndexInputWrapper
argument_list|(
name|name
argument_list|,
name|super
operator|.
name|openInput
argument_list|(
name|name
argument_list|,
name|context
argument_list|)
argument_list|,
name|logger
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|createSlicer
specifier|public
name|IndexInputSlicer
name|createSlicer
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
name|IOContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|IndexInputSlicer
name|slicer
init|=
name|super
operator|.
name|createSlicer
argument_list|(
name|name
argument_list|,
name|context
argument_list|)
decl_stmt|;
return|return
operator|new
name|IndexInputSlicer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|IndexInput
name|openSlice
parameter_list|(
name|String
name|sliceDescription
parameter_list|,
name|long
name|offset
parameter_list|,
name|long
name|length
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|CloseTrackingMockIndexInputWrapper
argument_list|(
name|name
argument_list|,
name|slicer
operator|.
name|openSlice
argument_list|(
name|sliceDescription
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
argument_list|,
name|logger
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|IndexInput
name|openFullSlice
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|CloseTrackingMockIndexInputWrapper
argument_list|(
name|name
argument_list|,
name|slicer
operator|.
name|openFullSlice
argument_list|()
argument_list|,
name|logger
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|slicer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
DECL|class|CloseTrackingMockIndexInputWrapper
specifier|private
specifier|static
class|class
name|CloseTrackingMockIndexInputWrapper
extends|extends
name|IndexInput
block|{
DECL|field|closed
specifier|private
specifier|final
name|AtomicBoolean
name|closed
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|delegate
specifier|private
name|IndexInput
name|delegate
decl_stmt|;
DECL|field|logger
specifier|private
specifier|final
name|ESLogger
name|logger
decl_stmt|;
DECL|field|closingStack
specifier|private
specifier|volatile
name|RuntimeException
name|closingStack
decl_stmt|;
DECL|method|CloseTrackingMockIndexInputWrapper
specifier|public
name|CloseTrackingMockIndexInputWrapper
parameter_list|(
name|String
name|name
parameter_list|,
name|IndexInput
name|delegate
parameter_list|,
name|ESLogger
name|logger
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|delegate
operator|=
name|delegate
expr_stmt|;
name|this
operator|.
name|logger
operator|=
name|logger
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|closed
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|closingStack
operator|=
operator|new
name|RuntimeException
argument_list|(
literal|"IndexInput closed"
argument_list|)
expr_stmt|;
name|delegate
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|clone
specifier|public
name|IndexInput
name|clone
parameter_list|()
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
return|return
name|delegate
operator|.
name|clone
argument_list|()
return|;
block|}
DECL|method|ensureOpen
specifier|private
name|void
name|ensureOpen
parameter_list|()
block|{
if|if
condition|(
name|closed
operator|.
name|get
argument_list|()
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"Abusing IndexInput for: ["
operator|+
name|name
operator|+
literal|"] - already closed"
argument_list|,
name|closingStack
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Abusing closed IndexInput!"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|getFilePointer
specifier|public
name|long
name|getFilePointer
parameter_list|()
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
return|return
name|delegate
operator|.
name|getFilePointer
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|seek
specifier|public
name|void
name|seek
parameter_list|(
name|long
name|pos
parameter_list|)
throws|throws
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
name|delegate
operator|.
name|seek
argument_list|(
name|pos
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|length
specifier|public
name|long
name|length
parameter_list|()
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
return|return
name|delegate
operator|.
name|length
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|readByte
specifier|public
name|byte
name|readByte
parameter_list|()
throws|throws
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
return|return
name|delegate
operator|.
name|readByte
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|readBytes
specifier|public
name|void
name|readBytes
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
name|delegate
operator|.
name|readBytes
argument_list|(
name|b
argument_list|,
name|offset
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|readBytes
specifier|public
name|void
name|readBytes
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|len
parameter_list|,
name|boolean
name|useBuffer
parameter_list|)
throws|throws
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
name|delegate
operator|.
name|readBytes
argument_list|(
name|b
argument_list|,
name|offset
argument_list|,
name|len
argument_list|,
name|useBuffer
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|readShort
specifier|public
name|short
name|readShort
parameter_list|()
throws|throws
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
return|return
name|delegate
operator|.
name|readShort
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|readInt
specifier|public
name|int
name|readInt
parameter_list|()
throws|throws
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
return|return
name|delegate
operator|.
name|readInt
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|readLong
specifier|public
name|long
name|readLong
parameter_list|()
throws|throws
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
return|return
name|delegate
operator|.
name|readLong
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|readString
specifier|public
name|String
name|readString
parameter_list|()
throws|throws
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
return|return
name|delegate
operator|.
name|readString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|readStringStringMap
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|readStringStringMap
parameter_list|()
throws|throws
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
return|return
name|delegate
operator|.
name|readStringStringMap
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|readVInt
specifier|public
name|int
name|readVInt
parameter_list|()
throws|throws
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
return|return
name|delegate
operator|.
name|readVInt
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|readVLong
specifier|public
name|long
name|readVLong
parameter_list|()
throws|throws
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
return|return
name|delegate
operator|.
name|readVLong
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"CloseTrackingMockIndexInputWrapper("
operator|+
name|delegate
operator|+
literal|")"
return|;
block|}
block|}
block|}
end_class

end_unit

