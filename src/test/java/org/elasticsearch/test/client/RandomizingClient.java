begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.test.client
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|client
package|;
end_package

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|generators
operator|.
name|RandomPicks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|FilterClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|Preference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_comment
comment|/** A {@link Client} that randomizes request parameters. */
end_comment

begin_class
DECL|class|RandomizingClient
specifier|public
class|class
name|RandomizingClient
extends|extends
name|FilterClient
block|{
DECL|field|defaultSearchType
specifier|private
specifier|final
name|SearchType
name|defaultSearchType
decl_stmt|;
DECL|field|defaultPreference
specifier|private
specifier|final
name|String
name|defaultPreference
decl_stmt|;
DECL|method|RandomizingClient
specifier|public
name|RandomizingClient
parameter_list|(
name|Client
name|client
parameter_list|,
name|Random
name|random
parameter_list|)
block|{
name|super
argument_list|(
name|client
argument_list|)
expr_stmt|;
comment|// we don't use the QUERY_AND_FETCH types that break quite a lot of tests
comment|// given that they return `size*num_shards` hits instead of `size`
name|defaultSearchType
operator|=
name|RandomPicks
operator|.
name|randomFrom
argument_list|(
name|random
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|SearchType
operator|.
name|DFS_QUERY_THEN_FETCH
argument_list|,
name|SearchType
operator|.
name|QUERY_THEN_FETCH
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|random
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
operator|==
literal|0
condition|)
block|{
name|defaultPreference
operator|=
name|RandomPicks
operator|.
name|randomFrom
argument_list|(
name|random
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|Preference
operator|.
name|PRIMARY_FIRST
argument_list|,
name|Preference
operator|.
name|LOCAL
argument_list|)
argument_list|)
operator|.
name|type
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|random
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
operator|==
literal|0
condition|)
block|{
name|String
name|s
init|=
name|TestUtil
operator|.
name|randomRealisticUnicodeString
argument_list|(
name|random
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|defaultPreference
operator|=
name|s
operator|.
name|startsWith
argument_list|(
literal|"_"
argument_list|)
condition|?
literal|null
else|:
name|s
expr_stmt|;
comment|// '_' is a reserved character
block|}
else|else
block|{
name|defaultPreference
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|prepareSearch
specifier|public
name|SearchRequestBuilder
name|prepareSearch
parameter_list|(
name|String
modifier|...
name|indices
parameter_list|)
block|{
return|return
name|in
operator|.
name|prepareSearch
argument_list|(
name|indices
argument_list|)
operator|.
name|setSearchType
argument_list|(
name|defaultSearchType
argument_list|)
operator|.
name|setPreference
argument_list|(
name|defaultPreference
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"randomized("
operator|+
name|super
operator|.
name|toString
argument_list|()
operator|+
literal|")"
return|;
block|}
block|}
end_class

end_unit

