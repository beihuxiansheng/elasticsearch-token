begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.test
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|test
package|;
end_package

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|ThreadFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|network
operator|.
name|MulticastChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|RegexMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|tribe
operator|.
name|TribeTests
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_comment
comment|/**  * Simple thread filter for randomized runner  * This filter rejectes all threads that are known to leak across  * tests / suites ie. the global test cluster threads etc.  * It will cause threads leaking from threadpools / executors in unittests  * to fail the test.  */
end_comment

begin_class
DECL|class|ElasticsearchThreadFilter
specifier|public
specifier|final
class|class
name|ElasticsearchThreadFilter
implements|implements
name|ThreadFilter
block|{
DECL|field|nodePrefix
specifier|private
specifier|final
name|Pattern
name|nodePrefix
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"\\[("
operator|+
literal|"("
operator|+
name|Pattern
operator|.
name|quote
argument_list|(
name|InternalTestCluster
operator|.
name|TRANSPORT_CLIENT_PREFIX
argument_list|)
operator|+
literal|")?("
operator|+
name|Pattern
operator|.
name|quote
argument_list|(
name|ElasticsearchIntegrationTest
operator|.
name|GLOBAL_CLUSTER_NODE_PREFIX
argument_list|)
operator|+
literal|"|"
operator|+
name|Pattern
operator|.
name|quote
argument_list|(
name|ElasticsearchIntegrationTest
operator|.
name|SUITE_CLUSTER_NODE_PREFIX
argument_list|)
operator|+
literal|"|"
operator|+
name|Pattern
operator|.
name|quote
argument_list|(
name|ElasticsearchIntegrationTest
operator|.
name|TEST_CLUSTER_NODE_PREFIX
argument_list|)
operator|+
literal|"|"
operator|+
name|Pattern
operator|.
name|quote
argument_list|(
name|TribeTests
operator|.
name|SECOND_CLUSTER_NODE_PREFIX
argument_list|)
operator|+
literal|")"
operator|+
literal|")\\d+\\]"
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|reject
specifier|public
name|boolean
name|reject
parameter_list|(
name|Thread
name|t
parameter_list|)
block|{
name|String
name|threadName
init|=
name|t
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|threadName
operator|.
name|contains
argument_list|(
literal|"["
operator|+
name|MulticastChannel
operator|.
name|SHARED_CHANNEL_NAME
operator|+
literal|"]"
argument_list|)
operator|||
name|threadName
operator|.
name|contains
argument_list|(
literal|"["
operator|+
name|ElasticsearchSingleNodeTest
operator|.
name|nodeName
argument_list|()
operator|+
literal|"]"
argument_list|)
operator|||
name|threadName
operator|.
name|contains
argument_list|(
literal|"Keep-Alive-Timer"
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
name|nodePrefix
operator|.
name|matcher
argument_list|(
name|t
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|find
argument_list|()
operator|||
literal|true
return|;
comment|// TODO disabled for now
block|}
block|}
end_class

end_unit

