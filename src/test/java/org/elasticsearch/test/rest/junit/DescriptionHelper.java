begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.test.rest.junit
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|rest
operator|.
name|junit
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|rest
operator|.
name|section
operator|.
name|RestTestSuite
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|rest
operator|.
name|section
operator|.
name|TestSection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|Description
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Helper that knows how to assign proper junit {@link Description}s to each of the node in the tests tree  */
end_comment

begin_class
DECL|class|DescriptionHelper
specifier|public
specifier|final
class|class
name|DescriptionHelper
block|{
DECL|method|DescriptionHelper
specifier|private
name|DescriptionHelper
parameter_list|()
block|{      }
comment|/*     The following generated ids need to be unique throughout a tests run.     Ids are also shown by IDEs (with junit 4.11 unique ids can be different from what gets shown, not yet in 4.10).     Some tricks are applied to control what gets shown in IDEs in order to keep the ids unique and nice to see at the same time.      */
DECL|method|createRootDescription
specifier|static
name|Description
name|createRootDescription
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|Description
operator|.
name|createSuiteDescription
argument_list|(
name|name
argument_list|)
return|;
block|}
DECL|method|createApiDescription
specifier|static
name|Description
name|createApiDescription
parameter_list|(
name|String
name|api
parameter_list|)
block|{
return|return
name|Description
operator|.
name|createSuiteDescription
argument_list|(
name|api
argument_list|)
return|;
block|}
DECL|method|createTestSuiteDescription
specifier|static
name|Description
name|createTestSuiteDescription
parameter_list|(
name|RestTestSuite
name|restTestSuite
parameter_list|)
block|{
comment|//e.g. "indices_open (10_basic)", which leads to 10_basic being returned by Description#getDisplayName
name|String
name|name
init|=
name|restTestSuite
operator|.
name|getApi
argument_list|()
operator|+
literal|" ("
operator|+
name|restTestSuite
operator|.
name|getName
argument_list|()
operator|+
literal|")"
decl_stmt|;
return|return
name|Description
operator|.
name|createSuiteDescription
argument_list|(
name|name
argument_list|)
return|;
block|}
DECL|method|createTestSectionWithRepetitionsDescription
specifier|static
name|Description
name|createTestSectionWithRepetitionsDescription
parameter_list|(
name|RestTestSuite
name|restTestSuite
parameter_list|,
name|TestSection
name|testSection
parameter_list|)
block|{
comment|//e.g. "indices_open/10_basic (Basic test for index open/close)", which leads to
comment|//"Basic test for index open/close" being returned by Description#getDisplayName
name|String
name|name
init|=
name|restTestSuite
operator|.
name|getDescription
argument_list|()
operator|+
literal|" ("
operator|+
name|testSection
operator|.
name|getName
argument_list|()
operator|+
literal|")"
decl_stmt|;
return|return
name|Description
operator|.
name|createSuiteDescription
argument_list|(
name|name
argument_list|)
return|;
block|}
DECL|method|createTestSectionIterationDescription
specifier|static
name|Description
name|createTestSectionIterationDescription
parameter_list|(
name|RestTestSuite
name|restTestSuite
parameter_list|,
name|TestSection
name|testSection
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|args
parameter_list|)
block|{
comment|//e.g. "Basic test for index open/close {#0} (indices_open/10_basic)" some IDEs might strip out the part between parentheses
name|String
name|name
init|=
name|testSection
operator|.
name|getName
argument_list|()
operator|+
name|formatMethodArgs
argument_list|(
name|args
argument_list|)
operator|+
literal|" ("
operator|+
name|restTestSuite
operator|.
name|getDescription
argument_list|()
operator|+
literal|")"
decl_stmt|;
return|return
name|Description
operator|.
name|createSuiteDescription
argument_list|(
name|name
argument_list|)
return|;
block|}
DECL|method|formatMethodArgs
specifier|private
specifier|static
name|String
name|formatMethodArgs
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|args
parameter_list|)
block|{
if|if
condition|(
name|args
operator|==
literal|null
operator|||
name|args
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|""
return|;
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|(
literal|" {"
argument_list|)
decl_stmt|;
name|Joiner
operator|.
name|on
argument_list|(
literal|" "
argument_list|)
operator|.
name|withKeyValueSeparator
argument_list|(
literal|""
argument_list|)
operator|.
name|appendTo
argument_list|(
name|b
argument_list|,
name|args
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
return|return
name|b
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

