begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.test.rest.section
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|rest
operator|.
name|section
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|rest
operator|.
name|support
operator|.
name|Features
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|rest
operator|.
name|support
operator|.
name|VersionUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Represents a skip section that tells whether a specific test section or suite needs to be skipped  * based on:  * - the elasticsearch version the tests are running against  * - a specific test feature required that might not be implemented yet by the runner  */
end_comment

begin_class
DECL|class|SkipSection
specifier|public
class|class
name|SkipSection
block|{
DECL|field|EMPTY
specifier|public
specifier|static
specifier|final
name|SkipSection
name|EMPTY
init|=
operator|new
name|SkipSection
argument_list|(
literal|""
argument_list|,
name|Lists
operator|.
expr|<
name|String
operator|>
name|newArrayList
argument_list|()
argument_list|,
literal|""
argument_list|)
decl_stmt|;
DECL|field|version
specifier|private
specifier|final
name|String
name|version
decl_stmt|;
DECL|field|features
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|features
decl_stmt|;
DECL|field|reason
specifier|private
specifier|final
name|String
name|reason
decl_stmt|;
DECL|method|SkipSection
specifier|public
name|SkipSection
parameter_list|(
name|String
name|version
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|features
parameter_list|,
name|String
name|reason
parameter_list|)
block|{
name|this
operator|.
name|version
operator|=
name|version
expr_stmt|;
name|this
operator|.
name|features
operator|=
name|features
expr_stmt|;
name|this
operator|.
name|reason
operator|=
name|reason
expr_stmt|;
block|}
DECL|method|getVersion
specifier|public
name|String
name|getVersion
parameter_list|()
block|{
return|return
name|version
return|;
block|}
DECL|method|getFeatures
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getFeatures
parameter_list|()
block|{
return|return
name|features
return|;
block|}
DECL|method|getReason
specifier|public
name|String
name|getReason
parameter_list|()
block|{
return|return
name|reason
return|;
block|}
DECL|method|skip
specifier|public
name|boolean
name|skip
parameter_list|(
name|String
name|currentVersion
parameter_list|)
block|{
if|if
condition|(
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|version
operator|!=
literal|null
condition|)
block|{
return|return
name|VersionUtils
operator|.
name|skipCurrentVersion
argument_list|(
name|version
argument_list|,
name|currentVersion
argument_list|)
return|;
block|}
if|if
condition|(
name|features
operator|!=
literal|null
operator|&&
operator|!
name|this
operator|.
name|features
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
operator|!
name|Features
operator|.
name|areAllSupported
argument_list|(
name|this
operator|.
name|features
argument_list|)
return|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"version or feature should be not null in a non empty skip section"
argument_list|)
throw|;
block|}
DECL|method|isVersionCheck
specifier|public
name|boolean
name|isVersionCheck
parameter_list|()
block|{
return|return
name|Strings
operator|.
name|hasLength
argument_list|(
name|version
argument_list|)
return|;
block|}
DECL|method|isEmpty
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|EMPTY
operator|.
name|equals
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
end_class

end_unit

