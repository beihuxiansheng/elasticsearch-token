begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.test.rest.client.http
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|rest
operator|.
name|client
operator|.
name|http
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|CloseableHttpResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpHead
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpUriRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|util
operator|.
name|EntityUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|ESLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|Loggers
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * Response obtained from an http request  * Always consumes the whole response body loading it entirely into a string  */
end_comment

begin_class
DECL|class|HttpResponse
specifier|public
class|class
name|HttpResponse
block|{
DECL|field|logger
specifier|private
specifier|static
specifier|final
name|ESLogger
name|logger
init|=
name|Loggers
operator|.
name|getLogger
argument_list|(
name|HttpResponse
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|httpRequest
specifier|private
specifier|final
name|HttpUriRequest
name|httpRequest
decl_stmt|;
DECL|field|statusCode
specifier|private
specifier|final
name|int
name|statusCode
decl_stmt|;
DECL|field|reasonPhrase
specifier|private
specifier|final
name|String
name|reasonPhrase
decl_stmt|;
DECL|field|body
specifier|private
specifier|final
name|String
name|body
decl_stmt|;
DECL|method|HttpResponse
name|HttpResponse
parameter_list|(
name|HttpUriRequest
name|httpRequest
parameter_list|,
name|CloseableHttpResponse
name|httpResponse
parameter_list|)
block|{
name|this
operator|.
name|httpRequest
operator|=
name|httpRequest
expr_stmt|;
name|this
operator|.
name|statusCode
operator|=
name|httpResponse
operator|.
name|getStatusLine
argument_list|()
operator|.
name|getStatusCode
argument_list|()
expr_stmt|;
name|this
operator|.
name|reasonPhrase
operator|=
name|httpResponse
operator|.
name|getStatusLine
argument_list|()
operator|.
name|getReasonPhrase
argument_list|()
expr_stmt|;
if|if
condition|(
name|httpResponse
operator|.
name|getEntity
argument_list|()
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|this
operator|.
name|body
operator|=
name|EntityUtils
operator|.
name|toString
argument_list|(
name|httpResponse
operator|.
name|getEntity
argument_list|()
argument_list|,
name|HttpRequestBuilder
operator|.
name|DEFAULT_CHARSET
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|EntityUtils
operator|.
name|consumeQuietly
argument_list|(
name|httpResponse
operator|.
name|getEntity
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
try|try
block|{
name|httpResponse
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|this
operator|.
name|body
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|isError
specifier|public
name|boolean
name|isError
parameter_list|()
block|{
return|return
name|statusCode
operator|>=
literal|400
return|;
block|}
DECL|method|getStatusCode
specifier|public
name|int
name|getStatusCode
parameter_list|()
block|{
return|return
name|statusCode
return|;
block|}
DECL|method|getReasonPhrase
specifier|public
name|String
name|getReasonPhrase
parameter_list|()
block|{
return|return
name|reasonPhrase
return|;
block|}
DECL|method|getBody
specifier|public
name|String
name|getBody
parameter_list|()
block|{
return|return
name|body
return|;
block|}
DECL|method|hasBody
specifier|public
name|boolean
name|hasBody
parameter_list|()
block|{
return|return
name|body
operator|!=
literal|null
return|;
block|}
DECL|method|supportsBody
specifier|public
name|boolean
name|supportsBody
parameter_list|()
block|{
return|return
operator|!
name|HttpHead
operator|.
name|METHOD_NAME
operator|.
name|equals
argument_list|(
name|httpRequest
operator|.
name|getMethod
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|stringBuilder
init|=
operator|new
name|StringBuilder
argument_list|(
name|statusCode
argument_list|)
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
operator|.
name|append
argument_list|(
name|reasonPhrase
argument_list|)
decl_stmt|;
if|if
condition|(
name|hasBody
argument_list|()
condition|)
block|{
name|stringBuilder
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
operator|.
name|append
argument_list|(
name|body
argument_list|)
expr_stmt|;
block|}
return|return
name|stringBuilder
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

