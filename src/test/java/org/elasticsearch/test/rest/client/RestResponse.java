begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.test.rest.client
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|rest
operator|.
name|client
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|rest
operator|.
name|client
operator|.
name|http
operator|.
name|HttpResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|rest
operator|.
name|json
operator|.
name|JsonPath
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * Response obtained from a REST call  * Supports parsing the response body as json when needed and returning specific values extracted from it  */
end_comment

begin_class
DECL|class|RestResponse
specifier|public
class|class
name|RestResponse
block|{
DECL|field|response
specifier|private
specifier|final
name|HttpResponse
name|response
decl_stmt|;
DECL|field|parsedResponse
specifier|private
name|JsonPath
name|parsedResponse
decl_stmt|;
DECL|method|RestResponse
name|RestResponse
parameter_list|(
name|HttpResponse
name|response
parameter_list|)
block|{
name|this
operator|.
name|response
operator|=
name|response
expr_stmt|;
block|}
DECL|method|getStatusCode
specifier|public
name|int
name|getStatusCode
parameter_list|()
block|{
return|return
name|response
operator|.
name|getStatusCode
argument_list|()
return|;
block|}
DECL|method|getReasonPhrase
specifier|public
name|String
name|getReasonPhrase
parameter_list|()
block|{
return|return
name|response
operator|.
name|getReasonPhrase
argument_list|()
return|;
block|}
DECL|method|getBody
specifier|public
name|String
name|getBody
parameter_list|()
block|{
return|return
name|response
operator|.
name|getBody
argument_list|()
return|;
block|}
DECL|method|isError
specifier|public
name|boolean
name|isError
parameter_list|()
block|{
return|return
name|response
operator|.
name|isError
argument_list|()
return|;
block|}
comment|/**      * Parses the response body as json and extracts a specific value from it (identified by the provided path)      */
DECL|method|evaluate
specifier|public
name|Object
name|evaluate
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|response
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|JsonPath
name|jsonPath
init|=
name|parsedResponse
argument_list|()
decl_stmt|;
if|if
condition|(
name|jsonPath
operator|==
literal|null
condition|)
block|{
comment|//special case: api that don't support body (e.g. exists) return true if 200, false if 404, even if no body
comment|//is_true: '' means the response had no body but the client returned true (caused by 200)
comment|//is_false: '' means the response had no body but the client returned false (caused by 404)
if|if
condition|(
literal|""
operator|.
name|equals
argument_list|(
name|path
argument_list|)
operator|&&
operator|!
name|response
operator|.
name|supportsBody
argument_list|()
condition|)
block|{
return|return
operator|!
name|response
operator|.
name|isError
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
return|return
name|jsonPath
operator|.
name|evaluate
argument_list|(
name|path
argument_list|)
return|;
block|}
DECL|method|parsedResponse
specifier|private
name|JsonPath
name|parsedResponse
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|parsedResponse
operator|!=
literal|null
condition|)
block|{
return|return
name|parsedResponse
return|;
block|}
if|if
condition|(
name|response
operator|==
literal|null
operator|||
operator|!
name|response
operator|.
name|hasBody
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|parsedResponse
operator|=
operator|new
name|JsonPath
argument_list|(
name|response
operator|.
name|getBody
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

