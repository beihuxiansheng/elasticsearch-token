begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.test.rest.client
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|rest
operator|.
name|client
package|;
end_package

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|RandomizedTest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|client
operator|.
name|CloseableHttpClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|client
operator|.
name|HttpClients
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|ESLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|Loggers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|rest
operator|.
name|client
operator|.
name|http
operator|.
name|HttpRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|rest
operator|.
name|client
operator|.
name|http
operator|.
name|HttpResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|rest
operator|.
name|spec
operator|.
name|RestApi
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|rest
operator|.
name|spec
operator|.
name|RestSpec
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * REST client used to test the elasticsearch REST layer  * Holds the {@link RestSpec} used to translate api calls into REST calls  */
end_comment

begin_class
DECL|class|RestClient
specifier|public
class|class
name|RestClient
implements|implements
name|Closeable
block|{
DECL|field|logger
specifier|private
specifier|static
specifier|final
name|ESLogger
name|logger
init|=
name|Loggers
operator|.
name|getLogger
argument_list|(
name|RestClient
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|restSpec
specifier|private
specifier|final
name|RestSpec
name|restSpec
decl_stmt|;
DECL|field|httpClient
specifier|private
specifier|final
name|CloseableHttpClient
name|httpClient
decl_stmt|;
DECL|field|addresses
specifier|private
name|InetSocketAddress
index|[]
name|addresses
decl_stmt|;
DECL|field|esVersion
specifier|private
specifier|final
name|String
name|esVersion
decl_stmt|;
DECL|method|RestClient
specifier|public
name|RestClient
parameter_list|(
name|InetSocketAddress
index|[]
name|addresses
parameter_list|,
name|RestSpec
name|restSpec
parameter_list|)
throws|throws
name|IOException
throws|,
name|RestException
block|{
assert|assert
name|addresses
operator|.
name|length
operator|>
literal|0
assert|;
name|this
operator|.
name|restSpec
operator|=
name|restSpec
expr_stmt|;
name|this
operator|.
name|httpClient
operator|=
name|createHttpClient
argument_list|()
expr_stmt|;
name|this
operator|.
name|addresses
operator|=
name|addresses
expr_stmt|;
name|this
operator|.
name|esVersion
operator|=
name|readAndCheckVersion
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"REST client initialized {}, elasticsearch version: [{}]"
argument_list|,
name|addresses
argument_list|,
name|esVersion
argument_list|)
expr_stmt|;
block|}
DECL|method|readAndCheckVersion
specifier|private
name|String
name|readAndCheckVersion
parameter_list|()
throws|throws
name|IOException
throws|,
name|RestException
block|{
comment|//we make a manual call here without using callApi method, mainly because we are initializing
comment|//and the randomized context doesn't exist for the current thread (would be used to choose the method otherwise)
name|RestApi
name|restApi
init|=
name|restApi
argument_list|(
literal|"info"
argument_list|)
decl_stmt|;
assert|assert
name|restApi
operator|.
name|getPaths
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
assert|;
assert|assert
name|restApi
operator|.
name|getMethods
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
assert|;
name|String
name|version
init|=
literal|null
decl_stmt|;
for|for
control|(
name|InetSocketAddress
name|address
range|:
name|addresses
control|)
block|{
name|RestResponse
name|restResponse
init|=
operator|new
name|RestResponse
argument_list|(
operator|new
name|HttpRequestBuilder
argument_list|(
name|httpClient
argument_list|)
operator|.
name|host
argument_list|(
name|address
operator|.
name|getHostName
argument_list|()
argument_list|)
operator|.
name|port
argument_list|(
name|address
operator|.
name|getPort
argument_list|()
argument_list|)
operator|.
name|path
argument_list|(
name|restApi
operator|.
name|getPaths
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|method
argument_list|(
name|restApi
operator|.
name|getMethods
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
argument_list|)
decl_stmt|;
name|checkStatusCode
argument_list|(
name|restResponse
argument_list|)
expr_stmt|;
name|Object
name|latestVersion
init|=
name|restResponse
operator|.
name|evaluate
argument_list|(
literal|"version.number"
argument_list|)
decl_stmt|;
if|if
condition|(
name|latestVersion
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"elasticsearch version not found in the response"
argument_list|)
throw|;
block|}
if|if
condition|(
name|version
operator|==
literal|null
condition|)
block|{
name|version
operator|=
name|latestVersion
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|latestVersion
operator|.
name|equals
argument_list|(
name|version
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"provided nodes addresses run different elasticsearch versions"
argument_list|)
throw|;
block|}
block|}
block|}
return|return
name|version
return|;
block|}
DECL|method|getEsVersion
specifier|public
name|String
name|getEsVersion
parameter_list|()
block|{
return|return
name|esVersion
return|;
block|}
comment|/**      * Allows to update the addresses the client needs to connect to      */
DECL|method|updateAddresses
specifier|public
name|void
name|updateAddresses
parameter_list|(
name|InetSocketAddress
index|[]
name|addresses
parameter_list|)
block|{
name|this
operator|.
name|addresses
operator|=
name|addresses
expr_stmt|;
block|}
comment|/**      * Calls an api with the provided parameters and body      * @throws RestException if the obtained status code is non ok, unless the specific error code needs to be ignored      * according to the ignore parameter received as input (which won't get sent to elasticsearch)      */
DECL|method|callApi
specifier|public
name|RestResponse
name|callApi
parameter_list|(
name|String
name|apiName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
parameter_list|,
name|String
name|body
parameter_list|)
throws|throws
name|IOException
throws|,
name|RestException
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|ignores
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|requestParams
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|params
operator|!=
literal|null
condition|)
block|{
comment|//makes a copy of the parameters before modifying them for this specific request
name|requestParams
operator|=
name|Maps
operator|.
name|newHashMap
argument_list|(
name|params
argument_list|)
expr_stmt|;
comment|//ignore is a special parameter supported by the clients, shouldn't be sent to es
name|String
name|ignoreString
init|=
name|requestParams
operator|.
name|remove
argument_list|(
literal|"ignore"
argument_list|)
decl_stmt|;
if|if
condition|(
name|Strings
operator|.
name|hasLength
argument_list|(
name|ignoreString
argument_list|)
condition|)
block|{
try|try
block|{
name|ignores
operator|.
name|add
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|ignoreString
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"ignore value should be a number, found ["
operator|+
name|ignoreString
operator|+
literal|"] instead"
argument_list|)
throw|;
block|}
block|}
block|}
name|HttpRequestBuilder
name|httpRequestBuilder
init|=
name|callApiBuilder
argument_list|(
name|apiName
argument_list|,
name|requestParams
argument_list|,
name|body
argument_list|)
decl_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"calling api [{}]"
argument_list|,
name|apiName
argument_list|)
expr_stmt|;
name|HttpResponse
name|httpResponse
init|=
name|httpRequestBuilder
operator|.
name|execute
argument_list|()
decl_stmt|;
comment|//http HEAD doesn't support response body
comment|// For the few api (exists class of api) that use it we need to accept 404 too
if|if
condition|(
operator|!
name|httpResponse
operator|.
name|supportsBody
argument_list|()
condition|)
block|{
name|ignores
operator|.
name|add
argument_list|(
literal|404
argument_list|)
expr_stmt|;
block|}
name|RestResponse
name|restResponse
init|=
operator|new
name|RestResponse
argument_list|(
name|httpResponse
argument_list|)
decl_stmt|;
name|checkStatusCode
argument_list|(
name|restResponse
argument_list|,
name|ignores
argument_list|)
expr_stmt|;
return|return
name|restResponse
return|;
block|}
DECL|method|checkStatusCode
specifier|private
name|void
name|checkStatusCode
parameter_list|(
name|RestResponse
name|restResponse
parameter_list|,
name|List
argument_list|<
name|Integer
argument_list|>
name|ignores
parameter_list|)
throws|throws
name|RestException
block|{
comment|//ignore is a catch within the client, to prevent the client from throwing error if it gets non ok codes back
if|if
condition|(
name|ignores
operator|.
name|contains
argument_list|(
name|restResponse
operator|.
name|getStatusCode
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|logger
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"ignored non ok status codes {} as requested"
argument_list|,
name|ignores
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
name|checkStatusCode
argument_list|(
name|restResponse
argument_list|)
expr_stmt|;
block|}
DECL|method|checkStatusCode
specifier|private
name|void
name|checkStatusCode
parameter_list|(
name|RestResponse
name|restResponse
parameter_list|)
throws|throws
name|RestException
block|{
if|if
condition|(
name|restResponse
operator|.
name|isError
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RestException
argument_list|(
literal|"non ok status code ["
operator|+
name|restResponse
operator|.
name|getStatusCode
argument_list|()
operator|+
literal|"] returned"
argument_list|,
name|restResponse
argument_list|)
throw|;
block|}
block|}
DECL|method|callApiBuilder
specifier|private
name|HttpRequestBuilder
name|callApiBuilder
parameter_list|(
name|String
name|apiName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
parameter_list|,
name|String
name|body
parameter_list|)
block|{
comment|//create doesn't exist in the spec but is supported in the clients (index with op_type=create)
name|boolean
name|indexCreateApi
init|=
literal|"create"
operator|.
name|equals
argument_list|(
name|apiName
argument_list|)
decl_stmt|;
name|String
name|api
init|=
name|indexCreateApi
condition|?
literal|"index"
else|:
name|apiName
decl_stmt|;
name|RestApi
name|restApi
init|=
name|restApi
argument_list|(
name|api
argument_list|)
decl_stmt|;
name|HttpRequestBuilder
name|httpRequestBuilder
init|=
name|httpRequestBuilder
argument_list|()
decl_stmt|;
comment|//divide params between ones that go within query string and ones that go within path
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|pathParts
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|params
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|params
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|restApi
operator|.
name|getPathParts
argument_list|()
operator|.
name|contains
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|pathParts
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|restApi
operator|.
name|getParams
argument_list|()
operator|.
name|contains
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"param ["
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|"] not supported in ["
operator|+
name|restApi
operator|.
name|getName
argument_list|()
operator|+
literal|"] api"
argument_list|)
throw|;
block|}
name|httpRequestBuilder
operator|.
name|addParam
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|indexCreateApi
condition|)
block|{
name|httpRequestBuilder
operator|.
name|addParam
argument_list|(
literal|"op_type"
argument_list|,
literal|"create"
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|supportedMethods
init|=
name|restApi
operator|.
name|getSupportedMethods
argument_list|(
name|pathParts
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|Strings
operator|.
name|hasLength
argument_list|(
name|body
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|restApi
operator|.
name|isBodySupported
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"body is not supported by ["
operator|+
name|restApi
operator|.
name|getName
argument_list|()
operator|+
literal|"] api"
argument_list|)
throw|;
block|}
comment|//test the GET with source param instead of GET/POST with body
if|if
condition|(
name|supportedMethods
operator|.
name|contains
argument_list|(
literal|"GET"
argument_list|)
operator|&&
name|RandomizedTest
operator|.
name|rarely
argument_list|()
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"sending the request body as source param with GET method"
argument_list|)
expr_stmt|;
name|httpRequestBuilder
operator|.
name|addParam
argument_list|(
literal|"source"
argument_list|,
name|body
argument_list|)
operator|.
name|method
argument_list|(
literal|"GET"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|httpRequestBuilder
operator|.
name|body
argument_list|(
name|body
argument_list|)
operator|.
name|method
argument_list|(
name|RandomizedTest
operator|.
name|randomFrom
argument_list|(
name|supportedMethods
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|restApi
operator|.
name|isBodyRequired
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"body is required by ["
operator|+
name|restApi
operator|.
name|getName
argument_list|()
operator|+
literal|"] api"
argument_list|)
throw|;
block|}
name|httpRequestBuilder
operator|.
name|method
argument_list|(
name|RandomizedTest
operator|.
name|randomFrom
argument_list|(
name|supportedMethods
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//the http method is randomized (out of the available ones with the chosen api)
return|return
name|httpRequestBuilder
operator|.
name|path
argument_list|(
name|RandomizedTest
operator|.
name|randomFrom
argument_list|(
name|restApi
operator|.
name|getFinalPaths
argument_list|(
name|pathParts
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
DECL|method|restApi
specifier|private
name|RestApi
name|restApi
parameter_list|(
name|String
name|apiName
parameter_list|)
block|{
name|RestApi
name|restApi
init|=
name|restSpec
operator|.
name|getApi
argument_list|(
name|apiName
argument_list|)
decl_stmt|;
if|if
condition|(
name|restApi
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"rest api ["
operator|+
name|apiName
operator|+
literal|"] doesn't exist in the rest spec"
argument_list|)
throw|;
block|}
return|return
name|restApi
return|;
block|}
DECL|method|httpRequestBuilder
specifier|protected
name|HttpRequestBuilder
name|httpRequestBuilder
parameter_list|()
block|{
comment|//the address used is randomized between the available ones
name|InetSocketAddress
name|address
init|=
name|RandomizedTest
operator|.
name|randomFrom
argument_list|(
name|addresses
argument_list|)
decl_stmt|;
return|return
operator|new
name|HttpRequestBuilder
argument_list|(
name|httpClient
argument_list|)
operator|.
name|host
argument_list|(
name|address
operator|.
name|getHostName
argument_list|()
argument_list|)
operator|.
name|port
argument_list|(
name|address
operator|.
name|getPort
argument_list|()
argument_list|)
return|;
block|}
DECL|method|createHttpClient
specifier|protected
name|CloseableHttpClient
name|createHttpClient
parameter_list|()
block|{
return|return
name|HttpClients
operator|.
name|createDefault
argument_list|()
return|;
block|}
comment|/**      * Closes the REST client and the underlying http client      */
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
try|try
block|{
name|httpClient
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

