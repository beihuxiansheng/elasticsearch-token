begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.test.rest.support
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|rest
operator|.
name|support
package|;
end_package

begin_class
DECL|class|VersionUtils
specifier|public
specifier|final
class|class
name|VersionUtils
block|{
DECL|method|VersionUtils
specifier|private
name|VersionUtils
parameter_list|()
block|{      }
comment|/**      * Parses an elasticsearch version string into an int array with an element per part      * e.g. 0.90.7 => [0,90,7]      */
DECL|method|parseVersionNumber
specifier|public
specifier|static
name|int
index|[]
name|parseVersionNumber
parameter_list|(
name|String
name|version
parameter_list|)
block|{
name|String
index|[]
name|split
init|=
name|version
operator|.
name|split
argument_list|(
literal|"\\."
argument_list|)
decl_stmt|;
comment|//we only take the first 3 parts if there are more, but less is ok too (e.g. 999)
name|int
name|length
init|=
name|Math
operator|.
name|min
argument_list|(
literal|3
argument_list|,
name|split
operator|.
name|length
argument_list|)
decl_stmt|;
name|int
index|[]
name|versionNumber
init|=
operator|new
name|int
index|[
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|versionNumber
index|[
name|i
index|]
operator|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|split
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"version is not a number"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|versionNumber
return|;
block|}
comment|/**      * Compares the skip version read from a test fragment with the elasticsearch version      * the tests are running against and determines whether the test fragment needs to be skipped      */
DECL|method|skipCurrentVersion
specifier|public
specifier|static
name|boolean
name|skipCurrentVersion
parameter_list|(
name|String
name|skipVersion
parameter_list|,
name|String
name|currentVersion
parameter_list|)
block|{
name|int
index|[]
name|currentVersionNumber
init|=
name|parseVersionNumber
argument_list|(
name|currentVersion
argument_list|)
decl_stmt|;
name|String
index|[]
name|skipVersions
init|=
name|skipVersion
operator|.
name|split
argument_list|(
literal|"-"
argument_list|)
decl_stmt|;
if|if
condition|(
name|skipVersions
operator|.
name|length
operator|>
literal|2
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"too many skip versions found"
argument_list|)
throw|;
block|}
name|String
name|skipVersionLowerBound
init|=
name|skipVersions
index|[
literal|0
index|]
operator|.
name|trim
argument_list|()
decl_stmt|;
name|String
name|skipVersionUpperBound
init|=
name|skipVersions
index|[
literal|1
index|]
operator|.
name|trim
argument_list|()
decl_stmt|;
name|int
index|[]
name|skipVersionLowerBoundNumber
init|=
name|parseVersionNumber
argument_list|(
name|skipVersionLowerBound
argument_list|)
decl_stmt|;
name|int
index|[]
name|skipVersionUpperBoundNumber
init|=
name|parseVersionNumber
argument_list|(
name|skipVersionUpperBound
argument_list|)
decl_stmt|;
name|int
name|length
init|=
name|Math
operator|.
name|min
argument_list|(
name|skipVersionLowerBoundNumber
operator|.
name|length
argument_list|,
name|currentVersionNumber
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|currentVersionNumber
index|[
name|i
index|]
operator|<
name|skipVersionLowerBoundNumber
index|[
name|i
index|]
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|currentVersionNumber
index|[
name|i
index|]
operator|>
name|skipVersionLowerBoundNumber
index|[
name|i
index|]
condition|)
block|{
break|break;
block|}
block|}
name|length
operator|=
name|Math
operator|.
name|min
argument_list|(
name|skipVersionUpperBoundNumber
operator|.
name|length
argument_list|,
name|currentVersionNumber
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|currentVersionNumber
index|[
name|i
index|]
operator|>
name|skipVersionUpperBoundNumber
index|[
name|i
index|]
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|currentVersionNumber
index|[
name|i
index|]
operator|<
name|skipVersionUpperBoundNumber
index|[
name|i
index|]
condition|)
block|{
break|break;
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

