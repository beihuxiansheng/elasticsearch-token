begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.test.rest.support
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|rest
operator|.
name|support
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileFilter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_class
DECL|class|FileUtils
specifier|public
specifier|final
class|class
name|FileUtils
block|{
DECL|field|YAML_SUFFIX
specifier|private
specifier|static
specifier|final
name|String
name|YAML_SUFFIX
init|=
literal|".yaml"
decl_stmt|;
DECL|field|JSON_SUFFIX
specifier|private
specifier|static
specifier|final
name|String
name|JSON_SUFFIX
init|=
literal|".json"
decl_stmt|;
DECL|method|FileUtils
specifier|private
name|FileUtils
parameter_list|()
block|{      }
comment|/**      * Returns the json files found within the directory provided as argument.      * Files are looked up in the classpath first, then outside of it if not found.      */
DECL|method|findJsonSpec
specifier|public
specifier|static
name|Set
argument_list|<
name|File
argument_list|>
name|findJsonSpec
parameter_list|(
name|String
name|optionalPathPrefix
parameter_list|,
name|String
name|path
parameter_list|)
throws|throws
name|FileNotFoundException
block|{
name|File
name|dir
init|=
name|resolveFile
argument_list|(
name|optionalPathPrefix
argument_list|,
name|path
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|dir
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"file ["
operator|+
name|path
operator|+
literal|"] is not a directory"
argument_list|)
throw|;
block|}
name|File
index|[]
name|jsonFiles
init|=
name|dir
operator|.
name|listFiles
argument_list|(
operator|new
name|FileFilter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|accept
parameter_list|(
name|File
name|pathname
parameter_list|)
block|{
return|return
name|pathname
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
name|JSON_SUFFIX
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|jsonFiles
operator|==
literal|null
operator|||
name|jsonFiles
operator|.
name|length
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"no json files found within ["
operator|+
name|path
operator|+
literal|"]"
argument_list|)
throw|;
block|}
return|return
name|Sets
operator|.
name|newHashSet
argument_list|(
name|jsonFiles
argument_list|)
return|;
block|}
comment|/**      * Returns the yaml files found within the paths provided.      * Each input path can either be a single file (the .yaml suffix is optional) or a directory.      * Each path is looked up in the classpath first, then outside of it if not found yet.      */
DECL|method|findYamlSuites
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|File
argument_list|>
argument_list|>
name|findYamlSuites
parameter_list|(
specifier|final
name|String
name|optionalPathPrefix
parameter_list|,
specifier|final
name|String
modifier|...
name|paths
parameter_list|)
throws|throws
name|FileNotFoundException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|File
argument_list|>
argument_list|>
name|yamlSuites
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|path
range|:
name|paths
control|)
block|{
name|collectFiles
argument_list|(
name|resolveFile
argument_list|(
name|optionalPathPrefix
argument_list|,
name|path
argument_list|,
name|YAML_SUFFIX
argument_list|)
argument_list|,
name|YAML_SUFFIX
argument_list|,
name|yamlSuites
argument_list|)
expr_stmt|;
block|}
return|return
name|yamlSuites
return|;
block|}
DECL|method|resolveFile
specifier|private
specifier|static
name|File
name|resolveFile
parameter_list|(
name|String
name|optionalPathPrefix
parameter_list|,
name|String
name|path
parameter_list|,
name|String
name|optionalFileSuffix
parameter_list|)
throws|throws
name|FileNotFoundException
block|{
comment|//try within classpath with and without file suffix (as it could be a single test suite)
name|URL
name|resource
init|=
name|findResource
argument_list|(
name|path
argument_list|,
name|optionalFileSuffix
argument_list|)
decl_stmt|;
if|if
condition|(
name|resource
operator|==
literal|null
condition|)
block|{
comment|//try within classpath with optional prefix: /rest-api-spec/test (or /rest-api-spec/api) is optional
name|String
name|newPath
init|=
name|optionalPathPrefix
operator|+
literal|"/"
operator|+
name|path
decl_stmt|;
name|resource
operator|=
name|findResource
argument_list|(
name|newPath
argument_list|,
name|optionalFileSuffix
argument_list|)
expr_stmt|;
if|if
condition|(
name|resource
operator|==
literal|null
condition|)
block|{
comment|//if it wasn't on classpath we look outside ouf the classpath
name|File
name|file
init|=
name|findFile
argument_list|(
name|path
argument_list|,
name|optionalFileSuffix
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"file ["
operator|+
name|path
operator|+
literal|"] doesn't exist"
argument_list|)
throw|;
block|}
return|return
name|file
return|;
block|}
block|}
return|return
operator|new
name|File
argument_list|(
name|URI
operator|.
name|create
argument_list|(
name|resource
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
DECL|method|findResource
specifier|private
specifier|static
name|URL
name|findResource
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|optionalFileSuffix
parameter_list|)
block|{
name|URL
name|resource
init|=
name|FileUtils
operator|.
name|class
operator|.
name|getResource
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|resource
operator|==
literal|null
condition|)
block|{
comment|//if not found we append the file suffix to the path (as it is optional)
if|if
condition|(
name|Strings
operator|.
name|hasLength
argument_list|(
name|optionalFileSuffix
argument_list|)
operator|&&
operator|!
name|path
operator|.
name|endsWith
argument_list|(
name|optionalFileSuffix
argument_list|)
condition|)
block|{
name|resource
operator|=
name|FileUtils
operator|.
name|class
operator|.
name|getResource
argument_list|(
name|path
operator|+
name|optionalFileSuffix
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|resource
return|;
block|}
DECL|method|findFile
specifier|private
specifier|static
name|File
name|findFile
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|optionalFileSuffix
parameter_list|)
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
name|file
operator|=
operator|new
name|File
argument_list|(
name|path
operator|+
name|optionalFileSuffix
argument_list|)
expr_stmt|;
block|}
return|return
name|file
return|;
block|}
DECL|method|collectFiles
specifier|private
specifier|static
name|void
name|collectFiles
parameter_list|(
specifier|final
name|File
name|file
parameter_list|,
specifier|final
name|String
name|fileSuffix
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|File
argument_list|>
argument_list|>
name|files
parameter_list|)
block|{
if|if
condition|(
name|file
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|String
name|groupName
init|=
name|file
operator|.
name|getParentFile
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|File
argument_list|>
name|filesSet
init|=
name|files
operator|.
name|get
argument_list|(
name|groupName
argument_list|)
decl_stmt|;
if|if
condition|(
name|filesSet
operator|==
literal|null
condition|)
block|{
name|filesSet
operator|=
name|Sets
operator|.
name|newHashSet
argument_list|()
expr_stmt|;
name|files
operator|.
name|put
argument_list|(
name|groupName
argument_list|,
name|filesSet
argument_list|)
expr_stmt|;
block|}
name|filesSet
operator|.
name|add
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|file
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|walkDir
argument_list|(
name|file
argument_list|,
name|fileSuffix
argument_list|,
name|files
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|walkDir
specifier|private
specifier|static
name|void
name|walkDir
parameter_list|(
specifier|final
name|File
name|dir
parameter_list|,
specifier|final
name|String
name|fileSuffix
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|File
argument_list|>
argument_list|>
name|files
parameter_list|)
block|{
name|File
index|[]
name|children
init|=
name|dir
operator|.
name|listFiles
argument_list|(
operator|new
name|FileFilter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|accept
parameter_list|(
name|File
name|pathname
parameter_list|)
block|{
return|return
name|pathname
operator|.
name|isDirectory
argument_list|()
operator|||
name|pathname
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
name|fileSuffix
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
for|for
control|(
name|File
name|file
range|:
name|children
control|)
block|{
name|collectFiles
argument_list|(
name|file
argument_list|,
name|fileSuffix
argument_list|,
name|files
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

