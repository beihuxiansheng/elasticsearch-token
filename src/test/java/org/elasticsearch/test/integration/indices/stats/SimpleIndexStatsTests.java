begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.test.integration.indices.stats
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|integration
operator|.
name|indices
operator|.
name|stats
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|health
operator|.
name|ClusterHealthResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|stats
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|stats
operator|.
name|CommonStatsFlags
operator|.
name|Flag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|get
operator|.
name|GetResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|BytesStreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|BytesStreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|integration
operator|.
name|AbstractNodesTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|SimpleIndexStatsTests
specifier|public
class|class
name|SimpleIndexStatsTests
extends|extends
name|AbstractNodesTests
block|{
annotation|@
name|Override
DECL|method|beforeClass
specifier|protected
name|void
name|beforeClass
parameter_list|()
block|{
name|startNode
argument_list|(
literal|"node1"
argument_list|)
expr_stmt|;
name|startNode
argument_list|(
literal|"node2"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|client
specifier|public
name|Client
name|client
parameter_list|()
block|{
return|return
name|client
argument_list|(
literal|"node2"
argument_list|)
return|;
block|}
annotation|@
name|Test
DECL|method|simpleStats
specifier|public
name|void
name|simpleStats
parameter_list|()
throws|throws
name|Exception
block|{
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareDelete
argument_list|()
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
comment|// rely on 1 replica for this tests
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"test1"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"test2"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|ClusterHealthResponse
name|clusterHealthResponse
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareHealth
argument_list|()
operator|.
name|setWaitForEvents
argument_list|(
name|Priority
operator|.
name|LANGUID
argument_list|)
operator|.
name|setWaitForGreenStatus
argument_list|()
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|clusterHealthResponse
operator|.
name|isTimedOut
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test1"
argument_list|,
literal|"type1"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field"
argument_list|,
literal|"value"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test1"
argument_list|,
literal|"type2"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field"
argument_list|,
literal|"value"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test2"
argument_list|,
literal|"type"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field"
argument_list|,
literal|"value"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareRefresh
argument_list|()
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|IndicesStatsResponse
name|stats
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareStats
argument_list|()
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|stats
operator|.
name|getPrimaries
argument_list|()
operator|.
name|getDocs
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stats
operator|.
name|getTotal
argument_list|()
operator|.
name|getDocs
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|6l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stats
operator|.
name|getPrimaries
argument_list|()
operator|.
name|getIndexing
argument_list|()
operator|.
name|getTotal
argument_list|()
operator|.
name|getIndexCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stats
operator|.
name|getTotal
argument_list|()
operator|.
name|getIndexing
argument_list|()
operator|.
name|getTotal
argument_list|()
operator|.
name|getIndexCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|6l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stats
operator|.
name|getTotal
argument_list|()
operator|.
name|getStore
argument_list|()
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify nulls
name|assertThat
argument_list|(
name|stats
operator|.
name|getTotal
argument_list|()
operator|.
name|getMerge
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stats
operator|.
name|getTotal
argument_list|()
operator|.
name|getFlush
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stats
operator|.
name|getTotal
argument_list|()
operator|.
name|getRefresh
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stats
operator|.
name|getIndex
argument_list|(
literal|"test1"
argument_list|)
operator|.
name|getPrimaries
argument_list|()
operator|.
name|getDocs
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stats
operator|.
name|getIndex
argument_list|(
literal|"test1"
argument_list|)
operator|.
name|getTotal
argument_list|()
operator|.
name|getDocs
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|4l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stats
operator|.
name|getIndex
argument_list|(
literal|"test1"
argument_list|)
operator|.
name|getPrimaries
argument_list|()
operator|.
name|getStore
argument_list|()
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stats
operator|.
name|getIndex
argument_list|(
literal|"test1"
argument_list|)
operator|.
name|getPrimaries
argument_list|()
operator|.
name|getMerge
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stats
operator|.
name|getIndex
argument_list|(
literal|"test1"
argument_list|)
operator|.
name|getPrimaries
argument_list|()
operator|.
name|getFlush
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stats
operator|.
name|getIndex
argument_list|(
literal|"test1"
argument_list|)
operator|.
name|getPrimaries
argument_list|()
operator|.
name|getRefresh
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stats
operator|.
name|getIndex
argument_list|(
literal|"test2"
argument_list|)
operator|.
name|getPrimaries
argument_list|()
operator|.
name|getDocs
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stats
operator|.
name|getIndex
argument_list|(
literal|"test2"
argument_list|)
operator|.
name|getTotal
argument_list|()
operator|.
name|getDocs
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2l
argument_list|)
argument_list|)
expr_stmt|;
comment|// make sure that number of requests in progress is 0
name|assertThat
argument_list|(
name|stats
operator|.
name|getIndex
argument_list|(
literal|"test1"
argument_list|)
operator|.
name|getTotal
argument_list|()
operator|.
name|getIndexing
argument_list|()
operator|.
name|getTotal
argument_list|()
operator|.
name|getIndexCurrent
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stats
operator|.
name|getIndex
argument_list|(
literal|"test1"
argument_list|)
operator|.
name|getTotal
argument_list|()
operator|.
name|getIndexing
argument_list|()
operator|.
name|getTotal
argument_list|()
operator|.
name|getDeleteCurrent
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stats
operator|.
name|getIndex
argument_list|(
literal|"test1"
argument_list|)
operator|.
name|getTotal
argument_list|()
operator|.
name|getSearch
argument_list|()
operator|.
name|getTotal
argument_list|()
operator|.
name|getFetchCurrent
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stats
operator|.
name|getIndex
argument_list|(
literal|"test1"
argument_list|)
operator|.
name|getTotal
argument_list|()
operator|.
name|getSearch
argument_list|()
operator|.
name|getTotal
argument_list|()
operator|.
name|getQueryCurrent
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0l
argument_list|)
argument_list|)
expr_stmt|;
comment|// check flags
name|stats
operator|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareStats
argument_list|()
operator|.
name|setDocs
argument_list|(
literal|false
argument_list|)
operator|.
name|setStore
argument_list|(
literal|false
argument_list|)
operator|.
name|setIndexing
argument_list|(
literal|false
argument_list|)
operator|.
name|setFlush
argument_list|(
literal|true
argument_list|)
operator|.
name|setRefresh
argument_list|(
literal|true
argument_list|)
operator|.
name|setMerge
argument_list|(
literal|true
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|stats
operator|.
name|getTotal
argument_list|()
operator|.
name|getDocs
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stats
operator|.
name|getTotal
argument_list|()
operator|.
name|getStore
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stats
operator|.
name|getTotal
argument_list|()
operator|.
name|getIndexing
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stats
operator|.
name|getTotal
argument_list|()
operator|.
name|getMerge
argument_list|()
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stats
operator|.
name|getTotal
argument_list|()
operator|.
name|getFlush
argument_list|()
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stats
operator|.
name|getTotal
argument_list|()
operator|.
name|getRefresh
argument_list|()
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// check types
name|stats
operator|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareStats
argument_list|()
operator|.
name|setTypes
argument_list|(
literal|"type1"
argument_list|,
literal|"type"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|stats
operator|.
name|getPrimaries
argument_list|()
operator|.
name|getIndexing
argument_list|()
operator|.
name|getTypeStats
argument_list|()
operator|.
name|get
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|getIndexCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stats
operator|.
name|getPrimaries
argument_list|()
operator|.
name|getIndexing
argument_list|()
operator|.
name|getTypeStats
argument_list|()
operator|.
name|get
argument_list|(
literal|"type"
argument_list|)
operator|.
name|getIndexCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stats
operator|.
name|getPrimaries
argument_list|()
operator|.
name|getIndexing
argument_list|()
operator|.
name|getTypeStats
argument_list|()
operator|.
name|get
argument_list|(
literal|"type2"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stats
operator|.
name|getPrimaries
argument_list|()
operator|.
name|getIndexing
argument_list|()
operator|.
name|getTypeStats
argument_list|()
operator|.
name|get
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|getIndexCurrent
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stats
operator|.
name|getPrimaries
argument_list|()
operator|.
name|getIndexing
argument_list|()
operator|.
name|getTypeStats
argument_list|()
operator|.
name|get
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|getDeleteCurrent
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stats
operator|.
name|getTotal
argument_list|()
operator|.
name|getGet
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0l
argument_list|)
argument_list|)
expr_stmt|;
comment|// check get
name|GetResponse
name|getResponse
init|=
name|client
argument_list|()
operator|.
name|prepareGet
argument_list|(
literal|"test1"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|getResponse
operator|.
name|isExists
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|stats
operator|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareStats
argument_list|()
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|stats
operator|.
name|getTotal
argument_list|()
operator|.
name|getGet
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stats
operator|.
name|getTotal
argument_list|()
operator|.
name|getGet
argument_list|()
operator|.
name|getExistsCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stats
operator|.
name|getTotal
argument_list|()
operator|.
name|getGet
argument_list|()
operator|.
name|getMissingCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0l
argument_list|)
argument_list|)
expr_stmt|;
comment|// missing get
name|getResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareGet
argument_list|(
literal|"test1"
argument_list|,
literal|"type1"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|getResponse
operator|.
name|isExists
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|stats
operator|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareStats
argument_list|()
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|stats
operator|.
name|getTotal
argument_list|()
operator|.
name|getGet
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stats
operator|.
name|getTotal
argument_list|()
operator|.
name|getGet
argument_list|()
operator|.
name|getExistsCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stats
operator|.
name|getTotal
argument_list|()
operator|.
name|getGet
argument_list|()
operator|.
name|getMissingCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
comment|// clear all
name|stats
operator|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareStats
argument_list|()
operator|.
name|setDocs
argument_list|(
literal|false
argument_list|)
operator|.
name|setStore
argument_list|(
literal|false
argument_list|)
operator|.
name|setIndexing
argument_list|(
literal|false
argument_list|)
operator|.
name|setFlush
argument_list|(
literal|true
argument_list|)
operator|.
name|setRefresh
argument_list|(
literal|true
argument_list|)
operator|.
name|setMerge
argument_list|(
literal|true
argument_list|)
operator|.
name|clear
argument_list|()
comment|// reset defaults
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|stats
operator|.
name|getTotal
argument_list|()
operator|.
name|getDocs
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stats
operator|.
name|getTotal
argument_list|()
operator|.
name|getStore
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stats
operator|.
name|getTotal
argument_list|()
operator|.
name|getIndexing
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stats
operator|.
name|getTotal
argument_list|()
operator|.
name|getGet
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stats
operator|.
name|getTotal
argument_list|()
operator|.
name|getSearch
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMergeStats
specifier|public
name|void
name|testMergeStats
parameter_list|()
block|{
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareDelete
argument_list|()
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
comment|// rely on 1 replica for this tests
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"test1"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|ClusterHealthResponse
name|clusterHealthResponse
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareHealth
argument_list|()
operator|.
name|setWaitForEvents
argument_list|(
name|Priority
operator|.
name|LANGUID
argument_list|)
operator|.
name|setWaitForGreenStatus
argument_list|()
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|clusterHealthResponse
operator|.
name|isTimedOut
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// clear all
name|IndicesStatsResponse
name|stats
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareStats
argument_list|()
operator|.
name|setDocs
argument_list|(
literal|false
argument_list|)
operator|.
name|setStore
argument_list|(
literal|false
argument_list|)
operator|.
name|setIndexing
argument_list|(
literal|false
argument_list|)
operator|.
name|setFlush
argument_list|(
literal|true
argument_list|)
operator|.
name|setRefresh
argument_list|(
literal|true
argument_list|)
operator|.
name|setMerge
argument_list|(
literal|true
argument_list|)
operator|.
name|clear
argument_list|()
comment|// reset defaults
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|stats
operator|.
name|getTotal
argument_list|()
operator|.
name|getDocs
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stats
operator|.
name|getTotal
argument_list|()
operator|.
name|getStore
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stats
operator|.
name|getTotal
argument_list|()
operator|.
name|getIndexing
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stats
operator|.
name|getTotal
argument_list|()
operator|.
name|getGet
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stats
operator|.
name|getTotal
argument_list|()
operator|.
name|getSearch
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|20
condition|;
name|i
operator|++
control|)
block|{
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test1"
argument_list|,
literal|"type1"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field"
argument_list|,
literal|"value"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test1"
argument_list|,
literal|"type2"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field"
argument_list|,
literal|"value"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareFlush
argument_list|()
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
block|}
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareOptimize
argument_list|()
operator|.
name|setWaitForMerge
argument_list|(
literal|true
argument_list|)
operator|.
name|setMaxNumSegments
argument_list|(
literal|1
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|stats
operator|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareStats
argument_list|()
operator|.
name|setMerge
argument_list|(
literal|true
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|stats
operator|.
name|getTotal
argument_list|()
operator|.
name|getMerge
argument_list|()
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stats
operator|.
name|getTotal
argument_list|()
operator|.
name|getMerge
argument_list|()
operator|.
name|getTotal
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
literal|0l
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAllFlags
specifier|public
name|void
name|testAllFlags
parameter_list|()
throws|throws
name|Exception
block|{
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareDelete
argument_list|()
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
comment|// rely on 1 replica for this tests
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"test1"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"test2"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|ClusterHealthResponse
name|clusterHealthResponse
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareHealth
argument_list|()
operator|.
name|setWaitForEvents
argument_list|(
name|Priority
operator|.
name|LANGUID
argument_list|)
operator|.
name|setWaitForGreenStatus
argument_list|()
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|clusterHealthResponse
operator|.
name|isTimedOut
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test1"
argument_list|,
literal|"type1"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field"
argument_list|,
literal|"value"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test1"
argument_list|,
literal|"type2"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field"
argument_list|,
literal|"value"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test2"
argument_list|,
literal|"type"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field"
argument_list|,
literal|"value"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareRefresh
argument_list|()
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|IndicesStatsRequestBuilder
name|builder
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareStats
argument_list|()
decl_stmt|;
name|Flag
index|[]
name|values
init|=
name|CommonStatsFlags
operator|.
name|Flag
operator|.
name|values
argument_list|()
decl_stmt|;
for|for
control|(
name|Flag
name|flag
range|:
name|values
control|)
block|{
name|set
argument_list|(
name|flag
argument_list|,
name|builder
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|IndicesStatsResponse
name|stats
init|=
name|builder
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
for|for
control|(
name|Flag
name|flag
range|:
name|values
control|)
block|{
name|assertThat
argument_list|(
name|isSet
argument_list|(
name|flag
argument_list|,
name|stats
operator|.
name|getPrimaries
argument_list|()
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|isSet
argument_list|(
name|flag
argument_list|,
name|stats
operator|.
name|getTotal
argument_list|()
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Flag
name|flag
range|:
name|values
control|)
block|{
name|set
argument_list|(
name|flag
argument_list|,
name|builder
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|stats
operator|=
name|builder
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
for|for
control|(
name|Flag
name|flag
range|:
name|values
control|)
block|{
name|assertThat
argument_list|(
name|isSet
argument_list|(
name|flag
argument_list|,
name|stats
operator|.
name|getPrimaries
argument_list|()
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|isSet
argument_list|(
name|flag
argument_list|,
name|stats
operator|.
name|getTotal
argument_list|()
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Random
name|random
init|=
name|getRandom
argument_list|()
decl_stmt|;
name|EnumSet
argument_list|<
name|Flag
argument_list|>
name|flags
init|=
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|Flag
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|Flag
name|flag
range|:
name|values
control|)
block|{
if|if
condition|(
name|random
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|flags
operator|.
name|add
argument_list|(
name|flag
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Flag
name|flag
range|:
name|values
control|)
block|{
name|set
argument_list|(
name|flag
argument_list|,
name|builder
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// clear all
block|}
for|for
control|(
name|Flag
name|flag
range|:
name|flags
control|)
block|{
comment|// set the flags
name|set
argument_list|(
name|flag
argument_list|,
name|builder
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|stats
operator|=
name|builder
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
for|for
control|(
name|Flag
name|flag
range|:
name|flags
control|)
block|{
comment|// check the flags
name|assertThat
argument_list|(
name|isSet
argument_list|(
name|flag
argument_list|,
name|stats
operator|.
name|getPrimaries
argument_list|()
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|isSet
argument_list|(
name|flag
argument_list|,
name|stats
operator|.
name|getTotal
argument_list|()
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Flag
name|flag
range|:
name|EnumSet
operator|.
name|complementOf
argument_list|(
name|flags
argument_list|)
control|)
block|{
comment|// check the complement
name|assertThat
argument_list|(
name|isSet
argument_list|(
name|flag
argument_list|,
name|stats
operator|.
name|getPrimaries
argument_list|()
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|isSet
argument_list|(
name|flag
argument_list|,
name|stats
operator|.
name|getTotal
argument_list|()
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testEncodeDecodeCommonStats
specifier|public
name|void
name|testEncodeDecodeCommonStats
parameter_list|()
throws|throws
name|IOException
block|{
name|CommonStatsFlags
name|flags
init|=
operator|new
name|CommonStatsFlags
argument_list|()
decl_stmt|;
name|Flag
index|[]
name|values
init|=
name|CommonStatsFlags
operator|.
name|Flag
operator|.
name|values
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|flags
operator|.
name|anySet
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Flag
name|flag
range|:
name|values
control|)
block|{
name|flags
operator|.
name|set
argument_list|(
name|flag
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|flags
operator|.
name|anySet
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Flag
name|flag
range|:
name|values
control|)
block|{
name|flags
operator|.
name|set
argument_list|(
name|flag
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|flags
operator|.
name|anySet
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Random
name|random
init|=
name|getRandom
argument_list|()
decl_stmt|;
name|flags
operator|.
name|set
argument_list|(
name|values
index|[
name|random
operator|.
name|nextInt
argument_list|(
name|values
operator|.
name|length
argument_list|)
index|]
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|flags
operator|.
name|anySet
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|{
name|BytesStreamOutput
name|out
init|=
operator|new
name|BytesStreamOutput
argument_list|()
decl_stmt|;
name|flags
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|BytesReference
name|bytes
init|=
name|out
operator|.
name|bytes
argument_list|()
decl_stmt|;
name|CommonStatsFlags
name|readStats
init|=
name|CommonStatsFlags
operator|.
name|readCommonStatsFlags
argument_list|(
operator|new
name|BytesStreamInput
argument_list|(
name|bytes
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|Flag
name|flag
range|:
name|values
control|)
block|{
name|assertThat
argument_list|(
name|flags
operator|.
name|isSet
argument_list|(
name|flag
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|readStats
operator|.
name|isSet
argument_list|(
name|flag
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|{
for|for
control|(
name|Flag
name|flag
range|:
name|values
control|)
block|{
name|flags
operator|.
name|set
argument_list|(
name|flag
argument_list|,
name|random
operator|.
name|nextBoolean
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|BytesStreamOutput
name|out
init|=
operator|new
name|BytesStreamOutput
argument_list|()
decl_stmt|;
name|flags
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|BytesReference
name|bytes
init|=
name|out
operator|.
name|bytes
argument_list|()
decl_stmt|;
name|CommonStatsFlags
name|readStats
init|=
name|CommonStatsFlags
operator|.
name|readCommonStatsFlags
argument_list|(
operator|new
name|BytesStreamInput
argument_list|(
name|bytes
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|Flag
name|flag
range|:
name|values
control|)
block|{
name|assertThat
argument_list|(
name|flags
operator|.
name|isSet
argument_list|(
name|flag
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|readStats
operator|.
name|isSet
argument_list|(
name|flag
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testFlagOrdinalOrder
specifier|public
name|void
name|testFlagOrdinalOrder
parameter_list|()
block|{
name|Flag
index|[]
name|flags
init|=
operator|new
name|Flag
index|[]
block|{
name|Flag
operator|.
name|Store
block|,
name|Flag
operator|.
name|Indexing
block|,
name|Flag
operator|.
name|Get
block|,
name|Flag
operator|.
name|Search
block|,
name|Flag
operator|.
name|Merge
block|,
name|Flag
operator|.
name|Flush
block|,
name|Flag
operator|.
name|Refresh
block|,
name|Flag
operator|.
name|FilterCache
block|,
name|Flag
operator|.
name|IdCache
block|,
name|Flag
operator|.
name|FieldData
block|,
name|Flag
operator|.
name|Docs
block|,
name|Flag
operator|.
name|Warmer
block|,
name|Flag
operator|.
name|Percolate
block|}
decl_stmt|;
name|assertThat
argument_list|(
name|flags
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
name|Flag
operator|.
name|values
argument_list|()
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|flags
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertThat
argument_list|(
literal|"ordinal has changed - this breaks the wire protocol. Only append to new values"
argument_list|,
name|i
argument_list|,
name|equalTo
argument_list|(
name|flags
index|[
name|i
index|]
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|set
specifier|private
specifier|static
name|void
name|set
parameter_list|(
name|Flag
name|flag
parameter_list|,
name|IndicesStatsRequestBuilder
name|builder
parameter_list|,
name|boolean
name|set
parameter_list|)
block|{
switch|switch
condition|(
name|flag
condition|)
block|{
case|case
name|Docs
case|:
name|builder
operator|.
name|setDocs
argument_list|(
name|set
argument_list|)
expr_stmt|;
break|break;
case|case
name|FieldData
case|:
name|builder
operator|.
name|setFieldData
argument_list|(
name|set
argument_list|)
expr_stmt|;
break|break;
case|case
name|FilterCache
case|:
name|builder
operator|.
name|setFilterCache
argument_list|(
name|set
argument_list|)
expr_stmt|;
break|break;
case|case
name|Flush
case|:
name|builder
operator|.
name|setFlush
argument_list|(
name|set
argument_list|)
expr_stmt|;
break|break;
case|case
name|Get
case|:
name|builder
operator|.
name|setGet
argument_list|(
name|set
argument_list|)
expr_stmt|;
break|break;
case|case
name|IdCache
case|:
name|builder
operator|.
name|setIdCache
argument_list|(
name|set
argument_list|)
expr_stmt|;
break|break;
case|case
name|Indexing
case|:
name|builder
operator|.
name|setIndexing
argument_list|(
name|set
argument_list|)
expr_stmt|;
break|break;
case|case
name|Merge
case|:
name|builder
operator|.
name|setMerge
argument_list|(
name|set
argument_list|)
expr_stmt|;
break|break;
case|case
name|Refresh
case|:
name|builder
operator|.
name|setRefresh
argument_list|(
name|set
argument_list|)
expr_stmt|;
break|break;
case|case
name|Search
case|:
name|builder
operator|.
name|setSearch
argument_list|(
name|set
argument_list|)
expr_stmt|;
break|break;
case|case
name|Store
case|:
name|builder
operator|.
name|setStore
argument_list|(
name|set
argument_list|)
expr_stmt|;
break|break;
case|case
name|Warmer
case|:
name|builder
operator|.
name|setWarmer
argument_list|(
name|set
argument_list|)
expr_stmt|;
break|break;
case|case
name|Percolate
case|:
name|builder
operator|.
name|setPercolate
argument_list|(
name|set
argument_list|)
expr_stmt|;
break|break;
default|default:
assert|assert
literal|false
operator|:
literal|"new flag? "
operator|+
name|flag
assert|;
break|break;
block|}
block|}
DECL|method|isSet
specifier|private
specifier|static
name|boolean
name|isSet
parameter_list|(
name|Flag
name|flag
parameter_list|,
name|CommonStats
name|response
parameter_list|)
block|{
switch|switch
condition|(
name|flag
condition|)
block|{
case|case
name|Docs
case|:
return|return
name|response
operator|.
name|getDocs
argument_list|()
operator|!=
literal|null
return|;
case|case
name|FieldData
case|:
return|return
name|response
operator|.
name|getFieldData
argument_list|()
operator|!=
literal|null
return|;
case|case
name|FilterCache
case|:
return|return
name|response
operator|.
name|getFilterCache
argument_list|()
operator|!=
literal|null
return|;
case|case
name|Flush
case|:
return|return
name|response
operator|.
name|getFlush
argument_list|()
operator|!=
literal|null
return|;
case|case
name|Get
case|:
return|return
name|response
operator|.
name|getGet
argument_list|()
operator|!=
literal|null
return|;
case|case
name|IdCache
case|:
return|return
name|response
operator|.
name|getIdCache
argument_list|()
operator|!=
literal|null
return|;
case|case
name|Indexing
case|:
return|return
name|response
operator|.
name|getIndexing
argument_list|()
operator|!=
literal|null
return|;
case|case
name|Merge
case|:
return|return
name|response
operator|.
name|getMerge
argument_list|()
operator|!=
literal|null
return|;
case|case
name|Refresh
case|:
return|return
name|response
operator|.
name|getRefresh
argument_list|()
operator|!=
literal|null
return|;
case|case
name|Search
case|:
return|return
name|response
operator|.
name|getSearch
argument_list|()
operator|!=
literal|null
return|;
case|case
name|Store
case|:
return|return
name|response
operator|.
name|getStore
argument_list|()
operator|!=
literal|null
return|;
case|case
name|Warmer
case|:
return|return
name|response
operator|.
name|getWarmer
argument_list|()
operator|!=
literal|null
return|;
case|case
name|Percolate
case|:
return|return
name|response
operator|.
name|getPercolate
argument_list|()
operator|!=
literal|null
return|;
default|default:
assert|assert
literal|false
operator|:
literal|"new flag? "
operator|+
name|flag
assert|;
return|return
literal|false
return|;
block|}
block|}
block|}
end_class

end_unit

