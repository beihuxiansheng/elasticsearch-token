begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.test.integration.indices.store
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|integration
operator|.
name|indices
operator|.
name|store
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|Environment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|service
operator|.
name|InternalIndexShard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|IndexMissingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|IndicesService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|node
operator|.
name|internal
operator|.
name|InternalNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|integration
operator|.
name|AbstractNodesTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|testng
operator|.
name|annotations
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
operator|.
name|settingsBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|MatcherAssert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|SimpleDistributorTests
specifier|public
class|class
name|SimpleDistributorTests
extends|extends
name|AbstractNodesTests
block|{
DECL|field|environment
specifier|protected
name|Environment
name|environment
decl_stmt|;
annotation|@
name|BeforeMethod
DECL|method|getTestEnvironment
specifier|public
name|void
name|getTestEnvironment
parameter_list|()
block|{
name|environment
operator|=
operator|(
operator|(
name|InternalNode
operator|)
name|startNode
argument_list|(
literal|"node0"
argument_list|)
operator|)
operator|.
name|injector
argument_list|()
operator|.
name|getInstance
argument_list|(
name|Environment
operator|.
name|class
argument_list|)
expr_stmt|;
name|closeNode
argument_list|(
literal|"node0"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterMethod
DECL|method|closeNodes
specifier|public
name|void
name|closeNodes
parameter_list|()
block|{
name|closeAllNodes
argument_list|()
expr_stmt|;
block|}
DECL|field|STORE_TYPES
specifier|public
specifier|final
specifier|static
name|String
index|[]
name|STORE_TYPES
init|=
block|{
literal|"fs"
block|,
literal|"simplefs"
block|,
literal|"niofs"
block|,
literal|"mmapfs"
block|}
decl_stmt|;
annotation|@
name|Test
DECL|method|testAvailableSpaceDetection
specifier|public
name|void
name|testAvailableSpaceDetection
parameter_list|()
block|{
name|File
name|dataRoot
init|=
name|environment
operator|.
name|dataFiles
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|startNode
argument_list|(
literal|"node1"
argument_list|,
name|settingsBuilder
argument_list|()
operator|.
name|putArray
argument_list|(
literal|"path.data"
argument_list|,
operator|new
name|File
argument_list|(
name|dataRoot
argument_list|,
literal|"data1"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
operator|new
name|File
argument_list|(
name|dataRoot
argument_list|,
literal|"data2"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|store
range|:
name|STORE_TYPES
control|)
block|{
name|createIndexWithStoreType
argument_list|(
literal|"node1"
argument_list|,
literal|"test"
argument_list|,
name|store
argument_list|,
name|StrictDistributor
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testDirectoryToString
specifier|public
name|void
name|testDirectoryToString
parameter_list|()
block|{
name|File
name|dataRoot
init|=
name|environment
operator|.
name|dataFiles
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|String
name|dataPath1
init|=
operator|new
name|File
argument_list|(
name|dataRoot
argument_list|,
literal|"data1"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
name|String
name|dataPath2
init|=
operator|new
name|File
argument_list|(
name|dataRoot
argument_list|,
literal|"data2"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
name|startNode
argument_list|(
literal|"node1"
argument_list|,
name|settingsBuilder
argument_list|()
operator|.
name|putArray
argument_list|(
literal|"path.data"
argument_list|,
name|dataPath1
argument_list|,
name|dataPath2
argument_list|)
argument_list|)
expr_stmt|;
name|createIndexWithStoreType
argument_list|(
literal|"node1"
argument_list|,
literal|"test"
argument_list|,
literal|"niofs"
argument_list|,
literal|"least_used"
argument_list|)
expr_stmt|;
name|String
name|storeString
init|=
name|getStoreDirectory
argument_list|(
literal|"node1"
argument_list|,
literal|"test"
argument_list|,
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
name|storeString
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|storeString
argument_list|,
name|startsWith
argument_list|(
literal|"store(least_used[niofs("
operator|+
name|dataPath1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|storeString
argument_list|,
name|containsString
argument_list|(
literal|"), niofs("
operator|+
name|dataPath2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|storeString
argument_list|,
name|endsWith
argument_list|(
literal|")])"
argument_list|)
argument_list|)
expr_stmt|;
name|createIndexWithStoreType
argument_list|(
literal|"node1"
argument_list|,
literal|"test"
argument_list|,
literal|"niofs"
argument_list|,
literal|"random"
argument_list|)
expr_stmt|;
name|storeString
operator|=
name|getStoreDirectory
argument_list|(
literal|"node1"
argument_list|,
literal|"test"
argument_list|,
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
name|storeString
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|storeString
argument_list|,
name|startsWith
argument_list|(
literal|"store(random[niofs("
operator|+
name|dataPath1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|storeString
argument_list|,
name|containsString
argument_list|(
literal|"), niofs("
operator|+
name|dataPath2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|storeString
argument_list|,
name|endsWith
argument_list|(
literal|")])"
argument_list|)
argument_list|)
expr_stmt|;
name|createIndexWithStoreType
argument_list|(
literal|"node1"
argument_list|,
literal|"test"
argument_list|,
literal|"mmapfs"
argument_list|,
literal|"least_used"
argument_list|)
expr_stmt|;
name|storeString
operator|=
name|getStoreDirectory
argument_list|(
literal|"node1"
argument_list|,
literal|"test"
argument_list|,
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
name|storeString
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|storeString
argument_list|,
name|startsWith
argument_list|(
literal|"store(least_used[mmapfs("
operator|+
name|dataPath1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|storeString
argument_list|,
name|containsString
argument_list|(
literal|"), mmapfs("
operator|+
name|dataPath2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|storeString
argument_list|,
name|endsWith
argument_list|(
literal|")])"
argument_list|)
argument_list|)
expr_stmt|;
name|createIndexWithStoreType
argument_list|(
literal|"node1"
argument_list|,
literal|"test"
argument_list|,
literal|"simplefs"
argument_list|,
literal|"least_used"
argument_list|)
expr_stmt|;
name|storeString
operator|=
name|getStoreDirectory
argument_list|(
literal|"node1"
argument_list|,
literal|"test"
argument_list|,
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
name|storeString
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|storeString
argument_list|,
name|startsWith
argument_list|(
literal|"store(least_used[simplefs("
operator|+
name|dataPath1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|storeString
argument_list|,
name|containsString
argument_list|(
literal|"), simplefs("
operator|+
name|dataPath2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|storeString
argument_list|,
name|endsWith
argument_list|(
literal|")])"
argument_list|)
argument_list|)
expr_stmt|;
name|createIndexWithStoreType
argument_list|(
literal|"node1"
argument_list|,
literal|"test"
argument_list|,
literal|"memory"
argument_list|,
literal|"least_used"
argument_list|)
expr_stmt|;
name|storeString
operator|=
name|getStoreDirectory
argument_list|(
literal|"node1"
argument_list|,
literal|"test"
argument_list|,
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
name|storeString
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|storeString
argument_list|,
name|equalTo
argument_list|(
literal|"store(least_used[byte_buffer])"
argument_list|)
argument_list|)
expr_stmt|;
name|createIndexWithRateLimitingStoreType
argument_list|(
literal|"node1"
argument_list|,
literal|"test"
argument_list|,
literal|"niofs"
argument_list|,
literal|"least_used"
argument_list|,
literal|"5mb"
argument_list|)
expr_stmt|;
name|storeString
operator|=
name|getStoreDirectory
argument_list|(
literal|"node1"
argument_list|,
literal|"test"
argument_list|,
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
name|storeString
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|storeString
argument_list|,
name|startsWith
argument_list|(
literal|"store(least_used[rate_limited(niofs("
operator|+
name|dataPath1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|storeString
argument_list|,
name|containsString
argument_list|(
literal|"), rate_limited(niofs("
operator|+
name|dataPath2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|storeString
argument_list|,
name|endsWith
argument_list|(
literal|", type=MERGE, rate=5.0)])"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|createIndexWithStoreType
specifier|private
name|void
name|createIndexWithStoreType
parameter_list|(
name|String
name|nodeId
parameter_list|,
name|String
name|index
parameter_list|,
name|String
name|storeType
parameter_list|,
name|String
name|distributor
parameter_list|)
block|{
try|try
block|{
name|client
argument_list|(
name|nodeId
argument_list|)
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareDelete
argument_list|(
name|index
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexMissingException
name|ex
parameter_list|)
block|{
comment|// Ignore
block|}
name|client
argument_list|(
name|nodeId
argument_list|)
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
name|index
argument_list|)
operator|.
name|setSettings
argument_list|(
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.store.distributor"
argument_list|,
name|distributor
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.store.type"
argument_list|,
name|storeType
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.number_of_replicas"
argument_list|,
literal|0
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.number_of_shards"
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|client
argument_list|(
literal|"node1"
argument_list|)
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareHealth
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setWaitForGreenStatus
argument_list|()
operator|.
name|setTimeout
argument_list|(
name|TimeValue
operator|.
name|timeValueSeconds
argument_list|(
literal|5
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
operator|.
name|isTimedOut
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|createIndexWithRateLimitingStoreType
specifier|private
name|void
name|createIndexWithRateLimitingStoreType
parameter_list|(
name|String
name|nodeId
parameter_list|,
name|String
name|index
parameter_list|,
name|String
name|storeType
parameter_list|,
name|String
name|distributor
parameter_list|,
name|String
name|limit
parameter_list|)
block|{
try|try
block|{
name|client
argument_list|(
name|nodeId
argument_list|)
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareDelete
argument_list|(
name|index
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexMissingException
name|ex
parameter_list|)
block|{
comment|// Ignore
block|}
name|client
argument_list|(
name|nodeId
argument_list|)
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
name|index
argument_list|)
operator|.
name|setSettings
argument_list|(
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.store.distributor"
argument_list|,
name|distributor
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.store.type"
argument_list|,
name|storeType
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.store.throttle.type"
argument_list|,
literal|"merge"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.store.throttle.max_bytes_per_sec"
argument_list|,
name|limit
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.number_of_replicas"
argument_list|,
literal|0
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.number_of_shards"
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|client
argument_list|(
literal|"node1"
argument_list|)
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareHealth
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setWaitForGreenStatus
argument_list|()
operator|.
name|setTimeout
argument_list|(
name|TimeValue
operator|.
name|timeValueSeconds
argument_list|(
literal|5
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
operator|.
name|isTimedOut
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getStoreDirectory
specifier|private
name|Directory
name|getStoreDirectory
parameter_list|(
name|String
name|nodeId
parameter_list|,
name|String
name|index
parameter_list|,
name|int
name|shardId
parameter_list|)
block|{
name|IndicesService
name|indicesService
init|=
operator|(
operator|(
name|InternalNode
operator|)
name|node
argument_list|(
name|nodeId
argument_list|)
operator|)
operator|.
name|injector
argument_list|()
operator|.
name|getInstance
argument_list|(
name|IndicesService
operator|.
name|class
argument_list|)
decl_stmt|;
name|InternalIndexShard
name|indexShard
init|=
call|(
name|InternalIndexShard
call|)
argument_list|(
name|indicesService
operator|.
name|indexService
argument_list|(
name|index
argument_list|)
operator|.
name|shard
argument_list|(
name|shardId
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|indexShard
operator|.
name|store
argument_list|()
operator|.
name|directory
argument_list|()
return|;
block|}
block|}
end_class

end_unit

