begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.test.integration.nodesinfo
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|integration
operator|.
name|nodesinfo
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|health
operator|.
name|ClusterHealthResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|node
operator|.
name|info
operator|.
name|NodesInfoResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|node
operator|.
name|info
operator|.
name|PluginInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|node
operator|.
name|info
operator|.
name|PluginsInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|node
operator|.
name|internal
operator|.
name|InternalNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|integration
operator|.
name|AbstractNodesTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|integration
operator|.
name|nodesinfo
operator|.
name|plugin
operator|.
name|dummy1
operator|.
name|TestPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|integration
operator|.
name|nodesinfo
operator|.
name|plugin
operator|.
name|dummy2
operator|.
name|TestNoVersionPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|testng
operator|.
name|annotations
operator|.
name|AfterMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|testng
operator|.
name|annotations
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|Requests
operator|.
name|clusterHealthRequest
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|Requests
operator|.
name|nodesInfoRequest
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
operator|.
name|settingsBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|MatcherAssert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|SimpleNodesInfoTests
specifier|public
class|class
name|SimpleNodesInfoTests
extends|extends
name|AbstractNodesTests
block|{
DECL|class|Fields
specifier|static
specifier|final
class|class
name|Fields
block|{
DECL|field|SITE_PLUGIN
specifier|static
specifier|final
name|String
name|SITE_PLUGIN
init|=
literal|"dummy"
decl_stmt|;
DECL|field|SITE_PLUGIN_DESCRIPTION
specifier|static
specifier|final
name|String
name|SITE_PLUGIN_DESCRIPTION
init|=
literal|"This is a description for a dummy test site plugin."
decl_stmt|;
DECL|field|SITE_PLUGIN_NO_DESCRIPTION
specifier|static
specifier|final
name|String
name|SITE_PLUGIN_NO_DESCRIPTION
init|=
literal|"No description found for dummy."
decl_stmt|;
DECL|field|JVM_PLUGIN_NO_DESCRIPTION
specifier|static
specifier|final
name|String
name|JVM_PLUGIN_NO_DESCRIPTION
init|=
literal|"No description found for test-no-version-plugin."
decl_stmt|;
block|}
annotation|@
name|AfterMethod
DECL|method|closeNodes
specifier|public
name|void
name|closeNodes
parameter_list|()
block|{
name|closeAllNodes
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNodesInfos
specifier|public
name|void
name|testNodesInfos
parameter_list|()
block|{
name|startNode
argument_list|(
literal|"server1"
argument_list|)
expr_stmt|;
name|startNode
argument_list|(
literal|"server2"
argument_list|)
expr_stmt|;
name|ClusterHealthResponse
name|clusterHealth
init|=
name|client
argument_list|(
literal|"server2"
argument_list|)
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|health
argument_list|(
name|clusterHealthRequest
argument_list|()
operator|.
name|waitForGreenStatus
argument_list|()
argument_list|)
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> done cluster_health, status "
operator|+
name|clusterHealth
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|server1NodeId
init|=
operator|(
operator|(
name|InternalNode
operator|)
name|node
argument_list|(
literal|"server1"
argument_list|)
operator|)
operator|.
name|injector
argument_list|()
operator|.
name|getInstance
argument_list|(
name|ClusterService
operator|.
name|class
argument_list|)
operator|.
name|state
argument_list|()
operator|.
name|nodes
argument_list|()
operator|.
name|localNodeId
argument_list|()
decl_stmt|;
name|String
name|server2NodeId
init|=
operator|(
operator|(
name|InternalNode
operator|)
name|node
argument_list|(
literal|"server2"
argument_list|)
operator|)
operator|.
name|injector
argument_list|()
operator|.
name|getInstance
argument_list|(
name|ClusterService
operator|.
name|class
argument_list|)
operator|.
name|state
argument_list|()
operator|.
name|nodes
argument_list|()
operator|.
name|localNodeId
argument_list|()
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> started nodes: "
operator|+
name|server1NodeId
operator|+
literal|" and "
operator|+
name|server2NodeId
argument_list|)
expr_stmt|;
name|NodesInfoResponse
name|response
init|=
name|client
argument_list|(
literal|"server1"
argument_list|)
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareNodesInfo
argument_list|()
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getNodes
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getNodesMap
argument_list|()
operator|.
name|get
argument_list|(
name|server1NodeId
argument_list|)
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getNodesMap
argument_list|()
operator|.
name|get
argument_list|(
name|server2NodeId
argument_list|)
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|(
literal|"server2"
argument_list|)
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|nodesInfo
argument_list|(
name|nodesInfoRequest
argument_list|()
argument_list|)
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getNodes
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getNodesMap
argument_list|()
operator|.
name|get
argument_list|(
name|server1NodeId
argument_list|)
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getNodesMap
argument_list|()
operator|.
name|get
argument_list|(
name|server2NodeId
argument_list|)
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|(
literal|"server1"
argument_list|)
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|nodesInfo
argument_list|(
name|nodesInfoRequest
argument_list|(
name|server1NodeId
argument_list|)
argument_list|)
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getNodes
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getNodesMap
argument_list|()
operator|.
name|get
argument_list|(
name|server1NodeId
argument_list|)
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|(
literal|"server2"
argument_list|)
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|nodesInfo
argument_list|(
name|nodesInfoRequest
argument_list|(
name|server1NodeId
argument_list|)
argument_list|)
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getNodes
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getNodesMap
argument_list|()
operator|.
name|get
argument_list|(
name|server1NodeId
argument_list|)
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|(
literal|"server1"
argument_list|)
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|nodesInfo
argument_list|(
name|nodesInfoRequest
argument_list|(
name|server2NodeId
argument_list|)
argument_list|)
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getNodes
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getNodesMap
argument_list|()
operator|.
name|get
argument_list|(
name|server2NodeId
argument_list|)
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|(
literal|"server2"
argument_list|)
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|nodesInfo
argument_list|(
name|nodesInfoRequest
argument_list|(
name|server2NodeId
argument_list|)
argument_list|)
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getNodes
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getNodesMap
argument_list|()
operator|.
name|get
argument_list|(
name|server2NodeId
argument_list|)
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Use case is to start 4 nodes:      *<ul>      *<li>1 : no plugin</li>      *<li>2 : one site plugin (with a es-plugin.properties file)</li>      *<li>3 : one java plugin</li>      *<li>4 : one site plugin and 2 java plugins (included the previous one)</li>      *</ul>      * We test here that NodeInfo API with plugin option give us the right results.      * @throws URISyntaxException      */
annotation|@
name|Test
DECL|method|testNodeInfoPlugin
specifier|public
name|void
name|testNodeInfoPlugin
parameter_list|()
throws|throws
name|URISyntaxException
block|{
comment|// We start four nodes
comment|// The first has no plugin
name|String
name|server1NodeId
init|=
name|startNodeWithPlugins
argument_list|(
literal|"node1"
argument_list|)
decl_stmt|;
comment|// The second has one site plugin with a es-plugin.properties file (description and version)
name|String
name|server2NodeId
init|=
name|startNodeWithPlugins
argument_list|(
literal|"node2"
argument_list|)
decl_stmt|;
comment|// The third has one java plugin
name|String
name|server3NodeId
init|=
name|startNodeWithPlugins
argument_list|(
literal|"node3"
argument_list|)
decl_stmt|;
comment|// The fourth has one java plugin and one site plugin
name|String
name|server4NodeId
init|=
name|startNodeWithPlugins
argument_list|(
literal|"node4"
argument_list|)
decl_stmt|;
name|ClusterHealthResponse
name|clusterHealth
init|=
name|client
argument_list|(
literal|"node4"
argument_list|)
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|health
argument_list|(
name|clusterHealthRequest
argument_list|()
operator|.
name|waitForGreenStatus
argument_list|()
argument_list|)
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> done cluster_health, status "
operator|+
name|clusterHealth
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|NodesInfoResponse
name|response
init|=
name|client
argument_list|(
literal|"node1"
argument_list|)
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareNodesInfo
argument_list|()
operator|.
name|setPlugin
argument_list|(
literal|true
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> full json answer, status "
operator|+
name|response
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|checkPlugin
argument_list|(
name|response
argument_list|,
name|server1NodeId
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|checkPlugin
argument_list|(
name|response
argument_list|,
name|server2NodeId
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|checkPlugin
argument_list|(
name|response
argument_list|,
name|server3NodeId
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|checkPlugin
argument_list|(
name|response
argument_list|,
name|server4NodeId
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// Note that we have now 2 JVM plugins as we have already loaded one with node3
block|}
comment|/**      * We check infos      * @param response Response      * @param nodeId NodeId we want to check      * @param expectedSitePlugins Number of site plugins expected      * @param expectedJvmPlugins Number of jvm plugins expected      */
DECL|method|checkPlugin
specifier|private
name|void
name|checkPlugin
parameter_list|(
name|NodesInfoResponse
name|response
parameter_list|,
name|String
name|nodeId
parameter_list|,
name|int
name|expectedSitePlugins
parameter_list|,
name|int
name|expectedJvmPlugins
parameter_list|)
block|{
name|assertThat
argument_list|(
name|response
operator|.
name|getNodesMap
argument_list|()
operator|.
name|get
argument_list|(
name|nodeId
argument_list|)
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|PluginsInfo
name|plugins
init|=
name|response
operator|.
name|getNodesMap
argument_list|()
operator|.
name|get
argument_list|(
name|nodeId
argument_list|)
operator|.
name|getPlugins
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|plugins
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|num_site_plugins
init|=
literal|0
decl_stmt|;
name|int
name|num_jvm_plugins
init|=
literal|0
decl_stmt|;
for|for
control|(
name|PluginInfo
name|pluginInfo
range|:
name|plugins
operator|.
name|getInfos
argument_list|()
control|)
block|{
comment|// It should be a site or a jvm plugin
name|assertThat
argument_list|(
name|pluginInfo
operator|.
name|isJvm
argument_list|()
operator|||
name|pluginInfo
operator|.
name|isSite
argument_list|()
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|pluginInfo
operator|.
name|isSite
argument_list|()
operator|&&
operator|!
name|pluginInfo
operator|.
name|isJvm
argument_list|()
condition|)
block|{
comment|// Let's do some tests for site plugins
name|assertThat
argument_list|(
name|pluginInfo
operator|.
name|getName
argument_list|()
argument_list|,
name|isOneOf
argument_list|(
name|Fields
operator|.
name|SITE_PLUGIN
argument_list|,
name|TestNoVersionPlugin
operator|.
name|Fields
operator|.
name|NAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|pluginInfo
operator|.
name|getDescription
argument_list|()
argument_list|,
name|isOneOf
argument_list|(
name|Fields
operator|.
name|SITE_PLUGIN_DESCRIPTION
argument_list|,
name|Fields
operator|.
name|SITE_PLUGIN_NO_DESCRIPTION
argument_list|,
name|Fields
operator|.
name|JVM_PLUGIN_NO_DESCRIPTION
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|pluginInfo
operator|.
name|getUrl
argument_list|()
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|num_site_plugins
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|pluginInfo
operator|.
name|isJvm
argument_list|()
operator|&&
operator|!
name|pluginInfo
operator|.
name|isSite
argument_list|()
condition|)
block|{
comment|// Let's do some tests for site plugins
name|assertThat
argument_list|(
name|pluginInfo
operator|.
name|getName
argument_list|()
argument_list|,
name|isOneOf
argument_list|(
name|TestPlugin
operator|.
name|Fields
operator|.
name|NAME
argument_list|,
name|TestNoVersionPlugin
operator|.
name|Fields
operator|.
name|NAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|pluginInfo
operator|.
name|getDescription
argument_list|()
argument_list|,
name|isOneOf
argument_list|(
name|TestPlugin
operator|.
name|Fields
operator|.
name|DESCRIPTION
argument_list|,
name|TestNoVersionPlugin
operator|.
name|Fields
operator|.
name|DESCRIPTION
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|pluginInfo
operator|.
name|getUrl
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|num_jvm_plugins
operator|++
expr_stmt|;
block|}
comment|// On node4, test-no-version-plugin has an embedded _site structure
if|if
condition|(
name|pluginInfo
operator|.
name|isJvm
argument_list|()
operator|&&
name|pluginInfo
operator|.
name|isSite
argument_list|()
condition|)
block|{
name|assertThat
argument_list|(
name|pluginInfo
operator|.
name|getName
argument_list|()
argument_list|,
name|is
argument_list|(
name|TestNoVersionPlugin
operator|.
name|Fields
operator|.
name|NAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|pluginInfo
operator|.
name|getDescription
argument_list|()
argument_list|,
name|is
argument_list|(
name|TestNoVersionPlugin
operator|.
name|Fields
operator|.
name|DESCRIPTION
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|pluginInfo
operator|.
name|getUrl
argument_list|()
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|num_jvm_plugins
operator|++
expr_stmt|;
block|}
block|}
name|assertThat
argument_list|(
name|num_site_plugins
argument_list|,
name|is
argument_list|(
name|expectedSitePlugins
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|num_jvm_plugins
argument_list|,
name|is
argument_list|(
name|expectedJvmPlugins
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|startNodeWithPlugins
specifier|private
name|String
name|startNodeWithPlugins
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|URISyntaxException
block|{
name|URL
name|resource
init|=
name|SimpleNodesInfoTests
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"/org/elasticsearch/test/integration/nodesinfo/"
operator|+
name|name
operator|+
literal|"/"
argument_list|)
decl_stmt|;
name|ImmutableSettings
operator|.
name|Builder
name|settings
init|=
name|settingsBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|resource
operator|!=
literal|null
condition|)
block|{
name|settings
operator|.
name|put
argument_list|(
literal|"path.plugins"
argument_list|,
operator|new
name|File
argument_list|(
name|resource
operator|.
name|toURI
argument_list|()
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|startNode
argument_list|(
name|name
argument_list|,
name|settings
argument_list|)
expr_stmt|;
comment|// We wait for a Green status
name|client
argument_list|(
name|name
argument_list|)
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|health
argument_list|(
name|clusterHealthRequest
argument_list|()
operator|.
name|waitForGreenStatus
argument_list|()
argument_list|)
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|String
name|serverNodeId
init|=
operator|(
operator|(
name|InternalNode
operator|)
name|node
argument_list|(
name|name
argument_list|)
operator|)
operator|.
name|injector
argument_list|()
operator|.
name|getInstance
argument_list|(
name|ClusterService
operator|.
name|class
argument_list|)
operator|.
name|state
argument_list|()
operator|.
name|nodes
argument_list|()
operator|.
name|localNodeId
argument_list|()
decl_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"--> server {} started"
operator|+
name|serverNodeId
argument_list|)
expr_stmt|;
return|return
name|serverNodeId
return|;
block|}
block|}
end_class

end_unit

