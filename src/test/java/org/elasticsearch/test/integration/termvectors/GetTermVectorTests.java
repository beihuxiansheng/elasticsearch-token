begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.test.integration.termvectors
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|integration
operator|.
name|termvectors
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|MatcherAssert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Tokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|core
operator|.
name|LowerCaseFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|miscellaneous
operator|.
name|PerFieldAnalyzerWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|payloads
operator|.
name|TypeAsPayloadTokenFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|standard
operator|.
name|StandardAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|standard
operator|.
name|StandardTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|FieldType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|StringField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|TextField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DirectoryReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocsAndPositionsEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Fields
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriterConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriterConfig
operator|.
name|OpenMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Terms
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermsEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|ScoreDoc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TopDocs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|FSDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticSearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionFuture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|termvector
operator|.
name|TermVectorRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|termvector
operator|.
name|TermVectorRequest
operator|.
name|Flag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|termvector
operator|.
name|TermVectorRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|termvector
operator|.
name|TermVectorResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|InputStreamStreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|OutputStreamStreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MapperParsingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|core
operator|.
name|AbstractFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|core
operator|.
name|TypeParsers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|internal
operator|.
name|AllFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|action
operator|.
name|termvector
operator|.
name|RestTermVectorAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|integration
operator|.
name|AbstractSharedClusterTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|testng
operator|.
name|annotations
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|GetTermVectorTests
specifier|public
class|class
name|GetTermVectorTests
extends|extends
name|AbstractSharedClusterTest
block|{
annotation|@
name|Test
DECL|method|streamTest
specifier|public
name|void
name|streamTest
parameter_list|()
throws|throws
name|Exception
block|{
name|TermVectorResponse
name|outResponse
init|=
operator|new
name|TermVectorResponse
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
decl_stmt|;
name|writeStandardTermVector
argument_list|(
name|outResponse
argument_list|)
expr_stmt|;
comment|// write
name|ByteArrayOutputStream
name|outBuffer
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|OutputStreamStreamOutput
name|out
init|=
operator|new
name|OutputStreamStreamOutput
argument_list|(
name|outBuffer
argument_list|)
decl_stmt|;
name|outResponse
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
comment|// read
name|ByteArrayInputStream
name|esInBuffer
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|outBuffer
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
name|InputStreamStreamInput
name|esBuffer
init|=
operator|new
name|InputStreamStreamInput
argument_list|(
name|esInBuffer
argument_list|)
decl_stmt|;
name|TermVectorResponse
name|inResponse
init|=
operator|new
name|TermVectorResponse
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
decl_stmt|;
name|inResponse
operator|.
name|readFrom
argument_list|(
name|esBuffer
argument_list|)
expr_stmt|;
comment|// see if correct
name|checkIfStandardTermVector
argument_list|(
name|inResponse
argument_list|)
expr_stmt|;
block|}
DECL|method|checkIfStandardTermVector
specifier|private
name|void
name|checkIfStandardTermVector
parameter_list|(
name|TermVectorResponse
name|inResponse
parameter_list|)
throws|throws
name|IOException
block|{
name|Fields
name|fields
init|=
name|inResponse
operator|.
name|getFields
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|fields
operator|.
name|terms
argument_list|(
literal|"title"
argument_list|)
argument_list|,
name|Matchers
operator|.
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fields
operator|.
name|terms
argument_list|(
literal|"desc"
argument_list|)
argument_list|,
name|Matchers
operator|.
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fields
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|writeStandardTermVector
specifier|private
name|void
name|writeStandardTermVector
parameter_list|(
name|TermVectorResponse
name|outResponse
parameter_list|)
throws|throws
name|IOException
block|{
name|Directory
name|dir
init|=
name|FSDirectory
operator|.
name|open
argument_list|(
operator|new
name|File
argument_list|(
literal|"/tmp/foo"
argument_list|)
argument_list|)
decl_stmt|;
name|IndexWriterConfig
name|conf
init|=
operator|new
name|IndexWriterConfig
argument_list|(
name|Version
operator|.
name|LUCENE_42
argument_list|,
operator|new
name|StandardAnalyzer
argument_list|(
name|Version
operator|.
name|LUCENE_42
argument_list|)
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setOpenMode
argument_list|(
name|OpenMode
operator|.
name|CREATE
argument_list|)
expr_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|FieldType
name|type
init|=
operator|new
name|FieldType
argument_list|(
name|TextField
operator|.
name|TYPE_STORED
argument_list|)
decl_stmt|;
name|type
operator|.
name|setStoreTermVectorOffsets
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|type
operator|.
name|setStoreTermVectorPayloads
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|type
operator|.
name|setStoreTermVectorPositions
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|type
operator|.
name|setStoreTermVectors
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|type
operator|.
name|freeze
argument_list|()
expr_stmt|;
name|Document
name|d
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|d
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"id"
argument_list|,
literal|"abc"
argument_list|,
name|StringField
operator|.
name|TYPE_STORED
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"title"
argument_list|,
literal|"the1 quick brown fox jumps over  the1 lazy dog"
argument_list|,
name|type
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"desc"
argument_list|,
literal|"the1 quick brown fox jumps over  the1 lazy dog"
argument_list|,
name|type
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|updateDocument
argument_list|(
operator|new
name|Term
argument_list|(
literal|"id"
argument_list|,
literal|"abc"
argument_list|)
argument_list|,
name|d
argument_list|)
expr_stmt|;
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|DirectoryReader
name|dr
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|IndexSearcher
name|s
init|=
operator|new
name|IndexSearcher
argument_list|(
name|dr
argument_list|)
decl_stmt|;
name|TopDocs
name|search
init|=
name|s
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"id"
argument_list|,
literal|"abc"
argument_list|)
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ScoreDoc
index|[]
name|scoreDocs
init|=
name|search
operator|.
name|scoreDocs
decl_stmt|;
name|int
name|doc
init|=
name|scoreDocs
index|[
literal|0
index|]
operator|.
name|doc
decl_stmt|;
name|Fields
name|fields
init|=
name|dr
operator|.
name|getTermVectors
argument_list|(
name|doc
argument_list|)
decl_stmt|;
name|EnumSet
argument_list|<
name|Flag
argument_list|>
name|flags
init|=
name|EnumSet
operator|.
name|of
argument_list|(
name|Flag
operator|.
name|Positions
argument_list|,
name|Flag
operator|.
name|Offsets
argument_list|)
decl_stmt|;
name|outResponse
operator|.
name|setFields
argument_list|(
name|fields
argument_list|,
literal|null
argument_list|,
name|flags
argument_list|,
name|fields
argument_list|)
expr_stmt|;
block|}
DECL|method|buildWithLuceneAndReturnFields
specifier|private
name|Fields
name|buildWithLuceneAndReturnFields
parameter_list|(
name|String
name|docId
parameter_list|,
name|String
index|[]
name|fields
parameter_list|,
name|String
index|[]
name|content
parameter_list|,
name|boolean
index|[]
name|withPositions
parameter_list|,
name|boolean
index|[]
name|withOffsets
parameter_list|,
name|boolean
index|[]
name|withPayloads
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
operator|(
name|fields
operator|.
name|length
operator|==
name|withPayloads
operator|.
name|length
operator|)
assert|;
assert|assert
operator|(
name|content
operator|.
name|length
operator|==
name|withPayloads
operator|.
name|length
operator|)
assert|;
assert|assert
operator|(
name|withPositions
operator|.
name|length
operator|==
name|withPayloads
operator|.
name|length
operator|)
assert|;
assert|assert
operator|(
name|withOffsets
operator|.
name|length
operator|==
name|withPayloads
operator|.
name|length
operator|)
assert|;
name|Map
argument_list|<
name|String
argument_list|,
name|Analyzer
argument_list|>
name|mapping
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Analyzer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|withPayloads
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|withPayloads
index|[
name|i
index|]
condition|)
block|{
name|mapping
operator|.
name|put
argument_list|(
name|fields
index|[
name|i
index|]
argument_list|,
operator|new
name|Analyzer
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|TokenStreamComponents
name|createComponents
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|Reader
name|reader
parameter_list|)
block|{
name|Tokenizer
name|tokenizer
init|=
operator|new
name|StandardTokenizer
argument_list|(
name|Version
operator|.
name|LUCENE_42
argument_list|,
name|reader
argument_list|)
decl_stmt|;
name|TokenFilter
name|filter
init|=
operator|new
name|LowerCaseFilter
argument_list|(
name|Version
operator|.
name|LUCENE_42
argument_list|,
name|tokenizer
argument_list|)
decl_stmt|;
name|filter
operator|=
operator|new
name|TypeAsPayloadTokenFilter
argument_list|(
name|filter
argument_list|)
expr_stmt|;
return|return
operator|new
name|TokenStreamComponents
argument_list|(
name|tokenizer
argument_list|,
name|filter
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
name|PerFieldAnalyzerWrapper
name|wrapper
init|=
operator|new
name|PerFieldAnalyzerWrapper
argument_list|(
operator|new
name|StandardAnalyzer
argument_list|(
name|Version
operator|.
name|LUCENE_42
argument_list|)
argument_list|,
name|mapping
argument_list|)
decl_stmt|;
name|Directory
name|dir
init|=
name|FSDirectory
operator|.
name|open
argument_list|(
operator|new
name|File
argument_list|(
literal|"/tmp/foo"
argument_list|)
argument_list|)
decl_stmt|;
name|IndexWriterConfig
name|conf
init|=
operator|new
name|IndexWriterConfig
argument_list|(
name|Version
operator|.
name|LUCENE_42
argument_list|,
name|wrapper
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setOpenMode
argument_list|(
name|OpenMode
operator|.
name|CREATE
argument_list|)
expr_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Document
name|d
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|d
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"id"
argument_list|,
name|docId
argument_list|,
name|StringField
operator|.
name|TYPE_STORED
argument_list|)
argument_list|)
expr_stmt|;
name|FieldType
name|type
init|=
operator|new
name|FieldType
argument_list|(
name|TextField
operator|.
name|TYPE_STORED
argument_list|)
decl_stmt|;
name|type
operator|.
name|setStoreTermVectorOffsets
argument_list|(
name|withOffsets
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|type
operator|.
name|setStoreTermVectorPayloads
argument_list|(
name|withPayloads
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|type
operator|.
name|setStoreTermVectorPositions
argument_list|(
name|withPositions
index|[
name|i
index|]
operator|||
name|withOffsets
index|[
name|i
index|]
operator|||
name|withPayloads
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|type
operator|.
name|setStoreTermVectors
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|type
operator|.
name|freeze
argument_list|()
expr_stmt|;
name|d
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
name|fields
index|[
name|i
index|]
argument_list|,
name|content
index|[
name|i
index|]
argument_list|,
name|type
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|updateDocument
argument_list|(
operator|new
name|Term
argument_list|(
literal|"id"
argument_list|,
name|docId
argument_list|)
argument_list|,
name|d
argument_list|)
expr_stmt|;
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|DirectoryReader
name|dr
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|IndexSearcher
name|s
init|=
operator|new
name|IndexSearcher
argument_list|(
name|dr
argument_list|)
decl_stmt|;
name|TopDocs
name|search
init|=
name|s
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"id"
argument_list|,
name|docId
argument_list|)
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ScoreDoc
index|[]
name|scoreDocs
init|=
name|search
operator|.
name|scoreDocs
decl_stmt|;
assert|assert
operator|(
name|scoreDocs
operator|.
name|length
operator|==
literal|1
operator|)
assert|;
name|int
name|doc
init|=
name|scoreDocs
index|[
literal|0
index|]
operator|.
name|doc
decl_stmt|;
name|Fields
name|returnFields
init|=
name|dr
operator|.
name|getTermVectors
argument_list|(
name|doc
argument_list|)
decl_stmt|;
return|return
name|returnFields
return|;
block|}
annotation|@
name|Test
DECL|method|testRestRequestParsing
specifier|public
name|void
name|testRestRequestParsing
parameter_list|()
throws|throws
name|Exception
block|{
name|BytesReference
name|inputBytes
init|=
operator|new
name|BytesArray
argument_list|(
literal|" {\"fields\" : [\"a\",  \"b\",\"c\"], \"offsets\":false, \"positions\":false, \"payloads\":true}"
argument_list|)
decl_stmt|;
name|TermVectorRequest
name|tvr
init|=
operator|new
name|TermVectorRequest
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|RestTermVectorAction
operator|.
name|parseRequest
argument_list|(
name|inputBytes
argument_list|,
name|tvr
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|fields
init|=
name|tvr
operator|.
name|selectedFields
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|fields
operator|.
name|contains
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fields
operator|.
name|contains
argument_list|(
literal|"b"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fields
operator|.
name|contains
argument_list|(
literal|"c"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tvr
operator|.
name|offsets
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tvr
operator|.
name|positions
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tvr
operator|.
name|payloads
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|additionalFields
init|=
literal|"b,c  ,d, e  "
decl_stmt|;
name|RestTermVectorAction
operator|.
name|addFieldStringsFromParameter
argument_list|(
name|tvr
argument_list|,
name|additionalFields
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tvr
operator|.
name|selectedFields
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fields
operator|.
name|contains
argument_list|(
literal|"d"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fields
operator|.
name|contains
argument_list|(
literal|"e"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|additionalFields
operator|=
literal|""
expr_stmt|;
name|RestTermVectorAction
operator|.
name|addFieldStringsFromParameter
argument_list|(
name|tvr
argument_list|,
name|additionalFields
argument_list|)
expr_stmt|;
name|inputBytes
operator|=
operator|new
name|BytesArray
argument_list|(
literal|" {\"offsets\":false, \"positions\":false, \"payloads\":true}"
argument_list|)
expr_stmt|;
name|tvr
operator|=
operator|new
name|TermVectorRequest
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|RestTermVectorAction
operator|.
name|parseRequest
argument_list|(
name|inputBytes
argument_list|,
name|tvr
argument_list|)
expr_stmt|;
name|additionalFields
operator|=
literal|""
expr_stmt|;
name|RestTermVectorAction
operator|.
name|addFieldStringsFromParameter
argument_list|(
name|tvr
argument_list|,
name|additionalFields
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tvr
operator|.
name|selectedFields
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|additionalFields
operator|=
literal|"b,c  ,d, e  "
expr_stmt|;
name|RestTermVectorAction
operator|.
name|addFieldStringsFromParameter
argument_list|(
name|tvr
argument_list|,
name|additionalFields
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tvr
operator|.
name|selectedFields
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRestRequestParsingThrowsException
specifier|public
name|void
name|testRestRequestParsingThrowsException
parameter_list|()
throws|throws
name|Exception
block|{
name|BytesReference
name|inputBytes
init|=
operator|new
name|BytesArray
argument_list|(
literal|" {\"fields\" : \"a,  b,c   \", \"offsets\":false, \"positions\":false, \"payloads\":true, \"meaningless_term\":2}"
argument_list|)
decl_stmt|;
name|TermVectorRequest
name|tvr
init|=
operator|new
name|TermVectorRequest
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|boolean
name|threwException
init|=
literal|false
decl_stmt|;
try|try
block|{
name|RestTermVectorAction
operator|.
name|parseRequest
argument_list|(
name|inputBytes
argument_list|,
name|tvr
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|threwException
operator|=
literal|true
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|threwException
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNoSuchDoc
specifier|public
name|void
name|testNoSuchDoc
parameter_list|()
throws|throws
name|Exception
block|{
name|run
argument_list|(
name|addMapping
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
argument_list|,
literal|"type1"
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|"field"
block|,
literal|"type"
block|,
literal|"string"
block|,
literal|"term_vector"
block|,
literal|"with_positions_offsets_payloads"
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|ensureYellow
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"666"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field"
argument_list|,
literal|"foo bar"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|20
condition|;
name|i
operator|++
control|)
block|{
name|ActionFuture
argument_list|<
name|TermVectorResponse
argument_list|>
name|termVector
init|=
name|client
argument_list|()
operator|.
name|termVector
argument_list|(
operator|new
name|TermVectorRequest
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|""
operator|+
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|TermVectorResponse
name|actionGet
init|=
name|termVector
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|actionGet
argument_list|,
name|Matchers
operator|.
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|actionGet
operator|.
name|documentExists
argument_list|()
argument_list|,
name|Matchers
operator|.
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testSimpleTermVectors
specifier|public
name|void
name|testSimpleTermVectors
parameter_list|()
throws|throws
name|ElasticSearchException
throws|,
name|IOException
block|{
name|run
argument_list|(
name|addMapping
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
argument_list|,
literal|"type1"
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|"field"
block|,
literal|"type"
block|,
literal|"string"
block|,
literal|"term_vector"
block|,
literal|"with_positions_offsets_payloads"
block|,
literal|"analyzer"
block|,
literal|"tv_test"
block|}
argument_list|)
operator|.
name|setSettings
argument_list|(
name|ImmutableSettings
operator|.
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.analysis.analyzer.tv_test.tokenizer"
argument_list|,
literal|"whitespace"
argument_list|)
operator|.
name|putArray
argument_list|(
literal|"index.analysis.analyzer.tv_test.filter"
argument_list|,
literal|"type_as_payload"
argument_list|,
literal|"lowercase"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ensureYellow
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|setSource
argument_list|(
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"field"
argument_list|,
literal|"the quick brown fox jumps over the lazy dog"
argument_list|)
comment|// 0the3 4quick9 10brown15 16fox19 20jumps25 26over30
comment|// 31the34 35lazy39 40dog43
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
block|}
name|String
index|[]
name|values
init|=
block|{
literal|"brown"
block|,
literal|"dog"
block|,
literal|"fox"
block|,
literal|"jumps"
block|,
literal|"lazy"
block|,
literal|"over"
block|,
literal|"quick"
block|,
literal|"the"
block|}
decl_stmt|;
name|int
index|[]
name|freq
init|=
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|2
block|}
decl_stmt|;
name|int
index|[]
index|[]
name|pos
init|=
block|{
block|{
literal|2
block|}
block|,
block|{
literal|8
block|}
block|,
block|{
literal|3
block|}
block|,
block|{
literal|4
block|}
block|,
block|{
literal|7
block|}
block|,
block|{
literal|5
block|}
block|,
block|{
literal|1
block|}
block|,
block|{
literal|0
block|,
literal|6
block|}
block|}
decl_stmt|;
name|int
index|[]
index|[]
name|startOffset
init|=
block|{
block|{
literal|10
block|}
block|,
block|{
literal|40
block|}
block|,
block|{
literal|16
block|}
block|,
block|{
literal|20
block|}
block|,
block|{
literal|35
block|}
block|,
block|{
literal|26
block|}
block|,
block|{
literal|4
block|}
block|,
block|{
literal|0
block|,
literal|31
block|}
block|}
decl_stmt|;
name|int
index|[]
index|[]
name|endOffset
init|=
block|{
block|{
literal|15
block|}
block|,
block|{
literal|43
block|}
block|,
block|{
literal|19
block|}
block|,
block|{
literal|25
block|}
block|,
block|{
literal|39
block|}
block|,
block|{
literal|30
block|}
block|,
block|{
literal|9
block|}
block|,
block|{
literal|3
block|,
literal|34
block|}
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|TermVectorRequestBuilder
name|resp
init|=
name|client
argument_list|()
operator|.
name|prepareTermVector
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|setPayloads
argument_list|(
literal|true
argument_list|)
operator|.
name|setOffsets
argument_list|(
literal|true
argument_list|)
operator|.
name|setPositions
argument_list|(
literal|true
argument_list|)
operator|.
name|setSelectedFields
argument_list|()
decl_stmt|;
name|TermVectorResponse
name|response
init|=
name|resp
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
literal|"doc id: "
operator|+
name|i
operator|+
literal|" doesn't exists but should"
argument_list|,
name|response
operator|.
name|documentExists
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Fields
name|fields
init|=
name|response
operator|.
name|getFields
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|fields
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Terms
name|terms
init|=
name|fields
operator|.
name|terms
argument_list|(
literal|"field"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|8l
argument_list|)
argument_list|)
expr_stmt|;
name|TermsEnum
name|iterator
init|=
name|terms
operator|.
name|iterator
argument_list|(
literal|null
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|values
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|String
name|string
init|=
name|values
index|[
name|j
index|]
decl_stmt|;
name|BytesRef
name|next
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|next
argument_list|,
name|Matchers
operator|.
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"expected "
operator|+
name|string
argument_list|,
name|string
argument_list|,
name|equalTo
argument_list|(
name|next
operator|.
name|utf8ToString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|next
argument_list|,
name|Matchers
operator|.
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// do not test ttf or doc frequency, because here we have many
comment|// shards and do not know how documents are distributed
name|DocsAndPositionsEnum
name|docsAndPositions
init|=
name|iterator
operator|.
name|docsAndPositions
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|docsAndPositions
operator|.
name|nextDoc
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|freq
index|[
name|j
index|]
argument_list|,
name|equalTo
argument_list|(
name|docsAndPositions
operator|.
name|freq
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|int
index|[]
name|termPos
init|=
name|pos
index|[
name|j
index|]
decl_stmt|;
name|int
index|[]
name|termStartOffset
init|=
name|startOffset
index|[
name|j
index|]
decl_stmt|;
name|int
index|[]
name|termEndOffset
init|=
name|endOffset
index|[
name|j
index|]
decl_stmt|;
name|assertThat
argument_list|(
name|termPos
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
name|freq
index|[
name|j
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|termStartOffset
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
name|freq
index|[
name|j
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|termEndOffset
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
name|freq
index|[
name|j
index|]
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|freq
index|[
name|j
index|]
condition|;
name|k
operator|++
control|)
block|{
name|int
name|nextPosition
init|=
name|docsAndPositions
operator|.
name|nextPosition
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
literal|"term: "
operator|+
name|string
argument_list|,
name|nextPosition
argument_list|,
name|equalTo
argument_list|(
name|termPos
index|[
name|k
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"term: "
operator|+
name|string
argument_list|,
name|docsAndPositions
operator|.
name|startOffset
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|termStartOffset
index|[
name|k
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"term: "
operator|+
name|string
argument_list|,
name|docsAndPositions
operator|.
name|endOffset
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|termEndOffset
index|[
name|k
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"term: "
operator|+
name|string
argument_list|,
name|docsAndPositions
operator|.
name|getPayload
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"word"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|assertThat
argument_list|(
name|iterator
operator|.
name|next
argument_list|()
argument_list|,
name|Matchers
operator|.
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testRandomSingleTermVectors
specifier|public
name|void
name|testRandomSingleTermVectors
parameter_list|()
throws|throws
name|ElasticSearchException
throws|,
name|IOException
block|{
name|long
name|seed
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Random
name|random
init|=
operator|new
name|Random
argument_list|(
name|seed
argument_list|)
decl_stmt|;
name|FieldType
name|ft
init|=
operator|new
name|FieldType
argument_list|()
decl_stmt|;
name|int
name|config
init|=
name|random
operator|.
name|nextInt
argument_list|(
literal|6
argument_list|)
decl_stmt|;
name|boolean
name|storePositions
init|=
literal|false
decl_stmt|;
name|boolean
name|storeOffsets
init|=
literal|false
decl_stmt|;
name|boolean
name|storePayloads
init|=
literal|false
decl_stmt|;
name|boolean
name|storeTermVectors
init|=
literal|false
decl_stmt|;
switch|switch
condition|(
name|config
condition|)
block|{
case|case
literal|0
case|:
block|{
comment|// do nothing
block|}
case|case
literal|1
case|:
block|{
name|storeTermVectors
operator|=
literal|true
expr_stmt|;
block|}
case|case
literal|2
case|:
block|{
name|storeTermVectors
operator|=
literal|true
expr_stmt|;
name|storePositions
operator|=
literal|true
expr_stmt|;
block|}
case|case
literal|3
case|:
block|{
name|storeTermVectors
operator|=
literal|true
expr_stmt|;
name|storeOffsets
operator|=
literal|true
expr_stmt|;
block|}
case|case
literal|4
case|:
block|{
name|storeTermVectors
operator|=
literal|true
expr_stmt|;
name|storePositions
operator|=
literal|true
expr_stmt|;
name|storeOffsets
operator|=
literal|true
expr_stmt|;
block|}
case|case
literal|5
case|:
block|{
name|storeTermVectors
operator|=
literal|true
expr_stmt|;
name|storePositions
operator|=
literal|true
expr_stmt|;
name|storePayloads
operator|=
literal|true
expr_stmt|;
block|}
case|case
literal|6
case|:
block|{
name|storeTermVectors
operator|=
literal|true
expr_stmt|;
name|storePositions
operator|=
literal|true
expr_stmt|;
name|storeOffsets
operator|=
literal|true
expr_stmt|;
name|storePayloads
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|ft
operator|.
name|setStoreTermVectors
argument_list|(
name|storeTermVectors
argument_list|)
expr_stmt|;
name|ft
operator|.
name|setStoreTermVectorOffsets
argument_list|(
name|storeOffsets
argument_list|)
expr_stmt|;
name|ft
operator|.
name|setStoreTermVectorPayloads
argument_list|(
name|storePayloads
argument_list|)
expr_stmt|;
name|ft
operator|.
name|setStoreTermVectorPositions
argument_list|(
name|storePositions
argument_list|)
expr_stmt|;
name|String
name|optionString
init|=
name|AbstractFieldMapper
operator|.
name|termVectorOptionsToString
argument_list|(
name|ft
argument_list|)
decl_stmt|;
name|run
argument_list|(
name|addMapping
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
argument_list|,
literal|"type1"
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|"field"
block|,
literal|"type"
block|,
literal|"string"
block|,
literal|"term_vector"
block|,
name|optionString
block|,
literal|"analyzer"
block|,
literal|"tv_test"
block|}
argument_list|)
operator|.
name|setSettings
argument_list|(
name|ImmutableSettings
operator|.
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.analysis.analyzer.tv_test.tokenizer"
argument_list|,
literal|"whitespace"
argument_list|)
operator|.
name|putArray
argument_list|(
literal|"index.analysis.analyzer.tv_test.filter"
argument_list|,
literal|"type_as_payload"
argument_list|,
literal|"lowercase"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ensureYellow
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|setSource
argument_list|(
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"field"
argument_list|,
literal|"the quick brown fox jumps over the lazy dog"
argument_list|)
comment|// 0the3 4quick9 10brown15 16fox19 20jumps25 26over30
comment|// 31the34 35lazy39 40dog43
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
block|}
name|String
index|[]
name|values
init|=
block|{
literal|"brown"
block|,
literal|"dog"
block|,
literal|"fox"
block|,
literal|"jumps"
block|,
literal|"lazy"
block|,
literal|"over"
block|,
literal|"quick"
block|,
literal|"the"
block|}
decl_stmt|;
name|int
index|[]
name|freq
init|=
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|2
block|}
decl_stmt|;
name|int
index|[]
index|[]
name|pos
init|=
block|{
block|{
literal|2
block|}
block|,
block|{
literal|8
block|}
block|,
block|{
literal|3
block|}
block|,
block|{
literal|4
block|}
block|,
block|{
literal|7
block|}
block|,
block|{
literal|5
block|}
block|,
block|{
literal|1
block|}
block|,
block|{
literal|0
block|,
literal|6
block|}
block|}
decl_stmt|;
name|int
index|[]
index|[]
name|startOffset
init|=
block|{
block|{
literal|10
block|}
block|,
block|{
literal|40
block|}
block|,
block|{
literal|16
block|}
block|,
block|{
literal|20
block|}
block|,
block|{
literal|35
block|}
block|,
block|{
literal|26
block|}
block|,
block|{
literal|4
block|}
block|,
block|{
literal|0
block|,
literal|31
block|}
block|}
decl_stmt|;
name|int
index|[]
index|[]
name|endOffset
init|=
block|{
block|{
literal|15
block|}
block|,
block|{
literal|43
block|}
block|,
block|{
literal|19
block|}
block|,
block|{
literal|25
block|}
block|,
block|{
literal|39
block|}
block|,
block|{
literal|30
block|}
block|,
block|{
literal|9
block|}
block|,
block|{
literal|3
block|,
literal|34
block|}
block|}
decl_stmt|;
name|boolean
name|isPayloadRequested
init|=
name|random
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
name|boolean
name|isOffsetRequested
init|=
name|random
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
name|boolean
name|isPositionsRequested
init|=
name|random
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
name|String
name|infoString
init|=
name|createInfoString
argument_list|(
name|isPositionsRequested
argument_list|,
name|isOffsetRequested
argument_list|,
name|isPayloadRequested
argument_list|,
name|optionString
argument_list|,
name|seed
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|TermVectorRequestBuilder
name|resp
init|=
name|client
argument_list|()
operator|.
name|prepareTermVector
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|setPayloads
argument_list|(
name|isPayloadRequested
argument_list|)
operator|.
name|setOffsets
argument_list|(
name|isOffsetRequested
argument_list|)
operator|.
name|setPositions
argument_list|(
name|isPositionsRequested
argument_list|)
operator|.
name|setSelectedFields
argument_list|()
decl_stmt|;
name|TermVectorResponse
name|response
init|=
name|resp
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|infoString
operator|+
literal|"doc id: "
operator|+
name|i
operator|+
literal|" doesn't exists but should"
argument_list|,
name|response
operator|.
name|documentExists
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Fields
name|fields
init|=
name|response
operator|.
name|getFields
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|fields
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|ft
operator|.
name|storeTermVectors
argument_list|()
condition|?
literal|1
else|:
literal|0
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|ft
operator|.
name|storeTermVectors
argument_list|()
condition|)
block|{
name|Terms
name|terms
init|=
name|fields
operator|.
name|terms
argument_list|(
literal|"field"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|8l
argument_list|)
argument_list|)
expr_stmt|;
name|TermsEnum
name|iterator
init|=
name|terms
operator|.
name|iterator
argument_list|(
literal|null
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|values
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|String
name|string
init|=
name|values
index|[
name|j
index|]
decl_stmt|;
name|BytesRef
name|next
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|infoString
argument_list|,
name|next
argument_list|,
name|Matchers
operator|.
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|infoString
operator|+
literal|"expected "
operator|+
name|string
argument_list|,
name|string
argument_list|,
name|equalTo
argument_list|(
name|next
operator|.
name|utf8ToString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|infoString
argument_list|,
name|next
argument_list|,
name|Matchers
operator|.
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// do not test ttf or doc frequency, because here we have
comment|// many shards and do not know how documents are distributed
name|DocsAndPositionsEnum
name|docsAndPositions
init|=
name|iterator
operator|.
name|docsAndPositions
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// docs and pos only returns something if positions or
comment|// payloads or offsets are stored / requestd Otherwise use
comment|// DocsEnum?
name|assertThat
argument_list|(
name|infoString
argument_list|,
name|docsAndPositions
operator|.
name|nextDoc
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|infoString
argument_list|,
name|freq
index|[
name|j
index|]
argument_list|,
name|equalTo
argument_list|(
name|docsAndPositions
operator|.
name|freq
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|int
index|[]
name|termPos
init|=
name|pos
index|[
name|j
index|]
decl_stmt|;
name|int
index|[]
name|termStartOffset
init|=
name|startOffset
index|[
name|j
index|]
decl_stmt|;
name|int
index|[]
name|termEndOffset
init|=
name|endOffset
index|[
name|j
index|]
decl_stmt|;
if|if
condition|(
name|isPositionsRequested
operator|&&
name|storePositions
condition|)
block|{
name|assertThat
argument_list|(
name|infoString
argument_list|,
name|termPos
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
name|freq
index|[
name|j
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isOffsetRequested
operator|&&
name|storeOffsets
condition|)
block|{
name|assertThat
argument_list|(
name|termStartOffset
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
name|freq
index|[
name|j
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|termEndOffset
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
name|freq
index|[
name|j
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|freq
index|[
name|j
index|]
condition|;
name|k
operator|++
control|)
block|{
name|int
name|nextPosition
init|=
name|docsAndPositions
operator|.
name|nextPosition
argument_list|()
decl_stmt|;
comment|// only return something useful if requested and stored
if|if
condition|(
name|isPositionsRequested
operator|&&
name|storePositions
condition|)
block|{
name|assertThat
argument_list|(
name|infoString
operator|+
literal|"positions for term: "
operator|+
name|string
argument_list|,
name|nextPosition
argument_list|,
name|equalTo
argument_list|(
name|termPos
index|[
name|k
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|infoString
operator|+
literal|"positions for term: "
argument_list|,
name|nextPosition
argument_list|,
name|equalTo
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// only return something useful if requested and stored
if|if
condition|(
name|isPayloadRequested
operator|&&
name|storePayloads
condition|)
block|{
name|assertThat
argument_list|(
name|infoString
operator|+
literal|"payloads for term: "
operator|+
name|string
argument_list|,
name|docsAndPositions
operator|.
name|getPayload
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"word"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|infoString
operator|+
literal|"payloads for term: "
operator|+
name|string
argument_list|,
name|docsAndPositions
operator|.
name|getPayload
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// only return something useful if requested and stored
if|if
condition|(
name|isOffsetRequested
operator|&&
name|storeOffsets
condition|)
block|{
name|assertThat
argument_list|(
name|infoString
operator|+
literal|"startOffsets term: "
operator|+
name|string
argument_list|,
name|docsAndPositions
operator|.
name|startOffset
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|termStartOffset
index|[
name|k
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|infoString
operator|+
literal|"endOffsets term: "
operator|+
name|string
argument_list|,
name|docsAndPositions
operator|.
name|endOffset
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|termEndOffset
index|[
name|k
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|infoString
operator|+
literal|"startOffsets term: "
operator|+
name|string
argument_list|,
name|docsAndPositions
operator|.
name|startOffset
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|infoString
operator|+
literal|"endOffsets term: "
operator|+
name|string
argument_list|,
name|docsAndPositions
operator|.
name|endOffset
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|assertThat
argument_list|(
name|iterator
operator|.
name|next
argument_list|()
argument_list|,
name|Matchers
operator|.
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|createInfoString
specifier|private
name|String
name|createInfoString
parameter_list|(
name|boolean
name|isPositionsRequested
parameter_list|,
name|boolean
name|isOffsetRequested
parameter_list|,
name|boolean
name|isPayloadRequested
parameter_list|,
name|String
name|optionString
parameter_list|,
name|long
name|seed
parameter_list|)
block|{
name|String
name|ret
init|=
literal|"Seed: "
operator|+
name|seed
operator|+
literal|"\n"
operator|+
literal|"Store config: "
operator|+
name|optionString
operator|+
literal|"\n"
operator|+
literal|"Requested: pos-"
operator|+
operator|(
name|isPositionsRequested
condition|?
literal|"yes"
else|:
literal|"no"
operator|)
operator|+
literal|", offsets-"
operator|+
operator|(
name|isOffsetRequested
condition|?
literal|"yes"
else|:
literal|"no"
operator|)
operator|+
literal|", payload- "
operator|+
operator|(
name|isPayloadRequested
condition|?
literal|"yes"
else|:
literal|"no"
operator|)
operator|+
literal|"\n"
decl_stmt|;
return|return
name|ret
return|;
block|}
annotation|@
name|Test
DECL|method|testDuellESLucene
specifier|public
name|void
name|testDuellESLucene
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|fieldNames
init|=
block|{
literal|"field_that_should_not_be_requested"
block|,
literal|"field_with_positions"
block|,
literal|"field_with_offsets"
block|,
literal|"field_with_only_tv"
block|,
literal|"field_with_positions_offsets"
block|,
literal|"field_with_positions_payloads"
block|}
decl_stmt|;
name|run
argument_list|(
name|addMapping
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
argument_list|,
literal|"type1"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|fieldNames
index|[
literal|0
index|]
block|,
literal|"type"
block|,
literal|"string"
block|,
literal|"term_vector"
block|,
literal|"with_positions_offsets"
block|}
argument_list|,
operator|new
name|Object
index|[]
block|{
name|fieldNames
index|[
literal|1
index|]
block|,
literal|"type"
block|,
literal|"string"
block|,
literal|"term_vector"
block|,
literal|"with_positions"
block|}
argument_list|,
operator|new
name|Object
index|[]
block|{
name|fieldNames
index|[
literal|2
index|]
block|,
literal|"type"
block|,
literal|"string"
block|,
literal|"term_vector"
block|,
literal|"with_offsets"
block|}
argument_list|,
operator|new
name|Object
index|[]
block|{
name|fieldNames
index|[
literal|3
index|]
block|,
literal|"type"
block|,
literal|"string"
block|,
literal|"store_term_vectors"
block|,
literal|"yes"
block|}
argument_list|,
operator|new
name|Object
index|[]
block|{
name|fieldNames
index|[
literal|4
index|]
block|,
literal|"type"
block|,
literal|"string"
block|,
literal|"term_vector"
block|,
literal|"with_positions_offsets"
block|}
argument_list|,
operator|new
name|Object
index|[]
block|{
name|fieldNames
index|[
literal|5
index|]
block|,
literal|"type"
block|,
literal|"string"
block|,
literal|"term_vector"
block|,
literal|"with_positions_payloads"
block|,
literal|"analyzer"
block|,
literal|"tv_test"
block|}
argument_list|)
operator|.
name|setSettings
argument_list|(
name|ImmutableSettings
operator|.
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.analysis.analyzer.tv_test.tokenizer"
argument_list|,
literal|"standard"
argument_list|)
operator|.
name|putArray
argument_list|(
literal|"index.analysis.analyzer.tv_test.filter"
argument_list|,
literal|"type_as_payload"
argument_list|,
literal|"lowercase"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ensureYellow
argument_list|()
expr_stmt|;
comment|// ginge auc mit XContentBuilder xcb = new XContentBuilder();
comment|// now, create the same thing with lucene and see if the returned stuff
comment|// is the same
name|String
index|[]
name|fieldContent
init|=
block|{
literal|"the quick shard jumps over the stupid brain"
block|,
literal|"here is another field"
block|,
literal|"And yet another field withut any use."
block|,
literal|"I am out of ideas on what to type here."
block|,
literal|"The last field for which offsets are stored but not positons."
block|,
literal|"The last field for which offsets are stored but not positons."
block|}
decl_stmt|;
name|boolean
index|[]
name|storeOffsets
init|=
block|{
literal|true
block|,
literal|false
block|,
literal|true
block|,
literal|false
block|,
literal|true
block|,
literal|false
block|}
decl_stmt|;
name|boolean
index|[]
name|storePositions
init|=
block|{
literal|true
block|,
literal|true
block|,
literal|false
block|,
literal|false
block|,
literal|true
block|,
literal|true
block|}
decl_stmt|;
name|boolean
index|[]
name|storePayloads
init|=
block|{
literal|false
block|,
literal|false
block|,
literal|false
block|,
literal|false
block|,
literal|false
block|,
literal|true
block|}
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|testSource
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fieldNames
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|testSource
operator|.
name|put
argument_list|(
name|fieldNames
index|[
name|i
index|]
argument_list|,
name|fieldContent
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|testSource
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|String
index|[]
name|selectedFields
init|=
block|{
name|fieldNames
index|[
literal|1
index|]
block|,
name|fieldNames
index|[
literal|2
index|]
block|,
name|fieldNames
index|[
literal|3
index|]
block|,
name|fieldNames
index|[
literal|4
index|]
block|,
name|fieldNames
index|[
literal|5
index|]
block|}
decl_stmt|;
name|testForConfig
argument_list|(
name|fieldNames
argument_list|,
name|fieldContent
argument_list|,
name|storeOffsets
argument_list|,
name|storePositions
argument_list|,
name|storePayloads
argument_list|,
name|selectedFields
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|testForConfig
argument_list|(
name|fieldNames
argument_list|,
name|fieldContent
argument_list|,
name|storeOffsets
argument_list|,
name|storePositions
argument_list|,
name|storePayloads
argument_list|,
name|selectedFields
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|testForConfig
argument_list|(
name|fieldNames
argument_list|,
name|fieldContent
argument_list|,
name|storeOffsets
argument_list|,
name|storePositions
argument_list|,
name|storePayloads
argument_list|,
name|selectedFields
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|testForConfig
argument_list|(
name|fieldNames
argument_list|,
name|fieldContent
argument_list|,
name|storeOffsets
argument_list|,
name|storePositions
argument_list|,
name|storePayloads
argument_list|,
name|selectedFields
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|testForConfig
argument_list|(
name|fieldNames
argument_list|,
name|fieldContent
argument_list|,
name|storeOffsets
argument_list|,
name|storePositions
argument_list|,
name|storePayloads
argument_list|,
name|selectedFields
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|testForConfig
argument_list|(
name|fieldNames
argument_list|,
name|fieldContent
argument_list|,
name|storeOffsets
argument_list|,
name|storePositions
argument_list|,
name|storePayloads
argument_list|,
name|selectedFields
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testForConfig
specifier|private
name|void
name|testForConfig
parameter_list|(
name|String
index|[]
name|fieldNames
parameter_list|,
name|String
index|[]
name|fieldContent
parameter_list|,
name|boolean
index|[]
name|storeOffsets
parameter_list|,
name|boolean
index|[]
name|storePositions
parameter_list|,
name|boolean
index|[]
name|storePayloads
parameter_list|,
name|String
index|[]
name|selectedFields
parameter_list|,
name|boolean
name|withPositions
parameter_list|,
name|boolean
name|withOffsets
parameter_list|,
name|boolean
name|withPayloads
parameter_list|)
throws|throws
name|IOException
block|{
name|TermVectorRequestBuilder
name|resp
init|=
name|client
argument_list|()
operator|.
name|prepareTermVector
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setPayloads
argument_list|(
name|withPayloads
argument_list|)
operator|.
name|setOffsets
argument_list|(
name|withOffsets
argument_list|)
operator|.
name|setPositions
argument_list|(
name|withPositions
argument_list|)
operator|.
name|setFieldStatistics
argument_list|(
literal|true
argument_list|)
operator|.
name|setTermStatistics
argument_list|(
literal|true
argument_list|)
operator|.
name|setSelectedFields
argument_list|(
name|selectedFields
argument_list|)
decl_stmt|;
name|TermVectorResponse
name|response
init|=
name|resp
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
comment|// build the same with lucene and compare the Fields
name|Fields
name|luceneFields
init|=
name|buildWithLuceneAndReturnFields
argument_list|(
literal|"1"
argument_list|,
name|fieldNames
argument_list|,
name|fieldContent
argument_list|,
name|storePositions
argument_list|,
name|storeOffsets
argument_list|,
name|storePayloads
argument_list|)
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
name|storeOfsetsMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
name|storePositionsMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
name|storePayloadsMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|storePositions
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|storeOfsetsMap
operator|.
name|put
argument_list|(
name|fieldNames
index|[
name|i
index|]
argument_list|,
name|storeOffsets
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|storePositionsMap
operator|.
name|put
argument_list|(
name|fieldNames
index|[
name|i
index|]
argument_list|,
name|storePositions
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|storePayloadsMap
operator|.
name|put
argument_list|(
name|fieldNames
index|[
name|i
index|]
argument_list|,
name|storePayloads
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|compareLuceneESTermVectorResults
argument_list|(
name|response
operator|.
name|getFields
argument_list|()
argument_list|,
name|luceneFields
argument_list|,
name|storePositionsMap
argument_list|,
name|storeOfsetsMap
argument_list|,
name|storePayloadsMap
argument_list|,
name|withPositions
argument_list|,
name|withOffsets
argument_list|,
name|withPayloads
argument_list|,
name|selectedFields
argument_list|)
expr_stmt|;
block|}
DECL|method|compareLuceneESTermVectorResults
specifier|private
name|void
name|compareLuceneESTermVectorResults
parameter_list|(
name|Fields
name|fields
parameter_list|,
name|Fields
name|luceneFields
parameter_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
name|storePositionsMap
parameter_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
name|storeOfsetsMap
parameter_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
name|storePayloadsMap
parameter_list|,
name|boolean
name|getPositions
parameter_list|,
name|boolean
name|getOffsets
parameter_list|,
name|boolean
name|getPayloads
parameter_list|,
name|String
index|[]
name|selectedFields
parameter_list|)
throws|throws
name|IOException
block|{
name|HashSet
argument_list|<
name|String
argument_list|>
name|selectedFieldsMap
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|selectedFields
argument_list|)
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|luceneFieldNames
init|=
name|luceneFields
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|luceneFields
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|storeOfsetsMap
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fields
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|selectedFields
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
while|while
condition|(
name|luceneFieldNames
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|luceneFieldName
init|=
name|luceneFieldNames
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|selectedFieldsMap
operator|.
name|contains
argument_list|(
name|luceneFieldName
argument_list|)
condition|)
continue|continue;
name|Terms
name|esTerms
init|=
name|fields
operator|.
name|terms
argument_list|(
name|luceneFieldName
argument_list|)
decl_stmt|;
name|Terms
name|luceneTerms
init|=
name|luceneFields
operator|.
name|terms
argument_list|(
name|luceneFieldName
argument_list|)
decl_stmt|;
name|TermsEnum
name|esTermEnum
init|=
name|esTerms
operator|.
name|iterator
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|TermsEnum
name|luceneTermEnum
init|=
name|luceneTerms
operator|.
name|iterator
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|int
name|numTerms
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|esTermEnum
operator|.
name|next
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|luceneTermEnum
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|esTermEnum
operator|.
name|totalTermFreq
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|luceneTermEnum
operator|.
name|totalTermFreq
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|DocsAndPositionsEnum
name|esDocsPosEnum
init|=
name|esTermEnum
operator|.
name|docsAndPositions
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|DocsAndPositionsEnum
name|luceneDocsPosEnum
init|=
name|luceneTermEnum
operator|.
name|docsAndPositions
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|luceneDocsPosEnum
operator|==
literal|null
condition|)
block|{
name|assertThat
argument_list|(
name|storeOfsetsMap
operator|.
name|get
argument_list|(
name|luceneFieldName
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|storePayloadsMap
operator|.
name|get
argument_list|(
name|luceneFieldName
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|storePositionsMap
operator|.
name|get
argument_list|(
name|luceneFieldName
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|numTerms
operator|++
expr_stmt|;
name|assertThat
argument_list|(
literal|"failed for field: "
operator|+
name|luceneFieldName
argument_list|,
name|esTermEnum
operator|.
name|term
argument_list|()
operator|.
name|utf8ToString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|luceneTermEnum
operator|.
name|term
argument_list|()
operator|.
name|utf8ToString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|esDocsPosEnum
operator|.
name|nextDoc
argument_list|()
expr_stmt|;
name|luceneDocsPosEnum
operator|.
name|nextDoc
argument_list|()
expr_stmt|;
name|int
name|freq
init|=
operator|(
name|int
operator|)
name|esDocsPosEnum
operator|.
name|freq
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|freq
argument_list|,
name|equalTo
argument_list|(
name|luceneDocsPosEnum
operator|.
name|freq
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|freq
condition|;
name|i
operator|++
control|)
block|{
name|int
name|lucenePos
init|=
name|luceneDocsPosEnum
operator|.
name|nextPosition
argument_list|()
decl_stmt|;
name|int
name|esPos
init|=
name|esDocsPosEnum
operator|.
name|nextPosition
argument_list|()
decl_stmt|;
if|if
condition|(
name|storePositionsMap
operator|.
name|get
argument_list|(
name|luceneFieldName
argument_list|)
operator|&&
name|getPositions
condition|)
block|{
name|assertThat
argument_list|(
name|luceneFieldName
argument_list|,
name|lucenePos
argument_list|,
name|equalTo
argument_list|(
name|esPos
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|esPos
argument_list|,
name|equalTo
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|storeOfsetsMap
operator|.
name|get
argument_list|(
name|luceneFieldName
argument_list|)
operator|&&
name|getOffsets
condition|)
block|{
name|assertThat
argument_list|(
name|luceneDocsPosEnum
operator|.
name|startOffset
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|esDocsPosEnum
operator|.
name|startOffset
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|luceneDocsPosEnum
operator|.
name|endOffset
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|esDocsPosEnum
operator|.
name|endOffset
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|esDocsPosEnum
operator|.
name|startOffset
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|esDocsPosEnum
operator|.
name|endOffset
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|storePayloadsMap
operator|.
name|get
argument_list|(
name|luceneFieldName
argument_list|)
operator|&&
name|getPayloads
condition|)
block|{
name|assertThat
argument_list|(
name|luceneFieldName
argument_list|,
name|luceneDocsPosEnum
operator|.
name|getPayload
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|esDocsPosEnum
operator|.
name|getPayload
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|esDocsPosEnum
operator|.
name|getPayload
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testFieldTypeToTermVectorString
specifier|public
name|void
name|testFieldTypeToTermVectorString
parameter_list|()
throws|throws
name|Exception
block|{
name|FieldType
name|ft
init|=
operator|new
name|FieldType
argument_list|()
decl_stmt|;
name|ft
operator|.
name|setStoreTermVectorOffsets
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|ft
operator|.
name|setStoreTermVectorPayloads
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ft
operator|.
name|setStoreTermVectors
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ft
operator|.
name|setStoreTermVectorPositions
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|String
name|ftOpts
init|=
name|AbstractFieldMapper
operator|.
name|termVectorOptionsToString
argument_list|(
name|ft
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
literal|"with_positions_payloads"
argument_list|,
name|equalTo
argument_list|(
name|ftOpts
argument_list|)
argument_list|)
expr_stmt|;
name|AllFieldMapper
operator|.
name|Builder
name|builder
init|=
operator|new
name|AllFieldMapper
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|boolean
name|excptiontrown
init|=
literal|false
decl_stmt|;
try|try
block|{
name|TypeParsers
operator|.
name|parseTermVector
argument_list|(
literal|""
argument_list|,
name|ftOpts
argument_list|,
name|builder
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MapperParsingException
name|e
parameter_list|)
block|{
name|excptiontrown
operator|=
literal|true
expr_stmt|;
block|}
name|assertThat
argument_list|(
literal|"TypeParsers.parseTermVector should accept string with_positions_payloads but does not."
argument_list|,
name|excptiontrown
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTermVectorStringGenerationIllegalState
specifier|public
name|void
name|testTermVectorStringGenerationIllegalState
parameter_list|()
throws|throws
name|Exception
block|{
name|FieldType
name|ft
init|=
operator|new
name|FieldType
argument_list|()
decl_stmt|;
name|ft
operator|.
name|setStoreTermVectorOffsets
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ft
operator|.
name|setStoreTermVectorPayloads
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ft
operator|.
name|setStoreTermVectors
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ft
operator|.
name|setStoreTermVectorPositions
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|String
name|ftOpts
init|=
name|AbstractFieldMapper
operator|.
name|termVectorOptionsToString
argument_list|(
name|ft
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|ftOpts
argument_list|,
name|equalTo
argument_list|(
literal|"with_offsets"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

