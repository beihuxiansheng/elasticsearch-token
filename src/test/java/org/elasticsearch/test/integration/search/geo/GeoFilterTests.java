begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.test.integration.search.geo
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|integration
operator|.
name|search
operator|.
name|geo
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
operator|.
name|jsonBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|FilterBuilders
operator|.
name|geoBoundingBoxFilter
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|FilterBuilders
operator|.
name|geoDistanceFilter
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
operator|.
name|fieldQuery
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
operator|.
name|filteredQuery
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
operator|.
name|matchAllQuery
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|MatcherAssert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|anyOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|lessThanOrEqualTo
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|GZIPInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|create
operator|.
name|CreateIndexRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|bulk
operator|.
name|BulkItemResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|bulk
operator|.
name|BulkResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|geo
operator|.
name|GeoPoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|geo
operator|.
name|GeoUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|geo
operator|.
name|ShapeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|geo
operator|.
name|ShapeBuilder
operator|.
name|MultiPolygonBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|geo
operator|.
name|ShapeBuilder
operator|.
name|PolygonBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|Streams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|FilterBuilders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchHit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|integration
operator|.
name|AbstractNodesTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|prefix
operator|.
name|RecursivePrefixTreeStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|prefix
operator|.
name|tree
operator|.
name|GeohashPrefixTree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|prefix
operator|.
name|tree
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|prefix
operator|.
name|tree
operator|.
name|QuadPrefixTree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|query
operator|.
name|SpatialArgs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|query
operator|.
name|SpatialOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|query
operator|.
name|UnsupportedSpatialOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|testng
operator|.
name|annotations
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|testng
operator|.
name|annotations
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|testng
operator|.
name|annotations
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|spatial4j
operator|.
name|core
operator|.
name|context
operator|.
name|SpatialContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|spatial4j
operator|.
name|core
operator|.
name|distance
operator|.
name|DistanceUtils
import|;
end_import

begin_import
import|import
name|com
operator|.
name|spatial4j
operator|.
name|core
operator|.
name|exception
operator|.
name|InvalidShapeException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|spatial4j
operator|.
name|core
operator|.
name|shape
operator|.
name|Point
import|;
end_import

begin_import
import|import
name|com
operator|.
name|spatial4j
operator|.
name|core
operator|.
name|shape
operator|.
name|Rectangle
import|;
end_import

begin_import
import|import
name|com
operator|.
name|spatial4j
operator|.
name|core
operator|.
name|shape
operator|.
name|Shape
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|GeoFilterTests
specifier|public
class|class
name|GeoFilterTests
extends|extends
name|AbstractNodesTests
block|{
DECL|field|client
specifier|private
name|Client
name|client
decl_stmt|;
DECL|field|intersectSupport
specifier|private
name|boolean
name|intersectSupport
decl_stmt|;
DECL|field|disjointSupport
specifier|private
name|boolean
name|disjointSupport
decl_stmt|;
DECL|field|withinSupport
specifier|private
name|boolean
name|withinSupport
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|createNodes
specifier|public
name|void
name|createNodes
parameter_list|()
throws|throws
name|Exception
block|{
name|startNode
argument_list|(
literal|"server1"
argument_list|)
expr_stmt|;
name|startNode
argument_list|(
literal|"server2"
argument_list|)
expr_stmt|;
name|intersectSupport
operator|=
name|testRelationSupport
argument_list|(
name|SpatialOperation
operator|.
name|Intersects
argument_list|)
expr_stmt|;
name|disjointSupport
operator|=
name|testRelationSupport
argument_list|(
name|SpatialOperation
operator|.
name|IsDisjointTo
argument_list|)
expr_stmt|;
name|withinSupport
operator|=
name|testRelationSupport
argument_list|(
name|SpatialOperation
operator|.
name|IsWithin
argument_list|)
expr_stmt|;
name|client
operator|=
name|getClient
argument_list|()
expr_stmt|;
block|}
DECL|method|unZipData
specifier|private
specifier|static
name|byte
index|[]
name|unZipData
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|InputStream
name|is
init|=
name|Streams
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|is
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"Resource ["
operator|+
name|path
operator|+
literal|"] not found in classpath"
argument_list|)
throw|;
block|}
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|GZIPInputStream
name|in
init|=
operator|new
name|GZIPInputStream
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|Streams
operator|.
name|copy
argument_list|(
name|in
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|out
operator|.
name|toByteArray
argument_list|()
return|;
block|}
annotation|@
name|AfterClass
DECL|method|closeNodes
specifier|public
name|void
name|closeNodes
parameter_list|()
block|{
name|client
operator|.
name|close
argument_list|()
expr_stmt|;
name|closeAllNodes
argument_list|()
expr_stmt|;
block|}
DECL|method|getClient
specifier|protected
name|Client
name|getClient
parameter_list|()
block|{
return|return
name|client
argument_list|(
literal|"server1"
argument_list|)
return|;
block|}
annotation|@
name|Test
DECL|method|testShapeBuilders
specifier|public
name|void
name|testShapeBuilders
parameter_list|()
block|{
try|try
block|{
comment|// self intersection polygon
name|ShapeBuilder
operator|.
name|newPolygon
argument_list|()
operator|.
name|point
argument_list|(
operator|-
literal|10
argument_list|,
operator|-
literal|10
argument_list|)
operator|.
name|point
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
operator|.
name|point
argument_list|(
operator|-
literal|10
argument_list|,
literal|10
argument_list|)
operator|.
name|point
argument_list|(
literal|10
argument_list|,
operator|-
literal|10
argument_list|)
operator|.
name|close
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
assert|assert
literal|false
operator|:
literal|"Self intersection not detected"
assert|;
block|}
catch|catch
parameter_list|(
name|InvalidShapeException
name|e
parameter_list|)
block|{}
comment|// polygon with hole
name|ShapeBuilder
operator|.
name|newPolygon
argument_list|()
operator|.
name|point
argument_list|(
operator|-
literal|10
argument_list|,
operator|-
literal|10
argument_list|)
operator|.
name|point
argument_list|(
operator|-
literal|10
argument_list|,
literal|10
argument_list|)
operator|.
name|point
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
operator|.
name|point
argument_list|(
literal|10
argument_list|,
operator|-
literal|10
argument_list|)
operator|.
name|hole
argument_list|()
operator|.
name|point
argument_list|(
operator|-
literal|5
argument_list|,
operator|-
literal|5
argument_list|)
operator|.
name|point
argument_list|(
operator|-
literal|5
argument_list|,
literal|5
argument_list|)
operator|.
name|point
argument_list|(
literal|5
argument_list|,
literal|5
argument_list|)
operator|.
name|point
argument_list|(
literal|5
argument_list|,
operator|-
literal|5
argument_list|)
operator|.
name|close
argument_list|()
operator|.
name|close
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
try|try
block|{
comment|// polygon with overlapping hole
name|ShapeBuilder
operator|.
name|newPolygon
argument_list|()
operator|.
name|point
argument_list|(
operator|-
literal|10
argument_list|,
operator|-
literal|10
argument_list|)
operator|.
name|point
argument_list|(
operator|-
literal|10
argument_list|,
literal|10
argument_list|)
operator|.
name|point
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
operator|.
name|point
argument_list|(
literal|10
argument_list|,
operator|-
literal|10
argument_list|)
operator|.
name|hole
argument_list|()
operator|.
name|point
argument_list|(
operator|-
literal|5
argument_list|,
operator|-
literal|5
argument_list|)
operator|.
name|point
argument_list|(
operator|-
literal|5
argument_list|,
literal|11
argument_list|)
operator|.
name|point
argument_list|(
literal|5
argument_list|,
literal|11
argument_list|)
operator|.
name|point
argument_list|(
literal|5
argument_list|,
operator|-
literal|5
argument_list|)
operator|.
name|close
argument_list|()
operator|.
name|close
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
assert|assert
literal|false
operator|:
literal|"Self intersection not detected"
assert|;
block|}
catch|catch
parameter_list|(
name|InvalidShapeException
name|e
parameter_list|)
block|{}
try|try
block|{
comment|// polygon with intersection holes
name|ShapeBuilder
operator|.
name|newPolygon
argument_list|()
operator|.
name|point
argument_list|(
operator|-
literal|10
argument_list|,
operator|-
literal|10
argument_list|)
operator|.
name|point
argument_list|(
operator|-
literal|10
argument_list|,
literal|10
argument_list|)
operator|.
name|point
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
operator|.
name|point
argument_list|(
literal|10
argument_list|,
operator|-
literal|10
argument_list|)
operator|.
name|hole
argument_list|()
operator|.
name|point
argument_list|(
operator|-
literal|5
argument_list|,
operator|-
literal|5
argument_list|)
operator|.
name|point
argument_list|(
operator|-
literal|5
argument_list|,
literal|5
argument_list|)
operator|.
name|point
argument_list|(
literal|5
argument_list|,
literal|5
argument_list|)
operator|.
name|point
argument_list|(
literal|5
argument_list|,
operator|-
literal|5
argument_list|)
operator|.
name|close
argument_list|()
operator|.
name|hole
argument_list|()
operator|.
name|point
argument_list|(
operator|-
literal|5
argument_list|,
operator|-
literal|6
argument_list|)
operator|.
name|point
argument_list|(
literal|5
argument_list|,
operator|-
literal|6
argument_list|)
operator|.
name|point
argument_list|(
literal|5
argument_list|,
operator|-
literal|4
argument_list|)
operator|.
name|point
argument_list|(
operator|-
literal|5
argument_list|,
operator|-
literal|4
argument_list|)
operator|.
name|close
argument_list|()
operator|.
name|close
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
assert|assert
literal|false
operator|:
literal|"Intersection of holes not detected"
assert|;
block|}
catch|catch
parameter_list|(
name|InvalidShapeException
name|e
parameter_list|)
block|{}
try|try
block|{
comment|// Common line in polygon
name|ShapeBuilder
operator|.
name|newPolygon
argument_list|()
operator|.
name|point
argument_list|(
operator|-
literal|10
argument_list|,
operator|-
literal|10
argument_list|)
operator|.
name|point
argument_list|(
operator|-
literal|10
argument_list|,
literal|10
argument_list|)
operator|.
name|point
argument_list|(
operator|-
literal|5
argument_list|,
literal|10
argument_list|)
operator|.
name|point
argument_list|(
operator|-
literal|5
argument_list|,
operator|-
literal|5
argument_list|)
operator|.
name|point
argument_list|(
operator|-
literal|5
argument_list|,
literal|20
argument_list|)
operator|.
name|point
argument_list|(
literal|10
argument_list|,
literal|20
argument_list|)
operator|.
name|point
argument_list|(
literal|10
argument_list|,
operator|-
literal|10
argument_list|)
operator|.
name|close
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
assert|assert
literal|false
operator|:
literal|"Self intersection not detected"
assert|;
block|}
catch|catch
parameter_list|(
name|InvalidShapeException
name|e
parameter_list|)
block|{}
comment|// Not specified
comment|//        try {
comment|//            // two overlapping polygons within a multipolygon
comment|//            ShapeBuilder.newMultiPolygon()
comment|//                .polygon()
comment|//                    .point(-10, -10)
comment|//                    .point(-10, 10)
comment|//                    .point(10, 10)
comment|//                    .point(10, -10)
comment|//                .close()
comment|//                .polygon()
comment|//                    .point(-5, -5).point(-5, 5).point(5, 5).point(5, -5)
comment|//                .close().build();
comment|//            assert false : "Polygon intersection not detected";
comment|//        } catch (InvalidShapeException e) {}
comment|// Multipolygon: polygon with hole and polygon within the whole
name|ShapeBuilder
operator|.
name|newMultiPolygon
argument_list|()
operator|.
name|polygon
argument_list|()
operator|.
name|point
argument_list|(
operator|-
literal|10
argument_list|,
operator|-
literal|10
argument_list|)
operator|.
name|point
argument_list|(
operator|-
literal|10
argument_list|,
literal|10
argument_list|)
operator|.
name|point
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
operator|.
name|point
argument_list|(
literal|10
argument_list|,
operator|-
literal|10
argument_list|)
operator|.
name|hole
argument_list|()
operator|.
name|point
argument_list|(
operator|-
literal|5
argument_list|,
operator|-
literal|5
argument_list|)
operator|.
name|point
argument_list|(
operator|-
literal|5
argument_list|,
literal|5
argument_list|)
operator|.
name|point
argument_list|(
literal|5
argument_list|,
literal|5
argument_list|)
operator|.
name|point
argument_list|(
literal|5
argument_list|,
operator|-
literal|5
argument_list|)
operator|.
name|close
argument_list|()
operator|.
name|close
argument_list|()
operator|.
name|polygon
argument_list|()
operator|.
name|point
argument_list|(
operator|-
literal|4
argument_list|,
operator|-
literal|4
argument_list|)
operator|.
name|point
argument_list|(
operator|-
literal|4
argument_list|,
literal|4
argument_list|)
operator|.
name|point
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|)
operator|.
name|point
argument_list|(
literal|4
argument_list|,
operator|-
literal|4
argument_list|)
operator|.
name|close
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
comment|// Not supported
comment|//        try {
comment|//            // Multipolygon: polygon with hole and polygon within the hole but overlapping
comment|//            ShapeBuilder.newMultiPolygon()
comment|//                .polygon()
comment|//                    .point(-10, -10).point(-10, 10).point(10, 10).point(10, -10)
comment|//                    .hole()
comment|//                        .point(-5, -5).point(-5, 5).point(5, 5).point(5, -5)
comment|//                    .close()
comment|//                .close()
comment|//                .polygon()
comment|//                    .point(-4, -4).point(-4, 6).point(4, 6).point(4, -4)
comment|//                .close()
comment|//                .build();
comment|//            assert false : "Polygon intersection not detected";
comment|//        } catch (InvalidShapeException e) {}
block|}
annotation|@
name|Test
DECL|method|testShapeRelations
specifier|public
name|void
name|testShapeRelations
parameter_list|()
throws|throws
name|Exception
block|{
assert|assert
name|intersectSupport
operator|:
literal|"Intersect relation is not supported"
assert|;
comment|//      assert disjointSupport: "Disjoint relation is not supported";
comment|//      assert withinSupport: "within relation is not supported";
assert|assert
operator|!
name|disjointSupport
operator|:
literal|"Disjoint relation is now supported"
assert|;
assert|assert
operator|!
name|withinSupport
operator|:
literal|"within relation is now supported"
assert|;
name|String
name|mapping
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"polygon"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"area"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"geo_shape"
argument_list|)
operator|.
name|field
argument_list|(
literal|"tree"
argument_list|,
literal|"geohash"
argument_list|)
operator|.
name|field
argument_list|(
literal|"store"
argument_list|,
literal|true
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
decl_stmt|;
name|CreateIndexRequestBuilder
name|mappingRequest
init|=
name|client
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"shapes"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"polygon"
argument_list|,
name|mapping
argument_list|)
decl_stmt|;
name|mappingRequest
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareHealth
argument_list|()
operator|.
name|setWaitForEvents
argument_list|(
name|Priority
operator|.
name|LANGUID
argument_list|)
operator|.
name|setWaitForGreenStatus
argument_list|()
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
comment|// Create a multipolygon with two polygons. The first is an rectangle of size 10x10
comment|// with a hole of size 5x5 equidistant from all sides. This hole in turn contains
comment|// the second polygon of size 4x4 equidistant from all sites
name|MultiPolygonBuilder
name|polygon
init|=
name|ShapeBuilder
operator|.
name|newMultiPolygon
argument_list|()
operator|.
name|polygon
argument_list|()
operator|.
name|point
argument_list|(
operator|-
literal|10
argument_list|,
operator|-
literal|10
argument_list|)
operator|.
name|point
argument_list|(
operator|-
literal|10
argument_list|,
literal|10
argument_list|)
operator|.
name|point
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
operator|.
name|point
argument_list|(
literal|10
argument_list|,
operator|-
literal|10
argument_list|)
operator|.
name|hole
argument_list|()
operator|.
name|point
argument_list|(
operator|-
literal|5
argument_list|,
operator|-
literal|5
argument_list|)
operator|.
name|point
argument_list|(
operator|-
literal|5
argument_list|,
literal|5
argument_list|)
operator|.
name|point
argument_list|(
literal|5
argument_list|,
literal|5
argument_list|)
operator|.
name|point
argument_list|(
literal|5
argument_list|,
operator|-
literal|5
argument_list|)
operator|.
name|close
argument_list|()
operator|.
name|close
argument_list|()
operator|.
name|polygon
argument_list|()
operator|.
name|point
argument_list|(
operator|-
literal|4
argument_list|,
operator|-
literal|4
argument_list|)
operator|.
name|point
argument_list|(
operator|-
literal|4
argument_list|,
literal|4
argument_list|)
operator|.
name|point
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|)
operator|.
name|point
argument_list|(
literal|4
argument_list|,
operator|-
literal|4
argument_list|)
operator|.
name|close
argument_list|()
decl_stmt|;
name|BytesReference
name|data
init|=
name|polygon
operator|.
name|toXContent
argument_list|(
literal|"area"
argument_list|,
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|bytes
argument_list|()
decl_stmt|;
name|client
operator|.
name|prepareIndex
argument_list|(
literal|"shapes"
argument_list|,
literal|"polygon"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|data
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareRefresh
argument_list|()
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
comment|// Point in polygon
name|SearchResponse
name|result
init|=
name|client
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|setFilter
argument_list|(
name|FilterBuilders
operator|.
name|geoIntersectionFilter
argument_list|(
literal|"area"
argument_list|,
name|ShapeBuilder
operator|.
name|newPoint
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|getHits
argument_list|()
operator|.
name|getTotalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Point in polygon hole
name|result
operator|=
name|client
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|setFilter
argument_list|(
name|FilterBuilders
operator|.
name|geoIntersectionFilter
argument_list|(
literal|"area"
argument_list|,
name|ShapeBuilder
operator|.
name|newPoint
argument_list|(
literal|4.5
argument_list|,
literal|4.5
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|getHits
argument_list|()
operator|.
name|getTotalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
comment|// by definition the border of a polygon belongs to the inner
comment|// so the border of a polygons hole also belongs to the inner
comment|// of the polygon NOT the hole
comment|// Point on polygon border
name|result
operator|=
name|client
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|setFilter
argument_list|(
name|FilterBuilders
operator|.
name|geoIntersectionFilter
argument_list|(
literal|"area"
argument_list|,
name|ShapeBuilder
operator|.
name|newPoint
argument_list|(
literal|10.0
argument_list|,
literal|5.0
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|getHits
argument_list|()
operator|.
name|getTotalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Point on hole border
name|result
operator|=
name|client
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|setFilter
argument_list|(
name|FilterBuilders
operator|.
name|geoIntersectionFilter
argument_list|(
literal|"area"
argument_list|,
name|ShapeBuilder
operator|.
name|newPoint
argument_list|(
literal|5.0
argument_list|,
literal|2.0
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|getHits
argument_list|()
operator|.
name|getTotalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|disjointSupport
condition|)
block|{
comment|// Point not in polygon
name|result
operator|=
name|client
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|setFilter
argument_list|(
name|FilterBuilders
operator|.
name|geoDisjointFilter
argument_list|(
literal|"area"
argument_list|,
name|ShapeBuilder
operator|.
name|newPoint
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|getHits
argument_list|()
operator|.
name|getTotalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
comment|// Point in polygon hole
name|result
operator|=
name|client
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|setFilter
argument_list|(
name|FilterBuilders
operator|.
name|geoDisjointFilter
argument_list|(
literal|"area"
argument_list|,
name|ShapeBuilder
operator|.
name|newPoint
argument_list|(
literal|4.5
argument_list|,
literal|4.5
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|getHits
argument_list|()
operator|.
name|getTotalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Create a polygon that fills the empty area of the polygon defined above
name|PolygonBuilder
name|inverse
init|=
name|ShapeBuilder
operator|.
name|newPolygon
argument_list|()
operator|.
name|point
argument_list|(
operator|-
literal|5
argument_list|,
operator|-
literal|5
argument_list|)
operator|.
name|point
argument_list|(
operator|-
literal|5
argument_list|,
literal|5
argument_list|)
operator|.
name|point
argument_list|(
literal|5
argument_list|,
literal|5
argument_list|)
operator|.
name|point
argument_list|(
literal|5
argument_list|,
operator|-
literal|5
argument_list|)
operator|.
name|hole
argument_list|()
operator|.
name|point
argument_list|(
operator|-
literal|4
argument_list|,
operator|-
literal|4
argument_list|)
operator|.
name|point
argument_list|(
operator|-
literal|4
argument_list|,
literal|4
argument_list|)
operator|.
name|point
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|)
operator|.
name|point
argument_list|(
literal|4
argument_list|,
operator|-
literal|4
argument_list|)
operator|.
name|close
argument_list|()
operator|.
name|close
argument_list|()
decl_stmt|;
name|data
operator|=
name|inverse
operator|.
name|toXContent
argument_list|(
literal|"area"
argument_list|,
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|bytes
argument_list|()
expr_stmt|;
name|client
operator|.
name|prepareIndex
argument_list|(
literal|"shapes"
argument_list|,
literal|"polygon"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
name|data
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareRefresh
argument_list|()
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
comment|// re-check point on polygon hole
name|result
operator|=
name|client
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|setFilter
argument_list|(
name|FilterBuilders
operator|.
name|geoIntersectionFilter
argument_list|(
literal|"area"
argument_list|,
name|ShapeBuilder
operator|.
name|newPoint
argument_list|(
literal|4.5
argument_list|,
literal|4.5
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|getHits
argument_list|()
operator|.
name|getTotalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Create Polygon with hole and common edge
name|PolygonBuilder
name|builder
init|=
name|ShapeBuilder
operator|.
name|newPolygon
argument_list|()
operator|.
name|point
argument_list|(
operator|-
literal|10
argument_list|,
operator|-
literal|10
argument_list|)
operator|.
name|point
argument_list|(
operator|-
literal|10
argument_list|,
literal|10
argument_list|)
operator|.
name|point
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
operator|.
name|point
argument_list|(
literal|10
argument_list|,
operator|-
literal|10
argument_list|)
operator|.
name|hole
argument_list|()
operator|.
name|point
argument_list|(
operator|-
literal|5
argument_list|,
operator|-
literal|5
argument_list|)
operator|.
name|point
argument_list|(
operator|-
literal|5
argument_list|,
literal|5
argument_list|)
operator|.
name|point
argument_list|(
literal|10
argument_list|,
literal|5
argument_list|)
operator|.
name|point
argument_list|(
literal|10
argument_list|,
operator|-
literal|5
argument_list|)
operator|.
name|close
argument_list|()
operator|.
name|close
argument_list|()
decl_stmt|;
if|if
condition|(
name|withinSupport
condition|)
block|{
comment|// Polygon WithIn Polygon
name|builder
operator|=
name|ShapeBuilder
operator|.
name|newPolygon
argument_list|()
operator|.
name|point
argument_list|(
operator|-
literal|30
argument_list|,
operator|-
literal|30
argument_list|)
operator|.
name|point
argument_list|(
operator|-
literal|30
argument_list|,
literal|30
argument_list|)
operator|.
name|point
argument_list|(
literal|30
argument_list|,
literal|30
argument_list|)
operator|.
name|point
argument_list|(
literal|30
argument_list|,
operator|-
literal|30
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|result
operator|=
name|client
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|setFilter
argument_list|(
name|FilterBuilders
operator|.
name|geoWithinFilter
argument_list|(
literal|"area"
argument_list|,
name|builder
operator|.
name|build
argument_list|()
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|getHits
argument_list|()
operator|.
name|getTotalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2L
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/* TODO: fix Polygon builder! It is not possible to cross the lats -180 and 180.  *       A simple solution is following the path that is currently set up. When  *       it's crossing the 180Â° lat set the new point to the intersection of line-  *       segment and longitude and start building a new Polygon on the other side  *       of the latitude. When crossing the latitude again continue drawing the  *       first polygon. This approach can also applied to the holes because the  *       commonline of hole and polygon will not be recognized as intersection.  */
comment|//        // Create a polygon crossing longitude 180.
comment|//        builder = ShapeBuilder.newPolygon()
comment|//            .point(170, -10).point(180, 10).point(170, -10).point(10, -10)
comment|//            .close();
comment|//
comment|//        data = builder.toXContent("area", jsonBuilder().startObject()).endObject().bytes();
comment|//        client.prepareIndex("shapes", "polygon", "1").setSource(data).execute().actionGet();
comment|//        client.admin().indices().prepareRefresh().execute().actionGet();
block|}
annotation|@
name|Test
DECL|method|bulktest
specifier|public
name|void
name|bulktest
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|bulkAction
init|=
name|unZipData
argument_list|(
literal|"/org/elasticsearch/test/integration/search/geo/gzippedmap.json"
argument_list|)
decl_stmt|;
name|String
name|mapping
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"country"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"pin"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"geo_point"
argument_list|)
operator|.
name|field
argument_list|(
literal|"lat_lon"
argument_list|,
literal|true
argument_list|)
operator|.
name|field
argument_list|(
literal|"store"
argument_list|,
literal|true
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"location"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"geo_shape"
argument_list|)
operator|.
name|field
argument_list|(
literal|"lat_lon"
argument_list|,
literal|true
argument_list|)
operator|.
name|field
argument_list|(
literal|"store"
argument_list|,
literal|true
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
decl_stmt|;
name|client
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"countries"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"country"
argument_list|,
name|mapping
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|BulkResponse
name|bulk
init|=
name|client
operator|.
name|prepareBulk
argument_list|()
operator|.
name|add
argument_list|(
name|bulkAction
argument_list|,
literal|0
argument_list|,
name|bulkAction
operator|.
name|length
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
for|for
control|(
name|BulkItemResponse
name|item
range|:
name|bulk
operator|.
name|getItems
argument_list|()
control|)
block|{
assert|assert
operator|!
name|item
operator|.
name|isFailed
argument_list|()
operator|:
literal|"unable to index data"
assert|;
block|}
name|client
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareRefresh
argument_list|()
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|String
name|key
init|=
literal|"DE"
decl_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|fieldQuery
argument_list|(
literal|"_id"
argument_list|,
name|key
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getTotalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|SearchHit
name|hit
range|:
name|searchResponse
operator|.
name|getHits
argument_list|()
control|)
block|{
name|assertThat
argument_list|(
name|hit
operator|.
name|getId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|SearchResponse
name|world
init|=
name|client
operator|.
name|prepareSearch
argument_list|()
operator|.
name|addField
argument_list|(
literal|"pin"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|filteredQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|,
name|geoBoundingBoxFilter
argument_list|(
literal|"pin"
argument_list|)
operator|.
name|topLeft
argument_list|(
literal|90
argument_list|,
operator|-
literal|179.99999
argument_list|)
operator|.
name|bottomRight
argument_list|(
operator|-
literal|90
argument_list|,
literal|179.99999
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|world
operator|.
name|getHits
argument_list|()
operator|.
name|totalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|246L
argument_list|)
argument_list|)
expr_stmt|;
name|SearchResponse
name|distance
init|=
name|client
operator|.
name|prepareSearch
argument_list|()
operator|.
name|addField
argument_list|(
literal|"pin"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|filteredQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|,
name|geoDistanceFilter
argument_list|(
literal|"pin"
argument_list|)
operator|.
name|distance
argument_list|(
literal|"425km"
argument_list|)
operator|.
name|point
argument_list|(
literal|51.11
argument_list|,
literal|9.851
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|distance
operator|.
name|getHits
argument_list|()
operator|.
name|totalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|5L
argument_list|)
argument_list|)
expr_stmt|;
name|GeoPoint
name|point
init|=
operator|new
name|GeoPoint
argument_list|()
decl_stmt|;
for|for
control|(
name|SearchHit
name|hit
range|:
name|distance
operator|.
name|getHits
argument_list|()
control|)
block|{
name|String
name|name
init|=
name|hit
operator|.
name|getId
argument_list|()
decl_stmt|;
name|point
operator|.
name|resetFromString
argument_list|(
name|hit
operator|.
name|fields
argument_list|()
operator|.
name|get
argument_list|(
literal|"pin"
argument_list|)
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|double
name|dist
init|=
name|distance
argument_list|(
name|point
operator|.
name|getLat
argument_list|()
argument_list|,
name|point
operator|.
name|getLon
argument_list|()
argument_list|,
literal|51.11
argument_list|,
literal|9.851
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
literal|"distance to '"
operator|+
name|name
operator|+
literal|"'"
argument_list|,
name|dist
argument_list|,
name|lessThanOrEqualTo
argument_list|(
literal|425000d
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|name
argument_list|,
name|anyOf
argument_list|(
name|equalTo
argument_list|(
literal|"CZ"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"DE"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"BE"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"NL"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"LU"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|assertThat
argument_list|(
name|dist
argument_list|,
name|equalTo
argument_list|(
literal|0d
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|distance
specifier|public
specifier|static
name|double
name|distance
parameter_list|(
name|double
name|lat1
parameter_list|,
name|double
name|lon1
parameter_list|,
name|double
name|lat2
parameter_list|,
name|double
name|lon2
parameter_list|)
block|{
return|return
name|GeoUtils
operator|.
name|EARTH_SEMI_MAJOR_AXIS
operator|*
name|DistanceUtils
operator|.
name|distHaversineRAD
argument_list|(
name|DistanceUtils
operator|.
name|toRadians
argument_list|(
name|lat1
argument_list|)
argument_list|,
name|DistanceUtils
operator|.
name|toRadians
argument_list|(
name|lon1
argument_list|)
argument_list|,
name|DistanceUtils
operator|.
name|toRadians
argument_list|(
name|lat2
argument_list|)
argument_list|,
name|DistanceUtils
operator|.
name|toRadians
argument_list|(
name|lon2
argument_list|)
argument_list|)
return|;
block|}
DECL|method|testRelationSupport
specifier|protected
specifier|static
name|boolean
name|testRelationSupport
parameter_list|(
name|SpatialOperation
name|relation
parameter_list|)
block|{
try|try
block|{
name|GeohashPrefixTree
name|tree
init|=
operator|new
name|GeohashPrefixTree
argument_list|(
name|SpatialContext
operator|.
name|GEO
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|RecursivePrefixTreeStrategy
name|strategy
init|=
operator|new
name|RecursivePrefixTreeStrategy
argument_list|(
name|tree
argument_list|,
literal|"area"
argument_list|)
decl_stmt|;
name|Shape
name|shape
init|=
name|SpatialContext
operator|.
name|GEO
operator|.
name|makePoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|SpatialArgs
name|args
init|=
operator|new
name|SpatialArgs
argument_list|(
name|relation
argument_list|,
name|shape
argument_list|)
decl_stmt|;
name|strategy
operator|.
name|makeFilter
argument_list|(
name|args
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|UnsupportedSpatialOperation
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
end_class

end_unit

