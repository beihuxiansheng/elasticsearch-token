begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.test.integration.search.rescore
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|integration
operator|.
name|search
operator|.
name|rescore
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
operator|.
name|jsonBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|MatcherAssert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|notNullValue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|English
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
operator|.
name|Builder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|MatchQueryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchHit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchHits
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|rescore
operator|.
name|RescoreBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|integration
operator|.
name|AbstractSharedClusterTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|testng
operator|.
name|annotations
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|QueryRescorerTests
specifier|public
class|class
name|QueryRescorerTests
extends|extends
name|AbstractSharedClusterTest
block|{
annotation|@
name|Test
DECL|method|testRescorePhrase
specifier|public
name|void
name|testRescorePhrase
parameter_list|()
throws|throws
name|Exception
block|{
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
literal|"whitespace"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|setSettings
argument_list|(
name|ImmutableSettings
operator|.
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.number_of_shards"
argument_list|,
literal|2
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"the quick brown fox"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"the quick lazy huge brown fox jumps over the tree"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"quick huge brown"
argument_list|,
literal|"field2"
argument_list|,
literal|"the quick lazy huge brown fox jumps over the tree"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|matchQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"the quick brown"
argument_list|)
operator|.
name|operator
argument_list|(
name|MatchQueryBuilder
operator|.
name|Operator
operator|.
name|OR
argument_list|)
argument_list|)
operator|.
name|setRescorer
argument_list|(
name|RescoreBuilder
operator|.
name|queryRescorer
argument_list|(
name|QueryBuilders
operator|.
name|matchPhraseQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"quick brown"
argument_list|)
operator|.
name|slop
argument_list|(
literal|2
argument_list|)
operator|.
name|boost
argument_list|(
literal|4.0f
argument_list|)
argument_list|)
argument_list|)
operator|.
name|setRescoreWindow
argument_list|(
literal|5
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|totalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getHits
argument_list|()
index|[
literal|0
index|]
operator|.
name|getId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getHits
argument_list|()
index|[
literal|1
index|]
operator|.
name|getId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getHits
argument_list|()
index|[
literal|2
index|]
operator|.
name|getId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|matchQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"the quick brown"
argument_list|)
operator|.
name|operator
argument_list|(
name|MatchQueryBuilder
operator|.
name|Operator
operator|.
name|OR
argument_list|)
argument_list|)
operator|.
name|setRescorer
argument_list|(
name|RescoreBuilder
operator|.
name|queryRescorer
argument_list|(
name|QueryBuilders
operator|.
name|matchPhraseQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"the quick brown"
argument_list|)
operator|.
name|slop
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|)
operator|.
name|setRescoreWindow
argument_list|(
literal|5
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertSecondHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThirdHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|matchQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"the quick brown"
argument_list|)
operator|.
name|operator
argument_list|(
name|MatchQueryBuilder
operator|.
name|Operator
operator|.
name|OR
argument_list|)
argument_list|)
operator|.
name|setRescorer
argument_list|(
name|RescoreBuilder
operator|.
name|queryRescorer
argument_list|(
operator|(
name|QueryBuilders
operator|.
name|matchPhraseQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"the quick brown"
argument_list|)
operator|)
argument_list|)
argument_list|)
operator|.
name|setRescoreWindow
argument_list|(
literal|5
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertSecondHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThirdHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMoreDocs
specifier|public
name|void
name|testMoreDocs
parameter_list|()
throws|throws
name|Exception
block|{
name|Builder
name|builder
init|=
name|ImmutableSettings
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|put
argument_list|(
literal|"index.analysis.analyzer.synonym.tokenizer"
argument_list|,
literal|"whitespace"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|putArray
argument_list|(
literal|"index.analysis.analyzer.synonym.filter"
argument_list|,
literal|"synonym"
argument_list|,
literal|"lowercase"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.synonym.type"
argument_list|,
literal|"synonym"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|putArray
argument_list|(
literal|"index.analysis.filter.synonym.synonyms"
argument_list|,
literal|"ave => ave, avenue"
argument_list|,
literal|"street => str, street"
argument_list|)
expr_stmt|;
name|XContentBuilder
name|mapping
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type2"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"index_analyzer"
argument_list|,
literal|"whitespace"
argument_list|)
operator|.
name|field
argument_list|(
literal|"search_analyzer"
argument_list|,
literal|"synonym"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
name|mapping
argument_list|)
operator|.
name|setSettings
argument_list|(
name|builder
operator|.
name|put
argument_list|(
literal|"index.number_of_shards"
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"massachusetts avenue boston massachusetts"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"lexington avenue boston massachusetts"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"boston avenue lexington massachusetts"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareRefresh
argument_list|(
literal|"test"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"boston road lexington massachusetts"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"5"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"lexington street lexington massachusetts"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"6"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"massachusetts avenue lexington massachusetts"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"7"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"bosten street san franciso california"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareRefresh
argument_list|(
literal|"test"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"8"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"hollywood boulevard los angeles california"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"9"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"1st street boston massachussetts"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"10"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"1st street boston massachusetts"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareRefresh
argument_list|(
literal|"test"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"11"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"2st street boston massachusetts"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"12"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"3st street boston massachusetts"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareRefresh
argument_list|(
literal|"test"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|matchQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"lexington avenue massachusetts"
argument_list|)
operator|.
name|operator
argument_list|(
name|MatchQueryBuilder
operator|.
name|Operator
operator|.
name|OR
argument_list|)
argument_list|)
operator|.
name|setFrom
argument_list|(
literal|0
argument_list|)
operator|.
name|setSize
argument_list|(
literal|5
argument_list|)
operator|.
name|setRescorer
argument_list|(
name|RescoreBuilder
operator|.
name|queryRescorer
argument_list|(
name|QueryBuilders
operator|.
name|matchPhraseQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"lexington avenue massachusetts"
argument_list|)
operator|.
name|slop
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|setQueryWeight
argument_list|(
literal|0.6f
argument_list|)
operator|.
name|setRescoreQueryWeight
argument_list|(
literal|2.0f
argument_list|)
argument_list|)
operator|.
name|setRescoreWindow
argument_list|(
literal|20
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertSecondHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"6"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThirdHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|matchQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"lexington avenue massachusetts"
argument_list|)
operator|.
name|operator
argument_list|(
name|MatchQueryBuilder
operator|.
name|Operator
operator|.
name|OR
argument_list|)
argument_list|)
operator|.
name|setFrom
argument_list|(
literal|0
argument_list|)
operator|.
name|setSize
argument_list|(
literal|5
argument_list|)
operator|.
name|setSearchType
argument_list|(
name|SearchType
operator|.
name|DFS_QUERY_THEN_FETCH
argument_list|)
operator|.
name|setRescorer
argument_list|(
name|RescoreBuilder
operator|.
name|queryRescorer
argument_list|(
name|QueryBuilders
operator|.
name|matchPhraseQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"lexington avenue massachusetts"
argument_list|)
operator|.
name|slop
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|setQueryWeight
argument_list|(
literal|0.6f
argument_list|)
operator|.
name|setRescoreQueryWeight
argument_list|(
literal|2.0f
argument_list|)
argument_list|)
operator|.
name|setRescoreWindow
argument_list|(
literal|20
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertSecondHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"6"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThirdHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertEquivalent
specifier|private
specifier|static
specifier|final
name|void
name|assertEquivalent
parameter_list|(
name|SearchResponse
name|plain
parameter_list|,
name|SearchResponse
name|rescored
parameter_list|)
block|{
name|SearchHits
name|leftHits
init|=
name|plain
operator|.
name|getHits
argument_list|()
decl_stmt|;
name|SearchHits
name|rightHits
init|=
name|rescored
operator|.
name|getHits
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|leftHits
operator|.
name|getTotalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|rightHits
operator|.
name|getTotalHits
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|leftHits
operator|.
name|getHits
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
name|rightHits
operator|.
name|getHits
argument_list|()
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|SearchHit
index|[]
name|hits
init|=
name|leftHits
operator|.
name|getHits
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hits
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertThat
argument_list|(
name|hits
index|[
name|i
index|]
operator|.
name|getId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|rightHits
operator|.
name|getHits
argument_list|()
index|[
name|i
index|]
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertEquivalentOrSubstringMatch
specifier|private
specifier|static
specifier|final
name|void
name|assertEquivalentOrSubstringMatch
parameter_list|(
name|String
name|query
parameter_list|,
name|SearchResponse
name|plain
parameter_list|,
name|SearchResponse
name|rescored
parameter_list|)
block|{
name|SearchHits
name|leftHits
init|=
name|plain
operator|.
name|getHits
argument_list|()
decl_stmt|;
name|SearchHits
name|rightHits
init|=
name|rescored
operator|.
name|getHits
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|leftHits
operator|.
name|getTotalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|rightHits
operator|.
name|getTotalHits
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|leftHits
operator|.
name|getHits
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
name|rightHits
operator|.
name|getHits
argument_list|()
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|SearchHit
index|[]
name|hits
init|=
name|leftHits
operator|.
name|getHits
argument_list|()
decl_stmt|;
name|SearchHit
index|[]
name|otherHits
init|=
name|rightHits
operator|.
name|getHits
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|hits
index|[
literal|0
index|]
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|otherHits
index|[
literal|0
index|]
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|assertThat
argument_list|(
operator|(
operator|(
name|String
operator|)
name|otherHits
index|[
literal|0
index|]
operator|.
name|sourceAsMap
argument_list|()
operator|.
name|get
argument_list|(
literal|"field1"
argument_list|)
operator|)
operator|.
name|contains
argument_list|(
name|query
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hits
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertThat
argument_list|(
name|query
argument_list|,
name|hits
index|[
name|i
index|]
operator|.
name|getId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|rightHits
operator|.
name|getHits
argument_list|()
index|[
name|i
index|]
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testEquivalence
specifier|public
name|void
name|testEquivalence
parameter_list|()
throws|throws
name|Exception
block|{
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
literal|"whitespace"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|setSettings
argument_list|(
name|ImmutableSettings
operator|.
name|settingsBuilder
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|int
name|numDocs
init|=
literal|1000
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
name|English
operator|.
name|intToEnglish
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
block|}
name|flush
argument_list|()
expr_stmt|;
name|optimize
argument_list|()
expr_stmt|;
comment|// make sure we don't have a background merge running
name|refresh
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|String
name|intToEnglish
init|=
name|English
operator|.
name|intToEnglish
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|query
init|=
name|intToEnglish
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
index|[
literal|0
index|]
decl_stmt|;
name|SearchResponse
name|rescored
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setPreference
argument_list|(
literal|"test"
argument_list|)
comment|// ensure we hit the same shards for tie-breaking
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|matchQuery
argument_list|(
literal|"field1"
argument_list|,
name|query
argument_list|)
operator|.
name|operator
argument_list|(
name|MatchQueryBuilder
operator|.
name|Operator
operator|.
name|OR
argument_list|)
argument_list|)
operator|.
name|setFrom
argument_list|(
literal|0
argument_list|)
operator|.
name|setSize
argument_list|(
literal|10
argument_list|)
operator|.
name|setRescorer
argument_list|(
name|RescoreBuilder
operator|.
name|queryRescorer
argument_list|(
name|QueryBuilders
operator|.
name|constantScoreQuery
argument_list|(
name|QueryBuilders
operator|.
name|matchPhraseQuery
argument_list|(
literal|"field1"
argument_list|,
name|intToEnglish
argument_list|)
operator|.
name|slop
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|)
operator|.
name|setQueryWeight
argument_list|(
literal|1.0f
argument_list|)
operator|.
name|setRescoreQueryWeight
argument_list|(
literal|0.0f
argument_list|)
argument_list|)
comment|// no weigth - so we basically use the same score as the actual query
operator|.
name|setRescoreWindow
argument_list|(
literal|50
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|SearchResponse
name|plain
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setPreference
argument_list|(
literal|"test"
argument_list|)
comment|// ensure we hit the same shards for tie-breaking
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|matchQuery
argument_list|(
literal|"field1"
argument_list|,
name|query
argument_list|)
operator|.
name|operator
argument_list|(
name|MatchQueryBuilder
operator|.
name|Operator
operator|.
name|OR
argument_list|)
argument_list|)
operator|.
name|setFrom
argument_list|(
literal|0
argument_list|)
operator|.
name|setSize
argument_list|(
literal|10
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
comment|// check equivalence
name|assertEquivalent
argument_list|(
name|plain
argument_list|,
name|rescored
argument_list|)
expr_stmt|;
name|rescored
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setPreference
argument_list|(
literal|"test"
argument_list|)
comment|// ensure we hit the same shards for tie-breaking
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|matchQuery
argument_list|(
literal|"field1"
argument_list|,
name|query
argument_list|)
operator|.
name|operator
argument_list|(
name|MatchQueryBuilder
operator|.
name|Operator
operator|.
name|OR
argument_list|)
argument_list|)
operator|.
name|setFrom
argument_list|(
literal|0
argument_list|)
operator|.
name|setSize
argument_list|(
literal|10
argument_list|)
operator|.
name|setRescorer
argument_list|(
name|RescoreBuilder
operator|.
name|queryRescorer
argument_list|(
name|QueryBuilders
operator|.
name|constantScoreQuery
argument_list|(
name|QueryBuilders
operator|.
name|matchPhraseQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"not in the index"
argument_list|)
operator|.
name|slop
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|)
operator|.
name|setQueryWeight
argument_list|(
literal|1.0f
argument_list|)
operator|.
name|setRescoreQueryWeight
argument_list|(
literal|1.0f
argument_list|)
argument_list|)
operator|.
name|setRescoreWindow
argument_list|(
literal|50
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
comment|// check equivalence
name|assertEquivalent
argument_list|(
name|plain
argument_list|,
name|rescored
argument_list|)
expr_stmt|;
name|rescored
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setPreference
argument_list|(
literal|"test"
argument_list|)
comment|// ensure we hit the same shards for tie-breaking
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|matchQuery
argument_list|(
literal|"field1"
argument_list|,
name|query
argument_list|)
operator|.
name|operator
argument_list|(
name|MatchQueryBuilder
operator|.
name|Operator
operator|.
name|OR
argument_list|)
argument_list|)
operator|.
name|setFrom
argument_list|(
literal|0
argument_list|)
operator|.
name|setSize
argument_list|(
literal|10
argument_list|)
operator|.
name|setRescorer
argument_list|(
name|RescoreBuilder
operator|.
name|queryRescorer
argument_list|(
name|QueryBuilders
operator|.
name|matchPhraseQuery
argument_list|(
literal|"field1"
argument_list|,
name|intToEnglish
argument_list|)
operator|.
name|slop
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|setQueryWeight
argument_list|(
literal|1.0f
argument_list|)
operator|.
name|setRescoreQueryWeight
argument_list|(
literal|1.0f
argument_list|)
argument_list|)
operator|.
name|setRescoreWindow
argument_list|(
literal|100
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
comment|// check equivalence or if the first match differs we check if the phrase is a substring of the top doc
name|assertEquivalentOrSubstringMatch
argument_list|(
name|intToEnglish
argument_list|,
name|plain
argument_list|,
name|rescored
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testExplain
specifier|public
name|void
name|testExplain
parameter_list|()
throws|throws
name|Exception
block|{
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
literal|"whitespace"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|setSettings
argument_list|(
name|ImmutableSettings
operator|.
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.number_of_shards"
argument_list|,
literal|2
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"the quick brown fox"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"the quick lazy huge brown fox jumps over the tree"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"quick huge brown"
argument_list|,
literal|"field2"
argument_list|,
literal|"the quick lazy huge brown fox jumps over the tree"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setSearchType
argument_list|(
name|SearchType
operator|.
name|DFS_QUERY_THEN_FETCH
argument_list|)
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|matchQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"the quick brown"
argument_list|)
operator|.
name|operator
argument_list|(
name|MatchQueryBuilder
operator|.
name|Operator
operator|.
name|OR
argument_list|)
argument_list|)
operator|.
name|setRescorer
argument_list|(
name|RescoreBuilder
operator|.
name|queryRescorer
argument_list|(
name|QueryBuilders
operator|.
name|matchPhraseQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"the quick brown"
argument_list|)
operator|.
name|slop
argument_list|(
literal|2
argument_list|)
operator|.
name|boost
argument_list|(
literal|4.0f
argument_list|)
argument_list|)
operator|.
name|setQueryWeight
argument_list|(
literal|0.5f
argument_list|)
operator|.
name|setRescoreQueryWeight
argument_list|(
literal|0.4f
argument_list|)
argument_list|)
operator|.
name|setRescoreWindow
argument_list|(
literal|5
argument_list|)
operator|.
name|setExplain
argument_list|(
literal|true
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertFirstHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertSecondHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThirdHit
argument_list|(
name|searchResponse
argument_list|,
name|hasId
argument_list|(
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
name|i
argument_list|)
operator|.
name|explanation
argument_list|()
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
name|i
argument_list|)
operator|.
name|explanation
argument_list|()
operator|.
name|isMatch
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
name|i
argument_list|)
operator|.
name|explanation
argument_list|()
operator|.
name|getDetails
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
name|i
argument_list|)
operator|.
name|explanation
argument_list|()
operator|.
name|getDetails
argument_list|()
index|[
literal|0
index|]
operator|.
name|isMatch
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
name|i
argument_list|)
operator|.
name|explanation
argument_list|()
operator|.
name|getDetails
argument_list|()
index|[
literal|0
index|]
operator|.
name|getDetails
argument_list|()
index|[
literal|1
index|]
operator|.
name|getValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0.5f
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
name|i
argument_list|)
operator|.
name|explanation
argument_list|()
operator|.
name|getDetails
argument_list|()
index|[
literal|1
index|]
operator|.
name|getDetails
argument_list|()
index|[
literal|1
index|]
operator|.
name|getValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0.4f
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|==
literal|2
condition|)
block|{
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
name|i
argument_list|)
operator|.
name|explanation
argument_list|()
operator|.
name|getDetails
argument_list|()
index|[
literal|1
index|]
operator|.
name|isMatch
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
name|i
argument_list|)
operator|.
name|explanation
argument_list|()
operator|.
name|getDetails
argument_list|()
index|[
literal|1
index|]
operator|.
name|getDetails
argument_list|()
index|[
literal|0
index|]
operator|.
name|getValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0.0f
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

