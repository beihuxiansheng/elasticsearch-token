begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.client.transport
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|transport
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|ClusterAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|node
operator|.
name|info
operator|.
name|NodesInfoAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|IndicesAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|ClusterAdminClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|IndicesAdminClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|support
operator|.
name|Headers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|transport
operator|.
name|support
operator|.
name|InternalTransportAdminClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|transport
operator|.
name|support
operator|.
name|InternalTransportClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|transport
operator|.
name|support
operator|.
name|InternalTransportClusterAdminClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|transport
operator|.
name|support
operator|.
name|InternalTransportIndicesAdminClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|transport
operator|.
name|LocalTransportAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|lessThanOrEqualTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|notNullValue
import|;
end_import

begin_class
DECL|class|InternalTransportClientTests
specifier|public
class|class
name|InternalTransportClientTests
extends|extends
name|ElasticsearchTestCase
block|{
DECL|class|TestIteration
specifier|private
specifier|static
class|class
name|TestIteration
implements|implements
name|Closeable
block|{
DECL|field|threadPool
specifier|private
specifier|final
name|ThreadPool
name|threadPool
decl_stmt|;
DECL|field|transport
specifier|private
specifier|final
name|FailAndRetryMockTransport
argument_list|<
name|TestResponse
argument_list|>
name|transport
decl_stmt|;
DECL|field|transportService
specifier|private
specifier|final
name|TransportService
name|transportService
decl_stmt|;
DECL|field|transportClientNodesService
specifier|private
specifier|final
name|TransportClientNodesService
name|transportClientNodesService
decl_stmt|;
DECL|field|internalTransportClient
specifier|private
specifier|final
name|InternalTransportClient
name|internalTransportClient
decl_stmt|;
DECL|field|nodesCount
specifier|private
specifier|final
name|int
name|nodesCount
decl_stmt|;
DECL|method|TestIteration
name|TestIteration
parameter_list|()
block|{
name|threadPool
operator|=
operator|new
name|ThreadPool
argument_list|(
literal|"internal-transport-client-tests"
argument_list|)
expr_stmt|;
name|transport
operator|=
operator|new
name|FailAndRetryMockTransport
argument_list|<
name|TestResponse
argument_list|>
argument_list|(
name|getRandom
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|TestResponse
name|newResponse
parameter_list|()
block|{
return|return
operator|new
name|TestResponse
argument_list|()
return|;
block|}
block|}
expr_stmt|;
name|transportService
operator|=
operator|new
name|TransportService
argument_list|(
name|ImmutableSettings
operator|.
name|EMPTY
argument_list|,
name|transport
argument_list|,
name|threadPool
argument_list|)
expr_stmt|;
name|transportService
operator|.
name|start
argument_list|()
expr_stmt|;
name|transportClientNodesService
operator|=
operator|new
name|TransportClientNodesService
argument_list|(
name|ImmutableSettings
operator|.
name|EMPTY
argument_list|,
name|ClusterName
operator|.
name|DEFAULT
argument_list|,
name|transportService
argument_list|,
name|threadPool
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|GenericAction
argument_list|>
name|actions
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|actions
operator|.
name|put
argument_list|(
name|NodesInfoAction
operator|.
name|NAME
argument_list|,
name|NodesInfoAction
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|actions
operator|.
name|put
argument_list|(
name|TestAction
operator|.
name|NAME
argument_list|,
name|TestAction
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|actions
operator|.
name|put
argument_list|(
name|IndicesAdminTestAction
operator|.
name|NAME
argument_list|,
name|IndicesAdminTestAction
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|actions
operator|.
name|put
argument_list|(
name|ClusterAdminTestAction
operator|.
name|NAME
argument_list|,
name|ClusterAdminTestAction
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|InternalTransportIndicesAdminClient
name|indicesAdminClient
init|=
operator|new
name|InternalTransportIndicesAdminClient
argument_list|(
name|ImmutableSettings
operator|.
name|EMPTY
argument_list|,
name|transportClientNodesService
argument_list|,
name|transportService
argument_list|,
name|threadPool
argument_list|,
name|actions
argument_list|,
name|Headers
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
name|InternalTransportClusterAdminClient
name|clusterAdminClient
init|=
operator|new
name|InternalTransportClusterAdminClient
argument_list|(
name|ImmutableSettings
operator|.
name|EMPTY
argument_list|,
name|transportClientNodesService
argument_list|,
name|threadPool
argument_list|,
name|transportService
argument_list|,
name|actions
argument_list|,
name|Headers
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
name|InternalTransportAdminClient
name|adminClient
init|=
operator|new
name|InternalTransportAdminClient
argument_list|(
name|ImmutableSettings
operator|.
name|EMPTY
argument_list|,
name|indicesAdminClient
argument_list|,
name|clusterAdminClient
argument_list|)
decl_stmt|;
name|internalTransportClient
operator|=
operator|new
name|InternalTransportClient
argument_list|(
name|ImmutableSettings
operator|.
name|EMPTY
argument_list|,
name|threadPool
argument_list|,
name|transportService
argument_list|,
name|transportClientNodesService
argument_list|,
name|adminClient
argument_list|,
name|actions
argument_list|,
name|Headers
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|nodesCount
operator|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodesCount
condition|;
name|i
operator|++
control|)
block|{
name|transportClientNodesService
operator|.
name|addTransportAddresses
argument_list|(
operator|new
name|LocalTransportAddress
argument_list|(
literal|"node"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|transport
operator|.
name|endConnectMode
argument_list|()
expr_stmt|;
block|}
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
name|threadPool
operator|.
name|shutdown
argument_list|()
expr_stmt|;
try|try
block|{
name|threadPool
operator|.
name|awaitTermination
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|isInterrupted
argument_list|()
expr_stmt|;
block|}
name|transportService
operator|.
name|stop
argument_list|()
expr_stmt|;
name|transportClientNodesService
operator|.
name|close
argument_list|()
expr_stmt|;
name|internalTransportClient
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testListenerFailures
specifier|public
name|void
name|testListenerFailures
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|int
name|iters
init|=
name|iterations
argument_list|(
literal|10
argument_list|,
literal|100
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iters
condition|;
name|i
operator|++
control|)
block|{
try|try
init|(
specifier|final
name|TestIteration
name|iteration
init|=
operator|new
name|TestIteration
argument_list|()
init|)
block|{
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|AtomicInteger
name|finalFailures
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|Throwable
argument_list|>
name|finalFailure
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|TestResponse
argument_list|>
name|response
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
name|ActionListener
argument_list|<
name|TestResponse
argument_list|>
name|actionListener
init|=
operator|new
name|ActionListener
argument_list|<
name|TestResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|TestResponse
name|testResponse
parameter_list|)
block|{
name|response
operator|.
name|set
argument_list|(
name|testResponse
argument_list|)
expr_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|finalFailures
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|finalFailure
operator|.
name|set
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
specifier|final
name|AtomicInteger
name|preSendFailures
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
name|Action
name|action
init|=
name|randomFrom
argument_list|(
name|Action
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|action
operator|.
name|execute
argument_list|(
name|iteration
argument_list|,
name|actionListener
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|latch
operator|.
name|await
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|//there can be only either one failure that causes the request to fail straightaway or success
name|assertThat
argument_list|(
name|preSendFailures
operator|.
name|get
argument_list|()
operator|+
name|iteration
operator|.
name|transport
operator|.
name|failures
argument_list|()
operator|+
name|iteration
operator|.
name|transport
operator|.
name|successes
argument_list|()
argument_list|,
name|lessThanOrEqualTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|iteration
operator|.
name|transport
operator|.
name|successes
argument_list|()
operator|==
literal|1
condition|)
block|{
name|assertThat
argument_list|(
name|finalFailures
operator|.
name|get
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|finalFailure
operator|.
name|get
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|get
argument_list|()
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|finalFailures
operator|.
name|get
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|finalFailure
operator|.
name|get
argument_list|()
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|get
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|preSendFailures
operator|.
name|get
argument_list|()
operator|==
literal|0
operator|&&
name|iteration
operator|.
name|transport
operator|.
name|failures
argument_list|()
operator|==
literal|0
condition|)
block|{
name|assertThat
argument_list|(
name|finalFailure
operator|.
name|get
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|NoNodeAvailableException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|assertThat
argument_list|(
name|iteration
operator|.
name|transport
operator|.
name|triedNodes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|lessThanOrEqualTo
argument_list|(
name|iteration
operator|.
name|nodesCount
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|iteration
operator|.
name|transport
operator|.
name|triedNodes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|iteration
operator|.
name|transport
operator|.
name|connectTransportExceptions
argument_list|()
operator|+
name|iteration
operator|.
name|transport
operator|.
name|failures
argument_list|()
operator|+
name|iteration
operator|.
name|transport
operator|.
name|successes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testSyncFailures
specifier|public
name|void
name|testSyncFailures
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|int
name|iters
init|=
name|iterations
argument_list|(
literal|10
argument_list|,
literal|100
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iters
condition|;
name|i
operator|++
control|)
block|{
try|try
init|(
specifier|final
name|TestIteration
name|iteration
init|=
operator|new
name|TestIteration
argument_list|()
init|)
block|{
name|TestResponse
name|testResponse
init|=
literal|null
decl_stmt|;
name|Throwable
name|finalFailure
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Action
name|action
init|=
name|randomFrom
argument_list|(
name|Action
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|ActionFuture
argument_list|<
name|TestResponse
argument_list|>
name|future
init|=
name|action
operator|.
name|execute
argument_list|(
name|iteration
argument_list|)
decl_stmt|;
name|testResponse
operator|=
name|future
operator|.
name|actionGet
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|finalFailure
operator|=
name|t
expr_stmt|;
block|}
comment|//there can be only either one failure that causes the request to fail straightaway or success
name|assertThat
argument_list|(
name|iteration
operator|.
name|transport
operator|.
name|failures
argument_list|()
operator|+
name|iteration
operator|.
name|transport
operator|.
name|successes
argument_list|()
argument_list|,
name|lessThanOrEqualTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|iteration
operator|.
name|transport
operator|.
name|successes
argument_list|()
operator|==
literal|1
condition|)
block|{
name|assertThat
argument_list|(
name|finalFailure
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|testResponse
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|testResponse
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|finalFailure
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|iteration
operator|.
name|transport
operator|.
name|failures
argument_list|()
operator|==
literal|0
condition|)
block|{
name|assertThat
argument_list|(
name|finalFailure
argument_list|,
name|instanceOf
argument_list|(
name|NoNodeAvailableException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|assertThat
argument_list|(
name|iteration
operator|.
name|transport
operator|.
name|triedNodes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|lessThanOrEqualTo
argument_list|(
name|iteration
operator|.
name|nodesCount
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|iteration
operator|.
name|transport
operator|.
name|triedNodes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|iteration
operator|.
name|transport
operator|.
name|connectTransportExceptions
argument_list|()
operator|+
name|iteration
operator|.
name|transport
operator|.
name|failures
argument_list|()
operator|+
name|iteration
operator|.
name|transport
operator|.
name|successes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|enum|Action
specifier|private
specifier|static
enum|enum
name|Action
block|{
DECL|enum constant|TEST
name|TEST
block|{
annotation|@
name|Override
name|ActionFuture
argument_list|<
name|TestResponse
argument_list|>
name|execute
parameter_list|(
name|TestIteration
name|iteration
parameter_list|)
block|{
return|return
name|iteration
operator|.
name|internalTransportClient
operator|.
name|execute
argument_list|(
name|TestAction
operator|.
name|INSTANCE
argument_list|,
operator|new
name|TestRequest
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
name|void
name|execute
parameter_list|(
name|TestIteration
name|iteration
parameter_list|,
name|ActionListener
argument_list|<
name|TestResponse
argument_list|>
name|listener
parameter_list|)
block|{
name|iteration
operator|.
name|internalTransportClient
operator|.
name|execute
argument_list|(
name|TestAction
operator|.
name|INSTANCE
argument_list|,
operator|new
name|TestRequest
argument_list|()
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
block|}
block|,
DECL|enum constant|INDICES_ADMIN
name|INDICES_ADMIN
block|{
annotation|@
name|Override
name|ActionFuture
argument_list|<
name|TestResponse
argument_list|>
name|execute
parameter_list|(
name|TestIteration
name|iteration
parameter_list|)
block|{
return|return
name|iteration
operator|.
name|internalTransportClient
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|execute
argument_list|(
name|IndicesAdminTestAction
operator|.
name|INSTANCE
argument_list|,
operator|new
name|TestRequest
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
name|void
name|execute
parameter_list|(
name|TestIteration
name|iteration
parameter_list|,
name|ActionListener
argument_list|<
name|TestResponse
argument_list|>
name|listener
parameter_list|)
block|{
name|iteration
operator|.
name|internalTransportClient
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|execute
argument_list|(
name|IndicesAdminTestAction
operator|.
name|INSTANCE
argument_list|,
operator|new
name|TestRequest
argument_list|()
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
block|}
block|,
DECL|enum constant|CLUSTER_ADMIN
name|CLUSTER_ADMIN
block|{
annotation|@
name|Override
name|ActionFuture
argument_list|<
name|TestResponse
argument_list|>
name|execute
parameter_list|(
name|TestIteration
name|iteration
parameter_list|)
block|{
return|return
name|iteration
operator|.
name|internalTransportClient
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|execute
argument_list|(
name|ClusterAdminTestAction
operator|.
name|INSTANCE
argument_list|,
operator|new
name|TestRequest
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
name|void
name|execute
parameter_list|(
name|TestIteration
name|iteration
parameter_list|,
name|ActionListener
argument_list|<
name|TestResponse
argument_list|>
name|listener
parameter_list|)
block|{
name|iteration
operator|.
name|internalTransportClient
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|execute
argument_list|(
name|ClusterAdminTestAction
operator|.
name|INSTANCE
argument_list|,
operator|new
name|TestRequest
argument_list|()
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
block|}
block|;
DECL|method|execute
specifier|abstract
name|ActionFuture
argument_list|<
name|TestResponse
argument_list|>
name|execute
parameter_list|(
name|TestIteration
name|iteration
parameter_list|)
function_decl|;
DECL|method|execute
specifier|abstract
name|void
name|execute
parameter_list|(
name|TestIteration
name|iteration
parameter_list|,
name|ActionListener
argument_list|<
name|TestResponse
argument_list|>
name|listener
parameter_list|)
function_decl|;
block|}
DECL|class|TestRequest
specifier|private
specifier|static
class|class
name|TestRequest
extends|extends
name|ActionRequest
block|{
annotation|@
name|Override
DECL|method|validate
specifier|public
name|ActionRequestValidationException
name|validate
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
DECL|class|TestResponse
specifier|private
specifier|static
class|class
name|TestResponse
extends|extends
name|ActionResponse
block|{      }
DECL|class|TestAction
specifier|private
specifier|static
class|class
name|TestAction
extends|extends
name|ClientAction
argument_list|<
name|TestRequest
argument_list|,
name|TestResponse
argument_list|,
name|TestRequestBuilder
argument_list|>
block|{
DECL|field|NAME
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"test-action"
decl_stmt|;
DECL|field|INSTANCE
specifier|static
specifier|final
name|TestAction
name|INSTANCE
init|=
operator|new
name|TestAction
argument_list|(
name|NAME
argument_list|)
decl_stmt|;
DECL|method|TestAction
specifier|private
name|TestAction
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|newRequestBuilder
specifier|public
name|TestRequestBuilder
name|newRequestBuilder
parameter_list|(
name|Client
name|client
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|newResponse
specifier|public
name|TestResponse
name|newResponse
parameter_list|()
block|{
return|return
operator|new
name|TestResponse
argument_list|()
return|;
block|}
block|}
DECL|class|TestRequestBuilder
specifier|private
specifier|static
class|class
name|TestRequestBuilder
extends|extends
name|ActionRequestBuilder
argument_list|<
name|TestRequest
argument_list|,
name|TestResponse
argument_list|,
name|TestRequestBuilder
argument_list|,
name|Client
argument_list|>
block|{
DECL|method|TestRequestBuilder
specifier|protected
name|TestRequestBuilder
parameter_list|(
name|Client
name|client
parameter_list|,
name|TestRequest
name|request
parameter_list|)
block|{
name|super
argument_list|(
name|client
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doExecute
specifier|protected
name|void
name|doExecute
parameter_list|(
name|ActionListener
argument_list|<
name|TestResponse
argument_list|>
name|listener
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
DECL|class|IndicesAdminTestAction
specifier|private
specifier|static
class|class
name|IndicesAdminTestAction
extends|extends
name|IndicesAction
argument_list|<
name|TestRequest
argument_list|,
name|TestResponse
argument_list|,
name|IndicesAdminTestRequestBuilder
argument_list|>
block|{
DECL|field|NAME
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"test-indices-action"
decl_stmt|;
DECL|field|INSTANCE
specifier|static
specifier|final
name|IndicesAdminTestAction
name|INSTANCE
init|=
operator|new
name|IndicesAdminTestAction
argument_list|(
name|NAME
argument_list|)
decl_stmt|;
DECL|method|IndicesAdminTestAction
specifier|private
name|IndicesAdminTestAction
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|newRequestBuilder
specifier|public
name|IndicesAdminTestRequestBuilder
name|newRequestBuilder
parameter_list|(
name|IndicesAdminClient
name|client
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|newResponse
specifier|public
name|TestResponse
name|newResponse
parameter_list|()
block|{
return|return
operator|new
name|TestResponse
argument_list|()
return|;
block|}
block|}
DECL|class|IndicesAdminTestRequestBuilder
specifier|private
specifier|static
class|class
name|IndicesAdminTestRequestBuilder
extends|extends
name|ActionRequestBuilder
argument_list|<
name|TestRequest
argument_list|,
name|TestResponse
argument_list|,
name|IndicesAdminTestRequestBuilder
argument_list|,
name|IndicesAdminClient
argument_list|>
block|{
DECL|method|IndicesAdminTestRequestBuilder
specifier|protected
name|IndicesAdminTestRequestBuilder
parameter_list|(
name|IndicesAdminClient
name|client
parameter_list|,
name|TestRequest
name|request
parameter_list|)
block|{
name|super
argument_list|(
name|client
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doExecute
specifier|protected
name|void
name|doExecute
parameter_list|(
name|ActionListener
argument_list|<
name|TestResponse
argument_list|>
name|listener
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
DECL|class|ClusterAdminTestAction
specifier|private
specifier|static
class|class
name|ClusterAdminTestAction
extends|extends
name|ClusterAction
argument_list|<
name|TestRequest
argument_list|,
name|TestResponse
argument_list|,
name|ClusterAdminTestRequestBuilder
argument_list|>
block|{
DECL|field|NAME
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"test-cluster-action"
decl_stmt|;
DECL|field|INSTANCE
specifier|static
specifier|final
name|ClusterAdminTestAction
name|INSTANCE
init|=
operator|new
name|ClusterAdminTestAction
argument_list|(
name|NAME
argument_list|)
decl_stmt|;
DECL|method|ClusterAdminTestAction
specifier|private
name|ClusterAdminTestAction
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|newRequestBuilder
specifier|public
name|ClusterAdminTestRequestBuilder
name|newRequestBuilder
parameter_list|(
name|ClusterAdminClient
name|client
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|newResponse
specifier|public
name|TestResponse
name|newResponse
parameter_list|()
block|{
return|return
operator|new
name|TestResponse
argument_list|()
return|;
block|}
block|}
DECL|class|ClusterAdminTestRequestBuilder
specifier|private
specifier|static
class|class
name|ClusterAdminTestRequestBuilder
extends|extends
name|ActionRequestBuilder
argument_list|<
name|TestRequest
argument_list|,
name|TestResponse
argument_list|,
name|ClusterAdminTestRequestBuilder
argument_list|,
name|ClusterAdminClient
argument_list|>
block|{
DECL|method|ClusterAdminTestRequestBuilder
specifier|protected
name|ClusterAdminTestRequestBuilder
parameter_list|(
name|ClusterAdminClient
name|client
parameter_list|,
name|TestRequest
name|request
parameter_list|)
block|{
name|super
argument_list|(
name|client
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doExecute
specifier|protected
name|void
name|doExecute
parameter_list|(
name|ActionListener
argument_list|<
name|TestResponse
argument_list|>
name|listener
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
block|}
end_class

end_unit

