begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch
package|package
name|org
operator|.
name|elasticsearch
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|Lucene
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|Version
operator|.
name|V_0_20_0
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|Version
operator|.
name|V_0_90_0
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|sameInstance
import|;
end_import

begin_class
DECL|class|VersionTests
specifier|public
class|class
name|VersionTests
extends|extends
name|ElasticsearchTestCase
block|{
annotation|@
name|Test
DECL|method|testVersions
specifier|public
name|void
name|testVersions
parameter_list|()
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
name|V_0_20_0
operator|.
name|before
argument_list|(
name|V_0_90_0
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|V_0_20_0
operator|.
name|before
argument_list|(
name|V_0_20_0
argument_list|)
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|V_0_90_0
operator|.
name|before
argument_list|(
name|V_0_20_0
argument_list|)
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|V_0_20_0
operator|.
name|onOrBefore
argument_list|(
name|V_0_90_0
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|V_0_20_0
operator|.
name|onOrBefore
argument_list|(
name|V_0_20_0
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|V_0_90_0
operator|.
name|onOrBefore
argument_list|(
name|V_0_20_0
argument_list|)
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|V_0_20_0
operator|.
name|after
argument_list|(
name|V_0_90_0
argument_list|)
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|V_0_20_0
operator|.
name|after
argument_list|(
name|V_0_20_0
argument_list|)
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|V_0_90_0
operator|.
name|after
argument_list|(
name|V_0_20_0
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|V_0_20_0
operator|.
name|onOrAfter
argument_list|(
name|V_0_90_0
argument_list|)
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|V_0_20_0
operator|.
name|onOrAfter
argument_list|(
name|V_0_20_0
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|V_0_90_0
operator|.
name|onOrAfter
argument_list|(
name|V_0_20_0
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testVersionConstantPresent
specifier|public
name|void
name|testVersionConstantPresent
parameter_list|()
block|{
name|assertThat
argument_list|(
name|Version
operator|.
name|CURRENT
argument_list|,
name|sameInstance
argument_list|(
name|Version
operator|.
name|fromId
argument_list|(
name|Version
operator|.
name|CURRENT
operator|.
name|id
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Version
operator|.
name|CURRENT
operator|.
name|luceneVersion
operator|.
name|ordinal
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Version
operator|.
name|LUCENE_CURRENT
operator|.
name|ordinal
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|int
name|iters
init|=
name|scaledRandomIntBetween
argument_list|(
literal|20
argument_list|,
literal|100
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iters
condition|;
name|i
operator|++
control|)
block|{
name|Version
name|version
init|=
name|randomVersion
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|version
argument_list|,
name|sameInstance
argument_list|(
name|Version
operator|.
name|fromId
argument_list|(
name|version
operator|.
name|id
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|version
operator|.
name|luceneVersion
argument_list|,
name|sameInstance
argument_list|(
name|Version
operator|.
name|fromId
argument_list|(
name|version
operator|.
name|id
argument_list|)
operator|.
name|luceneVersion
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testCURRENTIsLatest
specifier|public
name|void
name|testCURRENTIsLatest
parameter_list|()
block|{
specifier|final
name|int
name|iters
init|=
name|scaledRandomIntBetween
argument_list|(
literal|100
argument_list|,
literal|1000
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iters
condition|;
name|i
operator|++
control|)
block|{
name|Version
name|version
init|=
name|randomVersion
argument_list|()
decl_stmt|;
if|if
condition|(
name|version
operator|!=
name|Version
operator|.
name|CURRENT
condition|)
block|{
name|assertThat
argument_list|(
literal|"Version: "
operator|+
name|version
operator|+
literal|" should be before: "
operator|+
name|Version
operator|.
name|CURRENT
operator|+
literal|" but wasn't"
argument_list|,
name|version
operator|.
name|before
argument_list|(
name|Version
operator|.
name|CURRENT
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testVersionFromString
specifier|public
name|void
name|testVersionFromString
parameter_list|()
block|{
specifier|final
name|int
name|iters
init|=
name|scaledRandomIntBetween
argument_list|(
literal|100
argument_list|,
literal|1000
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iters
condition|;
name|i
operator|++
control|)
block|{
name|Version
name|version
init|=
name|randomVersion
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|Version
operator|.
name|fromString
argument_list|(
name|version
operator|.
name|number
argument_list|()
argument_list|)
argument_list|,
name|sameInstance
argument_list|(
name|version
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|testTooLongVersionFromString
specifier|public
name|void
name|testTooLongVersionFromString
parameter_list|()
block|{
name|Version
operator|.
name|fromString
argument_list|(
literal|"1.0.0.1.3"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|testTooShortVersionFromString
specifier|public
name|void
name|testTooShortVersionFromString
parameter_list|()
block|{
name|Version
operator|.
name|fromString
argument_list|(
literal|"1.0"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|testWrongVersionFromString
specifier|public
name|void
name|testWrongVersionFromString
parameter_list|()
block|{
name|Version
operator|.
name|fromString
argument_list|(
literal|"WRONG.VERSION"
argument_list|)
expr_stmt|;
block|}
DECL|method|testVersion
specifier|public
name|void
name|testVersion
parameter_list|()
block|{
comment|// test scenario
name|assertEquals
argument_list|(
name|Version
operator|.
name|CURRENT
argument_list|,
name|Version
operator|.
name|indexCreated
argument_list|(
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// an actual index has a IndexMetaData.SETTING_UUID
specifier|final
name|Version
name|version
init|=
name|randomFrom
argument_list|(
name|Version
operator|.
name|V_0_18_0
argument_list|,
name|Version
operator|.
name|V_0_90_13
argument_list|,
name|Version
operator|.
name|V_1_3_0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|version
argument_list|,
name|Version
operator|.
name|indexCreated
argument_list|(
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_UUID
argument_list|,
literal|"foo"
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_VERSION_CREATED
argument_list|,
name|version
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMinCompatVersion
specifier|public
name|void
name|testMinCompatVersion
parameter_list|()
block|{
name|assertThat
argument_list|(
name|Version
operator|.
name|V_2_0_0
operator|.
name|minimumCompatibilityVersion
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|Version
operator|.
name|V_2_0_0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Version
operator|.
name|V_1_3_0
operator|.
name|minimumCompatibilityVersion
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|Version
operator|.
name|V_1_0_0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Version
operator|.
name|V_1_2_0
operator|.
name|minimumCompatibilityVersion
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|Version
operator|.
name|V_1_0_0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Version
operator|.
name|V_1_2_3
operator|.
name|minimumCompatibilityVersion
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|Version
operator|.
name|V_1_0_0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Version
operator|.
name|V_1_0_0_RC2
operator|.
name|minimumCompatibilityVersion
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|Version
operator|.
name|V_1_0_0_RC2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|parseLenient
specifier|public
name|void
name|parseLenient
parameter_list|()
block|{
name|int
name|numIters
init|=
name|randomIntBetween
argument_list|(
literal|10
argument_list|,
literal|100
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numIters
condition|;
name|i
operator|++
control|)
block|{
name|Version
name|version
init|=
name|randomVersion
argument_list|(
name|getRandom
argument_list|()
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Version
name|luceneVersion
init|=
name|version
operator|.
name|luceneVersion
decl_stmt|;
name|String
name|string
init|=
name|luceneVersion
operator|.
name|name
argument_list|()
operator|.
name|toUpperCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
operator|.
name|replaceFirst
argument_list|(
literal|"^LUCENE_(\\d+)_(\\d+)$"
argument_list|,
literal|"$1.$2"
argument_list|)
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|string
operator|=
name|string
operator|+
literal|"."
operator|+
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|100
argument_list|)
expr_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|string
operator|=
name|string
operator|+
literal|"."
operator|+
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|100
argument_list|)
expr_stmt|;
block|}
block|}
name|assertThat
argument_list|(
name|luceneVersion
argument_list|,
name|Matchers
operator|.
name|equalTo
argument_list|(
name|Lucene
operator|.
name|parseVersionLenient
argument_list|(
name|string
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

