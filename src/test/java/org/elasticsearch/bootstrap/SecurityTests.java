begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.bootstrap
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|bootstrap
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_class
DECL|class|SecurityTests
specifier|public
class|class
name|SecurityTests
extends|extends
name|ElasticsearchTestCase
block|{
comment|/** backslash escaping (e.g. windows paths) */
DECL|method|testEncode
specifier|public
name|void
name|testEncode
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"c:\\\\foobar"
argument_list|,
name|Security
operator|.
name|encode
argument_list|(
literal|"c:\\foobar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** test template processing */
DECL|method|testTemplateProcessing
specifier|public
name|void
name|testTemplateProcessing
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|path
init|=
name|createTempDir
argument_list|()
decl_stmt|;
name|byte
name|results
index|[]
init|=
name|Security
operator|.
name|createPermissions
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|path
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|unicode
init|=
operator|new
name|String
argument_list|(
name|results
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
comment|// try not to make this test too fragile or useless
name|assertTrue
argument_list|(
name|unicode
operator|.
name|contains
argument_list|(
literal|"grant {"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|unicode
operator|.
name|contains
argument_list|(
name|Security
operator|.
name|encode
argument_list|(
name|path
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|unicode
operator|.
name|contains
argument_list|(
literal|"read"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|unicode
operator|.
name|contains
argument_list|(
literal|"write"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

