begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|ESLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|Loggers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|FilterBuilders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchIntegrationTest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|TermsFilterParser
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertAcked
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertHitCount
import|;
end_import

begin_class
DECL|class|TermsFilterIntegrationTests
specifier|public
class|class
name|TermsFilterIntegrationTests
extends|extends
name|ElasticsearchIntegrationTest
block|{
DECL|field|logger
specifier|private
specifier|final
name|ESLogger
name|logger
init|=
name|Loggers
operator|.
name|getLogger
argument_list|(
name|TermsFilterIntegrationTests
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|testExecution
specifier|public
name|void
name|testExecution
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type"
argument_list|,
literal|"f"
argument_list|,
literal|"type=string"
argument_list|)
argument_list|)
expr_stmt|;
name|ensureYellow
argument_list|()
expr_stmt|;
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"f"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|,
literal|"c"
block|}
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"f"
argument_list|,
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|boolean
name|cache
range|:
operator|new
name|boolean
index|[]
block|{
literal|false
block|,
literal|true
block|}
control|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"cache="
operator|+
name|cache
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|execution
range|:
name|Arrays
operator|.
name|asList
argument_list|(
name|EXECUTION_VALUE_PLAIN
argument_list|,
name|EXECUTION_VALUE_FIELDDATA
argument_list|,
name|EXECUTION_VALUE_BOOL
argument_list|,
name|EXECUTION_VALUE_BOOL_NOCACHE
argument_list|,
name|EXECUTION_VALUE_OR
argument_list|,
name|EXECUTION_VALUE_OR_NOCACHE
argument_list|)
control|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Execution="
operator|+
name|execution
argument_list|)
expr_stmt|;
name|assertHitCount
argument_list|(
name|client
argument_list|()
operator|.
name|prepareCount
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|filteredQuery
argument_list|(
name|QueryBuilders
operator|.
name|matchAllQuery
argument_list|()
argument_list|,
name|FilterBuilders
operator|.
name|termsFilter
argument_list|(
literal|"f"
argument_list|,
literal|"a"
argument_list|,
literal|"b"
argument_list|)
operator|.
name|execution
argument_list|(
name|execution
argument_list|)
operator|.
name|cache
argument_list|(
name|cache
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
literal|2L
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|execution
range|:
name|Arrays
operator|.
name|asList
argument_list|(
name|EXECUTION_VALUE_AND
argument_list|,
name|EXECUTION_VALUE_AND_NOCACHE
argument_list|)
control|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Execution="
operator|+
name|execution
argument_list|)
expr_stmt|;
name|assertHitCount
argument_list|(
name|client
argument_list|()
operator|.
name|prepareCount
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|filteredQuery
argument_list|(
name|QueryBuilders
operator|.
name|matchAllQuery
argument_list|()
argument_list|,
name|FilterBuilders
operator|.
name|termsFilter
argument_list|(
literal|"f"
argument_list|,
literal|"a"
argument_list|,
literal|"b"
argument_list|)
operator|.
name|execution
argument_list|(
name|execution
argument_list|)
operator|.
name|cache
argument_list|(
name|cache
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

