begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.search.child
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|search
operator|.
name|child
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSetIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|ScoreDoc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TopDocs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|FixedBitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|mapping
operator|.
name|put
operator|.
name|PutMappingRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|compress
operator|.
name|CompressedString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MapperService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|internal
operator|.
name|UidFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|service
operator|.
name|IndexService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|SearchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchSingleNodeLuceneTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|Description
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|StringDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_class
annotation|@
name|Ignore
annotation|@
name|LuceneTestCase
operator|.
name|SuppressCodecs
argument_list|(
name|value
operator|=
block|{
literal|"Lucene40"
block|,
literal|"Lucene3x"
block|}
argument_list|)
DECL|class|AbstractChildTests
specifier|public
specifier|abstract
class|class
name|AbstractChildTests
extends|extends
name|ElasticsearchSingleNodeLuceneTestCase
block|{
DECL|method|createSearchContext
specifier|static
name|SearchContext
name|createSearchContext
parameter_list|(
name|String
name|indexName
parameter_list|,
name|String
name|parentType
parameter_list|,
name|String
name|childType
parameter_list|)
throws|throws
name|IOException
block|{
name|IndexService
name|indexService
init|=
name|createIndex
argument_list|(
name|indexName
argument_list|)
decl_stmt|;
name|MapperService
name|mapperService
init|=
name|indexService
operator|.
name|mapperService
argument_list|()
decl_stmt|;
name|mapperService
operator|.
name|merge
argument_list|(
name|childType
argument_list|,
operator|new
name|CompressedString
argument_list|(
name|PutMappingRequest
operator|.
name|buildFromSimplifiedDef
argument_list|(
name|childType
argument_list|,
literal|"_parent"
argument_list|,
literal|"type="
operator|+
name|parentType
argument_list|)
operator|.
name|string
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|createSearchContext
argument_list|(
name|indexService
argument_list|)
return|;
block|}
DECL|method|assertBitSet
specifier|static
name|void
name|assertBitSet
parameter_list|(
name|FixedBitSet
name|actual
parameter_list|,
name|FixedBitSet
name|expected
parameter_list|,
name|IndexSearcher
name|searcher
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|actual
operator|.
name|equals
argument_list|(
name|expected
argument_list|)
condition|)
block|{
name|Description
name|description
init|=
operator|new
name|StringDescription
argument_list|()
decl_stmt|;
name|description
operator|.
name|appendText
argument_list|(
name|reason
argument_list|(
name|actual
argument_list|,
name|expected
argument_list|,
name|searcher
argument_list|)
argument_list|)
expr_stmt|;
name|description
operator|.
name|appendText
argument_list|(
literal|"\nExpected: "
argument_list|)
expr_stmt|;
name|description
operator|.
name|appendValue
argument_list|(
name|expected
argument_list|)
expr_stmt|;
name|description
operator|.
name|appendText
argument_list|(
literal|"\n     got: "
argument_list|)
expr_stmt|;
name|description
operator|.
name|appendValue
argument_list|(
name|actual
argument_list|)
expr_stmt|;
name|description
operator|.
name|appendText
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|java
operator|.
name|lang
operator|.
name|AssertionError
argument_list|(
name|description
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
DECL|method|reason
specifier|static
name|String
name|reason
parameter_list|(
name|FixedBitSet
name|actual
parameter_list|,
name|FixedBitSet
name|expected
parameter_list|,
name|IndexSearcher
name|indexSearcher
parameter_list|)
throws|throws
name|IOException
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"expected cardinality:"
argument_list|)
operator|.
name|append
argument_list|(
name|expected
operator|.
name|cardinality
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
name|DocIdSetIterator
name|iterator
init|=
name|expected
operator|.
name|iterator
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|doc
init|=
name|iterator
operator|.
name|nextDoc
argument_list|()
init|;
name|doc
operator|!=
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|;
name|doc
operator|=
name|iterator
operator|.
name|nextDoc
argument_list|()
control|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"Expected doc["
argument_list|)
operator|.
name|append
argument_list|(
name|doc
argument_list|)
operator|.
name|append
argument_list|(
literal|"] with id value "
argument_list|)
operator|.
name|append
argument_list|(
name|indexSearcher
operator|.
name|doc
argument_list|(
name|doc
argument_list|)
operator|.
name|get
argument_list|(
name|UidFieldMapper
operator|.
name|NAME
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|append
argument_list|(
literal|"actual cardinality: "
argument_list|)
operator|.
name|append
argument_list|(
name|actual
operator|.
name|cardinality
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
name|iterator
operator|=
name|actual
operator|.
name|iterator
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|doc
init|=
name|iterator
operator|.
name|nextDoc
argument_list|()
init|;
name|doc
operator|!=
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|;
name|doc
operator|=
name|iterator
operator|.
name|nextDoc
argument_list|()
control|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"Actual doc["
argument_list|)
operator|.
name|append
argument_list|(
name|doc
argument_list|)
operator|.
name|append
argument_list|(
literal|"] with id value "
argument_list|)
operator|.
name|append
argument_list|(
name|indexSearcher
operator|.
name|doc
argument_list|(
name|doc
argument_list|)
operator|.
name|get
argument_list|(
name|UidFieldMapper
operator|.
name|NAME
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|assertTopDocs
specifier|static
name|void
name|assertTopDocs
parameter_list|(
name|TopDocs
name|actual
parameter_list|,
name|TopDocs
name|expected
parameter_list|)
block|{
name|assertThat
argument_list|(
literal|"actual.totalHits != expected.totalHits"
argument_list|,
name|actual
operator|.
name|totalHits
argument_list|,
name|equalTo
argument_list|(
name|expected
operator|.
name|totalHits
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"actual.getMaxScore() != expected.getMaxScore()"
argument_list|,
name|actual
operator|.
name|getMaxScore
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expected
operator|.
name|getMaxScore
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"actual.scoreDocs.length != expected.scoreDocs.length"
argument_list|,
name|actual
operator|.
name|scoreDocs
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
name|actual
operator|.
name|scoreDocs
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|actual
operator|.
name|scoreDocs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|ScoreDoc
name|actualHit
init|=
name|actual
operator|.
name|scoreDocs
index|[
name|i
index|]
decl_stmt|;
name|ScoreDoc
name|expectedHit
init|=
name|expected
operator|.
name|scoreDocs
index|[
name|i
index|]
decl_stmt|;
name|assertThat
argument_list|(
literal|"actualHit.doc != expectedHit.doc"
argument_list|,
name|actualHit
operator|.
name|doc
argument_list|,
name|equalTo
argument_list|(
name|expectedHit
operator|.
name|doc
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"actualHit.score != expectedHit.score"
argument_list|,
name|actualHit
operator|.
name|score
argument_list|,
name|equalTo
argument_list|(
name|expectedHit
operator|.
name|score
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

