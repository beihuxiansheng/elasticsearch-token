begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.mapper.xcontent
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|xcontent
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|DocumentMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|DocumentMapperParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|attachment
operator|.
name|AttachmentMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|Streams
operator|.
name|copyToBytesFromClasspath
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|Streams
operator|.
name|copyToStringFromClasspath
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
operator|.
name|jsonBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|plugin
operator|.
name|mapper
operator|.
name|attachments
operator|.
name|tika
operator|.
name|TikaInstance
operator|.
name|tika
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|isEmptyOrNullString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|not
import|;
end_import

begin_comment
comment|/**  * Test for different documents  */
end_comment

begin_class
DECL|class|VariousDocTest
specifier|public
class|class
name|VariousDocTest
extends|extends
name|ElasticsearchTestCase
block|{
comment|/**      * Test for https://github.com/elasticsearch/elasticsearch-mapper-attachments/issues/104      */
annotation|@
name|Test
DECL|method|testWordDocxDocument104
specifier|public
name|void
name|testWordDocxDocument104
parameter_list|()
throws|throws
name|Exception
block|{
name|testTika
argument_list|(
literal|"issue-104.docx"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|testMapper
argument_list|(
literal|"issue-104.docx"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test for encrypted PDF      */
annotation|@
name|Test
DECL|method|testEncryptedPDFDocument
specifier|public
name|void
name|testEncryptedPDFDocument
parameter_list|()
throws|throws
name|Exception
block|{
name|testTika
argument_list|(
literal|"encrypted.pdf"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// TODO Remove when this will be fixed in Tika. See https://issues.apache.org/jira/browse/TIKA-1548
name|System
operator|.
name|clearProperty
argument_list|(
literal|"sun.font.fontmanager"
argument_list|)
expr_stmt|;
name|testMapper
argument_list|(
literal|"encrypted.pdf"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test for HTML      */
annotation|@
name|Test
DECL|method|testHtmlDocument
specifier|public
name|void
name|testHtmlDocument
parameter_list|()
throws|throws
name|Exception
block|{
name|testTika
argument_list|(
literal|"htmlWithEmptyDateMeta.html"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|testMapper
argument_list|(
literal|"htmlWithEmptyDateMeta.html"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test for XHTML      */
annotation|@
name|Test
DECL|method|testXHtmlDocument
specifier|public
name|void
name|testXHtmlDocument
parameter_list|()
throws|throws
name|Exception
block|{
name|testTika
argument_list|(
literal|"testXHTML.html"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|testMapper
argument_list|(
literal|"testXHTML.html"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test for TXT      */
annotation|@
name|Test
DECL|method|testTxtDocument
specifier|public
name|void
name|testTxtDocument
parameter_list|()
throws|throws
name|Exception
block|{
name|testTika
argument_list|(
literal|"text-in-english.txt"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|testMapper
argument_list|(
literal|"text-in-english.txt"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|testTika
specifier|protected
name|void
name|testTika
parameter_list|(
name|String
name|filename
parameter_list|,
name|boolean
name|errorExpected
parameter_list|)
block|{
try|try
init|(
name|InputStream
name|is
init|=
name|VariousDocTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
name|filename
argument_list|)
init|)
block|{
name|String
name|parsedContent
init|=
name|tika
argument_list|()
operator|.
name|parseToString
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|parsedContent
argument_list|,
name|not
argument_list|(
name|isEmptyOrNullString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"extracted content: {}"
argument_list|,
name|parsedContent
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|errorExpected
condition|)
block|{
name|fail
argument_list|(
literal|"exception caught: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testMapper
specifier|protected
name|void
name|testMapper
parameter_list|(
name|String
name|filename
parameter_list|,
name|boolean
name|errorExpected
parameter_list|)
throws|throws
name|IOException
block|{
name|DocumentMapperParser
name|mapperParser
init|=
name|MapperTestUtils
operator|.
name|newMapperParser
argument_list|(
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|mapperParser
operator|.
name|putTypeParser
argument_list|(
name|AttachmentMapper
operator|.
name|CONTENT_TYPE
argument_list|,
operator|new
name|AttachmentMapper
operator|.
name|TypeParser
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|mapping
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/mapper/xcontent/test-mapping.json"
argument_list|)
decl_stmt|;
name|DocumentMapper
name|docMapper
init|=
name|mapperParser
operator|.
name|parse
argument_list|(
name|mapping
argument_list|)
decl_stmt|;
name|byte
index|[]
name|html
init|=
name|copyToBytesFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/mapper/xcontent/"
operator|+
name|filename
argument_list|)
decl_stmt|;
name|BytesReference
name|json
init|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"_id"
argument_list|,
literal|1
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"file"
argument_list|)
operator|.
name|field
argument_list|(
literal|"_name"
argument_list|,
name|filename
argument_list|)
operator|.
name|field
argument_list|(
literal|"_content"
argument_list|,
name|html
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|bytes
argument_list|()
decl_stmt|;
name|ParseContext
operator|.
name|Document
name|doc
init|=
name|docMapper
operator|.
name|parse
argument_list|(
name|json
argument_list|)
operator|.
name|rootDoc
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|errorExpected
condition|)
block|{
name|assertThat
argument_list|(
name|doc
operator|.
name|get
argument_list|(
name|docMapper
operator|.
name|mappers
argument_list|()
operator|.
name|smartName
argument_list|(
literal|"file"
argument_list|)
operator|.
name|mapper
argument_list|()
operator|.
name|names
argument_list|()
operator|.
name|indexName
argument_list|()
argument_list|)
argument_list|,
name|not
argument_list|(
name|isEmptyOrNullString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"extracted content: {}"
argument_list|,
name|doc
operator|.
name|get
argument_list|(
name|docMapper
operator|.
name|mappers
argument_list|()
operator|.
name|smartName
argument_list|(
literal|"file"
argument_list|)
operator|.
name|mapper
argument_list|()
operator|.
name|names
argument_list|()
operator|.
name|indexName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

