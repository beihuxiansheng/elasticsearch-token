begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.mapper
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|HashedBytesArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|MatcherAssert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_class
DECL|class|UidTests
specifier|public
class|class
name|UidTests
block|{
annotation|@
name|Test
DECL|method|testCreateAndSplitId
specifier|public
name|void
name|testCreateAndSplitId
parameter_list|()
block|{
name|BytesRef
name|createUid
init|=
name|Uid
operator|.
name|createUidAsBytes
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
name|HashedBytesArray
index|[]
name|splitUidIntoTypeAndId
init|=
name|Uid
operator|.
name|splitUidIntoTypeAndId
argument_list|(
name|createUid
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
literal|"foo"
argument_list|,
name|equalTo
argument_list|(
name|splitUidIntoTypeAndId
index|[
literal|0
index|]
operator|.
name|toUtf8
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"bar"
argument_list|,
name|equalTo
argument_list|(
name|splitUidIntoTypeAndId
index|[
literal|1
index|]
operator|.
name|toUtf8
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// split also with an offset
name|BytesRef
name|ref
init|=
operator|new
name|BytesRef
argument_list|(
name|createUid
operator|.
name|length
operator|+
literal|10
argument_list|)
decl_stmt|;
name|ref
operator|.
name|offset
operator|=
literal|9
expr_stmt|;
name|ref
operator|.
name|length
operator|=
name|createUid
operator|.
name|length
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|createUid
operator|.
name|bytes
argument_list|,
name|createUid
operator|.
name|offset
argument_list|,
name|ref
operator|.
name|bytes
argument_list|,
name|ref
operator|.
name|offset
argument_list|,
name|ref
operator|.
name|length
argument_list|)
expr_stmt|;
name|splitUidIntoTypeAndId
operator|=
name|Uid
operator|.
name|splitUidIntoTypeAndId
argument_list|(
name|ref
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"foo"
argument_list|,
name|equalTo
argument_list|(
name|splitUidIntoTypeAndId
index|[
literal|0
index|]
operator|.
name|toUtf8
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"bar"
argument_list|,
name|equalTo
argument_list|(
name|splitUidIntoTypeAndId
index|[
literal|1
index|]
operator|.
name|toUtf8
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

