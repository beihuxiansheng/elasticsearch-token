begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.store
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|store
package|;
end_package

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|annotations
operator|.
name|*
import|;
end_import

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|generators
operator|.
name|RandomInts
import|;
end_import

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|generators
operator|.
name|RandomPicks
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexFileNames
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TimeUnits
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|ESLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|Loggers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|store
operator|.
name|distributor
operator|.
name|Distributor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchThreadFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|junit
operator|.
name|listeners
operator|.
name|LoggingListener
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|NoSuchFileException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_class
annotation|@
name|ThreadLeakFilters
argument_list|(
name|defaultFilters
operator|=
literal|true
argument_list|,
name|filters
operator|=
block|{
name|ElasticsearchThreadFilter
operator|.
name|class
block|}
argument_list|)
annotation|@
name|ThreadLeakScope
argument_list|(
name|ThreadLeakScope
operator|.
name|Scope
operator|.
name|SUITE
argument_list|)
annotation|@
name|ThreadLeakLingering
argument_list|(
name|linger
operator|=
literal|5000
argument_list|)
comment|// 5 sec lingering
annotation|@
name|TimeoutSuite
argument_list|(
name|millis
operator|=
literal|5
operator|*
name|TimeUnits
operator|.
name|MINUTE
argument_list|)
annotation|@
name|Listeners
argument_list|(
name|LoggingListener
operator|.
name|class
argument_list|)
annotation|@
name|LuceneTestCase
operator|.
name|SuppressSysoutChecks
argument_list|(
name|bugUrl
operator|=
literal|"we log a lot on purpose"
argument_list|)
DECL|class|DistributorDirectoryTest
specifier|public
class|class
name|DistributorDirectoryTest
extends|extends
name|BaseDirectoryTestCase
block|{
DECL|field|logger
specifier|protected
specifier|final
name|ESLogger
name|logger
init|=
name|Loggers
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|getDirectory
specifier|protected
name|Directory
name|getDirectory
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|Directory
index|[]
name|directories
init|=
operator|new
name|Directory
index|[
literal|1
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|directories
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|directories
index|[
name|i
index|]
operator|=
name|newDirectory
argument_list|()
expr_stmt|;
if|if
condition|(
name|directories
index|[
name|i
index|]
operator|instanceof
name|MockDirectoryWrapper
condition|)
block|{
comment|// TODO: fix this test to handle virus checker
operator|(
operator|(
name|MockDirectoryWrapper
operator|)
name|directories
index|[
name|i
index|]
operator|)
operator|.
name|setEnableVirusScanner
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|DistributorDirectory
argument_list|(
name|directories
argument_list|)
return|;
block|}
comment|// #7306: don't invoke the distributor when we are opening an already existing file
DECL|method|testDoNotCallDistributorOnRead
specifier|public
name|void
name|testDoNotCallDistributorOnRead
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|dir
operator|.
name|createOutput
argument_list|(
literal|"one.txt"
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
specifier|final
name|Directory
index|[]
name|dirs
init|=
operator|new
name|Directory
index|[]
block|{
name|dir
block|}
decl_stmt|;
name|Distributor
name|distrib
init|=
operator|new
name|Distributor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Directory
name|primary
parameter_list|()
block|{
return|return
name|dirs
index|[
literal|0
index|]
return|;
block|}
annotation|@
name|Override
specifier|public
name|Directory
index|[]
name|all
parameter_list|()
block|{
return|return
name|dirs
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|Directory
name|any
parameter_list|()
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"any should not be called"
argument_list|)
throw|;
block|}
block|}
decl_stmt|;
name|DistributorDirectory
name|dd
init|=
operator|new
name|DistributorDirectory
argument_list|(
name|distrib
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|dd
operator|.
name|fileLength
argument_list|(
literal|"one.txt"
argument_list|)
argument_list|)
expr_stmt|;
name|dd
operator|.
name|openInput
argument_list|(
literal|"one.txt"
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
try|try
block|{
name|dd
operator|.
name|createOutput
argument_list|(
literal|"three.txt"
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"didn't hit expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|ise
parameter_list|)
block|{
comment|// expected
block|}
name|dd
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testRenameFiles
specifier|public
name|void
name|testRenameFiles
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|iters
init|=
literal|1
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iters
condition|;
name|i
operator|++
control|)
block|{
name|Directory
index|[]
name|dirs
init|=
operator|new
name|Directory
index|[
literal|1
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
index|]
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|dirs
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|MockDirectoryWrapper
name|directory
init|=
name|newMockDirectory
argument_list|()
decl_stmt|;
name|directory
operator|.
name|setEnableVirusScanner
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|directory
operator|.
name|setCheckIndexOnClose
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|dirs
index|[
name|j
index|]
operator|=
name|directory
expr_stmt|;
block|}
name|DistributorDirectory
name|dd
init|=
operator|new
name|DistributorDirectory
argument_list|(
name|dirs
argument_list|)
decl_stmt|;
name|String
name|file
init|=
name|RandomPicks
operator|.
name|randomFrom
argument_list|(
name|random
argument_list|()
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|Store
operator|.
name|CHECKSUMS_PREFIX
argument_list|,
name|IndexFileNames
operator|.
name|OLD_SEGMENTS_GEN
argument_list|,
name|IndexFileNames
operator|.
name|SEGMENTS
argument_list|,
name|IndexFileNames
operator|.
name|PENDING_SEGMENTS
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|tmpFileName
init|=
name|RandomPicks
operator|.
name|randomFrom
argument_list|(
name|random
argument_list|()
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"recovery."
argument_list|,
literal|"foobar."
argument_list|,
literal|"test."
argument_list|)
argument_list|)
operator|+
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|Math
operator|.
name|abs
argument_list|(
name|random
argument_list|()
operator|.
name|nextLong
argument_list|()
argument_list|)
argument_list|)
operator|+
literal|"."
operator|+
name|file
decl_stmt|;
try|try
init|(
name|IndexOutput
name|out
init|=
name|dd
operator|.
name|createOutput
argument_list|(
name|tmpFileName
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
init|)
block|{
name|out
operator|.
name|writeInt
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|Directory
name|theDir
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Directory
name|d
range|:
name|dirs
control|)
block|{
try|try
block|{
if|if
condition|(
name|d
operator|.
name|fileLength
argument_list|(
name|tmpFileName
argument_list|)
operator|>
literal|0
condition|)
block|{
name|theDir
operator|=
name|d
expr_stmt|;
break|break;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
comment|// nevermind
block|}
block|}
name|assertNotNull
argument_list|(
literal|"file must be in at least one dir"
argument_list|,
name|theDir
argument_list|)
expr_stmt|;
name|dd
operator|.
name|renameFile
argument_list|(
name|tmpFileName
argument_list|,
name|file
argument_list|)
expr_stmt|;
try|try
block|{
name|dd
operator|.
name|fileLength
argument_list|(
name|tmpFileName
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"file ["
operator|+
name|tmpFileName
operator|+
literal|"] was renamed but still exists"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
decl||
name|NoSuchFileException
name|ex
parameter_list|)
block|{
comment|// all is well
block|}
try|try
block|{
name|theDir
operator|.
name|fileLength
argument_list|(
name|tmpFileName
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"file ["
operator|+
name|tmpFileName
operator|+
literal|"] was renamed but still exists"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
decl||
name|NoSuchFileException
name|ex
parameter_list|)
block|{
comment|// all is well
block|}
name|assertEquals
argument_list|(
name|theDir
operator|.
name|fileLength
argument_list|(
name|file
argument_list|)
argument_list|,
literal|4
argument_list|)
expr_stmt|;
try|try
init|(
name|IndexOutput
name|out
init|=
name|dd
operator|.
name|createOutput
argument_list|(
literal|"foo.bar"
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
init|)
block|{
name|out
operator|.
name|writeInt
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
name|dd
argument_list|)
expr_stmt|;
if|if
condition|(
name|dd
operator|.
name|getDirectory
argument_list|(
literal|"foo.bar"
argument_list|)
operator|!=
name|dd
operator|.
name|getDirectory
argument_list|(
name|file
argument_list|)
condition|)
block|{
try|try
block|{
name|dd
operator|.
name|renameFile
argument_list|(
literal|"foo.bar"
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"target file already exists in a different directory"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
comment|// target file already exists
block|}
block|}
name|IOUtils
operator|.
name|close
argument_list|(
name|dd
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testSync
specifier|public
name|void
name|testSync
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|syncedFiles
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|Directory
index|[]
name|directories
init|=
operator|new
name|Directory
index|[
name|RandomInts
operator|.
name|randomIntBetween
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|)
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|directories
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|directories
index|[
name|i
index|]
operator|=
operator|new
name|FilterDirectory
argument_list|(
name|dir
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|sync
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|names
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|sync
argument_list|(
name|names
argument_list|)
expr_stmt|;
name|syncedFiles
operator|.
name|addAll
argument_list|(
name|names
argument_list|)
expr_stmt|;
block|}
block|}
expr_stmt|;
block|}
specifier|final
name|Directory
name|directory
init|=
operator|new
name|DistributorDirectory
argument_list|(
name|directories
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|file
range|:
name|Arrays
operator|.
name|asList
argument_list|(
literal|"a.bin"
argument_list|,
literal|"b.bin"
argument_list|)
control|)
block|{
try|try
init|(
name|IndexOutput
name|out
init|=
name|directory
operator|.
name|createOutput
argument_list|(
name|file
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
init|)
block|{
name|out
operator|.
name|writeInt
argument_list|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// syncing on a missing file throws an exception
try|try
block|{
name|directory
operator|.
name|sync
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"a.bin"
argument_list|,
literal|"c.bin"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
comment|// expected
block|}
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|,
name|syncedFiles
argument_list|)
expr_stmt|;
comment|// but syncing on existing files actually delegates
name|directory
operator|.
name|sync
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"a.bin"
argument_list|,
literal|"b.bin"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"a.bin"
argument_list|,
literal|"b.bin"
argument_list|)
argument_list|,
name|syncedFiles
argument_list|)
expr_stmt|;
name|directory
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

