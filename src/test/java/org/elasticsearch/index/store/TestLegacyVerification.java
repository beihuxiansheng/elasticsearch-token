begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.store
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|store
package|;
end_package

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|Adler32
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|CorruptIndexException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IOContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchLuceneTestCase
import|;
end_import

begin_comment
comment|/**   * Simple tests for LegacyVerification (old segments)  * @deprecated remove this test when support for lucene 4.x   *             segments is not longer needed.   */
end_comment

begin_class
annotation|@
name|Deprecated
DECL|class|TestLegacyVerification
specifier|public
class|class
name|TestLegacyVerification
extends|extends
name|ElasticsearchLuceneTestCase
block|{
DECL|method|testAdler32
specifier|public
name|void
name|testAdler32
parameter_list|()
throws|throws
name|Exception
block|{
name|Adler32
name|expected
init|=
operator|new
name|Adler32
argument_list|()
decl_stmt|;
name|byte
name|bytes
index|[]
init|=
literal|"abcdefgh"
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
name|expected
operator|.
name|update
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|String
name|expectedString
init|=
name|Store
operator|.
name|digestToString
argument_list|(
name|expected
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexOutput
name|o
init|=
name|dir
operator|.
name|createOutput
argument_list|(
literal|"legacy"
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
name|VerifyingIndexOutput
name|out
init|=
operator|new
name|LegacyVerification
operator|.
name|Adler32VerifyingIndexOutput
argument_list|(
name|o
argument_list|,
name|expectedString
argument_list|,
literal|8
argument_list|)
decl_stmt|;
name|out
operator|.
name|writeBytes
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|out
operator|.
name|verify
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|out
operator|.
name|verify
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testAdler32Corrupt
specifier|public
name|void
name|testAdler32Corrupt
parameter_list|()
throws|throws
name|Exception
block|{
name|Adler32
name|expected
init|=
operator|new
name|Adler32
argument_list|()
decl_stmt|;
name|byte
name|bytes
index|[]
init|=
literal|"abcdefgh"
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
name|expected
operator|.
name|update
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|String
name|expectedString
init|=
name|Store
operator|.
name|digestToString
argument_list|(
name|expected
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|byte
name|corruptBytes
index|[]
init|=
literal|"abcdefch"
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexOutput
name|o
init|=
name|dir
operator|.
name|createOutput
argument_list|(
literal|"legacy"
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
name|VerifyingIndexOutput
name|out
init|=
operator|new
name|LegacyVerification
operator|.
name|Adler32VerifyingIndexOutput
argument_list|(
name|o
argument_list|,
name|expectedString
argument_list|,
literal|8
argument_list|)
decl_stmt|;
name|out
operator|.
name|writeBytes
argument_list|(
name|corruptBytes
argument_list|,
literal|0
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
try|try
block|{
name|out
operator|.
name|verify
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CorruptIndexException
name|e
parameter_list|)
block|{
comment|// expected exception
block|}
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
try|try
block|{
name|out
operator|.
name|verify
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CorruptIndexException
name|e
parameter_list|)
block|{
comment|// expected exception
block|}
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testLengthOnlyOneByte
specifier|public
name|void
name|testLengthOnlyOneByte
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexOutput
name|o
init|=
name|dir
operator|.
name|createOutput
argument_list|(
literal|"oneByte"
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
name|VerifyingIndexOutput
name|out
init|=
operator|new
name|LegacyVerification
operator|.
name|LengthVerifyingIndexOutput
argument_list|(
name|o
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|out
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
literal|3
argument_list|)
expr_stmt|;
name|out
operator|.
name|verify
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|out
operator|.
name|verify
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testLengthOnlyCorrupt
specifier|public
name|void
name|testLengthOnlyCorrupt
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexOutput
name|o
init|=
name|dir
operator|.
name|createOutput
argument_list|(
literal|"oneByte"
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
name|VerifyingIndexOutput
name|out
init|=
operator|new
name|LegacyVerification
operator|.
name|LengthVerifyingIndexOutput
argument_list|(
name|o
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|out
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
literal|3
argument_list|)
expr_stmt|;
try|try
block|{
name|out
operator|.
name|verify
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CorruptIndexException
name|expected
parameter_list|)
block|{
comment|// expected exception
block|}
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
try|try
block|{
name|out
operator|.
name|verify
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CorruptIndexException
name|expected
parameter_list|)
block|{
comment|// expected exception
block|}
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

