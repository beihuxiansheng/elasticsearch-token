begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.store
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|store
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|CodecUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|SortedDocValuesField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|TextField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|CorruptIndexException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DirectoryReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|store
operator|.
name|distributor
operator|.
name|Distributor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|store
operator|.
name|distributor
operator|.
name|LeastUsedDistributor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|store
operator|.
name|distributor
operator|.
name|RandomWeightedDistributor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchLuceneTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|NoSuchFileException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|*
import|;
end_import

begin_class
DECL|class|StoreTest
specifier|public
class|class
name|StoreTest
extends|extends
name|ElasticsearchLuceneTestCase
block|{
annotation|@
name|Test
DECL|method|testVerifyingIndexOutput
specifier|public
name|void
name|testVerifyingIndexOutput
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexOutput
name|output
init|=
name|dir
operator|.
name|createOutput
argument_list|(
literal|"foo.bar"
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
name|int
name|iters
init|=
name|scaledRandomIntBetween
argument_list|(
literal|10
argument_list|,
literal|100
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iters
condition|;
name|i
operator|++
control|)
block|{
name|BytesRef
name|bytesRef
init|=
operator|new
name|BytesRef
argument_list|(
name|TestUtil
operator|.
name|randomRealisticUnicodeString
argument_list|(
name|random
argument_list|()
argument_list|,
literal|10
argument_list|,
literal|1024
argument_list|)
argument_list|)
decl_stmt|;
name|output
operator|.
name|writeBytes
argument_list|(
name|bytesRef
operator|.
name|bytes
argument_list|,
name|bytesRef
operator|.
name|offset
argument_list|,
name|bytesRef
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
name|CodecUtil
operator|.
name|writeFooter
argument_list|(
name|output
argument_list|)
expr_stmt|;
name|output
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexInput
name|indexInput
init|=
name|dir
operator|.
name|openInput
argument_list|(
literal|"foo.bar"
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
name|String
name|checksum
init|=
name|Store
operator|.
name|digestToString
argument_list|(
name|CodecUtil
operator|.
name|retrieveChecksum
argument_list|(
name|indexInput
argument_list|)
argument_list|)
decl_stmt|;
name|indexInput
operator|.
name|seek
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|BytesRef
name|ref
init|=
operator|new
name|BytesRef
argument_list|(
name|scaledRandomIntBetween
argument_list|(
literal|1
argument_list|,
literal|1024
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|length
init|=
name|indexInput
operator|.
name|length
argument_list|()
decl_stmt|;
name|IndexOutput
name|verifyingOutput
init|=
operator|new
name|Store
operator|.
name|VerifyingIndexOutput
argument_list|(
operator|new
name|StoreFileMetaData
argument_list|(
literal|"foo1.bar"
argument_list|,
name|length
argument_list|,
name|checksum
argument_list|,
name|TEST_VERSION_CURRENT
argument_list|)
argument_list|,
name|dir
operator|.
name|createOutput
argument_list|(
literal|"foo1.bar"
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
argument_list|)
decl_stmt|;
while|while
condition|(
name|length
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
operator|==
literal|0
condition|)
block|{
name|verifyingOutput
operator|.
name|writeByte
argument_list|(
name|indexInput
operator|.
name|readByte
argument_list|()
argument_list|)
expr_stmt|;
name|length
operator|--
expr_stmt|;
block|}
else|else
block|{
name|int
name|min
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|min
argument_list|(
name|length
argument_list|,
name|ref
operator|.
name|bytes
operator|.
name|length
argument_list|)
decl_stmt|;
name|indexInput
operator|.
name|readBytes
argument_list|(
name|ref
operator|.
name|bytes
argument_list|,
name|ref
operator|.
name|offset
argument_list|,
name|min
argument_list|)
expr_stmt|;
name|verifyingOutput
operator|.
name|writeBytes
argument_list|(
name|ref
operator|.
name|bytes
argument_list|,
name|ref
operator|.
name|offset
argument_list|,
name|min
argument_list|)
expr_stmt|;
name|length
operator|-=
name|min
expr_stmt|;
block|}
block|}
name|Store
operator|.
name|verify
argument_list|(
name|verifyingOutput
argument_list|)
expr_stmt|;
name|verifyingOutput
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
literal|0x0
argument_list|)
expr_stmt|;
try|try
block|{
name|Store
operator|.
name|verify
argument_list|(
name|verifyingOutput
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should be a corrupted index"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CorruptIndexException
name|ex
parameter_list|)
block|{
comment|// ok
block|}
name|IOUtils
operator|.
name|close
argument_list|(
name|indexInput
argument_list|,
name|verifyingOutput
argument_list|,
name|dir
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testVerifyingIndexOutputWithBogusInput
specifier|public
name|void
name|testVerifyingIndexOutputWithBogusInput
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|int
name|length
init|=
name|scaledRandomIntBetween
argument_list|(
literal|10
argument_list|,
literal|1024
argument_list|)
decl_stmt|;
name|IndexOutput
name|verifyingOutput
init|=
operator|new
name|Store
operator|.
name|VerifyingIndexOutput
argument_list|(
operator|new
name|StoreFileMetaData
argument_list|(
literal|"foo1.bar"
argument_list|,
name|length
argument_list|,
literal|""
argument_list|,
name|TEST_VERSION_CURRENT
argument_list|)
argument_list|,
name|dir
operator|.
name|createOutput
argument_list|(
literal|"foo1.bar"
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
while|while
condition|(
name|length
operator|>
literal|0
condition|)
block|{
name|verifyingOutput
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
name|random
argument_list|()
operator|.
name|nextInt
argument_list|()
argument_list|)
expr_stmt|;
name|length
operator|--
expr_stmt|;
block|}
name|fail
argument_list|(
literal|"should be a corrupted index"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CorruptIndexException
name|ex
parameter_list|)
block|{
comment|// ok
block|}
name|IOUtils
operator|.
name|close
argument_list|(
name|verifyingOutput
argument_list|,
name|dir
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWriteLegacyChecksums
specifier|public
name|void
name|testWriteLegacyChecksums
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|ShardId
name|shardId
init|=
operator|new
name|ShardId
argument_list|(
operator|new
name|Index
argument_list|(
literal|"index"
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|DirectoryService
name|directoryService
init|=
operator|new
name|LuceneManagedDirectoryService
argument_list|()
decl_stmt|;
name|Store
name|store
init|=
operator|new
name|Store
argument_list|(
name|shardId
argument_list|,
name|ImmutableSettings
operator|.
name|EMPTY
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|directoryService
argument_list|,
name|randomDistributor
argument_list|(
name|directoryService
argument_list|)
argument_list|)
decl_stmt|;
comment|// set default codec - all segments need checksums
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|store
operator|.
name|directory
argument_list|()
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|random
argument_list|()
argument_list|,
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setCodec
argument_list|(
name|actualDefaultCodec
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|docs
init|=
literal|1
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|docs
condition|;
name|i
operator|++
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"id"
argument_list|,
literal|""
operator|+
name|i
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
name|Field
operator|.
name|Store
operator|.
name|YES
else|:
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"body"
argument_list|,
name|TestUtil
operator|.
name|randomRealisticUnicodeString
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
name|Field
operator|.
name|Store
operator|.
name|YES
else|:
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|SortedDocValuesField
argument_list|(
literal|"dv"
argument_list|,
operator|new
name|BytesRef
argument_list|(
name|TestUtil
operator|.
name|randomRealisticUnicodeString
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|docs
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"id"
argument_list|,
literal|""
operator|+
name|i
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
name|Field
operator|.
name|Store
operator|.
name|YES
else|:
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"body"
argument_list|,
name|TestUtil
operator|.
name|randomRealisticUnicodeString
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
name|Field
operator|.
name|Store
operator|.
name|YES
else|:
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|updateDocument
argument_list|(
operator|new
name|Term
argument_list|(
literal|"id"
argument_list|,
literal|""
operator|+
name|i
argument_list|)
argument_list|,
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|DirectoryReader
operator|.
name|open
argument_list|(
name|writer
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// flush
block|}
comment|// check before we committed
name|Store
operator|.
name|MetadataSnapshot
name|metadata
init|=
name|store
operator|.
name|getMetadata
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|metadata
operator|.
name|asMap
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// nothing committed
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|Store
operator|.
name|LegacyChecksums
name|checksums
init|=
operator|new
name|Store
operator|.
name|LegacyChecksums
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|StoreFileMetaData
argument_list|>
name|legacyMeta
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|file
range|:
name|store
operator|.
name|directory
argument_list|()
operator|.
name|listAll
argument_list|()
control|)
block|{
if|if
condition|(
name|file
operator|.
name|equals
argument_list|(
literal|"write.lock"
argument_list|)
condition|)
block|{
continue|continue;
block|}
try|try
init|(
name|IndexInput
name|input
init|=
name|store
operator|.
name|directory
argument_list|()
operator|.
name|openInput
argument_list|(
name|file
argument_list|,
name|IOContext
operator|.
name|READONCE
argument_list|)
init|)
block|{
name|String
name|checksum
init|=
name|Store
operator|.
name|digestToString
argument_list|(
name|CodecUtil
operator|.
name|retrieveChecksum
argument_list|(
name|input
argument_list|)
argument_list|)
decl_stmt|;
name|StoreFileMetaData
name|storeFileMetaData
init|=
operator|new
name|StoreFileMetaData
argument_list|(
name|file
argument_list|,
name|store
operator|.
name|directory
argument_list|()
operator|.
name|fileLength
argument_list|(
name|file
argument_list|)
argument_list|,
name|checksum
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|legacyMeta
operator|.
name|put
argument_list|(
name|file
argument_list|,
name|storeFileMetaData
argument_list|)
expr_stmt|;
name|checksums
operator|.
name|add
argument_list|(
name|storeFileMetaData
argument_list|)
expr_stmt|;
block|}
block|}
name|checksums
operator|.
name|write
argument_list|(
name|store
argument_list|)
expr_stmt|;
name|metadata
operator|=
name|store
operator|.
name|getMetadata
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|StoreFileMetaData
argument_list|>
name|stringStoreFileMetaDataMap
init|=
name|metadata
operator|.
name|asMap
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|legacyMeta
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|stringStoreFileMetaDataMap
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|StoreFileMetaData
name|meta
range|:
name|legacyMeta
operator|.
name|values
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
name|stringStoreFileMetaDataMap
operator|.
name|containsKey
argument_list|(
name|meta
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|stringStoreFileMetaDataMap
operator|.
name|get
argument_list|(
name|meta
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|isSame
argument_list|(
name|meta
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertDeleteContent
argument_list|(
name|store
argument_list|,
name|directoryService
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|close
argument_list|(
name|store
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNewChecksums
specifier|public
name|void
name|testNewChecksums
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|ShardId
name|shardId
init|=
operator|new
name|ShardId
argument_list|(
operator|new
name|Index
argument_list|(
literal|"index"
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|DirectoryService
name|directoryService
init|=
operator|new
name|LuceneManagedDirectoryService
argument_list|()
decl_stmt|;
name|Store
name|store
init|=
operator|new
name|Store
argument_list|(
name|shardId
argument_list|,
name|ImmutableSettings
operator|.
name|EMPTY
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|directoryService
argument_list|,
name|randomDistributor
argument_list|(
name|directoryService
argument_list|)
argument_list|)
decl_stmt|;
comment|// set default codec - all segments need checksums
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|store
operator|.
name|directory
argument_list|()
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|random
argument_list|()
argument_list|,
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setCodec
argument_list|(
name|actualDefaultCodec
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|docs
init|=
literal|1
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|docs
condition|;
name|i
operator|++
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"id"
argument_list|,
literal|""
operator|+
name|i
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
name|Field
operator|.
name|Store
operator|.
name|YES
else|:
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"body"
argument_list|,
name|TestUtil
operator|.
name|randomRealisticUnicodeString
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
name|Field
operator|.
name|Store
operator|.
name|YES
else|:
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|SortedDocValuesField
argument_list|(
literal|"dv"
argument_list|,
operator|new
name|BytesRef
argument_list|(
name|TestUtil
operator|.
name|randomRealisticUnicodeString
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|docs
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"id"
argument_list|,
literal|""
operator|+
name|i
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
name|Field
operator|.
name|Store
operator|.
name|YES
else|:
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"body"
argument_list|,
name|TestUtil
operator|.
name|randomRealisticUnicodeString
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
name|Field
operator|.
name|Store
operator|.
name|YES
else|:
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|updateDocument
argument_list|(
operator|new
name|Term
argument_list|(
literal|"id"
argument_list|,
literal|""
operator|+
name|i
argument_list|)
argument_list|,
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|DirectoryReader
operator|.
name|open
argument_list|(
name|writer
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// flush
block|}
comment|// check before we committed
name|Store
operator|.
name|MetadataSnapshot
name|metadata
init|=
name|store
operator|.
name|getMetadata
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|metadata
operator|.
name|asMap
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// nothing committed
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|metadata
operator|=
name|store
operator|.
name|getMetadata
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|metadata
operator|.
name|asMap
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|StoreFileMetaData
name|meta
range|:
name|metadata
control|)
block|{
try|try
init|(
name|IndexInput
name|input
init|=
name|store
operator|.
name|directory
argument_list|()
operator|.
name|openInput
argument_list|(
name|meta
operator|.
name|name
argument_list|()
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
init|)
block|{
name|String
name|checksum
init|=
name|Store
operator|.
name|digestToString
argument_list|(
name|CodecUtil
operator|.
name|retrieveChecksum
argument_list|(
name|input
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
literal|"File: "
operator|+
name|meta
operator|.
name|name
argument_list|()
operator|+
literal|" has a different checksum"
argument_list|,
name|meta
operator|.
name|checksum
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|checksum
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|meta
operator|.
name|hasLegacyChecksum
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|meta
operator|.
name|writtenBy
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|assertConsistent
argument_list|(
name|store
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
name|TestUtil
operator|.
name|checkIndex
argument_list|(
name|store
operator|.
name|directory
argument_list|()
argument_list|)
expr_stmt|;
name|assertDeleteContent
argument_list|(
name|store
argument_list|,
name|directoryService
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|close
argument_list|(
name|store
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMixedChecksums
specifier|public
name|void
name|testMixedChecksums
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|ShardId
name|shardId
init|=
operator|new
name|ShardId
argument_list|(
operator|new
name|Index
argument_list|(
literal|"index"
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|DirectoryService
name|directoryService
init|=
operator|new
name|LuceneManagedDirectoryService
argument_list|()
decl_stmt|;
name|Store
name|store
init|=
operator|new
name|Store
argument_list|(
name|shardId
argument_list|,
name|ImmutableSettings
operator|.
name|EMPTY
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|directoryService
argument_list|,
name|randomDistributor
argument_list|(
name|directoryService
argument_list|)
argument_list|)
decl_stmt|;
comment|// this time random codec....
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|store
operator|.
name|directory
argument_list|()
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|random
argument_list|()
argument_list|,
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setCodec
argument_list|(
name|actualDefaultCodec
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|docs
init|=
literal|1
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|docs
condition|;
name|i
operator|++
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"id"
argument_list|,
literal|""
operator|+
name|i
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
name|Field
operator|.
name|Store
operator|.
name|YES
else|:
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"body"
argument_list|,
name|TestUtil
operator|.
name|randomRealisticUnicodeString
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
name|Field
operator|.
name|Store
operator|.
name|YES
else|:
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|SortedDocValuesField
argument_list|(
literal|"dv"
argument_list|,
operator|new
name|BytesRef
argument_list|(
name|TestUtil
operator|.
name|randomRealisticUnicodeString
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|docs
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"id"
argument_list|,
literal|""
operator|+
name|i
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
name|Field
operator|.
name|Store
operator|.
name|YES
else|:
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"body"
argument_list|,
name|TestUtil
operator|.
name|randomRealisticUnicodeString
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
name|Field
operator|.
name|Store
operator|.
name|YES
else|:
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|updateDocument
argument_list|(
operator|new
name|Term
argument_list|(
literal|"id"
argument_list|,
literal|""
operator|+
name|i
argument_list|)
argument_list|,
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|DirectoryReader
operator|.
name|open
argument_list|(
name|writer
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// flush
block|}
comment|// check before we committed
name|Store
operator|.
name|MetadataSnapshot
name|metadata
init|=
name|store
operator|.
name|getMetadata
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|metadata
operator|.
name|asMap
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// nothing committed
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|Store
operator|.
name|LegacyChecksums
name|checksums
init|=
operator|new
name|Store
operator|.
name|LegacyChecksums
argument_list|()
decl_stmt|;
name|metadata
operator|=
name|store
operator|.
name|getMetadata
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|metadata
operator|.
name|asMap
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|StoreFileMetaData
name|meta
range|:
name|metadata
control|)
block|{
try|try
init|(
name|IndexInput
name|input
init|=
name|store
operator|.
name|directory
argument_list|()
operator|.
name|openInput
argument_list|(
name|meta
operator|.
name|name
argument_list|()
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
init|)
block|{
if|if
condition|(
name|meta
operator|.
name|checksum
argument_list|()
operator|==
literal|null
condition|)
block|{
name|String
name|checksum
init|=
literal|null
decl_stmt|;
try|try
block|{
name|CodecUtil
operator|.
name|retrieveChecksum
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected a corrupt index - posting format has not checksums"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CorruptIndexException
name|ex
parameter_list|)
block|{
try|try
init|(
name|ChecksumIndexInput
name|checksumIndexInput
init|=
name|store
operator|.
name|directory
argument_list|()
operator|.
name|openChecksumInput
argument_list|(
name|meta
operator|.
name|name
argument_list|()
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
init|)
block|{
name|checksumIndexInput
operator|.
name|seek
argument_list|(
name|meta
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|checksum
operator|=
name|Store
operator|.
name|digestToString
argument_list|(
name|checksumIndexInput
operator|.
name|getChecksum
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// fine - it's a postings format without checksums
name|checksums
operator|.
name|add
argument_list|(
operator|new
name|StoreFileMetaData
argument_list|(
name|meta
operator|.
name|name
argument_list|()
argument_list|,
name|meta
operator|.
name|length
argument_list|()
argument_list|,
name|checksum
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|String
name|checksum
init|=
name|Store
operator|.
name|digestToString
argument_list|(
name|CodecUtil
operator|.
name|retrieveChecksum
argument_list|(
name|input
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
literal|"File: "
operator|+
name|meta
operator|.
name|name
argument_list|()
operator|+
literal|" has a different checksum"
argument_list|,
name|meta
operator|.
name|checksum
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|checksum
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|meta
operator|.
name|hasLegacyChecksum
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|meta
operator|.
name|writtenBy
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|assertConsistent
argument_list|(
name|store
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
name|checksums
operator|.
name|write
argument_list|(
name|store
argument_list|)
expr_stmt|;
name|metadata
operator|=
name|store
operator|.
name|getMetadata
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|metadata
operator|.
name|asMap
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|StoreFileMetaData
name|meta
range|:
name|metadata
control|)
block|{
name|assertThat
argument_list|(
literal|"file: "
operator|+
name|meta
operator|.
name|name
argument_list|()
operator|+
literal|" has a null checksum"
argument_list|,
name|meta
operator|.
name|checksum
argument_list|()
argument_list|,
name|not
argument_list|(
name|nullValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|meta
operator|.
name|hasLegacyChecksum
argument_list|()
condition|)
block|{
try|try
init|(
name|ChecksumIndexInput
name|checksumIndexInput
init|=
name|store
operator|.
name|directory
argument_list|()
operator|.
name|openChecksumInput
argument_list|(
name|meta
operator|.
name|name
argument_list|()
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
init|)
block|{
name|checksumIndexInput
operator|.
name|seek
argument_list|(
name|meta
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|meta
operator|.
name|checksum
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|Store
operator|.
name|digestToString
argument_list|(
name|checksumIndexInput
operator|.
name|getChecksum
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
try|try
init|(
name|IndexInput
name|input
init|=
name|store
operator|.
name|directory
argument_list|()
operator|.
name|openInput
argument_list|(
name|meta
operator|.
name|name
argument_list|()
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
init|)
block|{
name|String
name|checksum
init|=
name|Store
operator|.
name|digestToString
argument_list|(
name|CodecUtil
operator|.
name|retrieveChecksum
argument_list|(
name|input
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
literal|"File: "
operator|+
name|meta
operator|.
name|name
argument_list|()
operator|+
literal|" has a different checksum"
argument_list|,
name|meta
operator|.
name|checksum
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|checksum
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|meta
operator|.
name|hasLegacyChecksum
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|meta
operator|.
name|writtenBy
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|assertConsistent
argument_list|(
name|store
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
name|TestUtil
operator|.
name|checkIndex
argument_list|(
name|store
operator|.
name|directory
argument_list|()
argument_list|)
expr_stmt|;
name|assertDeleteContent
argument_list|(
name|store
argument_list|,
name|directoryService
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|close
argument_list|(
name|store
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRenameFile
specifier|public
name|void
name|testRenameFile
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|ShardId
name|shardId
init|=
operator|new
name|ShardId
argument_list|(
operator|new
name|Index
argument_list|(
literal|"index"
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|DirectoryService
name|directoryService
init|=
operator|new
name|LuceneManagedDirectoryService
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|Store
name|store
init|=
operator|new
name|Store
argument_list|(
name|shardId
argument_list|,
name|ImmutableSettings
operator|.
name|EMPTY
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|directoryService
argument_list|,
name|randomDistributor
argument_list|(
name|directoryService
argument_list|)
argument_list|)
decl_stmt|;
block|{
name|IndexOutput
name|output
init|=
name|store
operator|.
name|directory
argument_list|()
operator|.
name|createOutput
argument_list|(
literal|"foo.bar"
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
name|int
name|iters
init|=
name|scaledRandomIntBetween
argument_list|(
literal|10
argument_list|,
literal|100
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iters
condition|;
name|i
operator|++
control|)
block|{
name|BytesRef
name|bytesRef
init|=
operator|new
name|BytesRef
argument_list|(
name|TestUtil
operator|.
name|randomRealisticUnicodeString
argument_list|(
name|random
argument_list|()
argument_list|,
literal|10
argument_list|,
literal|1024
argument_list|)
argument_list|)
decl_stmt|;
name|output
operator|.
name|writeBytes
argument_list|(
name|bytesRef
operator|.
name|bytes
argument_list|,
name|bytesRef
operator|.
name|offset
argument_list|,
name|bytesRef
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
name|CodecUtil
operator|.
name|writeFooter
argument_list|(
name|output
argument_list|)
expr_stmt|;
name|output
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|store
operator|.
name|renameFile
argument_list|(
literal|"foo.bar"
argument_list|,
literal|"bar.foo"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|store
operator|.
name|directory
argument_list|()
operator|.
name|listAll
argument_list|()
operator|.
name|length
argument_list|,
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|long
name|lastChecksum
decl_stmt|;
try|try
init|(
name|IndexInput
name|input
init|=
name|store
operator|.
name|directory
argument_list|()
operator|.
name|openInput
argument_list|(
literal|"bar.foo"
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
init|)
block|{
name|lastChecksum
operator|=
name|CodecUtil
operator|.
name|checksumEntireFile
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|store
operator|.
name|directory
argument_list|()
operator|.
name|openInput
argument_list|(
literal|"foo.bar"
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"file was renamed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
decl||
name|NoSuchFileException
name|ex
parameter_list|)
block|{
comment|// expected
block|}
block|{
name|IndexOutput
name|output
init|=
name|store
operator|.
name|directory
argument_list|()
operator|.
name|createOutput
argument_list|(
literal|"foo.bar"
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
name|int
name|iters
init|=
name|scaledRandomIntBetween
argument_list|(
literal|10
argument_list|,
literal|100
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iters
condition|;
name|i
operator|++
control|)
block|{
name|BytesRef
name|bytesRef
init|=
operator|new
name|BytesRef
argument_list|(
name|TestUtil
operator|.
name|randomRealisticUnicodeString
argument_list|(
name|random
argument_list|()
argument_list|,
literal|10
argument_list|,
literal|1024
argument_list|)
argument_list|)
decl_stmt|;
name|output
operator|.
name|writeBytes
argument_list|(
name|bytesRef
operator|.
name|bytes
argument_list|,
name|bytesRef
operator|.
name|offset
argument_list|,
name|bytesRef
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
name|CodecUtil
operator|.
name|writeFooter
argument_list|(
name|output
argument_list|)
expr_stmt|;
name|output
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|store
operator|.
name|renameFile
argument_list|(
literal|"foo.bar"
argument_list|,
literal|"bar.foo"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"targe file already exists"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
comment|// expected
block|}
try|try
init|(
name|IndexInput
name|input
init|=
name|store
operator|.
name|directory
argument_list|()
operator|.
name|openInput
argument_list|(
literal|"bar.foo"
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
init|)
block|{
name|assertThat
argument_list|(
name|lastChecksum
argument_list|,
name|equalTo
argument_list|(
name|CodecUtil
operator|.
name|checksumEntireFile
argument_list|(
name|input
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|store
operator|.
name|directory
argument_list|()
operator|.
name|listAll
argument_list|()
operator|.
name|length
argument_list|,
name|is
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertDeleteContent
argument_list|(
name|store
argument_list|,
name|directoryService
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|close
argument_list|(
name|store
argument_list|)
expr_stmt|;
block|}
DECL|method|assertDeleteContent
specifier|public
name|void
name|assertDeleteContent
parameter_list|(
name|Store
name|store
parameter_list|,
name|DirectoryService
name|service
parameter_list|)
throws|throws
name|IOException
block|{
name|store
operator|.
name|deleteContent
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|Arrays
operator|.
name|toString
argument_list|(
name|store
operator|.
name|directory
argument_list|()
operator|.
name|listAll
argument_list|()
argument_list|)
argument_list|,
name|store
operator|.
name|directory
argument_list|()
operator|.
name|listAll
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|store
operator|.
name|stats
argument_list|()
operator|.
name|sizeInBytes
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0l
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Directory
name|dir
range|:
name|service
operator|.
name|build
argument_list|()
control|)
block|{
name|assertThat
argument_list|(
name|dir
operator|.
name|listAll
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|LuceneManagedDirectoryService
specifier|private
specifier|final
class|class
name|LuceneManagedDirectoryService
implements|implements
name|DirectoryService
block|{
DECL|field|dirs
specifier|private
specifier|final
name|Directory
index|[]
name|dirs
decl_stmt|;
DECL|method|LuceneManagedDirectoryService
specifier|public
name|LuceneManagedDirectoryService
parameter_list|()
block|{
name|this
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|LuceneManagedDirectoryService
specifier|public
name|LuceneManagedDirectoryService
parameter_list|(
name|boolean
name|preventDoubleWrite
parameter_list|)
block|{
name|this
operator|.
name|dirs
operator|=
operator|new
name|Directory
index|[
literal|1
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dirs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|dirs
index|[
name|i
index|]
operator|=
name|newDirectory
argument_list|()
expr_stmt|;
if|if
condition|(
name|dirs
index|[
name|i
index|]
operator|instanceof
name|MockDirectoryWrapper
condition|)
block|{
operator|(
operator|(
name|MockDirectoryWrapper
operator|)
name|dirs
index|[
name|i
index|]
operator|)
operator|.
name|setPreventDoubleWrite
argument_list|(
name|preventDoubleWrite
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|build
specifier|public
name|Directory
index|[]
name|build
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|dirs
return|;
block|}
annotation|@
name|Override
DECL|method|throttleTimeInNanos
specifier|public
name|long
name|throttleTimeInNanos
parameter_list|()
block|{
return|return
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|1000
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|renameFile
specifier|public
name|void
name|renameFile
parameter_list|(
name|Directory
name|dir
parameter_list|,
name|String
name|from
parameter_list|,
name|String
name|to
parameter_list|)
throws|throws
name|IOException
block|{
name|dir
operator|.
name|copy
argument_list|(
name|dir
argument_list|,
name|from
argument_list|,
name|to
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
name|dir
operator|.
name|deleteFile
argument_list|(
name|from
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|fullDelete
specifier|public
name|void
name|fullDelete
parameter_list|(
name|Directory
name|dir
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|String
name|file
range|:
name|dir
operator|.
name|listAll
argument_list|()
control|)
block|{
name|dir
operator|.
name|deleteFile
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|assertConsistent
specifier|public
specifier|static
name|void
name|assertConsistent
parameter_list|(
name|Store
name|store
parameter_list|,
name|Store
operator|.
name|MetadataSnapshot
name|metadata
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|String
name|file
range|:
name|store
operator|.
name|directory
argument_list|()
operator|.
name|listAll
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
literal|"write.lock"
operator|.
name|equals
argument_list|(
name|file
argument_list|)
operator|&&
operator|!
name|Store
operator|.
name|isChecksum
argument_list|(
name|file
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
name|file
operator|+
literal|" is not in the map: "
operator|+
name|metadata
operator|.
name|asMap
argument_list|()
operator|.
name|size
argument_list|()
operator|+
literal|" vs. "
operator|+
name|store
operator|.
name|directory
argument_list|()
operator|.
name|listAll
argument_list|()
operator|.
name|length
argument_list|,
name|metadata
operator|.
name|asMap
argument_list|()
operator|.
name|containsKey
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertFalse
argument_list|(
name|file
operator|+
literal|" is not in the map: "
operator|+
name|metadata
operator|.
name|asMap
argument_list|()
operator|.
name|size
argument_list|()
operator|+
literal|" vs. "
operator|+
name|store
operator|.
name|directory
argument_list|()
operator|.
name|listAll
argument_list|()
operator|.
name|length
argument_list|,
name|metadata
operator|.
name|asMap
argument_list|()
operator|.
name|containsKey
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|randomDistributor
specifier|private
name|Distributor
name|randomDistributor
parameter_list|(
name|DirectoryService
name|service
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
operator|new
name|LeastUsedDistributor
argument_list|(
name|service
argument_list|)
else|:
operator|new
name|RandomWeightedDistributor
argument_list|(
name|service
argument_list|)
return|;
block|}
block|}
end_class

end_unit

