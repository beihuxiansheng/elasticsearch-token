begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.store
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|store
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|CodecUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|store
operator|.
name|distributor
operator|.
name|Distributor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|store
operator|.
name|distributor
operator|.
name|LeastUsedDistributor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|store
operator|.
name|distributor
operator|.
name|RandomWeightedDistributor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchLuceneTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|NoSuchFileException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|RandomizedTest
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|*
import|;
end_import

begin_class
DECL|class|StoreTest
specifier|public
class|class
name|StoreTest
extends|extends
name|ElasticsearchLuceneTestCase
block|{
annotation|@
name|Test
DECL|method|testRefCount
specifier|public
name|void
name|testRefCount
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|ShardId
name|shardId
init|=
operator|new
name|ShardId
argument_list|(
operator|new
name|Index
argument_list|(
literal|"index"
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|DirectoryService
name|directoryService
init|=
operator|new
name|LuceneManagedDirectoryService
argument_list|(
name|random
argument_list|()
argument_list|)
decl_stmt|;
name|Store
name|store
init|=
operator|new
name|Store
argument_list|(
name|shardId
argument_list|,
name|ImmutableSettings
operator|.
name|EMPTY
argument_list|,
literal|null
argument_list|,
name|directoryService
argument_list|,
name|randomDistributor
argument_list|(
name|directoryService
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|incs
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|100
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|incs
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|store
operator|.
name|incRef
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
name|store
operator|.
name|tryIncRef
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|store
operator|.
name|ensureOpen
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|incs
condition|;
name|i
operator|++
control|)
block|{
name|store
operator|.
name|decRef
argument_list|()
expr_stmt|;
name|store
operator|.
name|ensureOpen
argument_list|()
expr_stmt|;
block|}
name|store
operator|.
name|incRef
argument_list|()
expr_stmt|;
name|store
operator|.
name|close
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|incs
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|store
operator|.
name|incRef
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
name|store
operator|.
name|tryIncRef
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|store
operator|.
name|ensureOpen
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|incs
condition|;
name|i
operator|++
control|)
block|{
name|store
operator|.
name|decRef
argument_list|()
expr_stmt|;
name|store
operator|.
name|ensureOpen
argument_list|()
expr_stmt|;
block|}
name|store
operator|.
name|decRef
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|store
operator|.
name|tryIncRef
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|store
operator|.
name|incRef
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|" expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AlreadyClosedException
name|ex
parameter_list|)
block|{          }
try|try
block|{
name|store
operator|.
name|ensureOpen
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|" expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AlreadyClosedException
name|ex
parameter_list|)
block|{          }
block|}
annotation|@
name|Test
DECL|method|testVerifyingIndexOutput
specifier|public
name|void
name|testVerifyingIndexOutput
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexOutput
name|output
init|=
name|dir
operator|.
name|createOutput
argument_list|(
literal|"foo.bar"
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
name|int
name|iters
init|=
name|scaledRandomIntBetween
argument_list|(
literal|10
argument_list|,
literal|100
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iters
condition|;
name|i
operator|++
control|)
block|{
name|BytesRef
name|bytesRef
init|=
operator|new
name|BytesRef
argument_list|(
name|TestUtil
operator|.
name|randomRealisticUnicodeString
argument_list|(
name|random
argument_list|()
argument_list|,
literal|10
argument_list|,
literal|1024
argument_list|)
argument_list|)
decl_stmt|;
name|output
operator|.
name|writeBytes
argument_list|(
name|bytesRef
operator|.
name|bytes
argument_list|,
name|bytesRef
operator|.
name|offset
argument_list|,
name|bytesRef
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
name|CodecUtil
operator|.
name|writeFooter
argument_list|(
name|output
argument_list|)
expr_stmt|;
name|output
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexInput
name|indexInput
init|=
name|dir
operator|.
name|openInput
argument_list|(
literal|"foo.bar"
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
name|String
name|checksum
init|=
name|Store
operator|.
name|digestToString
argument_list|(
name|CodecUtil
operator|.
name|retrieveChecksum
argument_list|(
name|indexInput
argument_list|)
argument_list|)
decl_stmt|;
name|indexInput
operator|.
name|seek
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|BytesRef
name|ref
init|=
operator|new
name|BytesRef
argument_list|(
name|scaledRandomIntBetween
argument_list|(
literal|1
argument_list|,
literal|1024
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|length
init|=
name|indexInput
operator|.
name|length
argument_list|()
decl_stmt|;
name|IndexOutput
name|verifyingOutput
init|=
operator|new
name|Store
operator|.
name|VerifyingIndexOutput
argument_list|(
operator|new
name|StoreFileMetaData
argument_list|(
literal|"foo1.bar"
argument_list|,
name|length
argument_list|,
name|checksum
argument_list|,
name|TEST_VERSION_CURRENT
argument_list|)
argument_list|,
name|dir
operator|.
name|createOutput
argument_list|(
literal|"foo1.bar"
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
argument_list|)
decl_stmt|;
while|while
condition|(
name|length
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
operator|==
literal|0
condition|)
block|{
name|verifyingOutput
operator|.
name|writeByte
argument_list|(
name|indexInput
operator|.
name|readByte
argument_list|()
argument_list|)
expr_stmt|;
name|length
operator|--
expr_stmt|;
block|}
else|else
block|{
name|int
name|min
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|min
argument_list|(
name|length
argument_list|,
name|ref
operator|.
name|bytes
operator|.
name|length
argument_list|)
decl_stmt|;
name|indexInput
operator|.
name|readBytes
argument_list|(
name|ref
operator|.
name|bytes
argument_list|,
name|ref
operator|.
name|offset
argument_list|,
name|min
argument_list|)
expr_stmt|;
name|verifyingOutput
operator|.
name|writeBytes
argument_list|(
name|ref
operator|.
name|bytes
argument_list|,
name|ref
operator|.
name|offset
argument_list|,
name|min
argument_list|)
expr_stmt|;
name|length
operator|-=
name|min
expr_stmt|;
block|}
block|}
name|Store
operator|.
name|verify
argument_list|(
name|verifyingOutput
argument_list|)
expr_stmt|;
name|verifyingOutput
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
literal|0x0
argument_list|)
expr_stmt|;
try|try
block|{
name|Store
operator|.
name|verify
argument_list|(
name|verifyingOutput
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should be a corrupted index"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CorruptIndexException
name|ex
parameter_list|)
block|{
comment|// ok
block|}
name|IOUtils
operator|.
name|close
argument_list|(
name|indexInput
argument_list|,
name|verifyingOutput
argument_list|,
name|dir
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testVerifyingIndexOutputWithBogusInput
specifier|public
name|void
name|testVerifyingIndexOutputWithBogusInput
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|int
name|length
init|=
name|scaledRandomIntBetween
argument_list|(
literal|10
argument_list|,
literal|1024
argument_list|)
decl_stmt|;
name|IndexOutput
name|verifyingOutput
init|=
operator|new
name|Store
operator|.
name|VerifyingIndexOutput
argument_list|(
operator|new
name|StoreFileMetaData
argument_list|(
literal|"foo1.bar"
argument_list|,
name|length
argument_list|,
literal|""
argument_list|,
name|TEST_VERSION_CURRENT
argument_list|)
argument_list|,
name|dir
operator|.
name|createOutput
argument_list|(
literal|"foo1.bar"
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
while|while
condition|(
name|length
operator|>
literal|0
condition|)
block|{
name|verifyingOutput
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
name|random
argument_list|()
operator|.
name|nextInt
argument_list|()
argument_list|)
expr_stmt|;
name|length
operator|--
expr_stmt|;
block|}
name|fail
argument_list|(
literal|"should be a corrupted index"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CorruptIndexException
name|ex
parameter_list|)
block|{
comment|// ok
block|}
name|IOUtils
operator|.
name|close
argument_list|(
name|verifyingOutput
argument_list|,
name|dir
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWriteLegacyChecksums
specifier|public
name|void
name|testWriteLegacyChecksums
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|ShardId
name|shardId
init|=
operator|new
name|ShardId
argument_list|(
operator|new
name|Index
argument_list|(
literal|"index"
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|DirectoryService
name|directoryService
init|=
operator|new
name|LuceneManagedDirectoryService
argument_list|(
name|random
argument_list|()
argument_list|)
decl_stmt|;
name|Store
name|store
init|=
operator|new
name|Store
argument_list|(
name|shardId
argument_list|,
name|ImmutableSettings
operator|.
name|EMPTY
argument_list|,
literal|null
argument_list|,
name|directoryService
argument_list|,
name|randomDistributor
argument_list|(
name|directoryService
argument_list|)
argument_list|)
decl_stmt|;
comment|// set default codec - all segments need checksums
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|store
operator|.
name|directory
argument_list|()
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|random
argument_list|()
argument_list|,
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setCodec
argument_list|(
name|actualDefaultCodec
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|docs
init|=
literal|1
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|docs
condition|;
name|i
operator|++
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"id"
argument_list|,
literal|""
operator|+
name|i
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
name|Field
operator|.
name|Store
operator|.
name|YES
else|:
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"body"
argument_list|,
name|TestUtil
operator|.
name|randomRealisticUnicodeString
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
name|Field
operator|.
name|Store
operator|.
name|YES
else|:
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|SortedDocValuesField
argument_list|(
literal|"dv"
argument_list|,
operator|new
name|BytesRef
argument_list|(
name|TestUtil
operator|.
name|randomRealisticUnicodeString
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|docs
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"id"
argument_list|,
literal|""
operator|+
name|i
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
name|Field
operator|.
name|Store
operator|.
name|YES
else|:
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"body"
argument_list|,
name|TestUtil
operator|.
name|randomRealisticUnicodeString
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
name|Field
operator|.
name|Store
operator|.
name|YES
else|:
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|updateDocument
argument_list|(
operator|new
name|Term
argument_list|(
literal|"id"
argument_list|,
literal|""
operator|+
name|i
argument_list|)
argument_list|,
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|DirectoryReader
operator|.
name|open
argument_list|(
name|writer
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// flush
block|}
name|Store
operator|.
name|MetadataSnapshot
name|metadata
decl_stmt|;
comment|// check before we committed
try|try
block|{
name|store
operator|.
name|getMetadata
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"no index present - expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexNotFoundException
name|ex
parameter_list|)
block|{
comment|// expected
block|}
name|assertThat
argument_list|(
name|store
operator|.
name|getMetadataOrEmpty
argument_list|()
argument_list|,
name|is
argument_list|(
name|Store
operator|.
name|MetadataSnapshot
operator|.
name|EMPTY
argument_list|)
argument_list|)
expr_stmt|;
comment|// nothing committed
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|Store
operator|.
name|LegacyChecksums
name|checksums
init|=
operator|new
name|Store
operator|.
name|LegacyChecksums
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|StoreFileMetaData
argument_list|>
name|legacyMeta
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|file
range|:
name|store
operator|.
name|directory
argument_list|()
operator|.
name|listAll
argument_list|()
control|)
block|{
if|if
condition|(
name|file
operator|.
name|equals
argument_list|(
literal|"write.lock"
argument_list|)
operator|||
name|file
operator|.
name|equals
argument_list|(
name|IndexFileNames
operator|.
name|SEGMENTS_GEN
argument_list|)
condition|)
block|{
continue|continue;
block|}
try|try
init|(
name|IndexInput
name|input
init|=
name|store
operator|.
name|directory
argument_list|()
operator|.
name|openInput
argument_list|(
name|file
argument_list|,
name|IOContext
operator|.
name|READONCE
argument_list|)
init|)
block|{
name|String
name|checksum
init|=
name|Store
operator|.
name|digestToString
argument_list|(
name|CodecUtil
operator|.
name|retrieveChecksum
argument_list|(
name|input
argument_list|)
argument_list|)
decl_stmt|;
name|StoreFileMetaData
name|storeFileMetaData
init|=
operator|new
name|StoreFileMetaData
argument_list|(
name|file
argument_list|,
name|store
operator|.
name|directory
argument_list|()
operator|.
name|fileLength
argument_list|(
name|file
argument_list|)
argument_list|,
name|checksum
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|legacyMeta
operator|.
name|put
argument_list|(
name|file
argument_list|,
name|storeFileMetaData
argument_list|)
expr_stmt|;
name|checksums
operator|.
name|add
argument_list|(
name|storeFileMetaData
argument_list|)
expr_stmt|;
block|}
block|}
name|checksums
operator|.
name|write
argument_list|(
name|store
argument_list|)
expr_stmt|;
name|metadata
operator|=
name|store
operator|.
name|getMetadata
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|StoreFileMetaData
argument_list|>
name|stringStoreFileMetaDataMap
init|=
name|metadata
operator|.
name|asMap
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|legacyMeta
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|stringStoreFileMetaDataMap
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|StoreFileMetaData
name|meta
range|:
name|legacyMeta
operator|.
name|values
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
name|stringStoreFileMetaDataMap
operator|.
name|containsKey
argument_list|(
name|meta
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|stringStoreFileMetaDataMap
operator|.
name|get
argument_list|(
name|meta
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|isSame
argument_list|(
name|meta
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertDeleteContent
argument_list|(
name|store
argument_list|,
name|directoryService
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|close
argument_list|(
name|store
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNewChecksums
specifier|public
name|void
name|testNewChecksums
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|ShardId
name|shardId
init|=
operator|new
name|ShardId
argument_list|(
operator|new
name|Index
argument_list|(
literal|"index"
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|DirectoryService
name|directoryService
init|=
operator|new
name|LuceneManagedDirectoryService
argument_list|(
name|random
argument_list|()
argument_list|)
decl_stmt|;
name|Store
name|store
init|=
operator|new
name|Store
argument_list|(
name|shardId
argument_list|,
name|ImmutableSettings
operator|.
name|EMPTY
argument_list|,
literal|null
argument_list|,
name|directoryService
argument_list|,
name|randomDistributor
argument_list|(
name|directoryService
argument_list|)
argument_list|)
decl_stmt|;
comment|// set default codec - all segments need checksums
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|store
operator|.
name|directory
argument_list|()
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|random
argument_list|()
argument_list|,
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setCodec
argument_list|(
name|actualDefaultCodec
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|docs
init|=
literal|1
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|docs
condition|;
name|i
operator|++
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"id"
argument_list|,
literal|""
operator|+
name|i
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
name|Field
operator|.
name|Store
operator|.
name|YES
else|:
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"body"
argument_list|,
name|TestUtil
operator|.
name|randomRealisticUnicodeString
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
name|Field
operator|.
name|Store
operator|.
name|YES
else|:
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|SortedDocValuesField
argument_list|(
literal|"dv"
argument_list|,
operator|new
name|BytesRef
argument_list|(
name|TestUtil
operator|.
name|randomRealisticUnicodeString
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|docs
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"id"
argument_list|,
literal|""
operator|+
name|i
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
name|Field
operator|.
name|Store
operator|.
name|YES
else|:
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"body"
argument_list|,
name|TestUtil
operator|.
name|randomRealisticUnicodeString
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
name|Field
operator|.
name|Store
operator|.
name|YES
else|:
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|updateDocument
argument_list|(
operator|new
name|Term
argument_list|(
literal|"id"
argument_list|,
literal|""
operator|+
name|i
argument_list|)
argument_list|,
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|DirectoryReader
operator|.
name|open
argument_list|(
name|writer
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// flush
block|}
name|Store
operator|.
name|MetadataSnapshot
name|metadata
decl_stmt|;
comment|// check before we committed
try|try
block|{
name|store
operator|.
name|getMetadata
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"no index present - expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexNotFoundException
name|ex
parameter_list|)
block|{
comment|// expected
block|}
name|assertThat
argument_list|(
name|store
operator|.
name|getMetadataOrEmpty
argument_list|()
argument_list|,
name|is
argument_list|(
name|Store
operator|.
name|MetadataSnapshot
operator|.
name|EMPTY
argument_list|)
argument_list|)
expr_stmt|;
comment|// nothing committed
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|metadata
operator|=
name|store
operator|.
name|getMetadata
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|metadata
operator|.
name|asMap
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|StoreFileMetaData
name|meta
range|:
name|metadata
control|)
block|{
try|try
init|(
name|IndexInput
name|input
init|=
name|store
operator|.
name|directory
argument_list|()
operator|.
name|openInput
argument_list|(
name|meta
operator|.
name|name
argument_list|()
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
init|)
block|{
name|String
name|checksum
init|=
name|Store
operator|.
name|digestToString
argument_list|(
name|CodecUtil
operator|.
name|retrieveChecksum
argument_list|(
name|input
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
literal|"File: "
operator|+
name|meta
operator|.
name|name
argument_list|()
operator|+
literal|" has a different checksum"
argument_list|,
name|meta
operator|.
name|checksum
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|checksum
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|meta
operator|.
name|hasLegacyChecksum
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|meta
operator|.
name|writtenBy
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|meta
operator|.
name|name
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".si"
argument_list|)
operator|||
name|meta
operator|.
name|name
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"segments_"
argument_list|)
condition|)
block|{
name|assertThat
argument_list|(
name|meta
operator|.
name|hash
argument_list|()
operator|.
name|length
argument_list|,
name|greaterThan
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|assertConsistent
argument_list|(
name|store
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
name|TestUtil
operator|.
name|checkIndex
argument_list|(
name|store
operator|.
name|directory
argument_list|()
argument_list|)
expr_stmt|;
name|assertDeleteContent
argument_list|(
name|store
argument_list|,
name|directoryService
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|close
argument_list|(
name|store
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMixedChecksums
specifier|public
name|void
name|testMixedChecksums
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|ShardId
name|shardId
init|=
operator|new
name|ShardId
argument_list|(
operator|new
name|Index
argument_list|(
literal|"index"
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|DirectoryService
name|directoryService
init|=
operator|new
name|LuceneManagedDirectoryService
argument_list|(
name|random
argument_list|()
argument_list|)
decl_stmt|;
name|Store
name|store
init|=
operator|new
name|Store
argument_list|(
name|shardId
argument_list|,
name|ImmutableSettings
operator|.
name|EMPTY
argument_list|,
literal|null
argument_list|,
name|directoryService
argument_list|,
name|randomDistributor
argument_list|(
name|directoryService
argument_list|)
argument_list|)
decl_stmt|;
comment|// this time random codec....
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|store
operator|.
name|directory
argument_list|()
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|random
argument_list|()
argument_list|,
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setCodec
argument_list|(
name|actualDefaultCodec
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|docs
init|=
literal|1
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|docs
condition|;
name|i
operator|++
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"id"
argument_list|,
literal|""
operator|+
name|i
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
name|Field
operator|.
name|Store
operator|.
name|YES
else|:
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"body"
argument_list|,
name|TestUtil
operator|.
name|randomRealisticUnicodeString
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
name|Field
operator|.
name|Store
operator|.
name|YES
else|:
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|SortedDocValuesField
argument_list|(
literal|"dv"
argument_list|,
operator|new
name|BytesRef
argument_list|(
name|TestUtil
operator|.
name|randomRealisticUnicodeString
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|docs
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"id"
argument_list|,
literal|""
operator|+
name|i
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
name|Field
operator|.
name|Store
operator|.
name|YES
else|:
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"body"
argument_list|,
name|TestUtil
operator|.
name|randomRealisticUnicodeString
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
name|Field
operator|.
name|Store
operator|.
name|YES
else|:
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|updateDocument
argument_list|(
operator|new
name|Term
argument_list|(
literal|"id"
argument_list|,
literal|""
operator|+
name|i
argument_list|)
argument_list|,
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|DirectoryReader
operator|.
name|open
argument_list|(
name|writer
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// flush
block|}
name|Store
operator|.
name|MetadataSnapshot
name|metadata
decl_stmt|;
comment|// check before we committed
try|try
block|{
name|store
operator|.
name|getMetadata
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"no index present - expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexNotFoundException
name|ex
parameter_list|)
block|{
comment|// expected
block|}
name|assertThat
argument_list|(
name|store
operator|.
name|getMetadataOrEmpty
argument_list|()
argument_list|,
name|is
argument_list|(
name|Store
operator|.
name|MetadataSnapshot
operator|.
name|EMPTY
argument_list|)
argument_list|)
expr_stmt|;
comment|// nothing committed
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|Store
operator|.
name|LegacyChecksums
name|checksums
init|=
operator|new
name|Store
operator|.
name|LegacyChecksums
argument_list|()
decl_stmt|;
name|metadata
operator|=
name|store
operator|.
name|getMetadata
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|metadata
operator|.
name|asMap
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|StoreFileMetaData
name|meta
range|:
name|metadata
control|)
block|{
try|try
init|(
name|IndexInput
name|input
init|=
name|store
operator|.
name|directory
argument_list|()
operator|.
name|openInput
argument_list|(
name|meta
operator|.
name|name
argument_list|()
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
init|)
block|{
if|if
condition|(
name|meta
operator|.
name|checksum
argument_list|()
operator|==
literal|null
condition|)
block|{
name|String
name|checksum
init|=
literal|null
decl_stmt|;
try|try
block|{
name|CodecUtil
operator|.
name|retrieveChecksum
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected a corrupt index - posting format has not checksums"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CorruptIndexException
name|ex
parameter_list|)
block|{
try|try
init|(
name|ChecksumIndexInput
name|checksumIndexInput
init|=
name|store
operator|.
name|directory
argument_list|()
operator|.
name|openChecksumInput
argument_list|(
name|meta
operator|.
name|name
argument_list|()
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
init|)
block|{
name|checksumIndexInput
operator|.
name|seek
argument_list|(
name|meta
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|checksum
operator|=
name|Store
operator|.
name|digestToString
argument_list|(
name|checksumIndexInput
operator|.
name|getChecksum
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// fine - it's a postings format without checksums
name|checksums
operator|.
name|add
argument_list|(
operator|new
name|StoreFileMetaData
argument_list|(
name|meta
operator|.
name|name
argument_list|()
argument_list|,
name|meta
operator|.
name|length
argument_list|()
argument_list|,
name|checksum
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|String
name|checksum
init|=
name|Store
operator|.
name|digestToString
argument_list|(
name|CodecUtil
operator|.
name|retrieveChecksum
argument_list|(
name|input
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
literal|"File: "
operator|+
name|meta
operator|.
name|name
argument_list|()
operator|+
literal|" has a different checksum"
argument_list|,
name|meta
operator|.
name|checksum
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|checksum
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|meta
operator|.
name|hasLegacyChecksum
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|meta
operator|.
name|writtenBy
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|assertConsistent
argument_list|(
name|store
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
name|checksums
operator|.
name|write
argument_list|(
name|store
argument_list|)
expr_stmt|;
name|metadata
operator|=
name|store
operator|.
name|getMetadata
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|metadata
operator|.
name|asMap
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|StoreFileMetaData
name|meta
range|:
name|metadata
control|)
block|{
name|assertThat
argument_list|(
literal|"file: "
operator|+
name|meta
operator|.
name|name
argument_list|()
operator|+
literal|" has a null checksum"
argument_list|,
name|meta
operator|.
name|checksum
argument_list|()
argument_list|,
name|not
argument_list|(
name|nullValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|meta
operator|.
name|hasLegacyChecksum
argument_list|()
condition|)
block|{
try|try
init|(
name|ChecksumIndexInput
name|checksumIndexInput
init|=
name|store
operator|.
name|directory
argument_list|()
operator|.
name|openChecksumInput
argument_list|(
name|meta
operator|.
name|name
argument_list|()
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
init|)
block|{
name|checksumIndexInput
operator|.
name|seek
argument_list|(
name|meta
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|meta
operator|.
name|checksum
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|Store
operator|.
name|digestToString
argument_list|(
name|checksumIndexInput
operator|.
name|getChecksum
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
try|try
init|(
name|IndexInput
name|input
init|=
name|store
operator|.
name|directory
argument_list|()
operator|.
name|openInput
argument_list|(
name|meta
operator|.
name|name
argument_list|()
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
init|)
block|{
name|String
name|checksum
init|=
name|Store
operator|.
name|digestToString
argument_list|(
name|CodecUtil
operator|.
name|retrieveChecksum
argument_list|(
name|input
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
literal|"File: "
operator|+
name|meta
operator|.
name|name
argument_list|()
operator|+
literal|" has a different checksum"
argument_list|,
name|meta
operator|.
name|checksum
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|checksum
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|meta
operator|.
name|hasLegacyChecksum
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|meta
operator|.
name|writtenBy
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|assertConsistent
argument_list|(
name|store
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
name|TestUtil
operator|.
name|checkIndex
argument_list|(
name|store
operator|.
name|directory
argument_list|()
argument_list|)
expr_stmt|;
name|assertDeleteContent
argument_list|(
name|store
argument_list|,
name|directoryService
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|close
argument_list|(
name|store
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRenameFile
specifier|public
name|void
name|testRenameFile
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|ShardId
name|shardId
init|=
operator|new
name|ShardId
argument_list|(
operator|new
name|Index
argument_list|(
literal|"index"
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|DirectoryService
name|directoryService
init|=
operator|new
name|LuceneManagedDirectoryService
argument_list|(
name|random
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Store
name|store
init|=
operator|new
name|Store
argument_list|(
name|shardId
argument_list|,
name|ImmutableSettings
operator|.
name|EMPTY
argument_list|,
literal|null
argument_list|,
name|directoryService
argument_list|,
name|randomDistributor
argument_list|(
name|directoryService
argument_list|)
argument_list|)
decl_stmt|;
block|{
name|IndexOutput
name|output
init|=
name|store
operator|.
name|directory
argument_list|()
operator|.
name|createOutput
argument_list|(
literal|"foo.bar"
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
name|int
name|iters
init|=
name|scaledRandomIntBetween
argument_list|(
literal|10
argument_list|,
literal|100
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iters
condition|;
name|i
operator|++
control|)
block|{
name|BytesRef
name|bytesRef
init|=
operator|new
name|BytesRef
argument_list|(
name|TestUtil
operator|.
name|randomRealisticUnicodeString
argument_list|(
name|random
argument_list|()
argument_list|,
literal|10
argument_list|,
literal|1024
argument_list|)
argument_list|)
decl_stmt|;
name|output
operator|.
name|writeBytes
argument_list|(
name|bytesRef
operator|.
name|bytes
argument_list|,
name|bytesRef
operator|.
name|offset
argument_list|,
name|bytesRef
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
name|CodecUtil
operator|.
name|writeFooter
argument_list|(
name|output
argument_list|)
expr_stmt|;
name|output
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|store
operator|.
name|renameFile
argument_list|(
literal|"foo.bar"
argument_list|,
literal|"bar.foo"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|store
operator|.
name|directory
argument_list|()
operator|.
name|listAll
argument_list|()
operator|.
name|length
argument_list|,
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|long
name|lastChecksum
decl_stmt|;
try|try
init|(
name|IndexInput
name|input
init|=
name|store
operator|.
name|directory
argument_list|()
operator|.
name|openInput
argument_list|(
literal|"bar.foo"
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
init|)
block|{
name|lastChecksum
operator|=
name|CodecUtil
operator|.
name|checksumEntireFile
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|store
operator|.
name|directory
argument_list|()
operator|.
name|openInput
argument_list|(
literal|"foo.bar"
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"file was renamed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
decl||
name|NoSuchFileException
name|ex
parameter_list|)
block|{
comment|// expected
block|}
block|{
name|IndexOutput
name|output
init|=
name|store
operator|.
name|directory
argument_list|()
operator|.
name|createOutput
argument_list|(
literal|"foo.bar"
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
name|int
name|iters
init|=
name|scaledRandomIntBetween
argument_list|(
literal|10
argument_list|,
literal|100
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iters
condition|;
name|i
operator|++
control|)
block|{
name|BytesRef
name|bytesRef
init|=
operator|new
name|BytesRef
argument_list|(
name|TestUtil
operator|.
name|randomRealisticUnicodeString
argument_list|(
name|random
argument_list|()
argument_list|,
literal|10
argument_list|,
literal|1024
argument_list|)
argument_list|)
decl_stmt|;
name|output
operator|.
name|writeBytes
argument_list|(
name|bytesRef
operator|.
name|bytes
argument_list|,
name|bytesRef
operator|.
name|offset
argument_list|,
name|bytesRef
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
name|CodecUtil
operator|.
name|writeFooter
argument_list|(
name|output
argument_list|)
expr_stmt|;
name|output
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|store
operator|.
name|renameFile
argument_list|(
literal|"foo.bar"
argument_list|,
literal|"bar.foo"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"targe file already exists"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
comment|// expected
block|}
try|try
init|(
name|IndexInput
name|input
init|=
name|store
operator|.
name|directory
argument_list|()
operator|.
name|openInput
argument_list|(
literal|"bar.foo"
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
init|)
block|{
name|assertThat
argument_list|(
name|lastChecksum
argument_list|,
name|equalTo
argument_list|(
name|CodecUtil
operator|.
name|checksumEntireFile
argument_list|(
name|input
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|store
operator|.
name|directory
argument_list|()
operator|.
name|listAll
argument_list|()
operator|.
name|length
argument_list|,
name|is
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertDeleteContent
argument_list|(
name|store
argument_list|,
name|directoryService
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|close
argument_list|(
name|store
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testVerifyingIndexInput
specifier|public
name|void
name|testVerifyingIndexInput
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexOutput
name|output
init|=
name|dir
operator|.
name|createOutput
argument_list|(
literal|"foo.bar"
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
name|int
name|iters
init|=
name|scaledRandomIntBetween
argument_list|(
literal|10
argument_list|,
literal|100
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iters
condition|;
name|i
operator|++
control|)
block|{
name|BytesRef
name|bytesRef
init|=
operator|new
name|BytesRef
argument_list|(
name|TestUtil
operator|.
name|randomRealisticUnicodeString
argument_list|(
name|random
argument_list|()
argument_list|,
literal|10
argument_list|,
literal|1024
argument_list|)
argument_list|)
decl_stmt|;
name|output
operator|.
name|writeBytes
argument_list|(
name|bytesRef
operator|.
name|bytes
argument_list|,
name|bytesRef
operator|.
name|offset
argument_list|,
name|bytesRef
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
name|CodecUtil
operator|.
name|writeFooter
argument_list|(
name|output
argument_list|)
expr_stmt|;
name|output
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Check file
name|IndexInput
name|indexInput
init|=
name|dir
operator|.
name|openInput
argument_list|(
literal|"foo.bar"
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
name|long
name|checksum
init|=
name|CodecUtil
operator|.
name|retrieveChecksum
argument_list|(
name|indexInput
argument_list|)
decl_stmt|;
name|indexInput
operator|.
name|seek
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|IndexInput
name|verifyingIndexInput
init|=
operator|new
name|Store
operator|.
name|VerifyingIndexInput
argument_list|(
name|dir
operator|.
name|openInput
argument_list|(
literal|"foo.bar"
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
argument_list|)
decl_stmt|;
name|readIndexInputFullyWithRandomSeeks
argument_list|(
name|verifyingIndexInput
argument_list|)
expr_stmt|;
name|Store
operator|.
name|verify
argument_list|(
name|verifyingIndexInput
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|checksum
argument_list|,
name|equalTo
argument_list|(
operator|(
operator|(
name|ChecksumIndexInput
operator|)
name|verifyingIndexInput
operator|)
operator|.
name|getChecksum
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|close
argument_list|(
name|indexInput
argument_list|,
name|verifyingIndexInput
argument_list|)
expr_stmt|;
comment|// Corrupt file and check again
name|corruptFile
argument_list|(
name|dir
argument_list|,
literal|"foo.bar"
argument_list|,
literal|"foo1.bar"
argument_list|)
expr_stmt|;
name|verifyingIndexInput
operator|=
operator|new
name|Store
operator|.
name|VerifyingIndexInput
argument_list|(
name|dir
operator|.
name|openInput
argument_list|(
literal|"foo1.bar"
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
argument_list|)
expr_stmt|;
name|readIndexInputFullyWithRandomSeeks
argument_list|(
name|verifyingIndexInput
argument_list|)
expr_stmt|;
try|try
block|{
name|Store
operator|.
name|verify
argument_list|(
name|verifyingIndexInput
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should be a corrupted index"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CorruptIndexException
name|ex
parameter_list|)
block|{
comment|// ok
block|}
name|IOUtils
operator|.
name|close
argument_list|(
name|verifyingIndexInput
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|close
argument_list|(
name|dir
argument_list|)
expr_stmt|;
block|}
DECL|method|readIndexInputFullyWithRandomSeeks
specifier|private
name|void
name|readIndexInputFullyWithRandomSeeks
parameter_list|(
name|IndexInput
name|indexInput
parameter_list|)
throws|throws
name|IOException
block|{
name|BytesRef
name|ref
init|=
operator|new
name|BytesRef
argument_list|(
name|scaledRandomIntBetween
argument_list|(
literal|1
argument_list|,
literal|1024
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|pos
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|pos
operator|<
name|indexInput
operator|.
name|length
argument_list|()
condition|)
block|{
name|assertEquals
argument_list|(
name|pos
argument_list|,
name|indexInput
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|op
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
decl_stmt|;
if|if
condition|(
name|op
operator|==
literal|0
condition|)
block|{
name|int
name|shift
init|=
literal|100
operator|-
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|200
argument_list|)
decl_stmt|;
name|pos
operator|=
name|Math
operator|.
name|min
argument_list|(
name|indexInput
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|,
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|pos
operator|+
name|shift
argument_list|)
argument_list|)
expr_stmt|;
name|indexInput
operator|.
name|seek
argument_list|(
name|pos
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|op
operator|==
literal|1
condition|)
block|{
name|indexInput
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|pos
operator|++
expr_stmt|;
block|}
else|else
block|{
name|int
name|min
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|min
argument_list|(
name|indexInput
operator|.
name|length
argument_list|()
operator|-
name|pos
argument_list|,
name|ref
operator|.
name|bytes
operator|.
name|length
argument_list|)
decl_stmt|;
name|indexInput
operator|.
name|readBytes
argument_list|(
name|ref
operator|.
name|bytes
argument_list|,
name|ref
operator|.
name|offset
argument_list|,
name|min
argument_list|)
expr_stmt|;
name|pos
operator|+=
name|min
expr_stmt|;
block|}
block|}
block|}
DECL|method|corruptFile
specifier|private
name|void
name|corruptFile
parameter_list|(
name|Directory
name|dir
parameter_list|,
name|String
name|fileIn
parameter_list|,
name|String
name|fileOut
parameter_list|)
throws|throws
name|IOException
block|{
name|IndexInput
name|input
init|=
name|dir
operator|.
name|openInput
argument_list|(
name|fileIn
argument_list|,
name|IOContext
operator|.
name|READONCE
argument_list|)
decl_stmt|;
name|IndexOutput
name|output
init|=
name|dir
operator|.
name|createOutput
argument_list|(
name|fileOut
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
name|long
name|len
init|=
name|input
operator|.
name|length
argument_list|()
decl_stmt|;
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
literal|1024
index|]
decl_stmt|;
name|long
name|broken
init|=
name|randomInt
argument_list|(
operator|(
name|int
operator|)
name|len
argument_list|)
decl_stmt|;
name|long
name|pos
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|pos
operator|<
name|len
condition|)
block|{
name|int
name|min
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|min
argument_list|(
name|input
operator|.
name|length
argument_list|()
operator|-
name|pos
argument_list|,
name|b
operator|.
name|length
argument_list|)
decl_stmt|;
name|input
operator|.
name|readBytes
argument_list|(
name|b
argument_list|,
literal|0
argument_list|,
name|min
argument_list|)
expr_stmt|;
if|if
condition|(
name|broken
operator|>=
name|pos
operator|&&
name|broken
operator|<
name|pos
operator|+
name|min
condition|)
block|{
comment|// Flip one byte
name|int
name|flipPos
init|=
call|(
name|int
call|)
argument_list|(
name|broken
operator|-
name|pos
argument_list|)
decl_stmt|;
name|b
index|[
name|flipPos
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|b
index|[
name|flipPos
index|]
operator|^
literal|42
argument_list|)
expr_stmt|;
block|}
name|output
operator|.
name|writeBytes
argument_list|(
name|b
argument_list|,
name|min
argument_list|)
expr_stmt|;
name|pos
operator|+=
name|min
expr_stmt|;
block|}
name|IOUtils
operator|.
name|close
argument_list|(
name|input
argument_list|,
name|output
argument_list|)
expr_stmt|;
block|}
DECL|method|assertDeleteContent
specifier|public
name|void
name|assertDeleteContent
parameter_list|(
name|Store
name|store
parameter_list|,
name|DirectoryService
name|service
parameter_list|)
throws|throws
name|IOException
block|{
name|store
operator|.
name|deleteContent
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|Arrays
operator|.
name|toString
argument_list|(
name|store
operator|.
name|directory
argument_list|()
operator|.
name|listAll
argument_list|()
argument_list|)
argument_list|,
name|store
operator|.
name|directory
argument_list|()
operator|.
name|listAll
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|store
operator|.
name|stats
argument_list|()
operator|.
name|sizeInBytes
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0l
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Directory
name|dir
range|:
name|service
operator|.
name|build
argument_list|()
control|)
block|{
name|assertThat
argument_list|(
name|dir
operator|.
name|listAll
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|LuceneManagedDirectoryService
specifier|private
specifier|static
specifier|final
class|class
name|LuceneManagedDirectoryService
implements|implements
name|DirectoryService
block|{
DECL|field|dirs
specifier|private
specifier|final
name|Directory
index|[]
name|dirs
decl_stmt|;
DECL|field|random
specifier|private
specifier|final
name|Random
name|random
decl_stmt|;
DECL|method|LuceneManagedDirectoryService
specifier|public
name|LuceneManagedDirectoryService
parameter_list|(
name|Random
name|random
parameter_list|)
block|{
name|this
argument_list|(
name|random
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|LuceneManagedDirectoryService
specifier|public
name|LuceneManagedDirectoryService
parameter_list|(
name|Random
name|random
parameter_list|,
name|boolean
name|preventDoubleWrite
parameter_list|)
block|{
name|this
operator|.
name|dirs
operator|=
operator|new
name|Directory
index|[
literal|1
operator|+
name|random
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dirs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|dirs
index|[
name|i
index|]
operator|=
name|newDirectory
argument_list|(
name|random
argument_list|)
expr_stmt|;
if|if
condition|(
name|dirs
index|[
name|i
index|]
operator|instanceof
name|MockDirectoryWrapper
condition|)
block|{
operator|(
operator|(
name|MockDirectoryWrapper
operator|)
name|dirs
index|[
name|i
index|]
operator|)
operator|.
name|setPreventDoubleWrite
argument_list|(
name|preventDoubleWrite
argument_list|)
expr_stmt|;
comment|// TODO: fix this test to handle virus checker
operator|(
operator|(
name|MockDirectoryWrapper
operator|)
name|dirs
index|[
name|i
index|]
operator|)
operator|.
name|setEnableVirusScanner
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
name|this
operator|.
name|random
operator|=
name|random
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|build
specifier|public
name|Directory
index|[]
name|build
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|dirs
return|;
block|}
annotation|@
name|Override
DECL|method|throttleTimeInNanos
specifier|public
name|long
name|throttleTimeInNanos
parameter_list|()
block|{
return|return
name|random
operator|.
name|nextInt
argument_list|(
literal|1000
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|renameFile
specifier|public
name|void
name|renameFile
parameter_list|(
name|Directory
name|dir
parameter_list|,
name|String
name|from
parameter_list|,
name|String
name|to
parameter_list|)
throws|throws
name|IOException
block|{
name|dir
operator|.
name|copy
argument_list|(
name|dir
argument_list|,
name|from
argument_list|,
name|to
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
name|dir
operator|.
name|deleteFile
argument_list|(
name|from
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|fullDelete
specifier|public
name|void
name|fullDelete
parameter_list|(
name|Directory
name|dir
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|String
name|file
range|:
name|dir
operator|.
name|listAll
argument_list|()
control|)
block|{
name|dir
operator|.
name|deleteFile
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|assertConsistent
specifier|public
specifier|static
name|void
name|assertConsistent
parameter_list|(
name|Store
name|store
parameter_list|,
name|Store
operator|.
name|MetadataSnapshot
name|metadata
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|String
name|file
range|:
name|store
operator|.
name|directory
argument_list|()
operator|.
name|listAll
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
literal|"write.lock"
operator|.
name|equals
argument_list|(
name|file
argument_list|)
operator|&&
operator|!
name|IndexFileNames
operator|.
name|SEGMENTS_GEN
operator|.
name|equals
argument_list|(
name|file
argument_list|)
operator|&&
operator|!
name|Store
operator|.
name|isChecksum
argument_list|(
name|file
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
name|file
operator|+
literal|" is not in the map: "
operator|+
name|metadata
operator|.
name|asMap
argument_list|()
operator|.
name|size
argument_list|()
operator|+
literal|" vs. "
operator|+
name|store
operator|.
name|directory
argument_list|()
operator|.
name|listAll
argument_list|()
operator|.
name|length
argument_list|,
name|metadata
operator|.
name|asMap
argument_list|()
operator|.
name|containsKey
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertFalse
argument_list|(
name|file
operator|+
literal|" is not in the map: "
operator|+
name|metadata
operator|.
name|asMap
argument_list|()
operator|.
name|size
argument_list|()
operator|+
literal|" vs. "
operator|+
name|store
operator|.
name|directory
argument_list|()
operator|.
name|listAll
argument_list|()
operator|.
name|length
argument_list|,
name|metadata
operator|.
name|asMap
argument_list|()
operator|.
name|containsKey
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|randomDistributor
specifier|private
name|Distributor
name|randomDistributor
parameter_list|(
name|DirectoryService
name|service
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|randomDistributor
argument_list|(
name|random
argument_list|()
argument_list|,
name|service
argument_list|)
return|;
block|}
DECL|method|randomDistributor
specifier|private
name|Distributor
name|randomDistributor
parameter_list|(
name|Random
name|random
parameter_list|,
name|DirectoryService
name|service
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|random
operator|.
name|nextBoolean
argument_list|()
condition|?
operator|new
name|LeastUsedDistributor
argument_list|(
name|service
argument_list|)
else|:
operator|new
name|RandomWeightedDistributor
argument_list|(
name|service
argument_list|)
return|;
block|}
annotation|@
name|Test
DECL|method|testRecoveryDiff
specifier|public
name|void
name|testRecoveryDiff
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|int
name|numDocs
init|=
literal|2
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Document
argument_list|>
name|docs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
literal|"id"
argument_list|,
literal|""
operator|+
name|i
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
name|Field
operator|.
name|Store
operator|.
name|YES
else|:
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"body"
argument_list|,
name|TestUtil
operator|.
name|randomRealisticUnicodeString
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
name|Field
operator|.
name|Store
operator|.
name|YES
else|:
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|SortedDocValuesField
argument_list|(
literal|"dv"
argument_list|,
operator|new
name|BytesRef
argument_list|(
name|TestUtil
operator|.
name|randomRealisticUnicodeString
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|long
name|seed
init|=
name|random
argument_list|()
operator|.
name|nextLong
argument_list|()
decl_stmt|;
name|Store
operator|.
name|MetadataSnapshot
name|first
decl_stmt|;
block|{
name|Random
name|random
init|=
operator|new
name|Random
argument_list|(
name|seed
argument_list|)
decl_stmt|;
name|IndexWriterConfig
name|iwc
init|=
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
operator|.
name|setCodec
argument_list|(
name|actualDefaultCodec
argument_list|()
argument_list|)
decl_stmt|;
name|iwc
operator|.
name|setMergePolicy
argument_list|(
name|NoMergePolicy
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|iwc
operator|.
name|setUseCompoundFile
argument_list|(
name|random
operator|.
name|nextBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|iwc
operator|.
name|setMaxThreadStates
argument_list|(
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|ShardId
name|shardId
init|=
operator|new
name|ShardId
argument_list|(
operator|new
name|Index
argument_list|(
literal|"index"
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|DirectoryService
name|directoryService
init|=
operator|new
name|LuceneManagedDirectoryService
argument_list|(
name|random
argument_list|)
decl_stmt|;
name|Store
name|store
init|=
operator|new
name|Store
argument_list|(
name|shardId
argument_list|,
name|ImmutableSettings
operator|.
name|EMPTY
argument_list|,
literal|null
argument_list|,
name|directoryService
argument_list|,
name|randomDistributor
argument_list|(
name|random
argument_list|,
name|directoryService
argument_list|)
argument_list|)
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|store
operator|.
name|directory
argument_list|()
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|lotsOfSegments
init|=
name|rarely
argument_list|(
name|random
argument_list|)
decl_stmt|;
for|for
control|(
name|Document
name|d
range|:
name|docs
control|)
block|{
name|writer
operator|.
name|addDocument
argument_list|(
name|d
argument_list|)
expr_stmt|;
if|if
condition|(
name|lotsOfSegments
operator|&&
name|random
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|rarely
argument_list|(
name|random
argument_list|)
condition|)
block|{
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|first
operator|=
name|store
operator|.
name|getMetadata
argument_list|()
expr_stmt|;
name|assertDeleteContent
argument_list|(
name|store
argument_list|,
name|directoryService
argument_list|)
expr_stmt|;
name|store
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|long
name|time
init|=
operator|new
name|Date
argument_list|()
operator|.
name|getTime
argument_list|()
decl_stmt|;
while|while
condition|(
name|time
operator|==
operator|new
name|Date
argument_list|()
operator|.
name|getTime
argument_list|()
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
comment|// bump the time
block|}
name|Store
operator|.
name|MetadataSnapshot
name|second
decl_stmt|;
name|Store
name|store
decl_stmt|;
block|{
name|Random
name|random
init|=
operator|new
name|Random
argument_list|(
name|seed
argument_list|)
decl_stmt|;
name|IndexWriterConfig
name|iwc
init|=
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
operator|.
name|setCodec
argument_list|(
name|actualDefaultCodec
argument_list|()
argument_list|)
decl_stmt|;
name|iwc
operator|.
name|setMergePolicy
argument_list|(
name|NoMergePolicy
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|iwc
operator|.
name|setUseCompoundFile
argument_list|(
name|random
operator|.
name|nextBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|iwc
operator|.
name|setMaxThreadStates
argument_list|(
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|ShardId
name|shardId
init|=
operator|new
name|ShardId
argument_list|(
operator|new
name|Index
argument_list|(
literal|"index"
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|DirectoryService
name|directoryService
init|=
operator|new
name|LuceneManagedDirectoryService
argument_list|(
name|random
argument_list|)
decl_stmt|;
name|store
operator|=
operator|new
name|Store
argument_list|(
name|shardId
argument_list|,
name|ImmutableSettings
operator|.
name|EMPTY
argument_list|,
literal|null
argument_list|,
name|directoryService
argument_list|,
name|randomDistributor
argument_list|(
name|random
argument_list|,
name|directoryService
argument_list|)
argument_list|)
expr_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|store
operator|.
name|directory
argument_list|()
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|lotsOfSegments
init|=
name|rarely
argument_list|(
name|random
argument_list|)
decl_stmt|;
for|for
control|(
name|Document
name|d
range|:
name|docs
control|)
block|{
name|writer
operator|.
name|addDocument
argument_list|(
name|d
argument_list|)
expr_stmt|;
if|if
condition|(
name|lotsOfSegments
operator|&&
name|random
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|rarely
argument_list|(
name|random
argument_list|)
condition|)
block|{
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|second
operator|=
name|store
operator|.
name|getMetadata
argument_list|()
expr_stmt|;
block|}
name|Store
operator|.
name|RecoveryDiff
name|diff
init|=
name|first
operator|.
name|recoveryDiff
argument_list|(
name|second
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|first
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|second
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|StoreFileMetaData
name|md
range|:
name|first
control|)
block|{
name|assertThat
argument_list|(
name|second
operator|.
name|get
argument_list|(
name|md
operator|.
name|name
argument_list|()
argument_list|)
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// si files are different - containing timestamps etc
name|assertThat
argument_list|(
name|second
operator|.
name|get
argument_list|(
name|md
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|isSame
argument_list|(
name|md
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|md
operator|.
name|name
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".si"
argument_list|)
operator|==
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|diff
operator|.
name|different
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|first
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|diff
operator|.
name|identical
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// commit point is identical
name|assertThat
argument_list|(
name|diff
operator|.
name|missing
argument_list|,
name|empty
argument_list|()
argument_list|)
expr_stmt|;
comment|// check the self diff
name|Store
operator|.
name|RecoveryDiff
name|selfDiff
init|=
name|first
operator|.
name|recoveryDiff
argument_list|(
name|first
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|selfDiff
operator|.
name|identical
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|first
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|selfDiff
operator|.
name|different
argument_list|,
name|empty
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|selfDiff
operator|.
name|missing
argument_list|,
name|empty
argument_list|()
argument_list|)
expr_stmt|;
comment|// lets add some deletes
name|Random
name|random
init|=
operator|new
name|Random
argument_list|(
name|seed
argument_list|)
decl_stmt|;
name|IndexWriterConfig
name|iwc
init|=
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
operator|.
name|setCodec
argument_list|(
name|actualDefaultCodec
argument_list|()
argument_list|)
decl_stmt|;
name|iwc
operator|.
name|setMergePolicy
argument_list|(
name|NoMergePolicy
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|iwc
operator|.
name|setUseCompoundFile
argument_list|(
name|random
operator|.
name|nextBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|iwc
operator|.
name|setMaxThreadStates
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|iwc
operator|.
name|setOpenMode
argument_list|(
name|IndexWriterConfig
operator|.
name|OpenMode
operator|.
name|APPEND
argument_list|)
expr_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|store
operator|.
name|directory
argument_list|()
argument_list|,
name|iwc
argument_list|)
decl_stmt|;
name|writer
operator|.
name|deleteDocuments
argument_list|(
operator|new
name|Term
argument_list|(
literal|"id"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|numDocs
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|Store
operator|.
name|MetadataSnapshot
name|metadata
init|=
name|store
operator|.
name|getMetadata
argument_list|()
decl_stmt|;
name|StoreFileMetaData
name|delFile
init|=
literal|null
decl_stmt|;
for|for
control|(
name|StoreFileMetaData
name|md
range|:
name|metadata
control|)
block|{
if|if
condition|(
name|md
operator|.
name|name
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".del"
argument_list|)
condition|)
block|{
name|delFile
operator|=
name|md
expr_stmt|;
break|break;
block|}
block|}
name|Store
operator|.
name|RecoveryDiff
name|afterDeleteDiff
init|=
name|metadata
operator|.
name|recoveryDiff
argument_list|(
name|second
argument_list|)
decl_stmt|;
if|if
condition|(
name|delFile
operator|!=
literal|null
condition|)
block|{
name|assertThat
argument_list|(
name|afterDeleteDiff
operator|.
name|identical
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|metadata
operator|.
name|size
argument_list|()
operator|-
literal|2
argument_list|)
argument_list|)
expr_stmt|;
comment|// segments_N + del file
name|assertThat
argument_list|(
name|afterDeleteDiff
operator|.
name|different
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|afterDeleteDiff
operator|.
name|missing
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// an entire segment must be missing (single doc segment got dropped)
name|assertThat
argument_list|(
name|afterDeleteDiff
operator|.
name|identical
operator|.
name|size
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|afterDeleteDiff
operator|.
name|different
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|afterDeleteDiff
operator|.
name|missing
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// the commit file is different
block|}
comment|// check the self diff
name|selfDiff
operator|=
name|metadata
operator|.
name|recoveryDiff
argument_list|(
name|metadata
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|selfDiff
operator|.
name|identical
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|metadata
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|selfDiff
operator|.
name|different
argument_list|,
name|empty
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|selfDiff
operator|.
name|missing
argument_list|,
name|empty
argument_list|()
argument_list|)
expr_stmt|;
comment|// add a new commit
name|iwc
operator|=
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
operator|.
name|setCodec
argument_list|(
name|actualDefaultCodec
argument_list|()
argument_list|)
expr_stmt|;
name|iwc
operator|.
name|setMergePolicy
argument_list|(
name|NoMergePolicy
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|iwc
operator|.
name|setUseCompoundFile
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// force CFS - easier to test here since we know it will add 3 files
name|iwc
operator|.
name|setMaxThreadStates
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|iwc
operator|.
name|setOpenMode
argument_list|(
name|IndexWriterConfig
operator|.
name|OpenMode
operator|.
name|APPEND
argument_list|)
expr_stmt|;
name|writer
operator|=
operator|new
name|IndexWriter
argument_list|(
name|store
operator|.
name|directory
argument_list|()
argument_list|,
name|iwc
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|docs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|Store
operator|.
name|MetadataSnapshot
name|newCommitMetaData
init|=
name|store
operator|.
name|getMetadata
argument_list|()
decl_stmt|;
name|Store
operator|.
name|RecoveryDiff
name|newCommitDiff
init|=
name|newCommitMetaData
operator|.
name|recoveryDiff
argument_list|(
name|metadata
argument_list|)
decl_stmt|;
if|if
condition|(
name|delFile
operator|!=
literal|null
condition|)
block|{
name|assertThat
argument_list|(
name|newCommitDiff
operator|.
name|identical
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|newCommitMetaData
operator|.
name|size
argument_list|()
operator|-
literal|5
argument_list|)
argument_list|)
expr_stmt|;
comment|// segments_N, del file, cfs, cfe, si for the new segment
name|assertThat
argument_list|(
name|newCommitDiff
operator|.
name|different
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// the del file must be different
name|assertThat
argument_list|(
name|newCommitDiff
operator|.
name|different
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|name
argument_list|()
argument_list|,
name|endsWith
argument_list|(
literal|".del"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|newCommitDiff
operator|.
name|missing
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
comment|// segments_N,cfs, cfe, si for the new segment
block|}
else|else
block|{
name|assertThat
argument_list|(
name|newCommitDiff
operator|.
name|identical
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|newCommitMetaData
operator|.
name|size
argument_list|()
operator|-
literal|4
argument_list|)
argument_list|)
expr_stmt|;
comment|// segments_N, cfs, cfe, si for the new segment
name|assertThat
argument_list|(
name|newCommitDiff
operator|.
name|different
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|newCommitDiff
operator|.
name|missing
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
comment|// an entire segment must be missing (single doc segment got dropped)  plus the commit is different
block|}
name|store
operator|.
name|deleteContent
argument_list|()
expr_stmt|;
name|IOUtils
operator|.
name|close
argument_list|(
name|store
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

