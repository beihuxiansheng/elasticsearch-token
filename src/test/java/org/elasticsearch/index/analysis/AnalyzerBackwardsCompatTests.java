begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.analysis
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchTokenStreamTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|RandomizedTest
operator|.
name|scaledRandomIntBetween
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
operator|.
name|SETTING_VERSION_CREATED
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
DECL|class|AnalyzerBackwardsCompatTests
specifier|public
class|class
name|AnalyzerBackwardsCompatTests
extends|extends
name|ElasticsearchTokenStreamTestCase
block|{
annotation|@
name|Ignore
DECL|method|testNoStopwordsAfter
specifier|private
name|void
name|testNoStopwordsAfter
parameter_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|Version
name|noStopwordVersion
parameter_list|,
name|String
name|type
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|iters
init|=
name|scaledRandomIntBetween
argument_list|(
literal|10
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|org
operator|.
name|elasticsearch
operator|.
name|Version
name|version
init|=
name|org
operator|.
name|elasticsearch
operator|.
name|Version
operator|.
name|CURRENT
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iters
condition|;
name|i
operator|++
control|)
block|{
name|ImmutableSettings
operator|.
name|Builder
name|builder
init|=
name|ImmutableSettings
operator|.
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.my_stop.type"
argument_list|,
literal|"stop"
argument_list|)
decl_stmt|;
if|if
condition|(
name|version
operator|.
name|onOrAfter
argument_list|(
name|noStopwordVersion
argument_list|)
condition|)
block|{
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|builder
operator|.
name|put
argument_list|(
name|SETTING_VERSION_CREATED
argument_list|,
name|version
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|builder
operator|.
name|put
argument_list|(
name|SETTING_VERSION_CREATED
argument_list|,
name|version
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|put
argument_list|(
literal|"index.analysis.analyzer.foo.type"
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|AnalysisService
name|analysisService
init|=
name|AnalysisTestsHelper
operator|.
name|createAnalysisServiceFromSettings
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|NamedAnalyzer
name|analyzer
init|=
name|analysisService
operator|.
name|analyzer
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
if|if
condition|(
name|version
operator|.
name|onOrAfter
argument_list|(
name|noStopwordVersion
argument_list|)
condition|)
block|{
name|assertAnalyzesTo
argument_list|(
name|analyzer
argument_list|,
literal|"this is bogus"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"this"
block|,
literal|"is"
block|,
literal|"bogus"
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertAnalyzesTo
argument_list|(
name|analyzer
argument_list|,
literal|"this is bogus"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"bogus"
block|}
argument_list|)
expr_stmt|;
block|}
name|version
operator|=
name|randomVersion
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testPatternAnalyzer
specifier|public
name|void
name|testPatternAnalyzer
parameter_list|()
throws|throws
name|IOException
block|{
name|testNoStopwordsAfter
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|Version
operator|.
name|V_1_0_0_RC1
argument_list|,
literal|"pattern"
argument_list|)
expr_stmt|;
block|}
DECL|method|testStandardHTMLStripAnalyzer
specifier|public
name|void
name|testStandardHTMLStripAnalyzer
parameter_list|()
throws|throws
name|IOException
block|{
name|testNoStopwordsAfter
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|Version
operator|.
name|V_1_0_0_RC1
argument_list|,
literal|"standard_html_strip"
argument_list|)
expr_stmt|;
block|}
DECL|method|testStandardAnalyzer
specifier|public
name|void
name|testStandardAnalyzer
parameter_list|()
throws|throws
name|IOException
block|{
name|testNoStopwordsAfter
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|Version
operator|.
name|V_1_0_0_Beta1
argument_list|,
literal|"standard"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

