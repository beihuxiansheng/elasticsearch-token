begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.elasticsearch.index.analysis
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
package|;
end_package

begin_import
import|import
name|com
operator|.
name|ibm
operator|.
name|icu
operator|.
name|text
operator|.
name|Collator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|ibm
operator|.
name|icu
operator|.
name|text
operator|.
name|RuleBasedCollator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|ibm
operator|.
name|icu
operator|.
name|util
operator|.
name|ULocale
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|core
operator|.
name|KeywordTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|CharTermAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Injector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|ModulesBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|SettingsModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|Environment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|EnvironmentModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexNameModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|settings
operator|.
name|IndexSettingsModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|analysis
operator|.
name|IndicesAnalysisModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|analysis
operator|.
name|IndicesAnalysisService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|testng
operator|.
name|annotations
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|MatcherAssert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_comment
comment|// Tests borrowed from Solr's Icu collation key filter factory test.
end_comment

begin_class
DECL|class|SimpleIcuCollationTokenFilterTests
specifier|public
class|class
name|SimpleIcuCollationTokenFilterTests
block|{
comment|/*     * Turkish has some funny casing.     * This test shows how you can solve this kind of thing easily with collation.     * Instead of using LowerCaseFilter, use a turkish collator with primary strength.     * Then things will sort and match correctly.     */
annotation|@
name|Test
DECL|method|testBasicUsage
specifier|public
name|void
name|testBasicUsage
parameter_list|()
throws|throws
name|Exception
block|{
name|Index
name|index
init|=
operator|new
name|Index
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|Settings
name|settings
init|=
name|ImmutableSettings
operator|.
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.myCollator.type"
argument_list|,
literal|"icu_collation"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.myCollator.language"
argument_list|,
literal|"tr"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.myCollator.strength"
argument_list|,
literal|"primary"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|AnalysisService
name|analysisService
init|=
name|createAnalysisService
argument_list|(
name|index
argument_list|,
name|settings
argument_list|)
decl_stmt|;
name|String
name|turkishUpperCase
init|=
literal|"I WÄ°LL USE TURKÄ°SH CASING"
decl_stmt|;
name|String
name|turkishLowerCase
init|=
literal|"Ä± will use turkish casÄ±ng"
decl_stmt|;
name|TokenFilterFactory
name|filterFactory
init|=
name|analysisService
operator|.
name|tokenFilter
argument_list|(
literal|"myCollator"
argument_list|)
decl_stmt|;
name|TokenStream
name|tsUpper
init|=
name|filterFactory
operator|.
name|create
argument_list|(
operator|new
name|KeywordTokenizer
argument_list|(
operator|new
name|StringReader
argument_list|(
name|turkishUpperCase
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|TokenStream
name|tsLower
init|=
name|filterFactory
operator|.
name|create
argument_list|(
operator|new
name|KeywordTokenizer
argument_list|(
operator|new
name|StringReader
argument_list|(
name|turkishLowerCase
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertCollatesToSame
argument_list|(
name|tsUpper
argument_list|,
name|tsLower
argument_list|)
expr_stmt|;
block|}
comment|/*     * Test usage of the decomposition option for unicode normalization.     */
annotation|@
name|Test
DECL|method|testNormalization
specifier|public
name|void
name|testNormalization
parameter_list|()
throws|throws
name|IOException
block|{
name|Index
name|index
init|=
operator|new
name|Index
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|Settings
name|settings
init|=
name|ImmutableSettings
operator|.
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.myCollator.type"
argument_list|,
literal|"icu_collation"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.myCollator.language"
argument_list|,
literal|"tr"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.myCollator.strength"
argument_list|,
literal|"primary"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.myCollator.decomposition"
argument_list|,
literal|"canonical"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|AnalysisService
name|analysisService
init|=
name|createAnalysisService
argument_list|(
name|index
argument_list|,
name|settings
argument_list|)
decl_stmt|;
name|String
name|turkishUpperCase
init|=
literal|"I W\u0049\u0307LL USE TURKÄ°SH CASING"
decl_stmt|;
name|String
name|turkishLowerCase
init|=
literal|"Ä± will use turkish casÄ±ng"
decl_stmt|;
name|TokenFilterFactory
name|filterFactory
init|=
name|analysisService
operator|.
name|tokenFilter
argument_list|(
literal|"myCollator"
argument_list|)
decl_stmt|;
name|TokenStream
name|tsUpper
init|=
name|filterFactory
operator|.
name|create
argument_list|(
operator|new
name|KeywordTokenizer
argument_list|(
operator|new
name|StringReader
argument_list|(
name|turkishUpperCase
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|TokenStream
name|tsLower
init|=
name|filterFactory
operator|.
name|create
argument_list|(
operator|new
name|KeywordTokenizer
argument_list|(
operator|new
name|StringReader
argument_list|(
name|turkishLowerCase
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertCollatesToSame
argument_list|(
name|tsUpper
argument_list|,
name|tsLower
argument_list|)
expr_stmt|;
block|}
comment|/*     * Test secondary strength, for english case is not significant.     */
annotation|@
name|Test
DECL|method|testSecondaryStrength
specifier|public
name|void
name|testSecondaryStrength
parameter_list|()
throws|throws
name|IOException
block|{
name|Index
name|index
init|=
operator|new
name|Index
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|Settings
name|settings
init|=
name|ImmutableSettings
operator|.
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.myCollator.type"
argument_list|,
literal|"icu_collation"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.myCollator.language"
argument_list|,
literal|"en"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.myCollator.strength"
argument_list|,
literal|"secondary"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.myCollator.decomposition"
argument_list|,
literal|"no"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|AnalysisService
name|analysisService
init|=
name|createAnalysisService
argument_list|(
name|index
argument_list|,
name|settings
argument_list|)
decl_stmt|;
name|String
name|upperCase
init|=
literal|"TESTING"
decl_stmt|;
name|String
name|lowerCase
init|=
literal|"testing"
decl_stmt|;
name|TokenFilterFactory
name|filterFactory
init|=
name|analysisService
operator|.
name|tokenFilter
argument_list|(
literal|"myCollator"
argument_list|)
decl_stmt|;
name|TokenStream
name|tsUpper
init|=
name|filterFactory
operator|.
name|create
argument_list|(
operator|new
name|KeywordTokenizer
argument_list|(
operator|new
name|StringReader
argument_list|(
name|upperCase
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|TokenStream
name|tsLower
init|=
name|filterFactory
operator|.
name|create
argument_list|(
operator|new
name|KeywordTokenizer
argument_list|(
operator|new
name|StringReader
argument_list|(
name|lowerCase
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertCollatesToSame
argument_list|(
name|tsUpper
argument_list|,
name|tsLower
argument_list|)
expr_stmt|;
block|}
comment|/*     * Setting alternate=shifted to shift whitespace, punctuation and symbols     * to quaternary level     */
annotation|@
name|Test
DECL|method|testIgnorePunctuation
specifier|public
name|void
name|testIgnorePunctuation
parameter_list|()
throws|throws
name|IOException
block|{
name|Index
name|index
init|=
operator|new
name|Index
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|Settings
name|settings
init|=
name|ImmutableSettings
operator|.
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.myCollator.type"
argument_list|,
literal|"icu_collation"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.myCollator.language"
argument_list|,
literal|"en"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.myCollator.strength"
argument_list|,
literal|"primary"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.myCollator.alternate"
argument_list|,
literal|"shifted"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|AnalysisService
name|analysisService
init|=
name|createAnalysisService
argument_list|(
name|index
argument_list|,
name|settings
argument_list|)
decl_stmt|;
name|String
name|withPunctuation
init|=
literal|"foo-bar"
decl_stmt|;
name|String
name|withoutPunctuation
init|=
literal|"foo bar"
decl_stmt|;
name|TokenFilterFactory
name|filterFactory
init|=
name|analysisService
operator|.
name|tokenFilter
argument_list|(
literal|"myCollator"
argument_list|)
decl_stmt|;
name|TokenStream
name|tsPunctuation
init|=
name|filterFactory
operator|.
name|create
argument_list|(
operator|new
name|KeywordTokenizer
argument_list|(
operator|new
name|StringReader
argument_list|(
name|withPunctuation
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|TokenStream
name|tsWithoutPunctuation
init|=
name|filterFactory
operator|.
name|create
argument_list|(
operator|new
name|KeywordTokenizer
argument_list|(
operator|new
name|StringReader
argument_list|(
name|withoutPunctuation
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertCollatesToSame
argument_list|(
name|tsPunctuation
argument_list|,
name|tsWithoutPunctuation
argument_list|)
expr_stmt|;
block|}
comment|/*     * Setting alternate=shifted and variableTop to shift whitespace, but not     * punctuation or symbols, to quaternary level     */
annotation|@
name|Test
DECL|method|testIgnoreWhitespace
specifier|public
name|void
name|testIgnoreWhitespace
parameter_list|()
throws|throws
name|IOException
block|{
name|Index
name|index
init|=
operator|new
name|Index
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|Settings
name|settings
init|=
name|ImmutableSettings
operator|.
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.myCollator.type"
argument_list|,
literal|"icu_collation"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.myCollator.language"
argument_list|,
literal|"en"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.myCollator.strength"
argument_list|,
literal|"primary"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.myCollator.alternate"
argument_list|,
literal|"shifted"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.myCollator.variableTop"
argument_list|,
literal|" "
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|AnalysisService
name|analysisService
init|=
name|createAnalysisService
argument_list|(
name|index
argument_list|,
name|settings
argument_list|)
decl_stmt|;
name|String
name|withSpace
init|=
literal|"foo bar"
decl_stmt|;
name|String
name|withoutSpace
init|=
literal|"foobar"
decl_stmt|;
name|String
name|withPunctuation
init|=
literal|"foo-bar"
decl_stmt|;
name|TokenFilterFactory
name|filterFactory
init|=
name|analysisService
operator|.
name|tokenFilter
argument_list|(
literal|"myCollator"
argument_list|)
decl_stmt|;
name|TokenStream
name|tsWithSpace
init|=
name|filterFactory
operator|.
name|create
argument_list|(
operator|new
name|KeywordTokenizer
argument_list|(
operator|new
name|StringReader
argument_list|(
name|withSpace
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|TokenStream
name|tsWithoutSpace
init|=
name|filterFactory
operator|.
name|create
argument_list|(
operator|new
name|KeywordTokenizer
argument_list|(
operator|new
name|StringReader
argument_list|(
name|withoutSpace
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertCollatesToSame
argument_list|(
name|tsWithSpace
argument_list|,
name|tsWithoutSpace
argument_list|)
expr_stmt|;
comment|// now assert that punctuation still matters: foo-bar< foo bar
name|tsWithSpace
operator|=
name|filterFactory
operator|.
name|create
argument_list|(
operator|new
name|KeywordTokenizer
argument_list|(
operator|new
name|StringReader
argument_list|(
name|withSpace
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|TokenStream
name|tsWithPunctuation
init|=
name|filterFactory
operator|.
name|create
argument_list|(
operator|new
name|KeywordTokenizer
argument_list|(
operator|new
name|StringReader
argument_list|(
name|withPunctuation
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertCollation
argument_list|(
name|tsWithPunctuation
argument_list|,
name|tsWithSpace
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/*     * Setting numeric to encode digits with numeric value, so that     * foobar-9 sorts before foobar-10     */
annotation|@
name|Test
DECL|method|testNumerics
specifier|public
name|void
name|testNumerics
parameter_list|()
throws|throws
name|IOException
block|{
name|Index
name|index
init|=
operator|new
name|Index
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|Settings
name|settings
init|=
name|ImmutableSettings
operator|.
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.myCollator.type"
argument_list|,
literal|"icu_collation"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.myCollator.language"
argument_list|,
literal|"en"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.myCollator.numeric"
argument_list|,
literal|"true"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|AnalysisService
name|analysisService
init|=
name|createAnalysisService
argument_list|(
name|index
argument_list|,
name|settings
argument_list|)
decl_stmt|;
name|String
name|nine
init|=
literal|"foobar-9"
decl_stmt|;
name|String
name|ten
init|=
literal|"foobar-10"
decl_stmt|;
name|TokenFilterFactory
name|filterFactory
init|=
name|analysisService
operator|.
name|tokenFilter
argument_list|(
literal|"myCollator"
argument_list|)
decl_stmt|;
name|TokenStream
name|tsNine
init|=
name|filterFactory
operator|.
name|create
argument_list|(
operator|new
name|KeywordTokenizer
argument_list|(
operator|new
name|StringReader
argument_list|(
name|nine
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|TokenStream
name|tsTen
init|=
name|filterFactory
operator|.
name|create
argument_list|(
operator|new
name|KeywordTokenizer
argument_list|(
operator|new
name|StringReader
argument_list|(
name|ten
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertCollation
argument_list|(
name|tsNine
argument_list|,
name|tsTen
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/*     * Setting caseLevel=true to create an additional case level between     * secondary and tertiary     */
annotation|@
name|Test
DECL|method|testIgnoreAccentsButNotCase
specifier|public
name|void
name|testIgnoreAccentsButNotCase
parameter_list|()
throws|throws
name|IOException
block|{
name|Index
name|index
init|=
operator|new
name|Index
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|Settings
name|settings
init|=
name|ImmutableSettings
operator|.
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.myCollator.type"
argument_list|,
literal|"icu_collation"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.myCollator.language"
argument_list|,
literal|"en"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.myCollator.strength"
argument_list|,
literal|"primary"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.myCollator.caseLevel"
argument_list|,
literal|"true"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|AnalysisService
name|analysisService
init|=
name|createAnalysisService
argument_list|(
name|index
argument_list|,
name|settings
argument_list|)
decl_stmt|;
name|String
name|withAccents
init|=
literal|"rÃ©sumÃ©"
decl_stmt|;
name|String
name|withoutAccents
init|=
literal|"resume"
decl_stmt|;
name|String
name|withAccentsUpperCase
init|=
literal|"RÃ©sumÃ©"
decl_stmt|;
name|String
name|withoutAccentsUpperCase
init|=
literal|"Resume"
decl_stmt|;
name|TokenFilterFactory
name|filterFactory
init|=
name|analysisService
operator|.
name|tokenFilter
argument_list|(
literal|"myCollator"
argument_list|)
decl_stmt|;
name|TokenStream
name|tsWithAccents
init|=
name|filterFactory
operator|.
name|create
argument_list|(
operator|new
name|KeywordTokenizer
argument_list|(
operator|new
name|StringReader
argument_list|(
name|withAccents
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|TokenStream
name|tsWithoutAccents
init|=
name|filterFactory
operator|.
name|create
argument_list|(
operator|new
name|KeywordTokenizer
argument_list|(
operator|new
name|StringReader
argument_list|(
name|withoutAccents
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertCollatesToSame
argument_list|(
name|tsWithAccents
argument_list|,
name|tsWithoutAccents
argument_list|)
expr_stmt|;
name|TokenStream
name|tsWithAccentsUpperCase
init|=
name|filterFactory
operator|.
name|create
argument_list|(
operator|new
name|KeywordTokenizer
argument_list|(
operator|new
name|StringReader
argument_list|(
name|withAccentsUpperCase
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|TokenStream
name|tsWithoutAccentsUpperCase
init|=
name|filterFactory
operator|.
name|create
argument_list|(
operator|new
name|KeywordTokenizer
argument_list|(
operator|new
name|StringReader
argument_list|(
name|withoutAccentsUpperCase
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertCollatesToSame
argument_list|(
name|tsWithAccentsUpperCase
argument_list|,
name|tsWithoutAccentsUpperCase
argument_list|)
expr_stmt|;
comment|// now assert that case still matters: resume< Resume
name|TokenStream
name|tsLower
init|=
name|filterFactory
operator|.
name|create
argument_list|(
operator|new
name|KeywordTokenizer
argument_list|(
operator|new
name|StringReader
argument_list|(
name|withoutAccents
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|TokenStream
name|tsUpper
init|=
name|filterFactory
operator|.
name|create
argument_list|(
operator|new
name|KeywordTokenizer
argument_list|(
operator|new
name|StringReader
argument_list|(
name|withoutAccentsUpperCase
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertCollation
argument_list|(
name|tsLower
argument_list|,
name|tsUpper
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/*     * Setting caseFirst=upper to cause uppercase strings to sort     * before lowercase ones.     */
annotation|@
name|Test
DECL|method|testUpperCaseFirst
specifier|public
name|void
name|testUpperCaseFirst
parameter_list|()
throws|throws
name|IOException
block|{
name|Index
name|index
init|=
operator|new
name|Index
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|Settings
name|settings
init|=
name|ImmutableSettings
operator|.
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.myCollator.type"
argument_list|,
literal|"icu_collation"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.myCollator.language"
argument_list|,
literal|"en"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.myCollator.strength"
argument_list|,
literal|"tertiary"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.myCollator.caseFirst"
argument_list|,
literal|"upper"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|AnalysisService
name|analysisService
init|=
name|createAnalysisService
argument_list|(
name|index
argument_list|,
name|settings
argument_list|)
decl_stmt|;
name|String
name|lower
init|=
literal|"resume"
decl_stmt|;
name|String
name|upper
init|=
literal|"Resume"
decl_stmt|;
name|TokenFilterFactory
name|filterFactory
init|=
name|analysisService
operator|.
name|tokenFilter
argument_list|(
literal|"myCollator"
argument_list|)
decl_stmt|;
name|TokenStream
name|tsLower
init|=
name|filterFactory
operator|.
name|create
argument_list|(
operator|new
name|KeywordTokenizer
argument_list|(
operator|new
name|StringReader
argument_list|(
name|lower
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|TokenStream
name|tsUpper
init|=
name|filterFactory
operator|.
name|create
argument_list|(
operator|new
name|KeywordTokenizer
argument_list|(
operator|new
name|StringReader
argument_list|(
name|upper
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertCollation
argument_list|(
name|tsUpper
argument_list|,
name|tsLower
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/*     * For german, you might want oe to sort and match with o umlaut.     * This is not the default, but you can make a customized ruleset to do this.     *     * The default is DIN 5007-1, this shows how to tailor a collator to get DIN 5007-2 behavior.     *  http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4423383     */
annotation|@
name|Test
DECL|method|testCustomRules
specifier|public
name|void
name|testCustomRules
parameter_list|()
throws|throws
name|Exception
block|{
name|RuleBasedCollator
name|baseCollator
init|=
operator|(
name|RuleBasedCollator
operator|)
name|Collator
operator|.
name|getInstance
argument_list|(
operator|new
name|ULocale
argument_list|(
literal|"de_DE"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|DIN5007_2_tailorings
init|=
literal|"& ae , a\u0308& AE , A\u0308"
operator|+
literal|"& oe , o\u0308& OE , O\u0308"
operator|+
literal|"& ue , u\u0308& UE , u\u0308"
decl_stmt|;
name|RuleBasedCollator
name|tailoredCollator
init|=
operator|new
name|RuleBasedCollator
argument_list|(
name|baseCollator
operator|.
name|getRules
argument_list|()
operator|+
name|DIN5007_2_tailorings
argument_list|)
decl_stmt|;
name|String
name|tailoredRules
init|=
name|tailoredCollator
operator|.
name|getRules
argument_list|()
decl_stmt|;
name|Index
name|index
init|=
operator|new
name|Index
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|Settings
name|settings
init|=
name|ImmutableSettings
operator|.
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.myCollator.type"
argument_list|,
literal|"icu_collation"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.myCollator.rules"
argument_list|,
name|tailoredRules
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.myCollator.strength"
argument_list|,
literal|"primary"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|AnalysisService
name|analysisService
init|=
name|createAnalysisService
argument_list|(
name|index
argument_list|,
name|settings
argument_list|)
decl_stmt|;
name|String
name|germanUmlaut
init|=
literal|"TÃ¶ne"
decl_stmt|;
name|String
name|germanOE
init|=
literal|"Toene"
decl_stmt|;
name|TokenFilterFactory
name|filterFactory
init|=
name|analysisService
operator|.
name|tokenFilter
argument_list|(
literal|"myCollator"
argument_list|)
decl_stmt|;
name|TokenStream
name|tsUmlaut
init|=
name|filterFactory
operator|.
name|create
argument_list|(
operator|new
name|KeywordTokenizer
argument_list|(
operator|new
name|StringReader
argument_list|(
name|germanUmlaut
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|TokenStream
name|tsOE
init|=
name|filterFactory
operator|.
name|create
argument_list|(
operator|new
name|KeywordTokenizer
argument_list|(
operator|new
name|StringReader
argument_list|(
name|germanOE
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertCollatesToSame
argument_list|(
name|tsUmlaut
argument_list|,
name|tsOE
argument_list|)
expr_stmt|;
block|}
DECL|method|createAnalysisService
specifier|private
name|AnalysisService
name|createAnalysisService
parameter_list|(
name|Index
name|index
parameter_list|,
name|Settings
name|settings
parameter_list|)
block|{
name|Injector
name|parentInjector
init|=
operator|new
name|ModulesBuilder
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|SettingsModule
argument_list|(
name|settings
argument_list|)
argument_list|,
operator|new
name|EnvironmentModule
argument_list|(
operator|new
name|Environment
argument_list|(
name|settings
argument_list|)
argument_list|)
argument_list|,
operator|new
name|IndicesAnalysisModule
argument_list|()
argument_list|)
operator|.
name|createInjector
argument_list|()
decl_stmt|;
name|Injector
name|injector
init|=
operator|new
name|ModulesBuilder
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|IndexSettingsModule
argument_list|(
name|index
argument_list|,
name|settings
argument_list|)
argument_list|,
operator|new
name|IndexNameModule
argument_list|(
name|index
argument_list|)
argument_list|,
operator|new
name|AnalysisModule
argument_list|(
name|settings
argument_list|,
name|parentInjector
operator|.
name|getInstance
argument_list|(
name|IndicesAnalysisService
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|addProcessor
argument_list|(
operator|new
name|IcuAnalysisBinderProcessor
argument_list|()
argument_list|)
argument_list|)
operator|.
name|createChildInjector
argument_list|(
name|parentInjector
argument_list|)
decl_stmt|;
return|return
name|injector
operator|.
name|getInstance
argument_list|(
name|AnalysisService
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|assertCollatesToSame
specifier|private
name|void
name|assertCollatesToSame
parameter_list|(
name|TokenStream
name|stream1
parameter_list|,
name|TokenStream
name|stream2
parameter_list|)
throws|throws
name|IOException
block|{
name|assertCollation
argument_list|(
name|stream1
argument_list|,
name|stream2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|assertCollation
specifier|private
name|void
name|assertCollation
parameter_list|(
name|TokenStream
name|stream1
parameter_list|,
name|TokenStream
name|stream2
parameter_list|,
name|int
name|comparison
parameter_list|)
throws|throws
name|IOException
block|{
name|CharTermAttribute
name|term1
init|=
name|stream1
operator|.
name|addAttribute
argument_list|(
name|CharTermAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
name|CharTermAttribute
name|term2
init|=
name|stream2
operator|.
name|addAttribute
argument_list|(
name|CharTermAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
name|stream1
operator|.
name|reset
argument_list|()
expr_stmt|;
name|stream2
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|stream1
operator|.
name|incrementToken
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stream2
operator|.
name|incrementToken
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Integer
operator|.
name|signum
argument_list|(
name|term1
operator|.
name|toString
argument_list|()
operator|.
name|compareTo
argument_list|(
name|term2
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|Integer
operator|.
name|signum
argument_list|(
name|comparison
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stream1
operator|.
name|incrementToken
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stream2
operator|.
name|incrementToken
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

