begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.engine
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LogByteSizeMergePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|stats
operator|.
name|IndicesStatsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|bulk
operator|.
name|BulkRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|bulk
operator|.
name|BulkResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|Requests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|merge
operator|.
name|policy
operator|.
name|LogDocMergePolicyProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchIntegrationTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
operator|.
name|jsonBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchIntegrationTest
operator|.
name|ClusterScope
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchIntegrationTest
operator|.
name|Scope
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertAcked
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertNoFailures
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
annotation|@
name|ClusterScope
argument_list|(
name|numDataNodes
operator|=
literal|1
argument_list|,
name|scope
operator|=
name|Scope
operator|.
name|SUITE
argument_list|)
DECL|class|InternalEngineMergeTests
specifier|public
class|class
name|InternalEngineMergeTests
extends|extends
name|ElasticsearchIntegrationTest
block|{
annotation|@
name|Test
annotation|@
name|Slow
DECL|method|testMergesHappening
specifier|public
name|void
name|testMergesHappening
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|IOException
throws|,
name|ExecutionException
block|{
specifier|final
name|int
name|numOfShards
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
decl_stmt|;
comment|// some settings to keep num segments low
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
name|numOfShards
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
literal|0
argument_list|)
operator|.
name|put
argument_list|(
name|LogDocMergePolicyProvider
operator|.
name|MIN_MERGE_DOCS_KEY
argument_list|,
literal|10
argument_list|)
operator|.
name|put
argument_list|(
name|LogDocMergePolicyProvider
operator|.
name|MERGE_FACTORY_KEY
argument_list|,
literal|5
argument_list|)
operator|.
name|put
argument_list|(
name|LogByteSizeMergePolicy
operator|.
name|DEFAULT_MIN_MERGE_MB
argument_list|,
literal|0.5
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|id
init|=
literal|0
decl_stmt|;
specifier|final
name|int
name|rounds
init|=
name|scaledRandomIntBetween
argument_list|(
literal|50
argument_list|,
literal|300
argument_list|)
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Starting rounds [{}] "
argument_list|,
name|rounds
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rounds
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|int
name|numDocs
init|=
name|scaledRandomIntBetween
argument_list|(
literal|100
argument_list|,
literal|1000
argument_list|)
decl_stmt|;
name|BulkRequestBuilder
name|request
init|=
name|client
argument_list|()
operator|.
name|prepareBulk
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numDocs
condition|;
operator|++
name|j
control|)
block|{
name|request
operator|.
name|add
argument_list|(
name|Requests
operator|.
name|indexRequest
argument_list|(
literal|"test"
argument_list|)
operator|.
name|type
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|id
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|id
operator|++
argument_list|)
argument_list|)
operator|.
name|source
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"l"
argument_list|,
name|randomLong
argument_list|()
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|BulkResponse
name|response
init|=
name|request
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|assertNoFailures
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|IndicesStatsResponse
name|stats
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareStats
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSegments
argument_list|(
literal|true
argument_list|)
operator|.
name|setMerge
argument_list|(
literal|true
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"index round [{}] - segments {}, total merges {}, current merge {}"
argument_list|,
name|i
argument_list|,
name|stats
operator|.
name|getPrimaries
argument_list|()
operator|.
name|getSegments
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|,
name|stats
operator|.
name|getPrimaries
argument_list|()
operator|.
name|getMerge
argument_list|()
operator|.
name|getTotal
argument_list|()
argument_list|,
name|stats
operator|.
name|getPrimaries
argument_list|()
operator|.
name|getMerge
argument_list|()
operator|.
name|getCurrent
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|long
name|upperNumberSegments
init|=
literal|2
operator|*
name|numOfShards
operator|*
literal|10
decl_stmt|;
name|awaitBusy
argument_list|(
operator|new
name|Predicate
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|Object
name|input
parameter_list|)
block|{
name|IndicesStatsResponse
name|stats
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareStats
argument_list|()
operator|.
name|setSegments
argument_list|(
literal|true
argument_list|)
operator|.
name|setMerge
argument_list|(
literal|true
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"numshards {}, segments {}, total merges {}, current merge {}"
argument_list|,
name|numOfShards
argument_list|,
name|stats
operator|.
name|getPrimaries
argument_list|()
operator|.
name|getSegments
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|,
name|stats
operator|.
name|getPrimaries
argument_list|()
operator|.
name|getMerge
argument_list|()
operator|.
name|getTotal
argument_list|()
argument_list|,
name|stats
operator|.
name|getPrimaries
argument_list|()
operator|.
name|getMerge
argument_list|()
operator|.
name|getCurrent
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|current
init|=
name|stats
operator|.
name|getPrimaries
argument_list|()
operator|.
name|getMerge
argument_list|()
operator|.
name|getCurrent
argument_list|()
decl_stmt|;
name|long
name|count
init|=
name|stats
operator|.
name|getPrimaries
argument_list|()
operator|.
name|getSegments
argument_list|()
operator|.
name|getCount
argument_list|()
decl_stmt|;
return|return
name|count
operator|<
name|upperNumberSegments
operator|&&
name|current
operator|==
literal|0
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|IndicesStatsResponse
name|stats
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareStats
argument_list|()
operator|.
name|setSegments
argument_list|(
literal|true
argument_list|)
operator|.
name|setMerge
argument_list|(
literal|true
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"numshards {}, segments {}, total merges {}, current merge {}"
argument_list|,
name|numOfShards
argument_list|,
name|stats
operator|.
name|getPrimaries
argument_list|()
operator|.
name|getSegments
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|,
name|stats
operator|.
name|getPrimaries
argument_list|()
operator|.
name|getMerge
argument_list|()
operator|.
name|getTotal
argument_list|()
argument_list|,
name|stats
operator|.
name|getPrimaries
argument_list|()
operator|.
name|getMerge
argument_list|()
operator|.
name|getCurrent
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|count
init|=
name|stats
operator|.
name|getPrimaries
argument_list|()
operator|.
name|getSegments
argument_list|()
operator|.
name|getCount
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|count
argument_list|,
name|Matchers
operator|.
name|lessThanOrEqualTo
argument_list|(
name|upperNumberSegments
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

