begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.engine.internal
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|NumericDocValuesField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|TextField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexDeletionPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ExceptionsHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|Lucene
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|VersionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|AnalysisService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|codec
operator|.
name|CodecService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|deletionpolicy
operator|.
name|KeepOnlyLastDeletionPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|deletionpolicy
operator|.
name|SnapshotDeletionPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|deletionpolicy
operator|.
name|SnapshotIndexCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|deletionpolicy
operator|.
name|SnapshotIndexCommitExistsMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|indexing
operator|.
name|ShardIndexingService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|indexing
operator|.
name|slowlog
operator|.
name|ShardSlowLogIndexingService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|ParseContext
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|ParsedDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|internal
operator|.
name|SourceFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|internal
operator|.
name|UidFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|merge
operator|.
name|OnGoingMerge
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|merge
operator|.
name|policy
operator|.
name|LogByteSizeMergePolicyProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|merge
operator|.
name|policy
operator|.
name|MergePolicyProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|merge
operator|.
name|scheduler
operator|.
name|ConcurrentMergeSchedulerProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|merge
operator|.
name|scheduler
operator|.
name|MergeSchedulerProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|merge
operator|.
name|scheduler
operator|.
name|SerialMergeSchedulerProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|settings
operator|.
name|IndexSettingsService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|similarity
operator|.
name|SimilarityService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|store
operator|.
name|DirectoryService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|store
operator|.
name|Store
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|store
operator|.
name|distributor
operator|.
name|LeastUsedDistributor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|store
operator|.
name|ram
operator|.
name|RamDirectoryService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|translog
operator|.
name|Translog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|translog
operator|.
name|TranslogSizeMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|translog
operator|.
name|fs
operator|.
name|FsTranslog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|MatcherAssert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
operator|.
name|Builder
operator|.
name|EMPTY_SETTINGS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|Engine
operator|.
name|Operation
operator|.
name|Origin
operator|.
name|REPLICA
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|InternalEngineTests
specifier|public
class|class
name|InternalEngineTests
extends|extends
name|ElasticsearchTestCase
block|{
DECL|field|shardId
specifier|protected
specifier|final
name|ShardId
name|shardId
init|=
operator|new
name|ShardId
argument_list|(
operator|new
name|Index
argument_list|(
literal|"index"
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
DECL|field|threadPool
specifier|protected
name|ThreadPool
name|threadPool
decl_stmt|;
DECL|field|store
specifier|private
name|Store
name|store
decl_stmt|;
DECL|field|storeReplica
specifier|private
name|Store
name|storeReplica
decl_stmt|;
DECL|field|engine
specifier|protected
name|Engine
name|engine
decl_stmt|;
DECL|field|replicaEngine
specifier|protected
name|Engine
name|replicaEngine
decl_stmt|;
DECL|field|engineSettingsService
specifier|private
name|IndexSettingsService
name|engineSettingsService
decl_stmt|;
DECL|field|replicaSettingsService
specifier|private
name|IndexSettingsService
name|replicaSettingsService
decl_stmt|;
DECL|field|defaultSettings
specifier|private
name|Settings
name|defaultSettings
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|defaultSettings
operator|=
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|InternalEngine
operator|.
name|INDEX_COMPOUND_ON_FLUSH
argument_list|,
name|getRandom
argument_list|()
operator|.
name|nextBoolean
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
comment|// TODO randomize more settings
name|threadPool
operator|=
operator|new
name|ThreadPool
argument_list|()
expr_stmt|;
name|store
operator|=
name|createStore
argument_list|()
expr_stmt|;
name|store
operator|.
name|deleteContent
argument_list|()
expr_stmt|;
name|storeReplica
operator|=
name|createStoreReplica
argument_list|()
expr_stmt|;
name|storeReplica
operator|.
name|deleteContent
argument_list|()
expr_stmt|;
name|engineSettingsService
operator|=
operator|new
name|IndexSettingsService
argument_list|(
name|shardId
operator|.
name|index
argument_list|()
argument_list|,
name|EMPTY_SETTINGS
argument_list|)
expr_stmt|;
name|engine
operator|=
name|createEngine
argument_list|(
name|engineSettingsService
argument_list|,
name|store
argument_list|,
name|createTranslog
argument_list|()
argument_list|)
expr_stmt|;
name|engine
operator|.
name|start
argument_list|()
expr_stmt|;
name|replicaSettingsService
operator|=
operator|new
name|IndexSettingsService
argument_list|(
name|shardId
operator|.
name|index
argument_list|()
argument_list|,
name|EMPTY_SETTINGS
argument_list|)
expr_stmt|;
name|replicaEngine
operator|=
name|createEngine
argument_list|(
name|replicaSettingsService
argument_list|,
name|storeReplica
argument_list|,
name|createTranslogReplica
argument_list|()
argument_list|)
expr_stmt|;
name|replicaEngine
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
name|replicaEngine
operator|.
name|close
argument_list|()
expr_stmt|;
name|storeReplica
operator|.
name|close
argument_list|()
expr_stmt|;
name|engine
operator|.
name|close
argument_list|()
expr_stmt|;
name|store
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|threadPool
operator|!=
literal|null
condition|)
block|{
name|threadPool
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testDocumentWithTextField
specifier|private
name|Document
name|testDocumentWithTextField
parameter_list|()
block|{
name|Document
name|document
init|=
name|testDocument
argument_list|()
decl_stmt|;
name|document
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"value"
argument_list|,
literal|"test"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|document
return|;
block|}
DECL|method|testDocument
specifier|private
name|Document
name|testDocument
parameter_list|()
block|{
return|return
operator|new
name|Document
argument_list|()
return|;
block|}
DECL|method|testParsedDocument
specifier|private
name|ParsedDocument
name|testParsedDocument
parameter_list|(
name|String
name|uid
parameter_list|,
name|String
name|id
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|routing
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|long
name|ttl
parameter_list|,
name|Document
name|document
parameter_list|,
name|Analyzer
name|analyzer
parameter_list|,
name|BytesReference
name|source
parameter_list|,
name|boolean
name|mappingsModified
parameter_list|)
block|{
name|Field
name|uidField
init|=
operator|new
name|Field
argument_list|(
literal|"_uid"
argument_list|,
name|uid
argument_list|,
name|UidFieldMapper
operator|.
name|Defaults
operator|.
name|FIELD_TYPE
argument_list|)
decl_stmt|;
name|Field
name|versionField
init|=
operator|new
name|NumericDocValuesField
argument_list|(
literal|"_version"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|document
operator|.
name|add
argument_list|(
name|uidField
argument_list|)
expr_stmt|;
name|document
operator|.
name|add
argument_list|(
name|versionField
argument_list|)
expr_stmt|;
return|return
operator|new
name|ParsedDocument
argument_list|(
name|uidField
argument_list|,
name|versionField
argument_list|,
name|id
argument_list|,
name|type
argument_list|,
name|routing
argument_list|,
name|timestamp
argument_list|,
name|ttl
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|document
argument_list|)
argument_list|,
name|analyzer
argument_list|,
name|source
argument_list|,
name|mappingsModified
argument_list|)
return|;
block|}
DECL|method|createStore
specifier|protected
name|Store
name|createStore
parameter_list|()
throws|throws
name|IOException
block|{
name|DirectoryService
name|directoryService
init|=
operator|new
name|RamDirectoryService
argument_list|(
name|shardId
argument_list|,
name|EMPTY_SETTINGS
argument_list|)
decl_stmt|;
return|return
operator|new
name|Store
argument_list|(
name|shardId
argument_list|,
name|EMPTY_SETTINGS
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|directoryService
argument_list|,
operator|new
name|LeastUsedDistributor
argument_list|(
name|directoryService
argument_list|)
argument_list|)
return|;
block|}
DECL|method|createStoreReplica
specifier|protected
name|Store
name|createStoreReplica
parameter_list|()
throws|throws
name|IOException
block|{
name|DirectoryService
name|directoryService
init|=
operator|new
name|RamDirectoryService
argument_list|(
name|shardId
argument_list|,
name|EMPTY_SETTINGS
argument_list|)
decl_stmt|;
return|return
operator|new
name|Store
argument_list|(
name|shardId
argument_list|,
name|EMPTY_SETTINGS
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|directoryService
argument_list|,
operator|new
name|LeastUsedDistributor
argument_list|(
name|directoryService
argument_list|)
argument_list|)
return|;
block|}
DECL|method|createTranslog
specifier|protected
name|Translog
name|createTranslog
parameter_list|()
block|{
return|return
operator|new
name|FsTranslog
argument_list|(
name|shardId
argument_list|,
name|EMPTY_SETTINGS
argument_list|,
operator|new
name|File
argument_list|(
literal|"work/fs-translog/primary"
argument_list|)
argument_list|)
return|;
block|}
DECL|method|createTranslogReplica
specifier|protected
name|Translog
name|createTranslogReplica
parameter_list|()
block|{
return|return
operator|new
name|FsTranslog
argument_list|(
name|shardId
argument_list|,
name|EMPTY_SETTINGS
argument_list|,
operator|new
name|File
argument_list|(
literal|"work/fs-translog/replica"
argument_list|)
argument_list|)
return|;
block|}
DECL|method|createIndexDeletionPolicy
specifier|protected
name|IndexDeletionPolicy
name|createIndexDeletionPolicy
parameter_list|()
block|{
return|return
operator|new
name|KeepOnlyLastDeletionPolicy
argument_list|(
name|shardId
argument_list|,
name|EMPTY_SETTINGS
argument_list|)
return|;
block|}
DECL|method|createSnapshotDeletionPolicy
specifier|protected
name|SnapshotDeletionPolicy
name|createSnapshotDeletionPolicy
parameter_list|()
block|{
return|return
operator|new
name|SnapshotDeletionPolicy
argument_list|(
name|createIndexDeletionPolicy
argument_list|()
argument_list|)
return|;
block|}
DECL|method|createMergePolicy
specifier|protected
name|MergePolicyProvider
argument_list|<
name|?
argument_list|>
name|createMergePolicy
parameter_list|()
block|{
return|return
operator|new
name|LogByteSizeMergePolicyProvider
argument_list|(
name|store
argument_list|,
operator|new
name|IndexSettingsService
argument_list|(
operator|new
name|Index
argument_list|(
literal|"test"
argument_list|)
argument_list|,
name|EMPTY_SETTINGS
argument_list|)
argument_list|)
return|;
block|}
DECL|method|createMergeScheduler
specifier|protected
name|MergeSchedulerProvider
name|createMergeScheduler
parameter_list|()
block|{
return|return
operator|new
name|SerialMergeSchedulerProvider
argument_list|(
name|shardId
argument_list|,
name|EMPTY_SETTINGS
argument_list|,
name|threadPool
argument_list|)
return|;
block|}
DECL|method|createEngine
specifier|protected
name|Engine
name|createEngine
parameter_list|(
name|IndexSettingsService
name|indexSettingsService
parameter_list|,
name|Store
name|store
parameter_list|,
name|Translog
name|translog
parameter_list|)
block|{
return|return
name|createEngine
argument_list|(
name|indexSettingsService
argument_list|,
name|store
argument_list|,
name|translog
argument_list|,
name|createMergeScheduler
argument_list|()
argument_list|)
return|;
block|}
DECL|method|createEngine
specifier|protected
name|Engine
name|createEngine
parameter_list|(
name|IndexSettingsService
name|indexSettingsService
parameter_list|,
name|Store
name|store
parameter_list|,
name|Translog
name|translog
parameter_list|,
name|MergeSchedulerProvider
name|mergeSchedulerProvider
parameter_list|)
block|{
return|return
operator|new
name|InternalEngine
argument_list|(
name|shardId
argument_list|,
name|defaultSettings
argument_list|,
name|threadPool
argument_list|,
name|indexSettingsService
argument_list|,
operator|new
name|ShardIndexingService
argument_list|(
name|shardId
argument_list|,
name|EMPTY_SETTINGS
argument_list|,
operator|new
name|ShardSlowLogIndexingService
argument_list|(
name|shardId
argument_list|,
name|EMPTY_SETTINGS
argument_list|,
name|indexSettingsService
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|,
name|store
argument_list|,
name|createSnapshotDeletionPolicy
argument_list|()
argument_list|,
name|translog
argument_list|,
name|createMergePolicy
argument_list|()
argument_list|,
name|mergeSchedulerProvider
argument_list|,
operator|new
name|AnalysisService
argument_list|(
name|shardId
operator|.
name|index
argument_list|()
argument_list|)
argument_list|,
operator|new
name|SimilarityService
argument_list|(
name|shardId
operator|.
name|index
argument_list|()
argument_list|)
argument_list|,
operator|new
name|CodecService
argument_list|(
name|shardId
operator|.
name|index
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
DECL|field|B_1
specifier|protected
specifier|static
specifier|final
name|BytesReference
name|B_1
init|=
operator|new
name|BytesArray
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|1
block|}
argument_list|)
decl_stmt|;
DECL|field|B_2
specifier|protected
specifier|static
specifier|final
name|BytesReference
name|B_2
init|=
operator|new
name|BytesArray
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|2
block|}
argument_list|)
decl_stmt|;
DECL|field|B_3
specifier|protected
specifier|static
specifier|final
name|BytesReference
name|B_3
init|=
operator|new
name|BytesArray
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|3
block|}
argument_list|)
decl_stmt|;
annotation|@
name|Test
DECL|method|testSegments
specifier|public
name|void
name|testSegments
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Segment
argument_list|>
name|segments
init|=
name|engine
operator|.
name|segments
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|engine
operator|.
name|segmentsStats
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0l
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|boolean
name|defaultCompound
init|=
name|defaultSettings
operator|.
name|getAsBoolean
argument_list|(
name|InternalEngine
operator|.
name|INDEX_COMPOUND_ON_FLUSH
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// create a doc and refresh
name|ParsedDocument
name|doc
init|=
name|testParsedDocument
argument_list|(
literal|"1"
argument_list|,
literal|"1"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocumentWithTextField
argument_list|()
argument_list|,
name|Lucene
operator|.
name|STANDARD_ANALYZER
argument_list|,
name|B_1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|engine
operator|.
name|create
argument_list|(
operator|new
name|Engine
operator|.
name|Create
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
argument_list|)
expr_stmt|;
name|ParsedDocument
name|doc2
init|=
name|testParsedDocument
argument_list|(
literal|"2"
argument_list|,
literal|"2"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocumentWithTextField
argument_list|()
argument_list|,
name|Lucene
operator|.
name|STANDARD_ANALYZER
argument_list|,
name|B_2
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|engine
operator|.
name|create
argument_list|(
operator|new
name|Engine
operator|.
name|Create
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"2"
argument_list|)
argument_list|,
name|doc2
argument_list|)
argument_list|)
expr_stmt|;
name|engine
operator|.
name|refresh
argument_list|(
operator|new
name|Engine
operator|.
name|Refresh
argument_list|(
literal|"test"
argument_list|)
operator|.
name|force
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|segments
operator|=
name|engine
operator|.
name|segments
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|engine
operator|.
name|segmentsStats
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isCommitted
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isSearch
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getNumDocs
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getDeletedDocs
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isCompound
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|defaultCompound
argument_list|)
argument_list|)
expr_stmt|;
name|engine
operator|.
name|flush
argument_list|(
operator|new
name|Engine
operator|.
name|Flush
argument_list|()
argument_list|)
expr_stmt|;
name|segments
operator|=
name|engine
operator|.
name|segments
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|engine
operator|.
name|segmentsStats
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isCommitted
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isSearch
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getNumDocs
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getDeletedDocs
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isCompound
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|defaultCompound
argument_list|)
argument_list|)
expr_stmt|;
name|engineSettingsService
operator|.
name|refreshSettings
argument_list|(
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|InternalEngine
operator|.
name|INDEX_COMPOUND_ON_FLUSH
argument_list|,
literal|false
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|ParsedDocument
name|doc3
init|=
name|testParsedDocument
argument_list|(
literal|"3"
argument_list|,
literal|"3"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocumentWithTextField
argument_list|()
argument_list|,
name|Lucene
operator|.
name|STANDARD_ANALYZER
argument_list|,
name|B_3
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|engine
operator|.
name|create
argument_list|(
operator|new
name|Engine
operator|.
name|Create
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"3"
argument_list|)
argument_list|,
name|doc3
argument_list|)
argument_list|)
expr_stmt|;
name|engine
operator|.
name|refresh
argument_list|(
operator|new
name|Engine
operator|.
name|Refresh
argument_list|(
literal|"test"
argument_list|)
operator|.
name|force
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|segments
operator|=
name|engine
operator|.
name|segments
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|engine
operator|.
name|segmentsStats
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getGeneration
argument_list|()
operator|<
name|segments
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getGeneration
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isCommitted
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isSearch
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getNumDocs
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getDeletedDocs
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isCompound
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|defaultCompound
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|isCommitted
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|isSearch
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getNumDocs
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getDeletedDocs
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|isCompound
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|engine
operator|.
name|delete
argument_list|(
operator|new
name|Engine
operator|.
name|Delete
argument_list|(
literal|"test"
argument_list|,
literal|"1"
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|engine
operator|.
name|refresh
argument_list|(
operator|new
name|Engine
operator|.
name|Refresh
argument_list|(
literal|"test"
argument_list|)
operator|.
name|force
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|segments
operator|=
name|engine
operator|.
name|segments
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|engine
operator|.
name|segmentsStats
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getGeneration
argument_list|()
operator|<
name|segments
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getGeneration
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isCommitted
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isSearch
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getNumDocs
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getDeletedDocs
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isCompound
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|defaultCompound
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|isCommitted
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|isSearch
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getNumDocs
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getDeletedDocs
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|isCompound
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|engineSettingsService
operator|.
name|refreshSettings
argument_list|(
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|InternalEngine
operator|.
name|INDEX_COMPOUND_ON_FLUSH
argument_list|,
literal|true
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|ParsedDocument
name|doc4
init|=
name|testParsedDocument
argument_list|(
literal|"4"
argument_list|,
literal|"4"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocumentWithTextField
argument_list|()
argument_list|,
name|Lucene
operator|.
name|STANDARD_ANALYZER
argument_list|,
name|B_3
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|engine
operator|.
name|create
argument_list|(
operator|new
name|Engine
operator|.
name|Create
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"4"
argument_list|)
argument_list|,
name|doc4
argument_list|)
argument_list|)
expr_stmt|;
name|engine
operator|.
name|refresh
argument_list|(
operator|new
name|Engine
operator|.
name|Refresh
argument_list|(
literal|"test"
argument_list|)
operator|.
name|force
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|segments
operator|=
name|engine
operator|.
name|segments
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|engine
operator|.
name|segmentsStats
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getGeneration
argument_list|()
operator|<
name|segments
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getGeneration
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isCommitted
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isSearch
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getNumDocs
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getDeletedDocs
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isCompound
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|defaultCompound
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|isCommitted
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|isSearch
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getNumDocs
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getDeletedDocs
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|isCompound
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|isCommitted
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|isSearch
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getNumDocs
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getDeletedDocs
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|isCompound
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSegmentsWithMergeFlag
specifier|public
name|void
name|testSegmentsWithMergeFlag
parameter_list|()
throws|throws
name|Exception
block|{
name|ConcurrentMergeSchedulerProvider
name|mergeSchedulerProvider
init|=
operator|new
name|ConcurrentMergeSchedulerProvider
argument_list|(
name|shardId
argument_list|,
name|EMPTY_SETTINGS
argument_list|,
name|threadPool
argument_list|)
decl_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|CountDownLatch
argument_list|>
name|waitTillMerge
init|=
operator|new
name|AtomicReference
argument_list|<
name|CountDownLatch
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|CountDownLatch
argument_list|>
name|waitForMerge
init|=
operator|new
name|AtomicReference
argument_list|<
name|CountDownLatch
argument_list|>
argument_list|()
decl_stmt|;
name|mergeSchedulerProvider
operator|.
name|addListener
argument_list|(
operator|new
name|MergeSchedulerProvider
operator|.
name|Listener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|beforeMerge
parameter_list|(
name|OnGoingMerge
name|merge
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|waitTillMerge
operator|.
name|get
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|waitTillMerge
operator|.
name|get
argument_list|()
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|waitForMerge
operator|.
name|get
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|waitForMerge
operator|.
name|get
argument_list|()
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
name|ExceptionsHelper
operator|.
name|convertToRuntime
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|afterMerge
parameter_list|(
name|OnGoingMerge
name|merge
parameter_list|)
block|{             }
block|}
argument_list|)
expr_stmt|;
name|Engine
name|engine
init|=
name|createEngine
argument_list|(
name|engineSettingsService
argument_list|,
name|store
argument_list|,
name|createTranslog
argument_list|()
argument_list|,
name|mergeSchedulerProvider
argument_list|)
decl_stmt|;
name|engine
operator|.
name|start
argument_list|()
expr_stmt|;
name|ParsedDocument
name|doc
init|=
name|testParsedDocument
argument_list|(
literal|"1"
argument_list|,
literal|"1"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocument
argument_list|()
argument_list|,
name|Lucene
operator|.
name|STANDARD_ANALYZER
argument_list|,
name|B_1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|Index
name|index
init|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
decl_stmt|;
name|engine
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|engine
operator|.
name|flush
argument_list|(
operator|new
name|Engine
operator|.
name|Flush
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|engine
operator|.
name|segments
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|index
operator|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"2"
argument_list|)
argument_list|,
name|doc
argument_list|)
expr_stmt|;
name|engine
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|engine
operator|.
name|flush
argument_list|(
operator|new
name|Engine
operator|.
name|Flush
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|engine
operator|.
name|segments
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Segment
name|segment
range|:
name|engine
operator|.
name|segments
argument_list|()
control|)
block|{
name|assertThat
argument_list|(
name|segment
operator|.
name|getMergeId
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|index
operator|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"3"
argument_list|)
argument_list|,
name|doc
argument_list|)
expr_stmt|;
name|engine
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|engine
operator|.
name|flush
argument_list|(
operator|new
name|Engine
operator|.
name|Flush
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|engine
operator|.
name|segments
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Segment
name|segment
range|:
name|engine
operator|.
name|segments
argument_list|()
control|)
block|{
name|assertThat
argument_list|(
name|segment
operator|.
name|getMergeId
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|waitTillMerge
operator|.
name|set
argument_list|(
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|waitForMerge
operator|.
name|set
argument_list|(
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|engine
operator|.
name|optimize
argument_list|(
operator|new
name|Engine
operator|.
name|Optimize
argument_list|()
operator|.
name|maxNumSegments
argument_list|(
literal|1
argument_list|)
operator|.
name|waitForMerge
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|waitTillMerge
operator|.
name|get
argument_list|()
operator|.
name|await
argument_list|()
expr_stmt|;
for|for
control|(
name|Segment
name|segment
range|:
name|engine
operator|.
name|segments
argument_list|()
control|)
block|{
name|assertThat
argument_list|(
name|segment
operator|.
name|getMergeId
argument_list|()
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|waitForMerge
operator|.
name|get
argument_list|()
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|index
operator|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"4"
argument_list|)
argument_list|,
name|doc
argument_list|)
expr_stmt|;
name|engine
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|engine
operator|.
name|flush
argument_list|(
operator|new
name|Engine
operator|.
name|Flush
argument_list|()
argument_list|)
expr_stmt|;
comment|// now, optimize and wait for merges, see that we have no merge flag
name|engine
operator|.
name|optimize
argument_list|(
operator|new
name|Engine
operator|.
name|Optimize
argument_list|()
operator|.
name|flush
argument_list|(
literal|true
argument_list|)
operator|.
name|maxNumSegments
argument_list|(
literal|1
argument_list|)
operator|.
name|waitForMerge
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Segment
name|segment
range|:
name|engine
operator|.
name|segments
argument_list|()
control|)
block|{
name|assertThat
argument_list|(
name|segment
operator|.
name|getMergeId
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|engine
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSimpleOperations
specifier|public
name|void
name|testSimpleOperations
parameter_list|()
throws|throws
name|Exception
block|{
name|Engine
operator|.
name|Searcher
name|searchResult
init|=
name|engine
operator|.
name|acquireSearcher
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|EngineSearcherTotalHitsMatcher
operator|.
name|engineSearcherTotalHits
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|searchResult
operator|.
name|release
argument_list|()
expr_stmt|;
comment|// create a document
name|Document
name|document
init|=
name|testDocumentWithTextField
argument_list|()
decl_stmt|;
name|document
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
name|SourceFieldMapper
operator|.
name|NAME
argument_list|,
name|B_1
operator|.
name|toBytes
argument_list|()
argument_list|,
name|SourceFieldMapper
operator|.
name|Defaults
operator|.
name|FIELD_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|ParsedDocument
name|doc
init|=
name|testParsedDocument
argument_list|(
literal|"1"
argument_list|,
literal|"1"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|document
argument_list|,
name|Lucene
operator|.
name|STANDARD_ANALYZER
argument_list|,
name|B_1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|engine
operator|.
name|create
argument_list|(
operator|new
name|Engine
operator|.
name|Create
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
argument_list|)
expr_stmt|;
comment|// its not there...
name|searchResult
operator|=
name|engine
operator|.
name|acquireSearcher
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|EngineSearcherTotalHitsMatcher
operator|.
name|engineSearcherTotalHits
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|EngineSearcherTotalHitsMatcher
operator|.
name|engineSearcherTotalHits
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"value"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|searchResult
operator|.
name|release
argument_list|()
expr_stmt|;
comment|// but, we can still get it (in realtime)
name|Engine
operator|.
name|GetResult
name|getResult
init|=
name|engine
operator|.
name|get
argument_list|(
operator|new
name|Engine
operator|.
name|Get
argument_list|(
literal|true
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|getResult
operator|.
name|exists
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getResult
operator|.
name|source
argument_list|()
operator|.
name|source
operator|.
name|toBytesArray
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|B_1
operator|.
name|toBytesArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getResult
operator|.
name|docIdAndVersion
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|getResult
operator|.
name|release
argument_list|()
expr_stmt|;
comment|// but, not there non realtime
name|getResult
operator|=
name|engine
operator|.
name|get
argument_list|(
operator|new
name|Engine
operator|.
name|Get
argument_list|(
literal|false
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getResult
operator|.
name|exists
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|getResult
operator|.
name|release
argument_list|()
expr_stmt|;
comment|// refresh and it should be there
name|engine
operator|.
name|refresh
argument_list|(
operator|new
name|Engine
operator|.
name|Refresh
argument_list|(
literal|"test"
argument_list|)
operator|.
name|force
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// now its there...
name|searchResult
operator|=
name|engine
operator|.
name|acquireSearcher
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|EngineSearcherTotalHitsMatcher
operator|.
name|engineSearcherTotalHits
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|EngineSearcherTotalHitsMatcher
operator|.
name|engineSearcherTotalHits
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"value"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|searchResult
operator|.
name|release
argument_list|()
expr_stmt|;
comment|// also in non realtime
name|getResult
operator|=
name|engine
operator|.
name|get
argument_list|(
operator|new
name|Engine
operator|.
name|Get
argument_list|(
literal|false
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getResult
operator|.
name|exists
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getResult
operator|.
name|docIdAndVersion
argument_list|()
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|getResult
operator|.
name|release
argument_list|()
expr_stmt|;
comment|// now do an update
name|document
operator|=
name|testDocument
argument_list|()
expr_stmt|;
name|document
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"value"
argument_list|,
literal|"test1"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
name|document
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
name|SourceFieldMapper
operator|.
name|NAME
argument_list|,
name|B_2
operator|.
name|toBytes
argument_list|()
argument_list|,
name|SourceFieldMapper
operator|.
name|Defaults
operator|.
name|FIELD_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|=
name|testParsedDocument
argument_list|(
literal|"1"
argument_list|,
literal|"1"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|document
argument_list|,
name|Lucene
operator|.
name|STANDARD_ANALYZER
argument_list|,
name|B_2
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|engine
operator|.
name|index
argument_list|(
operator|new
name|Engine
operator|.
name|Index
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
argument_list|)
expr_stmt|;
comment|// its not updated yet...
name|searchResult
operator|=
name|engine
operator|.
name|acquireSearcher
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|EngineSearcherTotalHitsMatcher
operator|.
name|engineSearcherTotalHits
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|EngineSearcherTotalHitsMatcher
operator|.
name|engineSearcherTotalHits
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"value"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|EngineSearcherTotalHitsMatcher
operator|.
name|engineSearcherTotalHits
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"value"
argument_list|,
literal|"test1"
argument_list|)
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|searchResult
operator|.
name|release
argument_list|()
expr_stmt|;
comment|// but, we can still get it (in realtime)
name|getResult
operator|=
name|engine
operator|.
name|get
argument_list|(
operator|new
name|Engine
operator|.
name|Get
argument_list|(
literal|true
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getResult
operator|.
name|exists
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getResult
operator|.
name|source
argument_list|()
operator|.
name|source
operator|.
name|toBytesArray
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|B_2
operator|.
name|toBytesArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getResult
operator|.
name|docIdAndVersion
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|getResult
operator|.
name|release
argument_list|()
expr_stmt|;
comment|// refresh and it should be updated
name|engine
operator|.
name|refresh
argument_list|(
operator|new
name|Engine
operator|.
name|Refresh
argument_list|(
literal|"test"
argument_list|)
operator|.
name|force
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|searchResult
operator|=
name|engine
operator|.
name|acquireSearcher
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|EngineSearcherTotalHitsMatcher
operator|.
name|engineSearcherTotalHits
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|EngineSearcherTotalHitsMatcher
operator|.
name|engineSearcherTotalHits
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"value"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|EngineSearcherTotalHitsMatcher
operator|.
name|engineSearcherTotalHits
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"value"
argument_list|,
literal|"test1"
argument_list|)
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|searchResult
operator|.
name|release
argument_list|()
expr_stmt|;
comment|// now delete
name|engine
operator|.
name|delete
argument_list|(
operator|new
name|Engine
operator|.
name|Delete
argument_list|(
literal|"test"
argument_list|,
literal|"1"
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// its not deleted yet
name|searchResult
operator|=
name|engine
operator|.
name|acquireSearcher
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|EngineSearcherTotalHitsMatcher
operator|.
name|engineSearcherTotalHits
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|EngineSearcherTotalHitsMatcher
operator|.
name|engineSearcherTotalHits
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"value"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|EngineSearcherTotalHitsMatcher
operator|.
name|engineSearcherTotalHits
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"value"
argument_list|,
literal|"test1"
argument_list|)
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|searchResult
operator|.
name|release
argument_list|()
expr_stmt|;
comment|// but, get should not see it (in realtime)
name|getResult
operator|=
name|engine
operator|.
name|get
argument_list|(
operator|new
name|Engine
operator|.
name|Get
argument_list|(
literal|true
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getResult
operator|.
name|exists
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|getResult
operator|.
name|release
argument_list|()
expr_stmt|;
comment|// refresh and it should be deleted
name|engine
operator|.
name|refresh
argument_list|(
operator|new
name|Engine
operator|.
name|Refresh
argument_list|(
literal|"test"
argument_list|)
operator|.
name|force
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|searchResult
operator|=
name|engine
operator|.
name|acquireSearcher
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|EngineSearcherTotalHitsMatcher
operator|.
name|engineSearcherTotalHits
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|EngineSearcherTotalHitsMatcher
operator|.
name|engineSearcherTotalHits
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"value"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|EngineSearcherTotalHitsMatcher
operator|.
name|engineSearcherTotalHits
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"value"
argument_list|,
literal|"test1"
argument_list|)
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|searchResult
operator|.
name|release
argument_list|()
expr_stmt|;
comment|// add it back
name|document
operator|=
name|testDocumentWithTextField
argument_list|()
expr_stmt|;
name|document
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
name|SourceFieldMapper
operator|.
name|NAME
argument_list|,
name|B_1
operator|.
name|toBytes
argument_list|()
argument_list|,
name|SourceFieldMapper
operator|.
name|Defaults
operator|.
name|FIELD_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|=
name|testParsedDocument
argument_list|(
literal|"1"
argument_list|,
literal|"1"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|document
argument_list|,
name|Lucene
operator|.
name|STANDARD_ANALYZER
argument_list|,
name|B_1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|engine
operator|.
name|create
argument_list|(
operator|new
name|Engine
operator|.
name|Create
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
argument_list|)
expr_stmt|;
comment|// its not there...
name|searchResult
operator|=
name|engine
operator|.
name|acquireSearcher
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|EngineSearcherTotalHitsMatcher
operator|.
name|engineSearcherTotalHits
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|EngineSearcherTotalHitsMatcher
operator|.
name|engineSearcherTotalHits
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"value"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|EngineSearcherTotalHitsMatcher
operator|.
name|engineSearcherTotalHits
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"value"
argument_list|,
literal|"test1"
argument_list|)
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|searchResult
operator|.
name|release
argument_list|()
expr_stmt|;
comment|// refresh and it should be there
name|engine
operator|.
name|refresh
argument_list|(
operator|new
name|Engine
operator|.
name|Refresh
argument_list|(
literal|"test"
argument_list|)
operator|.
name|force
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// now its there...
name|searchResult
operator|=
name|engine
operator|.
name|acquireSearcher
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|EngineSearcherTotalHitsMatcher
operator|.
name|engineSearcherTotalHits
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|EngineSearcherTotalHitsMatcher
operator|.
name|engineSearcherTotalHits
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"value"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|EngineSearcherTotalHitsMatcher
operator|.
name|engineSearcherTotalHits
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"value"
argument_list|,
literal|"test1"
argument_list|)
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|searchResult
operator|.
name|release
argument_list|()
expr_stmt|;
comment|// now flush
name|engine
operator|.
name|flush
argument_list|(
operator|new
name|Engine
operator|.
name|Flush
argument_list|()
argument_list|)
expr_stmt|;
comment|// and, verify get (in real time)
name|getResult
operator|=
name|engine
operator|.
name|get
argument_list|(
operator|new
name|Engine
operator|.
name|Get
argument_list|(
literal|true
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getResult
operator|.
name|exists
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getResult
operator|.
name|source
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getResult
operator|.
name|docIdAndVersion
argument_list|()
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|getResult
operator|.
name|release
argument_list|()
expr_stmt|;
comment|// make sure we can still work with the engine
comment|// now do an update
name|document
operator|=
name|testDocument
argument_list|()
expr_stmt|;
name|document
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"value"
argument_list|,
literal|"test1"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|=
name|testParsedDocument
argument_list|(
literal|"1"
argument_list|,
literal|"1"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|document
argument_list|,
name|Lucene
operator|.
name|STANDARD_ANALYZER
argument_list|,
name|B_1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|engine
operator|.
name|index
argument_list|(
operator|new
name|Engine
operator|.
name|Index
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
argument_list|)
expr_stmt|;
comment|// its not updated yet...
name|searchResult
operator|=
name|engine
operator|.
name|acquireSearcher
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|EngineSearcherTotalHitsMatcher
operator|.
name|engineSearcherTotalHits
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|EngineSearcherTotalHitsMatcher
operator|.
name|engineSearcherTotalHits
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"value"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|EngineSearcherTotalHitsMatcher
operator|.
name|engineSearcherTotalHits
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"value"
argument_list|,
literal|"test1"
argument_list|)
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|searchResult
operator|.
name|release
argument_list|()
expr_stmt|;
comment|// refresh and it should be updated
name|engine
operator|.
name|refresh
argument_list|(
operator|new
name|Engine
operator|.
name|Refresh
argument_list|(
literal|"test"
argument_list|)
operator|.
name|force
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|searchResult
operator|=
name|engine
operator|.
name|acquireSearcher
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|EngineSearcherTotalHitsMatcher
operator|.
name|engineSearcherTotalHits
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|EngineSearcherTotalHitsMatcher
operator|.
name|engineSearcherTotalHits
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"value"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|EngineSearcherTotalHitsMatcher
operator|.
name|engineSearcherTotalHits
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"value"
argument_list|,
literal|"test1"
argument_list|)
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|searchResult
operator|.
name|release
argument_list|()
expr_stmt|;
name|engine
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSearchResultRelease
specifier|public
name|void
name|testSearchResultRelease
parameter_list|()
throws|throws
name|Exception
block|{
name|Engine
operator|.
name|Searcher
name|searchResult
init|=
name|engine
operator|.
name|acquireSearcher
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|EngineSearcherTotalHitsMatcher
operator|.
name|engineSearcherTotalHits
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|searchResult
operator|.
name|release
argument_list|()
expr_stmt|;
comment|// create a document
name|ParsedDocument
name|doc
init|=
name|testParsedDocument
argument_list|(
literal|"1"
argument_list|,
literal|"1"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocumentWithTextField
argument_list|()
argument_list|,
name|Lucene
operator|.
name|STANDARD_ANALYZER
argument_list|,
name|B_1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|engine
operator|.
name|create
argument_list|(
operator|new
name|Engine
operator|.
name|Create
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
argument_list|)
expr_stmt|;
comment|// its not there...
name|searchResult
operator|=
name|engine
operator|.
name|acquireSearcher
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|EngineSearcherTotalHitsMatcher
operator|.
name|engineSearcherTotalHits
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|EngineSearcherTotalHitsMatcher
operator|.
name|engineSearcherTotalHits
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"value"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|searchResult
operator|.
name|release
argument_list|()
expr_stmt|;
comment|// refresh and it should be there
name|engine
operator|.
name|refresh
argument_list|(
operator|new
name|Engine
operator|.
name|Refresh
argument_list|(
literal|"test"
argument_list|)
operator|.
name|force
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// now its there...
name|searchResult
operator|=
name|engine
operator|.
name|acquireSearcher
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|EngineSearcherTotalHitsMatcher
operator|.
name|engineSearcherTotalHits
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|EngineSearcherTotalHitsMatcher
operator|.
name|engineSearcherTotalHits
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"value"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// don't release the search result yet...
comment|// delete, refresh and do a new search, it should not be there
name|engine
operator|.
name|delete
argument_list|(
operator|new
name|Engine
operator|.
name|Delete
argument_list|(
literal|"test"
argument_list|,
literal|"1"
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|engine
operator|.
name|refresh
argument_list|(
operator|new
name|Engine
operator|.
name|Refresh
argument_list|(
literal|"test"
argument_list|)
operator|.
name|force
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|Engine
operator|.
name|Searcher
name|updateSearchResult
init|=
name|engine
operator|.
name|acquireSearcher
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|updateSearchResult
argument_list|,
name|EngineSearcherTotalHitsMatcher
operator|.
name|engineSearcherTotalHits
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|updateSearchResult
operator|.
name|release
argument_list|()
expr_stmt|;
comment|// the non release search result should not see the deleted yet...
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|EngineSearcherTotalHitsMatcher
operator|.
name|engineSearcherTotalHits
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|EngineSearcherTotalHitsMatcher
operator|.
name|engineSearcherTotalHits
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"value"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|searchResult
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSimpleSnapshot
specifier|public
name|void
name|testSimpleSnapshot
parameter_list|()
throws|throws
name|Exception
block|{
comment|// create a document
name|ParsedDocument
name|doc1
init|=
name|testParsedDocument
argument_list|(
literal|"1"
argument_list|,
literal|"1"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocumentWithTextField
argument_list|()
argument_list|,
name|Lucene
operator|.
name|STANDARD_ANALYZER
argument_list|,
name|B_1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|engine
operator|.
name|create
argument_list|(
operator|new
name|Engine
operator|.
name|Create
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc1
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|ExecutorService
name|executorService
init|=
name|Executors
operator|.
name|newCachedThreadPool
argument_list|()
decl_stmt|;
name|engine
operator|.
name|snapshot
argument_list|(
operator|new
name|Engine
operator|.
name|SnapshotHandler
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|snapshot
parameter_list|(
specifier|final
name|SnapshotIndexCommit
name|snapshotIndexCommit1
parameter_list|,
specifier|final
name|Translog
operator|.
name|Snapshot
name|translogSnapshot1
parameter_list|)
block|{
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|snapshotIndexCommit1
argument_list|,
name|SnapshotIndexCommitExistsMatcher
operator|.
name|snapshotIndexCommitExists
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|translogSnapshot1
operator|.
name|hasNext
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Translog
operator|.
name|Create
name|create1
init|=
operator|(
name|Translog
operator|.
name|Create
operator|)
name|translogSnapshot1
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|create1
operator|.
name|source
argument_list|()
operator|.
name|toBytesArray
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|B_1
operator|.
name|toBytesArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|translogSnapshot1
operator|.
name|hasNext
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|Future
argument_list|<
name|Object
argument_list|>
name|future
init|=
name|executorService
operator|.
name|submit
argument_list|(
operator|new
name|Callable
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|engine
operator|.
name|flush
argument_list|(
operator|new
name|Engine
operator|.
name|Flush
argument_list|()
argument_list|)
expr_stmt|;
name|ParsedDocument
name|doc2
init|=
name|testParsedDocument
argument_list|(
literal|"2"
argument_list|,
literal|"2"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocumentWithTextField
argument_list|()
argument_list|,
name|Lucene
operator|.
name|STANDARD_ANALYZER
argument_list|,
name|B_2
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|engine
operator|.
name|create
argument_list|(
operator|new
name|Engine
operator|.
name|Create
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"2"
argument_list|)
argument_list|,
name|doc2
argument_list|)
argument_list|)
expr_stmt|;
name|engine
operator|.
name|flush
argument_list|(
operator|new
name|Engine
operator|.
name|Flush
argument_list|()
argument_list|)
expr_stmt|;
name|ParsedDocument
name|doc3
init|=
name|testParsedDocument
argument_list|(
literal|"3"
argument_list|,
literal|"3"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocumentWithTextField
argument_list|()
argument_list|,
name|Lucene
operator|.
name|STANDARD_ANALYZER
argument_list|,
name|B_3
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|engine
operator|.
name|create
argument_list|(
operator|new
name|Engine
operator|.
name|Create
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"3"
argument_list|)
argument_list|,
name|doc3
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
decl_stmt|;
try|try
block|{
name|future
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|false
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|snapshotIndexCommit1
argument_list|,
name|SnapshotIndexCommitExistsMatcher
operator|.
name|snapshotIndexCommitExists
argument_list|()
argument_list|)
expr_stmt|;
name|engine
operator|.
name|snapshot
argument_list|(
operator|new
name|Engine
operator|.
name|SnapshotHandler
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|snapshot
parameter_list|(
name|SnapshotIndexCommit
name|snapshotIndexCommit2
parameter_list|,
name|Translog
operator|.
name|Snapshot
name|translogSnapshot2
parameter_list|)
throws|throws
name|EngineException
block|{
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|snapshotIndexCommit1
argument_list|,
name|SnapshotIndexCommitExistsMatcher
operator|.
name|snapshotIndexCommitExists
argument_list|()
argument_list|)
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|snapshotIndexCommit2
argument_list|,
name|SnapshotIndexCommitExistsMatcher
operator|.
name|snapshotIndexCommitExists
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|snapshotIndexCommit2
operator|.
name|getSegmentsFileName
argument_list|()
argument_list|,
name|not
argument_list|(
name|equalTo
argument_list|(
name|snapshotIndexCommit1
operator|.
name|getSegmentsFileName
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|translogSnapshot2
operator|.
name|hasNext
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Translog
operator|.
name|Create
name|create3
init|=
operator|(
name|Translog
operator|.
name|Create
operator|)
name|translogSnapshot2
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|create3
operator|.
name|source
argument_list|()
operator|.
name|toBytesArray
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|B_3
operator|.
name|toBytesArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|translogSnapshot2
operator|.
name|hasNext
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|engine
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSimpleRecover
specifier|public
name|void
name|testSimpleRecover
parameter_list|()
throws|throws
name|Exception
block|{
name|ParsedDocument
name|doc
init|=
name|testParsedDocument
argument_list|(
literal|"1"
argument_list|,
literal|"1"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocumentWithTextField
argument_list|()
argument_list|,
name|Lucene
operator|.
name|STANDARD_ANALYZER
argument_list|,
name|B_1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|engine
operator|.
name|create
argument_list|(
operator|new
name|Engine
operator|.
name|Create
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
argument_list|)
expr_stmt|;
name|engine
operator|.
name|flush
argument_list|(
operator|new
name|Engine
operator|.
name|Flush
argument_list|()
argument_list|)
expr_stmt|;
name|engine
operator|.
name|recover
argument_list|(
operator|new
name|Engine
operator|.
name|RecoveryHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|phase1
parameter_list|(
name|SnapshotIndexCommit
name|snapshot
parameter_list|)
throws|throws
name|EngineException
block|{
try|try
block|{
name|engine
operator|.
name|flush
argument_list|(
operator|new
name|Engine
operator|.
name|Flush
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"flush is not allowed in phase 3"
argument_list|,
literal|false
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FlushNotAllowedEngineException
name|e
parameter_list|)
block|{
comment|// all is well
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|phase2
parameter_list|(
name|Translog
operator|.
name|Snapshot
name|snapshot
parameter_list|)
throws|throws
name|EngineException
block|{
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|snapshot
argument_list|,
name|TranslogSizeMatcher
operator|.
name|translogSize
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|engine
operator|.
name|flush
argument_list|(
operator|new
name|Engine
operator|.
name|Flush
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"flush is not allowed in phase 3"
argument_list|,
literal|false
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FlushNotAllowedEngineException
name|e
parameter_list|)
block|{
comment|// all is well
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|phase3
parameter_list|(
name|Translog
operator|.
name|Snapshot
name|snapshot
parameter_list|)
throws|throws
name|EngineException
block|{
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|snapshot
argument_list|,
name|TranslogSizeMatcher
operator|.
name|translogSize
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
comment|// we can do this here since we are on the same thread
name|engine
operator|.
name|flush
argument_list|(
operator|new
name|Engine
operator|.
name|Flush
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"flush is not allowed in phase 3"
argument_list|,
literal|false
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FlushNotAllowedEngineException
name|e
parameter_list|)
block|{
comment|// all is well
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|engine
operator|.
name|flush
argument_list|(
operator|new
name|Engine
operator|.
name|Flush
argument_list|()
argument_list|)
expr_stmt|;
name|engine
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRecoverWithOperationsBetweenPhase1AndPhase2
specifier|public
name|void
name|testRecoverWithOperationsBetweenPhase1AndPhase2
parameter_list|()
throws|throws
name|Exception
block|{
name|ParsedDocument
name|doc1
init|=
name|testParsedDocument
argument_list|(
literal|"1"
argument_list|,
literal|"1"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocumentWithTextField
argument_list|()
argument_list|,
name|Lucene
operator|.
name|STANDARD_ANALYZER
argument_list|,
name|B_1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|engine
operator|.
name|create
argument_list|(
operator|new
name|Engine
operator|.
name|Create
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc1
argument_list|)
argument_list|)
expr_stmt|;
name|engine
operator|.
name|flush
argument_list|(
operator|new
name|Engine
operator|.
name|Flush
argument_list|()
argument_list|)
expr_stmt|;
name|ParsedDocument
name|doc2
init|=
name|testParsedDocument
argument_list|(
literal|"2"
argument_list|,
literal|"2"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocumentWithTextField
argument_list|()
argument_list|,
name|Lucene
operator|.
name|STANDARD_ANALYZER
argument_list|,
name|B_2
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|engine
operator|.
name|create
argument_list|(
operator|new
name|Engine
operator|.
name|Create
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"2"
argument_list|)
argument_list|,
name|doc2
argument_list|)
argument_list|)
expr_stmt|;
name|engine
operator|.
name|recover
argument_list|(
operator|new
name|Engine
operator|.
name|RecoveryHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|phase1
parameter_list|(
name|SnapshotIndexCommit
name|snapshot
parameter_list|)
throws|throws
name|EngineException
block|{             }
annotation|@
name|Override
specifier|public
name|void
name|phase2
parameter_list|(
name|Translog
operator|.
name|Snapshot
name|snapshot
parameter_list|)
throws|throws
name|EngineException
block|{
name|assertThat
argument_list|(
name|snapshot
operator|.
name|hasNext
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Translog
operator|.
name|Create
name|create
init|=
operator|(
name|Translog
operator|.
name|Create
operator|)
name|snapshot
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|create
operator|.
name|source
argument_list|()
operator|.
name|toBytesArray
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|B_2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|snapshot
operator|.
name|hasNext
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|phase3
parameter_list|(
name|Translog
operator|.
name|Snapshot
name|snapshot
parameter_list|)
throws|throws
name|EngineException
block|{
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|snapshot
argument_list|,
name|TranslogSizeMatcher
operator|.
name|translogSize
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|engine
operator|.
name|flush
argument_list|(
operator|new
name|Engine
operator|.
name|Flush
argument_list|()
argument_list|)
expr_stmt|;
name|engine
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRecoverWithOperationsBetweenPhase1AndPhase2AndPhase3
specifier|public
name|void
name|testRecoverWithOperationsBetweenPhase1AndPhase2AndPhase3
parameter_list|()
throws|throws
name|Exception
block|{
name|ParsedDocument
name|doc1
init|=
name|testParsedDocument
argument_list|(
literal|"1"
argument_list|,
literal|"1"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocumentWithTextField
argument_list|()
argument_list|,
name|Lucene
operator|.
name|STANDARD_ANALYZER
argument_list|,
name|B_1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|engine
operator|.
name|create
argument_list|(
operator|new
name|Engine
operator|.
name|Create
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc1
argument_list|)
argument_list|)
expr_stmt|;
name|engine
operator|.
name|flush
argument_list|(
operator|new
name|Engine
operator|.
name|Flush
argument_list|()
argument_list|)
expr_stmt|;
name|ParsedDocument
name|doc2
init|=
name|testParsedDocument
argument_list|(
literal|"2"
argument_list|,
literal|"2"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocumentWithTextField
argument_list|()
argument_list|,
name|Lucene
operator|.
name|STANDARD_ANALYZER
argument_list|,
name|B_2
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|engine
operator|.
name|create
argument_list|(
operator|new
name|Engine
operator|.
name|Create
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"2"
argument_list|)
argument_list|,
name|doc2
argument_list|)
argument_list|)
expr_stmt|;
name|engine
operator|.
name|recover
argument_list|(
operator|new
name|Engine
operator|.
name|RecoveryHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|phase1
parameter_list|(
name|SnapshotIndexCommit
name|snapshot
parameter_list|)
throws|throws
name|EngineException
block|{             }
annotation|@
name|Override
specifier|public
name|void
name|phase2
parameter_list|(
name|Translog
operator|.
name|Snapshot
name|snapshot
parameter_list|)
throws|throws
name|EngineException
block|{
name|assertThat
argument_list|(
name|snapshot
operator|.
name|hasNext
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Translog
operator|.
name|Create
name|create
init|=
operator|(
name|Translog
operator|.
name|Create
operator|)
name|snapshot
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|snapshot
operator|.
name|hasNext
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|create
operator|.
name|source
argument_list|()
operator|.
name|toBytesArray
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|B_2
argument_list|)
argument_list|)
expr_stmt|;
comment|// add for phase3
name|ParsedDocument
name|doc3
init|=
name|testParsedDocument
argument_list|(
literal|"3"
argument_list|,
literal|"3"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocumentWithTextField
argument_list|()
argument_list|,
name|Lucene
operator|.
name|STANDARD_ANALYZER
argument_list|,
name|B_3
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|engine
operator|.
name|create
argument_list|(
operator|new
name|Engine
operator|.
name|Create
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"3"
argument_list|)
argument_list|,
name|doc3
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|phase3
parameter_list|(
name|Translog
operator|.
name|Snapshot
name|snapshot
parameter_list|)
throws|throws
name|EngineException
block|{
name|assertThat
argument_list|(
name|snapshot
operator|.
name|hasNext
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Translog
operator|.
name|Create
name|create
init|=
operator|(
name|Translog
operator|.
name|Create
operator|)
name|snapshot
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|snapshot
operator|.
name|hasNext
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|create
operator|.
name|source
argument_list|()
operator|.
name|toBytesArray
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|B_3
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|engine
operator|.
name|flush
argument_list|(
operator|new
name|Engine
operator|.
name|Flush
argument_list|()
argument_list|)
expr_stmt|;
name|engine
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testVersioningNewCreate
specifier|public
name|void
name|testVersioningNewCreate
parameter_list|()
block|{
name|ParsedDocument
name|doc
init|=
name|testParsedDocument
argument_list|(
literal|"1"
argument_list|,
literal|"1"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocument
argument_list|()
argument_list|,
name|Lucene
operator|.
name|STANDARD_ANALYZER
argument_list|,
name|B_1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|Create
name|create
init|=
operator|new
name|Engine
operator|.
name|Create
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
decl_stmt|;
name|engine
operator|.
name|create
argument_list|(
name|create
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|create
operator|.
name|version
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
name|create
operator|=
operator|new
name|Engine
operator|.
name|Create
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
operator|.
name|version
argument_list|(
name|create
operator|.
name|version
argument_list|()
argument_list|)
operator|.
name|origin
argument_list|(
name|REPLICA
argument_list|)
expr_stmt|;
name|replicaEngine
operator|.
name|create
argument_list|(
name|create
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|create
operator|.
name|version
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testExternalVersioningNewCreate
specifier|public
name|void
name|testExternalVersioningNewCreate
parameter_list|()
block|{
name|ParsedDocument
name|doc
init|=
name|testParsedDocument
argument_list|(
literal|"1"
argument_list|,
literal|"1"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocument
argument_list|()
argument_list|,
name|Lucene
operator|.
name|STANDARD_ANALYZER
argument_list|,
name|B_1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|Create
name|create
init|=
operator|new
name|Engine
operator|.
name|Create
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
operator|.
name|versionType
argument_list|(
name|VersionType
operator|.
name|EXTERNAL
argument_list|)
operator|.
name|version
argument_list|(
literal|12
argument_list|)
decl_stmt|;
name|engine
operator|.
name|create
argument_list|(
name|create
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|create
operator|.
name|version
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|12l
argument_list|)
argument_list|)
expr_stmt|;
name|create
operator|=
operator|new
name|Engine
operator|.
name|Create
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
operator|.
name|version
argument_list|(
name|create
operator|.
name|version
argument_list|()
argument_list|)
operator|.
name|origin
argument_list|(
name|REPLICA
argument_list|)
expr_stmt|;
name|replicaEngine
operator|.
name|create
argument_list|(
name|create
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|create
operator|.
name|version
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|12l
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testVersioningNewIndex
specifier|public
name|void
name|testVersioningNewIndex
parameter_list|()
block|{
name|ParsedDocument
name|doc
init|=
name|testParsedDocument
argument_list|(
literal|"1"
argument_list|,
literal|"1"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocument
argument_list|()
argument_list|,
name|Lucene
operator|.
name|STANDARD_ANALYZER
argument_list|,
name|B_1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|Index
name|index
init|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
decl_stmt|;
name|engine
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|index
operator|.
name|version
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
name|index
operator|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
operator|.
name|version
argument_list|(
name|index
operator|.
name|version
argument_list|()
argument_list|)
operator|.
name|origin
argument_list|(
name|REPLICA
argument_list|)
expr_stmt|;
name|replicaEngine
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|index
operator|.
name|version
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testExternalVersioningNewIndex
specifier|public
name|void
name|testExternalVersioningNewIndex
parameter_list|()
block|{
name|ParsedDocument
name|doc
init|=
name|testParsedDocument
argument_list|(
literal|"1"
argument_list|,
literal|"1"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocument
argument_list|()
argument_list|,
name|Lucene
operator|.
name|STANDARD_ANALYZER
argument_list|,
name|B_1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|Index
name|index
init|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
operator|.
name|versionType
argument_list|(
name|VersionType
operator|.
name|EXTERNAL
argument_list|)
operator|.
name|version
argument_list|(
literal|12
argument_list|)
decl_stmt|;
name|engine
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|index
operator|.
name|version
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|12l
argument_list|)
argument_list|)
expr_stmt|;
name|index
operator|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
operator|.
name|version
argument_list|(
name|index
operator|.
name|version
argument_list|()
argument_list|)
operator|.
name|origin
argument_list|(
name|REPLICA
argument_list|)
expr_stmt|;
name|replicaEngine
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|index
operator|.
name|version
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|12l
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testVersioningIndexConflict
specifier|public
name|void
name|testVersioningIndexConflict
parameter_list|()
block|{
name|ParsedDocument
name|doc
init|=
name|testParsedDocument
argument_list|(
literal|"1"
argument_list|,
literal|"1"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocument
argument_list|()
argument_list|,
name|Lucene
operator|.
name|STANDARD_ANALYZER
argument_list|,
name|B_1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|Index
name|index
init|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
decl_stmt|;
name|engine
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|index
operator|.
name|version
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
name|index
operator|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
expr_stmt|;
name|engine
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|index
operator|.
name|version
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2l
argument_list|)
argument_list|)
expr_stmt|;
name|index
operator|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
operator|.
name|version
argument_list|(
literal|1l
argument_list|)
expr_stmt|;
try|try
block|{
name|engine
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|VersionConflictEngineException
name|e
parameter_list|)
block|{
comment|// all is well
block|}
comment|// future versions should not work as well
name|index
operator|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
operator|.
name|version
argument_list|(
literal|3l
argument_list|)
expr_stmt|;
try|try
block|{
name|engine
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|VersionConflictEngineException
name|e
parameter_list|)
block|{
comment|// all is well
block|}
block|}
annotation|@
name|Test
DECL|method|testExternalVersioningIndexConflict
specifier|public
name|void
name|testExternalVersioningIndexConflict
parameter_list|()
block|{
name|ParsedDocument
name|doc
init|=
name|testParsedDocument
argument_list|(
literal|"1"
argument_list|,
literal|"1"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocument
argument_list|()
argument_list|,
name|Lucene
operator|.
name|STANDARD_ANALYZER
argument_list|,
name|B_1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|Index
name|index
init|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
operator|.
name|versionType
argument_list|(
name|VersionType
operator|.
name|EXTERNAL
argument_list|)
operator|.
name|version
argument_list|(
literal|12
argument_list|)
decl_stmt|;
name|engine
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|index
operator|.
name|version
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|12l
argument_list|)
argument_list|)
expr_stmt|;
name|index
operator|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
operator|.
name|versionType
argument_list|(
name|VersionType
operator|.
name|EXTERNAL
argument_list|)
operator|.
name|version
argument_list|(
literal|14
argument_list|)
expr_stmt|;
name|engine
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|index
operator|.
name|version
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|14l
argument_list|)
argument_list|)
expr_stmt|;
name|index
operator|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
operator|.
name|versionType
argument_list|(
name|VersionType
operator|.
name|EXTERNAL
argument_list|)
operator|.
name|version
argument_list|(
literal|13l
argument_list|)
expr_stmt|;
try|try
block|{
name|engine
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|VersionConflictEngineException
name|e
parameter_list|)
block|{
comment|// all is well
block|}
block|}
annotation|@
name|Test
DECL|method|testVersioningIndexConflictWithFlush
specifier|public
name|void
name|testVersioningIndexConflictWithFlush
parameter_list|()
block|{
name|ParsedDocument
name|doc
init|=
name|testParsedDocument
argument_list|(
literal|"1"
argument_list|,
literal|"1"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocument
argument_list|()
argument_list|,
name|Lucene
operator|.
name|STANDARD_ANALYZER
argument_list|,
name|B_1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|Index
name|index
init|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
decl_stmt|;
name|engine
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|index
operator|.
name|version
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
name|index
operator|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
expr_stmt|;
name|engine
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|index
operator|.
name|version
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2l
argument_list|)
argument_list|)
expr_stmt|;
name|engine
operator|.
name|flush
argument_list|(
operator|new
name|Engine
operator|.
name|Flush
argument_list|()
argument_list|)
expr_stmt|;
name|index
operator|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
operator|.
name|version
argument_list|(
literal|1l
argument_list|)
expr_stmt|;
try|try
block|{
name|engine
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|VersionConflictEngineException
name|e
parameter_list|)
block|{
comment|// all is well
block|}
comment|// future versions should not work as well
name|index
operator|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
operator|.
name|version
argument_list|(
literal|3l
argument_list|)
expr_stmt|;
try|try
block|{
name|engine
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|VersionConflictEngineException
name|e
parameter_list|)
block|{
comment|// all is well
block|}
block|}
annotation|@
name|Test
DECL|method|testExternalVersioningIndexConflictWithFlush
specifier|public
name|void
name|testExternalVersioningIndexConflictWithFlush
parameter_list|()
block|{
name|ParsedDocument
name|doc
init|=
name|testParsedDocument
argument_list|(
literal|"1"
argument_list|,
literal|"1"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocument
argument_list|()
argument_list|,
name|Lucene
operator|.
name|STANDARD_ANALYZER
argument_list|,
name|B_1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|Index
name|index
init|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
operator|.
name|versionType
argument_list|(
name|VersionType
operator|.
name|EXTERNAL
argument_list|)
operator|.
name|version
argument_list|(
literal|12
argument_list|)
decl_stmt|;
name|engine
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|index
operator|.
name|version
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|12l
argument_list|)
argument_list|)
expr_stmt|;
name|index
operator|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
operator|.
name|versionType
argument_list|(
name|VersionType
operator|.
name|EXTERNAL
argument_list|)
operator|.
name|version
argument_list|(
literal|14
argument_list|)
expr_stmt|;
name|engine
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|index
operator|.
name|version
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|14l
argument_list|)
argument_list|)
expr_stmt|;
name|engine
operator|.
name|flush
argument_list|(
operator|new
name|Engine
operator|.
name|Flush
argument_list|()
argument_list|)
expr_stmt|;
name|index
operator|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
operator|.
name|versionType
argument_list|(
name|VersionType
operator|.
name|EXTERNAL
argument_list|)
operator|.
name|version
argument_list|(
literal|13
argument_list|)
expr_stmt|;
try|try
block|{
name|engine
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|VersionConflictEngineException
name|e
parameter_list|)
block|{
comment|// all is well
block|}
block|}
annotation|@
name|Test
DECL|method|testVersioningDeleteConflict
specifier|public
name|void
name|testVersioningDeleteConflict
parameter_list|()
block|{
name|ParsedDocument
name|doc
init|=
name|testParsedDocument
argument_list|(
literal|"1"
argument_list|,
literal|"1"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocument
argument_list|()
argument_list|,
name|Lucene
operator|.
name|STANDARD_ANALYZER
argument_list|,
name|B_1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|Index
name|index
init|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
decl_stmt|;
name|engine
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|index
operator|.
name|version
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
name|index
operator|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
expr_stmt|;
name|engine
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|index
operator|.
name|version
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2l
argument_list|)
argument_list|)
expr_stmt|;
name|Engine
operator|.
name|Delete
name|delete
init|=
operator|new
name|Engine
operator|.
name|Delete
argument_list|(
literal|"test"
argument_list|,
literal|"1"
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|)
operator|.
name|version
argument_list|(
literal|1l
argument_list|)
decl_stmt|;
try|try
block|{
name|engine
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|VersionConflictEngineException
name|e
parameter_list|)
block|{
comment|// all is well
block|}
comment|// future versions should not work as well
name|delete
operator|=
operator|new
name|Engine
operator|.
name|Delete
argument_list|(
literal|"test"
argument_list|,
literal|"1"
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|)
operator|.
name|version
argument_list|(
literal|3l
argument_list|)
expr_stmt|;
try|try
block|{
name|engine
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|VersionConflictEngineException
name|e
parameter_list|)
block|{
comment|// all is well
block|}
comment|// now actually delete
name|delete
operator|=
operator|new
name|Engine
operator|.
name|Delete
argument_list|(
literal|"test"
argument_list|,
literal|"1"
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|)
operator|.
name|version
argument_list|(
literal|2l
argument_list|)
expr_stmt|;
name|engine
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|delete
operator|.
name|version
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3l
argument_list|)
argument_list|)
expr_stmt|;
comment|// now check if we can index to a delete doc with version
name|index
operator|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
operator|.
name|version
argument_list|(
literal|2l
argument_list|)
expr_stmt|;
try|try
block|{
name|engine
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|VersionConflictEngineException
name|e
parameter_list|)
block|{
comment|// all is well
block|}
comment|// we shouldn't be able to create as well
name|Engine
operator|.
name|Create
name|create
init|=
operator|new
name|Engine
operator|.
name|Create
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
operator|.
name|version
argument_list|(
literal|2l
argument_list|)
decl_stmt|;
try|try
block|{
name|engine
operator|.
name|create
argument_list|(
name|create
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|VersionConflictEngineException
name|e
parameter_list|)
block|{
comment|// all is well
block|}
block|}
annotation|@
name|Test
DECL|method|testVersioningDeleteConflictWithFlush
specifier|public
name|void
name|testVersioningDeleteConflictWithFlush
parameter_list|()
block|{
name|ParsedDocument
name|doc
init|=
name|testParsedDocument
argument_list|(
literal|"1"
argument_list|,
literal|"1"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocument
argument_list|()
argument_list|,
name|Lucene
operator|.
name|STANDARD_ANALYZER
argument_list|,
name|B_1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|Index
name|index
init|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
decl_stmt|;
name|engine
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|index
operator|.
name|version
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
name|index
operator|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
expr_stmt|;
name|engine
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|index
operator|.
name|version
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2l
argument_list|)
argument_list|)
expr_stmt|;
name|engine
operator|.
name|flush
argument_list|(
operator|new
name|Engine
operator|.
name|Flush
argument_list|()
argument_list|)
expr_stmt|;
name|Engine
operator|.
name|Delete
name|delete
init|=
operator|new
name|Engine
operator|.
name|Delete
argument_list|(
literal|"test"
argument_list|,
literal|"1"
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|)
operator|.
name|version
argument_list|(
literal|1l
argument_list|)
decl_stmt|;
try|try
block|{
name|engine
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|VersionConflictEngineException
name|e
parameter_list|)
block|{
comment|// all is well
block|}
comment|// future versions should not work as well
name|delete
operator|=
operator|new
name|Engine
operator|.
name|Delete
argument_list|(
literal|"test"
argument_list|,
literal|"1"
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|)
operator|.
name|version
argument_list|(
literal|3l
argument_list|)
expr_stmt|;
try|try
block|{
name|engine
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|VersionConflictEngineException
name|e
parameter_list|)
block|{
comment|// all is well
block|}
name|engine
operator|.
name|flush
argument_list|(
operator|new
name|Engine
operator|.
name|Flush
argument_list|()
argument_list|)
expr_stmt|;
comment|// now actually delete
name|delete
operator|=
operator|new
name|Engine
operator|.
name|Delete
argument_list|(
literal|"test"
argument_list|,
literal|"1"
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|)
operator|.
name|version
argument_list|(
literal|2l
argument_list|)
expr_stmt|;
name|engine
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|delete
operator|.
name|version
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3l
argument_list|)
argument_list|)
expr_stmt|;
name|engine
operator|.
name|flush
argument_list|(
operator|new
name|Engine
operator|.
name|Flush
argument_list|()
argument_list|)
expr_stmt|;
comment|// now check if we can index to a delete doc with version
name|index
operator|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
operator|.
name|version
argument_list|(
literal|2l
argument_list|)
expr_stmt|;
try|try
block|{
name|engine
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|VersionConflictEngineException
name|e
parameter_list|)
block|{
comment|// all is well
block|}
comment|// we shouldn't be able to create as well
name|Engine
operator|.
name|Create
name|create
init|=
operator|new
name|Engine
operator|.
name|Create
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
operator|.
name|version
argument_list|(
literal|2l
argument_list|)
decl_stmt|;
try|try
block|{
name|engine
operator|.
name|create
argument_list|(
name|create
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|VersionConflictEngineException
name|e
parameter_list|)
block|{
comment|// all is well
block|}
block|}
annotation|@
name|Test
DECL|method|testVersioningCreateExistsException
specifier|public
name|void
name|testVersioningCreateExistsException
parameter_list|()
block|{
name|ParsedDocument
name|doc
init|=
name|testParsedDocument
argument_list|(
literal|"1"
argument_list|,
literal|"1"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocument
argument_list|()
argument_list|,
name|Lucene
operator|.
name|STANDARD_ANALYZER
argument_list|,
name|B_1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|Create
name|create
init|=
operator|new
name|Engine
operator|.
name|Create
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
decl_stmt|;
name|engine
operator|.
name|create
argument_list|(
name|create
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|create
operator|.
name|version
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
name|create
operator|=
operator|new
name|Engine
operator|.
name|Create
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
expr_stmt|;
try|try
block|{
name|engine
operator|.
name|create
argument_list|(
name|create
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DocumentAlreadyExistsException
name|e
parameter_list|)
block|{
comment|// all is well
block|}
block|}
annotation|@
name|Test
DECL|method|testVersioningCreateExistsExceptionWithFlush
specifier|public
name|void
name|testVersioningCreateExistsExceptionWithFlush
parameter_list|()
block|{
name|ParsedDocument
name|doc
init|=
name|testParsedDocument
argument_list|(
literal|"1"
argument_list|,
literal|"1"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocument
argument_list|()
argument_list|,
name|Lucene
operator|.
name|STANDARD_ANALYZER
argument_list|,
name|B_1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|Create
name|create
init|=
operator|new
name|Engine
operator|.
name|Create
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
decl_stmt|;
name|engine
operator|.
name|create
argument_list|(
name|create
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|create
operator|.
name|version
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
name|engine
operator|.
name|flush
argument_list|(
operator|new
name|Engine
operator|.
name|Flush
argument_list|()
argument_list|)
expr_stmt|;
name|create
operator|=
operator|new
name|Engine
operator|.
name|Create
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
expr_stmt|;
try|try
block|{
name|engine
operator|.
name|create
argument_list|(
name|create
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DocumentAlreadyExistsException
name|e
parameter_list|)
block|{
comment|// all is well
block|}
block|}
annotation|@
name|Test
DECL|method|testVersioningReplicaConflict1
specifier|public
name|void
name|testVersioningReplicaConflict1
parameter_list|()
block|{
name|ParsedDocument
name|doc
init|=
name|testParsedDocument
argument_list|(
literal|"1"
argument_list|,
literal|"1"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocument
argument_list|()
argument_list|,
name|Lucene
operator|.
name|STANDARD_ANALYZER
argument_list|,
name|B_1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|Index
name|index
init|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
decl_stmt|;
name|engine
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|index
operator|.
name|version
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
name|index
operator|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
expr_stmt|;
name|engine
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|index
operator|.
name|version
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2l
argument_list|)
argument_list|)
expr_stmt|;
comment|// apply the second index to the replica, should work fine
name|index
operator|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
operator|.
name|version
argument_list|(
literal|2l
argument_list|)
operator|.
name|origin
argument_list|(
name|REPLICA
argument_list|)
expr_stmt|;
name|replicaEngine
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|index
operator|.
name|version
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2l
argument_list|)
argument_list|)
expr_stmt|;
comment|// now, the old one should not work
name|index
operator|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
operator|.
name|version
argument_list|(
literal|1l
argument_list|)
operator|.
name|origin
argument_list|(
name|REPLICA
argument_list|)
expr_stmt|;
try|try
block|{
name|replicaEngine
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|VersionConflictEngineException
name|e
parameter_list|)
block|{
comment|// all is well
block|}
comment|// second version on replica should fail as well
try|try
block|{
name|index
operator|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
operator|.
name|version
argument_list|(
literal|2l
argument_list|)
operator|.
name|origin
argument_list|(
name|REPLICA
argument_list|)
expr_stmt|;
name|replicaEngine
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|index
operator|.
name|version
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2l
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|VersionConflictEngineException
name|e
parameter_list|)
block|{
comment|// all is well
block|}
block|}
annotation|@
name|Test
DECL|method|testVersioningReplicaConflict2
specifier|public
name|void
name|testVersioningReplicaConflict2
parameter_list|()
block|{
name|ParsedDocument
name|doc
init|=
name|testParsedDocument
argument_list|(
literal|"1"
argument_list|,
literal|"1"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocument
argument_list|()
argument_list|,
name|Lucene
operator|.
name|STANDARD_ANALYZER
argument_list|,
name|B_1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|Index
name|index
init|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
decl_stmt|;
name|engine
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|index
operator|.
name|version
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
comment|// apply the first index to the replica, should work fine
name|index
operator|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
operator|.
name|version
argument_list|(
literal|1l
argument_list|)
operator|.
name|origin
argument_list|(
name|REPLICA
argument_list|)
expr_stmt|;
name|replicaEngine
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|index
operator|.
name|version
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
comment|// index it again
name|index
operator|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
expr_stmt|;
name|engine
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|index
operator|.
name|version
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2l
argument_list|)
argument_list|)
expr_stmt|;
comment|// now delete it
name|Engine
operator|.
name|Delete
name|delete
init|=
operator|new
name|Engine
operator|.
name|Delete
argument_list|(
literal|"test"
argument_list|,
literal|"1"
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|)
decl_stmt|;
name|engine
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|delete
operator|.
name|version
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3l
argument_list|)
argument_list|)
expr_stmt|;
comment|// apply the delete on the replica (skipping the second index)
name|delete
operator|=
operator|new
name|Engine
operator|.
name|Delete
argument_list|(
literal|"test"
argument_list|,
literal|"1"
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|)
operator|.
name|version
argument_list|(
literal|3l
argument_list|)
operator|.
name|origin
argument_list|(
name|REPLICA
argument_list|)
expr_stmt|;
name|replicaEngine
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|delete
operator|.
name|version
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3l
argument_list|)
argument_list|)
expr_stmt|;
comment|// second time delete with same version should fail
try|try
block|{
name|delete
operator|=
operator|new
name|Engine
operator|.
name|Delete
argument_list|(
literal|"test"
argument_list|,
literal|"1"
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|)
operator|.
name|version
argument_list|(
literal|3l
argument_list|)
operator|.
name|origin
argument_list|(
name|REPLICA
argument_list|)
expr_stmt|;
name|replicaEngine
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|delete
operator|.
name|version
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3l
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|VersionConflictEngineException
name|e
parameter_list|)
block|{
comment|// all is well
block|}
comment|// now do the second index on the replica, it should fail
try|try
block|{
name|index
operator|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
operator|.
name|version
argument_list|(
literal|2l
argument_list|)
operator|.
name|origin
argument_list|(
name|REPLICA
argument_list|)
expr_stmt|;
name|replicaEngine
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|index
operator|.
name|version
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2l
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|VersionConflictEngineException
name|e
parameter_list|)
block|{
comment|// all is well
block|}
block|}
annotation|@
name|Test
DECL|method|testBasicCreatedFlag
specifier|public
name|void
name|testBasicCreatedFlag
parameter_list|()
block|{
name|ParsedDocument
name|doc
init|=
name|testParsedDocument
argument_list|(
literal|"1"
argument_list|,
literal|"1"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocument
argument_list|()
argument_list|,
name|Lucene
operator|.
name|STANDARD_ANALYZER
argument_list|,
name|B_1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|Index
name|index
init|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
decl_stmt|;
name|engine
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|index
operator|.
name|created
argument_list|()
argument_list|)
expr_stmt|;
name|index
operator|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
expr_stmt|;
name|engine
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|index
operator|.
name|created
argument_list|()
argument_list|)
expr_stmt|;
name|engine
operator|.
name|delete
argument_list|(
operator|new
name|Engine
operator|.
name|Delete
argument_list|(
literal|null
argument_list|,
literal|"1"
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|index
operator|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
expr_stmt|;
name|engine
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|index
operator|.
name|created
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCreatedFlagAfterFlush
specifier|public
name|void
name|testCreatedFlagAfterFlush
parameter_list|()
block|{
name|ParsedDocument
name|doc
init|=
name|testParsedDocument
argument_list|(
literal|"1"
argument_list|,
literal|"1"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocument
argument_list|()
argument_list|,
name|Lucene
operator|.
name|STANDARD_ANALYZER
argument_list|,
name|B_1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|Index
name|index
init|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
decl_stmt|;
name|engine
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|index
operator|.
name|created
argument_list|()
argument_list|)
expr_stmt|;
name|engine
operator|.
name|delete
argument_list|(
operator|new
name|Engine
operator|.
name|Delete
argument_list|(
literal|null
argument_list|,
literal|"1"
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|engine
operator|.
name|flush
argument_list|(
operator|new
name|Engine
operator|.
name|Flush
argument_list|()
argument_list|)
expr_stmt|;
name|index
operator|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
expr_stmt|;
name|engine
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|index
operator|.
name|created
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|newUid
specifier|protected
name|Term
name|newUid
parameter_list|(
name|String
name|id
parameter_list|)
block|{
return|return
operator|new
name|Term
argument_list|(
literal|"_uid"
argument_list|,
name|id
argument_list|)
return|;
block|}
block|}
end_class

end_unit

