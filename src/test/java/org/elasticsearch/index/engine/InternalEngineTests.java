begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.engine
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|AppenderSkeleton
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|spi
operator|.
name|LoggingEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|Codec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|NumericDocValuesField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|TextField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|MatchAllDocsQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TopDocs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|AlreadyClosedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|MockDirectoryWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
operator|.
name|SuppressFileSystems
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|Tuple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|Lucene
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|uid
operator|.
name|Versions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|BigArrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|VersionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|AnalysisService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|codec
operator|.
name|CodecService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|deletionpolicy
operator|.
name|KeepOnlyLastDeletionPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|deletionpolicy
operator|.
name|SnapshotDeletionPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|Engine
operator|.
name|Searcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|indexing
operator|.
name|ShardIndexingService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|indexing
operator|.
name|slowlog
operator|.
name|ShardSlowLogIndexingService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|Mapper
operator|.
name|BuilderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|ParseContext
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|internal
operator|.
name|SourceFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|internal
operator|.
name|UidFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|object
operator|.
name|RootObjectMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|merge
operator|.
name|policy
operator|.
name|LogByteSizeMergePolicyProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|merge
operator|.
name|policy
operator|.
name|MergePolicyProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|merge
operator|.
name|scheduler
operator|.
name|ConcurrentMergeSchedulerProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|merge
operator|.
name|scheduler
operator|.
name|MergeSchedulerProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|settings
operator|.
name|IndexDynamicSettingsModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|settings
operator|.
name|IndexSettingsService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|TranslogRecoveryPerformer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|similarity
operator|.
name|SimilarityLookupService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|store
operator|.
name|DirectoryService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|store
operator|.
name|DirectoryUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|store
operator|.
name|Store
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|translog
operator|.
name|Translog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|DummyShardLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|junit
operator|.
name|annotations
operator|.
name|TestLogging
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|MatcherAssert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
operator|.
name|Builder
operator|.
name|EMPTY_SETTINGS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|Engine
operator|.
name|Operation
operator|.
name|Origin
operator|.
name|PRIMARY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|Engine
operator|.
name|Operation
operator|.
name|Origin
operator|.
name|REPLICA
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|*
import|;
end_import

begin_comment
comment|// TODO: this guy isn't ready for mock filesystems yet
end_comment

begin_class
annotation|@
name|SuppressFileSystems
argument_list|(
literal|"*"
argument_list|)
DECL|class|InternalEngineTests
specifier|public
class|class
name|InternalEngineTests
extends|extends
name|ElasticsearchTestCase
block|{
DECL|field|shardId
specifier|protected
specifier|final
name|ShardId
name|shardId
init|=
operator|new
name|ShardId
argument_list|(
operator|new
name|Index
argument_list|(
literal|"index"
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
DECL|field|threadPool
specifier|protected
name|ThreadPool
name|threadPool
decl_stmt|;
DECL|field|store
specifier|private
name|Store
name|store
decl_stmt|;
DECL|field|storeReplica
specifier|private
name|Store
name|storeReplica
decl_stmt|;
DECL|field|engine
specifier|protected
name|InternalEngine
name|engine
decl_stmt|;
DECL|field|replicaEngine
specifier|protected
name|InternalEngine
name|replicaEngine
decl_stmt|;
DECL|field|defaultSettings
specifier|private
name|Settings
name|defaultSettings
decl_stmt|;
DECL|field|indexConcurrency
specifier|private
name|int
name|indexConcurrency
decl_stmt|;
DECL|field|codecName
specifier|private
name|String
name|codecName
decl_stmt|;
DECL|field|primaryTranslogDir
specifier|private
name|Path
name|primaryTranslogDir
decl_stmt|;
DECL|field|replicaTranslogDir
specifier|private
name|Path
name|replicaTranslogDir
decl_stmt|;
annotation|@
name|Override
annotation|@
name|Before
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|CodecService
name|codecService
init|=
operator|new
name|CodecService
argument_list|(
name|shardId
operator|.
name|index
argument_list|()
argument_list|)
decl_stmt|;
name|indexConcurrency
operator|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|String
name|name
init|=
name|Codec
operator|.
name|getDefault
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|Arrays
operator|.
name|asList
argument_list|(
name|codecService
operator|.
name|availableCodecs
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|name
argument_list|)
condition|)
block|{
comment|// some codecs are read only so we only take the ones that we have in the service and randomly
comment|// selected by lucene test case.
name|codecName
operator|=
name|name
expr_stmt|;
block|}
else|else
block|{
name|codecName
operator|=
literal|"default"
expr_stmt|;
block|}
name|defaultSettings
operator|=
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|EngineConfig
operator|.
name|INDEX_COMPOUND_ON_FLUSH
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|EngineConfig
operator|.
name|INDEX_GC_DELETES_SETTING
argument_list|,
literal|"1h"
argument_list|)
comment|// make sure this doesn't kick in on us
operator|.
name|put
argument_list|(
name|EngineConfig
operator|.
name|INDEX_CODEC_SETTING
argument_list|,
name|codecName
argument_list|)
operator|.
name|put
argument_list|(
name|EngineConfig
operator|.
name|INDEX_CONCURRENCY_SETTING
argument_list|,
name|indexConcurrency
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
comment|// TODO randomize more settings
name|threadPool
operator|=
operator|new
name|ThreadPool
argument_list|(
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|store
operator|=
name|createStore
argument_list|()
expr_stmt|;
name|storeReplica
operator|=
name|createStore
argument_list|()
expr_stmt|;
name|Lucene
operator|.
name|cleanLuceneIndex
argument_list|(
name|store
operator|.
name|directory
argument_list|()
argument_list|)
expr_stmt|;
name|Lucene
operator|.
name|cleanLuceneIndex
argument_list|(
name|storeReplica
operator|.
name|directory
argument_list|()
argument_list|)
expr_stmt|;
name|primaryTranslogDir
operator|=
name|createTempDir
argument_list|(
literal|"translog-primary"
argument_list|)
expr_stmt|;
name|engine
operator|=
name|createEngine
argument_list|(
name|store
argument_list|,
name|primaryTranslogDir
argument_list|)
expr_stmt|;
name|LiveIndexWriterConfig
name|currentIndexWriterConfig
init|=
name|engine
operator|.
name|getCurrentIndexWriterConfig
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|engine
operator|.
name|config
argument_list|()
operator|.
name|getCodec
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|codecService
operator|.
name|codec
argument_list|(
name|codecName
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|currentIndexWriterConfig
operator|.
name|getCodec
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|codecService
operator|.
name|codec
argument_list|(
name|codecName
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|engine
operator|.
name|config
argument_list|()
operator|.
name|setEnableGcDeletes
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|replicaTranslogDir
operator|=
name|createTempDir
argument_list|(
literal|"translog-replica"
argument_list|)
expr_stmt|;
name|replicaEngine
operator|=
name|createEngine
argument_list|(
name|storeReplica
argument_list|,
name|replicaTranslogDir
argument_list|)
expr_stmt|;
name|currentIndexWriterConfig
operator|=
name|replicaEngine
operator|.
name|getCurrentIndexWriterConfig
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|replicaEngine
operator|.
name|config
argument_list|()
operator|.
name|getCodec
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|codecService
operator|.
name|codec
argument_list|(
name|codecName
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|currentIndexWriterConfig
operator|.
name|getCodec
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|codecService
operator|.
name|codec
argument_list|(
name|codecName
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|engine
operator|.
name|config
argument_list|()
operator|.
name|setEnableGcDeletes
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
annotation|@
name|After
DECL|method|tearDown
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
name|IOUtils
operator|.
name|close
argument_list|(
name|replicaEngine
argument_list|,
name|storeReplica
argument_list|,
name|engine
argument_list|,
name|store
argument_list|)
expr_stmt|;
name|terminate
argument_list|(
name|threadPool
argument_list|)
expr_stmt|;
block|}
DECL|method|testDocumentWithTextField
specifier|private
name|Document
name|testDocumentWithTextField
parameter_list|()
block|{
name|Document
name|document
init|=
name|testDocument
argument_list|()
decl_stmt|;
name|document
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"value"
argument_list|,
literal|"test"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|document
return|;
block|}
DECL|method|testDocument
specifier|private
name|Document
name|testDocument
parameter_list|()
block|{
return|return
operator|new
name|Document
argument_list|()
return|;
block|}
DECL|method|testParsedDocument
specifier|private
name|ParsedDocument
name|testParsedDocument
parameter_list|(
name|String
name|uid
parameter_list|,
name|String
name|id
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|routing
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|long
name|ttl
parameter_list|,
name|Document
name|document
parameter_list|,
name|BytesReference
name|source
parameter_list|,
name|Mapping
name|mappingUpdate
parameter_list|)
block|{
name|Field
name|uidField
init|=
operator|new
name|Field
argument_list|(
literal|"_uid"
argument_list|,
name|uid
argument_list|,
name|UidFieldMapper
operator|.
name|Defaults
operator|.
name|FIELD_TYPE
argument_list|)
decl_stmt|;
name|Field
name|versionField
init|=
operator|new
name|NumericDocValuesField
argument_list|(
literal|"_version"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|document
operator|.
name|add
argument_list|(
name|uidField
argument_list|)
expr_stmt|;
name|document
operator|.
name|add
argument_list|(
name|versionField
argument_list|)
expr_stmt|;
return|return
operator|new
name|ParsedDocument
argument_list|(
name|uidField
argument_list|,
name|versionField
argument_list|,
name|id
argument_list|,
name|type
argument_list|,
name|routing
argument_list|,
name|timestamp
argument_list|,
name|ttl
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|document
argument_list|)
argument_list|,
name|source
argument_list|,
name|mappingUpdate
argument_list|)
return|;
block|}
DECL|method|createStore
specifier|protected
name|Store
name|createStore
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|createStore
argument_list|(
name|newDirectory
argument_list|()
argument_list|)
return|;
block|}
DECL|method|createStore
specifier|protected
name|Store
name|createStore
parameter_list|(
specifier|final
name|Directory
name|directory
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|DirectoryService
name|directoryService
init|=
operator|new
name|DirectoryService
argument_list|(
name|shardId
argument_list|,
name|EMPTY_SETTINGS
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Directory
name|newDirectory
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|directory
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|throttleTimeInNanos
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
block|}
decl_stmt|;
return|return
operator|new
name|Store
argument_list|(
name|shardId
argument_list|,
name|EMPTY_SETTINGS
argument_list|,
name|directoryService
argument_list|,
operator|new
name|DummyShardLock
argument_list|(
name|shardId
argument_list|)
argument_list|)
return|;
block|}
DECL|method|createTranslog
specifier|protected
name|Translog
name|createTranslog
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|createTranslog
argument_list|(
name|primaryTranslogDir
argument_list|)
return|;
block|}
DECL|method|createTranslog
specifier|protected
name|Translog
name|createTranslog
parameter_list|(
name|Path
name|translogPath
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|Translog
argument_list|(
name|shardId
argument_list|,
name|EMPTY_SETTINGS
argument_list|,
name|BigArrays
operator|.
name|NON_RECYCLING_INSTANCE
argument_list|,
name|translogPath
argument_list|)
return|;
block|}
DECL|method|createTranslogReplica
specifier|protected
name|Translog
name|createTranslogReplica
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|createTranslog
argument_list|(
name|replicaTranslogDir
argument_list|)
return|;
block|}
DECL|method|createIndexDeletionPolicy
specifier|protected
name|IndexDeletionPolicy
name|createIndexDeletionPolicy
parameter_list|()
block|{
return|return
operator|new
name|KeepOnlyLastDeletionPolicy
argument_list|(
name|shardId
argument_list|,
name|EMPTY_SETTINGS
argument_list|)
return|;
block|}
DECL|method|createSnapshotDeletionPolicy
specifier|protected
name|SnapshotDeletionPolicy
name|createSnapshotDeletionPolicy
parameter_list|()
block|{
return|return
operator|new
name|SnapshotDeletionPolicy
argument_list|(
name|createIndexDeletionPolicy
argument_list|()
argument_list|)
return|;
block|}
DECL|method|createMergePolicy
specifier|protected
name|MergePolicyProvider
argument_list|<
name|?
argument_list|>
name|createMergePolicy
parameter_list|()
block|{
return|return
operator|new
name|LogByteSizeMergePolicyProvider
argument_list|(
name|store
argument_list|,
operator|new
name|IndexSettingsService
argument_list|(
operator|new
name|Index
argument_list|(
literal|"test"
argument_list|)
argument_list|,
name|EMPTY_SETTINGS
argument_list|)
argument_list|)
return|;
block|}
DECL|method|createMergeScheduler
specifier|protected
name|MergeSchedulerProvider
name|createMergeScheduler
parameter_list|(
name|IndexSettingsService
name|indexSettingsService
parameter_list|)
block|{
return|return
operator|new
name|ConcurrentMergeSchedulerProvider
argument_list|(
name|shardId
argument_list|,
name|EMPTY_SETTINGS
argument_list|,
name|threadPool
argument_list|,
name|indexSettingsService
argument_list|)
return|;
block|}
DECL|method|createEngine
specifier|protected
name|InternalEngine
name|createEngine
parameter_list|(
name|Store
name|store
parameter_list|,
name|Path
name|translogPath
parameter_list|)
block|{
name|IndexSettingsService
name|indexSettingsService
init|=
operator|new
name|IndexSettingsService
argument_list|(
name|shardId
operator|.
name|index
argument_list|()
argument_list|,
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|defaultSettings
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_VERSION_CREATED
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|createEngine
argument_list|(
name|indexSettingsService
argument_list|,
name|store
argument_list|,
name|translogPath
argument_list|,
name|createMergeScheduler
argument_list|(
name|indexSettingsService
argument_list|)
argument_list|)
return|;
block|}
DECL|method|createEngine
specifier|protected
name|InternalEngine
name|createEngine
parameter_list|(
name|IndexSettingsService
name|indexSettingsService
parameter_list|,
name|Store
name|store
parameter_list|,
name|Path
name|translogPath
parameter_list|,
name|MergeSchedulerProvider
name|mergeSchedulerProvider
parameter_list|)
block|{
return|return
operator|new
name|InternalEngine
argument_list|(
name|config
argument_list|(
name|indexSettingsService
argument_list|,
name|store
argument_list|,
name|translogPath
argument_list|,
name|mergeSchedulerProvider
argument_list|)
argument_list|,
literal|false
argument_list|)
return|;
block|}
DECL|method|config
specifier|public
name|EngineConfig
name|config
parameter_list|(
name|IndexSettingsService
name|indexSettingsService
parameter_list|,
name|Store
name|store
parameter_list|,
name|Path
name|translogPath
parameter_list|,
name|MergeSchedulerProvider
name|mergeSchedulerProvider
parameter_list|)
block|{
name|IndexWriterConfig
name|iwc
init|=
name|newIndexWriterConfig
argument_list|()
decl_stmt|;
name|EngineConfig
name|config
init|=
operator|new
name|EngineConfig
argument_list|(
name|shardId
argument_list|,
name|threadPool
argument_list|,
operator|new
name|ShardIndexingService
argument_list|(
name|shardId
argument_list|,
name|EMPTY_SETTINGS
argument_list|,
operator|new
name|ShardSlowLogIndexingService
argument_list|(
name|shardId
argument_list|,
name|EMPTY_SETTINGS
argument_list|,
name|indexSettingsService
argument_list|)
argument_list|)
argument_list|,
name|indexSettingsService
argument_list|,
literal|null
argument_list|,
name|store
argument_list|,
name|createSnapshotDeletionPolicy
argument_list|()
argument_list|,
name|createMergePolicy
argument_list|()
argument_list|,
name|mergeSchedulerProvider
argument_list|,
name|iwc
operator|.
name|getAnalyzer
argument_list|()
argument_list|,
name|iwc
operator|.
name|getSimilarity
argument_list|()
argument_list|,
operator|new
name|CodecService
argument_list|(
name|shardId
operator|.
name|index
argument_list|()
argument_list|)
argument_list|,
operator|new
name|Engine
operator|.
name|FailedEngineListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailedEngine
parameter_list|(
name|ShardId
name|shardId
parameter_list|,
name|String
name|reason
parameter_list|,
annotation|@
name|Nullable
name|Throwable
name|t
parameter_list|)
block|{
comment|// we don't need to notify anybody in this test
block|}
block|}
argument_list|,
operator|new
name|TranslogHandler
argument_list|(
name|shardId
operator|.
name|index
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|IndexSearcher
operator|.
name|getDefaultQueryCache
argument_list|()
argument_list|,
name|IndexSearcher
operator|.
name|getDefaultQueryCachingPolicy
argument_list|()
argument_list|,
name|BigArrays
operator|.
name|NON_RECYCLING_INSTANCE
argument_list|,
name|translogPath
argument_list|)
decl_stmt|;
return|return
name|config
return|;
block|}
DECL|field|B_1
specifier|protected
specifier|static
specifier|final
name|BytesReference
name|B_1
init|=
operator|new
name|BytesArray
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|1
block|}
argument_list|)
decl_stmt|;
DECL|field|B_2
specifier|protected
specifier|static
specifier|final
name|BytesReference
name|B_2
init|=
operator|new
name|BytesArray
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|2
block|}
argument_list|)
decl_stmt|;
DECL|field|B_3
specifier|protected
specifier|static
specifier|final
name|BytesReference
name|B_3
init|=
operator|new
name|BytesArray
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|3
block|}
argument_list|)
decl_stmt|;
annotation|@
name|Test
DECL|method|testSegments
specifier|public
name|void
name|testSegments
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Segment
argument_list|>
name|segments
init|=
name|engine
operator|.
name|segments
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|engine
operator|.
name|segmentsStats
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|engine
operator|.
name|segmentsStats
argument_list|()
operator|.
name|getMemoryInBytes
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0l
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|boolean
name|defaultCompound
init|=
name|defaultSettings
operator|.
name|getAsBoolean
argument_list|(
name|EngineConfig
operator|.
name|INDEX_COMPOUND_ON_FLUSH
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// create a doc and refresh
name|ParsedDocument
name|doc
init|=
name|testParsedDocument
argument_list|(
literal|"1"
argument_list|,
literal|"1"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocumentWithTextField
argument_list|()
argument_list|,
name|B_1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|engine
operator|.
name|create
argument_list|(
operator|new
name|Engine
operator|.
name|Create
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
argument_list|)
expr_stmt|;
name|ParsedDocument
name|doc2
init|=
name|testParsedDocument
argument_list|(
literal|"2"
argument_list|,
literal|"2"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocumentWithTextField
argument_list|()
argument_list|,
name|B_2
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|engine
operator|.
name|create
argument_list|(
operator|new
name|Engine
operator|.
name|Create
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"2"
argument_list|)
argument_list|,
name|doc2
argument_list|)
argument_list|)
expr_stmt|;
name|engine
operator|.
name|refresh
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|segments
operator|=
name|engine
operator|.
name|segments
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|SegmentsStats
name|stats
init|=
name|engine
operator|.
name|segmentsStats
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|stats
operator|.
name|getCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stats
operator|.
name|getTermsMemoryInBytes
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
literal|0l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stats
operator|.
name|getStoredFieldsMemoryInBytes
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
literal|0l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stats
operator|.
name|getTermVectorsMemoryInBytes
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stats
operator|.
name|getNormsMemoryInBytes
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
literal|0l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stats
operator|.
name|getDocValuesMemoryInBytes
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
literal|0l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isCommitted
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isSearch
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getNumDocs
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getDeletedDocs
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isCompound
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|defaultCompound
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|ramTree
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|engine
operator|.
name|flush
argument_list|()
expr_stmt|;
name|segments
operator|=
name|engine
operator|.
name|segments
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|engine
operator|.
name|segmentsStats
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isCommitted
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isSearch
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getNumDocs
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getDeletedDocs
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isCompound
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|defaultCompound
argument_list|)
argument_list|)
expr_stmt|;
name|engine
operator|.
name|config
argument_list|()
operator|.
name|setCompoundOnFlush
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|ParsedDocument
name|doc3
init|=
name|testParsedDocument
argument_list|(
literal|"3"
argument_list|,
literal|"3"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocumentWithTextField
argument_list|()
argument_list|,
name|B_3
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|engine
operator|.
name|create
argument_list|(
operator|new
name|Engine
operator|.
name|Create
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"3"
argument_list|)
argument_list|,
name|doc3
argument_list|)
argument_list|)
expr_stmt|;
name|engine
operator|.
name|refresh
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|segments
operator|=
name|engine
operator|.
name|segments
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|engine
operator|.
name|segmentsStats
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|engine
operator|.
name|segmentsStats
argument_list|()
operator|.
name|getTermsMemoryInBytes
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
name|stats
operator|.
name|getTermsMemoryInBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|engine
operator|.
name|segmentsStats
argument_list|()
operator|.
name|getStoredFieldsMemoryInBytes
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
name|stats
operator|.
name|getStoredFieldsMemoryInBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|engine
operator|.
name|segmentsStats
argument_list|()
operator|.
name|getTermVectorsMemoryInBytes
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|engine
operator|.
name|segmentsStats
argument_list|()
operator|.
name|getNormsMemoryInBytes
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
name|stats
operator|.
name|getNormsMemoryInBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|engine
operator|.
name|segmentsStats
argument_list|()
operator|.
name|getDocValuesMemoryInBytes
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
name|stats
operator|.
name|getDocValuesMemoryInBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getGeneration
argument_list|()
operator|<
name|segments
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getGeneration
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isCommitted
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isSearch
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getNumDocs
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getDeletedDocs
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isCompound
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|defaultCompound
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|isCommitted
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|isSearch
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getNumDocs
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getDeletedDocs
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|isCompound
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|engine
operator|.
name|delete
argument_list|(
operator|new
name|Engine
operator|.
name|Delete
argument_list|(
literal|"test"
argument_list|,
literal|"1"
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|engine
operator|.
name|refresh
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|segments
operator|=
name|engine
operator|.
name|segments
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|engine
operator|.
name|segmentsStats
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getGeneration
argument_list|()
operator|<
name|segments
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getGeneration
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isCommitted
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isSearch
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getNumDocs
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getDeletedDocs
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isCompound
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|defaultCompound
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|isCommitted
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|isSearch
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getNumDocs
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getDeletedDocs
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|isCompound
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|engine
operator|.
name|config
argument_list|()
operator|.
name|setCompoundOnFlush
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ParsedDocument
name|doc4
init|=
name|testParsedDocument
argument_list|(
literal|"4"
argument_list|,
literal|"4"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocumentWithTextField
argument_list|()
argument_list|,
name|B_3
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|engine
operator|.
name|create
argument_list|(
operator|new
name|Engine
operator|.
name|Create
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"4"
argument_list|)
argument_list|,
name|doc4
argument_list|)
argument_list|)
expr_stmt|;
name|engine
operator|.
name|refresh
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|segments
operator|=
name|engine
operator|.
name|segments
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|engine
operator|.
name|segmentsStats
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getGeneration
argument_list|()
operator|<
name|segments
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getGeneration
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isCommitted
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isSearch
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getNumDocs
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getDeletedDocs
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isCompound
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|defaultCompound
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|isCommitted
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|isSearch
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getNumDocs
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getDeletedDocs
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|isCompound
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|isCommitted
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|isSearch
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getNumDocs
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getDeletedDocs
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|isCompound
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testVerboseSegments
specifier|public
name|void
name|testVerboseSegments
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Segment
argument_list|>
name|segments
init|=
name|engine
operator|.
name|segments
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|ParsedDocument
name|doc
init|=
name|testParsedDocument
argument_list|(
literal|"1"
argument_list|,
literal|"1"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocumentWithTextField
argument_list|()
argument_list|,
name|B_1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|engine
operator|.
name|create
argument_list|(
operator|new
name|Engine
operator|.
name|Create
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
argument_list|)
expr_stmt|;
name|engine
operator|.
name|refresh
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|segments
operator|=
name|engine
operator|.
name|segments
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|ramTree
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|ParsedDocument
name|doc2
init|=
name|testParsedDocument
argument_list|(
literal|"2"
argument_list|,
literal|"2"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocumentWithTextField
argument_list|()
argument_list|,
name|B_2
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|engine
operator|.
name|create
argument_list|(
operator|new
name|Engine
operator|.
name|Create
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"2"
argument_list|)
argument_list|,
name|doc2
argument_list|)
argument_list|)
expr_stmt|;
name|engine
operator|.
name|refresh
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|ParsedDocument
name|doc3
init|=
name|testParsedDocument
argument_list|(
literal|"3"
argument_list|,
literal|"3"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocumentWithTextField
argument_list|()
argument_list|,
name|B_3
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|engine
operator|.
name|create
argument_list|(
operator|new
name|Engine
operator|.
name|Create
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"3"
argument_list|)
argument_list|,
name|doc3
argument_list|)
argument_list|)
expr_stmt|;
name|engine
operator|.
name|refresh
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|segments
operator|=
name|engine
operator|.
name|segments
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|ramTree
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|ramTree
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|ramTree
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSegmentsWithMergeFlag
specifier|public
name|void
name|testSegmentsWithMergeFlag
parameter_list|()
throws|throws
name|Exception
block|{
name|ConcurrentMergeSchedulerProvider
name|mergeSchedulerProvider
init|=
operator|new
name|ConcurrentMergeSchedulerProvider
argument_list|(
name|shardId
argument_list|,
name|EMPTY_SETTINGS
argument_list|,
name|threadPool
argument_list|,
operator|new
name|IndexSettingsService
argument_list|(
name|shardId
operator|.
name|index
argument_list|()
argument_list|,
name|EMPTY_SETTINGS
argument_list|)
argument_list|)
decl_stmt|;
name|IndexSettingsService
name|indexSettingsService
init|=
operator|new
name|IndexSettingsService
argument_list|(
name|shardId
operator|.
name|index
argument_list|()
argument_list|,
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|defaultSettings
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_VERSION_CREATED
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
try|try
init|(
name|Store
name|store
init|=
name|createStore
argument_list|()
init|;
name|Engine
name|engine
operator|=
name|createEngine
argument_list|(
name|indexSettingsService
argument_list|,
name|store
argument_list|,
name|createTempDir
argument_list|()
argument_list|,
name|mergeSchedulerProvider
argument_list|)
init|)
block|{
name|ParsedDocument
name|doc
init|=
name|testParsedDocument
argument_list|(
literal|"1"
argument_list|,
literal|"1"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocument
argument_list|()
argument_list|,
name|B_1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|Index
name|index
init|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
decl_stmt|;
name|engine
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|engine
operator|.
name|flush
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|engine
operator|.
name|segments
argument_list|(
literal|false
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|index
operator|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"2"
argument_list|)
argument_list|,
name|doc
argument_list|)
expr_stmt|;
name|engine
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|engine
operator|.
name|flush
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Segment
argument_list|>
name|segments
init|=
name|engine
operator|.
name|segments
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Segment
name|segment
range|:
name|segments
control|)
block|{
name|assertThat
argument_list|(
name|segment
operator|.
name|getMergeId
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|index
operator|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"3"
argument_list|)
argument_list|,
name|doc
argument_list|)
expr_stmt|;
name|engine
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|engine
operator|.
name|flush
argument_list|()
expr_stmt|;
name|segments
operator|=
name|engine
operator|.
name|segments
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|segments
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Segment
name|segment
range|:
name|segments
control|)
block|{
name|assertThat
argument_list|(
name|segment
operator|.
name|getMergeId
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|index
operator|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"4"
argument_list|)
argument_list|,
name|doc
argument_list|)
expr_stmt|;
name|engine
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|engine
operator|.
name|flush
argument_list|()
expr_stmt|;
specifier|final
name|long
name|gen1
init|=
name|store
operator|.
name|readLastCommittedSegmentsInfo
argument_list|()
operator|.
name|getGeneration
argument_list|()
decl_stmt|;
comment|// now, optimize and wait for merges, see that we have no merge flag
name|engine
operator|.
name|forceMerge
argument_list|(
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|Segment
name|segment
range|:
name|engine
operator|.
name|segments
argument_list|(
literal|false
argument_list|)
control|)
block|{
name|assertThat
argument_list|(
name|segment
operator|.
name|getMergeId
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// we could have multiple underlying merges, so the generation may increase more than once
name|assertTrue
argument_list|(
name|store
operator|.
name|readLastCommittedSegmentsInfo
argument_list|()
operator|.
name|getGeneration
argument_list|()
operator|>
name|gen1
argument_list|)
expr_stmt|;
specifier|final
name|boolean
name|flush
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
specifier|final
name|long
name|gen2
init|=
name|store
operator|.
name|readLastCommittedSegmentsInfo
argument_list|()
operator|.
name|getGeneration
argument_list|()
decl_stmt|;
name|engine
operator|.
name|forceMerge
argument_list|(
name|flush
argument_list|)
expr_stmt|;
for|for
control|(
name|Segment
name|segment
range|:
name|engine
operator|.
name|segments
argument_list|(
literal|false
argument_list|)
control|)
block|{
name|assertThat
argument_list|(
name|segment
operator|.
name|getMergeId
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|flush
condition|)
block|{
comment|// we should have had just 1 merge, so last generation should be exact
name|assertEquals
argument_list|(
name|gen2
operator|+
literal|1
argument_list|,
name|store
operator|.
name|readLastCommittedSegmentsInfo
argument_list|()
operator|.
name|getLastGeneration
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testCommitStats
specifier|public
name|void
name|testCommitStats
parameter_list|()
block|{
name|Document
name|document
init|=
name|testDocumentWithTextField
argument_list|()
decl_stmt|;
name|document
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
name|SourceFieldMapper
operator|.
name|NAME
argument_list|,
name|B_1
operator|.
name|toBytes
argument_list|()
argument_list|,
name|SourceFieldMapper
operator|.
name|Defaults
operator|.
name|FIELD_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|ParsedDocument
name|doc
init|=
name|testParsedDocument
argument_list|(
literal|"1"
argument_list|,
literal|"1"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|document
argument_list|,
name|B_1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|engine
operator|.
name|create
argument_list|(
operator|new
name|Engine
operator|.
name|Create
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
argument_list|)
expr_stmt|;
name|CommitStats
name|stats1
init|=
name|engine
operator|.
name|commitStats
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|stats1
operator|.
name|getGeneration
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
literal|0l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stats1
operator|.
name|getId
argument_list|()
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stats1
operator|.
name|getUserData
argument_list|()
argument_list|,
name|hasKey
argument_list|(
name|Translog
operator|.
name|TRANSLOG_ID_KEY
argument_list|)
argument_list|)
expr_stmt|;
name|engine
operator|.
name|flush
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|CommitStats
name|stats2
init|=
name|engine
operator|.
name|commitStats
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|stats2
operator|.
name|getGeneration
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
name|stats1
operator|.
name|getGeneration
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stats2
operator|.
name|getId
argument_list|()
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stats2
operator|.
name|getId
argument_list|()
argument_list|,
name|not
argument_list|(
name|equalTo
argument_list|(
name|stats1
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stats2
operator|.
name|getUserData
argument_list|()
argument_list|,
name|hasKey
argument_list|(
name|Translog
operator|.
name|TRANSLOG_ID_KEY
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stats2
operator|.
name|getUserData
argument_list|()
operator|.
name|get
argument_list|(
name|Translog
operator|.
name|TRANSLOG_ID_KEY
argument_list|)
argument_list|,
name|not
argument_list|(
name|equalTo
argument_list|(
name|stats1
operator|.
name|getUserData
argument_list|()
operator|.
name|get
argument_list|(
name|Translog
operator|.
name|TRANSLOG_ID_KEY
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSimpleOperations
specifier|public
name|void
name|testSimpleOperations
parameter_list|()
throws|throws
name|Exception
block|{
name|Engine
operator|.
name|Searcher
name|searchResult
init|=
name|engine
operator|.
name|acquireSearcher
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|EngineSearcherTotalHitsMatcher
operator|.
name|engineSearcherTotalHits
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|searchResult
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// create a document
name|Document
name|document
init|=
name|testDocumentWithTextField
argument_list|()
decl_stmt|;
name|document
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
name|SourceFieldMapper
operator|.
name|NAME
argument_list|,
name|B_1
operator|.
name|toBytes
argument_list|()
argument_list|,
name|SourceFieldMapper
operator|.
name|Defaults
operator|.
name|FIELD_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|ParsedDocument
name|doc
init|=
name|testParsedDocument
argument_list|(
literal|"1"
argument_list|,
literal|"1"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|document
argument_list|,
name|B_1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|engine
operator|.
name|create
argument_list|(
operator|new
name|Engine
operator|.
name|Create
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
argument_list|)
expr_stmt|;
comment|// its not there...
name|searchResult
operator|=
name|engine
operator|.
name|acquireSearcher
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|EngineSearcherTotalHitsMatcher
operator|.
name|engineSearcherTotalHits
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|EngineSearcherTotalHitsMatcher
operator|.
name|engineSearcherTotalHits
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"value"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|searchResult
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// but, we can still get it (in realtime)
name|Engine
operator|.
name|GetResult
name|getResult
init|=
name|engine
operator|.
name|get
argument_list|(
operator|new
name|Engine
operator|.
name|Get
argument_list|(
literal|true
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|getResult
operator|.
name|exists
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getResult
operator|.
name|source
argument_list|()
operator|.
name|source
operator|.
name|toBytesArray
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|B_1
operator|.
name|toBytesArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getResult
operator|.
name|docIdAndVersion
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|getResult
operator|.
name|release
argument_list|()
expr_stmt|;
comment|// but, not there non realtime
name|getResult
operator|=
name|engine
operator|.
name|get
argument_list|(
operator|new
name|Engine
operator|.
name|Get
argument_list|(
literal|false
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getResult
operator|.
name|exists
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|getResult
operator|.
name|release
argument_list|()
expr_stmt|;
comment|// refresh and it should be there
name|engine
operator|.
name|refresh
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
comment|// now its there...
name|searchResult
operator|=
name|engine
operator|.
name|acquireSearcher
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|EngineSearcherTotalHitsMatcher
operator|.
name|engineSearcherTotalHits
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|EngineSearcherTotalHitsMatcher
operator|.
name|engineSearcherTotalHits
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"value"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|searchResult
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// also in non realtime
name|getResult
operator|=
name|engine
operator|.
name|get
argument_list|(
operator|new
name|Engine
operator|.
name|Get
argument_list|(
literal|false
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getResult
operator|.
name|exists
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getResult
operator|.
name|docIdAndVersion
argument_list|()
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|getResult
operator|.
name|release
argument_list|()
expr_stmt|;
comment|// now do an update
name|document
operator|=
name|testDocument
argument_list|()
expr_stmt|;
name|document
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"value"
argument_list|,
literal|"test1"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
name|document
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
name|SourceFieldMapper
operator|.
name|NAME
argument_list|,
name|B_2
operator|.
name|toBytes
argument_list|()
argument_list|,
name|SourceFieldMapper
operator|.
name|Defaults
operator|.
name|FIELD_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|=
name|testParsedDocument
argument_list|(
literal|"1"
argument_list|,
literal|"1"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|document
argument_list|,
name|B_2
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|engine
operator|.
name|index
argument_list|(
operator|new
name|Engine
operator|.
name|Index
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
argument_list|)
expr_stmt|;
comment|// its not updated yet...
name|searchResult
operator|=
name|engine
operator|.
name|acquireSearcher
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|EngineSearcherTotalHitsMatcher
operator|.
name|engineSearcherTotalHits
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|EngineSearcherTotalHitsMatcher
operator|.
name|engineSearcherTotalHits
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"value"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|EngineSearcherTotalHitsMatcher
operator|.
name|engineSearcherTotalHits
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"value"
argument_list|,
literal|"test1"
argument_list|)
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|searchResult
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// but, we can still get it (in realtime)
name|getResult
operator|=
name|engine
operator|.
name|get
argument_list|(
operator|new
name|Engine
operator|.
name|Get
argument_list|(
literal|true
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getResult
operator|.
name|exists
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getResult
operator|.
name|source
argument_list|()
operator|.
name|source
operator|.
name|toBytesArray
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|B_2
operator|.
name|toBytesArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getResult
operator|.
name|docIdAndVersion
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|getResult
operator|.
name|release
argument_list|()
expr_stmt|;
comment|// refresh and it should be updated
name|engine
operator|.
name|refresh
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|searchResult
operator|=
name|engine
operator|.
name|acquireSearcher
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|EngineSearcherTotalHitsMatcher
operator|.
name|engineSearcherTotalHits
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|EngineSearcherTotalHitsMatcher
operator|.
name|engineSearcherTotalHits
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"value"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|EngineSearcherTotalHitsMatcher
operator|.
name|engineSearcherTotalHits
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"value"
argument_list|,
literal|"test1"
argument_list|)
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|searchResult
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// now delete
name|engine
operator|.
name|delete
argument_list|(
operator|new
name|Engine
operator|.
name|Delete
argument_list|(
literal|"test"
argument_list|,
literal|"1"
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// its not deleted yet
name|searchResult
operator|=
name|engine
operator|.
name|acquireSearcher
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|EngineSearcherTotalHitsMatcher
operator|.
name|engineSearcherTotalHits
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|EngineSearcherTotalHitsMatcher
operator|.
name|engineSearcherTotalHits
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"value"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|EngineSearcherTotalHitsMatcher
operator|.
name|engineSearcherTotalHits
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"value"
argument_list|,
literal|"test1"
argument_list|)
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|searchResult
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// but, get should not see it (in realtime)
name|getResult
operator|=
name|engine
operator|.
name|get
argument_list|(
operator|new
name|Engine
operator|.
name|Get
argument_list|(
literal|true
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getResult
operator|.
name|exists
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|getResult
operator|.
name|release
argument_list|()
expr_stmt|;
comment|// refresh and it should be deleted
name|engine
operator|.
name|refresh
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|searchResult
operator|=
name|engine
operator|.
name|acquireSearcher
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|EngineSearcherTotalHitsMatcher
operator|.
name|engineSearcherTotalHits
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|EngineSearcherTotalHitsMatcher
operator|.
name|engineSearcherTotalHits
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"value"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|EngineSearcherTotalHitsMatcher
operator|.
name|engineSearcherTotalHits
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"value"
argument_list|,
literal|"test1"
argument_list|)
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|searchResult
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// add it back
name|document
operator|=
name|testDocumentWithTextField
argument_list|()
expr_stmt|;
name|document
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
name|SourceFieldMapper
operator|.
name|NAME
argument_list|,
name|B_1
operator|.
name|toBytes
argument_list|()
argument_list|,
name|SourceFieldMapper
operator|.
name|Defaults
operator|.
name|FIELD_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|=
name|testParsedDocument
argument_list|(
literal|"1"
argument_list|,
literal|"1"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|document
argument_list|,
name|B_1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|engine
operator|.
name|create
argument_list|(
operator|new
name|Engine
operator|.
name|Create
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
argument_list|)
expr_stmt|;
comment|// its not there...
name|searchResult
operator|=
name|engine
operator|.
name|acquireSearcher
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|EngineSearcherTotalHitsMatcher
operator|.
name|engineSearcherTotalHits
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|EngineSearcherTotalHitsMatcher
operator|.
name|engineSearcherTotalHits
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"value"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|EngineSearcherTotalHitsMatcher
operator|.
name|engineSearcherTotalHits
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"value"
argument_list|,
literal|"test1"
argument_list|)
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|searchResult
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// refresh and it should be there
name|engine
operator|.
name|refresh
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
comment|// now its there...
name|searchResult
operator|=
name|engine
operator|.
name|acquireSearcher
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|EngineSearcherTotalHitsMatcher
operator|.
name|engineSearcherTotalHits
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|EngineSearcherTotalHitsMatcher
operator|.
name|engineSearcherTotalHits
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"value"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|EngineSearcherTotalHitsMatcher
operator|.
name|engineSearcherTotalHits
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"value"
argument_list|,
literal|"test1"
argument_list|)
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|searchResult
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// now flush
name|engine
operator|.
name|flush
argument_list|()
expr_stmt|;
comment|// and, verify get (in real time)
name|getResult
operator|=
name|engine
operator|.
name|get
argument_list|(
operator|new
name|Engine
operator|.
name|Get
argument_list|(
literal|true
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getResult
operator|.
name|exists
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getResult
operator|.
name|source
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getResult
operator|.
name|docIdAndVersion
argument_list|()
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|getResult
operator|.
name|release
argument_list|()
expr_stmt|;
comment|// make sure we can still work with the engine
comment|// now do an update
name|document
operator|=
name|testDocument
argument_list|()
expr_stmt|;
name|document
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"value"
argument_list|,
literal|"test1"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|=
name|testParsedDocument
argument_list|(
literal|"1"
argument_list|,
literal|"1"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|document
argument_list|,
name|B_1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|engine
operator|.
name|index
argument_list|(
operator|new
name|Engine
operator|.
name|Index
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
argument_list|)
expr_stmt|;
comment|// its not updated yet...
name|searchResult
operator|=
name|engine
operator|.
name|acquireSearcher
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|EngineSearcherTotalHitsMatcher
operator|.
name|engineSearcherTotalHits
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|EngineSearcherTotalHitsMatcher
operator|.
name|engineSearcherTotalHits
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"value"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|EngineSearcherTotalHitsMatcher
operator|.
name|engineSearcherTotalHits
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"value"
argument_list|,
literal|"test1"
argument_list|)
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|searchResult
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// refresh and it should be updated
name|engine
operator|.
name|refresh
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|searchResult
operator|=
name|engine
operator|.
name|acquireSearcher
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|EngineSearcherTotalHitsMatcher
operator|.
name|engineSearcherTotalHits
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|EngineSearcherTotalHitsMatcher
operator|.
name|engineSearcherTotalHits
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"value"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|EngineSearcherTotalHitsMatcher
operator|.
name|engineSearcherTotalHits
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"value"
argument_list|,
literal|"test1"
argument_list|)
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|searchResult
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSearchResultRelease
specifier|public
name|void
name|testSearchResultRelease
parameter_list|()
throws|throws
name|Exception
block|{
name|Engine
operator|.
name|Searcher
name|searchResult
init|=
name|engine
operator|.
name|acquireSearcher
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|EngineSearcherTotalHitsMatcher
operator|.
name|engineSearcherTotalHits
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|searchResult
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// create a document
name|ParsedDocument
name|doc
init|=
name|testParsedDocument
argument_list|(
literal|"1"
argument_list|,
literal|"1"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocumentWithTextField
argument_list|()
argument_list|,
name|B_1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|engine
operator|.
name|create
argument_list|(
operator|new
name|Engine
operator|.
name|Create
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
argument_list|)
expr_stmt|;
comment|// its not there...
name|searchResult
operator|=
name|engine
operator|.
name|acquireSearcher
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|EngineSearcherTotalHitsMatcher
operator|.
name|engineSearcherTotalHits
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|EngineSearcherTotalHitsMatcher
operator|.
name|engineSearcherTotalHits
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"value"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|searchResult
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// refresh and it should be there
name|engine
operator|.
name|refresh
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
comment|// now its there...
name|searchResult
operator|=
name|engine
operator|.
name|acquireSearcher
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|EngineSearcherTotalHitsMatcher
operator|.
name|engineSearcherTotalHits
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|EngineSearcherTotalHitsMatcher
operator|.
name|engineSearcherTotalHits
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"value"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// don't release the search result yet...
comment|// delete, refresh and do a new search, it should not be there
name|engine
operator|.
name|delete
argument_list|(
operator|new
name|Engine
operator|.
name|Delete
argument_list|(
literal|"test"
argument_list|,
literal|"1"
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|engine
operator|.
name|refresh
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|Engine
operator|.
name|Searcher
name|updateSearchResult
init|=
name|engine
operator|.
name|acquireSearcher
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|updateSearchResult
argument_list|,
name|EngineSearcherTotalHitsMatcher
operator|.
name|engineSearcherTotalHits
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|updateSearchResult
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// the non release search result should not see the deleted yet...
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|EngineSearcherTotalHitsMatcher
operator|.
name|engineSearcherTotalHits
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|searchResult
argument_list|,
name|EngineSearcherTotalHitsMatcher
operator|.
name|engineSearcherTotalHits
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"value"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|searchResult
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testVersioningNewCreate
specifier|public
name|void
name|testVersioningNewCreate
parameter_list|()
block|{
name|ParsedDocument
name|doc
init|=
name|testParsedDocument
argument_list|(
literal|"1"
argument_list|,
literal|"1"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocument
argument_list|()
argument_list|,
name|B_1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|Create
name|create
init|=
operator|new
name|Engine
operator|.
name|Create
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
decl_stmt|;
name|engine
operator|.
name|create
argument_list|(
name|create
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|create
operator|.
name|version
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
name|create
operator|=
operator|new
name|Engine
operator|.
name|Create
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|,
name|create
operator|.
name|version
argument_list|()
argument_list|,
name|create
operator|.
name|versionType
argument_list|()
operator|.
name|versionTypeForReplicationAndRecovery
argument_list|()
argument_list|,
name|REPLICA
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|replicaEngine
operator|.
name|create
argument_list|(
name|create
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|create
operator|.
name|version
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testExternalVersioningNewCreate
specifier|public
name|void
name|testExternalVersioningNewCreate
parameter_list|()
block|{
name|ParsedDocument
name|doc
init|=
name|testParsedDocument
argument_list|(
literal|"1"
argument_list|,
literal|"1"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocument
argument_list|()
argument_list|,
name|B_1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|Create
name|create
init|=
operator|new
name|Engine
operator|.
name|Create
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|,
literal|12
argument_list|,
name|VersionType
operator|.
name|EXTERNAL
argument_list|,
name|Engine
operator|.
name|Operation
operator|.
name|Origin
operator|.
name|PRIMARY
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|engine
operator|.
name|create
argument_list|(
name|create
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|create
operator|.
name|version
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|12l
argument_list|)
argument_list|)
expr_stmt|;
name|create
operator|=
operator|new
name|Engine
operator|.
name|Create
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|,
name|create
operator|.
name|version
argument_list|()
argument_list|,
name|create
operator|.
name|versionType
argument_list|()
operator|.
name|versionTypeForReplicationAndRecovery
argument_list|()
argument_list|,
name|REPLICA
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|replicaEngine
operator|.
name|create
argument_list|(
name|create
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|create
operator|.
name|version
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|12l
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testVersioningNewIndex
specifier|public
name|void
name|testVersioningNewIndex
parameter_list|()
block|{
name|ParsedDocument
name|doc
init|=
name|testParsedDocument
argument_list|(
literal|"1"
argument_list|,
literal|"1"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocument
argument_list|()
argument_list|,
name|B_1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|Index
name|index
init|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
decl_stmt|;
name|engine
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|index
operator|.
name|version
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
name|index
operator|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|,
name|index
operator|.
name|version
argument_list|()
argument_list|,
name|index
operator|.
name|versionType
argument_list|()
operator|.
name|versionTypeForReplicationAndRecovery
argument_list|()
argument_list|,
name|REPLICA
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|replicaEngine
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|index
operator|.
name|version
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testExternalVersioningNewIndex
specifier|public
name|void
name|testExternalVersioningNewIndex
parameter_list|()
block|{
name|ParsedDocument
name|doc
init|=
name|testParsedDocument
argument_list|(
literal|"1"
argument_list|,
literal|"1"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocument
argument_list|()
argument_list|,
name|B_1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|Index
name|index
init|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|,
literal|12
argument_list|,
name|VersionType
operator|.
name|EXTERNAL
argument_list|,
name|PRIMARY
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|engine
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|index
operator|.
name|version
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|12l
argument_list|)
argument_list|)
expr_stmt|;
name|index
operator|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|,
name|index
operator|.
name|version
argument_list|()
argument_list|,
name|index
operator|.
name|versionType
argument_list|()
operator|.
name|versionTypeForReplicationAndRecovery
argument_list|()
argument_list|,
name|REPLICA
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|replicaEngine
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|index
operator|.
name|version
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|12l
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testVersioningIndexConflict
specifier|public
name|void
name|testVersioningIndexConflict
parameter_list|()
block|{
name|ParsedDocument
name|doc
init|=
name|testParsedDocument
argument_list|(
literal|"1"
argument_list|,
literal|"1"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocument
argument_list|()
argument_list|,
name|B_1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|Index
name|index
init|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
decl_stmt|;
name|engine
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|index
operator|.
name|version
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
name|index
operator|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
expr_stmt|;
name|engine
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|index
operator|.
name|version
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2l
argument_list|)
argument_list|)
expr_stmt|;
name|index
operator|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|,
literal|1l
argument_list|,
name|VersionType
operator|.
name|INTERNAL
argument_list|,
name|Engine
operator|.
name|Operation
operator|.
name|Origin
operator|.
name|PRIMARY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
try|try
block|{
name|engine
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|VersionConflictEngineException
name|e
parameter_list|)
block|{
comment|// all is well
block|}
comment|// future versions should not work as well
name|index
operator|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|,
literal|3l
argument_list|,
name|VersionType
operator|.
name|INTERNAL
argument_list|,
name|PRIMARY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
try|try
block|{
name|engine
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|VersionConflictEngineException
name|e
parameter_list|)
block|{
comment|// all is well
block|}
block|}
annotation|@
name|Test
DECL|method|testExternalVersioningIndexConflict
specifier|public
name|void
name|testExternalVersioningIndexConflict
parameter_list|()
block|{
name|ParsedDocument
name|doc
init|=
name|testParsedDocument
argument_list|(
literal|"1"
argument_list|,
literal|"1"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocument
argument_list|()
argument_list|,
name|B_1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|Index
name|index
init|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|,
literal|12
argument_list|,
name|VersionType
operator|.
name|EXTERNAL
argument_list|,
name|PRIMARY
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|engine
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|index
operator|.
name|version
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|12l
argument_list|)
argument_list|)
expr_stmt|;
name|index
operator|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|,
literal|14
argument_list|,
name|VersionType
operator|.
name|EXTERNAL
argument_list|,
name|PRIMARY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|engine
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|index
operator|.
name|version
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|14l
argument_list|)
argument_list|)
expr_stmt|;
name|index
operator|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|,
literal|13
argument_list|,
name|VersionType
operator|.
name|EXTERNAL
argument_list|,
name|PRIMARY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
try|try
block|{
name|engine
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|VersionConflictEngineException
name|e
parameter_list|)
block|{
comment|// all is well
block|}
block|}
annotation|@
name|Test
DECL|method|testVersioningIndexConflictWithFlush
specifier|public
name|void
name|testVersioningIndexConflictWithFlush
parameter_list|()
block|{
name|ParsedDocument
name|doc
init|=
name|testParsedDocument
argument_list|(
literal|"1"
argument_list|,
literal|"1"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocument
argument_list|()
argument_list|,
name|B_1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|Index
name|index
init|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
decl_stmt|;
name|engine
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|index
operator|.
name|version
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
name|index
operator|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
expr_stmt|;
name|engine
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|index
operator|.
name|version
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2l
argument_list|)
argument_list|)
expr_stmt|;
name|engine
operator|.
name|flush
argument_list|()
expr_stmt|;
name|index
operator|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|,
literal|1l
argument_list|,
name|VersionType
operator|.
name|INTERNAL
argument_list|,
name|PRIMARY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
try|try
block|{
name|engine
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|VersionConflictEngineException
name|e
parameter_list|)
block|{
comment|// all is well
block|}
comment|// future versions should not work as well
name|index
operator|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|,
literal|3l
argument_list|,
name|VersionType
operator|.
name|INTERNAL
argument_list|,
name|PRIMARY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
try|try
block|{
name|engine
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|VersionConflictEngineException
name|e
parameter_list|)
block|{
comment|// all is well
block|}
block|}
annotation|@
name|Test
DECL|method|testExternalVersioningIndexConflictWithFlush
specifier|public
name|void
name|testExternalVersioningIndexConflictWithFlush
parameter_list|()
block|{
name|ParsedDocument
name|doc
init|=
name|testParsedDocument
argument_list|(
literal|"1"
argument_list|,
literal|"1"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocument
argument_list|()
argument_list|,
name|B_1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|Index
name|index
init|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|,
literal|12
argument_list|,
name|VersionType
operator|.
name|EXTERNAL
argument_list|,
name|PRIMARY
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|engine
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|index
operator|.
name|version
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|12l
argument_list|)
argument_list|)
expr_stmt|;
name|index
operator|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|,
literal|14
argument_list|,
name|VersionType
operator|.
name|EXTERNAL
argument_list|,
name|PRIMARY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|engine
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|index
operator|.
name|version
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|14l
argument_list|)
argument_list|)
expr_stmt|;
name|engine
operator|.
name|flush
argument_list|()
expr_stmt|;
name|index
operator|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|,
literal|13
argument_list|,
name|VersionType
operator|.
name|EXTERNAL
argument_list|,
name|PRIMARY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
try|try
block|{
name|engine
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|VersionConflictEngineException
name|e
parameter_list|)
block|{
comment|// all is well
block|}
block|}
DECL|method|testForceMerge
specifier|public
name|void
name|testForceMerge
parameter_list|()
block|{
name|int
name|numDocs
init|=
name|randomIntBetween
argument_list|(
literal|10
argument_list|,
literal|100
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|ParsedDocument
name|doc
init|=
name|testParsedDocument
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocument
argument_list|()
argument_list|,
name|B_1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|Index
name|index
init|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|,
name|doc
argument_list|)
decl_stmt|;
name|engine
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|engine
operator|.
name|refresh
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
block|}
try|try
init|(
name|Engine
operator|.
name|Searcher
name|test
init|=
name|engine
operator|.
name|acquireSearcher
argument_list|(
literal|"test"
argument_list|)
init|)
block|{
name|assertEquals
argument_list|(
name|numDocs
argument_list|,
name|test
operator|.
name|reader
argument_list|()
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|engine
operator|.
name|forceMerge
argument_list|(
literal|true
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|engine
operator|.
name|segments
argument_list|(
literal|true
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|ParsedDocument
name|doc
init|=
name|testParsedDocument
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocument
argument_list|()
argument_list|,
name|B_1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|Index
name|index
init|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
name|doc
argument_list|)
decl_stmt|;
name|engine
operator|.
name|delete
argument_list|(
operator|new
name|Engine
operator|.
name|Delete
argument_list|(
name|index
operator|.
name|type
argument_list|()
argument_list|,
name|index
operator|.
name|id
argument_list|()
argument_list|,
name|index
operator|.
name|uid
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|engine
operator|.
name|forceMerge
argument_list|(
literal|true
argument_list|,
literal|10
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|//expunge deletes
name|assertEquals
argument_list|(
name|engine
operator|.
name|segments
argument_list|(
literal|true
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
try|try
init|(
name|Engine
operator|.
name|Searcher
name|test
init|=
name|engine
operator|.
name|acquireSearcher
argument_list|(
literal|"test"
argument_list|)
init|)
block|{
name|assertEquals
argument_list|(
name|numDocs
operator|-
literal|1
argument_list|,
name|test
operator|.
name|reader
argument_list|()
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|numDocs
operator|-
literal|1
argument_list|,
name|test
operator|.
name|reader
argument_list|()
operator|.
name|maxDoc
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|doc
operator|=
name|testParsedDocument
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
literal|1
argument_list|)
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocument
argument_list|()
argument_list|,
name|B_1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|index
operator|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|,
name|doc
argument_list|)
expr_stmt|;
name|engine
operator|.
name|delete
argument_list|(
operator|new
name|Engine
operator|.
name|Delete
argument_list|(
name|index
operator|.
name|type
argument_list|()
argument_list|,
name|index
operator|.
name|id
argument_list|()
argument_list|,
name|index
operator|.
name|uid
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|engine
operator|.
name|forceMerge
argument_list|(
literal|true
argument_list|,
literal|10
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|//expunge deletes
name|assertEquals
argument_list|(
name|engine
operator|.
name|segments
argument_list|(
literal|true
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
try|try
init|(
name|Engine
operator|.
name|Searcher
name|test
init|=
name|engine
operator|.
name|acquireSearcher
argument_list|(
literal|"test"
argument_list|)
init|)
block|{
name|assertEquals
argument_list|(
name|numDocs
operator|-
literal|2
argument_list|,
name|test
operator|.
name|reader
argument_list|()
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|numDocs
operator|-
literal|1
argument_list|,
name|test
operator|.
name|reader
argument_list|()
operator|.
name|maxDoc
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testForceMergeAndClose
specifier|public
name|void
name|testForceMergeAndClose
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|int
name|numIters
init|=
name|randomIntBetween
argument_list|(
literal|2
argument_list|,
literal|10
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numIters
condition|;
name|j
operator|++
control|)
block|{
try|try
init|(
name|Store
name|store
init|=
name|createStore
argument_list|()
init|)
block|{
specifier|final
name|InternalEngine
name|engine
init|=
name|createEngine
argument_list|(
name|store
argument_list|,
name|createTempDir
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|startGun
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|indexed
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Thread
name|thread
init|=
operator|new
name|Thread
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
try|try
block|{
name|startGun
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|numDocs
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|20
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numDocs
condition|;
name|j
operator|++
control|)
block|{
name|i
operator|++
expr_stmt|;
name|ParsedDocument
name|doc
init|=
name|testParsedDocument
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocument
argument_list|()
argument_list|,
name|B_1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|Index
name|index
init|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|,
name|doc
argument_list|)
decl_stmt|;
name|engine
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
name|engine
operator|.
name|refresh
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|indexed
operator|.
name|countDown
argument_list|()
expr_stmt|;
try|try
block|{
name|engine
operator|.
name|forceMerge
argument_list|(
name|randomBoolean
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ForceMergeFailedEngineException
name|ex
parameter_list|)
block|{
comment|// ok
return|return;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|AlreadyClosedException
decl||
name|EngineClosedException
name|ex
parameter_list|)
block|{
comment|// fine
block|}
block|}
block|}
decl_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
name|startGun
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|int
name|someIters
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|someIters
condition|;
name|i
operator|++
control|)
block|{
name|engine
operator|.
name|forceMerge
argument_list|(
name|randomBoolean
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|indexed
operator|.
name|await
argument_list|()
expr_stmt|;
name|IOUtils
operator|.
name|close
argument_list|(
name|engine
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testVersioningDeleteConflict
specifier|public
name|void
name|testVersioningDeleteConflict
parameter_list|()
block|{
name|ParsedDocument
name|doc
init|=
name|testParsedDocument
argument_list|(
literal|"1"
argument_list|,
literal|"1"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocument
argument_list|()
argument_list|,
name|B_1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|Index
name|index
init|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
decl_stmt|;
name|engine
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|index
operator|.
name|version
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
name|index
operator|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
expr_stmt|;
name|engine
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|index
operator|.
name|version
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2l
argument_list|)
argument_list|)
expr_stmt|;
name|Engine
operator|.
name|Delete
name|delete
init|=
operator|new
name|Engine
operator|.
name|Delete
argument_list|(
literal|"test"
argument_list|,
literal|"1"
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
literal|1l
argument_list|,
name|VersionType
operator|.
name|INTERNAL
argument_list|,
name|PRIMARY
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
decl_stmt|;
try|try
block|{
name|engine
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|VersionConflictEngineException
name|e
parameter_list|)
block|{
comment|// all is well
block|}
comment|// future versions should not work as well
name|delete
operator|=
operator|new
name|Engine
operator|.
name|Delete
argument_list|(
literal|"test"
argument_list|,
literal|"1"
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
literal|3l
argument_list|,
name|VersionType
operator|.
name|INTERNAL
argument_list|,
name|PRIMARY
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
expr_stmt|;
try|try
block|{
name|engine
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|VersionConflictEngineException
name|e
parameter_list|)
block|{
comment|// all is well
block|}
comment|// now actually delete
name|delete
operator|=
operator|new
name|Engine
operator|.
name|Delete
argument_list|(
literal|"test"
argument_list|,
literal|"1"
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
literal|2l
argument_list|,
name|VersionType
operator|.
name|INTERNAL
argument_list|,
name|PRIMARY
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|engine
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|delete
operator|.
name|version
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3l
argument_list|)
argument_list|)
expr_stmt|;
comment|// now check if we can index to a delete doc with version
name|index
operator|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|,
literal|2l
argument_list|,
name|VersionType
operator|.
name|INTERNAL
argument_list|,
name|PRIMARY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
try|try
block|{
name|engine
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|VersionConflictEngineException
name|e
parameter_list|)
block|{
comment|// all is well
block|}
comment|// we shouldn't be able to create as well
name|Engine
operator|.
name|Create
name|create
init|=
operator|new
name|Engine
operator|.
name|Create
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|,
literal|2l
argument_list|,
name|VersionType
operator|.
name|INTERNAL
argument_list|,
name|PRIMARY
argument_list|,
literal|0
argument_list|)
decl_stmt|;
try|try
block|{
name|engine
operator|.
name|create
argument_list|(
name|create
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|VersionConflictEngineException
name|e
parameter_list|)
block|{
comment|// all is well
block|}
block|}
annotation|@
name|Test
DECL|method|testVersioningDeleteConflictWithFlush
specifier|public
name|void
name|testVersioningDeleteConflictWithFlush
parameter_list|()
block|{
name|ParsedDocument
name|doc
init|=
name|testParsedDocument
argument_list|(
literal|"1"
argument_list|,
literal|"1"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocument
argument_list|()
argument_list|,
name|B_1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|Index
name|index
init|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
decl_stmt|;
name|engine
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|index
operator|.
name|version
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
name|index
operator|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
expr_stmt|;
name|engine
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|index
operator|.
name|version
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2l
argument_list|)
argument_list|)
expr_stmt|;
name|engine
operator|.
name|flush
argument_list|()
expr_stmt|;
name|Engine
operator|.
name|Delete
name|delete
init|=
operator|new
name|Engine
operator|.
name|Delete
argument_list|(
literal|"test"
argument_list|,
literal|"1"
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
literal|1l
argument_list|,
name|VersionType
operator|.
name|INTERNAL
argument_list|,
name|PRIMARY
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
decl_stmt|;
try|try
block|{
name|engine
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|VersionConflictEngineException
name|e
parameter_list|)
block|{
comment|// all is well
block|}
comment|// future versions should not work as well
name|delete
operator|=
operator|new
name|Engine
operator|.
name|Delete
argument_list|(
literal|"test"
argument_list|,
literal|"1"
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
literal|3l
argument_list|,
name|VersionType
operator|.
name|INTERNAL
argument_list|,
name|PRIMARY
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
expr_stmt|;
try|try
block|{
name|engine
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|VersionConflictEngineException
name|e
parameter_list|)
block|{
comment|// all is well
block|}
name|engine
operator|.
name|flush
argument_list|()
expr_stmt|;
comment|// now actually delete
name|delete
operator|=
operator|new
name|Engine
operator|.
name|Delete
argument_list|(
literal|"test"
argument_list|,
literal|"1"
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
literal|2l
argument_list|,
name|VersionType
operator|.
name|INTERNAL
argument_list|,
name|PRIMARY
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|engine
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|delete
operator|.
name|version
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3l
argument_list|)
argument_list|)
expr_stmt|;
name|engine
operator|.
name|flush
argument_list|()
expr_stmt|;
comment|// now check if we can index to a delete doc with version
name|index
operator|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|,
literal|2l
argument_list|,
name|VersionType
operator|.
name|INTERNAL
argument_list|,
name|PRIMARY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
try|try
block|{
name|engine
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|VersionConflictEngineException
name|e
parameter_list|)
block|{
comment|// all is well
block|}
comment|// we shouldn't be able to create as well
name|Engine
operator|.
name|Create
name|create
init|=
operator|new
name|Engine
operator|.
name|Create
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|,
literal|2l
argument_list|,
name|VersionType
operator|.
name|INTERNAL
argument_list|,
name|PRIMARY
argument_list|,
literal|0
argument_list|)
decl_stmt|;
try|try
block|{
name|engine
operator|.
name|create
argument_list|(
name|create
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|VersionConflictEngineException
name|e
parameter_list|)
block|{
comment|// all is well
block|}
block|}
annotation|@
name|Test
DECL|method|testVersioningCreateExistsException
specifier|public
name|void
name|testVersioningCreateExistsException
parameter_list|()
block|{
name|ParsedDocument
name|doc
init|=
name|testParsedDocument
argument_list|(
literal|"1"
argument_list|,
literal|"1"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocument
argument_list|()
argument_list|,
name|B_1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|Create
name|create
init|=
operator|new
name|Engine
operator|.
name|Create
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|,
name|Versions
operator|.
name|MATCH_ANY
argument_list|,
name|VersionType
operator|.
name|INTERNAL
argument_list|,
name|PRIMARY
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|engine
operator|.
name|create
argument_list|(
name|create
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|create
operator|.
name|version
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
name|create
operator|=
operator|new
name|Engine
operator|.
name|Create
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|,
name|Versions
operator|.
name|MATCH_ANY
argument_list|,
name|VersionType
operator|.
name|INTERNAL
argument_list|,
name|PRIMARY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
try|try
block|{
name|engine
operator|.
name|create
argument_list|(
name|create
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DocumentAlreadyExistsException
name|e
parameter_list|)
block|{
comment|// all is well
block|}
block|}
annotation|@
name|Test
DECL|method|testVersioningCreateExistsExceptionWithFlush
specifier|public
name|void
name|testVersioningCreateExistsExceptionWithFlush
parameter_list|()
block|{
name|ParsedDocument
name|doc
init|=
name|testParsedDocument
argument_list|(
literal|"1"
argument_list|,
literal|"1"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocument
argument_list|()
argument_list|,
name|B_1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|Create
name|create
init|=
operator|new
name|Engine
operator|.
name|Create
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|,
name|Versions
operator|.
name|MATCH_ANY
argument_list|,
name|VersionType
operator|.
name|INTERNAL
argument_list|,
name|PRIMARY
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|engine
operator|.
name|create
argument_list|(
name|create
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|create
operator|.
name|version
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
name|engine
operator|.
name|flush
argument_list|()
expr_stmt|;
name|create
operator|=
operator|new
name|Engine
operator|.
name|Create
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|,
name|Versions
operator|.
name|MATCH_ANY
argument_list|,
name|VersionType
operator|.
name|INTERNAL
argument_list|,
name|PRIMARY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
try|try
block|{
name|engine
operator|.
name|create
argument_list|(
name|create
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DocumentAlreadyExistsException
name|e
parameter_list|)
block|{
comment|// all is well
block|}
block|}
annotation|@
name|Test
DECL|method|testVersioningReplicaConflict1
specifier|public
name|void
name|testVersioningReplicaConflict1
parameter_list|()
block|{
name|ParsedDocument
name|doc
init|=
name|testParsedDocument
argument_list|(
literal|"1"
argument_list|,
literal|"1"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocument
argument_list|()
argument_list|,
name|B_1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|Index
name|index
init|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
decl_stmt|;
name|engine
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|index
operator|.
name|version
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
name|index
operator|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
expr_stmt|;
name|engine
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|index
operator|.
name|version
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2l
argument_list|)
argument_list|)
expr_stmt|;
comment|// apply the second index to the replica, should work fine
name|index
operator|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|,
name|index
operator|.
name|version
argument_list|()
argument_list|,
name|VersionType
operator|.
name|INTERNAL
operator|.
name|versionTypeForReplicationAndRecovery
argument_list|()
argument_list|,
name|REPLICA
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|replicaEngine
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|index
operator|.
name|version
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2l
argument_list|)
argument_list|)
expr_stmt|;
comment|// now, the old one should not work
name|index
operator|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|,
literal|1l
argument_list|,
name|VersionType
operator|.
name|INTERNAL
operator|.
name|versionTypeForReplicationAndRecovery
argument_list|()
argument_list|,
name|REPLICA
argument_list|,
literal|0
argument_list|)
expr_stmt|;
try|try
block|{
name|replicaEngine
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|VersionConflictEngineException
name|e
parameter_list|)
block|{
comment|// all is well
block|}
comment|// second version on replica should fail as well
try|try
block|{
name|index
operator|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|,
literal|2l
argument_list|,
name|VersionType
operator|.
name|INTERNAL
operator|.
name|versionTypeForReplicationAndRecovery
argument_list|()
argument_list|,
name|REPLICA
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|replicaEngine
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|index
operator|.
name|version
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2l
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|VersionConflictEngineException
name|e
parameter_list|)
block|{
comment|// all is well
block|}
block|}
annotation|@
name|Test
DECL|method|testVersioningReplicaConflict2
specifier|public
name|void
name|testVersioningReplicaConflict2
parameter_list|()
block|{
name|ParsedDocument
name|doc
init|=
name|testParsedDocument
argument_list|(
literal|"1"
argument_list|,
literal|"1"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocument
argument_list|()
argument_list|,
name|B_1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|Index
name|index
init|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
decl_stmt|;
name|engine
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|index
operator|.
name|version
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
comment|// apply the first index to the replica, should work fine
name|index
operator|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|,
literal|1l
argument_list|,
name|VersionType
operator|.
name|INTERNAL
operator|.
name|versionTypeForReplicationAndRecovery
argument_list|()
argument_list|,
name|REPLICA
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|replicaEngine
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|index
operator|.
name|version
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
comment|// index it again
name|index
operator|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
expr_stmt|;
name|engine
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|index
operator|.
name|version
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2l
argument_list|)
argument_list|)
expr_stmt|;
comment|// now delete it
name|Engine
operator|.
name|Delete
name|delete
init|=
operator|new
name|Engine
operator|.
name|Delete
argument_list|(
literal|"test"
argument_list|,
literal|"1"
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|)
decl_stmt|;
name|engine
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|delete
operator|.
name|version
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3l
argument_list|)
argument_list|)
expr_stmt|;
comment|// apply the delete on the replica (skipping the second index)
name|delete
operator|=
operator|new
name|Engine
operator|.
name|Delete
argument_list|(
literal|"test"
argument_list|,
literal|"1"
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
literal|3l
argument_list|,
name|VersionType
operator|.
name|INTERNAL
operator|.
name|versionTypeForReplicationAndRecovery
argument_list|()
argument_list|,
name|REPLICA
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|replicaEngine
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|delete
operator|.
name|version
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3l
argument_list|)
argument_list|)
expr_stmt|;
comment|// second time delete with same version should fail
try|try
block|{
name|delete
operator|=
operator|new
name|Engine
operator|.
name|Delete
argument_list|(
literal|"test"
argument_list|,
literal|"1"
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
literal|3l
argument_list|,
name|VersionType
operator|.
name|INTERNAL
operator|.
name|versionTypeForReplicationAndRecovery
argument_list|()
argument_list|,
name|REPLICA
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|replicaEngine
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"excepted VersionConflictEngineException to be thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|VersionConflictEngineException
name|e
parameter_list|)
block|{
comment|// all is well
block|}
comment|// now do the second index on the replica, it should fail
try|try
block|{
name|index
operator|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|,
literal|2l
argument_list|,
name|VersionType
operator|.
name|INTERNAL
operator|.
name|versionTypeForReplicationAndRecovery
argument_list|()
argument_list|,
name|REPLICA
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|replicaEngine
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"excepted VersionConflictEngineException to be thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|VersionConflictEngineException
name|e
parameter_list|)
block|{
comment|// all is well
block|}
block|}
annotation|@
name|Test
DECL|method|testBasicCreatedFlag
specifier|public
name|void
name|testBasicCreatedFlag
parameter_list|()
block|{
name|ParsedDocument
name|doc
init|=
name|testParsedDocument
argument_list|(
literal|"1"
argument_list|,
literal|"1"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocument
argument_list|()
argument_list|,
name|B_1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|Index
name|index
init|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|engine
operator|.
name|index
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
name|index
operator|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|engine
operator|.
name|index
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
name|engine
operator|.
name|delete
argument_list|(
operator|new
name|Engine
operator|.
name|Delete
argument_list|(
literal|null
argument_list|,
literal|"1"
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|index
operator|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|engine
operator|.
name|index
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCreatedFlagAfterFlush
specifier|public
name|void
name|testCreatedFlagAfterFlush
parameter_list|()
block|{
name|ParsedDocument
name|doc
init|=
name|testParsedDocument
argument_list|(
literal|"1"
argument_list|,
literal|"1"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocument
argument_list|()
argument_list|,
name|B_1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|Index
name|index
init|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|engine
operator|.
name|index
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
name|engine
operator|.
name|delete
argument_list|(
operator|new
name|Engine
operator|.
name|Delete
argument_list|(
literal|null
argument_list|,
literal|"1"
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|engine
operator|.
name|flush
argument_list|()
expr_stmt|;
name|index
operator|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|engine
operator|.
name|index
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|class|MockAppender
specifier|private
specifier|static
class|class
name|MockAppender
extends|extends
name|AppenderSkeleton
block|{
DECL|field|sawIndexWriterMessage
specifier|public
name|boolean
name|sawIndexWriterMessage
decl_stmt|;
DECL|field|sawIndexWriterIFDMessage
specifier|public
name|boolean
name|sawIndexWriterIFDMessage
decl_stmt|;
annotation|@
name|Override
DECL|method|append
specifier|protected
name|void
name|append
parameter_list|(
name|LoggingEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|getLevel
argument_list|()
operator|==
name|Level
operator|.
name|TRACE
operator|&&
name|event
operator|.
name|getMessage
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"[index][1] "
argument_list|)
condition|)
block|{
if|if
condition|(
name|event
operator|.
name|getLoggerName
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"lucene.iw"
argument_list|)
operator|&&
name|event
operator|.
name|getMessage
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"IW: apply all deletes during flush"
argument_list|)
condition|)
block|{
name|sawIndexWriterMessage
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|event
operator|.
name|getLoggerName
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"lucene.iw.ifd"
argument_list|)
condition|)
block|{
name|sawIndexWriterIFDMessage
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|requiresLayout
specifier|public
name|boolean
name|requiresLayout
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{         }
block|}
comment|// #5891: make sure IndexWriter's infoStream output is
comment|// sent to lucene.iw with log level TRACE:
annotation|@
name|Test
DECL|method|testIndexWriterInfoStream
specifier|public
name|void
name|testIndexWriterInfoStream
parameter_list|()
block|{
name|assumeFalse
argument_list|(
literal|"who tests the tester?"
argument_list|,
name|VERBOSE
argument_list|)
expr_stmt|;
name|MockAppender
name|mockAppender
init|=
operator|new
name|MockAppender
argument_list|()
decl_stmt|;
name|Logger
name|rootLogger
init|=
name|Logger
operator|.
name|getRootLogger
argument_list|()
decl_stmt|;
name|Level
name|savedLevel
init|=
name|rootLogger
operator|.
name|getLevel
argument_list|()
decl_stmt|;
name|rootLogger
operator|.
name|addAppender
argument_list|(
name|mockAppender
argument_list|)
expr_stmt|;
name|rootLogger
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|DEBUG
argument_list|)
expr_stmt|;
try|try
block|{
comment|// First, with DEBUG, which should NOT log IndexWriter output:
name|ParsedDocument
name|doc
init|=
name|testParsedDocument
argument_list|(
literal|"1"
argument_list|,
literal|"1"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocumentWithTextField
argument_list|()
argument_list|,
name|B_1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|engine
operator|.
name|create
argument_list|(
operator|new
name|Engine
operator|.
name|Create
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
argument_list|)
expr_stmt|;
name|engine
operator|.
name|flush
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|mockAppender
operator|.
name|sawIndexWriterMessage
argument_list|)
expr_stmt|;
comment|// Again, with TRACE, which should log IndexWriter output:
name|rootLogger
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|TRACE
argument_list|)
expr_stmt|;
name|engine
operator|.
name|create
argument_list|(
operator|new
name|Engine
operator|.
name|Create
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"2"
argument_list|)
argument_list|,
name|doc
argument_list|)
argument_list|)
expr_stmt|;
name|engine
operator|.
name|flush
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|mockAppender
operator|.
name|sawIndexWriterMessage
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|rootLogger
operator|.
name|removeAppender
argument_list|(
name|mockAppender
argument_list|)
expr_stmt|;
name|rootLogger
operator|.
name|setLevel
argument_list|(
name|savedLevel
argument_list|)
expr_stmt|;
block|}
block|}
comment|// #8603: make sure we can separately log IFD's messages
DECL|method|testIndexWriterIFDInfoStream
specifier|public
name|void
name|testIndexWriterIFDInfoStream
parameter_list|()
block|{
name|assumeFalse
argument_list|(
literal|"who tests the tester?"
argument_list|,
name|VERBOSE
argument_list|)
expr_stmt|;
name|MockAppender
name|mockAppender
init|=
operator|new
name|MockAppender
argument_list|()
decl_stmt|;
comment|// Works when running this test inside Intellij:
name|Logger
name|iwIFDLogger
init|=
name|LogManager
operator|.
name|exists
argument_list|(
literal|"org.elasticsearch.index.engine.lucene.iw.ifd"
argument_list|)
decl_stmt|;
if|if
condition|(
name|iwIFDLogger
operator|==
literal|null
condition|)
block|{
comment|// Works when running this test from command line:
name|iwIFDLogger
operator|=
name|LogManager
operator|.
name|exists
argument_list|(
literal|"index.engine.lucene.iw.ifd"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|iwIFDLogger
argument_list|)
expr_stmt|;
block|}
name|iwIFDLogger
operator|.
name|addAppender
argument_list|(
name|mockAppender
argument_list|)
expr_stmt|;
name|iwIFDLogger
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|DEBUG
argument_list|)
expr_stmt|;
try|try
block|{
comment|// First, with DEBUG, which should NOT log IndexWriter output:
name|ParsedDocument
name|doc
init|=
name|testParsedDocument
argument_list|(
literal|"1"
argument_list|,
literal|"1"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocumentWithTextField
argument_list|()
argument_list|,
name|B_1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|engine
operator|.
name|create
argument_list|(
operator|new
name|Engine
operator|.
name|Create
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|)
argument_list|)
expr_stmt|;
name|engine
operator|.
name|flush
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|mockAppender
operator|.
name|sawIndexWriterMessage
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|mockAppender
operator|.
name|sawIndexWriterIFDMessage
argument_list|)
expr_stmt|;
comment|// Again, with TRACE, which should only log IndexWriter IFD output:
name|iwIFDLogger
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|TRACE
argument_list|)
expr_stmt|;
name|engine
operator|.
name|create
argument_list|(
operator|new
name|Engine
operator|.
name|Create
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"2"
argument_list|)
argument_list|,
name|doc
argument_list|)
argument_list|)
expr_stmt|;
name|engine
operator|.
name|flush
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|mockAppender
operator|.
name|sawIndexWriterMessage
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mockAppender
operator|.
name|sawIndexWriterIFDMessage
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|iwIFDLogger
operator|.
name|removeAppender
argument_list|(
name|mockAppender
argument_list|)
expr_stmt|;
name|iwIFDLogger
operator|.
name|setLevel
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Slow
annotation|@
name|Test
DECL|method|testEnableGcDeletes
specifier|public
name|void
name|testEnableGcDeletes
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexSettingsService
name|indexSettingsService
init|=
operator|new
name|IndexSettingsService
argument_list|(
name|shardId
operator|.
name|index
argument_list|()
argument_list|,
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|defaultSettings
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_VERSION_CREATED
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
try|try
init|(
name|Store
name|store
init|=
name|createStore
argument_list|()
init|;
name|Engine
name|engine
operator|=
operator|new
name|InternalEngine
argument_list|(
name|config
argument_list|(
name|indexSettingsService
argument_list|,
name|store
argument_list|,
name|createTempDir
argument_list|()
argument_list|,
name|createMergeScheduler
argument_list|(
name|indexSettingsService
argument_list|)
argument_list|)
argument_list|,
literal|false
argument_list|)
init|)
block|{
name|engine
operator|.
name|config
argument_list|()
operator|.
name|setEnableGcDeletes
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// Add document
name|Document
name|document
init|=
name|testDocument
argument_list|()
decl_stmt|;
name|document
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"value"
argument_list|,
literal|"test1"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
name|ParsedDocument
name|doc
init|=
name|testParsedDocument
argument_list|(
literal|"1"
argument_list|,
literal|"1"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|document
argument_list|,
name|B_2
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|engine
operator|.
name|index
argument_list|(
operator|new
name|Engine
operator|.
name|Index
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|,
literal|1
argument_list|,
name|VersionType
operator|.
name|EXTERNAL
argument_list|,
name|Engine
operator|.
name|Operation
operator|.
name|Origin
operator|.
name|PRIMARY
argument_list|,
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// Delete document we just added:
name|engine
operator|.
name|delete
argument_list|(
operator|new
name|Engine
operator|.
name|Delete
argument_list|(
literal|"test"
argument_list|,
literal|"1"
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
literal|10
argument_list|,
name|VersionType
operator|.
name|EXTERNAL
argument_list|,
name|Engine
operator|.
name|Operation
operator|.
name|Origin
operator|.
name|PRIMARY
argument_list|,
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// Get should not find the document
name|Engine
operator|.
name|GetResult
name|getResult
init|=
name|engine
operator|.
name|get
argument_list|(
operator|new
name|Engine
operator|.
name|Get
argument_list|(
literal|true
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|getResult
operator|.
name|exists
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// Give the gc pruning logic a chance to kick in
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|engine
operator|.
name|refresh
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
block|}
comment|// Delete non-existent document
name|engine
operator|.
name|delete
argument_list|(
operator|new
name|Engine
operator|.
name|Delete
argument_list|(
literal|"test"
argument_list|,
literal|"2"
argument_list|,
name|newUid
argument_list|(
literal|"2"
argument_list|)
argument_list|,
literal|10
argument_list|,
name|VersionType
operator|.
name|EXTERNAL
argument_list|,
name|Engine
operator|.
name|Operation
operator|.
name|Origin
operator|.
name|PRIMARY
argument_list|,
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// Get should not find the document (we never indexed uid=2):
name|getResult
operator|=
name|engine
operator|.
name|get
argument_list|(
operator|new
name|Engine
operator|.
name|Get
argument_list|(
literal|true
argument_list|,
name|newUid
argument_list|(
literal|"2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getResult
operator|.
name|exists
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// Try to index uid=1 with a too-old version, should fail:
try|try
block|{
name|engine
operator|.
name|index
argument_list|(
operator|new
name|Engine
operator|.
name|Index
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|,
literal|2
argument_list|,
name|VersionType
operator|.
name|EXTERNAL
argument_list|,
name|Engine
operator|.
name|Operation
operator|.
name|Origin
operator|.
name|PRIMARY
argument_list|,
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"did not hit expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|VersionConflictEngineException
name|vcee
parameter_list|)
block|{
comment|// expected
block|}
comment|// Get should still not find the document
name|getResult
operator|=
name|engine
operator|.
name|get
argument_list|(
operator|new
name|Engine
operator|.
name|Get
argument_list|(
literal|true
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getResult
operator|.
name|exists
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// Try to index uid=2 with a too-old version, should fail:
try|try
block|{
name|engine
operator|.
name|index
argument_list|(
operator|new
name|Engine
operator|.
name|Index
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"2"
argument_list|)
argument_list|,
name|doc
argument_list|,
literal|2
argument_list|,
name|VersionType
operator|.
name|EXTERNAL
argument_list|,
name|Engine
operator|.
name|Operation
operator|.
name|Origin
operator|.
name|PRIMARY
argument_list|,
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"did not hit expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|VersionConflictEngineException
name|vcee
parameter_list|)
block|{
comment|// expected
block|}
comment|// Get should not find the document
name|getResult
operator|=
name|engine
operator|.
name|get
argument_list|(
operator|new
name|Engine
operator|.
name|Get
argument_list|(
literal|true
argument_list|,
name|newUid
argument_list|(
literal|"2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getResult
operator|.
name|exists
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|newUid
specifier|protected
name|Term
name|newUid
parameter_list|(
name|String
name|id
parameter_list|)
block|{
return|return
operator|new
name|Term
argument_list|(
literal|"_uid"
argument_list|,
name|id
argument_list|)
return|;
block|}
annotation|@
name|Test
DECL|method|testExtractShardId
specifier|public
name|void
name|testExtractShardId
parameter_list|()
block|{
try|try
init|(
name|Engine
operator|.
name|Searcher
name|test
init|=
name|this
operator|.
name|engine
operator|.
name|acquireSearcher
argument_list|(
literal|"test"
argument_list|)
init|)
block|{
name|ShardId
name|shardId
init|=
name|ShardUtils
operator|.
name|extractShardId
argument_list|(
name|test
operator|.
name|reader
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|shardId
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|shardId
argument_list|,
name|engine
operator|.
name|config
argument_list|()
operator|.
name|getShardId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Random test that throws random exception and ensures all references are      * counted down / released and resources are closed.      */
annotation|@
name|Test
DECL|method|testFailStart
specifier|public
name|void
name|testFailStart
parameter_list|()
throws|throws
name|IOException
block|{
comment|// this test fails if any reader, searcher or directory is not closed - MDW FTW
specifier|final
name|int
name|iters
init|=
name|scaledRandomIntBetween
argument_list|(
literal|10
argument_list|,
literal|100
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iters
condition|;
name|i
operator|++
control|)
block|{
name|MockDirectoryWrapper
name|wrapper
init|=
name|newMockDirectory
argument_list|()
decl_stmt|;
name|wrapper
operator|.
name|setFailOnOpenInput
argument_list|(
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|wrapper
operator|.
name|setAllowRandomFileNotFoundException
argument_list|(
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|wrapper
operator|.
name|setRandomIOExceptionRate
argument_list|(
name|randomDouble
argument_list|()
argument_list|)
expr_stmt|;
name|wrapper
operator|.
name|setRandomIOExceptionRateOnOpen
argument_list|(
name|randomDouble
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|translogPath
init|=
name|createTempDir
argument_list|(
literal|"testFailStart"
argument_list|)
decl_stmt|;
try|try
init|(
name|Store
name|store
init|=
name|createStore
argument_list|(
name|wrapper
argument_list|)
init|)
block|{
name|int
name|refCount
init|=
name|store
operator|.
name|refCount
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"refCount: "
operator|+
name|store
operator|.
name|refCount
argument_list|()
argument_list|,
name|store
operator|.
name|refCount
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|InternalEngine
name|holder
decl_stmt|;
try|try
block|{
name|holder
operator|=
name|createEngine
argument_list|(
name|store
argument_list|,
name|translogPath
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EngineCreationFailureException
name|ex
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|store
operator|.
name|refCount
argument_list|()
argument_list|,
name|refCount
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|assertEquals
argument_list|(
name|store
operator|.
name|refCount
argument_list|()
argument_list|,
name|refCount
operator|+
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|int
name|numStarts
init|=
name|scaledRandomIntBetween
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numStarts
condition|;
name|j
operator|++
control|)
block|{
try|try
block|{
name|assertEquals
argument_list|(
name|store
operator|.
name|refCount
argument_list|()
argument_list|,
name|refCount
operator|+
literal|1
argument_list|)
expr_stmt|;
name|holder
operator|.
name|close
argument_list|()
expr_stmt|;
name|holder
operator|=
name|createEngine
argument_list|(
name|store
argument_list|,
name|translogPath
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|store
operator|.
name|refCount
argument_list|()
argument_list|,
name|refCount
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EngineCreationFailureException
name|ex
parameter_list|)
block|{
comment|// all is fine
name|assertEquals
argument_list|(
name|store
operator|.
name|refCount
argument_list|()
argument_list|,
name|refCount
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|holder
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|store
operator|.
name|refCount
argument_list|()
argument_list|,
name|refCount
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testSettings
specifier|public
name|void
name|testSettings
parameter_list|()
block|{
name|CodecService
name|codecService
init|=
operator|new
name|CodecService
argument_list|(
name|shardId
operator|.
name|index
argument_list|()
argument_list|)
decl_stmt|;
name|LiveIndexWriterConfig
name|currentIndexWriterConfig
init|=
name|engine
operator|.
name|getCurrentIndexWriterConfig
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|engine
operator|.
name|config
argument_list|()
operator|.
name|getCodec
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|codecService
operator|.
name|codec
argument_list|(
name|codecName
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|currentIndexWriterConfig
operator|.
name|getCodec
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|codecService
operator|.
name|codec
argument_list|(
name|codecName
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|engine
operator|.
name|config
argument_list|()
operator|.
name|getIndexConcurrency
argument_list|()
argument_list|,
name|indexConcurrency
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|currentIndexWriterConfig
operator|.
name|getMaxThreadStates
argument_list|()
argument_list|,
name|indexConcurrency
argument_list|)
expr_stmt|;
name|IndexDynamicSettingsModule
name|settings
init|=
operator|new
name|IndexDynamicSettingsModule
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|settings
operator|.
name|containsSetting
argument_list|(
name|EngineConfig
operator|.
name|INDEX_COMPOUND_ON_FLUSH
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|settings
operator|.
name|containsSetting
argument_list|(
name|EngineConfig
operator|.
name|INDEX_GC_DELETES_SETTING
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRetryWithAutogeneratedIdWorksAndNoDuplicateDocs
specifier|public
name|void
name|testRetryWithAutogeneratedIdWorksAndNoDuplicateDocs
parameter_list|()
throws|throws
name|IOException
block|{
name|ParsedDocument
name|doc
init|=
name|testParsedDocument
argument_list|(
literal|"1"
argument_list|,
literal|"1"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocument
argument_list|()
argument_list|,
name|B_1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|boolean
name|canHaveDuplicates
init|=
literal|false
decl_stmt|;
name|boolean
name|autoGeneratedId
init|=
literal|true
decl_stmt|;
name|Engine
operator|.
name|Create
name|index
init|=
operator|new
name|Engine
operator|.
name|Create
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|,
name|Versions
operator|.
name|MATCH_ANY
argument_list|,
name|VersionType
operator|.
name|INTERNAL
argument_list|,
name|PRIMARY
argument_list|,
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|,
name|canHaveDuplicates
argument_list|,
name|autoGeneratedId
argument_list|)
decl_stmt|;
name|engine
operator|.
name|create
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|index
operator|.
name|version
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
name|index
operator|=
operator|new
name|Engine
operator|.
name|Create
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|,
name|index
operator|.
name|version
argument_list|()
argument_list|,
name|index
operator|.
name|versionType
argument_list|()
operator|.
name|versionTypeForReplicationAndRecovery
argument_list|()
argument_list|,
name|REPLICA
argument_list|,
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|,
name|canHaveDuplicates
argument_list|,
name|autoGeneratedId
argument_list|)
expr_stmt|;
name|replicaEngine
operator|.
name|create
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|index
operator|.
name|version
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
name|canHaveDuplicates
operator|=
literal|true
expr_stmt|;
name|index
operator|=
operator|new
name|Engine
operator|.
name|Create
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|,
name|Versions
operator|.
name|MATCH_ANY
argument_list|,
name|VersionType
operator|.
name|INTERNAL
argument_list|,
name|PRIMARY
argument_list|,
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|,
name|canHaveDuplicates
argument_list|,
name|autoGeneratedId
argument_list|)
expr_stmt|;
name|engine
operator|.
name|create
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|index
operator|.
name|version
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
name|engine
operator|.
name|refresh
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|Engine
operator|.
name|Searcher
name|searcher
init|=
name|engine
operator|.
name|acquireSearcher
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|TopDocs
name|topDocs
init|=
name|searcher
operator|.
name|searcher
argument_list|()
operator|.
name|search
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|topDocs
operator|.
name|totalHits
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|index
operator|=
operator|new
name|Engine
operator|.
name|Create
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|,
name|index
operator|.
name|version
argument_list|()
argument_list|,
name|index
operator|.
name|versionType
argument_list|()
operator|.
name|versionTypeForReplicationAndRecovery
argument_list|()
argument_list|,
name|REPLICA
argument_list|,
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|,
name|canHaveDuplicates
argument_list|,
name|autoGeneratedId
argument_list|)
expr_stmt|;
try|try
block|{
name|replicaEngine
operator|.
name|create
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|VersionConflictEngineException
name|e
parameter_list|)
block|{
comment|// we ignore version conflicts on replicas, see TransportShardReplicationOperationAction.ignoreReplicaException
block|}
name|replicaEngine
operator|.
name|refresh
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|Engine
operator|.
name|Searcher
name|replicaSearcher
init|=
name|replicaEngine
operator|.
name|acquireSearcher
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|topDocs
operator|=
name|replicaSearcher
operator|.
name|searcher
argument_list|()
operator|.
name|search
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|topDocs
operator|.
name|totalHits
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|searcher
operator|.
name|close
argument_list|()
expr_stmt|;
name|replicaSearcher
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRetryWithAutogeneratedIdsAndWrongOrderWorksAndNoDuplicateDocs
specifier|public
name|void
name|testRetryWithAutogeneratedIdsAndWrongOrderWorksAndNoDuplicateDocs
parameter_list|()
throws|throws
name|IOException
block|{
name|ParsedDocument
name|doc
init|=
name|testParsedDocument
argument_list|(
literal|"1"
argument_list|,
literal|"1"
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocument
argument_list|()
argument_list|,
name|B_1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|boolean
name|canHaveDuplicates
init|=
literal|true
decl_stmt|;
name|boolean
name|autoGeneratedId
init|=
literal|true
decl_stmt|;
name|Engine
operator|.
name|Create
name|firstIndexRequest
init|=
operator|new
name|Engine
operator|.
name|Create
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|,
name|Versions
operator|.
name|MATCH_ANY
argument_list|,
name|VersionType
operator|.
name|INTERNAL
argument_list|,
name|PRIMARY
argument_list|,
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|,
name|canHaveDuplicates
argument_list|,
name|autoGeneratedId
argument_list|)
decl_stmt|;
name|engine
operator|.
name|create
argument_list|(
name|firstIndexRequest
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|firstIndexRequest
operator|.
name|version
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
name|Engine
operator|.
name|Create
name|firstIndexRequestReplica
init|=
operator|new
name|Engine
operator|.
name|Create
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|,
name|firstIndexRequest
operator|.
name|version
argument_list|()
argument_list|,
name|firstIndexRequest
operator|.
name|versionType
argument_list|()
operator|.
name|versionTypeForReplicationAndRecovery
argument_list|()
argument_list|,
name|REPLICA
argument_list|,
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|,
name|canHaveDuplicates
argument_list|,
name|autoGeneratedId
argument_list|)
decl_stmt|;
name|replicaEngine
operator|.
name|create
argument_list|(
name|firstIndexRequestReplica
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|firstIndexRequestReplica
operator|.
name|version
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
name|canHaveDuplicates
operator|=
literal|false
expr_stmt|;
name|Engine
operator|.
name|Create
name|secondIndexRequest
init|=
operator|new
name|Engine
operator|.
name|Create
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|,
name|Versions
operator|.
name|MATCH_ANY
argument_list|,
name|VersionType
operator|.
name|INTERNAL
argument_list|,
name|PRIMARY
argument_list|,
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|,
name|canHaveDuplicates
argument_list|,
name|autoGeneratedId
argument_list|)
decl_stmt|;
try|try
block|{
name|engine
operator|.
name|create
argument_list|(
name|secondIndexRequest
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DocumentAlreadyExistsException
name|e
parameter_list|)
block|{
comment|// we can ignore the exception. In case this happens because the retry request arrived first then this error will not be sent back anyway.
comment|// in any other case this is an actual error
block|}
name|engine
operator|.
name|refresh
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|Engine
operator|.
name|Searcher
name|searcher
init|=
name|engine
operator|.
name|acquireSearcher
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|TopDocs
name|topDocs
init|=
name|searcher
operator|.
name|searcher
argument_list|()
operator|.
name|search
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|topDocs
operator|.
name|totalHits
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Engine
operator|.
name|Create
name|secondIndexRequestReplica
init|=
operator|new
name|Engine
operator|.
name|Create
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|doc
argument_list|,
name|firstIndexRequest
operator|.
name|version
argument_list|()
argument_list|,
name|firstIndexRequest
operator|.
name|versionType
argument_list|()
operator|.
name|versionTypeForReplicationAndRecovery
argument_list|()
argument_list|,
name|REPLICA
argument_list|,
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|,
name|canHaveDuplicates
argument_list|,
name|autoGeneratedId
argument_list|)
decl_stmt|;
try|try
block|{
name|replicaEngine
operator|.
name|create
argument_list|(
name|secondIndexRequestReplica
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|VersionConflictEngineException
name|e
parameter_list|)
block|{
comment|// we ignore version conflicts on replicas, see TransportShardReplicationOperationAction.ignoreReplicaException.
block|}
name|replicaEngine
operator|.
name|refresh
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|Engine
operator|.
name|Searcher
name|replicaSearcher
init|=
name|replicaEngine
operator|.
name|acquireSearcher
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|topDocs
operator|=
name|replicaSearcher
operator|.
name|searcher
argument_list|()
operator|.
name|search
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|topDocs
operator|.
name|totalHits
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|searcher
operator|.
name|close
argument_list|()
expr_stmt|;
name|replicaSearcher
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// #10312
annotation|@
name|Test
DECL|method|testDeletesAloneCanTriggerRefresh
specifier|public
name|void
name|testDeletesAloneCanTriggerRefresh
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Tiny indexing buffer:
name|Settings
name|indexSettings
init|=
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|defaultSettings
argument_list|)
operator|.
name|put
argument_list|(
name|EngineConfig
operator|.
name|INDEX_BUFFER_SIZE_SETTING
argument_list|,
literal|"1kb"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|IndexSettingsService
name|indexSettingsService
init|=
operator|new
name|IndexSettingsService
argument_list|(
name|shardId
operator|.
name|index
argument_list|()
argument_list|,
name|indexSettings
argument_list|)
decl_stmt|;
try|try
init|(
name|Store
name|store
init|=
name|createStore
argument_list|()
init|;
name|Engine
name|engine
operator|=
operator|new
name|InternalEngine
argument_list|(
name|config
argument_list|(
name|indexSettingsService
argument_list|,
name|store
argument_list|,
name|createTempDir
argument_list|()
argument_list|,
name|createMergeScheduler
argument_list|(
name|indexSettingsService
argument_list|)
argument_list|)
argument_list|,
literal|false
argument_list|)
init|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|String
name|id
init|=
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|ParsedDocument
name|doc
init|=
name|testParsedDocument
argument_list|(
name|id
argument_list|,
name|id
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocument
argument_list|()
argument_list|,
name|B_1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|engine
operator|.
name|index
argument_list|(
operator|new
name|Engine
operator|.
name|Index
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
name|id
argument_list|)
argument_list|,
name|doc
argument_list|,
literal|2
argument_list|,
name|VersionType
operator|.
name|EXTERNAL
argument_list|,
name|Engine
operator|.
name|Operation
operator|.
name|Origin
operator|.
name|PRIMARY
argument_list|,
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Force merge so we know all merges are done before we start deleting:
name|engine
operator|.
name|forceMerge
argument_list|(
literal|true
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Searcher
name|s
init|=
name|engine
operator|.
name|acquireSearcher
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
specifier|final
name|long
name|version1
init|=
operator|(
operator|(
name|DirectoryReader
operator|)
name|s
operator|.
name|reader
argument_list|()
operator|)
operator|.
name|getVersion
argument_list|()
decl_stmt|;
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|String
name|id
init|=
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|engine
operator|.
name|delete
argument_list|(
operator|new
name|Engine
operator|.
name|Delete
argument_list|(
literal|"test"
argument_list|,
name|id
argument_list|,
name|newUid
argument_list|(
name|id
argument_list|)
argument_list|,
literal|10
argument_list|,
name|VersionType
operator|.
name|EXTERNAL
argument_list|,
name|Engine
operator|.
name|Operation
operator|.
name|Origin
operator|.
name|PRIMARY
argument_list|,
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// We must assertBusy because refresh due to version map being full is done in background (REFRESH) thread pool:
name|assertBusy
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|Searcher
name|s2
init|=
name|engine
operator|.
name|acquireSearcher
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|long
name|version2
init|=
operator|(
operator|(
name|DirectoryReader
operator|)
name|s2
operator|.
name|reader
argument_list|()
operator|)
operator|.
name|getVersion
argument_list|()
decl_stmt|;
name|s2
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// 100 buffered deletes will easily exceed 25% of our 1 KB indexing buffer so it should have forced a refresh:
name|assertThat
argument_list|(
name|version2
argument_list|,
name|greaterThan
argument_list|(
name|version1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testMissingTranslog
specifier|public
name|void
name|testMissingTranslog
parameter_list|()
throws|throws
name|IOException
block|{
comment|// test that we can force start the engine , even if the translog is missing.
name|engine
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// fake a new translog, causing the engine to point to a missing one.
name|Translog
name|translog
init|=
name|createTranslog
argument_list|()
decl_stmt|;
name|translog
operator|.
name|markCommitted
argument_list|(
name|translog
operator|.
name|currentId
argument_list|()
argument_list|)
expr_stmt|;
comment|// we have to re-open the translog because o.w. it will complain about commit information going backwards, which is OK as we did a fake markComitted
name|translog
operator|.
name|close
argument_list|()
expr_stmt|;
try|try
block|{
name|engine
operator|=
name|createEngine
argument_list|(
name|store
argument_list|,
name|primaryTranslogDir
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"engine shouldn't start without a valid translog id"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EngineCreationFailureException
name|ex
parameter_list|)
block|{
comment|// expected
block|}
comment|// now it should be OK.
name|IndexSettingsService
name|indexSettingsService
init|=
operator|new
name|IndexSettingsService
argument_list|(
name|shardId
operator|.
name|index
argument_list|()
argument_list|,
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|defaultSettings
argument_list|)
operator|.
name|put
argument_list|(
name|EngineConfig
operator|.
name|INDEX_IGNORE_UNKNOWN_TRANSLOG
argument_list|,
literal|true
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|engine
operator|=
name|createEngine
argument_list|(
name|indexSettingsService
argument_list|,
name|store
argument_list|,
name|primaryTranslogDir
argument_list|,
name|createMergeScheduler
argument_list|(
name|indexSettingsService
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|TestLogging
argument_list|(
literal|"index.translog:TRACE"
argument_list|)
DECL|method|testTranslogReplayWithFailure
specifier|public
name|void
name|testTranslogReplayWithFailure
parameter_list|()
throws|throws
name|IOException
block|{
name|boolean
name|canHaveDuplicates
init|=
literal|true
decl_stmt|;
name|boolean
name|autoGeneratedId
init|=
literal|true
decl_stmt|;
specifier|final
name|int
name|numDocs
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|ParsedDocument
name|doc
init|=
name|testParsedDocument
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocument
argument_list|()
argument_list|,
operator|new
name|BytesArray
argument_list|(
literal|"{}"
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|Create
name|firstIndexRequest
init|=
operator|new
name|Engine
operator|.
name|Create
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|,
name|doc
argument_list|,
name|Versions
operator|.
name|MATCH_ANY
argument_list|,
name|VersionType
operator|.
name|INTERNAL
argument_list|,
name|PRIMARY
argument_list|,
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|,
name|canHaveDuplicates
argument_list|,
name|autoGeneratedId
argument_list|)
decl_stmt|;
name|engine
operator|.
name|create
argument_list|(
name|firstIndexRequest
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|firstIndexRequest
operator|.
name|version
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|engine
operator|.
name|refresh
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
try|try
init|(
name|Engine
operator|.
name|Searcher
name|searcher
init|=
name|engine
operator|.
name|acquireSearcher
argument_list|(
literal|"test"
argument_list|)
init|)
block|{
name|TopDocs
name|topDocs
init|=
name|searcher
operator|.
name|searcher
argument_list|()
operator|.
name|search
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|randomIntBetween
argument_list|(
name|numDocs
argument_list|,
name|numDocs
operator|+
literal|10
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|topDocs
operator|.
name|totalHits
argument_list|,
name|equalTo
argument_list|(
name|numDocs
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|engine
operator|.
name|close
argument_list|()
expr_stmt|;
name|boolean
name|recoveredButFailed
init|=
literal|false
decl_stmt|;
specifier|final
name|MockDirectoryWrapper
name|directory
init|=
name|DirectoryUtils
operator|.
name|getLeaf
argument_list|(
name|store
operator|.
name|directory
argument_list|()
argument_list|,
name|MockDirectoryWrapper
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|directory
operator|!=
literal|null
condition|)
block|{
comment|// since we rollback the IW we are writing the same segment files again after starting IW but MDW prevents
comment|// this so we have to disable the check explicitly
name|directory
operator|.
name|setPreventDoubleWrite
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|boolean
name|started
init|=
literal|false
decl_stmt|;
specifier|final
name|int
name|numIters
init|=
name|randomIntBetween
argument_list|(
literal|10
argument_list|,
literal|20
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numIters
condition|;
name|i
operator|++
control|)
block|{
name|directory
operator|.
name|setRandomIOExceptionRateOnOpen
argument_list|(
name|randomDouble
argument_list|()
argument_list|)
expr_stmt|;
name|directory
operator|.
name|setRandomIOExceptionRate
argument_list|(
name|randomDouble
argument_list|()
argument_list|)
expr_stmt|;
name|directory
operator|.
name|setFailOnOpenInput
argument_list|(
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|directory
operator|.
name|setAllowRandomFileNotFoundException
argument_list|(
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|engine
operator|=
name|createEngine
argument_list|(
name|store
argument_list|,
name|primaryTranslogDir
argument_list|)
expr_stmt|;
name|started
operator|=
literal|true
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|EngineCreationFailureException
name|ex
parameter_list|)
block|{                 }
block|}
name|directory
operator|.
name|setRandomIOExceptionRateOnOpen
argument_list|(
literal|0.0
argument_list|)
expr_stmt|;
name|directory
operator|.
name|setRandomIOExceptionRate
argument_list|(
literal|0.0
argument_list|)
expr_stmt|;
name|directory
operator|.
name|setFailOnOpenInput
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|directory
operator|.
name|setAllowRandomFileNotFoundException
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|started
operator|==
literal|false
condition|)
block|{
name|engine
operator|=
name|createEngine
argument_list|(
name|store
argument_list|,
name|primaryTranslogDir
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// no mock directory, no fun.
name|engine
operator|=
name|createEngine
argument_list|(
name|store
argument_list|,
name|primaryTranslogDir
argument_list|)
expr_stmt|;
block|}
try|try
init|(
name|Engine
operator|.
name|Searcher
name|searcher
init|=
name|engine
operator|.
name|acquireSearcher
argument_list|(
literal|"test"
argument_list|)
init|)
block|{
name|TopDocs
name|topDocs
init|=
name|searcher
operator|.
name|searcher
argument_list|()
operator|.
name|search
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|randomIntBetween
argument_list|(
name|numDocs
argument_list|,
name|numDocs
operator|+
literal|10
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|topDocs
operator|.
name|totalHits
argument_list|,
name|equalTo
argument_list|(
name|numDocs
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testSkipTranslogReplay
specifier|public
name|void
name|testSkipTranslogReplay
parameter_list|()
throws|throws
name|IOException
block|{
name|boolean
name|canHaveDuplicates
init|=
literal|true
decl_stmt|;
name|boolean
name|autoGeneratedId
init|=
literal|true
decl_stmt|;
specifier|final
name|int
name|numDocs
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|ParsedDocument
name|doc
init|=
name|testParsedDocument
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocument
argument_list|()
argument_list|,
operator|new
name|BytesArray
argument_list|(
literal|"{}"
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|Create
name|firstIndexRequest
init|=
operator|new
name|Engine
operator|.
name|Create
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|,
name|doc
argument_list|,
name|Versions
operator|.
name|MATCH_ANY
argument_list|,
name|VersionType
operator|.
name|INTERNAL
argument_list|,
name|PRIMARY
argument_list|,
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|,
name|canHaveDuplicates
argument_list|,
name|autoGeneratedId
argument_list|)
decl_stmt|;
name|engine
operator|.
name|create
argument_list|(
name|firstIndexRequest
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|firstIndexRequest
operator|.
name|version
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|engine
operator|.
name|refresh
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
try|try
init|(
name|Engine
operator|.
name|Searcher
name|searcher
init|=
name|engine
operator|.
name|acquireSearcher
argument_list|(
literal|"test"
argument_list|)
init|)
block|{
name|TopDocs
name|topDocs
init|=
name|searcher
operator|.
name|searcher
argument_list|()
operator|.
name|search
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|randomIntBetween
argument_list|(
name|numDocs
argument_list|,
name|numDocs
operator|+
literal|10
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|topDocs
operator|.
name|totalHits
argument_list|,
name|equalTo
argument_list|(
name|numDocs
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|MockDirectoryWrapper
name|directory
init|=
name|DirectoryUtils
operator|.
name|getLeaf
argument_list|(
name|store
operator|.
name|directory
argument_list|()
argument_list|,
name|MockDirectoryWrapper
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|directory
operator|!=
literal|null
condition|)
block|{
comment|// since we rollback the IW we are writing the same segment files again after starting IW but MDW prevents
comment|// this so we have to disable the check explicitly
name|directory
operator|.
name|setPreventDoubleWrite
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|engine
operator|.
name|close
argument_list|()
expr_stmt|;
name|engine
operator|=
operator|new
name|InternalEngine
argument_list|(
name|engine
operator|.
name|config
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
try|try
init|(
name|Engine
operator|.
name|Searcher
name|searcher
init|=
name|engine
operator|.
name|acquireSearcher
argument_list|(
literal|"test"
argument_list|)
init|)
block|{
name|TopDocs
name|topDocs
init|=
name|searcher
operator|.
name|searcher
argument_list|()
operator|.
name|search
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|randomIntBetween
argument_list|(
name|numDocs
argument_list|,
name|numDocs
operator|+
literal|10
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|topDocs
operator|.
name|totalHits
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|dynamicUpdate
specifier|private
name|Mapping
name|dynamicUpdate
parameter_list|()
block|{
name|BuilderContext
name|context
init|=
operator|new
name|BuilderContext
argument_list|(
name|ImmutableSettings
operator|.
name|EMPTY
argument_list|,
operator|new
name|ContentPath
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|RootObjectMapper
name|root
init|=
name|MapperBuilders
operator|.
name|rootObject
argument_list|(
literal|"some_type"
argument_list|)
operator|.
name|build
argument_list|(
name|context
argument_list|)
decl_stmt|;
return|return
operator|new
name|Mapping
argument_list|(
name|root
argument_list|,
operator|new
name|RootMapper
index|[
literal|0
index|]
argument_list|,
operator|new
name|Mapping
operator|.
name|SourceTransform
index|[
literal|0
index|]
argument_list|,
name|ImmutableMap
operator|.
expr|<
name|String
argument_list|,
name|Object
operator|>
name|of
argument_list|()
argument_list|)
return|;
block|}
DECL|method|testTranslogReplay
specifier|public
name|void
name|testTranslogReplay
parameter_list|()
throws|throws
name|IOException
block|{
name|boolean
name|canHaveDuplicates
init|=
literal|true
decl_stmt|;
name|boolean
name|autoGeneratedId
init|=
literal|true
decl_stmt|;
specifier|final
name|int
name|numDocs
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|ParsedDocument
name|doc
init|=
name|testParsedDocument
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocument
argument_list|()
argument_list|,
operator|new
name|BytesArray
argument_list|(
literal|"{}"
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|Create
name|firstIndexRequest
init|=
operator|new
name|Engine
operator|.
name|Create
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|,
name|doc
argument_list|,
name|Versions
operator|.
name|MATCH_ANY
argument_list|,
name|VersionType
operator|.
name|INTERNAL
argument_list|,
name|PRIMARY
argument_list|,
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|,
name|canHaveDuplicates
argument_list|,
name|autoGeneratedId
argument_list|)
decl_stmt|;
name|engine
operator|.
name|create
argument_list|(
name|firstIndexRequest
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|firstIndexRequest
operator|.
name|version
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|engine
operator|.
name|refresh
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
try|try
init|(
name|Engine
operator|.
name|Searcher
name|searcher
init|=
name|engine
operator|.
name|acquireSearcher
argument_list|(
literal|"test"
argument_list|)
init|)
block|{
name|TopDocs
name|topDocs
init|=
name|searcher
operator|.
name|searcher
argument_list|()
operator|.
name|search
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|randomIntBetween
argument_list|(
name|numDocs
argument_list|,
name|numDocs
operator|+
literal|10
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|topDocs
operator|.
name|totalHits
argument_list|,
name|equalTo
argument_list|(
name|numDocs
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|MockDirectoryWrapper
name|directory
init|=
name|DirectoryUtils
operator|.
name|getLeaf
argument_list|(
name|store
operator|.
name|directory
argument_list|()
argument_list|,
name|MockDirectoryWrapper
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|directory
operator|!=
literal|null
condition|)
block|{
comment|// since we rollback the IW we are writing the same segment files again after starting IW but MDW prevents
comment|// this so we have to disable the check explicitly
name|directory
operator|.
name|setPreventDoubleWrite
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|TranslogHandler
name|parser
init|=
operator|(
name|TranslogHandler
operator|)
name|engine
operator|.
name|config
argument_list|()
operator|.
name|getTranslogRecoveryPerformer
argument_list|()
decl_stmt|;
name|parser
operator|.
name|mappingUpdate
operator|=
name|dynamicUpdate
argument_list|()
expr_stmt|;
name|engine
operator|.
name|close
argument_list|()
expr_stmt|;
name|engine
operator|=
operator|new
name|InternalEngine
argument_list|(
name|engine
operator|.
name|config
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// we need to reuse the engine config unless the parser.mappingModified won't work
try|try
init|(
name|Engine
operator|.
name|Searcher
name|searcher
init|=
name|engine
operator|.
name|acquireSearcher
argument_list|(
literal|"test"
argument_list|)
init|)
block|{
name|TopDocs
name|topDocs
init|=
name|searcher
operator|.
name|searcher
argument_list|()
operator|.
name|search
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|randomIntBetween
argument_list|(
name|numDocs
argument_list|,
name|numDocs
operator|+
literal|10
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|topDocs
operator|.
name|totalHits
argument_list|,
name|equalTo
argument_list|(
name|numDocs
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|parser
operator|=
operator|(
name|TranslogHandler
operator|)
name|engine
operator|.
name|config
argument_list|()
operator|.
name|getTranslogRecoveryPerformer
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|numDocs
argument_list|,
name|parser
operator|.
name|recoveredOps
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|parser
operator|.
name|mappingUpdate
operator|!=
literal|null
condition|)
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|parser
operator|.
name|getRecoveredTypes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|parser
operator|.
name|getRecoveredTypes
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|parser
operator|.
name|getRecoveredTypes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|engine
operator|.
name|close
argument_list|()
expr_stmt|;
name|engine
operator|=
name|createEngine
argument_list|(
name|store
argument_list|,
name|primaryTranslogDir
argument_list|)
expr_stmt|;
try|try
init|(
name|Engine
operator|.
name|Searcher
name|searcher
init|=
name|engine
operator|.
name|acquireSearcher
argument_list|(
literal|"test"
argument_list|)
init|)
block|{
name|TopDocs
name|topDocs
init|=
name|searcher
operator|.
name|searcher
argument_list|()
operator|.
name|search
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|randomIntBetween
argument_list|(
name|numDocs
argument_list|,
name|numDocs
operator|+
literal|10
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|topDocs
operator|.
name|totalHits
argument_list|,
name|equalTo
argument_list|(
name|numDocs
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|parser
operator|=
operator|(
name|TranslogHandler
operator|)
name|engine
operator|.
name|config
argument_list|()
operator|.
name|getTranslogRecoveryPerformer
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|parser
operator|.
name|recoveredOps
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|boolean
name|flush
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
name|int
name|randomId
init|=
name|randomIntBetween
argument_list|(
name|numDocs
operator|+
literal|1
argument_list|,
name|numDocs
operator|+
literal|10
argument_list|)
decl_stmt|;
name|String
name|uuidValue
init|=
literal|"test#"
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|randomId
argument_list|)
decl_stmt|;
name|ParsedDocument
name|doc
init|=
name|testParsedDocument
argument_list|(
name|uuidValue
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|randomId
argument_list|)
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocument
argument_list|()
argument_list|,
operator|new
name|BytesArray
argument_list|(
literal|"{}"
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Engine
operator|.
name|Create
name|firstIndexRequest
init|=
operator|new
name|Engine
operator|.
name|Create
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
name|uuidValue
argument_list|)
argument_list|,
name|doc
argument_list|,
literal|1
argument_list|,
name|VersionType
operator|.
name|EXTERNAL
argument_list|,
name|PRIMARY
argument_list|,
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|,
name|canHaveDuplicates
argument_list|,
name|autoGeneratedId
argument_list|)
decl_stmt|;
name|engine
operator|.
name|create
argument_list|(
name|firstIndexRequest
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|firstIndexRequest
operator|.
name|version
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|flush
condition|)
block|{
name|engine
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
name|doc
operator|=
name|testParsedDocument
argument_list|(
name|uuidValue
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|randomId
argument_list|)
argument_list|,
literal|"test"
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|testDocument
argument_list|()
argument_list|,
operator|new
name|BytesArray
argument_list|(
literal|"{}"
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Engine
operator|.
name|Index
name|idxRequest
init|=
operator|new
name|Engine
operator|.
name|Index
argument_list|(
literal|null
argument_list|,
name|newUid
argument_list|(
name|uuidValue
argument_list|)
argument_list|,
name|doc
argument_list|,
literal|2
argument_list|,
name|VersionType
operator|.
name|EXTERNAL
argument_list|,
name|PRIMARY
argument_list|,
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|)
decl_stmt|;
name|engine
operator|.
name|index
argument_list|(
name|idxRequest
argument_list|)
expr_stmt|;
name|engine
operator|.
name|refresh
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|idxRequest
operator|.
name|version
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2l
argument_list|)
argument_list|)
expr_stmt|;
try|try
init|(
name|Engine
operator|.
name|Searcher
name|searcher
init|=
name|engine
operator|.
name|acquireSearcher
argument_list|(
literal|"test"
argument_list|)
init|)
block|{
name|TopDocs
name|topDocs
init|=
name|searcher
operator|.
name|searcher
argument_list|()
operator|.
name|search
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|numDocs
operator|+
literal|1
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|topDocs
operator|.
name|totalHits
argument_list|,
name|equalTo
argument_list|(
name|numDocs
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|engine
operator|.
name|close
argument_list|()
expr_stmt|;
name|engine
operator|=
name|createEngine
argument_list|(
name|store
argument_list|,
name|primaryTranslogDir
argument_list|)
expr_stmt|;
try|try
init|(
name|Engine
operator|.
name|Searcher
name|searcher
init|=
name|engine
operator|.
name|acquireSearcher
argument_list|(
literal|"test"
argument_list|)
init|)
block|{
name|TopDocs
name|topDocs
init|=
name|searcher
operator|.
name|searcher
argument_list|()
operator|.
name|search
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|numDocs
operator|+
literal|1
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|topDocs
operator|.
name|totalHits
argument_list|,
name|equalTo
argument_list|(
name|numDocs
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|parser
operator|=
operator|(
name|TranslogHandler
operator|)
name|engine
operator|.
name|config
argument_list|()
operator|.
name|getTranslogRecoveryPerformer
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|flush
condition|?
literal|1
else|:
literal|2
argument_list|,
name|parser
operator|.
name|recoveredOps
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|engine
operator|.
name|delete
argument_list|(
operator|new
name|Engine
operator|.
name|Delete
argument_list|(
literal|"test"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|randomId
argument_list|)
argument_list|,
name|newUid
argument_list|(
name|uuidValue
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|engine
operator|.
name|refresh
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|engine
operator|.
name|close
argument_list|()
expr_stmt|;
name|engine
operator|=
name|createEngine
argument_list|(
name|store
argument_list|,
name|primaryTranslogDir
argument_list|)
expr_stmt|;
block|}
try|try
init|(
name|Engine
operator|.
name|Searcher
name|searcher
init|=
name|engine
operator|.
name|acquireSearcher
argument_list|(
literal|"test"
argument_list|)
init|)
block|{
name|TopDocs
name|topDocs
init|=
name|searcher
operator|.
name|searcher
argument_list|()
operator|.
name|search
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|numDocs
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|topDocs
operator|.
name|totalHits
argument_list|,
name|equalTo
argument_list|(
name|numDocs
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|TranslogHandler
specifier|public
specifier|static
class|class
name|TranslogHandler
extends|extends
name|TranslogRecoveryPerformer
block|{
DECL|field|docMapper
specifier|private
specifier|final
name|DocumentMapper
name|docMapper
decl_stmt|;
DECL|field|mappingUpdate
specifier|public
name|Mapping
name|mappingUpdate
init|=
literal|null
decl_stmt|;
DECL|field|recoveredOps
specifier|public
specifier|final
name|AtomicInteger
name|recoveredOps
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|method|TranslogHandler
specifier|public
name|TranslogHandler
parameter_list|(
name|String
name|indexName
parameter_list|)
block|{
name|super
argument_list|(
literal|null
argument_list|,
operator|new
name|MapperAnalyzer
argument_list|(
literal|null
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Settings
name|settings
init|=
name|ImmutableSettings
operator|.
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_VERSION_CREATED
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|RootObjectMapper
operator|.
name|Builder
name|rootBuilder
init|=
operator|new
name|RootObjectMapper
operator|.
name|Builder
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|Index
name|index
init|=
operator|new
name|Index
argument_list|(
name|indexName
argument_list|)
decl_stmt|;
name|AnalysisService
name|analysisService
init|=
operator|new
name|AnalysisService
argument_list|(
name|index
argument_list|,
name|settings
argument_list|)
decl_stmt|;
name|SimilarityLookupService
name|similarityLookupService
init|=
operator|new
name|SimilarityLookupService
argument_list|(
name|index
argument_list|,
name|settings
argument_list|)
decl_stmt|;
name|MapperService
name|mapperService
init|=
operator|new
name|MapperService
argument_list|(
name|index
argument_list|,
name|settings
argument_list|,
name|analysisService
argument_list|,
literal|null
argument_list|,
name|similarityLookupService
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|DocumentMapper
operator|.
name|Builder
name|b
init|=
operator|new
name|DocumentMapper
operator|.
name|Builder
argument_list|(
name|indexName
argument_list|,
name|settings
argument_list|,
name|rootBuilder
argument_list|)
decl_stmt|;
name|DocumentMapperParser
name|parser
init|=
operator|new
name|DocumentMapperParser
argument_list|(
name|index
argument_list|,
name|settings
argument_list|,
name|mapperService
argument_list|,
name|analysisService
argument_list|,
name|similarityLookupService
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|this
operator|.
name|docMapper
operator|=
name|b
operator|.
name|build
argument_list|(
literal|null
argument_list|,
name|parser
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|docMapper
specifier|protected
name|Tuple
argument_list|<
name|DocumentMapper
argument_list|,
name|Mapping
argument_list|>
name|docMapper
parameter_list|(
name|String
name|type
parameter_list|)
block|{
return|return
operator|new
name|Tuple
argument_list|<>
argument_list|(
name|docMapper
argument_list|,
name|mappingUpdate
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|operationProcessed
specifier|protected
name|void
name|operationProcessed
parameter_list|()
block|{
name|recoveredOps
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

