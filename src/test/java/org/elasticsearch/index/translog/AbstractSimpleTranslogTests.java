begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.translog
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|translog
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|BytesStreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|VersionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|MatcherAssert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|RandomAccessFile
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ArrayBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|greaterThanOrEqualTo
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|AbstractSimpleTranslogTests
specifier|public
specifier|abstract
class|class
name|AbstractSimpleTranslogTests
extends|extends
name|ElasticsearchTestCase
block|{
DECL|field|shardId
specifier|protected
specifier|final
name|ShardId
name|shardId
init|=
operator|new
name|ShardId
argument_list|(
operator|new
name|Index
argument_list|(
literal|"index"
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
DECL|field|translog
specifier|protected
name|Translog
name|translog
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|translog
operator|=
name|create
argument_list|()
expr_stmt|;
name|translog
operator|.
name|newTranslog
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|translog
operator|.
name|closeWithDelete
argument_list|()
expr_stmt|;
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
DECL|method|create
specifier|protected
specifier|abstract
name|Translog
name|create
parameter_list|()
function_decl|;
DECL|method|translogFileDirectory
specifier|protected
specifier|abstract
name|String
name|translogFileDirectory
parameter_list|()
function_decl|;
annotation|@
name|Test
DECL|method|testRead
specifier|public
name|void
name|testRead
parameter_list|()
throws|throws
name|IOException
block|{
name|Translog
operator|.
name|Location
name|loc1
init|=
name|translog
operator|.
name|add
argument_list|(
operator|new
name|Translog
operator|.
name|Create
argument_list|(
literal|"test"
argument_list|,
literal|"1"
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|1
block|}
argument_list|)
argument_list|)
decl_stmt|;
name|Translog
operator|.
name|Location
name|loc2
init|=
name|translog
operator|.
name|add
argument_list|(
operator|new
name|Translog
operator|.
name|Create
argument_list|(
literal|"test"
argument_list|,
literal|"2"
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|2
block|}
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|TranslogStreams
operator|.
name|readSource
argument_list|(
name|translog
operator|.
name|read
argument_list|(
name|loc1
argument_list|)
argument_list|)
operator|.
name|source
operator|.
name|toBytesArray
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|BytesArray
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|1
block|}
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|TranslogStreams
operator|.
name|readSource
argument_list|(
name|translog
operator|.
name|read
argument_list|(
name|loc2
argument_list|)
argument_list|)
operator|.
name|source
operator|.
name|toBytesArray
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|BytesArray
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|2
block|}
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|translog
operator|.
name|sync
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|TranslogStreams
operator|.
name|readSource
argument_list|(
name|translog
operator|.
name|read
argument_list|(
name|loc1
argument_list|)
argument_list|)
operator|.
name|source
operator|.
name|toBytesArray
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|BytesArray
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|1
block|}
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|TranslogStreams
operator|.
name|readSource
argument_list|(
name|translog
operator|.
name|read
argument_list|(
name|loc2
argument_list|)
argument_list|)
operator|.
name|source
operator|.
name|toBytesArray
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|BytesArray
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|2
block|}
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Translog
operator|.
name|Location
name|loc3
init|=
name|translog
operator|.
name|add
argument_list|(
operator|new
name|Translog
operator|.
name|Create
argument_list|(
literal|"test"
argument_list|,
literal|"2"
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|3
block|}
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|TranslogStreams
operator|.
name|readSource
argument_list|(
name|translog
operator|.
name|read
argument_list|(
name|loc3
argument_list|)
argument_list|)
operator|.
name|source
operator|.
name|toBytesArray
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|BytesArray
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|3
block|}
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|translog
operator|.
name|sync
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|TranslogStreams
operator|.
name|readSource
argument_list|(
name|translog
operator|.
name|read
argument_list|(
name|loc3
argument_list|)
argument_list|)
operator|.
name|source
operator|.
name|toBytesArray
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|BytesArray
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|3
block|}
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTransientTranslog
specifier|public
name|void
name|testTransientTranslog
parameter_list|()
block|{
name|Translog
operator|.
name|Snapshot
name|snapshot
init|=
name|translog
operator|.
name|snapshot
argument_list|()
decl_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|snapshot
argument_list|,
name|TranslogSizeMatcher
operator|.
name|translogSize
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|snapshot
operator|.
name|close
argument_list|()
expr_stmt|;
name|translog
operator|.
name|add
argument_list|(
operator|new
name|Translog
operator|.
name|Create
argument_list|(
literal|"test"
argument_list|,
literal|"1"
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|1
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|snapshot
operator|=
name|translog
operator|.
name|snapshot
argument_list|()
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|snapshot
argument_list|,
name|TranslogSizeMatcher
operator|.
name|translogSize
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|snapshot
operator|.
name|estimatedTotalOperations
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|snapshot
operator|.
name|close
argument_list|()
expr_stmt|;
name|translog
operator|.
name|newTransientTranslog
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|snapshot
operator|=
name|translog
operator|.
name|snapshot
argument_list|()
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|snapshot
argument_list|,
name|TranslogSizeMatcher
operator|.
name|translogSize
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|snapshot
operator|.
name|estimatedTotalOperations
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|snapshot
operator|.
name|close
argument_list|()
expr_stmt|;
name|translog
operator|.
name|add
argument_list|(
operator|new
name|Translog
operator|.
name|Index
argument_list|(
literal|"test"
argument_list|,
literal|"2"
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|2
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|snapshot
operator|=
name|translog
operator|.
name|snapshot
argument_list|()
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|snapshot
argument_list|,
name|TranslogSizeMatcher
operator|.
name|translogSize
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|snapshot
operator|.
name|estimatedTotalOperations
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|snapshot
operator|.
name|close
argument_list|()
expr_stmt|;
name|translog
operator|.
name|makeTransientCurrent
argument_list|()
expr_stmt|;
name|snapshot
operator|=
name|translog
operator|.
name|snapshot
argument_list|()
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|snapshot
argument_list|,
name|TranslogSizeMatcher
operator|.
name|translogSize
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// now its one, since it only includes "2"
name|assertThat
argument_list|(
name|snapshot
operator|.
name|estimatedTotalOperations
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|snapshot
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSimpleOperations
specifier|public
name|void
name|testSimpleOperations
parameter_list|()
block|{
name|Translog
operator|.
name|Snapshot
name|snapshot
init|=
name|translog
operator|.
name|snapshot
argument_list|()
decl_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|snapshot
argument_list|,
name|TranslogSizeMatcher
operator|.
name|translogSize
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|snapshot
operator|.
name|close
argument_list|()
expr_stmt|;
name|translog
operator|.
name|add
argument_list|(
operator|new
name|Translog
operator|.
name|Create
argument_list|(
literal|"test"
argument_list|,
literal|"1"
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|1
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|snapshot
operator|=
name|translog
operator|.
name|snapshot
argument_list|()
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|snapshot
argument_list|,
name|TranslogSizeMatcher
operator|.
name|translogSize
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|snapshot
operator|.
name|estimatedTotalOperations
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|snapshot
operator|.
name|close
argument_list|()
expr_stmt|;
name|translog
operator|.
name|add
argument_list|(
operator|new
name|Translog
operator|.
name|Index
argument_list|(
literal|"test"
argument_list|,
literal|"2"
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|2
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|snapshot
operator|=
name|translog
operator|.
name|snapshot
argument_list|()
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|snapshot
argument_list|,
name|TranslogSizeMatcher
operator|.
name|translogSize
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|snapshot
operator|.
name|estimatedTotalOperations
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|snapshot
operator|.
name|close
argument_list|()
expr_stmt|;
name|translog
operator|.
name|add
argument_list|(
operator|new
name|Translog
operator|.
name|Delete
argument_list|(
name|newUid
argument_list|(
literal|"3"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|snapshot
operator|=
name|translog
operator|.
name|snapshot
argument_list|()
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|snapshot
argument_list|,
name|TranslogSizeMatcher
operator|.
name|translogSize
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|snapshot
operator|.
name|estimatedTotalOperations
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|snapshot
operator|.
name|close
argument_list|()
expr_stmt|;
name|translog
operator|.
name|add
argument_list|(
operator|new
name|Translog
operator|.
name|DeleteByQuery
argument_list|(
operator|new
name|BytesArray
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|4
block|}
argument_list|)
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|snapshot
operator|=
name|translog
operator|.
name|snapshot
argument_list|()
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|snapshot
argument_list|,
name|TranslogSizeMatcher
operator|.
name|translogSize
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|snapshot
operator|.
name|estimatedTotalOperations
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|snapshot
operator|.
name|close
argument_list|()
expr_stmt|;
name|snapshot
operator|=
name|translog
operator|.
name|snapshot
argument_list|()
expr_stmt|;
name|Translog
operator|.
name|Create
name|create
init|=
operator|(
name|Translog
operator|.
name|Create
operator|)
name|snapshot
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|create
operator|!=
literal|null
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|create
operator|.
name|source
argument_list|()
operator|.
name|toBytes
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|1
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|Translog
operator|.
name|Index
name|index
init|=
operator|(
name|Translog
operator|.
name|Index
operator|)
name|snapshot
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|index
operator|!=
literal|null
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|index
operator|.
name|source
argument_list|()
operator|.
name|toBytes
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|2
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|Translog
operator|.
name|Delete
name|delete
init|=
operator|(
name|Translog
operator|.
name|Delete
operator|)
name|snapshot
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|delete
operator|!=
literal|null
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|delete
operator|.
name|uid
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|newUid
argument_list|(
literal|"3"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Translog
operator|.
name|DeleteByQuery
name|deleteByQuery
init|=
operator|(
name|Translog
operator|.
name|DeleteByQuery
operator|)
name|snapshot
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|deleteByQuery
operator|!=
literal|null
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|deleteByQuery
operator|.
name|source
argument_list|()
operator|.
name|toBytes
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|4
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|snapshot
operator|.
name|next
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|snapshot
operator|.
name|close
argument_list|()
expr_stmt|;
name|long
name|firstId
init|=
name|translog
operator|.
name|currentId
argument_list|()
decl_stmt|;
name|translog
operator|.
name|newTranslog
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|translog
operator|.
name|currentId
argument_list|()
argument_list|,
name|Matchers
operator|.
name|not
argument_list|(
name|equalTo
argument_list|(
name|firstId
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|snapshot
operator|=
name|translog
operator|.
name|snapshot
argument_list|()
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|snapshot
argument_list|,
name|TranslogSizeMatcher
operator|.
name|translogSize
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|snapshot
operator|.
name|estimatedTotalOperations
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|snapshot
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSnapshot
specifier|public
name|void
name|testSnapshot
parameter_list|()
block|{
name|Translog
operator|.
name|Snapshot
name|snapshot
init|=
name|translog
operator|.
name|snapshot
argument_list|()
decl_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|snapshot
argument_list|,
name|TranslogSizeMatcher
operator|.
name|translogSize
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|snapshot
operator|.
name|close
argument_list|()
expr_stmt|;
name|translog
operator|.
name|add
argument_list|(
operator|new
name|Translog
operator|.
name|Create
argument_list|(
literal|"test"
argument_list|,
literal|"1"
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|1
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|snapshot
operator|=
name|translog
operator|.
name|snapshot
argument_list|()
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|snapshot
argument_list|,
name|TranslogSizeMatcher
operator|.
name|translogSize
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|snapshot
operator|.
name|estimatedTotalOperations
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|snapshot
operator|.
name|close
argument_list|()
expr_stmt|;
name|snapshot
operator|=
name|translog
operator|.
name|snapshot
argument_list|()
expr_stmt|;
name|Translog
operator|.
name|Create
name|create
init|=
operator|(
name|Translog
operator|.
name|Create
operator|)
name|snapshot
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|create
operator|!=
literal|null
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|create
operator|.
name|source
argument_list|()
operator|.
name|toBytes
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|1
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|snapshot
operator|.
name|close
argument_list|()
expr_stmt|;
name|Translog
operator|.
name|Snapshot
name|snapshot1
init|=
name|translog
operator|.
name|snapshot
argument_list|()
decl_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|snapshot1
argument_list|,
name|TranslogSizeMatcher
operator|.
name|translogSize
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|snapshot1
operator|.
name|estimatedTotalOperations
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// seek to the end of the translog snapshot
while|while
condition|(
name|snapshot1
operator|.
name|next
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// spin
block|}
name|translog
operator|.
name|add
argument_list|(
operator|new
name|Translog
operator|.
name|Index
argument_list|(
literal|"test"
argument_list|,
literal|"2"
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|2
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|snapshot
operator|=
name|translog
operator|.
name|snapshot
argument_list|(
name|snapshot1
argument_list|)
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|snapshot
argument_list|,
name|TranslogSizeMatcher
operator|.
name|translogSize
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|snapshot
operator|.
name|estimatedTotalOperations
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|snapshot
operator|.
name|close
argument_list|()
expr_stmt|;
name|snapshot
operator|=
name|translog
operator|.
name|snapshot
argument_list|(
name|snapshot1
argument_list|)
expr_stmt|;
name|Translog
operator|.
name|Index
name|index
init|=
operator|(
name|Translog
operator|.
name|Index
operator|)
name|snapshot
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|index
operator|!=
literal|null
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|index
operator|.
name|source
argument_list|()
operator|.
name|toBytes
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|2
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|snapshot
operator|.
name|next
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|snapshot
operator|.
name|estimatedTotalOperations
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|snapshot
operator|.
name|close
argument_list|()
expr_stmt|;
name|snapshot1
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSnapshotWithNewTranslog
specifier|public
name|void
name|testSnapshotWithNewTranslog
parameter_list|()
block|{
name|Translog
operator|.
name|Snapshot
name|snapshot
init|=
name|translog
operator|.
name|snapshot
argument_list|()
decl_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|snapshot
argument_list|,
name|TranslogSizeMatcher
operator|.
name|translogSize
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|snapshot
operator|.
name|close
argument_list|()
expr_stmt|;
name|translog
operator|.
name|add
argument_list|(
operator|new
name|Translog
operator|.
name|Create
argument_list|(
literal|"test"
argument_list|,
literal|"1"
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|1
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|Translog
operator|.
name|Snapshot
name|actualSnapshot
init|=
name|translog
operator|.
name|snapshot
argument_list|()
decl_stmt|;
name|translog
operator|.
name|add
argument_list|(
operator|new
name|Translog
operator|.
name|Index
argument_list|(
literal|"test"
argument_list|,
literal|"2"
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|2
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|translog
operator|.
name|newTranslog
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|translog
operator|.
name|add
argument_list|(
operator|new
name|Translog
operator|.
name|Index
argument_list|(
literal|"test"
argument_list|,
literal|"3"
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|3
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|snapshot
operator|=
name|translog
operator|.
name|snapshot
argument_list|(
name|actualSnapshot
argument_list|)
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|snapshot
argument_list|,
name|TranslogSizeMatcher
operator|.
name|translogSize
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|snapshot
operator|.
name|close
argument_list|()
expr_stmt|;
name|snapshot
operator|=
name|translog
operator|.
name|snapshot
argument_list|(
name|actualSnapshot
argument_list|)
expr_stmt|;
name|Translog
operator|.
name|Index
name|index
init|=
operator|(
name|Translog
operator|.
name|Index
operator|)
name|snapshot
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|index
operator|!=
literal|null
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|index
operator|.
name|source
argument_list|()
operator|.
name|toBytes
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|3
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|snapshot
operator|.
name|next
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|actualSnapshot
operator|.
name|close
argument_list|()
expr_stmt|;
name|snapshot
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSnapshotWithSeekTo
specifier|public
name|void
name|testSnapshotWithSeekTo
parameter_list|()
block|{
name|Translog
operator|.
name|Snapshot
name|snapshot
init|=
name|translog
operator|.
name|snapshot
argument_list|()
decl_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|snapshot
argument_list|,
name|TranslogSizeMatcher
operator|.
name|translogSize
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|snapshot
operator|.
name|close
argument_list|()
expr_stmt|;
name|translog
operator|.
name|add
argument_list|(
operator|new
name|Translog
operator|.
name|Create
argument_list|(
literal|"test"
argument_list|,
literal|"1"
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|1
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|snapshot
operator|=
name|translog
operator|.
name|snapshot
argument_list|()
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|snapshot
argument_list|,
name|TranslogSizeMatcher
operator|.
name|translogSize
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// seek to the end of the translog snapshot
while|while
condition|(
name|snapshot
operator|.
name|next
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// spin
block|}
name|long
name|lastPosition
init|=
name|snapshot
operator|.
name|position
argument_list|()
decl_stmt|;
name|snapshot
operator|.
name|close
argument_list|()
expr_stmt|;
name|translog
operator|.
name|add
argument_list|(
operator|new
name|Translog
operator|.
name|Create
argument_list|(
literal|"test"
argument_list|,
literal|"2"
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|1
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|snapshot
operator|=
name|translog
operator|.
name|snapshot
argument_list|()
expr_stmt|;
name|snapshot
operator|.
name|seekTo
argument_list|(
name|lastPosition
argument_list|)
expr_stmt|;
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|snapshot
argument_list|,
name|TranslogSizeMatcher
operator|.
name|translogSize
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|snapshot
operator|.
name|close
argument_list|()
expr_stmt|;
name|snapshot
operator|=
name|translog
operator|.
name|snapshot
argument_list|()
expr_stmt|;
name|snapshot
operator|.
name|seekTo
argument_list|(
name|lastPosition
argument_list|)
expr_stmt|;
name|Translog
operator|.
name|Create
name|create
init|=
operator|(
name|Translog
operator|.
name|Create
operator|)
name|snapshot
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|create
operator|!=
literal|null
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|create
operator|.
name|id
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|snapshot
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|class|LocationOperation
specifier|static
class|class
name|LocationOperation
block|{
DECL|field|operation
specifier|final
name|Translog
operator|.
name|Operation
name|operation
decl_stmt|;
DECL|field|location
specifier|final
name|Translog
operator|.
name|Location
name|location
decl_stmt|;
DECL|method|LocationOperation
specifier|public
name|LocationOperation
parameter_list|(
name|Translog
operator|.
name|Operation
name|operation
parameter_list|,
name|Translog
operator|.
name|Location
name|location
parameter_list|)
block|{
name|this
operator|.
name|operation
operator|=
name|operation
expr_stmt|;
name|this
operator|.
name|location
operator|=
name|location
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testConcurrentWritesWithVaryingSize
specifier|public
name|void
name|testConcurrentWritesWithVaryingSize
parameter_list|()
throws|throws
name|Throwable
block|{
specifier|final
name|int
name|opsPerThread
init|=
name|randomIntBetween
argument_list|(
literal|10
argument_list|,
literal|200
argument_list|)
decl_stmt|;
name|int
name|threadCount
init|=
literal|2
operator|+
name|randomInt
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"testing with [{}] threads, each doing [{}] ops"
argument_list|,
name|threadCount
argument_list|,
name|opsPerThread
argument_list|)
expr_stmt|;
specifier|final
name|BlockingQueue
argument_list|<
name|LocationOperation
argument_list|>
name|writtenOperations
init|=
operator|new
name|ArrayBlockingQueue
argument_list|<>
argument_list|(
name|threadCount
operator|*
name|opsPerThread
argument_list|)
decl_stmt|;
name|Thread
index|[]
name|threads
init|=
operator|new
name|Thread
index|[
name|threadCount
index|]
decl_stmt|;
specifier|final
name|Throwable
index|[]
name|threadExceptions
init|=
operator|new
name|Throwable
index|[
name|threadCount
index|]
decl_stmt|;
specifier|final
name|CountDownLatch
name|downLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|threadCount
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|threadId
init|=
name|i
decl_stmt|;
name|threads
index|[
name|i
index|]
operator|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|downLatch
operator|.
name|await
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|opCount
init|=
literal|0
init|;
name|opCount
operator|<
name|opsPerThread
condition|;
name|opCount
operator|++
control|)
block|{
name|Translog
operator|.
name|Operation
name|op
decl_stmt|;
switch|switch
condition|(
name|randomFrom
argument_list|(
name|Translog
operator|.
name|Operation
operator|.
name|Type
operator|.
name|values
argument_list|()
argument_list|)
condition|)
block|{
case|case
name|CREATE
case|:
name|op
operator|=
operator|new
name|Translog
operator|.
name|Create
argument_list|(
literal|"test"
argument_list|,
name|threadId
operator|+
literal|"_"
operator|+
name|opCount
argument_list|,
name|randomUnicodeOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|20
operator|*
literal|1024
argument_list|)
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|SAVE
case|:
name|op
operator|=
operator|new
name|Translog
operator|.
name|Index
argument_list|(
literal|"test"
argument_list|,
name|threadId
operator|+
literal|"_"
operator|+
name|opCount
argument_list|,
name|randomUnicodeOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|20
operator|*
literal|1024
argument_list|)
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|DELETE
case|:
name|op
operator|=
operator|new
name|Translog
operator|.
name|Delete
argument_list|(
operator|new
name|Term
argument_list|(
literal|"_uid"
argument_list|,
name|threadId
operator|+
literal|"_"
operator|+
name|opCount
argument_list|)
argument_list|,
literal|1
operator|+
name|randomInt
argument_list|(
literal|100000
argument_list|)
argument_list|,
name|randomFrom
argument_list|(
name|VersionType
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|DELETE_BY_QUERY
case|:
name|op
operator|=
operator|new
name|Translog
operator|.
name|DeleteByQuery
argument_list|(
operator|new
name|BytesArray
argument_list|(
name|randomRealisticUnicodeOfLengthBetween
argument_list|(
literal|10
argument_list|,
literal|400
argument_list|)
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|String
index|[]
block|{
name|randomRealisticUnicodeOfLengthBetween
argument_list|(
literal|10
argument_list|,
literal|400
argument_list|)
block|}
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|ElasticsearchException
argument_list|(
literal|"not supported op type"
argument_list|)
throw|;
block|}
name|Translog
operator|.
name|Location
name|loc
init|=
name|translog
operator|.
name|add
argument_list|(
name|op
argument_list|)
decl_stmt|;
name|writtenOperations
operator|.
name|add
argument_list|(
operator|new
name|LocationOperation
argument_list|(
name|op
argument_list|,
name|loc
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|threadExceptions
index|[
name|threadId
index|]
operator|=
name|t
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|threads
index|[
name|i
index|]
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|threads
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
name|downLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|threadCount
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|threadExceptions
index|[
name|i
index|]
operator|!=
literal|null
condition|)
block|{
throw|throw
name|threadExceptions
index|[
name|i
index|]
throw|;
block|}
name|threads
index|[
name|i
index|]
operator|.
name|join
argument_list|(
literal|60
operator|*
literal|1000
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|LocationOperation
name|locationOperation
range|:
name|writtenOperations
control|)
block|{
name|byte
index|[]
name|data
init|=
name|translog
operator|.
name|read
argument_list|(
name|locationOperation
operator|.
name|location
argument_list|)
decl_stmt|;
name|StreamInput
name|streamInput
init|=
operator|new
name|BytesStreamInput
argument_list|(
name|data
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|streamInput
operator|.
name|readInt
argument_list|()
expr_stmt|;
comment|// size
name|Translog
operator|.
name|Operation
name|op
init|=
name|TranslogStreams
operator|.
name|readTranslogOperation
argument_list|(
name|streamInput
argument_list|)
decl_stmt|;
name|Translog
operator|.
name|Operation
name|expectedOp
init|=
name|locationOperation
operator|.
name|operation
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedOp
operator|.
name|opType
argument_list|()
argument_list|,
name|op
operator|.
name|opType
argument_list|()
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|op
operator|.
name|opType
argument_list|()
condition|)
block|{
case|case
name|SAVE
case|:
name|Translog
operator|.
name|Index
name|indexOp
init|=
operator|(
name|Translog
operator|.
name|Index
operator|)
name|op
decl_stmt|;
name|Translog
operator|.
name|Index
name|expIndexOp
init|=
operator|(
name|Translog
operator|.
name|Index
operator|)
name|expectedOp
decl_stmt|;
name|assertEquals
argument_list|(
name|expIndexOp
operator|.
name|id
argument_list|()
argument_list|,
name|indexOp
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expIndexOp
operator|.
name|routing
argument_list|()
argument_list|,
name|indexOp
operator|.
name|routing
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expIndexOp
operator|.
name|type
argument_list|()
argument_list|,
name|indexOp
operator|.
name|type
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expIndexOp
operator|.
name|source
argument_list|()
argument_list|,
name|indexOp
operator|.
name|source
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expIndexOp
operator|.
name|version
argument_list|()
argument_list|,
name|indexOp
operator|.
name|version
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expIndexOp
operator|.
name|versionType
argument_list|()
argument_list|,
name|indexOp
operator|.
name|versionType
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|CREATE
case|:
name|Translog
operator|.
name|Create
name|createOp
init|=
operator|(
name|Translog
operator|.
name|Create
operator|)
name|op
decl_stmt|;
name|Translog
operator|.
name|Create
name|expCreateOp
init|=
operator|(
name|Translog
operator|.
name|Create
operator|)
name|expectedOp
decl_stmt|;
name|assertEquals
argument_list|(
name|expCreateOp
operator|.
name|id
argument_list|()
argument_list|,
name|createOp
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expCreateOp
operator|.
name|routing
argument_list|()
argument_list|,
name|createOp
operator|.
name|routing
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expCreateOp
operator|.
name|type
argument_list|()
argument_list|,
name|createOp
operator|.
name|type
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expCreateOp
operator|.
name|source
argument_list|()
argument_list|,
name|createOp
operator|.
name|source
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expCreateOp
operator|.
name|version
argument_list|()
argument_list|,
name|createOp
operator|.
name|version
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expCreateOp
operator|.
name|versionType
argument_list|()
argument_list|,
name|createOp
operator|.
name|versionType
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|DELETE
case|:
name|Translog
operator|.
name|Delete
name|delOp
init|=
operator|(
name|Translog
operator|.
name|Delete
operator|)
name|op
decl_stmt|;
name|Translog
operator|.
name|Delete
name|expDelOp
init|=
operator|(
name|Translog
operator|.
name|Delete
operator|)
name|expectedOp
decl_stmt|;
name|assertEquals
argument_list|(
name|expDelOp
operator|.
name|uid
argument_list|()
argument_list|,
name|delOp
operator|.
name|uid
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expDelOp
operator|.
name|version
argument_list|()
argument_list|,
name|delOp
operator|.
name|version
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expDelOp
operator|.
name|versionType
argument_list|()
argument_list|,
name|delOp
operator|.
name|versionType
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|DELETE_BY_QUERY
case|:
name|Translog
operator|.
name|DeleteByQuery
name|delQueryOp
init|=
operator|(
name|Translog
operator|.
name|DeleteByQuery
operator|)
name|op
decl_stmt|;
name|Translog
operator|.
name|DeleteByQuery
name|expDelQueryOp
init|=
operator|(
name|Translog
operator|.
name|DeleteByQuery
operator|)
name|expectedOp
decl_stmt|;
name|assertThat
argument_list|(
name|expDelQueryOp
operator|.
name|source
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|delQueryOp
operator|.
name|source
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|expDelQueryOp
operator|.
name|filteringAliases
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|delQueryOp
operator|.
name|filteringAliases
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|expDelQueryOp
operator|.
name|types
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|delQueryOp
operator|.
name|types
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|ElasticsearchException
argument_list|(
literal|"unsupported opType"
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Test
annotation|@
name|LuceneTestCase
operator|.
name|AwaitsFix
argument_list|(
name|bugUrl
operator|=
literal|"corrupting size can cause OOME"
argument_list|)
DECL|method|testTranslogChecksums
specifier|public
name|void
name|testTranslogChecksums
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Translog
operator|.
name|Location
argument_list|>
name|locations
init|=
name|newArrayList
argument_list|()
decl_stmt|;
name|int
name|translogOperations
init|=
name|randomIntBetween
argument_list|(
literal|10
argument_list|,
literal|100
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|op
init|=
literal|0
init|;
name|op
operator|<
name|translogOperations
condition|;
name|op
operator|++
control|)
block|{
name|String
name|ascii
init|=
name|randomAsciiOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|50
argument_list|)
decl_stmt|;
name|locations
operator|.
name|add
argument_list|(
name|translog
operator|.
name|add
argument_list|(
operator|new
name|Translog
operator|.
name|Create
argument_list|(
literal|"test"
argument_list|,
literal|""
operator|+
name|op
argument_list|,
name|ascii
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|translog
operator|.
name|sync
argument_list|()
expr_stmt|;
name|corruptTranslogs
argument_list|(
name|translogFileDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|AtomicInteger
name|corruptionsCaught
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|Translog
operator|.
name|Location
name|location
range|:
name|locations
control|)
block|{
try|try
block|{
name|TranslogStreams
operator|.
name|readSource
argument_list|(
name|translog
operator|.
name|read
argument_list|(
name|location
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TranslogCorruptedException
name|e
parameter_list|)
block|{
name|corruptionsCaught
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
block|}
name|assertThat
argument_list|(
literal|"at least one corruption was caused and caught"
argument_list|,
name|corruptionsCaught
operator|.
name|get
argument_list|()
argument_list|,
name|greaterThanOrEqualTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Randomly overwrite some bytes in the translog files      */
DECL|method|corruptTranslogs
specifier|private
name|void
name|corruptTranslogs
parameter_list|(
name|String
name|directory
parameter_list|)
throws|throws
name|Exception
block|{
name|File
index|[]
name|files
init|=
operator|new
name|File
argument_list|(
name|directory
argument_list|)
operator|.
name|listFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|files
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|File
name|file
range|:
name|files
control|)
block|{
if|if
condition|(
name|file
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"translog-"
argument_list|)
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"--> corrupting {}..."
argument_list|,
name|file
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|RandomAccessFile
name|f
init|=
operator|new
name|RandomAccessFile
argument_list|(
name|file
argument_list|,
literal|"rw"
argument_list|)
decl_stmt|;
name|int
name|corruptions
init|=
name|scaledRandomIntBetween
argument_list|(
literal|10
argument_list|,
literal|50
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|corruptions
condition|;
name|i
operator|++
control|)
block|{
name|f
operator|.
name|seek
argument_list|(
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
operator|(
name|int
operator|)
name|f
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|f
operator|.
name|write
argument_list|(
name|randomByte
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|f
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|newUid
specifier|private
name|Term
name|newUid
parameter_list|(
name|String
name|id
parameter_list|)
block|{
return|return
operator|new
name|Term
argument_list|(
literal|"_uid"
argument_list|,
name|id
argument_list|)
return|;
block|}
block|}
end_class

end_unit

