begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.translog
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|translog
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|Description
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|TypeSafeMatcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|TranslogSizeMatcher
specifier|public
class|class
name|TranslogSizeMatcher
extends|extends
name|TypeSafeMatcher
argument_list|<
name|Translog
operator|.
name|Snapshot
argument_list|>
block|{
DECL|field|size
specifier|private
specifier|final
name|int
name|size
decl_stmt|;
DECL|method|TranslogSizeMatcher
specifier|public
name|TranslogSizeMatcher
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|this
operator|.
name|size
operator|=
name|size
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|matchesSafely
specifier|public
name|boolean
name|matchesSafely
parameter_list|(
name|Translog
operator|.
name|Snapshot
name|snapshot
parameter_list|)
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
name|long
name|startingPosition
init|=
name|snapshot
operator|.
name|position
argument_list|()
decl_stmt|;
try|try
block|{
while|while
condition|(
name|snapshot
operator|.
name|next
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|count
operator|++
expr_stmt|;
block|}
return|return
name|size
operator|==
name|count
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|ElasticsearchException
argument_list|(
literal|"failed to advance iterator"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
finally|finally
block|{
comment|// Since counting the translog size consumes the stream, reset it
comment|// back to the origin position after reading
name|snapshot
operator|.
name|seekTo
argument_list|(
name|startingPosition
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|describeTo
specifier|public
name|void
name|describeTo
parameter_list|(
name|Description
name|description
parameter_list|)
block|{
name|description
operator|.
name|appendText
argument_list|(
literal|"a translog with size "
argument_list|)
operator|.
name|appendValue
argument_list|(
name|size
argument_list|)
expr_stmt|;
block|}
DECL|method|translogSize
specifier|public
specifier|static
name|Matcher
argument_list|<
name|Translog
operator|.
name|Snapshot
argument_list|>
name|translogSize
parameter_list|(
name|int
name|size
parameter_list|)
block|{
return|return
operator|new
name|TranslogSizeMatcher
argument_list|(
name|size
argument_list|)
return|;
block|}
block|}
end_class

end_unit

