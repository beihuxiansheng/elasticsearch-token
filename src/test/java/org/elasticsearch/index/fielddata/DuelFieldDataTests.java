begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.fielddata
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|AtomicReaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|CompositeReaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DirectoryReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|English
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|NumericUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|geo
operator|.
name|GeoDistance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|geo
operator|.
name|GeoPoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|DistanceUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|DistanceUnit
operator|.
name|Distance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|*
import|;
end_import

begin_class
DECL|class|DuelFieldDataTests
specifier|public
class|class
name|DuelFieldDataTests
extends|extends
name|AbstractFieldDataTests
block|{
annotation|@
name|Override
DECL|method|getFieldDataType
specifier|protected
name|FieldDataType
name|getFieldDataType
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
DECL|method|atLeast
specifier|public
specifier|static
name|int
name|atLeast
parameter_list|(
name|Random
name|random
parameter_list|,
name|int
name|i
parameter_list|)
block|{
name|int
name|min
init|=
name|i
decl_stmt|;
name|int
name|max
init|=
name|min
operator|+
operator|(
name|min
operator|/
literal|2
operator|)
decl_stmt|;
return|return
name|min
operator|+
name|random
operator|.
name|nextInt
argument_list|(
name|max
operator|-
name|min
argument_list|)
return|;
block|}
DECL|method|longDV
specifier|private
specifier|static
name|SortedSetDocValuesField
name|longDV
parameter_list|(
name|String
name|name
parameter_list|,
name|long
name|l
parameter_list|)
block|{
specifier|final
name|BytesRef
name|bytes
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
name|NumericUtils
operator|.
name|longToPrefixCodedBytes
argument_list|(
name|l
argument_list|,
literal|0
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
return|return
operator|new
name|SortedSetDocValuesField
argument_list|(
name|name
argument_list|,
name|bytes
argument_list|)
return|;
block|}
DECL|method|intDV
specifier|private
specifier|static
name|SortedSetDocValuesField
name|intDV
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|i
parameter_list|)
block|{
specifier|final
name|BytesRef
name|bytes
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
name|NumericUtils
operator|.
name|intToPrefixCodedBytes
argument_list|(
name|i
argument_list|,
literal|0
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
return|return
operator|new
name|SortedSetDocValuesField
argument_list|(
name|name
argument_list|,
name|bytes
argument_list|)
return|;
block|}
DECL|method|floatDV
specifier|private
specifier|static
name|SortedSetDocValuesField
name|floatDV
parameter_list|(
name|String
name|name
parameter_list|,
name|float
name|f
parameter_list|)
block|{
return|return
name|intDV
argument_list|(
name|name
argument_list|,
name|NumericUtils
operator|.
name|floatToSortableInt
argument_list|(
name|f
argument_list|)
argument_list|)
return|;
block|}
DECL|method|doubleDV
specifier|private
specifier|static
name|SortedSetDocValuesField
name|doubleDV
parameter_list|(
name|String
name|name
parameter_list|,
name|double
name|f
parameter_list|)
block|{
return|return
name|longDV
argument_list|(
name|name
argument_list|,
name|NumericUtils
operator|.
name|doubleToSortableLong
argument_list|(
name|f
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Test
DECL|method|testDuelAllTypesSingleValue
specifier|public
name|void
name|testDuelAllTypesSingleValue
parameter_list|()
throws|throws
name|Exception
block|{
name|Random
name|random
init|=
name|getRandom
argument_list|()
decl_stmt|;
name|int
name|atLeast
init|=
name|atLeast
argument_list|(
name|random
argument_list|,
literal|1000
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|atLeast
condition|;
name|i
operator|++
control|)
block|{
name|int
name|v
init|=
operator|(
name|random
operator|.
name|nextBoolean
argument_list|()
condition|?
operator|-
literal|1
operator|*
name|random
operator|.
name|nextInt
argument_list|(
name|Byte
operator|.
name|MAX_VALUE
argument_list|)
else|:
name|random
operator|.
name|nextInt
argument_list|(
name|Byte
operator|.
name|MAX_VALUE
argument_list|)
operator|)
decl_stmt|;
name|Document
name|d
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|d
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
literal|"_id"
argument_list|,
literal|""
operator|+
name|i
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|random
operator|.
name|nextInt
argument_list|(
literal|15
argument_list|)
operator|!=
literal|0
condition|)
block|{
name|d
operator|.
name|add
argument_list|(
operator|new
name|LongField
argument_list|(
literal|"long"
argument_list|,
name|v
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|.
name|add
argument_list|(
operator|new
name|IntField
argument_list|(
literal|"integer"
argument_list|,
name|v
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|.
name|add
argument_list|(
operator|new
name|DoubleField
argument_list|(
literal|"double"
argument_list|,
name|v
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|.
name|add
argument_list|(
operator|new
name|FloatField
argument_list|(
literal|"float"
argument_list|,
name|v
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
literal|"bytes"
argument_list|,
literal|""
operator|+
name|v
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|LuceneTestCase
operator|.
name|defaultCodecSupportsSortedSet
argument_list|()
condition|)
block|{
name|d
operator|.
name|add
argument_list|(
name|longDV
argument_list|(
literal|"long"
argument_list|,
name|v
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|.
name|add
argument_list|(
name|intDV
argument_list|(
literal|"integer"
argument_list|,
name|v
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|.
name|add
argument_list|(
name|doubleDV
argument_list|(
literal|"double"
argument_list|,
name|v
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|.
name|add
argument_list|(
name|floatDV
argument_list|(
literal|"float"
argument_list|,
name|v
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|.
name|add
argument_list|(
operator|new
name|SortedSetDocValuesField
argument_list|(
literal|"bytes"
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|""
operator|+
name|v
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|writer
operator|.
name|addDocument
argument_list|(
name|d
argument_list|)
expr_stmt|;
if|if
condition|(
name|random
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
operator|==
literal|0
condition|)
block|{
name|refreshReader
argument_list|()
expr_stmt|;
block|}
block|}
name|AtomicReaderContext
name|context
init|=
name|refreshReader
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|FieldDataType
argument_list|,
name|Type
argument_list|>
name|typeMap
init|=
operator|new
name|HashMap
argument_list|<
name|FieldDataType
argument_list|,
name|DuelFieldDataTests
operator|.
name|Type
argument_list|>
argument_list|()
decl_stmt|;
name|typeMap
operator|.
name|put
argument_list|(
operator|new
name|FieldDataType
argument_list|(
literal|"string"
argument_list|,
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"format"
argument_list|,
literal|"fst"
argument_list|)
argument_list|)
argument_list|,
name|Type
operator|.
name|Bytes
argument_list|)
expr_stmt|;
name|typeMap
operator|.
name|put
argument_list|(
operator|new
name|FieldDataType
argument_list|(
literal|"string"
argument_list|,
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"format"
argument_list|,
literal|"paged_bytes"
argument_list|)
argument_list|)
argument_list|,
name|Type
operator|.
name|Bytes
argument_list|)
expr_stmt|;
name|typeMap
operator|.
name|put
argument_list|(
operator|new
name|FieldDataType
argument_list|(
literal|"byte"
argument_list|,
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"format"
argument_list|,
literal|"array"
argument_list|)
argument_list|)
argument_list|,
name|Type
operator|.
name|Integer
argument_list|)
expr_stmt|;
name|typeMap
operator|.
name|put
argument_list|(
operator|new
name|FieldDataType
argument_list|(
literal|"short"
argument_list|,
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"format"
argument_list|,
literal|"array"
argument_list|)
argument_list|)
argument_list|,
name|Type
operator|.
name|Integer
argument_list|)
expr_stmt|;
name|typeMap
operator|.
name|put
argument_list|(
operator|new
name|FieldDataType
argument_list|(
literal|"int"
argument_list|,
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"format"
argument_list|,
literal|"array"
argument_list|)
argument_list|)
argument_list|,
name|Type
operator|.
name|Integer
argument_list|)
expr_stmt|;
name|typeMap
operator|.
name|put
argument_list|(
operator|new
name|FieldDataType
argument_list|(
literal|"long"
argument_list|,
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"format"
argument_list|,
literal|"array"
argument_list|)
argument_list|)
argument_list|,
name|Type
operator|.
name|Long
argument_list|)
expr_stmt|;
name|typeMap
operator|.
name|put
argument_list|(
operator|new
name|FieldDataType
argument_list|(
literal|"double"
argument_list|,
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"format"
argument_list|,
literal|"array"
argument_list|)
argument_list|)
argument_list|,
name|Type
operator|.
name|Double
argument_list|)
expr_stmt|;
name|typeMap
operator|.
name|put
argument_list|(
operator|new
name|FieldDataType
argument_list|(
literal|"float"
argument_list|,
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"format"
argument_list|,
literal|"array"
argument_list|)
argument_list|)
argument_list|,
name|Type
operator|.
name|Float
argument_list|)
expr_stmt|;
if|if
condition|(
name|LuceneTestCase
operator|.
name|defaultCodecSupportsSortedSet
argument_list|()
condition|)
block|{
name|typeMap
operator|.
name|put
argument_list|(
operator|new
name|FieldDataType
argument_list|(
literal|"string"
argument_list|,
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"format"
argument_list|,
literal|"doc_values"
argument_list|)
argument_list|)
argument_list|,
name|Type
operator|.
name|Bytes
argument_list|)
expr_stmt|;
name|typeMap
operator|.
name|put
argument_list|(
operator|new
name|FieldDataType
argument_list|(
literal|"byte"
argument_list|,
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"format"
argument_list|,
literal|"doc_values"
argument_list|)
argument_list|)
argument_list|,
name|Type
operator|.
name|Integer
argument_list|)
expr_stmt|;
name|typeMap
operator|.
name|put
argument_list|(
operator|new
name|FieldDataType
argument_list|(
literal|"short"
argument_list|,
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"format"
argument_list|,
literal|"doc_values"
argument_list|)
argument_list|)
argument_list|,
name|Type
operator|.
name|Integer
argument_list|)
expr_stmt|;
name|typeMap
operator|.
name|put
argument_list|(
operator|new
name|FieldDataType
argument_list|(
literal|"int"
argument_list|,
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"format"
argument_list|,
literal|"doc_values"
argument_list|)
argument_list|)
argument_list|,
name|Type
operator|.
name|Integer
argument_list|)
expr_stmt|;
name|typeMap
operator|.
name|put
argument_list|(
operator|new
name|FieldDataType
argument_list|(
literal|"long"
argument_list|,
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"format"
argument_list|,
literal|"doc_values"
argument_list|)
argument_list|)
argument_list|,
name|Type
operator|.
name|Long
argument_list|)
expr_stmt|;
name|typeMap
operator|.
name|put
argument_list|(
operator|new
name|FieldDataType
argument_list|(
literal|"double"
argument_list|,
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"format"
argument_list|,
literal|"doc_values"
argument_list|)
argument_list|)
argument_list|,
name|Type
operator|.
name|Double
argument_list|)
expr_stmt|;
name|typeMap
operator|.
name|put
argument_list|(
operator|new
name|FieldDataType
argument_list|(
literal|"float"
argument_list|,
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"format"
argument_list|,
literal|"doc_values"
argument_list|)
argument_list|)
argument_list|,
name|Type
operator|.
name|Float
argument_list|)
expr_stmt|;
block|}
name|ArrayList
argument_list|<
name|Entry
argument_list|<
name|FieldDataType
argument_list|,
name|Type
argument_list|>
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|Entry
argument_list|<
name|FieldDataType
argument_list|,
name|Type
argument_list|>
argument_list|>
argument_list|(
name|typeMap
operator|.
name|entrySet
argument_list|()
argument_list|)
decl_stmt|;
name|Preprocessor
name|pre
init|=
operator|new
name|ToDoublePreprocessor
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|list
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|FieldDataType
argument_list|,
name|Type
argument_list|>
name|left
decl_stmt|;
name|Entry
argument_list|<
name|FieldDataType
argument_list|,
name|Type
argument_list|>
name|right
decl_stmt|;
if|if
condition|(
name|list
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|left
operator|=
name|list
operator|.
name|remove
argument_list|(
name|random
operator|.
name|nextInt
argument_list|(
name|list
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|right
operator|=
name|list
operator|.
name|remove
argument_list|(
name|random
operator|.
name|nextInt
argument_list|(
name|list
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|right
operator|=
name|left
operator|=
name|list
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|ifdService
operator|.
name|clear
argument_list|()
expr_stmt|;
name|IndexFieldData
argument_list|<
name|?
argument_list|>
name|leftFieldData
init|=
name|getForField
argument_list|(
name|left
operator|.
name|getKey
argument_list|()
argument_list|,
name|left
operator|.
name|getValue
argument_list|()
operator|.
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|)
decl_stmt|;
name|ifdService
operator|.
name|clear
argument_list|()
expr_stmt|;
name|IndexFieldData
argument_list|<
name|?
argument_list|>
name|rightFieldData
init|=
name|getForField
argument_list|(
name|right
operator|.
name|getKey
argument_list|()
argument_list|,
name|right
operator|.
name|getValue
argument_list|()
operator|.
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|)
decl_stmt|;
name|duelFieldDataBytes
argument_list|(
name|random
argument_list|,
name|context
argument_list|,
name|leftFieldData
argument_list|,
name|rightFieldData
argument_list|,
name|pre
argument_list|)
expr_stmt|;
name|duelFieldDataBytes
argument_list|(
name|random
argument_list|,
name|context
argument_list|,
name|rightFieldData
argument_list|,
name|leftFieldData
argument_list|,
name|pre
argument_list|)
expr_stmt|;
name|DirectoryReader
name|perSegment
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|writer
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|CompositeReaderContext
name|composite
init|=
name|perSegment
operator|.
name|getContext
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|AtomicReaderContext
argument_list|>
name|leaves
init|=
name|composite
operator|.
name|leaves
argument_list|()
decl_stmt|;
for|for
control|(
name|AtomicReaderContext
name|atomicReaderContext
range|:
name|leaves
control|)
block|{
name|duelFieldDataBytes
argument_list|(
name|random
argument_list|,
name|atomicReaderContext
argument_list|,
name|leftFieldData
argument_list|,
name|rightFieldData
argument_list|,
name|pre
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testDuelIntegers
specifier|public
name|void
name|testDuelIntegers
parameter_list|()
throws|throws
name|Exception
block|{
name|Random
name|random
init|=
name|getRandom
argument_list|()
decl_stmt|;
name|int
name|atLeast
init|=
name|atLeast
argument_list|(
name|random
argument_list|,
literal|1000
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|atLeast
condition|;
name|i
operator|++
control|)
block|{
name|Document
name|d
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|d
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
literal|"_id"
argument_list|,
literal|""
operator|+
name|i
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|random
operator|.
name|nextInt
argument_list|(
literal|15
argument_list|)
operator|!=
literal|0
condition|)
block|{
name|int
index|[]
name|numbers
init|=
name|getNumbers
argument_list|(
name|random
argument_list|,
name|Byte
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
range|:
name|numbers
control|)
block|{
name|d
operator|.
name|add
argument_list|(
operator|new
name|LongField
argument_list|(
literal|"long"
argument_list|,
name|j
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|.
name|add
argument_list|(
operator|new
name|IntField
argument_list|(
literal|"integer"
argument_list|,
name|j
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|LuceneTestCase
operator|.
name|defaultCodecSupportsSortedSet
argument_list|()
condition|)
block|{
name|d
operator|.
name|add
argument_list|(
name|longDV
argument_list|(
literal|"long"
argument_list|,
name|j
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|.
name|add
argument_list|(
name|intDV
argument_list|(
literal|"integer"
argument_list|,
name|j
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|writer
operator|.
name|addDocument
argument_list|(
name|d
argument_list|)
expr_stmt|;
if|if
condition|(
name|random
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
operator|==
literal|0
condition|)
block|{
name|refreshReader
argument_list|()
expr_stmt|;
block|}
block|}
name|AtomicReaderContext
name|context
init|=
name|refreshReader
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|FieldDataType
argument_list|,
name|Type
argument_list|>
name|typeMap
init|=
operator|new
name|HashMap
argument_list|<
name|FieldDataType
argument_list|,
name|Type
argument_list|>
argument_list|()
decl_stmt|;
name|typeMap
operator|.
name|put
argument_list|(
operator|new
name|FieldDataType
argument_list|(
literal|"byte"
argument_list|,
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"format"
argument_list|,
literal|"array"
argument_list|)
argument_list|)
argument_list|,
name|Type
operator|.
name|Integer
argument_list|)
expr_stmt|;
name|typeMap
operator|.
name|put
argument_list|(
operator|new
name|FieldDataType
argument_list|(
literal|"short"
argument_list|,
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"format"
argument_list|,
literal|"array"
argument_list|)
argument_list|)
argument_list|,
name|Type
operator|.
name|Integer
argument_list|)
expr_stmt|;
name|typeMap
operator|.
name|put
argument_list|(
operator|new
name|FieldDataType
argument_list|(
literal|"int"
argument_list|,
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"format"
argument_list|,
literal|"array"
argument_list|)
argument_list|)
argument_list|,
name|Type
operator|.
name|Integer
argument_list|)
expr_stmt|;
name|typeMap
operator|.
name|put
argument_list|(
operator|new
name|FieldDataType
argument_list|(
literal|"long"
argument_list|,
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"format"
argument_list|,
literal|"array"
argument_list|)
argument_list|)
argument_list|,
name|Type
operator|.
name|Long
argument_list|)
expr_stmt|;
if|if
condition|(
name|LuceneTestCase
operator|.
name|defaultCodecSupportsSortedSet
argument_list|()
condition|)
block|{
name|typeMap
operator|.
name|put
argument_list|(
operator|new
name|FieldDataType
argument_list|(
literal|"byte"
argument_list|,
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"format"
argument_list|,
literal|"doc_values"
argument_list|)
argument_list|)
argument_list|,
name|Type
operator|.
name|Integer
argument_list|)
expr_stmt|;
name|typeMap
operator|.
name|put
argument_list|(
operator|new
name|FieldDataType
argument_list|(
literal|"short"
argument_list|,
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"format"
argument_list|,
literal|"doc_values"
argument_list|)
argument_list|)
argument_list|,
name|Type
operator|.
name|Integer
argument_list|)
expr_stmt|;
name|typeMap
operator|.
name|put
argument_list|(
operator|new
name|FieldDataType
argument_list|(
literal|"int"
argument_list|,
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"format"
argument_list|,
literal|"doc_values"
argument_list|)
argument_list|)
argument_list|,
name|Type
operator|.
name|Integer
argument_list|)
expr_stmt|;
name|typeMap
operator|.
name|put
argument_list|(
operator|new
name|FieldDataType
argument_list|(
literal|"long"
argument_list|,
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"format"
argument_list|,
literal|"doc_values"
argument_list|)
argument_list|)
argument_list|,
name|Type
operator|.
name|Long
argument_list|)
expr_stmt|;
block|}
name|ArrayList
argument_list|<
name|Entry
argument_list|<
name|FieldDataType
argument_list|,
name|Type
argument_list|>
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|Entry
argument_list|<
name|FieldDataType
argument_list|,
name|Type
argument_list|>
argument_list|>
argument_list|(
name|typeMap
operator|.
name|entrySet
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
name|list
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|FieldDataType
argument_list|,
name|Type
argument_list|>
name|left
decl_stmt|;
name|Entry
argument_list|<
name|FieldDataType
argument_list|,
name|Type
argument_list|>
name|right
decl_stmt|;
if|if
condition|(
name|list
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|left
operator|=
name|list
operator|.
name|remove
argument_list|(
name|random
operator|.
name|nextInt
argument_list|(
name|list
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|right
operator|=
name|list
operator|.
name|remove
argument_list|(
name|random
operator|.
name|nextInt
argument_list|(
name|list
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|right
operator|=
name|left
operator|=
name|list
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|ifdService
operator|.
name|clear
argument_list|()
expr_stmt|;
name|IndexNumericFieldData
argument_list|<
name|?
argument_list|>
name|leftFieldData
init|=
name|getForField
argument_list|(
name|left
operator|.
name|getKey
argument_list|()
argument_list|,
name|left
operator|.
name|getValue
argument_list|()
operator|.
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|)
decl_stmt|;
name|ifdService
operator|.
name|clear
argument_list|()
expr_stmt|;
name|IndexNumericFieldData
argument_list|<
name|?
argument_list|>
name|rightFieldData
init|=
name|getForField
argument_list|(
name|right
operator|.
name|getKey
argument_list|()
argument_list|,
name|right
operator|.
name|getValue
argument_list|()
operator|.
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|)
decl_stmt|;
name|duelFieldDataLong
argument_list|(
name|random
argument_list|,
name|context
argument_list|,
name|leftFieldData
argument_list|,
name|rightFieldData
argument_list|)
expr_stmt|;
name|duelFieldDataLong
argument_list|(
name|random
argument_list|,
name|context
argument_list|,
name|rightFieldData
argument_list|,
name|leftFieldData
argument_list|)
expr_stmt|;
name|DirectoryReader
name|perSegment
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|writer
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|CompositeReaderContext
name|composite
init|=
name|perSegment
operator|.
name|getContext
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|AtomicReaderContext
argument_list|>
name|leaves
init|=
name|composite
operator|.
name|leaves
argument_list|()
decl_stmt|;
for|for
control|(
name|AtomicReaderContext
name|atomicReaderContext
range|:
name|leaves
control|)
block|{
name|duelFieldDataLong
argument_list|(
name|random
argument_list|,
name|atomicReaderContext
argument_list|,
name|leftFieldData
argument_list|,
name|rightFieldData
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testDuelDoubles
specifier|public
name|void
name|testDuelDoubles
parameter_list|()
throws|throws
name|Exception
block|{
name|Random
name|random
init|=
name|getRandom
argument_list|()
decl_stmt|;
name|int
name|atLeast
init|=
name|atLeast
argument_list|(
name|random
argument_list|,
literal|1000
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|atLeast
condition|;
name|i
operator|++
control|)
block|{
name|Document
name|d
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|d
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
literal|"_id"
argument_list|,
literal|""
operator|+
name|i
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|random
operator|.
name|nextInt
argument_list|(
literal|15
argument_list|)
operator|!=
literal|0
condition|)
block|{
name|int
index|[]
name|numbers
init|=
name|getNumbers
argument_list|(
name|random
argument_list|,
name|Short
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
range|:
name|numbers
control|)
block|{
name|d
operator|.
name|add
argument_list|(
operator|new
name|FloatField
argument_list|(
literal|"float"
argument_list|,
name|j
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|.
name|add
argument_list|(
operator|new
name|DoubleField
argument_list|(
literal|"double"
argument_list|,
name|j
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|LuceneTestCase
operator|.
name|defaultCodecSupportsSortedSet
argument_list|()
condition|)
block|{
name|d
operator|.
name|add
argument_list|(
name|doubleDV
argument_list|(
literal|"double"
argument_list|,
name|j
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|.
name|add
argument_list|(
name|floatDV
argument_list|(
literal|"float"
argument_list|,
name|j
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|writer
operator|.
name|addDocument
argument_list|(
name|d
argument_list|)
expr_stmt|;
if|if
condition|(
name|random
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
operator|==
literal|0
condition|)
block|{
name|refreshReader
argument_list|()
expr_stmt|;
block|}
block|}
name|AtomicReaderContext
name|context
init|=
name|refreshReader
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|FieldDataType
argument_list|,
name|Type
argument_list|>
name|typeMap
init|=
operator|new
name|HashMap
argument_list|<
name|FieldDataType
argument_list|,
name|Type
argument_list|>
argument_list|()
decl_stmt|;
name|typeMap
operator|.
name|put
argument_list|(
operator|new
name|FieldDataType
argument_list|(
literal|"double"
argument_list|,
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"format"
argument_list|,
literal|"array"
argument_list|)
argument_list|)
argument_list|,
name|Type
operator|.
name|Double
argument_list|)
expr_stmt|;
name|typeMap
operator|.
name|put
argument_list|(
operator|new
name|FieldDataType
argument_list|(
literal|"float"
argument_list|,
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"format"
argument_list|,
literal|"array"
argument_list|)
argument_list|)
argument_list|,
name|Type
operator|.
name|Float
argument_list|)
expr_stmt|;
if|if
condition|(
name|LuceneTestCase
operator|.
name|defaultCodecSupportsSortedSet
argument_list|()
condition|)
block|{
name|typeMap
operator|.
name|put
argument_list|(
operator|new
name|FieldDataType
argument_list|(
literal|"double"
argument_list|,
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"format"
argument_list|,
literal|"doc_values"
argument_list|)
argument_list|)
argument_list|,
name|Type
operator|.
name|Double
argument_list|)
expr_stmt|;
name|typeMap
operator|.
name|put
argument_list|(
operator|new
name|FieldDataType
argument_list|(
literal|"float"
argument_list|,
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"format"
argument_list|,
literal|"doc_values"
argument_list|)
argument_list|)
argument_list|,
name|Type
operator|.
name|Float
argument_list|)
expr_stmt|;
block|}
name|ArrayList
argument_list|<
name|Entry
argument_list|<
name|FieldDataType
argument_list|,
name|Type
argument_list|>
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|Entry
argument_list|<
name|FieldDataType
argument_list|,
name|Type
argument_list|>
argument_list|>
argument_list|(
name|typeMap
operator|.
name|entrySet
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
name|list
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|FieldDataType
argument_list|,
name|Type
argument_list|>
name|left
decl_stmt|;
name|Entry
argument_list|<
name|FieldDataType
argument_list|,
name|Type
argument_list|>
name|right
decl_stmt|;
if|if
condition|(
name|list
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|left
operator|=
name|list
operator|.
name|remove
argument_list|(
name|random
operator|.
name|nextInt
argument_list|(
name|list
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|right
operator|=
name|list
operator|.
name|remove
argument_list|(
name|random
operator|.
name|nextInt
argument_list|(
name|list
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|right
operator|=
name|left
operator|=
name|list
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|ifdService
operator|.
name|clear
argument_list|()
expr_stmt|;
name|IndexNumericFieldData
argument_list|<
name|?
argument_list|>
name|leftFieldData
init|=
name|getForField
argument_list|(
name|left
operator|.
name|getKey
argument_list|()
argument_list|,
name|left
operator|.
name|getValue
argument_list|()
operator|.
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|)
decl_stmt|;
name|ifdService
operator|.
name|clear
argument_list|()
expr_stmt|;
name|IndexNumericFieldData
argument_list|<
name|?
argument_list|>
name|rightFieldData
init|=
name|getForField
argument_list|(
name|right
operator|.
name|getKey
argument_list|()
argument_list|,
name|right
operator|.
name|getValue
argument_list|()
operator|.
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|)
decl_stmt|;
name|assertOrder
argument_list|(
name|left
operator|.
name|getValue
argument_list|()
operator|.
name|order
argument_list|()
argument_list|,
name|leftFieldData
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|assertOrder
argument_list|(
name|right
operator|.
name|getValue
argument_list|()
operator|.
name|order
argument_list|()
argument_list|,
name|rightFieldData
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|duelFieldDataDouble
argument_list|(
name|random
argument_list|,
name|context
argument_list|,
name|leftFieldData
argument_list|,
name|rightFieldData
argument_list|)
expr_stmt|;
name|duelFieldDataDouble
argument_list|(
name|random
argument_list|,
name|context
argument_list|,
name|rightFieldData
argument_list|,
name|leftFieldData
argument_list|)
expr_stmt|;
name|DirectoryReader
name|perSegment
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|writer
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|CompositeReaderContext
name|composite
init|=
name|perSegment
operator|.
name|getContext
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|AtomicReaderContext
argument_list|>
name|leaves
init|=
name|composite
operator|.
name|leaves
argument_list|()
decl_stmt|;
for|for
control|(
name|AtomicReaderContext
name|atomicReaderContext
range|:
name|leaves
control|)
block|{
name|duelFieldDataDouble
argument_list|(
name|random
argument_list|,
name|atomicReaderContext
argument_list|,
name|leftFieldData
argument_list|,
name|rightFieldData
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testDuelStrings
specifier|public
name|void
name|testDuelStrings
parameter_list|()
throws|throws
name|Exception
block|{
name|Random
name|random
init|=
name|getRandom
argument_list|()
decl_stmt|;
name|int
name|atLeast
init|=
name|atLeast
argument_list|(
name|random
argument_list|,
literal|1000
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|atLeast
condition|;
name|i
operator|++
control|)
block|{
name|Document
name|d
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|d
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
literal|"_id"
argument_list|,
literal|""
operator|+
name|i
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|random
operator|.
name|nextInt
argument_list|(
literal|15
argument_list|)
operator|!=
literal|0
condition|)
block|{
name|int
index|[]
name|numbers
init|=
name|getNumbers
argument_list|(
name|random
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
range|:
name|numbers
control|)
block|{
specifier|final
name|String
name|s
init|=
name|English
operator|.
name|longToEnglish
argument_list|(
name|j
argument_list|)
decl_stmt|;
name|d
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
literal|"bytes"
argument_list|,
name|s
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|LuceneTestCase
operator|.
name|defaultCodecSupportsSortedSet
argument_list|()
condition|)
block|{
name|d
operator|.
name|add
argument_list|(
operator|new
name|SortedSetDocValuesField
argument_list|(
literal|"bytes"
argument_list|,
operator|new
name|BytesRef
argument_list|(
name|s
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|random
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
operator|==
literal|0
condition|)
block|{
name|d
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
literal|"bytes"
argument_list|,
literal|""
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|LuceneTestCase
operator|.
name|defaultCodecSupportsSortedSet
argument_list|()
condition|)
block|{
name|d
operator|.
name|add
argument_list|(
operator|new
name|SortedSetDocValuesField
argument_list|(
literal|"bytes"
argument_list|,
operator|new
name|BytesRef
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|writer
operator|.
name|addDocument
argument_list|(
name|d
argument_list|)
expr_stmt|;
if|if
condition|(
name|random
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
operator|==
literal|0
condition|)
block|{
name|refreshReader
argument_list|()
expr_stmt|;
block|}
block|}
name|AtomicReaderContext
name|context
init|=
name|refreshReader
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|FieldDataType
argument_list|,
name|Type
argument_list|>
name|typeMap
init|=
operator|new
name|HashMap
argument_list|<
name|FieldDataType
argument_list|,
name|DuelFieldDataTests
operator|.
name|Type
argument_list|>
argument_list|()
decl_stmt|;
name|typeMap
operator|.
name|put
argument_list|(
operator|new
name|FieldDataType
argument_list|(
literal|"string"
argument_list|,
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"format"
argument_list|,
literal|"fst"
argument_list|)
argument_list|)
argument_list|,
name|Type
operator|.
name|Bytes
argument_list|)
expr_stmt|;
name|typeMap
operator|.
name|put
argument_list|(
operator|new
name|FieldDataType
argument_list|(
literal|"string"
argument_list|,
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"format"
argument_list|,
literal|"paged_bytes"
argument_list|)
argument_list|)
argument_list|,
name|Type
operator|.
name|Bytes
argument_list|)
expr_stmt|;
if|if
condition|(
name|LuceneTestCase
operator|.
name|defaultCodecSupportsSortedSet
argument_list|()
condition|)
block|{
name|typeMap
operator|.
name|put
argument_list|(
operator|new
name|FieldDataType
argument_list|(
literal|"string"
argument_list|,
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"format"
argument_list|,
literal|"doc_values"
argument_list|)
argument_list|)
argument_list|,
name|Type
operator|.
name|Bytes
argument_list|)
expr_stmt|;
block|}
comment|// TODO add filters
name|ArrayList
argument_list|<
name|Entry
argument_list|<
name|FieldDataType
argument_list|,
name|Type
argument_list|>
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|Entry
argument_list|<
name|FieldDataType
argument_list|,
name|Type
argument_list|>
argument_list|>
argument_list|(
name|typeMap
operator|.
name|entrySet
argument_list|()
argument_list|)
decl_stmt|;
name|Preprocessor
name|pre
init|=
operator|new
name|Preprocessor
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|list
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|FieldDataType
argument_list|,
name|Type
argument_list|>
name|left
decl_stmt|;
name|Entry
argument_list|<
name|FieldDataType
argument_list|,
name|Type
argument_list|>
name|right
decl_stmt|;
if|if
condition|(
name|list
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|left
operator|=
name|list
operator|.
name|remove
argument_list|(
name|random
operator|.
name|nextInt
argument_list|(
name|list
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|right
operator|=
name|list
operator|.
name|remove
argument_list|(
name|random
operator|.
name|nextInt
argument_list|(
name|list
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|right
operator|=
name|left
operator|=
name|list
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|ifdService
operator|.
name|clear
argument_list|()
expr_stmt|;
name|IndexFieldData
argument_list|<
name|?
argument_list|>
name|leftFieldData
init|=
name|getForField
argument_list|(
name|left
operator|.
name|getKey
argument_list|()
argument_list|,
name|left
operator|.
name|getValue
argument_list|()
operator|.
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|)
decl_stmt|;
name|ifdService
operator|.
name|clear
argument_list|()
expr_stmt|;
name|IndexFieldData
argument_list|<
name|?
argument_list|>
name|rightFieldData
init|=
name|getForField
argument_list|(
name|right
operator|.
name|getKey
argument_list|()
argument_list|,
name|right
operator|.
name|getValue
argument_list|()
operator|.
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|)
decl_stmt|;
name|duelFieldDataBytes
argument_list|(
name|random
argument_list|,
name|context
argument_list|,
name|leftFieldData
argument_list|,
name|rightFieldData
argument_list|,
name|pre
argument_list|)
expr_stmt|;
name|duelFieldDataBytes
argument_list|(
name|random
argument_list|,
name|context
argument_list|,
name|rightFieldData
argument_list|,
name|leftFieldData
argument_list|,
name|pre
argument_list|)
expr_stmt|;
name|DirectoryReader
name|perSegment
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|writer
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|CompositeReaderContext
name|composite
init|=
name|perSegment
operator|.
name|getContext
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|AtomicReaderContext
argument_list|>
name|leaves
init|=
name|composite
operator|.
name|leaves
argument_list|()
decl_stmt|;
for|for
control|(
name|AtomicReaderContext
name|atomicReaderContext
range|:
name|leaves
control|)
block|{
name|assertOrder
argument_list|(
name|AtomicFieldData
operator|.
name|Order
operator|.
name|BYTES
argument_list|,
name|leftFieldData
argument_list|,
name|atomicReaderContext
argument_list|)
expr_stmt|;
name|assertOrder
argument_list|(
name|AtomicFieldData
operator|.
name|Order
operator|.
name|BYTES
argument_list|,
name|rightFieldData
argument_list|,
name|atomicReaderContext
argument_list|)
expr_stmt|;
name|duelFieldDataBytes
argument_list|(
name|random
argument_list|,
name|atomicReaderContext
argument_list|,
name|leftFieldData
argument_list|,
name|rightFieldData
argument_list|,
name|pre
argument_list|)
expr_stmt|;
block|}
name|perSegment
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testDuelGeoPoints
specifier|public
name|void
name|testDuelGeoPoints
parameter_list|()
throws|throws
name|Exception
block|{
name|Random
name|random
init|=
name|getRandom
argument_list|()
decl_stmt|;
name|int
name|atLeast
init|=
name|atLeast
argument_list|(
name|random
argument_list|,
literal|1000
argument_list|)
decl_stmt|;
name|int
name|maxValuesPerDoc
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|atLeast
condition|;
name|i
operator|++
control|)
block|{
name|Document
name|d
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|d
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
literal|"_id"
argument_list|,
literal|""
operator|+
name|i
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|int
name|numValues
init|=
name|randomInt
argument_list|(
name|maxValuesPerDoc
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numValues
condition|;
operator|++
name|j
control|)
block|{
specifier|final
name|double
name|lat
init|=
name|randomDouble
argument_list|()
operator|*
literal|180
operator|-
literal|90
decl_stmt|;
specifier|final
name|double
name|lon
init|=
name|randomDouble
argument_list|()
operator|*
literal|360
operator|-
literal|180
decl_stmt|;
name|d
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
literal|"geopoint"
argument_list|,
name|lat
operator|+
literal|","
operator|+
name|lon
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|addDocument
argument_list|(
name|d
argument_list|)
expr_stmt|;
if|if
condition|(
name|random
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
operator|==
literal|0
condition|)
block|{
name|refreshReader
argument_list|()
expr_stmt|;
block|}
block|}
name|AtomicReaderContext
name|context
init|=
name|refreshReader
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|FieldDataType
argument_list|,
name|Type
argument_list|>
name|typeMap
init|=
operator|new
name|HashMap
argument_list|<
name|FieldDataType
argument_list|,
name|DuelFieldDataTests
operator|.
name|Type
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|Distance
name|precision
init|=
operator|new
name|Distance
argument_list|(
literal|1
argument_list|,
name|randomFrom
argument_list|(
name|DistanceUnit
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|typeMap
operator|.
name|put
argument_list|(
operator|new
name|FieldDataType
argument_list|(
literal|"geo_point"
argument_list|,
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"format"
argument_list|,
literal|"array"
argument_list|)
argument_list|)
argument_list|,
name|Type
operator|.
name|GeoPoint
argument_list|)
expr_stmt|;
name|typeMap
operator|.
name|put
argument_list|(
operator|new
name|FieldDataType
argument_list|(
literal|"geo_point"
argument_list|,
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"format"
argument_list|,
literal|"compressed"
argument_list|)
operator|.
name|put
argument_list|(
literal|"precision"
argument_list|,
name|precision
argument_list|)
argument_list|)
argument_list|,
name|Type
operator|.
name|GeoPoint
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|Entry
argument_list|<
name|FieldDataType
argument_list|,
name|Type
argument_list|>
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|Entry
argument_list|<
name|FieldDataType
argument_list|,
name|Type
argument_list|>
argument_list|>
argument_list|(
name|typeMap
operator|.
name|entrySet
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
name|list
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|FieldDataType
argument_list|,
name|Type
argument_list|>
name|left
decl_stmt|;
name|Entry
argument_list|<
name|FieldDataType
argument_list|,
name|Type
argument_list|>
name|right
decl_stmt|;
if|if
condition|(
name|list
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|left
operator|=
name|list
operator|.
name|remove
argument_list|(
name|random
operator|.
name|nextInt
argument_list|(
name|list
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|right
operator|=
name|list
operator|.
name|remove
argument_list|(
name|random
operator|.
name|nextInt
argument_list|(
name|list
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|right
operator|=
name|left
operator|=
name|list
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|ifdService
operator|.
name|clear
argument_list|()
expr_stmt|;
name|IndexGeoPointFieldData
argument_list|<
name|?
argument_list|>
name|leftFieldData
init|=
name|getForField
argument_list|(
name|left
operator|.
name|getKey
argument_list|()
argument_list|,
name|left
operator|.
name|getValue
argument_list|()
operator|.
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|)
decl_stmt|;
name|ifdService
operator|.
name|clear
argument_list|()
expr_stmt|;
name|IndexGeoPointFieldData
argument_list|<
name|?
argument_list|>
name|rightFieldData
init|=
name|getForField
argument_list|(
name|right
operator|.
name|getKey
argument_list|()
argument_list|,
name|right
operator|.
name|getValue
argument_list|()
operator|.
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|)
decl_stmt|;
name|duelFieldDataGeoPoint
argument_list|(
name|random
argument_list|,
name|context
argument_list|,
name|leftFieldData
argument_list|,
name|rightFieldData
argument_list|,
name|precision
argument_list|)
expr_stmt|;
name|duelFieldDataGeoPoint
argument_list|(
name|random
argument_list|,
name|context
argument_list|,
name|rightFieldData
argument_list|,
name|leftFieldData
argument_list|,
name|precision
argument_list|)
expr_stmt|;
name|DirectoryReader
name|perSegment
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|writer
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|CompositeReaderContext
name|composite
init|=
name|perSegment
operator|.
name|getContext
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|AtomicReaderContext
argument_list|>
name|leaves
init|=
name|composite
operator|.
name|leaves
argument_list|()
decl_stmt|;
for|for
control|(
name|AtomicReaderContext
name|atomicReaderContext
range|:
name|leaves
control|)
block|{
name|duelFieldDataGeoPoint
argument_list|(
name|random
argument_list|,
name|atomicReaderContext
argument_list|,
name|leftFieldData
argument_list|,
name|rightFieldData
argument_list|,
name|precision
argument_list|)
expr_stmt|;
block|}
name|perSegment
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|assertOrder
specifier|private
name|void
name|assertOrder
parameter_list|(
name|AtomicFieldData
operator|.
name|Order
name|order
parameter_list|,
name|IndexFieldData
argument_list|<
name|?
argument_list|>
name|data
parameter_list|,
name|AtomicReaderContext
name|context
parameter_list|)
throws|throws
name|Exception
block|{
name|AtomicFieldData
argument_list|<
name|?
argument_list|>
name|leftData
init|=
name|randomBoolean
argument_list|()
condition|?
name|data
operator|.
name|load
argument_list|(
name|context
argument_list|)
else|:
name|data
operator|.
name|loadDirect
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|leftData
operator|.
name|getBytesValues
argument_list|(
name|randomBoolean
argument_list|()
argument_list|)
operator|.
name|getOrder
argument_list|()
argument_list|,
name|is
argument_list|(
name|order
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getNumbers
specifier|private
name|int
index|[]
name|getNumbers
parameter_list|(
name|Random
name|random
parameter_list|,
name|int
name|margin
parameter_list|)
block|{
if|if
condition|(
name|random
operator|.
name|nextInt
argument_list|(
literal|20
argument_list|)
operator|==
literal|0
condition|)
block|{
name|int
index|[]
name|num
init|=
operator|new
name|int
index|[
literal|1
operator|+
name|random
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|num
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|int
name|v
init|=
operator|(
name|random
operator|.
name|nextBoolean
argument_list|()
condition|?
operator|-
literal|1
operator|*
name|random
operator|.
name|nextInt
argument_list|(
name|margin
argument_list|)
else|:
name|random
operator|.
name|nextInt
argument_list|(
name|margin
argument_list|)
operator|)
decl_stmt|;
name|num
index|[
name|i
index|]
operator|=
name|v
expr_stmt|;
block|}
return|return
name|num
return|;
block|}
return|return
operator|new
name|int
index|[]
block|{
operator|(
name|random
operator|.
name|nextBoolean
argument_list|()
condition|?
operator|-
literal|1
operator|*
name|random
operator|.
name|nextInt
argument_list|(
name|margin
argument_list|)
else|:
name|random
operator|.
name|nextInt
argument_list|(
name|margin
argument_list|)
operator|)
block|}
return|;
block|}
DECL|method|duelFieldDataBytes
specifier|private
specifier|static
name|void
name|duelFieldDataBytes
parameter_list|(
name|Random
name|random
parameter_list|,
name|AtomicReaderContext
name|context
parameter_list|,
name|IndexFieldData
argument_list|<
name|?
argument_list|>
name|left
parameter_list|,
name|IndexFieldData
argument_list|<
name|?
argument_list|>
name|right
parameter_list|,
name|Preprocessor
name|pre
parameter_list|)
throws|throws
name|Exception
block|{
name|AtomicFieldData
argument_list|<
name|?
argument_list|>
name|leftData
init|=
name|random
operator|.
name|nextBoolean
argument_list|()
condition|?
name|left
operator|.
name|load
argument_list|(
name|context
argument_list|)
else|:
name|left
operator|.
name|loadDirect
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|AtomicFieldData
argument_list|<
name|?
argument_list|>
name|rightData
init|=
name|random
operator|.
name|nextBoolean
argument_list|()
condition|?
name|right
operator|.
name|load
argument_list|(
name|context
argument_list|)
else|:
name|right
operator|.
name|loadDirect
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|leftData
operator|.
name|getNumDocs
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|rightData
operator|.
name|getNumDocs
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|numDocs
init|=
name|leftData
operator|.
name|getNumDocs
argument_list|()
decl_stmt|;
name|BytesValues
name|leftBytesValues
init|=
name|leftData
operator|.
name|getBytesValues
argument_list|(
name|random
operator|.
name|nextBoolean
argument_list|()
argument_list|)
decl_stmt|;
name|BytesValues
name|rightBytesValues
init|=
name|rightData
operator|.
name|getBytesValues
argument_list|(
name|random
operator|.
name|nextBoolean
argument_list|()
argument_list|)
decl_stmt|;
name|BytesRef
name|leftSpare
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
name|BytesRef
name|rightSpare
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|int
name|numValues
init|=
literal|0
decl_stmt|;
name|assertThat
argument_list|(
operator|(
name|numValues
operator|=
name|leftBytesValues
operator|.
name|setDocument
argument_list|(
name|i
argument_list|)
operator|)
argument_list|,
name|equalTo
argument_list|(
name|rightBytesValues
operator|.
name|setDocument
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|BytesRef
name|previous
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numValues
condition|;
name|j
operator|++
control|)
block|{
name|rightSpare
operator|.
name|copyBytes
argument_list|(
name|rightBytesValues
operator|.
name|nextValue
argument_list|()
argument_list|)
expr_stmt|;
name|leftSpare
operator|.
name|copyBytes
argument_list|(
name|leftBytesValues
operator|.
name|nextValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rightSpare
operator|.
name|hashCode
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|rightBytesValues
operator|.
name|currentValueHash
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|leftSpare
operator|.
name|hashCode
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|leftBytesValues
operator|.
name|currentValueHash
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|previous
operator|!=
literal|null
operator|&&
name|leftBytesValues
operator|.
name|getOrder
argument_list|()
operator|==
name|rightBytesValues
operator|.
name|getOrder
argument_list|()
condition|)
block|{
comment|// we can only compare the
name|assertThat
argument_list|(
name|pre
operator|.
name|compare
argument_list|(
name|previous
argument_list|,
name|rightSpare
argument_list|)
argument_list|,
name|lessThan
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|previous
operator|=
name|BytesRef
operator|.
name|deepCopyOf
argument_list|(
name|rightSpare
argument_list|)
expr_stmt|;
name|pre
operator|.
name|toString
argument_list|(
name|rightSpare
argument_list|)
expr_stmt|;
name|pre
operator|.
name|toString
argument_list|(
name|leftSpare
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|pre
operator|.
name|toString
argument_list|(
name|leftSpare
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|pre
operator|.
name|toString
argument_list|(
name|rightSpare
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|leftSpare
operator|.
name|equals
argument_list|(
name|rightSpare
argument_list|)
condition|)
block|{
name|assertThat
argument_list|(
name|leftBytesValues
operator|.
name|currentValueHash
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|rightBytesValues
operator|.
name|currentValueHash
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|duelFieldDataDouble
specifier|private
specifier|static
name|void
name|duelFieldDataDouble
parameter_list|(
name|Random
name|random
parameter_list|,
name|AtomicReaderContext
name|context
parameter_list|,
name|IndexNumericFieldData
argument_list|<
name|?
argument_list|>
name|left
parameter_list|,
name|IndexNumericFieldData
argument_list|<
name|?
argument_list|>
name|right
parameter_list|)
throws|throws
name|Exception
block|{
name|AtomicNumericFieldData
name|leftData
init|=
name|random
operator|.
name|nextBoolean
argument_list|()
condition|?
name|left
operator|.
name|load
argument_list|(
name|context
argument_list|)
else|:
name|left
operator|.
name|loadDirect
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|AtomicNumericFieldData
name|rightData
init|=
name|random
operator|.
name|nextBoolean
argument_list|()
condition|?
name|right
operator|.
name|load
argument_list|(
name|context
argument_list|)
else|:
name|right
operator|.
name|loadDirect
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|leftData
operator|.
name|getNumDocs
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|rightData
operator|.
name|getNumDocs
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|numDocs
init|=
name|leftData
operator|.
name|getNumDocs
argument_list|()
decl_stmt|;
name|DoubleValues
name|leftDoubleValues
init|=
name|leftData
operator|.
name|getDoubleValues
argument_list|()
decl_stmt|;
name|DoubleValues
name|rightDoubleValues
init|=
name|rightData
operator|.
name|getDoubleValues
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|int
name|numValues
init|=
literal|0
decl_stmt|;
name|assertThat
argument_list|(
operator|(
name|numValues
operator|=
name|leftDoubleValues
operator|.
name|setDocument
argument_list|(
name|i
argument_list|)
operator|)
argument_list|,
name|equalTo
argument_list|(
name|rightDoubleValues
operator|.
name|setDocument
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|double
name|previous
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numValues
condition|;
name|j
operator|++
control|)
block|{
name|double
name|current
decl_stmt|;
name|assertThat
argument_list|(
name|leftDoubleValues
operator|.
name|nextValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|current
operator|=
name|rightDoubleValues
operator|.
name|nextValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|j
operator|>
literal|0
condition|)
block|{
name|assertThat
argument_list|(
name|Double
operator|.
name|compare
argument_list|(
name|previous
argument_list|,
name|current
argument_list|)
argument_list|,
name|lessThan
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|previous
operator|=
name|current
expr_stmt|;
block|}
block|}
block|}
DECL|method|duelFieldDataLong
specifier|private
specifier|static
name|void
name|duelFieldDataLong
parameter_list|(
name|Random
name|random
parameter_list|,
name|AtomicReaderContext
name|context
parameter_list|,
name|IndexNumericFieldData
name|left
parameter_list|,
name|IndexNumericFieldData
name|right
parameter_list|)
throws|throws
name|Exception
block|{
name|AtomicNumericFieldData
name|leftData
init|=
name|random
operator|.
name|nextBoolean
argument_list|()
condition|?
name|left
operator|.
name|load
argument_list|(
name|context
argument_list|)
else|:
name|left
operator|.
name|loadDirect
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|AtomicNumericFieldData
name|rightData
init|=
name|random
operator|.
name|nextBoolean
argument_list|()
condition|?
name|right
operator|.
name|load
argument_list|(
name|context
argument_list|)
else|:
name|right
operator|.
name|loadDirect
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|leftData
operator|.
name|getNumDocs
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|rightData
operator|.
name|getNumDocs
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|numDocs
init|=
name|leftData
operator|.
name|getNumDocs
argument_list|()
decl_stmt|;
name|LongValues
name|leftLongValues
init|=
name|leftData
operator|.
name|getLongValues
argument_list|()
decl_stmt|;
name|LongValues
name|rightLongValues
init|=
name|rightData
operator|.
name|getLongValues
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|int
name|numValues
init|=
literal|0
decl_stmt|;
name|long
name|previous
init|=
literal|0
decl_stmt|;
name|assertThat
argument_list|(
operator|(
name|numValues
operator|=
name|leftLongValues
operator|.
name|setDocument
argument_list|(
name|i
argument_list|)
operator|)
argument_list|,
name|equalTo
argument_list|(
name|rightLongValues
operator|.
name|setDocument
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numValues
condition|;
name|j
operator|++
control|)
block|{
name|long
name|current
decl_stmt|;
name|assertThat
argument_list|(
name|leftLongValues
operator|.
name|nextValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|current
operator|=
name|rightLongValues
operator|.
name|nextValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|j
operator|>
literal|0
condition|)
block|{
name|assertThat
argument_list|(
name|previous
argument_list|,
name|lessThan
argument_list|(
name|current
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|previous
operator|=
name|current
expr_stmt|;
block|}
block|}
block|}
DECL|method|duelFieldDataGeoPoint
specifier|private
specifier|static
name|void
name|duelFieldDataGeoPoint
parameter_list|(
name|Random
name|random
parameter_list|,
name|AtomicReaderContext
name|context
parameter_list|,
name|IndexGeoPointFieldData
argument_list|<
name|?
argument_list|>
name|left
parameter_list|,
name|IndexGeoPointFieldData
argument_list|<
name|?
argument_list|>
name|right
parameter_list|,
name|Distance
name|precision
parameter_list|)
throws|throws
name|Exception
block|{
name|AtomicGeoPointFieldData
argument_list|<
name|?
argument_list|>
name|leftData
init|=
name|random
operator|.
name|nextBoolean
argument_list|()
condition|?
name|left
operator|.
name|load
argument_list|(
name|context
argument_list|)
else|:
name|left
operator|.
name|loadDirect
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|AtomicGeoPointFieldData
argument_list|<
name|?
argument_list|>
name|rightData
init|=
name|random
operator|.
name|nextBoolean
argument_list|()
condition|?
name|right
operator|.
name|load
argument_list|(
name|context
argument_list|)
else|:
name|right
operator|.
name|loadDirect
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|leftData
operator|.
name|getNumDocs
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|rightData
operator|.
name|getNumDocs
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|numDocs
init|=
name|leftData
operator|.
name|getNumDocs
argument_list|()
decl_stmt|;
name|GeoPointValues
name|leftValues
init|=
name|leftData
operator|.
name|getGeoPointValues
argument_list|()
decl_stmt|;
name|GeoPointValues
name|rightValues
init|=
name|rightData
operator|.
name|getGeoPointValues
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|int
name|numValues
init|=
name|leftValues
operator|.
name|setDocument
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|numValues
argument_list|,
name|rightValues
operator|.
name|setDocument
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|GeoPoint
argument_list|>
name|leftPoints
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|GeoPoint
argument_list|>
name|rightPoints
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numValues
condition|;
operator|++
name|j
control|)
block|{
name|GeoPoint
name|l
init|=
name|leftValues
operator|.
name|nextValue
argument_list|()
decl_stmt|;
name|leftPoints
operator|.
name|add
argument_list|(
operator|new
name|GeoPoint
argument_list|(
name|l
operator|.
name|getLat
argument_list|()
argument_list|,
name|l
operator|.
name|getLon
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|GeoPoint
name|r
init|=
name|rightValues
operator|.
name|nextValue
argument_list|()
decl_stmt|;
name|rightPoints
operator|.
name|add
argument_list|(
operator|new
name|GeoPoint
argument_list|(
name|r
operator|.
name|getLat
argument_list|()
argument_list|,
name|r
operator|.
name|getLon
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|GeoPoint
name|l
range|:
name|leftPoints
control|)
block|{
name|assertTrue
argument_list|(
literal|"Couldn't find "
operator|+
name|l
operator|+
literal|" among "
operator|+
name|rightPoints
argument_list|,
name|contains
argument_list|(
name|l
argument_list|,
name|rightPoints
argument_list|,
name|precision
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|GeoPoint
name|r
range|:
name|rightPoints
control|)
block|{
name|assertTrue
argument_list|(
literal|"Couldn't find "
operator|+
name|r
operator|+
literal|" among "
operator|+
name|leftPoints
argument_list|,
name|contains
argument_list|(
name|r
argument_list|,
name|leftPoints
argument_list|,
name|precision
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|contains
specifier|private
specifier|static
name|boolean
name|contains
parameter_list|(
name|GeoPoint
name|point
parameter_list|,
name|List
argument_list|<
name|GeoPoint
argument_list|>
name|set
parameter_list|,
name|Distance
name|precision
parameter_list|)
block|{
for|for
control|(
name|GeoPoint
name|r
range|:
name|set
control|)
block|{
specifier|final
name|double
name|distance
init|=
name|GeoDistance
operator|.
name|PLANE
operator|.
name|calculate
argument_list|(
name|point
operator|.
name|getLat
argument_list|()
argument_list|,
name|point
operator|.
name|getLon
argument_list|()
argument_list|,
name|r
operator|.
name|getLat
argument_list|()
argument_list|,
name|r
operator|.
name|getLon
argument_list|()
argument_list|,
name|DistanceUnit
operator|.
name|METERS
argument_list|)
decl_stmt|;
if|if
condition|(
operator|new
name|Distance
argument_list|(
name|distance
argument_list|,
name|DistanceUnit
operator|.
name|METERS
argument_list|)
operator|.
name|compareTo
argument_list|(
name|precision
argument_list|)
operator|<=
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|class|Preprocessor
specifier|private
specifier|static
class|class
name|Preprocessor
block|{
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|(
name|BytesRef
name|ref
parameter_list|)
block|{
return|return
name|ref
operator|.
name|utf8ToString
argument_list|()
return|;
block|}
DECL|method|compare
specifier|public
name|int
name|compare
parameter_list|(
name|BytesRef
name|a
parameter_list|,
name|BytesRef
name|b
parameter_list|)
block|{
return|return
name|a
operator|.
name|compareTo
argument_list|(
name|b
argument_list|)
return|;
block|}
block|}
DECL|class|ToDoublePreprocessor
specifier|private
specifier|static
class|class
name|ToDoublePreprocessor
extends|extends
name|Preprocessor
block|{
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|(
name|BytesRef
name|ref
parameter_list|)
block|{
assert|assert
name|ref
operator|.
name|length
operator|>
literal|0
assert|;
return|return
name|Double
operator|.
name|toString
argument_list|(
name|Double
operator|.
name|parseDouble
argument_list|(
name|super
operator|.
name|toString
argument_list|(
name|ref
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|compare
specifier|public
name|int
name|compare
parameter_list|(
name|BytesRef
name|a
parameter_list|,
name|BytesRef
name|b
parameter_list|)
block|{
name|Double
name|_a
init|=
name|Double
operator|.
name|parseDouble
argument_list|(
name|super
operator|.
name|toString
argument_list|(
name|a
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|_a
operator|.
name|compareTo
argument_list|(
name|Double
operator|.
name|parseDouble
argument_list|(
name|super
operator|.
name|toString
argument_list|(
name|b
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
block|}
DECL|enum|Type
specifier|private
specifier|static
enum|enum
name|Type
block|{
DECL|enum constant|Float
DECL|enum constant|Double
DECL|enum constant|Integer
DECL|enum constant|Long
DECL|enum constant|Bytes
DECL|enum constant|GeoPoint
name|Float
parameter_list|(
name|AtomicFieldData
operator|.
name|Order
operator|.
name|NUMERIC
parameter_list|)
operator|,
constructor|Double(AtomicFieldData.Order.NUMERIC
block|)
enum|,
name|Integer
parameter_list|(
name|AtomicFieldData
operator|.
name|Order
operator|.
name|NUMERIC
parameter_list|)
operator|,
constructor|Long(AtomicFieldData.Order.NUMERIC
block|)
operator|,
name|Bytes
argument_list|(
name|AtomicFieldData
operator|.
name|Order
operator|.
name|BYTES
argument_list|)
operator|,
name|GeoPoint
argument_list|(
name|AtomicFieldData
operator|.
name|Order
operator|.
name|NONE
argument_list|)
expr_stmt|;
end_class

begin_decl_stmt
DECL|field|order
specifier|private
specifier|final
name|AtomicFieldData
operator|.
name|Order
name|order
decl_stmt|;
end_decl_stmt

begin_expr_stmt
DECL|method|Type
name|Type
argument_list|(
name|AtomicFieldData
operator|.
name|Order
name|order
argument_list|)
block|{
name|this
operator|.
name|order
operator|=
name|order
block|;         }
DECL|method|order
specifier|public
name|AtomicFieldData
operator|.
name|Order
name|order
argument_list|()
block|{
return|return
name|order
return|;
block|}
end_expr_stmt

unit|}  }
end_unit

