begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.query
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|TermsQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|internal
operator|.
name|UidFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|instanceOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|is
import|;
end_import

begin_class
DECL|class|IdsQueryBuilderTest
specifier|public
class|class
name|IdsQueryBuilderTest
extends|extends
name|BaseQueryTestCase
argument_list|<
name|IdsQueryBuilder
argument_list|>
block|{
comment|/**      * check that parser throws exception on missing values field      * @throws IOException      */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|QueryParsingException
operator|.
name|class
argument_list|)
DECL|method|testIdsNotProvided
specifier|public
name|void
name|testIdsNotProvided
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|noIdsFieldQuery
init|=
literal|"{\"ids\" : { \"type\" : \"my_type\"  }"
decl_stmt|;
name|XContentParser
name|parser
init|=
name|XContentFactory
operator|.
name|xContent
argument_list|(
name|noIdsFieldQuery
argument_list|)
operator|.
name|createParser
argument_list|(
name|noIdsFieldQuery
argument_list|)
decl_stmt|;
name|QueryParseContext
name|context
init|=
name|createContext
argument_list|()
decl_stmt|;
name|context
operator|.
name|reset
argument_list|(
name|parser
argument_list|)
expr_stmt|;
name|assertQueryHeader
argument_list|(
name|parser
argument_list|,
literal|"ids"
argument_list|)
expr_stmt|;
name|context
operator|.
name|indexQueryParserService
argument_list|()
operator|.
name|queryParser
argument_list|(
literal|"ids"
argument_list|)
operator|.
name|fromXContent
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createEmptyQueryBuilder
specifier|protected
name|IdsQueryBuilder
name|createEmptyQueryBuilder
parameter_list|()
block|{
return|return
operator|new
name|IdsQueryBuilder
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|assertLuceneQuery
specifier|protected
name|void
name|assertLuceneQuery
parameter_list|(
name|IdsQueryBuilder
name|queryBuilder
parameter_list|,
name|Query
name|query
parameter_list|,
name|QueryParseContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|testQuery
operator|.
name|ids
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|assertThat
argument_list|(
name|query
argument_list|,
name|is
argument_list|(
name|instanceOf
argument_list|(
name|BooleanQuery
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|query
argument_list|,
name|is
argument_list|(
name|instanceOf
argument_list|(
name|TermsQuery
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|TermsQuery
name|termQuery
init|=
operator|(
name|TermsQuery
operator|)
name|query
decl_stmt|;
name|assertThat
argument_list|(
name|termQuery
operator|.
name|getBoost
argument_list|()
argument_list|,
name|is
argument_list|(
name|testQuery
operator|.
name|boost
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// because internals of TermsQuery are well hidden, check string representation
name|String
index|[]
name|parts
init|=
name|termQuery
operator|.
name|toString
argument_list|()
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|parts
operator|.
name|length
argument_list|,
name|is
argument_list|(
name|queryBuilder
operator|.
name|ids
argument_list|()
operator|.
name|size
argument_list|()
operator|*
name|queryBuilder
operator|.
name|types
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|parts
index|[
literal|0
index|]
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|parts
index|[
literal|0
index|]
operator|.
name|indexOf
argument_list|(
literal|":"
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
name|UidFieldMapper
operator|.
name|NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createTestQueryBuilder
specifier|public
name|IdsQueryBuilder
name|createTestQueryBuilder
parameter_list|()
block|{
name|IdsQueryBuilder
name|query
init|=
operator|new
name|IdsQueryBuilder
argument_list|()
decl_stmt|;
name|int
name|numberOfTypes
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|String
index|[]
name|types
init|=
operator|new
name|String
index|[
name|numberOfTypes
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfTypes
condition|;
name|i
operator|++
control|)
block|{
name|types
index|[
name|i
index|]
operator|=
name|randomAsciiOfLength
argument_list|(
literal|8
argument_list|)
expr_stmt|;
block|}
name|query
operator|=
operator|new
name|IdsQueryBuilder
argument_list|(
name|types
argument_list|)
expr_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|int
name|numberOfIds
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfIds
condition|;
name|i
operator|++
control|)
block|{
name|query
operator|.
name|addIds
argument_list|(
name|randomAsciiOfLength
argument_list|(
literal|8
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|query
operator|.
name|boost
argument_list|(
literal|2.0f
operator|/
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|20
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|query
return|;
block|}
block|}
end_class

end_unit

