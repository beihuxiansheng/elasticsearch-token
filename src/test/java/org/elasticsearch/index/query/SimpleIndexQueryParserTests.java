begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.query
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|core
operator|.
name|WhitespaceAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|memory
operator|.
name|MemoryIndex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|sandbox
operator|.
name|queries
operator|.
name|FuzzyLikeThisQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spans
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|prefix
operator|.
name|IntersectsPrefixTreeFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRefBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|CharsRefBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|NumericUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|get
operator|.
name|MultiGetRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|compress
operator|.
name|CompressedString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|Lucene
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|search
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|search
operator|.
name|function
operator|.
name|BoostScoreFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|search
operator|.
name|function
operator|.
name|FunctionScoreQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|search
operator|.
name|function
operator|.
name|WeightFactorFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|DistanceUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|Fuzziness
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|cache
operator|.
name|filter
operator|.
name|support
operator|.
name|CacheKeyFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MapperService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|core
operator|.
name|NumberFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|search
operator|.
name|NumericRangeFieldDataFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|search
operator|.
name|child
operator|.
name|CustomQueryWrappingFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|search
operator|.
name|child
operator|.
name|ParentConstantScoreQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|search
operator|.
name|geo
operator|.
name|GeoDistanceFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|search
operator|.
name|geo
operator|.
name|GeoPolygonFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|search
operator|.
name|geo
operator|.
name|InMemoryGeoBoundingBoxFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|search
operator|.
name|morelikethis
operator|.
name|MoreLikeThisFetchService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|service
operator|.
name|IndexService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|SearchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchSingleNodeTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|Streams
operator|.
name|copyToBytesFromClasspath
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|Streams
operator|.
name|copyToStringFromClasspath
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
operator|.
name|jsonBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|FilterBuilders
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|RegexpFlag
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|functionscore
operator|.
name|ScoreFunctionBuilders
operator|.
name|factorFunction
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertBooleanSubQuery
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|SimpleIndexQueryParserTests
specifier|public
class|class
name|SimpleIndexQueryParserTests
extends|extends
name|ElasticsearchSingleNodeTest
block|{
DECL|field|queryParser
specifier|private
name|IndexQueryParserService
name|queryParser
decl_stmt|;
annotation|@
name|Before
DECL|method|setup
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
name|Settings
name|settings
init|=
name|ImmutableSettings
operator|.
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.cache.filter.type"
argument_list|,
literal|"none"
argument_list|)
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
literal|"SimpleIndexQueryParserTests"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|IndexService
name|indexService
init|=
name|createIndex
argument_list|(
literal|"test"
argument_list|,
name|settings
argument_list|)
decl_stmt|;
name|MapperService
name|mapperService
init|=
name|indexService
operator|.
name|mapperService
argument_list|()
decl_stmt|;
name|String
name|mapping
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/mapping.json"
argument_list|)
decl_stmt|;
name|mapperService
operator|.
name|merge
argument_list|(
literal|"person"
argument_list|,
operator|new
name|CompressedString
argument_list|(
name|mapping
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|mapperService
operator|.
name|documentMapper
argument_list|(
literal|"person"
argument_list|)
operator|.
name|parse
argument_list|(
operator|new
name|BytesArray
argument_list|(
name|copyToBytesFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/data.json"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|queryParser
operator|=
name|indexService
operator|.
name|queryParserService
argument_list|()
expr_stmt|;
block|}
DECL|method|queryParser
specifier|private
name|IndexQueryParserService
name|queryParser
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|this
operator|.
name|queryParser
return|;
block|}
DECL|method|longToPrefixCoded
specifier|private
name|BytesRef
name|longToPrefixCoded
parameter_list|(
name|long
name|val
parameter_list|,
name|int
name|shift
parameter_list|)
block|{
name|BytesRefBuilder
name|bytesRef
init|=
operator|new
name|BytesRefBuilder
argument_list|()
decl_stmt|;
name|NumericUtils
operator|.
name|longToPrefixCoded
argument_list|(
name|val
argument_list|,
name|shift
argument_list|,
name|bytesRef
argument_list|)
expr_stmt|;
return|return
name|bytesRef
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Test
DECL|method|testQueryStringBuilder
specifier|public
name|void
name|testQueryStringBuilder
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|queryString
argument_list|(
literal|"test"
argument_list|)
operator|.
name|defaultField
argument_list|(
literal|"content"
argument_list|)
operator|.
name|phraseSlop
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|TermQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|TermQuery
name|termQuery
init|=
operator|(
name|TermQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|termQuery
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"content"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testQueryString
specifier|public
name|void
name|testQueryString
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/query.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|TermQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|TermQuery
name|termQuery
init|=
operator|(
name|TermQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|termQuery
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"content"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testQueryStringBoostsBuilder
specifier|public
name|void
name|testQueryStringBoostsBuilder
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|QueryStringQueryBuilder
name|builder
init|=
name|queryString
argument_list|(
literal|"field:boosted^2"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|builder
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|TermQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermQuery
operator|)
name|parsedQuery
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"boosted"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
operator|.
name|getBoost
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2.0f
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|boost
argument_list|(
literal|2.0f
argument_list|)
expr_stmt|;
name|parsedQuery
operator|=
name|queryParser
operator|.
name|parse
argument_list|(
name|builder
argument_list|)
operator|.
name|query
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
operator|.
name|getBoost
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|4.0f
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|=
name|queryString
argument_list|(
literal|"((field:boosted^2) AND (field:foo^1.5))^3"
argument_list|)
expr_stmt|;
name|parsedQuery
operator|=
name|queryParser
operator|.
name|parse
argument_list|(
name|builder
argument_list|)
operator|.
name|query
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|BooleanQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|assertBooleanSubQuery
argument_list|(
name|parsedQuery
argument_list|,
name|TermQuery
operator|.
name|class
argument_list|,
literal|0
argument_list|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"boosted"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|assertBooleanSubQuery
argument_list|(
name|parsedQuery
argument_list|,
name|TermQuery
operator|.
name|class
argument_list|,
literal|0
argument_list|)
operator|.
name|getBoost
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2.0f
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|assertBooleanSubQuery
argument_list|(
name|parsedQuery
argument_list|,
name|TermQuery
operator|.
name|class
argument_list|,
literal|1
argument_list|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|assertBooleanSubQuery
argument_list|(
name|parsedQuery
argument_list|,
name|TermQuery
operator|.
name|class
argument_list|,
literal|1
argument_list|)
operator|.
name|getBoost
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1.5f
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
operator|.
name|getBoost
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3.0f
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|boost
argument_list|(
literal|2.0f
argument_list|)
expr_stmt|;
name|parsedQuery
operator|=
name|queryParser
operator|.
name|parse
argument_list|(
name|builder
argument_list|)
operator|.
name|query
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
operator|.
name|getBoost
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|6.0f
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testQueryStringFields1Builder
specifier|public
name|void
name|testQueryStringFields1Builder
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|queryString
argument_list|(
literal|"test"
argument_list|)
operator|.
name|field
argument_list|(
literal|"content"
argument_list|)
operator|.
name|field
argument_list|(
literal|"name"
argument_list|)
operator|.
name|useDisMax
argument_list|(
literal|false
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|BooleanQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|BooleanQuery
name|bQuery
init|=
operator|(
name|BooleanQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|bQuery
operator|.
name|clauses
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|assertBooleanSubQuery
argument_list|(
name|parsedQuery
argument_list|,
name|TermQuery
operator|.
name|class
argument_list|,
literal|0
argument_list|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"content"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|assertBooleanSubQuery
argument_list|(
name|parsedQuery
argument_list|,
name|TermQuery
operator|.
name|class
argument_list|,
literal|1
argument_list|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testQueryStringFields1
specifier|public
name|void
name|testQueryStringFields1
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/query-fields1.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|BooleanQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|BooleanQuery
name|bQuery
init|=
operator|(
name|BooleanQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|bQuery
operator|.
name|clauses
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|assertBooleanSubQuery
argument_list|(
name|parsedQuery
argument_list|,
name|TermQuery
operator|.
name|class
argument_list|,
literal|0
argument_list|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"content"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|assertBooleanSubQuery
argument_list|(
name|parsedQuery
argument_list|,
name|TermQuery
operator|.
name|class
argument_list|,
literal|1
argument_list|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testQueryStringFieldsMatch
specifier|public
name|void
name|testQueryStringFieldsMatch
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/query-fields-match.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|BooleanQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|BooleanQuery
name|bQuery
init|=
operator|(
name|BooleanQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|bQuery
operator|.
name|clauses
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|assertBooleanSubQuery
argument_list|(
name|parsedQuery
argument_list|,
name|TermQuery
operator|.
name|class
argument_list|,
literal|0
argument_list|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|assertBooleanSubQuery
argument_list|(
name|parsedQuery
argument_list|,
name|TermQuery
operator|.
name|class
argument_list|,
literal|1
argument_list|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.last"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testQueryStringFields2Builder
specifier|public
name|void
name|testQueryStringFields2Builder
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|queryString
argument_list|(
literal|"test"
argument_list|)
operator|.
name|field
argument_list|(
literal|"content"
argument_list|)
operator|.
name|field
argument_list|(
literal|"name"
argument_list|)
operator|.
name|useDisMax
argument_list|(
literal|true
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|DisjunctionMaxQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|DisjunctionMaxQuery
name|disMaxQuery
init|=
operator|(
name|DisjunctionMaxQuery
operator|)
name|parsedQuery
decl_stmt|;
name|List
argument_list|<
name|Query
argument_list|>
name|disjuncts
init|=
name|disMaxQuery
operator|.
name|getDisjuncts
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermQuery
operator|)
name|disjuncts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"content"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermQuery
operator|)
name|disjuncts
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testQueryStringFields2
specifier|public
name|void
name|testQueryStringFields2
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/query-fields2.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|DisjunctionMaxQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|DisjunctionMaxQuery
name|disMaxQuery
init|=
operator|(
name|DisjunctionMaxQuery
operator|)
name|parsedQuery
decl_stmt|;
name|List
argument_list|<
name|Query
argument_list|>
name|disjuncts
init|=
name|disMaxQuery
operator|.
name|getDisjuncts
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermQuery
operator|)
name|disjuncts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"content"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermQuery
operator|)
name|disjuncts
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testQueryStringFields3Builder
specifier|public
name|void
name|testQueryStringFields3Builder
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|queryString
argument_list|(
literal|"test"
argument_list|)
operator|.
name|field
argument_list|(
literal|"content"
argument_list|,
literal|2.2f
argument_list|)
operator|.
name|field
argument_list|(
literal|"name"
argument_list|)
operator|.
name|useDisMax
argument_list|(
literal|true
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|DisjunctionMaxQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|DisjunctionMaxQuery
name|disMaxQuery
init|=
operator|(
name|DisjunctionMaxQuery
operator|)
name|parsedQuery
decl_stmt|;
name|List
argument_list|<
name|Query
argument_list|>
name|disjuncts
init|=
name|disMaxQuery
operator|.
name|getDisjuncts
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermQuery
operator|)
name|disjuncts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"content"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|double
operator|)
name|disjuncts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getBoost
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|2.2
argument_list|,
literal|0.01
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermQuery
operator|)
name|disjuncts
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|double
operator|)
name|disjuncts
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getBoost
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|1
argument_list|,
literal|0.01
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testQueryStringFields3
specifier|public
name|void
name|testQueryStringFields3
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/query-fields3.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|DisjunctionMaxQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|DisjunctionMaxQuery
name|disMaxQuery
init|=
operator|(
name|DisjunctionMaxQuery
operator|)
name|parsedQuery
decl_stmt|;
name|List
argument_list|<
name|Query
argument_list|>
name|disjuncts
init|=
name|disMaxQuery
operator|.
name|getDisjuncts
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermQuery
operator|)
name|disjuncts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"content"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|double
operator|)
name|disjuncts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getBoost
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|2.2
argument_list|,
literal|0.01
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermQuery
operator|)
name|disjuncts
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|double
operator|)
name|disjuncts
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getBoost
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|1
argument_list|,
literal|0.01
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMatchAllBuilder
specifier|public
name|void
name|testMatchAllBuilder
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|matchAllQuery
argument_list|()
operator|.
name|boost
argument_list|(
literal|1.2f
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|MatchAllDocsQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|MatchAllDocsQuery
name|matchAllDocsQuery
init|=
operator|(
name|MatchAllDocsQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
operator|(
name|double
operator|)
name|matchAllDocsQuery
operator|.
name|getBoost
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|1.2
argument_list|,
literal|0.01
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMatchAll
specifier|public
name|void
name|testMatchAll
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/matchAll.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|MatchAllDocsQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|MatchAllDocsQuery
name|matchAllDocsQuery
init|=
operator|(
name|MatchAllDocsQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
operator|(
name|double
operator|)
name|matchAllDocsQuery
operator|.
name|getBoost
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|1.2
argument_list|,
literal|0.01
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMatchAllEmpty1
specifier|public
name|void
name|testMatchAllEmpty1
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/match_all_empty1.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|equalTo
argument_list|(
name|Queries
operator|.
name|newMatchAllQuery
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|not
argument_list|(
name|sameInstance
argument_list|(
name|Queries
operator|.
name|newMatchAllQuery
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMatchAllEmpty2
specifier|public
name|void
name|testMatchAllEmpty2
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/match_all_empty2.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|equalTo
argument_list|(
name|Queries
operator|.
name|newMatchAllQuery
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|not
argument_list|(
name|sameInstance
argument_list|(
name|Queries
operator|.
name|newMatchAllQuery
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testStarColonStar
specifier|public
name|void
name|testStarColonStar
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/starColonStar.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|ConstantScoreQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|ConstantScoreQuery
name|constantScoreQuery
init|=
operator|(
name|ConstantScoreQuery
operator|)
name|parsedQuery
decl_stmt|;
name|Filter
name|internalFilter
init|=
name|constantScoreQuery
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|internalFilter
argument_list|,
name|instanceOf
argument_list|(
name|MatchAllDocsFilter
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDisMaxBuilder
specifier|public
name|void
name|testDisMaxBuilder
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|disMaxQuery
argument_list|()
operator|.
name|boost
argument_list|(
literal|1.2f
argument_list|)
operator|.
name|tieBreaker
argument_list|(
literal|0.7f
argument_list|)
operator|.
name|add
argument_list|(
name|termQuery
argument_list|(
literal|"name.first"
argument_list|,
literal|"first"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|termQuery
argument_list|(
literal|"name.last"
argument_list|,
literal|"last"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|DisjunctionMaxQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|DisjunctionMaxQuery
name|disjunctionMaxQuery
init|=
operator|(
name|DisjunctionMaxQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
operator|(
name|double
operator|)
name|disjunctionMaxQuery
operator|.
name|getBoost
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|1.2
argument_list|,
literal|0.01
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Query
argument_list|>
name|disjuncts
init|=
name|disjunctionMaxQuery
operator|.
name|getDisjuncts
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|disjuncts
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|Query
name|firstQ
init|=
name|disjuncts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|firstQ
argument_list|,
name|instanceOf
argument_list|(
name|TermQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermQuery
operator|)
name|firstQ
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"first"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Query
name|secondsQ
init|=
name|disjuncts
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|secondsQ
argument_list|,
name|instanceOf
argument_list|(
name|TermQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermQuery
operator|)
name|secondsQ
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.last"
argument_list|,
literal|"last"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDisMax
specifier|public
name|void
name|testDisMax
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/disMax.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|DisjunctionMaxQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|DisjunctionMaxQuery
name|disjunctionMaxQuery
init|=
operator|(
name|DisjunctionMaxQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
operator|(
name|double
operator|)
name|disjunctionMaxQuery
operator|.
name|getBoost
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|1.2
argument_list|,
literal|0.01
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Query
argument_list|>
name|disjuncts
init|=
name|disjunctionMaxQuery
operator|.
name|getDisjuncts
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|disjuncts
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|Query
name|firstQ
init|=
name|disjuncts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|firstQ
argument_list|,
name|instanceOf
argument_list|(
name|TermQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermQuery
operator|)
name|firstQ
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"first"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Query
name|secondsQ
init|=
name|disjuncts
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|secondsQ
argument_list|,
name|instanceOf
argument_list|(
name|TermQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermQuery
operator|)
name|secondsQ
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.last"
argument_list|,
literal|"last"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDisMax2
specifier|public
name|void
name|testDisMax2
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/disMax2.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|DisjunctionMaxQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|DisjunctionMaxQuery
name|disjunctionMaxQuery
init|=
operator|(
name|DisjunctionMaxQuery
operator|)
name|parsedQuery
decl_stmt|;
name|List
argument_list|<
name|Query
argument_list|>
name|disjuncts
init|=
name|disjunctionMaxQuery
operator|.
name|getDisjuncts
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|disjuncts
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|PrefixQuery
name|firstQ
init|=
operator|(
name|PrefixQuery
operator|)
name|disjuncts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// since age is automatically registered in data, we encode it as numeric
name|assertThat
argument_list|(
name|firstQ
operator|.
name|getPrefix
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"sh"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|double
operator|)
name|firstQ
operator|.
name|getBoost
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|1.2
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTermQueryBuilder
specifier|public
name|void
name|testTermQueryBuilder
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|termQuery
argument_list|(
literal|"age"
argument_list|,
literal|34
argument_list|)
operator|.
name|buildAsBytes
argument_list|()
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|NumericRangeQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|NumericRangeQuery
name|fieldQuery
init|=
operator|(
name|NumericRangeQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|fieldQuery
operator|.
name|getMin
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|34
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fieldQuery
operator|.
name|getMax
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|34
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fieldQuery
operator|.
name|includesMax
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fieldQuery
operator|.
name|includesMin
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTermQuery
specifier|public
name|void
name|testTermQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/term.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|NumericRangeQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|NumericRangeQuery
name|fieldQuery
init|=
operator|(
name|NumericRangeQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|fieldQuery
operator|.
name|getMin
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|34
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fieldQuery
operator|.
name|getMax
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|34
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fieldQuery
operator|.
name|includesMax
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fieldQuery
operator|.
name|includesMin
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFuzzyQueryBuilder
specifier|public
name|void
name|testFuzzyQueryBuilder
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|fuzzyQuery
argument_list|(
literal|"name.first"
argument_list|,
literal|"sh"
argument_list|)
operator|.
name|buildAsBytes
argument_list|()
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|FuzzyQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|FuzzyQuery
name|fuzzyQuery
init|=
operator|(
name|FuzzyQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|fuzzyQuery
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"sh"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFuzzyQuery
specifier|public
name|void
name|testFuzzyQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/fuzzy.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|FuzzyQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|FuzzyQuery
name|fuzzyQuery
init|=
operator|(
name|FuzzyQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|fuzzyQuery
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"sh"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFuzzyQueryWithFieldsBuilder
specifier|public
name|void
name|testFuzzyQueryWithFieldsBuilder
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|fuzzyQuery
argument_list|(
literal|"name.first"
argument_list|,
literal|"sh"
argument_list|)
operator|.
name|fuzziness
argument_list|(
name|Fuzziness
operator|.
name|fromSimilarity
argument_list|(
literal|0.1f
argument_list|)
argument_list|)
operator|.
name|prefixLength
argument_list|(
literal|1
argument_list|)
operator|.
name|boost
argument_list|(
literal|2.0f
argument_list|)
operator|.
name|buildAsBytes
argument_list|()
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|FuzzyQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|FuzzyQuery
name|fuzzyQuery
init|=
operator|(
name|FuzzyQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|fuzzyQuery
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"sh"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fuzzyQuery
operator|.
name|getMaxEdits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|FuzzyQuery
operator|.
name|floatToEdits
argument_list|(
literal|0.1f
argument_list|,
literal|"sh"
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fuzzyQuery
operator|.
name|getPrefixLength
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fuzzyQuery
operator|.
name|getBoost
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2.0f
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFuzzyQueryWithFields
specifier|public
name|void
name|testFuzzyQueryWithFields
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/fuzzy-with-fields.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|FuzzyQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|FuzzyQuery
name|fuzzyQuery
init|=
operator|(
name|FuzzyQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|fuzzyQuery
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"sh"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fuzzyQuery
operator|.
name|getMaxEdits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|FuzzyQuery
operator|.
name|floatToEdits
argument_list|(
literal|0.1f
argument_list|,
literal|"sh"
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fuzzyQuery
operator|.
name|getPrefixLength
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fuzzyQuery
operator|.
name|getBoost
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2.0f
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFuzzyQueryWithFields2
specifier|public
name|void
name|testFuzzyQueryWithFields2
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/fuzzy-with-fields2.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|NumericRangeQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|NumericRangeQuery
name|fuzzyQuery
init|=
operator|(
name|NumericRangeQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|fuzzyQuery
operator|.
name|getMin
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|7l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fuzzyQuery
operator|.
name|getMax
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|17l
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTermWithBoostQueryBuilder
specifier|public
name|void
name|testTermWithBoostQueryBuilder
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|termQuery
argument_list|(
literal|"age"
argument_list|,
literal|34
argument_list|)
operator|.
name|boost
argument_list|(
literal|2.0f
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|NumericRangeQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|NumericRangeQuery
name|fieldQuery
init|=
operator|(
name|NumericRangeQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|fieldQuery
operator|.
name|getMin
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|34
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fieldQuery
operator|.
name|getMax
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|34
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fieldQuery
operator|.
name|includesMax
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fieldQuery
operator|.
name|includesMin
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|double
operator|)
name|fieldQuery
operator|.
name|getBoost
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|2.0
argument_list|,
literal|0.01
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTermWithBoostQuery
specifier|public
name|void
name|testTermWithBoostQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/term-with-boost.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|NumericRangeQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|NumericRangeQuery
name|fieldQuery
init|=
operator|(
name|NumericRangeQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|fieldQuery
operator|.
name|getMin
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|34
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fieldQuery
operator|.
name|getMax
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|34
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fieldQuery
operator|.
name|includesMax
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fieldQuery
operator|.
name|includesMin
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|double
operator|)
name|fieldQuery
operator|.
name|getBoost
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|2.0
argument_list|,
literal|0.01
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPrefixQueryBuilder
specifier|public
name|void
name|testPrefixQueryBuilder
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|prefixQuery
argument_list|(
literal|"name.first"
argument_list|,
literal|"sh"
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|PrefixQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|PrefixQuery
name|prefixQuery
init|=
operator|(
name|PrefixQuery
operator|)
name|parsedQuery
decl_stmt|;
comment|// since age is automatically registered in data, we encode it as numeric
name|assertThat
argument_list|(
name|prefixQuery
operator|.
name|getPrefix
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"sh"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPrefixQuery
specifier|public
name|void
name|testPrefixQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/prefix.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|PrefixQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|PrefixQuery
name|prefixQuery
init|=
operator|(
name|PrefixQuery
operator|)
name|parsedQuery
decl_stmt|;
comment|// since age is automatically registered in data, we encode it as numeric
name|assertThat
argument_list|(
name|prefixQuery
operator|.
name|getPrefix
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"sh"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPrefixBoostQuery
specifier|public
name|void
name|testPrefixBoostQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/prefix-boost.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|PrefixQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|PrefixQuery
name|prefixQuery
init|=
operator|(
name|PrefixQuery
operator|)
name|parsedQuery
decl_stmt|;
comment|// since age is automatically registered in data, we encode it as numeric
name|assertThat
argument_list|(
name|prefixQuery
operator|.
name|getPrefix
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"sh"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|double
operator|)
name|prefixQuery
operator|.
name|getBoost
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|1.2
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPrefixFilteredQueryBuilder
specifier|public
name|void
name|testPrefixFilteredQueryBuilder
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|filteredQuery
argument_list|(
name|termQuery
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay"
argument_list|)
argument_list|,
name|prefixFilter
argument_list|(
literal|"name.first"
argument_list|,
literal|"sh"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|XFilteredQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|XFilteredQuery
name|filteredQuery
init|=
operator|(
name|XFilteredQuery
operator|)
name|parsedQuery
decl_stmt|;
name|PrefixFilter
name|prefixFilter
init|=
operator|(
name|PrefixFilter
operator|)
name|filteredQuery
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|prefixFilter
operator|.
name|getPrefix
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"sh"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPrefixFilteredQuery
specifier|public
name|void
name|testPrefixFilteredQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/prefix-filter.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|XFilteredQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|XFilteredQuery
name|filteredQuery
init|=
operator|(
name|XFilteredQuery
operator|)
name|parsedQuery
decl_stmt|;
name|PrefixFilter
name|prefixFilter
init|=
operator|(
name|PrefixFilter
operator|)
name|filteredQuery
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|prefixFilter
operator|.
name|getPrefix
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"sh"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPrefixNamedFilteredQuery
specifier|public
name|void
name|testPrefixNamedFilteredQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/prefix-filter-named.json"
argument_list|)
decl_stmt|;
name|ParsedQuery
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
operator|.
name|namedFilters
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|"test"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
operator|.
name|query
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|XFilteredQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|XFilteredQuery
name|filteredQuery
init|=
operator|(
name|XFilteredQuery
operator|)
name|parsedQuery
operator|.
name|query
argument_list|()
decl_stmt|;
name|PrefixFilter
name|prefixFilter
init|=
operator|(
name|PrefixFilter
operator|)
name|filteredQuery
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|prefixFilter
operator|.
name|getPrefix
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"sh"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPrefixQueryBoostQueryBuilder
specifier|public
name|void
name|testPrefixQueryBoostQueryBuilder
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|prefixQuery
argument_list|(
literal|"name.first"
argument_list|,
literal|"sh"
argument_list|)
operator|.
name|boost
argument_list|(
literal|2.0f
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|PrefixQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|PrefixQuery
name|prefixQuery
init|=
operator|(
name|PrefixQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|prefixQuery
operator|.
name|getPrefix
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"sh"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|double
operator|)
name|prefixQuery
operator|.
name|getBoost
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|2.0
argument_list|,
literal|0.01
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPrefixQueryBoostQuery
specifier|public
name|void
name|testPrefixQueryBoostQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/prefix-with-boost.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|PrefixQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|PrefixQuery
name|prefixQuery
init|=
operator|(
name|PrefixQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|prefixQuery
operator|.
name|getPrefix
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"sh"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|double
operator|)
name|prefixQuery
operator|.
name|getBoost
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|2.0
argument_list|,
literal|0.01
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPrefixQueryWithUnknownField
specifier|public
name|void
name|testPrefixQueryWithUnknownField
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|prefixQuery
argument_list|(
literal|"unknown"
argument_list|,
literal|"sh"
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|PrefixQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|PrefixQuery
name|prefixQuery
init|=
operator|(
name|PrefixQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|prefixQuery
operator|.
name|getPrefix
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"unknown"
argument_list|,
literal|"sh"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|prefixQuery
operator|.
name|getRewriteMethod
argument_list|()
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRegexpQueryBuilder
specifier|public
name|void
name|testRegexpQueryBuilder
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|regexpQuery
argument_list|(
literal|"name.first"
argument_list|,
literal|"s.*y"
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|RegexpQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|RegexpQuery
name|regexpQuery
init|=
operator|(
name|RegexpQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|regexpQuery
operator|.
name|getField
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"name.first"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRegexpQuery
specifier|public
name|void
name|testRegexpQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/regexp.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|RegexpQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|RegexpQuery
name|regexpQuery
init|=
operator|(
name|RegexpQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|regexpQuery
operator|.
name|getField
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"name.first"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRegexpFilteredQuery
specifier|public
name|void
name|testRegexpFilteredQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/regexp-filter.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|XFilteredQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|Filter
name|filter
init|=
operator|(
operator|(
name|XFilteredQuery
operator|)
name|parsedQuery
operator|)
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|filter
argument_list|,
name|instanceOf
argument_list|(
name|RegexpFilter
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|RegexpFilter
name|regexpFilter
init|=
operator|(
name|RegexpFilter
operator|)
name|filter
decl_stmt|;
name|assertThat
argument_list|(
name|regexpFilter
operator|.
name|field
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"name.first"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|regexpFilter
operator|.
name|regexp
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"s.*y"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNamedRegexpFilteredQuery
specifier|public
name|void
name|testNamedRegexpFilteredQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/regexp-filter-named.json"
argument_list|)
decl_stmt|;
name|ParsedQuery
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
operator|.
name|namedFilters
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|"test"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
operator|.
name|query
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|XFilteredQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|Filter
name|filter
init|=
operator|(
operator|(
name|XFilteredQuery
operator|)
name|parsedQuery
operator|.
name|query
argument_list|()
operator|)
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|filter
argument_list|,
name|instanceOf
argument_list|(
name|RegexpFilter
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|RegexpFilter
name|regexpFilter
init|=
operator|(
name|RegexpFilter
operator|)
name|filter
decl_stmt|;
name|assertThat
argument_list|(
name|regexpFilter
operator|.
name|field
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"name.first"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|regexpFilter
operator|.
name|regexp
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"s.*y"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRegexpWithFlagsFilteredQuery
specifier|public
name|void
name|testRegexpWithFlagsFilteredQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/regexp-filter-flags.json"
argument_list|)
decl_stmt|;
name|ParsedQuery
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
operator|.
name|query
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|XFilteredQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|Filter
name|filter
init|=
operator|(
operator|(
name|XFilteredQuery
operator|)
name|parsedQuery
operator|.
name|query
argument_list|()
operator|)
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|filter
argument_list|,
name|instanceOf
argument_list|(
name|RegexpFilter
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|RegexpFilter
name|regexpFilter
init|=
operator|(
name|RegexpFilter
operator|)
name|filter
decl_stmt|;
name|assertThat
argument_list|(
name|regexpFilter
operator|.
name|field
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"name.first"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|regexpFilter
operator|.
name|regexp
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"s.*y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|regexpFilter
operator|.
name|flags
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|INTERSECTION
operator|.
name|value
argument_list|()
operator||
name|COMPLEMENT
operator|.
name|value
argument_list|()
operator||
name|EMPTY
operator|.
name|value
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNamedAndCachedRegexpWithFlagsFilteredQuery
specifier|public
name|void
name|testNamedAndCachedRegexpWithFlagsFilteredQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/regexp-filter-flags-named-cached.json"
argument_list|)
decl_stmt|;
name|ParsedQuery
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
operator|.
name|query
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|XFilteredQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|Filter
name|filter
init|=
operator|(
operator|(
name|XFilteredQuery
operator|)
name|parsedQuery
operator|.
name|query
argument_list|()
operator|)
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|filter
argument_list|,
name|instanceOf
argument_list|(
name|CacheKeyFilter
operator|.
name|Wrapper
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|CacheKeyFilter
operator|.
name|Wrapper
name|wrapper
init|=
operator|(
name|CacheKeyFilter
operator|.
name|Wrapper
operator|)
name|filter
decl_stmt|;
name|assertThat
argument_list|(
operator|new
name|BytesRef
argument_list|(
name|wrapper
operator|.
name|cacheKey
argument_list|()
operator|.
name|bytes
argument_list|()
argument_list|)
operator|.
name|utf8ToString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"key"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|wrapper
operator|.
name|wrappedFilter
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|RegexpFilter
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|RegexpFilter
name|regexpFilter
init|=
operator|(
name|RegexpFilter
operator|)
name|wrapper
operator|.
name|wrappedFilter
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|regexpFilter
operator|.
name|field
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"name.first"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|regexpFilter
operator|.
name|regexp
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"s.*y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|regexpFilter
operator|.
name|flags
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|INTERSECTION
operator|.
name|value
argument_list|()
operator||
name|COMPLEMENT
operator|.
name|value
argument_list|()
operator||
name|EMPTY
operator|.
name|value
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRegexpBoostQuery
specifier|public
name|void
name|testRegexpBoostQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/regexp-boost.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|RegexpQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|RegexpQuery
name|regexpQuery
init|=
operator|(
name|RegexpQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|regexpQuery
operator|.
name|getField
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"name.first"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|regexpQuery
operator|.
name|getBoost
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1.2f
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWildcardQueryBuilder
specifier|public
name|void
name|testWildcardQueryBuilder
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|wildcardQuery
argument_list|(
literal|"name.first"
argument_list|,
literal|"sh*"
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|WildcardQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|WildcardQuery
name|wildcardQuery
init|=
operator|(
name|WildcardQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|wildcardQuery
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"sh*"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWildcardQuery
specifier|public
name|void
name|testWildcardQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/wildcard.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|WildcardQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|WildcardQuery
name|wildcardQuery
init|=
operator|(
name|WildcardQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|wildcardQuery
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"sh*"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWildcardBoostQuery
specifier|public
name|void
name|testWildcardBoostQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/wildcard-boost.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|WildcardQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|WildcardQuery
name|wildcardQuery
init|=
operator|(
name|WildcardQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|wildcardQuery
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"sh*"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|double
operator|)
name|wildcardQuery
operator|.
name|getBoost
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|1.2
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRangeQueryBuilder
specifier|public
name|void
name|testRangeQueryBuilder
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|rangeQuery
argument_list|(
literal|"age"
argument_list|)
operator|.
name|from
argument_list|(
literal|23
argument_list|)
operator|.
name|to
argument_list|(
literal|54
argument_list|)
operator|.
name|includeLower
argument_list|(
literal|true
argument_list|)
operator|.
name|includeUpper
argument_list|(
literal|false
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
comment|// since age is automatically registered in data, we encode it as numeric
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|NumericRangeQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|NumericRangeQuery
name|rangeQuery
init|=
operator|(
name|NumericRangeQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|rangeQuery
operator|.
name|getField
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"age"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rangeQuery
operator|.
name|getMin
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|23
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rangeQuery
operator|.
name|getMax
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|54
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rangeQuery
operator|.
name|includesMin
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rangeQuery
operator|.
name|includesMax
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRangeQuery
specifier|public
name|void
name|testRangeQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/range.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
comment|// since age is automatically registered in data, we encode it as numeric
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|NumericRangeQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|NumericRangeQuery
name|rangeQuery
init|=
operator|(
name|NumericRangeQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|rangeQuery
operator|.
name|getField
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"age"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rangeQuery
operator|.
name|getMin
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|23
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rangeQuery
operator|.
name|getMax
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|54
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rangeQuery
operator|.
name|includesMin
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rangeQuery
operator|.
name|includesMax
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRange2Query
specifier|public
name|void
name|testRange2Query
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/range2.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
comment|// since age is automatically registered in data, we encode it as numeric
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|NumericRangeQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|NumericRangeQuery
name|rangeQuery
init|=
operator|(
name|NumericRangeQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|rangeQuery
operator|.
name|getField
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"age"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rangeQuery
operator|.
name|getMin
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|23
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rangeQuery
operator|.
name|getMax
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|54
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rangeQuery
operator|.
name|includesMin
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rangeQuery
operator|.
name|includesMax
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRangeFilteredQueryBuilder
specifier|public
name|void
name|testRangeFilteredQueryBuilder
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|filteredQuery
argument_list|(
name|termQuery
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay"
argument_list|)
argument_list|,
name|rangeFilter
argument_list|(
literal|"age"
argument_list|)
operator|.
name|from
argument_list|(
literal|23
argument_list|)
operator|.
name|to
argument_list|(
literal|54
argument_list|)
operator|.
name|includeLower
argument_list|(
literal|true
argument_list|)
operator|.
name|includeUpper
argument_list|(
literal|false
argument_list|)
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
comment|// since age is automatically registered in data, we encode it as numeric
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|XFilteredQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|Filter
name|filter
init|=
operator|(
operator|(
name|XFilteredQuery
operator|)
name|parsedQuery
operator|)
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|filter
argument_list|,
name|instanceOf
argument_list|(
name|NumericRangeFilter
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|NumericRangeFilter
name|rangeFilter
init|=
operator|(
name|NumericRangeFilter
operator|)
name|filter
decl_stmt|;
name|assertThat
argument_list|(
name|rangeFilter
operator|.
name|getField
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"age"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rangeFilter
operator|.
name|getMin
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|23
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rangeFilter
operator|.
name|getMax
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|54
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rangeFilter
operator|.
name|includesMin
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rangeFilter
operator|.
name|includesMax
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRangeFilteredQuery
specifier|public
name|void
name|testRangeFilteredQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/range-filter.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
comment|// since age is automatically registered in data, we encode it as numeric
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|XFilteredQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|Filter
name|filter
init|=
operator|(
operator|(
name|XFilteredQuery
operator|)
name|parsedQuery
operator|)
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|filter
argument_list|,
name|instanceOf
argument_list|(
name|NumericRangeFilter
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|NumericRangeFilter
name|rangeFilter
init|=
operator|(
name|NumericRangeFilter
operator|)
name|filter
decl_stmt|;
name|assertThat
argument_list|(
name|rangeFilter
operator|.
name|getField
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"age"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rangeFilter
operator|.
name|getMin
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|23
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rangeFilter
operator|.
name|getMax
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|54
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rangeFilter
operator|.
name|includesMin
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rangeFilter
operator|.
name|includesMax
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRangeNamedFilteredQuery
specifier|public
name|void
name|testRangeNamedFilteredQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/range-filter-named.json"
argument_list|)
decl_stmt|;
name|ParsedQuery
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
operator|.
name|namedFilters
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|"test"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
operator|.
name|query
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|XFilteredQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|Filter
name|filter
init|=
operator|(
operator|(
name|XFilteredQuery
operator|)
name|parsedQuery
operator|.
name|query
argument_list|()
operator|)
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|filter
argument_list|,
name|instanceOf
argument_list|(
name|NumericRangeFilter
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|NumericRangeFilter
name|rangeFilter
init|=
operator|(
name|NumericRangeFilter
operator|)
name|filter
decl_stmt|;
name|assertThat
argument_list|(
name|rangeFilter
operator|.
name|getField
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"age"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rangeFilter
operator|.
name|getMin
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|23
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rangeFilter
operator|.
name|getMax
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|54
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rangeFilter
operator|.
name|includesMin
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rangeFilter
operator|.
name|includesMax
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRangeFilteredQueryBuilder_executionFieldData
specifier|public
name|void
name|testRangeFilteredQueryBuilder_executionFieldData
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|filteredQuery
argument_list|(
name|termQuery
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay"
argument_list|)
argument_list|,
name|rangeFilter
argument_list|(
literal|"age"
argument_list|)
operator|.
name|from
argument_list|(
literal|23
argument_list|)
operator|.
name|to
argument_list|(
literal|54
argument_list|)
operator|.
name|includeLower
argument_list|(
literal|true
argument_list|)
operator|.
name|includeUpper
argument_list|(
literal|false
argument_list|)
operator|.
name|setExecution
argument_list|(
literal|"fielddata"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|XFilteredQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|Filter
name|filter
init|=
operator|(
operator|(
name|XFilteredQuery
operator|)
name|parsedQuery
operator|)
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|filter
argument_list|,
name|instanceOf
argument_list|(
name|NumericRangeFieldDataFilter
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|NumericRangeFieldDataFilter
argument_list|<
name|Number
argument_list|>
name|rangeFilter
init|=
operator|(
name|NumericRangeFieldDataFilter
argument_list|<
name|Number
argument_list|>
operator|)
name|filter
decl_stmt|;
name|assertThat
argument_list|(
name|rangeFilter
operator|.
name|getField
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"age"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rangeFilter
operator|.
name|getLowerVal
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|23
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rangeFilter
operator|.
name|getUpperVal
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|54
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rangeFilter
operator|.
name|isIncludeLower
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rangeFilter
operator|.
name|isIncludeUpper
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBoolFilteredQueryBuilder
specifier|public
name|void
name|testBoolFilteredQueryBuilder
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|filteredQuery
argument_list|(
name|termQuery
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay"
argument_list|)
argument_list|,
name|boolFilter
argument_list|()
operator|.
name|must
argument_list|(
name|termFilter
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay1"
argument_list|)
argument_list|,
name|termFilter
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay4"
argument_list|)
argument_list|)
operator|.
name|mustNot
argument_list|(
name|termFilter
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay2"
argument_list|)
argument_list|)
operator|.
name|should
argument_list|(
name|termFilter
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay3"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|XFilteredQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|XFilteredQuery
name|filteredQuery
init|=
operator|(
name|XFilteredQuery
operator|)
name|parsedQuery
decl_stmt|;
name|XBooleanFilter
name|booleanFilter
init|=
operator|(
name|XBooleanFilter
operator|)
name|filteredQuery
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|FilterClause
argument_list|>
name|iterator
init|=
name|booleanFilter
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|iterator
operator|.
name|hasNext
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|FilterClause
name|clause
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|clause
operator|.
name|getOccur
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermFilter
operator|)
name|clause
operator|.
name|getFilter
argument_list|()
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|iterator
operator|.
name|hasNext
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|clause
operator|=
name|iterator
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|clause
operator|.
name|getOccur
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermFilter
operator|)
name|clause
operator|.
name|getFilter
argument_list|()
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay4"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|iterator
operator|.
name|hasNext
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|clause
operator|=
name|iterator
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|clause
operator|.
name|getOccur
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST_NOT
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermFilter
operator|)
name|clause
operator|.
name|getFilter
argument_list|()
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|iterator
operator|.
name|hasNext
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|clause
operator|=
name|iterator
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|clause
operator|.
name|getOccur
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermFilter
operator|)
name|clause
operator|.
name|getFilter
argument_list|()
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay3"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|iterator
operator|.
name|hasNext
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBoolFilteredQuery
specifier|public
name|void
name|testBoolFilteredQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/bool-filter.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|XFilteredQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|XFilteredQuery
name|filteredQuery
init|=
operator|(
name|XFilteredQuery
operator|)
name|parsedQuery
decl_stmt|;
name|XBooleanFilter
name|booleanFilter
init|=
operator|(
name|XBooleanFilter
operator|)
name|filteredQuery
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|FilterClause
argument_list|>
name|iterator
init|=
name|booleanFilter
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|iterator
operator|.
name|hasNext
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|FilterClause
name|clause
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|clause
operator|.
name|getOccur
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermFilter
operator|)
name|clause
operator|.
name|getFilter
argument_list|()
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|iterator
operator|.
name|hasNext
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|clause
operator|=
name|iterator
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|clause
operator|.
name|getOccur
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermFilter
operator|)
name|clause
operator|.
name|getFilter
argument_list|()
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay4"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|iterator
operator|.
name|hasNext
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|clause
operator|=
name|iterator
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|clause
operator|.
name|getOccur
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST_NOT
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermFilter
operator|)
name|clause
operator|.
name|getFilter
argument_list|()
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|iterator
operator|.
name|hasNext
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|clause
operator|=
name|iterator
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|clause
operator|.
name|getOccur
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermFilter
operator|)
name|clause
operator|.
name|getFilter
argument_list|()
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay3"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|iterator
operator|.
name|hasNext
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAndFilteredQueryBuilder
specifier|public
name|void
name|testAndFilteredQueryBuilder
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|filteredQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|,
name|andFilter
argument_list|(
name|termFilter
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay1"
argument_list|)
argument_list|,
name|termFilter
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay4"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|XConstantScoreQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|XConstantScoreQuery
name|constantScoreQuery
init|=
operator|(
name|XConstantScoreQuery
operator|)
name|parsedQuery
decl_stmt|;
name|AndFilter
name|andFilter
init|=
operator|(
name|AndFilter
operator|)
name|constantScoreQuery
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|andFilter
operator|.
name|filters
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermFilter
operator|)
name|andFilter
operator|.
name|filters
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermFilter
operator|)
name|andFilter
operator|.
name|filters
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay4"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAndFilteredQuery
specifier|public
name|void
name|testAndFilteredQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/and-filter.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|XFilteredQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|XFilteredQuery
name|filteredQuery
init|=
operator|(
name|XFilteredQuery
operator|)
name|parsedQuery
decl_stmt|;
name|AndFilter
name|andFilter
init|=
operator|(
name|AndFilter
operator|)
name|filteredQuery
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|andFilter
operator|.
name|filters
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermFilter
operator|)
name|andFilter
operator|.
name|filters
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermFilter
operator|)
name|andFilter
operator|.
name|filters
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay4"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAndNamedFilteredQuery
specifier|public
name|void
name|testAndNamedFilteredQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/and-filter-named.json"
argument_list|)
decl_stmt|;
name|ParsedQuery
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
operator|.
name|namedFilters
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|"test"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
operator|.
name|query
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|XFilteredQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|XFilteredQuery
name|filteredQuery
init|=
operator|(
name|XFilteredQuery
operator|)
name|parsedQuery
operator|.
name|query
argument_list|()
decl_stmt|;
name|AndFilter
name|andFilter
init|=
operator|(
name|AndFilter
operator|)
name|filteredQuery
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|andFilter
operator|.
name|filters
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermFilter
operator|)
name|andFilter
operator|.
name|filters
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermFilter
operator|)
name|andFilter
operator|.
name|filters
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay4"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAndFilteredQuery2
specifier|public
name|void
name|testAndFilteredQuery2
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/and-filter2.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|XFilteredQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|XFilteredQuery
name|filteredQuery
init|=
operator|(
name|XFilteredQuery
operator|)
name|parsedQuery
decl_stmt|;
name|AndFilter
name|andFilter
init|=
operator|(
name|AndFilter
operator|)
name|filteredQuery
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|andFilter
operator|.
name|filters
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermFilter
operator|)
name|andFilter
operator|.
name|filters
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermFilter
operator|)
name|andFilter
operator|.
name|filters
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay4"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOrFilteredQueryBuilder
specifier|public
name|void
name|testOrFilteredQueryBuilder
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|filteredQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|,
name|orFilter
argument_list|(
name|termFilter
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay1"
argument_list|)
argument_list|,
name|termFilter
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay4"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|XConstantScoreQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|XConstantScoreQuery
name|constantScoreQuery
init|=
operator|(
name|XConstantScoreQuery
operator|)
name|parsedQuery
decl_stmt|;
name|OrFilter
name|andFilter
init|=
operator|(
name|OrFilter
operator|)
name|constantScoreQuery
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|andFilter
operator|.
name|filters
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermFilter
operator|)
name|andFilter
operator|.
name|filters
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermFilter
operator|)
name|andFilter
operator|.
name|filters
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay4"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOrFilteredQuery
specifier|public
name|void
name|testOrFilteredQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/or-filter.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|XFilteredQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|XFilteredQuery
name|filteredQuery
init|=
operator|(
name|XFilteredQuery
operator|)
name|parsedQuery
decl_stmt|;
name|OrFilter
name|orFilter
init|=
operator|(
name|OrFilter
operator|)
name|filteredQuery
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|orFilter
operator|.
name|filters
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermFilter
operator|)
name|orFilter
operator|.
name|filters
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermFilter
operator|)
name|orFilter
operator|.
name|filters
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay4"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOrFilteredQuery2
specifier|public
name|void
name|testOrFilteredQuery2
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/or-filter2.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|XFilteredQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|XFilteredQuery
name|filteredQuery
init|=
operator|(
name|XFilteredQuery
operator|)
name|parsedQuery
decl_stmt|;
name|OrFilter
name|orFilter
init|=
operator|(
name|OrFilter
operator|)
name|filteredQuery
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|orFilter
operator|.
name|filters
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermFilter
operator|)
name|orFilter
operator|.
name|filters
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermFilter
operator|)
name|orFilter
operator|.
name|filters
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay4"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNotFilteredQueryBuilder
specifier|public
name|void
name|testNotFilteredQueryBuilder
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|filteredQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|,
name|notFilter
argument_list|(
name|termFilter
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay1"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|XConstantScoreQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|XConstantScoreQuery
name|constantScoreQuery
init|=
operator|(
name|XConstantScoreQuery
operator|)
name|parsedQuery
decl_stmt|;
name|NotFilter
name|notFilter
init|=
operator|(
name|NotFilter
operator|)
name|constantScoreQuery
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermFilter
operator|)
name|notFilter
operator|.
name|filter
argument_list|()
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNotFilteredQuery
specifier|public
name|void
name|testNotFilteredQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/not-filter.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|XFilteredQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|XFilteredQuery
name|filteredQuery
init|=
operator|(
name|XFilteredQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermQuery
operator|)
name|filteredQuery
operator|.
name|getQuery
argument_list|()
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|NotFilter
name|notFilter
init|=
operator|(
name|NotFilter
operator|)
name|filteredQuery
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermFilter
operator|)
name|notFilter
operator|.
name|filter
argument_list|()
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNotFilteredQuery2
specifier|public
name|void
name|testNotFilteredQuery2
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/not-filter2.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|XFilteredQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|XFilteredQuery
name|filteredQuery
init|=
operator|(
name|XFilteredQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermQuery
operator|)
name|filteredQuery
operator|.
name|getQuery
argument_list|()
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|NotFilter
name|notFilter
init|=
operator|(
name|NotFilter
operator|)
name|filteredQuery
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermFilter
operator|)
name|notFilter
operator|.
name|filter
argument_list|()
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNotFilteredQuery3
specifier|public
name|void
name|testNotFilteredQuery3
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/not-filter3.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|XFilteredQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|XFilteredQuery
name|filteredQuery
init|=
operator|(
name|XFilteredQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermQuery
operator|)
name|filteredQuery
operator|.
name|getQuery
argument_list|()
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|NotFilter
name|notFilter
init|=
operator|(
name|NotFilter
operator|)
name|filteredQuery
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermFilter
operator|)
name|notFilter
operator|.
name|filter
argument_list|()
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBoostingQueryBuilder
specifier|public
name|void
name|testBoostingQueryBuilder
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|boostingQuery
argument_list|()
operator|.
name|positive
argument_list|(
name|termQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"value1"
argument_list|)
argument_list|)
operator|.
name|negative
argument_list|(
name|termQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"value2"
argument_list|)
argument_list|)
operator|.
name|negativeBoost
argument_list|(
literal|0.2f
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|BoostingQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBoostingQuery
specifier|public
name|void
name|testBoostingQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/boosting-query.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|BoostingQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testQueryStringFuzzyNumeric
specifier|public
name|void
name|testQueryStringFuzzyNumeric
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/query2.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|NumericRangeQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|NumericRangeQuery
name|fuzzyQuery
init|=
operator|(
name|NumericRangeQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|fuzzyQuery
operator|.
name|getMin
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|12l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|fuzzyQuery
operator|.
name|getMax
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|12l
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBoolQueryBuilder
specifier|public
name|void
name|testBoolQueryBuilder
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|boolQuery
argument_list|()
operator|.
name|must
argument_list|(
name|termQuery
argument_list|(
literal|"content"
argument_list|,
literal|"test1"
argument_list|)
argument_list|)
operator|.
name|must
argument_list|(
name|termQuery
argument_list|(
literal|"content"
argument_list|,
literal|"test4"
argument_list|)
argument_list|)
operator|.
name|mustNot
argument_list|(
name|termQuery
argument_list|(
literal|"content"
argument_list|,
literal|"test2"
argument_list|)
argument_list|)
operator|.
name|should
argument_list|(
name|termQuery
argument_list|(
literal|"content"
argument_list|,
literal|"test3"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|BooleanQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|BooleanQuery
name|booleanQuery
init|=
operator|(
name|BooleanQuery
operator|)
name|parsedQuery
decl_stmt|;
name|BooleanClause
index|[]
name|clauses
init|=
name|booleanQuery
operator|.
name|getClauses
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|clauses
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermQuery
operator|)
name|clauses
index|[
literal|0
index|]
operator|.
name|getQuery
argument_list|()
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"content"
argument_list|,
literal|"test1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clauses
index|[
literal|0
index|]
operator|.
name|getOccur
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermQuery
operator|)
name|clauses
index|[
literal|1
index|]
operator|.
name|getQuery
argument_list|()
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"content"
argument_list|,
literal|"test4"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clauses
index|[
literal|1
index|]
operator|.
name|getOccur
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermQuery
operator|)
name|clauses
index|[
literal|2
index|]
operator|.
name|getQuery
argument_list|()
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"content"
argument_list|,
literal|"test2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clauses
index|[
literal|2
index|]
operator|.
name|getOccur
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST_NOT
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermQuery
operator|)
name|clauses
index|[
literal|3
index|]
operator|.
name|getQuery
argument_list|()
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"content"
argument_list|,
literal|"test3"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clauses
index|[
literal|3
index|]
operator|.
name|getOccur
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBoolQuery
specifier|public
name|void
name|testBoolQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/bool.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|BooleanQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|BooleanQuery
name|booleanQuery
init|=
operator|(
name|BooleanQuery
operator|)
name|parsedQuery
decl_stmt|;
name|BooleanClause
index|[]
name|clauses
init|=
name|booleanQuery
operator|.
name|getClauses
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|clauses
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermQuery
operator|)
name|clauses
index|[
literal|0
index|]
operator|.
name|getQuery
argument_list|()
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"content"
argument_list|,
literal|"test1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clauses
index|[
literal|0
index|]
operator|.
name|getOccur
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermQuery
operator|)
name|clauses
index|[
literal|1
index|]
operator|.
name|getQuery
argument_list|()
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"content"
argument_list|,
literal|"test4"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clauses
index|[
literal|1
index|]
operator|.
name|getOccur
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermQuery
operator|)
name|clauses
index|[
literal|2
index|]
operator|.
name|getQuery
argument_list|()
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"content"
argument_list|,
literal|"test2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clauses
index|[
literal|2
index|]
operator|.
name|getOccur
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST_NOT
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermQuery
operator|)
name|clauses
index|[
literal|3
index|]
operator|.
name|getQuery
argument_list|()
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"content"
argument_list|,
literal|"test3"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clauses
index|[
literal|3
index|]
operator|.
name|getOccur
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTermsQueryBuilder
specifier|public
name|void
name|testTermsQueryBuilder
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|termsQuery
argument_list|(
literal|"name.first"
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"shay"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|BooleanQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|BooleanQuery
name|booleanQuery
init|=
operator|(
name|BooleanQuery
operator|)
name|parsedQuery
decl_stmt|;
name|BooleanClause
index|[]
name|clauses
init|=
name|booleanQuery
operator|.
name|getClauses
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|clauses
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermQuery
operator|)
name|clauses
index|[
literal|0
index|]
operator|.
name|getQuery
argument_list|()
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clauses
index|[
literal|0
index|]
operator|.
name|getOccur
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermQuery
operator|)
name|clauses
index|[
literal|1
index|]
operator|.
name|getQuery
argument_list|()
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clauses
index|[
literal|1
index|]
operator|.
name|getOccur
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTermsQuery
specifier|public
name|void
name|testTermsQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/terms-query.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|BooleanQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|BooleanQuery
name|booleanQuery
init|=
operator|(
name|BooleanQuery
operator|)
name|parsedQuery
decl_stmt|;
name|BooleanClause
index|[]
name|clauses
init|=
name|booleanQuery
operator|.
name|getClauses
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|clauses
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermQuery
operator|)
name|clauses
index|[
literal|0
index|]
operator|.
name|getQuery
argument_list|()
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clauses
index|[
literal|0
index|]
operator|.
name|getOccur
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermQuery
operator|)
name|clauses
index|[
literal|1
index|]
operator|.
name|getQuery
argument_list|()
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clauses
index|[
literal|1
index|]
operator|.
name|getOccur
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInQuery
specifier|public
name|void
name|testInQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|termsQuery
argument_list|(
literal|"name.first"
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"test1"
argument_list|,
literal|"test2"
argument_list|,
literal|"test3"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|BooleanQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|BooleanQuery
name|booleanQuery
init|=
operator|(
name|BooleanQuery
operator|)
name|parsedQuery
decl_stmt|;
name|BooleanClause
index|[]
name|clauses
init|=
name|booleanQuery
operator|.
name|getClauses
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|clauses
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermQuery
operator|)
name|clauses
index|[
literal|0
index|]
operator|.
name|getQuery
argument_list|()
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"test1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clauses
index|[
literal|0
index|]
operator|.
name|getOccur
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermQuery
operator|)
name|clauses
index|[
literal|1
index|]
operator|.
name|getQuery
argument_list|()
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"test2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clauses
index|[
literal|1
index|]
operator|.
name|getOccur
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermQuery
operator|)
name|clauses
index|[
literal|2
index|]
operator|.
name|getQuery
argument_list|()
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"test3"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clauses
index|[
literal|2
index|]
operator|.
name|getOccur
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFilteredQueryBuilder
specifier|public
name|void
name|testFilteredQueryBuilder
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|filteredQuery
argument_list|(
name|termQuery
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay"
argument_list|)
argument_list|,
name|termFilter
argument_list|(
literal|"name.last"
argument_list|,
literal|"banon"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|XFilteredQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|XFilteredQuery
name|filteredQuery
init|=
operator|(
name|XFilteredQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermQuery
operator|)
name|filteredQuery
operator|.
name|getQuery
argument_list|()
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermFilter
operator|)
name|filteredQuery
operator|.
name|getFilter
argument_list|()
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.last"
argument_list|,
literal|"banon"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFilteredQuery
specifier|public
name|void
name|testFilteredQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/filtered-query.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|XFilteredQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|XFilteredQuery
name|filteredQuery
init|=
operator|(
name|XFilteredQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermQuery
operator|)
name|filteredQuery
operator|.
name|getQuery
argument_list|()
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermFilter
operator|)
name|filteredQuery
operator|.
name|getFilter
argument_list|()
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.last"
argument_list|,
literal|"banon"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFilteredQuery2
specifier|public
name|void
name|testFilteredQuery2
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/filtered-query2.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|XFilteredQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|XFilteredQuery
name|filteredQuery
init|=
operator|(
name|XFilteredQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermQuery
operator|)
name|filteredQuery
operator|.
name|getQuery
argument_list|()
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermFilter
operator|)
name|filteredQuery
operator|.
name|getFilter
argument_list|()
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.last"
argument_list|,
literal|"banon"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFilteredQuery3
specifier|public
name|void
name|testFilteredQuery3
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/filtered-query3.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|XFilteredQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|XFilteredQuery
name|filteredQuery
init|=
operator|(
name|XFilteredQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermQuery
operator|)
name|filteredQuery
operator|.
name|getQuery
argument_list|()
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Filter
name|filter
init|=
name|filteredQuery
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|filter
argument_list|,
name|instanceOf
argument_list|(
name|NumericRangeFilter
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|NumericRangeFilter
name|rangeFilter
init|=
operator|(
name|NumericRangeFilter
operator|)
name|filter
decl_stmt|;
name|assertThat
argument_list|(
name|rangeFilter
operator|.
name|getField
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"age"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rangeFilter
operator|.
name|getMin
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|23
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|rangeFilter
operator|.
name|getMax
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|54
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFilteredQuery4
specifier|public
name|void
name|testFilteredQuery4
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/filtered-query4.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|XFilteredQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|XFilteredQuery
name|filteredQuery
init|=
operator|(
name|XFilteredQuery
operator|)
name|parsedQuery
decl_stmt|;
name|WildcardQuery
name|wildcardQuery
init|=
operator|(
name|WildcardQuery
operator|)
name|filteredQuery
operator|.
name|getQuery
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|wildcardQuery
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"sh*"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|double
operator|)
name|wildcardQuery
operator|.
name|getBoost
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|1.1
argument_list|,
literal|0.001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermFilter
operator|)
name|filteredQuery
operator|.
name|getFilter
argument_list|()
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.last"
argument_list|,
literal|"banon"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLimitFilter
specifier|public
name|void
name|testLimitFilter
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/limit-filter.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|XFilteredQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|XFilteredQuery
name|filteredQuery
init|=
operator|(
name|XFilteredQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|filteredQuery
operator|.
name|getFilter
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|LimitFilter
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|LimitFilter
operator|)
name|filteredQuery
operator|.
name|getFilter
argument_list|()
operator|)
operator|.
name|getLimit
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filteredQuery
operator|.
name|getQuery
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|TermQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermQuery
operator|)
name|filteredQuery
operator|.
name|getQuery
argument_list|()
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTermFilterQuery
specifier|public
name|void
name|testTermFilterQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/term-filter.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|XFilteredQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|XFilteredQuery
name|filteredQuery
init|=
operator|(
name|XFilteredQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|filteredQuery
operator|.
name|getFilter
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|TermFilter
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|TermFilter
name|termFilter
init|=
operator|(
name|TermFilter
operator|)
name|filteredQuery
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|termFilter
operator|.
name|getTerm
argument_list|()
operator|.
name|field
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"name.last"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|termFilter
operator|.
name|getTerm
argument_list|()
operator|.
name|text
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"banon"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTermNamedFilterQuery
specifier|public
name|void
name|testTermNamedFilterQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/term-filter-named.json"
argument_list|)
decl_stmt|;
name|ParsedQuery
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
operator|.
name|namedFilters
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|"test"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
operator|.
name|query
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|XFilteredQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|XFilteredQuery
name|filteredQuery
init|=
operator|(
name|XFilteredQuery
operator|)
name|parsedQuery
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|filteredQuery
operator|.
name|getFilter
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|TermFilter
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|TermFilter
name|termFilter
init|=
operator|(
name|TermFilter
operator|)
name|filteredQuery
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|termFilter
operator|.
name|getTerm
argument_list|()
operator|.
name|field
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"name.last"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|termFilter
operator|.
name|getTerm
argument_list|()
operator|.
name|text
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"banon"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTermsFilterQueryBuilder
specifier|public
name|void
name|testTermsFilterQueryBuilder
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|filteredQuery
argument_list|(
name|termQuery
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay"
argument_list|)
argument_list|,
name|termsFilter
argument_list|(
literal|"name.last"
argument_list|,
literal|"banon"
argument_list|,
literal|"kimchy"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|XFilteredQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|XFilteredQuery
name|filteredQuery
init|=
operator|(
name|XFilteredQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|filteredQuery
operator|.
name|getFilter
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|TermsFilter
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|TermsFilter
name|termsFilter
init|=
operator|(
name|TermsFilter
operator|)
name|filteredQuery
operator|.
name|getFilter
argument_list|()
decl_stmt|;
comment|//assertThat(termsFilter.getTerms().length, equalTo(2));
comment|//assertThat(termsFilter.getTerms()[0].text(), equalTo("banon"));
block|}
annotation|@
name|Test
DECL|method|testTermsFilterQuery
specifier|public
name|void
name|testTermsFilterQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/terms-filter.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|XFilteredQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|XFilteredQuery
name|filteredQuery
init|=
operator|(
name|XFilteredQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|filteredQuery
operator|.
name|getFilter
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|TermsFilter
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|TermsFilter
name|termsFilter
init|=
operator|(
name|TermsFilter
operator|)
name|filteredQuery
operator|.
name|getFilter
argument_list|()
decl_stmt|;
comment|//assertThat(termsFilter.getTerms().length, equalTo(2));
comment|//assertThat(termsFilter.getTerms()[0].text(), equalTo("banon"));
block|}
annotation|@
name|Test
DECL|method|testTermsWithNameFilterQuery
specifier|public
name|void
name|testTermsWithNameFilterQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/terms-filter-named.json"
argument_list|)
decl_stmt|;
name|ParsedQuery
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
operator|.
name|namedFilters
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|"test"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
operator|.
name|query
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|XFilteredQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|XFilteredQuery
name|filteredQuery
init|=
operator|(
name|XFilteredQuery
operator|)
name|parsedQuery
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|filteredQuery
operator|.
name|getFilter
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|TermsFilter
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|TermsFilter
name|termsFilter
init|=
operator|(
name|TermsFilter
operator|)
name|filteredQuery
operator|.
name|getFilter
argument_list|()
decl_stmt|;
comment|//assertThat(termsFilter.getTerms().length, equalTo(2));
comment|//assertThat(termsFilter.getTerms()[0].text(), equalTo("banon"));
block|}
annotation|@
name|Test
DECL|method|testConstantScoreQueryBuilder
specifier|public
name|void
name|testConstantScoreQueryBuilder
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|constantScoreQuery
argument_list|(
name|termFilter
argument_list|(
literal|"name.last"
argument_list|,
literal|"banon"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|XConstantScoreQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|XConstantScoreQuery
name|constantScoreQuery
init|=
operator|(
name|XConstantScoreQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermFilter
operator|)
name|constantScoreQuery
operator|.
name|getFilter
argument_list|()
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.last"
argument_list|,
literal|"banon"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testConstantScoreQuery
specifier|public
name|void
name|testConstantScoreQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/constantScore-query.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|XConstantScoreQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|XConstantScoreQuery
name|constantScoreQuery
init|=
operator|(
name|XConstantScoreQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermFilter
operator|)
name|constantScoreQuery
operator|.
name|getFilter
argument_list|()
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.last"
argument_list|,
literal|"banon"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCustomBoostFactorQueryBuilder_withFunctionScore
specifier|public
name|void
name|testCustomBoostFactorQueryBuilder_withFunctionScore
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|functionScoreQuery
argument_list|(
name|termQuery
argument_list|(
literal|"name.last"
argument_list|,
literal|"banon"
argument_list|)
argument_list|,
name|factorFunction
argument_list|(
literal|1.3f
argument_list|)
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|FunctionScoreQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|FunctionScoreQuery
name|functionScoreQuery
init|=
operator|(
name|FunctionScoreQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermQuery
operator|)
name|functionScoreQuery
operator|.
name|getSubQuery
argument_list|()
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.last"
argument_list|,
literal|"banon"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
call|(
name|double
call|)
argument_list|(
operator|(
name|BoostScoreFunction
operator|)
name|functionScoreQuery
operator|.
name|getFunction
argument_list|()
argument_list|)
operator|.
name|getBoost
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|1.3
argument_list|,
literal|0.001
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCustomBoostFactorQueryBuilder_withFunctionScoreWithoutQueryGiven
specifier|public
name|void
name|testCustomBoostFactorQueryBuilder_withFunctionScoreWithoutQueryGiven
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|functionScoreQuery
argument_list|(
name|factorFunction
argument_list|(
literal|1.3f
argument_list|)
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|FunctionScoreQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|FunctionScoreQuery
name|functionScoreQuery
init|=
operator|(
name|FunctionScoreQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|functionScoreQuery
operator|.
name|getSubQuery
argument_list|()
operator|instanceof
name|XConstantScoreQuery
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|XConstantScoreQuery
operator|)
name|functionScoreQuery
operator|.
name|getSubQuery
argument_list|()
operator|)
operator|.
name|getFilter
argument_list|()
operator|instanceof
name|MatchAllDocsFilter
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
call|(
name|double
call|)
argument_list|(
operator|(
name|BoostScoreFunction
operator|)
name|functionScoreQuery
operator|.
name|getFunction
argument_list|()
argument_list|)
operator|.
name|getBoost
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|1.3
argument_list|,
literal|0.001
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSpanTermQueryBuilder
specifier|public
name|void
name|testSpanTermQueryBuilder
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|spanTermQuery
argument_list|(
literal|"age"
argument_list|,
literal|34
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|SpanTermQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|SpanTermQuery
name|termQuery
init|=
operator|(
name|SpanTermQuery
operator|)
name|parsedQuery
decl_stmt|;
comment|// since age is automatically registered in data, we encode it as numeric
name|assertThat
argument_list|(
name|termQuery
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"age"
argument_list|,
name|longToPrefixCoded
argument_list|(
literal|34
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSpanTermQuery
specifier|public
name|void
name|testSpanTermQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/spanTerm.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|SpanTermQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|SpanTermQuery
name|termQuery
init|=
operator|(
name|SpanTermQuery
operator|)
name|parsedQuery
decl_stmt|;
comment|// since age is automatically registered in data, we encode it as numeric
name|assertThat
argument_list|(
name|termQuery
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"age"
argument_list|,
name|longToPrefixCoded
argument_list|(
literal|34
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSpanNotQueryBuilder
specifier|public
name|void
name|testSpanNotQueryBuilder
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|spanNotQuery
argument_list|()
operator|.
name|include
argument_list|(
name|spanTermQuery
argument_list|(
literal|"age"
argument_list|,
literal|34
argument_list|)
argument_list|)
operator|.
name|exclude
argument_list|(
name|spanTermQuery
argument_list|(
literal|"age"
argument_list|,
literal|35
argument_list|)
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|SpanNotQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|SpanNotQuery
name|spanNotQuery
init|=
operator|(
name|SpanNotQuery
operator|)
name|parsedQuery
decl_stmt|;
comment|// since age is automatically registered in data, we encode it as numeric
name|assertThat
argument_list|(
operator|(
operator|(
name|SpanTermQuery
operator|)
name|spanNotQuery
operator|.
name|getInclude
argument_list|()
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"age"
argument_list|,
name|longToPrefixCoded
argument_list|(
literal|34
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|SpanTermQuery
operator|)
name|spanNotQuery
operator|.
name|getExclude
argument_list|()
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"age"
argument_list|,
name|longToPrefixCoded
argument_list|(
literal|35
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSpanNotQuery
specifier|public
name|void
name|testSpanNotQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/spanNot.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|SpanNotQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|SpanNotQuery
name|spanNotQuery
init|=
operator|(
name|SpanNotQuery
operator|)
name|parsedQuery
decl_stmt|;
comment|// since age is automatically registered in data, we encode it as numeric
name|assertThat
argument_list|(
operator|(
operator|(
name|SpanTermQuery
operator|)
name|spanNotQuery
operator|.
name|getInclude
argument_list|()
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"age"
argument_list|,
name|longToPrefixCoded
argument_list|(
literal|34
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|SpanTermQuery
operator|)
name|spanNotQuery
operator|.
name|getExclude
argument_list|()
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"age"
argument_list|,
name|longToPrefixCoded
argument_list|(
literal|35
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSpanFirstQueryBuilder
specifier|public
name|void
name|testSpanFirstQueryBuilder
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|spanFirstQuery
argument_list|(
name|spanTermQuery
argument_list|(
literal|"age"
argument_list|,
literal|34
argument_list|)
argument_list|,
literal|12
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|SpanFirstQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|SpanFirstQuery
name|spanFirstQuery
init|=
operator|(
name|SpanFirstQuery
operator|)
name|parsedQuery
decl_stmt|;
comment|// since age is automatically registered in data, we encode it as numeric
name|assertThat
argument_list|(
operator|(
operator|(
name|SpanTermQuery
operator|)
name|spanFirstQuery
operator|.
name|getMatch
argument_list|()
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"age"
argument_list|,
name|longToPrefixCoded
argument_list|(
literal|34
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|spanFirstQuery
operator|.
name|getEnd
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|12
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSpanFirstQuery
specifier|public
name|void
name|testSpanFirstQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/spanFirst.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|SpanFirstQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|SpanFirstQuery
name|spanFirstQuery
init|=
operator|(
name|SpanFirstQuery
operator|)
name|parsedQuery
decl_stmt|;
comment|// since age is automatically registered in data, we encode it as numeric
name|assertThat
argument_list|(
operator|(
operator|(
name|SpanTermQuery
operator|)
name|spanFirstQuery
operator|.
name|getMatch
argument_list|()
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"age"
argument_list|,
name|longToPrefixCoded
argument_list|(
literal|34
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|spanFirstQuery
operator|.
name|getEnd
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|12
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSpanNearQueryBuilder
specifier|public
name|void
name|testSpanNearQueryBuilder
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|spanNearQuery
argument_list|()
operator|.
name|clause
argument_list|(
name|spanTermQuery
argument_list|(
literal|"age"
argument_list|,
literal|34
argument_list|)
argument_list|)
operator|.
name|clause
argument_list|(
name|spanTermQuery
argument_list|(
literal|"age"
argument_list|,
literal|35
argument_list|)
argument_list|)
operator|.
name|clause
argument_list|(
name|spanTermQuery
argument_list|(
literal|"age"
argument_list|,
literal|36
argument_list|)
argument_list|)
operator|.
name|slop
argument_list|(
literal|12
argument_list|)
operator|.
name|inOrder
argument_list|(
literal|false
argument_list|)
operator|.
name|collectPayloads
argument_list|(
literal|false
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|SpanNearQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|SpanNearQuery
name|spanNearQuery
init|=
operator|(
name|SpanNearQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|spanNearQuery
operator|.
name|getClauses
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|SpanTermQuery
operator|)
name|spanNearQuery
operator|.
name|getClauses
argument_list|()
index|[
literal|0
index|]
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"age"
argument_list|,
name|longToPrefixCoded
argument_list|(
literal|34
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|SpanTermQuery
operator|)
name|spanNearQuery
operator|.
name|getClauses
argument_list|()
index|[
literal|1
index|]
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"age"
argument_list|,
name|longToPrefixCoded
argument_list|(
literal|35
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|SpanTermQuery
operator|)
name|spanNearQuery
operator|.
name|getClauses
argument_list|()
index|[
literal|2
index|]
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"age"
argument_list|,
name|longToPrefixCoded
argument_list|(
literal|36
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|spanNearQuery
operator|.
name|isInOrder
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSpanNearQuery
specifier|public
name|void
name|testSpanNearQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/spanNear.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|SpanNearQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|SpanNearQuery
name|spanNearQuery
init|=
operator|(
name|SpanNearQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|spanNearQuery
operator|.
name|getClauses
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|SpanTermQuery
operator|)
name|spanNearQuery
operator|.
name|getClauses
argument_list|()
index|[
literal|0
index|]
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"age"
argument_list|,
name|longToPrefixCoded
argument_list|(
literal|34
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|SpanTermQuery
operator|)
name|spanNearQuery
operator|.
name|getClauses
argument_list|()
index|[
literal|1
index|]
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"age"
argument_list|,
name|longToPrefixCoded
argument_list|(
literal|35
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|SpanTermQuery
operator|)
name|spanNearQuery
operator|.
name|getClauses
argument_list|()
index|[
literal|2
index|]
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"age"
argument_list|,
name|longToPrefixCoded
argument_list|(
literal|36
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|spanNearQuery
operator|.
name|isInOrder
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFieldMaskingSpanQuery
specifier|public
name|void
name|testFieldMaskingSpanQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/spanFieldMaskingTerm.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|SpanNearQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|SpanNearQuery
name|spanNearQuery
init|=
operator|(
name|SpanNearQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|spanNearQuery
operator|.
name|getClauses
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|SpanTermQuery
operator|)
name|spanNearQuery
operator|.
name|getClauses
argument_list|()
index|[
literal|0
index|]
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"age"
argument_list|,
name|longToPrefixCoded
argument_list|(
literal|34
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|SpanTermQuery
operator|)
name|spanNearQuery
operator|.
name|getClauses
argument_list|()
index|[
literal|1
index|]
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"age"
argument_list|,
name|longToPrefixCoded
argument_list|(
literal|35
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
call|(
name|SpanTermQuery
call|)
argument_list|(
operator|(
name|FieldMaskingSpanQuery
operator|)
name|spanNearQuery
operator|.
name|getClauses
argument_list|()
index|[
literal|2
index|]
argument_list|)
operator|.
name|getMaskedQuery
argument_list|()
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"age_1"
argument_list|,
literal|"36"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|spanNearQuery
operator|.
name|isInOrder
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSpanOrQueryBuilder
specifier|public
name|void
name|testSpanOrQueryBuilder
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|spanOrQuery
argument_list|()
operator|.
name|clause
argument_list|(
name|spanTermQuery
argument_list|(
literal|"age"
argument_list|,
literal|34
argument_list|)
argument_list|)
operator|.
name|clause
argument_list|(
name|spanTermQuery
argument_list|(
literal|"age"
argument_list|,
literal|35
argument_list|)
argument_list|)
operator|.
name|clause
argument_list|(
name|spanTermQuery
argument_list|(
literal|"age"
argument_list|,
literal|36
argument_list|)
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|SpanOrQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|SpanOrQuery
name|spanOrQuery
init|=
operator|(
name|SpanOrQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|spanOrQuery
operator|.
name|getClauses
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|SpanTermQuery
operator|)
name|spanOrQuery
operator|.
name|getClauses
argument_list|()
index|[
literal|0
index|]
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"age"
argument_list|,
name|longToPrefixCoded
argument_list|(
literal|34
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|SpanTermQuery
operator|)
name|spanOrQuery
operator|.
name|getClauses
argument_list|()
index|[
literal|1
index|]
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"age"
argument_list|,
name|longToPrefixCoded
argument_list|(
literal|35
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|SpanTermQuery
operator|)
name|spanOrQuery
operator|.
name|getClauses
argument_list|()
index|[
literal|2
index|]
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"age"
argument_list|,
name|longToPrefixCoded
argument_list|(
literal|36
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSpanOrQuery
specifier|public
name|void
name|testSpanOrQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/spanOr.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|SpanOrQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|SpanOrQuery
name|spanOrQuery
init|=
operator|(
name|SpanOrQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|spanOrQuery
operator|.
name|getClauses
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|SpanTermQuery
operator|)
name|spanOrQuery
operator|.
name|getClauses
argument_list|()
index|[
literal|0
index|]
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"age"
argument_list|,
name|longToPrefixCoded
argument_list|(
literal|34
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|SpanTermQuery
operator|)
name|spanOrQuery
operator|.
name|getClauses
argument_list|()
index|[
literal|1
index|]
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"age"
argument_list|,
name|longToPrefixCoded
argument_list|(
literal|35
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|SpanTermQuery
operator|)
name|spanOrQuery
operator|.
name|getClauses
argument_list|()
index|[
literal|2
index|]
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"age"
argument_list|,
name|longToPrefixCoded
argument_list|(
literal|36
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSpanOrQuery2
specifier|public
name|void
name|testSpanOrQuery2
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/spanOr2.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|SpanOrQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|SpanOrQuery
name|spanOrQuery
init|=
operator|(
name|SpanOrQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|spanOrQuery
operator|.
name|getClauses
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|SpanTermQuery
operator|)
name|spanOrQuery
operator|.
name|getClauses
argument_list|()
index|[
literal|0
index|]
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"age"
argument_list|,
name|longToPrefixCoded
argument_list|(
literal|34
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|SpanTermQuery
operator|)
name|spanOrQuery
operator|.
name|getClauses
argument_list|()
index|[
literal|1
index|]
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"age"
argument_list|,
name|longToPrefixCoded
argument_list|(
literal|35
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|SpanTermQuery
operator|)
name|spanOrQuery
operator|.
name|getClauses
argument_list|()
index|[
literal|2
index|]
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"age"
argument_list|,
name|longToPrefixCoded
argument_list|(
literal|36
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSpanMultiTermWildcardQuery
specifier|public
name|void
name|testSpanMultiTermWildcardQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/span-multi-term-wildcard.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|SpanMultiTermQueryWrapper
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|WildcardQuery
name|expectedWrapped
init|=
operator|new
name|WildcardQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"user"
argument_list|,
literal|"ki*y"
argument_list|)
argument_list|)
decl_stmt|;
name|expectedWrapped
operator|.
name|setBoost
argument_list|(
literal|1.08f
argument_list|)
expr_stmt|;
name|SpanMultiTermQueryWrapper
argument_list|<
name|MultiTermQuery
argument_list|>
name|wrapper
init|=
operator|(
name|SpanMultiTermQueryWrapper
argument_list|<
name|MultiTermQuery
argument_list|>
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|wrapper
argument_list|,
name|equalTo
argument_list|(
operator|new
name|SpanMultiTermQueryWrapper
argument_list|<
name|MultiTermQuery
argument_list|>
argument_list|(
name|expectedWrapped
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSpanMultiTermPrefixQuery
specifier|public
name|void
name|testSpanMultiTermPrefixQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/span-multi-term-prefix.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|SpanMultiTermQueryWrapper
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|PrefixQuery
name|expectedWrapped
init|=
operator|new
name|PrefixQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"user"
argument_list|,
literal|"ki"
argument_list|)
argument_list|)
decl_stmt|;
name|expectedWrapped
operator|.
name|setBoost
argument_list|(
literal|1.08f
argument_list|)
expr_stmt|;
name|SpanMultiTermQueryWrapper
argument_list|<
name|MultiTermQuery
argument_list|>
name|wrapper
init|=
operator|(
name|SpanMultiTermQueryWrapper
argument_list|<
name|MultiTermQuery
argument_list|>
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|wrapper
argument_list|,
name|equalTo
argument_list|(
operator|new
name|SpanMultiTermQueryWrapper
argument_list|<
name|MultiTermQuery
argument_list|>
argument_list|(
name|expectedWrapped
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSpanMultiTermFuzzyTermQuery
specifier|public
name|void
name|testSpanMultiTermFuzzyTermQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/span-multi-term-fuzzy-term.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|SpanMultiTermQueryWrapper
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|SpanMultiTermQueryWrapper
argument_list|<
name|MultiTermQuery
argument_list|>
name|wrapper
init|=
operator|(
name|SpanMultiTermQueryWrapper
argument_list|<
name|MultiTermQuery
argument_list|>
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|wrapper
operator|.
name|getField
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"user"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSpanMultiTermFuzzyRangeQuery
specifier|public
name|void
name|testSpanMultiTermFuzzyRangeQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/span-multi-term-fuzzy-range.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|SpanMultiTermQueryWrapper
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|NumericRangeQuery
argument_list|<
name|Long
argument_list|>
name|expectedWrapped
init|=
name|NumericRangeQuery
operator|.
name|newLongRange
argument_list|(
literal|"age"
argument_list|,
name|NumberFieldMapper
operator|.
name|Defaults
operator|.
name|PRECISION_STEP_64_BIT
argument_list|,
literal|7l
argument_list|,
literal|17l
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|expectedWrapped
operator|.
name|setBoost
argument_list|(
literal|2.0f
argument_list|)
expr_stmt|;
name|SpanMultiTermQueryWrapper
argument_list|<
name|MultiTermQuery
argument_list|>
name|wrapper
init|=
operator|(
name|SpanMultiTermQueryWrapper
argument_list|<
name|MultiTermQuery
argument_list|>
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|wrapper
argument_list|,
name|equalTo
argument_list|(
operator|new
name|SpanMultiTermQueryWrapper
argument_list|<
name|MultiTermQuery
argument_list|>
argument_list|(
name|expectedWrapped
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSpanMultiTermNumericRangeQuery
specifier|public
name|void
name|testSpanMultiTermNumericRangeQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/span-multi-term-range-numeric.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|SpanMultiTermQueryWrapper
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|NumericRangeQuery
argument_list|<
name|Long
argument_list|>
name|expectedWrapped
init|=
name|NumericRangeQuery
operator|.
name|newLongRange
argument_list|(
literal|"age"
argument_list|,
name|NumberFieldMapper
operator|.
name|Defaults
operator|.
name|PRECISION_STEP_64_BIT
argument_list|,
literal|10l
argument_list|,
literal|20l
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|expectedWrapped
operator|.
name|setBoost
argument_list|(
literal|2.0f
argument_list|)
expr_stmt|;
name|SpanMultiTermQueryWrapper
argument_list|<
name|MultiTermQuery
argument_list|>
name|wrapper
init|=
operator|(
name|SpanMultiTermQueryWrapper
argument_list|<
name|MultiTermQuery
argument_list|>
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|wrapper
argument_list|,
name|equalTo
argument_list|(
operator|new
name|SpanMultiTermQueryWrapper
argument_list|<
name|MultiTermQuery
argument_list|>
argument_list|(
name|expectedWrapped
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSpanMultiTermTermRangeQuery
specifier|public
name|void
name|testSpanMultiTermTermRangeQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/span-multi-term-range-term.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|SpanMultiTermQueryWrapper
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|TermRangeQuery
name|expectedWrapped
init|=
name|TermRangeQuery
operator|.
name|newStringRange
argument_list|(
literal|"user"
argument_list|,
literal|"alice"
argument_list|,
literal|"bob"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|expectedWrapped
operator|.
name|setBoost
argument_list|(
literal|2.0f
argument_list|)
expr_stmt|;
name|SpanMultiTermQueryWrapper
argument_list|<
name|MultiTermQuery
argument_list|>
name|wrapper
init|=
operator|(
name|SpanMultiTermQueryWrapper
argument_list|<
name|MultiTermQuery
argument_list|>
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|wrapper
argument_list|,
name|equalTo
argument_list|(
operator|new
name|SpanMultiTermQueryWrapper
argument_list|<
name|MultiTermQuery
argument_list|>
argument_list|(
name|expectedWrapped
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testQueryFilterBuilder
specifier|public
name|void
name|testQueryFilterBuilder
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|filteredQuery
argument_list|(
name|termQuery
argument_list|(
literal|"name.first"
argument_list|,
literal|"shay"
argument_list|)
argument_list|,
name|queryFilter
argument_list|(
name|termQuery
argument_list|(
literal|"name.last"
argument_list|,
literal|"banon"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|XFilteredQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|XFilteredQuery
name|filteredQuery
init|=
operator|(
name|XFilteredQuery
operator|)
name|parsedQuery
decl_stmt|;
name|QueryWrapperFilter
name|queryWrapperFilter
init|=
operator|(
name|QueryWrapperFilter
operator|)
name|filteredQuery
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|Field
name|field
init|=
name|QueryWrapperFilter
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"query"
argument_list|)
decl_stmt|;
name|field
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Query
name|wrappedQuery
init|=
operator|(
name|Query
operator|)
name|field
operator|.
name|get
argument_list|(
name|queryWrapperFilter
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|wrappedQuery
argument_list|,
name|instanceOf
argument_list|(
name|TermQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermQuery
operator|)
name|wrappedQuery
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.last"
argument_list|,
literal|"banon"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testQueryFilter
specifier|public
name|void
name|testQueryFilter
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/query-filter.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|XFilteredQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|XFilteredQuery
name|filteredQuery
init|=
operator|(
name|XFilteredQuery
operator|)
name|parsedQuery
decl_stmt|;
name|QueryWrapperFilter
name|queryWrapperFilter
init|=
operator|(
name|QueryWrapperFilter
operator|)
name|filteredQuery
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|Field
name|field
init|=
name|QueryWrapperFilter
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"query"
argument_list|)
decl_stmt|;
name|field
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Query
name|wrappedQuery
init|=
operator|(
name|Query
operator|)
name|field
operator|.
name|get
argument_list|(
name|queryWrapperFilter
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|wrappedQuery
argument_list|,
name|instanceOf
argument_list|(
name|TermQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermQuery
operator|)
name|wrappedQuery
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.last"
argument_list|,
literal|"banon"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFQueryFilter
specifier|public
name|void
name|testFQueryFilter
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/fquery-filter.json"
argument_list|)
decl_stmt|;
name|ParsedQuery
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
operator|.
name|namedFilters
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|"test"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
operator|.
name|query
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|XFilteredQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|XFilteredQuery
name|filteredQuery
init|=
operator|(
name|XFilteredQuery
operator|)
name|parsedQuery
operator|.
name|query
argument_list|()
decl_stmt|;
name|QueryWrapperFilter
name|queryWrapperFilter
init|=
operator|(
name|QueryWrapperFilter
operator|)
name|filteredQuery
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|Field
name|field
init|=
name|QueryWrapperFilter
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"query"
argument_list|)
decl_stmt|;
name|field
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Query
name|wrappedQuery
init|=
operator|(
name|Query
operator|)
name|field
operator|.
name|get
argument_list|(
name|queryWrapperFilter
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|wrappedQuery
argument_list|,
name|instanceOf
argument_list|(
name|TermQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermQuery
operator|)
name|wrappedQuery
operator|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name.last"
argument_list|,
literal|"banon"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMoreLikeThisBuilder
specifier|public
name|void
name|testMoreLikeThisBuilder
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|moreLikeThisQuery
argument_list|(
literal|"name.first"
argument_list|,
literal|"name.last"
argument_list|)
operator|.
name|likeText
argument_list|(
literal|"something"
argument_list|)
operator|.
name|minTermFreq
argument_list|(
literal|1
argument_list|)
operator|.
name|maxQueryTerms
argument_list|(
literal|12
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|MoreLikeThisQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|MoreLikeThisQuery
name|mltQuery
init|=
operator|(
name|MoreLikeThisQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|mltQuery
operator|.
name|getMoreLikeFields
argument_list|()
index|[
literal|0
index|]
argument_list|,
name|equalTo
argument_list|(
literal|"name.first"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|mltQuery
operator|.
name|getLikeText
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"something"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|mltQuery
operator|.
name|getMinTermFrequency
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|mltQuery
operator|.
name|getMaxQueryTerms
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|12
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMoreLikeThis
specifier|public
name|void
name|testMoreLikeThis
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/mlt.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|MoreLikeThisQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|MoreLikeThisQuery
name|mltQuery
init|=
operator|(
name|MoreLikeThisQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|mltQuery
operator|.
name|getMoreLikeFields
argument_list|()
index|[
literal|0
index|]
argument_list|,
name|equalTo
argument_list|(
literal|"name.first"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|mltQuery
operator|.
name|getMoreLikeFields
argument_list|()
index|[
literal|1
index|]
argument_list|,
name|equalTo
argument_list|(
literal|"name.last"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|mltQuery
operator|.
name|getLikeText
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"something"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|mltQuery
operator|.
name|getMinTermFrequency
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|mltQuery
operator|.
name|getMaxQueryTerms
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|12
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMoreLikeThisIds
specifier|public
name|void
name|testMoreLikeThisIds
parameter_list|()
throws|throws
name|Exception
block|{
name|MoreLikeThisQueryParser
name|parser
init|=
operator|(
name|MoreLikeThisQueryParser
operator|)
name|queryParser
operator|.
name|queryParser
argument_list|(
literal|"more_like_this"
argument_list|)
decl_stmt|;
name|parser
operator|.
name|setFetchService
argument_list|(
operator|new
name|MockMoreLikeThisFetchService
argument_list|()
argument_list|)
expr_stmt|;
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/mlt-items.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|BooleanQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|BooleanQuery
name|booleanQuery
init|=
operator|(
name|BooleanQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|booleanQuery
operator|.
name|getClauses
argument_list|()
operator|.
name|length
argument_list|,
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|BooleanClause
name|itemClause
init|=
name|booleanQuery
operator|.
name|getClauses
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|assertThat
argument_list|(
name|itemClause
operator|.
name|getOccur
argument_list|()
argument_list|,
name|is
argument_list|(
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|itemClause
operator|.
name|getQuery
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|MoreLikeThisQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|MoreLikeThisQuery
name|mltQuery
init|=
operator|(
name|MoreLikeThisQuery
operator|)
name|itemClause
operator|.
name|getQuery
argument_list|()
decl_stmt|;
comment|// check each Fields is for each item
for|for
control|(
name|int
name|id
init|=
literal|1
init|;
name|id
operator|<=
literal|4
condition|;
name|id
operator|++
control|)
block|{
name|Fields
name|fields
init|=
name|mltQuery
operator|.
name|getLikeFields
argument_list|()
index|[
name|id
operator|-
literal|1
index|]
decl_stmt|;
name|assertThat
argument_list|(
name|termsToString
argument_list|(
name|fields
operator|.
name|terms
argument_list|(
literal|"name.first"
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|id
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|termsToString
argument_list|(
name|fields
operator|.
name|terms
argument_list|(
literal|"name.last"
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|id
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|MockMoreLikeThisFetchService
specifier|private
specifier|static
class|class
name|MockMoreLikeThisFetchService
extends|extends
name|MoreLikeThisFetchService
block|{
DECL|method|MockMoreLikeThisFetchService
specifier|public
name|MockMoreLikeThisFetchService
parameter_list|()
block|{
name|super
argument_list|(
literal|null
argument_list|,
name|ImmutableSettings
operator|.
name|Builder
operator|.
name|EMPTY_SETTINGS
argument_list|)
expr_stmt|;
block|}
DECL|method|fetch
specifier|public
name|Fields
index|[]
name|fetch
parameter_list|(
name|List
argument_list|<
name|MultiGetRequest
operator|.
name|Item
argument_list|>
name|items
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Fields
argument_list|>
name|likeTexts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|MultiGetRequest
operator|.
name|Item
name|item
range|:
name|items
control|)
block|{
name|likeTexts
operator|.
name|add
argument_list|(
name|generateFields
argument_list|(
name|item
operator|.
name|fields
argument_list|()
argument_list|,
name|item
operator|.
name|id
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|likeTexts
operator|.
name|toArray
argument_list|(
name|Fields
operator|.
name|EMPTY_ARRAY
argument_list|)
return|;
block|}
block|}
DECL|method|generateFields
specifier|private
specifier|static
name|Fields
name|generateFields
parameter_list|(
name|String
index|[]
name|fieldNames
parameter_list|,
name|String
name|text
parameter_list|)
throws|throws
name|IOException
block|{
name|MemoryIndex
name|index
init|=
operator|new
name|MemoryIndex
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|fieldName
range|:
name|fieldNames
control|)
block|{
name|index
operator|.
name|addField
argument_list|(
name|fieldName
argument_list|,
name|text
argument_list|,
operator|new
name|WhitespaceAnalyzer
argument_list|(
name|Lucene
operator|.
name|VERSION
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|MultiFields
operator|.
name|getFields
argument_list|(
name|index
operator|.
name|createSearcher
argument_list|()
operator|.
name|getIndexReader
argument_list|()
argument_list|)
return|;
block|}
DECL|method|termsToString
specifier|private
specifier|static
name|String
name|termsToString
parameter_list|(
name|Terms
name|terms
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|strings
init|=
literal|""
decl_stmt|;
name|TermsEnum
name|termsEnum
init|=
name|terms
operator|.
name|iterator
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|CharsRefBuilder
name|spare
init|=
operator|new
name|CharsRefBuilder
argument_list|()
decl_stmt|;
name|BytesRef
name|text
decl_stmt|;
while|while
condition|(
operator|(
name|text
operator|=
name|termsEnum
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|spare
operator|.
name|copyUTF8Bytes
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|String
name|term
init|=
name|spare
operator|.
name|toString
argument_list|()
decl_stmt|;
name|strings
operator|+=
name|term
expr_stmt|;
block|}
return|return
name|strings
return|;
block|}
annotation|@
name|Test
DECL|method|testFuzzyLikeThisBuilder
specifier|public
name|void
name|testFuzzyLikeThisBuilder
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|fuzzyLikeThisQuery
argument_list|(
literal|"name.first"
argument_list|,
literal|"name.last"
argument_list|)
operator|.
name|likeText
argument_list|(
literal|"something"
argument_list|)
operator|.
name|maxQueryTerms
argument_list|(
literal|12
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|FuzzyLikeThisQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|parsedQuery
operator|=
name|queryParser
operator|.
name|parse
argument_list|(
name|fuzzyLikeThisQuery
argument_list|(
literal|"name.first"
argument_list|,
literal|"name.last"
argument_list|)
operator|.
name|likeText
argument_list|(
literal|"something"
argument_list|)
operator|.
name|maxQueryTerms
argument_list|(
literal|12
argument_list|)
operator|.
name|fuzziness
argument_list|(
name|Fuzziness
operator|.
name|build
argument_list|(
literal|"4"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|FuzzyLikeThisQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|Query
name|parsedQuery1
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|fuzzyLikeThisQuery
argument_list|(
literal|"name.first"
argument_list|,
literal|"name.last"
argument_list|)
operator|.
name|likeText
argument_list|(
literal|"something"
argument_list|)
operator|.
name|maxQueryTerms
argument_list|(
literal|12
argument_list|)
operator|.
name|fuzziness
argument_list|(
name|Fuzziness
operator|.
name|build
argument_list|(
literal|"4.0"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery1
argument_list|,
name|instanceOf
argument_list|(
name|FuzzyLikeThisQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|equalTo
argument_list|(
name|parsedQuery1
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|queryParser
operator|.
name|parse
argument_list|(
name|fuzzyLikeThisQuery
argument_list|(
literal|"name.first"
argument_list|,
literal|"name.last"
argument_list|)
operator|.
name|likeText
argument_list|(
literal|"something"
argument_list|)
operator|.
name|maxQueryTerms
argument_list|(
literal|12
argument_list|)
operator|.
name|fuzziness
argument_list|(
name|Fuzziness
operator|.
name|build
argument_list|(
literal|"4.1"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"exception expected - fractional edit distance"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ElasticsearchException
name|ex
parameter_list|)
block|{
comment|//
block|}
try|try
block|{
name|queryParser
operator|.
name|parse
argument_list|(
name|fuzzyLikeThisQuery
argument_list|(
literal|"name.first"
argument_list|,
literal|"name.last"
argument_list|)
operator|.
name|likeText
argument_list|(
literal|"something"
argument_list|)
operator|.
name|maxQueryTerms
argument_list|(
literal|12
argument_list|)
operator|.
name|fuzziness
argument_list|(
name|Fuzziness
operator|.
name|build
argument_list|(
literal|"-"
operator|+
name|between
argument_list|(
literal|1
argument_list|,
literal|100
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"exception expected - negative edit distance"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ElasticsearchException
name|ex
parameter_list|)
block|{
comment|//
block|}
name|String
index|[]
name|queries
init|=
operator|new
name|String
index|[]
block|{
literal|"{\"flt\": {\"fields\": [\"comment\"], \"like_text\": \"FFFdfds\",\"fuzziness\": \"4\"}}"
block|,
literal|"{\"flt\": {\"fields\": [\"comment\"], \"like_text\": \"FFFdfds\",\"fuzziness\": \"4.00000000\"}}"
block|,
literal|"{\"flt\": {\"fields\": [\"comment\"], \"like_text\": \"FFFdfds\",\"fuzziness\": \"4.\"}}"
block|,
literal|"{\"flt\": {\"fields\": [\"comment\"], \"like_text\": \"FFFdfds\",\"fuzziness\": 4}}"
block|,
literal|"{\"flt\": {\"fields\": [\"comment\"], \"like_text\": \"FFFdfds\",\"fuzziness\": 4.0}}"
block|}
decl_stmt|;
name|int
name|iters
init|=
name|scaledRandomIntBetween
argument_list|(
literal|5
argument_list|,
literal|100
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iters
condition|;
name|i
operator|++
control|)
block|{
name|parsedQuery
operator|=
name|queryParser
operator|.
name|parse
argument_list|(
operator|new
name|BytesArray
argument_list|(
operator|(
name|String
operator|)
name|randomFrom
argument_list|(
name|queries
argument_list|)
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
expr_stmt|;
name|parsedQuery1
operator|=
name|queryParser
operator|.
name|parse
argument_list|(
operator|new
name|BytesArray
argument_list|(
operator|(
name|String
operator|)
name|randomFrom
argument_list|(
name|queries
argument_list|)
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|parsedQuery1
argument_list|,
name|instanceOf
argument_list|(
name|FuzzyLikeThisQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|FuzzyLikeThisQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|equalTo
argument_list|(
name|parsedQuery1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testFuzzyLikeThis
specifier|public
name|void
name|testFuzzyLikeThis
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/fuzzyLikeThis.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|FuzzyLikeThisQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|//        FuzzyLikeThisQuery fuzzyLikeThisQuery = (FuzzyLikeThisQuery) parsedQuery;
block|}
annotation|@
name|Test
DECL|method|testFuzzyLikeFieldThisBuilder
specifier|public
name|void
name|testFuzzyLikeFieldThisBuilder
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|fuzzyLikeThisFieldQuery
argument_list|(
literal|"name.first"
argument_list|)
operator|.
name|likeText
argument_list|(
literal|"something"
argument_list|)
operator|.
name|maxQueryTerms
argument_list|(
literal|12
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|FuzzyLikeThisQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|//        FuzzyLikeThisQuery fuzzyLikeThisQuery = (FuzzyLikeThisQuery) parsedQuery;
block|}
annotation|@
name|Test
DECL|method|testFuzzyLikeThisField
specifier|public
name|void
name|testFuzzyLikeThisField
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/fuzzyLikeThisField.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|FuzzyLikeThisQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|//        FuzzyLikeThisQuery fuzzyLikeThisQuery = (FuzzyLikeThisQuery) parsedQuery;
block|}
annotation|@
name|Test
DECL|method|testMoreLikeThisFieldBuilder
specifier|public
name|void
name|testMoreLikeThisFieldBuilder
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|moreLikeThisFieldQuery
argument_list|(
literal|"name.first"
argument_list|)
operator|.
name|likeText
argument_list|(
literal|"something"
argument_list|)
operator|.
name|minTermFreq
argument_list|(
literal|1
argument_list|)
operator|.
name|maxQueryTerms
argument_list|(
literal|12
argument_list|)
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|MoreLikeThisQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|MoreLikeThisQuery
name|mltQuery
init|=
operator|(
name|MoreLikeThisQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|mltQuery
operator|.
name|getMoreLikeFields
argument_list|()
index|[
literal|0
index|]
argument_list|,
name|equalTo
argument_list|(
literal|"name.first"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|mltQuery
operator|.
name|getLikeText
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"something"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|mltQuery
operator|.
name|getMinTermFrequency
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|mltQuery
operator|.
name|getMaxQueryTerms
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|12
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMoreLikeThisField
specifier|public
name|void
name|testMoreLikeThisField
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/mltField.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|MoreLikeThisQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|MoreLikeThisQuery
name|mltQuery
init|=
operator|(
name|MoreLikeThisQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|mltQuery
operator|.
name|getMoreLikeFields
argument_list|()
index|[
literal|0
index|]
argument_list|,
name|equalTo
argument_list|(
literal|"name.first"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|mltQuery
operator|.
name|getLikeText
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"something"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|mltQuery
operator|.
name|getMinTermFrequency
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|mltQuery
operator|.
name|getMaxQueryTerms
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|12
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGeoDistanceFilterNamed
specifier|public
name|void
name|testGeoDistanceFilterNamed
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/geo_distance-named.json"
argument_list|)
decl_stmt|;
name|ParsedQuery
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
operator|.
name|namedFilters
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|"test"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
operator|.
name|query
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|XConstantScoreQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|XConstantScoreQuery
name|constantScoreQuery
init|=
operator|(
name|XConstantScoreQuery
operator|)
name|parsedQuery
operator|.
name|query
argument_list|()
decl_stmt|;
name|GeoDistanceFilter
name|filter
init|=
operator|(
name|GeoDistanceFilter
operator|)
name|constantScoreQuery
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|fieldName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"location"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|lat
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|40
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|lon
argument_list|()
argument_list|,
name|closeTo
argument_list|(
operator|-
literal|70
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|distance
argument_list|()
argument_list|,
name|closeTo
argument_list|(
name|DistanceUnit
operator|.
name|DEFAULT
operator|.
name|convert
argument_list|(
literal|12
argument_list|,
name|DistanceUnit
operator|.
name|MILES
argument_list|)
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGeoDistanceFilter1
specifier|public
name|void
name|testGeoDistanceFilter1
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/geo_distance1.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|XConstantScoreQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|XConstantScoreQuery
name|constantScoreQuery
init|=
operator|(
name|XConstantScoreQuery
operator|)
name|parsedQuery
decl_stmt|;
name|GeoDistanceFilter
name|filter
init|=
operator|(
name|GeoDistanceFilter
operator|)
name|constantScoreQuery
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|fieldName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"location"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|lat
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|40
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|lon
argument_list|()
argument_list|,
name|closeTo
argument_list|(
operator|-
literal|70
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|distance
argument_list|()
argument_list|,
name|closeTo
argument_list|(
name|DistanceUnit
operator|.
name|DEFAULT
operator|.
name|convert
argument_list|(
literal|12
argument_list|,
name|DistanceUnit
operator|.
name|MILES
argument_list|)
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGeoDistanceFilter2
specifier|public
name|void
name|testGeoDistanceFilter2
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/geo_distance2.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|XConstantScoreQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|XConstantScoreQuery
name|constantScoreQuery
init|=
operator|(
name|XConstantScoreQuery
operator|)
name|parsedQuery
decl_stmt|;
name|GeoDistanceFilter
name|filter
init|=
operator|(
name|GeoDistanceFilter
operator|)
name|constantScoreQuery
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|fieldName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"location"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|lat
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|40
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|lon
argument_list|()
argument_list|,
name|closeTo
argument_list|(
operator|-
literal|70
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|distance
argument_list|()
argument_list|,
name|closeTo
argument_list|(
name|DistanceUnit
operator|.
name|DEFAULT
operator|.
name|convert
argument_list|(
literal|12
argument_list|,
name|DistanceUnit
operator|.
name|MILES
argument_list|)
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGeoDistanceFilter3
specifier|public
name|void
name|testGeoDistanceFilter3
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/geo_distance3.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|XConstantScoreQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|XConstantScoreQuery
name|constantScoreQuery
init|=
operator|(
name|XConstantScoreQuery
operator|)
name|parsedQuery
decl_stmt|;
name|GeoDistanceFilter
name|filter
init|=
operator|(
name|GeoDistanceFilter
operator|)
name|constantScoreQuery
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|fieldName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"location"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|lat
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|40
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|lon
argument_list|()
argument_list|,
name|closeTo
argument_list|(
operator|-
literal|70
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|distance
argument_list|()
argument_list|,
name|closeTo
argument_list|(
name|DistanceUnit
operator|.
name|DEFAULT
operator|.
name|convert
argument_list|(
literal|12
argument_list|,
name|DistanceUnit
operator|.
name|MILES
argument_list|)
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGeoDistanceFilter4
specifier|public
name|void
name|testGeoDistanceFilter4
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/geo_distance4.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|XConstantScoreQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|XConstantScoreQuery
name|constantScoreQuery
init|=
operator|(
name|XConstantScoreQuery
operator|)
name|parsedQuery
decl_stmt|;
name|GeoDistanceFilter
name|filter
init|=
operator|(
name|GeoDistanceFilter
operator|)
name|constantScoreQuery
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|fieldName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"location"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|lat
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|40
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|lon
argument_list|()
argument_list|,
name|closeTo
argument_list|(
operator|-
literal|70
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|distance
argument_list|()
argument_list|,
name|closeTo
argument_list|(
name|DistanceUnit
operator|.
name|DEFAULT
operator|.
name|convert
argument_list|(
literal|12
argument_list|,
name|DistanceUnit
operator|.
name|MILES
argument_list|)
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGeoDistanceFilter5
specifier|public
name|void
name|testGeoDistanceFilter5
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/geo_distance5.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|XConstantScoreQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|XConstantScoreQuery
name|constantScoreQuery
init|=
operator|(
name|XConstantScoreQuery
operator|)
name|parsedQuery
decl_stmt|;
name|GeoDistanceFilter
name|filter
init|=
operator|(
name|GeoDistanceFilter
operator|)
name|constantScoreQuery
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|fieldName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"location"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|lat
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|40
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|lon
argument_list|()
argument_list|,
name|closeTo
argument_list|(
operator|-
literal|70
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|distance
argument_list|()
argument_list|,
name|closeTo
argument_list|(
name|DistanceUnit
operator|.
name|DEFAULT
operator|.
name|convert
argument_list|(
literal|12
argument_list|,
name|DistanceUnit
operator|.
name|MILES
argument_list|)
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGeoDistanceFilter6
specifier|public
name|void
name|testGeoDistanceFilter6
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/geo_distance6.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|XConstantScoreQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|XConstantScoreQuery
name|constantScoreQuery
init|=
operator|(
name|XConstantScoreQuery
operator|)
name|parsedQuery
decl_stmt|;
name|GeoDistanceFilter
name|filter
init|=
operator|(
name|GeoDistanceFilter
operator|)
name|constantScoreQuery
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|fieldName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"location"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|lat
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|40
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|lon
argument_list|()
argument_list|,
name|closeTo
argument_list|(
operator|-
literal|70
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|distance
argument_list|()
argument_list|,
name|closeTo
argument_list|(
name|DistanceUnit
operator|.
name|DEFAULT
operator|.
name|convert
argument_list|(
literal|12
argument_list|,
name|DistanceUnit
operator|.
name|MILES
argument_list|)
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGeoDistanceFilter7
specifier|public
name|void
name|testGeoDistanceFilter7
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/geo_distance7.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|XConstantScoreQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|XConstantScoreQuery
name|constantScoreQuery
init|=
operator|(
name|XConstantScoreQuery
operator|)
name|parsedQuery
decl_stmt|;
name|GeoDistanceFilter
name|filter
init|=
operator|(
name|GeoDistanceFilter
operator|)
name|constantScoreQuery
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|fieldName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"location"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|lat
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|40
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|lon
argument_list|()
argument_list|,
name|closeTo
argument_list|(
operator|-
literal|70
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|distance
argument_list|()
argument_list|,
name|closeTo
argument_list|(
name|DistanceUnit
operator|.
name|DEFAULT
operator|.
name|convert
argument_list|(
literal|0.012
argument_list|,
name|DistanceUnit
operator|.
name|MILES
argument_list|)
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGeoDistanceFilter8
specifier|public
name|void
name|testGeoDistanceFilter8
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/geo_distance8.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|XConstantScoreQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|XConstantScoreQuery
name|constantScoreQuery
init|=
operator|(
name|XConstantScoreQuery
operator|)
name|parsedQuery
decl_stmt|;
name|GeoDistanceFilter
name|filter
init|=
operator|(
name|GeoDistanceFilter
operator|)
name|constantScoreQuery
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|fieldName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"location"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|lat
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|40
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|lon
argument_list|()
argument_list|,
name|closeTo
argument_list|(
operator|-
literal|70
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|distance
argument_list|()
argument_list|,
name|closeTo
argument_list|(
name|DistanceUnit
operator|.
name|KILOMETERS
operator|.
name|convert
argument_list|(
literal|12
argument_list|,
name|DistanceUnit
operator|.
name|MILES
argument_list|)
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGeoDistanceFilter9
specifier|public
name|void
name|testGeoDistanceFilter9
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/geo_distance9.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|XConstantScoreQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|XConstantScoreQuery
name|constantScoreQuery
init|=
operator|(
name|XConstantScoreQuery
operator|)
name|parsedQuery
decl_stmt|;
name|GeoDistanceFilter
name|filter
init|=
operator|(
name|GeoDistanceFilter
operator|)
name|constantScoreQuery
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|fieldName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"location"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|lat
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|40
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|lon
argument_list|()
argument_list|,
name|closeTo
argument_list|(
operator|-
literal|70
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|distance
argument_list|()
argument_list|,
name|closeTo
argument_list|(
name|DistanceUnit
operator|.
name|DEFAULT
operator|.
name|convert
argument_list|(
literal|12
argument_list|,
name|DistanceUnit
operator|.
name|MILES
argument_list|)
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGeoDistanceFilter10
specifier|public
name|void
name|testGeoDistanceFilter10
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/geo_distance10.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|XConstantScoreQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|XConstantScoreQuery
name|constantScoreQuery
init|=
operator|(
name|XConstantScoreQuery
operator|)
name|parsedQuery
decl_stmt|;
name|GeoDistanceFilter
name|filter
init|=
operator|(
name|GeoDistanceFilter
operator|)
name|constantScoreQuery
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|fieldName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"location"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|lat
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|40
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|lon
argument_list|()
argument_list|,
name|closeTo
argument_list|(
operator|-
literal|70
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|distance
argument_list|()
argument_list|,
name|closeTo
argument_list|(
name|DistanceUnit
operator|.
name|DEFAULT
operator|.
name|convert
argument_list|(
literal|12
argument_list|,
name|DistanceUnit
operator|.
name|MILES
argument_list|)
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGeoDistanceFilter11
specifier|public
name|void
name|testGeoDistanceFilter11
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/geo_distance11.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|XConstantScoreQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|XConstantScoreQuery
name|constantScoreQuery
init|=
operator|(
name|XConstantScoreQuery
operator|)
name|parsedQuery
decl_stmt|;
name|GeoDistanceFilter
name|filter
init|=
operator|(
name|GeoDistanceFilter
operator|)
name|constantScoreQuery
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|fieldName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"location"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|lat
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|40
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|lon
argument_list|()
argument_list|,
name|closeTo
argument_list|(
operator|-
literal|70
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|distance
argument_list|()
argument_list|,
name|closeTo
argument_list|(
name|DistanceUnit
operator|.
name|DEFAULT
operator|.
name|convert
argument_list|(
literal|12
argument_list|,
name|DistanceUnit
operator|.
name|MILES
argument_list|)
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGeoDistanceFilter12
specifier|public
name|void
name|testGeoDistanceFilter12
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/geo_distance12.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|XConstantScoreQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|XConstantScoreQuery
name|constantScoreQuery
init|=
operator|(
name|XConstantScoreQuery
operator|)
name|parsedQuery
decl_stmt|;
name|GeoDistanceFilter
name|filter
init|=
operator|(
name|GeoDistanceFilter
operator|)
name|constantScoreQuery
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|fieldName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"location"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|lat
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|40
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|lon
argument_list|()
argument_list|,
name|closeTo
argument_list|(
operator|-
literal|70
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|distance
argument_list|()
argument_list|,
name|closeTo
argument_list|(
name|DistanceUnit
operator|.
name|DEFAULT
operator|.
name|convert
argument_list|(
literal|12
argument_list|,
name|DistanceUnit
operator|.
name|MILES
argument_list|)
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGeoBoundingBoxFilterNamed
specifier|public
name|void
name|testGeoBoundingBoxFilterNamed
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/geo_boundingbox-named.json"
argument_list|)
decl_stmt|;
name|ParsedQuery
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
operator|.
name|query
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|XConstantScoreQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
operator|.
name|namedFilters
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|"test"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|XConstantScoreQuery
name|constantScoreQuery
init|=
operator|(
name|XConstantScoreQuery
operator|)
name|parsedQuery
operator|.
name|query
argument_list|()
decl_stmt|;
name|InMemoryGeoBoundingBoxFilter
name|filter
init|=
operator|(
name|InMemoryGeoBoundingBoxFilter
operator|)
name|constantScoreQuery
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|fieldName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"location"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|topLeft
argument_list|()
operator|.
name|lat
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|40
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|topLeft
argument_list|()
operator|.
name|lon
argument_list|()
argument_list|,
name|closeTo
argument_list|(
operator|-
literal|70
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|bottomRight
argument_list|()
operator|.
name|lat
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|30
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|bottomRight
argument_list|()
operator|.
name|lon
argument_list|()
argument_list|,
name|closeTo
argument_list|(
operator|-
literal|80
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGeoBoundingBoxFilter1
specifier|public
name|void
name|testGeoBoundingBoxFilter1
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/geo_boundingbox1.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|XConstantScoreQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|XConstantScoreQuery
name|constantScoreQuery
init|=
operator|(
name|XConstantScoreQuery
operator|)
name|parsedQuery
decl_stmt|;
name|InMemoryGeoBoundingBoxFilter
name|filter
init|=
operator|(
name|InMemoryGeoBoundingBoxFilter
operator|)
name|constantScoreQuery
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|fieldName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"location"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|topLeft
argument_list|()
operator|.
name|lat
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|40
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|topLeft
argument_list|()
operator|.
name|lon
argument_list|()
argument_list|,
name|closeTo
argument_list|(
operator|-
literal|70
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|bottomRight
argument_list|()
operator|.
name|lat
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|30
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|bottomRight
argument_list|()
operator|.
name|lon
argument_list|()
argument_list|,
name|closeTo
argument_list|(
operator|-
literal|80
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGeoBoundingBoxFilter2
specifier|public
name|void
name|testGeoBoundingBoxFilter2
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/geo_boundingbox2.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|XConstantScoreQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|XConstantScoreQuery
name|constantScoreQuery
init|=
operator|(
name|XConstantScoreQuery
operator|)
name|parsedQuery
decl_stmt|;
name|InMemoryGeoBoundingBoxFilter
name|filter
init|=
operator|(
name|InMemoryGeoBoundingBoxFilter
operator|)
name|constantScoreQuery
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|fieldName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"location"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|topLeft
argument_list|()
operator|.
name|lat
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|40
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|topLeft
argument_list|()
operator|.
name|lon
argument_list|()
argument_list|,
name|closeTo
argument_list|(
operator|-
literal|70
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|bottomRight
argument_list|()
operator|.
name|lat
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|30
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|bottomRight
argument_list|()
operator|.
name|lon
argument_list|()
argument_list|,
name|closeTo
argument_list|(
operator|-
literal|80
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGeoBoundingBoxFilter3
specifier|public
name|void
name|testGeoBoundingBoxFilter3
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/geo_boundingbox3.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|XConstantScoreQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|XConstantScoreQuery
name|constantScoreQuery
init|=
operator|(
name|XConstantScoreQuery
operator|)
name|parsedQuery
decl_stmt|;
name|InMemoryGeoBoundingBoxFilter
name|filter
init|=
operator|(
name|InMemoryGeoBoundingBoxFilter
operator|)
name|constantScoreQuery
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|fieldName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"location"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|topLeft
argument_list|()
operator|.
name|lat
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|40
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|topLeft
argument_list|()
operator|.
name|lon
argument_list|()
argument_list|,
name|closeTo
argument_list|(
operator|-
literal|70
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|bottomRight
argument_list|()
operator|.
name|lat
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|30
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|bottomRight
argument_list|()
operator|.
name|lon
argument_list|()
argument_list|,
name|closeTo
argument_list|(
operator|-
literal|80
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGeoBoundingBoxFilter4
specifier|public
name|void
name|testGeoBoundingBoxFilter4
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/geo_boundingbox4.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|XConstantScoreQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|XConstantScoreQuery
name|constantScoreQuery
init|=
operator|(
name|XConstantScoreQuery
operator|)
name|parsedQuery
decl_stmt|;
name|InMemoryGeoBoundingBoxFilter
name|filter
init|=
operator|(
name|InMemoryGeoBoundingBoxFilter
operator|)
name|constantScoreQuery
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|fieldName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"location"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|topLeft
argument_list|()
operator|.
name|lat
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|40
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|topLeft
argument_list|()
operator|.
name|lon
argument_list|()
argument_list|,
name|closeTo
argument_list|(
operator|-
literal|70
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|bottomRight
argument_list|()
operator|.
name|lat
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|30
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|bottomRight
argument_list|()
operator|.
name|lon
argument_list|()
argument_list|,
name|closeTo
argument_list|(
operator|-
literal|80
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGeoBoundingBoxFilter5
specifier|public
name|void
name|testGeoBoundingBoxFilter5
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/geo_boundingbox5.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|XConstantScoreQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|XConstantScoreQuery
name|constantScoreQuery
init|=
operator|(
name|XConstantScoreQuery
operator|)
name|parsedQuery
decl_stmt|;
name|InMemoryGeoBoundingBoxFilter
name|filter
init|=
operator|(
name|InMemoryGeoBoundingBoxFilter
operator|)
name|constantScoreQuery
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|fieldName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"location"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|topLeft
argument_list|()
operator|.
name|lat
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|40
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|topLeft
argument_list|()
operator|.
name|lon
argument_list|()
argument_list|,
name|closeTo
argument_list|(
operator|-
literal|70
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|bottomRight
argument_list|()
operator|.
name|lat
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|30
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|bottomRight
argument_list|()
operator|.
name|lon
argument_list|()
argument_list|,
name|closeTo
argument_list|(
operator|-
literal|80
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGeoBoundingBoxFilter6
specifier|public
name|void
name|testGeoBoundingBoxFilter6
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/geo_boundingbox6.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|XConstantScoreQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|XConstantScoreQuery
name|constantScoreQuery
init|=
operator|(
name|XConstantScoreQuery
operator|)
name|parsedQuery
decl_stmt|;
name|InMemoryGeoBoundingBoxFilter
name|filter
init|=
operator|(
name|InMemoryGeoBoundingBoxFilter
operator|)
name|constantScoreQuery
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|fieldName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"location"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|topLeft
argument_list|()
operator|.
name|lat
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|40
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|topLeft
argument_list|()
operator|.
name|lon
argument_list|()
argument_list|,
name|closeTo
argument_list|(
operator|-
literal|70
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|bottomRight
argument_list|()
operator|.
name|lat
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|30
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|bottomRight
argument_list|()
operator|.
name|lon
argument_list|()
argument_list|,
name|closeTo
argument_list|(
operator|-
literal|80
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGeoPolygonNamedFilter
specifier|public
name|void
name|testGeoPolygonNamedFilter
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/geo_polygon-named.json"
argument_list|)
decl_stmt|;
name|ParsedQuery
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
operator|.
name|namedFilters
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|"test"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
operator|.
name|query
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|XConstantScoreQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|XConstantScoreQuery
name|constantScoreQuery
init|=
operator|(
name|XConstantScoreQuery
operator|)
name|parsedQuery
operator|.
name|query
argument_list|()
decl_stmt|;
name|GeoPolygonFilter
name|filter
init|=
operator|(
name|GeoPolygonFilter
operator|)
name|constantScoreQuery
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|fieldName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"location"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|points
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|points
argument_list|()
index|[
literal|0
index|]
operator|.
name|lat
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|40
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|points
argument_list|()
index|[
literal|0
index|]
operator|.
name|lon
argument_list|()
argument_list|,
name|closeTo
argument_list|(
operator|-
literal|70
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|points
argument_list|()
index|[
literal|1
index|]
operator|.
name|lat
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|30
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|points
argument_list|()
index|[
literal|1
index|]
operator|.
name|lon
argument_list|()
argument_list|,
name|closeTo
argument_list|(
operator|-
literal|80
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|points
argument_list|()
index|[
literal|2
index|]
operator|.
name|lat
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|20
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|points
argument_list|()
index|[
literal|2
index|]
operator|.
name|lon
argument_list|()
argument_list|,
name|closeTo
argument_list|(
operator|-
literal|90
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGeoPolygonFilterParsingExceptions
specifier|public
name|void
name|testGeoPolygonFilterParsingExceptions
parameter_list|()
throws|throws
name|IOException
block|{
name|String
index|[]
name|brokenFiles
init|=
operator|new
name|String
index|[]
block|{
literal|"/org/elasticsearch/index/query/geo_polygon_exception_1.json"
block|,
literal|"/org/elasticsearch/index/query/geo_polygon_exception_2.json"
block|,
literal|"/org/elasticsearch/index/query/geo_polygon_exception_3.json"
block|,
literal|"/org/elasticsearch/index/query/geo_polygon_exception_4.json"
block|,
literal|"/org/elasticsearch/index/query/geo_polygon_exception_5.json"
block|}
decl_stmt|;
for|for
control|(
name|String
name|brokenFile
range|:
name|brokenFiles
control|)
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
name|brokenFile
argument_list|)
decl_stmt|;
try|try
block|{
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"parsing a broken geo_polygon filter didn't fail as expected while parsing: "
operator|+
name|brokenFile
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|QueryParsingException
name|e
parameter_list|)
block|{
comment|// success!
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testGeoPolygonFilter1
specifier|public
name|void
name|testGeoPolygonFilter1
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/geo_polygon1.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|XConstantScoreQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|XConstantScoreQuery
name|constantScoreQuery
init|=
operator|(
name|XConstantScoreQuery
operator|)
name|parsedQuery
decl_stmt|;
name|GeoPolygonFilter
name|filter
init|=
operator|(
name|GeoPolygonFilter
operator|)
name|constantScoreQuery
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|fieldName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"location"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|points
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|points
argument_list|()
index|[
literal|0
index|]
operator|.
name|lat
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|40
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|points
argument_list|()
index|[
literal|0
index|]
operator|.
name|lon
argument_list|()
argument_list|,
name|closeTo
argument_list|(
operator|-
literal|70
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|points
argument_list|()
index|[
literal|1
index|]
operator|.
name|lat
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|30
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|points
argument_list|()
index|[
literal|1
index|]
operator|.
name|lon
argument_list|()
argument_list|,
name|closeTo
argument_list|(
operator|-
literal|80
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|points
argument_list|()
index|[
literal|2
index|]
operator|.
name|lat
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|20
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|points
argument_list|()
index|[
literal|2
index|]
operator|.
name|lon
argument_list|()
argument_list|,
name|closeTo
argument_list|(
operator|-
literal|90
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGeoPolygonFilter2
specifier|public
name|void
name|testGeoPolygonFilter2
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/geo_polygon2.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|XConstantScoreQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|XConstantScoreQuery
name|constantScoreQuery
init|=
operator|(
name|XConstantScoreQuery
operator|)
name|parsedQuery
decl_stmt|;
name|GeoPolygonFilter
name|filter
init|=
operator|(
name|GeoPolygonFilter
operator|)
name|constantScoreQuery
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|fieldName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"location"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|points
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|points
argument_list|()
index|[
literal|0
index|]
operator|.
name|lat
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|40
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|points
argument_list|()
index|[
literal|0
index|]
operator|.
name|lon
argument_list|()
argument_list|,
name|closeTo
argument_list|(
operator|-
literal|70
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|points
argument_list|()
index|[
literal|1
index|]
operator|.
name|lat
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|30
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|points
argument_list|()
index|[
literal|1
index|]
operator|.
name|lon
argument_list|()
argument_list|,
name|closeTo
argument_list|(
operator|-
literal|80
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|points
argument_list|()
index|[
literal|2
index|]
operator|.
name|lat
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|20
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|points
argument_list|()
index|[
literal|2
index|]
operator|.
name|lon
argument_list|()
argument_list|,
name|closeTo
argument_list|(
operator|-
literal|90
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGeoPolygonFilter3
specifier|public
name|void
name|testGeoPolygonFilter3
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/geo_polygon3.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|XConstantScoreQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|XConstantScoreQuery
name|constantScoreQuery
init|=
operator|(
name|XConstantScoreQuery
operator|)
name|parsedQuery
decl_stmt|;
name|GeoPolygonFilter
name|filter
init|=
operator|(
name|GeoPolygonFilter
operator|)
name|constantScoreQuery
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|fieldName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"location"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|points
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|points
argument_list|()
index|[
literal|0
index|]
operator|.
name|lat
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|40
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|points
argument_list|()
index|[
literal|0
index|]
operator|.
name|lon
argument_list|()
argument_list|,
name|closeTo
argument_list|(
operator|-
literal|70
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|points
argument_list|()
index|[
literal|1
index|]
operator|.
name|lat
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|30
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|points
argument_list|()
index|[
literal|1
index|]
operator|.
name|lon
argument_list|()
argument_list|,
name|closeTo
argument_list|(
operator|-
literal|80
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|points
argument_list|()
index|[
literal|2
index|]
operator|.
name|lat
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|20
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|points
argument_list|()
index|[
literal|2
index|]
operator|.
name|lon
argument_list|()
argument_list|,
name|closeTo
argument_list|(
operator|-
literal|90
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGeoPolygonFilter4
specifier|public
name|void
name|testGeoPolygonFilter4
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/geo_polygon4.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|XConstantScoreQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|XConstantScoreQuery
name|constantScoreQuery
init|=
operator|(
name|XConstantScoreQuery
operator|)
name|parsedQuery
decl_stmt|;
name|GeoPolygonFilter
name|filter
init|=
operator|(
name|GeoPolygonFilter
operator|)
name|constantScoreQuery
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|fieldName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"location"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|points
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|points
argument_list|()
index|[
literal|0
index|]
operator|.
name|lat
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|40
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|points
argument_list|()
index|[
literal|0
index|]
operator|.
name|lon
argument_list|()
argument_list|,
name|closeTo
argument_list|(
operator|-
literal|70
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|points
argument_list|()
index|[
literal|1
index|]
operator|.
name|lat
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|30
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|points
argument_list|()
index|[
literal|1
index|]
operator|.
name|lon
argument_list|()
argument_list|,
name|closeTo
argument_list|(
operator|-
literal|80
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|points
argument_list|()
index|[
literal|2
index|]
operator|.
name|lat
argument_list|()
argument_list|,
name|closeTo
argument_list|(
literal|20
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|points
argument_list|()
index|[
literal|2
index|]
operator|.
name|lon
argument_list|()
argument_list|,
name|closeTo
argument_list|(
operator|-
literal|90
argument_list|,
literal|0.00001
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGeoShapeFilter
specifier|public
name|void
name|testGeoShapeFilter
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/geoShape-filter.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|XConstantScoreQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|XConstantScoreQuery
name|constantScoreQuery
init|=
operator|(
name|XConstantScoreQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|constantScoreQuery
operator|.
name|getFilter
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|IntersectsPrefixTreeFilter
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGeoShapeQuery
specifier|public
name|void
name|testGeoShapeQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/geoShape-query.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|ConstantScoreQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|ConstantScoreQuery
name|csq
init|=
operator|(
name|ConstantScoreQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|csq
operator|.
name|getFilter
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|IntersectsPrefixTreeFilter
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCommonTermsQuery1
specifier|public
name|void
name|testCommonTermsQuery1
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/commonTerms-query1.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|ExtendedCommonTermsQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|ExtendedCommonTermsQuery
name|ectQuery
init|=
operator|(
name|ExtendedCommonTermsQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|ectQuery
operator|.
name|getHighFreqMinimumNumberShouldMatchSpec
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ectQuery
operator|.
name|getLowFreqMinimumNumberShouldMatchSpec
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCommonTermsQuery2
specifier|public
name|void
name|testCommonTermsQuery2
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/commonTerms-query2.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|ExtendedCommonTermsQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|ExtendedCommonTermsQuery
name|ectQuery
init|=
operator|(
name|ExtendedCommonTermsQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|ectQuery
operator|.
name|getHighFreqMinimumNumberShouldMatchSpec
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"50%"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ectQuery
operator|.
name|getLowFreqMinimumNumberShouldMatchSpec
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"5<20%"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCommonTermsQuery3
specifier|public
name|void
name|testCommonTermsQuery3
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/commonTerms-query3.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|ExtendedCommonTermsQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|ExtendedCommonTermsQuery
name|ectQuery
init|=
operator|(
name|ExtendedCommonTermsQuery
operator|)
name|parsedQuery
decl_stmt|;
name|assertThat
argument_list|(
name|ectQuery
operator|.
name|getHighFreqMinimumNumberShouldMatchSpec
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ectQuery
operator|.
name|getLowFreqMinimumNumberShouldMatchSpec
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|QueryParsingException
operator|.
name|class
argument_list|)
DECL|method|assureMalformedThrowsException
specifier|public
name|void
name|assureMalformedThrowsException
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
decl_stmt|;
name|queryParser
operator|=
name|queryParser
argument_list|()
expr_stmt|;
name|String
name|query
decl_stmt|;
name|query
operator|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/faulty-function-score-query.json"
argument_list|)
expr_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFilterParsing
specifier|public
name|void
name|testFilterParsing
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
decl_stmt|;
name|queryParser
operator|=
name|queryParser
argument_list|()
expr_stmt|;
name|String
name|query
decl_stmt|;
name|query
operator|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/function-filter-score-query.json"
argument_list|)
expr_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
call|(
name|double
call|)
argument_list|(
name|parsedQuery
operator|.
name|getBoost
argument_list|()
argument_list|)
argument_list|,
name|Matchers
operator|.
name|closeTo
argument_list|(
literal|3.0
argument_list|,
literal|1.e-7
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBadTypeMatchQuery
specifier|public
name|void
name|testBadTypeMatchQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/match-query-bad-type.json"
argument_list|)
decl_stmt|;
name|QueryParsingException
name|expectedException
init|=
literal|null
decl_stmt|;
try|try
block|{
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|QueryParsingException
name|qpe
parameter_list|)
block|{
name|expectedException
operator|=
name|qpe
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|expectedException
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMultiMatchQuery
specifier|public
name|void
name|testMultiMatchQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/multiMatch-query-simple.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|DisjunctionMaxQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBadTypeMultiMatchQuery
specifier|public
name|void
name|testBadTypeMultiMatchQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/multiMatch-query-bad-type.json"
argument_list|)
decl_stmt|;
name|QueryParsingException
name|expectedException
init|=
literal|null
decl_stmt|;
try|try
block|{
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|QueryParsingException
name|qpe
parameter_list|)
block|{
name|expectedException
operator|=
name|qpe
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|expectedException
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMultiMatchQueryWithFieldsAsString
specifier|public
name|void
name|testMultiMatchQueryWithFieldsAsString
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/multiMatch-query-fields-as-string.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|BooleanQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSimpleQueryString
specifier|public
name|void
name|testSimpleQueryString
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/simple-query-string.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|BooleanQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMatchWithFuzzyTranspositions
specifier|public
name|void
name|testMatchWithFuzzyTranspositions
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/match-with-fuzzy-transpositions.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|FuzzyQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|FuzzyQuery
operator|)
name|parsedQuery
operator|)
operator|.
name|getTranspositions
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMatchWithoutFuzzyTranspositions
specifier|public
name|void
name|testMatchWithoutFuzzyTranspositions
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/match-without-fuzzy-transpositions.json"
argument_list|)
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|FuzzyQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|FuzzyQuery
operator|)
name|parsedQuery
operator|)
operator|.
name|getTranspositions
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// https://github.com/elasticsearch/elasticsearch/issues/7240
annotation|@
name|Test
DECL|method|testEmptyBooleanQuery
specifier|public
name|void
name|testEmptyBooleanQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"bool"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|MatchAllDocsQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// https://github.com/elasticsearch/elasticsearch/issues/7240
annotation|@
name|Test
DECL|method|testEmptyBooleanQueryInsideFQuery
specifier|public
name|void
name|testEmptyBooleanQueryInsideFQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/fquery-with-empty-bool-query.json"
argument_list|)
decl_stmt|;
name|XContentParser
name|parser
init|=
name|XContentHelper
operator|.
name|createParser
argument_list|(
operator|new
name|BytesArray
argument_list|(
name|query
argument_list|)
argument_list|)
decl_stmt|;
name|ParsedFilter
name|parsedQuery
init|=
name|queryParser
operator|.
name|parseInnerFilter
argument_list|(
name|parser
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
operator|.
name|filter
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|QueryWrapperFilter
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|QueryWrapperFilter
operator|)
name|parsedQuery
operator|.
name|filter
argument_list|()
operator|)
operator|.
name|getQuery
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|XFilteredQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
call|(
name|XFilteredQuery
call|)
argument_list|(
operator|(
name|QueryWrapperFilter
operator|)
name|parsedQuery
operator|.
name|filter
argument_list|()
argument_list|)
operator|.
name|getQuery
argument_list|()
operator|)
operator|.
name|getFilter
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|TermFilter
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|TermFilter
name|filter
init|=
call|(
name|TermFilter
call|)
argument_list|(
call|(
name|XFilteredQuery
call|)
argument_list|(
operator|(
name|QueryWrapperFilter
operator|)
name|parsedQuery
operator|.
name|filter
argument_list|()
argument_list|)
operator|.
name|getQuery
argument_list|()
argument_list|)
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|filter
operator|.
name|getTerm
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"text:apache"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testProperErrorMessageWhenTwoFunctionsDefinedInQueryBody
specifier|public
name|void
name|testProperErrorMessageWhenTwoFunctionsDefinedInQueryBody
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/function-score-query-causing-NPE.json"
argument_list|)
decl_stmt|;
try|try
block|{
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"FunctionScoreQueryParser should throw an exception here because two functions in body are not allowed."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|QueryParsingException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getDetailedMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"Use functions[{...},...] if you want to define several functions."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testWeight1fStillProducesWeighFuction
specifier|public
name|void
name|testWeight1fStillProducesWeighFuction
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|queryString
init|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"function_score"
argument_list|)
operator|.
name|startArray
argument_list|(
literal|"functions"
argument_list|)
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"field_value_factor"
argument_list|)
operator|.
name|field
argument_list|(
literal|"field"
argument_list|,
literal|"popularity"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"weight"
argument_list|,
literal|1.0
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
decl_stmt|;
name|IndexService
name|indexService
init|=
name|createIndex
argument_list|(
literal|"testidx"
argument_list|,
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"testidx"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"doc"
argument_list|,
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"popularity"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"float"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|SearchContext
operator|.
name|setCurrent
argument_list|(
name|createSearchContext
argument_list|(
name|indexService
argument_list|)
argument_list|)
expr_stmt|;
name|Query
name|query
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|queryString
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|query
argument_list|,
name|instanceOf
argument_list|(
name|FunctionScoreQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|FunctionScoreQuery
operator|)
name|query
operator|)
operator|.
name|getFunction
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|WeightFactorFunction
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|SearchContext
operator|.
name|removeCurrent
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testProperErrorMessagesForMisplacedWeightsAndFunctions
specifier|public
name|void
name|testProperErrorMessagesForMisplacedWeightsAndFunctions
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexQueryParserService
name|queryParser
init|=
name|queryParser
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"function_score"
argument_list|)
operator|.
name|startArray
argument_list|(
literal|"functions"
argument_list|)
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"weight"
argument_list|,
literal|2
argument_list|)
operator|.
name|field
argument_list|(
literal|"boost_factor"
argument_list|,
literal|2
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
decl_stmt|;
try|try
block|{
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expect exception here because boost_factor must not have a weight"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|QueryParsingException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getDetailedMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
name|BoostScoreFunction
operator|.
name|BOOST_WEIGHT_ERROR_MESSAGE
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|functionScoreQuery
argument_list|()
operator|.
name|add
argument_list|(
name|factorFunction
argument_list|(
literal|2.0f
argument_list|)
operator|.
name|setWeight
argument_list|(
literal|2.0f
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expect exception here because boost_factor must not have a weight"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ElasticsearchIllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getDetailedMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
name|BoostScoreFunction
operator|.
name|BOOST_WEIGHT_ERROR_MESSAGE
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|query
operator|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"function_score"
argument_list|)
operator|.
name|startArray
argument_list|(
literal|"functions"
argument_list|)
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"boost_factor"
argument_list|,
literal|2
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endArray
argument_list|()
operator|.
name|field
argument_list|(
literal|"weight"
argument_list|,
literal|2
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
expr_stmt|;
try|try
block|{
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expect exception here because array of functions and one weight in body is not allowed."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|QueryParsingException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getDetailedMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"You can either define \"functions\":[...] or a single function, not both. Found \"functions\": [...] already, now encountering \"weight\"."
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|query
operator|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"function_score"
argument_list|)
operator|.
name|field
argument_list|(
literal|"weight"
argument_list|,
literal|2
argument_list|)
operator|.
name|startArray
argument_list|(
literal|"functions"
argument_list|)
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"boost_factor"
argument_list|,
literal|2
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
expr_stmt|;
try|try
block|{
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expect exception here because array of functions and one weight in body is not allowed."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|QueryParsingException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getDetailedMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"You can either define \"functions\":[...] or a single function, not both. Found \"weight\" already, now encountering \"functions\": [...]."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// https://github.com/elasticsearch/elasticsearch/issues/6722
DECL|method|testEmptyBoolSubClausesIsMatchAll
specifier|public
name|void
name|testEmptyBoolSubClausesIsMatchAll
parameter_list|()
throws|throws
name|ElasticsearchException
throws|,
name|IOException
block|{
name|String
name|query
init|=
name|copyToStringFromClasspath
argument_list|(
literal|"/org/elasticsearch/index/query/bool-query-with-empty-clauses-for-parsing.json"
argument_list|)
decl_stmt|;
name|IndexService
name|indexService
init|=
name|createIndex
argument_list|(
literal|"testidx"
argument_list|,
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"testidx"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"test"
argument_list|,
literal|"_parent"
argument_list|,
literal|"type=foo"
argument_list|)
argument_list|)
decl_stmt|;
name|SearchContext
operator|.
name|setCurrent
argument_list|(
name|createSearchContext
argument_list|(
name|indexService
argument_list|)
argument_list|)
expr_stmt|;
name|IndexQueryParserService
name|queryParser
init|=
name|indexService
operator|.
name|queryParserService
argument_list|()
decl_stmt|;
name|Query
name|parsedQuery
init|=
name|queryParser
operator|.
name|parse
argument_list|(
name|query
argument_list|)
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parsedQuery
argument_list|,
name|instanceOf
argument_list|(
name|XConstantScoreQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|XConstantScoreQuery
operator|)
name|parsedQuery
operator|)
operator|.
name|getFilter
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|CustomQueryWrappingFilter
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
call|(
name|CustomQueryWrappingFilter
call|)
argument_list|(
operator|(
name|XConstantScoreQuery
operator|)
name|parsedQuery
argument_list|)
operator|.
name|getFilter
argument_list|()
operator|)
operator|.
name|getQuery
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|ParentConstantScoreQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
call|(
name|CustomQueryWrappingFilter
call|)
argument_list|(
operator|(
name|XConstantScoreQuery
operator|)
name|parsedQuery
argument_list|)
operator|.
name|getFilter
argument_list|()
operator|)
operator|.
name|getQuery
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"parent_filter[foo](*:*)"
argument_list|)
argument_list|)
expr_stmt|;
name|SearchContext
operator|.
name|removeCurrent
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

