begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.rest.action.admin.indices.upgrade
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|upgrade
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|exception
operator|.
name|ExceptionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|client
operator|.
name|HttpClients
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ExceptionsHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ListenableActionFuture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|segments
operator|.
name|IndicesSegmentResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|index
operator|.
name|IndexRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|json
operator|.
name|JsonXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|node
operator|.
name|internal
operator|.
name|InternalNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchBackwardsCompatIntegrationTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|rest
operator|.
name|client
operator|.
name|RestResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|rest
operator|.
name|client
operator|.
name|http
operator|.
name|HttpRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|rest
operator|.
name|client
operator|.
name|http
operator|.
name|HttpResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|rest
operator|.
name|json
operator|.
name|JsonPath
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertAcked
import|;
end_import

begin_class
DECL|class|UpgradeTest
specifier|public
class|class
name|UpgradeTest
extends|extends
name|ElasticsearchBackwardsCompatIntegrationTest
block|{
annotation|@
name|Override
DECL|method|minExternalNodes
specifier|protected
name|int
name|minExternalNodes
parameter_list|()
block|{
return|return
literal|2
return|;
block|}
DECL|method|testUpgrade
specifier|public
name|void
name|testUpgrade
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|backwardsCluster
argument_list|()
operator|.
name|numNewDataNodes
argument_list|()
operator|==
literal|0
condition|)
block|{
name|backwardsCluster
argument_list|()
operator|.
name|startNewNode
argument_list|()
expr_stmt|;
block|}
name|int
name|numIndexes
init|=
name|randomIntBetween
argument_list|(
literal|2
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|String
index|[]
name|indexNames
init|=
operator|new
name|String
index|[
name|numIndexes
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numIndexes
condition|;
operator|++
name|i
control|)
block|{
name|String
name|indexName
init|=
literal|"test"
operator|+
name|i
decl_stmt|;
name|indexNames
index|[
name|i
index|]
operator|=
name|indexName
expr_stmt|;
name|Settings
name|settings
init|=
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.routing.allocation.exclude._name"
argument_list|,
name|backwardsCluster
argument_list|()
operator|.
name|newNodePattern
argument_list|()
argument_list|)
comment|// don't allow any merges so that we can check segments are upgraded
comment|// by the upgrader, and not just regular merging
operator|.
name|put
argument_list|(
literal|"index.merge.policy.segments_per_tier"
argument_list|,
literal|1000000f
argument_list|)
operator|.
name|put
argument_list|(
name|indexSettings
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
name|indexName
argument_list|)
operator|.
name|setSettings
argument_list|(
name|settings
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|(
name|indexName
argument_list|)
expr_stmt|;
name|assertAllShardsOnNodes
argument_list|(
name|indexName
argument_list|,
name|backwardsCluster
argument_list|()
operator|.
name|backwardsNodePattern
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|numDocs
init|=
name|scaledRandomIntBetween
argument_list|(
literal|100
argument_list|,
literal|1000
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|IndexRequestBuilder
argument_list|>
name|builder
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numDocs
condition|;
operator|++
name|j
control|)
block|{
name|String
name|id
init|=
name|Integer
operator|.
name|toString
argument_list|(
name|j
argument_list|)
decl_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|indexName
argument_list|,
literal|"type1"
argument_list|,
name|id
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"text"
argument_list|,
literal|"sometext"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|builder
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|(
name|indexName
argument_list|)
expr_stmt|;
name|flushAndRefresh
argument_list|()
expr_stmt|;
block|}
name|backwardsCluster
argument_list|()
operator|.
name|allowOnAllNodes
argument_list|(
name|indexNames
argument_list|)
expr_stmt|;
name|backwardsCluster
argument_list|()
operator|.
name|upgradeAllNodes
argument_list|()
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|checkNotUpgraded
argument_list|(
literal|"/_upgrade"
argument_list|)
expr_stmt|;
specifier|final
name|String
name|indexToUpgrade
init|=
literal|"test"
operator|+
name|randomInt
argument_list|(
name|numIndexes
operator|-
literal|1
argument_list|)
decl_stmt|;
name|runUpgrade
argument_list|(
literal|"/"
operator|+
name|indexToUpgrade
operator|+
literal|"/_upgrade"
argument_list|)
expr_stmt|;
name|awaitBusy
argument_list|(
operator|new
name|Predicate
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
try|try
block|{
return|return
name|isUpgraded
argument_list|(
literal|"/"
operator|+
name|indexToUpgrade
operator|+
literal|"/_upgrade"
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|ExceptionsHelper
operator|.
name|convertToRuntime
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|runUpgrade
argument_list|(
literal|"/_upgrade"
argument_list|,
literal|"wait_for_completion"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|checkUpgraded
argument_list|(
literal|"/_upgrade"
argument_list|)
expr_stmt|;
block|}
DECL|method|checkNotUpgraded
name|void
name|checkNotUpgraded
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|UpgradeStatus
name|status
range|:
name|getUpgradeStatus
argument_list|(
name|path
argument_list|)
control|)
block|{
name|assertTrue
argument_list|(
literal|"index "
operator|+
name|status
operator|.
name|indexName
operator|+
literal|" should not be zero sized"
argument_list|,
name|status
operator|.
name|totalBytes
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"total bytes must be>= upgrade bytes"
argument_list|,
name|status
operator|.
name|totalBytes
operator|>=
name|status
operator|.
name|toUpgradeBytes
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"index "
operator|+
name|status
operator|.
name|indexName
operator|+
literal|" should need upgrading"
argument_list|,
name|status
operator|.
name|totalBytes
argument_list|,
name|status
operator|.
name|toUpgradeBytes
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|checkUpgraded
name|void
name|checkUpgraded
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|UpgradeStatus
name|status
range|:
name|getUpgradeStatus
argument_list|(
name|path
argument_list|)
control|)
block|{
name|assertTrue
argument_list|(
literal|"index "
operator|+
name|status
operator|.
name|indexName
operator|+
literal|" should not be zero sized"
argument_list|,
name|status
operator|.
name|totalBytes
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"total bytes must be>= upgrade bytes"
argument_list|,
name|status
operator|.
name|totalBytes
operator|>=
name|status
operator|.
name|toUpgradeBytes
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"index "
operator|+
name|status
operator|.
name|indexName
operator|+
literal|" should need upgrading"
argument_list|,
literal|0
argument_list|,
name|status
operator|.
name|toUpgradeBytes
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|isUpgraded
name|boolean
name|isUpgraded
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|toUpgrade
init|=
literal|0
decl_stmt|;
for|for
control|(
name|UpgradeStatus
name|status
range|:
name|getUpgradeStatus
argument_list|(
name|path
argument_list|)
control|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Index: "
operator|+
name|status
operator|.
name|indexName
operator|+
literal|", total: "
operator|+
name|status
operator|.
name|totalBytes
operator|+
literal|", toUpgrade: "
operator|+
name|status
operator|.
name|toUpgradeBytes
argument_list|)
expr_stmt|;
name|toUpgrade
operator|+=
name|status
operator|.
name|toUpgradeBytes
expr_stmt|;
block|}
return|return
name|toUpgrade
operator|==
literal|0
return|;
block|}
DECL|class|UpgradeStatus
class|class
name|UpgradeStatus
block|{
DECL|field|indexName
specifier|public
specifier|final
name|String
name|indexName
decl_stmt|;
DECL|field|totalBytes
specifier|public
specifier|final
name|int
name|totalBytes
decl_stmt|;
DECL|field|toUpgradeBytes
specifier|public
specifier|final
name|int
name|toUpgradeBytes
decl_stmt|;
DECL|method|UpgradeStatus
specifier|public
name|UpgradeStatus
parameter_list|(
name|String
name|indexName
parameter_list|,
name|int
name|totalBytes
parameter_list|,
name|int
name|toUpgradeBytes
parameter_list|)
block|{
name|this
operator|.
name|indexName
operator|=
name|indexName
expr_stmt|;
name|this
operator|.
name|totalBytes
operator|=
name|totalBytes
expr_stmt|;
name|this
operator|.
name|toUpgradeBytes
operator|=
name|toUpgradeBytes
expr_stmt|;
block|}
block|}
DECL|method|runUpgrade
name|void
name|runUpgrade
parameter_list|(
name|String
name|path
parameter_list|,
name|String
modifier|...
name|params
parameter_list|)
throws|throws
name|Exception
block|{
assert|assert
name|params
operator|.
name|length
operator|%
literal|2
operator|==
literal|0
assert|;
name|HttpRequestBuilder
name|builder
init|=
name|httpClient
argument_list|()
operator|.
name|method
argument_list|(
literal|"POST"
argument_list|)
operator|.
name|path
argument_list|(
name|path
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|params
operator|.
name|length
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|builder
operator|.
name|addParam
argument_list|(
name|params
index|[
name|i
index|]
argument_list|,
name|params
index|[
name|i
operator|+
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
name|HttpResponse
name|rsp
init|=
name|builder
operator|.
name|execute
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|rsp
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|200
argument_list|,
name|rsp
operator|.
name|getStatusCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getUpgradeStatus
name|List
argument_list|<
name|UpgradeStatus
argument_list|>
name|getUpgradeStatus
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|Exception
block|{
name|HttpResponse
name|rsp
init|=
name|httpClient
argument_list|()
operator|.
name|method
argument_list|(
literal|"GET"
argument_list|)
operator|.
name|path
argument_list|(
name|path
argument_list|)
operator|.
name|execute
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|data
init|=
name|validateAndParse
argument_list|(
name|rsp
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|UpgradeStatus
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|index
range|:
name|data
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|status
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|data
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"missing key size_in_bytes for index "
operator|+
name|index
argument_list|,
name|status
operator|.
name|containsKey
argument_list|(
literal|"size_in_bytes"
argument_list|)
argument_list|)
expr_stmt|;
name|Object
name|totalBytes
init|=
name|status
operator|.
name|get
argument_list|(
literal|"size_in_bytes"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"size_in_bytes for index "
operator|+
name|index
operator|+
literal|" is not an integer"
argument_list|,
name|totalBytes
operator|instanceof
name|Integer
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"missing key size_to_upgrade_in_bytes for index "
operator|+
name|index
argument_list|,
name|status
operator|.
name|containsKey
argument_list|(
literal|"size_to_upgrade_in_bytes"
argument_list|)
argument_list|)
expr_stmt|;
name|Object
name|toUpgradeBytes
init|=
name|status
operator|.
name|get
argument_list|(
literal|"size_to_upgrade_in_bytes"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"size_to_upgrade_in_bytes for index "
operator|+
name|index
operator|+
literal|" is not an integer"
argument_list|,
name|toUpgradeBytes
operator|instanceof
name|Integer
argument_list|)
expr_stmt|;
name|ret
operator|.
name|add
argument_list|(
operator|new
name|UpgradeStatus
argument_list|(
name|index
argument_list|,
operator|(
operator|(
name|Integer
operator|)
name|totalBytes
operator|)
operator|.
name|intValue
argument_list|()
argument_list|,
operator|(
operator|(
name|Integer
operator|)
name|toUpgradeBytes
operator|)
operator|.
name|intValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
DECL|method|validateAndParse
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|validateAndParse
parameter_list|(
name|HttpResponse
name|rsp
parameter_list|)
throws|throws
name|Exception
block|{
name|assertNotNull
argument_list|(
name|rsp
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|200
argument_list|,
name|rsp
operator|.
name|getStatusCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rsp
operator|.
name|hasBody
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
operator|new
name|JsonPath
argument_list|(
name|rsp
operator|.
name|getBody
argument_list|()
argument_list|)
operator|.
name|evaluate
argument_list|(
literal|""
argument_list|)
return|;
block|}
DECL|method|httpClient
name|HttpRequestBuilder
name|httpClient
parameter_list|()
block|{
name|InetSocketAddress
index|[]
name|addresses
init|=
name|cluster
argument_list|()
operator|.
name|httpAddresses
argument_list|()
decl_stmt|;
name|InetSocketAddress
name|address
init|=
name|addresses
index|[
name|randomInt
argument_list|(
name|addresses
operator|.
name|length
operator|-
literal|1
argument_list|)
index|]
decl_stmt|;
return|return
operator|new
name|HttpRequestBuilder
argument_list|(
name|HttpClients
operator|.
name|createDefault
argument_list|()
argument_list|)
operator|.
name|host
argument_list|(
name|address
operator|.
name|getHostName
argument_list|()
argument_list|)
operator|.
name|port
argument_list|(
name|address
operator|.
name|getPort
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|nodeSettings
specifier|protected
name|Settings
name|nodeSettings
parameter_list|(
name|int
name|nodeOrdinal
parameter_list|)
block|{
return|return
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|super
operator|.
name|nodeSettings
argument_list|(
name|nodeOrdinal
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|InternalNode
operator|.
name|HTTP_ENABLED
argument_list|,
literal|true
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
end_class

end_unit

