begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.termvector
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|termvector
package|;
end_package

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|ObjectIntOpenHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|payloads
operator|.
name|PayloadHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|FieldType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionFuture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|alias
operator|.
name|Alias
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|index
operator|.
name|IndexRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|json
operator|.
name|JsonXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|core
operator|.
name|AbstractFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
operator|.
name|settingsBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
operator|.
name|jsonBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertAcked
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertThrows
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|*
import|;
end_import

begin_class
DECL|class|GetTermVectorTests
specifier|public
class|class
name|GetTermVectorTests
extends|extends
name|AbstractTermVectorTests
block|{
annotation|@
name|Test
DECL|method|testNoSuchDoc
specifier|public
name|void
name|testNoSuchDoc
parameter_list|()
throws|throws
name|Exception
block|{
name|XContentBuilder
name|mapping
init|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"field"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"term_vector"
argument_list|,
literal|"with_positions_offsets_payloads"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addAlias
argument_list|(
operator|new
name|Alias
argument_list|(
literal|"alias"
argument_list|)
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
name|mapping
argument_list|)
argument_list|)
expr_stmt|;
name|ensureYellow
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"666"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field"
argument_list|,
literal|"foo bar"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|20
condition|;
name|i
operator|++
control|)
block|{
name|ActionFuture
argument_list|<
name|TermVectorResponse
argument_list|>
name|termVector
init|=
name|client
argument_list|()
operator|.
name|termVector
argument_list|(
operator|new
name|TermVectorRequest
argument_list|(
name|indexOrAlias
argument_list|()
argument_list|,
literal|"type1"
argument_list|,
literal|""
operator|+
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|TermVectorResponse
name|actionGet
init|=
name|termVector
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|actionGet
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|actionGet
operator|.
name|getIndex
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|actionGet
operator|.
name|isExists
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// check response is nevertheless serializable to json
name|actionGet
operator|.
name|toXContent
argument_list|(
name|jsonBuilder
argument_list|()
argument_list|,
name|ToXContent
operator|.
name|EMPTY_PARAMS
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testExistingFieldWithNoTermVectorsNoNPE
specifier|public
name|void
name|testExistingFieldWithNoTermVectorsNoNPE
parameter_list|()
throws|throws
name|Exception
block|{
name|XContentBuilder
name|mapping
init|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"existingfield"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"term_vector"
argument_list|,
literal|"with_positions_offsets_payloads"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addAlias
argument_list|(
operator|new
name|Alias
argument_list|(
literal|"alias"
argument_list|)
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
name|mapping
argument_list|)
argument_list|)
expr_stmt|;
name|ensureYellow
argument_list|()
expr_stmt|;
comment|// when indexing a field that simply has a question mark, the term vectors will be null
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"0"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"existingfield"
argument_list|,
literal|"?"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|ActionFuture
argument_list|<
name|TermVectorResponse
argument_list|>
name|termVector
init|=
name|client
argument_list|()
operator|.
name|termVector
argument_list|(
operator|new
name|TermVectorRequest
argument_list|(
name|indexOrAlias
argument_list|()
argument_list|,
literal|"type1"
argument_list|,
literal|"0"
argument_list|)
operator|.
name|selectedFields
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"existingfield"
block|}
argument_list|)
argument_list|)
decl_stmt|;
comment|// lets see if the null term vectors are caught...
name|TermVectorResponse
name|actionGet
init|=
name|termVector
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|actionGet
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|actionGet
operator|.
name|isExists
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|actionGet
operator|.
name|getIndex
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|actionGet
operator|.
name|getFields
argument_list|()
operator|.
name|terms
argument_list|(
literal|"existingfield"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testExistingFieldButNotInDocNPE
specifier|public
name|void
name|testExistingFieldButNotInDocNPE
parameter_list|()
throws|throws
name|Exception
block|{
name|XContentBuilder
name|mapping
init|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"existingfield"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"term_vector"
argument_list|,
literal|"with_positions_offsets_payloads"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addAlias
argument_list|(
operator|new
name|Alias
argument_list|(
literal|"alias"
argument_list|)
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
name|mapping
argument_list|)
argument_list|)
expr_stmt|;
name|ensureYellow
argument_list|()
expr_stmt|;
comment|// when indexing a field that simply has a question mark, the term vectors will be null
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"0"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"anotherexistingfield"
argument_list|,
literal|1
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|ActionFuture
argument_list|<
name|TermVectorResponse
argument_list|>
name|termVector
init|=
name|client
argument_list|()
operator|.
name|termVector
argument_list|(
operator|new
name|TermVectorRequest
argument_list|(
name|indexOrAlias
argument_list|()
argument_list|,
literal|"type1"
argument_list|,
literal|"0"
argument_list|)
operator|.
name|selectedFields
argument_list|(
name|randomBoolean
argument_list|()
condition|?
operator|new
name|String
index|[]
block|{
literal|"existingfield"
block|}
else|:
literal|null
argument_list|)
operator|.
name|termStatistics
argument_list|(
literal|true
argument_list|)
operator|.
name|fieldStatistics
argument_list|(
literal|true
argument_list|)
operator|.
name|dfs
argument_list|(
literal|true
argument_list|)
argument_list|)
decl_stmt|;
comment|// lets see if the null term vectors are caught...
name|TermVectorResponse
name|actionGet
init|=
name|termVector
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|actionGet
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|actionGet
operator|.
name|isExists
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|actionGet
operator|.
name|getIndex
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|actionGet
operator|.
name|getFields
argument_list|()
operator|.
name|terms
argument_list|(
literal|"existingfield"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNotIndexedField
specifier|public
name|void
name|testNotIndexedField
parameter_list|()
throws|throws
name|Exception
block|{
comment|// must be of type string and indexed.
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addAlias
argument_list|(
operator|new
name|Alias
argument_list|(
literal|"alias"
argument_list|)
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
literal|"field0"
argument_list|,
literal|"type=integer,"
argument_list|,
comment|// no tvs
literal|"field1"
argument_list|,
literal|"type=string,index=no"
argument_list|,
comment|// no tvs
literal|"field2"
argument_list|,
literal|"type=string,index=no,store=yes"
argument_list|,
comment|// no tvs
literal|"field3"
argument_list|,
literal|"type=string,index=no,term_vector=yes"
argument_list|,
comment|// no tvs
literal|"field4"
argument_list|,
literal|"type=string,index=not_analyzed"
argument_list|,
comment|// yes tvs
literal|"field5"
argument_list|,
literal|"type=string,index=analyzed"
argument_list|)
argument_list|)
expr_stmt|;
comment|// yes tvs
name|ensureYellow
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|IndexRequestBuilder
argument_list|>
name|indexBuilders
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|6
condition|;
name|i
operator|++
control|)
block|{
name|indexBuilders
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|()
operator|.
name|setIndex
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setType
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|setId
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field"
operator|+
name|i
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|indexBuilders
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|TermVectorResponse
name|resp
init|=
name|client
argument_list|()
operator|.
name|prepareTermVector
argument_list|(
name|indexOrAlias
argument_list|()
argument_list|,
literal|"type1"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|setSelectedFields
argument_list|(
literal|"field"
operator|+
name|i
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|resp
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|resp
operator|.
name|isExists
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|resp
operator|.
name|getIndex
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"field"
operator|+
name|i
operator|+
literal|" :"
argument_list|,
name|resp
operator|.
name|getFields
argument_list|()
operator|.
name|terms
argument_list|(
literal|"field"
operator|+
name|i
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|4
init|;
name|i
operator|<
literal|6
condition|;
name|i
operator|++
control|)
block|{
name|TermVectorResponse
name|resp
init|=
name|client
argument_list|()
operator|.
name|prepareTermVector
argument_list|(
name|indexOrAlias
argument_list|()
argument_list|,
literal|"type1"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|setSelectedFields
argument_list|(
literal|"field"
operator|+
name|i
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|resp
operator|.
name|getIndex
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"field"
operator|+
name|i
operator|+
literal|" :"
argument_list|,
name|resp
operator|.
name|getFields
argument_list|()
operator|.
name|terms
argument_list|(
literal|"field"
operator|+
name|i
argument_list|)
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testSimpleTermVectors
specifier|public
name|void
name|testSimpleTermVectors
parameter_list|()
throws|throws
name|ElasticsearchException
throws|,
name|IOException
block|{
name|XContentBuilder
name|mapping
init|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"field"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"term_vector"
argument_list|,
literal|"with_positions_offsets_payloads"
argument_list|)
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
literal|"tv_test"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
name|mapping
argument_list|)
operator|.
name|addAlias
argument_list|(
operator|new
name|Alias
argument_list|(
literal|"alias"
argument_list|)
argument_list|)
operator|.
name|setSettings
argument_list|(
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
name|indexSettings
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.analyzer.tv_test.tokenizer"
argument_list|,
literal|"whitespace"
argument_list|)
operator|.
name|putArray
argument_list|(
literal|"index.analysis.analyzer.tv_test.filter"
argument_list|,
literal|"type_as_payload"
argument_list|,
literal|"lowercase"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ensureYellow
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"field"
argument_list|,
literal|"the quick brown fox jumps over the lazy dog"
argument_list|)
comment|// 0the3 4quick9 10brown15 16fox19 20jumps25 26over30
comment|// 31the34 35lazy39 40dog43
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|TermVectorRequestBuilder
name|resp
init|=
name|client
argument_list|()
operator|.
name|prepareTermVector
argument_list|(
name|indexOrAlias
argument_list|()
argument_list|,
literal|"type1"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|setPayloads
argument_list|(
literal|true
argument_list|)
operator|.
name|setOffsets
argument_list|(
literal|true
argument_list|)
operator|.
name|setPositions
argument_list|(
literal|true
argument_list|)
operator|.
name|setSelectedFields
argument_list|()
decl_stmt|;
name|TermVectorResponse
name|response
init|=
name|resp
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getIndex
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"doc id: "
operator|+
name|i
operator|+
literal|" doesn't exists but should"
argument_list|,
name|response
operator|.
name|isExists
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Fields
name|fields
init|=
name|response
operator|.
name|getFields
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|fields
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|checkBrownFoxTermVector
argument_list|(
name|fields
argument_list|,
literal|"field"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testRandomSingleTermVectors
specifier|public
name|void
name|testRandomSingleTermVectors
parameter_list|()
throws|throws
name|ElasticsearchException
throws|,
name|IOException
block|{
name|FieldType
name|ft
init|=
operator|new
name|FieldType
argument_list|()
decl_stmt|;
name|int
name|config
init|=
name|randomInt
argument_list|(
literal|6
argument_list|)
decl_stmt|;
name|boolean
name|storePositions
init|=
literal|false
decl_stmt|;
name|boolean
name|storeOffsets
init|=
literal|false
decl_stmt|;
name|boolean
name|storePayloads
init|=
literal|false
decl_stmt|;
name|boolean
name|storeTermVectors
init|=
literal|false
decl_stmt|;
switch|switch
condition|(
name|config
condition|)
block|{
case|case
literal|0
case|:
block|{
comment|// do nothing
break|break;
block|}
case|case
literal|1
case|:
block|{
name|storeTermVectors
operator|=
literal|true
expr_stmt|;
break|break;
block|}
case|case
literal|2
case|:
block|{
name|storeTermVectors
operator|=
literal|true
expr_stmt|;
name|storePositions
operator|=
literal|true
expr_stmt|;
break|break;
block|}
case|case
literal|3
case|:
block|{
name|storeTermVectors
operator|=
literal|true
expr_stmt|;
name|storeOffsets
operator|=
literal|true
expr_stmt|;
break|break;
block|}
case|case
literal|4
case|:
block|{
name|storeTermVectors
operator|=
literal|true
expr_stmt|;
name|storePositions
operator|=
literal|true
expr_stmt|;
name|storeOffsets
operator|=
literal|true
expr_stmt|;
break|break;
block|}
case|case
literal|5
case|:
block|{
name|storeTermVectors
operator|=
literal|true
expr_stmt|;
name|storePositions
operator|=
literal|true
expr_stmt|;
name|storePayloads
operator|=
literal|true
expr_stmt|;
break|break;
block|}
case|case
literal|6
case|:
block|{
name|storeTermVectors
operator|=
literal|true
expr_stmt|;
name|storePositions
operator|=
literal|true
expr_stmt|;
name|storeOffsets
operator|=
literal|true
expr_stmt|;
name|storePayloads
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
name|ft
operator|.
name|setStoreTermVectors
argument_list|(
name|storeTermVectors
argument_list|)
expr_stmt|;
name|ft
operator|.
name|setStoreTermVectorOffsets
argument_list|(
name|storeOffsets
argument_list|)
expr_stmt|;
name|ft
operator|.
name|setStoreTermVectorPayloads
argument_list|(
name|storePayloads
argument_list|)
expr_stmt|;
name|ft
operator|.
name|setStoreTermVectorPositions
argument_list|(
name|storePositions
argument_list|)
expr_stmt|;
name|String
name|optionString
init|=
name|AbstractFieldMapper
operator|.
name|termVectorOptionsToString
argument_list|(
name|ft
argument_list|)
decl_stmt|;
name|XContentBuilder
name|mapping
init|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"field"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"term_vector"
argument_list|,
name|optionString
argument_list|)
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
literal|"tv_test"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
name|mapping
argument_list|)
operator|.
name|setSettings
argument_list|(
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.analysis.analyzer.tv_test.tokenizer"
argument_list|,
literal|"whitespace"
argument_list|)
operator|.
name|putArray
argument_list|(
literal|"index.analysis.analyzer.tv_test.filter"
argument_list|,
literal|"type_as_payload"
argument_list|,
literal|"lowercase"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ensureYellow
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"field"
argument_list|,
literal|"the quick brown fox jumps over the lazy dog"
argument_list|)
comment|// 0the3 4quick9 10brown15 16fox19 20jumps25 26over30
comment|// 31the34 35lazy39 40dog43
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
block|}
name|String
index|[]
name|values
init|=
block|{
literal|"brown"
block|,
literal|"dog"
block|,
literal|"fox"
block|,
literal|"jumps"
block|,
literal|"lazy"
block|,
literal|"over"
block|,
literal|"quick"
block|,
literal|"the"
block|}
decl_stmt|;
name|int
index|[]
name|freq
init|=
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|2
block|}
decl_stmt|;
name|int
index|[]
index|[]
name|pos
init|=
block|{
block|{
literal|2
block|}
block|,
block|{
literal|8
block|}
block|,
block|{
literal|3
block|}
block|,
block|{
literal|4
block|}
block|,
block|{
literal|7
block|}
block|,
block|{
literal|5
block|}
block|,
block|{
literal|1
block|}
block|,
block|{
literal|0
block|,
literal|6
block|}
block|}
decl_stmt|;
name|int
index|[]
index|[]
name|startOffset
init|=
block|{
block|{
literal|10
block|}
block|,
block|{
literal|40
block|}
block|,
block|{
literal|16
block|}
block|,
block|{
literal|20
block|}
block|,
block|{
literal|35
block|}
block|,
block|{
literal|26
block|}
block|,
block|{
literal|4
block|}
block|,
block|{
literal|0
block|,
literal|31
block|}
block|}
decl_stmt|;
name|int
index|[]
index|[]
name|endOffset
init|=
block|{
block|{
literal|15
block|}
block|,
block|{
literal|43
block|}
block|,
block|{
literal|19
block|}
block|,
block|{
literal|25
block|}
block|,
block|{
literal|39
block|}
block|,
block|{
literal|30
block|}
block|,
block|{
literal|9
block|}
block|,
block|{
literal|3
block|,
literal|34
block|}
block|}
decl_stmt|;
name|boolean
name|isPayloadRequested
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
name|boolean
name|isOffsetRequested
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
name|boolean
name|isPositionsRequested
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
name|String
name|infoString
init|=
name|createInfoString
argument_list|(
name|isPositionsRequested
argument_list|,
name|isOffsetRequested
argument_list|,
name|isPayloadRequested
argument_list|,
name|optionString
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|TermVectorRequestBuilder
name|resp
init|=
name|client
argument_list|()
operator|.
name|prepareTermVector
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|setPayloads
argument_list|(
name|isPayloadRequested
argument_list|)
operator|.
name|setOffsets
argument_list|(
name|isOffsetRequested
argument_list|)
operator|.
name|setPositions
argument_list|(
name|isPositionsRequested
argument_list|)
operator|.
name|setSelectedFields
argument_list|()
decl_stmt|;
name|TermVectorResponse
name|response
init|=
name|resp
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|infoString
operator|+
literal|"doc id: "
operator|+
name|i
operator|+
literal|" doesn't exists but should"
argument_list|,
name|response
operator|.
name|isExists
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Fields
name|fields
init|=
name|response
operator|.
name|getFields
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|fields
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|ft
operator|.
name|storeTermVectors
argument_list|()
condition|?
literal|1
else|:
literal|0
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|ft
operator|.
name|storeTermVectors
argument_list|()
condition|)
block|{
name|Terms
name|terms
init|=
name|fields
operator|.
name|terms
argument_list|(
literal|"field"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|8l
argument_list|)
argument_list|)
expr_stmt|;
name|TermsEnum
name|iterator
init|=
name|terms
operator|.
name|iterator
argument_list|(
literal|null
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|values
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|String
name|string
init|=
name|values
index|[
name|j
index|]
decl_stmt|;
name|BytesRef
name|next
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|infoString
argument_list|,
name|next
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|infoString
operator|+
literal|"expected "
operator|+
name|string
argument_list|,
name|string
argument_list|,
name|equalTo
argument_list|(
name|next
operator|.
name|utf8ToString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|infoString
argument_list|,
name|next
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// do not test ttf or doc frequency, because here we have
comment|// many shards and do not know how documents are distributed
name|DocsAndPositionsEnum
name|docsAndPositions
init|=
name|iterator
operator|.
name|docsAndPositions
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// docs and pos only returns something if positions or
comment|// payloads or offsets are stored / requestd Otherwise use
comment|// DocsEnum?
name|assertThat
argument_list|(
name|infoString
argument_list|,
name|docsAndPositions
operator|.
name|nextDoc
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|infoString
argument_list|,
name|freq
index|[
name|j
index|]
argument_list|,
name|equalTo
argument_list|(
name|docsAndPositions
operator|.
name|freq
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|int
index|[]
name|termPos
init|=
name|pos
index|[
name|j
index|]
decl_stmt|;
name|int
index|[]
name|termStartOffset
init|=
name|startOffset
index|[
name|j
index|]
decl_stmt|;
name|int
index|[]
name|termEndOffset
init|=
name|endOffset
index|[
name|j
index|]
decl_stmt|;
if|if
condition|(
name|isPositionsRequested
operator|&&
name|storePositions
condition|)
block|{
name|assertThat
argument_list|(
name|infoString
argument_list|,
name|termPos
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
name|freq
index|[
name|j
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isOffsetRequested
operator|&&
name|storeOffsets
condition|)
block|{
name|assertThat
argument_list|(
name|termStartOffset
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
name|freq
index|[
name|j
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|termEndOffset
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
name|freq
index|[
name|j
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|freq
index|[
name|j
index|]
condition|;
name|k
operator|++
control|)
block|{
name|int
name|nextPosition
init|=
name|docsAndPositions
operator|.
name|nextPosition
argument_list|()
decl_stmt|;
comment|// only return something useful if requested and stored
if|if
condition|(
name|isPositionsRequested
operator|&&
name|storePositions
condition|)
block|{
name|assertThat
argument_list|(
name|infoString
operator|+
literal|"positions for term: "
operator|+
name|string
argument_list|,
name|nextPosition
argument_list|,
name|equalTo
argument_list|(
name|termPos
index|[
name|k
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|infoString
operator|+
literal|"positions for term: "
argument_list|,
name|nextPosition
argument_list|,
name|equalTo
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// only return something useful if requested and stored
if|if
condition|(
name|isPayloadRequested
operator|&&
name|storePayloads
condition|)
block|{
name|assertThat
argument_list|(
name|infoString
operator|+
literal|"payloads for term: "
operator|+
name|string
argument_list|,
name|docsAndPositions
operator|.
name|getPayload
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"word"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|infoString
operator|+
literal|"payloads for term: "
operator|+
name|string
argument_list|,
name|docsAndPositions
operator|.
name|getPayload
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// only return something useful if requested and stored
if|if
condition|(
name|isOffsetRequested
operator|&&
name|storeOffsets
condition|)
block|{
name|assertThat
argument_list|(
name|infoString
operator|+
literal|"startOffsets term: "
operator|+
name|string
argument_list|,
name|docsAndPositions
operator|.
name|startOffset
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|termStartOffset
index|[
name|k
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|infoString
operator|+
literal|"endOffsets term: "
operator|+
name|string
argument_list|,
name|docsAndPositions
operator|.
name|endOffset
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|termEndOffset
index|[
name|k
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|infoString
operator|+
literal|"startOffsets term: "
operator|+
name|string
argument_list|,
name|docsAndPositions
operator|.
name|startOffset
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|infoString
operator|+
literal|"endOffsets term: "
operator|+
name|string
argument_list|,
name|docsAndPositions
operator|.
name|endOffset
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|assertThat
argument_list|(
name|iterator
operator|.
name|next
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|createInfoString
specifier|private
name|String
name|createInfoString
parameter_list|(
name|boolean
name|isPositionsRequested
parameter_list|,
name|boolean
name|isOffsetRequested
parameter_list|,
name|boolean
name|isPayloadRequested
parameter_list|,
name|String
name|optionString
parameter_list|)
block|{
name|String
name|ret
init|=
literal|"Store config: "
operator|+
name|optionString
operator|+
literal|"\n"
operator|+
literal|"Requested: pos-"
operator|+
operator|(
name|isPositionsRequested
condition|?
literal|"yes"
else|:
literal|"no"
operator|)
operator|+
literal|", offsets-"
operator|+
operator|(
name|isOffsetRequested
condition|?
literal|"yes"
else|:
literal|"no"
operator|)
operator|+
literal|", payload- "
operator|+
operator|(
name|isPayloadRequested
condition|?
literal|"yes"
else|:
literal|"no"
operator|)
operator|+
literal|"\n"
decl_stmt|;
return|return
name|ret
return|;
block|}
annotation|@
name|Test
DECL|method|testDuelESLucene
specifier|public
name|void
name|testDuelESLucene
parameter_list|()
throws|throws
name|Exception
block|{
name|TestFieldSetting
index|[]
name|testFieldSettings
init|=
name|getFieldSettings
argument_list|()
decl_stmt|;
name|createIndexBasedOnFieldSettings
argument_list|(
literal|"test"
argument_list|,
literal|"alias"
argument_list|,
name|testFieldSettings
argument_list|)
expr_stmt|;
comment|//we generate as many docs as many shards we have
name|TestDoc
index|[]
name|testDocs
init|=
name|generateTestDocs
argument_list|(
literal|"test"
argument_list|,
name|testFieldSettings
argument_list|)
decl_stmt|;
name|DirectoryReader
name|directoryReader
init|=
name|indexDocsWithLucene
argument_list|(
name|testDocs
argument_list|)
decl_stmt|;
name|TestConfig
index|[]
name|testConfigs
init|=
name|generateTestConfigs
argument_list|(
literal|20
argument_list|,
name|testDocs
argument_list|,
name|testFieldSettings
argument_list|)
decl_stmt|;
for|for
control|(
name|TestConfig
name|test
range|:
name|testConfigs
control|)
block|{
try|try
block|{
name|TermVectorRequestBuilder
name|request
init|=
name|getRequestForConfig
argument_list|(
name|test
argument_list|)
decl_stmt|;
if|if
condition|(
name|test
operator|.
name|expectedException
operator|!=
literal|null
condition|)
block|{
name|assertThrows
argument_list|(
name|request
argument_list|,
name|test
operator|.
name|expectedException
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|TermVectorResponse
name|response
init|=
name|request
operator|.
name|get
argument_list|()
decl_stmt|;
name|Fields
name|luceneTermVectors
init|=
name|getTermVectorsFromLucene
argument_list|(
name|directoryReader
argument_list|,
name|test
operator|.
name|doc
argument_list|)
decl_stmt|;
name|validateResponse
argument_list|(
name|response
argument_list|,
name|luceneTermVectors
argument_list|,
name|test
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Test exception while running "
operator|+
name|test
operator|.
name|toString
argument_list|()
argument_list|,
name|t
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testRandomPayloadWithDelimitedPayloadTokenFilter
specifier|public
name|void
name|testRandomPayloadWithDelimitedPayloadTokenFilter
parameter_list|()
throws|throws
name|ElasticsearchException
throws|,
name|IOException
block|{
comment|//create the test document
name|int
name|encoding
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|String
name|encodingString
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|encoding
operator|==
literal|0
condition|)
block|{
name|encodingString
operator|=
literal|"float"
expr_stmt|;
block|}
if|if
condition|(
name|encoding
operator|==
literal|1
condition|)
block|{
name|encodingString
operator|=
literal|"int"
expr_stmt|;
block|}
if|if
condition|(
name|encoding
operator|==
literal|2
condition|)
block|{
name|encodingString
operator|=
literal|"identity"
expr_stmt|;
block|}
name|String
index|[]
name|tokens
init|=
name|crateRandomTokens
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|BytesRef
argument_list|>
argument_list|>
name|payloads
init|=
name|createPayloads
argument_list|(
name|tokens
argument_list|,
name|encoding
argument_list|)
decl_stmt|;
name|String
name|delimiter
init|=
name|createRandomDelimiter
argument_list|(
name|tokens
argument_list|)
decl_stmt|;
name|String
name|queryString
init|=
name|createString
argument_list|(
name|tokens
argument_list|,
name|payloads
argument_list|,
name|encoding
argument_list|,
name|delimiter
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
comment|//create the mapping
name|XContentBuilder
name|mapping
init|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"field"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"term_vector"
argument_list|,
literal|"with_positions_offsets_payloads"
argument_list|)
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
literal|"payload_test"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
name|mapping
argument_list|)
operator|.
name|setSettings
argument_list|(
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
name|indexSettings
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.analyzer.payload_test.tokenizer"
argument_list|,
literal|"whitespace"
argument_list|)
operator|.
name|putArray
argument_list|(
literal|"index.analysis.analyzer.payload_test.filter"
argument_list|,
literal|"my_delimited_payload_filter"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.my_delimited_payload_filter.delimiter"
argument_list|,
name|delimiter
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.my_delimited_payload_filter.encoding"
argument_list|,
name|encodingString
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.my_delimited_payload_filter.type"
argument_list|,
literal|"delimited_payload_filter"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ensureYellow
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"field"
argument_list|,
name|queryString
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|TermVectorRequestBuilder
name|resp
init|=
name|client
argument_list|()
operator|.
name|prepareTermVector
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|setPayloads
argument_list|(
literal|true
argument_list|)
operator|.
name|setOffsets
argument_list|(
literal|true
argument_list|)
operator|.
name|setPositions
argument_list|(
literal|true
argument_list|)
operator|.
name|setSelectedFields
argument_list|()
decl_stmt|;
name|TermVectorResponse
name|response
init|=
name|resp
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
literal|"doc id 1 doesn't exists but should"
argument_list|,
name|response
operator|.
name|isExists
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Fields
name|fields
init|=
name|response
operator|.
name|getFields
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|fields
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Terms
name|terms
init|=
name|fields
operator|.
name|terms
argument_list|(
literal|"field"
argument_list|)
decl_stmt|;
name|TermsEnum
name|iterator
init|=
name|terms
operator|.
name|iterator
argument_list|(
literal|null
argument_list|)
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|next
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|String
name|term
init|=
name|iterator
operator|.
name|term
argument_list|()
operator|.
name|utf8ToString
argument_list|()
decl_stmt|;
name|DocsAndPositionsEnum
name|docsAndPositions
init|=
name|iterator
operator|.
name|docsAndPositions
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|docsAndPositions
operator|.
name|nextDoc
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|BytesRef
argument_list|>
name|curPayloads
init|=
name|payloads
operator|.
name|get
argument_list|(
name|term
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|term
argument_list|,
name|curPayloads
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|docsAndPositions
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|docsAndPositions
operator|.
name|freq
argument_list|()
condition|;
name|k
operator|++
control|)
block|{
name|docsAndPositions
operator|.
name|nextPosition
argument_list|()
expr_stmt|;
if|if
condition|(
name|docsAndPositions
operator|.
name|getPayload
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|String
name|infoString
init|=
literal|"\nterm: "
operator|+
name|term
operator|+
literal|" has payload \n"
operator|+
name|docsAndPositions
operator|.
name|getPayload
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"\n but should have payload \n"
operator|+
name|curPayloads
operator|.
name|get
argument_list|(
name|k
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|infoString
argument_list|,
name|docsAndPositions
operator|.
name|getPayload
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|curPayloads
operator|.
name|get
argument_list|(
name|k
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|infoString
init|=
literal|"\nterm: "
operator|+
name|term
operator|+
literal|" has no payload but should have payload \n"
operator|+
name|curPayloads
operator|.
name|get
argument_list|(
name|k
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|infoString
argument_list|,
name|curPayloads
operator|.
name|get
argument_list|(
name|k
argument_list|)
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|assertThat
argument_list|(
name|iterator
operator|.
name|next
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|createRandomDelimiter
specifier|private
name|String
name|createRandomDelimiter
parameter_list|(
name|String
index|[]
name|tokens
parameter_list|)
block|{
name|String
name|delimiter
init|=
literal|""
decl_stmt|;
name|boolean
name|isTokenOrWhitespace
init|=
literal|true
decl_stmt|;
while|while
condition|(
name|isTokenOrWhitespace
condition|)
block|{
name|isTokenOrWhitespace
operator|=
literal|false
expr_stmt|;
name|delimiter
operator|=
name|randomUnicodeOfLength
argument_list|(
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|token
range|:
name|tokens
control|)
block|{
if|if
condition|(
name|token
operator|.
name|contains
argument_list|(
name|delimiter
argument_list|)
condition|)
block|{
name|isTokenOrWhitespace
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|Character
operator|.
name|isWhitespace
argument_list|(
name|delimiter
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|)
condition|)
block|{
name|isTokenOrWhitespace
operator|=
literal|true
expr_stmt|;
block|}
block|}
return|return
name|delimiter
return|;
block|}
DECL|method|createString
specifier|private
name|String
name|createString
parameter_list|(
name|String
index|[]
name|tokens
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|BytesRef
argument_list|>
argument_list|>
name|payloads
parameter_list|,
name|int
name|encoding
parameter_list|,
name|char
name|delimiter
parameter_list|)
block|{
name|String
name|resultString
init|=
literal|""
decl_stmt|;
name|ObjectIntOpenHashMap
argument_list|<
name|String
argument_list|>
name|payloadCounter
init|=
operator|new
name|ObjectIntOpenHashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|token
range|:
name|tokens
control|)
block|{
if|if
condition|(
operator|!
name|payloadCounter
operator|.
name|containsKey
argument_list|(
name|token
argument_list|)
condition|)
block|{
name|payloadCounter
operator|.
name|putIfAbsent
argument_list|(
name|token
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|payloadCounter
operator|.
name|put
argument_list|(
name|token
argument_list|,
name|payloadCounter
operator|.
name|get
argument_list|(
name|token
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|resultString
operator|=
name|resultString
operator|+
name|token
expr_stmt|;
name|BytesRef
name|payload
init|=
name|payloads
operator|.
name|get
argument_list|(
name|token
argument_list|)
operator|.
name|get
argument_list|(
name|payloadCounter
operator|.
name|get
argument_list|(
name|token
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|payload
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|resultString
operator|=
name|resultString
operator|+
name|delimiter
expr_stmt|;
switch|switch
condition|(
name|encoding
condition|)
block|{
case|case
literal|0
case|:
block|{
name|resultString
operator|=
name|resultString
operator|+
name|Float
operator|.
name|toString
argument_list|(
name|PayloadHelper
operator|.
name|decodeFloat
argument_list|(
name|payload
operator|.
name|bytes
argument_list|,
name|payload
operator|.
name|offset
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|1
case|:
block|{
name|resultString
operator|=
name|resultString
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|PayloadHelper
operator|.
name|decodeInt
argument_list|(
name|payload
operator|.
name|bytes
argument_list|,
name|payload
operator|.
name|offset
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|2
case|:
block|{
name|resultString
operator|=
name|resultString
operator|+
name|payload
operator|.
name|utf8ToString
argument_list|()
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|ElasticsearchException
argument_list|(
literal|"unsupported encoding type"
argument_list|)
throw|;
block|}
block|}
block|}
name|resultString
operator|=
name|resultString
operator|+
literal|" "
expr_stmt|;
block|}
return|return
name|resultString
return|;
block|}
DECL|method|createPayloads
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|BytesRef
argument_list|>
argument_list|>
name|createPayloads
parameter_list|(
name|String
index|[]
name|tokens
parameter_list|,
name|int
name|encoding
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|BytesRef
argument_list|>
argument_list|>
name|payloads
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|token
range|:
name|tokens
control|)
block|{
if|if
condition|(
name|payloads
operator|.
name|get
argument_list|(
name|token
argument_list|)
operator|==
literal|null
condition|)
block|{
name|payloads
operator|.
name|put
argument_list|(
name|token
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|BytesRef
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|boolean
name|createPayload
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
if|if
condition|(
name|createPayload
condition|)
block|{
switch|switch
condition|(
name|encoding
condition|)
block|{
case|case
literal|0
case|:
block|{
name|float
name|theFloat
init|=
name|randomFloat
argument_list|()
decl_stmt|;
name|payloads
operator|.
name|get
argument_list|(
name|token
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|BytesRef
argument_list|(
name|PayloadHelper
operator|.
name|encodeFloat
argument_list|(
name|theFloat
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|1
case|:
block|{
name|payloads
operator|.
name|get
argument_list|(
name|token
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|BytesRef
argument_list|(
name|PayloadHelper
operator|.
name|encodeInt
argument_list|(
name|randomInt
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|2
case|:
block|{
name|String
name|payload
init|=
name|randomUnicodeOfLengthBetween
argument_list|(
literal|50
argument_list|,
literal|100
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|payload
operator|.
name|length
argument_list|()
condition|;
name|c
operator|++
control|)
block|{
if|if
condition|(
name|Character
operator|.
name|isWhitespace
argument_list|(
name|payload
operator|.
name|charAt
argument_list|(
name|c
argument_list|)
argument_list|)
condition|)
block|{
name|payload
operator|=
name|payload
operator|.
name|replace
argument_list|(
name|payload
operator|.
name|charAt
argument_list|(
name|c
argument_list|)
argument_list|,
literal|'w'
argument_list|)
expr_stmt|;
block|}
block|}
name|payloads
operator|.
name|get
argument_list|(
name|token
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|BytesRef
argument_list|(
name|payload
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|ElasticsearchException
argument_list|(
literal|"unsupported encoding type"
argument_list|)
throw|;
block|}
block|}
block|}
else|else
block|{
name|payloads
operator|.
name|get
argument_list|(
name|token
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|BytesRef
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|payloads
return|;
block|}
DECL|method|crateRandomTokens
specifier|private
name|String
index|[]
name|crateRandomTokens
parameter_list|()
block|{
name|String
index|[]
name|tokens
init|=
block|{
literal|"the"
block|,
literal|"quick"
block|,
literal|"brown"
block|,
literal|"fox"
block|}
decl_stmt|;
name|int
name|numTokensWithDuplicates
init|=
name|randomIntBetween
argument_list|(
literal|3
argument_list|,
literal|15
argument_list|)
decl_stmt|;
name|String
index|[]
name|finalTokens
init|=
operator|new
name|String
index|[
name|numTokensWithDuplicates
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numTokensWithDuplicates
condition|;
name|i
operator|++
control|)
block|{
name|finalTokens
index|[
name|i
index|]
operator|=
name|tokens
index|[
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|tokens
operator|.
name|length
operator|-
literal|1
argument_list|)
index|]
expr_stmt|;
block|}
return|return
name|finalTokens
return|;
block|}
comment|// like testSimpleTermVectors but we create fields with no term vectors
annotation|@
name|Test
DECL|method|testSimpleTermVectorsWithGenerate
specifier|public
name|void
name|testSimpleTermVectorsWithGenerate
parameter_list|()
throws|throws
name|ElasticsearchException
throws|,
name|IOException
block|{
name|String
index|[]
name|fieldNames
init|=
operator|new
name|String
index|[
literal|10
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fieldNames
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|fieldNames
index|[
name|i
index|]
operator|=
literal|"field"
operator|+
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|XContentBuilder
name|mapping
init|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
decl_stmt|;
name|XContentBuilder
name|source
init|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|field
range|:
name|fieldNames
control|)
block|{
name|mapping
operator|.
name|startObject
argument_list|(
name|field
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"term_vector"
argument_list|,
name|randomBoolean
argument_list|()
condition|?
literal|"with_positions_offsets_payloads"
else|:
literal|"no"
argument_list|)
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
literal|"tv_test"
argument_list|)
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|source
operator|.
name|field
argument_list|(
name|field
argument_list|,
literal|"the quick brown fox jumps over the lazy dog"
argument_list|)
expr_stmt|;
block|}
name|mapping
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|source
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
name|mapping
argument_list|)
operator|.
name|setSettings
argument_list|(
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
name|indexSettings
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.analyzer.tv_test.tokenizer"
argument_list|,
literal|"whitespace"
argument_list|)
operator|.
name|putArray
argument_list|(
literal|"index.analysis.analyzer.tv_test.filter"
argument_list|,
literal|"type_as_payload"
argument_list|,
literal|"lowercase"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|setSource
argument_list|(
name|source
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|TermVectorResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareTermVector
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|setPayloads
argument_list|(
literal|true
argument_list|)
operator|.
name|setOffsets
argument_list|(
literal|true
argument_list|)
operator|.
name|setPositions
argument_list|(
literal|true
argument_list|)
operator|.
name|setSelectedFields
argument_list|(
name|fieldNames
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
literal|"doc id: "
operator|+
name|i
operator|+
literal|" doesn't exists but should"
argument_list|,
name|response
operator|.
name|isExists
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Fields
name|fields
init|=
name|response
operator|.
name|getFields
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|fields
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|fieldNames
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|fieldName
range|:
name|fieldNames
control|)
block|{
comment|// MemoryIndex does not support payloads
name|checkBrownFoxTermVector
argument_list|(
name|fields
argument_list|,
name|fieldName
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|checkBrownFoxTermVector
specifier|private
name|void
name|checkBrownFoxTermVector
parameter_list|(
name|Fields
name|fields
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|boolean
name|withPayloads
parameter_list|)
throws|throws
name|ElasticsearchException
throws|,
name|IOException
block|{
name|String
index|[]
name|values
init|=
block|{
literal|"brown"
block|,
literal|"dog"
block|,
literal|"fox"
block|,
literal|"jumps"
block|,
literal|"lazy"
block|,
literal|"over"
block|,
literal|"quick"
block|,
literal|"the"
block|}
decl_stmt|;
name|int
index|[]
name|freq
init|=
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|2
block|}
decl_stmt|;
name|int
index|[]
index|[]
name|pos
init|=
block|{
block|{
literal|2
block|}
block|,
block|{
literal|8
block|}
block|,
block|{
literal|3
block|}
block|,
block|{
literal|4
block|}
block|,
block|{
literal|7
block|}
block|,
block|{
literal|5
block|}
block|,
block|{
literal|1
block|}
block|,
block|{
literal|0
block|,
literal|6
block|}
block|}
decl_stmt|;
name|int
index|[]
index|[]
name|startOffset
init|=
block|{
block|{
literal|10
block|}
block|,
block|{
literal|40
block|}
block|,
block|{
literal|16
block|}
block|,
block|{
literal|20
block|}
block|,
block|{
literal|35
block|}
block|,
block|{
literal|26
block|}
block|,
block|{
literal|4
block|}
block|,
block|{
literal|0
block|,
literal|31
block|}
block|}
decl_stmt|;
name|int
index|[]
index|[]
name|endOffset
init|=
block|{
block|{
literal|15
block|}
block|,
block|{
literal|43
block|}
block|,
block|{
literal|19
block|}
block|,
block|{
literal|25
block|}
block|,
block|{
literal|39
block|}
block|,
block|{
literal|30
block|}
block|,
block|{
literal|9
block|}
block|,
block|{
literal|3
block|,
literal|34
block|}
block|}
decl_stmt|;
name|Terms
name|terms
init|=
name|fields
operator|.
name|terms
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|8l
argument_list|)
argument_list|)
expr_stmt|;
name|TermsEnum
name|iterator
init|=
name|terms
operator|.
name|iterator
argument_list|(
literal|null
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|values
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|String
name|string
init|=
name|values
index|[
name|j
index|]
decl_stmt|;
name|BytesRef
name|next
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|next
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"expected "
operator|+
name|string
argument_list|,
name|string
argument_list|,
name|equalTo
argument_list|(
name|next
operator|.
name|utf8ToString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|next
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// do not test ttf or doc frequency, because here we have many
comment|// shards and do not know how documents are distributed
name|DocsAndPositionsEnum
name|docsAndPositions
init|=
name|iterator
operator|.
name|docsAndPositions
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|docsAndPositions
operator|.
name|nextDoc
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|freq
index|[
name|j
index|]
argument_list|,
name|equalTo
argument_list|(
name|docsAndPositions
operator|.
name|freq
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|int
index|[]
name|termPos
init|=
name|pos
index|[
name|j
index|]
decl_stmt|;
name|int
index|[]
name|termStartOffset
init|=
name|startOffset
index|[
name|j
index|]
decl_stmt|;
name|int
index|[]
name|termEndOffset
init|=
name|endOffset
index|[
name|j
index|]
decl_stmt|;
name|assertThat
argument_list|(
name|termPos
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
name|freq
index|[
name|j
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|termStartOffset
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
name|freq
index|[
name|j
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|termEndOffset
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
name|freq
index|[
name|j
index|]
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|freq
index|[
name|j
index|]
condition|;
name|k
operator|++
control|)
block|{
name|int
name|nextPosition
init|=
name|docsAndPositions
operator|.
name|nextPosition
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
literal|"term: "
operator|+
name|string
argument_list|,
name|nextPosition
argument_list|,
name|equalTo
argument_list|(
name|termPos
index|[
name|k
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"term: "
operator|+
name|string
argument_list|,
name|docsAndPositions
operator|.
name|startOffset
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|termStartOffset
index|[
name|k
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"term: "
operator|+
name|string
argument_list|,
name|docsAndPositions
operator|.
name|endOffset
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|termEndOffset
index|[
name|k
index|]
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|withPayloads
condition|)
block|{
name|assertThat
argument_list|(
literal|"term: "
operator|+
name|string
argument_list|,
name|docsAndPositions
operator|.
name|getPayload
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"word"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|assertThat
argument_list|(
name|iterator
operator|.
name|next
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDuelWithAndWithoutTermVectors
specifier|public
name|void
name|testDuelWithAndWithoutTermVectors
parameter_list|()
throws|throws
name|ElasticsearchException
throws|,
name|IOException
throws|,
name|ExecutionException
throws|,
name|InterruptedException
block|{
comment|// setup indices
name|String
index|[]
name|indexNames
init|=
operator|new
name|String
index|[]
block|{
literal|"with_tv"
block|,
literal|"without_tv"
block|}
decl_stmt|;
name|ImmutableSettings
operator|.
name|Builder
name|settings
init|=
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
name|indexSettings
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.analyzer"
argument_list|,
literal|"standard"
argument_list|)
decl_stmt|;
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
name|indexNames
index|[
literal|0
index|]
argument_list|)
operator|.
name|setSettings
argument_list|(
name|settings
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
literal|"field1"
argument_list|,
literal|"type=string,term_vector=with_positions_offsets"
argument_list|)
argument_list|)
expr_stmt|;
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
name|indexNames
index|[
literal|1
index|]
argument_list|)
operator|.
name|setSettings
argument_list|(
name|settings
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
literal|"field1"
argument_list|,
literal|"type=string,term_vector=no"
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
comment|// index documents with and without term vectors
name|String
index|[]
name|content
init|=
operator|new
name|String
index|[]
block|{
literal|"Generating a random permutation of a sequence (such as when shuffling cards)."
block|,
literal|"Selecting a random sample of a population (important in statistical sampling)."
block|,
literal|"Allocating experimental units via random assignment to a treatment or control condition."
block|,
literal|"Generating random numbers: see Random number generation."
block|,
literal|"Selecting a random sample of a population (important in statistical sampling)."
block|,
literal|"Allocating experimental units via random assignment to a treatment or control condition."
block|,
literal|"Transforming a data stream (such as when using a scrambler in telecommunications)."
block|}
decl_stmt|;
name|List
argument_list|<
name|IndexRequestBuilder
argument_list|>
name|indexBuilders
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|content
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|String
name|indexName
range|:
name|indexNames
control|)
block|{
name|indexBuilders
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|()
operator|.
name|setIndex
argument_list|(
name|indexName
argument_list|)
operator|.
name|setType
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|setId
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
name|content
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|indexBuilders
argument_list|)
expr_stmt|;
comment|// request tvs and compare from each index
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|content
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Fields
index|[]
name|fields
init|=
operator|new
name|Fields
index|[
literal|2
index|]
decl_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|indexName
range|:
name|indexNames
control|)
block|{
name|TermVectorResponse
name|resp
init|=
name|client
argument_list|()
operator|.
name|prepareTermVector
argument_list|(
name|indexName
argument_list|,
literal|"type1"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|setOffsets
argument_list|(
literal|true
argument_list|)
operator|.
name|setPositions
argument_list|(
literal|true
argument_list|)
operator|.
name|setSelectedFields
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
literal|"doc with index: test_with_tv, type1 and id: "
operator|+
name|i
argument_list|,
name|resp
operator|.
name|isExists
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|fields
index|[
name|idx
operator|++
index|]
operator|=
name|resp
operator|.
name|getFields
argument_list|()
expr_stmt|;
block|}
name|compareTermVectors
argument_list|(
literal|"field1"
argument_list|,
name|fields
index|[
literal|0
index|]
argument_list|,
name|fields
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|compareTermVectors
specifier|private
name|void
name|compareTermVectors
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|Fields
name|fields0
parameter_list|,
name|Fields
name|fields1
parameter_list|)
throws|throws
name|IOException
block|{
name|Terms
name|terms0
init|=
name|fields0
operator|.
name|terms
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
name|Terms
name|terms1
init|=
name|fields1
operator|.
name|terms
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|terms0
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms1
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms0
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|terms1
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|TermsEnum
name|iter0
init|=
name|terms0
operator|.
name|iterator
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|TermsEnum
name|iter1
init|=
name|terms1
operator|.
name|iterator
argument_list|(
literal|null
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|terms0
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|BytesRef
name|next0
init|=
name|iter0
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|next0
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|BytesRef
name|next1
init|=
name|iter1
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|next1
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// compare field value
name|String
name|string0
init|=
name|next0
operator|.
name|utf8ToString
argument_list|()
decl_stmt|;
name|String
name|string1
init|=
name|next1
operator|.
name|utf8ToString
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
literal|"expected: "
operator|+
name|string0
argument_list|,
name|string0
argument_list|,
name|equalTo
argument_list|(
name|string1
argument_list|)
argument_list|)
expr_stmt|;
comment|// compare df and ttf
name|assertThat
argument_list|(
literal|"term: "
operator|+
name|string0
argument_list|,
name|iter0
operator|.
name|docFreq
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|iter1
operator|.
name|docFreq
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"term: "
operator|+
name|string0
argument_list|,
name|iter0
operator|.
name|totalTermFreq
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|iter1
operator|.
name|totalTermFreq
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// compare freq and docs
name|DocsAndPositionsEnum
name|docsAndPositions0
init|=
name|iter0
operator|.
name|docsAndPositions
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|DocsAndPositionsEnum
name|docsAndPositions1
init|=
name|iter1
operator|.
name|docsAndPositions
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
literal|"term: "
operator|+
name|string0
argument_list|,
name|docsAndPositions0
operator|.
name|nextDoc
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|docsAndPositions1
operator|.
name|nextDoc
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"term: "
operator|+
name|string0
argument_list|,
name|docsAndPositions0
operator|.
name|freq
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|docsAndPositions1
operator|.
name|freq
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// compare position, start offsets and end offsets
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|docsAndPositions0
operator|.
name|freq
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|assertThat
argument_list|(
literal|"term: "
operator|+
name|string0
argument_list|,
name|docsAndPositions0
operator|.
name|nextPosition
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|docsAndPositions1
operator|.
name|nextPosition
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"term: "
operator|+
name|string0
argument_list|,
name|docsAndPositions0
operator|.
name|startOffset
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|docsAndPositions1
operator|.
name|startOffset
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"term: "
operator|+
name|string0
argument_list|,
name|docsAndPositions0
operator|.
name|endOffset
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|docsAndPositions1
operator|.
name|endOffset
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|assertThat
argument_list|(
name|iter0
operator|.
name|next
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|iter1
operator|.
name|next
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSimpleWildCards
specifier|public
name|void
name|testSimpleWildCards
parameter_list|()
throws|throws
name|ElasticsearchException
throws|,
name|IOException
block|{
name|int
name|numFields
init|=
literal|25
decl_stmt|;
name|XContentBuilder
name|mapping
init|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
decl_stmt|;
name|XContentBuilder
name|source
init|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numFields
condition|;
name|i
operator|++
control|)
block|{
name|mapping
operator|.
name|startObject
argument_list|(
literal|"field"
operator|+
name|i
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"term_vector"
argument_list|,
name|randomBoolean
argument_list|()
condition|?
literal|"yes"
else|:
literal|"no"
argument_list|)
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|source
operator|.
name|field
argument_list|(
literal|"field"
operator|+
name|i
argument_list|,
literal|"some text here"
argument_list|)
expr_stmt|;
block|}
name|source
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|mapping
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addAlias
argument_list|(
operator|new
name|Alias
argument_list|(
literal|"alias"
argument_list|)
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
name|mapping
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"0"
argument_list|)
operator|.
name|setSource
argument_list|(
name|source
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|TermVectorResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareTermVector
argument_list|(
name|indexOrAlias
argument_list|()
argument_list|,
literal|"type1"
argument_list|,
literal|"0"
argument_list|)
operator|.
name|setSelectedFields
argument_list|(
literal|"field*"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
literal|"Doc doesn't exists but should"
argument_list|,
name|response
operator|.
name|isExists
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getIndex
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"All term vectors should have been generated"
argument_list|,
name|response
operator|.
name|getFields
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|numFields
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testArtificialVsExisting
specifier|public
name|void
name|testArtificialVsExisting
parameter_list|()
throws|throws
name|ElasticsearchException
throws|,
name|ExecutionException
throws|,
name|InterruptedException
throws|,
name|IOException
block|{
comment|// setup indices
name|ImmutableSettings
operator|.
name|Builder
name|settings
init|=
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
name|indexSettings
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.analyzer"
argument_list|,
literal|"standard"
argument_list|)
decl_stmt|;
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|settings
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
literal|"field1"
argument_list|,
literal|"type=string,term_vector=with_positions_offsets"
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
comment|// index documents existing document
name|String
index|[]
name|content
init|=
operator|new
name|String
index|[]
block|{
literal|"Generating a random permutation of a sequence (such as when shuffling cards)."
block|,
literal|"Selecting a random sample of a population (important in statistical sampling)."
block|,
literal|"Allocating experimental units via random assignment to a treatment or control condition."
block|,
literal|"Generating random numbers: see Random number generation."
block|}
decl_stmt|;
name|List
argument_list|<
name|IndexRequestBuilder
argument_list|>
name|indexBuilders
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|content
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|indexBuilders
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|()
operator|.
name|setIndex
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setType
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|setId
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
name|content
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|indexBuilders
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|content
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
comment|// request tvs from existing document
name|TermVectorResponse
name|respExisting
init|=
name|client
argument_list|()
operator|.
name|prepareTermVector
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|setOffsets
argument_list|(
literal|true
argument_list|)
operator|.
name|setPositions
argument_list|(
literal|true
argument_list|)
operator|.
name|setFieldStatistics
argument_list|(
literal|true
argument_list|)
operator|.
name|setTermStatistics
argument_list|(
literal|true
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
literal|"doc with index: test, type1 and id: existing"
argument_list|,
name|respExisting
operator|.
name|isExists
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// request tvs from artificial document
name|TermVectorResponse
name|respArtificial
init|=
name|client
argument_list|()
operator|.
name|prepareTermVector
argument_list|()
operator|.
name|setIndex
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setType
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|setRouting
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
comment|// ensure we get the stats from the same shard as existing doc
operator|.
name|setDoc
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"field1"
argument_list|,
name|content
index|[
name|i
index|]
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|setOffsets
argument_list|(
literal|true
argument_list|)
operator|.
name|setPositions
argument_list|(
literal|true
argument_list|)
operator|.
name|setFieldStatistics
argument_list|(
literal|true
argument_list|)
operator|.
name|setTermStatistics
argument_list|(
literal|true
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
literal|"doc with index: test, type1 and id: "
operator|+
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|,
name|respArtificial
operator|.
name|isExists
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// compare existing tvs with artificial
name|compareTermVectors
argument_list|(
literal|"field1"
argument_list|,
name|respExisting
operator|.
name|getFields
argument_list|()
argument_list|,
name|respArtificial
operator|.
name|getFields
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testArtificialNoDoc
specifier|public
name|void
name|testArtificialNoDoc
parameter_list|()
throws|throws
name|IOException
block|{
comment|// setup indices
name|ImmutableSettings
operator|.
name|Builder
name|settings
init|=
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
name|indexSettings
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.analyzer"
argument_list|,
literal|"standard"
argument_list|)
decl_stmt|;
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|settings
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
literal|"field1"
argument_list|,
literal|"type=string"
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
comment|// request tvs from artificial document
name|String
name|text
init|=
literal|"the quick brown fox jumps over the lazy dog"
decl_stmt|;
name|TermVectorResponse
name|resp
init|=
name|client
argument_list|()
operator|.
name|prepareTermVector
argument_list|()
operator|.
name|setIndex
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setType
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|setDoc
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"field1"
argument_list|,
name|text
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|setOffsets
argument_list|(
literal|true
argument_list|)
operator|.
name|setPositions
argument_list|(
literal|true
argument_list|)
operator|.
name|setFieldStatistics
argument_list|(
literal|true
argument_list|)
operator|.
name|setTermStatistics
argument_list|(
literal|true
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|resp
operator|.
name|isExists
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|checkBrownFoxTermVector
argument_list|(
name|resp
operator|.
name|getFields
argument_list|()
argument_list|,
literal|"field1"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testArtificialNonExistingField
specifier|public
name|void
name|testArtificialNonExistingField
parameter_list|()
throws|throws
name|Exception
block|{
comment|// setup indices
name|ImmutableSettings
operator|.
name|Builder
name|settings
init|=
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
name|indexSettings
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.analyzer"
argument_list|,
literal|"standard"
argument_list|)
decl_stmt|;
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|settings
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
literal|"field1"
argument_list|,
literal|"type=string"
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
comment|// index just one doc
name|List
argument_list|<
name|IndexRequestBuilder
argument_list|>
name|indexBuilders
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|indexBuilders
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|()
operator|.
name|setIndex
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setType
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|setId
argument_list|(
literal|"1"
argument_list|)
operator|.
name|setRouting
argument_list|(
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"some text"
argument_list|)
argument_list|)
expr_stmt|;
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|indexBuilders
argument_list|)
expr_stmt|;
comment|// request tvs from artificial document
name|XContentBuilder
name|doc
init|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"field1"
argument_list|,
literal|"the quick brown fox jumps over the lazy dog"
argument_list|)
operator|.
name|field
argument_list|(
literal|"non_existing"
argument_list|,
literal|"the quick brown fox jumps over the lazy dog"
argument_list|)
operator|.
name|endObject
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|TermVectorResponse
name|resp
init|=
name|client
argument_list|()
operator|.
name|prepareTermVector
argument_list|()
operator|.
name|setIndex
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setType
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|setDoc
argument_list|(
name|doc
argument_list|)
operator|.
name|setRouting
argument_list|(
literal|""
operator|+
name|i
argument_list|)
operator|.
name|setOffsets
argument_list|(
literal|true
argument_list|)
operator|.
name|setPositions
argument_list|(
literal|true
argument_list|)
operator|.
name|setFieldStatistics
argument_list|(
literal|true
argument_list|)
operator|.
name|setTermStatistics
argument_list|(
literal|true
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|resp
operator|.
name|isExists
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|checkBrownFoxTermVector
argument_list|(
name|resp
operator|.
name|getFields
argument_list|()
argument_list|,
literal|"field1"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// we should have created a mapping for this field
name|waitForMappingOnMaster
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"non_existing"
argument_list|)
expr_stmt|;
comment|// and return the generated term vectors
name|checkBrownFoxTermVector
argument_list|(
name|resp
operator|.
name|getFields
argument_list|()
argument_list|,
literal|"non_existing"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testPerFieldAnalyzer
specifier|public
name|void
name|testPerFieldAnalyzer
parameter_list|()
throws|throws
name|ElasticsearchException
throws|,
name|IOException
block|{
name|int
name|numFields
init|=
literal|25
decl_stmt|;
comment|// setup mapping and document source
name|Set
argument_list|<
name|String
argument_list|>
name|withTermVectors
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|XContentBuilder
name|mapping
init|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
decl_stmt|;
name|XContentBuilder
name|source
init|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numFields
condition|;
name|i
operator|++
control|)
block|{
name|String
name|fieldName
init|=
literal|"field"
operator|+
name|i
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|withTermVectors
operator|.
name|add
argument_list|(
name|fieldName
argument_list|)
expr_stmt|;
block|}
name|mapping
operator|.
name|startObject
argument_list|(
name|fieldName
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"term_vector"
argument_list|,
name|withTermVectors
operator|.
name|contains
argument_list|(
name|fieldName
argument_list|)
condition|?
literal|"yes"
else|:
literal|"no"
argument_list|)
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|source
operator|.
name|field
argument_list|(
name|fieldName
argument_list|,
literal|"some text here"
argument_list|)
expr_stmt|;
block|}
name|source
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|mapping
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
expr_stmt|;
comment|// setup indices with mapping
name|ImmutableSettings
operator|.
name|Builder
name|settings
init|=
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
name|indexSettings
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.analyzer"
argument_list|,
literal|"standard"
argument_list|)
decl_stmt|;
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addAlias
argument_list|(
operator|new
name|Alias
argument_list|(
literal|"alias"
argument_list|)
argument_list|)
operator|.
name|setSettings
argument_list|(
name|settings
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
name|mapping
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
comment|// index a single document with prepared source
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"0"
argument_list|)
operator|.
name|setSource
argument_list|(
name|source
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
comment|// create random per_field_analyzer and selected fields
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|perFieldAnalyzer
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|selectedFields
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numFields
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|perFieldAnalyzer
operator|.
name|put
argument_list|(
literal|"field"
operator|+
name|i
argument_list|,
literal|"keyword"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|perFieldAnalyzer
operator|.
name|put
argument_list|(
literal|"non_existing"
operator|+
name|i
argument_list|,
literal|"keyword"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|selectedFields
operator|.
name|add
argument_list|(
literal|"field"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|selectedFields
operator|.
name|add
argument_list|(
literal|"non_existing"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
block|}
comment|// selected fields not specified
name|TermVectorResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareTermVector
argument_list|(
name|indexOrAlias
argument_list|()
argument_list|,
literal|"type1"
argument_list|,
literal|"0"
argument_list|)
operator|.
name|setPerFieldAnalyzer
argument_list|(
name|perFieldAnalyzer
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
comment|// should return all fields that have terms vectors, some with overridden analyzer
name|checkAnalyzedFields
argument_list|(
name|response
operator|.
name|getFields
argument_list|()
argument_list|,
name|withTermVectors
argument_list|,
name|perFieldAnalyzer
argument_list|)
expr_stmt|;
comment|// selected fields specified including some not in the mapping
name|response
operator|=
name|client
argument_list|()
operator|.
name|prepareTermVector
argument_list|(
name|indexOrAlias
argument_list|()
argument_list|,
literal|"type1"
argument_list|,
literal|"0"
argument_list|)
operator|.
name|setSelectedFields
argument_list|(
name|selectedFields
operator|.
name|toArray
argument_list|(
name|Strings
operator|.
name|EMPTY_ARRAY
argument_list|)
argument_list|)
operator|.
name|setPerFieldAnalyzer
argument_list|(
name|perFieldAnalyzer
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
comment|// should return only the specified valid fields, with some with overridden analyzer
name|checkAnalyzedFields
argument_list|(
name|response
operator|.
name|getFields
argument_list|()
argument_list|,
name|selectedFields
argument_list|,
name|perFieldAnalyzer
argument_list|)
expr_stmt|;
block|}
DECL|method|checkAnalyzedFields
specifier|private
name|void
name|checkAnalyzedFields
parameter_list|(
name|Fields
name|fieldsObject
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|fieldNames
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|perFieldAnalyzer
parameter_list|)
throws|throws
name|IOException
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|validFields
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|fieldName
range|:
name|fieldNames
control|)
block|{
if|if
condition|(
name|fieldName
operator|.
name|startsWith
argument_list|(
literal|"non_existing"
argument_list|)
condition|)
block|{
name|assertThat
argument_list|(
literal|"Non existing field\""
operator|+
name|fieldName
operator|+
literal|"\" should not be returned!"
argument_list|,
name|fieldsObject
operator|.
name|terms
argument_list|(
name|fieldName
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|Terms
name|terms
init|=
name|fieldsObject
operator|.
name|terms
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
literal|"Existing field "
operator|+
name|fieldName
operator|+
literal|"should have been returned"
argument_list|,
name|terms
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// check overridden by keyword analyzer ...
if|if
condition|(
name|perFieldAnalyzer
operator|.
name|containsKey
argument_list|(
name|fieldName
argument_list|)
condition|)
block|{
name|TermsEnum
name|iterator
init|=
name|terms
operator|.
name|iterator
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
literal|"Analyzer for "
operator|+
name|fieldName
operator|+
literal|" should have been overridden!"
argument_list|,
name|iterator
operator|.
name|next
argument_list|()
operator|.
name|utf8ToString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"some text here"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|iterator
operator|.
name|next
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|validFields
operator|.
name|add
argument_list|(
name|fieldName
argument_list|)
expr_stmt|;
block|}
comment|// ensure no other fields are returned
name|assertThat
argument_list|(
literal|"More fields than expected are returned!"
argument_list|,
name|fieldsObject
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|validFields
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|indexOrAlias
specifier|private
specifier|static
name|String
name|indexOrAlias
parameter_list|()
block|{
return|return
name|randomBoolean
argument_list|()
condition|?
literal|"test"
else|:
literal|"alias"
return|;
block|}
annotation|@
name|Test
DECL|method|testDfs
specifier|public
name|void
name|testDfs
parameter_list|()
throws|throws
name|ElasticsearchException
throws|,
name|ExecutionException
throws|,
name|InterruptedException
throws|,
name|IOException
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Setting up the index ..."
argument_list|)
expr_stmt|;
name|ImmutableSettings
operator|.
name|Builder
name|settings
init|=
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
name|indexSettings
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.analyzer"
argument_list|,
literal|"standard"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.number_of_shards"
argument_list|,
name|randomIntBetween
argument_list|(
literal|2
argument_list|,
literal|10
argument_list|)
argument_list|)
decl_stmt|;
comment|// we need at least 2 shards
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|settings
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
literal|"text"
argument_list|,
literal|"type=string"
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|int
name|numDocs
init|=
name|scaledRandomIntBetween
argument_list|(
literal|25
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Indexing {} documents..."
argument_list|,
name|numDocs
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|IndexRequestBuilder
argument_list|>
name|builders
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|builders
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
name|i
operator|+
literal|""
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"text"
argument_list|,
literal|"cat"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|builders
argument_list|)
expr_stmt|;
name|XContentBuilder
name|expectedStats
init|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"text"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"field_statistics"
argument_list|)
operator|.
name|field
argument_list|(
literal|"sum_doc_freq"
argument_list|,
name|numDocs
argument_list|)
operator|.
name|field
argument_list|(
literal|"doc_count"
argument_list|,
name|numDocs
argument_list|)
operator|.
name|field
argument_list|(
literal|"sum_ttf"
argument_list|,
name|numDocs
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"terms"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"cat"
argument_list|)
operator|.
name|field
argument_list|(
literal|"doc_freq"
argument_list|,
name|numDocs
argument_list|)
operator|.
name|field
argument_list|(
literal|"ttf"
argument_list|,
name|numDocs
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Without dfs 'cat' should appear strictly less than {} times."
argument_list|,
name|numDocs
argument_list|)
expr_stmt|;
name|TermVectorResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareTermVector
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|numDocs
operator|-
literal|1
argument_list|)
operator|+
literal|""
argument_list|)
operator|.
name|setSelectedFields
argument_list|(
literal|"text"
argument_list|)
operator|.
name|setFieldStatistics
argument_list|(
literal|true
argument_list|)
operator|.
name|setTermStatistics
argument_list|(
literal|true
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|checkStats
argument_list|(
name|response
operator|.
name|getFields
argument_list|()
argument_list|,
name|expectedStats
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"With dfs 'cat' should appear exactly {} times."
argument_list|,
name|numDocs
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|prepareTermVector
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|numDocs
operator|-
literal|1
argument_list|)
operator|+
literal|""
argument_list|)
operator|.
name|setSelectedFields
argument_list|(
literal|"text"
argument_list|)
operator|.
name|setFieldStatistics
argument_list|(
literal|true
argument_list|)
operator|.
name|setTermStatistics
argument_list|(
literal|true
argument_list|)
operator|.
name|setDfs
argument_list|(
literal|true
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|checkStats
argument_list|(
name|response
operator|.
name|getFields
argument_list|()
argument_list|,
name|expectedStats
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|checkStats
specifier|private
name|void
name|checkStats
parameter_list|(
name|Fields
name|fields
parameter_list|,
name|XContentBuilder
name|xContentBuilder
parameter_list|,
name|boolean
name|isEqual
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|stats
init|=
name|JsonXContent
operator|.
name|jsonXContent
operator|.
name|createParser
argument_list|(
name|xContentBuilder
operator|.
name|bytes
argument_list|()
argument_list|)
operator|.
name|map
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
literal|"number of fields expected:"
argument_list|,
name|fields
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|stats
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|fieldName
range|:
name|fields
control|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Checking field statistics for field: {}"
argument_list|,
name|fieldName
argument_list|)
expr_stmt|;
name|Terms
name|terms
init|=
name|fields
operator|.
name|terms
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|fieldStatistics
init|=
name|getFieldStatistics
argument_list|(
name|stats
argument_list|,
name|fieldName
argument_list|)
decl_stmt|;
name|String
name|msg
init|=
literal|"field: "
operator|+
name|fieldName
operator|+
literal|" "
decl_stmt|;
name|assertThat
argument_list|(
name|msg
operator|+
literal|"sum_doc_freq:"
argument_list|,
operator|(
name|int
operator|)
name|terms
operator|.
name|getSumDocFreq
argument_list|()
argument_list|,
name|equalOrLessThanTo
argument_list|(
name|fieldStatistics
operator|.
name|get
argument_list|(
literal|"sum_doc_freq"
argument_list|)
argument_list|,
name|isEqual
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|msg
operator|+
literal|"doc_count:"
argument_list|,
name|terms
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|equalOrLessThanTo
argument_list|(
name|fieldStatistics
operator|.
name|get
argument_list|(
literal|"doc_count"
argument_list|)
argument_list|,
name|isEqual
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|msg
operator|+
literal|"sum_ttf:"
argument_list|,
operator|(
name|int
operator|)
name|terms
operator|.
name|getSumTotalTermFreq
argument_list|()
argument_list|,
name|equalOrLessThanTo
argument_list|(
name|fieldStatistics
operator|.
name|get
argument_list|(
literal|"sum_ttf"
argument_list|)
argument_list|,
name|isEqual
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|TermsEnum
name|termsEnum
init|=
name|terms
operator|.
name|iterator
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|BytesRef
name|text
decl_stmt|;
while|while
condition|(
operator|(
name|text
operator|=
name|termsEnum
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|String
name|term
init|=
name|text
operator|.
name|utf8ToString
argument_list|()
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Checking term statistics for term: ({}, {})"
argument_list|,
name|fieldName
argument_list|,
name|term
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|termStatistics
init|=
name|getTermStatistics
argument_list|(
name|stats
argument_list|,
name|fieldName
argument_list|,
name|term
argument_list|)
decl_stmt|;
name|msg
operator|=
literal|"term: ("
operator|+
name|fieldName
operator|+
literal|","
operator|+
name|term
operator|+
literal|") "
expr_stmt|;
name|assertThat
argument_list|(
name|msg
operator|+
literal|"doc_freq:"
argument_list|,
name|termsEnum
operator|.
name|docFreq
argument_list|()
argument_list|,
name|equalOrLessThanTo
argument_list|(
name|termStatistics
operator|.
name|get
argument_list|(
literal|"doc_freq"
argument_list|)
argument_list|,
name|isEqual
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|msg
operator|+
literal|"ttf:"
argument_list|,
operator|(
name|int
operator|)
name|termsEnum
operator|.
name|totalTermFreq
argument_list|()
argument_list|,
name|equalOrLessThanTo
argument_list|(
name|termStatistics
operator|.
name|get
argument_list|(
literal|"ttf"
argument_list|)
argument_list|,
name|isEqual
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|getFieldStatistics
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|getFieldStatistics
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|stats
parameter_list|,
name|String
name|fieldName
parameter_list|)
throws|throws
name|IOException
block|{
return|return
call|(
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
call|)
argument_list|(
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|stats
operator|.
name|get
argument_list|(
name|fieldName
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|"field_statistics"
argument_list|)
return|;
block|}
DECL|method|getTermStatistics
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|getTermStatistics
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|stats
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|String
name|term
parameter_list|)
block|{
return|return
call|(
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
call|)
argument_list|(
call|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
call|)
argument_list|(
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|stats
operator|.
name|get
argument_list|(
name|fieldName
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|"terms"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
name|term
argument_list|)
return|;
block|}
DECL|method|equalOrLessThanTo
specifier|private
name|Matcher
argument_list|<
name|Integer
argument_list|>
name|equalOrLessThanTo
parameter_list|(
name|Integer
name|value
parameter_list|,
name|boolean
name|isEqual
parameter_list|)
block|{
if|if
condition|(
name|isEqual
condition|)
block|{
return|return
name|equalTo
argument_list|(
name|value
argument_list|)
return|;
block|}
return|return
name|lessThan
argument_list|(
name|value
argument_list|)
return|;
block|}
block|}
end_class

end_unit

