begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.update
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|update
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|AnalysisService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|codec
operator|.
name|CodecService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|deletionpolicy
operator|.
name|SnapshotDeletionPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|Engine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|EngineException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|VersionConflictEngineException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|internal
operator|.
name|InternalEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|indexing
operator|.
name|ShardIndexingService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|Uid
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|merge
operator|.
name|policy
operator|.
name|MergePolicyProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|merge
operator|.
name|scheduler
operator|.
name|MergeSchedulerProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|settings
operator|.
name|IndexSettingsService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|similarity
operator|.
name|SimilarityService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|store
operator|.
name|Store
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|translog
operator|.
name|Translog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|warmer
operator|.
name|IndicesWarmer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Semaphore
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_comment
comment|/**  * An implementation of {@link Engine} only intended for use with {@link TransportUpdateActionTest}.  */
end_comment

begin_class
DECL|class|InternalEngineWithControllableTimingForTesting
specifier|public
class|class
name|InternalEngineWithControllableTimingForTesting
extends|extends
name|InternalEngine
implements|implements
name|Engine
block|{
comment|/*      * Not the best programming practice, but a simple way to make the instance accessible from test classes. The      * "cleaner" way - making the appropriate Guice injector of the respective index available to the test class is      * rather difficult and fragile, too. As long as tests requiring multiple instances of this class are not run in      * parallel, everything will be fine. Currently, there is just a single test suite that uses only a single instance      * anyway.      */
DECL|field|currentTestInstance
specifier|public
specifier|static
name|InternalEngineWithControllableTimingForTesting
name|currentTestInstance
decl_stmt|;
DECL|field|nextGetThrowsException
specifier|private
name|AtomicBoolean
name|nextGetThrowsException
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
DECL|field|createOperationReceived
specifier|private
name|Semaphore
name|createOperationReceived
init|=
operator|new
name|Semaphore
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|letCreateOperationBegin
specifier|private
name|Semaphore
name|letCreateOperationBegin
init|=
operator|new
name|Semaphore
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|createOperationFinished
specifier|private
name|Semaphore
name|createOperationFinished
init|=
operator|new
name|Semaphore
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|letCreateOperationReturn
specifier|private
name|Semaphore
name|letCreateOperationReturn
init|=
operator|new
name|Semaphore
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|indexOperationReceived
specifier|private
name|Semaphore
name|indexOperationReceived
init|=
operator|new
name|Semaphore
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|letIndexOperationBegin
specifier|private
name|Semaphore
name|letIndexOperationBegin
init|=
operator|new
name|Semaphore
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|indexOperationFinished
specifier|private
name|Semaphore
name|indexOperationFinished
init|=
operator|new
name|Semaphore
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|letIndexOperationReturn
specifier|private
name|Semaphore
name|letIndexOperationReturn
init|=
operator|new
name|Semaphore
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|deleteOperationReceived
specifier|private
name|Semaphore
name|deleteOperationReceived
init|=
operator|new
name|Semaphore
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|letDeleteOperationBegin
specifier|private
name|Semaphore
name|letDeleteOperationBegin
init|=
operator|new
name|Semaphore
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|deleteOperationFinished
specifier|private
name|Semaphore
name|deleteOperationFinished
init|=
operator|new
name|Semaphore
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|letDeleteOperationReturn
specifier|private
name|Semaphore
name|letDeleteOperationReturn
init|=
operator|new
name|Semaphore
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// safety timeout so that if something goes wrong the test does not block forever
DECL|field|SEMAPHORE_ACQUIRE_TIMEOUT_SECONDS
specifier|private
specifier|static
specifier|final
name|long
name|SEMAPHORE_ACQUIRE_TIMEOUT_SECONDS
init|=
literal|5
decl_stmt|;
annotation|@
name|Inject
DECL|method|InternalEngineWithControllableTimingForTesting
specifier|public
name|InternalEngineWithControllableTimingForTesting
parameter_list|(
name|ShardId
name|shardId
parameter_list|,
name|Settings
name|indexSettings
parameter_list|,
name|ThreadPool
name|threadPool
parameter_list|,
name|IndexSettingsService
name|indexSettingsService
parameter_list|,
name|ShardIndexingService
name|indexingService
parameter_list|,
name|IndicesWarmer
name|warmer
parameter_list|,
name|Store
name|store
parameter_list|,
name|SnapshotDeletionPolicy
name|deletionPolicy
parameter_list|,
name|Translog
name|translog
parameter_list|,
name|MergePolicyProvider
name|mergePolicyProvider
parameter_list|,
name|MergeSchedulerProvider
name|mergeScheduler
parameter_list|,
name|AnalysisService
name|analysisService
parameter_list|,
name|SimilarityService
name|similarityService
parameter_list|,
name|CodecService
name|codecService
parameter_list|)
throws|throws
name|EngineException
block|{
name|super
argument_list|(
name|shardId
argument_list|,
name|indexSettings
argument_list|,
name|threadPool
argument_list|,
name|indexSettingsService
argument_list|,
name|indexingService
argument_list|,
name|warmer
argument_list|,
name|store
argument_list|,
name|deletionPolicy
argument_list|,
name|translog
argument_list|,
name|mergePolicyProvider
argument_list|,
name|mergeScheduler
argument_list|,
name|analysisService
argument_list|,
name|similarityService
argument_list|,
name|codecService
argument_list|)
expr_stmt|;
comment|// 'this' escapes from the constructor, but for the purpose of this test it is fine.
name|currentTestInstance
operator|=
name|this
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|get
specifier|public
name|GetResult
name|get
parameter_list|(
name|Get
name|get
parameter_list|)
throws|throws
name|EngineException
block|{
if|if
condition|(
name|nextGetThrowsException
operator|.
name|getAndSet
argument_list|(
literal|false
argument_list|)
condition|)
block|{
name|Uid
name|uid
init|=
name|Uid
operator|.
name|createUid
argument_list|(
name|get
operator|.
name|uid
argument_list|()
operator|.
name|text
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|dummyVersion
init|=
literal|1000L
decl_stmt|;
throw|throw
operator|new
name|VersionConflictEngineException
argument_list|(
name|shardId
argument_list|,
name|uid
operator|.
name|type
argument_list|()
argument_list|,
name|uid
operator|.
name|id
argument_list|()
argument_list|,
name|dummyVersion
argument_list|,
name|get
operator|.
name|version
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|super
operator|.
name|get
argument_list|(
name|get
argument_list|)
return|;
block|}
DECL|method|acquireWithTimeout
specifier|private
name|void
name|acquireWithTimeout
parameter_list|(
name|Semaphore
name|semaphore
parameter_list|)
block|{
try|try
block|{
name|boolean
name|acquired
init|=
name|semaphore
operator|.
name|tryAcquire
argument_list|(
name|SEMAPHORE_ACQUIRE_TIMEOUT_SECONDS
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|acquired
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"(Integration test:) Cannot acquire semaphore within the specified timeout of "
operator|+
name|SEMAPHORE_ACQUIRE_TIMEOUT_SECONDS
operator|+
literal|" seconds"
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|create
specifier|public
name|void
name|create
parameter_list|(
name|Create
name|create
parameter_list|)
throws|throws
name|EngineException
block|{
name|createOperationReceived
operator|.
name|release
argument_list|()
expr_stmt|;
name|acquireWithTimeout
argument_list|(
name|letCreateOperationBegin
argument_list|)
expr_stmt|;
try|try
block|{
name|super
operator|.
name|create
argument_list|(
name|create
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|createOperationFinished
operator|.
name|release
argument_list|()
expr_stmt|;
name|acquireWithTimeout
argument_list|(
name|letCreateOperationReturn
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|index
specifier|public
name|void
name|index
parameter_list|(
name|Index
name|index
parameter_list|)
throws|throws
name|EngineException
block|{
name|indexOperationReceived
operator|.
name|release
argument_list|()
expr_stmt|;
name|acquireWithTimeout
argument_list|(
name|letIndexOperationBegin
argument_list|)
expr_stmt|;
try|try
block|{
name|super
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|indexOperationFinished
operator|.
name|release
argument_list|()
expr_stmt|;
name|acquireWithTimeout
argument_list|(
name|letIndexOperationReturn
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|delete
specifier|public
name|void
name|delete
parameter_list|(
name|Delete
name|delete
parameter_list|)
throws|throws
name|EngineException
block|{
name|deleteOperationReceived
operator|.
name|release
argument_list|()
expr_stmt|;
name|acquireWithTimeout
argument_list|(
name|letDeleteOperationBegin
argument_list|)
expr_stmt|;
try|try
block|{
name|super
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|deleteOperationFinished
operator|.
name|release
argument_list|()
expr_stmt|;
name|acquireWithTimeout
argument_list|(
name|letDeleteOperationReturn
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|letNextGetThrowException
specifier|public
name|void
name|letNextGetThrowException
parameter_list|()
block|{
name|nextGetThrowsException
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|waitUntilCreateOperationReceived
specifier|public
name|void
name|waitUntilCreateOperationReceived
parameter_list|()
block|{
name|acquireWithTimeout
argument_list|(
name|createOperationReceived
argument_list|)
expr_stmt|;
block|}
DECL|method|letCreateOperationBegin
specifier|public
name|void
name|letCreateOperationBegin
parameter_list|()
block|{
name|letCreateOperationBegin
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
DECL|method|waitUntilCreateOperationFinished
specifier|public
name|void
name|waitUntilCreateOperationFinished
parameter_list|()
block|{
name|acquireWithTimeout
argument_list|(
name|createOperationFinished
argument_list|)
expr_stmt|;
block|}
DECL|method|letCreateOperationReturn
specifier|public
name|void
name|letCreateOperationReturn
parameter_list|()
block|{
name|letCreateOperationReturn
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
DECL|method|waitUntilIndexOperationReceived
specifier|public
name|void
name|waitUntilIndexOperationReceived
parameter_list|()
block|{
name|acquireWithTimeout
argument_list|(
name|indexOperationReceived
argument_list|)
expr_stmt|;
block|}
DECL|method|letIndexOperationBegin
specifier|public
name|void
name|letIndexOperationBegin
parameter_list|()
block|{
name|letIndexOperationBegin
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
DECL|method|waitUntilIndexOperationFinished
specifier|public
name|void
name|waitUntilIndexOperationFinished
parameter_list|()
block|{
name|acquireWithTimeout
argument_list|(
name|indexOperationFinished
argument_list|)
expr_stmt|;
block|}
DECL|method|letIndexOperationReturn
specifier|public
name|void
name|letIndexOperationReturn
parameter_list|()
block|{
name|letIndexOperationReturn
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
DECL|method|waitUntilDeleteOperationReceived
specifier|public
name|void
name|waitUntilDeleteOperationReceived
parameter_list|()
block|{
name|acquireWithTimeout
argument_list|(
name|deleteOperationReceived
argument_list|)
expr_stmt|;
block|}
DECL|method|letDeleteOperationBegin
specifier|public
name|void
name|letDeleteOperationBegin
parameter_list|()
block|{
name|letDeleteOperationBegin
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
DECL|method|waitUntilDeleteOperationFinished
specifier|public
name|void
name|waitUntilDeleteOperationFinished
parameter_list|()
block|{
name|acquireWithTimeout
argument_list|(
name|deleteOperationFinished
argument_list|)
expr_stmt|;
block|}
DECL|method|letDeleteOperationReturn
specifier|public
name|void
name|letDeleteOperationReturn
parameter_list|()
block|{
name|letDeleteOperationReturn
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
DECL|method|resetSemaphores
specifier|public
name|void
name|resetSemaphores
parameter_list|()
block|{
name|nextGetThrowsException
operator|=
operator|new
name|AtomicBoolean
argument_list|()
expr_stmt|;
name|createOperationReceived
operator|=
operator|new
name|Semaphore
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|letCreateOperationBegin
operator|=
operator|new
name|Semaphore
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|createOperationFinished
operator|=
operator|new
name|Semaphore
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|letCreateOperationReturn
operator|=
operator|new
name|Semaphore
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|indexOperationReceived
operator|=
operator|new
name|Semaphore
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|letIndexOperationBegin
operator|=
operator|new
name|Semaphore
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|indexOperationFinished
operator|=
operator|new
name|Semaphore
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|letIndexOperationReturn
operator|=
operator|new
name|Semaphore
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|deleteOperationReceived
operator|=
operator|new
name|Semaphore
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|letDeleteOperationBegin
operator|=
operator|new
name|Semaphore
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|deleteOperationFinished
operator|=
operator|new
name|Semaphore
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|letDeleteOperationReturn
operator|=
operator|new
name|Semaphore
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

