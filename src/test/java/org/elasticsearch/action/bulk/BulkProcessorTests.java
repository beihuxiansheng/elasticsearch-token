begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.bulk
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|bulk
package|;
end_package

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|ant
operator|.
name|tasks
operator|.
name|junit4
operator|.
name|dependencies
operator|.
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|generators
operator|.
name|RandomPicks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|get
operator|.
name|MultiGetItemResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|get
operator|.
name|MultiGetRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|get
operator|.
name|MultiGetResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|index
operator|.
name|IndexRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|transport
operator|.
name|TransportClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|ByteSizeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|ByteSizeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchIntegrationTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertAcked
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|*
import|;
end_import

begin_class
DECL|class|BulkProcessorTests
specifier|public
class|class
name|BulkProcessorTests
extends|extends
name|ElasticsearchIntegrationTest
block|{
annotation|@
name|Test
DECL|method|testThatBulkProcessorCountIsCorrect
specifier|public
name|void
name|testThatBulkProcessorCountIsCorrect
parameter_list|()
throws|throws
name|InterruptedException
block|{
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|BulkProcessorTestListener
name|listener
init|=
operator|new
name|BulkProcessorTestListener
argument_list|(
name|latch
argument_list|)
decl_stmt|;
name|int
name|numDocs
init|=
name|randomIntBetween
argument_list|(
literal|10
argument_list|,
literal|100
argument_list|)
decl_stmt|;
try|try
init|(
name|BulkProcessor
name|processor
init|=
name|BulkProcessor
operator|.
name|builder
argument_list|(
name|client
argument_list|()
argument_list|,
name|listener
argument_list|)
operator|.
name|setName
argument_list|(
literal|"foo"
argument_list|)
comment|//let's make sure that the bulk action limit trips, one single execution will index all the documents
operator|.
name|setConcurrentRequests
argument_list|(
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|.
name|setBulkActions
argument_list|(
name|numDocs
argument_list|)
operator|.
name|setFlushInterval
argument_list|(
name|TimeValue
operator|.
name|timeValueHours
argument_list|(
literal|24
argument_list|)
argument_list|)
operator|.
name|setBulkSize
argument_list|(
operator|new
name|ByteSizeValue
argument_list|(
literal|1
argument_list|,
name|ByteSizeUnit
operator|.
name|GB
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
init|)
block|{
name|MultiGetRequestBuilder
name|multiGetRequestBuilder
init|=
name|indexDocs
argument_list|(
name|client
argument_list|()
argument_list|,
name|processor
argument_list|,
name|numDocs
argument_list|)
decl_stmt|;
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|listener
operator|.
name|beforeCounts
operator|.
name|get
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|listener
operator|.
name|afterCounts
operator|.
name|get
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|listener
operator|.
name|bulkFailures
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertResponseItems
argument_list|(
name|listener
operator|.
name|bulkItems
argument_list|,
name|numDocs
argument_list|)
expr_stmt|;
name|assertMultiGetResponse
argument_list|(
name|multiGetRequestBuilder
operator|.
name|get
argument_list|()
argument_list|,
name|numDocs
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testBulkProcessorFlush
specifier|public
name|void
name|testBulkProcessorFlush
parameter_list|()
throws|throws
name|InterruptedException
block|{
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|BulkProcessorTestListener
name|listener
init|=
operator|new
name|BulkProcessorTestListener
argument_list|(
name|latch
argument_list|)
decl_stmt|;
name|int
name|numDocs
init|=
name|randomIntBetween
argument_list|(
literal|10
argument_list|,
literal|100
argument_list|)
decl_stmt|;
try|try
init|(
name|BulkProcessor
name|processor
init|=
name|BulkProcessor
operator|.
name|builder
argument_list|(
name|client
argument_list|()
argument_list|,
name|listener
argument_list|)
operator|.
name|setName
argument_list|(
literal|"foo"
argument_list|)
comment|//let's make sure that this bulk won't be automatically flushed
operator|.
name|setConcurrentRequests
argument_list|(
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|)
argument_list|)
operator|.
name|setBulkActions
argument_list|(
name|numDocs
operator|+
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|100
argument_list|)
argument_list|)
operator|.
name|setFlushInterval
argument_list|(
name|TimeValue
operator|.
name|timeValueHours
argument_list|(
literal|24
argument_list|)
argument_list|)
operator|.
name|setBulkSize
argument_list|(
operator|new
name|ByteSizeValue
argument_list|(
literal|1
argument_list|,
name|ByteSizeUnit
operator|.
name|GB
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
init|)
block|{
name|MultiGetRequestBuilder
name|multiGetRequestBuilder
init|=
name|indexDocs
argument_list|(
name|client
argument_list|()
argument_list|,
name|processor
argument_list|,
name|numDocs
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|latch
operator|.
name|await
argument_list|(
name|randomInt
argument_list|(
literal|500
argument_list|)
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|//we really need an explicit flush as none of the bulk thresholds was reached
name|processor
operator|.
name|flush
argument_list|()
expr_stmt|;
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|listener
operator|.
name|beforeCounts
operator|.
name|get
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|listener
operator|.
name|afterCounts
operator|.
name|get
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|listener
operator|.
name|bulkFailures
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertResponseItems
argument_list|(
name|listener
operator|.
name|bulkItems
argument_list|,
name|numDocs
argument_list|)
expr_stmt|;
name|assertMultiGetResponse
argument_list|(
name|multiGetRequestBuilder
operator|.
name|get
argument_list|()
argument_list|,
name|numDocs
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testBulkProcessorConcurrentRequests
specifier|public
name|void
name|testBulkProcessorConcurrentRequests
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|bulkActions
init|=
name|randomIntBetween
argument_list|(
literal|10
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|int
name|numDocs
init|=
name|randomIntBetween
argument_list|(
name|bulkActions
argument_list|,
name|bulkActions
operator|+
literal|100
argument_list|)
decl_stmt|;
name|int
name|concurrentRequests
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|int
name|expectedBulkActions
init|=
name|numDocs
operator|/
name|bulkActions
decl_stmt|;
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
name|expectedBulkActions
argument_list|)
decl_stmt|;
name|int
name|totalExpectedBulkActions
init|=
name|numDocs
operator|%
name|bulkActions
operator|==
literal|0
condition|?
name|expectedBulkActions
else|:
name|expectedBulkActions
operator|+
literal|1
decl_stmt|;
specifier|final
name|CountDownLatch
name|closeLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
name|totalExpectedBulkActions
argument_list|)
decl_stmt|;
name|BulkProcessorTestListener
name|listener
init|=
operator|new
name|BulkProcessorTestListener
argument_list|(
name|latch
argument_list|,
name|closeLatch
argument_list|)
decl_stmt|;
name|MultiGetRequestBuilder
name|multiGetRequestBuilder
decl_stmt|;
try|try
init|(
name|BulkProcessor
name|processor
init|=
name|BulkProcessor
operator|.
name|builder
argument_list|(
name|client
argument_list|()
argument_list|,
name|listener
argument_list|)
operator|.
name|setConcurrentRequests
argument_list|(
name|concurrentRequests
argument_list|)
operator|.
name|setBulkActions
argument_list|(
name|bulkActions
argument_list|)
comment|//set interval and size to high values
operator|.
name|setFlushInterval
argument_list|(
name|TimeValue
operator|.
name|timeValueHours
argument_list|(
literal|24
argument_list|)
argument_list|)
operator|.
name|setBulkSize
argument_list|(
operator|new
name|ByteSizeValue
argument_list|(
literal|1
argument_list|,
name|ByteSizeUnit
operator|.
name|GB
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
init|)
block|{
name|multiGetRequestBuilder
operator|=
name|indexDocs
argument_list|(
name|client
argument_list|()
argument_list|,
name|processor
argument_list|,
name|numDocs
argument_list|)
expr_stmt|;
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|listener
operator|.
name|beforeCounts
operator|.
name|get
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expectedBulkActions
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|listener
operator|.
name|afterCounts
operator|.
name|get
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expectedBulkActions
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|listener
operator|.
name|bulkFailures
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|listener
operator|.
name|bulkItems
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|numDocs
operator|-
name|numDocs
operator|%
name|bulkActions
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|closeLatch
operator|.
name|await
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|listener
operator|.
name|beforeCounts
operator|.
name|get
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|totalExpectedBulkActions
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|listener
operator|.
name|afterCounts
operator|.
name|get
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|totalExpectedBulkActions
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|listener
operator|.
name|bulkFailures
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|listener
operator|.
name|bulkItems
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|numDocs
argument_list|)
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|ids
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|BulkItemResponse
name|bulkItemResponse
range|:
name|listener
operator|.
name|bulkItems
control|)
block|{
name|assertThat
argument_list|(
name|bulkItemResponse
operator|.
name|isFailed
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bulkItemResponse
operator|.
name|getIndex
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bulkItemResponse
operator|.
name|getType
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
comment|//with concurrent requests> 1 we can't rely on the order of the bulk requests
name|assertThat
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|bulkItemResponse
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|,
name|both
argument_list|(
name|greaterThan
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|and
argument_list|(
name|lessThanOrEqualTo
argument_list|(
name|numDocs
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|//we do want to check that we don't get duplicate ids back
name|assertThat
argument_list|(
name|ids
operator|.
name|add
argument_list|(
name|bulkItemResponse
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertMultiGetResponse
argument_list|(
name|multiGetRequestBuilder
operator|.
name|get
argument_list|()
argument_list|,
name|numDocs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
comment|//https://github.com/elasticsearch/elasticsearch/issues/5038
DECL|method|testBulkProcessorConcurrentRequestsNoNodeAvailableException
specifier|public
name|void
name|testBulkProcessorConcurrentRequestsNoNodeAvailableException
parameter_list|()
throws|throws
name|Exception
block|{
comment|//we create a transport client with no nodes to make sure it throws NoNodeAvailableException
name|Settings
name|settings
init|=
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"path.home"
argument_list|,
name|createTempDir
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Client
name|transportClient
init|=
operator|new
name|TransportClient
argument_list|(
name|settings
argument_list|)
decl_stmt|;
name|int
name|bulkActions
init|=
name|randomIntBetween
argument_list|(
literal|10
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|int
name|numDocs
init|=
name|randomIntBetween
argument_list|(
name|bulkActions
argument_list|,
name|bulkActions
operator|+
literal|100
argument_list|)
decl_stmt|;
name|int
name|concurrentRequests
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|int
name|expectedBulkActions
init|=
name|numDocs
operator|/
name|bulkActions
decl_stmt|;
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
name|expectedBulkActions
argument_list|)
decl_stmt|;
name|int
name|totalExpectedBulkActions
init|=
name|numDocs
operator|%
name|bulkActions
operator|==
literal|0
condition|?
name|expectedBulkActions
else|:
name|expectedBulkActions
operator|+
literal|1
decl_stmt|;
specifier|final
name|CountDownLatch
name|closeLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
name|totalExpectedBulkActions
argument_list|)
decl_stmt|;
name|BulkProcessorTestListener
name|listener
init|=
operator|new
name|BulkProcessorTestListener
argument_list|(
name|latch
argument_list|,
name|closeLatch
argument_list|)
decl_stmt|;
try|try
init|(
name|BulkProcessor
name|processor
init|=
name|BulkProcessor
operator|.
name|builder
argument_list|(
name|transportClient
argument_list|,
name|listener
argument_list|)
operator|.
name|setConcurrentRequests
argument_list|(
name|concurrentRequests
argument_list|)
operator|.
name|setBulkActions
argument_list|(
name|bulkActions
argument_list|)
comment|//set interval and size to high values
operator|.
name|setFlushInterval
argument_list|(
name|TimeValue
operator|.
name|timeValueHours
argument_list|(
literal|24
argument_list|)
argument_list|)
operator|.
name|setBulkSize
argument_list|(
operator|new
name|ByteSizeValue
argument_list|(
literal|1
argument_list|,
name|ByteSizeUnit
operator|.
name|GB
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
init|)
block|{
name|indexDocs
argument_list|(
name|transportClient
argument_list|,
name|processor
argument_list|,
name|numDocs
argument_list|)
expr_stmt|;
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|listener
operator|.
name|beforeCounts
operator|.
name|get
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expectedBulkActions
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|listener
operator|.
name|afterCounts
operator|.
name|get
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expectedBulkActions
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|listener
operator|.
name|bulkFailures
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expectedBulkActions
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|listener
operator|.
name|bulkItems
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|closeLatch
operator|.
name|await
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|listener
operator|.
name|bulkFailures
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|totalExpectedBulkActions
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|listener
operator|.
name|bulkItems
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|transportClient
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBulkProcessorWaitOnClose
specifier|public
name|void
name|testBulkProcessorWaitOnClose
parameter_list|()
throws|throws
name|Exception
block|{
name|BulkProcessorTestListener
name|listener
init|=
operator|new
name|BulkProcessorTestListener
argument_list|()
decl_stmt|;
name|int
name|numDocs
init|=
name|randomIntBetween
argument_list|(
literal|10
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|BulkProcessor
name|processor
init|=
name|BulkProcessor
operator|.
name|builder
argument_list|(
name|client
argument_list|()
argument_list|,
name|listener
argument_list|)
operator|.
name|setName
argument_list|(
literal|"foo"
argument_list|)
comment|//let's make sure that the bulk action limit trips, one single execution will index all the documents
operator|.
name|setConcurrentRequests
argument_list|(
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|.
name|setBulkActions
argument_list|(
name|numDocs
argument_list|)
operator|.
name|setFlushInterval
argument_list|(
name|TimeValue
operator|.
name|timeValueHours
argument_list|(
literal|24
argument_list|)
argument_list|)
operator|.
name|setBulkSize
argument_list|(
operator|new
name|ByteSizeValue
argument_list|(
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|,
operator|(
name|ByteSizeUnit
operator|)
name|RandomPicks
operator|.
name|randomFrom
argument_list|(
name|getRandom
argument_list|()
argument_list|,
name|ByteSizeUnit
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|MultiGetRequestBuilder
name|multiGetRequestBuilder
init|=
name|indexDocs
argument_list|(
name|client
argument_list|()
argument_list|,
name|processor
argument_list|,
name|numDocs
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|processor
operator|.
name|isOpen
argument_list|()
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|processor
operator|.
name|awaitClose
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
comment|// check if we can call it multiple times
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|assertThat
argument_list|(
name|processor
operator|.
name|awaitClose
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|processor
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
name|assertThat
argument_list|(
name|processor
operator|.
name|isOpen
argument_list|()
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|listener
operator|.
name|beforeCounts
operator|.
name|get
argument_list|()
argument_list|,
name|greaterThanOrEqualTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|listener
operator|.
name|afterCounts
operator|.
name|get
argument_list|()
argument_list|,
name|greaterThanOrEqualTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|listener
operator|.
name|bulkFailures
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertResponseItems
argument_list|(
name|listener
operator|.
name|bulkItems
argument_list|,
name|numDocs
argument_list|)
expr_stmt|;
name|assertMultiGetResponse
argument_list|(
name|multiGetRequestBuilder
operator|.
name|get
argument_list|()
argument_list|,
name|numDocs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBulkProcessorConcurrentRequestsReadOnlyIndex
specifier|public
name|void
name|testBulkProcessorConcurrentRequestsReadOnlyIndex
parameter_list|()
throws|throws
name|Exception
block|{
name|createIndex
argument_list|(
literal|"test-ro"
argument_list|)
expr_stmt|;
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareUpdateSettings
argument_list|(
literal|"test-ro"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_BLOCKS_WRITE
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|int
name|bulkActions
init|=
name|randomIntBetween
argument_list|(
literal|10
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|int
name|numDocs
init|=
name|randomIntBetween
argument_list|(
name|bulkActions
argument_list|,
name|bulkActions
operator|+
literal|100
argument_list|)
decl_stmt|;
name|int
name|concurrentRequests
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|int
name|expectedBulkActions
init|=
name|numDocs
operator|/
name|bulkActions
decl_stmt|;
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
name|expectedBulkActions
argument_list|)
decl_stmt|;
name|int
name|totalExpectedBulkActions
init|=
name|numDocs
operator|%
name|bulkActions
operator|==
literal|0
condition|?
name|expectedBulkActions
else|:
name|expectedBulkActions
operator|+
literal|1
decl_stmt|;
specifier|final
name|CountDownLatch
name|closeLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
name|totalExpectedBulkActions
argument_list|)
decl_stmt|;
name|int
name|testDocs
init|=
literal|0
decl_stmt|;
name|int
name|testReadOnlyDocs
init|=
literal|0
decl_stmt|;
name|MultiGetRequestBuilder
name|multiGetRequestBuilder
init|=
name|client
argument_list|()
operator|.
name|prepareMultiGet
argument_list|()
decl_stmt|;
name|BulkProcessorTestListener
name|listener
init|=
operator|new
name|BulkProcessorTestListener
argument_list|(
name|latch
argument_list|,
name|closeLatch
argument_list|)
decl_stmt|;
try|try
init|(
name|BulkProcessor
name|processor
init|=
name|BulkProcessor
operator|.
name|builder
argument_list|(
name|client
argument_list|()
argument_list|,
name|listener
argument_list|)
operator|.
name|setConcurrentRequests
argument_list|(
name|concurrentRequests
argument_list|)
operator|.
name|setBulkActions
argument_list|(
name|bulkActions
argument_list|)
comment|//set interval and size to high values
operator|.
name|setFlushInterval
argument_list|(
name|TimeValue
operator|.
name|timeValueHours
argument_list|(
literal|24
argument_list|)
argument_list|)
operator|.
name|setBulkSize
argument_list|(
operator|new
name|ByteSizeValue
argument_list|(
literal|1
argument_list|,
name|ByteSizeUnit
operator|.
name|GB
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
init|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|testDocs
operator|++
expr_stmt|;
name|processor
operator|.
name|add
argument_list|(
operator|new
name|IndexRequest
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|testDocs
argument_list|)
argument_list|)
operator|.
name|source
argument_list|(
literal|"field"
argument_list|,
literal|"value"
argument_list|)
argument_list|)
expr_stmt|;
name|multiGetRequestBuilder
operator|.
name|add
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|testDocs
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|testReadOnlyDocs
operator|++
expr_stmt|;
name|processor
operator|.
name|add
argument_list|(
operator|new
name|IndexRequest
argument_list|(
literal|"test-ro"
argument_list|,
literal|"test"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|testReadOnlyDocs
argument_list|)
argument_list|)
operator|.
name|source
argument_list|(
literal|"field"
argument_list|,
literal|"value"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|closeLatch
operator|.
name|await
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|listener
operator|.
name|beforeCounts
operator|.
name|get
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|totalExpectedBulkActions
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|listener
operator|.
name|afterCounts
operator|.
name|get
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|totalExpectedBulkActions
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|listener
operator|.
name|bulkFailures
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|listener
operator|.
name|bulkItems
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|testDocs
operator|+
name|testReadOnlyDocs
argument_list|)
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|ids
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|readOnlyIds
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|BulkItemResponse
name|bulkItemResponse
range|:
name|listener
operator|.
name|bulkItems
control|)
block|{
name|assertThat
argument_list|(
name|bulkItemResponse
operator|.
name|getIndex
argument_list|()
argument_list|,
name|either
argument_list|(
name|equalTo
argument_list|(
literal|"test"
argument_list|)
argument_list|)
operator|.
name|or
argument_list|(
name|equalTo
argument_list|(
literal|"test-ro"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bulkItemResponse
operator|.
name|getType
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|bulkItemResponse
operator|.
name|getIndex
argument_list|()
operator|.
name|equals
argument_list|(
literal|"test"
argument_list|)
condition|)
block|{
name|assertThat
argument_list|(
name|bulkItemResponse
operator|.
name|isFailed
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|//with concurrent requests> 1 we can't rely on the order of the bulk requests
name|assertThat
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|bulkItemResponse
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|,
name|both
argument_list|(
name|greaterThan
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|and
argument_list|(
name|lessThanOrEqualTo
argument_list|(
name|testDocs
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|//we do want to check that we don't get duplicate ids back
name|assertThat
argument_list|(
name|ids
operator|.
name|add
argument_list|(
name|bulkItemResponse
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|bulkItemResponse
operator|.
name|isFailed
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|//with concurrent requests> 1 we can't rely on the order of the bulk requests
name|assertThat
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|bulkItemResponse
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|,
name|both
argument_list|(
name|greaterThan
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|and
argument_list|(
name|lessThanOrEqualTo
argument_list|(
name|testReadOnlyDocs
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|//we do want to check that we don't get duplicate ids back
name|assertThat
argument_list|(
name|readOnlyIds
operator|.
name|add
argument_list|(
name|bulkItemResponse
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|assertMultiGetResponse
argument_list|(
name|multiGetRequestBuilder
operator|.
name|get
argument_list|()
argument_list|,
name|testDocs
argument_list|)
expr_stmt|;
block|}
DECL|method|indexDocs
specifier|private
specifier|static
name|MultiGetRequestBuilder
name|indexDocs
parameter_list|(
name|Client
name|client
parameter_list|,
name|BulkProcessor
name|processor
parameter_list|,
name|int
name|numDocs
parameter_list|)
block|{
name|MultiGetRequestBuilder
name|multiGetRequestBuilder
init|=
name|client
operator|.
name|prepareMultiGet
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|processor
operator|.
name|add
argument_list|(
operator|new
name|IndexRequest
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|source
argument_list|(
literal|"field"
argument_list|,
name|randomRealisticUnicodeOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|30
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|multiGetRequestBuilder
operator|.
name|add
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|multiGetRequestBuilder
return|;
block|}
DECL|method|assertResponseItems
specifier|private
specifier|static
name|void
name|assertResponseItems
parameter_list|(
name|List
argument_list|<
name|BulkItemResponse
argument_list|>
name|bulkItemResponses
parameter_list|,
name|int
name|numDocs
parameter_list|)
block|{
name|assertThat
argument_list|(
name|bulkItemResponses
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
name|numDocs
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|1
decl_stmt|;
for|for
control|(
name|BulkItemResponse
name|bulkItemResponse
range|:
name|bulkItemResponses
control|)
block|{
name|assertThat
argument_list|(
name|bulkItemResponse
operator|.
name|getIndex
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bulkItemResponse
operator|.
name|getType
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bulkItemResponse
operator|.
name|getId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
operator|++
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bulkItemResponse
operator|.
name|isFailed
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertMultiGetResponse
specifier|private
specifier|static
name|void
name|assertMultiGetResponse
parameter_list|(
name|MultiGetResponse
name|multiGetResponse
parameter_list|,
name|int
name|numDocs
parameter_list|)
block|{
name|assertThat
argument_list|(
name|multiGetResponse
operator|.
name|getResponses
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
name|numDocs
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|1
decl_stmt|;
for|for
control|(
name|MultiGetItemResponse
name|multiGetItemResponse
range|:
name|multiGetResponse
control|)
block|{
name|assertThat
argument_list|(
name|multiGetItemResponse
operator|.
name|getIndex
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|multiGetItemResponse
operator|.
name|getType
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|multiGetItemResponse
operator|.
name|getId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
operator|++
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|BulkProcessorTestListener
specifier|private
specifier|static
class|class
name|BulkProcessorTestListener
implements|implements
name|BulkProcessor
operator|.
name|Listener
block|{
DECL|field|latches
specifier|private
specifier|final
name|CountDownLatch
index|[]
name|latches
decl_stmt|;
DECL|field|beforeCounts
specifier|private
specifier|final
name|AtomicInteger
name|beforeCounts
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
DECL|field|afterCounts
specifier|private
specifier|final
name|AtomicInteger
name|afterCounts
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
DECL|field|bulkItems
specifier|private
specifier|final
name|List
argument_list|<
name|BulkItemResponse
argument_list|>
name|bulkItems
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|bulkFailures
specifier|private
specifier|final
name|List
argument_list|<
name|Throwable
argument_list|>
name|bulkFailures
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|BulkProcessorTestListener
specifier|private
name|BulkProcessorTestListener
parameter_list|(
name|CountDownLatch
modifier|...
name|latches
parameter_list|)
block|{
name|this
operator|.
name|latches
operator|=
name|latches
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|beforeBulk
specifier|public
name|void
name|beforeBulk
parameter_list|(
name|long
name|executionId
parameter_list|,
name|BulkRequest
name|request
parameter_list|)
block|{
name|beforeCounts
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|afterBulk
specifier|public
name|void
name|afterBulk
parameter_list|(
name|long
name|executionId
parameter_list|,
name|BulkRequest
name|request
parameter_list|,
name|BulkResponse
name|response
parameter_list|)
block|{
name|bulkItems
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|response
operator|.
name|getItems
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|afterCounts
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
for|for
control|(
name|CountDownLatch
name|latch
range|:
name|latches
control|)
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|afterBulk
specifier|public
name|void
name|afterBulk
parameter_list|(
name|long
name|executionId
parameter_list|,
name|BulkRequest
name|request
parameter_list|,
name|Throwable
name|failure
parameter_list|)
block|{
name|bulkFailures
operator|.
name|add
argument_list|(
name|failure
argument_list|)
expr_stmt|;
name|afterCounts
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
for|for
control|(
name|CountDownLatch
name|latch
range|:
name|latches
control|)
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

