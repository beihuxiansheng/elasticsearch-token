begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.action.bench
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|bench
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|index
operator|.
name|IndexRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchIntegrationTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|English
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|RoundingMode
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Integration tests for benchmark API  */
end_comment

begin_class
annotation|@
name|ElasticsearchIntegrationTest
operator|.
name|ClusterScope
argument_list|(
name|scope
operator|=
name|ElasticsearchIntegrationTest
operator|.
name|Scope
operator|.
name|SUITE
argument_list|)
DECL|class|BenchmarkIntegrationTest
specifier|public
class|class
name|BenchmarkIntegrationTest
extends|extends
name|ElasticsearchIntegrationTest
block|{
DECL|field|BENCHMARK_NAME
specifier|private
specifier|static
specifier|final
name|String
name|BENCHMARK_NAME
init|=
literal|"test_benchmark"
decl_stmt|;
DECL|field|COMPETITOR_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|COMPETITOR_PREFIX
init|=
literal|"competitor_"
decl_stmt|;
DECL|field|INDEX_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|INDEX_PREFIX
init|=
literal|"test_index_"
decl_stmt|;
DECL|field|INDEX_TYPE
specifier|private
specifier|static
specifier|final
name|String
name|INDEX_TYPE
init|=
literal|"test_type"
decl_stmt|;
DECL|field|MIN_DOC_COUNT
specifier|private
specifier|static
specifier|final
name|int
name|MIN_DOC_COUNT
init|=
literal|1
decl_stmt|;
DECL|field|MAX_DOC_COUNT
specifier|private
specifier|static
specifier|final
name|int
name|MAX_DOC_COUNT
init|=
literal|1000
decl_stmt|;
DECL|field|TIME_UNIT
specifier|private
specifier|static
specifier|final
name|TimeUnit
name|TIME_UNIT
init|=
name|TimeUnit
operator|.
name|SECONDS
decl_stmt|;
DECL|field|TIMEOUT
specifier|private
specifier|static
specifier|final
name|long
name|TIMEOUT
init|=
literal|10
decl_stmt|;
DECL|field|numExecutorNodes
specifier|private
name|int
name|numExecutorNodes
init|=
literal|0
decl_stmt|;
DECL|field|competitionSettingsMap
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|BenchmarkSettings
argument_list|>
name|competitionSettingsMap
decl_stmt|;
DECL|field|indices
specifier|private
name|String
index|[]
name|indices
init|=
name|Strings
operator|.
name|EMPTY_ARRAY
decl_stmt|;
DECL|method|nodeSettings
specifier|protected
name|Settings
name|nodeSettings
parameter_list|(
name|int
name|nodeOrdinal
parameter_list|)
block|{
return|return
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"node.bench"
argument_list|,
literal|true
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Before
DECL|method|beforeBenchmarkIntegrationTests
specifier|public
name|void
name|beforeBenchmarkIntegrationTests
parameter_list|()
throws|throws
name|Exception
block|{
name|numExecutorNodes
operator|=
name|cluster
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
name|competitionSettingsMap
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> indexing random data"
argument_list|)
expr_stmt|;
name|indices
operator|=
name|randomData
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSubmitBenchmark
specifier|public
name|void
name|testSubmitBenchmark
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|BenchmarkRequest
name|request
init|=
name|BenchmarkTestUtil
operator|.
name|randomRequest
argument_list|(
name|client
argument_list|()
argument_list|,
name|indices
argument_list|,
name|numExecutorNodes
argument_list|,
name|competitionSettingsMap
argument_list|)
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> Submitting benchmark - competitors [{}] iterations [{}]"
argument_list|,
name|request
operator|.
name|competitors
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|request
operator|.
name|settings
argument_list|()
operator|.
name|iterations
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|BenchmarkResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|bench
argument_list|(
name|request
argument_list|)
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|response
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|state
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|BenchmarkResponse
operator|.
name|State
operator|.
name|COMPLETE
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|response
operator|.
name|hasErrors
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|benchmarkName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|BENCHMARK_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|competitionResults
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|request
operator|.
name|competitors
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|CompetitionResult
name|result
range|:
name|response
operator|.
name|competitionResults
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|assertThat
argument_list|(
name|result
operator|.
name|nodeResults
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|numExecutorNodes
argument_list|)
argument_list|)
expr_stmt|;
name|validateCompetitionResult
argument_list|(
name|result
argument_list|,
name|competitionSettingsMap
operator|.
name|get
argument_list|(
name|result
operator|.
name|competitionName
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testListBenchmarks
specifier|public
name|void
name|testListBenchmarks
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|BenchmarkRequest
name|request
init|=
name|BenchmarkTestUtil
operator|.
name|randomRequest
argument_list|(
name|client
argument_list|()
argument_list|,
name|indices
argument_list|,
name|numExecutorNodes
argument_list|,
name|competitionSettingsMap
argument_list|)
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> Submitting benchmark - competitors [{}] iterations [{}]"
argument_list|,
name|request
operator|.
name|competitors
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|request
operator|.
name|settings
argument_list|()
operator|.
name|iterations
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|CountDownLatch
name|countdown
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Throwable
argument_list|>
name|throwables
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|client
argument_list|()
operator|.
name|bench
argument_list|(
name|request
argument_list|,
operator|new
name|ActionListener
argument_list|<
name|BenchmarkResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|BenchmarkResponse
name|benchmarkResponse
parameter_list|)
block|{
name|countdown
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|throwables
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|countdown
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Attempt to 'yield' to the thread executing the benchmark; we want it to start executing, but not
comment|// to finish so that we can 'capture' an in-progress state
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
specifier|final
name|BenchmarkStatusResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareBenchStatus
argument_list|()
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|benchmarkResponses
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|greaterThanOrEqualTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|BenchmarkResponse
name|benchmarkResponse
range|:
name|response
operator|.
name|benchmarkResponses
argument_list|()
control|)
block|{
name|assertThat
argument_list|(
name|benchmarkResponse
operator|.
name|benchmarkName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|BENCHMARK_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|benchmarkResponse
operator|.
name|state
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|BenchmarkResponse
operator|.
name|State
operator|.
name|RUNNING
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|benchmarkResponse
operator|.
name|hasErrors
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|CompetitionResult
name|result
range|:
name|benchmarkResponse
operator|.
name|competitionResults
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|assertThat
argument_list|(
name|result
operator|.
name|nodeResults
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|lessThanOrEqualTo
argument_list|(
name|numExecutorNodes
argument_list|)
argument_list|)
expr_stmt|;
name|validateCompetitionResult
argument_list|(
name|result
argument_list|,
name|competitionSettingsMap
operator|.
name|get
argument_list|(
name|result
operator|.
name|competitionName
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Wait for active benchmark to finish; not fatal if we timeout as the framework will tear down the cluster
if|if
condition|(
operator|!
name|countdown
operator|.
name|await
argument_list|(
name|TIMEOUT
argument_list|,
name|TIME_UNIT
argument_list|)
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Timeout waiting to for benchmark to complete"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|throwables
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|Throwable
name|t
range|:
name|throwables
control|)
block|{
name|logger
operator|.
name|error
argument_list|(
name|t
operator|.
name|getMessage
argument_list|()
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
name|fail
argument_list|(
literal|"Failed to execute benchmark"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testAbortBenchmark
specifier|public
name|void
name|testAbortBenchmark
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|BenchmarkRequest
name|request
init|=
name|BenchmarkTestUtil
operator|.
name|randomRequest
argument_list|(
name|client
argument_list|()
argument_list|,
name|indices
argument_list|,
name|numExecutorNodes
argument_list|,
name|competitionSettingsMap
argument_list|)
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> Submitting benchmark - competitors [{}] iterations [{}]"
argument_list|,
name|request
operator|.
name|competitors
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|request
operator|.
name|settings
argument_list|()
operator|.
name|iterations
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|CountDownLatch
name|countdown
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Throwable
argument_list|>
name|throwables
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|client
argument_list|()
operator|.
name|bench
argument_list|(
name|request
argument_list|,
operator|new
name|ActionListener
argument_list|<
name|BenchmarkResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|BenchmarkResponse
name|benchmarkResponse
parameter_list|)
block|{
name|countdown
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|benchmarkResponse
operator|.
name|state
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|BenchmarkResponse
operator|.
name|State
operator|.
name|ABORTED
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|throwables
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|countdown
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Attempt to 'yield' to the thread executing the benchmark; we want it to start executing, but not
comment|// to finish so that we can successfully execute an abort operation on it.
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
specifier|final
name|AbortBenchmarkResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareAbortBench
argument_list|(
name|BENCHMARK_NAME
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getNodeResponses
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|lessThanOrEqualTo
argument_list|(
name|numExecutorNodes
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getBenchmarkName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|BENCHMARK_NAME
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|AbortBenchmarkNodeResponse
name|nodeResponse
range|:
name|response
operator|.
name|getNodeResponses
argument_list|()
control|)
block|{
name|assertThat
argument_list|(
name|nodeResponse
operator|.
name|benchmarkName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|BENCHMARK_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|nodeResponse
operator|.
name|errorMessage
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|nodeResponse
operator|.
name|nodeName
argument_list|()
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Send a list request to make sure there are no active benchmarks
specifier|final
name|BenchmarkStatusResponse
name|statusResponse
init|=
name|client
argument_list|()
operator|.
name|prepareBenchStatus
argument_list|()
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|statusResponse
operator|.
name|benchmarkResponses
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// Wait for active benchmark to finish; not fatal if we timeout as the framework will tear down the cluster
if|if
condition|(
operator|!
name|countdown
operator|.
name|await
argument_list|(
name|TIMEOUT
argument_list|,
name|TIME_UNIT
argument_list|)
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Timeout waiting to for benchmark to complete"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|throwables
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|Throwable
name|t
range|:
name|throwables
control|)
block|{
name|logger
operator|.
name|error
argument_list|(
name|t
operator|.
name|getMessage
argument_list|()
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
name|fail
argument_list|(
literal|"Failed to execute benchmark"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|BenchmarkMissingException
operator|.
name|class
argument_list|)
DECL|method|testAbortNoSuchBenchmark
specifier|public
name|void
name|testAbortNoSuchBenchmark
parameter_list|()
throws|throws
name|Exception
block|{
name|client
argument_list|()
operator|.
name|prepareAbortBench
argument_list|(
name|BENCHMARK_NAME
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
block|}
DECL|method|validateCompetitionResult
specifier|private
name|void
name|validateCompetitionResult
parameter_list|(
name|CompetitionResult
name|result
parameter_list|,
name|BenchmarkSettings
name|requestedSettings
parameter_list|,
name|boolean
name|strict
parameter_list|)
block|{
comment|// Validate settings
name|assertTrue
argument_list|(
name|result
operator|.
name|competitionName
argument_list|()
operator|.
name|startsWith
argument_list|(
name|COMPETITOR_PREFIX
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|concurrency
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|requestedSettings
operator|.
name|concurrency
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|multiplier
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|requestedSettings
operator|.
name|multiplier
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Validate node-level responses
for|for
control|(
name|CompetitionNodeResult
name|nodeResult
range|:
name|result
operator|.
name|nodeResults
argument_list|()
control|)
block|{
name|assertThat
argument_list|(
name|nodeResult
operator|.
name|nodeName
argument_list|()
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|nodeResult
operator|.
name|totalIterations
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|requestedSettings
operator|.
name|iterations
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|strict
condition|)
block|{
name|assertThat
argument_list|(
name|nodeResult
operator|.
name|completedIterations
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|requestedSettings
operator|.
name|iterations
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|int
name|expectedQueryCount
init|=
name|requestedSettings
operator|.
name|multiplier
argument_list|()
operator|*
name|nodeResult
operator|.
name|totalIterations
argument_list|()
operator|*
name|requestedSettings
operator|.
name|searchRequests
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|nodeResult
operator|.
name|totalExecutedQueries
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expectedQueryCount
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|nodeResult
operator|.
name|iterations
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|requestedSettings
operator|.
name|iterations
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|nodeResult
operator|.
name|warmUpTime
argument_list|()
argument_list|,
name|greaterThanOrEqualTo
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|CompetitionIteration
name|iteration
range|:
name|nodeResult
operator|.
name|iterations
argument_list|()
control|)
block|{
comment|// Basic sanity checks
name|iteration
operator|.
name|computeStatistics
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|iteration
operator|.
name|totalTime
argument_list|()
argument_list|,
name|greaterThanOrEqualTo
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|iteration
operator|.
name|min
argument_list|()
argument_list|,
name|greaterThanOrEqualTo
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|iteration
operator|.
name|max
argument_list|()
argument_list|,
name|greaterThanOrEqualTo
argument_list|(
name|iteration
operator|.
name|min
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|iteration
operator|.
name|mean
argument_list|()
argument_list|,
name|greaterThanOrEqualTo
argument_list|(
operator|(
name|double
operator|)
name|iteration
operator|.
name|min
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|iteration
operator|.
name|mean
argument_list|()
argument_list|,
name|lessThanOrEqualTo
argument_list|(
operator|(
name|double
operator|)
name|iteration
operator|.
name|max
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|iteration
operator|.
name|queriesPerSecond
argument_list|()
argument_list|,
name|greaterThanOrEqualTo
argument_list|(
literal|0.0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|iteration
operator|.
name|millisPerHit
argument_list|()
argument_list|,
name|greaterThanOrEqualTo
argument_list|(
literal|0.0
argument_list|)
argument_list|)
expr_stmt|;
name|validatePercentiles
argument_list|(
name|iteration
operator|.
name|percentileValues
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Validate summary statistics
specifier|final
name|CompetitionSummary
name|summary
init|=
name|result
operator|.
name|competitionSummary
argument_list|()
decl_stmt|;
name|summary
operator|.
name|computeSummaryStatistics
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|summary
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|summary
operator|.
name|getMin
argument_list|()
argument_list|,
name|greaterThanOrEqualTo
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|summary
operator|.
name|getMax
argument_list|()
argument_list|,
name|greaterThanOrEqualTo
argument_list|(
name|summary
operator|.
name|getMin
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|summary
operator|.
name|getMean
argument_list|()
argument_list|,
name|greaterThanOrEqualTo
argument_list|(
operator|(
name|double
operator|)
name|summary
operator|.
name|getMin
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|summary
operator|.
name|getMean
argument_list|()
argument_list|,
name|lessThanOrEqualTo
argument_list|(
operator|(
name|double
operator|)
name|summary
operator|.
name|getMax
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|summary
operator|.
name|getTotalTime
argument_list|()
argument_list|,
name|greaterThanOrEqualTo
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|summary
operator|.
name|getQueriesPerSecond
argument_list|()
argument_list|,
name|greaterThanOrEqualTo
argument_list|(
literal|0.0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|summary
operator|.
name|getMillisPerHit
argument_list|()
argument_list|,
name|greaterThanOrEqualTo
argument_list|(
literal|0.0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|summary
operator|.
name|getAvgWarmupTime
argument_list|()
argument_list|,
name|greaterThanOrEqualTo
argument_list|(
literal|0.0
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|strict
condition|)
block|{
name|assertThat
argument_list|(
operator|(
name|int
operator|)
name|summary
operator|.
name|getTotalIterations
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|requestedSettings
operator|.
name|iterations
argument_list|()
operator|*
name|summary
operator|.
name|nodeResults
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|int
operator|)
name|summary
operator|.
name|getCompletedIterations
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|requestedSettings
operator|.
name|iterations
argument_list|()
operator|*
name|summary
operator|.
name|nodeResults
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|int
operator|)
name|summary
operator|.
name|getTotalQueries
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|requestedSettings
operator|.
name|iterations
argument_list|()
operator|*
name|requestedSettings
operator|.
name|multiplier
argument_list|()
operator|*
name|requestedSettings
operator|.
name|searchRequests
argument_list|()
operator|.
name|size
argument_list|()
operator|*
name|summary
operator|.
name|nodeResults
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|validatePercentiles
argument_list|(
name|summary
operator|.
name|percentileValues
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|validatePercentiles
specifier|private
name|void
name|validatePercentiles
parameter_list|(
name|Map
argument_list|<
name|Double
argument_list|,
name|Double
argument_list|>
name|percentiles
parameter_list|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
name|Double
name|last
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Double
argument_list|,
name|Double
argument_list|>
name|entry
range|:
name|percentiles
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|assertThat
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|BenchmarkSettings
operator|.
name|DEFAULT_PERCENTILES
index|[
name|i
operator|++
index|]
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|last
operator|!=
literal|null
condition|)
block|{
name|assertThat
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|greaterThanOrEqualTo
argument_list|(
name|last
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// This is a hedge against rounding errors. Sometimes two adjacent percentile values will
comment|// be nearly equivalent except for some insignificant decimal places. In such cases we
comment|// want the two values to compare as equal.
specifier|final
name|BigDecimal
name|bd
init|=
operator|new
name|BigDecimal
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|setScale
argument_list|(
literal|2
argument_list|,
name|RoundingMode
operator|.
name|HALF_DOWN
argument_list|)
decl_stmt|;
name|last
operator|=
name|bd
operator|.
name|doubleValue
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|randomData
specifier|private
name|String
index|[]
name|randomData
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|numIndices
init|=
name|between
argument_list|(
name|BenchmarkTestUtil
operator|.
name|MIN_SMALL_INTERVAL
argument_list|,
name|BenchmarkTestUtil
operator|.
name|MAX_SMALL_INTERVAL
argument_list|)
decl_stmt|;
specifier|final
name|String
index|[]
name|indices
init|=
operator|new
name|String
index|[
name|numIndices
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numIndices
condition|;
name|i
operator|++
control|)
block|{
name|indices
index|[
name|i
index|]
operator|=
name|INDEX_PREFIX
operator|+
name|i
expr_stmt|;
specifier|final
name|int
name|numDocs
init|=
name|between
argument_list|(
name|MIN_DOC_COUNT
argument_list|,
name|MAX_DOC_COUNT
argument_list|)
decl_stmt|;
specifier|final
name|IndexRequestBuilder
index|[]
name|docs
init|=
operator|new
name|IndexRequestBuilder
index|[
name|numDocs
index|]
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numDocs
condition|;
name|j
operator|++
control|)
block|{
name|docs
index|[
name|j
index|]
operator|=
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|indices
index|[
name|i
index|]
argument_list|,
name|INDEX_TYPE
argument_list|)
operator|.
name|setSource
argument_list|(
name|BenchmarkTestUtil
operator|.
name|TestIndexField
operator|.
name|INT_FIELD
operator|.
name|toString
argument_list|()
argument_list|,
name|randomInt
argument_list|()
argument_list|,
name|BenchmarkTestUtil
operator|.
name|TestIndexField
operator|.
name|FLOAT_FIELD
operator|.
name|toString
argument_list|()
argument_list|,
name|randomFloat
argument_list|()
argument_list|,
name|BenchmarkTestUtil
operator|.
name|TestIndexField
operator|.
name|BOOLEAN_FIELD
operator|.
name|toString
argument_list|()
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
name|BenchmarkTestUtil
operator|.
name|TestIndexField
operator|.
name|STRING_FIELD
operator|.
name|toString
argument_list|()
argument_list|,
name|English
operator|.
name|intToEnglish
argument_list|(
name|j
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|docs
argument_list|)
expr_stmt|;
block|}
return|return
name|indices
return|;
block|}
block|}
end_class

end_unit

