begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cloud.gce.tests
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cloud
operator|.
name|gce
operator|.
name|tests
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|node
operator|.
name|info
operator|.
name|NodesInfoResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cloud
operator|.
name|gce
operator|.
name|GceComputeService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchIntegrationTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_class
annotation|@
name|ElasticsearchIntegrationTest
operator|.
name|ClusterScope
argument_list|(
name|scope
operator|=
name|ElasticsearchIntegrationTest
operator|.
name|Scope
operator|.
name|TEST
argument_list|,
name|numNodes
operator|=
literal|0
argument_list|)
DECL|class|GceAbstractTest
specifier|public
specifier|abstract
class|class
name|GceAbstractTest
extends|extends
name|ElasticsearchIntegrationTest
block|{
DECL|field|mock
specifier|private
name|Class
argument_list|<
name|?
extends|extends
name|GceComputeService
argument_list|>
name|mock
decl_stmt|;
DECL|method|GceAbstractTest
specifier|public
name|GceAbstractTest
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|GceComputeService
argument_list|>
name|mock
parameter_list|)
block|{
comment|// We want to inject the GCE API Mock
name|this
operator|.
name|mock
operator|=
name|mock
expr_stmt|;
block|}
DECL|method|checkNumberOfNodes
specifier|protected
name|void
name|checkNumberOfNodes
parameter_list|(
name|int
name|expected
parameter_list|)
block|{
name|NodesInfoResponse
name|nodeInfos
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareNodesInfo
argument_list|()
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|nodeInfos
operator|.
name|getNodes
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|nodeInfos
operator|.
name|getNodes
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
DECL|method|nodeBuilder
specifier|protected
name|void
name|nodeBuilder
parameter_list|(
name|String
name|filteredTags
parameter_list|)
block|{
name|ImmutableSettings
operator|.
name|Builder
name|nodeSettings
init|=
name|ImmutableSettings
operator|.
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"cloud.gce.api.impl"
argument_list|,
name|mock
argument_list|)
operator|.
name|put
argument_list|(
literal|"cloud.gce.refresh_interval"
argument_list|,
literal|"5s"
argument_list|)
decl_stmt|;
if|if
condition|(
name|filteredTags
operator|!=
literal|null
condition|)
block|{
name|nodeSettings
operator|.
name|put
argument_list|(
literal|"discovery.gce.tags"
argument_list|,
name|filteredTags
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|nodeSettings
operator|.
name|put
argument_list|(
literal|"discovery.gce.tags"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
name|cluster
argument_list|()
operator|.
name|startNode
argument_list|(
name|nodeSettings
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

