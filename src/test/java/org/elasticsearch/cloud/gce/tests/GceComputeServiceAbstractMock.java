begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cloud.gce.tests
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cloud
operator|.
name|gce
operator|.
name|tests
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|api
operator|.
name|services
operator|.
name|compute
operator|.
name|model
operator|.
name|Instance
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|api
operator|.
name|services
operator|.
name|compute
operator|.
name|model
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|api
operator|.
name|services
operator|.
name|compute
operator|.
name|model
operator|.
name|NetworkInterface
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|api
operator|.
name|services
operator|.
name|compute
operator|.
name|model
operator|.
name|Tags
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticSearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cloud
operator|.
name|gce
operator|.
name|GceComputeService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|AbstractLifecycleComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|GceComputeServiceAbstractMock
specifier|public
specifier|abstract
class|class
name|GceComputeServiceAbstractMock
extends|extends
name|AbstractLifecycleComponent
argument_list|<
name|GceComputeServiceAbstractMock
argument_list|>
implements|implements
name|GceComputeService
block|{
DECL|method|getTags
specifier|protected
specifier|abstract
name|List
argument_list|<
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|>
name|getTags
parameter_list|()
function_decl|;
DECL|method|GceComputeServiceAbstractMock
specifier|protected
name|GceComputeServiceAbstractMock
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"starting GCE Api Mock with {} nodes:"
argument_list|,
name|getTags
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|List
argument_list|<
name|String
argument_list|>
name|tags
range|:
name|getTags
argument_list|()
control|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|" - {}"
argument_list|,
name|tags
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|instances
specifier|public
name|Collection
argument_list|<
name|Instance
argument_list|>
name|instances
parameter_list|()
block|{
name|Collection
argument_list|<
name|Instance
argument_list|>
name|instances
init|=
operator|new
name|ArrayList
argument_list|<
name|Instance
argument_list|>
argument_list|()
decl_stmt|;
comment|// For each instance (item of tags)
name|int
name|port
init|=
literal|9300
decl_stmt|;
for|for
control|(
name|List
argument_list|<
name|String
argument_list|>
name|tags
range|:
name|getTags
argument_list|()
control|)
block|{
name|Instance
name|instance
init|=
operator|new
name|Instance
argument_list|()
decl_stmt|;
name|instance
operator|.
name|setName
argument_list|(
literal|"Mock Node "
operator|+
name|tags
argument_list|)
expr_stmt|;
name|instance
operator|.
name|setMachineType
argument_list|(
literal|"Mock Type machine"
argument_list|)
expr_stmt|;
name|instance
operator|.
name|setImage
argument_list|(
literal|"mock-image-type"
argument_list|)
expr_stmt|;
name|instance
operator|.
name|setStatus
argument_list|(
literal|"STARTED"
argument_list|)
expr_stmt|;
name|Tags
name|instanceTags
init|=
operator|new
name|Tags
argument_list|()
decl_stmt|;
name|instanceTags
operator|.
name|setItems
argument_list|(
name|tags
argument_list|)
expr_stmt|;
name|instance
operator|.
name|setTags
argument_list|(
name|instanceTags
argument_list|)
expr_stmt|;
name|NetworkInterface
name|networkInterface
init|=
operator|new
name|NetworkInterface
argument_list|()
decl_stmt|;
name|networkInterface
operator|.
name|setNetworkIP
argument_list|(
literal|"localhost"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|NetworkInterface
argument_list|>
name|networkInterfaces
init|=
operator|new
name|ArrayList
argument_list|<
name|NetworkInterface
argument_list|>
argument_list|()
decl_stmt|;
name|networkInterfaces
operator|.
name|add
argument_list|(
name|networkInterface
argument_list|)
expr_stmt|;
name|instance
operator|.
name|setNetworkInterfaces
argument_list|(
name|networkInterfaces
argument_list|)
expr_stmt|;
comment|// Add metadata es_port:930X where X is the instance number
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|metadata
operator|.
name|put
argument_list|(
literal|"es_port"
argument_list|,
literal|""
operator|+
name|port
argument_list|)
expr_stmt|;
name|instance
operator|.
name|setMetadata
argument_list|(
name|metadata
argument_list|)
expr_stmt|;
name|instances
operator|.
name|add
argument_list|(
name|instance
argument_list|)
expr_stmt|;
name|port
operator|++
expr_stmt|;
block|}
return|return
name|instances
return|;
block|}
annotation|@
name|Override
DECL|method|doStart
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|ElasticSearchException
block|{     }
annotation|@
name|Override
DECL|method|doStop
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|ElasticSearchException
block|{     }
annotation|@
name|Override
DECL|method|doClose
specifier|protected
name|void
name|doClose
parameter_list|()
throws|throws
name|ElasticSearchException
block|{     }
block|}
end_class

end_unit

