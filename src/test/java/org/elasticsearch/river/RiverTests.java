begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.river
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|river
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|get
operator|.
name|GetResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|get
operator|.
name|MultiGetItemResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|get
operator|.
name|MultiGetRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|get
operator|.
name|MultiGetResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|index
operator|.
name|IndexResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|json
operator|.
name|JsonXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MapperService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|river
operator|.
name|dummy
operator|.
name|DummyRiverModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchIntegrationTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchIntegrationTest
operator|.
name|ClusterScope
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_class
annotation|@
name|ClusterScope
argument_list|(
name|scope
operator|=
name|ElasticsearchIntegrationTest
operator|.
name|Scope
operator|.
name|SUITE
argument_list|)
DECL|class|RiverTests
specifier|public
class|class
name|RiverTests
extends|extends
name|ElasticsearchIntegrationTest
block|{
annotation|@
name|Test
DECL|method|testRiverStart
specifier|public
name|void
name|testRiverStart
parameter_list|()
throws|throws
name|Exception
block|{
name|startAndCheckRiverIsStarted
argument_list|(
literal|"dummy-river-test"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMultipleRiversStart
specifier|public
name|void
name|testMultipleRiversStart
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|nbRivers
init|=
name|between
argument_list|(
literal|2
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"-->  testing with {} rivers..."
argument_list|,
name|nbRivers
argument_list|)
expr_stmt|;
name|Thread
index|[]
name|riverCreators
init|=
operator|new
name|Thread
index|[
name|nbRivers
index|]
decl_stmt|;
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
name|nbRivers
argument_list|)
decl_stmt|;
specifier|final
name|MultiGetRequestBuilder
name|multiGetRequestBuilder
init|=
name|client
argument_list|()
operator|.
name|prepareMultiGet
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nbRivers
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|String
name|riverName
init|=
literal|"dummy-river-test-"
operator|+
name|i
decl_stmt|;
name|riverCreators
index|[
name|i
index|]
operator|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|startRiver
argument_list|(
name|riverName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"failed to register river {}"
argument_list|,
name|t
argument_list|,
name|riverName
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
expr_stmt|;
name|riverCreators
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
name|multiGetRequestBuilder
operator|.
name|add
argument_list|(
name|RiverIndexName
operator|.
name|Conf
operator|.
name|DEFAULT_INDEX_NAME
argument_list|,
name|riverName
argument_list|,
literal|"_status"
argument_list|)
expr_stmt|;
block|}
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"-->  checking that all rivers were created"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|awaitBusy
argument_list|(
operator|new
name|Predicate
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|apply
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
name|MultiGetResponse
name|multiGetItemResponse
init|=
name|multiGetRequestBuilder
operator|.
name|get
argument_list|()
decl_stmt|;
for|for
control|(
name|MultiGetItemResponse
name|getItemResponse
range|:
name|multiGetItemResponse
control|)
block|{
if|if
condition|(
name|getItemResponse
operator|.
name|isFailed
argument_list|()
operator|||
operator|!
name|getItemResponse
operator|.
name|getResponse
argument_list|()
operator|.
name|isExists
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
argument_list|,
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test case for https://github.com/elasticsearch/elasticsearch/issues/4577      * River does not start when using config/templates files      */
annotation|@
name|Test
DECL|method|startDummyRiverWithDefaultTemplate
specifier|public
name|void
name|startDummyRiverWithDefaultTemplate
parameter_list|()
throws|throws
name|Exception
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"--> create empty template"
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|preparePutTemplate
argument_list|(
literal|"template_1"
argument_list|)
operator|.
name|setTemplate
argument_list|(
literal|"*"
argument_list|)
operator|.
name|setOrder
argument_list|(
literal|0
argument_list|)
operator|.
name|addMapping
argument_list|(
name|MapperService
operator|.
name|DEFAULT_MAPPING
argument_list|,
name|JsonXContent
operator|.
name|contentBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
name|MapperService
operator|.
name|DEFAULT_MAPPING
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|startAndCheckRiverIsStarted
argument_list|(
literal|"dummy-river-default-template-test"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test case for https://github.com/elasticsearch/elasticsearch/issues/4577      * River does not start when using config/templates files      */
annotation|@
name|Test
DECL|method|startDummyRiverWithSomeTemplates
specifier|public
name|void
name|startDummyRiverWithSomeTemplates
parameter_list|()
throws|throws
name|Exception
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"--> create some templates"
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|preparePutTemplate
argument_list|(
literal|"template_1"
argument_list|)
operator|.
name|setTemplate
argument_list|(
literal|"*"
argument_list|)
operator|.
name|setOrder
argument_list|(
literal|0
argument_list|)
operator|.
name|addMapping
argument_list|(
name|MapperService
operator|.
name|DEFAULT_MAPPING
argument_list|,
name|JsonXContent
operator|.
name|contentBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
name|MapperService
operator|.
name|DEFAULT_MAPPING
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|preparePutTemplate
argument_list|(
literal|"template_2"
argument_list|)
operator|.
name|setTemplate
argument_list|(
literal|"*"
argument_list|)
operator|.
name|setOrder
argument_list|(
literal|0
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"atype"
argument_list|,
name|JsonXContent
operator|.
name|contentBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"atype"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|startAndCheckRiverIsStarted
argument_list|(
literal|"dummy-river-template-test"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Create a Dummy river then check it has been started. We will fail after 5 seconds.      * @param riverName Dummy river needed to be started      */
DECL|method|startAndCheckRiverIsStarted
specifier|private
name|void
name|startAndCheckRiverIsStarted
parameter_list|(
specifier|final
name|String
name|riverName
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|startRiver
argument_list|(
name|riverName
argument_list|)
expr_stmt|;
name|checkRiverIsStarted
argument_list|(
name|riverName
argument_list|)
expr_stmt|;
block|}
DECL|method|startRiver
specifier|private
name|void
name|startRiver
parameter_list|(
specifier|final
name|String
name|riverName
parameter_list|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"-->  starting river [{}]"
argument_list|,
name|riverName
argument_list|)
expr_stmt|;
name|IndexResponse
name|indexResponse
init|=
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|RiverIndexName
operator|.
name|Conf
operator|.
name|DEFAULT_INDEX_NAME
argument_list|,
name|riverName
argument_list|,
literal|"_meta"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"type"
argument_list|,
name|DummyRiverModule
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|indexResponse
operator|.
name|isCreated
argument_list|()
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
block|}
DECL|method|checkRiverIsStarted
specifier|private
name|void
name|checkRiverIsStarted
parameter_list|(
specifier|final
name|String
name|riverName
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"-->  checking that river [{}] was created"
argument_list|,
name|riverName
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|awaitBusy
argument_list|(
operator|new
name|Predicate
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|apply
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
name|GetResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareGet
argument_list|(
name|RiverIndexName
operator|.
name|Conf
operator|.
name|DEFAULT_INDEX_NAME
argument_list|,
name|riverName
argument_list|,
literal|"_status"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
return|return
name|response
operator|.
name|isExists
argument_list|()
return|;
block|}
block|}
argument_list|,
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

