begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.river
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|river
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|TestRiver
specifier|public
class|class
name|TestRiver
extends|extends
name|AbstractRiverComponent
implements|implements
name|River
block|{
DECL|field|riverIndexName
specifier|private
specifier|final
name|String
name|riverIndexName
decl_stmt|;
DECL|field|client
specifier|private
specifier|final
name|Client
name|client
decl_stmt|;
annotation|@
name|Inject
DECL|method|TestRiver
specifier|public
name|TestRiver
parameter_list|(
name|RiverName
name|riverName
parameter_list|,
annotation|@
name|RiverIndexName
name|String
name|riverIndexName
parameter_list|,
name|RiverSettings
name|settings
parameter_list|,
name|Client
name|client
parameter_list|)
block|{
name|super
argument_list|(
name|riverName
argument_list|,
name|settings
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"create"
argument_list|)
expr_stmt|;
name|this
operator|.
name|client
operator|=
name|client
expr_stmt|;
name|this
operator|.
name|riverIndexName
operator|=
name|riverIndexName
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|start
specifier|public
name|void
name|start
parameter_list|()
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"start"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|client
operator|.
name|prepareIndex
argument_list|(
name|riverIndexName
argument_list|,
name|riverName
operator|.
name|getName
argument_list|()
argument_list|,
literal|"_status"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"created"
argument_list|,
literal|true
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|isCreated
argument_list|()
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"_status record wasn't created"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"close"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

