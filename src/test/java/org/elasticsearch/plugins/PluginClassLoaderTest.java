begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.plugins
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|not
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
DECL|class|PluginClassLoaderTest
specifier|public
class|class
name|PluginClassLoaderTest
block|{
DECL|field|NAME
specifier|private
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"es.test.isolated.plugin.name"
decl_stmt|;
DECL|field|INSTANCE
specifier|private
specifier|static
specifier|final
name|String
name|INSTANCE
init|=
literal|"es.test.isolated.plugin.instantiated"
decl_stmt|;
DECL|field|READ
specifier|private
specifier|static
specifier|final
name|String
name|READ
init|=
literal|"es.test.isolated.plugin.read.name"
decl_stmt|;
DECL|field|root
specifier|private
name|URL
name|root
decl_stmt|;
DECL|field|clazz
specifier|private
name|String
name|clazz
init|=
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|replace
argument_list|(
literal|'.'
argument_list|,
literal|'/'
argument_list|)
operator|.
name|concat
argument_list|(
literal|".class"
argument_list|)
decl_stmt|;
DECL|field|parent
specifier|private
name|ClassLoader
name|parent
decl_stmt|;
annotation|@
name|Before
DECL|method|before
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|System
operator|.
name|getProperties
argument_list|()
operator|.
name|setProperty
argument_list|(
name|READ
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|System
operator|.
name|getProperties
argument_list|()
operator|.
name|setProperty
argument_list|(
name|NAME
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|System
operator|.
name|getProperties
argument_list|()
operator|.
name|setProperty
argument_list|(
name|INSTANCE
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|parent
operator|=
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
expr_stmt|;
name|URL
name|url
init|=
name|parent
operator|.
name|getResource
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
name|root
operator|=
operator|new
name|URL
argument_list|(
name|url
operator|.
name|toString
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|url
operator|.
name|toString
argument_list|()
operator|.
name|indexOf
argument_list|(
name|clazz
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testClassSpaceIsolationEvenWhenPointingToSameClass
specifier|public
name|void
name|testClassSpaceIsolationEvenWhenPointingToSameClass
parameter_list|()
throws|throws
name|Exception
block|{
name|PluginClassLoader
name|space1
init|=
operator|new
name|PluginClassLoader
argument_list|(
operator|new
name|URL
index|[]
block|{
name|root
block|}
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Properties
name|props
init|=
name|System
operator|.
name|getProperties
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|props
operator|.
name|getProperty
argument_list|(
name|READ
argument_list|)
argument_list|,
name|is
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|NAME
argument_list|,
literal|"one"
argument_list|)
expr_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|class1
init|=
name|Class
operator|.
name|forName
argument_list|(
literal|"org.elasticsearch.plugins.isolation.DummyClass"
argument_list|,
literal|true
argument_list|,
name|space1
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|props
operator|.
name|getProperty
argument_list|(
name|READ
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"one"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|instance1
init|=
name|props
operator|.
name|getProperty
argument_list|(
name|INSTANCE
argument_list|)
decl_stmt|;
name|PluginClassLoader
name|space2
init|=
operator|new
name|PluginClassLoader
argument_list|(
operator|new
name|URL
index|[]
block|{
name|root
block|}
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|NAME
argument_list|,
literal|"two"
argument_list|)
expr_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|class2
init|=
name|Class
operator|.
name|forName
argument_list|(
literal|"org.elasticsearch.plugins.isolation.DummyClass"
argument_list|,
literal|true
argument_list|,
name|space2
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|props
operator|.
name|getProperty
argument_list|(
name|READ
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"two"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|instance2
init|=
name|props
operator|.
name|getProperty
argument_list|(
name|INSTANCE
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|instance1
argument_list|,
name|not
argument_list|(
name|instance2
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|class1
argument_list|,
name|class2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDelegateToParentIfResourcesNotFoundLocally
specifier|public
name|void
name|testDelegateToParentIfResourcesNotFoundLocally
parameter_list|()
throws|throws
name|Exception
block|{
name|PluginClassLoader
name|space1
init|=
operator|new
name|PluginClassLoader
argument_list|(
operator|new
name|URL
index|[]
block|{}
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|space1
operator|.
name|getResource
argument_list|(
name|clazz
argument_list|)
argument_list|)
expr_stmt|;
name|PluginClassLoader
name|space2
init|=
operator|new
name|PluginClassLoader
argument_list|(
operator|new
name|URL
index|[]
block|{}
argument_list|,
name|parent
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|parent
operator|.
name|getResource
argument_list|(
name|clazz
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|space2
operator|.
name|getResource
argument_list|(
name|clazz
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIgnoreClassesInParentIfFoundLocally
specifier|public
name|void
name|testIgnoreClassesInParentIfFoundLocally
parameter_list|()
throws|throws
name|Exception
block|{
name|ClassLoader
name|parent
init|=
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
decl_stmt|;
name|PluginClassLoader
name|space1
init|=
operator|new
name|PluginClassLoader
argument_list|(
operator|new
name|URL
index|[]
block|{
name|root
block|}
argument_list|,
name|parent
argument_list|)
decl_stmt|;
name|Properties
name|props
init|=
name|System
operator|.
name|getProperties
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|props
operator|.
name|getProperty
argument_list|(
name|READ
argument_list|)
argument_list|,
name|is
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|NAME
argument_list|,
literal|"one"
argument_list|)
expr_stmt|;
name|String
name|before
init|=
name|props
operator|.
name|getProperty
argument_list|(
name|NAME
argument_list|)
decl_stmt|;
name|Class
name|parentClass
init|=
name|Class
operator|.
name|forName
argument_list|(
literal|"org.elasticsearch.plugins.isolation.DummyClass"
argument_list|,
literal|true
argument_list|,
name|parent
argument_list|)
decl_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|NAME
argument_list|,
literal|"one"
argument_list|)
expr_stmt|;
name|Class
name|class1
init|=
name|Class
operator|.
name|forName
argument_list|(
literal|"org.elasticsearch.plugins.isolation.DummyClass"
argument_list|,
literal|true
argument_list|,
name|space1
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|props
operator|.
name|getProperty
argument_list|(
name|READ
argument_list|)
argument_list|,
name|is
argument_list|(
name|before
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|class1
argument_list|,
name|is
argument_list|(
name|not
argument_list|(
name|parentClass
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

