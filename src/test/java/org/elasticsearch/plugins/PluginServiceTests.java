begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.plugins
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|node
operator|.
name|info
operator|.
name|PluginInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|Tuple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|nodesinfo
operator|.
name|SimpleNodesInfoTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
operator|.
name|loading
operator|.
name|classpath
operator|.
name|InClassPathPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchIntegrationTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchIntegrationTest
operator|.
name|ClusterScope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|PathMatcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
operator|.
name|settingsBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|endsWith
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|instanceOf
import|;
end_import

begin_class
annotation|@
name|ClusterScope
argument_list|(
name|scope
operator|=
name|ElasticsearchIntegrationTest
operator|.
name|Scope
operator|.
name|TEST
argument_list|,
name|numDataNodes
operator|=
literal|0
argument_list|,
name|numClientNodes
operator|=
literal|1
argument_list|,
name|transportClientRatio
operator|=
literal|0
argument_list|)
DECL|class|PluginServiceTests
specifier|public
class|class
name|PluginServiceTests
extends|extends
name|PluginTestCase
block|{
annotation|@
name|Test
DECL|method|testPluginLoadingFromClassName
specifier|public
name|void
name|testPluginLoadingFromClassName
parameter_list|()
throws|throws
name|URISyntaxException
block|{
name|Settings
name|settings
init|=
name|settingsBuilder
argument_list|()
comment|// Defines a plugin in classpath
operator|.
name|put
argument_list|(
name|PluginsService
operator|.
name|LOAD_PLUGIN_FROM_CLASSPATH
argument_list|,
literal|true
argument_list|)
operator|.
name|put
argument_list|(
name|PluginsService
operator|.
name|ES_PLUGIN_PROPERTIES_FILE_KEY
argument_list|,
literal|"es-plugin-test.properties"
argument_list|)
comment|// Defines a plugin in settings
operator|.
name|put
argument_list|(
literal|"plugin.types"
argument_list|,
name|InSettingsPlugin
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|startNodeWithPlugins
argument_list|(
name|settings
argument_list|,
literal|"/org/elasticsearch/plugins/loading/"
argument_list|)
expr_stmt|;
name|Plugin
name|plugin
init|=
name|getPlugin
argument_list|(
literal|"in-settings-plugin"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"InSettingsPlugin (defined below in this class) must be loaded"
argument_list|,
name|plugin
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|plugin
argument_list|,
name|instanceOf
argument_list|(
name|InSettingsPlugin
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|plugin
operator|=
name|getPlugin
argument_list|(
literal|"in-classpath-plugin"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"InClassPathPlugin (defined in package ) must be loaded"
argument_list|,
name|plugin
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|plugin
argument_list|,
name|instanceOf
argument_list|(
name|InClassPathPlugin
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|plugin
operator|=
name|getPlugin
argument_list|(
literal|"in-jar-plugin"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"InJarPlugin (packaged as a JAR file in a plugins directory) must be loaded"
argument_list|,
name|plugin
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|plugin
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|endsWith
argument_list|(
literal|"InJarPlugin"
argument_list|)
argument_list|)
expr_stmt|;
name|plugin
operator|=
name|getPlugin
argument_list|(
literal|"in-zip-plugin"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"InZipPlugin (packaged as a Zipped file in a plugins directory) must be loaded"
argument_list|,
name|plugin
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|plugin
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|endsWith
argument_list|(
literal|"InZipPlugin"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testHasLibExtension
specifier|public
name|void
name|testHasLibExtension
parameter_list|()
block|{
name|PathMatcher
name|matcher
init|=
name|PathUtils
operator|.
name|getDefaultFileSystem
argument_list|()
operator|.
name|getPathMatcher
argument_list|(
name|PluginsService
operator|.
name|PLUGIN_LIB_PATTERN
argument_list|)
decl_stmt|;
name|Path
name|p
init|=
name|PathUtils
operator|.
name|get
argument_list|(
literal|"path"
argument_list|,
literal|"to"
argument_list|,
literal|"plugin.jar"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|matcher
operator|.
name|matches
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|=
name|PathUtils
operator|.
name|get
argument_list|(
literal|"path"
argument_list|,
literal|"to"
argument_list|,
literal|"plugin.zip"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|matcher
operator|.
name|matches
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|=
name|PathUtils
operator|.
name|get
argument_list|(
literal|"path"
argument_list|,
literal|"to"
argument_list|,
literal|"plugin.tar.gz"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|matcher
operator|.
name|matches
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|=
name|PathUtils
operator|.
name|get
argument_list|(
literal|"path"
argument_list|,
literal|"to"
argument_list|,
literal|"plugin"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|matcher
operator|.
name|matches
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getPlugin
specifier|private
name|Plugin
name|getPlugin
parameter_list|(
name|String
name|pluginName
parameter_list|)
block|{
name|assertNotNull
argument_list|(
literal|"cannot check plugin existence with a null plugin's name"
argument_list|,
name|pluginName
argument_list|)
expr_stmt|;
name|PluginsService
name|pluginsService
init|=
name|internalCluster
argument_list|()
operator|.
name|getInstance
argument_list|(
name|PluginsService
operator|.
name|class
argument_list|)
decl_stmt|;
name|ImmutableList
argument_list|<
name|Tuple
argument_list|<
name|PluginInfo
argument_list|,
name|Plugin
argument_list|>
argument_list|>
name|plugins
init|=
name|pluginsService
operator|.
name|plugins
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|plugins
operator|!=
literal|null
operator|)
operator|&&
operator|(
operator|!
name|plugins
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
for|for
control|(
name|Tuple
argument_list|<
name|PluginInfo
argument_list|,
name|Plugin
argument_list|>
name|plugin
range|:
name|plugins
control|)
block|{
if|if
condition|(
name|pluginName
operator|.
name|equals
argument_list|(
name|plugin
operator|.
name|v1
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|plugin
operator|.
name|v2
argument_list|()
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|class|InSettingsPlugin
specifier|static
class|class
name|InSettingsPlugin
extends|extends
name|AbstractPlugin
block|{
DECL|field|settings
specifier|private
specifier|final
name|Settings
name|settings
decl_stmt|;
DECL|method|InSettingsPlugin
specifier|public
name|InSettingsPlugin
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
name|this
operator|.
name|settings
operator|=
name|settings
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|name
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
literal|"in-settings-plugin"
return|;
block|}
annotation|@
name|Override
DECL|method|description
specifier|public
name|String
name|description
parameter_list|()
block|{
return|return
literal|"A plugin defined in settings"
return|;
block|}
block|}
block|}
end_class

end_unit

