begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.plugins
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|Environment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
operator|.
name|settingsBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|is
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|PluginManagerUnitTests
specifier|public
class|class
name|PluginManagerUnitTests
extends|extends
name|ElasticsearchTestCase
block|{
annotation|@
name|Test
DECL|method|testThatConfigDirectoryCanBeOutsideOfElasticsearchHomeDirectory
specifier|public
name|void
name|testThatConfigDirectoryCanBeOutsideOfElasticsearchHomeDirectory
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|pluginName
init|=
name|randomAsciiOfLength
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|Path
name|homeFolder
init|=
name|createTempDir
argument_list|()
decl_stmt|;
name|Path
name|genericConfigFolder
init|=
name|createTempDir
argument_list|()
decl_stmt|;
name|Settings
name|settings
init|=
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"path.conf"
argument_list|,
name|genericConfigFolder
argument_list|)
operator|.
name|put
argument_list|(
literal|"path.home"
argument_list|,
name|homeFolder
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Environment
name|environment
init|=
operator|new
name|Environment
argument_list|(
name|settings
argument_list|)
decl_stmt|;
name|PluginManager
operator|.
name|PluginHandle
name|pluginHandle
init|=
operator|new
name|PluginManager
operator|.
name|PluginHandle
argument_list|(
name|pluginName
argument_list|,
literal|"version"
argument_list|,
literal|"user"
argument_list|,
literal|"repo"
argument_list|)
decl_stmt|;
name|String
name|configDirPath
init|=
name|Files
operator|.
name|simplifyPath
argument_list|(
name|pluginHandle
operator|.
name|configDir
argument_list|(
name|environment
argument_list|)
operator|.
name|normalize
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|expectedDirPath
init|=
name|Files
operator|.
name|simplifyPath
argument_list|(
name|genericConfigFolder
operator|.
name|resolve
argument_list|(
name|pluginName
argument_list|)
operator|.
name|normalize
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|configDirPath
argument_list|,
name|is
argument_list|(
name|expectedDirPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

