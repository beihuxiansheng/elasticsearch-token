begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.plugins
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|node
operator|.
name|info
operator|.
name|NodesInfoResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|FileSystemUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|Streams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchIntegrationTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchIntegrationTest
operator|.
name|ClusterScope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchIntegrationTest
operator|.
name|Scope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|notNullValue
import|;
end_import

begin_comment
comment|// NB: the tests uses System Properties to pass the information from different plugins (loaded in separate CLs) to the test.
end_comment

begin_comment
comment|// hence the use of try/finally blocks to clean these up after the test has been executed as otherwise the test framework will trigger a failure
end_comment

begin_class
annotation|@
name|ClusterScope
argument_list|(
name|scope
operator|=
name|Scope
operator|.
name|TEST
argument_list|,
name|numNodes
operator|=
literal|0
argument_list|)
DECL|class|IsolatedPluginTests
specifier|public
class|class
name|IsolatedPluginTests
extends|extends
name|ElasticsearchIntegrationTest
block|{
DECL|field|SETTINGS
specifier|private
specifier|static
specifier|final
name|Settings
name|SETTINGS
decl_stmt|;
DECL|field|PLUGIN_DIR
specifier|private
specifier|static
specifier|final
name|File
name|PLUGIN_DIR
decl_stmt|;
DECL|field|props
specifier|private
name|Properties
name|props
decl_stmt|;
static|static
block|{
name|PLUGIN_DIR
operator|=
name|Files
operator|.
name|createTempDir
argument_list|()
expr_stmt|;
name|SETTINGS
operator|=
name|ImmutableSettings
operator|.
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"discovery.zen.ping.multicast.enabled"
argument_list|,
literal|false
argument_list|)
operator|.
name|put
argument_list|(
literal|"force.http.enabled"
argument_list|,
literal|true
argument_list|)
operator|.
name|put
argument_list|(
literal|"plugin.isolation"
argument_list|,
literal|true
argument_list|)
operator|.
name|put
argument_list|(
literal|"path.plugins"
argument_list|,
name|PLUGIN_DIR
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|beforeTest
specifier|public
name|void
name|beforeTest
parameter_list|()
throws|throws
name|Exception
block|{
name|props
operator|=
operator|new
name|Properties
argument_list|()
expr_stmt|;
name|props
operator|.
name|putAll
argument_list|(
name|System
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Installing plugins into folder {}"
argument_list|,
name|PLUGIN_DIR
argument_list|)
expr_stmt|;
name|FileSystemUtils
operator|.
name|mkdirs
argument_list|(
name|PLUGIN_DIR
argument_list|)
expr_stmt|;
comment|// copy plugin
name|copyPlugin
argument_list|(
operator|new
name|File
argument_list|(
name|PLUGIN_DIR
argument_list|,
literal|"plugin-v1"
argument_list|)
argument_list|)
expr_stmt|;
name|copyPlugin
argument_list|(
operator|new
name|File
argument_list|(
name|PLUGIN_DIR
argument_list|,
literal|"plugin-v2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|copyPlugin
specifier|private
name|void
name|copyPlugin
parameter_list|(
name|File
name|p1
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystemUtils
operator|.
name|mkdirs
argument_list|(
name|p1
argument_list|)
expr_stmt|;
comment|// copy plugin
name|File
name|dir
init|=
operator|new
name|File
argument_list|(
name|p1
argument_list|,
literal|"org/elasticsearch/plugins/isolation/"
argument_list|)
decl_stmt|;
name|FileSystemUtils
operator|.
name|mkdirs
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|copyFile
argument_list|(
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"isolation/DummyClass.class"
argument_list|)
argument_list|,
operator|new
name|File
argument_list|(
name|dir
argument_list|,
literal|"DummyClass.class"
argument_list|)
argument_list|)
expr_stmt|;
name|copyFile
argument_list|(
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"isolation/IsolatedPlugin.class"
argument_list|)
argument_list|,
operator|new
name|File
argument_list|(
name|dir
argument_list|,
literal|"IsolatedPlugin.class"
argument_list|)
argument_list|)
expr_stmt|;
name|copyFile
argument_list|(
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"isolation/es-plugin.properties"
argument_list|)
argument_list|,
operator|new
name|File
argument_list|(
name|p1
argument_list|,
literal|"es-plugin.properties"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|copyFile
specifier|private
name|void
name|copyFile
parameter_list|(
name|InputStream
name|source
parameter_list|,
name|File
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
name|Streams
operator|.
name|copy
argument_list|(
name|source
argument_list|,
operator|new
name|FileOutputStream
argument_list|(
name|out
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|afterTest
specifier|public
name|void
name|afterTest
parameter_list|()
throws|throws
name|Exception
block|{
name|FileSystemUtils
operator|.
name|deleteRecursively
argument_list|(
name|PLUGIN_DIR
argument_list|)
expr_stmt|;
block|}
DECL|method|nodeSettings
specifier|protected
name|Settings
name|nodeSettings
parameter_list|(
name|int
name|nodeOrdinal
parameter_list|)
block|{
return|return
name|SETTINGS
return|;
block|}
annotation|@
name|Test
DECL|method|testPluginNumberOfIsolatedInstances
specifier|public
name|void
name|testPluginNumberOfIsolatedInstances
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|NodesInfoResponse
name|nodesInfoResponse
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareNodesInfo
argument_list|()
operator|.
name|clear
argument_list|()
operator|.
name|setPlugins
argument_list|(
literal|true
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|nodesInfoResponse
operator|.
name|getNodes
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|nodesInfoResponse
operator|.
name|getNodes
argument_list|()
index|[
literal|0
index|]
operator|.
name|getPlugins
argument_list|()
operator|.
name|getInfos
argument_list|()
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|nodesInfoResponse
operator|.
name|getNodes
argument_list|()
index|[
literal|0
index|]
operator|.
name|getPlugins
argument_list|()
operator|.
name|getInfos
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|System
operator|.
name|setProperties
argument_list|(
name|props
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testIsolatedPluginProperties
specifier|public
name|void
name|testIsolatedPluginProperties
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|client
argument_list|()
expr_stmt|;
name|Properties
name|p
init|=
name|System
operator|.
name|getProperties
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|p
operator|.
name|getProperty
argument_list|(
literal|"es.test.isolated.plugin.count"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|prop
init|=
name|p
operator|.
name|getProperty
argument_list|(
literal|"es.test.isolated.plugin.instantiated.hashes"
argument_list|)
decl_stmt|;
name|String
index|[]
name|hashes
init|=
name|Strings
operator|.
name|delimitedListToStringArray
argument_list|(
name|prop
argument_list|,
literal|" "
argument_list|)
decl_stmt|;
comment|// 2 plugins plus trailing space
name|assertThat
argument_list|(
name|hashes
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|p
operator|.
name|getProperty
argument_list|(
literal|"es.test.isolated.plugin.instantiated"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|hashes
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|System
operator|.
name|setProperties
argument_list|(
name|props
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

