begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster.routing.allocation
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
package|;
end_package

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|cursors
operator|.
name|ObjectCursor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterInfoService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|MetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|allocator
operator|.
name|BalancedShardsAllocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|allocator
operator|.
name|ShardsAllocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|allocator
operator|.
name|ShardsAllocators
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|decider
operator|.
name|ClusterRebalanceAllocationDecider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|ESLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|Loggers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|gateway
operator|.
name|none
operator|.
name|NoneGatewayAllocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|node
operator|.
name|settings
operator|.
name|NodeSettingsService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchAllocationTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRoutingState
operator|.
name|INITIALIZING
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRoutingState
operator|.
name|STARTED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
operator|.
name|settingsBuilder
import|;
end_import

begin_class
DECL|class|BalanceConfigurationTests
specifier|public
class|class
name|BalanceConfigurationTests
extends|extends
name|ElasticsearchAllocationTestCase
block|{
DECL|field|logger
specifier|private
specifier|final
name|ESLogger
name|logger
init|=
name|Loggers
operator|.
name|getLogger
argument_list|(
name|BalanceConfigurationTests
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// TODO maybe we can randomize these numbers somehow
DECL|field|numberOfNodes
specifier|final
name|int
name|numberOfNodes
init|=
literal|25
decl_stmt|;
DECL|field|numberOfIndices
specifier|final
name|int
name|numberOfIndices
init|=
literal|12
decl_stmt|;
DECL|field|numberOfShards
specifier|final
name|int
name|numberOfShards
init|=
literal|2
decl_stmt|;
DECL|field|numberOfReplicas
specifier|final
name|int
name|numberOfReplicas
init|=
literal|2
decl_stmt|;
annotation|@
name|Test
DECL|method|testIndexBalance
specifier|public
name|void
name|testIndexBalance
parameter_list|()
block|{
comment|/* Tests balance over indices only */
specifier|final
name|float
name|indexBalance
init|=
literal|1.0f
decl_stmt|;
specifier|final
name|float
name|replicaBalance
init|=
literal|0.0f
decl_stmt|;
specifier|final
name|float
name|primaryBalance
init|=
literal|0.0f
decl_stmt|;
specifier|final
name|float
name|balanceTreshold
init|=
literal|1.0f
decl_stmt|;
name|ImmutableSettings
operator|.
name|Builder
name|settings
init|=
name|settingsBuilder
argument_list|()
decl_stmt|;
name|settings
operator|.
name|put
argument_list|(
name|ClusterRebalanceAllocationDecider
operator|.
name|CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE
argument_list|,
name|ClusterRebalanceAllocationDecider
operator|.
name|ClusterRebalanceType
operator|.
name|ALWAYS
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|settings
operator|.
name|put
argument_list|(
name|BalancedShardsAllocator
operator|.
name|SETTING_INDEX_BALANCE_FACTOR
argument_list|,
name|indexBalance
argument_list|)
expr_stmt|;
name|settings
operator|.
name|put
argument_list|(
name|BalancedShardsAllocator
operator|.
name|SETTING_SHARD_BALANCE_FACTOR
argument_list|,
name|replicaBalance
argument_list|)
expr_stmt|;
name|settings
operator|.
name|put
argument_list|(
name|BalancedShardsAllocator
operator|.
name|SETTING_PRIMARY_BALANCE_FACTOR
argument_list|,
name|primaryBalance
argument_list|)
expr_stmt|;
name|settings
operator|.
name|put
argument_list|(
name|BalancedShardsAllocator
operator|.
name|SETTING_THRESHOLD
argument_list|,
name|balanceTreshold
argument_list|)
expr_stmt|;
name|AllocationService
name|strategy
init|=
name|createAllocationService
argument_list|(
name|settings
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|ClusterState
name|clusterState
init|=
name|initCluster
argument_list|(
name|strategy
argument_list|)
decl_stmt|;
name|assertIndexBalance
argument_list|(
name|logger
argument_list|,
name|clusterState
operator|.
name|getRoutingNodes
argument_list|()
argument_list|,
name|numberOfNodes
argument_list|,
name|numberOfIndices
argument_list|,
name|numberOfReplicas
argument_list|,
name|numberOfShards
argument_list|,
name|balanceTreshold
argument_list|)
expr_stmt|;
name|clusterState
operator|=
name|addNode
argument_list|(
name|clusterState
argument_list|,
name|strategy
argument_list|)
expr_stmt|;
name|assertIndexBalance
argument_list|(
name|logger
argument_list|,
name|clusterState
operator|.
name|getRoutingNodes
argument_list|()
argument_list|,
name|numberOfNodes
operator|+
literal|1
argument_list|,
name|numberOfIndices
argument_list|,
name|numberOfReplicas
argument_list|,
name|numberOfShards
argument_list|,
name|balanceTreshold
argument_list|)
expr_stmt|;
name|clusterState
operator|=
name|removeNodes
argument_list|(
name|clusterState
argument_list|,
name|strategy
argument_list|)
expr_stmt|;
name|assertIndexBalance
argument_list|(
name|logger
argument_list|,
name|clusterState
operator|.
name|getRoutingNodes
argument_list|()
argument_list|,
operator|(
name|numberOfNodes
operator|+
literal|1
operator|)
operator|-
operator|(
name|numberOfNodes
operator|+
literal|1
operator|)
operator|/
literal|2
argument_list|,
name|numberOfIndices
argument_list|,
name|numberOfReplicas
argument_list|,
name|numberOfShards
argument_list|,
name|balanceTreshold
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReplicaBalance
specifier|public
name|void
name|testReplicaBalance
parameter_list|()
block|{
comment|/* Tests balance over replicas only */
specifier|final
name|float
name|indexBalance
init|=
literal|0.0f
decl_stmt|;
specifier|final
name|float
name|replicaBalance
init|=
literal|1.0f
decl_stmt|;
specifier|final
name|float
name|primaryBalance
init|=
literal|0.0f
decl_stmt|;
specifier|final
name|float
name|balanceTreshold
init|=
literal|1.0f
decl_stmt|;
name|ImmutableSettings
operator|.
name|Builder
name|settings
init|=
name|settingsBuilder
argument_list|()
decl_stmt|;
name|settings
operator|.
name|put
argument_list|(
name|ClusterRebalanceAllocationDecider
operator|.
name|CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE
argument_list|,
name|ClusterRebalanceAllocationDecider
operator|.
name|ClusterRebalanceType
operator|.
name|ALWAYS
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|settings
operator|.
name|put
argument_list|(
name|BalancedShardsAllocator
operator|.
name|SETTING_INDEX_BALANCE_FACTOR
argument_list|,
name|indexBalance
argument_list|)
expr_stmt|;
name|settings
operator|.
name|put
argument_list|(
name|BalancedShardsAllocator
operator|.
name|SETTING_SHARD_BALANCE_FACTOR
argument_list|,
name|replicaBalance
argument_list|)
expr_stmt|;
name|settings
operator|.
name|put
argument_list|(
name|BalancedShardsAllocator
operator|.
name|SETTING_PRIMARY_BALANCE_FACTOR
argument_list|,
name|primaryBalance
argument_list|)
expr_stmt|;
name|settings
operator|.
name|put
argument_list|(
name|BalancedShardsAllocator
operator|.
name|SETTING_THRESHOLD
argument_list|,
name|balanceTreshold
argument_list|)
expr_stmt|;
name|AllocationService
name|strategy
init|=
name|createAllocationService
argument_list|(
name|settings
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|ClusterState
name|clusterState
init|=
name|initCluster
argument_list|(
name|strategy
argument_list|)
decl_stmt|;
name|assertReplicaBalance
argument_list|(
name|logger
argument_list|,
name|clusterState
operator|.
name|getRoutingNodes
argument_list|()
argument_list|,
name|numberOfNodes
argument_list|,
name|numberOfIndices
argument_list|,
name|numberOfReplicas
argument_list|,
name|numberOfShards
argument_list|,
name|balanceTreshold
argument_list|)
expr_stmt|;
name|clusterState
operator|=
name|addNode
argument_list|(
name|clusterState
argument_list|,
name|strategy
argument_list|)
expr_stmt|;
name|assertReplicaBalance
argument_list|(
name|logger
argument_list|,
name|clusterState
operator|.
name|getRoutingNodes
argument_list|()
argument_list|,
name|numberOfNodes
operator|+
literal|1
argument_list|,
name|numberOfIndices
argument_list|,
name|numberOfReplicas
argument_list|,
name|numberOfShards
argument_list|,
name|balanceTreshold
argument_list|)
expr_stmt|;
name|clusterState
operator|=
name|removeNodes
argument_list|(
name|clusterState
argument_list|,
name|strategy
argument_list|)
expr_stmt|;
name|assertReplicaBalance
argument_list|(
name|logger
argument_list|,
name|clusterState
operator|.
name|getRoutingNodes
argument_list|()
argument_list|,
operator|(
name|numberOfNodes
operator|+
literal|1
operator|)
operator|-
operator|(
name|numberOfNodes
operator|+
literal|1
operator|)
operator|/
literal|2
argument_list|,
name|numberOfIndices
argument_list|,
name|numberOfReplicas
argument_list|,
name|numberOfShards
argument_list|,
name|balanceTreshold
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPrimaryBalance
specifier|public
name|void
name|testPrimaryBalance
parameter_list|()
block|{
comment|/* Tests balance over primaries only */
specifier|final
name|float
name|indexBalance
init|=
literal|0.0f
decl_stmt|;
specifier|final
name|float
name|replicaBalance
init|=
literal|0.0f
decl_stmt|;
specifier|final
name|float
name|primaryBalance
init|=
literal|1.0f
decl_stmt|;
specifier|final
name|float
name|balanceTreshold
init|=
literal|1.0f
decl_stmt|;
name|ImmutableSettings
operator|.
name|Builder
name|settings
init|=
name|settingsBuilder
argument_list|()
decl_stmt|;
name|settings
operator|.
name|put
argument_list|(
name|ClusterRebalanceAllocationDecider
operator|.
name|CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE
argument_list|,
name|ClusterRebalanceAllocationDecider
operator|.
name|ClusterRebalanceType
operator|.
name|ALWAYS
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|settings
operator|.
name|put
argument_list|(
name|BalancedShardsAllocator
operator|.
name|SETTING_INDEX_BALANCE_FACTOR
argument_list|,
name|indexBalance
argument_list|)
expr_stmt|;
name|settings
operator|.
name|put
argument_list|(
name|BalancedShardsAllocator
operator|.
name|SETTING_SHARD_BALANCE_FACTOR
argument_list|,
name|replicaBalance
argument_list|)
expr_stmt|;
name|settings
operator|.
name|put
argument_list|(
name|BalancedShardsAllocator
operator|.
name|SETTING_PRIMARY_BALANCE_FACTOR
argument_list|,
name|primaryBalance
argument_list|)
expr_stmt|;
name|settings
operator|.
name|put
argument_list|(
name|BalancedShardsAllocator
operator|.
name|SETTING_THRESHOLD
argument_list|,
name|balanceTreshold
argument_list|)
expr_stmt|;
name|AllocationService
name|strategy
init|=
name|createAllocationService
argument_list|(
name|settings
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|ClusterState
name|clusterstate
init|=
name|initCluster
argument_list|(
name|strategy
argument_list|)
decl_stmt|;
name|assertPrimaryBalance
argument_list|(
name|logger
argument_list|,
name|clusterstate
operator|.
name|getRoutingNodes
argument_list|()
argument_list|,
name|numberOfNodes
argument_list|,
name|numberOfIndices
argument_list|,
name|numberOfReplicas
argument_list|,
name|numberOfShards
argument_list|,
name|balanceTreshold
argument_list|)
expr_stmt|;
name|clusterstate
operator|=
name|addNode
argument_list|(
name|clusterstate
argument_list|,
name|strategy
argument_list|)
expr_stmt|;
name|assertPrimaryBalance
argument_list|(
name|logger
argument_list|,
name|clusterstate
operator|.
name|getRoutingNodes
argument_list|()
argument_list|,
name|numberOfNodes
operator|+
literal|1
argument_list|,
name|numberOfIndices
argument_list|,
name|numberOfReplicas
argument_list|,
name|numberOfShards
argument_list|,
name|balanceTreshold
argument_list|)
expr_stmt|;
name|clusterstate
operator|=
name|removeNodes
argument_list|(
name|clusterstate
argument_list|,
name|strategy
argument_list|)
expr_stmt|;
name|assertPrimaryBalance
argument_list|(
name|logger
argument_list|,
name|clusterstate
operator|.
name|getRoutingNodes
argument_list|()
argument_list|,
name|numberOfNodes
operator|+
literal|1
operator|-
operator|(
name|numberOfNodes
operator|+
literal|1
operator|)
operator|/
literal|2
argument_list|,
name|numberOfIndices
argument_list|,
name|numberOfReplicas
argument_list|,
name|numberOfShards
argument_list|,
name|balanceTreshold
argument_list|)
expr_stmt|;
block|}
DECL|method|initCluster
specifier|private
name|ClusterState
name|initCluster
parameter_list|(
name|AllocationService
name|strategy
parameter_list|)
block|{
name|MetaData
operator|.
name|Builder
name|metaDataBuilder
init|=
name|MetaData
operator|.
name|builder
argument_list|()
decl_stmt|;
name|RoutingTable
operator|.
name|Builder
name|routingTableBuilder
init|=
name|RoutingTable
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfIndices
condition|;
name|i
operator|++
control|)
block|{
name|IndexMetaData
operator|.
name|Builder
name|index
init|=
name|IndexMetaData
operator|.
name|builder
argument_list|(
literal|"test"
operator|+
name|i
argument_list|)
operator|.
name|numberOfShards
argument_list|(
name|numberOfShards
argument_list|)
operator|.
name|numberOfReplicas
argument_list|(
name|numberOfReplicas
argument_list|)
decl_stmt|;
name|metaDataBuilder
operator|=
name|metaDataBuilder
operator|.
name|put
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
name|MetaData
name|metaData
init|=
name|metaDataBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
for|for
control|(
name|ObjectCursor
argument_list|<
name|IndexMetaData
argument_list|>
name|cursor
range|:
name|metaData
operator|.
name|indices
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|routingTableBuilder
operator|.
name|addAsNew
argument_list|(
name|cursor
operator|.
name|value
argument_list|)
expr_stmt|;
block|}
name|RoutingTable
name|routingTable
init|=
name|routingTableBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"start "
operator|+
name|numberOfNodes
operator|+
literal|" nodes"
argument_list|)
expr_stmt|;
name|DiscoveryNodes
operator|.
name|Builder
name|nodes
init|=
name|DiscoveryNodes
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfNodes
condition|;
name|i
operator|++
control|)
block|{
name|nodes
operator|.
name|put
argument_list|(
name|newNode
argument_list|(
literal|"node"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ClusterState
name|clusterState
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterName
operator|.
name|DEFAULT
argument_list|)
operator|.
name|nodes
argument_list|(
name|nodes
argument_list|)
operator|.
name|metaData
argument_list|(
name|metaData
argument_list|)
operator|.
name|routingTable
argument_list|(
name|routingTable
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|routingTable
operator|=
name|strategy
operator|.
name|reroute
argument_list|(
name|clusterState
argument_list|)
operator|.
name|routingTable
argument_list|()
expr_stmt|;
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|routingTable
argument_list|(
name|routingTable
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|RoutingNodes
name|routingNodes
init|=
name|clusterState
operator|.
name|routingNodes
argument_list|()
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"restart all the primary shards, replicas will start initializing"
argument_list|)
expr_stmt|;
name|routingNodes
operator|=
name|clusterState
operator|.
name|routingNodes
argument_list|()
expr_stmt|;
name|routingTable
operator|=
name|strategy
operator|.
name|applyStartedShards
argument_list|(
name|clusterState
argument_list|,
name|routingNodes
operator|.
name|shardsWithState
argument_list|(
name|INITIALIZING
argument_list|)
argument_list|)
operator|.
name|routingTable
argument_list|()
expr_stmt|;
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|routingTable
argument_list|(
name|routingTable
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|routingNodes
operator|=
name|clusterState
operator|.
name|routingNodes
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"start the replica shards"
argument_list|)
expr_stmt|;
name|routingNodes
operator|=
name|clusterState
operator|.
name|routingNodes
argument_list|()
expr_stmt|;
name|routingTable
operator|=
name|strategy
operator|.
name|applyStartedShards
argument_list|(
name|clusterState
argument_list|,
name|routingNodes
operator|.
name|shardsWithState
argument_list|(
name|INITIALIZING
argument_list|)
argument_list|)
operator|.
name|routingTable
argument_list|()
expr_stmt|;
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|routingTable
argument_list|(
name|routingTable
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|routingNodes
operator|=
name|clusterState
operator|.
name|routingNodes
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"complete rebalancing"
argument_list|)
expr_stmt|;
name|RoutingTable
name|prev
init|=
name|routingTable
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|routingTable
operator|=
name|strategy
operator|.
name|applyStartedShards
argument_list|(
name|clusterState
argument_list|,
name|routingNodes
operator|.
name|shardsWithState
argument_list|(
name|INITIALIZING
argument_list|)
argument_list|)
operator|.
name|routingTable
argument_list|()
expr_stmt|;
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|routingTable
argument_list|(
name|routingTable
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|routingNodes
operator|=
name|clusterState
operator|.
name|routingNodes
argument_list|()
expr_stmt|;
if|if
condition|(
name|routingTable
operator|==
name|prev
condition|)
break|break;
name|prev
operator|=
name|routingTable
expr_stmt|;
block|}
return|return
name|clusterState
return|;
block|}
DECL|method|addNode
specifier|private
name|ClusterState
name|addNode
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|AllocationService
name|strategy
parameter_list|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"now, start 1 more node, check that rebalancing will happen because we set it to always"
argument_list|)
expr_stmt|;
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|nodes
argument_list|(
name|DiscoveryNodes
operator|.
name|builder
argument_list|(
name|clusterState
operator|.
name|nodes
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|newNode
argument_list|(
literal|"node"
operator|+
name|numberOfNodes
argument_list|)
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|RoutingTable
name|routingTable
init|=
name|strategy
operator|.
name|reroute
argument_list|(
name|clusterState
argument_list|)
operator|.
name|routingTable
argument_list|()
decl_stmt|;
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|routingTable
argument_list|(
name|routingTable
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|RoutingNodes
name|routingNodes
init|=
name|clusterState
operator|.
name|routingNodes
argument_list|()
decl_stmt|;
comment|// move initializing to started
name|RoutingTable
name|prev
init|=
name|routingTable
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|routingTable
operator|=
name|strategy
operator|.
name|applyStartedShards
argument_list|(
name|clusterState
argument_list|,
name|routingNodes
operator|.
name|shardsWithState
argument_list|(
name|INITIALIZING
argument_list|)
argument_list|)
operator|.
name|routingTable
argument_list|()
expr_stmt|;
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|routingTable
argument_list|(
name|routingTable
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|routingNodes
operator|=
name|clusterState
operator|.
name|routingNodes
argument_list|()
expr_stmt|;
if|if
condition|(
name|routingTable
operator|==
name|prev
condition|)
break|break;
name|prev
operator|=
name|routingTable
expr_stmt|;
block|}
return|return
name|clusterState
return|;
block|}
DECL|method|removeNodes
specifier|private
name|ClusterState
name|removeNodes
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|AllocationService
name|strategy
parameter_list|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Removing half the nodes ("
operator|+
operator|(
name|numberOfNodes
operator|+
literal|1
operator|)
operator|/
literal|2
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|DiscoveryNodes
operator|.
name|Builder
name|nodes
init|=
name|DiscoveryNodes
operator|.
name|builder
argument_list|(
name|clusterState
operator|.
name|nodes
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
operator|(
name|numberOfNodes
operator|+
literal|1
operator|)
operator|/
literal|2
init|;
name|i
operator|<=
name|numberOfNodes
condition|;
name|i
operator|++
control|)
block|{
name|nodes
operator|.
name|remove
argument_list|(
literal|"node"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|nodes
argument_list|(
name|nodes
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|RoutingNodes
name|routingNodes
init|=
name|clusterState
operator|.
name|routingNodes
argument_list|()
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"start all the primary shards, replicas will start initializing"
argument_list|)
expr_stmt|;
name|RoutingTable
name|routingTable
init|=
name|strategy
operator|.
name|applyStartedShards
argument_list|(
name|clusterState
argument_list|,
name|routingNodes
operator|.
name|shardsWithState
argument_list|(
name|INITIALIZING
argument_list|)
argument_list|)
operator|.
name|routingTable
argument_list|()
decl_stmt|;
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|routingTable
argument_list|(
name|routingTable
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|routingNodes
operator|=
name|clusterState
operator|.
name|routingNodes
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"start the replica shards"
argument_list|)
expr_stmt|;
name|routingTable
operator|=
name|strategy
operator|.
name|applyStartedShards
argument_list|(
name|clusterState
argument_list|,
name|routingNodes
operator|.
name|shardsWithState
argument_list|(
name|INITIALIZING
argument_list|)
argument_list|)
operator|.
name|routingTable
argument_list|()
expr_stmt|;
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|routingTable
argument_list|(
name|routingTable
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|routingNodes
operator|=
name|clusterState
operator|.
name|routingNodes
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"rebalancing"
argument_list|)
expr_stmt|;
name|routingTable
operator|=
name|strategy
operator|.
name|reroute
argument_list|(
name|clusterState
argument_list|)
operator|.
name|routingTable
argument_list|()
expr_stmt|;
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|routingTable
argument_list|(
name|routingTable
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|routingNodes
operator|=
name|clusterState
operator|.
name|routingNodes
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"complete rebalancing"
argument_list|)
expr_stmt|;
name|RoutingTable
name|prev
init|=
name|routingTable
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|routingTable
operator|=
name|strategy
operator|.
name|applyStartedShards
argument_list|(
name|clusterState
argument_list|,
name|routingNodes
operator|.
name|shardsWithState
argument_list|(
name|INITIALIZING
argument_list|)
argument_list|)
operator|.
name|routingTable
argument_list|()
expr_stmt|;
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|routingTable
argument_list|(
name|routingTable
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|routingNodes
operator|=
name|clusterState
operator|.
name|routingNodes
argument_list|()
expr_stmt|;
if|if
condition|(
name|routingTable
operator|==
name|prev
condition|)
break|break;
name|prev
operator|=
name|routingTable
expr_stmt|;
block|}
return|return
name|clusterState
return|;
block|}
DECL|method|assertReplicaBalance
specifier|private
name|void
name|assertReplicaBalance
parameter_list|(
name|ESLogger
name|logger
parameter_list|,
name|RoutingNodes
name|nodes
parameter_list|,
name|int
name|numberOfNodes
parameter_list|,
name|int
name|numberOfIndices
parameter_list|,
name|int
name|numberOfReplicas
parameter_list|,
name|int
name|numberOfShards
parameter_list|,
name|float
name|treshold
parameter_list|)
block|{
specifier|final
name|int
name|numShards
init|=
name|numberOfIndices
operator|*
name|numberOfShards
operator|*
operator|(
name|numberOfReplicas
operator|+
literal|1
operator|)
decl_stmt|;
specifier|final
name|float
name|avgNumShards
init|=
call|(
name|float
call|)
argument_list|(
name|numShards
argument_list|)
operator|/
call|(
name|float
call|)
argument_list|(
name|numberOfNodes
argument_list|)
decl_stmt|;
specifier|final
name|int
name|minAvgNumberOfShards
init|=
name|Math
operator|.
name|round
argument_list|(
name|Math
operator|.
name|round
argument_list|(
name|Math
operator|.
name|floor
argument_list|(
name|avgNumShards
operator|-
name|treshold
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|int
name|maxAvgNumberOfShards
init|=
name|Math
operator|.
name|round
argument_list|(
name|Math
operator|.
name|round
argument_list|(
name|Math
operator|.
name|ceil
argument_list|(
name|avgNumShards
operator|+
name|treshold
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|RoutingNode
name|node
range|:
name|nodes
control|)
block|{
comment|//            logger.info(node.nodeId() + ": " + node.shardsWithState(INITIALIZING, STARTED).size() + " shards ("+minAvgNumberOfShards+" to "+maxAvgNumberOfShards+")");
name|assertThat
argument_list|(
name|node
operator|.
name|shardsWithState
argument_list|(
name|STARTED
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|Matchers
operator|.
name|greaterThanOrEqualTo
argument_list|(
name|minAvgNumberOfShards
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|node
operator|.
name|shardsWithState
argument_list|(
name|STARTED
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|Matchers
operator|.
name|lessThanOrEqualTo
argument_list|(
name|maxAvgNumberOfShards
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertIndexBalance
specifier|private
name|void
name|assertIndexBalance
parameter_list|(
name|ESLogger
name|logger
parameter_list|,
name|RoutingNodes
name|nodes
parameter_list|,
name|int
name|numberOfNodes
parameter_list|,
name|int
name|numberOfIndices
parameter_list|,
name|int
name|numberOfReplicas
parameter_list|,
name|int
name|numberOfShards
parameter_list|,
name|float
name|treshold
parameter_list|)
block|{
specifier|final
name|int
name|numShards
init|=
name|numberOfShards
operator|*
operator|(
name|numberOfReplicas
operator|+
literal|1
operator|)
decl_stmt|;
specifier|final
name|float
name|avgNumShards
init|=
call|(
name|float
call|)
argument_list|(
name|numShards
argument_list|)
operator|/
call|(
name|float
call|)
argument_list|(
name|numberOfNodes
argument_list|)
decl_stmt|;
specifier|final
name|int
name|minAvgNumberOfShards
init|=
name|Math
operator|.
name|round
argument_list|(
name|Math
operator|.
name|round
argument_list|(
name|Math
operator|.
name|floor
argument_list|(
name|avgNumShards
operator|-
name|treshold
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|int
name|maxAvgNumberOfShards
init|=
name|Math
operator|.
name|round
argument_list|(
name|Math
operator|.
name|round
argument_list|(
name|Math
operator|.
name|ceil
argument_list|(
name|avgNumShards
operator|+
name|treshold
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|index
range|:
name|nodes
operator|.
name|getRoutingTable
argument_list|()
operator|.
name|indicesRouting
argument_list|()
operator|.
name|keySet
argument_list|()
control|)
block|{
for|for
control|(
name|RoutingNode
name|node
range|:
name|nodes
control|)
block|{
comment|//              logger.info(node.nodeId() +":"+index+ ": " + node.shardsWithState(index, INITIALIZING, STARTED).size() + " shards ("+minAvgNumberOfShards+" to "+maxAvgNumberOfShards+")");
name|assertThat
argument_list|(
name|node
operator|.
name|shardsWithState
argument_list|(
name|index
argument_list|,
name|STARTED
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|Matchers
operator|.
name|greaterThanOrEqualTo
argument_list|(
name|minAvgNumberOfShards
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|node
operator|.
name|shardsWithState
argument_list|(
name|index
argument_list|,
name|STARTED
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|Matchers
operator|.
name|lessThanOrEqualTo
argument_list|(
name|maxAvgNumberOfShards
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|assertPrimaryBalance
specifier|private
name|void
name|assertPrimaryBalance
parameter_list|(
name|ESLogger
name|logger
parameter_list|,
name|RoutingNodes
name|nodes
parameter_list|,
name|int
name|numberOfNodes
parameter_list|,
name|int
name|numberOfIndices
parameter_list|,
name|int
name|numberOfReplicas
parameter_list|,
name|int
name|numberOfShards
parameter_list|,
name|float
name|treshold
parameter_list|)
block|{
specifier|final
name|int
name|numShards
init|=
name|numberOfShards
decl_stmt|;
specifier|final
name|float
name|avgNumShards
init|=
call|(
name|float
call|)
argument_list|(
name|numShards
argument_list|)
operator|/
call|(
name|float
call|)
argument_list|(
name|numberOfNodes
argument_list|)
decl_stmt|;
specifier|final
name|int
name|minAvgNumberOfShards
init|=
name|Math
operator|.
name|round
argument_list|(
name|Math
operator|.
name|round
argument_list|(
name|Math
operator|.
name|floor
argument_list|(
name|avgNumShards
operator|-
name|treshold
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|int
name|maxAvgNumberOfShards
init|=
name|Math
operator|.
name|round
argument_list|(
name|Math
operator|.
name|round
argument_list|(
name|Math
operator|.
name|ceil
argument_list|(
name|avgNumShards
operator|+
name|treshold
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|index
range|:
name|nodes
operator|.
name|getRoutingTable
argument_list|()
operator|.
name|indicesRouting
argument_list|()
operator|.
name|keySet
argument_list|()
control|)
block|{
for|for
control|(
name|RoutingNode
name|node
range|:
name|nodes
control|)
block|{
name|int
name|primaries
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ShardRouting
name|shard
range|:
name|node
operator|.
name|shardsWithState
argument_list|(
name|index
argument_list|,
name|STARTED
argument_list|)
control|)
block|{
name|primaries
operator|+=
name|shard
operator|.
name|primary
argument_list|()
condition|?
literal|1
else|:
literal|0
expr_stmt|;
block|}
comment|//                logger.info(node.nodeId() + ": " + primaries + " primaries ("+minAvgNumberOfShards+" to "+maxAvgNumberOfShards+")");
name|assertThat
argument_list|(
name|primaries
argument_list|,
name|Matchers
operator|.
name|greaterThanOrEqualTo
argument_list|(
name|minAvgNumberOfShards
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|primaries
argument_list|,
name|Matchers
operator|.
name|lessThanOrEqualTo
argument_list|(
name|maxAvgNumberOfShards
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testPersistedSettings
specifier|public
name|void
name|testPersistedSettings
parameter_list|()
block|{
name|ImmutableSettings
operator|.
name|Builder
name|settings
init|=
name|settingsBuilder
argument_list|()
decl_stmt|;
name|settings
operator|.
name|put
argument_list|(
name|BalancedShardsAllocator
operator|.
name|SETTING_INDEX_BALANCE_FACTOR
argument_list|,
literal|0.2
argument_list|)
expr_stmt|;
name|settings
operator|.
name|put
argument_list|(
name|BalancedShardsAllocator
operator|.
name|SETTING_SHARD_BALANCE_FACTOR
argument_list|,
literal|0.3
argument_list|)
expr_stmt|;
name|settings
operator|.
name|put
argument_list|(
name|BalancedShardsAllocator
operator|.
name|SETTING_PRIMARY_BALANCE_FACTOR
argument_list|,
literal|0.5
argument_list|)
expr_stmt|;
name|settings
operator|.
name|put
argument_list|(
name|BalancedShardsAllocator
operator|.
name|SETTING_THRESHOLD
argument_list|,
literal|2.0
argument_list|)
expr_stmt|;
specifier|final
name|NodeSettingsService
operator|.
name|Listener
index|[]
name|listeners
init|=
operator|new
name|NodeSettingsService
operator|.
name|Listener
index|[
literal|1
index|]
decl_stmt|;
name|NodeSettingsService
name|service
init|=
operator|new
name|NodeSettingsService
argument_list|(
name|settingsBuilder
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|addListener
parameter_list|(
name|Listener
name|listener
parameter_list|)
block|{
name|assertNull
argument_list|(
literal|"addListener was called twice while only one time was expected"
argument_list|,
name|listeners
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|listeners
index|[
literal|0
index|]
operator|=
name|listener
expr_stmt|;
block|}
block|}
decl_stmt|;
name|BalancedShardsAllocator
name|allocator
init|=
operator|new
name|BalancedShardsAllocator
argument_list|(
name|settings
operator|.
name|build
argument_list|()
argument_list|,
name|service
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|allocator
operator|.
name|getIndexBalance
argument_list|()
argument_list|,
name|Matchers
operator|.
name|equalTo
argument_list|(
literal|0.2f
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocator
operator|.
name|getShardBalance
argument_list|()
argument_list|,
name|Matchers
operator|.
name|equalTo
argument_list|(
literal|0.3f
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocator
operator|.
name|getPrimaryBalance
argument_list|()
argument_list|,
name|Matchers
operator|.
name|equalTo
argument_list|(
literal|0.5f
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocator
operator|.
name|getThreshold
argument_list|()
argument_list|,
name|Matchers
operator|.
name|equalTo
argument_list|(
literal|2.0f
argument_list|)
argument_list|)
expr_stmt|;
name|settings
operator|=
name|settingsBuilder
argument_list|()
expr_stmt|;
name|settings
operator|.
name|put
argument_list|(
name|ClusterRebalanceAllocationDecider
operator|.
name|CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE
argument_list|,
name|ClusterRebalanceAllocationDecider
operator|.
name|ClusterRebalanceType
operator|.
name|ALWAYS
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|listeners
index|[
literal|0
index|]
operator|.
name|onRefreshSettings
argument_list|(
name|settings
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocator
operator|.
name|getIndexBalance
argument_list|()
argument_list|,
name|Matchers
operator|.
name|equalTo
argument_list|(
literal|0.2f
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocator
operator|.
name|getShardBalance
argument_list|()
argument_list|,
name|Matchers
operator|.
name|equalTo
argument_list|(
literal|0.3f
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocator
operator|.
name|getPrimaryBalance
argument_list|()
argument_list|,
name|Matchers
operator|.
name|equalTo
argument_list|(
literal|0.5f
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocator
operator|.
name|getThreshold
argument_list|()
argument_list|,
name|Matchers
operator|.
name|equalTo
argument_list|(
literal|2.0f
argument_list|)
argument_list|)
expr_stmt|;
name|settings
operator|=
name|settingsBuilder
argument_list|()
expr_stmt|;
name|settings
operator|.
name|put
argument_list|(
name|BalancedShardsAllocator
operator|.
name|SETTING_INDEX_BALANCE_FACTOR
argument_list|,
literal|0.5
argument_list|)
expr_stmt|;
name|settings
operator|.
name|put
argument_list|(
name|BalancedShardsAllocator
operator|.
name|SETTING_SHARD_BALANCE_FACTOR
argument_list|,
literal|0.1
argument_list|)
expr_stmt|;
name|settings
operator|.
name|put
argument_list|(
name|BalancedShardsAllocator
operator|.
name|SETTING_PRIMARY_BALANCE_FACTOR
argument_list|,
literal|0.4
argument_list|)
expr_stmt|;
name|settings
operator|.
name|put
argument_list|(
name|BalancedShardsAllocator
operator|.
name|SETTING_THRESHOLD
argument_list|,
literal|3.0
argument_list|)
expr_stmt|;
name|listeners
index|[
literal|0
index|]
operator|.
name|onRefreshSettings
argument_list|(
name|settings
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocator
operator|.
name|getIndexBalance
argument_list|()
argument_list|,
name|Matchers
operator|.
name|equalTo
argument_list|(
literal|0.5f
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocator
operator|.
name|getShardBalance
argument_list|()
argument_list|,
name|Matchers
operator|.
name|equalTo
argument_list|(
literal|0.1f
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocator
operator|.
name|getPrimaryBalance
argument_list|()
argument_list|,
name|Matchers
operator|.
name|equalTo
argument_list|(
literal|0.4f
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|allocator
operator|.
name|getThreshold
argument_list|()
argument_list|,
name|Matchers
operator|.
name|equalTo
argument_list|(
literal|3.0f
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNoRebalanceOnPrimaryOverload
specifier|public
name|void
name|testNoRebalanceOnPrimaryOverload
parameter_list|()
block|{
name|ImmutableSettings
operator|.
name|Builder
name|settings
init|=
name|settingsBuilder
argument_list|()
decl_stmt|;
name|AllocationService
name|strategy
init|=
operator|new
name|AllocationService
argument_list|(
name|settings
operator|.
name|build
argument_list|()
argument_list|,
name|randomAllocationDeciders
argument_list|(
name|settings
operator|.
name|build
argument_list|()
argument_list|,
operator|new
name|NodeSettingsService
argument_list|(
name|ImmutableSettings
operator|.
name|Builder
operator|.
name|EMPTY_SETTINGS
argument_list|)
argument_list|,
name|getRandom
argument_list|()
argument_list|)
argument_list|,
operator|new
name|ShardsAllocators
argument_list|(
name|settings
operator|.
name|build
argument_list|()
argument_list|,
operator|new
name|NoneGatewayAllocator
argument_list|()
argument_list|,
operator|new
name|ShardsAllocator
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|rebalance
parameter_list|(
name|RoutingAllocation
name|allocation
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|move
parameter_list|(
name|MutableShardRouting
name|shardRouting
parameter_list|,
name|RoutingNode
name|node
parameter_list|,
name|RoutingAllocation
name|allocation
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|applyStartedShards
parameter_list|(
name|StartedRerouteAllocation
name|allocation
parameter_list|)
block|{               }
annotation|@
name|Override
specifier|public
name|void
name|applyFailedShards
parameter_list|(
name|FailedRerouteAllocation
name|allocation
parameter_list|)
block|{             }
comment|/*              *  // this allocator tries to rebuild this scenario where a rebalance is              *  // triggered solely by the primary overload on node [1] where a shard              *  // is rebalanced to node 0                 routing_nodes:                 -----node_id[0][V]                 --------[test][0], node[0], [R], s[STARTED]                 --------[test][4], node[0], [R], s[STARTED]                 -----node_id[1][V]                 --------[test][0], node[1], [P], s[STARTED]                 --------[test][1], node[1], [P], s[STARTED]                 --------[test][3], node[1], [R], s[STARTED]                 -----node_id[2][V]                 --------[test][1], node[2], [R], s[STARTED]                 --------[test][2], node[2], [R], s[STARTED]                 --------[test][4], node[2], [P], s[STARTED]                 -----node_id[3][V]                 --------[test][2], node[3], [P], s[STARTED]                 --------[test][3], node[3], [P], s[STARTED]                 ---- unassigned              */
annotation|@
name|Override
specifier|public
name|boolean
name|allocateUnassigned
parameter_list|(
name|RoutingAllocation
name|allocation
parameter_list|)
block|{
name|RoutingNodes
operator|.
name|UnassignedShards
name|unassigned
init|=
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|unassigned
argument_list|()
decl_stmt|;
name|boolean
name|changed
init|=
operator|!
name|unassigned
operator|.
name|isEmpty
argument_list|()
decl_stmt|;
for|for
control|(
name|MutableShardRouting
name|sr
range|:
name|unassigned
control|)
block|{
switch|switch
condition|(
name|sr
operator|.
name|id
argument_list|()
condition|)
block|{
case|case
literal|0
case|:
if|if
condition|(
name|sr
operator|.
name|primary
argument_list|()
condition|)
block|{
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|assign
argument_list|(
name|sr
argument_list|,
literal|"node1"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|assign
argument_list|(
name|sr
argument_list|,
literal|"node0"
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
if|if
condition|(
name|sr
operator|.
name|primary
argument_list|()
condition|)
block|{
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|assign
argument_list|(
name|sr
argument_list|,
literal|"node1"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|assign
argument_list|(
name|sr
argument_list|,
literal|"node2"
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
if|if
condition|(
name|sr
operator|.
name|primary
argument_list|()
condition|)
block|{
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|assign
argument_list|(
name|sr
argument_list|,
literal|"node3"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|assign
argument_list|(
name|sr
argument_list|,
literal|"node2"
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
if|if
condition|(
name|sr
operator|.
name|primary
argument_list|()
condition|)
block|{
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|assign
argument_list|(
name|sr
argument_list|,
literal|"node3"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|assign
argument_list|(
name|sr
argument_list|,
literal|"node1"
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|4
case|:
if|if
condition|(
name|sr
operator|.
name|primary
argument_list|()
condition|)
block|{
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|assign
argument_list|(
name|sr
argument_list|,
literal|"node2"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|allocation
operator|.
name|routingNodes
argument_list|()
operator|.
name|assign
argument_list|(
name|sr
argument_list|,
literal|"node0"
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
name|unassigned
operator|.
name|clear
argument_list|()
expr_stmt|;
return|return
name|changed
return|;
block|}
block|}
argument_list|)
argument_list|,
name|ClusterInfoService
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
name|MetaData
operator|.
name|Builder
name|metaDataBuilder
init|=
name|MetaData
operator|.
name|builder
argument_list|()
decl_stmt|;
name|RoutingTable
operator|.
name|Builder
name|routingTableBuilder
init|=
name|RoutingTable
operator|.
name|builder
argument_list|()
decl_stmt|;
name|IndexMetaData
operator|.
name|Builder
name|indexMeta
init|=
name|IndexMetaData
operator|.
name|builder
argument_list|(
literal|"test"
argument_list|)
operator|.
name|numberOfShards
argument_list|(
literal|5
argument_list|)
operator|.
name|numberOfReplicas
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|metaDataBuilder
operator|=
name|metaDataBuilder
operator|.
name|put
argument_list|(
name|indexMeta
argument_list|)
expr_stmt|;
name|MetaData
name|metaData
init|=
name|metaDataBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
for|for
control|(
name|ObjectCursor
argument_list|<
name|IndexMetaData
argument_list|>
name|cursor
range|:
name|metaData
operator|.
name|indices
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|routingTableBuilder
operator|.
name|addAsNew
argument_list|(
name|cursor
operator|.
name|value
argument_list|)
expr_stmt|;
block|}
name|RoutingTable
name|routingTable
init|=
name|routingTableBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
name|DiscoveryNodes
operator|.
name|Builder
name|nodes
init|=
name|DiscoveryNodes
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|DiscoveryNode
name|node
init|=
name|newNode
argument_list|(
literal|"node"
operator|+
name|i
argument_list|)
decl_stmt|;
name|nodes
operator|.
name|put
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
name|ClusterState
name|clusterState
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterName
operator|.
name|DEFAULT
argument_list|)
operator|.
name|nodes
argument_list|(
name|nodes
argument_list|)
operator|.
name|metaData
argument_list|(
name|metaData
argument_list|)
operator|.
name|routingTable
argument_list|(
name|routingTable
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|routingTable
operator|=
name|strategy
operator|.
name|reroute
argument_list|(
name|clusterState
argument_list|)
operator|.
name|routingTable
argument_list|()
expr_stmt|;
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|routingTable
argument_list|(
name|routingTable
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|RoutingNodes
name|routingNodes
init|=
name|clusterState
operator|.
name|routingNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|RoutingNode
name|routingNode
range|:
name|routingNodes
control|)
block|{
for|for
control|(
name|MutableShardRouting
name|mutableShardRouting
range|:
name|routingNode
control|)
block|{
name|assertThat
argument_list|(
name|mutableShardRouting
operator|.
name|state
argument_list|()
argument_list|,
name|Matchers
operator|.
name|equalTo
argument_list|(
name|ShardRoutingState
operator|.
name|INITIALIZING
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|strategy
operator|=
name|createAllocationService
argument_list|(
name|settings
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"use the new allocator and check if it moves shards"
argument_list|)
expr_stmt|;
name|routingNodes
operator|=
name|clusterState
operator|.
name|routingNodes
argument_list|()
expr_stmt|;
name|routingTable
operator|=
name|strategy
operator|.
name|applyStartedShards
argument_list|(
name|clusterState
argument_list|,
name|routingNodes
operator|.
name|shardsWithState
argument_list|(
name|INITIALIZING
argument_list|)
argument_list|)
operator|.
name|routingTable
argument_list|()
expr_stmt|;
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|routingTable
argument_list|(
name|routingTable
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|routingNodes
operator|=
name|clusterState
operator|.
name|routingNodes
argument_list|()
expr_stmt|;
for|for
control|(
name|RoutingNode
name|routingNode
range|:
name|routingNodes
control|)
block|{
for|for
control|(
name|MutableShardRouting
name|mutableShardRouting
range|:
name|routingNode
control|)
block|{
name|assertThat
argument_list|(
name|mutableShardRouting
operator|.
name|state
argument_list|()
argument_list|,
name|Matchers
operator|.
name|equalTo
argument_list|(
name|ShardRoutingState
operator|.
name|STARTED
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|logger
operator|.
name|info
argument_list|(
literal|"start the replica shards"
argument_list|)
expr_stmt|;
name|routingTable
operator|=
name|strategy
operator|.
name|applyStartedShards
argument_list|(
name|clusterState
argument_list|,
name|routingNodes
operator|.
name|shardsWithState
argument_list|(
name|INITIALIZING
argument_list|)
argument_list|)
operator|.
name|routingTable
argument_list|()
expr_stmt|;
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|routingTable
argument_list|(
name|routingTable
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|routingNodes
operator|=
name|clusterState
operator|.
name|routingNodes
argument_list|()
expr_stmt|;
for|for
control|(
name|RoutingNode
name|routingNode
range|:
name|routingNodes
control|)
block|{
for|for
control|(
name|MutableShardRouting
name|mutableShardRouting
range|:
name|routingNode
control|)
block|{
name|assertThat
argument_list|(
name|mutableShardRouting
operator|.
name|state
argument_list|()
argument_list|,
name|Matchers
operator|.
name|equalTo
argument_list|(
name|ShardRoutingState
operator|.
name|STARTED
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|logger
operator|.
name|info
argument_list|(
literal|"rebalancing"
argument_list|)
expr_stmt|;
name|routingTable
operator|=
name|strategy
operator|.
name|reroute
argument_list|(
name|clusterState
argument_list|)
operator|.
name|routingTable
argument_list|()
expr_stmt|;
name|clusterState
operator|=
name|ClusterState
operator|.
name|builder
argument_list|(
name|clusterState
argument_list|)
operator|.
name|routingTable
argument_list|(
name|routingTable
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|routingNodes
operator|=
name|clusterState
operator|.
name|routingNodes
argument_list|()
expr_stmt|;
for|for
control|(
name|RoutingNode
name|routingNode
range|:
name|routingNodes
control|)
block|{
for|for
control|(
name|MutableShardRouting
name|mutableShardRouting
range|:
name|routingNode
control|)
block|{
name|assertThat
argument_list|(
name|mutableShardRouting
operator|.
name|state
argument_list|()
argument_list|,
name|Matchers
operator|.
name|equalTo
argument_list|(
name|ShardRoutingState
operator|.
name|STARTED
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

