begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cluster.node
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|ThrowableObjectInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|ThrowableObjectOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|BytesStreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|BytesStreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|transport
operator|.
name|LocalTransportAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|transport
operator|.
name|TransportAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
DECL|class|DiscoveryNodeTests
specifier|public
class|class
name|DiscoveryNodeTests
extends|extends
name|ElasticsearchTestCase
block|{
annotation|@
name|Test
DECL|method|testJavaSerializablilty
specifier|public
name|void
name|testJavaSerializablilty
parameter_list|()
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
block|{
specifier|final
name|int
name|iters
init|=
name|scaledRandomIntBetween
argument_list|(
literal|100
argument_list|,
literal|300
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iters
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|String
name|id
init|=
name|randomUnicodeOfLengthBetween
argument_list|(
literal|3
argument_list|,
literal|20
argument_list|)
decl_stmt|;
specifier|final
name|String
name|nodeName
init|=
name|randomUnicodeOfLengthBetween
argument_list|(
literal|3
argument_list|,
literal|20
argument_list|)
decl_stmt|;
specifier|final
name|String
name|hostName
init|=
name|randomUnicodeOfLengthBetween
argument_list|(
literal|3
argument_list|,
literal|20
argument_list|)
decl_stmt|;
specifier|final
name|String
name|hostAddress
init|=
name|randomUnicodeOfLengthBetween
argument_list|(
literal|3
argument_list|,
literal|20
argument_list|)
decl_stmt|;
specifier|final
name|TransportAddress
name|transportAddress
init|=
operator|new
name|LocalTransportAddress
argument_list|(
name|randomUnicodeOfLengthBetween
argument_list|(
literal|3
argument_list|,
literal|20
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|attributes
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|a
init|=
name|randomInt
argument_list|(
literal|10
argument_list|)
init|;
name|a
operator|>
literal|0
condition|;
name|a
operator|--
control|)
block|{
name|attributes
operator|.
name|put
argument_list|(
name|randomUnicodeOfLengthBetween
argument_list|(
literal|3
argument_list|,
literal|20
argument_list|)
argument_list|,
name|randomUnicodeOfLengthBetween
argument_list|(
literal|3
argument_list|,
literal|20
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Version
name|version
init|=
name|randomVersion
argument_list|()
decl_stmt|;
name|DiscoveryNode
name|discoveryNode
init|=
operator|new
name|DiscoveryNode
argument_list|(
name|nodeName
argument_list|,
name|id
argument_list|,
name|hostName
argument_list|,
name|hostAddress
argument_list|,
name|transportAddress
argument_list|,
name|attributes
argument_list|,
name|version
argument_list|)
decl_stmt|;
name|BytesStreamOutput
name|bytesOutput
init|=
operator|new
name|BytesStreamOutput
argument_list|()
decl_stmt|;
name|ThrowableObjectOutputStream
name|too
init|=
operator|new
name|ThrowableObjectOutputStream
argument_list|(
name|bytesOutput
argument_list|)
decl_stmt|;
name|too
operator|.
name|writeObject
argument_list|(
name|discoveryNode
argument_list|)
expr_stmt|;
name|too
operator|.
name|close
argument_list|()
expr_stmt|;
name|ThrowableObjectInputStream
name|from
init|=
operator|new
name|ThrowableObjectInputStream
argument_list|(
operator|new
name|BytesStreamInput
argument_list|(
name|bytesOutput
operator|.
name|bytes
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|DiscoveryNode
name|readDiscoveryNode
init|=
operator|(
name|DiscoveryNode
operator|)
name|from
operator|.
name|readObject
argument_list|()
decl_stmt|;
name|from
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|readDiscoveryNode
argument_list|,
name|Matchers
operator|.
name|equalTo
argument_list|(
name|discoveryNode
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|readDiscoveryNode
operator|.
name|id
argument_list|()
argument_list|,
name|Matchers
operator|.
name|equalTo
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|readDiscoveryNode
operator|.
name|name
argument_list|()
argument_list|,
name|Matchers
operator|.
name|equalTo
argument_list|(
name|nodeName
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|readDiscoveryNode
operator|.
name|getHostName
argument_list|()
argument_list|,
name|Matchers
operator|.
name|equalTo
argument_list|(
name|hostName
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|readDiscoveryNode
operator|.
name|getHostAddress
argument_list|()
argument_list|,
name|Matchers
operator|.
name|equalTo
argument_list|(
name|hostAddress
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|readDiscoveryNode
operator|.
name|address
argument_list|()
argument_list|,
name|Matchers
operator|.
name|equalTo
argument_list|(
name|transportAddress
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|readDiscoveryNode
operator|.
name|attributes
argument_list|()
argument_list|,
name|Matchers
operator|.
name|equalTo
argument_list|(
name|attributes
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|readDiscoveryNode
operator|.
name|version
argument_list|()
argument_list|,
name|Matchers
operator|.
name|equalTo
argument_list|(
name|version
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

