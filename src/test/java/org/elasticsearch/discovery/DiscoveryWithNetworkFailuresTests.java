begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.discovery
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|health
operator|.
name|ClusterHealthResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|health
operator|.
name|ClusterHealthStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|get
operator|.
name|GetResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|index
operator|.
name|IndexRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|index
operator|.
name|IndexResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|update
operator|.
name|UpdateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|block
operator|.
name|ClusterBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|block
operator|.
name|ClusterBlockException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|decider
operator|.
name|ShardsLimitAllocationDecider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchHit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|sort
operator|.
name|SortOrder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchIntegrationTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|junit
operator|.
name|annotations
operator|.
name|TestLogging
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|transport
operator|.
name|MockTransportService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchIntegrationTest
operator|.
name|ClusterScope
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchIntegrationTest
operator|.
name|Scope
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertAcked
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertHitCount
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
annotation|@
name|ClusterScope
argument_list|(
name|scope
operator|=
name|Scope
operator|.
name|TEST
argument_list|,
name|numDataNodes
operator|=
literal|0
argument_list|)
DECL|class|DiscoveryWithNetworkFailuresTests
specifier|public
class|class
name|DiscoveryWithNetworkFailuresTests
extends|extends
name|ElasticsearchIntegrationTest
block|{
DECL|field|nodeSettings
specifier|private
specifier|static
specifier|final
name|Settings
name|nodeSettings
init|=
name|ImmutableSettings
operator|.
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"discovery.type"
argument_list|,
literal|"zen"
argument_list|)
comment|//<-- To override the local setting if set externally
operator|.
name|put
argument_list|(
literal|"discovery.zen.fd.ping_timeout"
argument_list|,
literal|"1s"
argument_list|)
comment|//<-- for hitting simulated network failures quickly
operator|.
name|put
argument_list|(
literal|"discovery.zen.fd.ping_retries"
argument_list|,
literal|"1"
argument_list|)
comment|//<-- for hitting simulated network failures quickly
operator|.
name|put
argument_list|(
literal|"discovery.zen.minimum_master_nodes"
argument_list|,
literal|2
argument_list|)
operator|.
name|put
argument_list|(
name|TransportModule
operator|.
name|TRANSPORT_SERVICE_TYPE_KEY
argument_list|,
name|MockTransportService
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|numberOfShards
specifier|protected
name|int
name|numberOfShards
parameter_list|()
block|{
return|return
literal|3
return|;
block|}
annotation|@
name|Override
DECL|method|numberOfReplicas
specifier|protected
name|int
name|numberOfReplicas
parameter_list|()
block|{
return|return
literal|1
return|;
block|}
annotation|@
name|Override
DECL|method|indexSettings
specifier|public
name|Settings
name|indexSettings
parameter_list|()
block|{
name|Settings
name|settings
init|=
name|super
operator|.
name|indexSettings
argument_list|()
decl_stmt|;
return|return
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|settings
argument_list|)
operator|.
name|put
argument_list|(
name|ShardsLimitAllocationDecider
operator|.
name|INDEX_TOTAL_SHARDS_PER_NODE
argument_list|,
literal|2
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Test
annotation|@
name|TestLogging
argument_list|(
literal|"discovery.zen:TRACE"
argument_list|)
DECL|method|failWithMinimumMasterNodesConfigured
specifier|public
name|void
name|failWithMinimumMasterNodesConfigured
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|nodes
init|=
name|internalCluster
argument_list|()
operator|.
name|startNodesAsync
argument_list|(
literal|3
argument_list|,
name|nodeSettings
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
comment|// Wait until a green status has been reaches and 3 nodes are part of the cluster
name|ClusterHealthResponse
name|clusterHealthResponse
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareHealth
argument_list|()
operator|.
name|setWaitForEvents
argument_list|(
name|Priority
operator|.
name|LANGUID
argument_list|)
operator|.
name|setWaitForNodes
argument_list|(
literal|"3"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|clusterHealthResponse
operator|.
name|isTimedOut
argument_list|()
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// Figure out what is the elected master node
name|DiscoveryNode
name|masterDiscoNode
init|=
name|findMasterNode
argument_list|(
name|nodes
argument_list|)
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"---> legit elected master node="
operator|+
name|masterDiscoNode
argument_list|)
expr_stmt|;
specifier|final
name|Client
name|masterClient
init|=
name|internalCluster
argument_list|()
operator|.
name|masterClient
argument_list|()
decl_stmt|;
comment|// Everything is stable now, it is now time to simulate evil...
comment|// Pick a node that isn't the elected master.
name|String
name|unluckyNode
init|=
literal|null
decl_stmt|;
for|for
control|(
name|String
name|node
range|:
name|nodes
control|)
block|{
if|if
condition|(
operator|!
name|node
operator|.
name|equals
argument_list|(
name|masterDiscoNode
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|unluckyNode
operator|=
name|node
expr_stmt|;
block|}
block|}
assert|assert
name|unluckyNode
operator|!=
literal|null
assert|;
comment|// Simulate a network issue between the unlucky node and elected master node in both directions.
name|addFailToSendNoConnectRule
argument_list|(
name|masterDiscoNode
operator|.
name|getName
argument_list|()
argument_list|,
name|unluckyNode
argument_list|)
expr_stmt|;
name|addFailToSendNoConnectRule
argument_list|(
name|unluckyNode
argument_list|,
name|masterDiscoNode
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Wait until elected master has removed that the unlucky node...
name|boolean
name|applied
init|=
name|awaitBusy
argument_list|(
operator|new
name|Predicate
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|Object
name|input
parameter_list|)
block|{
return|return
name|masterClient
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|setLocal
argument_list|(
literal|true
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|getState
argument_list|()
operator|.
name|nodes
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|2
return|;
block|}
block|}
argument_list|,
literal|1
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|applied
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// The unlucky node must report *no* master node, since it can't connect to master and in fact it should
comment|// continuously ping until network failures have been resolved. However
specifier|final
name|Client
name|isolatedNodeClient
init|=
name|internalCluster
argument_list|()
operator|.
name|client
argument_list|(
name|unluckyNode
argument_list|)
decl_stmt|;
comment|// It may a take a bit before the node detects it has been cut off from the elected master
name|applied
operator|=
name|awaitBusy
argument_list|(
operator|new
name|Predicate
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|Object
name|input
parameter_list|)
block|{
name|ClusterState
name|localClusterState
init|=
name|isolatedNodeClient
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|setLocal
argument_list|(
literal|true
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|getState
argument_list|()
decl_stmt|;
name|DiscoveryNodes
name|localDiscoveryNodes
init|=
name|localClusterState
operator|.
name|nodes
argument_list|()
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"localDiscoveryNodes="
operator|+
name|localDiscoveryNodes
operator|.
name|prettyPrint
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|localDiscoveryNodes
operator|.
name|masterNode
argument_list|()
operator|==
literal|null
return|;
block|}
block|}
argument_list|,
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|applied
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// stop simulating network failures, from this point on the unlucky node is able to rejoin
comment|// We also need to do this even if assertions fail, since otherwise the test framework can't work properly
name|clearNoConnectRule
argument_list|(
name|masterDiscoNode
operator|.
name|getName
argument_list|()
argument_list|,
name|unluckyNode
argument_list|)
expr_stmt|;
name|clearNoConnectRule
argument_list|(
name|unluckyNode
argument_list|,
name|masterDiscoNode
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Wait until the master node sees all 3 nodes again.
name|clusterHealthResponse
operator|=
name|masterClient
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareHealth
argument_list|()
operator|.
name|setWaitForEvents
argument_list|(
name|Priority
operator|.
name|LANGUID
argument_list|)
operator|.
name|setWaitForNodes
argument_list|(
literal|"3"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|clusterHealthResponse
operator|.
name|isTimedOut
argument_list|()
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|node
range|:
name|nodes
control|)
block|{
name|ClusterState
name|state
init|=
name|internalCluster
argument_list|()
operator|.
name|client
argument_list|(
name|node
argument_list|)
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|setLocal
argument_list|(
literal|true
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
operator|.
name|getState
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|state
operator|.
name|nodes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
comment|// The elected master shouldn't have changed, since the unlucky node never could have elected himself as
comment|// master since m_m_n of 2 could never be satisfied.
name|assertThat
argument_list|(
name|state
operator|.
name|nodes
argument_list|()
operator|.
name|masterNode
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|masterDiscoNode
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
annotation|@
name|Ignore
annotation|@
name|TestLogging
argument_list|(
literal|"discovery.zen:TRACE,action:TRACE,cluster.service:TRACE,indices.recovery:TRACE,indices.cluster:TRACE"
argument_list|)
DECL|method|testDataConsistency
specifier|public
name|void
name|testDataConsistency
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|nodes
init|=
name|internalCluster
argument_list|()
operator|.
name|startNodesAsync
argument_list|(
literal|3
argument_list|,
name|nodeSettings
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
comment|// Wait until a green status has been reaches and 3 nodes are part of the cluster
name|ClusterHealthResponse
name|clusterHealthResponse
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareHealth
argument_list|()
operator|.
name|setWaitForEvents
argument_list|(
name|Priority
operator|.
name|LANGUID
argument_list|)
operator|.
name|setWaitForNodes
argument_list|(
literal|"3"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|clusterHealthResponse
operator|.
name|isTimedOut
argument_list|()
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type"
argument_list|,
literal|"field"
argument_list|,
literal|"type=long"
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|IndexRequestBuilder
index|[]
name|indexRequests
init|=
operator|new
name|IndexRequestBuilder
index|[
name|scaledRandomIntBetween
argument_list|(
literal|1
argument_list|,
literal|1000
argument_list|)
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|indexRequests
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|indexRequests
index|[
name|i
index|]
operator|=
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field"
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|indexRequests
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|indexRequests
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|GetResponse
name|getResponse
init|=
name|client
argument_list|()
operator|.
name|prepareGet
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|getResponse
operator|.
name|isExists
argument_list|()
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getResponse
operator|.
name|getVersion
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getResponse
operator|.
name|getId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"type"
argument_list|)
operator|.
name|addSort
argument_list|(
literal|"field"
argument_list|,
name|SortOrder
operator|.
name|ASC
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
name|indexRequests
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getHits
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|SearchHit
name|searchHit
init|=
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|searchHit
operator|.
name|id
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|long
operator|)
name|searchHit
operator|.
name|sortValues
argument_list|()
index|[
literal|0
index|]
argument_list|,
name|equalTo
argument_list|(
operator|(
name|long
operator|)
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Everything is stable now, it is now time to simulate evil...
comment|// but first make sure we have no initializing shards and all is green
comment|// (waiting for green here, because indexing / search in a yellow index is fine as long as no other nodes go down)
name|ensureGreen
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
comment|// Pick a node that isn't the elected master.
name|String
name|isolatedNode
init|=
name|nodes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|nonIsolatedNode
init|=
name|nodes
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|Client
name|nonIsolatedNodeClient
init|=
name|internalCluster
argument_list|()
operator|.
name|client
argument_list|(
name|nonIsolatedNode
argument_list|)
decl_stmt|;
comment|// Simulate a network issue between the unlucky node and the rest of the cluster.
for|for
control|(
name|String
name|nodeId
range|:
name|nodes
control|)
block|{
if|if
condition|(
operator|!
name|nodeId
operator|.
name|equals
argument_list|(
name|isolatedNode
argument_list|)
condition|)
block|{
name|addFailToSendNoConnectRule
argument_list|(
name|nodeId
argument_list|,
name|isolatedNode
argument_list|)
expr_stmt|;
name|addFailToSendNoConnectRule
argument_list|(
name|isolatedNode
argument_list|,
name|nodeId
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
comment|// Wait until elected master has removed that the unlucky node...
name|boolean
name|applied
init|=
name|awaitBusy
argument_list|(
operator|new
name|Predicate
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|Object
name|input
parameter_list|)
block|{
return|return
name|nonIsolatedNodeClient
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|setLocal
argument_list|(
literal|true
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|getState
argument_list|()
operator|.
name|nodes
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|2
return|;
block|}
block|}
argument_list|,
literal|1
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|applied
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// The unlucky node must report *no* master node, since it can't connect to master and in fact it should
comment|// continuously ping until network failures have been resolved. However
specifier|final
name|Client
name|isolatedNodeClient
init|=
name|internalCluster
argument_list|()
operator|.
name|client
argument_list|(
name|isolatedNode
argument_list|)
decl_stmt|;
comment|// It may a take a bit before the node detects it has been cut off from the elected master
name|applied
operator|=
name|awaitBusy
argument_list|(
operator|new
name|Predicate
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|Object
name|input
parameter_list|)
block|{
name|ClusterState
name|localClusterState
init|=
name|isolatedNodeClient
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|setLocal
argument_list|(
literal|true
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|getState
argument_list|()
decl_stmt|;
name|DiscoveryNodes
name|localDiscoveryNodes
init|=
name|localClusterState
operator|.
name|nodes
argument_list|()
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"localDiscoveryNodes="
operator|+
name|localDiscoveryNodes
operator|.
name|prettyPrint
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|localDiscoveryNodes
operator|.
name|masterNode
argument_list|()
operator|==
literal|null
return|;
block|}
block|}
argument_list|,
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|applied
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|ClusterHealthResponse
name|healthResponse
init|=
name|nonIsolatedNodeClient
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareHealth
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setWaitForYellowStatus
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|healthResponse
operator|.
name|isTimedOut
argument_list|()
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|healthResponse
operator|.
name|getStatus
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|ClusterHealthStatus
operator|.
name|YELLOW
argument_list|)
argument_list|)
expr_stmt|;
comment|// Reads on the right side of the split must work
name|searchResponse
operator|=
name|nonIsolatedNodeClient
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"type"
argument_list|)
operator|.
name|addSort
argument_list|(
literal|"field"
argument_list|,
name|SortOrder
operator|.
name|ASC
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|searchResponse
argument_list|,
name|indexRequests
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getHits
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|SearchHit
name|searchHit
init|=
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|searchHit
operator|.
name|id
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|long
operator|)
name|searchHit
operator|.
name|sortValues
argument_list|()
index|[
literal|0
index|]
argument_list|,
name|equalTo
argument_list|(
operator|(
name|long
operator|)
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Reads on the wrong side of the split are partial
name|searchResponse
operator|=
name|isolatedNodeClient
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"type"
argument_list|)
operator|.
name|addSort
argument_list|(
literal|"field"
argument_list|,
name|SortOrder
operator|.
name|ASC
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getSuccessfulShards
argument_list|()
argument_list|,
name|lessThan
argument_list|(
name|searchResponse
operator|.
name|getTotalShards
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|totalHits
argument_list|()
argument_list|,
name|lessThan
argument_list|(
operator|(
name|long
operator|)
name|indexRequests
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
comment|// Writes on the right side of the split must work
name|UpdateResponse
name|updateResponse
init|=
name|nonIsolatedNodeClient
operator|.
name|prepareUpdate
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"0"
argument_list|)
operator|.
name|setDoc
argument_list|(
literal|"field2"
argument_list|,
literal|2
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|updateResponse
operator|.
name|getVersion
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2l
argument_list|)
argument_list|)
expr_stmt|;
comment|// Writes on the wrong side of the split fail
try|try
block|{
name|isolatedNodeClient
operator|.
name|prepareUpdate
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"0"
argument_list|)
operator|.
name|setDoc
argument_list|(
literal|"field2"
argument_list|,
literal|2
argument_list|)
operator|.
name|setTimeout
argument_list|(
name|TimeValue
operator|.
name|timeValueSeconds
argument_list|(
literal|5
argument_list|)
argument_list|)
comment|// Fail quick, otherwise we wait 60 seconds.
operator|.
name|get
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClusterBlockException
name|exception
parameter_list|)
block|{
name|assertThat
argument_list|(
name|exception
operator|.
name|status
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|RestStatus
operator|.
name|SERVICE_UNAVAILABLE
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|exception
operator|.
name|blocks
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|ClusterBlock
name|clusterBlock
init|=
name|exception
operator|.
name|blocks
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|clusterBlock
operator|.
name|id
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|DiscoverySettings
operator|.
name|NO_MASTER_BLOCK_ID
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
comment|// stop simulating network failures, from this point on the unlucky node is able to rejoin
comment|// We also need to do this even if assertions fail, since otherwise the test framework can't work properly
for|for
control|(
name|String
name|nodeId
range|:
name|nodes
control|)
block|{
if|if
condition|(
operator|!
name|nodeId
operator|.
name|equals
argument_list|(
name|isolatedNode
argument_list|)
condition|)
block|{
name|clearNoConnectRule
argument_list|(
name|nodeId
argument_list|,
name|isolatedNode
argument_list|)
expr_stmt|;
name|clearNoConnectRule
argument_list|(
name|isolatedNode
argument_list|,
name|nodeId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Wait until the master node sees all 3 nodes again.
name|clusterHealthResponse
operator|=
name|nonIsolatedNodeClient
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareHealth
argument_list|()
operator|.
name|setWaitForGreenStatus
argument_list|()
operator|.
name|setWaitForEvents
argument_list|(
name|Priority
operator|.
name|LANGUID
argument_list|)
operator|.
name|setWaitForNodes
argument_list|(
literal|"3"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|clusterHealthResponse
operator|.
name|getStatus
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|ClusterHealthStatus
operator|.
name|GREEN
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|clusterHealthResponse
operator|.
name|isTimedOut
argument_list|()
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Client
name|client
range|:
name|clients
argument_list|()
control|)
block|{
name|searchResponse
operator|=
name|client
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"type"
argument_list|)
operator|.
name|addSort
argument_list|(
literal|"field"
argument_list|,
name|SortOrder
operator|.
name|ASC
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getHits
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|SearchHit
name|searchHit
init|=
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|searchHit
operator|.
name|id
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|long
operator|)
name|searchHit
operator|.
name|sortValues
argument_list|()
index|[
literal|0
index|]
argument_list|,
name|equalTo
argument_list|(
operator|(
name|long
operator|)
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|GetResponse
name|getResponse
init|=
name|client
operator|.
name|prepareGet
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"0"
argument_list|)
operator|.
name|setPreference
argument_list|(
literal|"_local"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|getResponse
operator|.
name|isExists
argument_list|()
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getResponse
operator|.
name|getId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getResponse
operator|.
name|getVersion
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2l
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|indexRequests
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|getResponse
operator|=
name|client
operator|.
name|prepareGet
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|setPreference
argument_list|(
literal|"_local"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|getResponse
operator|.
name|isExists
argument_list|()
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getResponse
operator|.
name|getVersion
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getResponse
operator|.
name|getId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
annotation|@
name|Ignore
annotation|@
name|TestLogging
argument_list|(
literal|"discovery.zen:TRACE,action:TRACE,cluster.service:TRACE,indices.recovery:TRACE,indices.cluster:TRACE"
argument_list|)
DECL|method|testRejoinDocumentExistsInAllShardCopies
specifier|public
name|void
name|testRejoinDocumentExistsInAllShardCopies
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|nodes
init|=
name|internalCluster
argument_list|()
operator|.
name|startNodesAsync
argument_list|(
literal|3
argument_list|,
name|nodeSettings
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|ClusterHealthResponse
name|clusterHealthResponse
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareHealth
argument_list|()
operator|.
name|setWaitForEvents
argument_list|(
name|Priority
operator|.
name|LANGUID
argument_list|)
operator|.
name|setWaitForNodes
argument_list|(
literal|"3"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|clusterHealthResponse
operator|.
name|isTimedOut
argument_list|()
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
literal|2
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|String
name|isolatedNode
init|=
name|findMasterNode
argument_list|(
name|nodes
argument_list|)
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|notIsolatedNode
init|=
literal|null
decl_stmt|;
for|for
control|(
name|String
name|node
range|:
name|nodes
control|)
block|{
if|if
condition|(
operator|!
name|node
operator|.
name|equals
argument_list|(
name|isolatedNode
argument_list|)
condition|)
block|{
name|notIsolatedNode
operator|=
name|node
expr_stmt|;
break|break;
block|}
block|}
name|logger
operator|.
name|info
argument_list|(
literal|"Isolating node["
operator|+
name|isolatedNode
operator|+
literal|"]"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|nodeId
range|:
name|nodes
control|)
block|{
if|if
condition|(
operator|!
name|nodeId
operator|.
name|equals
argument_list|(
name|isolatedNode
argument_list|)
condition|)
block|{
name|addFailToSendNoConnectRule
argument_list|(
name|nodeId
argument_list|,
name|isolatedNode
argument_list|)
expr_stmt|;
name|addFailToSendNoConnectRule
argument_list|(
name|isolatedNode
argument_list|,
name|nodeId
argument_list|)
expr_stmt|;
block|}
block|}
name|ensureYellow
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|IndexResponse
name|indexResponse
init|=
name|internalCluster
argument_list|()
operator|.
name|client
argument_list|(
name|notIsolatedNode
argument_list|)
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field"
argument_list|,
literal|"value"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|indexResponse
operator|.
name|getVersion
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Verifying if document exists via node["
operator|+
name|notIsolatedNode
operator|+
literal|"]"
argument_list|)
expr_stmt|;
name|GetResponse
name|getResponse
init|=
name|internalCluster
argument_list|()
operator|.
name|client
argument_list|(
name|notIsolatedNode
argument_list|)
operator|.
name|prepareGet
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
name|indexResponse
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|setPreference
argument_list|(
literal|"_local"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|getResponse
operator|.
name|isExists
argument_list|()
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getResponse
operator|.
name|getVersion
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getResponse
operator|.
name|getId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|indexResponse
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|nodeId
range|:
name|nodes
control|)
block|{
if|if
condition|(
operator|!
name|nodeId
operator|.
name|equals
argument_list|(
name|isolatedNode
argument_list|)
condition|)
block|{
name|clearNoConnectRule
argument_list|(
name|nodeId
argument_list|,
name|isolatedNode
argument_list|)
expr_stmt|;
name|clearNoConnectRule
argument_list|(
name|isolatedNode
argument_list|,
name|nodeId
argument_list|)
expr_stmt|;
block|}
block|}
name|ensureGreen
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|node
range|:
name|nodes
control|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Verifying if document exists after isolating node["
operator|+
name|isolatedNode
operator|+
literal|"] via node["
operator|+
name|node
operator|+
literal|"]"
argument_list|)
expr_stmt|;
name|getResponse
operator|=
name|internalCluster
argument_list|()
operator|.
name|client
argument_list|(
name|node
argument_list|)
operator|.
name|prepareGet
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
name|indexResponse
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|setPreference
argument_list|(
literal|"_local"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|getResponse
operator|.
name|isExists
argument_list|()
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getResponse
operator|.
name|getVersion
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getResponse
operator|.
name|getId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|indexResponse
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|findMasterNode
specifier|private
name|DiscoveryNode
name|findMasterNode
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|nodes
parameter_list|)
block|{
name|DiscoveryNode
name|masterDiscoNode
init|=
literal|null
decl_stmt|;
for|for
control|(
name|String
name|node
range|:
name|nodes
control|)
block|{
name|ClusterState
name|state
init|=
name|internalCluster
argument_list|()
operator|.
name|client
argument_list|(
name|node
argument_list|)
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|setLocal
argument_list|(
literal|true
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
operator|.
name|getState
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|state
operator|.
name|nodes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|masterDiscoNode
operator|==
literal|null
condition|)
block|{
name|masterDiscoNode
operator|=
name|state
operator|.
name|nodes
argument_list|()
operator|.
name|masterNode
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|state
operator|.
name|nodes
argument_list|()
operator|.
name|masterNode
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|masterDiscoNode
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
assert|assert
name|masterDiscoNode
operator|!=
literal|null
assert|;
return|return
name|masterDiscoNode
return|;
block|}
DECL|method|addFailToSendNoConnectRule
specifier|private
name|void
name|addFailToSendNoConnectRule
parameter_list|(
name|String
name|fromNode
parameter_list|,
name|String
name|toNode
parameter_list|)
block|{
name|TransportService
name|mockTransportService
init|=
name|internalCluster
argument_list|()
operator|.
name|getInstance
argument_list|(
name|TransportService
operator|.
name|class
argument_list|,
name|fromNode
argument_list|)
decl_stmt|;
operator|(
operator|(
name|MockTransportService
operator|)
name|mockTransportService
operator|)
operator|.
name|addFailToSendNoConnectRule
argument_list|(
name|internalCluster
argument_list|()
operator|.
name|getInstance
argument_list|(
name|Discovery
operator|.
name|class
argument_list|,
name|toNode
argument_list|)
operator|.
name|localNode
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|clearNoConnectRule
specifier|private
name|void
name|clearNoConnectRule
parameter_list|(
name|String
name|fromNode
parameter_list|,
name|String
name|toNode
parameter_list|)
block|{
name|TransportService
name|mockTransportService
init|=
name|internalCluster
argument_list|()
operator|.
name|getInstance
argument_list|(
name|TransportService
operator|.
name|class
argument_list|,
name|fromNode
argument_list|)
decl_stmt|;
operator|(
operator|(
name|MockTransportService
operator|)
name|mockTransportService
operator|)
operator|.
name|clearRule
argument_list|(
name|internalCluster
argument_list|()
operator|.
name|getInstance
argument_list|(
name|Discovery
operator|.
name|class
argument_list|,
name|toNode
argument_list|)
operator|.
name|localNode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

