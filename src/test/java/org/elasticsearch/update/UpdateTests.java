begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.update
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|update
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|MergePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|NoMergePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
operator|.
name|Slow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchTimeoutException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionRequestValidationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|alias
operator|.
name|Alias
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|delete
operator|.
name|DeleteRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|delete
operator|.
name|DeleteResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|get
operator|.
name|GetResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|update
operator|.
name|UpdateRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|update
operator|.
name|UpdateRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|update
operator|.
name|UpdateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|transport
operator|.
name|NoNodeAvailableException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|VersionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|DocumentMissingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|VersionConflictEngineException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|merge
operator|.
name|policy
operator|.
name|AbstractMergePolicyProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|merge
operator|.
name|policy
operator|.
name|MergePolicyModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|store
operator|.
name|Store
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|ScriptService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchIntegrationTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Semaphore
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
operator|.
name|jsonBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertAcked
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertThrows
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|*
import|;
end_import

begin_class
DECL|class|UpdateTests
specifier|public
class|class
name|UpdateTests
extends|extends
name|ElasticsearchIntegrationTest
block|{
DECL|method|createTestIndex
specifier|private
name|void
name|createTestIndex
parameter_list|()
throws|throws
name|Exception
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"--> creating index test"
argument_list|)
expr_stmt|;
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addAlias
argument_list|(
operator|new
name|Alias
argument_list|(
literal|"alias"
argument_list|)
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"_timestamp"
argument_list|)
operator|.
name|field
argument_list|(
literal|"enabled"
argument_list|,
literal|true
argument_list|)
operator|.
name|field
argument_list|(
literal|"store"
argument_list|,
literal|"yes"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"_ttl"
argument_list|)
operator|.
name|field
argument_list|(
literal|"enabled"
argument_list|,
literal|true
argument_list|)
operator|.
name|field
argument_list|(
literal|"store"
argument_list|,
literal|"yes"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUpsert
specifier|public
name|void
name|testUpsert
parameter_list|()
throws|throws
name|Exception
block|{
name|createTestIndex
argument_list|()
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|UpdateResponse
name|updateResponse
init|=
name|client
argument_list|()
operator|.
name|prepareUpdate
argument_list|(
name|indexOrAlias
argument_list|()
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setUpsert
argument_list|(
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"field"
argument_list|,
literal|1
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|setScript
argument_list|(
literal|"ctx._source.field += 1"
argument_list|,
name|ScriptService
operator|.
name|ScriptType
operator|.
name|INLINE
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|updateResponse
operator|.
name|isCreated
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|updateResponse
operator|.
name|getIndex
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|GetResponse
name|getResponse
init|=
name|client
argument_list|()
operator|.
name|prepareGet
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|getResponse
operator|.
name|getSourceAsMap
argument_list|()
operator|.
name|get
argument_list|(
literal|"field"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|updateResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareUpdate
argument_list|(
name|indexOrAlias
argument_list|()
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setUpsert
argument_list|(
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"field"
argument_list|,
literal|1
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|setScript
argument_list|(
literal|"ctx._source.field += 1"
argument_list|,
name|ScriptService
operator|.
name|ScriptType
operator|.
name|INLINE
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|updateResponse
operator|.
name|isCreated
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|updateResponse
operator|.
name|getIndex
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|GetResponse
name|getResponse
init|=
name|client
argument_list|()
operator|.
name|prepareGet
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|getResponse
operator|.
name|getSourceAsMap
argument_list|()
operator|.
name|get
argument_list|(
literal|"field"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testScriptedUpsert
specifier|public
name|void
name|testScriptedUpsert
parameter_list|()
throws|throws
name|Exception
block|{
name|createTestIndex
argument_list|()
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
comment|// Script logic is
comment|// 1) New accounts take balance from "balance" in upsert doc and first payment is charged at 50%
comment|// 2) Existing accounts subtract full payment from balance stored in elasticsearch
name|String
name|script
init|=
literal|"int oldBalance=ctx._source.balance;"
operator|+
literal|"int deduction=ctx.op == \"create\" ? (payment/2) :  payment;"
operator|+
literal|"ctx._source.balance=oldBalance-deduction;"
decl_stmt|;
name|int
name|openingBalance
init|=
literal|10
decl_stmt|;
comment|// Pay money from what will be a new account and opening balance comes from upsert doc
comment|// provided by client
name|UpdateResponse
name|updateResponse
init|=
name|client
argument_list|()
operator|.
name|prepareUpdate
argument_list|(
name|indexOrAlias
argument_list|()
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setUpsert
argument_list|(
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"balance"
argument_list|,
name|openingBalance
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|setScriptedUpsert
argument_list|(
literal|true
argument_list|)
operator|.
name|addScriptParam
argument_list|(
literal|"payment"
argument_list|,
literal|2
argument_list|)
operator|.
name|setScript
argument_list|(
name|script
argument_list|,
name|ScriptService
operator|.
name|ScriptType
operator|.
name|INLINE
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|updateResponse
operator|.
name|isCreated
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|updateResponse
operator|.
name|getIndex
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|GetResponse
name|getResponse
init|=
name|client
argument_list|()
operator|.
name|prepareGet
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|getResponse
operator|.
name|getSourceAsMap
argument_list|()
operator|.
name|get
argument_list|(
literal|"balance"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"9"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Now pay money for an existing account where balance is stored in es
name|updateResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareUpdate
argument_list|(
name|indexOrAlias
argument_list|()
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setUpsert
argument_list|(
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"balance"
argument_list|,
name|openingBalance
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|setScriptedUpsert
argument_list|(
literal|true
argument_list|)
operator|.
name|addScriptParam
argument_list|(
literal|"payment"
argument_list|,
literal|2
argument_list|)
operator|.
name|setScript
argument_list|(
name|script
argument_list|,
name|ScriptService
operator|.
name|ScriptType
operator|.
name|INLINE
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|updateResponse
operator|.
name|isCreated
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|updateResponse
operator|.
name|getIndex
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|GetResponse
name|getResponse
init|=
name|client
argument_list|()
operator|.
name|prepareGet
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|getResponse
operator|.
name|getSourceAsMap
argument_list|()
operator|.
name|get
argument_list|(
literal|"balance"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"7"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testUpsertDoc
specifier|public
name|void
name|testUpsertDoc
parameter_list|()
throws|throws
name|Exception
block|{
name|createTestIndex
argument_list|()
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|UpdateResponse
name|updateResponse
init|=
name|client
argument_list|()
operator|.
name|prepareUpdate
argument_list|(
name|indexOrAlias
argument_list|()
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setDoc
argument_list|(
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"bar"
argument_list|,
literal|"baz"
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|setDocAsUpsert
argument_list|(
literal|true
argument_list|)
operator|.
name|setFields
argument_list|(
literal|"_source"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|updateResponse
operator|.
name|getIndex
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|updateResponse
operator|.
name|getGetResult
argument_list|()
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|updateResponse
operator|.
name|getGetResult
argument_list|()
operator|.
name|getIndex
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|updateResponse
operator|.
name|getGetResult
argument_list|()
operator|.
name|sourceAsMap
argument_list|()
operator|.
name|get
argument_list|(
literal|"bar"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"baz"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
comment|// See: https://github.com/elasticsearch/elasticsearch/issues/3265
DECL|method|testNotUpsertDoc
specifier|public
name|void
name|testNotUpsertDoc
parameter_list|()
throws|throws
name|Exception
block|{
name|createTestIndex
argument_list|()
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|assertThrows
argument_list|(
name|client
argument_list|()
operator|.
name|prepareUpdate
argument_list|(
name|indexOrAlias
argument_list|()
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setDoc
argument_list|(
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"bar"
argument_list|,
literal|"baz"
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|setDocAsUpsert
argument_list|(
literal|false
argument_list|)
operator|.
name|setFields
argument_list|(
literal|"_source"
argument_list|)
operator|.
name|execute
argument_list|()
argument_list|,
name|DocumentMissingException
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUpsertFields
specifier|public
name|void
name|testUpsertFields
parameter_list|()
throws|throws
name|Exception
block|{
name|createTestIndex
argument_list|()
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|UpdateResponse
name|updateResponse
init|=
name|client
argument_list|()
operator|.
name|prepareUpdate
argument_list|(
name|indexOrAlias
argument_list|()
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setUpsert
argument_list|(
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"bar"
argument_list|,
literal|"baz"
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|setScript
argument_list|(
literal|"ctx._source.extra = \"foo\""
argument_list|,
name|ScriptService
operator|.
name|ScriptType
operator|.
name|INLINE
argument_list|)
operator|.
name|setFields
argument_list|(
literal|"_source"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|updateResponse
operator|.
name|getIndex
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|updateResponse
operator|.
name|getGetResult
argument_list|()
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|updateResponse
operator|.
name|getGetResult
argument_list|()
operator|.
name|getIndex
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|updateResponse
operator|.
name|getGetResult
argument_list|()
operator|.
name|sourceAsMap
argument_list|()
operator|.
name|get
argument_list|(
literal|"bar"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"baz"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|updateResponse
operator|.
name|getGetResult
argument_list|()
operator|.
name|sourceAsMap
argument_list|()
operator|.
name|get
argument_list|(
literal|"extra"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|updateResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareUpdate
argument_list|(
name|indexOrAlias
argument_list|()
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setUpsert
argument_list|(
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"bar"
argument_list|,
literal|"baz"
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|setScript
argument_list|(
literal|"ctx._source.extra = \"foo\""
argument_list|,
name|ScriptService
operator|.
name|ScriptType
operator|.
name|INLINE
argument_list|)
operator|.
name|setFields
argument_list|(
literal|"_source"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|updateResponse
operator|.
name|getIndex
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|updateResponse
operator|.
name|getGetResult
argument_list|()
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|updateResponse
operator|.
name|getGetResult
argument_list|()
operator|.
name|getIndex
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|updateResponse
operator|.
name|getGetResult
argument_list|()
operator|.
name|sourceAsMap
argument_list|()
operator|.
name|get
argument_list|(
literal|"bar"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"baz"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|updateResponse
operator|.
name|getGetResult
argument_list|()
operator|.
name|sourceAsMap
argument_list|()
operator|.
name|get
argument_list|(
literal|"extra"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testVersionedUpdate
specifier|public
name|void
name|testVersionedUpdate
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addAlias
argument_list|(
operator|new
name|Alias
argument_list|(
literal|"alias"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|index
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|,
literal|"text"
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
comment|// version is now 1
name|assertThrows
argument_list|(
name|client
argument_list|()
operator|.
name|prepareUpdate
argument_list|(
name|indexOrAlias
argument_list|()
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setScript
argument_list|(
literal|"ctx._source.text = 'v2'"
argument_list|,
name|ScriptService
operator|.
name|ScriptType
operator|.
name|INLINE
argument_list|)
operator|.
name|setVersion
argument_list|(
literal|2
argument_list|)
operator|.
name|execute
argument_list|()
argument_list|,
name|VersionConflictEngineException
operator|.
name|class
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareUpdate
argument_list|(
name|indexOrAlias
argument_list|()
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setScript
argument_list|(
literal|"ctx._source.text = 'v2'"
argument_list|,
name|ScriptService
operator|.
name|ScriptType
operator|.
name|INLINE
argument_list|)
operator|.
name|setVersion
argument_list|(
literal|1
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|client
argument_list|()
operator|.
name|prepareGet
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|getVersion
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2l
argument_list|)
argument_list|)
expr_stmt|;
comment|// and again with a higher version..
name|client
argument_list|()
operator|.
name|prepareUpdate
argument_list|(
name|indexOrAlias
argument_list|()
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setScript
argument_list|(
literal|"ctx._source.text = 'v3'"
argument_list|,
name|ScriptService
operator|.
name|ScriptType
operator|.
name|INLINE
argument_list|)
operator|.
name|setVersion
argument_list|(
literal|2
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|client
argument_list|()
operator|.
name|prepareGet
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|getVersion
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3l
argument_list|)
argument_list|)
expr_stmt|;
comment|// after delete
name|client
argument_list|()
operator|.
name|prepareDelete
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertThrows
argument_list|(
name|client
argument_list|()
operator|.
name|prepareUpdate
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setScript
argument_list|(
literal|"ctx._source.text = 'v2'"
argument_list|,
name|ScriptService
operator|.
name|ScriptType
operator|.
name|INLINE
argument_list|)
operator|.
name|setVersion
argument_list|(
literal|3
argument_list|)
operator|.
name|execute
argument_list|()
argument_list|,
name|DocumentMissingException
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// external versioning
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"text"
argument_list|,
literal|"value"
argument_list|)
operator|.
name|setVersion
argument_list|(
literal|10
argument_list|)
operator|.
name|setVersionType
argument_list|(
name|VersionType
operator|.
name|EXTERNAL
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertThrows
argument_list|(
name|client
argument_list|()
operator|.
name|prepareUpdate
argument_list|(
name|indexOrAlias
argument_list|()
argument_list|,
literal|"type"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setScript
argument_list|(
literal|"ctx._source.text = 'v2'"
argument_list|,
name|ScriptService
operator|.
name|ScriptType
operator|.
name|INLINE
argument_list|)
operator|.
name|setVersion
argument_list|(
literal|2
argument_list|)
operator|.
name|setVersionType
argument_list|(
name|VersionType
operator|.
name|EXTERNAL
argument_list|)
operator|.
name|execute
argument_list|()
argument_list|,
name|ActionRequestValidationException
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// upserts - the combination with versions is a bit weird. Test are here to ensure we do not change our behavior unintentionally
comment|// With internal versions, tt means "if object is there with version X, update it or explode. If it is not there, index.
name|client
argument_list|()
operator|.
name|prepareUpdate
argument_list|(
name|indexOrAlias
argument_list|()
argument_list|,
literal|"type"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|setScript
argument_list|(
literal|"ctx._source.text = 'v2'"
argument_list|,
name|ScriptService
operator|.
name|ScriptType
operator|.
name|INLINE
argument_list|)
operator|.
name|setVersion
argument_list|(
literal|10
argument_list|)
operator|.
name|setUpsert
argument_list|(
literal|"{ \"text\": \"v0\" }"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|GetResponse
name|get
init|=
name|get
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"3"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|get
operator|.
name|getVersion
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|String
operator|)
name|get
operator|.
name|getSource
argument_list|()
operator|.
name|get
argument_list|(
literal|"text"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"v0"
argument_list|)
argument_list|)
expr_stmt|;
comment|// With force version
name|client
argument_list|()
operator|.
name|prepareUpdate
argument_list|(
name|indexOrAlias
argument_list|()
argument_list|,
literal|"type"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|setScript
argument_list|(
literal|"ctx._source.text = 'v2'"
argument_list|,
name|ScriptService
operator|.
name|ScriptType
operator|.
name|INLINE
argument_list|)
operator|.
name|setVersion
argument_list|(
literal|10
argument_list|)
operator|.
name|setVersionType
argument_list|(
name|VersionType
operator|.
name|FORCE
argument_list|)
operator|.
name|setUpsert
argument_list|(
literal|"{ \"text\": \"v0\" }"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|get
operator|=
name|get
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|get
operator|.
name|getVersion
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|10l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|String
operator|)
name|get
operator|.
name|getSource
argument_list|()
operator|.
name|get
argument_list|(
literal|"text"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"v0"
argument_list|)
argument_list|)
expr_stmt|;
comment|// retry on conflict is rejected:
name|assertThrows
argument_list|(
name|client
argument_list|()
operator|.
name|prepareUpdate
argument_list|(
name|indexOrAlias
argument_list|()
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setVersion
argument_list|(
literal|10
argument_list|)
operator|.
name|setRetryOnConflict
argument_list|(
literal|5
argument_list|)
argument_list|,
name|ActionRequestValidationException
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIndexAutoCreation
specifier|public
name|void
name|testIndexAutoCreation
parameter_list|()
throws|throws
name|Exception
block|{
name|UpdateResponse
name|updateResponse
init|=
name|client
argument_list|()
operator|.
name|prepareUpdate
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setUpsert
argument_list|(
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"bar"
argument_list|,
literal|"baz"
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|setScript
argument_list|(
literal|"ctx._source.extra = \"foo\""
argument_list|,
name|ScriptService
operator|.
name|ScriptType
operator|.
name|INLINE
argument_list|)
operator|.
name|setFields
argument_list|(
literal|"_source"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|updateResponse
operator|.
name|getIndex
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|updateResponse
operator|.
name|getGetResult
argument_list|()
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|updateResponse
operator|.
name|getGetResult
argument_list|()
operator|.
name|getIndex
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|updateResponse
operator|.
name|getGetResult
argument_list|()
operator|.
name|sourceAsMap
argument_list|()
operator|.
name|get
argument_list|(
literal|"bar"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"baz"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|updateResponse
operator|.
name|getGetResult
argument_list|()
operator|.
name|sourceAsMap
argument_list|()
operator|.
name|get
argument_list|(
literal|"extra"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUpdate
specifier|public
name|void
name|testUpdate
parameter_list|()
throws|throws
name|Exception
block|{
name|createTestIndex
argument_list|()
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
try|try
block|{
name|client
argument_list|()
operator|.
name|prepareUpdate
argument_list|(
name|indexOrAlias
argument_list|()
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setScript
argument_list|(
literal|"ctx._source.field++"
argument_list|,
name|ScriptService
operator|.
name|ScriptType
operator|.
name|INLINE
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DocumentMissingException
name|e
parameter_list|)
block|{
comment|// all is well
block|}
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field"
argument_list|,
literal|1
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|UpdateResponse
name|updateResponse
init|=
name|client
argument_list|()
operator|.
name|prepareUpdate
argument_list|(
name|indexOrAlias
argument_list|()
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setScript
argument_list|(
literal|"ctx._source.field += 1"
argument_list|,
name|ScriptService
operator|.
name|ScriptType
operator|.
name|INLINE
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|updateResponse
operator|.
name|getVersion
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2L
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|updateResponse
operator|.
name|isCreated
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|updateResponse
operator|.
name|getIndex
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|GetResponse
name|getResponse
init|=
name|client
argument_list|()
operator|.
name|prepareGet
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|getResponse
operator|.
name|getSourceAsMap
argument_list|()
operator|.
name|get
argument_list|(
literal|"field"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|updateResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareUpdate
argument_list|(
name|indexOrAlias
argument_list|()
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setScript
argument_list|(
literal|"ctx._source.field += count"
argument_list|,
name|ScriptService
operator|.
name|ScriptType
operator|.
name|INLINE
argument_list|)
operator|.
name|addScriptParam
argument_list|(
literal|"count"
argument_list|,
literal|3
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|updateResponse
operator|.
name|getVersion
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3L
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|updateResponse
operator|.
name|isCreated
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|updateResponse
operator|.
name|getIndex
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|GetResponse
name|getResponse
init|=
name|client
argument_list|()
operator|.
name|prepareGet
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|getResponse
operator|.
name|getSourceAsMap
argument_list|()
operator|.
name|get
argument_list|(
literal|"field"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"5"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// check noop
name|updateResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareUpdate
argument_list|(
name|indexOrAlias
argument_list|()
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setScript
argument_list|(
literal|"ctx.op = 'none'"
argument_list|,
name|ScriptService
operator|.
name|ScriptType
operator|.
name|INLINE
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|updateResponse
operator|.
name|getVersion
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3L
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|updateResponse
operator|.
name|isCreated
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|updateResponse
operator|.
name|getIndex
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|GetResponse
name|getResponse
init|=
name|client
argument_list|()
operator|.
name|prepareGet
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|getResponse
operator|.
name|getSourceAsMap
argument_list|()
operator|.
name|get
argument_list|(
literal|"field"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"5"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// check delete
name|updateResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareUpdate
argument_list|(
name|indexOrAlias
argument_list|()
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setScript
argument_list|(
literal|"ctx.op = 'delete'"
argument_list|,
name|ScriptService
operator|.
name|ScriptType
operator|.
name|INLINE
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|updateResponse
operator|.
name|getVersion
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|4L
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|updateResponse
operator|.
name|isCreated
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|updateResponse
operator|.
name|getIndex
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|GetResponse
name|getResponse
init|=
name|client
argument_list|()
operator|.
name|prepareGet
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|getResponse
operator|.
name|isExists
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// check TTL is kept after an update without TTL
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field"
argument_list|,
literal|1
argument_list|)
operator|.
name|setTTL
argument_list|(
literal|86400000L
argument_list|)
operator|.
name|setRefresh
argument_list|(
literal|true
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|GetResponse
name|getResponse
init|=
name|client
argument_list|()
operator|.
name|prepareGet
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setFields
argument_list|(
literal|"_ttl"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|long
name|ttl
init|=
operator|(
operator|(
name|Number
operator|)
name|getResponse
operator|.
name|getField
argument_list|(
literal|"_ttl"
argument_list|)
operator|.
name|getValue
argument_list|()
operator|)
operator|.
name|longValue
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|ttl
argument_list|,
name|greaterThan
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareUpdate
argument_list|(
name|indexOrAlias
argument_list|()
argument_list|,
literal|"type1"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setScript
argument_list|(
literal|"ctx._source.field += 1"
argument_list|,
name|ScriptService
operator|.
name|ScriptType
operator|.
name|INLINE
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|getResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareGet
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setFields
argument_list|(
literal|"_ttl"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|ttl
operator|=
operator|(
operator|(
name|Number
operator|)
name|getResponse
operator|.
name|getField
argument_list|(
literal|"_ttl"
argument_list|)
operator|.
name|getValue
argument_list|()
operator|)
operator|.
name|longValue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|ttl
argument_list|,
name|greaterThan
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
comment|// check TTL update
name|client
argument_list|()
operator|.
name|prepareUpdate
argument_list|(
name|indexOrAlias
argument_list|()
argument_list|,
literal|"type1"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setScript
argument_list|(
literal|"ctx._ttl = 3600000"
argument_list|,
name|ScriptService
operator|.
name|ScriptType
operator|.
name|INLINE
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|getResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareGet
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setFields
argument_list|(
literal|"_ttl"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|ttl
operator|=
operator|(
operator|(
name|Number
operator|)
name|getResponse
operator|.
name|getField
argument_list|(
literal|"_ttl"
argument_list|)
operator|.
name|getValue
argument_list|()
operator|)
operator|.
name|longValue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|ttl
argument_list|,
name|greaterThan
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ttl
argument_list|,
name|lessThanOrEqualTo
argument_list|(
literal|3600000L
argument_list|)
argument_list|)
expr_stmt|;
comment|// check timestamp update
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field"
argument_list|,
literal|1
argument_list|)
operator|.
name|setRefresh
argument_list|(
literal|true
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareUpdate
argument_list|(
name|indexOrAlias
argument_list|()
argument_list|,
literal|"type1"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|setScript
argument_list|(
literal|"ctx._timestamp = \"2009-11-15T14:12:12\""
argument_list|,
name|ScriptService
operator|.
name|ScriptType
operator|.
name|INLINE
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|getResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareGet
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|setFields
argument_list|(
literal|"_timestamp"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|long
name|timestamp
init|=
operator|(
operator|(
name|Number
operator|)
name|getResponse
operator|.
name|getField
argument_list|(
literal|"_timestamp"
argument_list|)
operator|.
name|getValue
argument_list|()
operator|)
operator|.
name|longValue
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|timestamp
argument_list|,
name|equalTo
argument_list|(
literal|1258294332000L
argument_list|)
argument_list|)
expr_stmt|;
comment|// check fields parameter
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field"
argument_list|,
literal|1
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|updateResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareUpdate
argument_list|(
name|indexOrAlias
argument_list|()
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setScript
argument_list|(
literal|"ctx._source.field += 1"
argument_list|,
name|ScriptService
operator|.
name|ScriptType
operator|.
name|INLINE
argument_list|)
operator|.
name|setFields
argument_list|(
literal|"_source"
argument_list|,
literal|"field"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|updateResponse
operator|.
name|getIndex
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|updateResponse
operator|.
name|getGetResult
argument_list|()
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|updateResponse
operator|.
name|getGetResult
argument_list|()
operator|.
name|getIndex
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|updateResponse
operator|.
name|getGetResult
argument_list|()
operator|.
name|sourceRef
argument_list|()
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|updateResponse
operator|.
name|getGetResult
argument_list|()
operator|.
name|field
argument_list|(
literal|"field"
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// check updates without script
comment|// add new field
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field"
argument_list|,
literal|1
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|updateResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareUpdate
argument_list|(
name|indexOrAlias
argument_list|()
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setDoc
argument_list|(
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"field2"
argument_list|,
literal|2
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|getResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareGet
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|getResponse
operator|.
name|getSourceAsMap
argument_list|()
operator|.
name|get
argument_list|(
literal|"field"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getResponse
operator|.
name|getSourceAsMap
argument_list|()
operator|.
name|get
argument_list|(
literal|"field2"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// change existing field
name|updateResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareUpdate
argument_list|(
name|indexOrAlias
argument_list|()
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setDoc
argument_list|(
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"field"
argument_list|,
literal|3
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|getResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareGet
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|getResponse
operator|.
name|getSourceAsMap
argument_list|()
operator|.
name|get
argument_list|(
literal|"field"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getResponse
operator|.
name|getSourceAsMap
argument_list|()
operator|.
name|get
argument_list|(
literal|"field2"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// recursive map
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|testMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|testMap2
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|testMap3
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|testMap3
operator|.
name|put
argument_list|(
literal|"commonkey"
argument_list|,
name|testMap
argument_list|)
expr_stmt|;
name|testMap3
operator|.
name|put
argument_list|(
literal|"map3"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|testMap2
operator|.
name|put
argument_list|(
literal|"map2"
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|testMap
operator|.
name|put
argument_list|(
literal|"commonkey"
argument_list|,
name|testMap2
argument_list|)
expr_stmt|;
name|testMap
operator|.
name|put
argument_list|(
literal|"map1"
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"map"
argument_list|,
name|testMap
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|updateResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareUpdate
argument_list|(
name|indexOrAlias
argument_list|()
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setDoc
argument_list|(
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"map"
argument_list|,
name|testMap3
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|getResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareGet
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|Map
name|map1
init|=
operator|(
name|Map
operator|)
name|getResponse
operator|.
name|getSourceAsMap
argument_list|()
operator|.
name|get
argument_list|(
literal|"map"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|map1
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|map1
operator|.
name|containsKey
argument_list|(
literal|"map1"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|map1
operator|.
name|containsKey
argument_list|(
literal|"map3"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|map1
operator|.
name|containsKey
argument_list|(
literal|"commonkey"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Map
name|map2
init|=
operator|(
name|Map
operator|)
name|map1
operator|.
name|get
argument_list|(
literal|"commonkey"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|map2
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|map2
operator|.
name|containsKey
argument_list|(
literal|"map1"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|map2
operator|.
name|containsKey
argument_list|(
literal|"map2"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|map2
operator|.
name|containsKey
argument_list|(
literal|"commonkey"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testUpdateRequestWithBothScriptAndDoc
specifier|public
name|void
name|testUpdateRequestWithBothScriptAndDoc
parameter_list|()
throws|throws
name|Exception
block|{
name|createTestIndex
argument_list|()
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
try|try
block|{
name|client
argument_list|()
operator|.
name|prepareUpdate
argument_list|(
name|indexOrAlias
argument_list|()
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setDoc
argument_list|(
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"field"
argument_list|,
literal|1
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|setScript
argument_list|(
literal|"ctx._source.field += 1"
argument_list|,
name|ScriptService
operator|.
name|ScriptType
operator|.
name|INLINE
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown ActionRequestValidationException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ActionRequestValidationException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|validationErrors
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|validationErrors
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|containsString
argument_list|(
literal|"can't provide both script and doc"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"can't provide both script and doc"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testUpdateRequestWithScriptAndShouldUpsertDoc
specifier|public
name|void
name|testUpdateRequestWithScriptAndShouldUpsertDoc
parameter_list|()
throws|throws
name|Exception
block|{
name|createTestIndex
argument_list|()
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
try|try
block|{
name|client
argument_list|()
operator|.
name|prepareUpdate
argument_list|(
name|indexOrAlias
argument_list|()
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setScript
argument_list|(
literal|"ctx._source.field += 1"
argument_list|,
name|ScriptService
operator|.
name|ScriptType
operator|.
name|INLINE
argument_list|)
operator|.
name|setDocAsUpsert
argument_list|(
literal|true
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown ActionRequestValidationException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ActionRequestValidationException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|validationErrors
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|validationErrors
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|containsString
argument_list|(
literal|"doc must be specified if doc_as_upsert is enabled"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"doc must be specified if doc_as_upsert is enabled"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testContextVariables
specifier|public
name|void
name|testContextVariables
parameter_list|()
throws|throws
name|Exception
block|{
name|createTestIndex
argument_list|()
expr_stmt|;
comment|// Add child type for testing the _parent context variable
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|preparePutMapping
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setType
argument_list|(
literal|"subtype1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"subtype1"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"_parent"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"type1"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"_timestamp"
argument_list|)
operator|.
name|field
argument_list|(
literal|"enabled"
argument_list|,
literal|true
argument_list|)
operator|.
name|field
argument_list|(
literal|"store"
argument_list|,
literal|"yes"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"_ttl"
argument_list|)
operator|.
name|field
argument_list|(
literal|"enabled"
argument_list|,
literal|true
argument_list|)
operator|.
name|field
argument_list|(
literal|"store"
argument_list|,
literal|"yes"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
comment|// Index some documents
name|long
name|timestamp
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|()
operator|.
name|setIndex
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setType
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|setId
argument_list|(
literal|"parentId1"
argument_list|)
operator|.
name|setTimestamp
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|timestamp
operator|-
literal|1
argument_list|)
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|0
argument_list|,
literal|"content"
argument_list|,
literal|"bar"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|long
name|ttl
init|=
literal|10000
decl_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|()
operator|.
name|setIndex
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setType
argument_list|(
literal|"subtype1"
argument_list|)
operator|.
name|setId
argument_list|(
literal|"id1"
argument_list|)
operator|.
name|setParent
argument_list|(
literal|"parentId1"
argument_list|)
operator|.
name|setRouting
argument_list|(
literal|"routing1"
argument_list|)
operator|.
name|setTimestamp
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|timestamp
argument_list|)
argument_list|)
operator|.
name|setTTL
argument_list|(
name|ttl
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|1
argument_list|,
literal|"content"
argument_list|,
literal|"foo"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
comment|// Update the first object and note context variables values
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|scriptParams
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|scriptParams
operator|.
name|put
argument_list|(
literal|"delim"
argument_list|,
literal|"_"
argument_list|)
expr_stmt|;
name|UpdateResponse
name|updateResponse
init|=
name|client
argument_list|()
operator|.
name|prepareUpdate
argument_list|(
literal|"test"
argument_list|,
literal|"subtype1"
argument_list|,
literal|"id1"
argument_list|)
operator|.
name|setRouting
argument_list|(
literal|"routing1"
argument_list|)
operator|.
name|setScript
argument_list|(
literal|"assert ctx._index == \"test\" : \"index should be \\\"test\\\"\"\n"
operator|+
literal|"assert ctx._type == \"subtype1\" : \"type should be \\\"subtype1\\\"\"\n"
operator|+
literal|"assert ctx._id == \"id1\" : \"id should be \\\"id1\\\"\"\n"
operator|+
literal|"assert ctx._version == 1 : \"version should be 1\"\n"
operator|+
literal|"assert ctx._parent == \"parentId1\" : \"parent should be \\\"parentId1\\\"\"\n"
operator|+
literal|"assert ctx._routing == \"routing1\" : \"routing should be \\\"routing1\\\"\"\n"
operator|+
literal|"assert ctx._timestamp == "
operator|+
name|timestamp
operator|+
literal|" : \"timestamp should be "
operator|+
name|timestamp
operator|+
literal|"\"\n"
operator|+
comment|// ttl has a 3-second leeway, because it's always counting down
literal|"assert ctx._ttl<= "
operator|+
name|ttl
operator|+
literal|" : \"ttl should be<= "
operator|+
name|ttl
operator|+
literal|" but was \" + ctx._ttl\n"
operator|+
literal|"assert ctx._ttl>= "
operator|+
operator|(
name|ttl
operator|-
literal|3000
operator|)
operator|+
literal|" : \"ttl should be<= "
operator|+
operator|(
name|ttl
operator|-
literal|3000
operator|)
operator|+
literal|" but was \" + ctx._ttl\n"
operator|+
literal|"ctx._source.content = ctx._source.content + delim + ctx._source.content;\n"
operator|+
literal|"ctx._source.field1 += 1;\n"
argument_list|,
name|ScriptService
operator|.
name|ScriptType
operator|.
name|INLINE
argument_list|)
operator|.
name|setScriptParams
argument_list|(
name|scriptParams
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|updateResponse
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|GetResponse
name|getResponse
init|=
name|client
argument_list|()
operator|.
name|prepareGet
argument_list|(
literal|"test"
argument_list|,
literal|"subtype1"
argument_list|,
literal|"id1"
argument_list|)
operator|.
name|setRouting
argument_list|(
literal|"routing1"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|getResponse
operator|.
name|getSourceAsMap
argument_list|()
operator|.
name|get
argument_list|(
literal|"field1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo_foo"
argument_list|,
name|getResponse
operator|.
name|getSourceAsMap
argument_list|()
operator|.
name|get
argument_list|(
literal|"content"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Idem with the second object
name|scriptParams
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|scriptParams
operator|.
name|put
argument_list|(
literal|"delim"
argument_list|,
literal|"_"
argument_list|)
expr_stmt|;
name|updateResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareUpdate
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"parentId1"
argument_list|)
operator|.
name|setScript
argument_list|(
literal|"assert ctx._index == \"test\" : \"index should be \\\"test\\\"\"\n"
operator|+
literal|"assert ctx._type == \"type1\" : \"type should be \\\"type1\\\"\"\n"
operator|+
literal|"assert ctx._id == \"parentId1\" : \"id should be \\\"parentId1\\\"\"\n"
operator|+
literal|"assert ctx._version == 1 : \"version should be 1\"\n"
operator|+
literal|"assert ctx._parent == null : \"parent should be null\"\n"
operator|+
literal|"assert ctx._routing == null : \"routing should be null\"\n"
operator|+
literal|"assert ctx._timestamp == "
operator|+
operator|(
name|timestamp
operator|-
literal|1
operator|)
operator|+
literal|" : \"timestamp should be "
operator|+
operator|(
name|timestamp
operator|-
literal|1
operator|)
operator|+
literal|"\"\n"
operator|+
literal|"assert ctx._ttl == null : \"ttl should be null\"\n"
operator|+
literal|"ctx._source.content = ctx._source.content + delim + ctx._source.content;\n"
operator|+
literal|"ctx._source.field1 += 1;\n"
argument_list|,
name|ScriptService
operator|.
name|ScriptType
operator|.
name|INLINE
argument_list|)
operator|.
name|setScriptParams
argument_list|(
name|scriptParams
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|updateResponse
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|getResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareGet
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"parentId1"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|getResponse
operator|.
name|getSourceAsMap
argument_list|()
operator|.
name|get
argument_list|(
literal|"field1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bar_bar"
argument_list|,
name|getResponse
operator|.
name|getSourceAsMap
argument_list|()
operator|.
name|get
argument_list|(
literal|"content"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Slow
DECL|method|testConcurrentUpdateWithRetryOnConflict
specifier|public
name|void
name|testConcurrentUpdateWithRetryOnConflict
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|boolean
name|useBulkApi
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
name|createTestIndex
argument_list|()
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|int
name|numberOfThreads
init|=
name|scaledRandomIntBetween
argument_list|(
literal|2
argument_list|,
literal|5
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
name|numberOfThreads
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|startLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|int
name|numberOfUpdatesPerThread
init|=
name|scaledRandomIntBetween
argument_list|(
literal|100
argument_list|,
literal|10000
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Throwable
argument_list|>
name|failures
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfThreads
condition|;
name|i
operator|++
control|)
block|{
name|Runnable
name|r
init|=
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|startLatch
operator|.
name|await
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfUpdatesPerThread
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|useBulkApi
condition|)
block|{
name|UpdateRequestBuilder
name|updateRequestBuilder
init|=
name|client
argument_list|()
operator|.
name|prepareUpdate
argument_list|(
name|indexOrAlias
argument_list|()
argument_list|,
literal|"type1"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|setScript
argument_list|(
literal|"ctx._source.field += 1"
argument_list|,
name|ScriptService
operator|.
name|ScriptType
operator|.
name|INLINE
argument_list|)
operator|.
name|setRetryOnConflict
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
operator|.
name|setUpsert
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"field"
argument_list|,
literal|1
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
decl_stmt|;
name|client
argument_list|()
operator|.
name|prepareBulk
argument_list|()
operator|.
name|add
argument_list|(
name|updateRequestBuilder
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|client
argument_list|()
operator|.
name|prepareUpdate
argument_list|(
name|indexOrAlias
argument_list|()
argument_list|,
literal|"type1"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|setScript
argument_list|(
literal|"ctx._source.field += 1"
argument_list|,
name|ScriptService
operator|.
name|ScriptType
operator|.
name|INLINE
argument_list|)
operator|.
name|setRetryOnConflict
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
operator|.
name|setUpsert
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"field"
argument_list|,
literal|1
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|failures
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
operator|new
name|Thread
argument_list|(
name|r
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
name|startLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
for|for
control|(
name|Throwable
name|throwable
range|:
name|failures
control|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Captured failure on concurrent update:"
argument_list|,
name|throwable
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|failures
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfUpdatesPerThread
condition|;
name|i
operator|++
control|)
block|{
name|GetResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareGet
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|isExists
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getVersion
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|(
name|long
operator|)
name|numberOfThreads
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|Integer
operator|)
name|response
operator|.
name|getSource
argument_list|()
operator|.
name|get
argument_list|(
literal|"field"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|numberOfThreads
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|NoMergePolicyProvider
specifier|public
specifier|static
class|class
name|NoMergePolicyProvider
extends|extends
name|AbstractMergePolicyProvider
argument_list|<
name|MergePolicy
argument_list|>
block|{
annotation|@
name|Inject
DECL|method|NoMergePolicyProvider
specifier|public
name|NoMergePolicyProvider
parameter_list|(
name|Store
name|store
parameter_list|)
block|{
name|super
argument_list|(
name|store
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getMergePolicy
specifier|public
name|MergePolicy
name|getMergePolicy
parameter_list|()
block|{
return|return
name|NoMergePolicy
operator|.
name|INSTANCE
return|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|ElasticsearchException
block|{         }
block|}
annotation|@
name|Test
annotation|@
name|Slow
DECL|method|stressUpdateDeleteConcurrency
specifier|public
name|void
name|stressUpdateDeleteConcurrency
parameter_list|()
throws|throws
name|Exception
block|{
comment|//We create an index with merging disabled so that deletes don't get merged away
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"_timestamp"
argument_list|)
operator|.
name|field
argument_list|(
literal|"enabled"
argument_list|,
literal|true
argument_list|)
operator|.
name|field
argument_list|(
literal|"store"
argument_list|,
literal|"yes"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"_ttl"
argument_list|)
operator|.
name|field
argument_list|(
literal|"enabled"
argument_list|,
literal|true
argument_list|)
operator|.
name|field
argument_list|(
literal|"store"
argument_list|,
literal|"yes"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|setSettings
argument_list|(
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|MergePolicyModule
operator|.
name|MERGE_POLICY_TYPE_KEY
argument_list|,
name|NoMergePolicyProvider
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
specifier|final
name|int
name|numberOfThreads
init|=
name|scaledRandomIntBetween
argument_list|(
literal|3
argument_list|,
literal|5
argument_list|)
decl_stmt|;
specifier|final
name|int
name|numberOfIdsPerThread
init|=
name|scaledRandomIntBetween
argument_list|(
literal|3
argument_list|,
literal|10
argument_list|)
decl_stmt|;
specifier|final
name|int
name|numberOfUpdatesPerId
init|=
name|scaledRandomIntBetween
argument_list|(
literal|10
argument_list|,
literal|100
argument_list|)
decl_stmt|;
specifier|final
name|int
name|retryOnConflict
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
name|numberOfThreads
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|startLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Throwable
argument_list|>
name|failures
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
class|class
name|UpdateThread
extends|extends
name|Thread
block|{
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|failedMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|int
name|numberOfIds
decl_stmt|;
specifier|final
name|int
name|updatesPerId
decl_stmt|;
specifier|final
name|int
name|maxUpdateRequests
init|=
name|numberOfIdsPerThread
operator|*
name|numberOfUpdatesPerId
decl_stmt|;
specifier|final
name|int
name|maxDeleteRequests
init|=
name|numberOfIdsPerThread
operator|*
name|numberOfUpdatesPerId
decl_stmt|;
specifier|private
specifier|final
name|Semaphore
name|updateRequestsOutstanding
init|=
operator|new
name|Semaphore
argument_list|(
name|maxUpdateRequests
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Semaphore
name|deleteRequestsOutstanding
init|=
operator|new
name|Semaphore
argument_list|(
name|maxDeleteRequests
argument_list|)
decl_stmt|;
specifier|public
name|UpdateThread
parameter_list|(
name|int
name|numberOfIds
parameter_list|,
name|int
name|updatesPerId
parameter_list|)
block|{
name|this
operator|.
name|numberOfIds
operator|=
name|numberOfIds
expr_stmt|;
name|this
operator|.
name|updatesPerId
operator|=
name|updatesPerId
expr_stmt|;
block|}
specifier|final
class|class
name|UpdateListener
implements|implements
name|ActionListener
argument_list|<
name|UpdateResponse
argument_list|>
block|{
name|int
name|id
decl_stmt|;
specifier|public
name|UpdateListener
parameter_list|(
name|int
name|id
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|UpdateResponse
name|updateResponse
parameter_list|)
block|{
name|updateRequestsOutstanding
operator|.
name|release
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
synchronized|synchronized
init|(
name|failedMap
init|)
block|{
name|incrementMapValue
argument_list|(
name|id
argument_list|,
name|failedMap
argument_list|)
expr_stmt|;
block|}
name|updateRequestsOutstanding
operator|.
name|release
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
class|class
name|DeleteListener
implements|implements
name|ActionListener
argument_list|<
name|DeleteResponse
argument_list|>
block|{
name|int
name|id
decl_stmt|;
specifier|public
name|DeleteListener
parameter_list|(
name|int
name|id
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|DeleteResponse
name|deleteResponse
parameter_list|)
block|{
name|deleteRequestsOutstanding
operator|.
name|release
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
synchronized|synchronized
init|(
name|failedMap
init|)
block|{
name|incrementMapValue
argument_list|(
name|id
argument_list|,
name|failedMap
argument_list|)
expr_stmt|;
block|}
name|deleteRequestsOutstanding
operator|.
name|release
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|startLatch
operator|.
name|await
argument_list|()
expr_stmt|;
name|boolean
name|hasWaitedForNoNode
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numberOfIds
condition|;
name|j
operator|++
control|)
block|{
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|numberOfUpdatesPerId
condition|;
operator|++
name|k
control|)
block|{
name|updateRequestsOutstanding
operator|.
name|acquire
argument_list|()
expr_stmt|;
try|try
block|{
name|UpdateRequest
name|ur
init|=
name|client
argument_list|()
operator|.
name|prepareUpdate
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|j
argument_list|)
argument_list|)
operator|.
name|setScript
argument_list|(
literal|"ctx._source.field += 1"
argument_list|,
name|ScriptService
operator|.
name|ScriptType
operator|.
name|INLINE
argument_list|)
operator|.
name|setRetryOnConflict
argument_list|(
name|retryOnConflict
argument_list|)
operator|.
name|setUpsert
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"field"
argument_list|,
literal|1
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|request
argument_list|()
decl_stmt|;
name|client
argument_list|()
operator|.
name|update
argument_list|(
name|ur
argument_list|,
operator|new
name|UpdateListener
argument_list|(
name|j
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoNodeAvailableException
name|nne
parameter_list|)
block|{
name|updateRequestsOutstanding
operator|.
name|release
argument_list|()
expr_stmt|;
synchronized|synchronized
init|(
name|failedMap
init|)
block|{
name|incrementMapValue
argument_list|(
name|j
argument_list|,
name|failedMap
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hasWaitedForNoNode
condition|)
block|{
throw|throw
name|nne
throw|;
block|}
name|logger
operator|.
name|warn
argument_list|(
literal|"Got NoNodeException waiting for 1 second for things to recover."
argument_list|)
expr_stmt|;
name|hasWaitedForNoNode
operator|=
literal|true
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|deleteRequestsOutstanding
operator|.
name|acquire
argument_list|()
expr_stmt|;
name|DeleteRequest
name|dr
init|=
name|client
argument_list|()
operator|.
name|prepareDelete
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|j
argument_list|)
argument_list|)
operator|.
name|request
argument_list|()
decl_stmt|;
name|client
argument_list|()
operator|.
name|delete
argument_list|(
name|dr
argument_list|,
operator|new
name|DeleteListener
argument_list|(
name|j
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoNodeAvailableException
name|nne
parameter_list|)
block|{
name|deleteRequestsOutstanding
operator|.
name|release
argument_list|()
expr_stmt|;
synchronized|synchronized
init|(
name|failedMap
init|)
block|{
name|incrementMapValue
argument_list|(
name|j
argument_list|,
name|failedMap
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hasWaitedForNoNode
condition|)
block|{
throw|throw
name|nne
throw|;
block|}
name|logger
operator|.
name|warn
argument_list|(
literal|"Got NoNodeException waiting for 1 second for things to recover."
argument_list|)
expr_stmt|;
name|hasWaitedForNoNode
operator|=
literal|true
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
comment|//Wait for no-node to clear
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Something went wrong"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|failures
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
name|waitForOutstandingRequests
argument_list|(
name|TimeValue
operator|.
name|timeValueSeconds
argument_list|(
literal|60
argument_list|)
argument_list|,
name|updateRequestsOutstanding
argument_list|,
name|maxUpdateRequests
argument_list|,
literal|"Update"
argument_list|)
expr_stmt|;
name|waitForOutstandingRequests
argument_list|(
name|TimeValue
operator|.
name|timeValueSeconds
argument_list|(
literal|60
argument_list|)
argument_list|,
name|deleteRequestsOutstanding
argument_list|,
name|maxDeleteRequests
argument_list|,
literal|"Delete"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ElasticsearchTimeoutException
name|ete
parameter_list|)
block|{
name|failures
operator|.
name|add
argument_list|(
name|ete
argument_list|)
expr_stmt|;
block|}
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|incrementMapValue
parameter_list|(
name|int
name|j
parameter_list|,
name|Map
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|map
parameter_list|)
block|{
if|if
condition|(
operator|!
name|map
operator|.
name|containsKey
argument_list|(
name|j
argument_list|)
condition|)
block|{
name|map
operator|.
name|put
argument_list|(
name|j
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|map
operator|.
name|put
argument_list|(
name|j
argument_list|,
name|map
operator|.
name|get
argument_list|(
name|j
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|waitForOutstandingRequests
parameter_list|(
name|TimeValue
name|timeOut
parameter_list|,
name|Semaphore
name|requestsOutstanding
parameter_list|,
name|int
name|maxRequests
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
do|do
block|{
name|long
name|msRemaining
init|=
name|timeOut
operator|.
name|getMillis
argument_list|()
operator|-
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"[{}] going to try and acquire [{}] in [{}]ms [{}] available to acquire right now"
argument_list|,
name|name
argument_list|,
name|maxRequests
argument_list|,
name|msRemaining
argument_list|,
name|requestsOutstanding
operator|.
name|availablePermits
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|requestsOutstanding
operator|.
name|tryAcquire
argument_list|(
name|maxRequests
argument_list|,
name|msRemaining
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
comment|//Just keep swimming
block|}
block|}
do|while
condition|(
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
operator|<
name|timeOut
operator|.
name|getMillis
argument_list|()
condition|)
do|;
throw|throw
operator|new
name|ElasticsearchTimeoutException
argument_list|(
literal|"Requests were still outstanding after the timeout ["
operator|+
name|timeOut
operator|+
literal|"] for type ["
operator|+
name|name
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
specifier|final
name|List
argument_list|<
name|UpdateThread
argument_list|>
name|threads
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfThreads
condition|;
name|i
operator|++
control|)
block|{
name|UpdateThread
name|ut
init|=
operator|new
name|UpdateThread
argument_list|(
name|numberOfIdsPerThread
argument_list|,
name|numberOfUpdatesPerId
argument_list|)
decl_stmt|;
name|ut
operator|.
name|start
argument_list|()
expr_stmt|;
name|threads
operator|.
name|add
argument_list|(
name|ut
argument_list|)
expr_stmt|;
block|}
name|startLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
for|for
control|(
name|UpdateThread
name|ut
range|:
name|threads
control|)
block|{
name|ut
operator|.
name|join
argument_list|()
expr_stmt|;
comment|//Threads should have finished because of the latch.await
block|}
comment|//If are no errors every request received a response otherwise the test would have timedout
comment|//aquiring the request outstanding semaphores.
for|for
control|(
name|Throwable
name|throwable
range|:
name|failures
control|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Captured failure on concurrent update:"
argument_list|,
name|throwable
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|failures
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|//Upsert all the ids one last time to make sure they are available at get time
comment|//This means that we add 1 to the expected versions and attempts
comment|//All the previous operations should be complete or failed at this point
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfIdsPerThread
condition|;
operator|++
name|i
control|)
block|{
name|UpdateResponse
name|ur
init|=
name|client
argument_list|()
operator|.
name|prepareUpdate
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|setScript
argument_list|(
literal|"ctx._source.field += 1"
argument_list|,
name|ScriptService
operator|.
name|ScriptType
operator|.
name|INLINE
argument_list|)
operator|.
name|setRetryOnConflict
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
operator|.
name|setUpsert
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"field"
argument_list|,
literal|1
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
block|}
name|refresh
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfIdsPerThread
condition|;
operator|++
name|i
control|)
block|{
name|int
name|totalFailures
init|=
literal|0
decl_stmt|;
name|GetResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareGet
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
if|if
condition|(
name|response
operator|.
name|isExists
argument_list|()
condition|)
block|{
name|assertThat
argument_list|(
name|response
operator|.
name|getId
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|expectedVersion
init|=
operator|(
name|numberOfThreads
operator|*
name|numberOfUpdatesPerId
operator|*
literal|2
operator|)
operator|+
literal|1
decl_stmt|;
for|for
control|(
name|UpdateThread
name|ut
range|:
name|threads
control|)
block|{
if|if
condition|(
name|ut
operator|.
name|failedMap
operator|.
name|containsKey
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|totalFailures
operator|+=
name|ut
operator|.
name|failedMap
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
name|expectedVersion
operator|-=
name|totalFailures
expr_stmt|;
name|logger
operator|.
name|error
argument_list|(
literal|"Actual version [{}] Expected version [{}] Total failures [{}]"
argument_list|,
name|response
operator|.
name|getVersion
argument_list|()
argument_list|,
name|expectedVersion
argument_list|,
name|totalFailures
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getVersion
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|(
name|long
operator|)
name|expectedVersion
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getVersion
argument_list|()
operator|+
name|totalFailures
argument_list|,
name|equalTo
argument_list|(
call|(
name|long
call|)
argument_list|(
operator|(
name|numberOfUpdatesPerId
operator|*
name|numberOfThreads
operator|*
literal|2
operator|)
operator|+
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|indexOrAlias
specifier|private
specifier|static
name|String
name|indexOrAlias
parameter_list|()
block|{
return|return
name|randomBoolean
argument_list|()
condition|?
literal|"test"
else|:
literal|"alias"
return|;
block|}
block|}
end_class

end_unit

