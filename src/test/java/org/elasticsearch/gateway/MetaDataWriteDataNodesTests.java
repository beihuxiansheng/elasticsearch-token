begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.gateway
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|gateway
package|;
end_package

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|cursors
operator|.
name|ObjectObjectCursor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|state
operator|.
name|ClusterStateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|mapping
operator|.
name|get
operator|.
name|GetMappingsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|MetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|decider
operator|.
name|FilterAllocationDecider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableOpenMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchIntegrationTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchIntegrationTest
operator|.
name|ClusterScope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|InternalTestCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|Requests
operator|.
name|clusterHealthRequest
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
operator|.
name|jsonBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchIntegrationTest
operator|.
name|Scope
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertAcked
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
annotation|@
name|ClusterScope
argument_list|(
name|scope
operator|=
name|Scope
operator|.
name|TEST
argument_list|,
name|numDataNodes
operator|=
literal|0
argument_list|)
DECL|class|MetaDataWriteDataNodesTests
specifier|public
class|class
name|MetaDataWriteDataNodesTests
extends|extends
name|ElasticsearchIntegrationTest
block|{
annotation|@
name|Test
DECL|method|testMetaWrittenAlsoOnDataNode
specifier|public
name|void
name|testMetaWrittenAlsoOnDataNode
parameter_list|()
throws|throws
name|Exception
block|{
comment|// this test checks that index state is written on data only nodes
name|String
name|masterNodeName
init|=
name|startMasterNode
argument_list|()
decl_stmt|;
name|String
name|redNode
init|=
name|startDataNode
argument_list|(
literal|"red"
argument_list|)
decl_stmt|;
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.number_of_replicas"
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|index
argument_list|(
literal|"test"
argument_list|,
literal|"doc"
argument_list|,
literal|"1"
argument_list|,
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"text"
argument_list|,
literal|"some text"
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|waitForConcreteMappingsOnAll
argument_list|(
literal|"test"
argument_list|,
literal|"doc"
argument_list|,
literal|"text"
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|assertIndexInMetaState
argument_list|(
name|redNode
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|assertIndexInMetaState
argument_list|(
name|masterNodeName
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
comment|//stop master node and start again with an empty data folder
operator|(
operator|(
name|InternalTestCluster
operator|)
name|cluster
argument_list|()
operator|)
operator|.
name|stopCurrentMasterNode
argument_list|()
expr_stmt|;
name|String
name|newMasterNode
init|=
name|startMasterNode
argument_list|()
decl_stmt|;
name|ensureGreen
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
comment|// wait for mapping also on master becasue then we can be sure the state was written
name|waitForConcreteMappingsOnAll
argument_list|(
literal|"test"
argument_list|,
literal|"doc"
argument_list|,
literal|"text"
argument_list|)
expr_stmt|;
comment|// check for meta data
name|assertIndexInMetaState
argument_list|(
name|redNode
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|assertIndexInMetaState
argument_list|(
name|newMasterNode
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
comment|// check if index and doc is still there
name|ensureGreen
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|client
argument_list|()
operator|.
name|prepareGet
argument_list|(
literal|"test"
argument_list|,
literal|"doc"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|isExists
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMetaWrittenOnlyForIndicesOnNodesThatHaveAShard
specifier|public
name|void
name|testMetaWrittenOnlyForIndicesOnNodesThatHaveAShard
parameter_list|()
throws|throws
name|Exception
block|{
comment|// this test checks that the index state is only written to a data only node if they have a shard of that index allocated on the node
name|String
name|masterNode
init|=
name|startMasterNode
argument_list|()
decl_stmt|;
name|String
name|blueNode
init|=
name|startDataNode
argument_list|(
literal|"blue"
argument_list|)
decl_stmt|;
name|String
name|redNode
init|=
name|startDataNode
argument_list|(
literal|"red"
argument_list|)
decl_stmt|;
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"blue_index"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.number_of_replicas"
argument_list|,
literal|0
argument_list|)
operator|.
name|put
argument_list|(
name|FilterAllocationDecider
operator|.
name|INDEX_ROUTING_INCLUDE_GROUP
operator|+
literal|"color"
argument_list|,
literal|"blue"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|index
argument_list|(
literal|"blue_index"
argument_list|,
literal|"doc"
argument_list|,
literal|"1"
argument_list|,
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"text"
argument_list|,
literal|"some text"
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"red_index"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.number_of_replicas"
argument_list|,
literal|0
argument_list|)
operator|.
name|put
argument_list|(
name|FilterAllocationDecider
operator|.
name|INDEX_ROUTING_INCLUDE_GROUP
operator|+
literal|"color"
argument_list|,
literal|"red"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|index
argument_list|(
literal|"red_index"
argument_list|,
literal|"doc"
argument_list|,
literal|"1"
argument_list|,
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"text"
argument_list|,
literal|"some text"
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|waitForConcreteMappingsOnAll
argument_list|(
literal|"blue_index"
argument_list|,
literal|"doc"
argument_list|,
literal|"text"
argument_list|)
expr_stmt|;
name|waitForConcreteMappingsOnAll
argument_list|(
literal|"red_index"
argument_list|,
literal|"doc"
argument_list|,
literal|"text"
argument_list|)
expr_stmt|;
name|assertIndexNotInMetaState
argument_list|(
name|blueNode
argument_list|,
literal|"red_index"
argument_list|)
expr_stmt|;
name|assertIndexNotInMetaState
argument_list|(
name|redNode
argument_list|,
literal|"blue_index"
argument_list|)
expr_stmt|;
name|assertIndexInMetaState
argument_list|(
name|blueNode
argument_list|,
literal|"blue_index"
argument_list|)
expr_stmt|;
name|assertIndexInMetaState
argument_list|(
name|redNode
argument_list|,
literal|"red_index"
argument_list|)
expr_stmt|;
name|assertIndexInMetaState
argument_list|(
name|masterNode
argument_list|,
literal|"red_index"
argument_list|)
expr_stmt|;
name|assertIndexInMetaState
argument_list|(
name|masterNode
argument_list|,
literal|"blue_index"
argument_list|)
expr_stmt|;
comment|// not the index state for blue_index should only be written on blue_node and the for red_index only on red_node
comment|// we restart red node and master but with empty data folders
name|stopNode
argument_list|(
name|redNode
argument_list|)
expr_stmt|;
operator|(
operator|(
name|InternalTestCluster
operator|)
name|cluster
argument_list|()
operator|)
operator|.
name|stopCurrentMasterNode
argument_list|()
expr_stmt|;
name|masterNode
operator|=
name|startMasterNode
argument_list|()
expr_stmt|;
name|redNode
operator|=
name|startDataNode
argument_list|(
literal|"red"
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|assertIndexNotInMetaState
argument_list|(
name|blueNode
argument_list|,
literal|"red_index"
argument_list|)
expr_stmt|;
name|assertIndexInMetaState
argument_list|(
name|blueNode
argument_list|,
literal|"blue_index"
argument_list|)
expr_stmt|;
name|assertIndexNotInMetaState
argument_list|(
name|redNode
argument_list|,
literal|"red_index"
argument_list|)
expr_stmt|;
name|assertIndexNotInMetaState
argument_list|(
name|redNode
argument_list|,
literal|"blue_index"
argument_list|)
expr_stmt|;
name|assertIndexNotInMetaState
argument_list|(
name|masterNode
argument_list|,
literal|"red_index"
argument_list|)
expr_stmt|;
name|assertIndexInMetaState
argument_list|(
name|masterNode
argument_list|,
literal|"blue_index"
argument_list|)
expr_stmt|;
comment|// check that blue index is still there
name|assertFalse
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareExists
argument_list|(
literal|"red_index"
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|isExists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|client
argument_list|()
operator|.
name|prepareGet
argument_list|(
literal|"blue_index"
argument_list|,
literal|"doc"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|isExists
argument_list|()
argument_list|)
expr_stmt|;
comment|// red index should be gone
comment|// if the blue node had stored the index state then cluster health would be red and red_index would exist
name|assertFalse
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareExists
argument_list|(
literal|"red_index"
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|isExists
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMetaIsRemovedIfAllShardsFromIndexRemoved
specifier|public
name|void
name|testMetaIsRemovedIfAllShardsFromIndexRemoved
parameter_list|()
throws|throws
name|Exception
block|{
comment|// this test checks that the index state is removed from a data only node once all shards have been allocated away from it
name|String
name|masterNode
init|=
name|startMasterNode
argument_list|()
decl_stmt|;
name|String
name|blueNode
init|=
name|startDataNode
argument_list|(
literal|"blue"
argument_list|)
decl_stmt|;
name|String
name|redNode
init|=
name|startDataNode
argument_list|(
literal|"red"
argument_list|)
decl_stmt|;
comment|// create blue_index on blue_node and same for red
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|health
argument_list|(
name|clusterHealthRequest
argument_list|()
operator|.
name|waitForYellowStatus
argument_list|()
operator|.
name|waitForNodes
argument_list|(
literal|"3"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"blue_index"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.number_of_replicas"
argument_list|,
literal|0
argument_list|)
operator|.
name|put
argument_list|(
name|FilterAllocationDecider
operator|.
name|INDEX_ROUTING_INCLUDE_GROUP
operator|+
literal|"color"
argument_list|,
literal|"blue"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|index
argument_list|(
literal|"blue_index"
argument_list|,
literal|"doc"
argument_list|,
literal|"1"
argument_list|,
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"text"
argument_list|,
literal|"some text"
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"red_index"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.number_of_replicas"
argument_list|,
literal|0
argument_list|)
operator|.
name|put
argument_list|(
name|FilterAllocationDecider
operator|.
name|INDEX_ROUTING_INCLUDE_GROUP
operator|+
literal|"color"
argument_list|,
literal|"red"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|index
argument_list|(
literal|"red_index"
argument_list|,
literal|"doc"
argument_list|,
literal|"1"
argument_list|,
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"text"
argument_list|,
literal|"some text"
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|assertIndexNotInMetaState
argument_list|(
name|redNode
argument_list|,
literal|"blue_index"
argument_list|)
expr_stmt|;
name|assertIndexNotInMetaState
argument_list|(
name|blueNode
argument_list|,
literal|"red_index"
argument_list|)
expr_stmt|;
name|assertIndexInMetaState
argument_list|(
name|redNode
argument_list|,
literal|"red_index"
argument_list|)
expr_stmt|;
name|assertIndexInMetaState
argument_list|(
name|blueNode
argument_list|,
literal|"blue_index"
argument_list|)
expr_stmt|;
name|assertIndexInMetaState
argument_list|(
name|masterNode
argument_list|,
literal|"red_index"
argument_list|)
expr_stmt|;
name|assertIndexInMetaState
argument_list|(
name|masterNode
argument_list|,
literal|"blue_index"
argument_list|)
expr_stmt|;
comment|// now relocate blue_index to red_node and red_index to blue_node
name|logger
operator|.
name|debug
argument_list|(
literal|"relocating indices..."
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareUpdateSettings
argument_list|(
literal|"blue_index"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|FilterAllocationDecider
operator|.
name|INDEX_ROUTING_INCLUDE_GROUP
operator|+
literal|"color"
argument_list|,
literal|"red"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareUpdateSettings
argument_list|(
literal|"red_index"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|FilterAllocationDecider
operator|.
name|INDEX_ROUTING_INCLUDE_GROUP
operator|+
literal|"color"
argument_list|,
literal|"blue"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareHealth
argument_list|()
operator|.
name|setWaitForRelocatingShards
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|assertIndexNotInMetaState
argument_list|(
name|redNode
argument_list|,
literal|"red_index"
argument_list|)
expr_stmt|;
name|assertIndexNotInMetaState
argument_list|(
name|blueNode
argument_list|,
literal|"blue_index"
argument_list|)
expr_stmt|;
name|assertIndexInMetaState
argument_list|(
name|redNode
argument_list|,
literal|"blue_index"
argument_list|)
expr_stmt|;
name|assertIndexInMetaState
argument_list|(
name|blueNode
argument_list|,
literal|"red_index"
argument_list|)
expr_stmt|;
name|assertIndexInMetaState
argument_list|(
name|masterNode
argument_list|,
literal|"red_index"
argument_list|)
expr_stmt|;
name|assertIndexInMetaState
argument_list|(
name|masterNode
argument_list|,
literal|"blue_index"
argument_list|)
expr_stmt|;
name|waitForConcreteMappingsOnAll
argument_list|(
literal|"blue_index"
argument_list|,
literal|"doc"
argument_list|,
literal|"text"
argument_list|)
expr_stmt|;
name|waitForConcreteMappingsOnAll
argument_list|(
literal|"red_index"
argument_list|,
literal|"doc"
argument_list|,
literal|"text"
argument_list|)
expr_stmt|;
comment|//at this point the blue_index is on red node and the red_index on blue node
comment|// now, when we start red and master node again but without data folder, the red index should be gone but the blue index should initialize fine
name|stopNode
argument_list|(
name|redNode
argument_list|)
expr_stmt|;
operator|(
operator|(
name|InternalTestCluster
operator|)
name|cluster
argument_list|()
operator|)
operator|.
name|stopCurrentMasterNode
argument_list|()
expr_stmt|;
name|masterNode
operator|=
name|startMasterNode
argument_list|()
expr_stmt|;
name|redNode
operator|=
name|startDataNode
argument_list|(
literal|"red"
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|assertIndexNotInMetaState
argument_list|(
name|redNode
argument_list|,
literal|"blue_index"
argument_list|)
expr_stmt|;
name|assertIndexNotInMetaState
argument_list|(
name|blueNode
argument_list|,
literal|"blue_index"
argument_list|)
expr_stmt|;
name|assertIndexNotInMetaState
argument_list|(
name|redNode
argument_list|,
literal|"red_index"
argument_list|)
expr_stmt|;
name|assertIndexInMetaState
argument_list|(
name|blueNode
argument_list|,
literal|"red_index"
argument_list|)
expr_stmt|;
name|assertIndexInMetaState
argument_list|(
name|masterNode
argument_list|,
literal|"red_index"
argument_list|)
expr_stmt|;
name|assertIndexNotInMetaState
argument_list|(
name|masterNode
argument_list|,
literal|"blue_index"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|client
argument_list|()
operator|.
name|prepareGet
argument_list|(
literal|"red_index"
argument_list|,
literal|"doc"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|isExists
argument_list|()
argument_list|)
expr_stmt|;
comment|// if the red_node had stored the index state then cluster health would be red and blue_index would exist
name|assertFalse
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareExists
argument_list|(
literal|"blue_index"
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|isExists
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMetaWrittenWhenIndexIsClosed
specifier|public
name|void
name|testMetaWrittenWhenIndexIsClosed
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|masterNode
init|=
name|startMasterNode
argument_list|()
decl_stmt|;
name|String
name|redNodeDataPath
init|=
name|createTempDir
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|redNode
init|=
name|startDataNode
argument_list|(
literal|"red"
argument_list|,
name|redNodeDataPath
argument_list|)
decl_stmt|;
name|String
name|blueNode
init|=
name|startDataNode
argument_list|(
literal|"blue"
argument_list|)
decl_stmt|;
comment|// create red_index on red_node and same for red
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|health
argument_list|(
name|clusterHealthRequest
argument_list|()
operator|.
name|waitForYellowStatus
argument_list|()
operator|.
name|waitForNodes
argument_list|(
literal|"3"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"red_index"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.number_of_replicas"
argument_list|,
literal|0
argument_list|)
operator|.
name|put
argument_list|(
name|FilterAllocationDecider
operator|.
name|INDEX_ROUTING_INCLUDE_GROUP
operator|+
literal|"color"
argument_list|,
literal|"red"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|index
argument_list|(
literal|"red_index"
argument_list|,
literal|"doc"
argument_list|,
literal|"1"
argument_list|,
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"text"
argument_list|,
literal|"some text"
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|assertIndexNotInMetaState
argument_list|(
name|blueNode
argument_list|,
literal|"red_index"
argument_list|)
expr_stmt|;
name|assertIndexInMetaState
argument_list|(
name|redNode
argument_list|,
literal|"red_index"
argument_list|)
expr_stmt|;
name|assertIndexInMetaState
argument_list|(
name|masterNode
argument_list|,
literal|"red_index"
argument_list|)
expr_stmt|;
name|waitForConcreteMappingsOnAll
argument_list|(
literal|"red_index"
argument_list|,
literal|"doc"
argument_list|,
literal|"text"
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareClose
argument_list|(
literal|"red_index"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
comment|// close the index
name|ClusterStateResponse
name|clusterStateResponse
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|clusterStateResponse
operator|.
name|getState
argument_list|()
operator|.
name|getMetaData
argument_list|()
operator|.
name|index
argument_list|(
literal|"red_index"
argument_list|)
operator|.
name|getState
argument_list|()
operator|.
name|name
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|IndexMetaData
operator|.
name|State
operator|.
name|CLOSE
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// restart master with empty data folder and maybe red node
name|boolean
name|restartRedNode
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
comment|//at this point the red_index on red node
if|if
condition|(
name|restartRedNode
condition|)
block|{
name|stopNode
argument_list|(
name|redNode
argument_list|)
expr_stmt|;
block|}
operator|(
operator|(
name|InternalTestCluster
operator|)
name|cluster
argument_list|()
operator|)
operator|.
name|stopCurrentMasterNode
argument_list|()
expr_stmt|;
name|masterNode
operator|=
name|startMasterNode
argument_list|()
expr_stmt|;
if|if
condition|(
name|restartRedNode
condition|)
block|{
name|redNode
operator|=
name|startDataNode
argument_list|(
literal|"red"
argument_list|,
name|redNodeDataPath
argument_list|)
expr_stmt|;
block|}
name|ensureGreen
argument_list|(
literal|"red_index"
argument_list|)
expr_stmt|;
name|assertIndexNotInMetaState
argument_list|(
name|blueNode
argument_list|,
literal|"red_index"
argument_list|)
expr_stmt|;
name|assertIndexInMetaState
argument_list|(
name|redNode
argument_list|,
literal|"red_index"
argument_list|)
expr_stmt|;
name|assertIndexInMetaState
argument_list|(
name|masterNode
argument_list|,
literal|"red_index"
argument_list|)
expr_stmt|;
name|clusterStateResponse
operator|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|clusterStateResponse
operator|.
name|getState
argument_list|()
operator|.
name|getMetaData
argument_list|()
operator|.
name|index
argument_list|(
literal|"red_index"
argument_list|)
operator|.
name|getState
argument_list|()
operator|.
name|name
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|IndexMetaData
operator|.
name|State
operator|.
name|CLOSE
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// open the index again
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareOpen
argument_list|(
literal|"red_index"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|clusterStateResponse
operator|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|clusterStateResponse
operator|.
name|getState
argument_list|()
operator|.
name|getMetaData
argument_list|()
operator|.
name|index
argument_list|(
literal|"red_index"
argument_list|)
operator|.
name|getState
argument_list|()
operator|.
name|name
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|IndexMetaData
operator|.
name|State
operator|.
name|OPEN
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// restart again
name|ensureGreen
argument_list|()
expr_stmt|;
if|if
condition|(
name|restartRedNode
condition|)
block|{
name|stopNode
argument_list|(
name|redNode
argument_list|)
expr_stmt|;
block|}
operator|(
operator|(
name|InternalTestCluster
operator|)
name|cluster
argument_list|()
operator|)
operator|.
name|stopCurrentMasterNode
argument_list|()
expr_stmt|;
name|masterNode
operator|=
name|startMasterNode
argument_list|()
expr_stmt|;
if|if
condition|(
name|restartRedNode
condition|)
block|{
name|redNode
operator|=
name|startDataNode
argument_list|(
literal|"red"
argument_list|,
name|redNodeDataPath
argument_list|)
expr_stmt|;
block|}
name|ensureGreen
argument_list|(
literal|"red_index"
argument_list|)
expr_stmt|;
name|assertIndexNotInMetaState
argument_list|(
name|blueNode
argument_list|,
literal|"red_index"
argument_list|)
expr_stmt|;
name|assertIndexInMetaState
argument_list|(
name|redNode
argument_list|,
literal|"red_index"
argument_list|)
expr_stmt|;
name|assertIndexInMetaState
argument_list|(
name|masterNode
argument_list|,
literal|"red_index"
argument_list|)
expr_stmt|;
name|clusterStateResponse
operator|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|clusterStateResponse
operator|.
name|getState
argument_list|()
operator|.
name|getMetaData
argument_list|()
operator|.
name|index
argument_list|(
literal|"red_index"
argument_list|)
operator|.
name|getState
argument_list|()
operator|.
name|name
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|IndexMetaData
operator|.
name|State
operator|.
name|OPEN
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|client
argument_list|()
operator|.
name|prepareGet
argument_list|(
literal|"red_index"
argument_list|,
literal|"doc"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|isExists
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMetaWrittenWhenIndexIsClosedAndMetaUpdated
specifier|public
name|void
name|testMetaWrittenWhenIndexIsClosedAndMetaUpdated
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|masterNode
init|=
name|startMasterNode
argument_list|()
decl_stmt|;
name|String
name|redNodeDataPath
init|=
name|createTempDir
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|redNode
init|=
name|startDataNode
argument_list|(
literal|"red"
argument_list|,
name|redNodeDataPath
argument_list|)
decl_stmt|;
comment|// create red_index on red_node and same for red
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|health
argument_list|(
name|clusterHealthRequest
argument_list|()
operator|.
name|waitForYellowStatus
argument_list|()
operator|.
name|waitForNodes
argument_list|(
literal|"2"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"red_index"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.number_of_replicas"
argument_list|,
literal|0
argument_list|)
operator|.
name|put
argument_list|(
name|FilterAllocationDecider
operator|.
name|INDEX_ROUTING_INCLUDE_GROUP
operator|+
literal|"color"
argument_list|,
literal|"red"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|index
argument_list|(
literal|"red_index"
argument_list|,
literal|"doc"
argument_list|,
literal|"1"
argument_list|,
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"text"
argument_list|,
literal|"some text"
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> wait for green red_index"
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> wait for meta state written for red_index"
argument_list|)
expr_stmt|;
name|assertIndexInMetaState
argument_list|(
name|redNode
argument_list|,
literal|"red_index"
argument_list|)
expr_stmt|;
name|assertIndexInMetaState
argument_list|(
name|masterNode
argument_list|,
literal|"red_index"
argument_list|)
expr_stmt|;
name|waitForConcreteMappingsOnAll
argument_list|(
literal|"red_index"
argument_list|,
literal|"doc"
argument_list|,
literal|"text"
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> close red_index"
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareClose
argument_list|(
literal|"red_index"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
comment|// close the index
name|ClusterStateResponse
name|clusterStateResponse
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|clusterStateResponse
operator|.
name|getState
argument_list|()
operator|.
name|getMetaData
argument_list|()
operator|.
name|index
argument_list|(
literal|"red_index"
argument_list|)
operator|.
name|getState
argument_list|()
operator|.
name|name
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|IndexMetaData
operator|.
name|State
operator|.
name|CLOSE
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> restart red node"
argument_list|)
expr_stmt|;
name|stopNode
argument_list|(
name|redNode
argument_list|)
expr_stmt|;
name|redNode
operator|=
name|startDataNode
argument_list|(
literal|"red"
argument_list|,
name|redNodeDataPath
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|preparePutMapping
argument_list|(
literal|"red_index"
argument_list|)
operator|.
name|setType
argument_list|(
literal|"doc"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"integer_field"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"integer"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|GetMappingsResponse
name|getMappingsResponse
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareGetMappings
argument_list|(
literal|"red_index"
argument_list|)
operator|.
name|addTypes
argument_list|(
literal|"doc"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
operator|(
call|(
name|LinkedHashMap
call|)
argument_list|(
name|getMappingsResponse
operator|.
name|getMappings
argument_list|()
operator|.
name|get
argument_list|(
literal|"red_index"
argument_list|)
operator|.
name|get
argument_list|(
literal|"doc"
argument_list|)
operator|.
name|getSourceAsMap
argument_list|()
operator|.
name|get
argument_list|(
literal|"properties"
argument_list|)
argument_list|)
operator|)
operator|.
name|get
argument_list|(
literal|"integer_field"
argument_list|)
argument_list|)
expr_stmt|;
comment|// restart master with empty data folder and maybe red node
operator|(
operator|(
name|InternalTestCluster
operator|)
name|cluster
argument_list|()
operator|)
operator|.
name|stopCurrentMasterNode
argument_list|()
expr_stmt|;
name|masterNode
operator|=
name|startMasterNode
argument_list|()
expr_stmt|;
name|ensureGreen
argument_list|(
literal|"red_index"
argument_list|)
expr_stmt|;
name|assertIndexInMetaState
argument_list|(
name|redNode
argument_list|,
literal|"red_index"
argument_list|)
expr_stmt|;
name|assertIndexInMetaState
argument_list|(
name|masterNode
argument_list|,
literal|"red_index"
argument_list|)
expr_stmt|;
name|clusterStateResponse
operator|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|clusterStateResponse
operator|.
name|getState
argument_list|()
operator|.
name|getMetaData
argument_list|()
operator|.
name|index
argument_list|(
literal|"red_index"
argument_list|)
operator|.
name|getState
argument_list|()
operator|.
name|name
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|IndexMetaData
operator|.
name|State
operator|.
name|CLOSE
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|getMappingsResponse
operator|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareGetMappings
argument_list|(
literal|"red_index"
argument_list|)
operator|.
name|addTypes
argument_list|(
literal|"doc"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
operator|(
call|(
name|LinkedHashMap
call|)
argument_list|(
name|getMappingsResponse
operator|.
name|getMappings
argument_list|()
operator|.
name|get
argument_list|(
literal|"red_index"
argument_list|)
operator|.
name|get
argument_list|(
literal|"doc"
argument_list|)
operator|.
name|getSourceAsMap
argument_list|()
operator|.
name|get
argument_list|(
literal|"properties"
argument_list|)
argument_list|)
operator|)
operator|.
name|get
argument_list|(
literal|"integer_field"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|startDataNode
specifier|private
name|String
name|startDataNode
parameter_list|(
name|String
name|color
parameter_list|)
block|{
return|return
name|startDataNode
argument_list|(
name|color
argument_list|,
name|createTempDir
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
DECL|method|startDataNode
specifier|private
name|String
name|startDataNode
parameter_list|(
name|String
name|color
parameter_list|,
name|String
name|newDataPath
parameter_list|)
block|{
name|ImmutableSettings
operator|.
name|Builder
name|settingsBuilder
init|=
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"node.data"
argument_list|,
literal|true
argument_list|)
operator|.
name|put
argument_list|(
literal|"node.master"
argument_list|,
literal|false
argument_list|)
operator|.
name|put
argument_list|(
literal|"node.color"
argument_list|,
name|color
argument_list|)
operator|.
name|put
argument_list|(
literal|"path.data"
argument_list|,
name|newDataPath
argument_list|)
decl_stmt|;
return|return
name|internalCluster
argument_list|()
operator|.
name|startNode
argument_list|(
name|settingsBuilder
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
DECL|method|startMasterNode
specifier|private
name|String
name|startMasterNode
parameter_list|()
block|{
name|ImmutableSettings
operator|.
name|Builder
name|settingsBuilder
init|=
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"node.data"
argument_list|,
literal|false
argument_list|)
operator|.
name|put
argument_list|(
literal|"node.master"
argument_list|,
literal|true
argument_list|)
operator|.
name|put
argument_list|(
literal|"path.data"
argument_list|,
name|createTempDir
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|internalCluster
argument_list|()
operator|.
name|startNode
argument_list|(
name|settingsBuilder
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
DECL|method|stopNode
specifier|private
name|void
name|stopNode
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|internalCluster
argument_list|()
operator|.
name|stopRandomNode
argument_list|(
name|InternalTestCluster
operator|.
name|nameFilter
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertIndexNotInMetaState
specifier|protected
name|void
name|assertIndexNotInMetaState
parameter_list|(
name|String
name|nodeName
parameter_list|,
name|String
name|indexName
parameter_list|)
throws|throws
name|Exception
block|{
name|assertMetaState
argument_list|(
name|nodeName
argument_list|,
name|indexName
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|assertIndexInMetaState
specifier|protected
name|void
name|assertIndexInMetaState
parameter_list|(
name|String
name|nodeName
parameter_list|,
name|String
name|indexName
parameter_list|)
throws|throws
name|Exception
block|{
name|assertMetaState
argument_list|(
name|nodeName
argument_list|,
name|indexName
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|assertMetaState
specifier|private
name|void
name|assertMetaState
parameter_list|(
specifier|final
name|String
name|nodeName
parameter_list|,
specifier|final
name|String
name|indexName
parameter_list|,
specifier|final
name|boolean
name|shouldBe
parameter_list|)
throws|throws
name|Exception
block|{
name|awaitBusy
argument_list|(
operator|new
name|Predicate
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"checking if meta state exists..."
argument_list|)
expr_stmt|;
return|return
name|shouldBe
operator|==
name|metaStateExists
argument_list|(
name|nodeName
argument_list|,
name|indexName
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|boolean
name|inMetaSate
init|=
name|metaStateExists
argument_list|(
name|nodeName
argument_list|,
name|indexName
argument_list|)
decl_stmt|;
if|if
condition|(
name|shouldBe
condition|)
block|{
name|assertTrue
argument_list|(
literal|"expected "
operator|+
name|indexName
operator|+
literal|" in meta state of node "
operator|+
name|nodeName
argument_list|,
name|inMetaSate
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertFalse
argument_list|(
literal|"expected "
operator|+
name|indexName
operator|+
literal|" to not be in meta state of node "
operator|+
name|nodeName
argument_list|,
name|inMetaSate
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|metaStateExists
specifier|private
name|boolean
name|metaStateExists
parameter_list|(
name|String
name|nodeName
parameter_list|,
name|String
name|indexName
parameter_list|)
block|{
name|GatewayMetaState
name|redNodeMetaState
init|=
operator|(
operator|(
name|InternalTestCluster
operator|)
name|cluster
argument_list|()
operator|)
operator|.
name|getInstance
argument_list|(
name|GatewayMetaState
operator|.
name|class
argument_list|,
name|nodeName
argument_list|)
decl_stmt|;
name|MetaData
name|redNodeMetaData
init|=
literal|null
decl_stmt|;
try|try
block|{
name|redNodeMetaData
operator|=
name|redNodeMetaState
operator|.
name|loadMetaState
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"failed to load meta state"
argument_list|)
expr_stmt|;
block|}
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|IndexMetaData
argument_list|>
name|indices
init|=
name|redNodeMetaData
operator|.
name|getIndices
argument_list|()
decl_stmt|;
name|boolean
name|inMetaSate
init|=
literal|false
decl_stmt|;
for|for
control|(
name|ObjectObjectCursor
argument_list|<
name|String
argument_list|,
name|IndexMetaData
argument_list|>
name|index
range|:
name|indices
control|)
block|{
name|inMetaSate
operator|=
name|inMetaSate
operator|||
name|index
operator|.
name|key
operator|.
name|equals
argument_list|(
name|indexName
argument_list|)
expr_stmt|;
block|}
return|return
name|inMetaSate
return|;
block|}
block|}
end_class

end_unit

