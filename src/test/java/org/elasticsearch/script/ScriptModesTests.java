begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.script
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|script
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|Loggers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|ScriptService
operator|.
name|ScriptType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|expression
operator|.
name|ExpressionScriptEngineService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|groovy
operator|.
name|GroovyScriptEngineService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|mustache
operator|.
name|MustacheScriptEngineService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|lookup
operator|.
name|SearchLookup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|containsString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|notNullValue
import|;
end_import

begin_class
DECL|class|ScriptModesTests
specifier|public
class|class
name|ScriptModesTests
extends|extends
name|ElasticsearchTestCase
block|{
DECL|field|ALL_LANGS
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|ALL_LANGS
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
name|GroovyScriptEngineService
operator|.
name|NAME
argument_list|,
name|MustacheScriptEngineService
operator|.
name|NAME
argument_list|,
name|ExpressionScriptEngineService
operator|.
name|NAME
argument_list|,
literal|"custom"
argument_list|,
literal|"test"
argument_list|)
decl_stmt|;
DECL|field|ENABLE_VALUES
specifier|static
specifier|final
name|String
index|[]
name|ENABLE_VALUES
init|=
operator|new
name|String
index|[]
block|{
literal|"on"
block|,
literal|"true"
block|,
literal|"yes"
block|,
literal|"1"
block|}
decl_stmt|;
DECL|field|DISABLE_VALUES
specifier|static
specifier|final
name|String
index|[]
name|DISABLE_VALUES
init|=
operator|new
name|String
index|[]
block|{
literal|"off"
block|,
literal|"false"
block|,
literal|"no"
block|,
literal|"0"
block|}
decl_stmt|;
DECL|field|scriptEngines
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|ScriptEngineService
argument_list|>
name|scriptEngines
decl_stmt|;
DECL|field|scriptModes
specifier|private
name|ScriptModes
name|scriptModes
decl_stmt|;
DECL|field|checkedSettings
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|checkedSettings
decl_stmt|;
DECL|field|assertAllSettingsWereChecked
specifier|private
name|boolean
name|assertAllSettingsWereChecked
decl_stmt|;
DECL|field|assertScriptModesNonNull
specifier|private
name|boolean
name|assertScriptModesNonNull
decl_stmt|;
annotation|@
name|Before
DECL|method|setupScriptEngines
specifier|public
name|void
name|setupScriptEngines
parameter_list|()
block|{
name|scriptEngines
operator|=
name|buildScriptEnginesByLangMap
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
operator|new
name|GroovyScriptEngineService
argument_list|(
name|ImmutableSettings
operator|.
name|EMPTY
argument_list|)
argument_list|,
operator|new
name|MustacheScriptEngineService
argument_list|(
name|ImmutableSettings
operator|.
name|EMPTY
argument_list|)
argument_list|,
operator|new
name|ExpressionScriptEngineService
argument_list|(
name|ImmutableSettings
operator|.
name|EMPTY
argument_list|)
argument_list|,
comment|//add the native engine just to make sure it gets filtered out
operator|new
name|NativeScriptEngineService
argument_list|(
name|ImmutableSettings
operator|.
name|EMPTY
argument_list|,
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|NativeScriptFactory
operator|>
name|emptyMap
argument_list|()
argument_list|)
argument_list|,
operator|new
name|CustomScriptEngineService
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|checkedSettings
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
name|assertAllSettingsWereChecked
operator|=
literal|true
expr_stmt|;
name|assertScriptModesNonNull
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|assertNativeScriptsAreAlwaysAllowed
specifier|public
name|void
name|assertNativeScriptsAreAlwaysAllowed
parameter_list|()
block|{
if|if
condition|(
name|assertScriptModesNonNull
condition|)
block|{
name|assertThat
argument_list|(
name|scriptModes
operator|.
name|getScriptMode
argument_list|(
name|NativeScriptEngineService
operator|.
name|NAME
argument_list|,
name|randomFrom
argument_list|(
name|ScriptType
operator|.
name|values
argument_list|()
argument_list|)
argument_list|,
name|randomFrom
argument_list|(
name|ScriptContext
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|ScriptMode
operator|.
name|ON
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|After
DECL|method|assertAllSettingsWereChecked
specifier|public
name|void
name|assertAllSettingsWereChecked
parameter_list|()
block|{
if|if
condition|(
name|assertScriptModesNonNull
condition|)
block|{
name|assertThat
argument_list|(
name|scriptModes
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
comment|//4 is the number of engines (native excluded), custom is counted twice though as it's associated with two different names
name|int
name|numberOfSettings
init|=
literal|5
operator|*
name|ScriptType
operator|.
name|values
argument_list|()
operator|.
name|length
operator|*
name|ScriptContext
operator|.
name|values
argument_list|()
operator|.
name|length
decl_stmt|;
name|assertThat
argument_list|(
name|scriptModes
operator|.
name|scriptModes
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|numberOfSettings
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|assertAllSettingsWereChecked
condition|)
block|{
name|assertThat
argument_list|(
name|checkedSettings
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|numberOfSettings
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testDefaultSettings
specifier|public
name|void
name|testDefaultSettings
parameter_list|()
block|{
name|this
operator|.
name|scriptModes
operator|=
operator|new
name|ScriptModes
argument_list|(
name|scriptEngines
argument_list|,
name|ImmutableSettings
operator|.
name|EMPTY
argument_list|,
name|Loggers
operator|.
name|getLogger
argument_list|(
name|ScriptModesTests
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertScriptModesAllOps
argument_list|(
name|ScriptMode
operator|.
name|ON
argument_list|,
name|ALL_LANGS
argument_list|,
name|ScriptType
operator|.
name|FILE
argument_list|)
expr_stmt|;
name|assertScriptModesAllOps
argument_list|(
name|ScriptMode
operator|.
name|SANDBOX
argument_list|,
name|ALL_LANGS
argument_list|,
name|ScriptType
operator|.
name|INDEXED
argument_list|,
name|ScriptType
operator|.
name|INLINE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDefaultSettingsDisableDynamicTrue
specifier|public
name|void
name|testDefaultSettingsDisableDynamicTrue
parameter_list|()
block|{
comment|//verify that disable_dynamic setting gets still read and applied, iff new settings are not present
name|this
operator|.
name|scriptModes
operator|=
operator|new
name|ScriptModes
argument_list|(
name|scriptEngines
argument_list|,
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|ScriptService
operator|.
name|DISABLE_DYNAMIC_SCRIPTING_SETTING
argument_list|,
name|randomFrom
argument_list|(
literal|"true"
argument_list|,
literal|"all"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|Loggers
operator|.
name|getLogger
argument_list|(
name|ScriptModesTests
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertScriptModesAllOps
argument_list|(
name|ScriptMode
operator|.
name|ON
argument_list|,
name|ALL_LANGS
argument_list|,
name|ScriptType
operator|.
name|FILE
argument_list|)
expr_stmt|;
name|assertScriptModesAllOps
argument_list|(
name|ScriptMode
operator|.
name|OFF
argument_list|,
name|ALL_LANGS
argument_list|,
name|ScriptType
operator|.
name|INDEXED
argument_list|,
name|ScriptType
operator|.
name|INLINE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDefaultSettingsEnableDynamicFalse
specifier|public
name|void
name|testDefaultSettingsEnableDynamicFalse
parameter_list|()
block|{
comment|//verify that disable_dynamic setting gets still read and applied, iff new settings are not present
name|this
operator|.
name|scriptModes
operator|=
operator|new
name|ScriptModes
argument_list|(
name|scriptEngines
argument_list|,
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|ScriptService
operator|.
name|DISABLE_DYNAMIC_SCRIPTING_SETTING
argument_list|,
name|randomFrom
argument_list|(
literal|"false"
argument_list|,
literal|"none"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|Loggers
operator|.
name|getLogger
argument_list|(
name|ScriptModesTests
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertScriptModesAllOps
argument_list|(
name|ScriptMode
operator|.
name|ON
argument_list|,
name|ALL_LANGS
argument_list|,
name|ScriptType
operator|.
name|FILE
argument_list|,
name|ScriptType
operator|.
name|INDEXED
argument_list|,
name|ScriptType
operator|.
name|INLINE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDefaultSettingsDisableDynamicSandbox
specifier|public
name|void
name|testDefaultSettingsDisableDynamicSandbox
parameter_list|()
block|{
comment|//verify that disable_dynamic setting gets still read and applied, iff new settings are not present
name|this
operator|.
name|scriptModes
operator|=
operator|new
name|ScriptModes
argument_list|(
name|scriptEngines
argument_list|,
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|ScriptService
operator|.
name|DISABLE_DYNAMIC_SCRIPTING_SETTING
argument_list|,
name|ScriptMode
operator|.
name|SANDBOX
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|Loggers
operator|.
name|getLogger
argument_list|(
name|ScriptModesTests
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertScriptModesAllOps
argument_list|(
name|ScriptMode
operator|.
name|ON
argument_list|,
name|ALL_LANGS
argument_list|,
name|ScriptType
operator|.
name|FILE
argument_list|)
expr_stmt|;
name|assertScriptModesAllOps
argument_list|(
name|ScriptMode
operator|.
name|SANDBOX
argument_list|,
name|ALL_LANGS
argument_list|,
name|ScriptType
operator|.
name|INDEXED
argument_list|,
name|ScriptType
operator|.
name|INLINE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testConflictingSettings
specifier|public
name|void
name|testConflictingSettings
parameter_list|()
block|{
name|assertScriptModesNonNull
operator|=
literal|false
expr_stmt|;
name|ImmutableSettings
operator|.
name|Builder
name|builder
init|=
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|ScriptService
operator|.
name|DISABLE_DYNAMIC_SCRIPTING_SETTING
argument_list|,
name|randomFrom
argument_list|(
literal|"all"
argument_list|,
literal|"true"
argument_list|,
literal|"none"
argument_list|,
literal|"false"
argument_list|,
literal|"sandbox"
argument_list|,
literal|"sandboxed"
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|iterations
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iterations
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|builder
operator|.
name|put
argument_list|(
literal|"script."
operator|+
name|randomFrom
argument_list|(
name|ScriptType
operator|.
name|values
argument_list|()
argument_list|)
argument_list|,
name|randomFrom
argument_list|(
name|ScriptMode
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|builder
operator|.
name|put
argument_list|(
name|ScriptModes
operator|.
name|SCRIPT_SETTINGS_PREFIX
operator|+
name|randomFrom
argument_list|(
name|ScriptContext
operator|.
name|values
argument_list|()
argument_list|)
argument_list|,
name|randomFrom
argument_list|(
name|ScriptMode
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|put
argument_list|(
name|specificEngineOpSettings
argument_list|(
name|GroovyScriptEngineService
operator|.
name|NAME
argument_list|,
name|randomFrom
argument_list|(
name|ScriptType
operator|.
name|values
argument_list|()
argument_list|)
argument_list|,
name|randomFrom
argument_list|(
name|ScriptContext
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|randomFrom
argument_list|(
name|ScriptMode
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|Settings
name|settings
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|this
operator|.
name|scriptModes
operator|=
operator|new
name|ScriptModes
argument_list|(
name|scriptEngines
argument_list|,
name|settings
argument_list|,
name|Loggers
operator|.
name|getLogger
argument_list|(
name|ScriptModesTests
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"ScriptModes should have thrown an error due to conflicting settings"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ElasticsearchIllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"conflicting scripting settings have been specified"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|scriptSettingEntry
range|:
name|settings
operator|.
name|getAsSettings
argument_list|(
literal|"script"
argument_list|)
operator|.
name|getAsMap
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
name|ScriptModes
operator|.
name|SCRIPT_SETTINGS_PREFIX
operator|+
name|scriptSettingEntry
operator|.
name|getKey
argument_list|()
operator|+
literal|": "
operator|+
name|scriptSettingEntry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|ElasticsearchIllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|testMissingSetting
specifier|public
name|void
name|testMissingSetting
parameter_list|()
block|{
name|assertAllSettingsWereChecked
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|scriptModes
operator|=
operator|new
name|ScriptModes
argument_list|(
name|scriptEngines
argument_list|,
name|ImmutableSettings
operator|.
name|EMPTY
argument_list|,
name|Loggers
operator|.
name|getLogger
argument_list|(
name|ScriptModesTests
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|scriptModes
operator|.
name|getScriptMode
argument_list|(
literal|"non_existing"
argument_list|,
name|randomFrom
argument_list|(
name|ScriptType
operator|.
name|values
argument_list|()
argument_list|)
argument_list|,
name|randomFrom
argument_list|(
name|ScriptContext
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEnableInlineGenericSettings
specifier|public
name|void
name|testEnableInlineGenericSettings
parameter_list|()
block|{
name|ImmutableSettings
operator|.
name|Builder
name|builder
init|=
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"script.inline"
argument_list|,
name|randomFrom
argument_list|(
name|ENABLE_VALUES
argument_list|)
argument_list|)
decl_stmt|;
name|this
operator|.
name|scriptModes
operator|=
operator|new
name|ScriptModes
argument_list|(
name|scriptEngines
argument_list|,
name|builder
operator|.
name|build
argument_list|()
argument_list|,
name|Loggers
operator|.
name|getLogger
argument_list|(
name|ScriptModesTests
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertScriptModesAllOps
argument_list|(
name|ScriptMode
operator|.
name|ON
argument_list|,
name|ALL_LANGS
argument_list|,
name|ScriptType
operator|.
name|FILE
argument_list|,
name|ScriptType
operator|.
name|INLINE
argument_list|)
expr_stmt|;
name|assertScriptModesAllOps
argument_list|(
name|ScriptMode
operator|.
name|SANDBOX
argument_list|,
name|ALL_LANGS
argument_list|,
name|ScriptType
operator|.
name|INDEXED
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDisableInlineGenericSettings
specifier|public
name|void
name|testDisableInlineGenericSettings
parameter_list|()
block|{
name|ImmutableSettings
operator|.
name|Builder
name|builder
init|=
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"script.inline"
argument_list|,
name|randomFrom
argument_list|(
name|DISABLE_VALUES
argument_list|)
argument_list|)
decl_stmt|;
name|this
operator|.
name|scriptModes
operator|=
operator|new
name|ScriptModes
argument_list|(
name|scriptEngines
argument_list|,
name|builder
operator|.
name|build
argument_list|()
argument_list|,
name|Loggers
operator|.
name|getLogger
argument_list|(
name|ScriptModesTests
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertScriptModesAllOps
argument_list|(
name|ScriptMode
operator|.
name|ON
argument_list|,
name|ALL_LANGS
argument_list|,
name|ScriptType
operator|.
name|FILE
argument_list|)
expr_stmt|;
name|assertScriptModesAllOps
argument_list|(
name|ScriptMode
operator|.
name|SANDBOX
argument_list|,
name|ALL_LANGS
argument_list|,
name|ScriptType
operator|.
name|INDEXED
argument_list|)
expr_stmt|;
name|assertScriptModesAllOps
argument_list|(
name|ScriptMode
operator|.
name|OFF
argument_list|,
name|ALL_LANGS
argument_list|,
name|ScriptType
operator|.
name|INLINE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSandboxInlineGenericSettings
specifier|public
name|void
name|testSandboxInlineGenericSettings
parameter_list|()
block|{
name|ImmutableSettings
operator|.
name|Builder
name|builder
init|=
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"script.inline"
argument_list|,
name|randomFrom
argument_list|(
name|ScriptMode
operator|.
name|SANDBOX
argument_list|)
argument_list|)
decl_stmt|;
comment|//nothing changes if setting set is same as default
name|this
operator|.
name|scriptModes
operator|=
operator|new
name|ScriptModes
argument_list|(
name|scriptEngines
argument_list|,
name|builder
operator|.
name|build
argument_list|()
argument_list|,
name|Loggers
operator|.
name|getLogger
argument_list|(
name|ScriptModesTests
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertScriptModesAllOps
argument_list|(
name|ScriptMode
operator|.
name|ON
argument_list|,
name|ALL_LANGS
argument_list|,
name|ScriptType
operator|.
name|FILE
argument_list|)
expr_stmt|;
name|assertScriptModesAllOps
argument_list|(
name|ScriptMode
operator|.
name|SANDBOX
argument_list|,
name|ALL_LANGS
argument_list|,
name|ScriptType
operator|.
name|INDEXED
argument_list|,
name|ScriptType
operator|.
name|INLINE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEnableIndexedGenericSettings
specifier|public
name|void
name|testEnableIndexedGenericSettings
parameter_list|()
block|{
name|ImmutableSettings
operator|.
name|Builder
name|builder
init|=
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"script.indexed"
argument_list|,
name|randomFrom
argument_list|(
name|ENABLE_VALUES
argument_list|)
argument_list|)
decl_stmt|;
name|this
operator|.
name|scriptModes
operator|=
operator|new
name|ScriptModes
argument_list|(
name|scriptEngines
argument_list|,
name|builder
operator|.
name|build
argument_list|()
argument_list|,
name|Loggers
operator|.
name|getLogger
argument_list|(
name|ScriptModesTests
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertScriptModesAllOps
argument_list|(
name|ScriptMode
operator|.
name|ON
argument_list|,
name|ALL_LANGS
argument_list|,
name|ScriptType
operator|.
name|FILE
argument_list|,
name|ScriptType
operator|.
name|INDEXED
argument_list|)
expr_stmt|;
name|assertScriptModesAllOps
argument_list|(
name|ScriptMode
operator|.
name|SANDBOX
argument_list|,
name|ALL_LANGS
argument_list|,
name|ScriptType
operator|.
name|INLINE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDisableIndexedGenericSettings
specifier|public
name|void
name|testDisableIndexedGenericSettings
parameter_list|()
block|{
name|ImmutableSettings
operator|.
name|Builder
name|builder
init|=
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"script.indexed"
argument_list|,
name|randomFrom
argument_list|(
name|DISABLE_VALUES
argument_list|)
argument_list|)
decl_stmt|;
name|this
operator|.
name|scriptModes
operator|=
operator|new
name|ScriptModes
argument_list|(
name|scriptEngines
argument_list|,
name|builder
operator|.
name|build
argument_list|()
argument_list|,
name|Loggers
operator|.
name|getLogger
argument_list|(
name|ScriptModesTests
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertScriptModesAllOps
argument_list|(
name|ScriptMode
operator|.
name|ON
argument_list|,
name|ALL_LANGS
argument_list|,
name|ScriptType
operator|.
name|FILE
argument_list|)
expr_stmt|;
name|assertScriptModesAllOps
argument_list|(
name|ScriptMode
operator|.
name|OFF
argument_list|,
name|ALL_LANGS
argument_list|,
name|ScriptType
operator|.
name|INDEXED
argument_list|)
expr_stmt|;
name|assertScriptModesAllOps
argument_list|(
name|ScriptMode
operator|.
name|SANDBOX
argument_list|,
name|ALL_LANGS
argument_list|,
name|ScriptType
operator|.
name|INLINE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSandboxIndexedGenericSettings
specifier|public
name|void
name|testSandboxIndexedGenericSettings
parameter_list|()
block|{
name|ImmutableSettings
operator|.
name|Builder
name|builder
init|=
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"script.indexed"
argument_list|,
name|ScriptMode
operator|.
name|SANDBOX
argument_list|)
decl_stmt|;
comment|//nothing changes if setting set is same as default
name|this
operator|.
name|scriptModes
operator|=
operator|new
name|ScriptModes
argument_list|(
name|scriptEngines
argument_list|,
name|builder
operator|.
name|build
argument_list|()
argument_list|,
name|Loggers
operator|.
name|getLogger
argument_list|(
name|ScriptModesTests
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertScriptModesAllOps
argument_list|(
name|ScriptMode
operator|.
name|ON
argument_list|,
name|ALL_LANGS
argument_list|,
name|ScriptType
operator|.
name|FILE
argument_list|)
expr_stmt|;
name|assertScriptModesAllOps
argument_list|(
name|ScriptMode
operator|.
name|SANDBOX
argument_list|,
name|ALL_LANGS
argument_list|,
name|ScriptType
operator|.
name|INDEXED
argument_list|,
name|ScriptType
operator|.
name|INLINE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEnableFileGenericSettings
specifier|public
name|void
name|testEnableFileGenericSettings
parameter_list|()
block|{
name|ImmutableSettings
operator|.
name|Builder
name|builder
init|=
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"script.file"
argument_list|,
name|randomFrom
argument_list|(
name|ENABLE_VALUES
argument_list|)
argument_list|)
decl_stmt|;
comment|//nothing changes if setting set is same as default
name|this
operator|.
name|scriptModes
operator|=
operator|new
name|ScriptModes
argument_list|(
name|scriptEngines
argument_list|,
name|builder
operator|.
name|build
argument_list|()
argument_list|,
name|Loggers
operator|.
name|getLogger
argument_list|(
name|ScriptModesTests
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertScriptModesAllOps
argument_list|(
name|ScriptMode
operator|.
name|ON
argument_list|,
name|ALL_LANGS
argument_list|,
name|ScriptType
operator|.
name|FILE
argument_list|)
expr_stmt|;
name|assertScriptModesAllOps
argument_list|(
name|ScriptMode
operator|.
name|SANDBOX
argument_list|,
name|ALL_LANGS
argument_list|,
name|ScriptType
operator|.
name|INDEXED
argument_list|,
name|ScriptType
operator|.
name|INLINE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDisableFileGenericSettings
specifier|public
name|void
name|testDisableFileGenericSettings
parameter_list|()
block|{
name|ImmutableSettings
operator|.
name|Builder
name|builder
init|=
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"script.file"
argument_list|,
name|randomFrom
argument_list|(
name|DISABLE_VALUES
argument_list|)
argument_list|)
decl_stmt|;
name|this
operator|.
name|scriptModes
operator|=
operator|new
name|ScriptModes
argument_list|(
name|scriptEngines
argument_list|,
name|builder
operator|.
name|build
argument_list|()
argument_list|,
name|Loggers
operator|.
name|getLogger
argument_list|(
name|ScriptModesTests
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertScriptModesAllOps
argument_list|(
name|ScriptMode
operator|.
name|OFF
argument_list|,
name|ALL_LANGS
argument_list|,
name|ScriptType
operator|.
name|FILE
argument_list|)
expr_stmt|;
name|assertScriptModesAllOps
argument_list|(
name|ScriptMode
operator|.
name|SANDBOX
argument_list|,
name|ALL_LANGS
argument_list|,
name|ScriptType
operator|.
name|INDEXED
argument_list|,
name|ScriptType
operator|.
name|INLINE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSandboxFileGenericSettings
specifier|public
name|void
name|testSandboxFileGenericSettings
parameter_list|()
block|{
name|ImmutableSettings
operator|.
name|Builder
name|builder
init|=
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"script.file"
argument_list|,
name|ScriptMode
operator|.
name|SANDBOX
argument_list|)
decl_stmt|;
comment|//nothing changes if setting set is same as default
name|this
operator|.
name|scriptModes
operator|=
operator|new
name|ScriptModes
argument_list|(
name|scriptEngines
argument_list|,
name|builder
operator|.
name|build
argument_list|()
argument_list|,
name|Loggers
operator|.
name|getLogger
argument_list|(
name|ScriptModesTests
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertScriptModesAllOps
argument_list|(
name|ScriptMode
operator|.
name|SANDBOX
argument_list|,
name|ALL_LANGS
argument_list|,
name|ScriptType
operator|.
name|FILE
argument_list|,
name|ScriptType
operator|.
name|INDEXED
argument_list|,
name|ScriptType
operator|.
name|INLINE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMultipleScriptTypeGenericSettings
specifier|public
name|void
name|testMultipleScriptTypeGenericSettings
parameter_list|()
block|{
name|ImmutableSettings
operator|.
name|Builder
name|builder
init|=
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"script.file"
argument_list|,
name|ScriptMode
operator|.
name|SANDBOX
argument_list|)
operator|.
name|put
argument_list|(
literal|"script.inline"
argument_list|,
name|randomFrom
argument_list|(
name|DISABLE_VALUES
argument_list|)
argument_list|)
decl_stmt|;
name|this
operator|.
name|scriptModes
operator|=
operator|new
name|ScriptModes
argument_list|(
name|scriptEngines
argument_list|,
name|builder
operator|.
name|build
argument_list|()
argument_list|,
name|Loggers
operator|.
name|getLogger
argument_list|(
name|ScriptModesTests
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertScriptModesAllOps
argument_list|(
name|ScriptMode
operator|.
name|SANDBOX
argument_list|,
name|ALL_LANGS
argument_list|,
name|ScriptType
operator|.
name|FILE
argument_list|)
expr_stmt|;
name|assertScriptModesAllOps
argument_list|(
name|ScriptMode
operator|.
name|SANDBOX
argument_list|,
name|ALL_LANGS
argument_list|,
name|ScriptType
operator|.
name|INDEXED
argument_list|)
expr_stmt|;
name|assertScriptModesAllOps
argument_list|(
name|ScriptMode
operator|.
name|OFF
argument_list|,
name|ALL_LANGS
argument_list|,
name|ScriptType
operator|.
name|INLINE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEnableMappingGenericSettings
specifier|public
name|void
name|testEnableMappingGenericSettings
parameter_list|()
block|{
name|ImmutableSettings
operator|.
name|Builder
name|builder
init|=
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"script.mapping"
argument_list|,
name|randomFrom
argument_list|(
name|ENABLE_VALUES
argument_list|)
argument_list|)
decl_stmt|;
name|this
operator|.
name|scriptModes
operator|=
operator|new
name|ScriptModes
argument_list|(
name|scriptEngines
argument_list|,
name|builder
operator|.
name|build
argument_list|()
argument_list|,
name|Loggers
operator|.
name|getLogger
argument_list|(
name|ScriptModesTests
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertScriptModesAllTypes
argument_list|(
name|ScriptMode
operator|.
name|ON
argument_list|,
name|ALL_LANGS
argument_list|,
name|ScriptContext
operator|.
name|MAPPING
argument_list|)
expr_stmt|;
name|assertScriptModes
argument_list|(
name|ScriptMode
operator|.
name|ON
argument_list|,
name|ALL_LANGS
argument_list|,
operator|new
name|ScriptType
index|[]
block|{
name|ScriptType
operator|.
name|FILE
block|}
argument_list|,
name|ScriptContext
operator|.
name|AGGS
argument_list|,
name|ScriptContext
operator|.
name|SEARCH
argument_list|,
name|ScriptContext
operator|.
name|UPDATE
argument_list|)
expr_stmt|;
name|assertScriptModes
argument_list|(
name|ScriptMode
operator|.
name|SANDBOX
argument_list|,
name|ALL_LANGS
argument_list|,
operator|new
name|ScriptType
index|[]
block|{
name|ScriptType
operator|.
name|INDEXED
block|,
name|ScriptType
operator|.
name|INLINE
block|}
argument_list|,
name|ScriptContext
operator|.
name|AGGS
argument_list|,
name|ScriptContext
operator|.
name|SEARCH
argument_list|,
name|ScriptContext
operator|.
name|UPDATE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDisableMappingGenericSettings
specifier|public
name|void
name|testDisableMappingGenericSettings
parameter_list|()
block|{
name|ImmutableSettings
operator|.
name|Builder
name|builder
init|=
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"script.mapping"
argument_list|,
name|randomFrom
argument_list|(
name|DISABLE_VALUES
argument_list|)
argument_list|)
decl_stmt|;
name|this
operator|.
name|scriptModes
operator|=
operator|new
name|ScriptModes
argument_list|(
name|scriptEngines
argument_list|,
name|builder
operator|.
name|build
argument_list|()
argument_list|,
name|Loggers
operator|.
name|getLogger
argument_list|(
name|ScriptModesTests
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertScriptModesAllTypes
argument_list|(
name|ScriptMode
operator|.
name|OFF
argument_list|,
name|ALL_LANGS
argument_list|,
name|ScriptContext
operator|.
name|MAPPING
argument_list|)
expr_stmt|;
name|assertScriptModes
argument_list|(
name|ScriptMode
operator|.
name|ON
argument_list|,
name|ALL_LANGS
argument_list|,
operator|new
name|ScriptType
index|[]
block|{
name|ScriptType
operator|.
name|FILE
block|}
argument_list|,
name|ScriptContext
operator|.
name|AGGS
argument_list|,
name|ScriptContext
operator|.
name|SEARCH
argument_list|,
name|ScriptContext
operator|.
name|UPDATE
argument_list|)
expr_stmt|;
name|assertScriptModes
argument_list|(
name|ScriptMode
operator|.
name|SANDBOX
argument_list|,
name|ALL_LANGS
argument_list|,
operator|new
name|ScriptType
index|[]
block|{
name|ScriptType
operator|.
name|INDEXED
block|,
name|ScriptType
operator|.
name|INLINE
block|}
argument_list|,
name|ScriptContext
operator|.
name|AGGS
argument_list|,
name|ScriptContext
operator|.
name|SEARCH
argument_list|,
name|ScriptContext
operator|.
name|UPDATE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSandboxMappingGenericSettings
specifier|public
name|void
name|testSandboxMappingGenericSettings
parameter_list|()
block|{
name|ImmutableSettings
operator|.
name|Builder
name|builder
init|=
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"script.mapping"
argument_list|,
name|ScriptMode
operator|.
name|SANDBOX
argument_list|)
decl_stmt|;
name|this
operator|.
name|scriptModes
operator|=
operator|new
name|ScriptModes
argument_list|(
name|scriptEngines
argument_list|,
name|builder
operator|.
name|build
argument_list|()
argument_list|,
name|Loggers
operator|.
name|getLogger
argument_list|(
name|ScriptModesTests
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertScriptModesAllTypes
argument_list|(
name|ScriptMode
operator|.
name|SANDBOX
argument_list|,
name|ALL_LANGS
argument_list|,
name|ScriptContext
operator|.
name|MAPPING
argument_list|)
expr_stmt|;
name|assertScriptModes
argument_list|(
name|ScriptMode
operator|.
name|ON
argument_list|,
name|ALL_LANGS
argument_list|,
operator|new
name|ScriptType
index|[]
block|{
name|ScriptType
operator|.
name|FILE
block|}
argument_list|,
name|ScriptContext
operator|.
name|AGGS
argument_list|,
name|ScriptContext
operator|.
name|SEARCH
argument_list|,
name|ScriptContext
operator|.
name|UPDATE
argument_list|)
expr_stmt|;
name|assertScriptModes
argument_list|(
name|ScriptMode
operator|.
name|SANDBOX
argument_list|,
name|ALL_LANGS
argument_list|,
operator|new
name|ScriptType
index|[]
block|{
name|ScriptType
operator|.
name|INDEXED
block|,
name|ScriptType
operator|.
name|INLINE
block|}
argument_list|,
name|ScriptContext
operator|.
name|AGGS
argument_list|,
name|ScriptContext
operator|.
name|SEARCH
argument_list|,
name|ScriptContext
operator|.
name|UPDATE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEnableSearchGenericSettings
specifier|public
name|void
name|testEnableSearchGenericSettings
parameter_list|()
block|{
name|ImmutableSettings
operator|.
name|Builder
name|builder
init|=
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"script.search"
argument_list|,
name|randomFrom
argument_list|(
name|ENABLE_VALUES
argument_list|)
argument_list|)
decl_stmt|;
name|this
operator|.
name|scriptModes
operator|=
operator|new
name|ScriptModes
argument_list|(
name|scriptEngines
argument_list|,
name|builder
operator|.
name|build
argument_list|()
argument_list|,
name|Loggers
operator|.
name|getLogger
argument_list|(
name|ScriptModesTests
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertScriptModesAllTypes
argument_list|(
name|ScriptMode
operator|.
name|ON
argument_list|,
name|ALL_LANGS
argument_list|,
name|ScriptContext
operator|.
name|SEARCH
argument_list|)
expr_stmt|;
name|assertScriptModes
argument_list|(
name|ScriptMode
operator|.
name|ON
argument_list|,
name|ALL_LANGS
argument_list|,
operator|new
name|ScriptType
index|[]
block|{
name|ScriptType
operator|.
name|FILE
block|}
argument_list|,
name|ScriptContext
operator|.
name|AGGS
argument_list|,
name|ScriptContext
operator|.
name|MAPPING
argument_list|,
name|ScriptContext
operator|.
name|UPDATE
argument_list|)
expr_stmt|;
name|assertScriptModes
argument_list|(
name|ScriptMode
operator|.
name|SANDBOX
argument_list|,
name|ALL_LANGS
argument_list|,
operator|new
name|ScriptType
index|[]
block|{
name|ScriptType
operator|.
name|INDEXED
block|,
name|ScriptType
operator|.
name|INLINE
block|}
argument_list|,
name|ScriptContext
operator|.
name|AGGS
argument_list|,
name|ScriptContext
operator|.
name|MAPPING
argument_list|,
name|ScriptContext
operator|.
name|UPDATE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDisableSearchGenericSettings
specifier|public
name|void
name|testDisableSearchGenericSettings
parameter_list|()
block|{
name|ImmutableSettings
operator|.
name|Builder
name|builder
init|=
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"script.search"
argument_list|,
name|randomFrom
argument_list|(
name|DISABLE_VALUES
argument_list|)
argument_list|)
decl_stmt|;
name|this
operator|.
name|scriptModes
operator|=
operator|new
name|ScriptModes
argument_list|(
name|scriptEngines
argument_list|,
name|builder
operator|.
name|build
argument_list|()
argument_list|,
name|Loggers
operator|.
name|getLogger
argument_list|(
name|ScriptModesTests
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertScriptModesAllTypes
argument_list|(
name|ScriptMode
operator|.
name|OFF
argument_list|,
name|ALL_LANGS
argument_list|,
name|ScriptContext
operator|.
name|SEARCH
argument_list|)
expr_stmt|;
name|assertScriptModes
argument_list|(
name|ScriptMode
operator|.
name|ON
argument_list|,
name|ALL_LANGS
argument_list|,
operator|new
name|ScriptType
index|[]
block|{
name|ScriptType
operator|.
name|FILE
block|}
argument_list|,
name|ScriptContext
operator|.
name|AGGS
argument_list|,
name|ScriptContext
operator|.
name|MAPPING
argument_list|,
name|ScriptContext
operator|.
name|UPDATE
argument_list|)
expr_stmt|;
name|assertScriptModes
argument_list|(
name|ScriptMode
operator|.
name|SANDBOX
argument_list|,
name|ALL_LANGS
argument_list|,
operator|new
name|ScriptType
index|[]
block|{
name|ScriptType
operator|.
name|INDEXED
block|,
name|ScriptType
operator|.
name|INLINE
block|}
argument_list|,
name|ScriptContext
operator|.
name|AGGS
argument_list|,
name|ScriptContext
operator|.
name|MAPPING
argument_list|,
name|ScriptContext
operator|.
name|UPDATE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSandboxSearchGenericSettings
specifier|public
name|void
name|testSandboxSearchGenericSettings
parameter_list|()
block|{
name|ImmutableSettings
operator|.
name|Builder
name|builder
init|=
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"script.search"
argument_list|,
name|ScriptMode
operator|.
name|SANDBOX
argument_list|)
decl_stmt|;
name|this
operator|.
name|scriptModes
operator|=
operator|new
name|ScriptModes
argument_list|(
name|scriptEngines
argument_list|,
name|builder
operator|.
name|build
argument_list|()
argument_list|,
name|Loggers
operator|.
name|getLogger
argument_list|(
name|ScriptModesTests
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertScriptModesAllTypes
argument_list|(
name|ScriptMode
operator|.
name|SANDBOX
argument_list|,
name|ALL_LANGS
argument_list|,
name|ScriptContext
operator|.
name|SEARCH
argument_list|)
expr_stmt|;
name|assertScriptModes
argument_list|(
name|ScriptMode
operator|.
name|ON
argument_list|,
name|ALL_LANGS
argument_list|,
operator|new
name|ScriptType
index|[]
block|{
name|ScriptType
operator|.
name|FILE
block|}
argument_list|,
name|ScriptContext
operator|.
name|AGGS
argument_list|,
name|ScriptContext
operator|.
name|MAPPING
argument_list|,
name|ScriptContext
operator|.
name|UPDATE
argument_list|)
expr_stmt|;
name|assertScriptModes
argument_list|(
name|ScriptMode
operator|.
name|SANDBOX
argument_list|,
name|ALL_LANGS
argument_list|,
operator|new
name|ScriptType
index|[]
block|{
name|ScriptType
operator|.
name|INDEXED
block|,
name|ScriptType
operator|.
name|INLINE
block|}
argument_list|,
name|ScriptContext
operator|.
name|AGGS
argument_list|,
name|ScriptContext
operator|.
name|MAPPING
argument_list|,
name|ScriptContext
operator|.
name|UPDATE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEnableAggsGenericSettings
specifier|public
name|void
name|testEnableAggsGenericSettings
parameter_list|()
block|{
name|ImmutableSettings
operator|.
name|Builder
name|builder
init|=
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"script.aggs"
argument_list|,
name|randomFrom
argument_list|(
name|ENABLE_VALUES
argument_list|)
argument_list|)
decl_stmt|;
name|this
operator|.
name|scriptModes
operator|=
operator|new
name|ScriptModes
argument_list|(
name|scriptEngines
argument_list|,
name|builder
operator|.
name|build
argument_list|()
argument_list|,
name|Loggers
operator|.
name|getLogger
argument_list|(
name|ScriptModesTests
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertScriptModesAllTypes
argument_list|(
name|ScriptMode
operator|.
name|ON
argument_list|,
name|ALL_LANGS
argument_list|,
name|ScriptContext
operator|.
name|AGGS
argument_list|)
expr_stmt|;
name|assertScriptModes
argument_list|(
name|ScriptMode
operator|.
name|ON
argument_list|,
name|ALL_LANGS
argument_list|,
operator|new
name|ScriptType
index|[]
block|{
name|ScriptType
operator|.
name|FILE
block|}
argument_list|,
name|ScriptContext
operator|.
name|SEARCH
argument_list|,
name|ScriptContext
operator|.
name|MAPPING
argument_list|,
name|ScriptContext
operator|.
name|UPDATE
argument_list|)
expr_stmt|;
name|assertScriptModes
argument_list|(
name|ScriptMode
operator|.
name|SANDBOX
argument_list|,
name|ALL_LANGS
argument_list|,
operator|new
name|ScriptType
index|[]
block|{
name|ScriptType
operator|.
name|INDEXED
block|,
name|ScriptType
operator|.
name|INLINE
block|}
argument_list|,
name|ScriptContext
operator|.
name|SEARCH
argument_list|,
name|ScriptContext
operator|.
name|MAPPING
argument_list|,
name|ScriptContext
operator|.
name|UPDATE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDisableAggsGenericSettings
specifier|public
name|void
name|testDisableAggsGenericSettings
parameter_list|()
block|{
name|ImmutableSettings
operator|.
name|Builder
name|builder
init|=
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"script.aggs"
argument_list|,
name|randomFrom
argument_list|(
name|DISABLE_VALUES
argument_list|)
argument_list|)
decl_stmt|;
name|this
operator|.
name|scriptModes
operator|=
operator|new
name|ScriptModes
argument_list|(
name|scriptEngines
argument_list|,
name|builder
operator|.
name|build
argument_list|()
argument_list|,
name|Loggers
operator|.
name|getLogger
argument_list|(
name|ScriptModesTests
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertScriptModesAllTypes
argument_list|(
name|ScriptMode
operator|.
name|OFF
argument_list|,
name|ALL_LANGS
argument_list|,
name|ScriptContext
operator|.
name|AGGS
argument_list|)
expr_stmt|;
name|assertScriptModes
argument_list|(
name|ScriptMode
operator|.
name|ON
argument_list|,
name|ALL_LANGS
argument_list|,
operator|new
name|ScriptType
index|[]
block|{
name|ScriptType
operator|.
name|FILE
block|}
argument_list|,
name|ScriptContext
operator|.
name|SEARCH
argument_list|,
name|ScriptContext
operator|.
name|MAPPING
argument_list|,
name|ScriptContext
operator|.
name|UPDATE
argument_list|)
expr_stmt|;
name|assertScriptModes
argument_list|(
name|ScriptMode
operator|.
name|SANDBOX
argument_list|,
name|ALL_LANGS
argument_list|,
operator|new
name|ScriptType
index|[]
block|{
name|ScriptType
operator|.
name|INDEXED
block|,
name|ScriptType
operator|.
name|INLINE
block|}
argument_list|,
name|ScriptContext
operator|.
name|SEARCH
argument_list|,
name|ScriptContext
operator|.
name|MAPPING
argument_list|,
name|ScriptContext
operator|.
name|UPDATE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSandboxAggsGenericSettings
specifier|public
name|void
name|testSandboxAggsGenericSettings
parameter_list|()
block|{
name|ImmutableSettings
operator|.
name|Builder
name|builder
init|=
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"script.aggs"
argument_list|,
name|ScriptMode
operator|.
name|SANDBOX
argument_list|)
decl_stmt|;
name|this
operator|.
name|scriptModes
operator|=
operator|new
name|ScriptModes
argument_list|(
name|scriptEngines
argument_list|,
name|builder
operator|.
name|build
argument_list|()
argument_list|,
name|Loggers
operator|.
name|getLogger
argument_list|(
name|ScriptModesTests
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertScriptModesAllTypes
argument_list|(
name|ScriptMode
operator|.
name|SANDBOX
argument_list|,
name|ALL_LANGS
argument_list|,
name|ScriptContext
operator|.
name|AGGS
argument_list|)
expr_stmt|;
name|assertScriptModes
argument_list|(
name|ScriptMode
operator|.
name|ON
argument_list|,
name|ALL_LANGS
argument_list|,
operator|new
name|ScriptType
index|[]
block|{
name|ScriptType
operator|.
name|FILE
block|}
argument_list|,
name|ScriptContext
operator|.
name|SEARCH
argument_list|,
name|ScriptContext
operator|.
name|MAPPING
argument_list|,
name|ScriptContext
operator|.
name|UPDATE
argument_list|)
expr_stmt|;
name|assertScriptModes
argument_list|(
name|ScriptMode
operator|.
name|SANDBOX
argument_list|,
name|ALL_LANGS
argument_list|,
operator|new
name|ScriptType
index|[]
block|{
name|ScriptType
operator|.
name|INDEXED
block|,
name|ScriptType
operator|.
name|INLINE
block|}
argument_list|,
name|ScriptContext
operator|.
name|SEARCH
argument_list|,
name|ScriptContext
operator|.
name|MAPPING
argument_list|,
name|ScriptContext
operator|.
name|UPDATE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEnableUpdateGenericSettings
specifier|public
name|void
name|testEnableUpdateGenericSettings
parameter_list|()
block|{
name|ImmutableSettings
operator|.
name|Builder
name|builder
init|=
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"script.update"
argument_list|,
name|randomFrom
argument_list|(
name|ENABLE_VALUES
argument_list|)
argument_list|)
decl_stmt|;
name|this
operator|.
name|scriptModes
operator|=
operator|new
name|ScriptModes
argument_list|(
name|scriptEngines
argument_list|,
name|builder
operator|.
name|build
argument_list|()
argument_list|,
name|Loggers
operator|.
name|getLogger
argument_list|(
name|ScriptModesTests
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertScriptModesAllTypes
argument_list|(
name|ScriptMode
operator|.
name|ON
argument_list|,
name|ALL_LANGS
argument_list|,
name|ScriptContext
operator|.
name|UPDATE
argument_list|)
expr_stmt|;
name|assertScriptModes
argument_list|(
name|ScriptMode
operator|.
name|ON
argument_list|,
name|ALL_LANGS
argument_list|,
operator|new
name|ScriptType
index|[]
block|{
name|ScriptType
operator|.
name|FILE
block|}
argument_list|,
name|ScriptContext
operator|.
name|SEARCH
argument_list|,
name|ScriptContext
operator|.
name|MAPPING
argument_list|,
name|ScriptContext
operator|.
name|AGGS
argument_list|)
expr_stmt|;
name|assertScriptModes
argument_list|(
name|ScriptMode
operator|.
name|SANDBOX
argument_list|,
name|ALL_LANGS
argument_list|,
operator|new
name|ScriptType
index|[]
block|{
name|ScriptType
operator|.
name|INDEXED
block|,
name|ScriptType
operator|.
name|INLINE
block|}
argument_list|,
name|ScriptContext
operator|.
name|SEARCH
argument_list|,
name|ScriptContext
operator|.
name|MAPPING
argument_list|,
name|ScriptContext
operator|.
name|AGGS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDisableUpdateGenericSettings
specifier|public
name|void
name|testDisableUpdateGenericSettings
parameter_list|()
block|{
name|ImmutableSettings
operator|.
name|Builder
name|builder
init|=
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"script.update"
argument_list|,
name|randomFrom
argument_list|(
name|DISABLE_VALUES
argument_list|)
argument_list|)
decl_stmt|;
name|this
operator|.
name|scriptModes
operator|=
operator|new
name|ScriptModes
argument_list|(
name|scriptEngines
argument_list|,
name|builder
operator|.
name|build
argument_list|()
argument_list|,
name|Loggers
operator|.
name|getLogger
argument_list|(
name|ScriptModesTests
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertScriptModesAllTypes
argument_list|(
name|ScriptMode
operator|.
name|OFF
argument_list|,
name|ALL_LANGS
argument_list|,
name|ScriptContext
operator|.
name|UPDATE
argument_list|)
expr_stmt|;
name|assertScriptModes
argument_list|(
name|ScriptMode
operator|.
name|ON
argument_list|,
name|ALL_LANGS
argument_list|,
operator|new
name|ScriptType
index|[]
block|{
name|ScriptType
operator|.
name|FILE
block|}
argument_list|,
name|ScriptContext
operator|.
name|SEARCH
argument_list|,
name|ScriptContext
operator|.
name|MAPPING
argument_list|,
name|ScriptContext
operator|.
name|AGGS
argument_list|)
expr_stmt|;
name|assertScriptModes
argument_list|(
name|ScriptMode
operator|.
name|SANDBOX
argument_list|,
name|ALL_LANGS
argument_list|,
operator|new
name|ScriptType
index|[]
block|{
name|ScriptType
operator|.
name|INDEXED
block|,
name|ScriptType
operator|.
name|INLINE
block|}
argument_list|,
name|ScriptContext
operator|.
name|SEARCH
argument_list|,
name|ScriptContext
operator|.
name|MAPPING
argument_list|,
name|ScriptContext
operator|.
name|AGGS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSandboxUpdateGenericSettings
specifier|public
name|void
name|testSandboxUpdateGenericSettings
parameter_list|()
block|{
name|ImmutableSettings
operator|.
name|Builder
name|builder
init|=
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"script.update"
argument_list|,
name|ScriptMode
operator|.
name|SANDBOX
argument_list|)
decl_stmt|;
name|this
operator|.
name|scriptModes
operator|=
operator|new
name|ScriptModes
argument_list|(
name|scriptEngines
argument_list|,
name|builder
operator|.
name|build
argument_list|()
argument_list|,
name|Loggers
operator|.
name|getLogger
argument_list|(
name|ScriptModesTests
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertScriptModesAllTypes
argument_list|(
name|ScriptMode
operator|.
name|SANDBOX
argument_list|,
name|ALL_LANGS
argument_list|,
name|ScriptContext
operator|.
name|UPDATE
argument_list|)
expr_stmt|;
name|assertScriptModes
argument_list|(
name|ScriptMode
operator|.
name|ON
argument_list|,
name|ALL_LANGS
argument_list|,
operator|new
name|ScriptType
index|[]
block|{
name|ScriptType
operator|.
name|FILE
block|}
argument_list|,
name|ScriptContext
operator|.
name|SEARCH
argument_list|,
name|ScriptContext
operator|.
name|MAPPING
argument_list|,
name|ScriptContext
operator|.
name|AGGS
argument_list|)
expr_stmt|;
name|assertScriptModes
argument_list|(
name|ScriptMode
operator|.
name|SANDBOX
argument_list|,
name|ALL_LANGS
argument_list|,
operator|new
name|ScriptType
index|[]
block|{
name|ScriptType
operator|.
name|INDEXED
block|,
name|ScriptType
operator|.
name|INLINE
block|}
argument_list|,
name|ScriptContext
operator|.
name|SEARCH
argument_list|,
name|ScriptContext
operator|.
name|MAPPING
argument_list|,
name|ScriptContext
operator|.
name|AGGS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMultipleScriptContextGenericSettings
specifier|public
name|void
name|testMultipleScriptContextGenericSettings
parameter_list|()
block|{
name|ImmutableSettings
operator|.
name|Builder
name|builder
init|=
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"script.update"
argument_list|,
name|ScriptMode
operator|.
name|SANDBOX
argument_list|)
operator|.
name|put
argument_list|(
literal|"script.aggs"
argument_list|,
name|randomFrom
argument_list|(
name|DISABLE_VALUES
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
literal|"script.search"
argument_list|,
name|randomFrom
argument_list|(
name|ENABLE_VALUES
argument_list|)
argument_list|)
decl_stmt|;
name|this
operator|.
name|scriptModes
operator|=
operator|new
name|ScriptModes
argument_list|(
name|scriptEngines
argument_list|,
name|builder
operator|.
name|build
argument_list|()
argument_list|,
name|Loggers
operator|.
name|getLogger
argument_list|(
name|ScriptModesTests
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertScriptModesAllTypes
argument_list|(
name|ScriptMode
operator|.
name|SANDBOX
argument_list|,
name|ALL_LANGS
argument_list|,
name|ScriptContext
operator|.
name|UPDATE
argument_list|)
expr_stmt|;
name|assertScriptModesAllTypes
argument_list|(
name|ScriptMode
operator|.
name|OFF
argument_list|,
name|ALL_LANGS
argument_list|,
name|ScriptContext
operator|.
name|AGGS
argument_list|)
expr_stmt|;
name|assertScriptModesAllTypes
argument_list|(
name|ScriptMode
operator|.
name|ON
argument_list|,
name|ALL_LANGS
argument_list|,
name|ScriptContext
operator|.
name|SEARCH
argument_list|)
expr_stmt|;
name|assertScriptModes
argument_list|(
name|ScriptMode
operator|.
name|ON
argument_list|,
name|ALL_LANGS
argument_list|,
operator|new
name|ScriptType
index|[]
block|{
name|ScriptType
operator|.
name|FILE
block|}
argument_list|,
name|ScriptContext
operator|.
name|MAPPING
argument_list|)
expr_stmt|;
name|assertScriptModes
argument_list|(
name|ScriptMode
operator|.
name|SANDBOX
argument_list|,
name|ALL_LANGS
argument_list|,
operator|new
name|ScriptType
index|[]
block|{
name|ScriptType
operator|.
name|INDEXED
block|,
name|ScriptType
operator|.
name|INLINE
block|}
argument_list|,
name|ScriptContext
operator|.
name|MAPPING
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testConflictingScriptTypeAndOpGenericSettings
specifier|public
name|void
name|testConflictingScriptTypeAndOpGenericSettings
parameter_list|()
block|{
name|ImmutableSettings
operator|.
name|Builder
name|builder
init|=
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"script.update"
argument_list|,
name|randomFrom
argument_list|(
name|DISABLE_VALUES
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
literal|"script.indexed"
argument_list|,
name|randomFrom
argument_list|(
name|ENABLE_VALUES
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
literal|"script.inline"
argument_list|,
name|ScriptMode
operator|.
name|SANDBOX
argument_list|)
decl_stmt|;
comment|//operations generic settings have precedence over script type generic settings
name|this
operator|.
name|scriptModes
operator|=
operator|new
name|ScriptModes
argument_list|(
name|scriptEngines
argument_list|,
name|builder
operator|.
name|build
argument_list|()
argument_list|,
name|Loggers
operator|.
name|getLogger
argument_list|(
name|ScriptModesTests
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertScriptModesAllTypes
argument_list|(
name|ScriptMode
operator|.
name|OFF
argument_list|,
name|ALL_LANGS
argument_list|,
name|ScriptContext
operator|.
name|UPDATE
argument_list|)
expr_stmt|;
name|assertScriptModes
argument_list|(
name|ScriptMode
operator|.
name|ON
argument_list|,
name|ALL_LANGS
argument_list|,
operator|new
name|ScriptType
index|[]
block|{
name|ScriptType
operator|.
name|FILE
block|,
name|ScriptType
operator|.
name|INDEXED
block|}
argument_list|,
name|ScriptContext
operator|.
name|MAPPING
argument_list|,
name|ScriptContext
operator|.
name|AGGS
argument_list|,
name|ScriptContext
operator|.
name|SEARCH
argument_list|)
expr_stmt|;
name|assertScriptModes
argument_list|(
name|ScriptMode
operator|.
name|SANDBOX
argument_list|,
name|ALL_LANGS
argument_list|,
operator|new
name|ScriptType
index|[]
block|{
name|ScriptType
operator|.
name|INLINE
block|}
argument_list|,
name|ScriptContext
operator|.
name|MAPPING
argument_list|,
name|ScriptContext
operator|.
name|AGGS
argument_list|,
name|ScriptContext
operator|.
name|SEARCH
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEngineSpecificSettings
specifier|public
name|void
name|testEngineSpecificSettings
parameter_list|()
block|{
name|ImmutableSettings
operator|.
name|Builder
name|builder
init|=
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|specificEngineOpSettings
argument_list|(
name|GroovyScriptEngineService
operator|.
name|NAME
argument_list|,
name|ScriptType
operator|.
name|INLINE
argument_list|,
name|ScriptContext
operator|.
name|MAPPING
argument_list|)
argument_list|,
name|randomFrom
argument_list|(
name|DISABLE_VALUES
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|specificEngineOpSettings
argument_list|(
name|GroovyScriptEngineService
operator|.
name|NAME
argument_list|,
name|ScriptType
operator|.
name|INLINE
argument_list|,
name|ScriptContext
operator|.
name|UPDATE
argument_list|)
argument_list|,
name|randomFrom
argument_list|(
name|DISABLE_VALUES
argument_list|)
argument_list|)
decl_stmt|;
name|ImmutableSet
argument_list|<
name|String
argument_list|>
name|groovyLangSet
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
name|GroovyScriptEngineService
operator|.
name|NAME
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|allButGroovyLangSet
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|ALL_LANGS
argument_list|)
decl_stmt|;
name|allButGroovyLangSet
operator|.
name|remove
argument_list|(
name|GroovyScriptEngineService
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|this
operator|.
name|scriptModes
operator|=
operator|new
name|ScriptModes
argument_list|(
name|scriptEngines
argument_list|,
name|builder
operator|.
name|build
argument_list|()
argument_list|,
name|Loggers
operator|.
name|getLogger
argument_list|(
name|ScriptModesTests
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertScriptModes
argument_list|(
name|ScriptMode
operator|.
name|OFF
argument_list|,
name|groovyLangSet
argument_list|,
operator|new
name|ScriptType
index|[]
block|{
name|ScriptType
operator|.
name|INLINE
block|}
argument_list|,
name|ScriptContext
operator|.
name|MAPPING
argument_list|,
name|ScriptContext
operator|.
name|UPDATE
argument_list|)
expr_stmt|;
name|assertScriptModes
argument_list|(
name|ScriptMode
operator|.
name|SANDBOX
argument_list|,
name|groovyLangSet
argument_list|,
operator|new
name|ScriptType
index|[]
block|{
name|ScriptType
operator|.
name|INLINE
block|}
argument_list|,
name|ScriptContext
operator|.
name|SEARCH
argument_list|,
name|ScriptContext
operator|.
name|AGGS
argument_list|)
expr_stmt|;
name|assertScriptModesAllOps
argument_list|(
name|ScriptMode
operator|.
name|SANDBOX
argument_list|,
name|allButGroovyLangSet
argument_list|,
name|ScriptType
operator|.
name|INLINE
argument_list|)
expr_stmt|;
name|assertScriptModesAllOps
argument_list|(
name|ScriptMode
operator|.
name|SANDBOX
argument_list|,
name|ALL_LANGS
argument_list|,
name|ScriptType
operator|.
name|INDEXED
argument_list|)
expr_stmt|;
name|assertScriptModesAllOps
argument_list|(
name|ScriptMode
operator|.
name|ON
argument_list|,
name|ALL_LANGS
argument_list|,
name|ScriptType
operator|.
name|FILE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInteractionBetweenGenericAndEngineSpecificSettings
specifier|public
name|void
name|testInteractionBetweenGenericAndEngineSpecificSettings
parameter_list|()
block|{
name|ImmutableSettings
operator|.
name|Builder
name|builder
init|=
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"script.inline"
argument_list|,
name|randomFrom
argument_list|(
name|DISABLE_VALUES
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|specificEngineOpSettings
argument_list|(
name|MustacheScriptEngineService
operator|.
name|NAME
argument_list|,
name|ScriptType
operator|.
name|INLINE
argument_list|,
name|ScriptContext
operator|.
name|AGGS
argument_list|)
argument_list|,
name|randomFrom
argument_list|(
name|ENABLE_VALUES
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|specificEngineOpSettings
argument_list|(
name|MustacheScriptEngineService
operator|.
name|NAME
argument_list|,
name|ScriptType
operator|.
name|INLINE
argument_list|,
name|ScriptContext
operator|.
name|SEARCH
argument_list|)
argument_list|,
name|randomFrom
argument_list|(
name|ENABLE_VALUES
argument_list|)
argument_list|)
decl_stmt|;
name|ImmutableSet
argument_list|<
name|String
argument_list|>
name|mustacheLangSet
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
name|MustacheScriptEngineService
operator|.
name|NAME
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|allButMustacheLangSet
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|ALL_LANGS
argument_list|)
decl_stmt|;
name|allButMustacheLangSet
operator|.
name|remove
argument_list|(
name|MustacheScriptEngineService
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|this
operator|.
name|scriptModes
operator|=
operator|new
name|ScriptModes
argument_list|(
name|scriptEngines
argument_list|,
name|builder
operator|.
name|build
argument_list|()
argument_list|,
name|Loggers
operator|.
name|getLogger
argument_list|(
name|ScriptModesTests
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertScriptModes
argument_list|(
name|ScriptMode
operator|.
name|ON
argument_list|,
name|mustacheLangSet
argument_list|,
operator|new
name|ScriptType
index|[]
block|{
name|ScriptType
operator|.
name|INLINE
block|}
argument_list|,
name|ScriptContext
operator|.
name|AGGS
argument_list|,
name|ScriptContext
operator|.
name|SEARCH
argument_list|)
expr_stmt|;
name|assertScriptModes
argument_list|(
name|ScriptMode
operator|.
name|OFF
argument_list|,
name|mustacheLangSet
argument_list|,
operator|new
name|ScriptType
index|[]
block|{
name|ScriptType
operator|.
name|INLINE
block|}
argument_list|,
name|ScriptContext
operator|.
name|MAPPING
argument_list|,
name|ScriptContext
operator|.
name|UPDATE
argument_list|)
expr_stmt|;
name|assertScriptModesAllOps
argument_list|(
name|ScriptMode
operator|.
name|OFF
argument_list|,
name|allButMustacheLangSet
argument_list|,
name|ScriptType
operator|.
name|INLINE
argument_list|)
expr_stmt|;
name|assertScriptModesAllOps
argument_list|(
name|ScriptMode
operator|.
name|SANDBOX
argument_list|,
name|ALL_LANGS
argument_list|,
name|ScriptType
operator|.
name|INDEXED
argument_list|)
expr_stmt|;
name|assertScriptModesAllOps
argument_list|(
name|ScriptMode
operator|.
name|ON
argument_list|,
name|ALL_LANGS
argument_list|,
name|ScriptType
operator|.
name|FILE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDefaultSettingsToString
specifier|public
name|void
name|testDefaultSettingsToString
parameter_list|()
block|{
name|assertAllSettingsWereChecked
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|scriptModes
operator|=
operator|new
name|ScriptModes
argument_list|(
name|scriptEngines
argument_list|,
name|ImmutableSettings
operator|.
name|EMPTY
argument_list|,
name|Loggers
operator|.
name|getLogger
argument_list|(
name|ScriptModesTests
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|scriptModes
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"script.engine.custom.file.aggs: on\n"
operator|+
literal|"script.engine.custom.file.mapping: on\n"
operator|+
literal|"script.engine.custom.file.search: on\n"
operator|+
literal|"script.engine.custom.file.update: on\n"
operator|+
literal|"script.engine.custom.indexed.aggs: sandbox\n"
operator|+
literal|"script.engine.custom.indexed.mapping: sandbox\n"
operator|+
literal|"script.engine.custom.indexed.search: sandbox\n"
operator|+
literal|"script.engine.custom.indexed.update: sandbox\n"
operator|+
literal|"script.engine.custom.inline.aggs: sandbox\n"
operator|+
literal|"script.engine.custom.inline.mapping: sandbox\n"
operator|+
literal|"script.engine.custom.inline.search: sandbox\n"
operator|+
literal|"script.engine.custom.inline.update: sandbox\n"
operator|+
literal|"script.engine.expression.file.aggs: on\n"
operator|+
literal|"script.engine.expression.file.mapping: on\n"
operator|+
literal|"script.engine.expression.file.search: on\n"
operator|+
literal|"script.engine.expression.file.update: on\n"
operator|+
literal|"script.engine.expression.indexed.aggs: sandbox\n"
operator|+
literal|"script.engine.expression.indexed.mapping: sandbox\n"
operator|+
literal|"script.engine.expression.indexed.search: sandbox\n"
operator|+
literal|"script.engine.expression.indexed.update: sandbox\n"
operator|+
literal|"script.engine.expression.inline.aggs: sandbox\n"
operator|+
literal|"script.engine.expression.inline.mapping: sandbox\n"
operator|+
literal|"script.engine.expression.inline.search: sandbox\n"
operator|+
literal|"script.engine.expression.inline.update: sandbox\n"
operator|+
literal|"script.engine.groovy.file.aggs: on\n"
operator|+
literal|"script.engine.groovy.file.mapping: on\n"
operator|+
literal|"script.engine.groovy.file.search: on\n"
operator|+
literal|"script.engine.groovy.file.update: on\n"
operator|+
literal|"script.engine.groovy.indexed.aggs: sandbox\n"
operator|+
literal|"script.engine.groovy.indexed.mapping: sandbox\n"
operator|+
literal|"script.engine.groovy.indexed.search: sandbox\n"
operator|+
literal|"script.engine.groovy.indexed.update: sandbox\n"
operator|+
literal|"script.engine.groovy.inline.aggs: sandbox\n"
operator|+
literal|"script.engine.groovy.inline.mapping: sandbox\n"
operator|+
literal|"script.engine.groovy.inline.search: sandbox\n"
operator|+
literal|"script.engine.groovy.inline.update: sandbox\n"
operator|+
literal|"script.engine.mustache.file.aggs: on\n"
operator|+
literal|"script.engine.mustache.file.mapping: on\n"
operator|+
literal|"script.engine.mustache.file.search: on\n"
operator|+
literal|"script.engine.mustache.file.update: on\n"
operator|+
literal|"script.engine.mustache.indexed.aggs: sandbox\n"
operator|+
literal|"script.engine.mustache.indexed.mapping: sandbox\n"
operator|+
literal|"script.engine.mustache.indexed.search: sandbox\n"
operator|+
literal|"script.engine.mustache.indexed.update: sandbox\n"
operator|+
literal|"script.engine.mustache.inline.aggs: sandbox\n"
operator|+
literal|"script.engine.mustache.inline.mapping: sandbox\n"
operator|+
literal|"script.engine.mustache.inline.search: sandbox\n"
operator|+
literal|"script.engine.mustache.inline.update: sandbox\n"
operator|+
literal|"script.engine.test.file.aggs: on\n"
operator|+
literal|"script.engine.test.file.mapping: on\n"
operator|+
literal|"script.engine.test.file.search: on\n"
operator|+
literal|"script.engine.test.file.update: on\n"
operator|+
literal|"script.engine.test.indexed.aggs: sandbox\n"
operator|+
literal|"script.engine.test.indexed.mapping: sandbox\n"
operator|+
literal|"script.engine.test.indexed.search: sandbox\n"
operator|+
literal|"script.engine.test.indexed.update: sandbox\n"
operator|+
literal|"script.engine.test.inline.aggs: sandbox\n"
operator|+
literal|"script.engine.test.inline.mapping: sandbox\n"
operator|+
literal|"script.engine.test.inline.search: sandbox\n"
operator|+
literal|"script.engine.test.inline.update: sandbox\n"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertScriptModesAllOps
specifier|private
name|void
name|assertScriptModesAllOps
parameter_list|(
name|ScriptMode
name|expectedScriptMode
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|langs
parameter_list|,
name|ScriptType
modifier|...
name|scriptTypes
parameter_list|)
block|{
name|assertScriptModes
argument_list|(
name|expectedScriptMode
argument_list|,
name|langs
argument_list|,
name|scriptTypes
argument_list|,
name|ScriptContext
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|assertScriptModesAllTypes
specifier|private
name|void
name|assertScriptModesAllTypes
parameter_list|(
name|ScriptMode
name|expectedScriptMode
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|langs
parameter_list|,
name|ScriptContext
modifier|...
name|scriptContexts
parameter_list|)
block|{
name|assertScriptModes
argument_list|(
name|expectedScriptMode
argument_list|,
name|langs
argument_list|,
name|ScriptType
operator|.
name|values
argument_list|()
argument_list|,
name|scriptContexts
argument_list|)
expr_stmt|;
block|}
DECL|method|assertScriptModes
specifier|private
name|void
name|assertScriptModes
parameter_list|(
name|ScriptMode
name|expectedScriptMode
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|langs
parameter_list|,
name|ScriptType
index|[]
name|scriptTypes
parameter_list|,
name|ScriptContext
modifier|...
name|scriptContexts
parameter_list|)
block|{
assert|assert
name|langs
operator|.
name|size
argument_list|()
operator|>
literal|0
assert|;
assert|assert
name|scriptTypes
operator|.
name|length
operator|>
literal|0
assert|;
assert|assert
name|scriptContexts
operator|.
name|length
operator|>
literal|0
assert|;
for|for
control|(
name|String
name|lang
range|:
name|langs
control|)
block|{
for|for
control|(
name|ScriptType
name|scriptType
range|:
name|scriptTypes
control|)
block|{
for|for
control|(
name|ScriptContext
name|scriptContext
range|:
name|scriptContexts
control|)
block|{
name|assertThat
argument_list|(
name|lang
operator|+
literal|"."
operator|+
name|scriptType
operator|+
literal|"."
operator|+
name|scriptContext
operator|+
literal|" doesn't have the expected value"
argument_list|,
name|scriptModes
operator|.
name|getScriptMode
argument_list|(
name|lang
argument_list|,
name|scriptType
argument_list|,
name|scriptContext
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|expectedScriptMode
argument_list|)
argument_list|)
expr_stmt|;
name|checkedSettings
operator|.
name|add
argument_list|(
name|lang
operator|+
literal|"."
operator|+
name|scriptType
operator|+
literal|"."
operator|+
name|scriptContext
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|specificEngineOpSettings
specifier|private
specifier|static
name|String
name|specificEngineOpSettings
parameter_list|(
name|String
name|lang
parameter_list|,
name|ScriptType
name|scriptType
parameter_list|,
name|ScriptContext
name|scriptContext
parameter_list|)
block|{
return|return
name|ScriptModes
operator|.
name|ENGINE_SETTINGS_PREFIX
operator|+
literal|"."
operator|+
name|lang
operator|+
literal|"."
operator|+
name|scriptType
operator|+
literal|"."
operator|+
name|scriptContext
return|;
block|}
DECL|method|buildScriptEnginesByLangMap
specifier|static
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|ScriptEngineService
argument_list|>
name|buildScriptEnginesByLangMap
parameter_list|(
name|Set
argument_list|<
name|ScriptEngineService
argument_list|>
name|scriptEngines
parameter_list|)
block|{
name|ImmutableMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|ScriptEngineService
argument_list|>
name|builder
init|=
name|ImmutableMap
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|ScriptEngineService
name|scriptEngine
range|:
name|scriptEngines
control|)
block|{
for|for
control|(
name|String
name|type
range|:
name|scriptEngine
operator|.
name|types
argument_list|()
control|)
block|{
name|builder
operator|.
name|put
argument_list|(
name|type
argument_list|,
name|scriptEngine
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|class|CustomScriptEngineService
specifier|private
specifier|static
class|class
name|CustomScriptEngineService
implements|implements
name|ScriptEngineService
block|{
annotation|@
name|Override
DECL|method|types
specifier|public
name|String
index|[]
name|types
parameter_list|()
block|{
return|return
operator|new
name|String
index|[]
block|{
literal|"custom"
block|,
literal|"test"
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|extensions
specifier|public
name|String
index|[]
name|extensions
parameter_list|()
block|{
return|return
operator|new
name|String
index|[
literal|0
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|sandboxed
specifier|public
name|boolean
name|sandboxed
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|compile
specifier|public
name|Object
name|compile
parameter_list|(
name|String
name|script
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|executable
specifier|public
name|ExecutableScript
name|executable
parameter_list|(
name|Object
name|compiledScript
parameter_list|,
annotation|@
name|Nullable
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|vars
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|search
specifier|public
name|SearchScript
name|search
parameter_list|(
name|Object
name|compiledScript
parameter_list|,
name|SearchLookup
name|lookup
parameter_list|,
annotation|@
name|Nullable
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|vars
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|execute
specifier|public
name|Object
name|execute
parameter_list|(
name|Object
name|compiledScript
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|vars
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|unwrap
specifier|public
name|Object
name|unwrap
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{          }
annotation|@
name|Override
DECL|method|scriptRemoved
specifier|public
name|void
name|scriptRemoved
parameter_list|(
annotation|@
name|Nullable
name|CompiledScript
name|script
parameter_list|)
block|{          }
block|}
block|}
end_class

end_unit

