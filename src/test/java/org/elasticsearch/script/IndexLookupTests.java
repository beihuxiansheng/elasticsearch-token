begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.script
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|script
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
operator|.
name|AwaitsFix
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchPhaseExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|ShardSearchFailure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|functionscore
operator|.
name|ScoreFunctionBuilders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchHit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchIntegrationTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertAcked
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertHitCount
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_class
annotation|@
name|AwaitsFix
argument_list|(
name|bugUrl
operator|=
literal|"https://github.com/elasticsearch/elasticsearch/pull/9746"
argument_list|)
DECL|class|IndexLookupTests
specifier|public
class|class
name|IndexLookupTests
extends|extends
name|ElasticsearchIntegrationTest
block|{
DECL|field|includeAllFlag
name|String
name|includeAllFlag
init|=
literal|"_FREQUENCIES | _OFFSETS | _PAYLOADS | _POSITIONS | _CACHE"
decl_stmt|;
DECL|field|includeAllWithoutRecordFlag
name|String
name|includeAllWithoutRecordFlag
init|=
literal|"_FREQUENCIES | _OFFSETS | _PAYLOADS | _POSITIONS "
decl_stmt|;
DECL|field|expectedEndOffsetsArray
specifier|private
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
name|expectedEndOffsetsArray
decl_stmt|;
DECL|field|expectedPayloadsArray
specifier|private
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
name|expectedPayloadsArray
decl_stmt|;
DECL|field|expectedPositionsArray
specifier|private
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
name|expectedPositionsArray
decl_stmt|;
DECL|field|emptyArray
specifier|private
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
name|emptyArray
decl_stmt|;
DECL|field|expectedStartOffsetsArray
specifier|private
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
name|expectedStartOffsetsArray
decl_stmt|;
DECL|method|initTestData
name|void
name|initTestData
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
throws|,
name|IOException
block|{
name|emptyArray
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|empty1
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|empty1
operator|.
name|add
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|empty1
operator|.
name|add
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|emptyArray
operator|.
name|put
argument_list|(
literal|"1"
argument_list|,
name|empty1
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|empty2
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|empty2
operator|.
name|add
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|empty2
operator|.
name|add
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|emptyArray
operator|.
name|put
argument_list|(
literal|"2"
argument_list|,
name|empty2
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|empty3
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|empty3
operator|.
name|add
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|empty3
operator|.
name|add
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|emptyArray
operator|.
name|put
argument_list|(
literal|"3"
argument_list|,
name|empty3
argument_list|)
expr_stmt|;
name|expectedPositionsArray
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|pos1
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|pos1
operator|.
name|add
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|pos1
operator|.
name|add
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|expectedPositionsArray
operator|.
name|put
argument_list|(
literal|"1"
argument_list|,
name|pos1
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|pos2
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|pos2
operator|.
name|add
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|pos2
operator|.
name|add
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|expectedPositionsArray
operator|.
name|put
argument_list|(
literal|"2"
argument_list|,
name|pos2
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|pos3
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|pos3
operator|.
name|add
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|pos3
operator|.
name|add
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|expectedPositionsArray
operator|.
name|put
argument_list|(
literal|"3"
argument_list|,
name|pos3
argument_list|)
expr_stmt|;
name|expectedPayloadsArray
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|pay1
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|pay1
operator|.
name|add
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|pay1
operator|.
name|add
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|expectedPayloadsArray
operator|.
name|put
argument_list|(
literal|"1"
argument_list|,
name|pay1
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|pay2
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|pay2
operator|.
name|add
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|pay2
operator|.
name|add
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|expectedPayloadsArray
operator|.
name|put
argument_list|(
literal|"2"
argument_list|,
name|pay2
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|pay3
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|pay3
operator|.
name|add
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|pay3
operator|.
name|add
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|expectedPayloadsArray
operator|.
name|put
argument_list|(
literal|"3"
argument_list|,
name|pay3
argument_list|)
expr_stmt|;
comment|/*          * "a|1 b|2 b|3 c|4 d " "b|1 b|2 c|3 d|4 a " "b|1 c|2 d|3 a|4 b "          */
name|expectedStartOffsetsArray
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|starts1
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|starts1
operator|.
name|add
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|starts1
operator|.
name|add
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|expectedStartOffsetsArray
operator|.
name|put
argument_list|(
literal|"1"
argument_list|,
name|starts1
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|starts2
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|starts2
operator|.
name|add
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|starts2
operator|.
name|add
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|expectedStartOffsetsArray
operator|.
name|put
argument_list|(
literal|"2"
argument_list|,
name|starts2
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|starts3
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|starts3
operator|.
name|add
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|starts3
operator|.
name|add
argument_list|(
literal|16
argument_list|)
expr_stmt|;
name|expectedStartOffsetsArray
operator|.
name|put
argument_list|(
literal|"3"
argument_list|,
name|starts3
argument_list|)
expr_stmt|;
name|expectedEndOffsetsArray
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|ends1
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|ends1
operator|.
name|add
argument_list|(
literal|7
argument_list|)
expr_stmt|;
name|ends1
operator|.
name|add
argument_list|(
literal|11
argument_list|)
expr_stmt|;
name|expectedEndOffsetsArray
operator|.
name|put
argument_list|(
literal|"1"
argument_list|,
name|ends1
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|ends2
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|ends2
operator|.
name|add
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|ends2
operator|.
name|add
argument_list|(
literal|7
argument_list|)
expr_stmt|;
name|expectedEndOffsetsArray
operator|.
name|put
argument_list|(
literal|"2"
argument_list|,
name|ends2
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|ends3
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|ends3
operator|.
name|add
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|ends3
operator|.
name|add
argument_list|(
literal|17
argument_list|)
expr_stmt|;
name|expectedEndOffsetsArray
operator|.
name|put
argument_list|(
literal|"3"
argument_list|,
name|ends3
argument_list|)
expr_stmt|;
name|XContentBuilder
name|mapping
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"int_payload_field"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"index_options"
argument_list|,
literal|"offsets"
argument_list|)
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
literal|"payload_int"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
name|mapping
argument_list|)
operator|.
name|setSettings
argument_list|(
name|ImmutableSettings
operator|.
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
name|indexSettings
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.analyzer.payload_int.tokenizer"
argument_list|,
literal|"whitespace"
argument_list|)
operator|.
name|putArray
argument_list|(
literal|"index.analysis.analyzer.payload_int.filter"
argument_list|,
literal|"delimited_int"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.delimited_int.delimiter"
argument_list|,
literal|"|"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.delimited_int.encoding"
argument_list|,
literal|"int"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.delimited_int.type"
argument_list|,
literal|"delimited_payload_filter"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"int_payload_field"
argument_list|,
literal|"a|1 b|2 b|3 c|4 d "
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"int_payload_field"
argument_list|,
literal|"b|1 b|2 c|3 d|4 a "
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"int_payload_field"
argument_list|,
literal|"b|1 c|2 d|3 a|4 b "
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTwoScripts
specifier|public
name|void
name|testTwoScripts
parameter_list|()
throws|throws
name|Exception
block|{
name|initTestData
argument_list|()
expr_stmt|;
comment|// check term frequencies for 'a'
name|String
name|scriptFieldScript
init|=
literal|"term = _index['int_payload_field']['c']; term.tf()"
decl_stmt|;
name|scriptFieldScript
operator|=
literal|"1"
expr_stmt|;
name|String
name|scoreScript
init|=
literal|"term = _index['int_payload_field']['b']; term.tf()"
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|expectedResultsField
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|expectedResultsField
operator|.
name|put
argument_list|(
literal|"1"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|expectedResultsField
operator|.
name|put
argument_list|(
literal|"2"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|expectedResultsField
operator|.
name|put
argument_list|(
literal|"3"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|expectedResultsScore
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|expectedResultsScore
operator|.
name|put
argument_list|(
literal|"1"
argument_list|,
literal|2f
argument_list|)
expr_stmt|;
name|expectedResultsScore
operator|.
name|put
argument_list|(
literal|"2"
argument_list|,
literal|2f
argument_list|)
expr_stmt|;
name|expectedResultsScore
operator|.
name|put
argument_list|(
literal|"3"
argument_list|,
literal|2f
argument_list|)
expr_stmt|;
name|checkOnlyFunctionScore
argument_list|(
name|scoreScript
argument_list|,
name|expectedResultsScore
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|checkValueInEachDocWithFunctionScore
argument_list|(
name|scriptFieldScript
argument_list|,
name|expectedResultsField
argument_list|,
name|scoreScript
argument_list|,
name|expectedResultsScore
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCallWithDifferentFlagsFails
specifier|public
name|void
name|testCallWithDifferentFlagsFails
parameter_list|()
throws|throws
name|Exception
block|{
name|initTestData
argument_list|()
expr_stmt|;
comment|// should throw an exception, we cannot call with different flags twice
comment|// if the flags of the second call were not included in the first call.
name|String
name|script
init|=
literal|"term = _index['int_payload_field']['b']; return _index['int_payload_field'].get('b', _POSITIONS).tf();"
decl_stmt|;
try|try
block|{
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|addScriptField
argument_list|(
literal|"tvtest"
argument_list|,
name|script
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SearchPhaseExecutionException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
literal|"got: "
operator|+
name|e
operator|.
name|getDetailedMessage
argument_list|()
argument_list|,
name|e
operator|.
name|getDetailedMessage
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"You must call get with all required flags! Instead of  _index['int_payload_field'].get('b', _FREQUENCIES) and _index['int_payload_field'].get('b', _POSITIONS) call  _index['int_payload_field'].get('b', _FREQUENCIES | _POSITIONS)  once]"
argument_list|)
argument_list|,
name|Matchers
operator|.
name|greaterThan
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Should not throw an exception this way round
name|script
operator|=
literal|"term = _index['int_payload_field'].get('b', _POSITIONS | _FREQUENCIES);return _index['int_payload_field']['b'].tf();"
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|addScriptField
argument_list|(
literal|"tvtest"
argument_list|,
name|script
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
block|}
DECL|method|checkOnlyFunctionScore
specifier|private
name|void
name|checkOnlyFunctionScore
parameter_list|(
name|String
name|scoreScript
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|expectedScore
parameter_list|,
name|int
name|numExpectedDocs
parameter_list|)
block|{
name|SearchResponse
name|sr
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|functionScoreQuery
argument_list|(
name|ScoreFunctionBuilders
operator|.
name|scriptFunction
argument_list|(
name|scoreScript
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|sr
argument_list|,
name|numExpectedDocs
argument_list|)
expr_stmt|;
for|for
control|(
name|SearchHit
name|hit
range|:
name|sr
operator|.
name|getHits
argument_list|()
operator|.
name|getHits
argument_list|()
control|)
block|{
name|assertThat
argument_list|(
literal|"for doc "
operator|+
name|hit
operator|.
name|getId
argument_list|()
argument_list|,
operator|(
operator|(
name|Float
operator|)
name|expectedScore
operator|.
name|get
argument_list|(
name|hit
operator|.
name|getId
argument_list|()
argument_list|)
operator|)
operator|.
name|doubleValue
argument_list|()
argument_list|,
name|Matchers
operator|.
name|closeTo
argument_list|(
name|hit
operator|.
name|score
argument_list|()
argument_list|,
literal|1.e-4
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testDocumentationExample
specifier|public
name|void
name|testDocumentationExample
parameter_list|()
throws|throws
name|Exception
block|{
name|initTestData
argument_list|()
expr_stmt|;
name|String
name|script
init|=
literal|"term = _index['float_payload_field'].get('b',"
operator|+
name|includeAllFlag
operator|+
literal|"); payloadSum=0; for (pos in term) {payloadSum = pos.payloadAsInt(0)}; payloadSum"
decl_stmt|;
comment|// non existing field: sum should be 0
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|zeroArray
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|zeroArray
operator|.
name|put
argument_list|(
literal|"1"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|zeroArray
operator|.
name|put
argument_list|(
literal|"2"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|zeroArray
operator|.
name|put
argument_list|(
literal|"3"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|checkValueInEachDoc
argument_list|(
name|script
argument_list|,
name|zeroArray
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|script
operator|=
literal|"term = _index['int_payload_field'].get('b',"
operator|+
name|includeAllFlag
operator|+
literal|"); payloadSum=0; for (pos in term) {payloadSum = payloadSum + pos.payloadAsInt(0)}; payloadSum"
expr_stmt|;
comment|// existing field: sums should be as here:
name|zeroArray
operator|.
name|put
argument_list|(
literal|"1"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|zeroArray
operator|.
name|put
argument_list|(
literal|"2"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|zeroArray
operator|.
name|put
argument_list|(
literal|"3"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|checkValueInEachDoc
argument_list|(
name|script
argument_list|,
name|zeroArray
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIteratorAndRecording
specifier|public
name|void
name|testIteratorAndRecording
parameter_list|()
throws|throws
name|Exception
block|{
name|initTestData
argument_list|()
expr_stmt|;
comment|// call twice with record: should work as expected
name|String
name|script
init|=
name|createPositionsArrayScriptIterateTwice
argument_list|(
literal|"b"
argument_list|,
name|includeAllFlag
argument_list|,
literal|"position"
argument_list|)
decl_stmt|;
name|checkArrayValsInEachDoc
argument_list|(
name|script
argument_list|,
name|expectedPositionsArray
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|script
operator|=
name|createPositionsArrayScriptIterateTwice
argument_list|(
literal|"b"
argument_list|,
name|includeAllFlag
argument_list|,
literal|"startOffset"
argument_list|)
expr_stmt|;
name|checkArrayValsInEachDoc
argument_list|(
name|script
argument_list|,
name|expectedStartOffsetsArray
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|script
operator|=
name|createPositionsArrayScriptIterateTwice
argument_list|(
literal|"b"
argument_list|,
name|includeAllFlag
argument_list|,
literal|"endOffset"
argument_list|)
expr_stmt|;
name|checkArrayValsInEachDoc
argument_list|(
name|script
argument_list|,
name|expectedEndOffsetsArray
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|script
operator|=
name|createPositionsArrayScriptIterateTwice
argument_list|(
literal|"b"
argument_list|,
name|includeAllFlag
argument_list|,
literal|"payloadAsInt(-1)"
argument_list|)
expr_stmt|;
name|checkArrayValsInEachDoc
argument_list|(
name|script
argument_list|,
name|expectedPayloadsArray
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|// no record and get iterator twice: should fail
name|script
operator|=
name|createPositionsArrayScriptIterateTwice
argument_list|(
literal|"b"
argument_list|,
name|includeAllWithoutRecordFlag
argument_list|,
literal|"position"
argument_list|)
expr_stmt|;
name|checkExceptions
argument_list|(
name|script
argument_list|)
expr_stmt|;
name|script
operator|=
name|createPositionsArrayScriptIterateTwice
argument_list|(
literal|"b"
argument_list|,
name|includeAllWithoutRecordFlag
argument_list|,
literal|"startOffset"
argument_list|)
expr_stmt|;
name|checkExceptions
argument_list|(
name|script
argument_list|)
expr_stmt|;
name|script
operator|=
name|createPositionsArrayScriptIterateTwice
argument_list|(
literal|"b"
argument_list|,
name|includeAllWithoutRecordFlag
argument_list|,
literal|"endOffset"
argument_list|)
expr_stmt|;
name|checkExceptions
argument_list|(
name|script
argument_list|)
expr_stmt|;
name|script
operator|=
name|createPositionsArrayScriptIterateTwice
argument_list|(
literal|"b"
argument_list|,
name|includeAllWithoutRecordFlag
argument_list|,
literal|"payloadAsInt(-1)"
argument_list|)
expr_stmt|;
name|checkExceptions
argument_list|(
name|script
argument_list|)
expr_stmt|;
comment|// no record and get termObject twice and iterate: should fail
name|script
operator|=
name|createPositionsArrayScriptGetInfoObjectTwice
argument_list|(
literal|"b"
argument_list|,
name|includeAllWithoutRecordFlag
argument_list|,
literal|"position"
argument_list|)
expr_stmt|;
name|checkExceptions
argument_list|(
name|script
argument_list|)
expr_stmt|;
name|script
operator|=
name|createPositionsArrayScriptGetInfoObjectTwice
argument_list|(
literal|"b"
argument_list|,
name|includeAllWithoutRecordFlag
argument_list|,
literal|"startOffset"
argument_list|)
expr_stmt|;
name|checkExceptions
argument_list|(
name|script
argument_list|)
expr_stmt|;
name|script
operator|=
name|createPositionsArrayScriptGetInfoObjectTwice
argument_list|(
literal|"b"
argument_list|,
name|includeAllWithoutRecordFlag
argument_list|,
literal|"endOffset"
argument_list|)
expr_stmt|;
name|checkExceptions
argument_list|(
name|script
argument_list|)
expr_stmt|;
name|script
operator|=
name|createPositionsArrayScriptGetInfoObjectTwice
argument_list|(
literal|"b"
argument_list|,
name|includeAllWithoutRecordFlag
argument_list|,
literal|"payloadAsInt(-1)"
argument_list|)
expr_stmt|;
name|checkExceptions
argument_list|(
name|script
argument_list|)
expr_stmt|;
block|}
DECL|method|createPositionsArrayScriptGetInfoObjectTwice
specifier|private
name|String
name|createPositionsArrayScriptGetInfoObjectTwice
parameter_list|(
name|String
name|term
parameter_list|,
name|String
name|flags
parameter_list|,
name|String
name|what
parameter_list|)
block|{
name|String
name|script
init|=
literal|"term = _index['int_payload_field'].get('"
operator|+
name|term
operator|+
literal|"',"
operator|+
name|flags
operator|+
literal|"); array=[]; for (pos in term) {array.add(pos."
operator|+
name|what
operator|+
literal|")}; _index['int_payload_field'].get('"
operator|+
name|term
operator|+
literal|"',"
operator|+
name|flags
operator|+
literal|"); array=[]; for (pos in term) {array.add(pos."
operator|+
name|what
operator|+
literal|")}"
decl_stmt|;
return|return
name|script
return|;
block|}
DECL|method|createPositionsArrayScriptIterateTwice
specifier|private
name|String
name|createPositionsArrayScriptIterateTwice
parameter_list|(
name|String
name|term
parameter_list|,
name|String
name|flags
parameter_list|,
name|String
name|what
parameter_list|)
block|{
name|String
name|script
init|=
literal|"term = _index['int_payload_field'].get('"
operator|+
name|term
operator|+
literal|"',"
operator|+
name|flags
operator|+
literal|"); array=[]; for (pos in term) {array.add(pos."
operator|+
name|what
operator|+
literal|")}; array=[]; for (pos in term) {array.add(pos."
operator|+
name|what
operator|+
literal|")}; array"
decl_stmt|;
return|return
name|script
return|;
block|}
DECL|method|createPositionsArrayScript
specifier|private
name|String
name|createPositionsArrayScript
parameter_list|(
name|String
name|field
parameter_list|,
name|String
name|term
parameter_list|,
name|String
name|flags
parameter_list|,
name|String
name|what
parameter_list|)
block|{
name|String
name|script
init|=
literal|"term = _index['"
operator|+
name|field
operator|+
literal|"'].get('"
operator|+
name|term
operator|+
literal|"',"
operator|+
name|flags
operator|+
literal|"); array=[]; for (pos in term) {array.add(pos."
operator|+
name|what
operator|+
literal|")}; array"
decl_stmt|;
return|return
name|script
return|;
block|}
DECL|method|createPositionsArrayScriptDefaultGet
specifier|private
name|String
name|createPositionsArrayScriptDefaultGet
parameter_list|(
name|String
name|field
parameter_list|,
name|String
name|term
parameter_list|,
name|String
name|what
parameter_list|)
block|{
name|String
name|script
init|=
literal|"term = _index['"
operator|+
name|field
operator|+
literal|"']['"
operator|+
name|term
operator|+
literal|"']; array=[]; for (pos in term) {array.add(pos."
operator|+
name|what
operator|+
literal|")}; array"
decl_stmt|;
return|return
name|script
return|;
block|}
annotation|@
name|Test
DECL|method|testFlags
specifier|public
name|void
name|testFlags
parameter_list|()
throws|throws
name|Exception
block|{
name|initTestData
argument_list|()
expr_stmt|;
comment|// check default flag
name|String
name|script
init|=
name|createPositionsArrayScriptDefaultGet
argument_list|(
literal|"int_payload_field"
argument_list|,
literal|"b"
argument_list|,
literal|"position"
argument_list|)
decl_stmt|;
comment|// there should be no positions
comment|/* TODO: the following tests fail with the new postings enum apis because of a bogus assert in BlockDocsEnum         checkArrayValsInEachDoc(script, emptyArray, 3);         script = createPositionsArrayScriptDefaultGet("int_payload_field", "b", "startOffset");         // there should be no offsets         checkArrayValsInEachDoc(script, emptyArray, 3);         script = createPositionsArrayScriptDefaultGet("int_payload_field", "b", "endOffset");         // there should be no offsets         checkArrayValsInEachDoc(script, emptyArray, 3);         script = createPositionsArrayScriptDefaultGet("int_payload_field", "b", "payloadAsInt(-1)");         // there should be no payload         checkArrayValsInEachDoc(script, emptyArray, 3);          // check FLAG_FREQUENCIES flag         script = createPositionsArrayScript("int_payload_field", "b", "_FREQUENCIES", "position");         // there should be no positions         checkArrayValsInEachDoc(script, emptyArray, 3);         script = createPositionsArrayScript("int_payload_field", "b", "_FREQUENCIES", "startOffset");         // there should be no offsets         checkArrayValsInEachDoc(script, emptyArray, 3);         script = createPositionsArrayScript("int_payload_field", "b", "_FREQUENCIES", "endOffset");         // there should be no offsets         checkArrayValsInEachDoc(script, emptyArray, 3);         script = createPositionsArrayScript("int_payload_field", "b", "_FREQUENCIES", "payloadAsInt(-1)");         // there should be no payloads         checkArrayValsInEachDoc(script, emptyArray, 3);*/
comment|// check FLAG_POSITIONS flag
name|script
operator|=
name|createPositionsArrayScript
argument_list|(
literal|"int_payload_field"
argument_list|,
literal|"b"
argument_list|,
literal|"_POSITIONS"
argument_list|,
literal|"position"
argument_list|)
expr_stmt|;
comment|// there should be positions
name|checkArrayValsInEachDoc
argument_list|(
name|script
argument_list|,
name|expectedPositionsArray
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|/* TODO: these tests make a bogus assumption that asking for positions will return only positions         script = createPositionsArrayScript("int_payload_field", "b", "_POSITIONS", "startOffset");         // there should be no offsets         checkArrayValsInEachDoc(script, emptyArray, 3);         script = createPositionsArrayScript("int_payload_field", "b", "_POSITIONS", "endOffset");         // there should be no offsets         checkArrayValsInEachDoc(script, emptyArray, 3);         script = createPositionsArrayScript("int_payload_field", "b", "_POSITIONS", "payloadAsInt(-1)");         // there should be no payloads         checkArrayValsInEachDoc(script, emptyArray, 3);*/
comment|// check FLAG_OFFSETS flag
name|script
operator|=
name|createPositionsArrayScript
argument_list|(
literal|"int_payload_field"
argument_list|,
literal|"b"
argument_list|,
literal|"_OFFSETS"
argument_list|,
literal|"position"
argument_list|)
expr_stmt|;
comment|// there should be positions and s forth ...
name|checkArrayValsInEachDoc
argument_list|(
name|script
argument_list|,
name|expectedPositionsArray
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|script
operator|=
name|createPositionsArrayScript
argument_list|(
literal|"int_payload_field"
argument_list|,
literal|"b"
argument_list|,
literal|"_OFFSETS"
argument_list|,
literal|"startOffset"
argument_list|)
expr_stmt|;
name|checkArrayValsInEachDoc
argument_list|(
name|script
argument_list|,
name|expectedStartOffsetsArray
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|script
operator|=
name|createPositionsArrayScript
argument_list|(
literal|"int_payload_field"
argument_list|,
literal|"b"
argument_list|,
literal|"_OFFSETS"
argument_list|,
literal|"endOffset"
argument_list|)
expr_stmt|;
name|checkArrayValsInEachDoc
argument_list|(
name|script
argument_list|,
name|expectedEndOffsetsArray
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|script
operator|=
name|createPositionsArrayScript
argument_list|(
literal|"int_payload_field"
argument_list|,
literal|"b"
argument_list|,
literal|"_OFFSETS"
argument_list|,
literal|"payloadAsInt(-1)"
argument_list|)
expr_stmt|;
name|checkArrayValsInEachDoc
argument_list|(
name|script
argument_list|,
name|expectedPayloadsArray
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|// check FLAG_PAYLOADS flag
name|script
operator|=
name|createPositionsArrayScript
argument_list|(
literal|"int_payload_field"
argument_list|,
literal|"b"
argument_list|,
literal|"_PAYLOADS"
argument_list|,
literal|"position"
argument_list|)
expr_stmt|;
name|checkArrayValsInEachDoc
argument_list|(
name|script
argument_list|,
name|expectedPositionsArray
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|script
operator|=
name|createPositionsArrayScript
argument_list|(
literal|"int_payload_field"
argument_list|,
literal|"b"
argument_list|,
literal|"_PAYLOADS"
argument_list|,
literal|"startOffset"
argument_list|)
expr_stmt|;
name|checkArrayValsInEachDoc
argument_list|(
name|script
argument_list|,
name|expectedStartOffsetsArray
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|script
operator|=
name|createPositionsArrayScript
argument_list|(
literal|"int_payload_field"
argument_list|,
literal|"b"
argument_list|,
literal|"_PAYLOADS"
argument_list|,
literal|"endOffset"
argument_list|)
expr_stmt|;
name|checkArrayValsInEachDoc
argument_list|(
name|script
argument_list|,
name|expectedEndOffsetsArray
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|script
operator|=
name|createPositionsArrayScript
argument_list|(
literal|"int_payload_field"
argument_list|,
literal|"b"
argument_list|,
literal|"_PAYLOADS"
argument_list|,
literal|"payloadAsInt(-1)"
argument_list|)
expr_stmt|;
name|checkArrayValsInEachDoc
argument_list|(
name|script
argument_list|,
name|expectedPayloadsArray
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|// check all flags
name|String
name|allFlags
init|=
literal|"_POSITIONS | _OFFSETS | _PAYLOADS"
decl_stmt|;
name|script
operator|=
name|createPositionsArrayScript
argument_list|(
literal|"int_payload_field"
argument_list|,
literal|"b"
argument_list|,
name|allFlags
argument_list|,
literal|"position"
argument_list|)
expr_stmt|;
name|checkArrayValsInEachDoc
argument_list|(
name|script
argument_list|,
name|expectedPositionsArray
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|script
operator|=
name|createPositionsArrayScript
argument_list|(
literal|"int_payload_field"
argument_list|,
literal|"b"
argument_list|,
name|allFlags
argument_list|,
literal|"startOffset"
argument_list|)
expr_stmt|;
name|checkArrayValsInEachDoc
argument_list|(
name|script
argument_list|,
name|expectedStartOffsetsArray
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|script
operator|=
name|createPositionsArrayScript
argument_list|(
literal|"int_payload_field"
argument_list|,
literal|"b"
argument_list|,
name|allFlags
argument_list|,
literal|"endOffset"
argument_list|)
expr_stmt|;
name|checkArrayValsInEachDoc
argument_list|(
name|script
argument_list|,
name|expectedEndOffsetsArray
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|script
operator|=
name|createPositionsArrayScript
argument_list|(
literal|"int_payload_field"
argument_list|,
literal|"b"
argument_list|,
name|allFlags
argument_list|,
literal|"payloadAsInt(-1)"
argument_list|)
expr_stmt|;
name|checkArrayValsInEachDoc
argument_list|(
name|script
argument_list|,
name|expectedPayloadsArray
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|// check all flags without record
name|script
operator|=
name|createPositionsArrayScript
argument_list|(
literal|"int_payload_field"
argument_list|,
literal|"b"
argument_list|,
name|includeAllWithoutRecordFlag
argument_list|,
literal|"position"
argument_list|)
expr_stmt|;
name|checkArrayValsInEachDoc
argument_list|(
name|script
argument_list|,
name|expectedPositionsArray
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|script
operator|=
name|createPositionsArrayScript
argument_list|(
literal|"int_payload_field"
argument_list|,
literal|"b"
argument_list|,
name|includeAllWithoutRecordFlag
argument_list|,
literal|"startOffset"
argument_list|)
expr_stmt|;
name|checkArrayValsInEachDoc
argument_list|(
name|script
argument_list|,
name|expectedStartOffsetsArray
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|script
operator|=
name|createPositionsArrayScript
argument_list|(
literal|"int_payload_field"
argument_list|,
literal|"b"
argument_list|,
name|includeAllWithoutRecordFlag
argument_list|,
literal|"endOffset"
argument_list|)
expr_stmt|;
name|checkArrayValsInEachDoc
argument_list|(
name|script
argument_list|,
name|expectedEndOffsetsArray
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|script
operator|=
name|createPositionsArrayScript
argument_list|(
literal|"int_payload_field"
argument_list|,
literal|"b"
argument_list|,
name|includeAllWithoutRecordFlag
argument_list|,
literal|"payloadAsInt(-1)"
argument_list|)
expr_stmt|;
name|checkArrayValsInEachDoc
argument_list|(
name|script
argument_list|,
name|expectedPayloadsArray
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
DECL|method|checkArrayValsInEachDoc
specifier|private
name|void
name|checkArrayValsInEachDoc
parameter_list|(
name|String
name|script
parameter_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
name|expectedArray
parameter_list|,
name|int
name|expectedHitSize
parameter_list|)
block|{
name|SearchResponse
name|sr
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|addScriptField
argument_list|(
literal|"tvtest"
argument_list|,
name|script
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|sr
argument_list|,
name|expectedHitSize
argument_list|)
expr_stmt|;
name|int
name|nullCounter
init|=
literal|0
decl_stmt|;
for|for
control|(
name|SearchHit
name|hit
range|:
name|sr
operator|.
name|getHits
argument_list|()
operator|.
name|getHits
argument_list|()
control|)
block|{
name|Object
name|result
init|=
name|hit
operator|.
name|getFields
argument_list|()
operator|.
name|get
argument_list|(
literal|"tvtest"
argument_list|)
operator|.
name|getValues
argument_list|()
decl_stmt|;
name|Object
name|expectedResult
init|=
name|expectedArray
operator|.
name|get
argument_list|(
name|hit
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
literal|"for doc "
operator|+
name|hit
operator|.
name|getId
argument_list|()
argument_list|,
name|result
argument_list|,
name|equalTo
argument_list|(
name|expectedResult
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|expectedResult
operator|!=
literal|null
condition|)
block|{
name|nullCounter
operator|++
expr_stmt|;
block|}
block|}
name|assertThat
argument_list|(
name|nullCounter
argument_list|,
name|equalTo
argument_list|(
name|expectedArray
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAllExceptPosAndOffset
specifier|public
name|void
name|testAllExceptPosAndOffset
parameter_list|()
throws|throws
name|Exception
block|{
name|XContentBuilder
name|mapping
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"float_payload_field"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"index_options"
argument_list|,
literal|"offsets"
argument_list|)
operator|.
name|field
argument_list|(
literal|"term_vector"
argument_list|,
literal|"no"
argument_list|)
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
literal|"payload_float"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"string_payload_field"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"index_options"
argument_list|,
literal|"offsets"
argument_list|)
operator|.
name|field
argument_list|(
literal|"term_vector"
argument_list|,
literal|"no"
argument_list|)
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
literal|"payload_string"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"int_payload_field"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"index_options"
argument_list|,
literal|"offsets"
argument_list|)
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
literal|"payload_int"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
name|mapping
argument_list|)
operator|.
name|setSettings
argument_list|(
name|ImmutableSettings
operator|.
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
name|indexSettings
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.analyzer.payload_float.tokenizer"
argument_list|,
literal|"whitespace"
argument_list|)
operator|.
name|putArray
argument_list|(
literal|"index.analysis.analyzer.payload_float.filter"
argument_list|,
literal|"delimited_float"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.delimited_float.delimiter"
argument_list|,
literal|"|"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.delimited_float.encoding"
argument_list|,
literal|"float"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.delimited_float.type"
argument_list|,
literal|"delimited_payload_filter"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.analyzer.payload_string.tokenizer"
argument_list|,
literal|"whitespace"
argument_list|)
operator|.
name|putArray
argument_list|(
literal|"index.analysis.analyzer.payload_string.filter"
argument_list|,
literal|"delimited_string"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.delimited_string.delimiter"
argument_list|,
literal|"|"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.delimited_string.encoding"
argument_list|,
literal|"identity"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.delimited_string.type"
argument_list|,
literal|"delimited_payload_filter"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.analyzer.payload_int.tokenizer"
argument_list|,
literal|"whitespace"
argument_list|)
operator|.
name|putArray
argument_list|(
literal|"index.analysis.analyzer.payload_int.filter"
argument_list|,
literal|"delimited_int"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.delimited_int.delimiter"
argument_list|,
literal|"|"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.delimited_int.encoding"
argument_list|,
literal|"int"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.delimited_int.type"
argument_list|,
literal|"delimited_payload_filter"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.number_of_shards"
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ensureYellow
argument_list|()
expr_stmt|;
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"float_payload_field"
argument_list|,
literal|"a|1 b|2 a|3 b "
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"string_payload_field"
argument_list|,
literal|"a|a b|b a|a b "
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"float_payload_field"
argument_list|,
literal|"a|4 b|5 a|6 b "
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"string_payload_field"
argument_list|,
literal|"a|b b|a a|b b "
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"5"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"float_payload_field"
argument_list|,
literal|"c "
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"6"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"int_payload_field"
argument_list|,
literal|"c|1"
argument_list|)
argument_list|)
expr_stmt|;
comment|// get the number of all docs
name|String
name|script
init|=
literal|"_index.numDocs()"
decl_stmt|;
name|checkValueInEachDoc
argument_list|(
literal|6
argument_list|,
name|script
argument_list|,
literal|6
argument_list|)
expr_stmt|;
comment|// get the number of docs with field float_payload_field
name|script
operator|=
literal|"_index['float_payload_field'].docCount()"
expr_stmt|;
name|checkValueInEachDoc
argument_list|(
literal|3
argument_list|,
name|script
argument_list|,
literal|6
argument_list|)
expr_stmt|;
comment|// corner case: what if the field does not exist?
name|script
operator|=
literal|"_index['non_existent_field'].docCount()"
expr_stmt|;
name|checkValueInEachDoc
argument_list|(
literal|0
argument_list|,
name|script
argument_list|,
literal|6
argument_list|)
expr_stmt|;
comment|// get the number of all tokens in all docs
name|script
operator|=
literal|"_index['float_payload_field'].sumttf()"
expr_stmt|;
name|checkValueInEachDoc
argument_list|(
literal|9
argument_list|,
name|script
argument_list|,
literal|6
argument_list|)
expr_stmt|;
comment|// corner case get the number of all tokens in all docs for non existent
comment|// field
name|script
operator|=
literal|"_index['non_existent_field'].sumttf()"
expr_stmt|;
name|checkValueInEachDoc
argument_list|(
literal|0
argument_list|,
name|script
argument_list|,
literal|6
argument_list|)
expr_stmt|;
comment|// get the sum of doc freqs in all docs
name|script
operator|=
literal|"_index['float_payload_field'].sumdf()"
expr_stmt|;
name|checkValueInEachDoc
argument_list|(
literal|5
argument_list|,
name|script
argument_list|,
literal|6
argument_list|)
expr_stmt|;
comment|// get the sum of doc freqs in all docs for non existent field
name|script
operator|=
literal|"_index['non_existent_field'].sumdf()"
expr_stmt|;
name|checkValueInEachDoc
argument_list|(
literal|0
argument_list|,
name|script
argument_list|,
literal|6
argument_list|)
expr_stmt|;
comment|// check term frequencies for 'a'
name|script
operator|=
literal|"term = _index['float_payload_field']['a']; if (term != null) {term.tf()}"
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|expectedResults
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|expectedResults
operator|.
name|put
argument_list|(
literal|"1"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|expectedResults
operator|.
name|put
argument_list|(
literal|"2"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|expectedResults
operator|.
name|put
argument_list|(
literal|"3"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|expectedResults
operator|.
name|put
argument_list|(
literal|"4"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|expectedResults
operator|.
name|put
argument_list|(
literal|"5"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|expectedResults
operator|.
name|put
argument_list|(
literal|"6"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|checkValueInEachDoc
argument_list|(
name|script
argument_list|,
name|expectedResults
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|expectedResults
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// check doc frequencies for 'c'
name|script
operator|=
literal|"term = _index['float_payload_field']['c']; if (term != null) {term.df()}"
expr_stmt|;
name|expectedResults
operator|.
name|put
argument_list|(
literal|"1"
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|expectedResults
operator|.
name|put
argument_list|(
literal|"2"
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|expectedResults
operator|.
name|put
argument_list|(
literal|"3"
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|expectedResults
operator|.
name|put
argument_list|(
literal|"4"
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|expectedResults
operator|.
name|put
argument_list|(
literal|"5"
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|expectedResults
operator|.
name|put
argument_list|(
literal|"6"
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|checkValueInEachDoc
argument_list|(
name|script
argument_list|,
name|expectedResults
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|expectedResults
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// check doc frequencies for term that does not exist
name|script
operator|=
literal|"term = _index['float_payload_field']['non_existent_term']; if (term != null) {term.df()}"
expr_stmt|;
name|expectedResults
operator|.
name|put
argument_list|(
literal|"1"
argument_list|,
literal|0l
argument_list|)
expr_stmt|;
name|expectedResults
operator|.
name|put
argument_list|(
literal|"2"
argument_list|,
literal|0l
argument_list|)
expr_stmt|;
name|expectedResults
operator|.
name|put
argument_list|(
literal|"3"
argument_list|,
literal|0l
argument_list|)
expr_stmt|;
name|expectedResults
operator|.
name|put
argument_list|(
literal|"4"
argument_list|,
literal|0l
argument_list|)
expr_stmt|;
name|expectedResults
operator|.
name|put
argument_list|(
literal|"5"
argument_list|,
literal|0l
argument_list|)
expr_stmt|;
name|expectedResults
operator|.
name|put
argument_list|(
literal|"6"
argument_list|,
literal|0l
argument_list|)
expr_stmt|;
name|checkValueInEachDoc
argument_list|(
name|script
argument_list|,
name|expectedResults
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|expectedResults
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// check doc frequencies for term that does not exist
name|script
operator|=
literal|"term = _index['non_existent_field']['non_existent_term']; if (term != null) {term.tf()}"
expr_stmt|;
name|expectedResults
operator|.
name|put
argument_list|(
literal|"1"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|expectedResults
operator|.
name|put
argument_list|(
literal|"2"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|expectedResults
operator|.
name|put
argument_list|(
literal|"3"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|expectedResults
operator|.
name|put
argument_list|(
literal|"4"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|expectedResults
operator|.
name|put
argument_list|(
literal|"5"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|expectedResults
operator|.
name|put
argument_list|(
literal|"6"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|checkValueInEachDoc
argument_list|(
name|script
argument_list|,
name|expectedResults
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|expectedResults
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// check total term frequencies for 'a'
name|script
operator|=
literal|"term = _index['float_payload_field']['a']; if (term != null) {term.ttf()}"
expr_stmt|;
name|expectedResults
operator|.
name|put
argument_list|(
literal|"1"
argument_list|,
literal|4l
argument_list|)
expr_stmt|;
name|expectedResults
operator|.
name|put
argument_list|(
literal|"2"
argument_list|,
literal|4l
argument_list|)
expr_stmt|;
name|expectedResults
operator|.
name|put
argument_list|(
literal|"3"
argument_list|,
literal|4l
argument_list|)
expr_stmt|;
name|expectedResults
operator|.
name|put
argument_list|(
literal|"4"
argument_list|,
literal|4l
argument_list|)
expr_stmt|;
name|expectedResults
operator|.
name|put
argument_list|(
literal|"5"
argument_list|,
literal|4l
argument_list|)
expr_stmt|;
name|expectedResults
operator|.
name|put
argument_list|(
literal|"6"
argument_list|,
literal|4l
argument_list|)
expr_stmt|;
name|checkValueInEachDoc
argument_list|(
name|script
argument_list|,
name|expectedResults
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|expectedResults
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// check float payload for 'b'
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
name|expectedPayloadsArray
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|script
operator|=
name|createPositionsArrayScript
argument_list|(
literal|"float_payload_field"
argument_list|,
literal|"b"
argument_list|,
name|includeAllFlag
argument_list|,
literal|"payloadAsFloat(-1)"
argument_list|)
expr_stmt|;
name|float
name|missingValue
init|=
operator|-
literal|1
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|payloadsFor1
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|payloadsFor1
operator|.
name|add
argument_list|(
literal|2f
argument_list|)
expr_stmt|;
name|payloadsFor1
operator|.
name|add
argument_list|(
name|missingValue
argument_list|)
expr_stmt|;
name|expectedPayloadsArray
operator|.
name|put
argument_list|(
literal|"1"
argument_list|,
name|payloadsFor1
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|payloadsFor2
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|payloadsFor2
operator|.
name|add
argument_list|(
literal|5f
argument_list|)
expr_stmt|;
name|payloadsFor2
operator|.
name|add
argument_list|(
name|missingValue
argument_list|)
expr_stmt|;
name|expectedPayloadsArray
operator|.
name|put
argument_list|(
literal|"3"
argument_list|,
name|payloadsFor2
argument_list|)
expr_stmt|;
name|expectedPayloadsArray
operator|.
name|put
argument_list|(
literal|"6"
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|expectedPayloadsArray
operator|.
name|put
argument_list|(
literal|"5"
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|expectedPayloadsArray
operator|.
name|put
argument_list|(
literal|"4"
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|expectedPayloadsArray
operator|.
name|put
argument_list|(
literal|"2"
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|checkArrayValsInEachDoc
argument_list|(
name|script
argument_list|,
name|expectedPayloadsArray
argument_list|,
literal|6
argument_list|)
expr_stmt|;
comment|// check string payload for 'b'
name|expectedPayloadsArray
operator|.
name|clear
argument_list|()
expr_stmt|;
name|payloadsFor1
operator|.
name|clear
argument_list|()
expr_stmt|;
name|payloadsFor2
operator|.
name|clear
argument_list|()
expr_stmt|;
name|script
operator|=
name|createPositionsArrayScript
argument_list|(
literal|"string_payload_field"
argument_list|,
literal|"b"
argument_list|,
name|includeAllFlag
argument_list|,
literal|"payloadAsString()"
argument_list|)
expr_stmt|;
name|payloadsFor1
operator|.
name|add
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|payloadsFor1
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|expectedPayloadsArray
operator|.
name|put
argument_list|(
literal|"2"
argument_list|,
name|payloadsFor1
argument_list|)
expr_stmt|;
name|payloadsFor2
operator|.
name|add
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|payloadsFor2
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|expectedPayloadsArray
operator|.
name|put
argument_list|(
literal|"4"
argument_list|,
name|payloadsFor2
argument_list|)
expr_stmt|;
name|expectedPayloadsArray
operator|.
name|put
argument_list|(
literal|"6"
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|expectedPayloadsArray
operator|.
name|put
argument_list|(
literal|"5"
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|expectedPayloadsArray
operator|.
name|put
argument_list|(
literal|"3"
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|expectedPayloadsArray
operator|.
name|put
argument_list|(
literal|"1"
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|checkArrayValsInEachDoc
argument_list|(
name|script
argument_list|,
name|expectedPayloadsArray
argument_list|,
literal|6
argument_list|)
expr_stmt|;
comment|// check int payload for 'c'
name|expectedPayloadsArray
operator|.
name|clear
argument_list|()
expr_stmt|;
name|payloadsFor1
operator|.
name|clear
argument_list|()
expr_stmt|;
name|payloadsFor2
operator|.
name|clear
argument_list|()
expr_stmt|;
name|script
operator|=
name|createPositionsArrayScript
argument_list|(
literal|"int_payload_field"
argument_list|,
literal|"c"
argument_list|,
name|includeAllFlag
argument_list|,
literal|"payloadAsInt(-1)"
argument_list|)
expr_stmt|;
name|payloadsFor1
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|payloadsFor1
operator|.
name|add
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|expectedPayloadsArray
operator|.
name|put
argument_list|(
literal|"6"
argument_list|,
name|payloadsFor1
argument_list|)
expr_stmt|;
name|expectedPayloadsArray
operator|.
name|put
argument_list|(
literal|"5"
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|expectedPayloadsArray
operator|.
name|put
argument_list|(
literal|"4"
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|expectedPayloadsArray
operator|.
name|put
argument_list|(
literal|"3"
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|expectedPayloadsArray
operator|.
name|put
argument_list|(
literal|"2"
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|expectedPayloadsArray
operator|.
name|put
argument_list|(
literal|"1"
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|checkArrayValsInEachDoc
argument_list|(
name|script
argument_list|,
name|expectedPayloadsArray
argument_list|,
literal|6
argument_list|)
expr_stmt|;
block|}
DECL|method|checkExceptions
specifier|private
name|void
name|checkExceptions
parameter_list|(
name|String
name|script
parameter_list|)
block|{
try|try
block|{
name|SearchResponse
name|sr
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|addScriptField
argument_list|(
literal|"tvtest"
argument_list|,
name|script
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|sr
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|ShardSearchFailure
index|[]
name|shardFails
init|=
name|sr
operator|.
name|getShardFailures
argument_list|()
decl_stmt|;
for|for
control|(
name|ShardSearchFailure
name|fail
range|:
name|shardFails
control|)
block|{
name|assertThat
argument_list|(
name|fail
operator|.
name|reason
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"Cannot iterate twice! If you want to iterate more that once, add _CACHE explicitly."
argument_list|)
argument_list|,
name|Matchers
operator|.
name|greaterThan
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SearchPhaseExecutionException
name|ex
parameter_list|)
block|{
name|assertThat
argument_list|(
literal|"got "
operator|+
name|ex
operator|.
name|getDetailedMessage
argument_list|()
argument_list|,
name|ex
operator|.
name|getDetailedMessage
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"Cannot iterate twice! If you want to iterate more that once, add _CACHE explicitly."
argument_list|)
argument_list|,
name|Matchers
operator|.
name|greaterThan
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|checkValueInEachDocWithFunctionScore
specifier|private
name|void
name|checkValueInEachDocWithFunctionScore
parameter_list|(
name|String
name|fieldScript
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|expectedFieldVals
parameter_list|,
name|String
name|scoreScript
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|expectedScore
parameter_list|,
name|int
name|numExpectedDocs
parameter_list|)
block|{
name|SearchResponse
name|sr
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|functionScoreQuery
argument_list|(
name|ScoreFunctionBuilders
operator|.
name|scriptFunction
argument_list|(
name|scoreScript
argument_list|)
argument_list|)
argument_list|)
operator|.
name|addScriptField
argument_list|(
literal|"tvtest"
argument_list|,
name|fieldScript
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|sr
argument_list|,
name|numExpectedDocs
argument_list|)
expr_stmt|;
for|for
control|(
name|SearchHit
name|hit
range|:
name|sr
operator|.
name|getHits
argument_list|()
operator|.
name|getHits
argument_list|()
control|)
block|{
name|Object
name|result
init|=
name|hit
operator|.
name|getFields
argument_list|()
operator|.
name|get
argument_list|(
literal|"tvtest"
argument_list|)
operator|.
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Object
name|expectedResult
init|=
name|expectedFieldVals
operator|.
name|get
argument_list|(
name|hit
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
literal|"for doc "
operator|+
name|hit
operator|.
name|getId
argument_list|()
argument_list|,
name|result
argument_list|,
name|equalTo
argument_list|(
name|expectedResult
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"for doc "
operator|+
name|hit
operator|.
name|getId
argument_list|()
argument_list|,
operator|(
operator|(
name|Float
operator|)
name|expectedScore
operator|.
name|get
argument_list|(
name|hit
operator|.
name|getId
argument_list|()
argument_list|)
operator|)
operator|.
name|doubleValue
argument_list|()
argument_list|,
name|Matchers
operator|.
name|closeTo
argument_list|(
name|hit
operator|.
name|score
argument_list|()
argument_list|,
literal|1.e-4
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|checkValueInEachDoc
specifier|private
name|void
name|checkValueInEachDoc
parameter_list|(
name|String
name|script
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|expectedResults
parameter_list|,
name|int
name|numExpectedDocs
parameter_list|)
block|{
name|SearchResponse
name|sr
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|addScriptField
argument_list|(
literal|"tvtest"
argument_list|,
name|script
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|sr
argument_list|,
name|numExpectedDocs
argument_list|)
expr_stmt|;
for|for
control|(
name|SearchHit
name|hit
range|:
name|sr
operator|.
name|getHits
argument_list|()
operator|.
name|getHits
argument_list|()
control|)
block|{
name|Object
name|result
init|=
name|hit
operator|.
name|getFields
argument_list|()
operator|.
name|get
argument_list|(
literal|"tvtest"
argument_list|)
operator|.
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Object
name|expectedResult
init|=
name|expectedResults
operator|.
name|get
argument_list|(
name|hit
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
literal|"for doc "
operator|+
name|hit
operator|.
name|getId
argument_list|()
argument_list|,
name|result
argument_list|,
name|equalTo
argument_list|(
name|expectedResult
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|checkValueInEachDoc
specifier|private
name|void
name|checkValueInEachDoc
parameter_list|(
name|int
name|value
parameter_list|,
name|String
name|script
parameter_list|,
name|int
name|numExpectedDocs
parameter_list|)
block|{
name|SearchResponse
name|sr
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|addScriptField
argument_list|(
literal|"tvtest"
argument_list|,
name|script
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertHitCount
argument_list|(
name|sr
argument_list|,
name|numExpectedDocs
argument_list|)
expr_stmt|;
for|for
control|(
name|SearchHit
name|hit
range|:
name|sr
operator|.
name|getHits
argument_list|()
operator|.
name|getHits
argument_list|()
control|)
block|{
name|Object
name|result
init|=
name|hit
operator|.
name|getFields
argument_list|()
operator|.
name|get
argument_list|(
literal|"tvtest"
argument_list|)
operator|.
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|instanceof
name|Integer
condition|)
block|{
name|assertThat
argument_list|(
operator|(
name|Integer
operator|)
name|result
argument_list|,
name|equalTo
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|result
operator|instanceof
name|Long
condition|)
block|{
name|assertThat
argument_list|(
operator|(
operator|(
name|Long
operator|)
name|result
operator|)
operator|.
name|intValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

