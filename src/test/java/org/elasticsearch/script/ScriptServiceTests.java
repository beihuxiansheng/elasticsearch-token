begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.script
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|script
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|Streams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|Environment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|node
operator|.
name|settings
operator|.
name|NodeSettingsService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|expression
operator|.
name|ExpressionScriptEngineService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|groovy
operator|.
name|GroovyScriptEngineService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|lookup
operator|.
name|SearchLookup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|watcher
operator|.
name|ResourceWatcherService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
operator|.
name|settingsBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|ScriptServiceTests
specifier|public
class|class
name|ScriptServiceTests
extends|extends
name|ElasticsearchTestCase
block|{
DECL|field|resourceWatcherService
specifier|private
name|ResourceWatcherService
name|resourceWatcherService
decl_stmt|;
DECL|field|scriptService
specifier|private
name|ScriptService
name|scriptService
decl_stmt|;
DECL|field|scriptsFilePath
specifier|private
name|Path
name|scriptsFilePath
decl_stmt|;
annotation|@
name|Before
DECL|method|setup
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|genericConfigFolder
init|=
name|newTempDirPath
argument_list|()
decl_stmt|;
name|Settings
name|settings
init|=
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"path.conf"
argument_list|,
name|genericConfigFolder
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Environment
name|environment
init|=
operator|new
name|Environment
argument_list|(
name|settings
argument_list|)
decl_stmt|;
name|resourceWatcherService
operator|=
operator|new
name|ResourceWatcherService
argument_list|(
name|settings
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> setup script service"
argument_list|)
expr_stmt|;
name|scriptService
operator|=
operator|new
name|ScriptService
argument_list|(
name|settings
argument_list|,
name|environment
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
operator|new
name|TestEngineService
argument_list|()
argument_list|,
operator|new
name|GroovyScriptEngineService
argument_list|(
name|settings
argument_list|)
argument_list|,
operator|new
name|ExpressionScriptEngineService
argument_list|(
name|settings
argument_list|)
argument_list|)
argument_list|,
name|resourceWatcherService
argument_list|,
operator|new
name|NodeSettingsService
argument_list|(
name|settings
argument_list|)
argument_list|)
expr_stmt|;
name|scriptsFilePath
operator|=
name|genericConfigFolder
operator|.
name|resolve
argument_list|(
literal|"scripts"
argument_list|)
expr_stmt|;
name|Files
operator|.
name|createDirectories
argument_list|(
name|scriptsFilePath
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testScriptsWithoutExtensions
specifier|public
name|void
name|testScriptsWithoutExtensions
parameter_list|()
throws|throws
name|IOException
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"--> setup two test files one with extension and another without"
argument_list|)
expr_stmt|;
name|Path
name|testFileNoExt
init|=
name|scriptsFilePath
operator|.
name|resolve
argument_list|(
literal|"test_no_ext"
argument_list|)
decl_stmt|;
name|Path
name|testFileWithExt
init|=
name|scriptsFilePath
operator|.
name|resolve
argument_list|(
literal|"test_script.tst"
argument_list|)
decl_stmt|;
name|Streams
operator|.
name|copy
argument_list|(
literal|"test_file_no_ext"
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|,
name|Files
operator|.
name|newOutputStream
argument_list|(
name|testFileNoExt
argument_list|)
argument_list|)
expr_stmt|;
name|Streams
operator|.
name|copy
argument_list|(
literal|"test_file"
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|,
name|Files
operator|.
name|newOutputStream
argument_list|(
name|testFileWithExt
argument_list|)
argument_list|)
expr_stmt|;
name|resourceWatcherService
operator|.
name|notifyNow
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> verify that file with extension was correctly processed"
argument_list|)
expr_stmt|;
name|CompiledScript
name|compiledScript
init|=
name|scriptService
operator|.
name|compile
argument_list|(
literal|"test"
argument_list|,
literal|"test_script"
argument_list|,
name|ScriptService
operator|.
name|ScriptType
operator|.
name|FILE
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|compiledScript
operator|.
name|compiled
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|(
name|Object
operator|)
literal|"compiled_test_file"
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> delete both files"
argument_list|)
expr_stmt|;
name|Files
operator|.
name|delete
argument_list|(
name|testFileNoExt
argument_list|)
expr_stmt|;
name|Files
operator|.
name|delete
argument_list|(
name|testFileWithExt
argument_list|)
expr_stmt|;
name|resourceWatcherService
operator|.
name|notifyNow
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> verify that file with extension was correctly removed"
argument_list|)
expr_stmt|;
try|try
block|{
name|scriptService
operator|.
name|compile
argument_list|(
literal|"test"
argument_list|,
literal|"test_script"
argument_list|,
name|ScriptService
operator|.
name|ScriptType
operator|.
name|FILE
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"the script test_script should no longer exist"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ElasticsearchIllegalArgumentException
name|ex
parameter_list|)
block|{
name|assertThat
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"Unable to find on disk script test_script"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testScriptsSameNameDifferentLanguage
specifier|public
name|void
name|testScriptsSameNameDifferentLanguage
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|groovyScriptPath
init|=
name|scriptsFilePath
operator|.
name|resolve
argument_list|(
literal|"script.groovy"
argument_list|)
decl_stmt|;
name|Path
name|expScriptPath
init|=
name|scriptsFilePath
operator|.
name|resolve
argument_list|(
literal|"script.expression"
argument_list|)
decl_stmt|;
name|Streams
operator|.
name|copy
argument_list|(
literal|"10"
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|,
name|Files
operator|.
name|newOutputStream
argument_list|(
name|groovyScriptPath
argument_list|)
argument_list|)
expr_stmt|;
name|Streams
operator|.
name|copy
argument_list|(
literal|"20"
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|,
name|Files
operator|.
name|newOutputStream
argument_list|(
name|expScriptPath
argument_list|)
argument_list|)
expr_stmt|;
name|resourceWatcherService
operator|.
name|notifyNow
argument_list|()
expr_stmt|;
name|CompiledScript
name|groovyScript
init|=
name|scriptService
operator|.
name|compile
argument_list|(
name|GroovyScriptEngineService
operator|.
name|NAME
argument_list|,
literal|"script"
argument_list|,
name|ScriptService
operator|.
name|ScriptType
operator|.
name|FILE
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|groovyScript
operator|.
name|lang
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|GroovyScriptEngineService
operator|.
name|NAME
argument_list|)
argument_list|)
expr_stmt|;
name|CompiledScript
name|expressionScript
init|=
name|scriptService
operator|.
name|compile
argument_list|(
name|ExpressionScriptEngineService
operator|.
name|NAME
argument_list|,
literal|"script"
argument_list|,
name|ScriptService
operator|.
name|ScriptType
operator|.
name|FILE
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|expressionScript
operator|.
name|lang
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|ExpressionScriptEngineService
operator|.
name|NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInlineScriptCompiledOnceMultipleLangAcronyms
specifier|public
name|void
name|testInlineScriptCompiledOnceMultipleLangAcronyms
parameter_list|()
throws|throws
name|IOException
block|{
name|CompiledScript
name|compiledScript1
init|=
name|scriptService
operator|.
name|compile
argument_list|(
literal|"test"
argument_list|,
literal|"test_script"
argument_list|,
name|ScriptService
operator|.
name|ScriptType
operator|.
name|INLINE
argument_list|)
decl_stmt|;
name|CompiledScript
name|compiledScript2
init|=
name|scriptService
operator|.
name|compile
argument_list|(
literal|"test2"
argument_list|,
literal|"test_script"
argument_list|,
name|ScriptService
operator|.
name|ScriptType
operator|.
name|INLINE
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|compiledScript1
argument_list|,
name|sameInstance
argument_list|(
name|compiledScript2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFileScriptCompiledOnceMultipleLangAcronyms
specifier|public
name|void
name|testFileScriptCompiledOnceMultipleLangAcronyms
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|scriptPath
init|=
name|scriptsFilePath
operator|.
name|resolve
argument_list|(
literal|"test_script.tst"
argument_list|)
decl_stmt|;
name|Streams
operator|.
name|copy
argument_list|(
literal|"test_file"
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|,
name|Files
operator|.
name|newOutputStream
argument_list|(
name|scriptPath
argument_list|)
argument_list|)
expr_stmt|;
name|resourceWatcherService
operator|.
name|notifyNow
argument_list|()
expr_stmt|;
name|CompiledScript
name|compiledScript1
init|=
name|scriptService
operator|.
name|compile
argument_list|(
literal|"test"
argument_list|,
literal|"test_script"
argument_list|,
name|ScriptService
operator|.
name|ScriptType
operator|.
name|FILE
argument_list|)
decl_stmt|;
name|CompiledScript
name|compiledScript2
init|=
name|scriptService
operator|.
name|compile
argument_list|(
literal|"test2"
argument_list|,
literal|"test_script"
argument_list|,
name|ScriptService
operator|.
name|ScriptType
operator|.
name|FILE
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|compiledScript1
argument_list|,
name|sameInstance
argument_list|(
name|compiledScript2
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|class|TestEngineService
specifier|public
specifier|static
class|class
name|TestEngineService
implements|implements
name|ScriptEngineService
block|{
annotation|@
name|Override
DECL|method|types
specifier|public
name|String
index|[]
name|types
parameter_list|()
block|{
return|return
operator|new
name|String
index|[]
block|{
literal|"test"
block|,
literal|"test2"
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|extensions
specifier|public
name|String
index|[]
name|extensions
parameter_list|()
block|{
return|return
operator|new
name|String
index|[]
block|{
literal|"test"
block|,
literal|"tst"
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|sandboxed
specifier|public
name|boolean
name|sandboxed
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|compile
specifier|public
name|Object
name|compile
parameter_list|(
name|String
name|script
parameter_list|)
block|{
return|return
literal|"compiled_"
operator|+
name|script
return|;
block|}
annotation|@
name|Override
DECL|method|executable
specifier|public
name|ExecutableScript
name|executable
parameter_list|(
specifier|final
name|Object
name|compiledScript
parameter_list|,
annotation|@
name|Nullable
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|vars
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|search
specifier|public
name|SearchScript
name|search
parameter_list|(
name|Object
name|compiledScript
parameter_list|,
name|SearchLookup
name|lookup
parameter_list|,
annotation|@
name|Nullable
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|vars
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|execute
specifier|public
name|Object
name|execute
parameter_list|(
name|Object
name|compiledScript
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|vars
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|unwrap
specifier|public
name|Object
name|unwrap
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{          }
annotation|@
name|Override
DECL|method|scriptRemoved
specifier|public
name|void
name|scriptRemoved
parameter_list|(
name|CompiledScript
name|script
parameter_list|)
block|{
comment|// Nothing to do here
block|}
block|}
block|}
end_class

end_unit

