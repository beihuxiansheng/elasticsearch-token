begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.transport
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|transport
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|get
operator|.
name|GetIndexAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|bench
operator|.
name|AbortBenchmarkAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|bench
operator|.
name|BenchmarkAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|bench
operator|.
name|BenchmarkService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|bench
operator|.
name|BenchmarkStatusAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|exists
operator|.
name|ExistsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchIntegrationTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|*
import|;
end_import

begin_class
DECL|class|ActionNamesTests
specifier|public
class|class
name|ActionNamesTests
extends|extends
name|ElasticsearchIntegrationTest
block|{
annotation|@
name|Test
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|testActionNamesCategories
specifier|public
name|void
name|testActionNamesCategories
parameter_list|()
throws|throws
name|NoSuchFieldException
throws|,
name|IllegalAccessException
block|{
name|TransportService
name|transportService
init|=
name|internalCluster
argument_list|()
operator|.
name|getInstance
argument_list|(
name|TransportService
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|action
range|:
name|transportService
operator|.
name|serverHandlers
operator|.
name|keySet
argument_list|()
control|)
block|{
name|assertThat
argument_list|(
literal|"action doesn't belong to known category"
argument_list|,
name|action
argument_list|,
name|either
argument_list|(
name|startsWith
argument_list|(
literal|"indices:admin"
argument_list|)
argument_list|)
operator|.
name|or
argument_list|(
name|startsWith
argument_list|(
literal|"indices:monitor"
argument_list|)
argument_list|)
operator|.
name|or
argument_list|(
name|startsWith
argument_list|(
literal|"indices:data/read"
argument_list|)
argument_list|)
operator|.
name|or
argument_list|(
name|startsWith
argument_list|(
literal|"indices:data/write"
argument_list|)
argument_list|)
operator|.
name|or
argument_list|(
name|startsWith
argument_list|(
literal|"indices:data/benchmark"
argument_list|)
argument_list|)
operator|.
name|or
argument_list|(
name|startsWith
argument_list|(
literal|"cluster:admin"
argument_list|)
argument_list|)
operator|.
name|or
argument_list|(
name|startsWith
argument_list|(
literal|"cluster:monitor"
argument_list|)
argument_list|)
operator|.
name|or
argument_list|(
name|startsWith
argument_list|(
literal|"internal:"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testActionNamesMapping
specifier|public
name|void
name|testActionNamesMapping
parameter_list|()
block|{
name|TransportService
name|transportService
init|=
name|internalCluster
argument_list|()
operator|.
name|getInstance
argument_list|(
name|TransportService
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|action
range|:
name|transportService
operator|.
name|serverHandlers
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|post_1_4_actions
operator|.
name|contains
argument_list|(
name|action
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|String
name|pre_1_4_action
init|=
name|ActionNames
operator|.
name|pre_1_4_Action
argument_list|(
name|action
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
literal|"no pre 1.4 name for action "
operator|+
name|action
argument_list|,
name|pre_1_4_action
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|post_1_4_action
init|=
name|ActionNames
operator|.
name|post_1_4_action
argument_list|(
name|pre_1_4_action
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|post_1_4_action
argument_list|,
name|equalTo
argument_list|(
name|action
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testOutgoingAction
specifier|public
name|void
name|testOutgoingAction
parameter_list|()
block|{
name|TransportService
name|transportService
init|=
name|internalCluster
argument_list|()
operator|.
name|getInstance
argument_list|(
name|TransportService
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|actions
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|transportService
operator|.
name|serverHandlers
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|iters
init|=
name|iterations
argument_list|(
literal|10
argument_list|,
literal|100
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iters
condition|;
name|i
operator|++
control|)
block|{
comment|//we rarely use a custom action since plugins might inject their own actions
name|boolean
name|customAction
init|=
name|rarely
argument_list|()
decl_stmt|;
name|String
name|action
decl_stmt|;
if|if
condition|(
name|customAction
condition|)
block|{
do|do
block|{
name|action
operator|=
name|randomAsciiOfLength
argument_list|(
name|randomInt
argument_list|(
literal|30
argument_list|)
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|actions
operator|.
name|contains
argument_list|(
name|action
argument_list|)
condition|)
do|;
block|}
else|else
block|{
name|action
operator|=
name|randomFrom
argument_list|(
name|actions
argument_list|)
expr_stmt|;
block|}
name|Version
name|version
init|=
name|randomVersion
argument_list|()
decl_stmt|;
name|String
name|outgoingAction
init|=
name|ActionNames
operator|.
name|outgoingAction
argument_list|(
name|action
argument_list|,
name|version
argument_list|)
decl_stmt|;
if|if
condition|(
name|version
operator|.
name|onOrAfter
argument_list|(
name|Version
operator|.
name|V_1_4_0_Beta
argument_list|)
operator|||
name|customAction
operator|||
name|post_1_4_actions
operator|.
name|contains
argument_list|(
name|action
argument_list|)
condition|)
block|{
name|assertThat
argument_list|(
name|outgoingAction
argument_list|,
name|equalTo
argument_list|(
name|action
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|outgoingAction
argument_list|,
name|not
argument_list|(
name|equalTo
argument_list|(
name|action
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|outgoingAction
argument_list|,
name|equalTo
argument_list|(
name|ActionNames
operator|.
name|pre_1_4_Action
argument_list|(
name|action
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testIncomingAction
specifier|public
name|void
name|testIncomingAction
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|pre_1_4_names
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|ActionNames
operator|.
name|ACTION_NAMES
operator|.
name|inverse
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
name|TransportService
name|transportService
init|=
name|internalCluster
argument_list|()
operator|.
name|getInstance
argument_list|(
name|TransportService
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|actions
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|transportService
operator|.
name|serverHandlers
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
name|Version
name|version
init|=
name|randomVersion
argument_list|()
decl_stmt|;
name|int
name|iters
init|=
name|iterations
argument_list|(
literal|10
argument_list|,
literal|100
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iters
condition|;
name|i
operator|++
control|)
block|{
comment|//we rarely use a custom action since plugins might inject their own actions
name|boolean
name|customAction
init|=
name|rarely
argument_list|()
decl_stmt|;
name|String
name|action
decl_stmt|;
if|if
condition|(
name|customAction
condition|)
block|{
do|do
block|{
name|action
operator|=
name|randomAsciiOfLength
argument_list|(
name|randomInt
argument_list|(
literal|30
argument_list|)
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|pre_1_4_names
operator|.
name|contains
argument_list|(
name|action
argument_list|)
condition|)
do|;
block|}
else|else
block|{
if|if
condition|(
name|version
operator|.
name|before
argument_list|(
name|Version
operator|.
name|V_1_4_0_Beta
argument_list|)
condition|)
block|{
name|action
operator|=
name|randomFrom
argument_list|(
name|pre_1_4_names
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|action
operator|=
name|randomFrom
argument_list|(
name|actions
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|incomingAction
init|=
name|ActionNames
operator|.
name|incomingAction
argument_list|(
name|action
argument_list|,
name|version
argument_list|)
decl_stmt|;
if|if
condition|(
name|version
operator|.
name|onOrAfter
argument_list|(
name|Version
operator|.
name|V_1_4_0_Beta
argument_list|)
operator|||
name|customAction
condition|)
block|{
name|assertThat
argument_list|(
name|incomingAction
argument_list|,
name|equalTo
argument_list|(
name|action
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|incomingAction
argument_list|,
name|not
argument_list|(
name|equalTo
argument_list|(
name|action
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|incomingAction
argument_list|,
name|equalTo
argument_list|(
name|ActionNames
operator|.
name|post_1_4_action
argument_list|(
name|action
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|field|post_1_4_actions
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|post_1_4_actions
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
static|static
block|{
comment|//add here new actions that don't need a mapping as they weren't available prior to 1.4
name|post_1_4_actions
operator|.
name|add
argument_list|(
name|BenchmarkService
operator|.
name|STATUS_ACTION_NAME
argument_list|)
expr_stmt|;
name|post_1_4_actions
operator|.
name|add
argument_list|(
name|BenchmarkService
operator|.
name|START_ACTION_NAME
argument_list|)
expr_stmt|;
name|post_1_4_actions
operator|.
name|add
argument_list|(
name|BenchmarkService
operator|.
name|ABORT_ACTION_NAME
argument_list|)
expr_stmt|;
name|post_1_4_actions
operator|.
name|add
argument_list|(
name|BenchmarkAction
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|post_1_4_actions
operator|.
name|add
argument_list|(
name|BenchmarkStatusAction
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|post_1_4_actions
operator|.
name|add
argument_list|(
name|AbortBenchmarkAction
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|post_1_4_actions
operator|.
name|add
argument_list|(
name|ExistsAction
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|post_1_4_actions
operator|.
name|add
argument_list|(
name|ExistsAction
operator|.
name|NAME
operator|+
literal|"[s]"
argument_list|)
expr_stmt|;
name|post_1_4_actions
operator|.
name|add
argument_list|(
name|GetIndexAction
operator|.
name|NAME
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

