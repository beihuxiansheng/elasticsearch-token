begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.benchmark.scripts.expression
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|benchmark
operator|.
name|scripts
operator|.
name|expression
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|bulk
operator|.
name|BulkRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|IndicesAdminClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|StopWatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|node
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|sort
operator|.
name|ScriptSortBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|sort
operator|.
name|SortBuilders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|PeriodType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
operator|.
name|settingsBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|node
operator|.
name|NodeBuilder
operator|.
name|nodeBuilder
import|;
end_import

begin_class
DECL|class|ScriptComparisonBenchmark
specifier|public
class|class
name|ScriptComparisonBenchmark
block|{
DECL|field|clusterName
specifier|static
specifier|final
name|String
name|clusterName
init|=
name|ScriptComparisonBenchmark
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
decl_stmt|;
DECL|field|indexName
specifier|static
specifier|final
name|String
name|indexName
init|=
literal|"test"
decl_stmt|;
DECL|field|langs
specifier|static
name|String
index|[]
name|langs
init|=
block|{
literal|"expression"
block|,
literal|"native"
block|,
literal|"groovy"
block|}
decl_stmt|;
DECL|field|scripts
specifier|static
name|String
index|[]
index|[]
name|scripts
init|=
block|{
comment|// the first value is the "reference" version (pure math)
block|{
literal|"x"
block|,
literal|"doc['x'].value"
block|,
name|NativeScript1
operator|.
name|NATIVE_SCRIPT_1
block|,
literal|"doc['x'].value"
block|}
block|,
block|{
literal|"x + y"
block|,
literal|"doc['x'].value + doc['y'].value"
block|,
name|NativeScript2
operator|.
name|NATIVE_SCRIPT_2
block|,
literal|"doc['x'].value + doc['y'].value"
block|,         }
block|,
block|{
literal|"1.2 * x / y"
block|,
literal|"1.2 * doc['x'].value / doc['y'].value"
block|,
name|NativeScript3
operator|.
name|NATIVE_SCRIPT_3
block|,
literal|"1.2 * doc['x'].value / doc['y'].value"
block|,         }
block|,
block|{
literal|"sqrt(abs(z)) + ln(abs(x * y))"
block|,
literal|"sqrt(abs(doc['z'].value)) + ln(abs(doc['x'].value * doc['y'].value))"
block|,
name|NativeScript4
operator|.
name|NATIVE_SCRIPT_4
block|,
literal|"sqrt(abs(doc['z'].value)) + log(abs(doc['x'].value * doc['y'].value))"
block|}
block|}
decl_stmt|;
DECL|method|main
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|numDocs
init|=
literal|1000000
decl_stmt|;
name|int
name|numQueries
init|=
literal|1000
decl_stmt|;
name|Client
name|client
init|=
name|setupIndex
argument_list|()
decl_stmt|;
name|indexDocs
argument_list|(
name|client
argument_list|,
name|numDocs
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|scriptNum
init|=
literal|0
init|;
name|scriptNum
operator|<
name|scripts
operator|.
name|length
condition|;
operator|++
name|scriptNum
control|)
block|{
name|runBenchmark
argument_list|(
name|client
argument_list|,
name|scriptNum
argument_list|,
name|numQueries
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|runBenchmark
specifier|static
name|void
name|runBenchmark
parameter_list|(
name|Client
name|client
parameter_list|,
name|int
name|scriptNum
parameter_list|,
name|int
name|numQueries
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Script: "
operator|+
name|scripts
index|[
name|scriptNum
index|]
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"--------------------------------"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|langNum
init|=
literal|0
init|;
name|langNum
operator|<
name|langs
operator|.
name|length
condition|;
operator|++
name|langNum
control|)
block|{
name|String
name|lang
init|=
name|langs
index|[
name|langNum
index|]
decl_stmt|;
name|String
name|script
init|=
name|scripts
index|[
name|scriptNum
index|]
index|[
name|langNum
operator|+
literal|1
index|]
decl_stmt|;
name|timeQueries
argument_list|(
name|client
argument_list|,
name|lang
argument_list|,
name|script
argument_list|,
name|numQueries
operator|/
literal|10
argument_list|)
expr_stmt|;
comment|// warmup
name|TimeValue
name|time
init|=
name|timeQueries
argument_list|(
name|client
argument_list|,
name|lang
argument_list|,
name|script
argument_list|,
name|numQueries
argument_list|)
decl_stmt|;
name|printResults
argument_list|(
name|lang
argument_list|,
name|time
argument_list|,
name|numQueries
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setupIndex
specifier|static
name|Client
name|setupIndex
parameter_list|()
throws|throws
name|Exception
block|{
comment|// create cluster
name|Settings
name|settings
init|=
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"plugin.types"
argument_list|,
name|NativeScriptPlugin
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
literal|"node1"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Node
name|node1
init|=
name|nodeBuilder
argument_list|()
operator|.
name|clusterName
argument_list|(
name|clusterName
argument_list|)
operator|.
name|settings
argument_list|(
name|settings
argument_list|)
operator|.
name|node
argument_list|()
decl_stmt|;
name|Client
name|client
init|=
name|node1
operator|.
name|client
argument_list|()
decl_stmt|;
name|client
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareHealth
argument_list|(
name|indexName
argument_list|)
operator|.
name|setWaitForGreenStatus
argument_list|()
operator|.
name|setTimeout
argument_list|(
literal|"10s"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
comment|// delete the index, if it exists
try|try
block|{
name|client
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareDelete
argument_list|(
name|indexName
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ElasticsearchException
name|e
parameter_list|)
block|{
comment|// ok if the index didn't exist
block|}
comment|// create mappings
name|IndicesAdminClient
name|admin
init|=
name|client
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
decl_stmt|;
name|admin
operator|.
name|prepareCreate
argument_list|(
name|indexName
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"doc"
argument_list|,
literal|"x"
argument_list|,
literal|"type=long"
argument_list|,
literal|"y"
argument_list|,
literal|"type=double"
argument_list|)
expr_stmt|;
name|client
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareHealth
argument_list|(
name|indexName
argument_list|)
operator|.
name|setWaitForGreenStatus
argument_list|()
operator|.
name|setTimeout
argument_list|(
literal|"10s"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
return|return
name|client
return|;
block|}
DECL|method|indexDocs
specifier|static
name|void
name|indexDocs
parameter_list|(
name|Client
name|client
parameter_list|,
name|int
name|numDocs
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|"Indexing "
operator|+
name|numDocs
operator|+
literal|" random docs..."
argument_list|)
expr_stmt|;
name|BulkRequestBuilder
name|bulkRequest
init|=
name|client
operator|.
name|prepareBulk
argument_list|()
decl_stmt|;
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|bulkRequest
operator|.
name|add
argument_list|(
name|client
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"doc"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"x"
argument_list|,
name|r
operator|.
name|nextInt
argument_list|()
argument_list|,
literal|"y"
argument_list|,
name|r
operator|.
name|nextDouble
argument_list|()
argument_list|,
literal|"z"
argument_list|,
name|r
operator|.
name|nextDouble
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|%
literal|1000
operator|==
literal|0
condition|)
block|{
name|bulkRequest
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|bulkRequest
operator|=
name|client
operator|.
name|prepareBulk
argument_list|()
expr_stmt|;
block|}
block|}
name|bulkRequest
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareRefresh
argument_list|(
literal|"test"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareFlush
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setFull
argument_list|(
literal|true
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"done"
argument_list|)
expr_stmt|;
block|}
DECL|method|timeQueries
specifier|static
name|TimeValue
name|timeQueries
parameter_list|(
name|Client
name|client
parameter_list|,
name|String
name|lang
parameter_list|,
name|String
name|script
parameter_list|,
name|int
name|numQueries
parameter_list|)
block|{
name|ScriptSortBuilder
name|sort
init|=
name|SortBuilders
operator|.
name|scriptSort
argument_list|(
name|script
argument_list|,
literal|"number"
argument_list|)
operator|.
name|lang
argument_list|(
name|lang
argument_list|)
decl_stmt|;
name|SearchRequestBuilder
name|req
init|=
name|client
operator|.
name|prepareSearch
argument_list|(
name|indexName
argument_list|)
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|addSort
argument_list|(
name|sort
argument_list|)
decl_stmt|;
name|StopWatch
name|timer
init|=
operator|new
name|StopWatch
argument_list|()
decl_stmt|;
name|timer
operator|.
name|start
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numQueries
condition|;
operator|++
name|i
control|)
block|{
name|req
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
name|timer
operator|.
name|stop
argument_list|()
expr_stmt|;
return|return
name|timer
operator|.
name|totalTime
argument_list|()
return|;
block|}
DECL|method|printResults
specifier|static
name|void
name|printResults
parameter_list|(
name|String
name|lang
parameter_list|,
name|TimeValue
name|time
parameter_list|,
name|int
name|numQueries
parameter_list|)
block|{
name|long
name|avgReq
init|=
name|time
operator|.
name|millis
argument_list|()
operator|/
name|numQueries
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|lang
operator|+
literal|": "
operator|+
name|time
operator|.
name|format
argument_list|(
name|PeriodType
operator|.
name|seconds
argument_list|()
argument_list|)
operator|+
literal|" ("
operator|+
name|avgReq
operator|+
literal|" msec per req)"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

