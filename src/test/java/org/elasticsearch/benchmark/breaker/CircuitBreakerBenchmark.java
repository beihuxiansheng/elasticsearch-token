begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.benchmark.breaker
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|benchmark
operator|.
name|breaker
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|bulk
operator|.
name|BulkRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|breaker
operator|.
name|CircuitBreaker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|IndexAlreadyExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|breaker
operator|.
name|HierarchyCircuitBreakerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|node
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|node
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|terms
operator|.
name|Terms
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
operator|.
name|settingsBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
operator|.
name|matchAllQuery
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregationBuilders
operator|.
name|terms
import|;
end_import

begin_comment
comment|/**  * Benchmarks for different implementations of the circuit breaker  */
end_comment

begin_class
DECL|class|CircuitBreakerBenchmark
specifier|public
class|class
name|CircuitBreakerBenchmark
block|{
DECL|field|INDEX
specifier|private
specifier|static
specifier|final
name|String
name|INDEX
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
DECL|field|QUERIES
specifier|private
specifier|static
specifier|final
name|int
name|QUERIES
init|=
literal|100
decl_stmt|;
DECL|field|BULK_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|BULK_SIZE
init|=
literal|100
decl_stmt|;
DECL|field|NUM_DOCS
specifier|private
specifier|static
specifier|final
name|int
name|NUM_DOCS
init|=
literal|2_000_000
decl_stmt|;
DECL|field|AGG_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|AGG_SIZE
init|=
literal|25
decl_stmt|;
DECL|method|switchToNoop
specifier|private
specifier|static
name|void
name|switchToNoop
parameter_list|(
name|Client
name|client
parameter_list|)
block|{
name|Settings
name|settings
init|=
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
name|HierarchyCircuitBreakerService
operator|.
name|REQUEST_CIRCUIT_BREAKER_TYPE_SETTING
argument_list|,
name|CircuitBreaker
operator|.
name|Type
operator|.
name|NOOP
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|client
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareUpdateSettings
argument_list|()
operator|.
name|setTransientSettings
argument_list|(
name|settings
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
block|}
DECL|method|switchToMemory
specifier|private
specifier|static
name|void
name|switchToMemory
parameter_list|(
name|Client
name|client
parameter_list|)
block|{
name|Settings
name|settings
init|=
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
name|HierarchyCircuitBreakerService
operator|.
name|REQUEST_CIRCUIT_BREAKER_TYPE_SETTING
argument_list|,
name|CircuitBreaker
operator|.
name|Type
operator|.
name|MEMORY
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|client
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareUpdateSettings
argument_list|()
operator|.
name|setTransientSettings
argument_list|(
name|settings
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
block|}
DECL|method|runSingleThreadedQueries
specifier|private
specifier|static
name|void
name|runSingleThreadedQueries
parameter_list|(
name|Client
name|client
parameter_list|)
block|{
name|long
name|totalTime
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|QUERIES
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|%
literal|10
operator|==
literal|0
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"--> query #"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|SearchResponse
name|resp
init|=
name|client
operator|.
name|prepareSearch
argument_list|(
name|INDEX
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|terms
argument_list|(
literal|"myterms"
argument_list|)
operator|.
name|size
argument_list|(
name|AGG_SIZE
argument_list|)
operator|.
name|field
argument_list|(
literal|"num"
argument_list|)
argument_list|)
operator|.
name|setSearchType
argument_list|(
name|SearchType
operator|.
name|COUNT
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|Terms
name|terms
init|=
name|resp
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"myterms"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"term aggs were calculated"
argument_list|,
name|terms
argument_list|)
expr_stmt|;
name|totalTime
operator|+=
name|resp
operator|.
name|getTookInMillis
argument_list|()
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"--> single threaded average time: "
operator|+
operator|(
name|totalTime
operator|/
name|QUERIES
operator|)
operator|+
literal|"ms"
argument_list|)
expr_stmt|;
block|}
DECL|method|runMultiThreadedQueries
specifier|private
specifier|static
name|void
name|runMultiThreadedQueries
parameter_list|(
specifier|final
name|Client
name|client
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|AtomicLong
name|totalThreadedTime
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|int
name|THREADS
init|=
literal|10
decl_stmt|;
name|Thread
name|threads
index|[]
init|=
operator|new
name|Thread
index|[
name|THREADS
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|THREADS
condition|;
name|i
operator|++
control|)
block|{
name|threads
index|[
name|i
index|]
operator|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|long
name|tid
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getId
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|QUERIES
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|%
literal|30
operator|==
literal|0
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"--> ["
operator|+
name|tid
operator|+
literal|"] query # "
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|SearchResponse
name|resp
init|=
name|client
operator|.
name|prepareSearch
argument_list|(
name|INDEX
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|terms
argument_list|(
literal|"myterms"
argument_list|)
operator|.
name|size
argument_list|(
name|AGG_SIZE
argument_list|)
operator|.
name|field
argument_list|(
literal|"num"
argument_list|)
argument_list|)
operator|.
name|setSearchType
argument_list|(
name|SearchType
operator|.
name|COUNT
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|Terms
name|terms
init|=
name|resp
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"myterms"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"term aggs were calculated"
argument_list|,
name|terms
argument_list|)
expr_stmt|;
name|totalThreadedTime
operator|.
name|addAndGet
argument_list|(
name|resp
operator|.
name|getTookInMillis
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"--> starting "
operator|+
name|THREADS
operator|+
literal|" threads for parallel aggregating"
argument_list|)
expr_stmt|;
for|for
control|(
name|Thread
name|t
range|:
name|threads
control|)
block|{
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Thread
name|t
range|:
name|threads
control|)
block|{
name|t
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"--> threaded average time: "
operator|+
operator|(
name|totalThreadedTime
operator|.
name|get
argument_list|()
operator|/
operator|(
name|THREADS
operator|*
name|QUERIES
operator|)
operator|)
operator|+
literal|"ms"
argument_list|)
expr_stmt|;
block|}
DECL|method|main
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
name|args
index|[]
parameter_list|)
throws|throws
name|Exception
block|{
name|Node
name|node
init|=
name|NodeBuilder
operator|.
name|nodeBuilder
argument_list|()
operator|.
name|settings
argument_list|(
name|ImmutableSettings
operator|.
name|settingsBuilder
argument_list|()
argument_list|)
operator|.
name|node
argument_list|()
decl_stmt|;
specifier|final
name|Client
name|client
init|=
name|node
operator|.
name|client
argument_list|()
decl_stmt|;
try|try
block|{
try|try
block|{
name|client
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareDelete
argument_list|(
name|INDEX
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Ignore
block|}
try|try
block|{
name|client
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
name|INDEX
argument_list|)
operator|.
name|setSettings
argument_list|(
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"number_of_shards"
argument_list|,
literal|2
argument_list|)
operator|.
name|put
argument_list|(
literal|"number_of_replicas"
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexAlreadyExistsException
name|e
parameter_list|)
block|{}
name|client
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareHealth
argument_list|()
operator|.
name|setWaitForYellowStatus
argument_list|()
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"--> indexing: "
operator|+
name|NUM_DOCS
operator|+
literal|" documents..."
argument_list|)
expr_stmt|;
name|BulkRequestBuilder
name|bulkBuilder
init|=
name|client
operator|.
name|prepareBulk
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_DOCS
condition|;
name|i
operator|++
control|)
block|{
name|bulkBuilder
operator|.
name|add
argument_list|(
name|client
operator|.
name|prepareIndex
argument_list|(
name|INDEX
argument_list|,
literal|"doc"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"num"
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|%
name|BULK_SIZE
operator|==
literal|0
condition|)
block|{
comment|// Send off bulk request
name|bulkBuilder
operator|.
name|get
argument_list|()
expr_stmt|;
comment|// Create a new holder
name|bulkBuilder
operator|=
name|client
operator|.
name|prepareBulk
argument_list|()
expr_stmt|;
block|}
block|}
name|bulkBuilder
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareRefresh
argument_list|(
name|INDEX
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|SearchResponse
name|countResp
init|=
name|client
operator|.
name|prepareSearch
argument_list|(
name|INDEX
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|setSearchType
argument_list|(
name|SearchType
operator|.
name|COUNT
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
assert|assert
name|countResp
operator|.
name|getHits
argument_list|()
operator|.
name|getTotalHits
argument_list|()
operator|==
name|NUM_DOCS
operator|:
literal|"all docs should be indexed"
assert|;
specifier|final
name|int
name|warmupCount
init|=
literal|100
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|warmupCount
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|%
literal|15
operator|==
literal|0
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"--> warmup #"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|SearchResponse
name|resp
init|=
name|client
operator|.
name|prepareSearch
argument_list|(
name|INDEX
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|terms
argument_list|(
literal|"myterms"
argument_list|)
operator|.
name|size
argument_list|(
name|AGG_SIZE
argument_list|)
operator|.
name|field
argument_list|(
literal|"num"
argument_list|)
argument_list|)
operator|.
name|setSearchType
argument_list|(
name|SearchType
operator|.
name|COUNT
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|Terms
name|terms
init|=
name|resp
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"myterms"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"term aggs were calculated"
argument_list|,
name|terms
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"--> running single-threaded tests"
argument_list|)
expr_stmt|;
name|runSingleThreadedQueries
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"--> switching to NOOP breaker"
argument_list|)
expr_stmt|;
name|switchToNoop
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|runSingleThreadedQueries
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|switchToMemory
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"--> running multi-threaded tests"
argument_list|)
expr_stmt|;
name|runMultiThreadedQueries
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"--> switching to NOOP breaker"
argument_list|)
expr_stmt|;
name|switchToNoop
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|runMultiThreadedQueries
argument_list|(
name|client
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|client
operator|.
name|close
argument_list|()
expr_stmt|;
name|node
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

