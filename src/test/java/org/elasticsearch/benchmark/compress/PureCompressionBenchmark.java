begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.benchmark.compress
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|benchmark
operator|.
name|compress
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|compress
operator|.
name|Compressor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|compress
operator|.
name|CompressorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|FileSystemUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|OutputStreamStreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|ByteSizeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
DECL|class|PureCompressionBenchmark
specifier|public
class|class
name|PureCompressionBenchmark
block|{
DECL|method|main
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|long
name|MAX_SIZE
init|=
name|ByteSizeValue
operator|.
name|parseBytesSizeValue
argument_list|(
literal|"50mb"
argument_list|)
operator|.
name|bytes
argument_list|()
decl_stmt|;
name|File
name|testFile
init|=
operator|new
name|File
argument_list|(
literal|"target/test/compress/pure"
argument_list|)
decl_stmt|;
name|FileSystemUtils
operator|.
name|deleteRecursively
argument_list|(
name|testFile
argument_list|)
expr_stmt|;
name|testFile
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|FileOutputStream
name|rawJson
init|=
operator|new
name|FileOutputStream
argument_list|(
operator|new
name|File
argument_list|(
name|testFile
argument_list|,
literal|"raw_json"
argument_list|)
argument_list|)
decl_stmt|;
name|FileOutputStream
name|rawSmile
init|=
operator|new
name|FileOutputStream
argument_list|(
operator|new
name|File
argument_list|(
name|testFile
argument_list|,
literal|"raw_smile"
argument_list|)
argument_list|)
decl_stmt|;
name|FileOutputStream
name|compressedByDocJson
init|=
operator|new
name|FileOutputStream
argument_list|(
operator|new
name|File
argument_list|(
name|testFile
argument_list|,
literal|"compressed_by_doc_json"
argument_list|)
argument_list|)
decl_stmt|;
name|FileOutputStream
name|compressedByDocSmile
init|=
operator|new
name|FileOutputStream
argument_list|(
operator|new
name|File
argument_list|(
name|testFile
argument_list|,
literal|"compressed_by_doc_smile"
argument_list|)
argument_list|)
decl_stmt|;
name|Compressor
name|compressor
init|=
name|CompressorFactory
operator|.
name|defaultCompressor
argument_list|()
decl_stmt|;
name|StreamOutput
name|compressedJson
init|=
name|compressor
operator|.
name|streamOutput
argument_list|(
operator|new
name|OutputStreamStreamOutput
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
operator|new
name|File
argument_list|(
name|testFile
argument_list|,
literal|"compressed_json"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|StreamOutput
name|compressedSmile
init|=
name|compressor
operator|.
name|streamOutput
argument_list|(
operator|new
name|OutputStreamStreamOutput
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
operator|new
name|File
argument_list|(
name|testFile
argument_list|,
literal|"compressed_smile"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|TestData
name|testData
init|=
operator|new
name|TestData
argument_list|()
decl_stmt|;
while|while
condition|(
name|testData
operator|.
name|next
argument_list|()
operator|&&
name|testData
operator|.
name|getTotalSize
argument_list|()
operator|<
name|MAX_SIZE
condition|)
block|{
block|{
comment|// json
name|XContentBuilder
name|builder
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
decl_stmt|;
name|testData
operator|.
name|current
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|rawJson
operator|.
name|write
argument_list|(
name|builder
operator|.
name|bytes
argument_list|()
operator|.
name|array
argument_list|()
argument_list|,
name|builder
operator|.
name|bytes
argument_list|()
operator|.
name|arrayOffset
argument_list|()
argument_list|,
name|builder
operator|.
name|bytes
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|compressedJson
operator|.
name|write
argument_list|(
name|builder
operator|.
name|bytes
argument_list|()
operator|.
name|array
argument_list|()
argument_list|,
name|builder
operator|.
name|bytes
argument_list|()
operator|.
name|arrayOffset
argument_list|()
argument_list|,
name|builder
operator|.
name|bytes
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
name|compressed
init|=
name|compressor
operator|.
name|compress
argument_list|(
name|builder
operator|.
name|bytes
argument_list|()
operator|.
name|array
argument_list|()
argument_list|,
name|builder
operator|.
name|bytes
argument_list|()
operator|.
name|arrayOffset
argument_list|()
argument_list|,
name|builder
operator|.
name|bytes
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|compressedByDocJson
operator|.
name|write
argument_list|(
name|compressed
argument_list|)
expr_stmt|;
name|builder
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|{
comment|// smile
name|XContentBuilder
name|builder
init|=
name|XContentFactory
operator|.
name|smileBuilder
argument_list|()
decl_stmt|;
name|testData
operator|.
name|current
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|rawSmile
operator|.
name|write
argument_list|(
name|builder
operator|.
name|bytes
argument_list|()
operator|.
name|array
argument_list|()
argument_list|,
name|builder
operator|.
name|bytes
argument_list|()
operator|.
name|arrayOffset
argument_list|()
argument_list|,
name|builder
operator|.
name|bytes
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|compressedSmile
operator|.
name|write
argument_list|(
name|builder
operator|.
name|bytes
argument_list|()
operator|.
name|array
argument_list|()
argument_list|,
name|builder
operator|.
name|bytes
argument_list|()
operator|.
name|arrayOffset
argument_list|()
argument_list|,
name|builder
operator|.
name|bytes
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
name|compressed
init|=
name|compressor
operator|.
name|compress
argument_list|(
name|builder
operator|.
name|bytes
argument_list|()
operator|.
name|array
argument_list|()
argument_list|,
name|builder
operator|.
name|bytes
argument_list|()
operator|.
name|arrayOffset
argument_list|()
argument_list|,
name|builder
operator|.
name|bytes
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|compressedByDocSmile
operator|.
name|write
argument_list|(
name|compressed
argument_list|)
expr_stmt|;
name|builder
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
name|rawJson
operator|.
name|close
argument_list|()
expr_stmt|;
name|rawSmile
operator|.
name|close
argument_list|()
expr_stmt|;
name|compressedJson
operator|.
name|close
argument_list|()
expr_stmt|;
name|compressedSmile
operator|.
name|close
argument_list|()
expr_stmt|;
name|compressedByDocJson
operator|.
name|close
argument_list|()
expr_stmt|;
name|compressedByDocSmile
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

