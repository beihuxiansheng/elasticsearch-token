begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.benchmark.compress
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|benchmark
operator|.
name|compress
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|compress
operator|.
name|bzip2
operator|.
name|CBZip2InputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
DECL|class|TestData
specifier|public
class|class
name|TestData
block|{
DECL|field|reader
specifier|private
name|BufferedReader
name|reader
decl_stmt|;
DECL|field|line
specifier|private
name|String
name|line
decl_stmt|;
DECL|field|id
specifier|private
name|String
name|id
decl_stmt|;
DECL|field|type
specifier|private
name|String
name|type
decl_stmt|;
DECL|field|text
specifier|private
name|String
name|text
decl_stmt|;
DECL|field|totalSize
specifier|private
name|long
name|totalSize
decl_stmt|;
DECL|method|TestData
specifier|public
name|TestData
parameter_list|()
throws|throws
name|IOException
block|{
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
literal|"http://downloads.dbpedia.org/3.0/en/longabstract_en.nt.bz2"
argument_list|)
decl_stmt|;
name|BufferedInputStream
name|stream
init|=
operator|new
name|BufferedInputStream
argument_list|(
name|url
operator|.
name|openStream
argument_list|()
argument_list|)
decl_stmt|;
comment|// read two bytes for the header...
name|stream
operator|.
name|read
argument_list|()
expr_stmt|;
name|stream
operator|.
name|read
argument_list|()
expr_stmt|;
name|reader
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
operator|new
name|CBZip2InputStream
argument_list|(
name|stream
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getTotalSize
specifier|public
name|long
name|getTotalSize
parameter_list|()
block|{
return|return
name|totalSize
return|;
block|}
DECL|method|next
specifier|public
name|boolean
name|next
parameter_list|()
throws|throws
name|Exception
block|{
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
expr_stmt|;
if|if
condition|(
name|line
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|totalSize
operator|+=
name|line
operator|.
name|length
argument_list|()
expr_stmt|;
name|int
name|endId
init|=
name|line
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
decl_stmt|;
name|id
operator|=
name|line
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|endId
argument_list|)
expr_stmt|;
name|int
name|endType
init|=
name|line
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|,
name|endId
operator|+
literal|1
argument_list|)
decl_stmt|;
name|type
operator|=
name|line
operator|.
name|substring
argument_list|(
name|endId
operator|+
literal|1
argument_list|,
name|endType
argument_list|)
expr_stmt|;
name|text
operator|=
name|line
operator|.
name|substring
argument_list|(
name|endType
operator|+
literal|1
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/**      */
DECL|method|current
specifier|public
name|XContentBuilder
name|current
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|)
throws|throws
name|Exception
block|{
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"id"
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"text"
argument_list|,
name|text
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"time"
argument_list|,
operator|new
name|Date
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
block|}
end_class

end_unit

