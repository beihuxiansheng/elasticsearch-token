begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.benchmark.search.aggregations
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|benchmark
operator|.
name|search
operator|.
name|aggregations
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|metrics
operator|.
name|percentiles
operator|.
name|Percentile
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|health
operator|.
name|ClusterHealthResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|bulk
operator|.
name|BulkRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|bulk
operator|.
name|BulkResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|StopWatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|SizeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|json
operator|.
name|JsonXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|node
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|metrics
operator|.
name|percentiles
operator|.
name|Percentiles
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|Requests
operator|.
name|createIndexRequest
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|Requests
operator|.
name|getRequest
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_REPLICAS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_SHARDS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
operator|.
name|settingsBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
operator|.
name|matchAllQuery
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|node
operator|.
name|NodeBuilder
operator|.
name|nodeBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregationBuilders
operator|.
name|percentiles
import|;
end_import

begin_class
DECL|class|PercentilesAggregationSearchBenchmark
specifier|public
class|class
name|PercentilesAggregationSearchBenchmark
block|{
DECL|field|AMPLITUDE
specifier|private
specifier|static
specifier|final
name|int
name|AMPLITUDE
init|=
literal|10000
decl_stmt|;
DECL|field|NUM_DOCS
specifier|private
specifier|static
specifier|final
name|int
name|NUM_DOCS
init|=
operator|(
name|int
operator|)
name|SizeValue
operator|.
name|parseSizeValue
argument_list|(
literal|"1m"
argument_list|)
operator|.
name|singles
argument_list|()
decl_stmt|;
DECL|field|BATCH
specifier|private
specifier|static
specifier|final
name|int
name|BATCH
init|=
literal|100
decl_stmt|;
DECL|field|CLUSTER_NAME
specifier|private
specifier|static
specifier|final
name|String
name|CLUSTER_NAME
init|=
name|PercentilesAggregationSearchBenchmark
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
decl_stmt|;
DECL|field|PERCENTILES
specifier|private
specifier|static
specifier|final
name|double
index|[]
name|PERCENTILES
init|=
operator|new
name|double
index|[]
block|{
literal|0
block|,
literal|0.01
block|,
literal|0.1
block|,
literal|1
block|,
literal|10
block|,
literal|25
block|,
literal|50
block|,
literal|75
block|,
literal|90
block|,
literal|99
block|,
literal|99.9
block|,
literal|99.99
block|,
literal|100
block|}
decl_stmt|;
DECL|field|QUERY_WARMUP
specifier|private
specifier|static
specifier|final
name|int
name|QUERY_WARMUP
init|=
literal|10
decl_stmt|;
DECL|field|QUERY_COUNT
specifier|private
specifier|static
specifier|final
name|int
name|QUERY_COUNT
init|=
literal|20
decl_stmt|;
DECL|field|R
specifier|private
specifier|static
name|Random
name|R
init|=
operator|new
name|Random
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// we generate ints to not disadvantage qdigest which only works with integers
DECL|enum|Distribution
specifier|private
enum|enum
name|Distribution
block|{
DECL|enum constant|UNIFORM
name|UNIFORM
block|{
annotation|@
name|Override
name|int
name|next
parameter_list|()
block|{
return|return
call|(
name|int
call|)
argument_list|(
name|R
operator|.
name|nextDouble
argument_list|()
operator|*
name|AMPLITUDE
argument_list|)
return|;
block|}
block|}
block|,
DECL|enum constant|GAUSS
name|GAUSS
block|{
annotation|@
name|Override
name|int
name|next
parameter_list|()
block|{
return|return
call|(
name|int
call|)
argument_list|(
name|R
operator|.
name|nextDouble
argument_list|()
operator|*
name|AMPLITUDE
argument_list|)
return|;
block|}
block|}
block|,
DECL|enum constant|LOG_NORMAL
name|LOG_NORMAL
block|{
annotation|@
name|Override
name|int
name|next
parameter_list|()
block|{
return|return
operator|(
name|int
operator|)
name|Math
operator|.
name|exp
argument_list|(
name|R
operator|.
name|nextDouble
argument_list|()
operator|*
name|Math
operator|.
name|log
argument_list|(
name|AMPLITUDE
argument_list|)
argument_list|)
return|;
block|}
block|}
block|;
DECL|method|indexName
name|String
name|indexName
parameter_list|()
block|{
return|return
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
return|;
block|}
DECL|method|next
specifier|abstract
name|int
name|next
parameter_list|()
function_decl|;
block|}
DECL|method|accuratePercentile
specifier|private
specifier|static
name|double
name|accuratePercentile
parameter_list|(
name|double
name|percentile
parameter_list|,
name|int
index|[]
name|sortedValues
parameter_list|)
block|{
specifier|final
name|double
name|index
init|=
name|percentile
operator|/
literal|100
operator|*
operator|(
name|sortedValues
operator|.
name|length
operator|-
literal|1
operator|)
decl_stmt|;
specifier|final
name|int
name|intIndex
init|=
operator|(
name|int
operator|)
name|index
decl_stmt|;
specifier|final
name|double
name|delta
init|=
name|index
operator|-
name|intIndex
decl_stmt|;
if|if
condition|(
name|delta
operator|==
literal|0
condition|)
block|{
return|return
name|sortedValues
index|[
name|intIndex
index|]
return|;
block|}
else|else
block|{
return|return
name|sortedValues
index|[
name|intIndex
index|]
operator|*
operator|(
literal|1
operator|-
name|delta
operator|)
operator|+
name|sortedValues
index|[
name|intIndex
operator|+
literal|1
index|]
operator|*
name|delta
return|;
block|}
block|}
DECL|method|main
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|Settings
name|settings
init|=
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.refresh_interval"
argument_list|,
literal|"-1"
argument_list|)
operator|.
name|put
argument_list|(
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
literal|100
argument_list|)
comment|// to also test performance and accuracy of the reduce phase
operator|.
name|put
argument_list|(
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
literal|0
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Node
index|[]
name|nodes
init|=
operator|new
name|Node
index|[
literal|1
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|nodes
index|[
name|i
index|]
operator|=
name|nodeBuilder
argument_list|()
operator|.
name|clusterName
argument_list|(
name|CLUSTER_NAME
argument_list|)
operator|.
name|settings
argument_list|(
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
name|settings
argument_list|)
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
literal|"node"
operator|+
name|i
argument_list|)
argument_list|)
operator|.
name|node
argument_list|()
expr_stmt|;
block|}
name|Node
name|clientNode
init|=
name|nodeBuilder
argument_list|()
operator|.
name|clusterName
argument_list|(
name|CLUSTER_NAME
argument_list|)
operator|.
name|settings
argument_list|(
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
name|settings
argument_list|)
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
literal|"client"
argument_list|)
argument_list|)
operator|.
name|client
argument_list|(
literal|true
argument_list|)
operator|.
name|node
argument_list|()
decl_stmt|;
name|Client
name|client
init|=
name|clientNode
operator|.
name|client
argument_list|()
decl_stmt|;
for|for
control|(
name|Distribution
name|d
range|:
name|Distribution
operator|.
name|values
argument_list|()
control|)
block|{
try|try
block|{
comment|//                client.admin().indices().prepareDelete(d.indexName()).execute().actionGet();
name|client
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|create
argument_list|(
name|createIndexRequest
argument_list|(
name|d
operator|.
name|indexName
argument_list|()
argument_list|)
operator|.
name|settings
argument_list|(
name|settings
argument_list|)
argument_list|)
operator|.
name|actionGet
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Index "
operator|+
name|d
operator|.
name|indexName
argument_list|()
operator|+
literal|" already exists, skipping index creation"
argument_list|)
expr_stmt|;
continue|continue;
block|}
specifier|final
name|int
index|[]
name|values
init|=
operator|new
name|int
index|[
name|NUM_DOCS
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_DOCS
condition|;
operator|++
name|i
control|)
block|{
name|values
index|[
name|i
index|]
operator|=
name|d
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Indexing "
operator|+
name|NUM_DOCS
operator|+
literal|" documents into "
operator|+
name|d
operator|.
name|indexName
argument_list|()
argument_list|)
expr_stmt|;
name|StopWatch
name|stopWatch
init|=
operator|new
name|StopWatch
argument_list|()
operator|.
name|start
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_DOCS
condition|;
control|)
block|{
name|BulkRequestBuilder
name|request
init|=
name|client
operator|.
name|prepareBulk
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|BATCH
operator|&&
name|i
operator|<
name|NUM_DOCS
condition|;
operator|++
name|j
control|)
block|{
name|request
operator|.
name|add
argument_list|(
name|client
operator|.
name|prepareIndex
argument_list|(
name|d
operator|.
name|indexName
argument_list|()
argument_list|,
literal|"values"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"v"
argument_list|,
name|values
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
operator|++
name|i
expr_stmt|;
block|}
name|BulkResponse
name|response
init|=
name|request
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
if|if
condition|(
name|response
operator|.
name|hasFailures
argument_list|()
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"--> failures..."
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|response
operator|.
name|buildFailureMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|i
operator|%
literal|100000
operator|)
operator|==
literal|0
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"--> Indexed "
operator|+
name|i
operator|+
literal|" took "
operator|+
name|stopWatch
operator|.
name|stop
argument_list|()
operator|.
name|lastTaskTime
argument_list|()
argument_list|)
expr_stmt|;
name|stopWatch
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
name|Arrays
operator|.
name|sort
argument_list|(
name|values
argument_list|)
expr_stmt|;
name|XContentBuilder
name|builder
init|=
name|JsonXContent
operator|.
name|contentBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
decl_stmt|;
for|for
control|(
name|double
name|percentile
range|:
name|PERCENTILES
control|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|Double
operator|.
name|toString
argument_list|(
name|percentile
argument_list|)
argument_list|,
name|accuratePercentile
argument_list|(
name|percentile
argument_list|,
name|values
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|client
operator|.
name|prepareIndex
argument_list|(
name|d
operator|.
name|indexName
argument_list|()
argument_list|,
literal|"values"
argument_list|,
literal|"percentiles"
argument_list|)
operator|.
name|setSource
argument_list|(
name|builder
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareRefresh
argument_list|(
name|d
operator|.
name|indexName
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
block|}
name|ClusterHealthResponse
name|clusterHealthResponse
init|=
name|client
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareHealth
argument_list|()
operator|.
name|setWaitForGreenStatus
argument_list|()
operator|.
name|setTimeout
argument_list|(
literal|"10m"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
if|if
condition|(
name|clusterHealthResponse
operator|.
name|isTimedOut
argument_list|()
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"--> Timed out waiting for cluster health"
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"## Precision"
argument_list|)
expr_stmt|;
for|for
control|(
name|Distribution
name|d
range|:
name|Distribution
operator|.
name|values
argument_list|()
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"#### "
operator|+
name|d
argument_list|)
expr_stmt|;
specifier|final
name|long
name|count
init|=
name|client
operator|.
name|prepareCount
argument_list|(
name|d
operator|.
name|indexName
argument_list|()
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
operator|.
name|getCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|count
operator|!=
name|NUM_DOCS
operator|+
literal|1
condition|)
block|{
throw|throw
operator|new
name|Error
argument_list|(
literal|"Expected "
operator|+
name|NUM_DOCS
operator|+
literal|" documents, got "
operator|+
operator|(
name|count
operator|-
literal|1
operator|)
argument_list|)
throw|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|percentilesUnsorted
init|=
name|client
operator|.
name|get
argument_list|(
name|getRequest
argument_list|(
name|d
operator|.
name|indexName
argument_list|()
argument_list|)
operator|.
name|type
argument_list|(
literal|"values"
argument_list|)
operator|.
name|id
argument_list|(
literal|"percentiles"
argument_list|)
argument_list|)
operator|.
name|actionGet
argument_list|()
operator|.
name|getSourceAsMap
argument_list|()
decl_stmt|;
name|SortedMap
argument_list|<
name|Double
argument_list|,
name|Double
argument_list|>
name|percentiles
init|=
name|Maps
operator|.
name|newTreeMap
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|percentilesUnsorted
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|percentiles
operator|.
name|put
argument_list|(
name|Double
operator|.
name|parseDouble
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|,
operator|(
name|Double
operator|)
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Expected percentiles: "
operator|+
name|percentiles
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|SearchResponse
name|resp
init|=
name|client
operator|.
name|prepareSearch
argument_list|(
name|d
operator|.
name|indexName
argument_list|()
argument_list|)
operator|.
name|setSize
argument_list|(
literal|0
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|percentiles
argument_list|(
literal|"pcts"
argument_list|)
operator|.
name|field
argument_list|(
literal|"v"
argument_list|)
operator|.
name|percentiles
argument_list|(
name|PERCENTILES
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|Percentiles
name|pcts
init|=
name|resp
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"pcts"
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Double
argument_list|,
name|Double
argument_list|>
name|asMap
init|=
name|Maps
operator|.
name|newLinkedHashMap
argument_list|()
decl_stmt|;
name|double
name|sumOfErrorSquares
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Percentile
name|percentile
range|:
name|pcts
control|)
block|{
name|asMap
operator|.
name|put
argument_list|(
name|percentile
operator|.
name|getPercent
argument_list|()
argument_list|,
name|percentile
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|double
name|error
init|=
name|percentile
operator|.
name|getValue
argument_list|()
operator|-
name|percentiles
operator|.
name|get
argument_list|(
name|percentile
operator|.
name|getPercent
argument_list|()
argument_list|)
decl_stmt|;
name|sumOfErrorSquares
operator|+=
name|error
operator|*
name|error
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Percentiles: "
operator|+
name|asMap
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Sum of error squares: "
operator|+
name|sumOfErrorSquares
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"## Performance"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
operator|++
name|i
control|)
block|{
for|for
control|(
name|Distribution
name|d
range|:
name|Distribution
operator|.
name|values
argument_list|()
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"#### "
operator|+
name|d
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|QUERY_WARMUP
condition|;
operator|++
name|j
control|)
block|{
name|client
operator|.
name|prepareSearch
argument_list|(
name|d
operator|.
name|indexName
argument_list|()
argument_list|)
operator|.
name|setSize
argument_list|(
literal|0
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|percentiles
argument_list|(
literal|"pcts"
argument_list|)
operator|.
name|field
argument_list|(
literal|"v"
argument_list|)
operator|.
name|percentiles
argument_list|(
name|PERCENTILES
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
block|}
name|long
name|start
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|QUERY_COUNT
condition|;
operator|++
name|j
control|)
block|{
name|client
operator|.
name|prepareSearch
argument_list|(
name|d
operator|.
name|indexName
argument_list|()
argument_list|)
operator|.
name|setSize
argument_list|(
literal|0
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|percentiles
argument_list|(
literal|"pcts"
argument_list|)
operator|.
name|field
argument_list|(
literal|"v"
argument_list|)
operator|.
name|percentiles
argument_list|(
name|PERCENTILES
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
operator|new
name|TimeValue
argument_list|(
operator|(
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|start
operator|)
operator|/
name|QUERY_COUNT
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

