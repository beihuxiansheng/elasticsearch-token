begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.benchmark.search.aggregations
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|benchmark
operator|.
name|search
operator|.
name|aggregations
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|health
operator|.
name|ClusterHealthResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|node
operator|.
name|stats
operator|.
name|NodesStatsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|stats
operator|.
name|CommonStatsFlags
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|bulk
operator|.
name|BulkRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|bulk
operator|.
name|BulkResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|Requests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|StopWatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|SizeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|json
operator|.
name|JsonXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|IndexFieldData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|FilterBuilders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|IndexAlreadyExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|node
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregationBuilders
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadLocalRandom
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|Requests
operator|.
name|createIndexRequest
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_REPLICAS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_SHARDS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
operator|.
name|settingsBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
operator|.
name|jsonBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
operator|.
name|matchAllQuery
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|node
operator|.
name|NodeBuilder
operator|.
name|nodeBuilder
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|TimeDataHistogramAggregationBenchmark
specifier|public
class|class
name|TimeDataHistogramAggregationBenchmark
block|{
DECL|field|COUNT
specifier|static
name|long
name|COUNT
init|=
name|SizeValue
operator|.
name|parseSizeValue
argument_list|(
literal|"5m"
argument_list|)
operator|.
name|singles
argument_list|()
decl_stmt|;
DECL|field|TIME_PERIOD
specifier|static
name|long
name|TIME_PERIOD
init|=
literal|24
operator|*
literal|3600
operator|*
literal|1000
decl_stmt|;
DECL|field|BATCH
specifier|static
name|int
name|BATCH
init|=
literal|100
decl_stmt|;
DECL|field|QUERY_WARMUP
specifier|static
name|int
name|QUERY_WARMUP
init|=
literal|50
decl_stmt|;
DECL|field|QUERY_COUNT
specifier|static
name|int
name|QUERY_COUNT
init|=
literal|500
decl_stmt|;
DECL|field|MEMORY_FORMAT
specifier|static
name|IndexFieldData
operator|.
name|CommonSettings
operator|.
name|MemoryStorageFormat
name|MEMORY_FORMAT
init|=
name|IndexFieldData
operator|.
name|CommonSettings
operator|.
name|MemoryStorageFormat
operator|.
name|PAGED
decl_stmt|;
DECL|field|ACCEPTABLE_OVERHEAD_RATIO
specifier|static
name|double
name|ACCEPTABLE_OVERHEAD_RATIO
init|=
literal|0.5
decl_stmt|;
DECL|field|MATCH_PERCENTAGE
specifier|static
name|float
name|MATCH_PERCENTAGE
init|=
literal|0.1f
decl_stmt|;
DECL|field|client
specifier|static
name|Client
name|client
decl_stmt|;
DECL|method|main
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|Settings
name|settings
init|=
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.refresh_interval"
argument_list|,
literal|"-1"
argument_list|)
operator|.
name|put
argument_list|(
literal|"gateway.type"
argument_list|,
literal|"local"
argument_list|)
operator|.
name|put
argument_list|(
literal|"node.local"
argument_list|,
literal|true
argument_list|)
operator|.
name|put
argument_list|(
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
literal|0
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|String
name|clusterName
init|=
name|TimeDataHistogramAggregationBenchmark
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
decl_stmt|;
name|Node
index|[]
name|nodes
init|=
operator|new
name|Node
index|[
literal|1
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|nodes
index|[
name|i
index|]
operator|=
name|nodeBuilder
argument_list|()
operator|.
name|clusterName
argument_list|(
name|clusterName
argument_list|)
operator|.
name|settings
argument_list|(
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
name|settings
argument_list|)
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
literal|"node"
operator|+
name|i
argument_list|)
argument_list|)
operator|.
name|node
argument_list|()
expr_stmt|;
block|}
name|client
operator|=
name|nodes
index|[
literal|0
index|]
operator|.
name|client
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
try|try
block|{
name|client
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|create
argument_list|(
name|createIndexRequest
argument_list|(
literal|"test"
argument_list|)
argument_list|)
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|StopWatch
name|stopWatch
init|=
operator|new
name|StopWatch
argument_list|()
operator|.
name|start
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"--> Indexing ["
operator|+
name|COUNT
operator|+
literal|"] ..."
argument_list|)
expr_stmt|;
name|long
name|ITERS
init|=
name|COUNT
operator|/
name|BATCH
decl_stmt|;
name|long
name|i
init|=
literal|1
decl_stmt|;
name|int
name|counter
init|=
literal|0
decl_stmt|;
name|long
index|[]
name|currentTimeInMillis1
init|=
operator|new
name|long
index|[]
block|{
name|System
operator|.
name|currentTimeMillis
argument_list|()
block|}
decl_stmt|;
name|long
index|[]
name|currentTimeInMillis2
init|=
operator|new
name|long
index|[]
block|{
name|System
operator|.
name|currentTimeMillis
argument_list|()
block|}
decl_stmt|;
name|long
name|startTimeInMillis
init|=
name|currentTimeInMillis1
index|[
literal|0
index|]
decl_stmt|;
name|long
name|averageMillisChange
init|=
name|TIME_PERIOD
operator|/
name|COUNT
operator|*
literal|2
decl_stmt|;
name|long
name|backwardSkew
init|=
name|Math
operator|.
name|max
argument_list|(
literal|1
argument_list|,
call|(
name|long
call|)
argument_list|(
name|averageMillisChange
operator|*
literal|0.1
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|bigOutOfOrder
init|=
literal|1
decl_stmt|;
for|for
control|(
init|;
name|i
operator|<=
name|ITERS
condition|;
name|i
operator|++
control|)
block|{
name|BulkRequestBuilder
name|request
init|=
name|client
operator|.
name|prepareBulk
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|BATCH
condition|;
name|j
operator|++
control|)
block|{
name|counter
operator|++
expr_stmt|;
name|XContentBuilder
name|builder
init|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
decl_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"id"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|counter
argument_list|)
argument_list|)
expr_stmt|;
comment|// move forward in time and sometimes a little bit back (delayed delivery)
name|long
name|diff
init|=
name|ThreadLocalRandom
operator|.
name|current
argument_list|()
operator|.
name|nextLong
argument_list|(
literal|2
operator|*
name|averageMillisChange
operator|+
literal|2
operator|*
name|backwardSkew
argument_list|)
operator|-
name|backwardSkew
decl_stmt|;
name|long
index|[]
name|currentTime
init|=
name|counter
operator|%
literal|2
operator|==
literal|0
condition|?
name|currentTimeInMillis1
else|:
name|currentTimeInMillis2
decl_stmt|;
name|currentTime
index|[
literal|0
index|]
operator|+=
name|diff
expr_stmt|;
if|if
condition|(
name|ThreadLocalRandom
operator|.
name|current
argument_list|()
operator|.
name|nextLong
argument_list|(
literal|100
argument_list|)
operator|<=
name|bigOutOfOrder
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"l_value"
argument_list|,
name|currentTime
index|[
literal|0
index|]
operator|-
literal|60000
argument_list|)
expr_stmt|;
comment|// 1m delays
block|}
else|else
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"l_value"
argument_list|,
name|currentTime
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|request
operator|.
name|add
argument_list|(
name|Requests
operator|.
name|indexRequest
argument_list|(
literal|"test"
argument_list|)
operator|.
name|type
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|id
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|counter
argument_list|)
argument_list|)
operator|.
name|source
argument_list|(
name|builder
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|BulkResponse
name|response
init|=
name|request
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
if|if
condition|(
name|response
operator|.
name|hasFailures
argument_list|()
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"--> failures..."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
operator|(
name|i
operator|*
name|BATCH
operator|)
operator|%
literal|10000
operator|)
operator|==
literal|0
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"--> Indexed "
operator|+
operator|(
name|i
operator|*
name|BATCH
operator|)
operator|+
literal|" took "
operator|+
name|stopWatch
operator|.
name|stop
argument_list|()
operator|.
name|lastTaskTime
argument_list|()
argument_list|)
expr_stmt|;
name|stopWatch
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"--> Indexing took "
operator|+
name|stopWatch
operator|.
name|totalTime
argument_list|()
operator|+
literal|", TPS "
operator|+
operator|(
operator|(
call|(
name|double
call|)
argument_list|(
name|COUNT
argument_list|)
operator|)
operator|/
name|stopWatch
operator|.
name|totalTime
argument_list|()
operator|.
name|secondsFrac
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Time range 1: "
operator|+
operator|(
name|currentTimeInMillis1
index|[
literal|0
index|]
operator|-
name|startTimeInMillis
operator|)
operator|/
literal|1000.0
operator|/
literal|3600
operator|+
literal|" hours"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Time range 2: "
operator|+
operator|(
name|currentTimeInMillis2
index|[
literal|0
index|]
operator|-
name|startTimeInMillis
operator|)
operator|/
literal|1000.0
operator|/
literal|3600
operator|+
literal|" hours"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"--> optimizing index"
argument_list|)
expr_stmt|;
name|client
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareOptimize
argument_list|()
operator|.
name|setMaxNumSegments
argument_list|(
literal|1
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexAlreadyExistsException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"--> Index already exists, ignoring indexing phase, waiting for green"
argument_list|)
expr_stmt|;
name|ClusterHealthResponse
name|clusterHealthResponse
init|=
name|client
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareHealth
argument_list|()
operator|.
name|setWaitForGreenStatus
argument_list|()
operator|.
name|setTimeout
argument_list|(
literal|"10m"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
if|if
condition|(
name|clusterHealthResponse
operator|.
name|isTimedOut
argument_list|()
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"--> Timed out waiting for cluster health"
argument_list|)
expr_stmt|;
block|}
block|}
name|client
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareRefresh
argument_list|()
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|COUNT
operator|=
name|client
operator|.
name|prepareCount
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
operator|.
name|getCount
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"--> Number of docs in index: "
operator|+
name|COUNT
argument_list|)
expr_stmt|;
comment|// load with the reverse options to make sure jit doesn't optimize one away
name|setMapping
argument_list|(
name|ACCEPTABLE_OVERHEAD_RATIO
argument_list|,
name|MEMORY_FORMAT
operator|.
name|equals
argument_list|(
name|IndexFieldData
operator|.
name|CommonSettings
operator|.
name|MemoryStorageFormat
operator|.
name|PACKED
argument_list|)
condition|?
name|IndexFieldData
operator|.
name|CommonSettings
operator|.
name|MemoryStorageFormat
operator|.
name|PAGED
else|:
name|IndexFieldData
operator|.
name|CommonSettings
operator|.
name|MemoryStorageFormat
operator|.
name|PACKED
argument_list|)
expr_stmt|;
name|warmUp
argument_list|(
literal|"hist_l"
argument_list|,
literal|"l_value"
argument_list|,
name|MATCH_PERCENTAGE
argument_list|)
expr_stmt|;
name|setMapping
argument_list|(
name|ACCEPTABLE_OVERHEAD_RATIO
argument_list|,
name|MEMORY_FORMAT
argument_list|)
expr_stmt|;
name|warmUp
argument_list|(
literal|"hist_l"
argument_list|,
literal|"l_value"
argument_list|,
name|MATCH_PERCENTAGE
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|StatsResult
argument_list|>
name|stats
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|stats
operator|.
name|add
argument_list|(
name|measureAgg
argument_list|(
literal|"hist_l"
argument_list|,
literal|"l_value"
argument_list|,
name|MATCH_PERCENTAGE
argument_list|)
argument_list|)
expr_stmt|;
name|NodesStatsResponse
name|nodeStats
init|=
name|client
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareNodesStats
argument_list|(
name|nodes
index|[
literal|0
index|]
operator|.
name|settings
argument_list|()
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
argument_list|)
operator|.
name|clear
argument_list|()
operator|.
name|setIndices
argument_list|(
operator|new
name|CommonStatsFlags
argument_list|(
name|CommonStatsFlags
operator|.
name|Flag
operator|.
name|FieldData
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"------------------ SUMMARY -------------------------------"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"docs: "
operator|+
name|COUNT
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"match percentage: "
operator|+
name|MATCH_PERCENTAGE
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"memory format hint: "
operator|+
name|MEMORY_FORMAT
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"acceptable_overhead_ratio: "
operator|+
name|ACCEPTABLE_OVERHEAD_RATIO
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"field data: "
operator|+
name|nodeStats
operator|.
name|getNodes
argument_list|()
index|[
literal|0
index|]
operator|.
name|getIndices
argument_list|()
operator|.
name|getFieldData
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"%25s%10s%10s\n"
argument_list|,
literal|"name"
argument_list|,
literal|"took"
argument_list|,
literal|"millis"
argument_list|)
expr_stmt|;
for|for
control|(
name|StatsResult
name|stat
range|:
name|stats
control|)
block|{
name|System
operator|.
name|out
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"%25s%10s%10d\n"
argument_list|,
name|stat
operator|.
name|name
argument_list|,
name|TimeValue
operator|.
name|timeValueMillis
argument_list|(
name|stat
operator|.
name|took
argument_list|)
argument_list|,
operator|(
name|stat
operator|.
name|took
operator|/
name|QUERY_COUNT
operator|)
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"------------------ SUMMARY -------------------------------"
argument_list|)
expr_stmt|;
for|for
control|(
name|Node
name|node
range|:
name|nodes
control|)
block|{
name|node
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|setMapping
specifier|protected
specifier|static
name|void
name|setMapping
parameter_list|(
name|double
name|acceptableOverheadRatio
parameter_list|,
name|IndexFieldData
operator|.
name|CommonSettings
operator|.
name|MemoryStorageFormat
name|fielddataStorageFormat
parameter_list|)
throws|throws
name|IOException
block|{
name|XContentBuilder
name|mapping
init|=
name|JsonXContent
operator|.
name|contentBuilder
argument_list|()
decl_stmt|;
name|mapping
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"l_value"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"long"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"fielddata"
argument_list|)
operator|.
name|field
argument_list|(
literal|"acceptable_transient_overhead_ratio"
argument_list|,
name|acceptableOverheadRatio
argument_list|)
operator|.
name|field
argument_list|(
literal|"acceptable_overhead_ratio"
argument_list|,
name|acceptableOverheadRatio
argument_list|)
operator|.
name|field
argument_list|(
name|IndexFieldData
operator|.
name|CommonSettings
operator|.
name|SETTING_MEMORY_STORAGE_HINT
argument_list|,
name|fielddataStorageFormat
operator|.
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|client
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|preparePutMapping
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setType
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|mapping
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
DECL|class|StatsResult
specifier|static
class|class
name|StatsResult
block|{
DECL|field|name
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|took
specifier|final
name|long
name|took
decl_stmt|;
DECL|method|StatsResult
name|StatsResult
parameter_list|(
name|String
name|name
parameter_list|,
name|long
name|took
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|took
operator|=
name|took
expr_stmt|;
block|}
block|}
DECL|method|doTermsAggsSearch
specifier|private
specifier|static
name|SearchResponse
name|doTermsAggsSearch
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|field
parameter_list|,
name|float
name|matchPercentage
parameter_list|)
block|{
name|SearchResponse
name|response
init|=
name|client
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setSearchType
argument_list|(
name|SearchType
operator|.
name|COUNT
argument_list|)
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|constantScoreQuery
argument_list|(
name|FilterBuilders
operator|.
name|scriptFilter
argument_list|(
literal|"random()<matchP"
argument_list|)
operator|.
name|addParam
argument_list|(
literal|"matchP"
argument_list|,
name|matchPercentage
argument_list|)
operator|.
name|cache
argument_list|(
literal|true
argument_list|)
argument_list|)
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|AggregationBuilders
operator|.
name|histogram
argument_list|(
name|name
argument_list|)
operator|.
name|field
argument_list|(
name|field
argument_list|)
operator|.
name|interval
argument_list|(
literal|3600
operator|*
literal|1000
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|response
operator|.
name|getHits
argument_list|()
operator|.
name|totalHits
argument_list|()
operator|<
name|COUNT
operator|*
name|matchPercentage
operator|*
literal|0.7
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"--> warning - big deviation from expected count: "
operator|+
name|response
operator|.
name|getHits
argument_list|()
operator|.
name|totalHits
argument_list|()
operator|+
literal|" expected: "
operator|+
name|COUNT
operator|*
name|matchPercentage
argument_list|)
expr_stmt|;
block|}
return|return
name|response
return|;
block|}
DECL|method|measureAgg
specifier|private
specifier|static
name|StatsResult
name|measureAgg
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|field
parameter_list|,
name|float
name|matchPercentage
parameter_list|)
block|{
name|long
name|totalQueryTime
decl_stmt|;
comment|// LM VALUE
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"--> Running ("
operator|+
name|name
operator|+
literal|")..."
argument_list|)
expr_stmt|;
name|totalQueryTime
operator|=
literal|0
expr_stmt|;
name|long
name|previousCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|QUERY_COUNT
condition|;
name|j
operator|++
control|)
block|{
name|SearchResponse
name|searchResponse
init|=
name|doTermsAggsSearch
argument_list|(
name|name
argument_list|,
name|field
argument_list|,
name|matchPercentage
argument_list|)
decl_stmt|;
if|if
condition|(
name|previousCount
operator|==
literal|0
condition|)
block|{
name|previousCount
operator|=
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getTotalHits
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|totalHits
argument_list|()
operator|!=
name|previousCount
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"*** HIT COUNT CHANGE -> CACHE EXPIRED? ***"
argument_list|)
expr_stmt|;
block|}
name|totalQueryTime
operator|+=
name|searchResponse
operator|.
name|getTookInMillis
argument_list|()
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"--> Histogram aggregations ("
operator|+
name|field
operator|+
literal|"): "
operator|+
operator|(
name|totalQueryTime
operator|/
name|QUERY_COUNT
operator|)
operator|+
literal|"ms"
argument_list|)
expr_stmt|;
return|return
operator|new
name|StatsResult
argument_list|(
name|name
argument_list|,
name|totalQueryTime
argument_list|)
return|;
block|}
DECL|method|warmUp
specifier|private
specifier|static
name|void
name|warmUp
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|field
parameter_list|,
name|float
name|matchPercentage
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"--> Warmup ("
operator|+
name|name
operator|+
literal|")..."
argument_list|)
expr_stmt|;
name|client
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareClearCache
argument_list|()
operator|.
name|setFieldDataCache
argument_list|(
literal|true
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
comment|// run just the child query, warm up first
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|QUERY_WARMUP
condition|;
name|j
operator|++
control|)
block|{
name|SearchResponse
name|searchResponse
init|=
name|doTermsAggsSearch
argument_list|(
name|name
argument_list|,
name|field
argument_list|,
name|matchPercentage
argument_list|)
decl_stmt|;
if|if
condition|(
name|j
operator|==
literal|0
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"--> Loading ("
operator|+
name|field
operator|+
literal|"): took: "
operator|+
name|searchResponse
operator|.
name|getTook
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"--> Warmup ("
operator|+
name|name
operator|+
literal|") DONE"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

