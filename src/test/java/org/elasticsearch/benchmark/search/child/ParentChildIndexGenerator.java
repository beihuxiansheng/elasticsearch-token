begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.benchmark.search.child
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|benchmark
operator|.
name|search
operator|.
name|child
package|;
end_package

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|ObjectArrayList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|ObjectHashSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|generators
operator|.
name|RandomStrings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|bulk
operator|.
name|BulkRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|bulk
operator|.
name|BulkResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|Requests
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
DECL|class|ParentChildIndexGenerator
specifier|public
class|class
name|ParentChildIndexGenerator
block|{
DECL|field|RANDOM
specifier|private
specifier|final
specifier|static
name|Random
name|RANDOM
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
DECL|field|client
specifier|private
specifier|final
name|Client
name|client
decl_stmt|;
DECL|field|numParents
specifier|private
specifier|final
name|int
name|numParents
decl_stmt|;
DECL|field|numChildrenPerParent
specifier|private
specifier|final
name|int
name|numChildrenPerParent
decl_stmt|;
DECL|field|queryValueRatio
specifier|private
specifier|final
name|int
name|queryValueRatio
decl_stmt|;
DECL|method|ParentChildIndexGenerator
specifier|public
name|ParentChildIndexGenerator
parameter_list|(
name|Client
name|client
parameter_list|,
name|int
name|numParents
parameter_list|,
name|int
name|numChildrenPerParent
parameter_list|,
name|int
name|queryValueRatio
parameter_list|)
block|{
name|this
operator|.
name|client
operator|=
name|client
expr_stmt|;
name|this
operator|.
name|numParents
operator|=
name|numParents
expr_stmt|;
name|this
operator|.
name|numChildrenPerParent
operator|=
name|numChildrenPerParent
expr_stmt|;
name|this
operator|.
name|queryValueRatio
operator|=
name|queryValueRatio
expr_stmt|;
block|}
DECL|method|index
specifier|public
name|void
name|index
parameter_list|()
block|{
comment|// Memory intensive...
name|ObjectHashSet
argument_list|<
name|String
argument_list|>
name|usedParentIds
init|=
operator|new
name|ObjectHashSet
argument_list|<>
argument_list|(
name|numParents
argument_list|,
literal|0.5d
argument_list|)
decl_stmt|;
name|ObjectArrayList
argument_list|<
name|ParentDocument
argument_list|>
name|parents
init|=
operator|new
name|ObjectArrayList
argument_list|<>
argument_list|(
name|numParents
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numParents
condition|;
name|i
operator|++
control|)
block|{
name|String
name|parentId
decl_stmt|;
do|do
block|{
name|parentId
operator|=
name|RandomStrings
operator|.
name|randomAsciiOfLength
argument_list|(
name|RANDOM
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
operator|!
name|usedParentIds
operator|.
name|add
argument_list|(
name|parentId
argument_list|)
condition|)
do|;
name|String
index|[]
name|queryValues
init|=
operator|new
name|String
index|[
name|numChildrenPerParent
index|]
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numChildrenPerParent
condition|;
name|j
operator|++
control|)
block|{
name|queryValues
index|[
name|j
index|]
operator|=
name|getQueryValue
argument_list|()
expr_stmt|;
block|}
name|parents
operator|.
name|add
argument_list|(
operator|new
name|ParentDocument
argument_list|(
name|parentId
argument_list|,
name|queryValues
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
name|indexCounter
init|=
literal|0
decl_stmt|;
name|int
name|childIdCounter
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|!
name|parents
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|BulkRequestBuilder
name|request
init|=
name|client
operator|.
name|prepareBulk
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
operator|!
name|parents
operator|.
name|isEmpty
argument_list|()
operator|&&
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|int
name|index
init|=
name|RANDOM
operator|.
name|nextInt
argument_list|(
name|parents
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|ParentDocument
name|parentDocument
init|=
name|parents
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|parentDocument
operator|.
name|indexCounter
operator|==
operator|-
literal|1
condition|)
block|{
name|request
operator|.
name|add
argument_list|(
name|Requests
operator|.
name|indexRequest
argument_list|(
literal|"test"
argument_list|)
operator|.
name|type
argument_list|(
literal|"parent"
argument_list|)
operator|.
name|id
argument_list|(
name|parentDocument
operator|.
name|parentId
argument_list|)
operator|.
name|source
argument_list|(
literal|"field1"
argument_list|,
name|getQueryValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|request
operator|.
name|add
argument_list|(
name|Requests
operator|.
name|indexRequest
argument_list|(
literal|"test"
argument_list|)
operator|.
name|type
argument_list|(
literal|"child"
argument_list|)
operator|.
name|parent
argument_list|(
name|parentDocument
operator|.
name|parentId
argument_list|)
operator|.
name|id
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
operator|++
name|childIdCounter
argument_list|)
argument_list|)
operator|.
name|source
argument_list|(
literal|"field2"
argument_list|,
name|parentDocument
operator|.
name|queryValues
index|[
name|parentDocument
operator|.
name|indexCounter
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|++
name|parentDocument
operator|.
name|indexCounter
operator|==
name|parentDocument
operator|.
name|queryValues
operator|.
name|length
condition|)
block|{
name|parents
operator|.
name|remove
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
block|}
name|BulkResponse
name|response
init|=
name|request
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
if|if
condition|(
name|response
operator|.
name|hasFailures
argument_list|()
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"--> failures..."
argument_list|)
expr_stmt|;
block|}
name|indexCounter
operator|+=
name|response
operator|.
name|getItems
argument_list|()
operator|.
name|length
expr_stmt|;
if|if
condition|(
name|indexCounter
operator|%
literal|100000
operator|==
literal|0
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"--> Indexed "
operator|+
name|indexCounter
operator|+
literal|" documents"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|getQueryValue
specifier|public
name|String
name|getQueryValue
parameter_list|()
block|{
return|return
literal|"value"
operator|+
name|RANDOM
operator|.
name|nextInt
argument_list|(
name|numChildrenPerParent
operator|/
name|queryValueRatio
argument_list|)
return|;
block|}
DECL|class|ParentDocument
class|class
name|ParentDocument
block|{
DECL|field|parentId
specifier|final
name|String
name|parentId
decl_stmt|;
DECL|field|queryValues
specifier|final
name|String
index|[]
name|queryValues
decl_stmt|;
DECL|field|indexCounter
name|int
name|indexCounter
decl_stmt|;
DECL|method|ParentDocument
name|ParentDocument
parameter_list|(
name|String
name|parentId
parameter_list|,
name|String
index|[]
name|queryValues
parameter_list|)
block|{
name|this
operator|.
name|parentId
operator|=
name|parentId
expr_stmt|;
name|this
operator|.
name|queryValues
operator|=
name|queryValues
expr_stmt|;
name|this
operator|.
name|indexCounter
operator|=
operator|-
literal|1
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

