begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.benchmark.common.util
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|benchmark
operator|.
name|common
operator|.
name|util
package|;
end_package

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|generators
operator|.
name|RandomInts
import|;
end_import

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|generators
operator|.
name|RandomPicks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|UnsafeUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_class
DECL|class|BytesRefComparisonsBenchmark
specifier|public
class|class
name|BytesRefComparisonsBenchmark
block|{
DECL|field|R
specifier|private
specifier|static
specifier|final
name|Random
name|R
init|=
operator|new
name|Random
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|ITERS
specifier|private
specifier|static
specifier|final
name|int
name|ITERS
init|=
literal|100
decl_stmt|;
comment|// To avoid JVM optimizations
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
DECL|field|DUMMY
specifier|private
specifier|static
name|boolean
name|DUMMY
decl_stmt|;
DECL|enum|Comparator
enum|enum
name|Comparator
block|{
DECL|enum constant|SAFE
name|SAFE
block|{
name|boolean
name|compare
parameter_list|(
name|BytesRef
name|b1
parameter_list|,
name|BytesRef
name|b2
parameter_list|)
block|{
return|return
name|b1
operator|.
name|bytesEquals
argument_list|(
name|b2
argument_list|)
return|;
block|}
block|}
block|,
DECL|enum constant|UNSAFE
name|UNSAFE
block|{
annotation|@
name|Override
name|boolean
name|compare
parameter_list|(
name|BytesRef
name|b1
parameter_list|,
name|BytesRef
name|b2
parameter_list|)
block|{
return|return
name|UnsafeUtils
operator|.
name|equals
argument_list|(
name|b1
argument_list|,
name|b2
argument_list|)
return|;
block|}
block|}
block|;
DECL|method|compare
specifier|abstract
name|boolean
name|compare
parameter_list|(
name|BytesRef
name|b1
parameter_list|,
name|BytesRef
name|b2
parameter_list|)
function_decl|;
block|}
DECL|method|buildBytesRefs
specifier|private
specifier|static
name|BytesRef
index|[]
name|buildBytesRefs
parameter_list|(
name|int
name|minLen
parameter_list|,
name|int
name|maxLen
parameter_list|,
name|int
name|count
parameter_list|,
name|int
name|uniqueCount
parameter_list|)
block|{
specifier|final
name|BytesRef
index|[]
name|uniqueRefs
init|=
operator|new
name|BytesRef
index|[
name|uniqueCount
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|uniqueCount
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|int
name|len
init|=
name|RandomInts
operator|.
name|randomIntBetween
argument_list|(
name|R
argument_list|,
name|minLen
argument_list|,
name|maxLen
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[
name|len
index|]
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|bytes
operator|.
name|length
condition|;
operator|++
name|j
control|)
block|{
name|bytes
index|[
name|j
index|]
operator|=
operator|(
name|byte
operator|)
name|R
operator|.
name|nextInt
argument_list|(
literal|2
argument_list|)
expr_stmt|;
comment|// so that some instances have common prefixes
block|}
name|uniqueRefs
index|[
name|i
index|]
operator|=
operator|new
name|BytesRef
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
block|}
specifier|final
name|BytesRef
index|[]
name|result
init|=
operator|new
name|BytesRef
index|[
name|count
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
block|{
name|result
index|[
name|i
index|]
operator|=
name|RandomPicks
operator|.
name|randomFrom
argument_list|(
name|R
argument_list|,
name|uniqueRefs
argument_list|)
expr_stmt|;
block|}
name|int
name|totalLen
init|=
literal|0
decl_stmt|;
for|for
control|(
name|BytesRef
name|b
range|:
name|result
control|)
block|{
name|totalLen
operator|+=
name|b
operator|.
name|length
expr_stmt|;
block|}
specifier|final
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|totalLen
index|]
decl_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|BytesRef
name|b
init|=
name|result
index|[
name|i
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|b
operator|.
name|bytes
argument_list|,
name|b
operator|.
name|offset
argument_list|,
name|data
argument_list|,
name|offset
argument_list|,
name|b
operator|.
name|length
argument_list|)
expr_stmt|;
name|result
index|[
name|i
index|]
operator|=
operator|new
name|BytesRef
argument_list|(
name|data
argument_list|,
name|offset
argument_list|,
name|b
operator|.
name|length
argument_list|)
expr_stmt|;
name|offset
operator|+=
name|b
operator|.
name|length
expr_stmt|;
block|}
if|if
condition|(
name|offset
operator|!=
name|totalLen
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
block|}
return|return
name|result
return|;
block|}
DECL|method|bench
specifier|private
specifier|static
name|long
name|bench
parameter_list|(
name|Comparator
name|comparator
parameter_list|,
name|BytesRef
index|[]
name|refs
parameter_list|,
name|int
name|iters
parameter_list|)
block|{
name|boolean
name|xor
init|=
literal|false
decl_stmt|;
specifier|final
name|long
name|start
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
name|iters
condition|;
operator|++
name|iter
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|refs
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
for|for
control|(
name|int
name|j
init|=
name|i
operator|+
literal|1
init|;
name|j
operator|<
name|refs
operator|.
name|length
condition|;
operator|++
name|j
control|)
block|{
name|xor
operator|^=
name|comparator
operator|.
name|compare
argument_list|(
name|refs
index|[
name|i
index|]
argument_list|,
name|refs
index|[
name|j
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|DUMMY
operator|=
name|xor
expr_stmt|;
return|return
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|start
return|;
block|}
DECL|method|main
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|InterruptedException
block|{
comment|// warmup
name|BytesRef
index|[]
name|bytes
init|=
name|buildBytesRefs
argument_list|(
literal|2
argument_list|,
literal|20
argument_list|,
literal|1000
argument_list|,
literal|100
argument_list|)
decl_stmt|;
specifier|final
name|long
name|start
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
while|while
condition|(
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|start
operator|<
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|toNanos
argument_list|(
literal|10
argument_list|)
condition|)
block|{
for|for
control|(
name|Comparator
name|comparator
range|:
name|Comparator
operator|.
name|values
argument_list|()
control|)
block|{
name|bench
argument_list|(
name|comparator
argument_list|,
name|bytes
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"## Various lengths"
argument_list|)
expr_stmt|;
comment|// make sure GC doesn't hurt results
name|System
operator|.
name|gc
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
for|for
control|(
name|Comparator
name|comparator
range|:
name|Comparator
operator|.
name|values
argument_list|()
control|)
block|{
name|bench
argument_list|(
name|comparator
argument_list|,
name|bytes
argument_list|,
name|ITERS
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
operator|++
name|i
control|)
block|{
for|for
control|(
name|Comparator
name|comparator
range|:
name|Comparator
operator|.
name|values
argument_list|()
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|comparator
operator|+
literal|" "
operator|+
operator|new
name|TimeValue
argument_list|(
name|bench
argument_list|(
name|comparator
argument_list|,
name|bytes
argument_list|,
name|ITERS
argument_list|)
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|len
init|=
literal|2
init|;
name|len
operator|<=
literal|20
condition|;
operator|++
name|len
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"## Length = "
operator|+
name|len
argument_list|)
expr_stmt|;
name|bytes
operator|=
name|buildBytesRefs
argument_list|(
name|len
argument_list|,
name|len
argument_list|,
literal|1000
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|System
operator|.
name|gc
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
for|for
control|(
name|Comparator
name|comparator
range|:
name|Comparator
operator|.
name|values
argument_list|()
control|)
block|{
name|bench
argument_list|(
name|comparator
argument_list|,
name|bytes
argument_list|,
name|ITERS
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
operator|++
name|i
control|)
block|{
for|for
control|(
name|Comparator
name|comparator
range|:
name|Comparator
operator|.
name|values
argument_list|()
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|comparator
operator|+
literal|" "
operator|+
operator|new
name|TimeValue
argument_list|(
name|bench
argument_list|(
name|comparator
argument_list|,
name|bytes
argument_list|,
name|ITERS
argument_list|)
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

