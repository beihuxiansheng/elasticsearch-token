begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.benchmark.common.recycler
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|benchmark
operator|.
name|common
operator|.
name|recycler
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|recycler
operator|.
name|Recycler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|recycler
operator|.
name|Recyclers
operator|.
name|*
import|;
end_import

begin_comment
comment|/** Benchmark that tries to measure the overhead of object recycling depending on concurrent access. */
end_comment

begin_class
DECL|class|RecyclerBenchmark
specifier|public
class|class
name|RecyclerBenchmark
block|{
DECL|field|NUM_RECYCLES
specifier|private
specifier|static
specifier|final
name|long
name|NUM_RECYCLES
init|=
literal|5000000L
decl_stmt|;
DECL|field|RANDOM
specifier|private
specifier|static
specifier|final
name|Random
name|RANDOM
init|=
operator|new
name|Random
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|method|bench
specifier|private
specifier|static
name|long
name|bench
parameter_list|(
specifier|final
name|Recycler
argument_list|<
name|?
argument_list|>
name|recycler
parameter_list|,
name|long
name|numRecycles
parameter_list|,
name|int
name|numThreads
parameter_list|)
throws|throws
name|InterruptedException
block|{
specifier|final
name|AtomicLong
name|recycles
init|=
operator|new
name|AtomicLong
argument_list|(
name|numRecycles
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|Thread
index|[]
name|threads
init|=
operator|new
name|Thread
index|[
name|numThreads
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numThreads
condition|;
operator|++
name|i
control|)
block|{
comment|// Thread ids happen to be generated sequentially, so we also generate random threads so that distribution of IDs
comment|// is not perfect for the concurrent recycler
for|for
control|(
name|int
name|j
init|=
name|RANDOM
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
init|;
name|j
operator|>=
literal|0
condition|;
operator|--
name|j
control|)
block|{
operator|new
name|Thread
argument_list|()
expr_stmt|;
block|}
name|threads
index|[
name|i
index|]
operator|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
return|return;
block|}
while|while
condition|(
name|recycles
operator|.
name|getAndDecrement
argument_list|()
operator|>
literal|0
condition|)
block|{
specifier|final
name|Recycler
operator|.
name|V
argument_list|<
name|?
argument_list|>
name|v
init|=
name|recycler
operator|.
name|obtain
argument_list|()
decl_stmt|;
name|v
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
block|}
expr_stmt|;
block|}
for|for
control|(
name|Thread
name|thread
range|:
name|threads
control|)
block|{
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
specifier|final
name|long
name|start
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
for|for
control|(
name|Thread
name|thread
range|:
name|threads
control|)
block|{
name|thread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
return|return
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|start
return|;
block|}
DECL|method|main
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|InterruptedException
block|{
specifier|final
name|int
name|limit
init|=
literal|100
decl_stmt|;
specifier|final
name|Recycler
operator|.
name|C
argument_list|<
name|Object
argument_list|>
name|c
init|=
operator|new
name|Recycler
operator|.
name|C
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|newInstance
parameter_list|(
name|int
name|sizing
parameter_list|)
block|{
return|return
operator|new
name|Object
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|(
name|Object
name|value
parameter_list|)
block|{}
block|}
decl_stmt|;
specifier|final
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|Recycler
argument_list|<
name|Object
argument_list|>
argument_list|>
name|recyclers
init|=
name|ImmutableMap
operator|.
expr|<
name|String
decl_stmt|,
name|Recycler
argument_list|<
name|Object
argument_list|>
decl|>
name|builder
argument_list|()
decl|.
name|put
argument_list|(
literal|"none"
argument_list|,
name|none
argument_list|(
name|c
argument_list|)
argument_list|)
decl|.
name|put
argument_list|(
literal|"concurrent-queue"
argument_list|,
name|concurrentDeque
argument_list|(
name|c
argument_list|,
name|limit
argument_list|)
argument_list|)
decl|.
name|put
argument_list|(
literal|"thread-local"
argument_list|,
name|threadLocal
argument_list|(
name|dequeFactory
argument_list|(
name|c
argument_list|,
name|limit
argument_list|)
argument_list|)
argument_list|)
decl|.
name|put
argument_list|(
literal|"soft-thread-local"
argument_list|,
name|threadLocal
argument_list|(
name|softFactory
argument_list|(
name|dequeFactory
argument_list|(
name|c
argument_list|,
name|limit
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl|.
name|put
argument_list|(
literal|"locked"
argument_list|,
name|locked
argument_list|(
name|deque
argument_list|(
name|c
argument_list|,
name|limit
argument_list|)
argument_list|)
argument_list|)
decl|.
name|put
argument_list|(
literal|"concurrent"
argument_list|,
name|concurrent
argument_list|(
name|dequeFactory
argument_list|(
name|c
argument_list|,
name|limit
argument_list|)
argument_list|,
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|availableProcessors
argument_list|()
argument_list|)
argument_list|)
decl|.
name|put
argument_list|(
literal|"soft-concurrent"
argument_list|,
name|concurrent
argument_list|(
name|softFactory
argument_list|(
name|dequeFactory
argument_list|(
name|c
argument_list|,
name|limit
argument_list|)
argument_list|)
argument_list|,
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|availableProcessors
argument_list|()
argument_list|)
argument_list|)
decl|.
name|build
argument_list|()
decl_stmt|;
comment|// warmup
specifier|final
name|long
name|start
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
while|while
condition|(
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|start
operator|<
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|toNanos
argument_list|(
literal|10
argument_list|)
condition|)
block|{
for|for
control|(
name|Recycler
argument_list|<
name|?
argument_list|>
name|recycler
range|:
name|recyclers
operator|.
name|values
argument_list|()
control|)
block|{
name|bench
argument_list|(
name|recycler
argument_list|,
name|NUM_RECYCLES
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
comment|// run
for|for
control|(
name|int
name|numThreads
init|=
literal|1
init|;
name|numThreads
operator|<=
literal|4
operator|*
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|availableProcessors
argument_list|()
condition|;
name|numThreads
operator|*=
literal|2
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"## "
operator|+
name|numThreads
operator|+
literal|" threads\n"
argument_list|)
expr_stmt|;
name|System
operator|.
name|gc
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
for|for
control|(
name|Recycler
argument_list|<
name|?
argument_list|>
name|recycler
range|:
name|recyclers
operator|.
name|values
argument_list|()
control|)
block|{
name|bench
argument_list|(
name|recycler
argument_list|,
name|NUM_RECYCLES
argument_list|,
name|numThreads
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
operator|++
name|i
control|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Recycler
argument_list|<
name|Object
argument_list|>
argument_list|>
name|entry
range|:
name|recyclers
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|"\t"
operator|+
name|TimeUnit
operator|.
name|NANOSECONDS
operator|.
name|toMillis
argument_list|(
name|bench
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|NUM_RECYCLES
argument_list|,
name|numThreads
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

