begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.elasticsearch.benchmark.bloom
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|benchmark
operator|.
name|bloom
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|bloom
operator|.
name|FuzzySet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|ByteSizeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|SizeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|BloomFilter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|SecureRandom
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
DECL|class|BloomBench
specifier|public
class|class
name|BloomBench
block|{
DECL|method|main
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|SecureRandom
name|random
init|=
operator|new
name|SecureRandom
argument_list|()
decl_stmt|;
specifier|final
name|int
name|ELEMENTS
init|=
operator|(
name|int
operator|)
name|SizeValue
operator|.
name|parseSizeValue
argument_list|(
literal|"1m"
argument_list|)
operator|.
name|singles
argument_list|()
decl_stmt|;
specifier|final
name|double
name|fpp
init|=
literal|0.01
decl_stmt|;
name|BloomFilter
name|gFilter
init|=
name|BloomFilter
operator|.
name|create
argument_list|(
name|ELEMENTS
argument_list|,
name|fpp
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"G SIZE: "
operator|+
operator|new
name|ByteSizeValue
argument_list|(
name|gFilter
operator|.
name|getSizeInBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|FuzzySet
name|lFilter
init|=
name|FuzzySet
operator|.
name|createSetBasedOnMaxMemory
argument_list|(
operator|(
name|int
operator|)
name|gFilter
operator|.
name|getSizeInBytes
argument_list|()
argument_list|)
decl_stmt|;
comment|//FuzzySet lFilter = FuzzySet.createSetBasedOnQuality(ELEMENTS, 0.97f);
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ELEMENTS
condition|;
name|i
operator|++
control|)
block|{
name|BytesRef
name|bytesRef
init|=
operator|new
name|BytesRef
argument_list|(
name|Strings
operator|.
name|randomBase64UUID
argument_list|(
name|random
argument_list|)
argument_list|)
decl_stmt|;
name|gFilter
operator|.
name|put
argument_list|(
name|bytesRef
argument_list|)
expr_stmt|;
name|lFilter
operator|.
name|addValue
argument_list|(
name|bytesRef
argument_list|)
expr_stmt|;
block|}
name|int
name|lFalse
init|=
literal|0
decl_stmt|;
name|int
name|gFalse
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ELEMENTS
condition|;
name|i
operator|++
control|)
block|{
name|BytesRef
name|bytesRef
init|=
operator|new
name|BytesRef
argument_list|(
name|Strings
operator|.
name|randomBase64UUID
argument_list|(
name|random
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|gFilter
operator|.
name|mightContain
argument_list|(
name|bytesRef
argument_list|)
condition|)
block|{
name|gFalse
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|lFilter
operator|.
name|contains
argument_list|(
name|bytesRef
argument_list|)
operator|==
name|FuzzySet
operator|.
name|ContainsResult
operator|.
name|MAYBE
condition|)
block|{
name|lFalse
operator|++
expr_stmt|;
block|}
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Failed positives, g["
operator|+
name|gFalse
operator|+
literal|"], l["
operator|+
name|lFalse
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

