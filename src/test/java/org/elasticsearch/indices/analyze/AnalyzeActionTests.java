begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.indices.analyze
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|analyze
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|alias
operator|.
name|Alias
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|analyze
operator|.
name|AnalyzeRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|analyze
operator|.
name|AnalyzeResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchIntegrationTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
operator|.
name|settingsBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertAcked
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|AnalyzeActionTests
specifier|public
class|class
name|AnalyzeActionTests
extends|extends
name|ElasticsearchIntegrationTest
block|{
annotation|@
name|Test
DECL|method|simpleAnalyzerTests
specifier|public
name|void
name|simpleAnalyzerTests
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addAlias
argument_list|(
operator|new
name|Alias
argument_list|(
literal|"alias"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|AnalyzeResponse
name|analyzeResponse
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareAnalyze
argument_list|(
name|indexOrAlias
argument_list|()
argument_list|,
literal|"this is a test"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|analyzeResponse
operator|.
name|getTokens
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|AnalyzeResponse
operator|.
name|AnalyzeToken
name|token
init|=
name|analyzeResponse
operator|.
name|getTokens
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|token
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"this"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|token
operator|.
name|getStartOffset
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|token
operator|.
name|getEndOffset
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|token
operator|=
name|analyzeResponse
operator|.
name|getTokens
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|token
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"is"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|token
operator|.
name|getStartOffset
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|token
operator|.
name|getEndOffset
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|7
argument_list|)
argument_list|)
expr_stmt|;
name|token
operator|=
name|analyzeResponse
operator|.
name|getTokens
argument_list|()
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|token
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|token
operator|.
name|getStartOffset
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|token
operator|.
name|getEndOffset
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|9
argument_list|)
argument_list|)
expr_stmt|;
name|token
operator|=
name|analyzeResponse
operator|.
name|getTokens
argument_list|()
operator|.
name|get
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|token
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|token
operator|.
name|getStartOffset
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|token
operator|.
name|getEndOffset
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|14
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|analyzeNumericField
specifier|public
name|void
name|analyzeNumericField
parameter_list|()
throws|throws
name|ElasticsearchException
throws|,
name|IOException
block|{
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addAlias
argument_list|(
operator|new
name|Alias
argument_list|(
literal|"alias"
argument_list|)
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"test"
argument_list|,
literal|"long"
argument_list|,
literal|"type=long"
argument_list|,
literal|"double"
argument_list|,
literal|"type=double"
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
try|try
block|{
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareAnalyze
argument_list|(
name|indexOrAlias
argument_list|()
argument_list|,
literal|"123"
argument_list|)
operator|.
name|setField
argument_list|(
literal|"long"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"shouldn't get here"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ElasticsearchIllegalArgumentException
name|ex
parameter_list|)
block|{
comment|//all good
block|}
try|try
block|{
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareAnalyze
argument_list|(
name|indexOrAlias
argument_list|()
argument_list|,
literal|"123.0"
argument_list|)
operator|.
name|setField
argument_list|(
literal|"double"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"shouldn't get here"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ElasticsearchIllegalArgumentException
name|ex
parameter_list|)
block|{
comment|//all good
block|}
block|}
annotation|@
name|Test
DECL|method|analyzeWithNoIndex
specifier|public
name|void
name|analyzeWithNoIndex
parameter_list|()
throws|throws
name|Exception
block|{
name|AnalyzeResponse
name|analyzeResponse
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareAnalyze
argument_list|(
literal|"THIS IS A TEST"
argument_list|)
operator|.
name|setAnalyzer
argument_list|(
literal|"simple"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|analyzeResponse
operator|.
name|getTokens
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|analyzeResponse
operator|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareAnalyze
argument_list|(
literal|"THIS IS A TEST"
argument_list|)
operator|.
name|setTokenizer
argument_list|(
literal|"keyword"
argument_list|)
operator|.
name|setTokenFilters
argument_list|(
literal|"lowercase"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|analyzeResponse
operator|.
name|getTokens
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|analyzeResponse
operator|.
name|getTokens
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"this is a test"
argument_list|)
argument_list|)
expr_stmt|;
name|analyzeResponse
operator|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareAnalyze
argument_list|(
literal|"THIS IS A TEST"
argument_list|)
operator|.
name|setTokenizer
argument_list|(
literal|"standard"
argument_list|)
operator|.
name|setTokenFilters
argument_list|(
literal|"lowercase"
argument_list|,
literal|"reverse"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|analyzeResponse
operator|.
name|getTokens
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|AnalyzeResponse
operator|.
name|AnalyzeToken
name|token
init|=
name|analyzeResponse
operator|.
name|getTokens
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|token
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"siht"
argument_list|)
argument_list|)
expr_stmt|;
name|token
operator|=
name|analyzeResponse
operator|.
name|getTokens
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|token
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"si"
argument_list|)
argument_list|)
expr_stmt|;
name|token
operator|=
name|analyzeResponse
operator|.
name|getTokens
argument_list|()
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|token
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|token
operator|=
name|analyzeResponse
operator|.
name|getTokens
argument_list|()
operator|.
name|get
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|token
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"tset"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|analyzeWithCharFilters
specifier|public
name|void
name|analyzeWithCharFilters
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addAlias
argument_list|(
operator|new
name|Alias
argument_list|(
literal|"alias"
argument_list|)
argument_list|)
operator|.
name|setSettings
argument_list|(
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
name|indexSettings
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.char_filter.custom_mapping.type"
argument_list|,
literal|"mapping"
argument_list|)
operator|.
name|putArray
argument_list|(
literal|"index.analysis.char_filter.custom_mapping.mappings"
argument_list|,
literal|"ph=>f"
argument_list|,
literal|"qu=>q"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.analyzer.custom_with_char_filter.tokenizer"
argument_list|,
literal|"standard"
argument_list|)
operator|.
name|putArray
argument_list|(
literal|"index.analysis.analyzer.custom_with_char_filter.char_filter"
argument_list|,
literal|"custom_mapping"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|AnalyzeResponse
name|analyzeResponse
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareAnalyze
argument_list|(
literal|"<h2><b>THIS</b> IS A</h2><a href=\"#\">TEST</a>"
argument_list|)
operator|.
name|setTokenizer
argument_list|(
literal|"standard"
argument_list|)
operator|.
name|setCharFilters
argument_list|(
literal|"html_strip"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|analyzeResponse
operator|.
name|getTokens
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|analyzeResponse
operator|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareAnalyze
argument_list|(
literal|"THIS IS A<b>TEST</b>"
argument_list|)
operator|.
name|setTokenizer
argument_list|(
literal|"keyword"
argument_list|)
operator|.
name|setTokenFilters
argument_list|(
literal|"lowercase"
argument_list|)
operator|.
name|setCharFilters
argument_list|(
literal|"html_strip"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|analyzeResponse
operator|.
name|getTokens
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|analyzeResponse
operator|.
name|getTokens
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"this is a test"
argument_list|)
argument_list|)
expr_stmt|;
name|analyzeResponse
operator|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareAnalyze
argument_list|(
name|indexOrAlias
argument_list|()
argument_list|,
literal|"jeff quit phish"
argument_list|)
operator|.
name|setTokenizer
argument_list|(
literal|"keyword"
argument_list|)
operator|.
name|setTokenFilters
argument_list|(
literal|"lowercase"
argument_list|)
operator|.
name|setCharFilters
argument_list|(
literal|"custom_mapping"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|analyzeResponse
operator|.
name|getTokens
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|analyzeResponse
operator|.
name|getTokens
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"jeff qit fish"
argument_list|)
argument_list|)
expr_stmt|;
name|analyzeResponse
operator|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareAnalyze
argument_list|(
name|indexOrAlias
argument_list|()
argument_list|,
literal|"<a href=\"#\">jeff quit fish</a>"
argument_list|)
operator|.
name|setTokenizer
argument_list|(
literal|"standard"
argument_list|)
operator|.
name|setCharFilters
argument_list|(
literal|"html_strip"
argument_list|,
literal|"custom_mapping"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|analyzeResponse
operator|.
name|getTokens
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|AnalyzeResponse
operator|.
name|AnalyzeToken
name|token
init|=
name|analyzeResponse
operator|.
name|getTokens
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|token
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"jeff"
argument_list|)
argument_list|)
expr_stmt|;
name|token
operator|=
name|analyzeResponse
operator|.
name|getTokens
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|token
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"qit"
argument_list|)
argument_list|)
expr_stmt|;
name|token
operator|=
name|analyzeResponse
operator|.
name|getTokens
argument_list|()
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|token
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"fish"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|analyzerWithFieldOrTypeTests
specifier|public
name|void
name|analyzerWithFieldOrTypeTests
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addAlias
argument_list|(
operator|new
name|Alias
argument_list|(
literal|"alias"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|preparePutMapping
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setType
argument_list|(
literal|"document"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{\n"
operator|+
literal|"    \"document\":{\n"
operator|+
literal|"        \"properties\":{\n"
operator|+
literal|"            \"simple\":{\n"
operator|+
literal|"                \"type\":\"string\",\n"
operator|+
literal|"                \"analyzer\": \"simple\"\n"
operator|+
literal|"            }\n"
operator|+
literal|"        }\n"
operator|+
literal|"    }\n"
operator|+
literal|"}"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|AnalyzeRequestBuilder
name|requestBuilder
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareAnalyze
argument_list|(
literal|"THIS IS A TEST"
argument_list|)
decl_stmt|;
name|requestBuilder
operator|.
name|setIndex
argument_list|(
name|indexOrAlias
argument_list|()
argument_list|)
expr_stmt|;
name|requestBuilder
operator|.
name|setField
argument_list|(
literal|"document.simple"
argument_list|)
expr_stmt|;
name|AnalyzeResponse
name|analyzeResponse
init|=
name|requestBuilder
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|analyzeResponse
operator|.
name|getTokens
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|AnalyzeResponse
operator|.
name|AnalyzeToken
name|token
init|=
name|analyzeResponse
operator|.
name|getTokens
argument_list|()
operator|.
name|get
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|token
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|token
operator|.
name|getStartOffset
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|token
operator|.
name|getEndOffset
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|14
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
comment|// issue #5974
DECL|method|testThatStandardAndDefaultAnalyzersAreSame
specifier|public
name|void
name|testThatStandardAndDefaultAnalyzersAreSame
parameter_list|()
throws|throws
name|Exception
block|{
name|AnalyzeResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareAnalyze
argument_list|(
literal|"this is a test"
argument_list|)
operator|.
name|setAnalyzer
argument_list|(
literal|"standard"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertTokens
argument_list|(
name|response
argument_list|,
literal|"this"
argument_list|,
literal|"is"
argument_list|,
literal|"a"
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareAnalyze
argument_list|(
literal|"this is a test"
argument_list|)
operator|.
name|setAnalyzer
argument_list|(
literal|"default"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertTokens
argument_list|(
name|response
argument_list|,
literal|"this"
argument_list|,
literal|"is"
argument_list|,
literal|"a"
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareAnalyze
argument_list|(
literal|"this is a test"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertTokens
argument_list|(
name|response
argument_list|,
literal|"this"
argument_list|,
literal|"is"
argument_list|,
literal|"a"
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
block|}
DECL|method|assertTokens
specifier|private
name|void
name|assertTokens
parameter_list|(
name|AnalyzeResponse
name|response
parameter_list|,
name|String
modifier|...
name|tokens
parameter_list|)
block|{
name|assertThat
argument_list|(
name|response
operator|.
name|getTokens
argument_list|()
argument_list|,
name|hasSize
argument_list|(
name|tokens
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tokens
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertThat
argument_list|(
name|response
operator|.
name|getTokens
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|is
argument_list|(
name|tokens
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|indexOrAlias
specifier|private
specifier|static
name|String
name|indexOrAlias
parameter_list|()
block|{
return|return
name|randomBoolean
argument_list|()
condition|?
literal|"test"
else|:
literal|"alias"
return|;
block|}
block|}
end_class

end_unit

