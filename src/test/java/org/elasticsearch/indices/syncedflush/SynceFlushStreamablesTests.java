begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.indices.syncedflush
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|syncedflush
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ShardOperationFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ImmutableShardRouting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRouting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRoutingState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|BytesStreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|BytesStreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReferenceArray
import|;
end_import

begin_class
DECL|class|SynceFlushStreamablesTests
specifier|public
class|class
name|SynceFlushStreamablesTests
extends|extends
name|ElasticsearchTestCase
block|{
annotation|@
name|Test
DECL|method|streamWriteSyncResponse
specifier|public
name|void
name|streamWriteSyncResponse
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
name|ShardId
name|shardId
init|=
operator|new
name|ShardId
argument_list|(
literal|"test"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|commitIds
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|String
name|nodeId
init|=
literal|"node_id"
decl_stmt|;
name|commitIds
operator|.
name|put
argument_list|(
name|nodeId
argument_list|,
name|generateRandomId
argument_list|(
name|randomInt
argument_list|(
literal|100
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|SyncedFlushRequest
name|syncedFlushRequest
init|=
operator|new
name|SyncedFlushRequest
argument_list|(
name|shardId
argument_list|,
name|randomAsciiOfLength
argument_list|(
literal|5
argument_list|)
argument_list|,
name|commitIds
argument_list|)
decl_stmt|;
name|BytesStreamOutput
name|out
init|=
operator|new
name|BytesStreamOutput
argument_list|()
decl_stmt|;
name|syncedFlushRequest
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|StreamInput
name|in
init|=
operator|new
name|BytesStreamInput
argument_list|(
name|out
operator|.
name|bytes
argument_list|()
argument_list|)
decl_stmt|;
name|SyncedFlushRequest
name|request
init|=
operator|new
name|SyncedFlushRequest
argument_list|()
decl_stmt|;
name|request
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|request
operator|.
name|commitIds
argument_list|()
operator|.
name|get
argument_list|(
name|nodeId
argument_list|)
argument_list|,
name|syncedFlushRequest
operator|.
name|commitIds
argument_list|()
operator|.
name|get
argument_list|(
name|nodeId
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|streamSyncResponse
specifier|public
name|void
name|streamSyncResponse
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
name|ShardRouting
name|shardRouting
init|=
operator|new
name|ImmutableShardRouting
argument_list|(
literal|"test"
argument_list|,
literal|0
argument_list|,
literal|"test_node"
argument_list|,
literal|"other_test_node"
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
name|ShardRoutingState
operator|.
name|STARTED
argument_list|,
name|randomInt
argument_list|()
argument_list|)
decl_stmt|;
name|AtomicReferenceArray
name|atomicReferenceArray
init|=
operator|new
name|AtomicReferenceArray
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|atomicReferenceArray
operator|.
name|set
argument_list|(
literal|0
argument_list|,
operator|new
name|PreSyncedShardFlushResponse
argument_list|(
name|generateRandomId
argument_list|(
name|randomInt
argument_list|(
literal|100
argument_list|)
argument_list|)
argument_list|,
name|shardRouting
argument_list|)
argument_list|)
expr_stmt|;
name|PreSyncedFlushResponse
name|preSyncedFlushResponse
init|=
operator|new
name|PreSyncedFlushResponse
argument_list|(
name|randomInt
argument_list|()
argument_list|,
name|randomInt
argument_list|()
argument_list|,
name|randomInt
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ShardOperationFailedException
argument_list|>
argument_list|()
argument_list|,
name|atomicReferenceArray
argument_list|)
decl_stmt|;
name|BytesStreamOutput
name|out
init|=
operator|new
name|BytesStreamOutput
argument_list|()
decl_stmt|;
name|preSyncedFlushResponse
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|StreamInput
name|in
init|=
operator|new
name|BytesStreamInput
argument_list|(
name|out
operator|.
name|bytes
argument_list|()
argument_list|)
decl_stmt|;
name|PreSyncedFlushResponse
name|request
init|=
operator|new
name|PreSyncedFlushResponse
argument_list|()
decl_stmt|;
name|request
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|request
operator|.
name|commitIds
argument_list|()
operator|.
name|get
argument_list|(
name|shardRouting
argument_list|)
argument_list|,
name|preSyncedFlushResponse
operator|.
name|commitIds
argument_list|()
operator|.
name|get
argument_list|(
name|shardRouting
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|streamShardSyncResponse
specifier|public
name|void
name|streamShardSyncResponse
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
name|ShardRouting
name|shardRouting
init|=
operator|new
name|ImmutableShardRouting
argument_list|(
literal|"test"
argument_list|,
literal|0
argument_list|,
literal|"test_node"
argument_list|,
literal|"other_test_node"
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
name|ShardRoutingState
operator|.
name|STARTED
argument_list|,
name|randomInt
argument_list|()
argument_list|)
decl_stmt|;
name|PreSyncedShardFlushResponse
name|preSyncedShardFlushResponse
init|=
operator|new
name|PreSyncedShardFlushResponse
argument_list|(
name|generateRandomId
argument_list|(
name|randomInt
argument_list|(
literal|100
argument_list|)
argument_list|)
argument_list|,
name|shardRouting
argument_list|)
decl_stmt|;
name|BytesStreamOutput
name|out
init|=
operator|new
name|BytesStreamOutput
argument_list|()
decl_stmt|;
name|preSyncedShardFlushResponse
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|StreamInput
name|in
init|=
operator|new
name|BytesStreamInput
argument_list|(
name|out
operator|.
name|bytes
argument_list|()
argument_list|)
decl_stmt|;
name|PreSyncedShardFlushResponse
name|request
init|=
operator|new
name|PreSyncedShardFlushResponse
argument_list|()
decl_stmt|;
name|request
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|request
operator|.
name|id
argument_list|()
argument_list|,
name|preSyncedShardFlushResponse
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|generateRandomId
name|byte
index|[]
name|generateRandomId
parameter_list|(
name|int
name|length
parameter_list|)
block|{
name|byte
index|[]
name|id
init|=
operator|new
name|byte
index|[
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|id
index|[
name|i
index|]
operator|=
name|randomByte
argument_list|()
expr_stmt|;
block|}
return|return
name|id
return|;
block|}
block|}
end_class

end_unit

