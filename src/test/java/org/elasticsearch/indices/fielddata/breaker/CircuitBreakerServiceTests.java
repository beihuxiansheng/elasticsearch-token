begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.indices.fielddata.breaker
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|fielddata
operator|.
name|breaker
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|MapBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|monitor
operator|.
name|jvm
operator|.
name|JvmInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchIntegrationTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|junit
operator|.
name|annotations
operator|.
name|TestLogging
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_REPLICAS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
operator|.
name|settingsBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchIntegrationTest
operator|.
name|ClusterScope
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchIntegrationTest
operator|.
name|Scope
operator|.
name|TEST
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertAcked
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertFailures
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|containsString
import|;
end_import

begin_comment
comment|/**  * Integration tests for InternalCircuitBreakerService  */
end_comment

begin_class
annotation|@
name|ClusterScope
argument_list|(
name|scope
operator|=
name|TEST
argument_list|)
DECL|class|CircuitBreakerServiceTests
specifier|public
class|class
name|CircuitBreakerServiceTests
extends|extends
name|ElasticsearchIntegrationTest
block|{
DECL|method|randomRidiculouslySmallLimit
specifier|private
name|String
name|randomRidiculouslySmallLimit
parameter_list|()
block|{
comment|// 3 different ways to say 100 bytes
return|return
name|randomFrom
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"100b"
argument_list|,
literal|"100"
argument_list|,
operator|(
literal|10000.
operator|/
name|JvmInfo
operator|.
name|jvmInfo
argument_list|()
operator|.
name|getMem
argument_list|()
operator|.
name|getHeapMax
argument_list|()
operator|.
name|bytes
argument_list|()
operator|)
operator|+
literal|"%"
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Test
annotation|@
name|TestLogging
argument_list|(
literal|"org.elasticsearch.indices.fielddata.breaker:TRACE,org.elasticsearch.index.fielddata:TRACE,org.elasticsearch.common.breaker:TRACE"
argument_list|)
DECL|method|testMemoryBreaker
specifier|public
name|void
name|testMemoryBreaker
parameter_list|()
block|{
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"cb-test"
argument_list|,
literal|1
argument_list|,
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
name|between
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Client
name|client
init|=
name|client
argument_list|()
decl_stmt|;
try|try
block|{
comment|// index some different terms so we have some field data for loading
name|int
name|docCount
init|=
name|atLeast
argument_list|(
literal|300
argument_list|)
decl_stmt|;
for|for
control|(
name|long
name|id
init|=
literal|0
init|;
name|id
operator|<
name|docCount
condition|;
name|id
operator|++
control|)
block|{
name|client
operator|.
name|prepareIndex
argument_list|(
literal|"cb-test"
argument_list|,
literal|"type"
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|id
argument_list|)
argument_list|)
operator|.
name|setSource
argument_list|(
name|MapBuilder
operator|.
expr|<
name|String
argument_list|,
name|Object
operator|>
name|newMapBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"test"
argument_list|,
literal|"value"
operator|+
name|id
argument_list|)
operator|.
name|map
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
block|}
comment|// refresh
name|refresh
argument_list|()
expr_stmt|;
comment|// execute a search that loads field data (sorting on the "test" field)
name|client
operator|.
name|prepareSearch
argument_list|(
literal|"cb-test"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{\"sort\": \"test\",\"query\":{\"match_all\":{}}}"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
comment|// clear field data cache (thus setting the loaded field data back to 0)
name|client
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareClearCache
argument_list|(
literal|"cb-test"
argument_list|)
operator|.
name|setFieldDataCache
argument_list|(
literal|true
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
comment|// Update circuit breaker settings
name|Settings
name|settings
init|=
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
name|InternalCircuitBreakerService
operator|.
name|CIRCUIT_BREAKER_MAX_BYTES_SETTING
argument_list|,
name|randomRidiculouslySmallLimit
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|InternalCircuitBreakerService
operator|.
name|CIRCUIT_BREAKER_OVERHEAD_SETTING
argument_list|,
literal|1.05
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|client
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareUpdateSettings
argument_list|()
operator|.
name|setTransientSettings
argument_list|(
name|settings
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
comment|// execute a search that loads field data (sorting on the "test" field)
comment|// again, this time it should trip the breaker
name|assertFailures
argument_list|(
name|client
operator|.
name|prepareSearch
argument_list|(
literal|"cb-test"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{\"sort\": \"test\",\"query\":{\"match_all\":{}}}"
argument_list|)
argument_list|,
name|RestStatus
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|,
name|containsString
argument_list|(
literal|"Data too large, data would be larger than limit of [100] bytes"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// Reset settings
name|Settings
name|resetSettings
init|=
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
name|InternalCircuitBreakerService
operator|.
name|CIRCUIT_BREAKER_MAX_BYTES_SETTING
argument_list|,
literal|"-1"
argument_list|)
operator|.
name|put
argument_list|(
name|InternalCircuitBreakerService
operator|.
name|CIRCUIT_BREAKER_OVERHEAD_SETTING
argument_list|,
name|InternalCircuitBreakerService
operator|.
name|DEFAULT_OVERHEAD_CONSTANT
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|client
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareUpdateSettings
argument_list|()
operator|.
name|setTransientSettings
argument_list|(
name|resetSettings
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
annotation|@
name|TestLogging
argument_list|(
literal|"org.elasticsearch.indices.fielddata.breaker:TRACE,org.elasticsearch.index.fielddata:TRACE,org.elasticsearch.common.breaker:TRACE"
argument_list|)
DECL|method|testRamAccountingTermsEnum
specifier|public
name|void
name|testRamAccountingTermsEnum
parameter_list|()
block|{
specifier|final
name|Client
name|client
init|=
name|client
argument_list|()
decl_stmt|;
try|try
block|{
comment|// Create an index where the mappings have a field data filter
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"ramtest"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{\"mappings\": {\"type\": {\"properties\": {\"test\": "
operator|+
literal|"{\"type\": \"string\",\"fielddata\": {\"filter\": {\"regex\": {\"pattern\": \"^value.*\"}}}}}}}}"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Wait 10 seconds for green
name|client
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareHealth
argument_list|(
literal|"ramtest"
argument_list|)
operator|.
name|setWaitForGreenStatus
argument_list|()
operator|.
name|setTimeout
argument_list|(
literal|"10s"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
comment|// index some different terms so we have some field data for loading
name|int
name|docCount
init|=
name|atLeast
argument_list|(
literal|300
argument_list|)
decl_stmt|;
for|for
control|(
name|long
name|id
init|=
literal|0
init|;
name|id
operator|<
name|docCount
condition|;
name|id
operator|++
control|)
block|{
name|client
operator|.
name|prepareIndex
argument_list|(
literal|"ramtest"
argument_list|,
literal|"type"
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|id
argument_list|)
argument_list|)
operator|.
name|setSource
argument_list|(
name|MapBuilder
operator|.
expr|<
name|String
argument_list|,
name|Object
operator|>
name|newMapBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"test"
argument_list|,
literal|"value"
operator|+
name|id
argument_list|)
operator|.
name|map
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
block|}
comment|// refresh
name|refresh
argument_list|()
expr_stmt|;
comment|// execute a search that loads field data (sorting on the "test" field)
name|client
operator|.
name|prepareSearch
argument_list|(
literal|"ramtest"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{\"sort\": \"test\",\"query\":{\"match_all\":{}}}"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
comment|// clear field data cache (thus setting the loaded field data back to 0)
name|client
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareClearCache
argument_list|(
literal|"ramtest"
argument_list|)
operator|.
name|setFieldDataCache
argument_list|(
literal|true
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
comment|// Update circuit breaker settings
name|Settings
name|settings
init|=
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
name|InternalCircuitBreakerService
operator|.
name|CIRCUIT_BREAKER_MAX_BYTES_SETTING
argument_list|,
name|randomRidiculouslySmallLimit
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|InternalCircuitBreakerService
operator|.
name|CIRCUIT_BREAKER_OVERHEAD_SETTING
argument_list|,
literal|1.05
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|client
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareUpdateSettings
argument_list|()
operator|.
name|setTransientSettings
argument_list|(
name|settings
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
comment|// execute a search that loads field data (sorting on the "test" field)
comment|// again, this time it should trip the breaker
name|assertFailures
argument_list|(
name|client
operator|.
name|prepareSearch
argument_list|(
literal|"ramtest"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{\"sort\": \"test\",\"query\":{\"match_all\":{}}}"
argument_list|)
argument_list|,
name|RestStatus
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|,
name|containsString
argument_list|(
literal|"Data too large, data would be larger than limit of [100] bytes"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// Reset settings
name|Settings
name|resetSettings
init|=
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
name|InternalCircuitBreakerService
operator|.
name|CIRCUIT_BREAKER_MAX_BYTES_SETTING
argument_list|,
literal|"-1"
argument_list|)
operator|.
name|put
argument_list|(
name|InternalCircuitBreakerService
operator|.
name|CIRCUIT_BREAKER_OVERHEAD_SETTING
argument_list|,
name|InternalCircuitBreakerService
operator|.
name|DEFAULT_OVERHEAD_CONSTANT
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|client
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareUpdateSettings
argument_list|()
operator|.
name|setTransientSettings
argument_list|(
name|resetSettings
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

