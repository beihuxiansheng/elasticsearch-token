begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.indices.recovery
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|recovery
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|transport
operator|.
name|LocalTransportAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|service
operator|.
name|IndexService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|service
operator|.
name|InternalIndexShard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|store
operator|.
name|StoreFileMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchSingleNodeTest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
DECL|class|RecoveryStatusTests
specifier|public
class|class
name|RecoveryStatusTests
extends|extends
name|ElasticsearchSingleNodeTest
block|{
DECL|method|testRenameTempFiles
specifier|public
name|void
name|testRenameTempFiles
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexService
name|service
init|=
name|createIndex
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|RecoveryState
name|state
init|=
operator|new
name|RecoveryState
argument_list|()
decl_stmt|;
name|InternalIndexShard
name|indexShard
init|=
operator|(
name|InternalIndexShard
operator|)
name|service
operator|.
name|shard
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|DiscoveryNode
name|node
init|=
operator|new
name|DiscoveryNode
argument_list|(
literal|"foo"
argument_list|,
operator|new
name|LocalTransportAddress
argument_list|(
literal|"bar"
argument_list|)
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
decl_stmt|;
name|RecoveryStatus
name|status
init|=
operator|new
name|RecoveryStatus
argument_list|(
name|indexShard
argument_list|,
name|node
argument_list|,
name|state
argument_list|,
operator|new
name|RecoveryTarget
operator|.
name|RecoveryListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onRecoveryDone
parameter_list|(
name|RecoveryState
name|state
parameter_list|)
block|{             }
annotation|@
name|Override
specifier|public
name|void
name|onRecoveryFailure
parameter_list|(
name|RecoveryState
name|state
parameter_list|,
name|RecoveryFailedException
name|e
parameter_list|,
name|boolean
name|sendShardFailure
parameter_list|)
block|{             }
block|}
argument_list|)
decl_stmt|;
try|try
init|(
name|IndexOutput
name|indexOutput
init|=
name|status
operator|.
name|openAndPutIndexOutput
argument_list|(
literal|"foo.bar"
argument_list|,
operator|new
name|StoreFileMetaData
argument_list|(
literal|"foo.bar"
argument_list|,
literal|8
argument_list|)
argument_list|,
name|status
operator|.
name|store
argument_list|()
argument_list|)
init|)
block|{
name|indexOutput
operator|.
name|writeInt
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|IndexOutput
name|openIndexOutput
init|=
name|status
operator|.
name|getOpenIndexOutput
argument_list|(
literal|"foo.bar"
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|openIndexOutput
argument_list|,
name|indexOutput
argument_list|)
expr_stmt|;
name|openIndexOutput
operator|.
name|writeInt
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|status
operator|.
name|removeOpenIndexOutputs
argument_list|(
literal|"foo.bar"
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|strings
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
name|status
operator|.
name|store
argument_list|()
operator|.
name|directory
argument_list|()
operator|.
name|listAll
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|expectedFile
init|=
literal|null
decl_stmt|;
for|for
control|(
name|String
name|file
range|:
name|strings
control|)
block|{
if|if
condition|(
name|Pattern
operator|.
name|compile
argument_list|(
literal|"recovery[.]\\d+[.]foo[.]bar"
argument_list|)
operator|.
name|matcher
argument_list|(
name|file
argument_list|)
operator|.
name|matches
argument_list|()
condition|)
block|{
name|expectedFile
operator|=
name|file
expr_stmt|;
break|break;
block|}
block|}
name|assertNotNull
argument_list|(
name|expectedFile
argument_list|)
expr_stmt|;
name|status
operator|.
name|renameAllTempFiles
argument_list|()
expr_stmt|;
name|strings
operator|=
name|Sets
operator|.
name|newHashSet
argument_list|(
name|status
operator|.
name|store
argument_list|()
operator|.
name|directory
argument_list|()
operator|.
name|listAll
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|strings
operator|.
name|toString
argument_list|()
argument_list|,
name|strings
operator|.
name|contains
argument_list|(
literal|"foo.bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|strings
operator|.
name|toString
argument_list|()
argument_list|,
name|strings
operator|.
name|contains
argument_list|(
name|expectedFile
argument_list|)
argument_list|)
expr_stmt|;
name|status
operator|.
name|markAsDone
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

