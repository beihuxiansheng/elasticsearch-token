begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.network
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|network
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|client
operator|.
name|HttpClients
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|index
operator|.
name|IndexRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|transport
operator|.
name|InetSocketTransportAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|ByteSizeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|http
operator|.
name|HttpServerTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|node
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchIntegrationTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|rest
operator|.
name|client
operator|.
name|http
operator|.
name|HttpRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertHitCount
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
DECL|class|DirectBufferNetworkTests
specifier|public
class|class
name|DirectBufferNetworkTests
extends|extends
name|ElasticsearchIntegrationTest
block|{
annotation|@
name|Override
DECL|method|nodeSettings
specifier|protected
name|Settings
name|nodeSettings
parameter_list|(
name|int
name|nodeOrdinal
parameter_list|)
block|{
return|return
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|Node
operator|.
name|HTTP_ENABLED
argument_list|,
literal|true
argument_list|)
operator|.
name|put
argument_list|(
name|super
operator|.
name|nodeSettings
argument_list|(
name|nodeOrdinal
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**      * This test validates that using large data sets (large docs + large API requests) don't      * cause a large direct byte buffer to be allocated internally in the sun.nio buffer cache.      *<p/>      * See {@link org.elasticsearch.common.netty.NettyUtils#DEFAULT_GATHERING} for more info.      */
annotation|@
name|Test
DECL|method|verifySaneDirectBufferAllocations
specifier|public
name|void
name|verifySaneDirectBufferAllocations
parameter_list|()
throws|throws
name|Exception
block|{
name|createIndex
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|int
name|estimatedBytesSize
init|=
name|scaledRandomIntBetween
argument_list|(
name|ByteSizeValue
operator|.
name|parseBytesSizeValue
argument_list|(
literal|"1.1mb"
argument_list|)
operator|.
name|bytesAsInt
argument_list|()
argument_list|,
name|ByteSizeValue
operator|.
name|parseBytesSizeValue
argument_list|(
literal|"1.5mb"
argument_list|)
operator|.
name|bytesAsInt
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|estimatedBytesSize
index|]
decl_stmt|;
name|getRandom
argument_list|()
operator|.
name|nextBytes
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|ByteArrayOutputStream
name|docOut
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
comment|// we use smile to automatically use the binary mapping
name|XContentBuilder
name|doc
init|=
name|XContentFactory
operator|.
name|smileBuilder
argument_list|(
name|docOut
argument_list|)
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"doc"
argument_list|)
operator|.
name|field
argument_list|(
literal|"value"
argument_list|,
name|data
argument_list|)
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|doc
operator|.
name|close
argument_list|()
expr_stmt|;
name|byte
index|[]
name|docBytes
init|=
name|docOut
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|int
name|numDocs
init|=
name|randomIntBetween
argument_list|(
literal|2
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"indexing [{}] docs, each with size [{}]"
argument_list|,
name|numDocs
argument_list|,
name|estimatedBytesSize
argument_list|)
expr_stmt|;
name|IndexRequestBuilder
index|[]
name|builders
init|=
operator|new
name|IndexRequestBuilder
index|[
name|numDocs
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
operator|++
name|i
control|)
block|{
name|builders
index|[
name|i
index|]
operator|=
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|)
operator|.
name|setSource
argument_list|(
name|docBytes
argument_list|)
expr_stmt|;
block|}
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|builders
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"done indexing"
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"executing random client search for all docs"
argument_list|)
expr_stmt|;
name|assertHitCount
argument_list|(
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setFrom
argument_list|(
literal|0
argument_list|)
operator|.
name|setSize
argument_list|(
name|numDocs
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
name|numDocs
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"executing transport client search for all docs"
argument_list|)
expr_stmt|;
name|assertHitCount
argument_list|(
name|internalCluster
argument_list|()
operator|.
name|transportClient
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setFrom
argument_list|(
literal|0
argument_list|)
operator|.
name|setSize
argument_list|(
name|numDocs
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
name|numDocs
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"executing HTTP search for all docs"
argument_list|)
expr_stmt|;
comment|// simulate large HTTP call as well
name|httpClient
argument_list|()
operator|.
name|method
argument_list|(
literal|"GET"
argument_list|)
operator|.
name|path
argument_list|(
literal|"/test/_search"
argument_list|)
operator|.
name|addParam
argument_list|(
literal|"size"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|numDocs
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"validating large direct buffer not allocated"
argument_list|)
expr_stmt|;
name|validateNoLargeDirectBufferAllocated
argument_list|()
expr_stmt|;
block|}
comment|/**      * Validates that all the thread local allocated ByteBuffer in sun.nio under the Util$BufferCache      * are not greater than 1mb.      */
DECL|method|validateNoLargeDirectBufferAllocated
specifier|private
name|void
name|validateNoLargeDirectBufferAllocated
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Make the fields in the Thread class that store ThreadLocals
comment|// accessible
name|Field
name|threadLocalsField
init|=
name|Thread
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"threadLocals"
argument_list|)
decl_stmt|;
name|threadLocalsField
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Make the underlying array of ThreadLoad.ThreadLocalMap.Entry objects
comment|// accessible
name|Class
argument_list|<
name|?
argument_list|>
name|tlmClass
init|=
name|Class
operator|.
name|forName
argument_list|(
literal|"java.lang.ThreadLocal$ThreadLocalMap"
argument_list|)
decl_stmt|;
name|Field
name|tableField
init|=
name|tlmClass
operator|.
name|getDeclaredField
argument_list|(
literal|"table"
argument_list|)
decl_stmt|;
name|tableField
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|Thread
name|thread
range|:
name|Thread
operator|.
name|getAllStackTraces
argument_list|()
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|thread
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|Object
name|threadLocalMap
init|=
name|threadLocalsField
operator|.
name|get
argument_list|(
name|thread
argument_list|)
decl_stmt|;
if|if
condition|(
name|threadLocalMap
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|Object
index|[]
name|table
init|=
operator|(
name|Object
index|[]
operator|)
name|tableField
operator|.
name|get
argument_list|(
name|threadLocalMap
argument_list|)
decl_stmt|;
if|if
condition|(
name|table
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
for|for
control|(
name|Object
name|entry
range|:
name|table
control|)
block|{
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|Field
name|valueField
init|=
name|entry
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredField
argument_list|(
literal|"value"
argument_list|)
decl_stmt|;
name|valueField
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Object
name|value
init|=
name|valueField
operator|.
name|get
argument_list|(
name|entry
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
operator|!
name|value
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"sun.nio.ch.Util$BufferCache"
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|Field
name|buffersField
init|=
name|value
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredField
argument_list|(
literal|"buffers"
argument_list|)
decl_stmt|;
name|buffersField
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Object
index|[]
name|buffers
init|=
operator|(
name|Object
index|[]
operator|)
name|buffersField
operator|.
name|get
argument_list|(
name|value
argument_list|)
decl_stmt|;
for|for
control|(
name|Object
name|buffer
range|:
name|buffers
control|)
block|{
if|if
condition|(
name|buffer
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|assertThat
argument_list|(
operator|(
operator|(
name|ByteBuffer
operator|)
name|buffer
operator|)
operator|.
name|capacity
argument_list|()
argument_list|,
name|Matchers
operator|.
name|lessThan
argument_list|(
literal|1
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

