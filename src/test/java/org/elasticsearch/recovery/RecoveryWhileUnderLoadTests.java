begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.recovery
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|recovery
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
operator|.
name|Slow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|AbstractSharedClusterTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|refresh
operator|.
name|RefreshResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|stats
operator|.
name|IndicesStatsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|stats
operator|.
name|ShardStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|MapBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|ESLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|Loggers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|DocsStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|junit
operator|.
name|annotations
operator|.
name|TestLogging
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
operator|.
name|matchAllQuery
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertHitCount
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertNoFailures
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|RecoveryWhileUnderLoadTests
specifier|public
class|class
name|RecoveryWhileUnderLoadTests
extends|extends
name|AbstractSharedClusterTest
block|{
DECL|field|logger
specifier|private
specifier|final
name|ESLogger
name|logger
init|=
name|Loggers
operator|.
name|getLogger
argument_list|(
name|RecoveryWhileUnderLoadTests
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Test
annotation|@
name|TestLogging
argument_list|(
literal|"action.search.type:TRACE,action.admin.indices.refresh:TRACE"
argument_list|)
annotation|@
name|Slow
DECL|method|recoverWhileUnderLoadAllocateBackupsTest
specifier|public
name|void
name|recoverWhileUnderLoadAllocateBackupsTest
parameter_list|()
throws|throws
name|Exception
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"--> creating test index ..."
argument_list|)
expr_stmt|;
name|prepareCreate
argument_list|(
literal|"test"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|AtomicLong
name|idGenerator
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
specifier|final
name|AtomicLong
name|indexCounter
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
specifier|final
name|AtomicBoolean
name|stop
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|Thread
index|[]
name|writers
init|=
operator|new
name|Thread
index|[
literal|5
index|]
decl_stmt|;
specifier|final
name|CountDownLatch
name|stopLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
name|writers
operator|.
name|length
argument_list|)
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> starting {} indexing threads"
argument_list|,
name|writers
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|writers
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|indexerId
init|=
name|i
decl_stmt|;
specifier|final
name|Client
name|client
init|=
name|client
argument_list|()
decl_stmt|;
name|writers
index|[
name|i
index|]
operator|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"**** starting indexing thread {}"
argument_list|,
name|indexerId
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|stop
operator|.
name|get
argument_list|()
condition|)
block|{
name|long
name|id
init|=
name|idGenerator
operator|.
name|incrementAndGet
argument_list|()
decl_stmt|;
if|if
condition|(
name|id
operator|%
literal|1000
operator|==
literal|0
condition|)
block|{
name|client
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareFlush
argument_list|()
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
block|}
name|client
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|id
argument_list|)
argument_list|)
operator|.
name|setSource
argument_list|(
name|MapBuilder
operator|.
expr|<
name|String
argument_list|,
name|Object
operator|>
name|newMapBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"test"
argument_list|,
literal|"value"
operator|+
name|id
argument_list|)
operator|.
name|map
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|indexCounter
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
name|logger
operator|.
name|info
argument_list|(
literal|"**** done indexing thread {}"
argument_list|,
name|indexerId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"**** failed indexing thread {}"
argument_list|,
name|e
argument_list|,
name|indexerId
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|stopLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
expr_stmt|;
name|writers
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
name|logger
operator|.
name|info
argument_list|(
literal|"--> waiting for 2000 docs to be indexed ..."
argument_list|)
expr_stmt|;
name|waitForDocs
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> 2000 docs indexed"
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> flushing the index ...."
argument_list|)
expr_stmt|;
comment|// now flush, just to make sure we have some data in the index, not just translog
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareFlush
argument_list|()
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> waiting for 4000 docs to be indexed ..."
argument_list|)
expr_stmt|;
name|waitForDocs
argument_list|(
literal|4000
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> 4000 docs indexed"
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> allow 2 nodes for index [test] ..."
argument_list|)
expr_stmt|;
comment|// now start another node, while we index
name|allowNodes
argument_list|(
literal|"test"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> waiting for GREEN health status ..."
argument_list|)
expr_stmt|;
comment|// make sure the cluster state is green, and all has been recovered
name|assertThat
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareHealth
argument_list|()
operator|.
name|setWaitForEvents
argument_list|(
name|Priority
operator|.
name|LANGUID
argument_list|)
operator|.
name|setTimeout
argument_list|(
literal|"1m"
argument_list|)
operator|.
name|setWaitForGreenStatus
argument_list|()
operator|.
name|setWaitForNodes
argument_list|(
literal|">=2"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
operator|.
name|isTimedOut
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> waiting for 10000 docs to be indexed ..."
argument_list|)
expr_stmt|;
name|waitForDocs
argument_list|(
literal|15000
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> 10000 docs indexed"
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> marking and waiting for indexing threads to stop ..."
argument_list|)
expr_stmt|;
name|stop
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|stopLatch
operator|.
name|await
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> indexing threads stopped"
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> refreshing the index"
argument_list|)
expr_stmt|;
name|refreshAndAssert
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> verifying indexed content"
argument_list|)
expr_stmt|;
name|iterateAssertCount
argument_list|(
literal|5
argument_list|,
name|indexCounter
operator|.
name|get
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Slow
DECL|method|recoverWhileUnderLoadAllocateBackupsRelocatePrimariesTest
specifier|public
name|void
name|recoverWhileUnderLoadAllocateBackupsRelocatePrimariesTest
parameter_list|()
throws|throws
name|Exception
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"--> creating test index ..."
argument_list|)
expr_stmt|;
name|prepareCreate
argument_list|(
literal|"test"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|AtomicLong
name|idGenerator
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
specifier|final
name|AtomicLong
name|indexCounter
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
specifier|final
name|AtomicBoolean
name|stop
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|Thread
index|[]
name|writers
init|=
operator|new
name|Thread
index|[
literal|5
index|]
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> starting {} indexing threads"
argument_list|,
name|writers
operator|.
name|length
argument_list|)
expr_stmt|;
specifier|final
name|CountDownLatch
name|stopLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
name|writers
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|writers
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|indexerId
init|=
name|i
decl_stmt|;
specifier|final
name|Client
name|client
init|=
name|client
argument_list|()
decl_stmt|;
name|writers
index|[
name|i
index|]
operator|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"**** starting indexing thread {}"
argument_list|,
name|indexerId
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|stop
operator|.
name|get
argument_list|()
condition|)
block|{
name|long
name|id
init|=
name|idGenerator
operator|.
name|incrementAndGet
argument_list|()
decl_stmt|;
name|client
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|id
argument_list|)
argument_list|)
operator|.
name|setSource
argument_list|(
name|MapBuilder
operator|.
expr|<
name|String
argument_list|,
name|Object
operator|>
name|newMapBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"test"
argument_list|,
literal|"value"
operator|+
name|id
argument_list|)
operator|.
name|map
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|indexCounter
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
name|logger
operator|.
name|info
argument_list|(
literal|"**** done indexing thread {}"
argument_list|,
name|indexerId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"**** failed indexing thread {}"
argument_list|,
name|e
argument_list|,
name|indexerId
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|stopLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
expr_stmt|;
name|writers
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
name|logger
operator|.
name|info
argument_list|(
literal|"--> waiting for 2000 docs to be indexed ..."
argument_list|)
expr_stmt|;
name|waitForDocs
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> 2000 docs indexed"
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> flushing the index ...."
argument_list|)
expr_stmt|;
comment|// now flush, just to make sure we have some data in the index, not just translog
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareFlush
argument_list|()
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> waiting for 4000 docs to be indexed ..."
argument_list|)
expr_stmt|;
name|waitForDocs
argument_list|(
literal|4000
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> 4000 docs indexed"
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> allow 4 nodes for index [test] ..."
argument_list|)
expr_stmt|;
name|allowNodes
argument_list|(
literal|"test"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> waiting for GREEN health status ..."
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareHealth
argument_list|()
operator|.
name|setWaitForEvents
argument_list|(
name|Priority
operator|.
name|LANGUID
argument_list|)
operator|.
name|setTimeout
argument_list|(
literal|"1m"
argument_list|)
operator|.
name|setWaitForGreenStatus
argument_list|()
operator|.
name|setWaitForNodes
argument_list|(
literal|">=4"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
operator|.
name|isTimedOut
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> waiting for 15000 docs to be indexed ..."
argument_list|)
expr_stmt|;
name|waitForDocs
argument_list|(
literal|15000
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> 15000 docs indexed"
argument_list|)
expr_stmt|;
name|stop
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|stopLatch
operator|.
name|await
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> marking and waiting for indexing threads to stop ..."
argument_list|)
expr_stmt|;
name|stop
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|stopLatch
operator|.
name|await
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> indexing threads stopped"
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> refreshing the index"
argument_list|)
expr_stmt|;
name|refreshAndAssert
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> verifying indexed content"
argument_list|)
expr_stmt|;
name|iterateAssertCount
argument_list|(
literal|5
argument_list|,
name|indexCounter
operator|.
name|get
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Slow
DECL|method|recoverWhileUnderLoadWithNodeShutdown
specifier|public
name|void
name|recoverWhileUnderLoadWithNodeShutdown
parameter_list|()
throws|throws
name|Exception
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"--> creating test index ..."
argument_list|)
expr_stmt|;
name|prepareCreate
argument_list|(
literal|"test"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
specifier|final
name|AtomicLong
name|idGenerator
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
specifier|final
name|AtomicLong
name|indexCounter
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
specifier|final
name|AtomicBoolean
name|stop
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|Thread
index|[]
name|writers
init|=
operator|new
name|Thread
index|[
literal|5
index|]
decl_stmt|;
specifier|final
name|CountDownLatch
name|stopLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
name|writers
operator|.
name|length
argument_list|)
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> starting {} indexing threads"
argument_list|,
name|writers
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|writers
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|indexerId
init|=
name|i
decl_stmt|;
specifier|final
name|Client
name|client
init|=
name|client
argument_list|()
decl_stmt|;
name|writers
index|[
name|i
index|]
operator|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"**** starting indexing thread {}"
argument_list|,
name|indexerId
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|stop
operator|.
name|get
argument_list|()
condition|)
block|{
name|long
name|id
init|=
name|idGenerator
operator|.
name|incrementAndGet
argument_list|()
decl_stmt|;
name|client
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|id
argument_list|)
argument_list|)
operator|.
name|setSource
argument_list|(
name|MapBuilder
operator|.
expr|<
name|String
argument_list|,
name|Object
operator|>
name|newMapBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"test"
argument_list|,
literal|"value"
operator|+
name|id
argument_list|)
operator|.
name|map
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|indexCounter
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
name|logger
operator|.
name|info
argument_list|(
literal|"**** done indexing thread {}"
argument_list|,
name|indexerId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"**** failed indexing thread {}"
argument_list|,
name|e
argument_list|,
name|indexerId
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|stopLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
expr_stmt|;
name|writers
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
name|logger
operator|.
name|info
argument_list|(
literal|"--> waiting for 2000 docs to be indexed ..."
argument_list|)
expr_stmt|;
name|waitForDocs
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> 2000 docs indexed"
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> flushing the index ...."
argument_list|)
expr_stmt|;
comment|// now flush, just to make sure we have some data in the index, not just translog
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareFlush
argument_list|()
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> waiting for 4000 docs to be indexed ..."
argument_list|)
expr_stmt|;
name|waitForDocs
argument_list|(
literal|4000
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> 4000 docs indexed"
argument_list|)
expr_stmt|;
comment|// now start more nodes, while we index
name|logger
operator|.
name|info
argument_list|(
literal|"--> allow 4 nodes for index [test] ..."
argument_list|)
expr_stmt|;
name|allowNodes
argument_list|(
literal|"test"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> waiting for GREEN health status ..."
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareHealth
argument_list|()
operator|.
name|setWaitForEvents
argument_list|(
name|Priority
operator|.
name|LANGUID
argument_list|)
operator|.
name|setTimeout
argument_list|(
literal|"1m"
argument_list|)
operator|.
name|setWaitForGreenStatus
argument_list|()
operator|.
name|setWaitForNodes
argument_list|(
literal|">=4"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
operator|.
name|isTimedOut
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> waiting for 10000 docs to be indexed ..."
argument_list|)
expr_stmt|;
name|waitForDocs
argument_list|(
literal|15000
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> 10000 docs indexed"
argument_list|)
expr_stmt|;
comment|// now, shutdown nodes
name|logger
operator|.
name|info
argument_list|(
literal|"--> allow 3 nodes for index [test] ..."
argument_list|)
expr_stmt|;
name|allowNodes
argument_list|(
literal|"test"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> waiting for GREEN health status ..."
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareHealth
argument_list|()
operator|.
name|setWaitForEvents
argument_list|(
name|Priority
operator|.
name|LANGUID
argument_list|)
operator|.
name|setTimeout
argument_list|(
literal|"1m"
argument_list|)
operator|.
name|setWaitForGreenStatus
argument_list|()
operator|.
name|setWaitForNodes
argument_list|(
literal|">=3"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
operator|.
name|isTimedOut
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> allow 2 nodes for index [test] ..."
argument_list|)
expr_stmt|;
name|allowNodes
argument_list|(
literal|"test"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> waiting for GREEN health status ..."
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareHealth
argument_list|()
operator|.
name|setWaitForEvents
argument_list|(
name|Priority
operator|.
name|LANGUID
argument_list|)
operator|.
name|setTimeout
argument_list|(
literal|"1m"
argument_list|)
operator|.
name|setWaitForGreenStatus
argument_list|()
operator|.
name|setWaitForNodes
argument_list|(
literal|">=2"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
operator|.
name|isTimedOut
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> allow 1 nodes for index [test] ..."
argument_list|)
expr_stmt|;
name|allowNodes
argument_list|(
literal|"test"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> waiting for YELLOW health status ..."
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareHealth
argument_list|()
operator|.
name|setWaitForEvents
argument_list|(
name|Priority
operator|.
name|LANGUID
argument_list|)
operator|.
name|setTimeout
argument_list|(
literal|"1m"
argument_list|)
operator|.
name|setWaitForYellowStatus
argument_list|()
operator|.
name|setWaitForNodes
argument_list|(
literal|">=1"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
operator|.
name|isTimedOut
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> marking and waiting for indexing threads to stop ..."
argument_list|)
expr_stmt|;
name|stop
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|stopLatch
operator|.
name|await
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> indexing threads stopped"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareHealth
argument_list|()
operator|.
name|setWaitForEvents
argument_list|(
name|Priority
operator|.
name|LANGUID
argument_list|)
operator|.
name|setTimeout
argument_list|(
literal|"1m"
argument_list|)
operator|.
name|setWaitForYellowStatus
argument_list|()
operator|.
name|setWaitForNodes
argument_list|(
literal|">=1"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
operator|.
name|isTimedOut
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> refreshing the index"
argument_list|)
expr_stmt|;
name|refreshAndAssert
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> verifying indexed content"
argument_list|)
expr_stmt|;
name|iterateAssertCount
argument_list|(
literal|5
argument_list|,
name|indexCounter
operator|.
name|get
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
DECL|method|iterateAssertCount
specifier|private
name|void
name|iterateAssertCount
parameter_list|(
specifier|final
name|int
name|numberOfShards
parameter_list|,
specifier|final
name|long
name|numberOfDocs
parameter_list|,
name|int
name|iterations
parameter_list|)
throws|throws
name|Exception
block|{
name|SearchResponse
index|[]
name|iterationResults
init|=
operator|new
name|SearchResponse
index|[
name|iterations
index|]
decl_stmt|;
name|boolean
name|error
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iterations
condition|;
name|i
operator|++
control|)
block|{
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setSearchType
argument_list|(
name|SearchType
operator|.
name|COUNT
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|logSearchResponse
argument_list|(
name|numberOfShards
argument_list|,
name|numberOfDocs
argument_list|,
name|i
argument_list|,
name|searchResponse
argument_list|)
expr_stmt|;
name|iterationResults
index|[
name|i
index|]
operator|=
name|searchResponse
expr_stmt|;
if|if
condition|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|totalHits
argument_list|()
operator|!=
name|numberOfDocs
condition|)
block|{
name|error
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|error
condition|)
block|{
comment|//Printing out shards and their doc count
name|IndicesStatsResponse
name|indicesStatsResponse
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareStats
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
for|for
control|(
name|ShardStats
name|shardStats
range|:
name|indicesStatsResponse
operator|.
name|getShards
argument_list|()
control|)
block|{
name|DocsStats
name|docsStats
init|=
name|shardStats
operator|.
name|getStats
argument_list|()
operator|.
name|docs
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Shard [{}] - count {}, primary {}"
argument_list|,
name|shardStats
operator|.
name|getShardId
argument_list|()
argument_list|,
name|docsStats
operator|.
name|getCount
argument_list|()
argument_list|,
name|shardStats
operator|.
name|getShardRouting
argument_list|()
operator|.
name|primary
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//if there was an error we try to wait and see if at some point it'll get fixed
comment|//otherwise it means we are losing documents
name|logger
operator|.
name|info
argument_list|(
literal|"--> trying to wait"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|awaitBusy
argument_list|(
operator|new
name|Predicate
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setSearchType
argument_list|(
name|SearchType
operator|.
name|COUNT
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
return|return
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|totalHits
argument_list|()
operator|==
name|numberOfDocs
return|;
block|}
block|}
argument_list|,
literal|30
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//lets now make the test fail if it was supposed to fail
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iterations
condition|;
name|i
operator|++
control|)
block|{
name|assertHitCount
argument_list|(
name|iterationResults
index|[
name|i
index|]
argument_list|,
name|numberOfDocs
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|logSearchResponse
specifier|private
name|void
name|logSearchResponse
parameter_list|(
name|int
name|numberOfShards
parameter_list|,
name|long
name|numberOfDocs
parameter_list|,
name|int
name|iteration
parameter_list|,
name|SearchResponse
name|searchResponse
parameter_list|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"iteration [{}] - successful shards: {} (expected {})"
argument_list|,
name|iteration
argument_list|,
name|searchResponse
operator|.
name|getSuccessfulShards
argument_list|()
argument_list|,
name|numberOfShards
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"iteration [{}] - failed shards: {} (expected 0)"
argument_list|,
name|iteration
argument_list|,
name|searchResponse
operator|.
name|getFailedShards
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|searchResponse
operator|.
name|getShardFailures
argument_list|()
operator|!=
literal|null
operator|&&
name|searchResponse
operator|.
name|getShardFailures
argument_list|()
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"iteration [{}] - shard failures: {}"
argument_list|,
name|iteration
argument_list|,
name|Arrays
operator|.
name|toString
argument_list|(
name|searchResponse
operator|.
name|getShardFailures
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|logger
operator|.
name|info
argument_list|(
literal|"iteration [{}] - returned documents: {} (expected {})"
argument_list|,
name|iteration
argument_list|,
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|totalHits
argument_list|()
argument_list|,
name|numberOfDocs
argument_list|)
expr_stmt|;
block|}
DECL|method|refreshAndAssert
specifier|private
name|void
name|refreshAndAssert
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|assertThat
argument_list|(
name|awaitBusy
argument_list|(
operator|new
name|Predicate
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|apply
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
try|try
block|{
name|RefreshResponse
name|actionGet
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareRefresh
argument_list|()
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertNoFailures
argument_list|(
name|actionGet
argument_list|)
expr_stmt|;
return|return
name|actionGet
operator|.
name|getTotalShards
argument_list|()
operator|==
name|actionGet
operator|.
name|getSuccessfulShards
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|,
literal|5
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|waitForDocs
specifier|private
name|void
name|waitForDocs
parameter_list|(
specifier|final
name|long
name|numDocs
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|assertThat
argument_list|(
name|awaitBusy
argument_list|(
operator|new
name|Predicate
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|apply
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|client
argument_list|()
operator|.
name|prepareCount
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
operator|.
name|getCount
argument_list|()
operator|>
name|numDocs
return|;
block|}
block|}
argument_list|,
literal|5
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// not really relevant here we just have to wait some time
block|}
block|}
end_class

end_unit

