begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations.reducers.moving.avg
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|reducers
operator|.
name|moving
operator|.
name|avg
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|EvictingQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
operator|.
name|AwaitsFix
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|index
operator|.
name|IndexRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchPhaseExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|RangeFilterBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|filter
operator|.
name|InternalFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|histogram
operator|.
name|Histogram
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|histogram
operator|.
name|InternalHistogram
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|histogram
operator|.
name|InternalHistogram
operator|.
name|Bucket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|metrics
operator|.
name|ValuesSourceMetricsAggregationBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|reducers
operator|.
name|BucketHelpers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|reducers
operator|.
name|SimpleValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|reducers
operator|.
name|movavg
operator|.
name|models
operator|.
name|DoubleExpModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|reducers
operator|.
name|movavg
operator|.
name|models
operator|.
name|LinearModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|reducers
operator|.
name|movavg
operator|.
name|models
operator|.
name|MovAvgModelBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|reducers
operator|.
name|movavg
operator|.
name|models
operator|.
name|SimpleModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|reducers
operator|.
name|movavg
operator|.
name|models
operator|.
name|SingleExpModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchIntegrationTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
operator|.
name|jsonBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregationBuilders
operator|.
name|avg
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregationBuilders
operator|.
name|filter
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregationBuilders
operator|.
name|histogram
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregationBuilders
operator|.
name|max
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregationBuilders
operator|.
name|min
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregationBuilders
operator|.
name|range
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|reducers
operator|.
name|ReducerBuilders
operator|.
name|movingAvg
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertSearchResponse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|greaterThanOrEqualTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|lessThanOrEqualTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|nullValue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|core
operator|.
name|IsNull
operator|.
name|notNullValue
import|;
end_import

begin_class
annotation|@
name|ElasticsearchIntegrationTest
operator|.
name|SuiteScopeTest
annotation|@
name|AwaitsFix
argument_list|(
name|bugUrl
operator|=
literal|"Gap test logic seems to fail a lot of the time on CI build"
argument_list|)
DECL|class|MovAvgTests
specifier|public
class|class
name|MovAvgTests
extends|extends
name|ElasticsearchIntegrationTest
block|{
DECL|field|SINGLE_VALUED_FIELD_NAME
specifier|private
specifier|static
specifier|final
name|String
name|SINGLE_VALUED_FIELD_NAME
init|=
literal|"l_value"
decl_stmt|;
DECL|field|SINGLE_VALUED_VALUE_FIELD_NAME
specifier|private
specifier|static
specifier|final
name|String
name|SINGLE_VALUED_VALUE_FIELD_NAME
init|=
literal|"v_value"
decl_stmt|;
DECL|field|GAP_FIELD
specifier|private
specifier|static
specifier|final
name|String
name|GAP_FIELD
init|=
literal|"g_value"
decl_stmt|;
DECL|field|interval
specifier|static
name|int
name|interval
decl_stmt|;
DECL|field|numValueBuckets
specifier|static
name|int
name|numValueBuckets
decl_stmt|;
DECL|field|numFilledValueBuckets
specifier|static
name|int
name|numFilledValueBuckets
decl_stmt|;
DECL|field|windowSize
specifier|static
name|int
name|windowSize
decl_stmt|;
DECL|field|gapPolicy
specifier|static
name|BucketHelpers
operator|.
name|GapPolicy
name|gapPolicy
decl_stmt|;
DECL|field|docCounts
specifier|static
name|long
index|[]
name|docCounts
decl_stmt|;
DECL|field|docValues
specifier|static
name|long
index|[]
name|docValues
decl_stmt|;
DECL|field|simpleDocCounts
specifier|static
name|Double
index|[]
name|simpleDocCounts
decl_stmt|;
DECL|field|linearDocCounts
specifier|static
name|Double
index|[]
name|linearDocCounts
decl_stmt|;
DECL|field|singleDocCounts
specifier|static
name|Double
index|[]
name|singleDocCounts
decl_stmt|;
DECL|field|doubleDocCounts
specifier|static
name|Double
index|[]
name|doubleDocCounts
decl_stmt|;
DECL|field|simpleDocValues
specifier|static
name|Double
index|[]
name|simpleDocValues
decl_stmt|;
DECL|field|linearDocValues
specifier|static
name|Double
index|[]
name|linearDocValues
decl_stmt|;
DECL|field|singleDocValues
specifier|static
name|Double
index|[]
name|singleDocValues
decl_stmt|;
DECL|field|doubleDocValues
specifier|static
name|Double
index|[]
name|doubleDocValues
decl_stmt|;
annotation|@
name|Override
DECL|method|setupSuiteScopeCluster
specifier|public
name|void
name|setupSuiteScopeCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|createIndex
argument_list|(
literal|"idx"
argument_list|)
expr_stmt|;
name|createIndex
argument_list|(
literal|"idx_unmapped"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|IndexRequestBuilder
argument_list|>
name|builders
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|interval
operator|=
literal|5
expr_stmt|;
name|numValueBuckets
operator|=
name|randomIntBetween
argument_list|(
literal|6
argument_list|,
literal|80
argument_list|)
expr_stmt|;
name|numFilledValueBuckets
operator|=
name|numValueBuckets
expr_stmt|;
name|windowSize
operator|=
name|randomIntBetween
argument_list|(
literal|3
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|gapPolicy
operator|=
name|randomBoolean
argument_list|()
condition|?
name|BucketHelpers
operator|.
name|GapPolicy
operator|.
name|IGNORE
else|:
name|BucketHelpers
operator|.
name|GapPolicy
operator|.
name|INSERT_ZEROS
expr_stmt|;
name|docCounts
operator|=
operator|new
name|long
index|[
name|numValueBuckets
index|]
expr_stmt|;
name|docValues
operator|=
operator|new
name|long
index|[
name|numValueBuckets
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numValueBuckets
condition|;
name|i
operator|++
control|)
block|{
name|docCounts
index|[
name|i
index|]
operator|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|docValues
index|[
name|i
index|]
operator|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|20
argument_list|)
expr_stmt|;
comment|//this will be used as a constant for all values within a bucket
block|}
comment|// Used for the gap tests
name|builders
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"idx"
argument_list|,
literal|"type"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"gap_test"
argument_list|,
literal|0
argument_list|)
operator|.
name|field
argument_list|(
name|GAP_FIELD
argument_list|,
literal|1
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|builders
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"idx"
argument_list|,
literal|"type"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"gap_test"
argument_list|,
operator|(
name|numValueBuckets
operator|-
literal|1
operator|)
operator|*
name|interval
argument_list|)
operator|.
name|field
argument_list|(
name|GAP_FIELD
argument_list|,
literal|1
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|setupSimple
argument_list|()
expr_stmt|;
name|this
operator|.
name|setupLinear
argument_list|()
expr_stmt|;
name|this
operator|.
name|setupSingle
argument_list|()
expr_stmt|;
name|this
operator|.
name|setupDouble
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numValueBuckets
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|docs
init|=
literal|0
init|;
name|docs
operator|<
name|docCounts
index|[
name|i
index|]
condition|;
name|docs
operator|++
control|)
block|{
name|builders
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"idx"
argument_list|,
literal|"type"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
name|SINGLE_VALUED_FIELD_NAME
argument_list|,
name|i
operator|*
name|interval
argument_list|)
operator|.
name|field
argument_list|(
name|SINGLE_VALUED_VALUE_FIELD_NAME
argument_list|,
name|docValues
index|[
name|i
index|]
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|builders
argument_list|)
expr_stmt|;
name|ensureSearchable
argument_list|()
expr_stmt|;
block|}
DECL|method|setupSimple
specifier|private
name|void
name|setupSimple
parameter_list|()
block|{
name|simpleDocCounts
operator|=
operator|new
name|Double
index|[
name|numValueBuckets
index|]
expr_stmt|;
name|EvictingQueue
argument_list|<
name|Double
argument_list|>
name|window
init|=
name|EvictingQueue
operator|.
name|create
argument_list|(
name|windowSize
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numValueBuckets
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|docCounts
index|[
name|i
index|]
operator|==
literal|0
operator|&&
name|gapPolicy
operator|.
name|equals
argument_list|(
name|BucketHelpers
operator|.
name|GapPolicy
operator|.
name|IGNORE
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|window
operator|.
name|offer
argument_list|(
operator|(
name|double
operator|)
name|docCounts
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|double
name|movAvg
init|=
literal|0
decl_stmt|;
for|for
control|(
name|double
name|value
range|:
name|window
control|)
block|{
name|movAvg
operator|+=
name|value
expr_stmt|;
block|}
name|movAvg
operator|/=
name|window
operator|.
name|size
argument_list|()
expr_stmt|;
name|simpleDocCounts
index|[
name|i
index|]
operator|=
name|movAvg
expr_stmt|;
block|}
name|window
operator|.
name|clear
argument_list|()
expr_stmt|;
name|simpleDocValues
operator|=
operator|new
name|Double
index|[
name|numValueBuckets
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numValueBuckets
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|docCounts
index|[
name|i
index|]
operator|==
literal|0
condition|)
block|{
comment|// If there was a gap in doc counts and we are ignoring, just skip this bucket
if|if
condition|(
name|gapPolicy
operator|.
name|equals
argument_list|(
name|BucketHelpers
operator|.
name|GapPolicy
operator|.
name|IGNORE
argument_list|)
condition|)
block|{
continue|continue;
block|}
elseif|else
if|if
condition|(
name|gapPolicy
operator|.
name|equals
argument_list|(
name|BucketHelpers
operator|.
name|GapPolicy
operator|.
name|INSERT_ZEROS
argument_list|)
condition|)
block|{
comment|// otherwise insert a zero instead of the true value
name|window
operator|.
name|offer
argument_list|(
literal|0.0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|window
operator|.
name|offer
argument_list|(
operator|(
name|double
operator|)
name|docValues
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|//if there are docs in this bucket, insert the regular value
name|window
operator|.
name|offer
argument_list|(
operator|(
name|double
operator|)
name|docValues
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|double
name|movAvg
init|=
literal|0
decl_stmt|;
for|for
control|(
name|double
name|value
range|:
name|window
control|)
block|{
name|movAvg
operator|+=
name|value
expr_stmt|;
block|}
name|movAvg
operator|/=
name|window
operator|.
name|size
argument_list|()
expr_stmt|;
name|simpleDocValues
index|[
name|i
index|]
operator|=
name|movAvg
expr_stmt|;
block|}
block|}
DECL|method|setupLinear
specifier|private
name|void
name|setupLinear
parameter_list|()
block|{
name|EvictingQueue
argument_list|<
name|Double
argument_list|>
name|window
init|=
name|EvictingQueue
operator|.
name|create
argument_list|(
name|windowSize
argument_list|)
decl_stmt|;
name|linearDocCounts
operator|=
operator|new
name|Double
index|[
name|numValueBuckets
index|]
expr_stmt|;
name|window
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numValueBuckets
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|docCounts
index|[
name|i
index|]
operator|==
literal|0
operator|&&
name|gapPolicy
operator|.
name|equals
argument_list|(
name|BucketHelpers
operator|.
name|GapPolicy
operator|.
name|IGNORE
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|window
operator|.
name|offer
argument_list|(
operator|(
name|double
operator|)
name|docCounts
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|double
name|avg
init|=
literal|0
decl_stmt|;
name|long
name|totalWeight
init|=
literal|1
decl_stmt|;
name|long
name|current
init|=
literal|1
decl_stmt|;
for|for
control|(
name|double
name|value
range|:
name|window
control|)
block|{
name|avg
operator|+=
name|value
operator|*
name|current
expr_stmt|;
name|totalWeight
operator|+=
name|current
expr_stmt|;
name|current
operator|+=
literal|1
expr_stmt|;
block|}
name|linearDocCounts
index|[
name|i
index|]
operator|=
name|avg
operator|/
name|totalWeight
expr_stmt|;
block|}
name|window
operator|.
name|clear
argument_list|()
expr_stmt|;
name|linearDocValues
operator|=
operator|new
name|Double
index|[
name|numValueBuckets
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numValueBuckets
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|docCounts
index|[
name|i
index|]
operator|==
literal|0
condition|)
block|{
comment|// If there was a gap in doc counts and we are ignoring, just skip this bucket
if|if
condition|(
name|gapPolicy
operator|.
name|equals
argument_list|(
name|BucketHelpers
operator|.
name|GapPolicy
operator|.
name|IGNORE
argument_list|)
condition|)
block|{
continue|continue;
block|}
elseif|else
if|if
condition|(
name|gapPolicy
operator|.
name|equals
argument_list|(
name|BucketHelpers
operator|.
name|GapPolicy
operator|.
name|INSERT_ZEROS
argument_list|)
condition|)
block|{
comment|// otherwise insert a zero instead of the true value
name|window
operator|.
name|offer
argument_list|(
literal|0.0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|window
operator|.
name|offer
argument_list|(
operator|(
name|double
operator|)
name|docValues
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|//if there are docs in this bucket, insert the regular value
name|window
operator|.
name|offer
argument_list|(
operator|(
name|double
operator|)
name|docValues
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|double
name|avg
init|=
literal|0
decl_stmt|;
name|long
name|totalWeight
init|=
literal|1
decl_stmt|;
name|long
name|current
init|=
literal|1
decl_stmt|;
for|for
control|(
name|double
name|value
range|:
name|window
control|)
block|{
name|avg
operator|+=
name|value
operator|*
name|current
expr_stmt|;
name|totalWeight
operator|+=
name|current
expr_stmt|;
name|current
operator|+=
literal|1
expr_stmt|;
block|}
name|linearDocValues
index|[
name|i
index|]
operator|=
name|avg
operator|/
name|totalWeight
expr_stmt|;
block|}
block|}
DECL|method|setupSingle
specifier|private
name|void
name|setupSingle
parameter_list|()
block|{
name|EvictingQueue
argument_list|<
name|Double
argument_list|>
name|window
init|=
name|EvictingQueue
operator|.
name|create
argument_list|(
name|windowSize
argument_list|)
decl_stmt|;
name|singleDocCounts
operator|=
operator|new
name|Double
index|[
name|numValueBuckets
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numValueBuckets
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|docCounts
index|[
name|i
index|]
operator|==
literal|0
operator|&&
name|gapPolicy
operator|.
name|equals
argument_list|(
name|BucketHelpers
operator|.
name|GapPolicy
operator|.
name|IGNORE
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|window
operator|.
name|offer
argument_list|(
operator|(
name|double
operator|)
name|docCounts
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|double
name|avg
init|=
literal|0
decl_stmt|;
name|double
name|alpha
init|=
literal|0.5
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|double
name|value
range|:
name|window
control|)
block|{
if|if
condition|(
name|first
condition|)
block|{
name|avg
operator|=
name|value
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|avg
operator|=
operator|(
name|value
operator|*
name|alpha
operator|)
operator|+
operator|(
name|avg
operator|*
operator|(
literal|1
operator|-
name|alpha
operator|)
operator|)
expr_stmt|;
block|}
block|}
name|singleDocCounts
index|[
name|i
index|]
operator|=
name|avg
expr_stmt|;
block|}
name|singleDocValues
operator|=
operator|new
name|Double
index|[
name|numValueBuckets
index|]
expr_stmt|;
name|window
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numValueBuckets
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|docCounts
index|[
name|i
index|]
operator|==
literal|0
condition|)
block|{
comment|// If there was a gap in doc counts and we are ignoring, just skip this bucket
if|if
condition|(
name|gapPolicy
operator|.
name|equals
argument_list|(
name|BucketHelpers
operator|.
name|GapPolicy
operator|.
name|IGNORE
argument_list|)
condition|)
block|{
continue|continue;
block|}
elseif|else
if|if
condition|(
name|gapPolicy
operator|.
name|equals
argument_list|(
name|BucketHelpers
operator|.
name|GapPolicy
operator|.
name|INSERT_ZEROS
argument_list|)
condition|)
block|{
comment|// otherwise insert a zero instead of the true value
name|window
operator|.
name|offer
argument_list|(
literal|0.0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|window
operator|.
name|offer
argument_list|(
operator|(
name|double
operator|)
name|docValues
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|//if there are docs in this bucket, insert the regular value
name|window
operator|.
name|offer
argument_list|(
operator|(
name|double
operator|)
name|docValues
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|double
name|avg
init|=
literal|0
decl_stmt|;
name|double
name|alpha
init|=
literal|0.5
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|double
name|value
range|:
name|window
control|)
block|{
if|if
condition|(
name|first
condition|)
block|{
name|avg
operator|=
name|value
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|avg
operator|=
operator|(
name|value
operator|*
name|alpha
operator|)
operator|+
operator|(
name|avg
operator|*
operator|(
literal|1
operator|-
name|alpha
operator|)
operator|)
expr_stmt|;
block|}
block|}
name|singleDocValues
index|[
name|i
index|]
operator|=
name|avg
expr_stmt|;
block|}
block|}
DECL|method|setupDouble
specifier|private
name|void
name|setupDouble
parameter_list|()
block|{
name|EvictingQueue
argument_list|<
name|Double
argument_list|>
name|window
init|=
name|EvictingQueue
operator|.
name|create
argument_list|(
name|windowSize
argument_list|)
decl_stmt|;
name|doubleDocCounts
operator|=
operator|new
name|Double
index|[
name|numValueBuckets
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numValueBuckets
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|docCounts
index|[
name|i
index|]
operator|==
literal|0
operator|&&
name|gapPolicy
operator|.
name|equals
argument_list|(
name|BucketHelpers
operator|.
name|GapPolicy
operator|.
name|IGNORE
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|window
operator|.
name|offer
argument_list|(
operator|(
name|double
operator|)
name|docCounts
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|double
name|s
init|=
literal|0
decl_stmt|;
name|double
name|last_s
init|=
literal|0
decl_stmt|;
comment|// Trend value
name|double
name|b
init|=
literal|0
decl_stmt|;
name|double
name|last_b
init|=
literal|0
decl_stmt|;
name|double
name|alpha
init|=
literal|0.5
decl_stmt|;
name|double
name|beta
init|=
literal|0.5
decl_stmt|;
name|int
name|counter
init|=
literal|0
decl_stmt|;
name|double
name|last
decl_stmt|;
for|for
control|(
name|double
name|value
range|:
name|window
control|)
block|{
name|last
operator|=
name|value
expr_stmt|;
if|if
condition|(
name|counter
operator|==
literal|1
condition|)
block|{
name|s
operator|=
name|value
expr_stmt|;
name|b
operator|=
name|value
operator|-
name|last
expr_stmt|;
block|}
else|else
block|{
name|s
operator|=
name|alpha
operator|*
name|value
operator|+
operator|(
literal|1.0d
operator|-
name|alpha
operator|)
operator|*
operator|(
name|last_s
operator|+
name|last_b
operator|)
expr_stmt|;
name|b
operator|=
name|beta
operator|*
operator|(
name|s
operator|-
name|last_s
operator|)
operator|+
operator|(
literal|1
operator|-
name|beta
operator|)
operator|*
name|last_b
expr_stmt|;
block|}
name|counter
operator|+=
literal|1
expr_stmt|;
name|last_s
operator|=
name|s
expr_stmt|;
name|last_b
operator|=
name|b
expr_stmt|;
block|}
name|doubleDocCounts
index|[
name|i
index|]
operator|=
name|s
operator|+
operator|(
literal|0
operator|*
name|b
operator|)
expr_stmt|;
block|}
name|doubleDocValues
operator|=
operator|new
name|Double
index|[
name|numValueBuckets
index|]
expr_stmt|;
name|window
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numValueBuckets
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|docCounts
index|[
name|i
index|]
operator|==
literal|0
condition|)
block|{
comment|// If there was a gap in doc counts and we are ignoring, just skip this bucket
if|if
condition|(
name|gapPolicy
operator|.
name|equals
argument_list|(
name|BucketHelpers
operator|.
name|GapPolicy
operator|.
name|IGNORE
argument_list|)
condition|)
block|{
continue|continue;
block|}
elseif|else
if|if
condition|(
name|gapPolicy
operator|.
name|equals
argument_list|(
name|BucketHelpers
operator|.
name|GapPolicy
operator|.
name|INSERT_ZEROS
argument_list|)
condition|)
block|{
comment|// otherwise insert a zero instead of the true value
name|window
operator|.
name|offer
argument_list|(
literal|0.0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|window
operator|.
name|offer
argument_list|(
operator|(
name|double
operator|)
name|docValues
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|//if there are docs in this bucket, insert the regular value
name|window
operator|.
name|offer
argument_list|(
operator|(
name|double
operator|)
name|docValues
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|double
name|s
init|=
literal|0
decl_stmt|;
name|double
name|last_s
init|=
literal|0
decl_stmt|;
comment|// Trend value
name|double
name|b
init|=
literal|0
decl_stmt|;
name|double
name|last_b
init|=
literal|0
decl_stmt|;
name|double
name|alpha
init|=
literal|0.5
decl_stmt|;
name|double
name|beta
init|=
literal|0.5
decl_stmt|;
name|int
name|counter
init|=
literal|0
decl_stmt|;
name|double
name|last
decl_stmt|;
for|for
control|(
name|double
name|value
range|:
name|window
control|)
block|{
name|last
operator|=
name|value
expr_stmt|;
if|if
condition|(
name|counter
operator|==
literal|1
condition|)
block|{
name|s
operator|=
name|value
expr_stmt|;
name|b
operator|=
name|value
operator|-
name|last
expr_stmt|;
block|}
else|else
block|{
name|s
operator|=
name|alpha
operator|*
name|value
operator|+
operator|(
literal|1.0d
operator|-
name|alpha
operator|)
operator|*
operator|(
name|last_s
operator|+
name|last_b
operator|)
expr_stmt|;
name|b
operator|=
name|beta
operator|*
operator|(
name|s
operator|-
name|last_s
operator|)
operator|+
operator|(
literal|1
operator|-
name|beta
operator|)
operator|*
name|last_b
expr_stmt|;
block|}
name|counter
operator|+=
literal|1
expr_stmt|;
name|last_s
operator|=
name|s
expr_stmt|;
name|last_b
operator|=
name|b
expr_stmt|;
block|}
name|doubleDocValues
index|[
name|i
index|]
operator|=
name|s
operator|+
operator|(
literal|0
operator|*
name|b
operator|)
expr_stmt|;
block|}
block|}
comment|/**      * test simple moving average on single value field      */
annotation|@
name|Test
DECL|method|simpleSingleValuedField
specifier|public
name|void
name|simpleSingleValuedField
parameter_list|()
block|{
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|histogram
argument_list|(
literal|"histo"
argument_list|)
operator|.
name|field
argument_list|(
name|SINGLE_VALUED_FIELD_NAME
argument_list|)
operator|.
name|interval
argument_list|(
name|interval
argument_list|)
operator|.
name|minDocCount
argument_list|(
literal|0
argument_list|)
operator|.
name|extendedBounds
argument_list|(
literal|0L
argument_list|,
call|(
name|long
call|)
argument_list|(
name|interval
operator|*
operator|(
name|numValueBuckets
operator|-
literal|1
operator|)
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|randomMetric
argument_list|(
literal|"the_metric"
argument_list|,
name|SINGLE_VALUED_VALUE_FIELD_NAME
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|movingAvg
argument_list|(
literal|"movavg_counts"
argument_list|)
operator|.
name|window
argument_list|(
name|windowSize
argument_list|)
operator|.
name|modelBuilder
argument_list|(
operator|new
name|SimpleModel
operator|.
name|SimpleModelBuilder
argument_list|()
argument_list|)
operator|.
name|gapPolicy
argument_list|(
name|gapPolicy
argument_list|)
operator|.
name|setBucketsPaths
argument_list|(
literal|"_count"
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|movingAvg
argument_list|(
literal|"movavg_values"
argument_list|)
operator|.
name|window
argument_list|(
name|windowSize
argument_list|)
operator|.
name|modelBuilder
argument_list|(
operator|new
name|SimpleModel
operator|.
name|SimpleModelBuilder
argument_list|()
argument_list|)
operator|.
name|gapPolicy
argument_list|(
name|gapPolicy
argument_list|)
operator|.
name|setBucketsPaths
argument_list|(
literal|"the_metric"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|InternalHistogram
argument_list|<
name|Bucket
argument_list|>
name|histo
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"histo"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|histo
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|histo
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"histo"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|Bucket
argument_list|>
name|buckets
init|=
name|histo
operator|.
name|getBuckets
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|buckets
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|numValueBuckets
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numValueBuckets
condition|;
operator|++
name|i
control|)
block|{
name|Histogram
operator|.
name|Bucket
name|bucket
init|=
name|buckets
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|checkBucketKeyAndDocCount
argument_list|(
literal|"Bucket "
operator|+
name|i
argument_list|,
name|bucket
argument_list|,
name|i
operator|*
name|interval
argument_list|,
name|docCounts
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|SimpleValue
name|docCountMovAvg
init|=
name|bucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"movavg_counts"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|docCountMovAvg
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|docCountMovAvg
operator|.
name|value
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|simpleDocCounts
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|SimpleValue
name|valuesMovAvg
init|=
name|bucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"movavg_values"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|valuesMovAvg
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|valuesMovAvg
operator|.
name|value
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|simpleDocValues
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * test linear moving average on single value field      */
annotation|@
name|Test
DECL|method|linearSingleValuedField
specifier|public
name|void
name|linearSingleValuedField
parameter_list|()
block|{
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|histogram
argument_list|(
literal|"histo"
argument_list|)
operator|.
name|field
argument_list|(
name|SINGLE_VALUED_FIELD_NAME
argument_list|)
operator|.
name|interval
argument_list|(
name|interval
argument_list|)
operator|.
name|minDocCount
argument_list|(
literal|0
argument_list|)
operator|.
name|extendedBounds
argument_list|(
literal|0L
argument_list|,
call|(
name|long
call|)
argument_list|(
name|interval
operator|*
operator|(
name|numValueBuckets
operator|-
literal|1
operator|)
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|randomMetric
argument_list|(
literal|"the_metric"
argument_list|,
name|SINGLE_VALUED_VALUE_FIELD_NAME
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|movingAvg
argument_list|(
literal|"movavg_counts"
argument_list|)
operator|.
name|window
argument_list|(
name|windowSize
argument_list|)
operator|.
name|modelBuilder
argument_list|(
operator|new
name|LinearModel
operator|.
name|LinearModelBuilder
argument_list|()
argument_list|)
operator|.
name|gapPolicy
argument_list|(
name|gapPolicy
argument_list|)
operator|.
name|setBucketsPaths
argument_list|(
literal|"_count"
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|movingAvg
argument_list|(
literal|"movavg_values"
argument_list|)
operator|.
name|window
argument_list|(
name|windowSize
argument_list|)
operator|.
name|modelBuilder
argument_list|(
operator|new
name|LinearModel
operator|.
name|LinearModelBuilder
argument_list|()
argument_list|)
operator|.
name|gapPolicy
argument_list|(
name|gapPolicy
argument_list|)
operator|.
name|setBucketsPaths
argument_list|(
literal|"the_metric"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|InternalHistogram
argument_list|<
name|Bucket
argument_list|>
name|histo
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"histo"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|histo
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|histo
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"histo"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|Bucket
argument_list|>
name|buckets
init|=
name|histo
operator|.
name|getBuckets
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|buckets
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|numValueBuckets
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numValueBuckets
condition|;
operator|++
name|i
control|)
block|{
name|Histogram
operator|.
name|Bucket
name|bucket
init|=
name|buckets
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|checkBucketKeyAndDocCount
argument_list|(
literal|"Bucket "
operator|+
name|i
argument_list|,
name|bucket
argument_list|,
name|i
operator|*
name|interval
argument_list|,
name|docCounts
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|SimpleValue
name|docCountMovAvg
init|=
name|bucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"movavg_counts"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|docCountMovAvg
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|docCountMovAvg
operator|.
name|value
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|linearDocCounts
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|SimpleValue
name|valuesMovAvg
init|=
name|bucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"movavg_values"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|valuesMovAvg
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|valuesMovAvg
operator|.
name|value
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|linearDocValues
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * test single exponential moving average on single value field      */
annotation|@
name|Test
DECL|method|singleExpSingleValuedField
specifier|public
name|void
name|singleExpSingleValuedField
parameter_list|()
block|{
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|histogram
argument_list|(
literal|"histo"
argument_list|)
operator|.
name|field
argument_list|(
name|SINGLE_VALUED_FIELD_NAME
argument_list|)
operator|.
name|interval
argument_list|(
name|interval
argument_list|)
operator|.
name|minDocCount
argument_list|(
literal|0
argument_list|)
operator|.
name|extendedBounds
argument_list|(
literal|0L
argument_list|,
call|(
name|long
call|)
argument_list|(
name|interval
operator|*
operator|(
name|numValueBuckets
operator|-
literal|1
operator|)
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|randomMetric
argument_list|(
literal|"the_metric"
argument_list|,
name|SINGLE_VALUED_VALUE_FIELD_NAME
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|movingAvg
argument_list|(
literal|"movavg_counts"
argument_list|)
operator|.
name|window
argument_list|(
name|windowSize
argument_list|)
operator|.
name|modelBuilder
argument_list|(
operator|new
name|SingleExpModel
operator|.
name|SingleExpModelBuilder
argument_list|()
operator|.
name|alpha
argument_list|(
literal|0.5
argument_list|)
argument_list|)
operator|.
name|gapPolicy
argument_list|(
name|gapPolicy
argument_list|)
operator|.
name|setBucketsPaths
argument_list|(
literal|"_count"
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|movingAvg
argument_list|(
literal|"movavg_values"
argument_list|)
operator|.
name|window
argument_list|(
name|windowSize
argument_list|)
operator|.
name|modelBuilder
argument_list|(
operator|new
name|SingleExpModel
operator|.
name|SingleExpModelBuilder
argument_list|()
operator|.
name|alpha
argument_list|(
literal|0.5
argument_list|)
argument_list|)
operator|.
name|gapPolicy
argument_list|(
name|gapPolicy
argument_list|)
operator|.
name|setBucketsPaths
argument_list|(
literal|"the_metric"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|InternalHistogram
argument_list|<
name|Bucket
argument_list|>
name|histo
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"histo"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|histo
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|histo
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"histo"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|Bucket
argument_list|>
name|buckets
init|=
name|histo
operator|.
name|getBuckets
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|buckets
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|numValueBuckets
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numValueBuckets
condition|;
operator|++
name|i
control|)
block|{
name|Histogram
operator|.
name|Bucket
name|bucket
init|=
name|buckets
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|checkBucketKeyAndDocCount
argument_list|(
literal|"Bucket "
operator|+
name|i
argument_list|,
name|bucket
argument_list|,
name|i
operator|*
name|interval
argument_list|,
name|docCounts
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|SimpleValue
name|docCountMovAvg
init|=
name|bucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"movavg_counts"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|docCountMovAvg
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|docCountMovAvg
operator|.
name|value
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|singleDocCounts
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|SimpleValue
name|valuesMovAvg
init|=
name|bucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"movavg_values"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|valuesMovAvg
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|valuesMovAvg
operator|.
name|value
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|singleDocValues
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * test double exponential moving average on single value field      */
annotation|@
name|Test
DECL|method|doubleExpSingleValuedField
specifier|public
name|void
name|doubleExpSingleValuedField
parameter_list|()
block|{
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|histogram
argument_list|(
literal|"histo"
argument_list|)
operator|.
name|field
argument_list|(
name|SINGLE_VALUED_FIELD_NAME
argument_list|)
operator|.
name|interval
argument_list|(
name|interval
argument_list|)
operator|.
name|minDocCount
argument_list|(
literal|0
argument_list|)
operator|.
name|extendedBounds
argument_list|(
literal|0L
argument_list|,
call|(
name|long
call|)
argument_list|(
name|interval
operator|*
operator|(
name|numValueBuckets
operator|-
literal|1
operator|)
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|randomMetric
argument_list|(
literal|"the_metric"
argument_list|,
name|SINGLE_VALUED_VALUE_FIELD_NAME
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|movingAvg
argument_list|(
literal|"movavg_counts"
argument_list|)
operator|.
name|window
argument_list|(
name|windowSize
argument_list|)
operator|.
name|modelBuilder
argument_list|(
operator|new
name|DoubleExpModel
operator|.
name|DoubleExpModelBuilder
argument_list|()
operator|.
name|alpha
argument_list|(
literal|0.5
argument_list|)
operator|.
name|beta
argument_list|(
literal|0.5
argument_list|)
argument_list|)
operator|.
name|gapPolicy
argument_list|(
name|gapPolicy
argument_list|)
operator|.
name|setBucketsPaths
argument_list|(
literal|"_count"
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|movingAvg
argument_list|(
literal|"movavg_values"
argument_list|)
operator|.
name|window
argument_list|(
name|windowSize
argument_list|)
operator|.
name|modelBuilder
argument_list|(
operator|new
name|DoubleExpModel
operator|.
name|DoubleExpModelBuilder
argument_list|()
operator|.
name|alpha
argument_list|(
literal|0.5
argument_list|)
operator|.
name|beta
argument_list|(
literal|0.5
argument_list|)
argument_list|)
operator|.
name|gapPolicy
argument_list|(
name|gapPolicy
argument_list|)
operator|.
name|setBucketsPaths
argument_list|(
literal|"the_metric"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|InternalHistogram
argument_list|<
name|Bucket
argument_list|>
name|histo
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"histo"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|histo
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|histo
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"histo"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|Bucket
argument_list|>
name|buckets
init|=
name|histo
operator|.
name|getBuckets
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|buckets
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|numValueBuckets
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numValueBuckets
condition|;
operator|++
name|i
control|)
block|{
name|Histogram
operator|.
name|Bucket
name|bucket
init|=
name|buckets
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|checkBucketKeyAndDocCount
argument_list|(
literal|"Bucket "
operator|+
name|i
argument_list|,
name|bucket
argument_list|,
name|i
operator|*
name|interval
argument_list|,
name|docCounts
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|SimpleValue
name|docCountMovAvg
init|=
name|bucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"movavg_counts"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|docCountMovAvg
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|docCountMovAvg
operator|.
name|value
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|doubleDocCounts
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|SimpleValue
name|valuesMovAvg
init|=
name|bucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"movavg_values"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|valuesMovAvg
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|valuesMovAvg
operator|.
name|value
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|doubleDocValues
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testSizeZeroWindow
specifier|public
name|void
name|testSizeZeroWindow
parameter_list|()
block|{
try|try
block|{
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|histogram
argument_list|(
literal|"histo"
argument_list|)
operator|.
name|field
argument_list|(
name|SINGLE_VALUED_FIELD_NAME
argument_list|)
operator|.
name|interval
argument_list|(
name|interval
argument_list|)
operator|.
name|minDocCount
argument_list|(
literal|0
argument_list|)
operator|.
name|extendedBounds
argument_list|(
literal|0L
argument_list|,
call|(
name|long
call|)
argument_list|(
name|interval
operator|*
operator|(
name|numValueBuckets
operator|-
literal|1
operator|)
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|randomMetric
argument_list|(
literal|"the_metric"
argument_list|,
name|SINGLE_VALUED_VALUE_FIELD_NAME
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|movingAvg
argument_list|(
literal|"movavg_counts"
argument_list|)
operator|.
name|window
argument_list|(
literal|0
argument_list|)
operator|.
name|modelBuilder
argument_list|(
operator|new
name|SimpleModel
operator|.
name|SimpleModelBuilder
argument_list|()
argument_list|)
operator|.
name|gapPolicy
argument_list|(
name|gapPolicy
argument_list|)
operator|.
name|setBucketsPaths
argument_list|(
literal|"the_metric"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"MovingAvg should not accept a window that is zero"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SearchPhaseExecutionException
name|exception
parameter_list|)
block|{
comment|//Throwable rootCause = exception.unwrapCause();
comment|//assertThat(rootCause, instanceOf(SearchParseException.class));
comment|//assertThat("[window] value must be a positive, non-zero integer.  Value supplied was [0] in [movingAvg].", equalTo(exception.getMessage()));
block|}
block|}
annotation|@
name|Test
DECL|method|testBadParent
specifier|public
name|void
name|testBadParent
parameter_list|()
block|{
try|try
block|{
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|range
argument_list|(
literal|"histo"
argument_list|)
operator|.
name|field
argument_list|(
name|SINGLE_VALUED_FIELD_NAME
argument_list|)
operator|.
name|addRange
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|randomMetric
argument_list|(
literal|"the_metric"
argument_list|,
name|SINGLE_VALUED_VALUE_FIELD_NAME
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|movingAvg
argument_list|(
literal|"movavg_counts"
argument_list|)
operator|.
name|window
argument_list|(
literal|0
argument_list|)
operator|.
name|modelBuilder
argument_list|(
operator|new
name|SimpleModel
operator|.
name|SimpleModelBuilder
argument_list|()
argument_list|)
operator|.
name|gapPolicy
argument_list|(
name|gapPolicy
argument_list|)
operator|.
name|setBucketsPaths
argument_list|(
literal|"the_metric"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"MovingAvg should not accept non-histogram as parent"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SearchPhaseExecutionException
name|exception
parameter_list|)
block|{
comment|// All good
block|}
block|}
annotation|@
name|Test
DECL|method|testNegativeWindow
specifier|public
name|void
name|testNegativeWindow
parameter_list|()
block|{
try|try
block|{
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|histogram
argument_list|(
literal|"histo"
argument_list|)
operator|.
name|field
argument_list|(
name|SINGLE_VALUED_FIELD_NAME
argument_list|)
operator|.
name|interval
argument_list|(
name|interval
argument_list|)
operator|.
name|minDocCount
argument_list|(
literal|0
argument_list|)
operator|.
name|extendedBounds
argument_list|(
literal|0L
argument_list|,
call|(
name|long
call|)
argument_list|(
name|interval
operator|*
operator|(
name|numValueBuckets
operator|-
literal|1
operator|)
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|randomMetric
argument_list|(
literal|"the_metric"
argument_list|,
name|SINGLE_VALUED_VALUE_FIELD_NAME
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|movingAvg
argument_list|(
literal|"movavg_counts"
argument_list|)
operator|.
name|window
argument_list|(
operator|-
literal|10
argument_list|)
operator|.
name|modelBuilder
argument_list|(
operator|new
name|SimpleModel
operator|.
name|SimpleModelBuilder
argument_list|()
argument_list|)
operator|.
name|gapPolicy
argument_list|(
name|gapPolicy
argument_list|)
operator|.
name|setBucketsPaths
argument_list|(
literal|"_count"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"MovingAvg should not accept a window that is negative"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SearchPhaseExecutionException
name|exception
parameter_list|)
block|{
comment|//Throwable rootCause = exception.unwrapCause();
comment|//assertThat(rootCause, instanceOf(SearchParseException.class));
comment|//assertThat("[window] value must be a positive, non-zero integer.  Value supplied was [0] in [movingAvg].", equalTo(exception.getMessage()));
block|}
block|}
annotation|@
name|Test
DECL|method|testNoBucketsInHistogram
specifier|public
name|void
name|testNoBucketsInHistogram
parameter_list|()
block|{
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|histogram
argument_list|(
literal|"histo"
argument_list|)
operator|.
name|field
argument_list|(
literal|"test"
argument_list|)
operator|.
name|interval
argument_list|(
name|interval
argument_list|)
operator|.
name|minDocCount
argument_list|(
literal|0
argument_list|)
operator|.
name|extendedBounds
argument_list|(
literal|0L
argument_list|,
call|(
name|long
call|)
argument_list|(
name|interval
operator|*
operator|(
name|numValueBuckets
operator|-
literal|1
operator|)
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|randomMetric
argument_list|(
literal|"the_metric"
argument_list|,
name|SINGLE_VALUED_VALUE_FIELD_NAME
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|movingAvg
argument_list|(
literal|"movavg_counts"
argument_list|)
operator|.
name|window
argument_list|(
name|windowSize
argument_list|)
operator|.
name|modelBuilder
argument_list|(
operator|new
name|SimpleModel
operator|.
name|SimpleModelBuilder
argument_list|()
argument_list|)
operator|.
name|gapPolicy
argument_list|(
name|gapPolicy
argument_list|)
operator|.
name|setBucketsPaths
argument_list|(
literal|"the_metric"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|InternalHistogram
argument_list|<
name|Bucket
argument_list|>
name|histo
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"histo"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|histo
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|histo
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"histo"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|Bucket
argument_list|>
name|buckets
init|=
name|histo
operator|.
name|getBuckets
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|buckets
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testZeroPrediction
specifier|public
name|void
name|testZeroPrediction
parameter_list|()
block|{
try|try
block|{
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|histogram
argument_list|(
literal|"histo"
argument_list|)
operator|.
name|field
argument_list|(
name|SINGLE_VALUED_FIELD_NAME
argument_list|)
operator|.
name|interval
argument_list|(
name|interval
argument_list|)
operator|.
name|minDocCount
argument_list|(
literal|0
argument_list|)
operator|.
name|extendedBounds
argument_list|(
literal|0L
argument_list|,
call|(
name|long
call|)
argument_list|(
name|interval
operator|*
operator|(
name|numValueBuckets
operator|-
literal|1
operator|)
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|randomMetric
argument_list|(
literal|"the_metric"
argument_list|,
name|SINGLE_VALUED_VALUE_FIELD_NAME
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|movingAvg
argument_list|(
literal|"movavg_counts"
argument_list|)
operator|.
name|window
argument_list|(
name|windowSize
argument_list|)
operator|.
name|modelBuilder
argument_list|(
name|randomModelBuilder
argument_list|()
argument_list|)
operator|.
name|gapPolicy
argument_list|(
name|gapPolicy
argument_list|)
operator|.
name|predict
argument_list|(
literal|0
argument_list|)
operator|.
name|setBucketsPaths
argument_list|(
literal|"the_metric"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"MovingAvg should not accept a prediction size that is zero"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SearchPhaseExecutionException
name|exception
parameter_list|)
block|{
comment|// All Good
block|}
block|}
annotation|@
name|Test
DECL|method|testNegativePrediction
specifier|public
name|void
name|testNegativePrediction
parameter_list|()
block|{
try|try
block|{
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|histogram
argument_list|(
literal|"histo"
argument_list|)
operator|.
name|field
argument_list|(
name|SINGLE_VALUED_FIELD_NAME
argument_list|)
operator|.
name|interval
argument_list|(
name|interval
argument_list|)
operator|.
name|minDocCount
argument_list|(
literal|0
argument_list|)
operator|.
name|extendedBounds
argument_list|(
literal|0L
argument_list|,
call|(
name|long
call|)
argument_list|(
name|interval
operator|*
operator|(
name|numValueBuckets
operator|-
literal|1
operator|)
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|randomMetric
argument_list|(
literal|"the_metric"
argument_list|,
name|SINGLE_VALUED_VALUE_FIELD_NAME
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|movingAvg
argument_list|(
literal|"movavg_counts"
argument_list|)
operator|.
name|window
argument_list|(
name|windowSize
argument_list|)
operator|.
name|modelBuilder
argument_list|(
name|randomModelBuilder
argument_list|()
argument_list|)
operator|.
name|gapPolicy
argument_list|(
name|gapPolicy
argument_list|)
operator|.
name|predict
argument_list|(
operator|-
literal|10
argument_list|)
operator|.
name|setBucketsPaths
argument_list|(
literal|"the_metric"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"MovingAvg should not accept a prediction size that is negative"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SearchPhaseExecutionException
name|exception
parameter_list|)
block|{
comment|// All Good
block|}
block|}
comment|/**      * This test uses the "gap" dataset, which is simply a doc at the beginning and end of      * the SINGLE_VALUED_FIELD_NAME range.  These docs have a value of 1 in the `g_field`.      * This test verifies that large gaps don't break things, and that the mov avg roughly works      * in the correct manner (checks direction of change, but not actual values)      */
annotation|@
name|Test
DECL|method|testGiantGap
specifier|public
name|void
name|testGiantGap
parameter_list|()
block|{
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|histogram
argument_list|(
literal|"histo"
argument_list|)
operator|.
name|field
argument_list|(
literal|"gap_test"
argument_list|)
operator|.
name|interval
argument_list|(
name|interval
argument_list|)
operator|.
name|minDocCount
argument_list|(
literal|0
argument_list|)
operator|.
name|extendedBounds
argument_list|(
literal|0L
argument_list|,
call|(
name|long
call|)
argument_list|(
name|interval
operator|*
operator|(
name|numValueBuckets
operator|-
literal|1
operator|)
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|randomMetric
argument_list|(
literal|"the_metric"
argument_list|,
name|GAP_FIELD
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|movingAvg
argument_list|(
literal|"movavg_counts"
argument_list|)
operator|.
name|window
argument_list|(
name|windowSize
argument_list|)
operator|.
name|modelBuilder
argument_list|(
name|randomModelBuilder
argument_list|()
argument_list|)
operator|.
name|gapPolicy
argument_list|(
name|gapPolicy
argument_list|)
operator|.
name|setBucketsPaths
argument_list|(
literal|"the_metric"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|InternalHistogram
argument_list|<
name|Bucket
argument_list|>
name|histo
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"histo"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|histo
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|histo
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"histo"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|Bucket
argument_list|>
name|buckets
init|=
name|histo
operator|.
name|getBuckets
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|buckets
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|numValueBuckets
argument_list|)
argument_list|)
expr_stmt|;
name|double
name|lastValue
init|=
operator|(
call|(
name|SimpleValue
call|)
argument_list|(
name|buckets
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"movavg_counts"
argument_list|)
argument_list|)
operator|)
operator|.
name|value
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|Double
operator|.
name|compare
argument_list|(
name|lastValue
argument_list|,
literal|0.0d
argument_list|)
argument_list|,
name|greaterThanOrEqualTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|double
name|currentValue
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|numValueBuckets
operator|-
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|currentValue
operator|=
operator|(
call|(
name|SimpleValue
call|)
argument_list|(
name|buckets
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"movavg_counts"
argument_list|)
argument_list|)
operator|)
operator|.
name|value
argument_list|()
expr_stmt|;
comment|// Since there are only two values in this test, at the beginning and end, the moving average should
comment|// decrease every step (until it reaches zero).  Crude way to check that it's doing the right thing
comment|// without actually verifying the computed values.  Should work for all types of moving avgs and
comment|// gap policies
name|assertThat
argument_list|(
name|Double
operator|.
name|compare
argument_list|(
name|lastValue
argument_list|,
name|currentValue
argument_list|)
argument_list|,
name|greaterThanOrEqualTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|lastValue
operator|=
name|currentValue
expr_stmt|;
block|}
comment|// The last bucket has a real value, so this should always increase the moving avg
name|currentValue
operator|=
operator|(
call|(
name|SimpleValue
call|)
argument_list|(
name|buckets
operator|.
name|get
argument_list|(
name|numValueBuckets
operator|-
literal|1
argument_list|)
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"movavg_counts"
argument_list|)
argument_list|)
operator|)
operator|.
name|value
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|Double
operator|.
name|compare
argument_list|(
name|lastValue
argument_list|,
name|currentValue
argument_list|)
argument_list|,
name|equalTo
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Big gap, but with prediction at the end.      */
annotation|@
name|Test
DECL|method|testGiantGapWithPredict
specifier|public
name|void
name|testGiantGapWithPredict
parameter_list|()
block|{
name|MovAvgModelBuilder
name|model
init|=
name|randomModelBuilder
argument_list|()
decl_stmt|;
name|int
name|numPredictions
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|histogram
argument_list|(
literal|"histo"
argument_list|)
operator|.
name|field
argument_list|(
literal|"gap_test"
argument_list|)
operator|.
name|interval
argument_list|(
name|interval
argument_list|)
operator|.
name|minDocCount
argument_list|(
literal|0
argument_list|)
operator|.
name|extendedBounds
argument_list|(
literal|0L
argument_list|,
call|(
name|long
call|)
argument_list|(
name|interval
operator|*
operator|(
name|numValueBuckets
operator|-
literal|1
operator|)
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|randomMetric
argument_list|(
literal|"the_metric"
argument_list|,
name|GAP_FIELD
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|movingAvg
argument_list|(
literal|"movavg_counts"
argument_list|)
operator|.
name|window
argument_list|(
name|windowSize
argument_list|)
operator|.
name|modelBuilder
argument_list|(
name|model
argument_list|)
operator|.
name|gapPolicy
argument_list|(
name|gapPolicy
argument_list|)
operator|.
name|predict
argument_list|(
name|numPredictions
argument_list|)
operator|.
name|setBucketsPaths
argument_list|(
literal|"the_metric"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|InternalHistogram
argument_list|<
name|Bucket
argument_list|>
name|histo
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"histo"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|histo
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|histo
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"histo"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|Bucket
argument_list|>
name|buckets
init|=
name|histo
operator|.
name|getBuckets
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|buckets
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|numValueBuckets
operator|+
name|numPredictions
argument_list|)
argument_list|)
expr_stmt|;
name|double
name|lastValue
init|=
operator|(
call|(
name|SimpleValue
call|)
argument_list|(
name|buckets
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"movavg_counts"
argument_list|)
argument_list|)
operator|)
operator|.
name|value
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|Double
operator|.
name|compare
argument_list|(
name|lastValue
argument_list|,
literal|0.0d
argument_list|)
argument_list|,
name|greaterThanOrEqualTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|double
name|currentValue
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|numValueBuckets
operator|-
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|currentValue
operator|=
operator|(
call|(
name|SimpleValue
call|)
argument_list|(
name|buckets
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"movavg_counts"
argument_list|)
argument_list|)
operator|)
operator|.
name|value
argument_list|()
expr_stmt|;
comment|// Since there are only two values in this test, at the beginning and end, the moving average should
comment|// decrease every step (until it reaches zero).  Crude way to check that it's doing the right thing
comment|// without actually verifying the computed values.  Should work for all types of moving avgs and
comment|// gap policies
name|assertThat
argument_list|(
name|Double
operator|.
name|compare
argument_list|(
name|lastValue
argument_list|,
name|currentValue
argument_list|)
argument_list|,
name|greaterThanOrEqualTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|lastValue
operator|=
name|currentValue
expr_stmt|;
block|}
comment|// The last bucket has a real value, so this should always increase the moving avg
name|currentValue
operator|=
operator|(
call|(
name|SimpleValue
call|)
argument_list|(
name|buckets
operator|.
name|get
argument_list|(
name|numValueBuckets
operator|-
literal|1
argument_list|)
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"movavg_counts"
argument_list|)
argument_list|)
operator|)
operator|.
name|value
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|Double
operator|.
name|compare
argument_list|(
name|lastValue
argument_list|,
name|currentValue
argument_list|)
argument_list|,
name|equalTo
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now check predictions
for|for
control|(
name|int
name|i
init|=
name|numValueBuckets
init|;
name|i
operator|<
name|numValueBuckets
operator|+
name|numPredictions
condition|;
name|i
operator|++
control|)
block|{
comment|// Unclear at this point which direction the predictions will go, just verify they are
comment|// not null, and that we don't have the_metric anymore
name|assertThat
argument_list|(
operator|(
name|buckets
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"movavg_counts"
argument_list|)
operator|)
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|buckets
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"the_metric"
argument_list|)
operator|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * This test filters the "gap" data so that the first doc is excluded.  This leaves a long stretch of empty      * buckets until the final bucket.  The moving avg should be zero up until the last bucket, and should work      * regardless of mov avg type or gap policy.      */
annotation|@
name|Test
DECL|method|testLeftGap
specifier|public
name|void
name|testLeftGap
parameter_list|()
block|{
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|filter
argument_list|(
literal|"filtered"
argument_list|)
operator|.
name|filter
argument_list|(
operator|new
name|RangeFilterBuilder
argument_list|(
literal|"gap_test"
argument_list|)
operator|.
name|from
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|histogram
argument_list|(
literal|"histo"
argument_list|)
operator|.
name|field
argument_list|(
literal|"gap_test"
argument_list|)
operator|.
name|interval
argument_list|(
name|interval
argument_list|)
operator|.
name|minDocCount
argument_list|(
literal|0
argument_list|)
operator|.
name|extendedBounds
argument_list|(
literal|0L
argument_list|,
call|(
name|long
call|)
argument_list|(
name|interval
operator|*
operator|(
name|numValueBuckets
operator|-
literal|1
operator|)
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|randomMetric
argument_list|(
literal|"the_metric"
argument_list|,
name|GAP_FIELD
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|movingAvg
argument_list|(
literal|"movavg_counts"
argument_list|)
operator|.
name|window
argument_list|(
name|windowSize
argument_list|)
operator|.
name|modelBuilder
argument_list|(
name|randomModelBuilder
argument_list|()
argument_list|)
operator|.
name|gapPolicy
argument_list|(
name|gapPolicy
argument_list|)
operator|.
name|setBucketsPaths
argument_list|(
literal|"the_metric"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|InternalFilter
name|filtered
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"filtered"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|filtered
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filtered
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"filtered"
argument_list|)
argument_list|)
expr_stmt|;
name|InternalHistogram
argument_list|<
name|Bucket
argument_list|>
name|histo
init|=
name|filtered
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"histo"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|histo
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|histo
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"histo"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|Bucket
argument_list|>
name|buckets
init|=
name|histo
operator|.
name|getBuckets
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|buckets
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|numValueBuckets
argument_list|)
argument_list|)
expr_stmt|;
name|double
name|currentValue
decl_stmt|;
name|double
name|lastValue
init|=
literal|0.0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numValueBuckets
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|currentValue
operator|=
operator|(
call|(
name|SimpleValue
call|)
argument_list|(
name|buckets
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"movavg_counts"
argument_list|)
argument_list|)
operator|)
operator|.
name|value
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|Double
operator|.
name|compare
argument_list|(
name|lastValue
argument_list|,
name|currentValue
argument_list|)
argument_list|,
name|lessThanOrEqualTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|lastValue
operator|=
name|currentValue
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testLeftGapWithPrediction
specifier|public
name|void
name|testLeftGapWithPrediction
parameter_list|()
block|{
name|int
name|numPredictions
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|filter
argument_list|(
literal|"filtered"
argument_list|)
operator|.
name|filter
argument_list|(
operator|new
name|RangeFilterBuilder
argument_list|(
literal|"gap_test"
argument_list|)
operator|.
name|from
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|histogram
argument_list|(
literal|"histo"
argument_list|)
operator|.
name|field
argument_list|(
literal|"gap_test"
argument_list|)
operator|.
name|interval
argument_list|(
name|interval
argument_list|)
operator|.
name|minDocCount
argument_list|(
literal|0
argument_list|)
operator|.
name|extendedBounds
argument_list|(
literal|0L
argument_list|,
call|(
name|long
call|)
argument_list|(
name|interval
operator|*
operator|(
name|numValueBuckets
operator|-
literal|1
operator|)
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|randomMetric
argument_list|(
literal|"the_metric"
argument_list|,
name|GAP_FIELD
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|movingAvg
argument_list|(
literal|"movavg_counts"
argument_list|)
operator|.
name|window
argument_list|(
name|windowSize
argument_list|)
operator|.
name|modelBuilder
argument_list|(
name|randomModelBuilder
argument_list|()
argument_list|)
operator|.
name|gapPolicy
argument_list|(
name|gapPolicy
argument_list|)
operator|.
name|predict
argument_list|(
name|numPredictions
argument_list|)
operator|.
name|setBucketsPaths
argument_list|(
literal|"the_metric"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|InternalFilter
name|filtered
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"filtered"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|filtered
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filtered
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"filtered"
argument_list|)
argument_list|)
expr_stmt|;
name|InternalHistogram
argument_list|<
name|Bucket
argument_list|>
name|histo
init|=
name|filtered
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"histo"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|histo
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|histo
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"histo"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|Bucket
argument_list|>
name|buckets
init|=
name|histo
operator|.
name|getBuckets
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|buckets
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|numValueBuckets
operator|+
name|numPredictions
argument_list|)
argument_list|)
expr_stmt|;
name|double
name|currentValue
decl_stmt|;
name|double
name|lastValue
init|=
literal|0.0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numValueBuckets
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|currentValue
operator|=
operator|(
call|(
name|SimpleValue
call|)
argument_list|(
name|buckets
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"movavg_counts"
argument_list|)
argument_list|)
operator|)
operator|.
name|value
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|Double
operator|.
name|compare
argument_list|(
name|lastValue
argument_list|,
name|currentValue
argument_list|)
argument_list|,
name|lessThanOrEqualTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|lastValue
operator|=
name|currentValue
expr_stmt|;
block|}
comment|// Now check predictions
for|for
control|(
name|int
name|i
init|=
name|numValueBuckets
init|;
name|i
operator|<
name|numValueBuckets
operator|+
name|numPredictions
condition|;
name|i
operator|++
control|)
block|{
comment|// Unclear at this point which direction the predictions will go, just verify they are
comment|// not null, and that we don't have the_metric anymore
name|assertThat
argument_list|(
operator|(
name|buckets
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"movavg_counts"
argument_list|)
operator|)
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|buckets
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"the_metric"
argument_list|)
operator|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * This test filters the "gap" data so that the last doc is excluded.  This leaves a long stretch of empty      * buckets after the first bucket.  The moving avg should be one at the beginning, then zero for the rest      * regardless of mov avg type or gap policy.      */
annotation|@
name|Test
DECL|method|testRightGap
specifier|public
name|void
name|testRightGap
parameter_list|()
block|{
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|filter
argument_list|(
literal|"filtered"
argument_list|)
operator|.
name|filter
argument_list|(
operator|new
name|RangeFilterBuilder
argument_list|(
literal|"gap_test"
argument_list|)
operator|.
name|to
argument_list|(
operator|(
name|interval
operator|*
operator|(
name|numValueBuckets
operator|-
literal|1
operator|)
operator|-
name|interval
operator|)
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|histogram
argument_list|(
literal|"histo"
argument_list|)
operator|.
name|field
argument_list|(
literal|"gap_test"
argument_list|)
operator|.
name|interval
argument_list|(
name|interval
argument_list|)
operator|.
name|minDocCount
argument_list|(
literal|0
argument_list|)
operator|.
name|extendedBounds
argument_list|(
literal|0L
argument_list|,
call|(
name|long
call|)
argument_list|(
name|interval
operator|*
operator|(
name|numValueBuckets
operator|-
literal|1
operator|)
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|randomMetric
argument_list|(
literal|"the_metric"
argument_list|,
name|GAP_FIELD
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|movingAvg
argument_list|(
literal|"movavg_counts"
argument_list|)
operator|.
name|window
argument_list|(
name|windowSize
argument_list|)
operator|.
name|modelBuilder
argument_list|(
name|randomModelBuilder
argument_list|()
argument_list|)
operator|.
name|gapPolicy
argument_list|(
name|gapPolicy
argument_list|)
operator|.
name|setBucketsPaths
argument_list|(
literal|"the_metric"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|InternalFilter
name|filtered
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"filtered"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|filtered
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filtered
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"filtered"
argument_list|)
argument_list|)
expr_stmt|;
name|InternalHistogram
argument_list|<
name|Bucket
argument_list|>
name|histo
init|=
name|filtered
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"histo"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|histo
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|histo
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"histo"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|Bucket
argument_list|>
name|buckets
init|=
name|histo
operator|.
name|getBuckets
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|buckets
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|numValueBuckets
argument_list|)
argument_list|)
expr_stmt|;
name|double
name|currentValue
decl_stmt|;
name|double
name|lastValue
init|=
operator|(
call|(
name|SimpleValue
call|)
argument_list|(
name|buckets
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"movavg_counts"
argument_list|)
argument_list|)
operator|)
operator|.
name|value
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|numValueBuckets
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|currentValue
operator|=
operator|(
call|(
name|SimpleValue
call|)
argument_list|(
name|buckets
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"movavg_counts"
argument_list|)
argument_list|)
operator|)
operator|.
name|value
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|Double
operator|.
name|compare
argument_list|(
name|lastValue
argument_list|,
name|currentValue
argument_list|)
argument_list|,
name|greaterThanOrEqualTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|lastValue
operator|=
name|currentValue
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testRightGapWithPredictions
specifier|public
name|void
name|testRightGapWithPredictions
parameter_list|()
block|{
name|int
name|numPredictions
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|filter
argument_list|(
literal|"filtered"
argument_list|)
operator|.
name|filter
argument_list|(
operator|new
name|RangeFilterBuilder
argument_list|(
literal|"gap_test"
argument_list|)
operator|.
name|to
argument_list|(
operator|(
name|interval
operator|*
operator|(
name|numValueBuckets
operator|-
literal|1
operator|)
operator|-
name|interval
operator|)
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|histogram
argument_list|(
literal|"histo"
argument_list|)
operator|.
name|field
argument_list|(
literal|"gap_test"
argument_list|)
operator|.
name|interval
argument_list|(
name|interval
argument_list|)
operator|.
name|minDocCount
argument_list|(
literal|0
argument_list|)
operator|.
name|extendedBounds
argument_list|(
literal|0L
argument_list|,
call|(
name|long
call|)
argument_list|(
name|interval
operator|*
operator|(
name|numValueBuckets
operator|-
literal|1
operator|)
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|randomMetric
argument_list|(
literal|"the_metric"
argument_list|,
name|GAP_FIELD
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|movingAvg
argument_list|(
literal|"movavg_counts"
argument_list|)
operator|.
name|window
argument_list|(
name|windowSize
argument_list|)
operator|.
name|modelBuilder
argument_list|(
name|randomModelBuilder
argument_list|()
argument_list|)
operator|.
name|gapPolicy
argument_list|(
name|gapPolicy
argument_list|)
operator|.
name|predict
argument_list|(
name|numPredictions
argument_list|)
operator|.
name|setBucketsPaths
argument_list|(
literal|"the_metric"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|InternalFilter
name|filtered
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"filtered"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|filtered
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filtered
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"filtered"
argument_list|)
argument_list|)
expr_stmt|;
name|InternalHistogram
argument_list|<
name|Bucket
argument_list|>
name|histo
init|=
name|filtered
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"histo"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|histo
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|histo
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"histo"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|Bucket
argument_list|>
name|buckets
init|=
name|histo
operator|.
name|getBuckets
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|buckets
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|numValueBuckets
operator|+
name|numPredictions
argument_list|)
argument_list|)
expr_stmt|;
name|double
name|currentValue
decl_stmt|;
name|double
name|lastValue
init|=
operator|(
call|(
name|SimpleValue
call|)
argument_list|(
name|buckets
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"movavg_counts"
argument_list|)
argument_list|)
operator|)
operator|.
name|value
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|numValueBuckets
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|currentValue
operator|=
operator|(
call|(
name|SimpleValue
call|)
argument_list|(
name|buckets
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"movavg_counts"
argument_list|)
argument_list|)
operator|)
operator|.
name|value
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|Double
operator|.
name|compare
argument_list|(
name|lastValue
argument_list|,
name|currentValue
argument_list|)
argument_list|,
name|greaterThanOrEqualTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|lastValue
operator|=
name|currentValue
expr_stmt|;
block|}
comment|// Now check predictions
for|for
control|(
name|int
name|i
init|=
name|numValueBuckets
init|;
name|i
operator|<
name|numValueBuckets
operator|+
name|numPredictions
condition|;
name|i
operator|++
control|)
block|{
comment|// Unclear at this point which direction the predictions will go, just verify they are
comment|// not null, and that we don't have the_metric anymore
name|assertThat
argument_list|(
operator|(
name|buckets
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"movavg_counts"
argument_list|)
operator|)
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|buckets
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"the_metric"
argument_list|)
operator|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testPredictWithNoBuckets
specifier|public
name|void
name|testPredictWithNoBuckets
parameter_list|()
block|{
name|int
name|numPredictions
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|addAggregation
argument_list|(
comment|// Filter so we are above all values
name|filter
argument_list|(
literal|"filtered"
argument_list|)
operator|.
name|filter
argument_list|(
operator|new
name|RangeFilterBuilder
argument_list|(
literal|"gap_test"
argument_list|)
operator|.
name|from
argument_list|(
operator|(
name|interval
operator|*
operator|(
name|numValueBuckets
operator|-
literal|1
operator|)
operator|+
name|interval
operator|)
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|histogram
argument_list|(
literal|"histo"
argument_list|)
operator|.
name|field
argument_list|(
literal|"gap_test"
argument_list|)
operator|.
name|interval
argument_list|(
name|interval
argument_list|)
operator|.
name|minDocCount
argument_list|(
literal|0
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|randomMetric
argument_list|(
literal|"the_metric"
argument_list|,
name|GAP_FIELD
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|movingAvg
argument_list|(
literal|"movavg_counts"
argument_list|)
operator|.
name|window
argument_list|(
name|windowSize
argument_list|)
operator|.
name|modelBuilder
argument_list|(
name|randomModelBuilder
argument_list|()
argument_list|)
operator|.
name|gapPolicy
argument_list|(
name|gapPolicy
argument_list|)
operator|.
name|predict
argument_list|(
name|numPredictions
argument_list|)
operator|.
name|setBucketsPaths
argument_list|(
literal|"the_metric"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|InternalFilter
name|filtered
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"filtered"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|filtered
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filtered
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"filtered"
argument_list|)
argument_list|)
expr_stmt|;
name|InternalHistogram
argument_list|<
name|Bucket
argument_list|>
name|histo
init|=
name|filtered
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"histo"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|histo
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|histo
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"histo"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|Bucket
argument_list|>
name|buckets
init|=
name|histo
operator|.
name|getBuckets
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|buckets
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|checkBucketKeyAndDocCount
specifier|private
name|void
name|checkBucketKeyAndDocCount
parameter_list|(
specifier|final
name|String
name|msg
parameter_list|,
specifier|final
name|Histogram
operator|.
name|Bucket
name|bucket
parameter_list|,
specifier|final
name|long
name|expectedKey
parameter_list|,
name|long
name|expectedDocCount
parameter_list|)
block|{
if|if
condition|(
name|expectedDocCount
operator|==
operator|-
literal|1
condition|)
block|{
name|expectedDocCount
operator|=
literal|0
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|msg
argument_list|,
name|bucket
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|msg
operator|+
literal|" key"
argument_list|,
operator|(
operator|(
name|Number
operator|)
name|bucket
operator|.
name|getKey
argument_list|()
operator|)
operator|.
name|longValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expectedKey
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|msg
operator|+
literal|" docCount"
argument_list|,
name|bucket
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expectedDocCount
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|randomModelBuilder
specifier|private
name|MovAvgModelBuilder
name|randomModelBuilder
parameter_list|()
block|{
name|int
name|rand
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|rand
condition|)
block|{
case|case
literal|0
case|:
return|return
operator|new
name|SimpleModel
operator|.
name|SimpleModelBuilder
argument_list|()
return|;
case|case
literal|1
case|:
return|return
operator|new
name|LinearModel
operator|.
name|LinearModelBuilder
argument_list|()
return|;
case|case
literal|2
case|:
return|return
operator|new
name|SingleExpModel
operator|.
name|SingleExpModelBuilder
argument_list|()
operator|.
name|alpha
argument_list|(
name|randomDouble
argument_list|()
argument_list|)
return|;
case|case
literal|3
case|:
return|return
operator|new
name|DoubleExpModel
operator|.
name|DoubleExpModelBuilder
argument_list|()
operator|.
name|alpha
argument_list|(
name|randomDouble
argument_list|()
argument_list|)
operator|.
name|beta
argument_list|(
name|randomDouble
argument_list|()
argument_list|)
return|;
default|default:
return|return
operator|new
name|SimpleModel
operator|.
name|SimpleModelBuilder
argument_list|()
return|;
block|}
block|}
DECL|method|randomMetric
specifier|private
name|ValuesSourceMetricsAggregationBuilder
name|randomMetric
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|field
parameter_list|)
block|{
name|int
name|rand
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|rand
condition|)
block|{
case|case
literal|0
case|:
return|return
name|min
argument_list|(
name|name
argument_list|)
operator|.
name|field
argument_list|(
name|field
argument_list|)
return|;
case|case
literal|2
case|:
return|return
name|max
argument_list|(
name|name
argument_list|)
operator|.
name|field
argument_list|(
name|field
argument_list|)
return|;
case|case
literal|3
case|:
return|return
name|avg
argument_list|(
name|name
argument_list|)
operator|.
name|field
argument_list|(
name|field
argument_list|)
return|;
default|default:
return|return
name|avg
argument_list|(
name|name
argument_list|)
operator|.
name|field
argument_list|(
name|field
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

