begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations.reducers
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|reducers
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|EvictingQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|index
operator|.
name|IndexRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|histogram
operator|.
name|Histogram
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|histogram
operator|.
name|InternalHistogram
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|histogram
operator|.
name|InternalHistogram
operator|.
name|Bucket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|reducers
operator|.
name|movavg
operator|.
name|models
operator|.
name|DoubleExpModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|reducers
operator|.
name|movavg
operator|.
name|models
operator|.
name|LinearModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|reducers
operator|.
name|movavg
operator|.
name|models
operator|.
name|SimpleModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|reducers
operator|.
name|movavg
operator|.
name|models
operator|.
name|SingleExpModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchIntegrationTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
operator|.
name|jsonBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregationBuilders
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|reducers
operator|.
name|ReducerBuilders
operator|.
name|smooth
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertSearchResponse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|core
operator|.
name|IsNull
operator|.
name|notNullValue
import|;
end_import

begin_class
annotation|@
name|ElasticsearchIntegrationTest
operator|.
name|SuiteScopeTest
DECL|class|MovAvgTests
specifier|public
class|class
name|MovAvgTests
extends|extends
name|ElasticsearchIntegrationTest
block|{
DECL|field|SINGLE_VALUED_FIELD_NAME
specifier|private
specifier|static
specifier|final
name|String
name|SINGLE_VALUED_FIELD_NAME
init|=
literal|"l_value"
decl_stmt|;
DECL|field|SINGLE_VALUED_VALUE_FIELD_NAME
specifier|private
specifier|static
specifier|final
name|String
name|SINGLE_VALUED_VALUE_FIELD_NAME
init|=
literal|"v_value"
decl_stmt|;
DECL|field|interval
specifier|static
name|int
name|interval
decl_stmt|;
DECL|field|numValueBuckets
specifier|static
name|int
name|numValueBuckets
decl_stmt|;
DECL|field|numFilledValueBuckets
specifier|static
name|int
name|numFilledValueBuckets
decl_stmt|;
DECL|field|windowSize
specifier|static
name|int
name|windowSize
decl_stmt|;
DECL|field|gapPolicy
specifier|static
name|BucketHelpers
operator|.
name|GapPolicy
name|gapPolicy
decl_stmt|;
DECL|field|docCounts
specifier|static
name|long
index|[]
name|docCounts
decl_stmt|;
DECL|field|valueCounts
specifier|static
name|long
index|[]
name|valueCounts
decl_stmt|;
DECL|field|simpleMovAvgCounts
specifier|static
name|Double
index|[]
name|simpleMovAvgCounts
decl_stmt|;
DECL|field|linearMovAvgCounts
specifier|static
name|Double
index|[]
name|linearMovAvgCounts
decl_stmt|;
DECL|field|singleExpMovAvgCounts
specifier|static
name|Double
index|[]
name|singleExpMovAvgCounts
decl_stmt|;
DECL|field|doubleExpMovAvgCounts
specifier|static
name|Double
index|[]
name|doubleExpMovAvgCounts
decl_stmt|;
DECL|field|simpleMovAvgValueCounts
specifier|static
name|Double
index|[]
name|simpleMovAvgValueCounts
decl_stmt|;
DECL|field|linearMovAvgValueCounts
specifier|static
name|Double
index|[]
name|linearMovAvgValueCounts
decl_stmt|;
DECL|field|singleExpMovAvgValueCounts
specifier|static
name|Double
index|[]
name|singleExpMovAvgValueCounts
decl_stmt|;
DECL|field|doubleExpMovAvgValueCounts
specifier|static
name|Double
index|[]
name|doubleExpMovAvgValueCounts
decl_stmt|;
annotation|@
name|Override
DECL|method|setupSuiteScopeCluster
specifier|public
name|void
name|setupSuiteScopeCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|createIndex
argument_list|(
literal|"idx"
argument_list|)
expr_stmt|;
name|createIndex
argument_list|(
literal|"idx_unmapped"
argument_list|)
expr_stmt|;
name|interval
operator|=
literal|5
expr_stmt|;
name|numValueBuckets
operator|=
name|randomIntBetween
argument_list|(
literal|6
argument_list|,
literal|80
argument_list|)
expr_stmt|;
name|numFilledValueBuckets
operator|=
name|numValueBuckets
expr_stmt|;
name|windowSize
operator|=
name|randomIntBetween
argument_list|(
literal|3
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|gapPolicy
operator|=
name|randomBoolean
argument_list|()
condition|?
name|BucketHelpers
operator|.
name|GapPolicy
operator|.
name|IGNORE
else|:
name|BucketHelpers
operator|.
name|GapPolicy
operator|.
name|INSERT_ZEROS
expr_stmt|;
name|docCounts
operator|=
operator|new
name|long
index|[
name|numValueBuckets
index|]
expr_stmt|;
name|valueCounts
operator|=
operator|new
name|long
index|[
name|numValueBuckets
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numValueBuckets
condition|;
name|i
operator|++
control|)
block|{
name|docCounts
index|[
name|i
index|]
operator|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|valueCounts
index|[
name|i
index|]
operator|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|20
argument_list|)
expr_stmt|;
comment|//this will be used as a constant for all values within a bucket
block|}
name|this
operator|.
name|setupSimple
argument_list|()
expr_stmt|;
name|this
operator|.
name|setupLinear
argument_list|()
expr_stmt|;
name|this
operator|.
name|setupSingle
argument_list|()
expr_stmt|;
name|this
operator|.
name|setupDouble
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|IndexRequestBuilder
argument_list|>
name|builders
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numValueBuckets
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|docs
init|=
literal|0
init|;
name|docs
operator|<
name|docCounts
index|[
name|i
index|]
condition|;
name|docs
operator|++
control|)
block|{
name|builders
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"idx"
argument_list|,
literal|"type"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
name|SINGLE_VALUED_FIELD_NAME
argument_list|,
name|i
operator|*
name|interval
argument_list|)
operator|.
name|field
argument_list|(
name|SINGLE_VALUED_VALUE_FIELD_NAME
argument_list|,
literal|1
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|builders
argument_list|)
expr_stmt|;
name|ensureSearchable
argument_list|()
expr_stmt|;
block|}
DECL|method|setupSimple
specifier|private
name|void
name|setupSimple
parameter_list|()
block|{
name|simpleMovAvgCounts
operator|=
operator|new
name|Double
index|[
name|numValueBuckets
index|]
expr_stmt|;
name|EvictingQueue
argument_list|<
name|Double
argument_list|>
name|window
init|=
name|EvictingQueue
operator|.
name|create
argument_list|(
name|windowSize
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numValueBuckets
condition|;
name|i
operator|++
control|)
block|{
name|double
name|thisValue
init|=
name|docCounts
index|[
name|i
index|]
decl_stmt|;
name|window
operator|.
name|offer
argument_list|(
name|thisValue
argument_list|)
expr_stmt|;
name|double
name|movAvg
init|=
literal|0
decl_stmt|;
for|for
control|(
name|double
name|value
range|:
name|window
control|)
block|{
name|movAvg
operator|+=
name|value
expr_stmt|;
block|}
name|movAvg
operator|/=
name|window
operator|.
name|size
argument_list|()
expr_stmt|;
name|simpleMovAvgCounts
index|[
name|i
index|]
operator|=
name|movAvg
expr_stmt|;
block|}
name|window
operator|.
name|clear
argument_list|()
expr_stmt|;
name|simpleMovAvgValueCounts
operator|=
operator|new
name|Double
index|[
name|numValueBuckets
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numValueBuckets
condition|;
name|i
operator|++
control|)
block|{
name|window
operator|.
name|offer
argument_list|(
operator|(
name|double
operator|)
name|docCounts
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|double
name|movAvg
init|=
literal|0
decl_stmt|;
for|for
control|(
name|double
name|value
range|:
name|window
control|)
block|{
name|movAvg
operator|+=
name|value
expr_stmt|;
block|}
name|movAvg
operator|/=
name|window
operator|.
name|size
argument_list|()
expr_stmt|;
name|simpleMovAvgValueCounts
index|[
name|i
index|]
operator|=
name|movAvg
expr_stmt|;
block|}
block|}
DECL|method|setupLinear
specifier|private
name|void
name|setupLinear
parameter_list|()
block|{
name|EvictingQueue
argument_list|<
name|Double
argument_list|>
name|window
init|=
name|EvictingQueue
operator|.
name|create
argument_list|(
name|windowSize
argument_list|)
decl_stmt|;
name|linearMovAvgCounts
operator|=
operator|new
name|Double
index|[
name|numValueBuckets
index|]
expr_stmt|;
name|window
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numValueBuckets
condition|;
name|i
operator|++
control|)
block|{
name|double
name|thisValue
init|=
name|docCounts
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|thisValue
operator|==
operator|-
literal|1
condition|)
block|{
name|thisValue
operator|=
literal|0
expr_stmt|;
block|}
name|window
operator|.
name|offer
argument_list|(
name|thisValue
argument_list|)
expr_stmt|;
name|double
name|avg
init|=
literal|0
decl_stmt|;
name|long
name|totalWeight
init|=
literal|1
decl_stmt|;
name|long
name|current
init|=
literal|1
decl_stmt|;
for|for
control|(
name|double
name|value
range|:
name|window
control|)
block|{
name|avg
operator|+=
name|value
operator|*
name|current
expr_stmt|;
name|totalWeight
operator|+=
name|current
expr_stmt|;
name|current
operator|+=
literal|1
expr_stmt|;
block|}
name|linearMovAvgCounts
index|[
name|i
index|]
operator|=
name|avg
operator|/
name|totalWeight
expr_stmt|;
block|}
name|window
operator|.
name|clear
argument_list|()
expr_stmt|;
name|linearMovAvgValueCounts
operator|=
operator|new
name|Double
index|[
name|numValueBuckets
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numValueBuckets
condition|;
name|i
operator|++
control|)
block|{
name|double
name|thisValue
init|=
name|docCounts
index|[
name|i
index|]
decl_stmt|;
name|window
operator|.
name|offer
argument_list|(
name|thisValue
argument_list|)
expr_stmt|;
name|double
name|avg
init|=
literal|0
decl_stmt|;
name|long
name|totalWeight
init|=
literal|1
decl_stmt|;
name|long
name|current
init|=
literal|1
decl_stmt|;
for|for
control|(
name|double
name|value
range|:
name|window
control|)
block|{
name|avg
operator|+=
name|value
operator|*
name|current
expr_stmt|;
name|totalWeight
operator|+=
name|current
expr_stmt|;
name|current
operator|+=
literal|1
expr_stmt|;
block|}
name|linearMovAvgValueCounts
index|[
name|i
index|]
operator|=
name|avg
operator|/
name|totalWeight
expr_stmt|;
block|}
block|}
DECL|method|setupSingle
specifier|private
name|void
name|setupSingle
parameter_list|()
block|{
name|EvictingQueue
argument_list|<
name|Double
argument_list|>
name|window
init|=
name|EvictingQueue
operator|.
name|create
argument_list|(
name|windowSize
argument_list|)
decl_stmt|;
name|singleExpMovAvgCounts
operator|=
operator|new
name|Double
index|[
name|numValueBuckets
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numValueBuckets
condition|;
name|i
operator|++
control|)
block|{
name|double
name|thisValue
init|=
name|docCounts
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|thisValue
operator|==
operator|-
literal|1
condition|)
block|{
name|thisValue
operator|=
literal|0
expr_stmt|;
block|}
name|window
operator|.
name|offer
argument_list|(
name|thisValue
argument_list|)
expr_stmt|;
name|double
name|avg
init|=
literal|0
decl_stmt|;
name|double
name|alpha
init|=
literal|0.5
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|double
name|value
range|:
name|window
control|)
block|{
if|if
condition|(
name|first
condition|)
block|{
name|avg
operator|=
name|value
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|avg
operator|=
operator|(
name|value
operator|*
name|alpha
operator|)
operator|+
operator|(
name|avg
operator|*
operator|(
literal|1
operator|-
name|alpha
operator|)
operator|)
expr_stmt|;
block|}
block|}
name|singleExpMovAvgCounts
index|[
name|i
index|]
operator|=
name|avg
expr_stmt|;
block|}
name|singleExpMovAvgValueCounts
operator|=
operator|new
name|Double
index|[
name|numValueBuckets
index|]
expr_stmt|;
name|window
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numValueBuckets
condition|;
name|i
operator|++
control|)
block|{
name|window
operator|.
name|offer
argument_list|(
operator|(
name|double
operator|)
name|docCounts
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|double
name|avg
init|=
literal|0
decl_stmt|;
name|double
name|alpha
init|=
literal|0.5
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|double
name|value
range|:
name|window
control|)
block|{
if|if
condition|(
name|first
condition|)
block|{
name|avg
operator|=
name|value
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|avg
operator|=
operator|(
name|value
operator|*
name|alpha
operator|)
operator|+
operator|(
name|avg
operator|*
operator|(
literal|1
operator|-
name|alpha
operator|)
operator|)
expr_stmt|;
block|}
block|}
name|singleExpMovAvgCounts
index|[
name|i
index|]
operator|=
name|avg
expr_stmt|;
block|}
block|}
DECL|method|setupDouble
specifier|private
name|void
name|setupDouble
parameter_list|()
block|{
name|EvictingQueue
argument_list|<
name|Double
argument_list|>
name|window
init|=
name|EvictingQueue
operator|.
name|create
argument_list|(
name|windowSize
argument_list|)
decl_stmt|;
name|doubleExpMovAvgCounts
operator|=
operator|new
name|Double
index|[
name|numValueBuckets
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numValueBuckets
condition|;
name|i
operator|++
control|)
block|{
name|double
name|thisValue
init|=
name|docCounts
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|thisValue
operator|==
operator|-
literal|1
condition|)
block|{
name|thisValue
operator|=
literal|0
expr_stmt|;
block|}
name|window
operator|.
name|offer
argument_list|(
name|thisValue
argument_list|)
expr_stmt|;
name|double
name|s
init|=
literal|0
decl_stmt|;
name|double
name|last_s
init|=
literal|0
decl_stmt|;
comment|// Trend value
name|double
name|b
init|=
literal|0
decl_stmt|;
name|double
name|last_b
init|=
literal|0
decl_stmt|;
name|double
name|alpha
init|=
literal|0.5
decl_stmt|;
name|double
name|beta
init|=
literal|0.5
decl_stmt|;
name|int
name|counter
init|=
literal|0
decl_stmt|;
name|double
name|last
decl_stmt|;
for|for
control|(
name|double
name|value
range|:
name|window
control|)
block|{
name|last
operator|=
name|value
expr_stmt|;
if|if
condition|(
name|counter
operator|==
literal|1
condition|)
block|{
name|s
operator|=
name|value
expr_stmt|;
name|b
operator|=
name|value
operator|-
name|last
expr_stmt|;
block|}
else|else
block|{
name|s
operator|=
name|alpha
operator|*
name|value
operator|+
operator|(
literal|1.0d
operator|-
name|alpha
operator|)
operator|*
operator|(
name|last_s
operator|+
name|last_b
operator|)
expr_stmt|;
name|b
operator|=
name|beta
operator|*
operator|(
name|s
operator|-
name|last_s
operator|)
operator|+
operator|(
literal|1
operator|-
name|beta
operator|)
operator|*
name|last_b
expr_stmt|;
block|}
name|counter
operator|+=
literal|1
expr_stmt|;
name|last_s
operator|=
name|s
expr_stmt|;
name|last_b
operator|=
name|b
expr_stmt|;
block|}
name|doubleExpMovAvgCounts
index|[
name|i
index|]
operator|=
name|s
operator|+
operator|(
literal|0
operator|*
name|b
operator|)
expr_stmt|;
block|}
name|doubleExpMovAvgValueCounts
operator|=
operator|new
name|Double
index|[
name|numValueBuckets
index|]
expr_stmt|;
name|window
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numValueBuckets
condition|;
name|i
operator|++
control|)
block|{
name|window
operator|.
name|offer
argument_list|(
operator|(
name|double
operator|)
name|docCounts
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|double
name|s
init|=
literal|0
decl_stmt|;
name|double
name|last_s
init|=
literal|0
decl_stmt|;
comment|// Trend value
name|double
name|b
init|=
literal|0
decl_stmt|;
name|double
name|last_b
init|=
literal|0
decl_stmt|;
name|double
name|alpha
init|=
literal|0.5
decl_stmt|;
name|double
name|beta
init|=
literal|0.5
decl_stmt|;
name|int
name|counter
init|=
literal|0
decl_stmt|;
name|double
name|last
decl_stmt|;
for|for
control|(
name|double
name|value
range|:
name|window
control|)
block|{
name|last
operator|=
name|value
expr_stmt|;
if|if
condition|(
name|counter
operator|==
literal|1
condition|)
block|{
name|s
operator|=
name|value
expr_stmt|;
name|b
operator|=
name|value
operator|-
name|last
expr_stmt|;
block|}
else|else
block|{
name|s
operator|=
name|alpha
operator|*
name|value
operator|+
operator|(
literal|1.0d
operator|-
name|alpha
operator|)
operator|*
operator|(
name|last_s
operator|+
name|last_b
operator|)
expr_stmt|;
name|b
operator|=
name|beta
operator|*
operator|(
name|s
operator|-
name|last_s
operator|)
operator|+
operator|(
literal|1
operator|-
name|beta
operator|)
operator|*
name|last_b
expr_stmt|;
block|}
name|counter
operator|+=
literal|1
expr_stmt|;
name|last_s
operator|=
name|s
expr_stmt|;
name|last_b
operator|=
name|b
expr_stmt|;
block|}
name|doubleExpMovAvgValueCounts
index|[
name|i
index|]
operator|=
name|s
operator|+
operator|(
literal|0
operator|*
name|b
operator|)
expr_stmt|;
block|}
block|}
comment|/**      * test simple moving average on single value field      */
annotation|@
name|Test
DECL|method|simpleSingleValuedField
specifier|public
name|void
name|simpleSingleValuedField
parameter_list|()
block|{
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|histogram
argument_list|(
literal|"histo"
argument_list|)
operator|.
name|field
argument_list|(
name|SINGLE_VALUED_FIELD_NAME
argument_list|)
operator|.
name|interval
argument_list|(
name|interval
argument_list|)
operator|.
name|minDocCount
argument_list|(
literal|0
argument_list|)
operator|.
name|extendedBounds
argument_list|(
literal|0L
argument_list|,
call|(
name|long
call|)
argument_list|(
name|interval
operator|*
operator|(
name|numValueBuckets
operator|-
literal|1
operator|)
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|sum
argument_list|(
literal|"the_sum"
argument_list|)
operator|.
name|field
argument_list|(
name|SINGLE_VALUED_VALUE_FIELD_NAME
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|smooth
argument_list|(
literal|"smooth"
argument_list|)
operator|.
name|window
argument_list|(
name|windowSize
argument_list|)
operator|.
name|modelBuilder
argument_list|(
operator|new
name|SimpleModel
operator|.
name|SimpleModelBuilder
argument_list|()
argument_list|)
operator|.
name|gapPolicy
argument_list|(
name|gapPolicy
argument_list|)
operator|.
name|setBucketsPaths
argument_list|(
literal|"_count"
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|smooth
argument_list|(
literal|"movavg_values"
argument_list|)
operator|.
name|window
argument_list|(
name|windowSize
argument_list|)
operator|.
name|modelBuilder
argument_list|(
operator|new
name|SimpleModel
operator|.
name|SimpleModelBuilder
argument_list|()
argument_list|)
operator|.
name|gapPolicy
argument_list|(
name|gapPolicy
argument_list|)
operator|.
name|setBucketsPaths
argument_list|(
literal|"the_sum"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|InternalHistogram
argument_list|<
name|Bucket
argument_list|>
name|histo
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"histo"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|histo
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|histo
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"histo"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|Bucket
argument_list|>
name|buckets
init|=
name|histo
operator|.
name|getBuckets
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|buckets
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|numValueBuckets
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numValueBuckets
condition|;
operator|++
name|i
control|)
block|{
name|Histogram
operator|.
name|Bucket
name|bucket
init|=
name|buckets
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|checkBucketKeyAndDocCount
argument_list|(
literal|"Bucket "
operator|+
name|i
argument_list|,
name|bucket
argument_list|,
name|i
operator|*
name|interval
argument_list|,
name|docCounts
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|SimpleValue
name|docCountMovAvg
init|=
name|bucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"smooth"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|docCountMovAvg
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|docCountMovAvg
operator|.
name|value
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|simpleMovAvgCounts
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|SimpleValue
name|valuesMovAvg
init|=
name|bucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"movavg_values"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|valuesMovAvg
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|valuesMovAvg
operator|.
name|value
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|simpleMovAvgCounts
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * test linear moving average on single value field      */
annotation|@
name|Test
DECL|method|linearSingleValuedField
specifier|public
name|void
name|linearSingleValuedField
parameter_list|()
block|{
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|histogram
argument_list|(
literal|"histo"
argument_list|)
operator|.
name|field
argument_list|(
name|SINGLE_VALUED_FIELD_NAME
argument_list|)
operator|.
name|interval
argument_list|(
name|interval
argument_list|)
operator|.
name|minDocCount
argument_list|(
literal|0
argument_list|)
operator|.
name|extendedBounds
argument_list|(
literal|0L
argument_list|,
call|(
name|long
call|)
argument_list|(
name|interval
operator|*
operator|(
name|numValueBuckets
operator|-
literal|1
operator|)
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|sum
argument_list|(
literal|"the_sum"
argument_list|)
operator|.
name|field
argument_list|(
name|SINGLE_VALUED_VALUE_FIELD_NAME
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|smooth
argument_list|(
literal|"smooth"
argument_list|)
operator|.
name|window
argument_list|(
name|windowSize
argument_list|)
operator|.
name|modelBuilder
argument_list|(
operator|new
name|LinearModel
operator|.
name|LinearModelBuilder
argument_list|()
argument_list|)
operator|.
name|gapPolicy
argument_list|(
name|gapPolicy
argument_list|)
operator|.
name|setBucketsPaths
argument_list|(
literal|"_count"
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|smooth
argument_list|(
literal|"movavg_values"
argument_list|)
operator|.
name|window
argument_list|(
name|windowSize
argument_list|)
operator|.
name|modelBuilder
argument_list|(
operator|new
name|LinearModel
operator|.
name|LinearModelBuilder
argument_list|()
argument_list|)
operator|.
name|gapPolicy
argument_list|(
name|gapPolicy
argument_list|)
operator|.
name|setBucketsPaths
argument_list|(
literal|"the_sum"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|InternalHistogram
argument_list|<
name|Bucket
argument_list|>
name|histo
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"histo"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|histo
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|histo
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"histo"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|Bucket
argument_list|>
name|buckets
init|=
name|histo
operator|.
name|getBuckets
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|buckets
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|numValueBuckets
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numValueBuckets
condition|;
operator|++
name|i
control|)
block|{
name|Histogram
operator|.
name|Bucket
name|bucket
init|=
name|buckets
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|checkBucketKeyAndDocCount
argument_list|(
literal|"Bucket "
operator|+
name|i
argument_list|,
name|bucket
argument_list|,
name|i
operator|*
name|interval
argument_list|,
name|docCounts
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|SimpleValue
name|docCountMovAvg
init|=
name|bucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"smooth"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|docCountMovAvg
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|docCountMovAvg
operator|.
name|value
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|linearMovAvgCounts
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|SimpleValue
name|valuesMovAvg
init|=
name|bucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"movavg_values"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|valuesMovAvg
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|valuesMovAvg
operator|.
name|value
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|linearMovAvgCounts
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * test single exponential moving average on single value field      */
annotation|@
name|Test
DECL|method|singleExpSingleValuedField
specifier|public
name|void
name|singleExpSingleValuedField
parameter_list|()
block|{
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|histogram
argument_list|(
literal|"histo"
argument_list|)
operator|.
name|field
argument_list|(
name|SINGLE_VALUED_FIELD_NAME
argument_list|)
operator|.
name|interval
argument_list|(
name|interval
argument_list|)
operator|.
name|minDocCount
argument_list|(
literal|0
argument_list|)
operator|.
name|extendedBounds
argument_list|(
literal|0L
argument_list|,
call|(
name|long
call|)
argument_list|(
name|interval
operator|*
operator|(
name|numValueBuckets
operator|-
literal|1
operator|)
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|sum
argument_list|(
literal|"the_sum"
argument_list|)
operator|.
name|field
argument_list|(
name|SINGLE_VALUED_VALUE_FIELD_NAME
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|smooth
argument_list|(
literal|"smooth"
argument_list|)
operator|.
name|window
argument_list|(
name|windowSize
argument_list|)
operator|.
name|modelBuilder
argument_list|(
operator|new
name|SingleExpModel
operator|.
name|SingleExpModelBuilder
argument_list|()
operator|.
name|alpha
argument_list|(
literal|0.5
argument_list|)
argument_list|)
operator|.
name|gapPolicy
argument_list|(
name|gapPolicy
argument_list|)
operator|.
name|setBucketsPaths
argument_list|(
literal|"_count"
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|smooth
argument_list|(
literal|"movavg_values"
argument_list|)
operator|.
name|window
argument_list|(
name|windowSize
argument_list|)
operator|.
name|modelBuilder
argument_list|(
operator|new
name|SingleExpModel
operator|.
name|SingleExpModelBuilder
argument_list|()
operator|.
name|alpha
argument_list|(
literal|0.5
argument_list|)
argument_list|)
operator|.
name|gapPolicy
argument_list|(
name|gapPolicy
argument_list|)
operator|.
name|setBucketsPaths
argument_list|(
literal|"the_sum"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|InternalHistogram
argument_list|<
name|Bucket
argument_list|>
name|histo
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"histo"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|histo
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|histo
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"histo"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|Bucket
argument_list|>
name|buckets
init|=
name|histo
operator|.
name|getBuckets
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|buckets
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|numValueBuckets
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numValueBuckets
condition|;
operator|++
name|i
control|)
block|{
name|Histogram
operator|.
name|Bucket
name|bucket
init|=
name|buckets
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|checkBucketKeyAndDocCount
argument_list|(
literal|"Bucket "
operator|+
name|i
argument_list|,
name|bucket
argument_list|,
name|i
operator|*
name|interval
argument_list|,
name|docCounts
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|SimpleValue
name|docCountMovAvg
init|=
name|bucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"smooth"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|docCountMovAvg
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|docCountMovAvg
operator|.
name|value
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|singleExpMovAvgCounts
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|SimpleValue
name|valuesMovAvg
init|=
name|bucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"movavg_values"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|valuesMovAvg
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|valuesMovAvg
operator|.
name|value
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|singleExpMovAvgCounts
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * test double exponential moving average on single value field      */
annotation|@
name|Test
DECL|method|doubleExpSingleValuedField
specifier|public
name|void
name|doubleExpSingleValuedField
parameter_list|()
block|{
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|histogram
argument_list|(
literal|"histo"
argument_list|)
operator|.
name|field
argument_list|(
name|SINGLE_VALUED_FIELD_NAME
argument_list|)
operator|.
name|interval
argument_list|(
name|interval
argument_list|)
operator|.
name|minDocCount
argument_list|(
literal|0
argument_list|)
operator|.
name|extendedBounds
argument_list|(
literal|0L
argument_list|,
call|(
name|long
call|)
argument_list|(
name|interval
operator|*
operator|(
name|numValueBuckets
operator|-
literal|1
operator|)
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|sum
argument_list|(
literal|"the_sum"
argument_list|)
operator|.
name|field
argument_list|(
name|SINGLE_VALUED_VALUE_FIELD_NAME
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|smooth
argument_list|(
literal|"smooth"
argument_list|)
operator|.
name|window
argument_list|(
name|windowSize
argument_list|)
operator|.
name|modelBuilder
argument_list|(
operator|new
name|DoubleExpModel
operator|.
name|DoubleExpModelBuilder
argument_list|()
operator|.
name|alpha
argument_list|(
literal|0.5
argument_list|)
operator|.
name|beta
argument_list|(
literal|0.5
argument_list|)
argument_list|)
operator|.
name|gapPolicy
argument_list|(
name|gapPolicy
argument_list|)
operator|.
name|setBucketsPaths
argument_list|(
literal|"_count"
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|smooth
argument_list|(
literal|"movavg_values"
argument_list|)
operator|.
name|window
argument_list|(
name|windowSize
argument_list|)
operator|.
name|modelBuilder
argument_list|(
operator|new
name|DoubleExpModel
operator|.
name|DoubleExpModelBuilder
argument_list|()
operator|.
name|alpha
argument_list|(
literal|0.5
argument_list|)
operator|.
name|beta
argument_list|(
literal|0.5
argument_list|)
argument_list|)
operator|.
name|gapPolicy
argument_list|(
name|gapPolicy
argument_list|)
operator|.
name|setBucketsPaths
argument_list|(
literal|"the_sum"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|InternalHistogram
argument_list|<
name|Bucket
argument_list|>
name|histo
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"histo"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|histo
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|histo
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"histo"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|Bucket
argument_list|>
name|buckets
init|=
name|histo
operator|.
name|getBuckets
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|buckets
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|numValueBuckets
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numValueBuckets
condition|;
operator|++
name|i
control|)
block|{
name|Histogram
operator|.
name|Bucket
name|bucket
init|=
name|buckets
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|checkBucketKeyAndDocCount
argument_list|(
literal|"Bucket "
operator|+
name|i
argument_list|,
name|bucket
argument_list|,
name|i
operator|*
name|interval
argument_list|,
name|docCounts
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|SimpleValue
name|docCountMovAvg
init|=
name|bucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"smooth"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|docCountMovAvg
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|docCountMovAvg
operator|.
name|value
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|doubleExpMovAvgCounts
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|SimpleValue
name|valuesMovAvg
init|=
name|bucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"movavg_values"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|valuesMovAvg
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|valuesMovAvg
operator|.
name|value
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|doubleExpMovAvgCounts
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|checkBucketKeyAndDocCount
specifier|private
name|void
name|checkBucketKeyAndDocCount
parameter_list|(
specifier|final
name|String
name|msg
parameter_list|,
specifier|final
name|Histogram
operator|.
name|Bucket
name|bucket
parameter_list|,
specifier|final
name|long
name|expectedKey
parameter_list|,
name|long
name|expectedDocCount
parameter_list|)
block|{
if|if
condition|(
name|expectedDocCount
operator|==
operator|-
literal|1
condition|)
block|{
name|expectedDocCount
operator|=
literal|0
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|msg
argument_list|,
name|bucket
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|msg
operator|+
literal|" key"
argument_list|,
operator|(
operator|(
name|Number
operator|)
name|bucket
operator|.
name|getKey
argument_list|()
operator|)
operator|.
name|longValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expectedKey
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|msg
operator|+
literal|" docCount"
argument_list|,
name|bucket
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expectedDocCount
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

