begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations.reducers
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|reducers
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|metrics
operator|.
name|ValuesSourceMetricsAggregationBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|metrics
operator|.
name|avg
operator|.
name|AvgBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|metrics
operator|.
name|max
operator|.
name|MaxBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|metrics
operator|.
name|min
operator|.
name|MinBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|metrics
operator|.
name|sum
operator|.
name|SumBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_comment
comment|/**  * Provides helper methods and classes for use in Reducer tests, such as creating mock histograms or computing  * simple metrics  */
end_comment

begin_class
DECL|class|ReducerHelperTests
specifier|public
class|class
name|ReducerHelperTests
extends|extends
name|ElasticsearchTestCase
block|{
comment|/**      * Generates a mock histogram to use for testing.  Each MockBucket holds a doc count, key and document values      * which can later be used to compute metrics and compare against the real aggregation results.  Gappiness can be      * controlled via parameters      *      * @param interval          Interval between bucket keys      * @param size              Size of mock histogram to generate (in buckets)      * @param gapProbability    Probability of generating an empty bucket. 0.0-1.0 inclusive      * @param runProbability    Probability of extending a gap once one has been created.  0.0-1.0 inclusive      * @return      */
DECL|method|generateHistogram
specifier|public
specifier|static
name|ArrayList
argument_list|<
name|MockBucket
argument_list|>
name|generateHistogram
parameter_list|(
name|int
name|interval
parameter_list|,
name|int
name|size
parameter_list|,
name|double
name|gapProbability
parameter_list|,
name|double
name|runProbability
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|MockBucket
argument_list|>
name|values
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|size
argument_list|)
decl_stmt|;
name|boolean
name|lastWasGap
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|MockBucket
name|bucket
init|=
operator|new
name|MockBucket
argument_list|()
decl_stmt|;
if|if
condition|(
name|randomDouble
argument_list|()
operator|<
name|gapProbability
condition|)
block|{
comment|// start a gap
name|bucket
operator|.
name|count
operator|=
literal|0
expr_stmt|;
name|bucket
operator|.
name|docValues
operator|=
operator|new
name|double
index|[
literal|0
index|]
expr_stmt|;
name|lastWasGap
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|lastWasGap
operator|&&
name|randomDouble
argument_list|()
operator|<
name|runProbability
condition|)
block|{
comment|// add to the existing gap
name|bucket
operator|.
name|count
operator|=
literal|0
expr_stmt|;
name|bucket
operator|.
name|docValues
operator|=
operator|new
name|double
index|[
literal|0
index|]
expr_stmt|;
name|lastWasGap
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|bucket
operator|.
name|count
operator|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|bucket
operator|.
name|docValues
operator|=
operator|new
name|double
index|[
name|bucket
operator|.
name|count
index|]
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|bucket
operator|.
name|count
condition|;
name|j
operator|++
control|)
block|{
name|bucket
operator|.
name|docValues
index|[
name|j
index|]
operator|=
name|randomDouble
argument_list|()
operator|*
name|randomIntBetween
argument_list|(
operator|-
literal|20
argument_list|,
literal|20
argument_list|)
expr_stmt|;
block|}
name|lastWasGap
operator|=
literal|false
expr_stmt|;
block|}
name|bucket
operator|.
name|key
operator|=
name|i
operator|*
name|interval
expr_stmt|;
name|values
operator|.
name|add
argument_list|(
name|bucket
argument_list|)
expr_stmt|;
block|}
return|return
name|values
return|;
block|}
comment|/**      * Simple mock bucket container      */
DECL|class|MockBucket
specifier|public
specifier|static
class|class
name|MockBucket
block|{
DECL|field|count
specifier|public
name|int
name|count
decl_stmt|;
DECL|field|docValues
specifier|public
name|double
index|[]
name|docValues
decl_stmt|;
DECL|field|key
specifier|public
name|long
name|key
decl_stmt|;
block|}
comment|/**      * Computes a simple agg metric (min, sum, etc) from the provided values      *      * @param values Array of values to compute metric for      * @param metric A metric builder which defines what kind of metric should be returned for the values      * @return      */
DECL|method|calculateMetric
specifier|public
specifier|static
name|double
name|calculateMetric
parameter_list|(
name|double
index|[]
name|values
parameter_list|,
name|ValuesSourceMetricsAggregationBuilder
name|metric
parameter_list|)
block|{
if|if
condition|(
name|metric
operator|instanceof
name|MinBuilder
condition|)
block|{
name|double
name|accumulator
init|=
name|Double
operator|.
name|POSITIVE_INFINITY
decl_stmt|;
for|for
control|(
name|double
name|value
range|:
name|values
control|)
block|{
name|accumulator
operator|=
name|Math
operator|.
name|min
argument_list|(
name|accumulator
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|accumulator
return|;
block|}
elseif|else
if|if
condition|(
name|metric
operator|instanceof
name|MaxBuilder
condition|)
block|{
name|double
name|accumulator
init|=
name|Double
operator|.
name|NEGATIVE_INFINITY
decl_stmt|;
for|for
control|(
name|double
name|value
range|:
name|values
control|)
block|{
name|accumulator
operator|=
name|Math
operator|.
name|max
argument_list|(
name|accumulator
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|accumulator
return|;
block|}
elseif|else
if|if
condition|(
name|metric
operator|instanceof
name|SumBuilder
condition|)
block|{
name|double
name|accumulator
init|=
literal|0
decl_stmt|;
for|for
control|(
name|double
name|value
range|:
name|values
control|)
block|{
name|accumulator
operator|+=
name|value
expr_stmt|;
block|}
return|return
name|accumulator
return|;
block|}
elseif|else
if|if
condition|(
name|metric
operator|instanceof
name|AvgBuilder
condition|)
block|{
name|double
name|accumulator
init|=
literal|0
decl_stmt|;
for|for
control|(
name|double
name|value
range|:
name|values
control|)
block|{
name|accumulator
operator|+=
name|value
expr_stmt|;
block|}
return|return
name|accumulator
operator|/
name|values
operator|.
name|length
return|;
block|}
return|return
literal|0.0
return|;
block|}
block|}
end_class

end_unit

