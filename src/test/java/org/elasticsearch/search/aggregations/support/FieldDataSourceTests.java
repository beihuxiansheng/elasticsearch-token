begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations.support
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|support
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|AtomicReaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Scorer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|BytesValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|SearchScript
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|lessThan
import|;
end_import

begin_class
DECL|class|FieldDataSourceTests
specifier|public
class|class
name|FieldDataSourceTests
extends|extends
name|ElasticsearchTestCase
block|{
DECL|method|randomBytesValues
specifier|private
specifier|static
name|BytesValues
name|randomBytesValues
parameter_list|()
block|{
specifier|final
name|boolean
name|multiValued
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
specifier|final
name|int
name|maxLength
init|=
name|rarely
argument_list|()
condition|?
literal|3
else|:
literal|10
decl_stmt|;
return|return
operator|new
name|BytesValues
argument_list|(
name|multiValued
argument_list|)
block|{
specifier|private
specifier|final
name|BytesRef
name|scratch
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
name|BytesRef
name|previous
decl_stmt|;
annotation|@
name|Override
specifier|public
name|int
name|setDocument
parameter_list|(
name|int
name|docId
parameter_list|)
block|{
return|return
name|randomInt
argument_list|(
name|multiValued
condition|?
literal|10
else|:
literal|1
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|BytesRef
name|nextValue
parameter_list|()
block|{
if|if
condition|(
name|previous
operator|!=
literal|null
operator|&&
name|randomBoolean
argument_list|()
condition|)
block|{
name|scratch
operator|.
name|copyBytes
argument_list|(
name|previous
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|scratch
operator|.
name|copyChars
argument_list|(
name|randomAsciiOfLength
argument_list|(
name|maxLength
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|previous
operator|=
name|BytesRef
operator|.
name|deepCopyOf
argument_list|(
name|scratch
argument_list|)
expr_stmt|;
return|return
name|scratch
return|;
block|}
block|}
return|;
block|}
DECL|method|randomScript
specifier|private
specifier|static
name|SearchScript
name|randomScript
parameter_list|()
block|{
return|return
operator|new
name|SearchScript
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|setNextVar
parameter_list|(
name|String
name|name
parameter_list|,
name|Object
name|value
parameter_list|)
block|{             }
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
block|{
return|return
name|randomAsciiOfLength
argument_list|(
literal|5
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|unwrap
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
return|return
name|value
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setNextReader
parameter_list|(
name|AtomicReaderContext
name|reader
parameter_list|)
block|{             }
annotation|@
name|Override
specifier|public
name|void
name|setScorer
parameter_list|(
name|Scorer
name|scorer
parameter_list|)
block|{             }
annotation|@
name|Override
specifier|public
name|void
name|setNextDocId
parameter_list|(
name|int
name|doc
parameter_list|)
block|{             }
annotation|@
name|Override
specifier|public
name|void
name|setNextSource
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|source
parameter_list|)
block|{             }
annotation|@
name|Override
specifier|public
name|void
name|setNextScore
parameter_list|(
name|float
name|score
parameter_list|)
block|{             }
annotation|@
name|Override
specifier|public
name|float
name|runAsFloat
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|runAsLong
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|double
name|runAsDouble
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
return|;
block|}
annotation|@
name|Test
DECL|method|sortedUniqueBytesValues
specifier|public
name|void
name|sortedUniqueBytesValues
parameter_list|()
block|{
name|assertSortedAndUnique
argument_list|(
operator|new
name|ValuesSource
operator|.
name|Bytes
operator|.
name|SortedAndUnique
operator|.
name|SortedUniqueBytesValues
argument_list|(
name|randomBytesValues
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertSortedAndUnique
specifier|private
specifier|static
name|void
name|assertSortedAndUnique
parameter_list|(
name|BytesValues
name|values
parameter_list|)
block|{
specifier|final
name|int
name|numDocs
init|=
name|scaledRandomIntBetween
argument_list|(
literal|10
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|BytesRef
argument_list|>
name|ref
init|=
operator|new
name|ArrayList
argument_list|<
name|BytesRef
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|int
name|valueCount
init|=
name|values
operator|.
name|setDocument
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|ref
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|valueCount
condition|;
operator|++
name|j
control|)
block|{
specifier|final
name|BytesRef
name|term
init|=
name|values
operator|.
name|nextValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|j
operator|>
literal|0
condition|)
block|{
name|assertThat
argument_list|(
name|BytesRef
operator|.
name|getUTF8SortedAsUnicodeComparator
argument_list|()
operator|.
name|compare
argument_list|(
name|ref
operator|.
name|get
argument_list|(
name|ref
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|,
name|term
argument_list|)
argument_list|,
name|lessThan
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ref
operator|.
name|add
argument_list|(
name|BytesRef
operator|.
name|deepCopyOf
argument_list|(
name|term
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

