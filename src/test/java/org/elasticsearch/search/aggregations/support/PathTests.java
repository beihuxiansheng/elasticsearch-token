begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations.support
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|support
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregationExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|PathTests
specifier|public
class|class
name|PathTests
extends|extends
name|ElasticsearchTestCase
block|{
annotation|@
name|Test
DECL|method|testInvalidPaths
specifier|public
name|void
name|testInvalidPaths
parameter_list|()
throws|throws
name|Exception
block|{
name|assertInvalidPath
argument_list|(
literal|"[foo]"
argument_list|,
literal|"brackets at the beginning of the token expression"
argument_list|)
expr_stmt|;
name|assertInvalidPath
argument_list|(
literal|"foo[bar"
argument_list|,
literal|"open brackets without closing at the token expression"
argument_list|)
expr_stmt|;
name|assertInvalidPath
argument_list|(
literal|"foo["
argument_list|,
literal|"open bracket at the end of the token expression"
argument_list|)
expr_stmt|;
name|assertInvalidPath
argument_list|(
literal|"foo[]"
argument_list|,
literal|"empty brackets in the token expression"
argument_list|)
expr_stmt|;
name|assertInvalidPath
argument_list|(
literal|"foo[bar]baz"
argument_list|,
literal|"brackets not enclosing at the end of the token expression"
argument_list|)
expr_stmt|;
name|assertInvalidPath
argument_list|(
literal|".foo"
argument_list|,
literal|"dot separator at the beginning of the token expression"
argument_list|)
expr_stmt|;
name|assertInvalidPath
argument_list|(
literal|"foo."
argument_list|,
literal|"dot separator at the end of the token expression"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testValidPaths
specifier|public
name|void
name|testValidPaths
parameter_list|()
throws|throws
name|Exception
block|{
name|assertValidPath
argument_list|(
literal|"foo>bar"
argument_list|,
name|tokens
argument_list|()
operator|.
name|add
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|add
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertValidPath
argument_list|(
literal|"foo.bar"
argument_list|,
name|tokens
argument_list|()
operator|.
name|add
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertValidPath
argument_list|(
literal|"foo[bar]"
argument_list|,
name|tokens
argument_list|()
operator|.
name|add
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertValidPath
argument_list|(
literal|"foo[bar]>baz"
argument_list|,
name|tokens
argument_list|()
operator|.
name|add
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
operator|.
name|add
argument_list|(
literal|"baz"
argument_list|)
argument_list|)
expr_stmt|;
name|assertValidPath
argument_list|(
literal|"foo[bar]>baz[qux]"
argument_list|,
name|tokens
argument_list|()
operator|.
name|add
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
operator|.
name|add
argument_list|(
literal|"baz"
argument_list|,
literal|"qux"
argument_list|)
argument_list|)
expr_stmt|;
name|assertValidPath
argument_list|(
literal|"foo[bar]>baz.qux"
argument_list|,
name|tokens
argument_list|()
operator|.
name|add
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
operator|.
name|add
argument_list|(
literal|"baz"
argument_list|,
literal|"qux"
argument_list|)
argument_list|)
expr_stmt|;
name|assertValidPath
argument_list|(
literal|"foo.bar>baz.qux"
argument_list|,
name|tokens
argument_list|()
operator|.
name|add
argument_list|(
literal|"foo.bar"
argument_list|)
operator|.
name|add
argument_list|(
literal|"baz"
argument_list|,
literal|"qux"
argument_list|)
argument_list|)
expr_stmt|;
name|assertValidPath
argument_list|(
literal|"foo.bar>baz[qux]"
argument_list|,
name|tokens
argument_list|()
operator|.
name|add
argument_list|(
literal|"foo.bar"
argument_list|)
operator|.
name|add
argument_list|(
literal|"baz"
argument_list|,
literal|"qux"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertInvalidPath
specifier|private
name|void
name|assertInvalidPath
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|reason
parameter_list|)
block|{
try|try
block|{
name|OrderPath
operator|.
name|parse
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected parsing path ["
operator|+
name|path
operator|+
literal|"] to fail - "
operator|+
name|reason
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AggregationExecutionException
name|aee
parameter_list|)
block|{
comment|// expected
block|}
block|}
DECL|method|assertValidPath
specifier|private
name|void
name|assertValidPath
parameter_list|(
name|String
name|path
parameter_list|,
name|Tokens
name|tokenz
parameter_list|)
block|{
name|OrderPath
operator|.
name|Token
index|[]
name|tokens
init|=
name|tokenz
operator|.
name|toArray
argument_list|()
decl_stmt|;
name|OrderPath
name|p
init|=
name|OrderPath
operator|.
name|parse
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|p
operator|.
name|tokens
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
name|tokens
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|p
operator|.
name|tokens
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|OrderPath
operator|.
name|Token
name|t1
init|=
name|p
operator|.
name|tokens
index|[
name|i
index|]
decl_stmt|;
name|OrderPath
operator|.
name|Token
name|t2
init|=
name|tokens
index|[
name|i
index|]
decl_stmt|;
name|assertThat
argument_list|(
name|t1
argument_list|,
name|equalTo
argument_list|(
name|t2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|tokens
specifier|private
specifier|static
name|Tokens
name|tokens
parameter_list|()
block|{
return|return
operator|new
name|Tokens
argument_list|()
return|;
block|}
DECL|class|Tokens
specifier|private
specifier|static
class|class
name|Tokens
block|{
DECL|field|tokens
specifier|private
name|List
argument_list|<
name|OrderPath
operator|.
name|Token
argument_list|>
name|tokens
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|add
name|Tokens
name|add
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|tokens
operator|.
name|add
argument_list|(
operator|new
name|OrderPath
operator|.
name|Token
argument_list|(
name|name
argument_list|,
name|name
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|add
name|Tokens
name|add
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|key
parameter_list|)
block|{
if|if
condition|(
name|Math
operator|.
name|random
argument_list|()
operator|>
literal|0.5
condition|)
block|{
name|tokens
operator|.
name|add
argument_list|(
operator|new
name|OrderPath
operator|.
name|Token
argument_list|(
name|name
operator|+
literal|"."
operator|+
name|key
argument_list|,
name|name
argument_list|,
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|tokens
operator|.
name|add
argument_list|(
operator|new
name|OrderPath
operator|.
name|Token
argument_list|(
name|name
operator|+
literal|"["
operator|+
name|key
operator|+
literal|"]"
argument_list|,
name|name
argument_list|,
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
DECL|method|toArray
name|OrderPath
operator|.
name|Token
index|[]
name|toArray
parameter_list|()
block|{
return|return
name|tokens
operator|.
name|toArray
argument_list|(
operator|new
name|OrderPath
operator|.
name|Token
index|[
name|tokens
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

