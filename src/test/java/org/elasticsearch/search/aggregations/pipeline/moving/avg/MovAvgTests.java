begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations.pipeline.moving.avg
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
operator|.
name|moving
operator|.
name|avg
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|EvictingQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|index
operator|.
name|IndexRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchPhaseExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|RangeQueryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|filter
operator|.
name|InternalFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|histogram
operator|.
name|Histogram
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|histogram
operator|.
name|InternalHistogram
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|histogram
operator|.
name|InternalHistogram
operator|.
name|Bucket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|metrics
operator|.
name|ValuesSourceMetricsAggregationBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|metrics
operator|.
name|avg
operator|.
name|Avg
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
operator|.
name|BucketHelpers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
operator|.
name|PipelineAggregationHelperTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
operator|.
name|SimpleValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
operator|.
name|movavg
operator|.
name|models
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchIntegrationTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
operator|.
name|jsonBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregationBuilders
operator|.
name|avg
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregationBuilders
operator|.
name|filter
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregationBuilders
operator|.
name|histogram
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregationBuilders
operator|.
name|max
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregationBuilders
operator|.
name|min
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregationBuilders
operator|.
name|range
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
operator|.
name|PipelineAggregatorBuilders
operator|.
name|movingAvg
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertSearchResponse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|closeTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|greaterThanOrEqualTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|lessThanOrEqualTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|core
operator|.
name|IsNull
operator|.
name|notNullValue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|core
operator|.
name|IsNull
operator|.
name|nullValue
import|;
end_import

begin_class
annotation|@
name|ElasticsearchIntegrationTest
operator|.
name|SuiteScopeTest
DECL|class|MovAvgTests
specifier|public
class|class
name|MovAvgTests
extends|extends
name|ElasticsearchIntegrationTest
block|{
DECL|field|INTERVAL_FIELD
specifier|private
specifier|static
specifier|final
name|String
name|INTERVAL_FIELD
init|=
literal|"l_value"
decl_stmt|;
DECL|field|VALUE_FIELD
specifier|private
specifier|static
specifier|final
name|String
name|VALUE_FIELD
init|=
literal|"v_value"
decl_stmt|;
DECL|field|GAP_FIELD
specifier|private
specifier|static
specifier|final
name|String
name|GAP_FIELD
init|=
literal|"g_value"
decl_stmt|;
DECL|field|interval
specifier|static
name|int
name|interval
decl_stmt|;
DECL|field|numBuckets
specifier|static
name|int
name|numBuckets
decl_stmt|;
DECL|field|windowSize
specifier|static
name|int
name|windowSize
decl_stmt|;
DECL|field|alpha
specifier|static
name|double
name|alpha
decl_stmt|;
DECL|field|beta
specifier|static
name|double
name|beta
decl_stmt|;
DECL|field|gamma
specifier|static
name|double
name|gamma
decl_stmt|;
DECL|field|period
specifier|static
name|int
name|period
decl_stmt|;
DECL|field|seasonalityType
specifier|static
name|HoltWintersModel
operator|.
name|SeasonalityType
name|seasonalityType
decl_stmt|;
DECL|field|gapPolicy
specifier|static
name|BucketHelpers
operator|.
name|GapPolicy
name|gapPolicy
decl_stmt|;
DECL|field|metric
specifier|static
name|ValuesSourceMetricsAggregationBuilder
name|metric
decl_stmt|;
DECL|field|mockHisto
specifier|static
name|List
argument_list|<
name|PipelineAggregationHelperTests
operator|.
name|MockBucket
argument_list|>
name|mockHisto
decl_stmt|;
DECL|field|testValues
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|ArrayList
argument_list|<
name|Double
argument_list|>
argument_list|>
name|testValues
decl_stmt|;
DECL|enum|MovAvgType
enum|enum
name|MovAvgType
block|{
DECL|enum constant|SIMPLE
DECL|enum constant|LINEAR
DECL|enum constant|EWMA
DECL|enum constant|HOLT
DECL|enum constant|HOLT_WINTERS
name|SIMPLE
argument_list|(
literal|"simple"
argument_list|)
block|,
name|LINEAR
argument_list|(
literal|"linear"
argument_list|)
block|,
name|EWMA
argument_list|(
literal|"ewma"
argument_list|)
block|,
name|HOLT
argument_list|(
literal|"holt"
argument_list|)
block|,
name|HOLT_WINTERS
argument_list|(
literal|"holt_winters"
argument_list|)
block|;
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
DECL|method|MovAvgType
name|MovAvgType
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|name
operator|=
name|s
expr_stmt|;
block|}
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|name
return|;
block|}
block|}
DECL|enum|MetricTarget
enum|enum
name|MetricTarget
block|{
DECL|enum constant|VALUE
DECL|enum constant|COUNT
name|VALUE
argument_list|(
literal|"value"
argument_list|)
block|,
name|COUNT
argument_list|(
literal|"count"
argument_list|)
block|;
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
DECL|method|MetricTarget
name|MetricTarget
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|name
operator|=
name|s
expr_stmt|;
block|}
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|name
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|setupSuiteScopeCluster
specifier|public
name|void
name|setupSuiteScopeCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|createIndex
argument_list|(
literal|"idx"
argument_list|)
expr_stmt|;
name|createIndex
argument_list|(
literal|"idx_unmapped"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|IndexRequestBuilder
argument_list|>
name|builders
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|interval
operator|=
literal|5
expr_stmt|;
name|numBuckets
operator|=
name|randomIntBetween
argument_list|(
literal|6
argument_list|,
literal|80
argument_list|)
expr_stmt|;
name|period
operator|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|windowSize
operator|=
name|randomIntBetween
argument_list|(
name|period
operator|*
literal|2
argument_list|,
literal|10
argument_list|)
expr_stmt|;
comment|// start must be 2*period to play nice with HW
name|alpha
operator|=
name|randomDouble
argument_list|()
expr_stmt|;
name|beta
operator|=
name|randomDouble
argument_list|()
expr_stmt|;
name|gamma
operator|=
name|randomDouble
argument_list|()
expr_stmt|;
name|seasonalityType
operator|=
name|randomBoolean
argument_list|()
condition|?
name|HoltWintersModel
operator|.
name|SeasonalityType
operator|.
name|ADDITIVE
else|:
name|HoltWintersModel
operator|.
name|SeasonalityType
operator|.
name|MULTIPLICATIVE
expr_stmt|;
name|gapPolicy
operator|=
name|randomBoolean
argument_list|()
condition|?
name|BucketHelpers
operator|.
name|GapPolicy
operator|.
name|SKIP
else|:
name|BucketHelpers
operator|.
name|GapPolicy
operator|.
name|INSERT_ZEROS
expr_stmt|;
name|metric
operator|=
name|randomMetric
argument_list|(
literal|"the_metric"
argument_list|,
name|VALUE_FIELD
argument_list|)
expr_stmt|;
name|mockHisto
operator|=
name|PipelineAggregationHelperTests
operator|.
name|generateHistogram
argument_list|(
name|interval
argument_list|,
name|numBuckets
argument_list|,
name|randomDouble
argument_list|()
argument_list|,
name|randomDouble
argument_list|()
argument_list|)
expr_stmt|;
name|testValues
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
literal|8
argument_list|)
expr_stmt|;
for|for
control|(
name|MovAvgType
name|type
range|:
name|MovAvgType
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|MetricTarget
name|target
range|:
name|MetricTarget
operator|.
name|values
argument_list|()
control|)
block|{
name|setupExpected
argument_list|(
name|type
argument_list|,
name|target
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|PipelineAggregationHelperTests
operator|.
name|MockBucket
name|mockBucket
range|:
name|mockHisto
control|)
block|{
for|for
control|(
name|double
name|value
range|:
name|mockBucket
operator|.
name|docValues
control|)
block|{
name|builders
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"idx"
argument_list|,
literal|"type"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
name|INTERVAL_FIELD
argument_list|,
name|mockBucket
operator|.
name|key
argument_list|)
operator|.
name|field
argument_list|(
name|VALUE_FIELD
argument_list|,
name|value
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Used for specially crafted gap tests
name|builders
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"idx"
argument_list|,
literal|"gap_type"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
name|INTERVAL_FIELD
argument_list|,
literal|0
argument_list|)
operator|.
name|field
argument_list|(
name|GAP_FIELD
argument_list|,
literal|1
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|builders
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"idx"
argument_list|,
literal|"gap_type"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
name|INTERVAL_FIELD
argument_list|,
literal|49
argument_list|)
operator|.
name|field
argument_list|(
name|GAP_FIELD
argument_list|,
literal|1
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
operator|-
literal|10
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|builders
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"neg_idx"
argument_list|,
literal|"type"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
name|INTERVAL_FIELD
argument_list|,
name|i
argument_list|)
operator|.
name|field
argument_list|(
name|VALUE_FIELD
argument_list|,
literal|10
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|builders
argument_list|)
expr_stmt|;
name|ensureSearchable
argument_list|()
expr_stmt|;
block|}
comment|/**      * Calculates the moving averages for a specific (model, target) tuple based on the previously generated mock histogram.      * Computed values are stored in the testValues map.      *      * @param type      The moving average model to use      * @param target    The document field "target", e.g. _count or a field value      */
DECL|method|setupExpected
specifier|private
name|void
name|setupExpected
parameter_list|(
name|MovAvgType
name|type
parameter_list|,
name|MetricTarget
name|target
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|Double
argument_list|>
name|values
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|numBuckets
argument_list|)
decl_stmt|;
name|EvictingQueue
argument_list|<
name|Double
argument_list|>
name|window
init|=
name|EvictingQueue
operator|.
name|create
argument_list|(
name|windowSize
argument_list|)
decl_stmt|;
for|for
control|(
name|PipelineAggregationHelperTests
operator|.
name|MockBucket
name|mockBucket
range|:
name|mockHisto
control|)
block|{
name|double
name|metricValue
decl_stmt|;
name|double
index|[]
name|docValues
init|=
name|mockBucket
operator|.
name|docValues
decl_stmt|;
comment|// Gaps only apply to metric values, not doc _counts
if|if
condition|(
name|mockBucket
operator|.
name|count
operator|==
literal|0
operator|&&
name|target
operator|.
name|equals
argument_list|(
name|MetricTarget
operator|.
name|VALUE
argument_list|)
condition|)
block|{
comment|// If there was a gap in doc counts and we are ignoring, just skip this bucket
if|if
condition|(
name|gapPolicy
operator|.
name|equals
argument_list|(
name|BucketHelpers
operator|.
name|GapPolicy
operator|.
name|SKIP
argument_list|)
condition|)
block|{
name|values
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
continue|continue;
block|}
elseif|else
if|if
condition|(
name|gapPolicy
operator|.
name|equals
argument_list|(
name|BucketHelpers
operator|.
name|GapPolicy
operator|.
name|INSERT_ZEROS
argument_list|)
condition|)
block|{
comment|// otherwise insert a zero instead of the true value
name|metricValue
operator|=
literal|0.0
expr_stmt|;
block|}
else|else
block|{
name|metricValue
operator|=
name|PipelineAggregationHelperTests
operator|.
name|calculateMetric
argument_list|(
name|docValues
argument_list|,
name|metric
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// If this isn't a gap, or is a _count, just insert the value
name|metricValue
operator|=
name|target
operator|.
name|equals
argument_list|(
name|MetricTarget
operator|.
name|VALUE
argument_list|)
condition|?
name|PipelineAggregationHelperTests
operator|.
name|calculateMetric
argument_list|(
name|docValues
argument_list|,
name|metric
argument_list|)
else|:
name|mockBucket
operator|.
name|count
expr_stmt|;
block|}
name|window
operator|.
name|offer
argument_list|(
name|metricValue
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|SIMPLE
case|:
name|values
operator|.
name|add
argument_list|(
name|simple
argument_list|(
name|window
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|LINEAR
case|:
name|values
operator|.
name|add
argument_list|(
name|linear
argument_list|(
name|window
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|EWMA
case|:
name|values
operator|.
name|add
argument_list|(
name|ewma
argument_list|(
name|window
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|HOLT
case|:
name|values
operator|.
name|add
argument_list|(
name|holt
argument_list|(
name|window
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|HOLT_WINTERS
case|:
comment|// HW needs at least 2 periods of data to start
if|if
condition|(
name|window
operator|.
name|size
argument_list|()
operator|>=
name|period
operator|*
literal|2
condition|)
block|{
name|values
operator|.
name|add
argument_list|(
name|holtWinters
argument_list|(
name|window
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|values
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
name|testValues
operator|.
name|put
argument_list|(
name|type
operator|.
name|toString
argument_list|()
operator|+
literal|"_"
operator|+
name|target
operator|.
name|toString
argument_list|()
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
comment|/**      * Simple, unweighted moving average      *      * @param window Window of values to compute movavg for      * @return      */
DECL|method|simple
specifier|private
name|double
name|simple
parameter_list|(
name|Collection
argument_list|<
name|Double
argument_list|>
name|window
parameter_list|)
block|{
name|double
name|movAvg
init|=
literal|0
decl_stmt|;
for|for
control|(
name|double
name|value
range|:
name|window
control|)
block|{
name|movAvg
operator|+=
name|value
expr_stmt|;
block|}
name|movAvg
operator|/=
name|window
operator|.
name|size
argument_list|()
expr_stmt|;
return|return
name|movAvg
return|;
block|}
comment|/**      * Linearly weighted moving avg      *      * @param window Window of values to compute movavg for      * @return      */
DECL|method|linear
specifier|private
name|double
name|linear
parameter_list|(
name|Collection
argument_list|<
name|Double
argument_list|>
name|window
parameter_list|)
block|{
name|double
name|avg
init|=
literal|0
decl_stmt|;
name|long
name|totalWeight
init|=
literal|1
decl_stmt|;
name|long
name|current
init|=
literal|1
decl_stmt|;
for|for
control|(
name|double
name|value
range|:
name|window
control|)
block|{
name|avg
operator|+=
name|value
operator|*
name|current
expr_stmt|;
name|totalWeight
operator|+=
name|current
expr_stmt|;
name|current
operator|+=
literal|1
expr_stmt|;
block|}
return|return
name|avg
operator|/
name|totalWeight
return|;
block|}
comment|/**      * Exponentionally weighted (EWMA, Single exponential) moving avg      *      * @param window Window of values to compute movavg for      * @return      */
DECL|method|ewma
specifier|private
name|double
name|ewma
parameter_list|(
name|Collection
argument_list|<
name|Double
argument_list|>
name|window
parameter_list|)
block|{
name|double
name|avg
init|=
literal|0
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|double
name|value
range|:
name|window
control|)
block|{
if|if
condition|(
name|first
condition|)
block|{
name|avg
operator|=
name|value
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|avg
operator|=
operator|(
name|value
operator|*
name|alpha
operator|)
operator|+
operator|(
name|avg
operator|*
operator|(
literal|1
operator|-
name|alpha
operator|)
operator|)
expr_stmt|;
block|}
block|}
return|return
name|avg
return|;
block|}
comment|/**      * Holt-Linear (Double exponential) moving avg      * @param window Window of values to compute movavg for      * @return      */
DECL|method|holt
specifier|private
name|double
name|holt
parameter_list|(
name|Collection
argument_list|<
name|Double
argument_list|>
name|window
parameter_list|)
block|{
name|double
name|s
init|=
literal|0
decl_stmt|;
name|double
name|last_s
init|=
literal|0
decl_stmt|;
comment|// Trend value
name|double
name|b
init|=
literal|0
decl_stmt|;
name|double
name|last_b
init|=
literal|0
decl_stmt|;
name|int
name|counter
init|=
literal|0
decl_stmt|;
name|double
name|last
decl_stmt|;
for|for
control|(
name|double
name|value
range|:
name|window
control|)
block|{
name|last
operator|=
name|value
expr_stmt|;
if|if
condition|(
name|counter
operator|==
literal|1
condition|)
block|{
name|s
operator|=
name|value
expr_stmt|;
name|b
operator|=
name|value
operator|-
name|last
expr_stmt|;
block|}
else|else
block|{
name|s
operator|=
name|alpha
operator|*
name|value
operator|+
operator|(
literal|1.0d
operator|-
name|alpha
operator|)
operator|*
operator|(
name|last_s
operator|+
name|last_b
operator|)
expr_stmt|;
name|b
operator|=
name|beta
operator|*
operator|(
name|s
operator|-
name|last_s
operator|)
operator|+
operator|(
literal|1
operator|-
name|beta
operator|)
operator|*
name|last_b
expr_stmt|;
block|}
name|counter
operator|+=
literal|1
expr_stmt|;
name|last_s
operator|=
name|s
expr_stmt|;
name|last_b
operator|=
name|b
expr_stmt|;
block|}
return|return
name|s
operator|+
operator|(
literal|0
operator|*
name|b
operator|)
return|;
block|}
comment|/**      * Holt winters (triple exponential) moving avg      * @param window Window of values to compute movavg for      * @return      */
DECL|method|holtWinters
specifier|private
name|double
name|holtWinters
parameter_list|(
name|Collection
argument_list|<
name|Double
argument_list|>
name|window
parameter_list|)
block|{
comment|// Smoothed value
name|double
name|s
init|=
literal|0
decl_stmt|;
name|double
name|last_s
init|=
literal|0
decl_stmt|;
comment|// Trend value
name|double
name|b
init|=
literal|0
decl_stmt|;
name|double
name|last_b
init|=
literal|0
decl_stmt|;
comment|// Seasonal value
name|double
index|[]
name|seasonal
init|=
operator|new
name|double
index|[
name|window
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|double
name|padding
init|=
name|seasonalityType
operator|.
name|equals
argument_list|(
name|HoltWintersModel
operator|.
name|SeasonalityType
operator|.
name|MULTIPLICATIVE
argument_list|)
condition|?
literal|0.0000000001
else|:
literal|0
decl_stmt|;
name|int
name|counter
init|=
literal|0
decl_stmt|;
name|double
index|[]
name|vs
init|=
operator|new
name|double
index|[
name|window
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|double
name|v
range|:
name|window
control|)
block|{
name|vs
index|[
name|counter
index|]
operator|=
name|v
operator|+
name|padding
expr_stmt|;
name|counter
operator|+=
literal|1
expr_stmt|;
block|}
comment|// Initial level value is average of first season
comment|// Calculate the slopes between first and second season for each period
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|period
condition|;
name|i
operator|++
control|)
block|{
name|s
operator|+=
name|vs
index|[
name|i
index|]
expr_stmt|;
name|b
operator|+=
operator|(
name|vs
index|[
name|i
index|]
operator|-
name|vs
index|[
name|i
operator|+
name|period
index|]
operator|)
operator|/
literal|2
expr_stmt|;
block|}
name|s
operator|/=
operator|(
name|double
operator|)
name|period
expr_stmt|;
name|b
operator|/=
operator|(
name|double
operator|)
name|period
expr_stmt|;
name|last_s
operator|=
name|s
expr_stmt|;
name|last_b
operator|=
name|b
expr_stmt|;
comment|// Calculate first seasonal
if|if
condition|(
name|Double
operator|.
name|compare
argument_list|(
name|s
argument_list|,
literal|0.0
argument_list|)
operator|==
literal|0
operator|||
name|Double
operator|.
name|compare
argument_list|(
name|s
argument_list|,
operator|-
literal|0.0
argument_list|)
operator|==
literal|0
condition|)
block|{
name|Arrays
operator|.
name|fill
argument_list|(
name|seasonal
argument_list|,
literal|0.0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|period
condition|;
name|i
operator|++
control|)
block|{
name|seasonal
index|[
name|i
index|]
operator|=
name|vs
index|[
name|i
index|]
operator|/
name|s
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
name|period
init|;
name|i
operator|<
name|vs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|seasonalityType
operator|.
name|equals
argument_list|(
name|HoltWintersModel
operator|.
name|SeasonalityType
operator|.
name|MULTIPLICATIVE
argument_list|)
condition|)
block|{
name|s
operator|=
name|alpha
operator|*
operator|(
name|vs
index|[
name|i
index|]
operator|/
name|seasonal
index|[
name|i
operator|-
name|period
index|]
operator|)
operator|+
operator|(
literal|1.0d
operator|-
name|alpha
operator|)
operator|*
operator|(
name|last_s
operator|+
name|last_b
operator|)
expr_stmt|;
block|}
else|else
block|{
name|s
operator|=
name|alpha
operator|*
operator|(
name|vs
index|[
name|i
index|]
operator|-
name|seasonal
index|[
name|i
operator|-
name|period
index|]
operator|)
operator|+
operator|(
literal|1.0d
operator|-
name|alpha
operator|)
operator|*
operator|(
name|last_s
operator|+
name|last_b
operator|)
expr_stmt|;
block|}
name|b
operator|=
name|beta
operator|*
operator|(
name|s
operator|-
name|last_s
operator|)
operator|+
operator|(
literal|1
operator|-
name|beta
operator|)
operator|*
name|last_b
expr_stmt|;
if|if
condition|(
name|seasonalityType
operator|.
name|equals
argument_list|(
name|HoltWintersModel
operator|.
name|SeasonalityType
operator|.
name|MULTIPLICATIVE
argument_list|)
condition|)
block|{
name|seasonal
index|[
name|i
index|]
operator|=
name|gamma
operator|*
operator|(
name|vs
index|[
name|i
index|]
operator|/
operator|(
name|last_s
operator|+
name|last_b
operator|)
operator|)
operator|+
operator|(
literal|1
operator|-
name|gamma
operator|)
operator|*
name|seasonal
index|[
name|i
operator|-
name|period
index|]
expr_stmt|;
block|}
else|else
block|{
name|seasonal
index|[
name|i
index|]
operator|=
name|gamma
operator|*
operator|(
name|vs
index|[
name|i
index|]
operator|-
operator|(
name|last_s
operator|+
name|last_b
operator|)
operator|)
operator|+
operator|(
literal|1
operator|-
name|gamma
operator|)
operator|*
name|seasonal
index|[
name|i
operator|-
name|period
index|]
expr_stmt|;
block|}
name|last_s
operator|=
name|s
expr_stmt|;
name|last_b
operator|=
name|b
expr_stmt|;
block|}
name|int
name|seasonCounter
init|=
operator|(
name|window
operator|.
name|size
argument_list|()
operator|-
literal|1
operator|)
operator|-
name|period
decl_stmt|;
if|if
condition|(
name|seasonalityType
operator|.
name|equals
argument_list|(
name|HoltWintersModel
operator|.
name|SeasonalityType
operator|.
name|MULTIPLICATIVE
argument_list|)
condition|)
block|{
return|return
name|s
operator|+
operator|(
literal|0
operator|*
name|b
operator|)
operator|*
name|seasonal
index|[
name|seasonCounter
operator|%
name|window
operator|.
name|size
argument_list|()
index|]
return|;
block|}
else|else
block|{
return|return
name|s
operator|+
operator|(
literal|0
operator|*
name|b
operator|)
operator|+
name|seasonal
index|[
name|seasonCounter
operator|%
name|window
operator|.
name|size
argument_list|()
index|]
return|;
block|}
block|}
comment|/**      * test simple moving average on single value field      */
annotation|@
name|Test
DECL|method|simpleSingleValuedField
specifier|public
name|void
name|simpleSingleValuedField
parameter_list|()
block|{
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"type"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|histogram
argument_list|(
literal|"histo"
argument_list|)
operator|.
name|field
argument_list|(
name|INTERVAL_FIELD
argument_list|)
operator|.
name|interval
argument_list|(
name|interval
argument_list|)
operator|.
name|extendedBounds
argument_list|(
literal|0L
argument_list|,
call|(
name|long
call|)
argument_list|(
name|interval
operator|*
operator|(
name|numBuckets
operator|-
literal|1
operator|)
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|metric
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|movingAvg
argument_list|(
literal|"movavg_counts"
argument_list|)
operator|.
name|window
argument_list|(
name|windowSize
argument_list|)
operator|.
name|modelBuilder
argument_list|(
operator|new
name|SimpleModel
operator|.
name|SimpleModelBuilder
argument_list|()
argument_list|)
operator|.
name|gapPolicy
argument_list|(
name|gapPolicy
argument_list|)
operator|.
name|setBucketsPaths
argument_list|(
literal|"_count"
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|movingAvg
argument_list|(
literal|"movavg_values"
argument_list|)
operator|.
name|window
argument_list|(
name|windowSize
argument_list|)
operator|.
name|modelBuilder
argument_list|(
operator|new
name|SimpleModel
operator|.
name|SimpleModelBuilder
argument_list|()
argument_list|)
operator|.
name|gapPolicy
argument_list|(
name|gapPolicy
argument_list|)
operator|.
name|setBucketsPaths
argument_list|(
literal|"the_metric"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|InternalHistogram
argument_list|<
name|Bucket
argument_list|>
name|histo
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"histo"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|histo
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|histo
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"histo"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|Bucket
argument_list|>
name|buckets
init|=
name|histo
operator|.
name|getBuckets
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
literal|"Size of buckets array is not correct."
argument_list|,
name|buckets
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|mockHisto
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Double
argument_list|>
name|expectedCounts
init|=
name|testValues
operator|.
name|get
argument_list|(
name|MovAvgType
operator|.
name|SIMPLE
operator|.
name|toString
argument_list|()
operator|+
literal|"_"
operator|+
name|MetricTarget
operator|.
name|COUNT
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Double
argument_list|>
name|expectedValues
init|=
name|testValues
operator|.
name|get
argument_list|(
name|MovAvgType
operator|.
name|SIMPLE
operator|.
name|toString
argument_list|()
operator|+
literal|"_"
operator|+
name|MetricTarget
operator|.
name|VALUE
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|?
extends|extends
name|Histogram
operator|.
name|Bucket
argument_list|>
name|actualIter
init|=
name|buckets
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|PipelineAggregationHelperTests
operator|.
name|MockBucket
argument_list|>
name|expectedBucketIter
init|=
name|mockHisto
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Double
argument_list|>
name|expectedCountsIter
init|=
name|expectedCounts
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Double
argument_list|>
name|expectedValuesIter
init|=
name|expectedValues
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|actualIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|assertValidIterators
argument_list|(
name|expectedBucketIter
argument_list|,
name|expectedCountsIter
argument_list|,
name|expectedValuesIter
argument_list|)
expr_stmt|;
name|Histogram
operator|.
name|Bucket
name|actual
init|=
name|actualIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|PipelineAggregationHelperTests
operator|.
name|MockBucket
name|expected
init|=
name|expectedBucketIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|Double
name|expectedCount
init|=
name|expectedCountsIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|Double
name|expectedValue
init|=
name|expectedValuesIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
literal|"keys do not match"
argument_list|,
operator|(
operator|(
name|Number
operator|)
name|actual
operator|.
name|getKey
argument_list|()
operator|)
operator|.
name|longValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expected
operator|.
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"doc counts do not match"
argument_list|,
name|actual
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|(
name|long
operator|)
name|expected
operator|.
name|count
argument_list|)
argument_list|)
expr_stmt|;
name|assertBucketContents
argument_list|(
name|actual
argument_list|,
name|expectedCount
argument_list|,
name|expectedValue
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|linearSingleValuedField
specifier|public
name|void
name|linearSingleValuedField
parameter_list|()
block|{
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"type"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|histogram
argument_list|(
literal|"histo"
argument_list|)
operator|.
name|field
argument_list|(
name|INTERVAL_FIELD
argument_list|)
operator|.
name|interval
argument_list|(
name|interval
argument_list|)
operator|.
name|extendedBounds
argument_list|(
literal|0L
argument_list|,
call|(
name|long
call|)
argument_list|(
name|interval
operator|*
operator|(
name|numBuckets
operator|-
literal|1
operator|)
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|metric
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|movingAvg
argument_list|(
literal|"movavg_counts"
argument_list|)
operator|.
name|window
argument_list|(
name|windowSize
argument_list|)
operator|.
name|modelBuilder
argument_list|(
operator|new
name|LinearModel
operator|.
name|LinearModelBuilder
argument_list|()
argument_list|)
operator|.
name|gapPolicy
argument_list|(
name|gapPolicy
argument_list|)
operator|.
name|setBucketsPaths
argument_list|(
literal|"_count"
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|movingAvg
argument_list|(
literal|"movavg_values"
argument_list|)
operator|.
name|window
argument_list|(
name|windowSize
argument_list|)
operator|.
name|modelBuilder
argument_list|(
operator|new
name|LinearModel
operator|.
name|LinearModelBuilder
argument_list|()
argument_list|)
operator|.
name|gapPolicy
argument_list|(
name|gapPolicy
argument_list|)
operator|.
name|setBucketsPaths
argument_list|(
literal|"the_metric"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|InternalHistogram
argument_list|<
name|Bucket
argument_list|>
name|histo
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"histo"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|histo
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|histo
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"histo"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|Bucket
argument_list|>
name|buckets
init|=
name|histo
operator|.
name|getBuckets
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
literal|"Size of buckets array is not correct."
argument_list|,
name|buckets
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|mockHisto
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Double
argument_list|>
name|expectedCounts
init|=
name|testValues
operator|.
name|get
argument_list|(
name|MovAvgType
operator|.
name|LINEAR
operator|.
name|toString
argument_list|()
operator|+
literal|"_"
operator|+
name|MetricTarget
operator|.
name|COUNT
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Double
argument_list|>
name|expectedValues
init|=
name|testValues
operator|.
name|get
argument_list|(
name|MovAvgType
operator|.
name|LINEAR
operator|.
name|toString
argument_list|()
operator|+
literal|"_"
operator|+
name|MetricTarget
operator|.
name|VALUE
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|?
extends|extends
name|Histogram
operator|.
name|Bucket
argument_list|>
name|actualIter
init|=
name|buckets
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|PipelineAggregationHelperTests
operator|.
name|MockBucket
argument_list|>
name|expectedBucketIter
init|=
name|mockHisto
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Double
argument_list|>
name|expectedCountsIter
init|=
name|expectedCounts
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Double
argument_list|>
name|expectedValuesIter
init|=
name|expectedValues
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|actualIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|assertValidIterators
argument_list|(
name|expectedBucketIter
argument_list|,
name|expectedCountsIter
argument_list|,
name|expectedValuesIter
argument_list|)
expr_stmt|;
name|Histogram
operator|.
name|Bucket
name|actual
init|=
name|actualIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|PipelineAggregationHelperTests
operator|.
name|MockBucket
name|expected
init|=
name|expectedBucketIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|Double
name|expectedCount
init|=
name|expectedCountsIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|Double
name|expectedValue
init|=
name|expectedValuesIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
literal|"keys do not match"
argument_list|,
operator|(
operator|(
name|Number
operator|)
name|actual
operator|.
name|getKey
argument_list|()
operator|)
operator|.
name|longValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expected
operator|.
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"doc counts do not match"
argument_list|,
name|actual
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|(
name|long
operator|)
name|expected
operator|.
name|count
argument_list|)
argument_list|)
expr_stmt|;
name|assertBucketContents
argument_list|(
name|actual
argument_list|,
name|expectedCount
argument_list|,
name|expectedValue
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|ewmaSingleValuedField
specifier|public
name|void
name|ewmaSingleValuedField
parameter_list|()
block|{
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"type"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|histogram
argument_list|(
literal|"histo"
argument_list|)
operator|.
name|field
argument_list|(
name|INTERVAL_FIELD
argument_list|)
operator|.
name|interval
argument_list|(
name|interval
argument_list|)
operator|.
name|extendedBounds
argument_list|(
literal|0L
argument_list|,
call|(
name|long
call|)
argument_list|(
name|interval
operator|*
operator|(
name|numBuckets
operator|-
literal|1
operator|)
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|metric
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|movingAvg
argument_list|(
literal|"movavg_counts"
argument_list|)
operator|.
name|window
argument_list|(
name|windowSize
argument_list|)
operator|.
name|modelBuilder
argument_list|(
operator|new
name|EwmaModel
operator|.
name|EWMAModelBuilder
argument_list|()
operator|.
name|alpha
argument_list|(
name|alpha
argument_list|)
argument_list|)
operator|.
name|gapPolicy
argument_list|(
name|gapPolicy
argument_list|)
operator|.
name|setBucketsPaths
argument_list|(
literal|"_count"
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|movingAvg
argument_list|(
literal|"movavg_values"
argument_list|)
operator|.
name|window
argument_list|(
name|windowSize
argument_list|)
operator|.
name|modelBuilder
argument_list|(
operator|new
name|EwmaModel
operator|.
name|EWMAModelBuilder
argument_list|()
operator|.
name|alpha
argument_list|(
name|alpha
argument_list|)
argument_list|)
operator|.
name|gapPolicy
argument_list|(
name|gapPolicy
argument_list|)
operator|.
name|setBucketsPaths
argument_list|(
literal|"the_metric"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|InternalHistogram
argument_list|<
name|Bucket
argument_list|>
name|histo
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"histo"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|histo
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|histo
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"histo"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|Bucket
argument_list|>
name|buckets
init|=
name|histo
operator|.
name|getBuckets
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
literal|"Size of buckets array is not correct."
argument_list|,
name|buckets
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|mockHisto
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Double
argument_list|>
name|expectedCounts
init|=
name|testValues
operator|.
name|get
argument_list|(
name|MovAvgType
operator|.
name|EWMA
operator|.
name|toString
argument_list|()
operator|+
literal|"_"
operator|+
name|MetricTarget
operator|.
name|COUNT
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Double
argument_list|>
name|expectedValues
init|=
name|testValues
operator|.
name|get
argument_list|(
name|MovAvgType
operator|.
name|EWMA
operator|.
name|toString
argument_list|()
operator|+
literal|"_"
operator|+
name|MetricTarget
operator|.
name|VALUE
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|?
extends|extends
name|Histogram
operator|.
name|Bucket
argument_list|>
name|actualIter
init|=
name|buckets
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|PipelineAggregationHelperTests
operator|.
name|MockBucket
argument_list|>
name|expectedBucketIter
init|=
name|mockHisto
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Double
argument_list|>
name|expectedCountsIter
init|=
name|expectedCounts
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Double
argument_list|>
name|expectedValuesIter
init|=
name|expectedValues
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|actualIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|assertValidIterators
argument_list|(
name|expectedBucketIter
argument_list|,
name|expectedCountsIter
argument_list|,
name|expectedValuesIter
argument_list|)
expr_stmt|;
name|Histogram
operator|.
name|Bucket
name|actual
init|=
name|actualIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|PipelineAggregationHelperTests
operator|.
name|MockBucket
name|expected
init|=
name|expectedBucketIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|Double
name|expectedCount
init|=
name|expectedCountsIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|Double
name|expectedValue
init|=
name|expectedValuesIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
literal|"keys do not match"
argument_list|,
operator|(
operator|(
name|Number
operator|)
name|actual
operator|.
name|getKey
argument_list|()
operator|)
operator|.
name|longValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expected
operator|.
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"doc counts do not match"
argument_list|,
name|actual
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|(
name|long
operator|)
name|expected
operator|.
name|count
argument_list|)
argument_list|)
expr_stmt|;
name|assertBucketContents
argument_list|(
name|actual
argument_list|,
name|expectedCount
argument_list|,
name|expectedValue
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|holtSingleValuedField
specifier|public
name|void
name|holtSingleValuedField
parameter_list|()
block|{
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"type"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|histogram
argument_list|(
literal|"histo"
argument_list|)
operator|.
name|field
argument_list|(
name|INTERVAL_FIELD
argument_list|)
operator|.
name|interval
argument_list|(
name|interval
argument_list|)
operator|.
name|extendedBounds
argument_list|(
literal|0L
argument_list|,
call|(
name|long
call|)
argument_list|(
name|interval
operator|*
operator|(
name|numBuckets
operator|-
literal|1
operator|)
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|metric
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|movingAvg
argument_list|(
literal|"movavg_counts"
argument_list|)
operator|.
name|window
argument_list|(
name|windowSize
argument_list|)
operator|.
name|modelBuilder
argument_list|(
operator|new
name|HoltLinearModel
operator|.
name|HoltLinearModelBuilder
argument_list|()
operator|.
name|alpha
argument_list|(
name|alpha
argument_list|)
operator|.
name|beta
argument_list|(
name|beta
argument_list|)
argument_list|)
operator|.
name|gapPolicy
argument_list|(
name|gapPolicy
argument_list|)
operator|.
name|setBucketsPaths
argument_list|(
literal|"_count"
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|movingAvg
argument_list|(
literal|"movavg_values"
argument_list|)
operator|.
name|window
argument_list|(
name|windowSize
argument_list|)
operator|.
name|modelBuilder
argument_list|(
operator|new
name|HoltLinearModel
operator|.
name|HoltLinearModelBuilder
argument_list|()
operator|.
name|alpha
argument_list|(
name|alpha
argument_list|)
operator|.
name|beta
argument_list|(
name|beta
argument_list|)
argument_list|)
operator|.
name|gapPolicy
argument_list|(
name|gapPolicy
argument_list|)
operator|.
name|setBucketsPaths
argument_list|(
literal|"the_metric"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|InternalHistogram
argument_list|<
name|Bucket
argument_list|>
name|histo
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"histo"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|histo
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|histo
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"histo"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|Bucket
argument_list|>
name|buckets
init|=
name|histo
operator|.
name|getBuckets
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
literal|"Size of buckets array is not correct."
argument_list|,
name|buckets
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|mockHisto
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Double
argument_list|>
name|expectedCounts
init|=
name|testValues
operator|.
name|get
argument_list|(
name|MovAvgType
operator|.
name|HOLT
operator|.
name|toString
argument_list|()
operator|+
literal|"_"
operator|+
name|MetricTarget
operator|.
name|COUNT
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Double
argument_list|>
name|expectedValues
init|=
name|testValues
operator|.
name|get
argument_list|(
name|MovAvgType
operator|.
name|HOLT
operator|.
name|toString
argument_list|()
operator|+
literal|"_"
operator|+
name|MetricTarget
operator|.
name|VALUE
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|?
extends|extends
name|Histogram
operator|.
name|Bucket
argument_list|>
name|actualIter
init|=
name|buckets
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|PipelineAggregationHelperTests
operator|.
name|MockBucket
argument_list|>
name|expectedBucketIter
init|=
name|mockHisto
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Double
argument_list|>
name|expectedCountsIter
init|=
name|expectedCounts
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Double
argument_list|>
name|expectedValuesIter
init|=
name|expectedValues
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|actualIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|assertValidIterators
argument_list|(
name|expectedBucketIter
argument_list|,
name|expectedCountsIter
argument_list|,
name|expectedValuesIter
argument_list|)
expr_stmt|;
name|Histogram
operator|.
name|Bucket
name|actual
init|=
name|actualIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|PipelineAggregationHelperTests
operator|.
name|MockBucket
name|expected
init|=
name|expectedBucketIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|Double
name|expectedCount
init|=
name|expectedCountsIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|Double
name|expectedValue
init|=
name|expectedValuesIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
literal|"keys do not match"
argument_list|,
operator|(
operator|(
name|Number
operator|)
name|actual
operator|.
name|getKey
argument_list|()
operator|)
operator|.
name|longValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expected
operator|.
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"doc counts do not match"
argument_list|,
name|actual
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|(
name|long
operator|)
name|expected
operator|.
name|count
argument_list|)
argument_list|)
expr_stmt|;
name|assertBucketContents
argument_list|(
name|actual
argument_list|,
name|expectedCount
argument_list|,
name|expectedValue
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|HoltWintersValuedField
specifier|public
name|void
name|HoltWintersValuedField
parameter_list|()
block|{
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"type"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|histogram
argument_list|(
literal|"histo"
argument_list|)
operator|.
name|field
argument_list|(
name|INTERVAL_FIELD
argument_list|)
operator|.
name|interval
argument_list|(
name|interval
argument_list|)
operator|.
name|extendedBounds
argument_list|(
literal|0L
argument_list|,
call|(
name|long
call|)
argument_list|(
name|interval
operator|*
operator|(
name|numBuckets
operator|-
literal|1
operator|)
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|metric
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|movingAvg
argument_list|(
literal|"movavg_counts"
argument_list|)
operator|.
name|window
argument_list|(
name|windowSize
argument_list|)
operator|.
name|modelBuilder
argument_list|(
operator|new
name|HoltWintersModel
operator|.
name|HoltWintersModelBuilder
argument_list|()
operator|.
name|alpha
argument_list|(
name|alpha
argument_list|)
operator|.
name|beta
argument_list|(
name|beta
argument_list|)
operator|.
name|gamma
argument_list|(
name|gamma
argument_list|)
operator|.
name|period
argument_list|(
name|period
argument_list|)
operator|.
name|seasonalityType
argument_list|(
name|seasonalityType
argument_list|)
argument_list|)
operator|.
name|gapPolicy
argument_list|(
name|gapPolicy
argument_list|)
operator|.
name|setBucketsPaths
argument_list|(
literal|"_count"
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|movingAvg
argument_list|(
literal|"movavg_values"
argument_list|)
operator|.
name|window
argument_list|(
name|windowSize
argument_list|)
operator|.
name|modelBuilder
argument_list|(
operator|new
name|HoltWintersModel
operator|.
name|HoltWintersModelBuilder
argument_list|()
operator|.
name|alpha
argument_list|(
name|alpha
argument_list|)
operator|.
name|beta
argument_list|(
name|beta
argument_list|)
operator|.
name|gamma
argument_list|(
name|gamma
argument_list|)
operator|.
name|period
argument_list|(
name|period
argument_list|)
operator|.
name|seasonalityType
argument_list|(
name|seasonalityType
argument_list|)
argument_list|)
operator|.
name|gapPolicy
argument_list|(
name|gapPolicy
argument_list|)
operator|.
name|setBucketsPaths
argument_list|(
literal|"the_metric"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|InternalHistogram
argument_list|<
name|Bucket
argument_list|>
name|histo
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"histo"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|histo
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|histo
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"histo"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|Bucket
argument_list|>
name|buckets
init|=
name|histo
operator|.
name|getBuckets
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
literal|"Size of buckets array is not correct."
argument_list|,
name|buckets
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|mockHisto
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Double
argument_list|>
name|expectedCounts
init|=
name|testValues
operator|.
name|get
argument_list|(
name|MovAvgType
operator|.
name|HOLT_WINTERS
operator|.
name|toString
argument_list|()
operator|+
literal|"_"
operator|+
name|MetricTarget
operator|.
name|COUNT
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Double
argument_list|>
name|expectedValues
init|=
name|testValues
operator|.
name|get
argument_list|(
name|MovAvgType
operator|.
name|HOLT_WINTERS
operator|.
name|toString
argument_list|()
operator|+
literal|"_"
operator|+
name|MetricTarget
operator|.
name|VALUE
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|?
extends|extends
name|Histogram
operator|.
name|Bucket
argument_list|>
name|actualIter
init|=
name|buckets
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|PipelineAggregationHelperTests
operator|.
name|MockBucket
argument_list|>
name|expectedBucketIter
init|=
name|mockHisto
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Double
argument_list|>
name|expectedCountsIter
init|=
name|expectedCounts
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Double
argument_list|>
name|expectedValuesIter
init|=
name|expectedValues
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|actualIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|assertValidIterators
argument_list|(
name|expectedBucketIter
argument_list|,
name|expectedCountsIter
argument_list|,
name|expectedValuesIter
argument_list|)
expr_stmt|;
name|Histogram
operator|.
name|Bucket
name|actual
init|=
name|actualIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|PipelineAggregationHelperTests
operator|.
name|MockBucket
name|expected
init|=
name|expectedBucketIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|Double
name|expectedCount
init|=
name|expectedCountsIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|Double
name|expectedValue
init|=
name|expectedValuesIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
literal|"keys do not match"
argument_list|,
operator|(
operator|(
name|Number
operator|)
name|actual
operator|.
name|getKey
argument_list|()
operator|)
operator|.
name|longValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expected
operator|.
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"doc counts do not match"
argument_list|,
name|actual
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|(
name|long
operator|)
name|expected
operator|.
name|count
argument_list|)
argument_list|)
expr_stmt|;
name|assertBucketContents
argument_list|(
name|actual
argument_list|,
name|expectedCount
argument_list|,
name|expectedValue
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testPredictNegativeKeysAtStart
specifier|public
name|void
name|testPredictNegativeKeysAtStart
parameter_list|()
block|{
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"neg_idx"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"type"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|histogram
argument_list|(
literal|"histo"
argument_list|)
operator|.
name|field
argument_list|(
name|INTERVAL_FIELD
argument_list|)
operator|.
name|interval
argument_list|(
literal|1
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|avg
argument_list|(
literal|"avg"
argument_list|)
operator|.
name|field
argument_list|(
name|VALUE_FIELD
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|movingAvg
argument_list|(
literal|"movavg_values"
argument_list|)
operator|.
name|window
argument_list|(
name|windowSize
argument_list|)
operator|.
name|modelBuilder
argument_list|(
operator|new
name|SimpleModel
operator|.
name|SimpleModelBuilder
argument_list|()
argument_list|)
operator|.
name|gapPolicy
argument_list|(
name|gapPolicy
argument_list|)
operator|.
name|predict
argument_list|(
literal|5
argument_list|)
operator|.
name|setBucketsPaths
argument_list|(
literal|"avg"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|InternalHistogram
argument_list|<
name|Bucket
argument_list|>
name|histo
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"histo"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|histo
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|histo
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"histo"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|Bucket
argument_list|>
name|buckets
init|=
name|histo
operator|.
name|getBuckets
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
literal|"Size of buckets array is not correct."
argument_list|,
name|buckets
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|25
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|20
condition|;
name|i
operator|++
control|)
block|{
name|Bucket
name|bucket
init|=
name|buckets
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|bucket
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|long
operator|)
name|bucket
operator|.
name|getKey
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|(
name|long
operator|)
name|i
operator|-
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bucket
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
name|Avg
name|avgAgg
init|=
name|bucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"avg"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|avgAgg
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|avgAgg
operator|.
name|value
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|10d
argument_list|)
argument_list|)
expr_stmt|;
name|SimpleValue
name|movAvgAgg
init|=
name|bucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"movavg_values"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|movAvgAgg
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|movAvgAgg
operator|.
name|value
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|10d
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|20
init|;
name|i
operator|<
literal|25
condition|;
name|i
operator|++
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|Bucket
name|bucket
init|=
name|buckets
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|bucket
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|long
operator|)
name|bucket
operator|.
name|getKey
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|(
name|long
operator|)
name|i
operator|-
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bucket
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0l
argument_list|)
argument_list|)
expr_stmt|;
name|Avg
name|avgAgg
init|=
name|bucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"avg"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|avgAgg
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|SimpleValue
name|movAvgAgg
init|=
name|bucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"movavg_values"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|movAvgAgg
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|movAvgAgg
operator|.
name|value
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|10d
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testSizeZeroWindow
specifier|public
name|void
name|testSizeZeroWindow
parameter_list|()
block|{
try|try
block|{
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"type"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|histogram
argument_list|(
literal|"histo"
argument_list|)
operator|.
name|field
argument_list|(
name|INTERVAL_FIELD
argument_list|)
operator|.
name|interval
argument_list|(
name|interval
argument_list|)
operator|.
name|extendedBounds
argument_list|(
literal|0L
argument_list|,
call|(
name|long
call|)
argument_list|(
name|interval
operator|*
operator|(
name|numBuckets
operator|-
literal|1
operator|)
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|randomMetric
argument_list|(
literal|"the_metric"
argument_list|,
name|VALUE_FIELD
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|movingAvg
argument_list|(
literal|"movavg_counts"
argument_list|)
operator|.
name|window
argument_list|(
literal|0
argument_list|)
operator|.
name|modelBuilder
argument_list|(
operator|new
name|SimpleModel
operator|.
name|SimpleModelBuilder
argument_list|()
argument_list|)
operator|.
name|gapPolicy
argument_list|(
name|gapPolicy
argument_list|)
operator|.
name|setBucketsPaths
argument_list|(
literal|"the_metric"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"MovingAvg should not accept a window that is zero"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SearchPhaseExecutionException
name|exception
parameter_list|)
block|{
comment|// All good
block|}
block|}
annotation|@
name|Test
DECL|method|testBadParent
specifier|public
name|void
name|testBadParent
parameter_list|()
block|{
try|try
block|{
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"type"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|range
argument_list|(
literal|"histo"
argument_list|)
operator|.
name|field
argument_list|(
name|INTERVAL_FIELD
argument_list|)
operator|.
name|addRange
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|randomMetric
argument_list|(
literal|"the_metric"
argument_list|,
name|VALUE_FIELD
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|movingAvg
argument_list|(
literal|"movavg_counts"
argument_list|)
operator|.
name|window
argument_list|(
literal|0
argument_list|)
operator|.
name|modelBuilder
argument_list|(
operator|new
name|SimpleModel
operator|.
name|SimpleModelBuilder
argument_list|()
argument_list|)
operator|.
name|gapPolicy
argument_list|(
name|gapPolicy
argument_list|)
operator|.
name|setBucketsPaths
argument_list|(
literal|"the_metric"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"MovingAvg should not accept non-histogram as parent"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SearchPhaseExecutionException
name|exception
parameter_list|)
block|{
comment|// All good
block|}
block|}
annotation|@
name|Test
DECL|method|testNegativeWindow
specifier|public
name|void
name|testNegativeWindow
parameter_list|()
block|{
try|try
block|{
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"type"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|histogram
argument_list|(
literal|"histo"
argument_list|)
operator|.
name|field
argument_list|(
name|INTERVAL_FIELD
argument_list|)
operator|.
name|interval
argument_list|(
name|interval
argument_list|)
operator|.
name|extendedBounds
argument_list|(
literal|0L
argument_list|,
call|(
name|long
call|)
argument_list|(
name|interval
operator|*
operator|(
name|numBuckets
operator|-
literal|1
operator|)
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|randomMetric
argument_list|(
literal|"the_metric"
argument_list|,
name|VALUE_FIELD
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|movingAvg
argument_list|(
literal|"movavg_counts"
argument_list|)
operator|.
name|window
argument_list|(
operator|-
literal|10
argument_list|)
operator|.
name|modelBuilder
argument_list|(
operator|new
name|SimpleModel
operator|.
name|SimpleModelBuilder
argument_list|()
argument_list|)
operator|.
name|gapPolicy
argument_list|(
name|gapPolicy
argument_list|)
operator|.
name|setBucketsPaths
argument_list|(
literal|"_count"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"MovingAvg should not accept a window that is negative"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SearchPhaseExecutionException
name|exception
parameter_list|)
block|{
comment|//Throwable rootCause = exception.unwrapCause();
comment|//assertThat(rootCause, instanceOf(SearchParseException.class));
comment|//assertThat("[window] value must be a positive, non-zero integer.  Value supplied was [0] in [movingAvg].", equalTo(exception.getMessage()));
block|}
block|}
annotation|@
name|Test
DECL|method|testNoBucketsInHistogram
specifier|public
name|void
name|testNoBucketsInHistogram
parameter_list|()
block|{
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"type"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|histogram
argument_list|(
literal|"histo"
argument_list|)
operator|.
name|field
argument_list|(
literal|"test"
argument_list|)
operator|.
name|interval
argument_list|(
name|interval
argument_list|)
operator|.
name|extendedBounds
argument_list|(
literal|0L
argument_list|,
call|(
name|long
call|)
argument_list|(
name|interval
operator|*
operator|(
name|numBuckets
operator|-
literal|1
operator|)
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|randomMetric
argument_list|(
literal|"the_metric"
argument_list|,
name|VALUE_FIELD
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|movingAvg
argument_list|(
literal|"movavg_counts"
argument_list|)
operator|.
name|window
argument_list|(
name|windowSize
argument_list|)
operator|.
name|modelBuilder
argument_list|(
operator|new
name|SimpleModel
operator|.
name|SimpleModelBuilder
argument_list|()
argument_list|)
operator|.
name|gapPolicy
argument_list|(
name|gapPolicy
argument_list|)
operator|.
name|setBucketsPaths
argument_list|(
literal|"the_metric"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|InternalHistogram
argument_list|<
name|Bucket
argument_list|>
name|histo
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"histo"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|histo
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|histo
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"histo"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|Bucket
argument_list|>
name|buckets
init|=
name|histo
operator|.
name|getBuckets
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|buckets
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNoBucketsInHistogramWithPredict
specifier|public
name|void
name|testNoBucketsInHistogramWithPredict
parameter_list|()
block|{
name|int
name|numPredictions
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"type"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|histogram
argument_list|(
literal|"histo"
argument_list|)
operator|.
name|field
argument_list|(
literal|"test"
argument_list|)
operator|.
name|interval
argument_list|(
name|interval
argument_list|)
operator|.
name|extendedBounds
argument_list|(
literal|0L
argument_list|,
call|(
name|long
call|)
argument_list|(
name|interval
operator|*
operator|(
name|numBuckets
operator|-
literal|1
operator|)
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|randomMetric
argument_list|(
literal|"the_metric"
argument_list|,
name|VALUE_FIELD
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|movingAvg
argument_list|(
literal|"movavg_counts"
argument_list|)
operator|.
name|window
argument_list|(
name|windowSize
argument_list|)
operator|.
name|modelBuilder
argument_list|(
operator|new
name|SimpleModel
operator|.
name|SimpleModelBuilder
argument_list|()
argument_list|)
operator|.
name|gapPolicy
argument_list|(
name|gapPolicy
argument_list|)
operator|.
name|setBucketsPaths
argument_list|(
literal|"the_metric"
argument_list|)
operator|.
name|predict
argument_list|(
name|numPredictions
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|InternalHistogram
argument_list|<
name|Bucket
argument_list|>
name|histo
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"histo"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|histo
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|histo
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"histo"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|Bucket
argument_list|>
name|buckets
init|=
name|histo
operator|.
name|getBuckets
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|buckets
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testZeroPrediction
specifier|public
name|void
name|testZeroPrediction
parameter_list|()
block|{
try|try
block|{
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"type"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|histogram
argument_list|(
literal|"histo"
argument_list|)
operator|.
name|field
argument_list|(
name|INTERVAL_FIELD
argument_list|)
operator|.
name|interval
argument_list|(
name|interval
argument_list|)
operator|.
name|extendedBounds
argument_list|(
literal|0L
argument_list|,
call|(
name|long
call|)
argument_list|(
name|interval
operator|*
operator|(
name|numBuckets
operator|-
literal|1
operator|)
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|randomMetric
argument_list|(
literal|"the_metric"
argument_list|,
name|VALUE_FIELD
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|movingAvg
argument_list|(
literal|"movavg_counts"
argument_list|)
operator|.
name|window
argument_list|(
name|windowSize
argument_list|)
operator|.
name|modelBuilder
argument_list|(
name|randomModelBuilder
argument_list|()
argument_list|)
operator|.
name|gapPolicy
argument_list|(
name|gapPolicy
argument_list|)
operator|.
name|predict
argument_list|(
literal|0
argument_list|)
operator|.
name|setBucketsPaths
argument_list|(
literal|"the_metric"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"MovingAvg should not accept a prediction size that is zero"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SearchPhaseExecutionException
name|exception
parameter_list|)
block|{
comment|// All Good
block|}
block|}
annotation|@
name|Test
DECL|method|testNegativePrediction
specifier|public
name|void
name|testNegativePrediction
parameter_list|()
block|{
try|try
block|{
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"type"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|histogram
argument_list|(
literal|"histo"
argument_list|)
operator|.
name|field
argument_list|(
name|INTERVAL_FIELD
argument_list|)
operator|.
name|interval
argument_list|(
name|interval
argument_list|)
operator|.
name|extendedBounds
argument_list|(
literal|0L
argument_list|,
call|(
name|long
call|)
argument_list|(
name|interval
operator|*
operator|(
name|numBuckets
operator|-
literal|1
operator|)
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|randomMetric
argument_list|(
literal|"the_metric"
argument_list|,
name|VALUE_FIELD
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|movingAvg
argument_list|(
literal|"movavg_counts"
argument_list|)
operator|.
name|window
argument_list|(
name|windowSize
argument_list|)
operator|.
name|modelBuilder
argument_list|(
name|randomModelBuilder
argument_list|()
argument_list|)
operator|.
name|gapPolicy
argument_list|(
name|gapPolicy
argument_list|)
operator|.
name|predict
argument_list|(
operator|-
literal|10
argument_list|)
operator|.
name|setBucketsPaths
argument_list|(
literal|"the_metric"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"MovingAvg should not accept a prediction size that is negative"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SearchPhaseExecutionException
name|exception
parameter_list|)
block|{
comment|// All Good
block|}
block|}
comment|/**      * This test uses the "gap" dataset, which is simply a doc at the beginning and end of      * the INTERVAL_FIELD range.  These docs have a value of 1 in GAP_FIELD.      * This test verifies that large gaps don't break things, and that the mov avg roughly works      * in the correct manner (checks direction of change, but not actual values)      */
annotation|@
name|Test
DECL|method|testGiantGap
specifier|public
name|void
name|testGiantGap
parameter_list|()
block|{
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"gap_type"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|histogram
argument_list|(
literal|"histo"
argument_list|)
operator|.
name|field
argument_list|(
name|INTERVAL_FIELD
argument_list|)
operator|.
name|interval
argument_list|(
literal|1
argument_list|)
operator|.
name|extendedBounds
argument_list|(
literal|0L
argument_list|,
literal|49L
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|min
argument_list|(
literal|"the_metric"
argument_list|)
operator|.
name|field
argument_list|(
name|GAP_FIELD
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|movingAvg
argument_list|(
literal|"movavg_values"
argument_list|)
operator|.
name|window
argument_list|(
name|windowSize
argument_list|)
operator|.
name|modelBuilder
argument_list|(
name|randomModelBuilder
argument_list|()
argument_list|)
operator|.
name|gapPolicy
argument_list|(
name|gapPolicy
argument_list|)
operator|.
name|setBucketsPaths
argument_list|(
literal|"the_metric"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|InternalHistogram
argument_list|<
name|Bucket
argument_list|>
name|histo
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"histo"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|histo
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|histo
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"histo"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|Bucket
argument_list|>
name|buckets
init|=
name|histo
operator|.
name|getBuckets
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
literal|"Size of buckets array is not correct."
argument_list|,
name|buckets
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|50
argument_list|)
argument_list|)
expr_stmt|;
name|double
name|lastValue
init|=
operator|(
call|(
name|SimpleValue
call|)
argument_list|(
name|buckets
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"movavg_values"
argument_list|)
argument_list|)
operator|)
operator|.
name|value
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|Double
operator|.
name|compare
argument_list|(
name|lastValue
argument_list|,
literal|0.0d
argument_list|)
argument_list|,
name|greaterThanOrEqualTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|double
name|currentValue
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
literal|49
condition|;
name|i
operator|++
control|)
block|{
name|SimpleValue
name|current
init|=
name|buckets
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"movavg_values"
argument_list|)
decl_stmt|;
if|if
condition|(
name|current
operator|!=
literal|null
condition|)
block|{
name|currentValue
operator|=
name|current
operator|.
name|value
argument_list|()
expr_stmt|;
comment|// Since there are only two values in this test, at the beginning and end, the moving average should
comment|// decrease every step (until it reaches zero).  Crude way to check that it's doing the right thing
comment|// without actually verifying the computed values.  Should work for all types of moving avgs and
comment|// gap policies
name|assertThat
argument_list|(
name|Double
operator|.
name|compare
argument_list|(
name|lastValue
argument_list|,
name|currentValue
argument_list|)
argument_list|,
name|greaterThanOrEqualTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|lastValue
operator|=
name|currentValue
expr_stmt|;
block|}
block|}
name|SimpleValue
name|current
init|=
name|buckets
operator|.
name|get
argument_list|(
literal|49
argument_list|)
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"movavg_values"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|current
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|currentValue
operator|=
name|current
operator|.
name|value
argument_list|()
expr_stmt|;
if|if
condition|(
name|gapPolicy
operator|.
name|equals
argument_list|(
name|BucketHelpers
operator|.
name|GapPolicy
operator|.
name|SKIP
argument_list|)
condition|)
block|{
comment|// if we are ignoring, movavg could go up (holt) or stay the same (simple, linear, ewma)
name|assertThat
argument_list|(
name|Double
operator|.
name|compare
argument_list|(
name|lastValue
argument_list|,
name|currentValue
argument_list|)
argument_list|,
name|lessThanOrEqualTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|gapPolicy
operator|.
name|equals
argument_list|(
name|BucketHelpers
operator|.
name|GapPolicy
operator|.
name|INSERT_ZEROS
argument_list|)
condition|)
block|{
comment|// If we insert zeros, this should always increase the moving avg since the last bucket has a real value
name|assertThat
argument_list|(
name|Double
operator|.
name|compare
argument_list|(
name|lastValue
argument_list|,
name|currentValue
argument_list|)
argument_list|,
name|equalTo
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Big gap, but with prediction at the end.      */
annotation|@
name|Test
DECL|method|testGiantGapWithPredict
specifier|public
name|void
name|testGiantGapWithPredict
parameter_list|()
block|{
name|int
name|numPredictions
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"gap_type"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|histogram
argument_list|(
literal|"histo"
argument_list|)
operator|.
name|field
argument_list|(
name|INTERVAL_FIELD
argument_list|)
operator|.
name|interval
argument_list|(
literal|1
argument_list|)
operator|.
name|extendedBounds
argument_list|(
literal|0L
argument_list|,
literal|49L
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|min
argument_list|(
literal|"the_metric"
argument_list|)
operator|.
name|field
argument_list|(
name|GAP_FIELD
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|movingAvg
argument_list|(
literal|"movavg_values"
argument_list|)
operator|.
name|window
argument_list|(
name|windowSize
argument_list|)
operator|.
name|modelBuilder
argument_list|(
name|randomModelBuilder
argument_list|()
argument_list|)
operator|.
name|gapPolicy
argument_list|(
name|gapPolicy
argument_list|)
operator|.
name|setBucketsPaths
argument_list|(
literal|"the_metric"
argument_list|)
operator|.
name|predict
argument_list|(
name|numPredictions
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|InternalHistogram
argument_list|<
name|Bucket
argument_list|>
name|histo
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"histo"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|histo
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|histo
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"histo"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|Bucket
argument_list|>
name|buckets
init|=
name|histo
operator|.
name|getBuckets
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
literal|"Size of buckets array is not correct."
argument_list|,
name|buckets
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|50
operator|+
name|numPredictions
argument_list|)
argument_list|)
expr_stmt|;
name|double
name|lastValue
init|=
operator|(
call|(
name|SimpleValue
call|)
argument_list|(
name|buckets
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"movavg_values"
argument_list|)
argument_list|)
operator|)
operator|.
name|value
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|Double
operator|.
name|compare
argument_list|(
name|lastValue
argument_list|,
literal|0.0d
argument_list|)
argument_list|,
name|greaterThanOrEqualTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|double
name|currentValue
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
literal|49
condition|;
name|i
operator|++
control|)
block|{
name|SimpleValue
name|current
init|=
name|buckets
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"movavg_values"
argument_list|)
decl_stmt|;
if|if
condition|(
name|current
operator|!=
literal|null
condition|)
block|{
name|currentValue
operator|=
name|current
operator|.
name|value
argument_list|()
expr_stmt|;
comment|// Since there are only two values in this test, at the beginning and end, the moving average should
comment|// decrease every step (until it reaches zero).  Crude way to check that it's doing the right thing
comment|// without actually verifying the computed values.  Should work for all types of moving avgs and
comment|// gap policies
name|assertThat
argument_list|(
name|Double
operator|.
name|compare
argument_list|(
name|lastValue
argument_list|,
name|currentValue
argument_list|)
argument_list|,
name|greaterThanOrEqualTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|lastValue
operator|=
name|currentValue
expr_stmt|;
block|}
block|}
name|SimpleValue
name|current
init|=
name|buckets
operator|.
name|get
argument_list|(
literal|49
argument_list|)
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"movavg_values"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|current
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|currentValue
operator|=
name|current
operator|.
name|value
argument_list|()
expr_stmt|;
if|if
condition|(
name|gapPolicy
operator|.
name|equals
argument_list|(
name|BucketHelpers
operator|.
name|GapPolicy
operator|.
name|SKIP
argument_list|)
condition|)
block|{
comment|// if we are ignoring, movavg could go up (holt) or stay the same (simple, linear, ewma)
name|assertThat
argument_list|(
name|Double
operator|.
name|compare
argument_list|(
name|lastValue
argument_list|,
name|currentValue
argument_list|)
argument_list|,
name|lessThanOrEqualTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|gapPolicy
operator|.
name|equals
argument_list|(
name|BucketHelpers
operator|.
name|GapPolicy
operator|.
name|INSERT_ZEROS
argument_list|)
condition|)
block|{
comment|// If we insert zeros, this should always increase the moving avg since the last bucket has a real value
name|assertThat
argument_list|(
name|Double
operator|.
name|compare
argument_list|(
name|lastValue
argument_list|,
name|currentValue
argument_list|)
argument_list|,
name|equalTo
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Now check predictions
for|for
control|(
name|int
name|i
init|=
literal|50
init|;
name|i
operator|<
literal|50
operator|+
name|numPredictions
condition|;
name|i
operator|++
control|)
block|{
comment|// Unclear at this point which direction the predictions will go, just verify they are
comment|// not null, and that we don't have the_metric anymore
name|assertThat
argument_list|(
operator|(
name|buckets
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"movavg_values"
argument_list|)
operator|)
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|buckets
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"the_metric"
argument_list|)
operator|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * This test filters the "gap" data so that the first doc is excluded.  This leaves a long stretch of empty      * buckets until the final bucket.  The moving avg should be zero up until the last bucket, and should work      * regardless of mov avg type or gap policy.      */
annotation|@
name|Test
DECL|method|testLeftGap
specifier|public
name|void
name|testLeftGap
parameter_list|()
block|{
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"gap_type"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|filter
argument_list|(
literal|"filtered"
argument_list|)
operator|.
name|filter
argument_list|(
operator|new
name|RangeQueryBuilder
argument_list|(
name|INTERVAL_FIELD
argument_list|)
operator|.
name|from
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|histogram
argument_list|(
literal|"histo"
argument_list|)
operator|.
name|field
argument_list|(
name|INTERVAL_FIELD
argument_list|)
operator|.
name|interval
argument_list|(
literal|1
argument_list|)
operator|.
name|extendedBounds
argument_list|(
literal|0L
argument_list|,
literal|49L
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|randomMetric
argument_list|(
literal|"the_metric"
argument_list|,
name|GAP_FIELD
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|movingAvg
argument_list|(
literal|"movavg_values"
argument_list|)
operator|.
name|window
argument_list|(
name|windowSize
argument_list|)
operator|.
name|modelBuilder
argument_list|(
name|randomModelBuilder
argument_list|()
argument_list|)
operator|.
name|gapPolicy
argument_list|(
name|gapPolicy
argument_list|)
operator|.
name|setBucketsPaths
argument_list|(
literal|"the_metric"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|InternalFilter
name|filtered
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"filtered"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|filtered
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filtered
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"filtered"
argument_list|)
argument_list|)
expr_stmt|;
name|InternalHistogram
argument_list|<
name|Bucket
argument_list|>
name|histo
init|=
name|filtered
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"histo"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|histo
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|histo
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"histo"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|Bucket
argument_list|>
name|buckets
init|=
name|histo
operator|.
name|getBuckets
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
literal|"Size of buckets array is not correct."
argument_list|,
name|buckets
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|50
argument_list|)
argument_list|)
expr_stmt|;
name|double
name|lastValue
init|=
literal|0
decl_stmt|;
name|double
name|currentValue
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|50
condition|;
name|i
operator|++
control|)
block|{
name|SimpleValue
name|current
init|=
name|buckets
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"movavg_values"
argument_list|)
decl_stmt|;
if|if
condition|(
name|current
operator|!=
literal|null
condition|)
block|{
name|currentValue
operator|=
name|current
operator|.
name|value
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|Double
operator|.
name|compare
argument_list|(
name|lastValue
argument_list|,
name|currentValue
argument_list|)
argument_list|,
name|lessThanOrEqualTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|lastValue
operator|=
name|currentValue
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testLeftGapWithPredict
specifier|public
name|void
name|testLeftGapWithPredict
parameter_list|()
block|{
name|int
name|numPredictions
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"gap_type"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|filter
argument_list|(
literal|"filtered"
argument_list|)
operator|.
name|filter
argument_list|(
operator|new
name|RangeQueryBuilder
argument_list|(
name|INTERVAL_FIELD
argument_list|)
operator|.
name|from
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|histogram
argument_list|(
literal|"histo"
argument_list|)
operator|.
name|field
argument_list|(
name|INTERVAL_FIELD
argument_list|)
operator|.
name|interval
argument_list|(
literal|1
argument_list|)
operator|.
name|extendedBounds
argument_list|(
literal|0L
argument_list|,
literal|49L
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|randomMetric
argument_list|(
literal|"the_metric"
argument_list|,
name|GAP_FIELD
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|movingAvg
argument_list|(
literal|"movavg_values"
argument_list|)
operator|.
name|window
argument_list|(
name|windowSize
argument_list|)
operator|.
name|modelBuilder
argument_list|(
name|randomModelBuilder
argument_list|()
argument_list|)
operator|.
name|gapPolicy
argument_list|(
name|gapPolicy
argument_list|)
operator|.
name|setBucketsPaths
argument_list|(
literal|"the_metric"
argument_list|)
operator|.
name|predict
argument_list|(
name|numPredictions
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|InternalFilter
name|filtered
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"filtered"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|filtered
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filtered
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"filtered"
argument_list|)
argument_list|)
expr_stmt|;
name|InternalHistogram
argument_list|<
name|Bucket
argument_list|>
name|histo
init|=
name|filtered
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"histo"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|histo
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|histo
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"histo"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|Bucket
argument_list|>
name|buckets
init|=
name|histo
operator|.
name|getBuckets
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
literal|"Size of buckets array is not correct."
argument_list|,
name|buckets
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|50
operator|+
name|numPredictions
argument_list|)
argument_list|)
expr_stmt|;
name|double
name|lastValue
init|=
literal|0
decl_stmt|;
name|double
name|currentValue
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|50
condition|;
name|i
operator|++
control|)
block|{
name|SimpleValue
name|current
init|=
name|buckets
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"movavg_values"
argument_list|)
decl_stmt|;
if|if
condition|(
name|current
operator|!=
literal|null
condition|)
block|{
name|currentValue
operator|=
name|current
operator|.
name|value
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|Double
operator|.
name|compare
argument_list|(
name|lastValue
argument_list|,
name|currentValue
argument_list|)
argument_list|,
name|lessThanOrEqualTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|lastValue
operator|=
name|currentValue
expr_stmt|;
block|}
block|}
comment|// Now check predictions
for|for
control|(
name|int
name|i
init|=
literal|50
init|;
name|i
operator|<
literal|50
operator|+
name|numPredictions
condition|;
name|i
operator|++
control|)
block|{
comment|// Unclear at this point which direction the predictions will go, just verify they are
comment|// not null, and that we don't have the_metric anymore
name|assertThat
argument_list|(
operator|(
name|buckets
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"movavg_values"
argument_list|)
operator|)
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|buckets
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"the_metric"
argument_list|)
operator|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * This test filters the "gap" data so that the last doc is excluded.  This leaves a long stretch of empty      * buckets after the first bucket.  The moving avg should be one at the beginning, then zero for the rest      * regardless of mov avg type or gap policy.      */
annotation|@
name|Test
DECL|method|testRightGap
specifier|public
name|void
name|testRightGap
parameter_list|()
block|{
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"gap_type"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|filter
argument_list|(
literal|"filtered"
argument_list|)
operator|.
name|filter
argument_list|(
operator|new
name|RangeQueryBuilder
argument_list|(
name|INTERVAL_FIELD
argument_list|)
operator|.
name|to
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|histogram
argument_list|(
literal|"histo"
argument_list|)
operator|.
name|field
argument_list|(
name|INTERVAL_FIELD
argument_list|)
operator|.
name|interval
argument_list|(
literal|1
argument_list|)
operator|.
name|extendedBounds
argument_list|(
literal|0L
argument_list|,
literal|49L
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|randomMetric
argument_list|(
literal|"the_metric"
argument_list|,
name|GAP_FIELD
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|movingAvg
argument_list|(
literal|"movavg_values"
argument_list|)
operator|.
name|window
argument_list|(
name|windowSize
argument_list|)
operator|.
name|modelBuilder
argument_list|(
name|randomModelBuilder
argument_list|()
argument_list|)
operator|.
name|gapPolicy
argument_list|(
name|gapPolicy
argument_list|)
operator|.
name|setBucketsPaths
argument_list|(
literal|"the_metric"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|InternalFilter
name|filtered
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"filtered"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|filtered
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filtered
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"filtered"
argument_list|)
argument_list|)
expr_stmt|;
name|InternalHistogram
argument_list|<
name|Bucket
argument_list|>
name|histo
init|=
name|filtered
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"histo"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|histo
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|histo
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"histo"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|Bucket
argument_list|>
name|buckets
init|=
name|histo
operator|.
name|getBuckets
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
literal|"Size of buckets array is not correct."
argument_list|,
name|buckets
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|50
argument_list|)
argument_list|)
expr_stmt|;
name|SimpleValue
name|current
init|=
name|buckets
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"movavg_values"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|current
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|double
name|lastValue
init|=
name|current
operator|.
name|value
argument_list|()
decl_stmt|;
name|double
name|currentValue
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
literal|50
condition|;
name|i
operator|++
control|)
block|{
name|current
operator|=
name|buckets
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"movavg_values"
argument_list|)
expr_stmt|;
if|if
condition|(
name|current
operator|!=
literal|null
condition|)
block|{
name|currentValue
operator|=
name|current
operator|.
name|value
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|Double
operator|.
name|compare
argument_list|(
name|lastValue
argument_list|,
name|currentValue
argument_list|)
argument_list|,
name|greaterThanOrEqualTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|lastValue
operator|=
name|currentValue
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testRightGapWithPredict
specifier|public
name|void
name|testRightGapWithPredict
parameter_list|()
block|{
name|int
name|numPredictions
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"gap_type"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|filter
argument_list|(
literal|"filtered"
argument_list|)
operator|.
name|filter
argument_list|(
operator|new
name|RangeQueryBuilder
argument_list|(
name|INTERVAL_FIELD
argument_list|)
operator|.
name|to
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|histogram
argument_list|(
literal|"histo"
argument_list|)
operator|.
name|field
argument_list|(
name|INTERVAL_FIELD
argument_list|)
operator|.
name|interval
argument_list|(
literal|1
argument_list|)
operator|.
name|extendedBounds
argument_list|(
literal|0L
argument_list|,
literal|49L
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|randomMetric
argument_list|(
literal|"the_metric"
argument_list|,
name|GAP_FIELD
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|movingAvg
argument_list|(
literal|"movavg_values"
argument_list|)
operator|.
name|window
argument_list|(
name|windowSize
argument_list|)
operator|.
name|modelBuilder
argument_list|(
name|randomModelBuilder
argument_list|()
argument_list|)
operator|.
name|gapPolicy
argument_list|(
name|gapPolicy
argument_list|)
operator|.
name|setBucketsPaths
argument_list|(
literal|"the_metric"
argument_list|)
operator|.
name|predict
argument_list|(
name|numPredictions
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|InternalFilter
name|filtered
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"filtered"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|filtered
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|filtered
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"filtered"
argument_list|)
argument_list|)
expr_stmt|;
name|InternalHistogram
argument_list|<
name|Bucket
argument_list|>
name|histo
init|=
name|filtered
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"histo"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|histo
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|histo
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"histo"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|Bucket
argument_list|>
name|buckets
init|=
name|histo
operator|.
name|getBuckets
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
literal|"Size of buckets array is not correct."
argument_list|,
name|buckets
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|50
operator|+
name|numPredictions
argument_list|)
argument_list|)
expr_stmt|;
name|SimpleValue
name|current
init|=
name|buckets
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"movavg_values"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|current
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|double
name|lastValue
init|=
name|current
operator|.
name|value
argument_list|()
decl_stmt|;
name|double
name|currentValue
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
literal|50
condition|;
name|i
operator|++
control|)
block|{
name|current
operator|=
name|buckets
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"movavg_values"
argument_list|)
expr_stmt|;
if|if
condition|(
name|current
operator|!=
literal|null
condition|)
block|{
name|currentValue
operator|=
name|current
operator|.
name|value
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|Double
operator|.
name|compare
argument_list|(
name|lastValue
argument_list|,
name|currentValue
argument_list|)
argument_list|,
name|greaterThanOrEqualTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|lastValue
operator|=
name|currentValue
expr_stmt|;
block|}
block|}
comment|// Now check predictions
for|for
control|(
name|int
name|i
init|=
literal|50
init|;
name|i
operator|<
literal|50
operator|+
name|numPredictions
condition|;
name|i
operator|++
control|)
block|{
comment|// Unclear at this point which direction the predictions will go, just verify they are
comment|// not null, and that we don't have the_metric anymore
name|assertThat
argument_list|(
operator|(
name|buckets
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"movavg_values"
argument_list|)
operator|)
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|buckets
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"the_metric"
argument_list|)
operator|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testHoltWintersNotEnoughData
specifier|public
name|void
name|testHoltWintersNotEnoughData
parameter_list|()
block|{
try|try
block|{
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"type"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|histogram
argument_list|(
literal|"histo"
argument_list|)
operator|.
name|field
argument_list|(
name|INTERVAL_FIELD
argument_list|)
operator|.
name|interval
argument_list|(
name|interval
argument_list|)
operator|.
name|extendedBounds
argument_list|(
literal|0L
argument_list|,
call|(
name|long
call|)
argument_list|(
name|interval
operator|*
operator|(
name|numBuckets
operator|-
literal|1
operator|)
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|metric
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|movingAvg
argument_list|(
literal|"movavg_counts"
argument_list|)
operator|.
name|window
argument_list|(
literal|10
argument_list|)
operator|.
name|modelBuilder
argument_list|(
operator|new
name|HoltWintersModel
operator|.
name|HoltWintersModelBuilder
argument_list|()
operator|.
name|alpha
argument_list|(
name|alpha
argument_list|)
operator|.
name|beta
argument_list|(
name|beta
argument_list|)
operator|.
name|gamma
argument_list|(
name|gamma
argument_list|)
operator|.
name|period
argument_list|(
literal|20
argument_list|)
operator|.
name|seasonalityType
argument_list|(
name|seasonalityType
argument_list|)
argument_list|)
operator|.
name|gapPolicy
argument_list|(
name|gapPolicy
argument_list|)
operator|.
name|setBucketsPaths
argument_list|(
literal|"_count"
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|movingAvg
argument_list|(
literal|"movavg_values"
argument_list|)
operator|.
name|window
argument_list|(
name|windowSize
argument_list|)
operator|.
name|modelBuilder
argument_list|(
operator|new
name|HoltWintersModel
operator|.
name|HoltWintersModelBuilder
argument_list|()
operator|.
name|alpha
argument_list|(
name|alpha
argument_list|)
operator|.
name|beta
argument_list|(
name|beta
argument_list|)
operator|.
name|gamma
argument_list|(
name|gamma
argument_list|)
operator|.
name|period
argument_list|(
literal|20
argument_list|)
operator|.
name|seasonalityType
argument_list|(
name|seasonalityType
argument_list|)
argument_list|)
operator|.
name|gapPolicy
argument_list|(
name|gapPolicy
argument_list|)
operator|.
name|setBucketsPaths
argument_list|(
literal|"the_metric"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
block|}
catch|catch
parameter_list|(
name|SearchPhaseExecutionException
name|e
parameter_list|)
block|{
comment|// All good
block|}
block|}
annotation|@
name|Test
DECL|method|testBadModelParams
specifier|public
name|void
name|testBadModelParams
parameter_list|()
block|{
try|try
block|{
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"type"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|histogram
argument_list|(
literal|"histo"
argument_list|)
operator|.
name|field
argument_list|(
name|INTERVAL_FIELD
argument_list|)
operator|.
name|interval
argument_list|(
name|interval
argument_list|)
operator|.
name|extendedBounds
argument_list|(
literal|0L
argument_list|,
call|(
name|long
call|)
argument_list|(
name|interval
operator|*
operator|(
name|numBuckets
operator|-
literal|1
operator|)
argument_list|)
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|metric
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|movingAvg
argument_list|(
literal|"movavg_counts"
argument_list|)
operator|.
name|window
argument_list|(
literal|10
argument_list|)
operator|.
name|modelBuilder
argument_list|(
name|randomModelBuilder
argument_list|(
literal|100
argument_list|)
argument_list|)
operator|.
name|gapPolicy
argument_list|(
name|gapPolicy
argument_list|)
operator|.
name|setBucketsPaths
argument_list|(
literal|"_count"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
block|}
catch|catch
parameter_list|(
name|SearchPhaseExecutionException
name|e
parameter_list|)
block|{
comment|// All good
block|}
block|}
DECL|method|assertValidIterators
specifier|private
name|void
name|assertValidIterators
parameter_list|(
name|Iterator
name|expectedBucketIter
parameter_list|,
name|Iterator
name|expectedCountsIter
parameter_list|,
name|Iterator
name|expectedValuesIter
parameter_list|)
block|{
if|if
condition|(
operator|!
name|expectedBucketIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|fail
argument_list|(
literal|"`expectedBucketIter` iterator ended before `actual` iterator, size mismatch"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|expectedCountsIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|fail
argument_list|(
literal|"`expectedCountsIter` iterator ended before `actual` iterator, size mismatch"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|expectedValuesIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|fail
argument_list|(
literal|"`expectedValuesIter` iterator ended before `actual` iterator, size mismatch"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertBucketContents
specifier|private
name|void
name|assertBucketContents
parameter_list|(
name|Histogram
operator|.
name|Bucket
name|actual
parameter_list|,
name|Double
name|expectedCount
parameter_list|,
name|Double
name|expectedValue
parameter_list|)
block|{
comment|// This is a gap bucket
name|SimpleValue
name|countMovAvg
init|=
name|actual
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"movavg_counts"
argument_list|)
decl_stmt|;
if|if
condition|(
name|expectedCount
operator|==
literal|null
condition|)
block|{
name|assertThat
argument_list|(
literal|"[_count] movavg is not null"
argument_list|,
name|countMovAvg
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Double
operator|.
name|isNaN
argument_list|(
name|expectedCount
argument_list|)
condition|)
block|{
name|assertThat
argument_list|(
literal|"[_count] movavg should be NaN, but is ["
operator|+
name|countMovAvg
operator|.
name|value
argument_list|()
operator|+
literal|"] instead"
argument_list|,
name|countMovAvg
operator|.
name|value
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|Double
operator|.
name|NaN
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
literal|"[_count] movavg is null"
argument_list|,
name|countMovAvg
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"[_count] movavg does not match expected ["
operator|+
name|countMovAvg
operator|.
name|value
argument_list|()
operator|+
literal|" vs "
operator|+
name|expectedCount
operator|+
literal|"]"
argument_list|,
name|countMovAvg
operator|.
name|value
argument_list|()
argument_list|,
name|closeTo
argument_list|(
name|expectedCount
argument_list|,
literal|0.1
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// This is a gap bucket
name|SimpleValue
name|valuesMovAvg
init|=
name|actual
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"movavg_values"
argument_list|)
decl_stmt|;
if|if
condition|(
name|expectedValue
operator|==
literal|null
condition|)
block|{
name|assertThat
argument_list|(
literal|"[value] movavg is not null"
argument_list|,
name|valuesMovAvg
argument_list|,
name|Matchers
operator|.
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Double
operator|.
name|isNaN
argument_list|(
name|expectedValue
argument_list|)
condition|)
block|{
name|assertThat
argument_list|(
literal|"[value] movavg should be NaN, but is ["
operator|+
name|valuesMovAvg
operator|.
name|value
argument_list|()
operator|+
literal|"] instead"
argument_list|,
name|valuesMovAvg
operator|.
name|value
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|Double
operator|.
name|NaN
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
literal|"[value] movavg is null"
argument_list|,
name|valuesMovAvg
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"[value] movavg does not match expected ["
operator|+
name|valuesMovAvg
operator|.
name|value
argument_list|()
operator|+
literal|" vs "
operator|+
name|expectedValue
operator|+
literal|"]"
argument_list|,
name|valuesMovAvg
operator|.
name|value
argument_list|()
argument_list|,
name|closeTo
argument_list|(
name|expectedValue
argument_list|,
literal|0.1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|randomModelBuilder
specifier|private
name|MovAvgModelBuilder
name|randomModelBuilder
parameter_list|()
block|{
return|return
name|randomModelBuilder
argument_list|(
literal|0
argument_list|)
return|;
block|}
DECL|method|randomModelBuilder
specifier|private
name|MovAvgModelBuilder
name|randomModelBuilder
parameter_list|(
name|double
name|padding
parameter_list|)
block|{
name|int
name|rand
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
decl_stmt|;
comment|// HoltWinters is excluded from random generation, because it's "cold start" behavior makes
comment|// randomized testing too tricky.  Should probably add dedicated, randomized tests just for HoltWinters,
comment|// which can compensate for the idiosyncrasies
switch|switch
condition|(
name|rand
condition|)
block|{
case|case
literal|0
case|:
return|return
operator|new
name|SimpleModel
operator|.
name|SimpleModelBuilder
argument_list|()
return|;
case|case
literal|1
case|:
return|return
operator|new
name|LinearModel
operator|.
name|LinearModelBuilder
argument_list|()
return|;
case|case
literal|2
case|:
return|return
operator|new
name|EwmaModel
operator|.
name|EWMAModelBuilder
argument_list|()
operator|.
name|alpha
argument_list|(
name|alpha
operator|+
name|padding
argument_list|)
return|;
case|case
literal|3
case|:
return|return
operator|new
name|HoltLinearModel
operator|.
name|HoltLinearModelBuilder
argument_list|()
operator|.
name|alpha
argument_list|(
name|alpha
operator|+
name|padding
argument_list|)
operator|.
name|beta
argument_list|(
name|beta
operator|+
name|padding
argument_list|)
return|;
default|default:
return|return
operator|new
name|SimpleModel
operator|.
name|SimpleModelBuilder
argument_list|()
return|;
block|}
block|}
DECL|method|randomMetric
specifier|private
name|ValuesSourceMetricsAggregationBuilder
name|randomMetric
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|field
parameter_list|)
block|{
name|int
name|rand
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|rand
condition|)
block|{
case|case
literal|0
case|:
return|return
name|min
argument_list|(
name|name
argument_list|)
operator|.
name|field
argument_list|(
name|field
argument_list|)
return|;
case|case
literal|2
case|:
return|return
name|max
argument_list|(
name|name
argument_list|)
operator|.
name|field
argument_list|(
name|field
argument_list|)
return|;
case|case
literal|3
case|:
return|return
name|avg
argument_list|(
name|name
argument_list|)
operator|.
name|field
argument_list|(
name|field
argument_list|)
return|;
default|default:
return|return
name|avg
argument_list|(
name|name
argument_list|)
operator|.
name|field
argument_list|(
name|field
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

