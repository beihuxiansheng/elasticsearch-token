begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations.metrics
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|metrics
package|;
end_package

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|cursors
operator|.
name|IntCursor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|metrics
operator|.
name|GroupTree
operator|.
name|Group
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|metrics
operator|.
name|percentiles
operator|.
name|tdigest
operator|.
name|GroupRedBlackTree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|metrics
operator|.
name|percentiles
operator|.
name|tdigest
operator|.
name|GroupRedBlackTree
operator|.
name|SizeAndSum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
DECL|class|GroupTreeTests
specifier|public
class|class
name|GroupTreeTests
extends|extends
name|ElasticsearchTestCase
block|{
DECL|method|testDuel
specifier|public
name|void
name|testDuel
parameter_list|()
block|{
name|GroupTree
name|tree1
init|=
operator|new
name|GroupTree
argument_list|()
decl_stmt|;
name|GroupRedBlackTree
name|tree2
init|=
operator|new
name|GroupRedBlackTree
argument_list|(
name|randomInt
argument_list|(
literal|100
argument_list|)
argument_list|)
decl_stmt|;
comment|// Add elements
specifier|final
name|int
name|elements
init|=
name|atLeast
argument_list|(
literal|100
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|elements
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|double
name|centroid
init|=
name|randomDouble
argument_list|()
decl_stmt|;
specifier|final
name|int
name|count
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|Group
name|g
init|=
operator|new
name|Group
argument_list|(
name|centroid
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|g
operator|.
name|add
argument_list|(
name|centroid
argument_list|,
name|count
operator|-
literal|1
argument_list|)
expr_stmt|;
name|tree1
operator|.
name|add
argument_list|(
name|g
argument_list|)
expr_stmt|;
name|tree2
operator|.
name|addGroup
argument_list|(
name|centroid
argument_list|,
name|count
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|tree1
argument_list|,
name|tree2
argument_list|)
expr_stmt|;
comment|// Remove
name|List
argument_list|<
name|Group
argument_list|>
name|toRemove
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|Group
name|group
range|:
name|tree1
control|)
block|{
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|toRemove
operator|.
name|add
argument_list|(
name|group
argument_list|)
expr_stmt|;
block|}
block|}
name|Collections
operator|.
name|shuffle
argument_list|(
name|toRemove
argument_list|,
name|getRandom
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Group
name|group
range|:
name|toRemove
control|)
block|{
name|tree1
operator|.
name|remove
argument_list|(
name|group
argument_list|)
expr_stmt|;
specifier|final
name|boolean
name|removed
init|=
name|tree2
operator|.
name|removeGroup
argument_list|(
name|group
operator|.
name|mean
argument_list|()
argument_list|,
name|group
operator|.
name|id
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|removed
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|tree1
argument_list|,
name|tree2
argument_list|)
expr_stmt|;
block|}
DECL|method|assertEquals
specifier|public
specifier|static
name|void
name|assertEquals
parameter_list|(
name|GroupTree
name|tree1
parameter_list|,
name|GroupRedBlackTree
name|tree2
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|tree1
operator|.
name|size
argument_list|()
argument_list|,
name|tree2
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Group
argument_list|>
name|groups1
init|=
name|tree1
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|IntCursor
argument_list|>
name|groups2
init|=
name|tree2
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|assertEquals
argument_list|(
name|groups1
operator|.
name|hasNext
argument_list|()
argument_list|,
name|groups2
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|groups1
operator|.
name|hasNext
argument_list|()
condition|)
block|{
break|break;
block|}
specifier|final
name|Group
name|next1
init|=
name|groups1
operator|.
name|next
argument_list|()
decl_stmt|;
specifier|final
name|IntCursor
name|next2
init|=
name|groups2
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|next1
operator|.
name|mean
argument_list|()
argument_list|,
name|tree2
operator|.
name|mean
argument_list|(
name|next2
operator|.
name|value
argument_list|)
argument_list|,
literal|0.0001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|next1
operator|.
name|count
argument_list|()
argument_list|,
name|tree2
operator|.
name|count
argument_list|(
name|next2
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertConsistent
argument_list|(
name|tree2
argument_list|)
expr_stmt|;
block|}
DECL|method|assertConsistent
specifier|public
specifier|static
name|void
name|assertConsistent
parameter_list|(
name|GroupRedBlackTree
name|tree
parameter_list|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
name|long
name|sum
init|=
literal|0
decl_stmt|;
for|for
control|(
name|IntCursor
name|cursor
range|:
name|tree
control|)
block|{
specifier|final
name|int
name|node
init|=
name|cursor
operator|.
name|value
decl_stmt|;
name|SizeAndSum
name|s
init|=
operator|new
name|GroupRedBlackTree
operator|.
name|SizeAndSum
argument_list|()
decl_stmt|;
name|tree
operator|.
name|headSum
argument_list|(
name|node
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|i
argument_list|,
name|s
operator|.
name|size
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|sum
argument_list|,
name|s
operator|.
name|sum
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|sum
operator|+=
name|tree
operator|.
name|count
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

