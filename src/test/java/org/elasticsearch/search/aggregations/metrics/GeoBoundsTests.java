begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations.metrics
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|metrics
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|index
operator|.
name|IndexRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|geo
operator|.
name|GeoPoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|BigArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|json
operator|.
name|JsonXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchHit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchHitField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|terms
operator|.
name|Terms
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|terms
operator|.
name|Terms
operator|.
name|Bucket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|metrics
operator|.
name|geobounds
operator|.
name|GeoBounds
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|metrics
operator|.
name|geobounds
operator|.
name|GeoBoundsAggregator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|sort
operator|.
name|SortBuilders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|sort
operator|.
name|SortOrder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchIntegrationTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|junit
operator|.
name|annotations
operator|.
name|TestLogging
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
operator|.
name|jsonBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
operator|.
name|matchAllQuery
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregationBuilders
operator|.
name|geoBounds
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregationBuilders
operator|.
name|terms
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertAcked
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertSearchResponse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|core
operator|.
name|IsNull
operator|.
name|notNullValue
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
annotation|@
name|ElasticsearchIntegrationTest
operator|.
name|SuiteScopeTest
annotation|@
name|TestLogging
argument_list|(
literal|"indices.recovery:TRACE,action.search.type:TRACE"
argument_list|)
DECL|class|GeoBoundsTests
specifier|public
class|class
name|GeoBoundsTests
extends|extends
name|ElasticsearchIntegrationTest
block|{
DECL|field|SINGLE_VALUED_FIELD_NAME
specifier|private
specifier|static
specifier|final
name|String
name|SINGLE_VALUED_FIELD_NAME
init|=
literal|"geo_value"
decl_stmt|;
DECL|field|MULTI_VALUED_FIELD_NAME
specifier|private
specifier|static
specifier|final
name|String
name|MULTI_VALUED_FIELD_NAME
init|=
literal|"geo_values"
decl_stmt|;
DECL|field|NUMBER_FIELD_NAME
specifier|private
specifier|static
specifier|final
name|String
name|NUMBER_FIELD_NAME
init|=
literal|"l_values"
decl_stmt|;
DECL|field|numDocs
specifier|static
name|int
name|numDocs
decl_stmt|;
DECL|field|numUniqueGeoPoints
specifier|static
name|int
name|numUniqueGeoPoints
decl_stmt|;
DECL|field|singleValues
DECL|field|multiValues
specifier|static
name|GeoPoint
index|[]
name|singleValues
decl_stmt|,
name|multiValues
decl_stmt|;
DECL|field|singleTopLeft
DECL|field|singleBottomRight
DECL|field|multiTopLeft
DECL|field|multiBottomRight
DECL|field|unmappedTopLeft
DECL|field|unmappedBottomRight
specifier|static
name|GeoPoint
name|singleTopLeft
decl_stmt|,
name|singleBottomRight
decl_stmt|,
name|multiTopLeft
decl_stmt|,
name|multiBottomRight
decl_stmt|,
name|unmappedTopLeft
decl_stmt|,
name|unmappedBottomRight
decl_stmt|;
annotation|@
name|Override
DECL|method|setupSuiteScopeCluster
specifier|public
name|void
name|setupSuiteScopeCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type"
argument_list|,
name|SINGLE_VALUED_FIELD_NAME
argument_list|,
literal|"type=geo_point"
argument_list|,
name|MULTI_VALUED_FIELD_NAME
argument_list|,
literal|"type=geo_point"
argument_list|,
name|NUMBER_FIELD_NAME
argument_list|,
literal|"type=long"
argument_list|,
literal|"tag"
argument_list|,
literal|"type=string,index=not_analyzed"
argument_list|)
argument_list|)
expr_stmt|;
name|createIndex
argument_list|(
literal|"idx_unmapped"
argument_list|)
expr_stmt|;
name|unmappedTopLeft
operator|=
operator|new
name|GeoPoint
argument_list|(
name|Double
operator|.
name|NEGATIVE_INFINITY
argument_list|,
name|Double
operator|.
name|POSITIVE_INFINITY
argument_list|)
expr_stmt|;
name|unmappedBottomRight
operator|=
operator|new
name|GeoPoint
argument_list|(
name|Double
operator|.
name|POSITIVE_INFINITY
argument_list|,
name|Double
operator|.
name|NEGATIVE_INFINITY
argument_list|)
expr_stmt|;
name|singleTopLeft
operator|=
operator|new
name|GeoPoint
argument_list|(
name|Double
operator|.
name|NEGATIVE_INFINITY
argument_list|,
name|Double
operator|.
name|POSITIVE_INFINITY
argument_list|)
expr_stmt|;
name|singleBottomRight
operator|=
operator|new
name|GeoPoint
argument_list|(
name|Double
operator|.
name|POSITIVE_INFINITY
argument_list|,
name|Double
operator|.
name|NEGATIVE_INFINITY
argument_list|)
expr_stmt|;
name|multiTopLeft
operator|=
operator|new
name|GeoPoint
argument_list|(
name|Double
operator|.
name|NEGATIVE_INFINITY
argument_list|,
name|Double
operator|.
name|POSITIVE_INFINITY
argument_list|)
expr_stmt|;
name|multiBottomRight
operator|=
operator|new
name|GeoPoint
argument_list|(
name|Double
operator|.
name|POSITIVE_INFINITY
argument_list|,
name|Double
operator|.
name|NEGATIVE_INFINITY
argument_list|)
expr_stmt|;
name|numDocs
operator|=
name|randomIntBetween
argument_list|(
literal|6
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|numUniqueGeoPoints
operator|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
name|numDocs
argument_list|)
expr_stmt|;
name|singleValues
operator|=
operator|new
name|GeoPoint
index|[
name|numUniqueGeoPoints
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|singleValues
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|singleValues
index|[
name|i
index|]
operator|=
name|randomGeoPoint
argument_list|()
expr_stmt|;
name|updateBoundsTopLeft
argument_list|(
name|singleValues
index|[
name|i
index|]
argument_list|,
name|singleTopLeft
argument_list|)
expr_stmt|;
name|updateBoundsBottomRight
argument_list|(
name|singleValues
index|[
name|i
index|]
argument_list|,
name|singleBottomRight
argument_list|)
expr_stmt|;
block|}
name|multiValues
operator|=
operator|new
name|GeoPoint
index|[
name|numUniqueGeoPoints
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|multiValues
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|multiValues
index|[
name|i
index|]
operator|=
name|randomGeoPoint
argument_list|()
expr_stmt|;
name|updateBoundsTopLeft
argument_list|(
name|multiValues
index|[
name|i
index|]
argument_list|,
name|multiTopLeft
argument_list|)
expr_stmt|;
name|updateBoundsBottomRight
argument_list|(
name|multiValues
index|[
name|i
index|]
argument_list|,
name|multiBottomRight
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|IndexRequestBuilder
argument_list|>
name|builders
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|builders
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"idx"
argument_list|,
literal|"type"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|array
argument_list|(
name|SINGLE_VALUED_FIELD_NAME
argument_list|,
name|singleValues
index|[
name|i
operator|%
name|numUniqueGeoPoints
index|]
operator|.
name|lon
argument_list|()
argument_list|,
name|singleValues
index|[
name|i
operator|%
name|numUniqueGeoPoints
index|]
operator|.
name|lat
argument_list|()
argument_list|)
operator|.
name|startArray
argument_list|(
name|MULTI_VALUED_FIELD_NAME
argument_list|)
operator|.
name|startArray
argument_list|()
operator|.
name|value
argument_list|(
name|multiValues
index|[
name|i
operator|%
name|numUniqueGeoPoints
index|]
operator|.
name|lon
argument_list|()
argument_list|)
operator|.
name|value
argument_list|(
name|multiValues
index|[
name|i
operator|%
name|numUniqueGeoPoints
index|]
operator|.
name|lat
argument_list|()
argument_list|)
operator|.
name|endArray
argument_list|()
operator|.
name|startArray
argument_list|()
operator|.
name|value
argument_list|(
name|multiValues
index|[
operator|(
name|i
operator|+
literal|1
operator|)
operator|%
name|numUniqueGeoPoints
index|]
operator|.
name|lon
argument_list|()
argument_list|)
operator|.
name|value
argument_list|(
name|multiValues
index|[
operator|(
name|i
operator|+
literal|1
operator|)
operator|%
name|numUniqueGeoPoints
index|]
operator|.
name|lat
argument_list|()
argument_list|)
operator|.
name|endArray
argument_list|()
operator|.
name|endArray
argument_list|()
operator|.
name|field
argument_list|(
name|NUMBER_FIELD_NAME
argument_list|,
name|i
argument_list|)
operator|.
name|field
argument_list|(
literal|"tag"
argument_list|,
literal|"tag"
operator|+
name|i
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"empty_idx"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type"
argument_list|,
name|SINGLE_VALUED_FIELD_NAME
argument_list|,
literal|"type=geo_point"
argument_list|)
argument_list|)
expr_stmt|;
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"idx_dateline"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type"
argument_list|,
name|SINGLE_VALUED_FIELD_NAME
argument_list|,
literal|"type=geo_point"
argument_list|,
name|MULTI_VALUED_FIELD_NAME
argument_list|,
literal|"type=geo_point"
argument_list|,
name|NUMBER_FIELD_NAME
argument_list|,
literal|"type=long"
argument_list|,
literal|"tag"
argument_list|,
literal|"type=string,index=not_analyzed"
argument_list|)
argument_list|)
expr_stmt|;
name|GeoPoint
index|[]
name|geoValues
init|=
operator|new
name|GeoPoint
index|[
literal|5
index|]
decl_stmt|;
name|geoValues
index|[
literal|0
index|]
operator|=
operator|new
name|GeoPoint
argument_list|(
literal|38
argument_list|,
literal|178
argument_list|)
expr_stmt|;
name|geoValues
index|[
literal|1
index|]
operator|=
operator|new
name|GeoPoint
argument_list|(
literal|12
argument_list|,
operator|-
literal|179
argument_list|)
expr_stmt|;
name|geoValues
index|[
literal|2
index|]
operator|=
operator|new
name|GeoPoint
argument_list|(
operator|-
literal|24
argument_list|,
literal|170
argument_list|)
expr_stmt|;
name|geoValues
index|[
literal|3
index|]
operator|=
operator|new
name|GeoPoint
argument_list|(
literal|32
argument_list|,
operator|-
literal|175
argument_list|)
expr_stmt|;
name|geoValues
index|[
literal|4
index|]
operator|=
operator|new
name|GeoPoint
argument_list|(
operator|-
literal|11
argument_list|,
literal|178
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|builders
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"idx_dateline"
argument_list|,
literal|"type"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|array
argument_list|(
name|SINGLE_VALUED_FIELD_NAME
argument_list|,
name|geoValues
index|[
name|i
index|]
operator|.
name|lon
argument_list|()
argument_list|,
name|geoValues
index|[
name|i
index|]
operator|.
name|lat
argument_list|()
argument_list|)
operator|.
name|field
argument_list|(
name|NUMBER_FIELD_NAME
argument_list|,
name|i
argument_list|)
operator|.
name|field
argument_list|(
literal|"tag"
argument_list|,
literal|"tag"
operator|+
name|i
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"high_card_idx"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"number_of_shards"
argument_list|,
literal|2
argument_list|)
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type"
argument_list|,
name|SINGLE_VALUED_FIELD_NAME
argument_list|,
literal|"type=geo_point"
argument_list|,
name|MULTI_VALUED_FIELD_NAME
argument_list|,
literal|"type=geo_point"
argument_list|,
name|NUMBER_FIELD_NAME
argument_list|,
literal|"type=long"
argument_list|,
literal|"tag"
argument_list|,
literal|"type=string,index=not_analyzed"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2000
condition|;
name|i
operator|++
control|)
block|{
name|builders
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"high_card_idx"
argument_list|,
literal|"type"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|array
argument_list|(
name|SINGLE_VALUED_FIELD_NAME
argument_list|,
name|singleValues
index|[
name|i
operator|%
name|numUniqueGeoPoints
index|]
operator|.
name|lon
argument_list|()
argument_list|,
name|singleValues
index|[
name|i
operator|%
name|numUniqueGeoPoints
index|]
operator|.
name|lat
argument_list|()
argument_list|)
operator|.
name|startArray
argument_list|(
name|MULTI_VALUED_FIELD_NAME
argument_list|)
operator|.
name|startArray
argument_list|()
operator|.
name|value
argument_list|(
name|multiValues
index|[
name|i
operator|%
name|numUniqueGeoPoints
index|]
operator|.
name|lon
argument_list|()
argument_list|)
operator|.
name|value
argument_list|(
name|multiValues
index|[
name|i
operator|%
name|numUniqueGeoPoints
index|]
operator|.
name|lat
argument_list|()
argument_list|)
operator|.
name|endArray
argument_list|()
operator|.
name|startArray
argument_list|()
operator|.
name|value
argument_list|(
name|multiValues
index|[
operator|(
name|i
operator|+
literal|1
operator|)
operator|%
name|numUniqueGeoPoints
index|]
operator|.
name|lon
argument_list|()
argument_list|)
operator|.
name|value
argument_list|(
name|multiValues
index|[
operator|(
name|i
operator|+
literal|1
operator|)
operator|%
name|numUniqueGeoPoints
index|]
operator|.
name|lat
argument_list|()
argument_list|)
operator|.
name|endArray
argument_list|()
operator|.
name|endArray
argument_list|()
operator|.
name|field
argument_list|(
name|NUMBER_FIELD_NAME
argument_list|,
name|i
argument_list|)
operator|.
name|field
argument_list|(
literal|"tag"
argument_list|,
literal|"tag"
operator|+
name|i
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|builders
argument_list|)
expr_stmt|;
name|ensureSearchable
argument_list|()
expr_stmt|;
comment|// Added to debug a test failure where the terms aggregation seems to be reporting two documents with the same value for NUMBER_FIELD_NAME.  This will check that after
comment|// random indexing each document only has 1 value for NUMBER_FIELD_NAME and it is the correct value. Following this initial change its seems that this call was getting
comment|// more that 2000 hits (actual value was 2059) so now it will also check to ensure all hits have the correct index and type
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"high_card_idx"
argument_list|)
operator|.
name|addField
argument_list|(
name|NUMBER_FIELD_NAME
argument_list|)
operator|.
name|addSort
argument_list|(
name|SortBuilders
operator|.
name|fieldSort
argument_list|(
name|NUMBER_FIELD_NAME
argument_list|)
operator|.
name|order
argument_list|(
name|SortOrder
operator|.
name|ASC
argument_list|)
argument_list|)
operator|.
name|setSize
argument_list|(
literal|5000
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|long
name|totalHits
init|=
name|response
operator|.
name|getHits
argument_list|()
operator|.
name|totalHits
argument_list|()
decl_stmt|;
name|XContentBuilder
name|builder
init|=
name|response
operator|.
name|toXContent
argument_list|(
name|XContentBuilder
operator|.
name|builder
argument_list|(
name|JsonXContent
operator|.
name|jsonXContent
argument_list|)
argument_list|,
name|ToXContent
operator|.
name|EMPTY_PARAMS
argument_list|)
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Full high_card_idx Response Content:\n{ {} }"
argument_list|,
name|builder
operator|.
name|string
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|totalHits
condition|;
name|i
operator|++
control|)
block|{
name|SearchHit
name|searchHit
init|=
name|response
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
literal|"Hit "
operator|+
name|i
operator|+
literal|" with id: "
operator|+
name|searchHit
operator|.
name|getId
argument_list|()
argument_list|,
name|searchHit
operator|.
name|getIndex
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"high_card_idx"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"Hit "
operator|+
name|i
operator|+
literal|" with id: "
operator|+
name|searchHit
operator|.
name|getId
argument_list|()
argument_list|,
name|searchHit
operator|.
name|getType
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"type"
argument_list|)
argument_list|)
expr_stmt|;
name|SearchHitField
name|hitField
init|=
name|searchHit
operator|.
name|field
argument_list|(
name|NUMBER_FIELD_NAME
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
literal|"Hit "
operator|+
name|i
operator|+
literal|" has wrong number of values"
argument_list|,
name|hitField
operator|.
name|getValues
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Integer
name|value
init|=
name|hitField
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
literal|"Hit "
operator|+
name|i
operator|+
literal|" has wrong value"
argument_list|,
name|value
argument_list|,
name|equalTo
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|totalHits
argument_list|,
name|equalTo
argument_list|(
literal|2000l
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|updateBoundsBottomRight
specifier|private
name|void
name|updateBoundsBottomRight
parameter_list|(
name|GeoPoint
name|geoPoint
parameter_list|,
name|GeoPoint
name|currentBound
parameter_list|)
block|{
if|if
condition|(
name|geoPoint
operator|.
name|lat
argument_list|()
operator|<
name|currentBound
operator|.
name|lat
argument_list|()
condition|)
block|{
name|currentBound
operator|.
name|resetLat
argument_list|(
name|geoPoint
operator|.
name|lat
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|geoPoint
operator|.
name|lon
argument_list|()
operator|>
name|currentBound
operator|.
name|lon
argument_list|()
condition|)
block|{
name|currentBound
operator|.
name|resetLon
argument_list|(
name|geoPoint
operator|.
name|lon
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|updateBoundsTopLeft
specifier|private
name|void
name|updateBoundsTopLeft
parameter_list|(
name|GeoPoint
name|geoPoint
parameter_list|,
name|GeoPoint
name|currentBound
parameter_list|)
block|{
if|if
condition|(
name|geoPoint
operator|.
name|lat
argument_list|()
operator|>
name|currentBound
operator|.
name|lat
argument_list|()
condition|)
block|{
name|currentBound
operator|.
name|resetLat
argument_list|(
name|geoPoint
operator|.
name|lat
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|geoPoint
operator|.
name|lon
argument_list|()
operator|<
name|currentBound
operator|.
name|lon
argument_list|()
condition|)
block|{
name|currentBound
operator|.
name|resetLon
argument_list|(
name|geoPoint
operator|.
name|lon
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|randomGeoPoint
specifier|private
name|GeoPoint
name|randomGeoPoint
parameter_list|()
block|{
return|return
operator|new
name|GeoPoint
argument_list|(
operator|(
name|randomDouble
argument_list|()
operator|*
literal|180
operator|)
operator|-
literal|90
argument_list|,
operator|(
name|randomDouble
argument_list|()
operator|*
literal|360
operator|)
operator|-
literal|180
argument_list|)
return|;
block|}
annotation|@
name|Test
DECL|method|singleValuedField
specifier|public
name|void
name|singleValuedField
parameter_list|()
throws|throws
name|Exception
block|{
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|geoBounds
argument_list|(
literal|"geoBounds"
argument_list|)
operator|.
name|field
argument_list|(
name|SINGLE_VALUED_FIELD_NAME
argument_list|)
operator|.
name|wrapLongitude
argument_list|(
literal|false
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|GeoBounds
name|geoBounds
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"geoBounds"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|geoBounds
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|geoBounds
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"geoBounds"
argument_list|)
argument_list|)
expr_stmt|;
name|GeoPoint
name|topLeft
init|=
name|geoBounds
operator|.
name|topLeft
argument_list|()
decl_stmt|;
name|GeoPoint
name|bottomRight
init|=
name|geoBounds
operator|.
name|bottomRight
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|topLeft
operator|.
name|lat
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|singleTopLeft
operator|.
name|lat
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|topLeft
operator|.
name|lon
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|singleTopLeft
operator|.
name|lon
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bottomRight
operator|.
name|lat
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|singleBottomRight
operator|.
name|lat
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bottomRight
operator|.
name|lon
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|singleBottomRight
operator|.
name|lon
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|multiValuedField
specifier|public
name|void
name|multiValuedField
parameter_list|()
throws|throws
name|Exception
block|{
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|geoBounds
argument_list|(
literal|"geoBounds"
argument_list|)
operator|.
name|field
argument_list|(
name|MULTI_VALUED_FIELD_NAME
argument_list|)
operator|.
name|wrapLongitude
argument_list|(
literal|false
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|GeoBounds
name|geoBounds
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"geoBounds"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|geoBounds
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|geoBounds
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"geoBounds"
argument_list|)
argument_list|)
expr_stmt|;
name|GeoPoint
name|topLeft
init|=
name|geoBounds
operator|.
name|topLeft
argument_list|()
decl_stmt|;
name|GeoPoint
name|bottomRight
init|=
name|geoBounds
operator|.
name|bottomRight
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|topLeft
operator|.
name|lat
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|multiTopLeft
operator|.
name|lat
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|topLeft
operator|.
name|lon
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|multiTopLeft
operator|.
name|lon
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bottomRight
operator|.
name|lat
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|multiBottomRight
operator|.
name|lat
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bottomRight
operator|.
name|lon
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|multiBottomRight
operator|.
name|lon
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|unmapped
specifier|public
name|void
name|unmapped
parameter_list|()
throws|throws
name|Exception
block|{
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx_unmapped"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|geoBounds
argument_list|(
literal|"geoBounds"
argument_list|)
operator|.
name|field
argument_list|(
name|SINGLE_VALUED_FIELD_NAME
argument_list|)
operator|.
name|wrapLongitude
argument_list|(
literal|false
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|GeoBounds
name|geoBounds
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"geoBounds"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|geoBounds
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|geoBounds
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"geoBounds"
argument_list|)
argument_list|)
expr_stmt|;
name|GeoPoint
name|topLeft
init|=
name|geoBounds
operator|.
name|topLeft
argument_list|()
decl_stmt|;
name|GeoPoint
name|bottomRight
init|=
name|geoBounds
operator|.
name|bottomRight
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|topLeft
argument_list|,
name|equalTo
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bottomRight
argument_list|,
name|equalTo
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|partiallyUnmapped
specifier|public
name|void
name|partiallyUnmapped
parameter_list|()
throws|throws
name|Exception
block|{
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|,
literal|"idx_unmapped"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|geoBounds
argument_list|(
literal|"geoBounds"
argument_list|)
operator|.
name|field
argument_list|(
name|SINGLE_VALUED_FIELD_NAME
argument_list|)
operator|.
name|wrapLongitude
argument_list|(
literal|false
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|GeoBounds
name|geoBounds
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"geoBounds"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|geoBounds
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|geoBounds
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"geoBounds"
argument_list|)
argument_list|)
expr_stmt|;
name|GeoPoint
name|topLeft
init|=
name|geoBounds
operator|.
name|topLeft
argument_list|()
decl_stmt|;
name|GeoPoint
name|bottomRight
init|=
name|geoBounds
operator|.
name|bottomRight
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|topLeft
operator|.
name|lat
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|singleTopLeft
operator|.
name|lat
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|topLeft
operator|.
name|lon
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|singleTopLeft
operator|.
name|lon
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bottomRight
operator|.
name|lat
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|singleBottomRight
operator|.
name|lat
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bottomRight
operator|.
name|lon
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|singleBottomRight
operator|.
name|lon
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|emptyAggregation
specifier|public
name|void
name|emptyAggregation
parameter_list|()
throws|throws
name|Exception
block|{
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"empty_idx"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|geoBounds
argument_list|(
literal|"geoBounds"
argument_list|)
operator|.
name|field
argument_list|(
name|SINGLE_VALUED_FIELD_NAME
argument_list|)
operator|.
name|wrapLongitude
argument_list|(
literal|false
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getTotalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0l
argument_list|)
argument_list|)
expr_stmt|;
name|GeoBounds
name|geoBounds
init|=
name|searchResponse
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"geoBounds"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|geoBounds
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|geoBounds
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"geoBounds"
argument_list|)
argument_list|)
expr_stmt|;
name|GeoPoint
name|topLeft
init|=
name|geoBounds
operator|.
name|topLeft
argument_list|()
decl_stmt|;
name|GeoPoint
name|bottomRight
init|=
name|geoBounds
operator|.
name|bottomRight
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|topLeft
argument_list|,
name|equalTo
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bottomRight
argument_list|,
name|equalTo
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|singleValuedFieldNearDateLine
specifier|public
name|void
name|singleValuedFieldNearDateLine
parameter_list|()
throws|throws
name|Exception
block|{
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx_dateline"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|geoBounds
argument_list|(
literal|"geoBounds"
argument_list|)
operator|.
name|field
argument_list|(
name|SINGLE_VALUED_FIELD_NAME
argument_list|)
operator|.
name|wrapLongitude
argument_list|(
literal|false
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|GeoPoint
name|geoValuesTopLeft
init|=
operator|new
name|GeoPoint
argument_list|(
literal|38
argument_list|,
operator|-
literal|179
argument_list|)
decl_stmt|;
name|GeoPoint
name|geoValuesBottomRight
init|=
operator|new
name|GeoPoint
argument_list|(
operator|-
literal|24
argument_list|,
literal|178
argument_list|)
decl_stmt|;
name|GeoBounds
name|geoBounds
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"geoBounds"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|geoBounds
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|geoBounds
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"geoBounds"
argument_list|)
argument_list|)
expr_stmt|;
name|GeoPoint
name|topLeft
init|=
name|geoBounds
operator|.
name|topLeft
argument_list|()
decl_stmt|;
name|GeoPoint
name|bottomRight
init|=
name|geoBounds
operator|.
name|bottomRight
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|topLeft
operator|.
name|lat
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|geoValuesTopLeft
operator|.
name|lat
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|topLeft
operator|.
name|lon
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|geoValuesTopLeft
operator|.
name|lon
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bottomRight
operator|.
name|lat
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|geoValuesBottomRight
operator|.
name|lat
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bottomRight
operator|.
name|lon
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|geoValuesBottomRight
operator|.
name|lon
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|singleValuedFieldNearDateLineWrapLongitude
specifier|public
name|void
name|singleValuedFieldNearDateLineWrapLongitude
parameter_list|()
throws|throws
name|Exception
block|{
name|GeoPoint
name|geoValuesTopLeft
init|=
operator|new
name|GeoPoint
argument_list|(
literal|38
argument_list|,
literal|170
argument_list|)
decl_stmt|;
name|GeoPoint
name|geoValuesBottomRight
init|=
operator|new
name|GeoPoint
argument_list|(
operator|-
literal|24
argument_list|,
operator|-
literal|175
argument_list|)
decl_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx_dateline"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|geoBounds
argument_list|(
literal|"geoBounds"
argument_list|)
operator|.
name|field
argument_list|(
name|SINGLE_VALUED_FIELD_NAME
argument_list|)
operator|.
name|wrapLongitude
argument_list|(
literal|true
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|GeoBounds
name|geoBounds
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"geoBounds"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|geoBounds
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|geoBounds
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"geoBounds"
argument_list|)
argument_list|)
expr_stmt|;
name|GeoPoint
name|topLeft
init|=
name|geoBounds
operator|.
name|topLeft
argument_list|()
decl_stmt|;
name|GeoPoint
name|bottomRight
init|=
name|geoBounds
operator|.
name|bottomRight
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|topLeft
operator|.
name|lat
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|geoValuesTopLeft
operator|.
name|lat
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|topLeft
operator|.
name|lon
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|geoValuesTopLeft
operator|.
name|lon
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bottomRight
operator|.
name|lat
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|geoValuesBottomRight
operator|.
name|lat
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bottomRight
operator|.
name|lon
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|geoValuesBottomRight
operator|.
name|lon
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * This test forces the {@link GeoBoundsAggregator} to resize the {@link BigArray}s it uses to ensure they are resized correctly      */
annotation|@
name|Test
DECL|method|singleValuedFieldAsSubAggToHighCardTermsAgg
specifier|public
name|void
name|singleValuedFieldAsSubAggToHighCardTermsAgg
parameter_list|()
block|{
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"high_card_idx"
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|terms
argument_list|(
literal|"terms"
argument_list|)
operator|.
name|field
argument_list|(
name|NUMBER_FIELD_NAME
argument_list|)
operator|.
name|subAggregation
argument_list|(
name|geoBounds
argument_list|(
literal|"geoBounds"
argument_list|)
operator|.
name|field
argument_list|(
name|SINGLE_VALUED_FIELD_NAME
argument_list|)
operator|.
name|wrapLongitude
argument_list|(
literal|false
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Terms
name|terms
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"terms"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|terms
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"terms"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Bucket
argument_list|>
name|buckets
init|=
name|terms
operator|.
name|getBuckets
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|buckets
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|Bucket
name|bucket
init|=
name|buckets
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|bucket
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"Bucket "
operator|+
name|bucket
operator|.
name|getKey
argument_list|()
operator|+
literal|" has wrong number of documents"
argument_list|,
name|bucket
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
name|GeoBounds
name|geoBounds
init|=
name|bucket
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"geoBounds"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|geoBounds
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|geoBounds
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"geoBounds"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

