begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations.metrics
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|metrics
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|mahout
operator|.
name|math
operator|.
name|jet
operator|.
name|random
operator|.
name|AbstractContinousDistribution
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|mahout
operator|.
name|math
operator|.
name|jet
operator|.
name|random
operator|.
name|Gamma
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|mahout
operator|.
name|math
operator|.
name|jet
operator|.
name|random
operator|.
name|Normal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|mahout
operator|.
name|math
operator|.
name|jet
operator|.
name|random
operator|.
name|Uniform
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|metrics
operator|.
name|percentiles
operator|.
name|tdigest
operator|.
name|TDigestState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|lessThan
import|;
end_import

begin_comment
comment|// imported tests from upstream's TDigestTest
end_comment

begin_class
DECL|class|TDigestStateTests
specifier|public
class|class
name|TDigestStateTests
extends|extends
name|ElasticsearchTestCase
block|{
annotation|@
name|Test
DECL|method|testUniform
specifier|public
name|void
name|testUniform
parameter_list|()
block|{
name|Random
name|gen
init|=
name|getRandom
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|runTest
argument_list|(
operator|new
name|Uniform
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
name|gen
argument_list|)
argument_list|,
literal|100
argument_list|,
operator|new
name|double
index|[]
block|{
literal|0.001
block|,
literal|0.01
block|,
literal|0.1
block|,
literal|0.5
block|,
literal|0.9
block|,
literal|0.99
block|,
literal|0.999
block|}
argument_list|,
literal|"uniform"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testGamma
specifier|public
name|void
name|testGamma
parameter_list|()
block|{
comment|// this Gamma distribution is very heavily skewed.  The 0.1%-ile is 6.07e-30 while
comment|// the median is 0.006 and the 99.9th %-ile is 33.6 while the mean is 1.
comment|// this severe skew means that we have to have positional accuracy that
comment|// varies by over 11 orders of magnitude.
name|Random
name|gen
init|=
name|getRandom
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|runTest
argument_list|(
operator|new
name|Gamma
argument_list|(
literal|0.1
argument_list|,
literal|0.1
argument_list|,
name|gen
argument_list|)
argument_list|,
literal|100
argument_list|,
comment|//                    new double[]{6.0730483624079e-30, 6.0730483624079e-20, 6.0730483627432e-10, 5.9339110446023e-03,
comment|//                            2.6615455373884e+00, 1.5884778179295e+01, 3.3636770117188e+01},
operator|new
name|double
index|[]
block|{
literal|0.001
block|,
literal|0.01
block|,
literal|0.1
block|,
literal|0.5
block|,
literal|0.9
block|,
literal|0.99
block|,
literal|0.999
block|}
argument_list|,
literal|"gamma"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testNarrowNormal
specifier|public
name|void
name|testNarrowNormal
parameter_list|()
block|{
comment|// this mixture of a uniform and normal distribution has a very narrow peak which is centered
comment|// near the median.  Our system should be scale invariant and work well regardless.
specifier|final
name|Random
name|gen
init|=
name|getRandom
argument_list|()
decl_stmt|;
name|AbstractContinousDistribution
name|mix
init|=
operator|new
name|AbstractContinousDistribution
argument_list|()
block|{
name|AbstractContinousDistribution
name|normal
init|=
operator|new
name|Normal
argument_list|(
literal|0
argument_list|,
literal|1e-5
argument_list|,
name|gen
argument_list|)
decl_stmt|;
name|AbstractContinousDistribution
name|uniform
init|=
operator|new
name|Uniform
argument_list|(
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
name|gen
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|double
name|nextDouble
parameter_list|()
block|{
name|double
name|x
decl_stmt|;
if|if
condition|(
name|gen
operator|.
name|nextDouble
argument_list|()
operator|<
literal|0.5
condition|)
block|{
name|x
operator|=
name|uniform
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|x
operator|=
name|normal
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
block|}
return|return
name|x
return|;
block|}
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|runTest
argument_list|(
name|mix
argument_list|,
literal|100
argument_list|,
operator|new
name|double
index|[]
block|{
literal|0.001
block|,
literal|0.01
block|,
literal|0.1
block|,
literal|0.3
block|,
literal|0.5
block|,
literal|0.7
block|,
literal|0.9
block|,
literal|0.99
block|,
literal|0.999
block|}
argument_list|,
literal|"mixture"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testRepeatedValues
specifier|public
name|void
name|testRepeatedValues
parameter_list|()
block|{
specifier|final
name|Random
name|gen
init|=
name|getRandom
argument_list|()
decl_stmt|;
comment|// 5% of samples will be 0 or 1.0.  10% for each of the values 0.1 through 0.9
name|AbstractContinousDistribution
name|mix
init|=
operator|new
name|AbstractContinousDistribution
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|double
name|nextDouble
parameter_list|()
block|{
return|return
name|Math
operator|.
name|rint
argument_list|(
name|gen
operator|.
name|nextDouble
argument_list|()
operator|*
literal|10
argument_list|)
operator|/
literal|10.0
return|;
block|}
block|}
decl_stmt|;
name|TDigestState
name|dist
init|=
operator|new
name|TDigestState
argument_list|(
operator|(
name|double
operator|)
literal|1000
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Double
argument_list|>
name|data
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i1
init|=
literal|0
init|;
name|i1
operator|<
literal|100000
condition|;
name|i1
operator|++
control|)
block|{
name|double
name|x
init|=
name|mix
operator|.
name|nextDouble
argument_list|()
decl_stmt|;
name|data
operator|.
name|add
argument_list|(
name|x
argument_list|)
expr_stmt|;
name|dist
operator|.
name|add
argument_list|(
name|x
argument_list|)
expr_stmt|;
block|}
comment|// I would be happier with 5x compression, but repeated values make things kind of weird
name|assertTrue
argument_list|(
literal|"Summary is too large"
argument_list|,
name|dist
operator|.
name|centroidCount
argument_list|()
operator|<
literal|10
operator|*
operator|(
name|double
operator|)
literal|1000
argument_list|)
expr_stmt|;
comment|// all quantiles should round to nearest actual value
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|double
name|z
init|=
name|i
operator|/
literal|10.0
decl_stmt|;
comment|// we skip over troublesome points that are nearly halfway between
for|for
control|(
name|double
name|delta
range|:
operator|new
name|double
index|[]
block|{
literal|0.01
block|,
literal|0.02
block|,
literal|0.03
block|,
literal|0.07
block|,
literal|0.08
block|,
literal|0.09
block|}
control|)
block|{
name|double
name|q
init|=
name|z
operator|+
name|delta
decl_stmt|;
name|double
name|cdf
init|=
name|dist
operator|.
name|cdf
argument_list|(
name|q
argument_list|)
decl_stmt|;
comment|// we also relax the tolerances for repeated values
name|assertEquals
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"z=%.1f, q = %.3f, cdf = %.3f"
argument_list|,
name|z
argument_list|,
name|q
argument_list|,
name|cdf
argument_list|)
argument_list|,
name|z
operator|+
literal|0.05
argument_list|,
name|cdf
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|double
name|estimate
init|=
name|dist
operator|.
name|quantile
argument_list|(
name|q
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"z=%.1f, q = %.3f, cdf = %.3f, estimate = %.3f"
argument_list|,
name|z
argument_list|,
name|q
argument_list|,
name|cdf
argument_list|,
name|estimate
argument_list|)
argument_list|,
name|Math
operator|.
name|rint
argument_list|(
name|q
operator|*
literal|10
argument_list|)
operator|/
literal|10.0
argument_list|,
name|estimate
argument_list|,
literal|0.001
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testSequentialPoints
specifier|public
name|void
name|testSequentialPoints
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|runTest
argument_list|(
operator|new
name|AbstractContinousDistribution
argument_list|()
block|{
name|double
name|base
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
specifier|public
name|double
name|nextDouble
parameter_list|()
block|{
name|base
operator|+=
name|Math
operator|.
name|PI
operator|*
literal|1e-5
expr_stmt|;
return|return
name|base
return|;
block|}
block|}
argument_list|,
literal|100
argument_list|,
operator|new
name|double
index|[]
block|{
literal|0.001
block|,
literal|0.01
block|,
literal|0.1
block|,
literal|0.5
block|,
literal|0.9
block|,
literal|0.99
block|,
literal|0.999
block|}
argument_list|,
literal|"sequential"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|runTest
specifier|public
name|void
name|runTest
parameter_list|(
name|AbstractContinousDistribution
name|gen
parameter_list|,
name|double
name|sizeGuide
parameter_list|,
name|double
index|[]
name|qValues
parameter_list|,
name|String
name|tag
parameter_list|)
block|{
specifier|final
name|int
name|len
init|=
literal|100000
decl_stmt|;
specifier|final
name|TDigestState
name|dist
init|=
operator|new
name|TDigestState
argument_list|(
name|sizeGuide
argument_list|)
decl_stmt|;
name|double
index|[]
name|data
init|=
operator|new
name|double
index|[
name|len
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
operator|++
name|i
control|)
block|{
name|double
name|x
init|=
name|gen
operator|.
name|nextDouble
argument_list|()
decl_stmt|;
name|data
index|[
name|i
index|]
operator|=
name|x
expr_stmt|;
name|dist
operator|.
name|add
argument_list|(
name|x
argument_list|)
expr_stmt|;
block|}
name|dist
operator|.
name|compress
argument_list|()
expr_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|double
index|[]
name|xValues
init|=
name|qValues
operator|.
name|clone
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|qValues
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|double
name|ix
init|=
name|data
operator|.
name|length
operator|*
name|qValues
index|[
name|i
index|]
operator|-
literal|0.5
decl_stmt|;
name|int
name|index
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|floor
argument_list|(
name|ix
argument_list|)
decl_stmt|;
name|double
name|p
init|=
name|ix
operator|-
name|index
decl_stmt|;
name|xValues
index|[
name|i
index|]
operator|=
name|data
index|[
name|index
index|]
operator|*
operator|(
literal|1
operator|-
name|p
operator|)
operator|+
name|data
index|[
name|index
operator|+
literal|1
index|]
operator|*
name|p
expr_stmt|;
block|}
name|assertThat
argument_list|(
literal|"Summary is too large"
argument_list|,
operator|(
name|double
operator|)
name|dist
operator|.
name|centroidCount
argument_list|()
argument_list|,
name|lessThan
argument_list|(
name|sizeGuide
operator|*
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|softErrors
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|xValues
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|double
name|x
init|=
name|xValues
index|[
name|i
index|]
decl_stmt|;
name|double
name|q
init|=
name|qValues
index|[
name|i
index|]
decl_stmt|;
name|double
name|estimate
init|=
name|dist
operator|.
name|cdf
argument_list|(
name|x
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|q
argument_list|,
name|estimate
argument_list|,
literal|0.005
argument_list|)
expr_stmt|;
name|estimate
operator|=
name|cdf
argument_list|(
name|dist
operator|.
name|quantile
argument_list|(
name|q
argument_list|)
argument_list|,
name|data
argument_list|)
expr_stmt|;
if|if
condition|(
name|Math
operator|.
name|abs
argument_list|(
name|q
operator|-
name|estimate
argument_list|)
operator|>
literal|0.005
condition|)
block|{
name|softErrors
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|q
argument_list|,
name|estimate
argument_list|,
literal|0.012
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|softErrors
operator|<
literal|3
argument_list|)
expr_stmt|;
block|}
DECL|method|cdf
specifier|private
name|double
name|cdf
parameter_list|(
specifier|final
name|double
name|x
parameter_list|,
name|double
index|[]
name|data
parameter_list|)
block|{
name|int
name|n1
init|=
literal|0
decl_stmt|;
name|int
name|n2
init|=
literal|0
decl_stmt|;
for|for
control|(
name|double
name|v
range|:
name|data
control|)
block|{
name|n1
operator|+=
operator|(
name|v
operator|<
name|x
operator|)
condition|?
literal|1
else|:
literal|0
expr_stmt|;
name|n2
operator|+=
operator|(
name|v
operator|<=
name|x
operator|)
condition|?
literal|1
else|:
literal|0
expr_stmt|;
block|}
return|return
operator|(
name|n1
operator|+
name|n2
operator|)
operator|/
literal|2.0
operator|/
name|data
operator|.
name|length
return|;
block|}
block|}
end_class

end_unit

