begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations.metrics
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|metrics
package|;
end_package

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|cursors
operator|.
name|IntCursor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|Ints
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|ArrayUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|FixedBitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|metrics
operator|.
name|percentiles
operator|.
name|tdigest
operator|.
name|RedBlackTree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
DECL|class|RedBlackTreeTests
specifier|public
class|class
name|RedBlackTreeTests
extends|extends
name|ElasticsearchTestCase
block|{
DECL|class|IntRedBlackTree
specifier|private
specifier|static
class|class
name|IntRedBlackTree
extends|extends
name|RedBlackTree
block|{
DECL|field|tmpValue
specifier|private
name|int
name|tmpValue
decl_stmt|;
DECL|field|values
specifier|private
name|int
index|[]
name|values
decl_stmt|;
DECL|field|counts
specifier|private
name|int
index|[]
name|counts
decl_stmt|;
DECL|method|IntRedBlackTree
name|IntRedBlackTree
parameter_list|()
block|{
name|super
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|values
operator|=
operator|new
name|int
index|[
literal|5
index|]
expr_stmt|;
name|counts
operator|=
operator|new
name|int
index|[
literal|5
index|]
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|compare
specifier|protected
name|int
name|compare
parameter_list|(
name|int
name|node
parameter_list|)
block|{
return|return
name|Ints
operator|.
name|compare
argument_list|(
name|tmpValue
argument_list|,
name|values
index|[
name|node
index|]
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|merge
specifier|protected
name|void
name|merge
parameter_list|(
name|int
name|node
parameter_list|)
block|{
name|counts
index|[
name|node
index|]
operator|+=
literal|1
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|copy
specifier|protected
name|void
name|copy
parameter_list|(
name|int
name|node
parameter_list|)
block|{
name|values
index|[
name|node
index|]
operator|=
name|tmpValue
expr_stmt|;
name|counts
index|[
name|node
index|]
operator|=
literal|1
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|newNode
specifier|protected
name|int
name|newNode
parameter_list|()
block|{
specifier|final
name|int
name|newNode
init|=
name|super
operator|.
name|newNode
argument_list|()
decl_stmt|;
if|if
condition|(
name|values
operator|.
name|length
operator|<=
name|newNode
condition|)
block|{
name|values
operator|=
name|ArrayUtil
operator|.
name|grow
argument_list|(
name|values
argument_list|,
name|newNode
operator|+
literal|1
argument_list|)
expr_stmt|;
name|counts
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|counts
argument_list|,
name|values
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
return|return
name|newNode
return|;
block|}
DECL|method|add
specifier|public
name|boolean
name|add
parameter_list|(
name|int
name|value
parameter_list|)
block|{
name|tmpValue
operator|=
name|value
expr_stmt|;
return|return
name|super
operator|.
name|addNode
argument_list|()
return|;
block|}
DECL|method|remove
specifier|public
name|boolean
name|remove
parameter_list|(
name|int
name|value
parameter_list|)
block|{
name|tmpValue
operator|=
name|value
expr_stmt|;
specifier|final
name|int
name|nodeToRemove
init|=
name|getNode
argument_list|()
decl_stmt|;
if|if
condition|(
name|nodeToRemove
operator|==
name|NIL
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
name|super
operator|.
name|removeNode
argument_list|(
name|nodeToRemove
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"{ "
argument_list|)
expr_stmt|;
for|for
control|(
name|IntCursor
name|cursor
range|:
name|this
control|)
block|{
name|b
operator|.
name|append
argument_list|(
name|values
index|[
name|cursor
operator|.
name|value
index|]
operator|+
literal|"("
operator|+
name|counts
index|[
name|cursor
operator|.
name|value
index|]
operator|+
literal|"), "
argument_list|)
expr_stmt|;
block|}
name|b
operator|.
name|setLength
argument_list|(
name|b
operator|.
name|length
argument_list|()
operator|-
literal|2
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|" } "
argument_list|)
expr_stmt|;
return|return
name|b
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
DECL|method|testAdd
specifier|public
name|void
name|testAdd
parameter_list|()
block|{
name|Map
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|map
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|IntRedBlackTree
name|tree
init|=
operator|new
name|IntRedBlackTree
argument_list|()
decl_stmt|;
specifier|final
name|int
name|iters
init|=
name|scaledRandomIntBetween
argument_list|(
literal|1000
argument_list|,
literal|10000
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iters
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|int
name|value
init|=
name|randomInt
argument_list|(
literal|200
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|added
init|=
name|tree
operator|.
name|add
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|tree
operator|.
name|assertConsistent
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
operator|!
name|map
operator|.
name|containsKey
argument_list|(
name|value
argument_list|)
argument_list|,
name|added
argument_list|)
expr_stmt|;
if|if
condition|(
name|map
operator|.
name|containsKey
argument_list|(
name|value
argument_list|)
condition|)
block|{
name|map
operator|.
name|put
argument_list|(
name|value
argument_list|,
name|map
operator|.
name|get
argument_list|(
name|value
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|map
operator|.
name|put
argument_list|(
name|value
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|map
operator|.
name|size
argument_list|()
argument_list|,
name|tree
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|int
name|size
init|=
literal|0
decl_stmt|;
name|int
name|previousValue
init|=
name|Integer
operator|.
name|MIN_VALUE
decl_stmt|;
for|for
control|(
name|IntCursor
name|cursor
range|:
name|tree
control|)
block|{
operator|++
name|size
expr_stmt|;
specifier|final
name|int
name|value
init|=
name|tree
operator|.
name|values
index|[
name|cursor
operator|.
name|value
index|]
decl_stmt|;
name|assertTrue
argument_list|(
name|previousValue
operator|<
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|map
operator|.
name|get
argument_list|(
name|value
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|,
name|tree
operator|.
name|counts
index|[
name|cursor
operator|.
name|value
index|]
argument_list|)
expr_stmt|;
name|previousValue
operator|=
name|value
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|map
operator|.
name|size
argument_list|()
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
DECL|method|testRemove
specifier|public
name|void
name|testRemove
parameter_list|()
block|{
specifier|final
name|int
name|numValues
init|=
name|scaledRandomIntBetween
argument_list|(
literal|200
argument_list|,
literal|1000
argument_list|)
decl_stmt|;
specifier|final
name|FixedBitSet
name|values
init|=
operator|new
name|FixedBitSet
argument_list|(
name|numValues
argument_list|)
decl_stmt|;
name|values
operator|.
name|set
argument_list|(
literal|0
argument_list|,
name|numValues
argument_list|)
expr_stmt|;
name|IntRedBlackTree
name|tree
init|=
operator|new
name|IntRedBlackTree
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numValues
condition|;
operator|++
name|i
control|)
block|{
name|tree
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
specifier|final
name|int
name|iters
init|=
name|scaledRandomIntBetween
argument_list|(
literal|300
argument_list|,
literal|1000
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iters
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|int
name|value
init|=
name|randomInt
argument_list|(
name|numValues
operator|-
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|removed
init|=
name|tree
operator|.
name|remove
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|removed
argument_list|,
name|values
operator|.
name|get
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|values
operator|.
name|clear
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|values
operator|.
name|cardinality
argument_list|()
argument_list|,
name|tree
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|tree
operator|.
name|assertConsistent
argument_list|()
expr_stmt|;
block|}
name|int
name|size
init|=
literal|0
decl_stmt|;
name|int
name|previousValue
init|=
name|Integer
operator|.
name|MIN_VALUE
decl_stmt|;
for|for
control|(
name|IntCursor
name|cursor
range|:
name|tree
control|)
block|{
operator|++
name|size
expr_stmt|;
specifier|final
name|int
name|value
init|=
name|tree
operator|.
name|values
index|[
name|cursor
operator|.
name|value
index|]
decl_stmt|;
name|assertTrue
argument_list|(
name|previousValue
operator|<
name|value
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|values
operator|.
name|get
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|previousValue
operator|=
name|value
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|values
operator|.
name|cardinality
argument_list|()
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
DECL|method|testReverse
specifier|public
name|void
name|testReverse
parameter_list|()
block|{
name|IntRedBlackTree
name|tree
init|=
operator|new
name|IntRedBlackTree
argument_list|()
decl_stmt|;
specifier|final
name|int
name|iters
init|=
name|scaledRandomIntBetween
argument_list|(
literal|1000
argument_list|,
literal|10000
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iters
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|int
name|value
init|=
name|randomInt
argument_list|(
literal|2000
argument_list|)
decl_stmt|;
name|tree
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Integer
argument_list|>
name|sortedNodes
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|IntCursor
name|cursor
range|:
name|tree
control|)
block|{
name|sortedNodes
operator|.
name|add
argument_list|(
name|cursor
operator|.
name|value
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Integer
argument_list|>
name|reverseNodes
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|IntCursor
name|cursor
range|:
name|tree
operator|.
name|reverseSet
argument_list|()
control|)
block|{
name|reverseNodes
operator|.
name|add
argument_list|(
name|cursor
operator|.
name|value
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|reverse
argument_list|(
name|sortedNodes
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|sortedNodes
argument_list|,
name|reverseNodes
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

