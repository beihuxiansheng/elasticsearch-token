begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations.bucket
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|index
operator|.
name|IndexRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|terms
operator|.
name|Terms
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchIntegrationTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
operator|.
name|jsonBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
operator|.
name|matchAllQuery
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregationBuilders
operator|.
name|terms
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchIntegrationTest
operator|.
name|ClusterScope
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchIntegrationTest
operator|.
name|Scope
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|is
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
annotation|@
name|ClusterScope
argument_list|(
name|scope
operator|=
name|Scope
operator|.
name|TEST
argument_list|)
DECL|class|ShardSizeTermsTests
specifier|public
class|class
name|ShardSizeTermsTests
extends|extends
name|ElasticsearchIntegrationTest
block|{
comment|/**      * to properly test the effect/functionality of shard_size, we need to force having 2 shards and also      * control the routing such that certain documents will end on each shard. Using "djb" routing hash + ignoring the      * doc type when hashing will ensure that docs with routing value "1" will end up in a different shard than docs with      * routing value "2".      */
annotation|@
name|Override
DECL|method|nodeSettings
specifier|protected
name|Settings
name|nodeSettings
parameter_list|(
name|int
name|nodeOrdinal
parameter_list|)
block|{
return|return
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.number_of_shards"
argument_list|,
literal|2
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.number_of_replicas"
argument_list|,
literal|0
argument_list|)
operator|.
name|put
argument_list|(
literal|"cluster.routing.operation.hash.type"
argument_list|,
literal|"djb"
argument_list|)
operator|.
name|put
argument_list|(
literal|"cluster.routing.operation.use_type"
argument_list|,
literal|"false"
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Test
DECL|method|noShardSize_string
specifier|public
name|void
name|noShardSize_string
parameter_list|()
throws|throws
name|Exception
block|{
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type"
argument_list|,
literal|"key"
argument_list|,
literal|"type=string,index=not_analyzed"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|indexData
argument_list|()
expr_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"type"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|terms
argument_list|(
literal|"keys"
argument_list|)
operator|.
name|field
argument_list|(
literal|"key"
argument_list|)
operator|.
name|size
argument_list|(
literal|3
argument_list|)
operator|.
name|order
argument_list|(
name|Terms
operator|.
name|Order
operator|.
name|COUNT_DESC
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|Terms
name|terms
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"keys"
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|Terms
operator|.
name|Bucket
argument_list|>
name|buckets
init|=
name|terms
operator|.
name|buckets
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|buckets
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|expected
init|=
name|ImmutableMap
operator|.
expr|<
name|String
decl_stmt|,
name|Long
decl|>
name|builder
argument_list|()
decl|.
name|put
argument_list|(
literal|"1"
argument_list|,
literal|8l
argument_list|)
decl|.
name|put
argument_list|(
literal|"3"
argument_list|,
literal|8l
argument_list|)
decl|.
name|put
argument_list|(
literal|"2"
argument_list|,
literal|4l
argument_list|)
decl|.
name|build
argument_list|()
decl_stmt|;
for|for
control|(
name|Terms
operator|.
name|Bucket
name|bucket
range|:
name|buckets
control|)
block|{
name|assertThat
argument_list|(
name|bucket
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expected
operator|.
name|get
argument_list|(
name|bucket
operator|.
name|getKey
argument_list|()
operator|.
name|string
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|withShardSize_string
specifier|public
name|void
name|withShardSize_string
parameter_list|()
throws|throws
name|Exception
block|{
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type"
argument_list|,
literal|"key"
argument_list|,
literal|"type=string,index=not_analyzed"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|indexData
argument_list|()
expr_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"type"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|terms
argument_list|(
literal|"keys"
argument_list|)
operator|.
name|field
argument_list|(
literal|"key"
argument_list|)
operator|.
name|size
argument_list|(
literal|3
argument_list|)
operator|.
name|shardSize
argument_list|(
literal|5
argument_list|)
operator|.
name|order
argument_list|(
name|Terms
operator|.
name|Order
operator|.
name|COUNT_DESC
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|Terms
name|terms
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"keys"
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|Terms
operator|.
name|Bucket
argument_list|>
name|buckets
init|=
name|terms
operator|.
name|buckets
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|buckets
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
comment|// we still only return 3 entries (based on the 'size' param)
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|expected
init|=
name|ImmutableMap
operator|.
expr|<
name|String
decl_stmt|,
name|Long
decl|>
name|builder
argument_list|()
decl|.
name|put
argument_list|(
literal|"1"
argument_list|,
literal|8l
argument_list|)
decl|.
name|put
argument_list|(
literal|"3"
argument_list|,
literal|8l
argument_list|)
decl|.
name|put
argument_list|(
literal|"2"
argument_list|,
literal|5l
argument_list|)
comment|//<-- count is now fixed
decl|.
name|build
argument_list|()
decl_stmt|;
for|for
control|(
name|Terms
operator|.
name|Bucket
name|bucket
range|:
name|buckets
control|)
block|{
name|assertThat
argument_list|(
name|bucket
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expected
operator|.
name|get
argument_list|(
name|bucket
operator|.
name|getKey
argument_list|()
operator|.
name|string
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|withShardSize_string_singleShard
specifier|public
name|void
name|withShardSize_string_singleShard
parameter_list|()
throws|throws
name|Exception
block|{
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type"
argument_list|,
literal|"key"
argument_list|,
literal|"type=string,index=not_analyzed"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|indexData
argument_list|()
expr_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"type"
argument_list|)
operator|.
name|setRouting
argument_list|(
literal|"1"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|terms
argument_list|(
literal|"keys"
argument_list|)
operator|.
name|field
argument_list|(
literal|"key"
argument_list|)
operator|.
name|size
argument_list|(
literal|3
argument_list|)
operator|.
name|shardSize
argument_list|(
literal|5
argument_list|)
operator|.
name|order
argument_list|(
name|Terms
operator|.
name|Order
operator|.
name|COUNT_DESC
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|Terms
name|terms
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"keys"
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|Terms
operator|.
name|Bucket
argument_list|>
name|buckets
init|=
name|terms
operator|.
name|buckets
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|buckets
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
comment|// we still only return 3 entries (based on the 'size' param)
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|expected
init|=
name|ImmutableMap
operator|.
expr|<
name|String
decl_stmt|,
name|Long
decl|>
name|builder
argument_list|()
decl|.
name|put
argument_list|(
literal|"1"
argument_list|,
literal|5l
argument_list|)
decl|.
name|put
argument_list|(
literal|"2"
argument_list|,
literal|4l
argument_list|)
decl|.
name|put
argument_list|(
literal|"3"
argument_list|,
literal|3l
argument_list|)
comment|//<-- count is now fixed
decl|.
name|build
argument_list|()
decl_stmt|;
for|for
control|(
name|Terms
operator|.
name|Bucket
name|bucket
range|:
name|buckets
control|)
block|{
name|assertThat
argument_list|(
name|bucket
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expected
operator|.
name|get
argument_list|(
name|bucket
operator|.
name|getKey
argument_list|()
operator|.
name|string
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|noShardSize_long
specifier|public
name|void
name|noShardSize_long
parameter_list|()
throws|throws
name|Exception
block|{
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type"
argument_list|,
literal|"key"
argument_list|,
literal|"type=long"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|indexData
argument_list|()
expr_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"type"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|terms
argument_list|(
literal|"keys"
argument_list|)
operator|.
name|field
argument_list|(
literal|"key"
argument_list|)
operator|.
name|size
argument_list|(
literal|3
argument_list|)
operator|.
name|order
argument_list|(
name|Terms
operator|.
name|Order
operator|.
name|COUNT_DESC
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|Terms
name|terms
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"keys"
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|Terms
operator|.
name|Bucket
argument_list|>
name|buckets
init|=
name|terms
operator|.
name|buckets
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|buckets
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|Long
argument_list|>
name|expected
init|=
name|ImmutableMap
operator|.
expr|<
name|Integer
decl_stmt|,
name|Long
decl|>
name|builder
argument_list|()
decl|.
name|put
argument_list|(
literal|1
argument_list|,
literal|8l
argument_list|)
decl|.
name|put
argument_list|(
literal|3
argument_list|,
literal|8l
argument_list|)
decl|.
name|put
argument_list|(
literal|2
argument_list|,
literal|4l
argument_list|)
decl|.
name|build
argument_list|()
decl_stmt|;
for|for
control|(
name|Terms
operator|.
name|Bucket
name|bucket
range|:
name|buckets
control|)
block|{
name|assertThat
argument_list|(
name|bucket
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expected
operator|.
name|get
argument_list|(
name|bucket
operator|.
name|getKeyAsNumber
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|withShardSize_long
specifier|public
name|void
name|withShardSize_long
parameter_list|()
throws|throws
name|Exception
block|{
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type"
argument_list|,
literal|"key"
argument_list|,
literal|"type=long"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|indexData
argument_list|()
expr_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"type"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|terms
argument_list|(
literal|"keys"
argument_list|)
operator|.
name|field
argument_list|(
literal|"key"
argument_list|)
operator|.
name|size
argument_list|(
literal|3
argument_list|)
operator|.
name|shardSize
argument_list|(
literal|5
argument_list|)
operator|.
name|order
argument_list|(
name|Terms
operator|.
name|Order
operator|.
name|COUNT_DESC
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|Terms
name|terms
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"keys"
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|Terms
operator|.
name|Bucket
argument_list|>
name|buckets
init|=
name|terms
operator|.
name|buckets
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|buckets
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
comment|// we still only return 3 entries (based on the 'size' param)
name|Map
argument_list|<
name|Integer
argument_list|,
name|Long
argument_list|>
name|expected
init|=
name|ImmutableMap
operator|.
expr|<
name|Integer
decl_stmt|,
name|Long
decl|>
name|builder
argument_list|()
decl|.
name|put
argument_list|(
literal|1
argument_list|,
literal|8l
argument_list|)
decl|.
name|put
argument_list|(
literal|3
argument_list|,
literal|8l
argument_list|)
decl|.
name|put
argument_list|(
literal|2
argument_list|,
literal|5l
argument_list|)
comment|//<-- count is now fixed
decl|.
name|build
argument_list|()
decl_stmt|;
for|for
control|(
name|Terms
operator|.
name|Bucket
name|bucket
range|:
name|buckets
control|)
block|{
name|assertThat
argument_list|(
name|bucket
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expected
operator|.
name|get
argument_list|(
name|bucket
operator|.
name|getKeyAsNumber
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|withShardSize_long_singleShard
specifier|public
name|void
name|withShardSize_long_singleShard
parameter_list|()
throws|throws
name|Exception
block|{
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type"
argument_list|,
literal|"key"
argument_list|,
literal|"type=long"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|indexData
argument_list|()
expr_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"type"
argument_list|)
operator|.
name|setRouting
argument_list|(
literal|"1"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|terms
argument_list|(
literal|"keys"
argument_list|)
operator|.
name|field
argument_list|(
literal|"key"
argument_list|)
operator|.
name|size
argument_list|(
literal|3
argument_list|)
operator|.
name|shardSize
argument_list|(
literal|5
argument_list|)
operator|.
name|order
argument_list|(
name|Terms
operator|.
name|Order
operator|.
name|COUNT_DESC
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|Terms
name|terms
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"keys"
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|Terms
operator|.
name|Bucket
argument_list|>
name|buckets
init|=
name|terms
operator|.
name|buckets
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|buckets
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
comment|// we still only return 3 entries (based on the 'size' param)
name|Map
argument_list|<
name|Integer
argument_list|,
name|Long
argument_list|>
name|expected
init|=
name|ImmutableMap
operator|.
expr|<
name|Integer
decl_stmt|,
name|Long
decl|>
name|builder
argument_list|()
decl|.
name|put
argument_list|(
literal|1
argument_list|,
literal|5l
argument_list|)
decl|.
name|put
argument_list|(
literal|2
argument_list|,
literal|4l
argument_list|)
decl|.
name|put
argument_list|(
literal|3
argument_list|,
literal|3l
argument_list|)
decl|.
name|build
argument_list|()
decl_stmt|;
for|for
control|(
name|Terms
operator|.
name|Bucket
name|bucket
range|:
name|buckets
control|)
block|{
name|assertThat
argument_list|(
name|bucket
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expected
operator|.
name|get
argument_list|(
name|bucket
operator|.
name|getKeyAsNumber
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|noShardSize_double
specifier|public
name|void
name|noShardSize_double
parameter_list|()
throws|throws
name|Exception
block|{
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type"
argument_list|,
literal|"key"
argument_list|,
literal|"type=double"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|indexData
argument_list|()
expr_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"type"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|terms
argument_list|(
literal|"keys"
argument_list|)
operator|.
name|field
argument_list|(
literal|"key"
argument_list|)
operator|.
name|size
argument_list|(
literal|3
argument_list|)
operator|.
name|order
argument_list|(
name|Terms
operator|.
name|Order
operator|.
name|COUNT_DESC
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|Terms
name|terms
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"keys"
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|Terms
operator|.
name|Bucket
argument_list|>
name|buckets
init|=
name|terms
operator|.
name|buckets
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|buckets
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|Long
argument_list|>
name|expected
init|=
name|ImmutableMap
operator|.
expr|<
name|Integer
decl_stmt|,
name|Long
decl|>
name|builder
argument_list|()
decl|.
name|put
argument_list|(
literal|1
argument_list|,
literal|8l
argument_list|)
decl|.
name|put
argument_list|(
literal|3
argument_list|,
literal|8l
argument_list|)
decl|.
name|put
argument_list|(
literal|2
argument_list|,
literal|4l
argument_list|)
decl|.
name|build
argument_list|()
decl_stmt|;
for|for
control|(
name|Terms
operator|.
name|Bucket
name|bucket
range|:
name|buckets
control|)
block|{
name|assertThat
argument_list|(
name|bucket
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expected
operator|.
name|get
argument_list|(
name|bucket
operator|.
name|getKeyAsNumber
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|withShardSize_double
specifier|public
name|void
name|withShardSize_double
parameter_list|()
throws|throws
name|Exception
block|{
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type"
argument_list|,
literal|"key"
argument_list|,
literal|"type=double"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|indexData
argument_list|()
expr_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"type"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|terms
argument_list|(
literal|"keys"
argument_list|)
operator|.
name|field
argument_list|(
literal|"key"
argument_list|)
operator|.
name|size
argument_list|(
literal|3
argument_list|)
operator|.
name|shardSize
argument_list|(
literal|5
argument_list|)
operator|.
name|order
argument_list|(
name|Terms
operator|.
name|Order
operator|.
name|COUNT_DESC
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|Terms
name|terms
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"keys"
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|Terms
operator|.
name|Bucket
argument_list|>
name|buckets
init|=
name|terms
operator|.
name|buckets
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|buckets
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|Long
argument_list|>
name|expected
init|=
name|ImmutableMap
operator|.
expr|<
name|Integer
decl_stmt|,
name|Long
decl|>
name|builder
argument_list|()
decl|.
name|put
argument_list|(
literal|1
argument_list|,
literal|8l
argument_list|)
decl|.
name|put
argument_list|(
literal|3
argument_list|,
literal|8l
argument_list|)
decl|.
name|put
argument_list|(
literal|2
argument_list|,
literal|5l
argument_list|)
comment|//<-- count is now fixed
decl|.
name|build
argument_list|()
decl_stmt|;
for|for
control|(
name|Terms
operator|.
name|Bucket
name|bucket
range|:
name|buckets
control|)
block|{
name|assertThat
argument_list|(
name|bucket
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expected
operator|.
name|get
argument_list|(
name|bucket
operator|.
name|getKeyAsNumber
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|withShardSize_double_singleShard
specifier|public
name|void
name|withShardSize_double_singleShard
parameter_list|()
throws|throws
name|Exception
block|{
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type"
argument_list|,
literal|"key"
argument_list|,
literal|"type=double"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|indexData
argument_list|()
expr_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"type"
argument_list|)
operator|.
name|setRouting
argument_list|(
literal|"1"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|terms
argument_list|(
literal|"keys"
argument_list|)
operator|.
name|field
argument_list|(
literal|"key"
argument_list|)
operator|.
name|size
argument_list|(
literal|3
argument_list|)
operator|.
name|shardSize
argument_list|(
literal|5
argument_list|)
operator|.
name|order
argument_list|(
name|Terms
operator|.
name|Order
operator|.
name|COUNT_DESC
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|Terms
name|terms
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"keys"
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|Terms
operator|.
name|Bucket
argument_list|>
name|buckets
init|=
name|terms
operator|.
name|buckets
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|buckets
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|Long
argument_list|>
name|expected
init|=
name|ImmutableMap
operator|.
expr|<
name|Integer
decl_stmt|,
name|Long
decl|>
name|builder
argument_list|()
decl|.
name|put
argument_list|(
literal|1
argument_list|,
literal|5l
argument_list|)
decl|.
name|put
argument_list|(
literal|2
argument_list|,
literal|4l
argument_list|)
decl|.
name|put
argument_list|(
literal|3
argument_list|,
literal|3l
argument_list|)
decl|.
name|build
argument_list|()
decl_stmt|;
for|for
control|(
name|Terms
operator|.
name|Bucket
name|bucket
range|:
name|buckets
control|)
block|{
name|assertThat
argument_list|(
name|bucket
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expected
operator|.
name|get
argument_list|(
name|bucket
operator|.
name|getKeyAsNumber
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|indexData
specifier|private
name|void
name|indexData
parameter_list|()
throws|throws
name|Exception
block|{
comment|/*           ||          ||           size = 3, shard_size = 5               ||           shard_size = size = 3               ||         ||==========||==================================================||===============================================||         || shard 1: ||  "1" - 5 | "2" - 4 | "3" - 3 | "4" - 2 | "5" - 1 || "1" - 5 | "3" - 3 | "2" - 4                   ||         ||----------||--------------------------------------------------||-----------------------------------------------||         || shard 2: ||  "1" - 3 | "2" - 1 | "3" - 5 | "4" - 2 | "5" - 1 || "1" - 3 | "3" - 5 | "4" - 2                   ||         ||----------||--------------------------------------------------||-----------------------------------------------||         || reduced: ||  "1" - 8 | "2" - 5 | "3" - 8 | "4" - 4 | "5" - 2 ||                                               ||         ||          ||                                                  || "1" - 8, "3" - 8, "2" - 4<= WRONG         ||         ||          ||  "1" - 8 | "3" - 8 | "2" - 5<= CORRECT      ||                                               ||           */
name|List
argument_list|<
name|IndexRequestBuilder
argument_list|>
name|indexOps
init|=
operator|new
name|ArrayList
argument_list|<
name|IndexRequestBuilder
argument_list|>
argument_list|()
decl_stmt|;
name|indexDoc
argument_list|(
literal|"1"
argument_list|,
literal|"1"
argument_list|,
literal|5
argument_list|,
name|indexOps
argument_list|)
expr_stmt|;
name|indexDoc
argument_list|(
literal|"1"
argument_list|,
literal|"2"
argument_list|,
literal|4
argument_list|,
name|indexOps
argument_list|)
expr_stmt|;
name|indexDoc
argument_list|(
literal|"1"
argument_list|,
literal|"3"
argument_list|,
literal|3
argument_list|,
name|indexOps
argument_list|)
expr_stmt|;
name|indexDoc
argument_list|(
literal|"1"
argument_list|,
literal|"4"
argument_list|,
literal|2
argument_list|,
name|indexOps
argument_list|)
expr_stmt|;
name|indexDoc
argument_list|(
literal|"1"
argument_list|,
literal|"5"
argument_list|,
literal|1
argument_list|,
name|indexOps
argument_list|)
expr_stmt|;
comment|// total docs in shard "1" = 15
name|indexDoc
argument_list|(
literal|"2"
argument_list|,
literal|"1"
argument_list|,
literal|3
argument_list|,
name|indexOps
argument_list|)
expr_stmt|;
name|indexDoc
argument_list|(
literal|"2"
argument_list|,
literal|"2"
argument_list|,
literal|1
argument_list|,
name|indexOps
argument_list|)
expr_stmt|;
name|indexDoc
argument_list|(
literal|"2"
argument_list|,
literal|"3"
argument_list|,
literal|5
argument_list|,
name|indexOps
argument_list|)
expr_stmt|;
name|indexDoc
argument_list|(
literal|"2"
argument_list|,
literal|"4"
argument_list|,
literal|2
argument_list|,
name|indexOps
argument_list|)
expr_stmt|;
name|indexDoc
argument_list|(
literal|"2"
argument_list|,
literal|"5"
argument_list|,
literal|1
argument_list|,
name|indexOps
argument_list|)
expr_stmt|;
comment|// total docs in shard "2"  = 12
name|indexRandom
argument_list|(
literal|true
argument_list|,
name|indexOps
argument_list|)
expr_stmt|;
name|long
name|totalOnOne
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"type"
argument_list|)
operator|.
name|setRouting
argument_list|(
literal|"1"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
operator|.
name|getHits
argument_list|()
operator|.
name|getTotalHits
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|totalOnOne
argument_list|,
name|is
argument_list|(
literal|15l
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|totalOnTwo
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"type"
argument_list|)
operator|.
name|setRouting
argument_list|(
literal|"2"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
operator|.
name|getHits
argument_list|()
operator|.
name|getTotalHits
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|totalOnTwo
argument_list|,
name|is
argument_list|(
literal|12l
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|indexDoc
specifier|private
name|void
name|indexDoc
parameter_list|(
name|String
name|shard
parameter_list|,
name|String
name|key
parameter_list|,
name|int
name|times
parameter_list|,
name|List
argument_list|<
name|IndexRequestBuilder
argument_list|>
name|indexOps
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|times
condition|;
name|i
operator|++
control|)
block|{
name|indexOps
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"idx"
argument_list|,
literal|"type"
argument_list|)
operator|.
name|setRouting
argument_list|(
name|shard
argument_list|)
operator|.
name|setCreate
argument_list|(
literal|true
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"key"
argument_list|,
name|key
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

