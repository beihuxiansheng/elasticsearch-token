begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations.bucket.significant
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|significant
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|InputStreamStreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|OutputStreamStreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|json
operator|.
name|JsonXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchShardTarget
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|InternalAggregations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|significant
operator|.
name|heuristics
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|SearchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchIntegrationTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|TestSearchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|SignificanceHeuristicTests
specifier|public
class|class
name|SignificanceHeuristicTests
extends|extends
name|ElasticsearchTestCase
block|{
DECL|class|SignificantTermsTestSearchContext
specifier|static
class|class
name|SignificantTermsTestSearchContext
extends|extends
name|TestSearchContext
block|{
annotation|@
name|Override
DECL|method|numberOfShards
specifier|public
name|int
name|numberOfShards
parameter_list|()
block|{
return|return
literal|1
return|;
block|}
annotation|@
name|Override
DECL|method|shardTarget
specifier|public
name|SearchShardTarget
name|shardTarget
parameter_list|()
block|{
return|return
operator|new
name|SearchShardTarget
argument_list|(
literal|"no node, this is a unit test"
argument_list|,
literal|"no index, this is a unit test"
argument_list|,
literal|0
argument_list|)
return|;
block|}
block|}
comment|// test that stream output can actually be read - does not replace bwc test
annotation|@
name|Test
DECL|method|streamResponse
specifier|public
name|void
name|streamResponse
parameter_list|()
throws|throws
name|Exception
block|{
name|SignificanceHeuristicStreams
operator|.
name|registerStream
argument_list|(
name|MutualInformation
operator|.
name|STREAM
argument_list|,
name|MutualInformation
operator|.
name|STREAM
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|SignificanceHeuristicStreams
operator|.
name|registerStream
argument_list|(
name|JLHScore
operator|.
name|STREAM
argument_list|,
name|JLHScore
operator|.
name|STREAM
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|SignificanceHeuristicStreams
operator|.
name|registerStream
argument_list|(
name|GND
operator|.
name|STREAM
argument_list|,
name|GND
operator|.
name|STREAM
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|SignificanceHeuristicStreams
operator|.
name|registerStream
argument_list|(
name|ChiSquare
operator|.
name|STREAM
argument_list|,
name|ChiSquare
operator|.
name|STREAM
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Version
name|version
init|=
name|ElasticsearchIntegrationTest
operator|.
name|randomVersion
argument_list|()
decl_stmt|;
name|InternalSignificantTerms
index|[]
name|sigTerms
init|=
name|getRandomSignificantTerms
argument_list|(
name|getRandomSignificanceheuristic
argument_list|()
argument_list|)
decl_stmt|;
comment|// write
name|ByteArrayOutputStream
name|outBuffer
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|OutputStreamStreamOutput
name|out
init|=
operator|new
name|OutputStreamStreamOutput
argument_list|(
name|outBuffer
argument_list|)
decl_stmt|;
name|out
operator|.
name|setVersion
argument_list|(
name|version
argument_list|)
expr_stmt|;
name|sigTerms
index|[
literal|0
index|]
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
comment|// read
name|ByteArrayInputStream
name|inBuffer
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|outBuffer
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
name|InputStreamStreamInput
name|in
init|=
operator|new
name|InputStreamStreamInput
argument_list|(
name|inBuffer
argument_list|)
decl_stmt|;
name|in
operator|.
name|setVersion
argument_list|(
name|version
argument_list|)
expr_stmt|;
name|sigTerms
index|[
literal|1
index|]
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
if|if
condition|(
name|version
operator|.
name|onOrAfter
argument_list|(
name|Version
operator|.
name|V_1_3_0
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
name|sigTerms
index|[
literal|1
index|]
operator|.
name|significanceHeuristic
operator|.
name|equals
argument_list|(
name|sigTerms
index|[
literal|0
index|]
operator|.
name|significanceHeuristic
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
name|sigTerms
index|[
literal|1
index|]
operator|.
name|significanceHeuristic
operator|instanceof
name|JLHScore
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getRandomSignificantTerms
name|InternalSignificantTerms
index|[]
name|getRandomSignificantTerms
parameter_list|(
name|SignificanceHeuristic
name|heuristic
parameter_list|)
block|{
name|InternalSignificantTerms
index|[]
name|sTerms
init|=
operator|new
name|InternalSignificantTerms
index|[
literal|2
index|]
decl_stmt|;
name|ArrayList
argument_list|<
name|InternalSignificantTerms
operator|.
name|Bucket
argument_list|>
name|buckets
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|BytesRef
name|term
init|=
operator|new
name|BytesRef
argument_list|(
literal|"123.0"
argument_list|)
decl_stmt|;
name|buckets
operator|.
name|add
argument_list|(
operator|new
name|SignificantLongTerms
operator|.
name|Bucket
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|123
argument_list|,
name|InternalAggregations
operator|.
name|EMPTY
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|sTerms
index|[
literal|0
index|]
operator|=
operator|new
name|SignificantLongTerms
argument_list|(
literal|10
argument_list|,
literal|20
argument_list|,
literal|"some_name"
argument_list|,
literal|null
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|heuristic
argument_list|,
name|buckets
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|sTerms
index|[
literal|1
index|]
operator|=
operator|new
name|SignificantLongTerms
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|BytesRef
name|term
init|=
operator|new
name|BytesRef
argument_list|(
literal|"someterm"
argument_list|)
decl_stmt|;
name|buckets
operator|.
name|add
argument_list|(
operator|new
name|SignificantStringTerms
operator|.
name|Bucket
argument_list|(
name|term
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
name|InternalAggregations
operator|.
name|EMPTY
argument_list|)
argument_list|)
expr_stmt|;
name|sTerms
index|[
literal|0
index|]
operator|=
operator|new
name|SignificantStringTerms
argument_list|(
literal|10
argument_list|,
literal|20
argument_list|,
literal|"some_name"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|heuristic
argument_list|,
name|buckets
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|sTerms
index|[
literal|1
index|]
operator|=
operator|new
name|SignificantStringTerms
argument_list|()
expr_stmt|;
block|}
return|return
name|sTerms
return|;
block|}
DECL|method|getRandomSignificanceheuristic
name|SignificanceHeuristic
name|getRandomSignificanceheuristic
parameter_list|()
block|{
name|List
argument_list|<
name|SignificanceHeuristic
argument_list|>
name|heuristics
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|heuristics
operator|.
name|add
argument_list|(
name|JLHScore
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|heuristics
operator|.
name|add
argument_list|(
operator|new
name|MutualInformation
argument_list|(
name|randomBoolean
argument_list|()
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|heuristics
operator|.
name|add
argument_list|(
operator|new
name|GND
argument_list|(
name|randomBoolean
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|heuristics
operator|.
name|add
argument_list|(
operator|new
name|ChiSquare
argument_list|(
name|randomBoolean
argument_list|()
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|heuristics
operator|.
name|get
argument_list|(
name|randomInt
argument_list|(
literal|3
argument_list|)
argument_list|)
return|;
block|}
comment|// test that
comment|// 1. The output of the builders can actually be parsed
comment|// 2. The parser does not swallow parameters after a significance heuristic was defined
annotation|@
name|Test
DECL|method|testBuilderAndParser
specifier|public
name|void
name|testBuilderAndParser
parameter_list|()
throws|throws
name|Exception
block|{
name|Set
argument_list|<
name|SignificanceHeuristicParser
argument_list|>
name|parsers
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|parsers
operator|.
name|add
argument_list|(
operator|new
name|JLHScore
operator|.
name|JLHScoreParser
argument_list|()
argument_list|)
expr_stmt|;
name|parsers
operator|.
name|add
argument_list|(
operator|new
name|MutualInformation
operator|.
name|MutualInformationParser
argument_list|()
argument_list|)
expr_stmt|;
name|parsers
operator|.
name|add
argument_list|(
operator|new
name|GND
operator|.
name|GNDParser
argument_list|()
argument_list|)
expr_stmt|;
name|parsers
operator|.
name|add
argument_list|(
operator|new
name|ChiSquare
operator|.
name|ChiSquareParser
argument_list|()
argument_list|)
expr_stmt|;
name|SignificanceHeuristicParserMapper
name|heuristicParserMapper
init|=
operator|new
name|SignificanceHeuristicParserMapper
argument_list|(
name|parsers
argument_list|)
decl_stmt|;
name|SearchContext
name|searchContext
init|=
operator|new
name|SignificantTermsTestSearchContext
argument_list|()
decl_stmt|;
comment|// test jlh with string
name|assertTrue
argument_list|(
name|parseFromString
argument_list|(
name|heuristicParserMapper
argument_list|,
name|searchContext
argument_list|,
literal|"\"jlh\":{}"
argument_list|)
operator|instanceof
name|JLHScore
argument_list|)
expr_stmt|;
comment|// test gnd with string
name|assertTrue
argument_list|(
name|parseFromString
argument_list|(
name|heuristicParserMapper
argument_list|,
name|searchContext
argument_list|,
literal|"\"gnd\":{}"
argument_list|)
operator|instanceof
name|GND
argument_list|)
expr_stmt|;
comment|// test mutual information with string
name|boolean
name|includeNegatives
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
name|boolean
name|backgroundIsSuperset
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|parseFromString
argument_list|(
name|heuristicParserMapper
argument_list|,
name|searchContext
argument_list|,
literal|"\"mutual_information\":{\"include_negatives\": "
operator|+
name|includeNegatives
operator|+
literal|", \"background_is_superset\":"
operator|+
name|backgroundIsSuperset
operator|+
literal|"}"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
call|(
name|SignificanceHeuristic
call|)
argument_list|(
operator|new
name|MutualInformation
argument_list|(
name|includeNegatives
argument_list|,
name|backgroundIsSuperset
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|parseFromString
argument_list|(
name|heuristicParserMapper
argument_list|,
name|searchContext
argument_list|,
literal|"\"chi_square\":{\"include_negatives\": "
operator|+
name|includeNegatives
operator|+
literal|", \"background_is_superset\":"
operator|+
name|backgroundIsSuperset
operator|+
literal|"}"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
call|(
name|SignificanceHeuristic
call|)
argument_list|(
operator|new
name|ChiSquare
argument_list|(
name|includeNegatives
argument_list|,
name|backgroundIsSuperset
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// test with builders
name|assertTrue
argument_list|(
name|parseFromBuilder
argument_list|(
name|heuristicParserMapper
argument_list|,
name|searchContext
argument_list|,
operator|new
name|JLHScore
operator|.
name|JLHScoreBuilder
argument_list|()
argument_list|)
operator|instanceof
name|JLHScore
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|parseFromBuilder
argument_list|(
name|heuristicParserMapper
argument_list|,
name|searchContext
argument_list|,
operator|new
name|GND
operator|.
name|GNDBuilder
argument_list|(
name|backgroundIsSuperset
argument_list|)
argument_list|)
operator|instanceof
name|GND
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|parseFromBuilder
argument_list|(
name|heuristicParserMapper
argument_list|,
name|searchContext
argument_list|,
operator|new
name|MutualInformation
operator|.
name|MutualInformationBuilder
argument_list|(
name|includeNegatives
argument_list|,
name|backgroundIsSuperset
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
operator|(
name|SignificanceHeuristic
operator|)
operator|new
name|MutualInformation
argument_list|(
name|includeNegatives
argument_list|,
name|backgroundIsSuperset
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|parseFromBuilder
argument_list|(
name|heuristicParserMapper
argument_list|,
name|searchContext
argument_list|,
operator|new
name|ChiSquare
operator|.
name|ChiSquareBuilder
argument_list|(
name|includeNegatives
argument_list|,
name|backgroundIsSuperset
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
operator|(
name|SignificanceHeuristic
operator|)
operator|new
name|ChiSquare
argument_list|(
name|includeNegatives
argument_list|,
name|backgroundIsSuperset
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// test exceptions
name|String
name|faultyHeuristicdefinition
init|=
literal|"\"mutual_information\":{\"include_negatives\": false, \"some_unknown_field\": false}"
decl_stmt|;
name|String
name|expectedError
init|=
literal|"unknown for mutual_information"
decl_stmt|;
name|checkParseException
argument_list|(
name|heuristicParserMapper
argument_list|,
name|searchContext
argument_list|,
name|faultyHeuristicdefinition
argument_list|,
name|expectedError
argument_list|)
expr_stmt|;
name|faultyHeuristicdefinition
operator|=
literal|"\"chi_square\":{\"unknown_field\": true}"
expr_stmt|;
name|expectedError
operator|=
literal|"unknown for chi_square"
expr_stmt|;
name|checkParseException
argument_list|(
name|heuristicParserMapper
argument_list|,
name|searchContext
argument_list|,
name|faultyHeuristicdefinition
argument_list|,
name|expectedError
argument_list|)
expr_stmt|;
name|faultyHeuristicdefinition
operator|=
literal|"\"jlh\":{\"unknown_field\": true}"
expr_stmt|;
name|expectedError
operator|=
literal|"expected }, got "
expr_stmt|;
name|checkParseException
argument_list|(
name|heuristicParserMapper
argument_list|,
name|searchContext
argument_list|,
name|faultyHeuristicdefinition
argument_list|,
name|expectedError
argument_list|)
expr_stmt|;
name|faultyHeuristicdefinition
operator|=
literal|"\"gnd\":{\"unknown_field\": true}"
expr_stmt|;
name|expectedError
operator|=
literal|"unknown for gnd"
expr_stmt|;
name|checkParseException
argument_list|(
name|heuristicParserMapper
argument_list|,
name|searchContext
argument_list|,
name|faultyHeuristicdefinition
argument_list|,
name|expectedError
argument_list|)
expr_stmt|;
block|}
DECL|method|checkParseException
specifier|protected
name|void
name|checkParseException
parameter_list|(
name|SignificanceHeuristicParserMapper
name|heuristicParserMapper
parameter_list|,
name|SearchContext
name|searchContext
parameter_list|,
name|String
name|faultyHeuristicDefinition
parameter_list|,
name|String
name|expectedError
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|XContentParser
name|stParser
init|=
name|JsonXContent
operator|.
name|jsonXContent
operator|.
name|createParser
argument_list|(
literal|"{\"field\":\"text\", "
operator|+
name|faultyHeuristicDefinition
operator|+
literal|",\"min_doc_count\":200}"
argument_list|)
decl_stmt|;
name|stParser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
operator|new
name|SignificantTermsParser
argument_list|(
name|heuristicParserMapper
argument_list|)
operator|.
name|parse
argument_list|(
literal|"testagg"
argument_list|,
name|stParser
argument_list|,
name|searchContext
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ElasticsearchParseException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|expectedError
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|parseFromBuilder
specifier|protected
name|SignificanceHeuristic
name|parseFromBuilder
parameter_list|(
name|SignificanceHeuristicParserMapper
name|heuristicParserMapper
parameter_list|,
name|SearchContext
name|searchContext
parameter_list|,
name|SignificanceHeuristicBuilder
name|significanceHeuristicBuilder
parameter_list|)
throws|throws
name|IOException
block|{
name|SignificantTermsBuilder
name|stBuilder
init|=
operator|new
name|SignificantTermsBuilder
argument_list|(
literal|"testagg"
argument_list|)
decl_stmt|;
name|stBuilder
operator|.
name|significanceHeuristic
argument_list|(
name|significanceHeuristicBuilder
argument_list|)
operator|.
name|field
argument_list|(
literal|"text"
argument_list|)
operator|.
name|minDocCount
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|XContentBuilder
name|stXContentBuilder
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
decl_stmt|;
name|stBuilder
operator|.
name|internalXContent
argument_list|(
name|stXContentBuilder
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|XContentParser
name|stParser
init|=
name|JsonXContent
operator|.
name|jsonXContent
operator|.
name|createParser
argument_list|(
name|stXContentBuilder
operator|.
name|string
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|parseSignificanceHeuristic
argument_list|(
name|heuristicParserMapper
argument_list|,
name|searchContext
argument_list|,
name|stParser
argument_list|)
return|;
block|}
DECL|method|parseSignificanceHeuristic
specifier|private
name|SignificanceHeuristic
name|parseSignificanceHeuristic
parameter_list|(
name|SignificanceHeuristicParserMapper
name|heuristicParserMapper
parameter_list|,
name|SearchContext
name|searchContext
parameter_list|,
name|XContentParser
name|stParser
parameter_list|)
throws|throws
name|IOException
block|{
name|stParser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|SignificantTermsAggregatorFactory
name|aggregatorFactory
init|=
operator|(
name|SignificantTermsAggregatorFactory
operator|)
operator|new
name|SignificantTermsParser
argument_list|(
name|heuristicParserMapper
argument_list|)
operator|.
name|parse
argument_list|(
literal|"testagg"
argument_list|,
name|stParser
argument_list|,
name|searchContext
argument_list|)
decl_stmt|;
name|stParser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|aggregatorFactory
operator|.
name|getBucketCountThresholds
argument_list|()
operator|.
name|getMinDocCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|200l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|stParser
operator|.
name|currentToken
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|stParser
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|aggregatorFactory
operator|.
name|getSignificanceHeuristic
argument_list|()
return|;
block|}
DECL|method|parseFromString
specifier|protected
name|SignificanceHeuristic
name|parseFromString
parameter_list|(
name|SignificanceHeuristicParserMapper
name|heuristicParserMapper
parameter_list|,
name|SearchContext
name|searchContext
parameter_list|,
name|String
name|heuristicString
parameter_list|)
throws|throws
name|IOException
block|{
name|XContentParser
name|stParser
init|=
name|JsonXContent
operator|.
name|jsonXContent
operator|.
name|createParser
argument_list|(
literal|"{\"field\":\"text\", "
operator|+
name|heuristicString
operator|+
literal|", \"min_doc_count\":200}"
argument_list|)
decl_stmt|;
return|return
name|parseSignificanceHeuristic
argument_list|(
name|heuristicParserMapper
argument_list|,
name|searchContext
argument_list|,
name|stParser
argument_list|)
return|;
block|}
DECL|method|testBackgroundAssertions
name|void
name|testBackgroundAssertions
parameter_list|(
name|SignificanceHeuristic
name|heuristicIsSuperset
parameter_list|,
name|SignificanceHeuristic
name|heuristicNotSuperset
parameter_list|)
block|{
try|try
block|{
name|heuristicIsSuperset
operator|.
name|getScore
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ElasticsearchIllegalArgumentException
name|illegalArgumentException
parameter_list|)
block|{
name|assertNotNull
argument_list|(
name|illegalArgumentException
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|illegalArgumentException
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"subsetFreq> supersetFreq"
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|heuristicIsSuperset
operator|.
name|getScore
argument_list|(
literal|1
argument_list|,
literal|4
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ElasticsearchIllegalArgumentException
name|illegalArgumentException
parameter_list|)
block|{
name|assertNotNull
argument_list|(
name|illegalArgumentException
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|illegalArgumentException
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"subsetSize> supersetSize"
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|heuristicIsSuperset
operator|.
name|getScore
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ElasticsearchIllegalArgumentException
name|illegalArgumentException
parameter_list|)
block|{
name|assertNotNull
argument_list|(
name|illegalArgumentException
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|illegalArgumentException
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"subsetFreq> subsetSize"
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|heuristicIsSuperset
operator|.
name|getScore
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|4
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ElasticsearchIllegalArgumentException
name|illegalArgumentException
parameter_list|)
block|{
name|assertNotNull
argument_list|(
name|illegalArgumentException
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|illegalArgumentException
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"supersetFreq> supersetSize"
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|heuristicIsSuperset
operator|.
name|getScore
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ElasticsearchIllegalArgumentException
name|assertionError
parameter_list|)
block|{
name|assertNotNull
argument_list|(
name|assertionError
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|assertionError
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"supersetFreq - subsetFreq> supersetSize - subsetSize"
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|int
name|idx
init|=
name|randomInt
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|long
index|[]
name|values
init|=
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|4
block|}
decl_stmt|;
name|values
index|[
name|idx
index|]
operator|*=
operator|-
literal|1
expr_stmt|;
name|heuristicIsSuperset
operator|.
name|getScore
argument_list|(
name|values
index|[
literal|0
index|]
argument_list|,
name|values
index|[
literal|1
index|]
argument_list|,
name|values
index|[
literal|2
index|]
argument_list|,
name|values
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ElasticsearchIllegalArgumentException
name|illegalArgumentException
parameter_list|)
block|{
name|assertNotNull
argument_list|(
name|illegalArgumentException
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|illegalArgumentException
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Frequencies of subset and superset must be positive"
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|heuristicNotSuperset
operator|.
name|getScore
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ElasticsearchIllegalArgumentException
name|illegalArgumentException
parameter_list|)
block|{
name|assertNotNull
argument_list|(
name|illegalArgumentException
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|illegalArgumentException
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"subsetFreq> subsetSize"
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|heuristicNotSuperset
operator|.
name|getScore
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|4
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ElasticsearchIllegalArgumentException
name|illegalArgumentException
parameter_list|)
block|{
name|assertNotNull
argument_list|(
name|illegalArgumentException
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|illegalArgumentException
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"supersetFreq> supersetSize"
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|int
name|idx
init|=
name|randomInt
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|long
index|[]
name|values
init|=
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|4
block|}
decl_stmt|;
name|values
index|[
name|idx
index|]
operator|*=
operator|-
literal|1
expr_stmt|;
name|heuristicNotSuperset
operator|.
name|getScore
argument_list|(
name|values
index|[
literal|0
index|]
argument_list|,
name|values
index|[
literal|1
index|]
argument_list|,
name|values
index|[
literal|2
index|]
argument_list|,
name|values
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ElasticsearchIllegalArgumentException
name|illegalArgumentException
parameter_list|)
block|{
name|assertNotNull
argument_list|(
name|illegalArgumentException
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|illegalArgumentException
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Frequencies of subset and superset must be positive"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testAssertions
name|void
name|testAssertions
parameter_list|(
name|SignificanceHeuristic
name|heuristic
parameter_list|)
block|{
try|try
block|{
name|int
name|idx
init|=
name|randomInt
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|long
index|[]
name|values
init|=
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|4
block|}
decl_stmt|;
name|values
index|[
name|idx
index|]
operator|*=
operator|-
literal|1
expr_stmt|;
name|heuristic
operator|.
name|getScore
argument_list|(
name|values
index|[
literal|0
index|]
argument_list|,
name|values
index|[
literal|1
index|]
argument_list|,
name|values
index|[
literal|2
index|]
argument_list|,
name|values
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ElasticsearchIllegalArgumentException
name|illegalArgumentException
parameter_list|)
block|{
name|assertNotNull
argument_list|(
name|illegalArgumentException
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|illegalArgumentException
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Frequencies of subset and superset must be positive"
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|heuristic
operator|.
name|getScore
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|4
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ElasticsearchIllegalArgumentException
name|illegalArgumentException
parameter_list|)
block|{
name|assertNotNull
argument_list|(
name|illegalArgumentException
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|illegalArgumentException
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"supersetFreq> supersetSize"
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|heuristic
operator|.
name|getScore
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ElasticsearchIllegalArgumentException
name|illegalArgumentException
parameter_list|)
block|{
name|assertNotNull
argument_list|(
name|illegalArgumentException
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|illegalArgumentException
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"subsetFreq> subsetSize"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testAssertions
specifier|public
name|void
name|testAssertions
parameter_list|()
throws|throws
name|Exception
block|{
name|testBackgroundAssertions
argument_list|(
operator|new
name|MutualInformation
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|,
operator|new
name|MutualInformation
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|testBackgroundAssertions
argument_list|(
operator|new
name|ChiSquare
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|,
operator|new
name|ChiSquare
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|testBackgroundAssertions
argument_list|(
operator|new
name|GND
argument_list|(
literal|true
argument_list|)
argument_list|,
operator|new
name|GND
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|testAssertions
argument_list|(
name|JLHScore
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|basicScoreProperties
specifier|public
name|void
name|basicScoreProperties
parameter_list|()
block|{
name|basicScoreProperties
argument_list|(
name|JLHScore
operator|.
name|INSTANCE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|basicScoreProperties
argument_list|(
operator|new
name|GND
argument_list|(
literal|true
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|basicScoreProperties
argument_list|(
operator|new
name|MutualInformation
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|basicScoreProperties
argument_list|(
operator|new
name|ChiSquare
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|basicScoreProperties
specifier|public
name|void
name|basicScoreProperties
parameter_list|(
name|SignificanceHeuristic
name|heuristic
parameter_list|,
name|boolean
name|test0
parameter_list|)
block|{
name|assertThat
argument_list|(
name|heuristic
operator|.
name|getScore
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|,
name|greaterThan
argument_list|(
literal|0.0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|heuristic
operator|.
name|getScore
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|,
name|lessThan
argument_list|(
name|heuristic
operator|.
name|getScore
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|heuristic
operator|.
name|getScore
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
argument_list|,
name|lessThan
argument_list|(
name|heuristic
operator|.
name|getScore
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|4
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|test0
condition|)
block|{
name|assertThat
argument_list|(
name|heuristic
operator|.
name|getScore
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|0.0
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|double
name|score
init|=
literal|0.0
decl_stmt|;
try|try
block|{
name|long
name|a
init|=
name|randomLong
argument_list|()
decl_stmt|;
name|long
name|b
init|=
name|randomLong
argument_list|()
decl_stmt|;
name|long
name|c
init|=
name|randomLong
argument_list|()
decl_stmt|;
name|long
name|d
init|=
name|randomLong
argument_list|()
decl_stmt|;
name|score
operator|=
name|heuristic
operator|.
name|getScore
argument_list|(
name|a
argument_list|,
name|b
argument_list|,
name|c
argument_list|,
name|d
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ElasticsearchIllegalArgumentException
name|e
parameter_list|)
block|{         }
name|assertThat
argument_list|(
name|score
argument_list|,
name|greaterThanOrEqualTo
argument_list|(
literal|0.0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|scoreMutual
specifier|public
name|void
name|scoreMutual
parameter_list|()
throws|throws
name|Exception
block|{
name|SignificanceHeuristic
name|heuristic
init|=
operator|new
name|MutualInformation
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|heuristic
operator|.
name|getScore
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|,
name|greaterThan
argument_list|(
literal|0.0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|heuristic
operator|.
name|getScore
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|,
name|lessThan
argument_list|(
name|heuristic
operator|.
name|getScore
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|heuristic
operator|.
name|getScore
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
literal|4
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|1.0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|heuristic
operator|.
name|getScore
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
literal|4
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|1.0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|heuristic
operator|.
name|getScore
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|0.0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|heuristic
operator|.
name|getScore
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
literal|4
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|0.0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|heuristic
operator|.
name|getScore
argument_list|(
literal|3
argument_list|,
literal|6
argument_list|,
literal|9
argument_list|,
literal|18
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|0.0
argument_list|)
argument_list|)
expr_stmt|;
name|double
name|score
init|=
literal|0.0
decl_stmt|;
try|try
block|{
name|long
name|a
init|=
name|randomLong
argument_list|()
decl_stmt|;
name|long
name|b
init|=
name|randomLong
argument_list|()
decl_stmt|;
name|long
name|c
init|=
name|randomLong
argument_list|()
decl_stmt|;
name|long
name|d
init|=
name|randomLong
argument_list|()
decl_stmt|;
name|score
operator|=
name|heuristic
operator|.
name|getScore
argument_list|(
name|a
argument_list|,
name|b
argument_list|,
name|c
argument_list|,
name|d
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ElasticsearchIllegalArgumentException
name|e
parameter_list|)
block|{         }
name|assertThat
argument_list|(
name|score
argument_list|,
name|lessThanOrEqualTo
argument_list|(
literal|1.0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|score
argument_list|,
name|greaterThanOrEqualTo
argument_list|(
literal|0.0
argument_list|)
argument_list|)
expr_stmt|;
name|heuristic
operator|=
operator|new
name|MutualInformation
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|heuristic
operator|.
name|getScore
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|Double
operator|.
name|NEGATIVE_INFINITY
argument_list|)
argument_list|)
expr_stmt|;
name|heuristic
operator|=
operator|new
name|MutualInformation
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|score
operator|=
name|heuristic
operator|.
name|getScore
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|score
argument_list|,
name|greaterThanOrEqualTo
argument_list|(
literal|0.0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|score
argument_list|,
name|lessThanOrEqualTo
argument_list|(
literal|1.0
argument_list|)
argument_list|)
expr_stmt|;
name|score
operator|=
name|heuristic
operator|.
name|getScore
argument_list|(
literal|1
argument_list|,
literal|4
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|score
argument_list|,
name|greaterThanOrEqualTo
argument_list|(
literal|0.0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|score
argument_list|,
name|lessThanOrEqualTo
argument_list|(
literal|1.0
argument_list|)
argument_list|)
expr_stmt|;
name|score
operator|=
name|heuristic
operator|.
name|getScore
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|score
argument_list|,
name|greaterThanOrEqualTo
argument_list|(
literal|0.0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|score
argument_list|,
name|lessThanOrEqualTo
argument_list|(
literal|1.0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGNDCornerCases
specifier|public
name|void
name|testGNDCornerCases
parameter_list|()
throws|throws
name|Exception
block|{
name|GND
name|gnd
init|=
operator|new
name|GND
argument_list|(
literal|true
argument_list|)
decl_stmt|;
comment|//term is only in the subset, not at all in the other set but that is because the other set is empty.
comment|// this should actually not happen because only terms that are in the subset are considered now,
comment|// however, in this case the score should be 0 because a term that does not exist cannot be relevant...
name|assertThat
argument_list|(
name|gnd
operator|.
name|getScore
argument_list|(
literal|0
argument_list|,
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|0
argument_list|,
name|randomIntBetween
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|0.0
argument_list|)
argument_list|)
expr_stmt|;
comment|// the terms do not co-occur at all - should be 0
name|assertThat
argument_list|(
name|gnd
operator|.
name|getScore
argument_list|(
literal|0
argument_list|,
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|,
name|randomIntBetween
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|,
name|randomIntBetween
argument_list|(
literal|5
argument_list|,
literal|6
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|0.0
argument_list|)
argument_list|)
expr_stmt|;
comment|// comparison between two terms that do not exist - probably not relevant
name|assertThat
argument_list|(
name|gnd
operator|.
name|getScore
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|0.0
argument_list|)
argument_list|)
expr_stmt|;
comment|// terms co-occur perfectly - should be 1
name|assertThat
argument_list|(
name|gnd
operator|.
name|getScore
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|1.0
argument_list|)
argument_list|)
expr_stmt|;
name|gnd
operator|=
operator|new
name|GND
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|gnd
operator|.
name|getScore
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|0.0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

