begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations.bucket
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|refresh
operator|.
name|RefreshRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|FilterBuilders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|TermQueryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|significant
operator|.
name|SignificantTerms
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|significant
operator|.
name|SignificantTerms
operator|.
name|Bucket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|significant
operator|.
name|SignificantTermsAggregatorFactory
operator|.
name|ExecutionMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|significant
operator|.
name|SignificantTermsBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|significant
operator|.
name|heuristics
operator|.
name|JLHScore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|significant
operator|.
name|heuristics
operator|.
name|MutualInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|terms
operator|.
name|Terms
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|terms
operator|.
name|TermsBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchIntegrationTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_REPLICAS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_SHARDS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertAcked
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertSearchResponse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
annotation|@
name|ElasticsearchIntegrationTest
operator|.
name|SuiteScopeTest
DECL|class|SignificantTermsTests
specifier|public
class|class
name|SignificantTermsTests
extends|extends
name|ElasticsearchIntegrationTest
block|{
DECL|method|randomExecutionHint
specifier|public
name|String
name|randomExecutionHint
parameter_list|()
block|{
return|return
name|randomBoolean
argument_list|()
condition|?
literal|null
else|:
name|randomFrom
argument_list|(
name|ExecutionMode
operator|.
name|values
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|indexSettings
specifier|public
name|Settings
name|indexSettings
parameter_list|()
block|{
return|return
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.number_of_shards"
argument_list|,
name|between
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.number_of_replicas"
argument_list|,
name|between
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|field|MUSIC_CATEGORY
specifier|public
specifier|static
specifier|final
name|int
name|MUSIC_CATEGORY
init|=
literal|1
decl_stmt|;
DECL|field|OTHER_CATEGORY
specifier|public
specifier|static
specifier|final
name|int
name|OTHER_CATEGORY
init|=
literal|2
decl_stmt|;
DECL|field|SNOWBOARDING_CATEGORY
specifier|public
specifier|static
specifier|final
name|int
name|SNOWBOARDING_CATEGORY
init|=
literal|3
decl_stmt|;
annotation|@
name|Override
DECL|method|setupSuiteScopeCluster
specifier|public
name|void
name|setupSuiteScopeCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
literal|5
argument_list|,
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
literal|0
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"fact"
argument_list|,
literal|"_routing"
argument_list|,
literal|"required=true,path=routing_id"
argument_list|,
literal|"routing_id"
argument_list|,
literal|"type=string,index=not_analyzed"
argument_list|,
literal|"fact_category"
argument_list|,
literal|"type=integer,index=not_analyzed"
argument_list|,
literal|"description"
argument_list|,
literal|"type=string,index=analyzed"
argument_list|)
argument_list|)
expr_stmt|;
name|createIndex
argument_list|(
literal|"idx_unmapped"
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|String
name|data
index|[]
init|=
block|{
literal|"A\t1\tpaul weller was lead singer of the jam before the style council"
block|,
literal|"B\t1\tpaul weller left the jam to form the style council"
block|,
literal|"A\t2\tpaul smith is a designer in the fashion industry"
block|,
literal|"B\t1\tthe stranglers are a group originally from guildford"
block|,
literal|"A\t1\tafter disbanding the style council in 1985 paul weller became a solo artist"
block|,
literal|"B\t1\tjean jaques burnel is a bass player in the stranglers and has a black belt in karate"
block|,
literal|"A\t1\tmalcolm owen was the lead singer of the ruts"
block|,
literal|"B\t1\tpaul weller has denied any possibility of a reunion of the jam"
block|,
literal|"A\t1\tformer frontman of the jam paul weller became the father of twins"
block|,
literal|"B\t2\tex-england football star paul gascoigne has re-emerged following recent disappearance"
block|,
literal|"A\t2\tdavid smith has recently denied connections with the mafia"
block|,
literal|"B\t1\tthe damned's new rose single was considered the first 'punk' single in the UK"
block|,
literal|"A\t1\tthe sex pistols broke up after a few short years together"
block|,
literal|"B\t1\tpaul gascoigne was a midfielder for england football team"
block|,
literal|"A\t3\tcraig kelly became the first world champion snowboarder and has a memorial at baldface lodge"
block|,
literal|"B\t3\tterje haakonsen has credited craig kelly as his snowboard mentor"
block|,
literal|"A\t3\tterje haakonsen and craig kelly were some of the first snowboarders sponsored by burton snowboards"
block|,
literal|"B\t3\tlike craig kelly before him terje won the mt baker banked slalom many times - once riding switch"
block|,
literal|"A\t3\tterje haakonsen has been a team rider for burton snowboards for over 20 years"
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|data
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
index|[]
name|parts
init|=
name|data
index|[
name|i
index|]
operator|.
name|split
argument_list|(
literal|"\t"
argument_list|)
decl_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"fact"
argument_list|,
literal|""
operator|+
name|i
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"routing_id"
argument_list|,
name|parts
index|[
literal|0
index|]
argument_list|,
literal|"fact_category"
argument_list|,
name|parts
index|[
literal|1
index|]
argument_list|,
literal|"description"
argument_list|,
name|parts
index|[
literal|2
index|]
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|refresh
argument_list|(
operator|new
name|RefreshRequest
argument_list|(
literal|"test"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|structuredAnalysis
specifier|public
name|void
name|structuredAnalysis
parameter_list|()
throws|throws
name|Exception
block|{
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSearchType
argument_list|(
name|SearchType
operator|.
name|QUERY_AND_FETCH
argument_list|)
operator|.
name|setQuery
argument_list|(
operator|new
name|TermQueryBuilder
argument_list|(
literal|"_all"
argument_list|,
literal|"terje"
argument_list|)
argument_list|)
operator|.
name|setFrom
argument_list|(
literal|0
argument_list|)
operator|.
name|setSize
argument_list|(
literal|60
argument_list|)
operator|.
name|setExplain
argument_list|(
literal|true
argument_list|)
operator|.
name|addAggregation
argument_list|(
operator|new
name|SignificantTermsBuilder
argument_list|(
literal|"mySignificantTerms"
argument_list|)
operator|.
name|field
argument_list|(
literal|"fact_category"
argument_list|)
operator|.
name|executionHint
argument_list|(
name|randomExecutionHint
argument_list|()
argument_list|)
operator|.
name|minDocCount
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|SignificantTerms
name|topTerms
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"mySignificantTerms"
argument_list|)
decl_stmt|;
name|Number
name|topCategory
init|=
name|topTerms
operator|.
name|getBuckets
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getKeyAsNumber
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|topCategory
operator|.
name|equals
argument_list|(
operator|new
name|Long
argument_list|(
name|SNOWBOARDING_CATEGORY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|includeExclude
specifier|public
name|void
name|includeExclude
parameter_list|()
throws|throws
name|Exception
block|{
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
operator|new
name|TermQueryBuilder
argument_list|(
literal|"_all"
argument_list|,
literal|"weller"
argument_list|)
argument_list|)
operator|.
name|addAggregation
argument_list|(
operator|new
name|SignificantTermsBuilder
argument_list|(
literal|"mySignificantTerms"
argument_list|)
operator|.
name|field
argument_list|(
literal|"description"
argument_list|)
operator|.
name|executionHint
argument_list|(
name|randomExecutionHint
argument_list|()
argument_list|)
operator|.
name|exclude
argument_list|(
literal|"weller"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|SignificantTerms
name|topTerms
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"mySignificantTerms"
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|terms
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Bucket
name|topTerm
range|:
name|topTerms
control|)
block|{
name|terms
operator|.
name|add
argument_list|(
name|topTerm
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|terms
argument_list|,
name|hasSize
argument_list|(
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|contains
argument_list|(
literal|"jam"
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|contains
argument_list|(
literal|"council"
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|contains
argument_list|(
literal|"style"
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|contains
argument_list|(
literal|"paul"
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|contains
argument_list|(
literal|"of"
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|contains
argument_list|(
literal|"the"
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
operator|new
name|TermQueryBuilder
argument_list|(
literal|"_all"
argument_list|,
literal|"weller"
argument_list|)
argument_list|)
operator|.
name|addAggregation
argument_list|(
operator|new
name|SignificantTermsBuilder
argument_list|(
literal|"mySignificantTerms"
argument_list|)
operator|.
name|field
argument_list|(
literal|"description"
argument_list|)
operator|.
name|executionHint
argument_list|(
name|randomExecutionHint
argument_list|()
argument_list|)
operator|.
name|include
argument_list|(
literal|"weller"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|topTerms
operator|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"mySignificantTerms"
argument_list|)
expr_stmt|;
name|terms
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|Bucket
name|topTerm
range|:
name|topTerms
control|)
block|{
name|terms
operator|.
name|add
argument_list|(
name|topTerm
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|terms
argument_list|,
name|hasSize
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|terms
operator|.
name|contains
argument_list|(
literal|"weller"
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|unmapped
specifier|public
name|void
name|unmapped
parameter_list|()
throws|throws
name|Exception
block|{
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx_unmapped"
argument_list|)
operator|.
name|setSearchType
argument_list|(
name|SearchType
operator|.
name|QUERY_AND_FETCH
argument_list|)
operator|.
name|setQuery
argument_list|(
operator|new
name|TermQueryBuilder
argument_list|(
literal|"_all"
argument_list|,
literal|"terje"
argument_list|)
argument_list|)
operator|.
name|setFrom
argument_list|(
literal|0
argument_list|)
operator|.
name|setSize
argument_list|(
literal|60
argument_list|)
operator|.
name|setExplain
argument_list|(
literal|true
argument_list|)
operator|.
name|addAggregation
argument_list|(
operator|new
name|SignificantTermsBuilder
argument_list|(
literal|"mySignificantTerms"
argument_list|)
operator|.
name|field
argument_list|(
literal|"fact_category"
argument_list|)
operator|.
name|executionHint
argument_list|(
name|randomExecutionHint
argument_list|()
argument_list|)
operator|.
name|minDocCount
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|SignificantTerms
name|topTerms
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"mySignificantTerms"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|topTerms
operator|.
name|getBuckets
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|textAnalysis
specifier|public
name|void
name|textAnalysis
parameter_list|()
throws|throws
name|Exception
block|{
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSearchType
argument_list|(
name|SearchType
operator|.
name|QUERY_AND_FETCH
argument_list|)
operator|.
name|setQuery
argument_list|(
operator|new
name|TermQueryBuilder
argument_list|(
literal|"_all"
argument_list|,
literal|"terje"
argument_list|)
argument_list|)
operator|.
name|setFrom
argument_list|(
literal|0
argument_list|)
operator|.
name|setSize
argument_list|(
literal|60
argument_list|)
operator|.
name|setExplain
argument_list|(
literal|true
argument_list|)
operator|.
name|addAggregation
argument_list|(
operator|new
name|SignificantTermsBuilder
argument_list|(
literal|"mySignificantTerms"
argument_list|)
operator|.
name|field
argument_list|(
literal|"description"
argument_list|)
operator|.
name|executionHint
argument_list|(
name|randomExecutionHint
argument_list|()
argument_list|)
operator|.
name|minDocCount
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|SignificantTerms
name|topTerms
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"mySignificantTerms"
argument_list|)
decl_stmt|;
name|checkExpectedStringTermsFound
argument_list|(
name|topTerms
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|badFilteredAnalysis
specifier|public
name|void
name|badFilteredAnalysis
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Deliberately using a bad choice of filter here for the background context in order
comment|// to test robustness.
comment|// We search for the name of a snowboarder but use music-related content (fact_category:1)
comment|// as the background source of term statistics.
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSearchType
argument_list|(
name|SearchType
operator|.
name|QUERY_AND_FETCH
argument_list|)
operator|.
name|setQuery
argument_list|(
operator|new
name|TermQueryBuilder
argument_list|(
literal|"_all"
argument_list|,
literal|"terje"
argument_list|)
argument_list|)
operator|.
name|setFrom
argument_list|(
literal|0
argument_list|)
operator|.
name|setSize
argument_list|(
literal|60
argument_list|)
operator|.
name|setExplain
argument_list|(
literal|true
argument_list|)
operator|.
name|addAggregation
argument_list|(
operator|new
name|SignificantTermsBuilder
argument_list|(
literal|"mySignificantTerms"
argument_list|)
operator|.
name|field
argument_list|(
literal|"description"
argument_list|)
operator|.
name|minDocCount
argument_list|(
literal|2
argument_list|)
operator|.
name|backgroundFilter
argument_list|(
name|FilterBuilders
operator|.
name|termFilter
argument_list|(
literal|"fact_category"
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|SignificantTerms
name|topTerms
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"mySignificantTerms"
argument_list|)
decl_stmt|;
comment|// We expect at least one of the significant terms to have been selected on the basis
comment|// that it is present in the foreground selection but entirely missing from the filtered
comment|// background used as context.
name|boolean
name|hasMissingBackgroundTerms
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Bucket
name|topTerm
range|:
name|topTerms
control|)
block|{
if|if
condition|(
name|topTerm
operator|.
name|getSupersetDf
argument_list|()
operator|==
literal|0
condition|)
block|{
name|hasMissingBackgroundTerms
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
name|assertTrue
argument_list|(
name|hasMissingBackgroundTerms
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|filteredAnalysis
specifier|public
name|void
name|filteredAnalysis
parameter_list|()
throws|throws
name|Exception
block|{
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSearchType
argument_list|(
name|SearchType
operator|.
name|QUERY_AND_FETCH
argument_list|)
operator|.
name|setQuery
argument_list|(
operator|new
name|TermQueryBuilder
argument_list|(
literal|"_all"
argument_list|,
literal|"weller"
argument_list|)
argument_list|)
operator|.
name|setFrom
argument_list|(
literal|0
argument_list|)
operator|.
name|setSize
argument_list|(
literal|60
argument_list|)
operator|.
name|setExplain
argument_list|(
literal|true
argument_list|)
operator|.
name|addAggregation
argument_list|(
operator|new
name|SignificantTermsBuilder
argument_list|(
literal|"mySignificantTerms"
argument_list|)
operator|.
name|field
argument_list|(
literal|"description"
argument_list|)
operator|.
name|minDocCount
argument_list|(
literal|1
argument_list|)
operator|.
name|backgroundFilter
argument_list|(
name|FilterBuilders
operator|.
name|termsFilter
argument_list|(
literal|"description"
argument_list|,
literal|"paul"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|SignificantTerms
name|topTerms
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"mySignificantTerms"
argument_list|)
decl_stmt|;
name|HashSet
argument_list|<
name|String
argument_list|>
name|topWords
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Bucket
name|topTerm
range|:
name|topTerms
control|)
block|{
name|topWords
operator|.
name|add
argument_list|(
name|topTerm
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//The word "paul" should be a constant of all docs in the background set and therefore not seen as significant
name|assertFalse
argument_list|(
name|topWords
operator|.
name|contains
argument_list|(
literal|"paul"
argument_list|)
argument_list|)
expr_stmt|;
comment|//"Weller" is the only Paul who was in The Jam and therefore this should be identified as a differentiator from the background of all other Pauls.
name|assertTrue
argument_list|(
name|topWords
operator|.
name|contains
argument_list|(
literal|"jam"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|nestedAggs
specifier|public
name|void
name|nestedAggs
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
index|[]
name|expectedKeywordsByCategory
init|=
block|{
block|{
literal|"paul"
block|,
literal|"weller"
block|,
literal|"jam"
block|,
literal|"style"
block|,
literal|"council"
block|}
block|,
block|{
literal|"paul"
block|,
literal|"smith"
block|}
block|,
block|{
literal|"craig"
block|,
literal|"kelly"
block|,
literal|"terje"
block|,
literal|"haakonsen"
block|,
literal|"burton"
block|}
block|}
decl_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSearchType
argument_list|(
name|SearchType
operator|.
name|QUERY_AND_FETCH
argument_list|)
operator|.
name|addAggregation
argument_list|(
operator|new
name|TermsBuilder
argument_list|(
literal|"myCategories"
argument_list|)
operator|.
name|field
argument_list|(
literal|"fact_category"
argument_list|)
operator|.
name|minDocCount
argument_list|(
literal|2
argument_list|)
operator|.
name|subAggregation
argument_list|(
operator|new
name|SignificantTermsBuilder
argument_list|(
literal|"mySignificantTerms"
argument_list|)
operator|.
name|field
argument_list|(
literal|"description"
argument_list|)
operator|.
name|executionHint
argument_list|(
name|randomExecutionHint
argument_list|()
argument_list|)
operator|.
name|minDocCount
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Terms
name|topCategoryTerms
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"myCategories"
argument_list|)
decl_stmt|;
for|for
control|(
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|terms
operator|.
name|Terms
operator|.
name|Bucket
name|topCategory
range|:
name|topCategoryTerms
operator|.
name|getBuckets
argument_list|()
control|)
block|{
name|SignificantTerms
name|topTerms
init|=
name|topCategory
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"mySignificantTerms"
argument_list|)
decl_stmt|;
name|HashSet
argument_list|<
name|String
argument_list|>
name|foundTopWords
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Bucket
name|topTerm
range|:
name|topTerms
control|)
block|{
name|foundTopWords
operator|.
name|add
argument_list|(
name|topTerm
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|expectedKeywords
init|=
name|expectedKeywordsByCategory
index|[
name|Integer
operator|.
name|parseInt
argument_list|(
name|topCategory
operator|.
name|getKey
argument_list|()
argument_list|)
operator|-
literal|1
index|]
decl_stmt|;
for|for
control|(
name|String
name|expectedKeyword
range|:
name|expectedKeywords
control|)
block|{
name|assertTrue
argument_list|(
name|expectedKeyword
operator|+
literal|" missing from category keywords"
argument_list|,
name|foundTopWords
operator|.
name|contains
argument_list|(
name|expectedKeyword
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|partiallyUnmapped
specifier|public
name|void
name|partiallyUnmapped
parameter_list|()
throws|throws
name|Exception
block|{
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx_unmapped"
argument_list|,
literal|"test"
argument_list|)
operator|.
name|setSearchType
argument_list|(
name|SearchType
operator|.
name|QUERY_AND_FETCH
argument_list|)
operator|.
name|setQuery
argument_list|(
operator|new
name|TermQueryBuilder
argument_list|(
literal|"_all"
argument_list|,
literal|"terje"
argument_list|)
argument_list|)
operator|.
name|setFrom
argument_list|(
literal|0
argument_list|)
operator|.
name|setSize
argument_list|(
literal|60
argument_list|)
operator|.
name|setExplain
argument_list|(
literal|true
argument_list|)
operator|.
name|addAggregation
argument_list|(
operator|new
name|SignificantTermsBuilder
argument_list|(
literal|"mySignificantTerms"
argument_list|)
operator|.
name|field
argument_list|(
literal|"description"
argument_list|)
operator|.
name|executionHint
argument_list|(
name|randomExecutionHint
argument_list|()
argument_list|)
operator|.
name|minDocCount
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|SignificantTerms
name|topTerms
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"mySignificantTerms"
argument_list|)
decl_stmt|;
name|checkExpectedStringTermsFound
argument_list|(
name|topTerms
argument_list|)
expr_stmt|;
block|}
DECL|method|checkExpectedStringTermsFound
specifier|private
name|void
name|checkExpectedStringTermsFound
parameter_list|(
name|SignificantTerms
name|topTerms
parameter_list|)
block|{
name|HashMap
argument_list|<
name|String
argument_list|,
name|Bucket
argument_list|>
name|topWords
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Bucket
name|topTerm
range|:
name|topTerms
control|)
block|{
name|topWords
operator|.
name|put
argument_list|(
name|topTerm
operator|.
name|getKey
argument_list|()
argument_list|,
name|topTerm
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|topWords
operator|.
name|containsKey
argument_list|(
literal|"haakonsen"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|topWords
operator|.
name|containsKey
argument_list|(
literal|"craig"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|topWords
operator|.
name|containsKey
argument_list|(
literal|"kelly"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|topWords
operator|.
name|containsKey
argument_list|(
literal|"burton"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|topWords
operator|.
name|containsKey
argument_list|(
literal|"snowboards"
argument_list|)
argument_list|)
expr_stmt|;
name|Bucket
name|kellyTerm
init|=
name|topWords
operator|.
name|get
argument_list|(
literal|"kelly"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|kellyTerm
operator|.
name|getSubsetDf
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|kellyTerm
operator|.
name|getSupersetDf
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testDefaultSignificanceHeuristic
specifier|public
name|void
name|testDefaultSignificanceHeuristic
parameter_list|()
throws|throws
name|Exception
block|{
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSearchType
argument_list|(
name|SearchType
operator|.
name|QUERY_AND_FETCH
argument_list|)
operator|.
name|setQuery
argument_list|(
operator|new
name|TermQueryBuilder
argument_list|(
literal|"_all"
argument_list|,
literal|"terje"
argument_list|)
argument_list|)
operator|.
name|setFrom
argument_list|(
literal|0
argument_list|)
operator|.
name|setSize
argument_list|(
literal|60
argument_list|)
operator|.
name|setExplain
argument_list|(
literal|true
argument_list|)
operator|.
name|addAggregation
argument_list|(
operator|new
name|SignificantTermsBuilder
argument_list|(
literal|"mySignificantTerms"
argument_list|)
operator|.
name|field
argument_list|(
literal|"description"
argument_list|)
operator|.
name|executionHint
argument_list|(
name|randomExecutionHint
argument_list|()
argument_list|)
operator|.
name|significanceHeuristic
argument_list|(
operator|new
name|JLHScore
operator|.
name|JLHScoreBuilder
argument_list|()
argument_list|)
operator|.
name|minDocCount
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|SignificantTerms
name|topTerms
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"mySignificantTerms"
argument_list|)
decl_stmt|;
name|checkExpectedStringTermsFound
argument_list|(
name|topTerms
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMutualInformation
specifier|public
name|void
name|testMutualInformation
parameter_list|()
throws|throws
name|Exception
block|{
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSearchType
argument_list|(
name|SearchType
operator|.
name|QUERY_AND_FETCH
argument_list|)
operator|.
name|setQuery
argument_list|(
operator|new
name|TermQueryBuilder
argument_list|(
literal|"_all"
argument_list|,
literal|"terje"
argument_list|)
argument_list|)
operator|.
name|setFrom
argument_list|(
literal|0
argument_list|)
operator|.
name|setSize
argument_list|(
literal|60
argument_list|)
operator|.
name|setExplain
argument_list|(
literal|true
argument_list|)
operator|.
name|addAggregation
argument_list|(
operator|new
name|SignificantTermsBuilder
argument_list|(
literal|"mySignificantTerms"
argument_list|)
operator|.
name|field
argument_list|(
literal|"description"
argument_list|)
operator|.
name|executionHint
argument_list|(
name|randomExecutionHint
argument_list|()
argument_list|)
operator|.
name|significanceHeuristic
argument_list|(
operator|new
name|MutualInformation
operator|.
name|MutualInformationBuilder
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|)
operator|.
name|minDocCount
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertSearchResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|SignificantTerms
name|topTerms
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"mySignificantTerms"
argument_list|)
decl_stmt|;
name|checkExpectedStringTermsFound
argument_list|(
name|topTerms
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

