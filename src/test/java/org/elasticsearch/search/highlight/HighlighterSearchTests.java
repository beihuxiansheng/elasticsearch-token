begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elastic Search and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. Elastic Search licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.highlight
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|highlight
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
operator|.
name|Slow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticSearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchPhaseExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
operator|.
name|Builder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|MatchQueryBuilder
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|MatchQueryBuilder
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchHit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|builder
operator|.
name|SearchSourceBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|AbstractIntegrationTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchType
operator|.
name|QUERY_THEN_FETCH
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|Requests
operator|.
name|searchRequest
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
operator|.
name|jsonBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|builder
operator|.
name|SearchSourceBuilder
operator|.
name|highlight
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|builder
operator|.
name|SearchSourceBuilder
operator|.
name|searchSource
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|HighlighterSearchTests
specifier|public
class|class
name|HighlighterSearchTests
extends|extends
name|AbstractIntegrationTest
block|{
annotation|@
name|Test
comment|// see #3486
DECL|method|testHighTermFrequencyDoc
specifier|public
name|void
name|testHighTermFrequencyDoc
parameter_list|()
throws|throws
name|ElasticSearchException
throws|,
name|IOException
block|{
name|wipeIndex
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"test"
argument_list|,
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"test"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"name"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"term_vector"
argument_list|,
literal|"with_positions_offsets"
argument_list|)
operator|.
name|field
argument_list|(
literal|"store"
argument_list|,
name|randomBoolean
argument_list|()
condition|?
literal|"yes"
else|:
literal|"no"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|setSettings
argument_list|(
name|ImmutableSettings
operator|.
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.number_of_shards"
argument_list|,
name|between
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|ensureYellow
argument_list|()
expr_stmt|;
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|6000
condition|;
name|i
operator|++
control|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"abc"
argument_list|)
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"name"
argument_list|,
name|builder
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|SearchResponse
name|search
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|constantScoreQuery
argument_list|(
name|matchQuery
argument_list|(
literal|"name"
argument_list|,
literal|"abc"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|addHighlightedField
argument_list|(
literal|"name"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertHighlight
argument_list|(
name|search
argument_list|,
literal|0
argument_list|,
literal|"name"
argument_list|,
literal|0
argument_list|,
name|startsWith
argument_list|(
literal|"<em>abc</em><em>abc</em><em>abc</em><em>abc</em>"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNgramHighlightingWithBrokenPositions
specifier|public
name|void
name|testNgramHighlightingWithBrokenPositions
parameter_list|()
throws|throws
name|ElasticSearchException
throws|,
name|IOException
block|{
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"test"
argument_list|,
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"test"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"name"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"fields"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"autocomplete"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"index_analyzer"
argument_list|,
literal|"autocomplete"
argument_list|)
operator|.
name|field
argument_list|(
literal|"search_analyzer"
argument_list|,
literal|"search_autocomplete"
argument_list|)
operator|.
name|field
argument_list|(
literal|"term_vector"
argument_list|,
literal|"with_positions_offsets"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"name"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"multi_field"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|setSettings
argument_list|(
name|ImmutableSettings
operator|.
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.number_of_shards"
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
literal|"analysis.tokenizer.autocomplete.max_gram"
argument_list|,
literal|20
argument_list|)
operator|.
name|put
argument_list|(
literal|"analysis.tokenizer.autocomplete.min_gram"
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
literal|"analysis.tokenizer.autocomplete.token_chars"
argument_list|,
literal|"letter,digit"
argument_list|)
operator|.
name|put
argument_list|(
literal|"analysis.tokenizer.autocomplete.type"
argument_list|,
literal|"nGram"
argument_list|)
operator|.
name|put
argument_list|(
literal|"analysis.filter.wordDelimiter.type"
argument_list|,
literal|"word_delimiter"
argument_list|)
operator|.
name|putArray
argument_list|(
literal|"analysis.filter.wordDelimiter.type_table"
argument_list|,
literal|"& => ALPHANUM"
argument_list|,
literal|"| => ALPHANUM"
argument_list|,
literal|"! => ALPHANUM"
argument_list|,
literal|"? => ALPHANUM"
argument_list|,
literal|". => ALPHANUM"
argument_list|,
literal|"- => ALPHANUM"
argument_list|,
literal|"# => ALPHANUM"
argument_list|,
literal|"% => ALPHANUM"
argument_list|,
literal|"+ => ALPHANUM"
argument_list|,
literal|", => ALPHANUM"
argument_list|,
literal|"~ => ALPHANUM"
argument_list|,
literal|": => ALPHANUM"
argument_list|,
literal|"/ => ALPHANUM"
argument_list|,
literal|"^ => ALPHANUM"
argument_list|,
literal|"$ => ALPHANUM"
argument_list|,
literal|"@ => ALPHANUM"
argument_list|,
literal|") => ALPHANUM"
argument_list|,
literal|"( => ALPHANUM"
argument_list|,
literal|"] => ALPHANUM"
argument_list|,
literal|"[ => ALPHANUM"
argument_list|,
literal|"} => ALPHANUM"
argument_list|,
literal|"{ => ALPHANUM"
argument_list|)
operator|.
name|put
argument_list|(
literal|"analysis.filter.wordDelimiter.type.split_on_numerics"
argument_list|,
literal|false
argument_list|)
operator|.
name|put
argument_list|(
literal|"analysis.filter.wordDelimiter.generate_word_parts"
argument_list|,
literal|true
argument_list|)
operator|.
name|put
argument_list|(
literal|"analysis.filter.wordDelimiter.generate_number_parts"
argument_list|,
literal|false
argument_list|)
operator|.
name|put
argument_list|(
literal|"analysis.filter.wordDelimiter.catenate_words"
argument_list|,
literal|true
argument_list|)
operator|.
name|put
argument_list|(
literal|"analysis.filter.wordDelimiter.catenate_numbers"
argument_list|,
literal|true
argument_list|)
operator|.
name|put
argument_list|(
literal|"analysis.filter.wordDelimiter.catenate_all"
argument_list|,
literal|false
argument_list|)
operator|.
name|put
argument_list|(
literal|"analysis.analyzer.autocomplete.tokenizer"
argument_list|,
literal|"autocomplete"
argument_list|)
operator|.
name|putArray
argument_list|(
literal|"analysis.analyzer.autocomplete.filter"
argument_list|,
literal|"lowercase"
argument_list|,
literal|"wordDelimiter"
argument_list|)
operator|.
name|put
argument_list|(
literal|"analysis.analyzer.search_autocomplete.tokenizer"
argument_list|,
literal|"whitespace"
argument_list|)
operator|.
name|putArray
argument_list|(
literal|"analysis.analyzer.search_autocomplete.filter"
argument_list|,
literal|"lowercase"
argument_list|,
literal|"wordDelimiter"
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareHealth
argument_list|()
operator|.
name|setWaitForEvents
argument_list|(
name|Priority
operator|.
name|LANGUID
argument_list|)
operator|.
name|setWaitForYellowStatus
argument_list|()
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"name"
argument_list|,
literal|"ARCOTEL Hotels Deutschland"
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|setRefresh
argument_list|(
literal|true
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|SearchResponse
name|search
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchQuery
argument_list|(
literal|"name.autocomplete"
argument_list|,
literal|"deut tel"
argument_list|)
operator|.
name|operator
argument_list|(
name|Operator
operator|.
name|OR
argument_list|)
argument_list|)
operator|.
name|addHighlightedField
argument_list|(
literal|"name.autocomplete"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertHighlight
argument_list|(
name|search
argument_list|,
literal|0
argument_list|,
literal|"name.autocomplete"
argument_list|,
literal|0
argument_list|,
name|equalTo
argument_list|(
literal|"ARCO<em>TEL</em> Ho<em>tel</em>s<em>Deut</em>schland"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMultiPhraseCutoff
specifier|public
name|void
name|testMultiPhraseCutoff
parameter_list|()
throws|throws
name|ElasticSearchException
throws|,
name|IOException
block|{
comment|/*          * MultiPhraseQuery can literally kill an entire node if there are too many terms in the          * query. We cut off and extract terms if there are more than 16 terms in the query          */
name|XContentBuilder
name|builder
init|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"test"
argument_list|)
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"body"
argument_list|)
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"index_analyzer"
argument_list|,
literal|"custom_analyzer"
argument_list|)
operator|.
name|field
argument_list|(
literal|"search_analyzer"
argument_list|,
literal|"custom_analyzer"
argument_list|)
operator|.
name|field
argument_list|(
literal|"term_vector"
argument_list|,
literal|"with_positions_offsets"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|ElasticsearchAssertions
operator|.
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"test"
argument_list|,
name|builder
argument_list|)
operator|.
name|setSettings
argument_list|(
name|ImmutableSettings
operator|.
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.number_of_shards"
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.number_of_replicas"
argument_list|,
literal|0
argument_list|)
operator|.
name|put
argument_list|(
literal|"analysis.filter.wordDelimiter.type"
argument_list|,
literal|"word_delimiter"
argument_list|)
operator|.
name|put
argument_list|(
literal|"analysis.filter.wordDelimiter.type.split_on_numerics"
argument_list|,
literal|false
argument_list|)
operator|.
name|put
argument_list|(
literal|"analysis.filter.wordDelimiter.generate_word_parts"
argument_list|,
literal|true
argument_list|)
operator|.
name|put
argument_list|(
literal|"analysis.filter.wordDelimiter.generate_number_parts"
argument_list|,
literal|true
argument_list|)
operator|.
name|put
argument_list|(
literal|"analysis.filter.wordDelimiter.catenate_words"
argument_list|,
literal|true
argument_list|)
operator|.
name|put
argument_list|(
literal|"analysis.filter.wordDelimiter.catenate_numbers"
argument_list|,
literal|true
argument_list|)
operator|.
name|put
argument_list|(
literal|"analysis.filter.wordDelimiter.catenate_all"
argument_list|,
literal|false
argument_list|)
operator|.
name|put
argument_list|(
literal|"analysis.analyzer.custom_analyzer.tokenizer"
argument_list|,
literal|"whitespace"
argument_list|)
operator|.
name|putArray
argument_list|(
literal|"analysis.analyzer.custom_analyzer.filter"
argument_list|,
literal|"lowercase"
argument_list|,
literal|"wordDelimiter"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"body"
argument_list|,
literal|"Test: http://www.facebook.com http://elasticsearch.org http://xing.com http://cnn.com http://quora.com http://twitter.com this is a test for highlighting feature Test: http://www.facebook.com http://elasticsearch.org http://xing.com http://cnn.com http://quora.com http://twitter.com this is a test for highlighting feature"
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|SearchResponse
name|search
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchQuery
argument_list|(
literal|"body"
argument_list|,
literal|"Test: http://www.facebook.com "
argument_list|)
operator|.
name|type
argument_list|(
name|Type
operator|.
name|PHRASE
argument_list|)
argument_list|)
operator|.
name|addHighlightedField
argument_list|(
literal|"body"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertHighlight
argument_list|(
name|search
argument_list|,
literal|0
argument_list|,
literal|"body"
argument_list|,
literal|0
argument_list|,
name|startsWith
argument_list|(
literal|"<em>Test: http://www.facebook.com</em>"
argument_list|)
argument_list|)
expr_stmt|;
name|search
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchQuery
argument_list|(
literal|"body"
argument_list|,
literal|"Test: http://www.facebook.com http://elasticsearch.org http://xing.com http://cnn.com http://quora.com http://twitter.com this is a test for highlighting feature Test: http://www.facebook.com http://elasticsearch.org http://xing.com http://cnn.com http://quora.com http://twitter.com this is a test for highlighting feature"
argument_list|)
operator|.
name|type
argument_list|(
name|Type
operator|.
name|PHRASE
argument_list|)
argument_list|)
operator|.
name|addHighlightedField
argument_list|(
literal|"body"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertHighlight
argument_list|(
name|search
argument_list|,
literal|0
argument_list|,
literal|"body"
argument_list|,
literal|0
argument_list|,
name|equalTo
argument_list|(
literal|"<em>Test</em>:<em>http</em>://<em>www</em>.<em>facebook</em>.<em>com</em><em>http</em>://<em>elasticsearch</em>.<em>org</em><em>http</em>://<em>xing</em>.<em>com</em><em>http</em>://<em>cnn</em>.<em>com</em><em>http</em>://<em>quora</em>.com"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNgramHighlightingPreLucene42
specifier|public
name|void
name|testNgramHighlightingPreLucene42
parameter_list|()
throws|throws
name|ElasticSearchException
throws|,
name|IOException
block|{
name|boolean
index|[]
name|doStore
init|=
block|{
literal|true
block|,
literal|false
block|}
decl_stmt|;
for|for
control|(
name|boolean
name|store
range|:
name|doStore
control|)
block|{
name|wipeIndex
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"test"
argument_list|,
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"test"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"name"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"index_analyzer"
argument_list|,
literal|"name_index_analyzer"
argument_list|)
operator|.
name|field
argument_list|(
literal|"search_analyzer"
argument_list|,
literal|"name_search_analyzer"
argument_list|)
operator|.
name|field
argument_list|(
literal|"term_vector"
argument_list|,
literal|"with_positions_offsets"
argument_list|)
operator|.
name|field
argument_list|(
literal|"store"
argument_list|,
name|store
condition|?
literal|"yes"
else|:
literal|"no"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"name2"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"index_analyzer"
argument_list|,
literal|"name2_index_analyzer"
argument_list|)
operator|.
name|field
argument_list|(
literal|"search_analyzer"
argument_list|,
literal|"name_search_analyzer"
argument_list|)
operator|.
name|field
argument_list|(
literal|"term_vector"
argument_list|,
literal|"with_positions_offsets"
argument_list|)
operator|.
name|field
argument_list|(
literal|"store"
argument_list|,
name|store
condition|?
literal|"yes"
else|:
literal|"no"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|setSettings
argument_list|(
name|ImmutableSettings
operator|.
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.number_of_shards"
argument_list|,
literal|2
argument_list|)
operator|.
name|put
argument_list|(
literal|"analysis.filter.my_ngram.max_gram"
argument_list|,
literal|20
argument_list|)
operator|.
name|put
argument_list|(
literal|"analysis.filter.my_ngram.version"
argument_list|,
literal|"4.1"
argument_list|)
operator|.
name|put
argument_list|(
literal|"analysis.filter.my_ngram.min_gram"
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
literal|"analysis.filter.my_ngram.type"
argument_list|,
literal|"ngram"
argument_list|)
operator|.
name|put
argument_list|(
literal|"analysis.tokenizer.my_ngramt.max_gram"
argument_list|,
literal|20
argument_list|)
operator|.
name|put
argument_list|(
literal|"analysis.tokenizer.my_ngramt.version"
argument_list|,
literal|"4.1"
argument_list|)
operator|.
name|put
argument_list|(
literal|"analysis.tokenizer.my_ngramt.min_gram"
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
literal|"analysis.tokenizer.my_ngramt.type"
argument_list|,
literal|"ngram"
argument_list|)
operator|.
name|put
argument_list|(
literal|"analysis.analyzer.name_index_analyzer.tokenizer"
argument_list|,
literal|"my_ngramt"
argument_list|)
operator|.
name|put
argument_list|(
literal|"analysis.analyzer.name2_index_analyzer.tokenizer"
argument_list|,
literal|"whitespace"
argument_list|)
operator|.
name|putArray
argument_list|(
literal|"analysis.analyzer.name2_index_analyzer.filter"
argument_list|,
literal|"lowercase"
argument_list|,
literal|"my_ngram"
argument_list|)
operator|.
name|put
argument_list|(
literal|"analysis.analyzer.name_search_analyzer.tokenizer"
argument_list|,
literal|"whitespace"
argument_list|)
operator|.
name|put
argument_list|(
literal|"analysis.analyzer.name_search_analyzer.filter"
argument_list|,
literal|"lowercase"
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|ensureYellow
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"name"
argument_list|,
literal|"logicacmg ehemals avinci - the know how company"
argument_list|)
operator|.
name|field
argument_list|(
literal|"name2"
argument_list|,
literal|"logicacmg ehemals avinci - the know how company"
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"name"
argument_list|,
literal|"avinci, unilog avinci, logicacmg, logica"
argument_list|)
operator|.
name|field
argument_list|(
literal|"name2"
argument_list|,
literal|"avinci, unilog avinci, logicacmg, logica"
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|SearchResponse
name|search
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|constantScoreQuery
argument_list|(
name|matchQuery
argument_list|(
literal|"name"
argument_list|,
literal|"logica m"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|addHighlightedField
argument_list|(
literal|"name"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertHighlight
argument_list|(
name|search
argument_list|,
literal|0
argument_list|,
literal|"name"
argument_list|,
literal|0
argument_list|,
name|equalTo
argument_list|(
literal|"<em>logica</em>c<em>m</em>g ehe<em>m</em>als avinci - the know how co<em>m</em>pany"
argument_list|)
argument_list|)
expr_stmt|;
name|assertHighlight
argument_list|(
name|search
argument_list|,
literal|1
argument_list|,
literal|"name"
argument_list|,
literal|0
argument_list|,
name|equalTo
argument_list|(
literal|"avinci, unilog avinci,<em>logica</em>c<em>m</em>g,<em>logica</em>"
argument_list|)
argument_list|)
expr_stmt|;
name|search
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|constantScoreQuery
argument_list|(
name|matchQuery
argument_list|(
literal|"name"
argument_list|,
literal|"logica ma"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|addHighlightedField
argument_list|(
literal|"name"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertHighlight
argument_list|(
name|search
argument_list|,
literal|0
argument_list|,
literal|"name"
argument_list|,
literal|0
argument_list|,
name|equalTo
argument_list|(
literal|"<em>logica</em>cmg ehe<em>ma</em>ls avinci - the know how company"
argument_list|)
argument_list|)
expr_stmt|;
name|assertHighlight
argument_list|(
name|search
argument_list|,
literal|1
argument_list|,
literal|"name"
argument_list|,
literal|0
argument_list|,
name|equalTo
argument_list|(
literal|"avinci, unilog avinci,<em>logica</em>cmg,<em>logica</em>"
argument_list|)
argument_list|)
expr_stmt|;
name|search
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|constantScoreQuery
argument_list|(
name|matchQuery
argument_list|(
literal|"name"
argument_list|,
literal|"logica"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|addHighlightedField
argument_list|(
literal|"name"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertHighlight
argument_list|(
name|search
argument_list|,
literal|0
argument_list|,
literal|"name"
argument_list|,
literal|0
argument_list|,
name|equalTo
argument_list|(
literal|"<em>logica</em>cmg ehemals avinci - the know how company"
argument_list|)
argument_list|)
expr_stmt|;
name|search
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|constantScoreQuery
argument_list|(
name|matchQuery
argument_list|(
literal|"name2"
argument_list|,
literal|"logica m"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|addHighlightedField
argument_list|(
literal|"name2"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertHighlight
argument_list|(
name|search
argument_list|,
literal|0
argument_list|,
literal|"name2"
argument_list|,
literal|0
argument_list|,
name|equalTo
argument_list|(
literal|"<em>logica</em>c<em>m</em>g ehe<em>m</em>als avinci - the know how co<em>m</em>pany"
argument_list|)
argument_list|)
expr_stmt|;
name|assertHighlight
argument_list|(
name|search
argument_list|,
literal|1
argument_list|,
literal|"name2"
argument_list|,
literal|0
argument_list|,
name|equalTo
argument_list|(
literal|"avinci, unilog avinci,<em>logica</em>c<em>m</em>g,<em>logica</em>"
argument_list|)
argument_list|)
expr_stmt|;
name|search
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|constantScoreQuery
argument_list|(
name|matchQuery
argument_list|(
literal|"name2"
argument_list|,
literal|"logica ma"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|addHighlightedField
argument_list|(
literal|"name2"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertHighlight
argument_list|(
name|search
argument_list|,
literal|0
argument_list|,
literal|"name2"
argument_list|,
literal|0
argument_list|,
name|equalTo
argument_list|(
literal|"<em>logica</em>cmg ehe<em>ma</em>ls avinci - the know how company"
argument_list|)
argument_list|)
expr_stmt|;
name|assertHighlight
argument_list|(
name|search
argument_list|,
literal|1
argument_list|,
literal|"name2"
argument_list|,
literal|0
argument_list|,
name|equalTo
argument_list|(
literal|"avinci, unilog avinci,<em>logica</em>cmg,<em>logica</em>"
argument_list|)
argument_list|)
expr_stmt|;
name|search
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|constantScoreQuery
argument_list|(
name|matchQuery
argument_list|(
literal|"name2"
argument_list|,
literal|"logica"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|addHighlightedField
argument_list|(
literal|"name2"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertHighlight
argument_list|(
name|search
argument_list|,
literal|0
argument_list|,
literal|"name2"
argument_list|,
literal|0
argument_list|,
name|equalTo
argument_list|(
literal|"<em>logica</em>cmg ehemals avinci - the know how company"
argument_list|)
argument_list|)
expr_stmt|;
name|assertHighlight
argument_list|(
name|search
argument_list|,
literal|1
argument_list|,
literal|"name2"
argument_list|,
literal|0
argument_list|,
name|equalTo
argument_list|(
literal|"avinci, unilog avinci,<em>logica</em>cmg,<em>logica</em>"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testNgramHighlighting
specifier|public
name|void
name|testNgramHighlighting
parameter_list|()
throws|throws
name|ElasticSearchException
throws|,
name|IOException
block|{
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"test"
argument_list|,
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"test"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"name"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"index_analyzer"
argument_list|,
literal|"name_index_analyzer"
argument_list|)
operator|.
name|field
argument_list|(
literal|"search_analyzer"
argument_list|,
literal|"name_search_analyzer"
argument_list|)
operator|.
name|field
argument_list|(
literal|"term_vector"
argument_list|,
literal|"with_positions_offsets"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"name2"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"index_analyzer"
argument_list|,
literal|"name2_index_analyzer"
argument_list|)
operator|.
name|field
argument_list|(
literal|"search_analyzer"
argument_list|,
literal|"name_search_analyzer"
argument_list|)
operator|.
name|field
argument_list|(
literal|"term_vector"
argument_list|,
literal|"with_positions_offsets"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|setSettings
argument_list|(
name|ImmutableSettings
operator|.
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.number_of_shards"
argument_list|,
literal|2
argument_list|)
operator|.
name|put
argument_list|(
literal|"analysis.filter.my_ngram.max_gram"
argument_list|,
literal|20
argument_list|)
operator|.
name|put
argument_list|(
literal|"analysis.filter.my_ngram.min_gram"
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
literal|"analysis.filter.my_ngram.type"
argument_list|,
literal|"ngram"
argument_list|)
operator|.
name|put
argument_list|(
literal|"analysis.tokenizer.my_ngramt.max_gram"
argument_list|,
literal|20
argument_list|)
operator|.
name|put
argument_list|(
literal|"analysis.tokenizer.my_ngramt.min_gram"
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
literal|"analysis.tokenizer.my_ngramt.token_chars"
argument_list|,
literal|"letter,digit"
argument_list|)
operator|.
name|put
argument_list|(
literal|"analysis.tokenizer.my_ngramt.type"
argument_list|,
literal|"ngram"
argument_list|)
operator|.
name|put
argument_list|(
literal|"analysis.analyzer.name_index_analyzer.tokenizer"
argument_list|,
literal|"my_ngramt"
argument_list|)
operator|.
name|put
argument_list|(
literal|"analysis.analyzer.name2_index_analyzer.tokenizer"
argument_list|,
literal|"whitespace"
argument_list|)
operator|.
name|put
argument_list|(
literal|"analysis.analyzer.name2_index_analyzer.filter"
argument_list|,
literal|"my_ngram"
argument_list|)
operator|.
name|put
argument_list|(
literal|"analysis.analyzer.name_search_analyzer.tokenizer"
argument_list|,
literal|"whitespace"
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"name"
argument_list|,
literal|"logicacmg ehemals avinci - the know how company"
argument_list|)
operator|.
name|field
argument_list|(
literal|"name2"
argument_list|,
literal|"logicacmg ehemals avinci - the know how company"
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|SearchResponse
name|search
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchQuery
argument_list|(
literal|"name"
argument_list|,
literal|"logica m"
argument_list|)
argument_list|)
operator|.
name|addHighlightedField
argument_list|(
literal|"name"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertHighlight
argument_list|(
name|search
argument_list|,
literal|0
argument_list|,
literal|"name"
argument_list|,
literal|0
argument_list|,
name|equalTo
argument_list|(
literal|"<em>logica</em>c<em>m</em>g ehe<em>m</em>als avinci - the know how co<em>m</em>pany"
argument_list|)
argument_list|)
expr_stmt|;
name|search
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchQuery
argument_list|(
literal|"name"
argument_list|,
literal|"logica ma"
argument_list|)
argument_list|)
operator|.
name|addHighlightedField
argument_list|(
literal|"name"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertHighlight
argument_list|(
name|search
argument_list|,
literal|0
argument_list|,
literal|"name"
argument_list|,
literal|0
argument_list|,
name|equalTo
argument_list|(
literal|"<em>logica</em>cmg ehe<em>ma</em>ls avinci - the know how company"
argument_list|)
argument_list|)
expr_stmt|;
name|search
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchQuery
argument_list|(
literal|"name"
argument_list|,
literal|"logica"
argument_list|)
argument_list|)
operator|.
name|addHighlightedField
argument_list|(
literal|"name"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertHighlight
argument_list|(
name|search
argument_list|,
literal|0
argument_list|,
literal|"name"
argument_list|,
literal|0
argument_list|,
name|equalTo
argument_list|(
literal|"<em>logica</em>cmg ehemals avinci - the know how company"
argument_list|)
argument_list|)
expr_stmt|;
name|search
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchQuery
argument_list|(
literal|"name2"
argument_list|,
literal|"logica m"
argument_list|)
argument_list|)
operator|.
name|addHighlightedField
argument_list|(
literal|"name2"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertHighlight
argument_list|(
name|search
argument_list|,
literal|0
argument_list|,
literal|"name2"
argument_list|,
literal|0
argument_list|,
name|equalTo
argument_list|(
literal|"<em>logicacmg</em><em>ehemals</em> avinci - the know how<em>company</em>"
argument_list|)
argument_list|)
expr_stmt|;
name|search
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchQuery
argument_list|(
literal|"name2"
argument_list|,
literal|"logica ma"
argument_list|)
argument_list|)
operator|.
name|addHighlightedField
argument_list|(
literal|"name2"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertHighlight
argument_list|(
name|search
argument_list|,
literal|0
argument_list|,
literal|"name2"
argument_list|,
literal|0
argument_list|,
name|equalTo
argument_list|(
literal|"<em>logicacmg</em><em>ehemals</em> avinci - the know how company"
argument_list|)
argument_list|)
expr_stmt|;
name|search
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchQuery
argument_list|(
literal|"name2"
argument_list|,
literal|"logica"
argument_list|)
argument_list|)
operator|.
name|addHighlightedField
argument_list|(
literal|"name2"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertHighlight
argument_list|(
name|search
argument_list|,
literal|0
argument_list|,
literal|"name2"
argument_list|,
literal|0
argument_list|,
name|equalTo
argument_list|(
literal|"<em>logicacmg</em> ehemals avinci - the know how company"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEnsureNoNegativeOffsets
specifier|public
name|void
name|testEnsureNoNegativeOffsets
parameter_list|()
throws|throws
name|Exception
block|{
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|ImmutableSettings
operator|.
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.number_of_shards"
argument_list|,
literal|2
argument_list|)
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
comment|// we don't store title, now lets see if it works...
operator|.
name|startObject
argument_list|(
literal|"no_long_term"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"store"
argument_list|,
literal|"no"
argument_list|)
operator|.
name|field
argument_list|(
literal|"term_vector"
argument_list|,
literal|"with_positions_offsets"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"long_term"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"store"
argument_list|,
literal|"no"
argument_list|)
operator|.
name|field
argument_list|(
literal|"term_vector"
argument_list|,
literal|"with_positions_offsets"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareHealth
argument_list|()
operator|.
name|setWaitForEvents
argument_list|(
name|Priority
operator|.
name|LANGUID
argument_list|)
operator|.
name|setWaitForYellowStatus
argument_list|()
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startArray
argument_list|(
literal|"no_long_term"
argument_list|)
operator|.
name|value
argument_list|(
literal|"This is a test where foo is highlighed and should be highlighted"
argument_list|)
operator|.
name|endArray
argument_list|()
operator|.
name|startArray
argument_list|(
literal|"long_term"
argument_list|)
operator|.
name|value
argument_list|(
literal|"This is a test thisisaverylongwordandmakessurethisfails where foo is highlighed and should be highlighted"
argument_list|)
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|setRefresh
argument_list|(
literal|true
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|SearchResponse
name|search
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchQuery
argument_list|(
literal|"long_term"
argument_list|,
literal|"thisisaverylongwordandmakessurethisfails foo highlighed"
argument_list|)
argument_list|)
operator|.
name|addHighlightedField
argument_list|(
literal|"long_term"
argument_list|,
literal|18
argument_list|,
literal|1
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|search
operator|.
name|getHits
argument_list|()
operator|.
name|totalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|search
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|search
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
index|[
literal|0
index|]
operator|.
name|highlightFields
argument_list|()
operator|.
name|get
argument_list|(
literal|"long_term"
argument_list|)
operator|.
name|fragments
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|search
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
index|[
literal|0
index|]
operator|.
name|highlightFields
argument_list|()
operator|.
name|get
argument_list|(
literal|"long_term"
argument_list|)
operator|.
name|fragments
argument_list|()
index|[
literal|0
index|]
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"<em>thisisaverylongwordandmakessurethisfails</em>"
argument_list|)
argument_list|)
expr_stmt|;
name|search
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchQuery
argument_list|(
literal|"no_long_term"
argument_list|,
literal|"test foo highlighed"
argument_list|)
operator|.
name|type
argument_list|(
name|Type
operator|.
name|PHRASE
argument_list|)
operator|.
name|slop
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|addHighlightedField
argument_list|(
literal|"no_long_term"
argument_list|,
literal|18
argument_list|,
literal|1
argument_list|)
operator|.
name|setHighlighterPostTags
argument_list|(
literal|"</b>"
argument_list|)
operator|.
name|setHighlighterPreTags
argument_list|(
literal|"<b>"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|search
operator|.
name|getHits
argument_list|()
operator|.
name|totalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|search
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|search
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
index|[
literal|0
index|]
operator|.
name|highlightFields
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|search
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchQuery
argument_list|(
literal|"no_long_term"
argument_list|,
literal|"test foo highlighed"
argument_list|)
operator|.
name|type
argument_list|(
name|Type
operator|.
name|PHRASE
argument_list|)
operator|.
name|slop
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|addHighlightedField
argument_list|(
literal|"no_long_term"
argument_list|,
literal|30
argument_list|,
literal|1
argument_list|)
operator|.
name|setHighlighterPostTags
argument_list|(
literal|"</b>"
argument_list|)
operator|.
name|setHighlighterPreTags
argument_list|(
literal|"<b>"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|search
operator|.
name|getHits
argument_list|()
operator|.
name|totalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|search
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|search
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
index|[
literal|0
index|]
operator|.
name|highlightFields
argument_list|()
operator|.
name|get
argument_list|(
literal|"no_long_term"
argument_list|)
operator|.
name|fragments
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|search
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
index|[
literal|0
index|]
operator|.
name|highlightFields
argument_list|()
operator|.
name|get
argument_list|(
literal|"no_long_term"
argument_list|)
operator|.
name|fragments
argument_list|()
index|[
literal|0
index|]
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"a<b>test</b> where<b>foo</b> is<b>highlighed</b> and"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSourceLookupHighlightingUsingPlainHighlighter
specifier|public
name|void
name|testSourceLookupHighlightingUsingPlainHighlighter
parameter_list|()
throws|throws
name|Exception
block|{
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|ImmutableSettings
operator|.
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.number_of_shards"
argument_list|,
literal|2
argument_list|)
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
comment|// we don't store title and don't use term vector, now lets see if it works...
operator|.
name|startObject
argument_list|(
literal|"title"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"store"
argument_list|,
literal|"no"
argument_list|)
operator|.
name|field
argument_list|(
literal|"term_vector"
argument_list|,
literal|"no"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"attachments"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"body"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"store"
argument_list|,
literal|"no"
argument_list|)
operator|.
name|field
argument_list|(
literal|"term_vector"
argument_list|,
literal|"no"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareHealth
argument_list|()
operator|.
name|setWaitForEvents
argument_list|(
name|Priority
operator|.
name|LANGUID
argument_list|)
operator|.
name|setWaitForYellowStatus
argument_list|()
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|setSource
argument_list|(
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"title"
argument_list|,
literal|"This is a test on the highlighting bug present in elasticsearch"
argument_list|)
operator|.
name|startArray
argument_list|(
literal|"attachments"
argument_list|)
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"body"
argument_list|,
literal|"attachment 1"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"body"
argument_list|,
literal|"attachment 2"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|setRefresh
argument_list|(
literal|true
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
block|}
name|SearchResponse
name|search
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|fieldQuery
argument_list|(
literal|"title"
argument_list|,
literal|"bug"
argument_list|)
argument_list|)
operator|.
name|addHighlightedField
argument_list|(
literal|"title"
argument_list|,
operator|-
literal|1
argument_list|,
literal|0
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertNoFailures
argument_list|(
name|search
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|search
operator|.
name|getHits
argument_list|()
operator|.
name|totalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|5l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|search
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|SearchHit
name|hit
range|:
name|search
operator|.
name|getHits
argument_list|()
control|)
block|{
name|assertThat
argument_list|(
name|hit
operator|.
name|highlightFields
argument_list|()
operator|.
name|get
argument_list|(
literal|"title"
argument_list|)
operator|.
name|fragments
argument_list|()
index|[
literal|0
index|]
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"This is a test on the highlighting<em>bug</em> present in elasticsearch"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|search
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|fieldQuery
argument_list|(
literal|"attachments.body"
argument_list|,
literal|"attachment"
argument_list|)
argument_list|)
operator|.
name|addHighlightedField
argument_list|(
literal|"attachments.body"
argument_list|,
operator|-
literal|1
argument_list|,
literal|0
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertNoFailures
argument_list|(
name|search
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|search
operator|.
name|getHits
argument_list|()
operator|.
name|totalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|5l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|search
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|SearchHit
name|hit
range|:
name|search
operator|.
name|getHits
argument_list|()
control|)
block|{
name|assertThat
argument_list|(
name|hit
operator|.
name|highlightFields
argument_list|()
operator|.
name|get
argument_list|(
literal|"attachments.body"
argument_list|)
operator|.
name|fragments
argument_list|()
index|[
literal|0
index|]
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"<em>attachment</em> 1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|hit
operator|.
name|highlightFields
argument_list|()
operator|.
name|get
argument_list|(
literal|"attachments.body"
argument_list|)
operator|.
name|fragments
argument_list|()
index|[
literal|1
index|]
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"<em>attachment</em> 2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testSourceLookupHighlightingUsingFastVectorHighlighter
specifier|public
name|void
name|testSourceLookupHighlightingUsingFastVectorHighlighter
parameter_list|()
throws|throws
name|Exception
block|{
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|ImmutableSettings
operator|.
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.number_of_shards"
argument_list|,
literal|2
argument_list|)
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
comment|// we don't store title, now lets see if it works...
operator|.
name|startObject
argument_list|(
literal|"title"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"store"
argument_list|,
literal|"no"
argument_list|)
operator|.
name|field
argument_list|(
literal|"term_vector"
argument_list|,
literal|"with_positions_offsets"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"attachments"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"body"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"store"
argument_list|,
literal|"no"
argument_list|)
operator|.
name|field
argument_list|(
literal|"term_vector"
argument_list|,
literal|"with_positions_offsets"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareHealth
argument_list|()
operator|.
name|setWaitForEvents
argument_list|(
name|Priority
operator|.
name|LANGUID
argument_list|)
operator|.
name|setWaitForYellowStatus
argument_list|()
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|setSource
argument_list|(
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"title"
argument_list|,
literal|"This is a test on the highlighting bug present in elasticsearch"
argument_list|)
operator|.
name|startArray
argument_list|(
literal|"attachments"
argument_list|)
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"body"
argument_list|,
literal|"attachment 1"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"body"
argument_list|,
literal|"attachment 2"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|setRefresh
argument_list|(
literal|true
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
block|}
name|SearchResponse
name|search
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|fieldQuery
argument_list|(
literal|"title"
argument_list|,
literal|"bug"
argument_list|)
argument_list|)
operator|.
name|addHighlightedField
argument_list|(
literal|"title"
argument_list|,
operator|-
literal|1
argument_list|,
literal|0
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertNoFailures
argument_list|(
name|search
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|search
operator|.
name|getHits
argument_list|()
operator|.
name|totalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|5l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|search
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|SearchHit
name|hit
range|:
name|search
operator|.
name|getHits
argument_list|()
control|)
block|{
name|assertThat
argument_list|(
name|hit
operator|.
name|highlightFields
argument_list|()
operator|.
name|get
argument_list|(
literal|"title"
argument_list|)
operator|.
name|fragments
argument_list|()
index|[
literal|0
index|]
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"This is a test on the highlighting<em>bug</em> present in elasticsearch"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|search
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|fieldQuery
argument_list|(
literal|"attachments.body"
argument_list|,
literal|"attachment"
argument_list|)
argument_list|)
operator|.
name|addHighlightedField
argument_list|(
literal|"attachments.body"
argument_list|,
operator|-
literal|1
argument_list|,
literal|2
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertNoFailures
argument_list|(
name|search
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|search
operator|.
name|getHits
argument_list|()
operator|.
name|totalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|5l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|search
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|SearchHit
name|hit
range|:
name|search
operator|.
name|getHits
argument_list|()
control|)
block|{
name|assertThat
argument_list|(
name|hit
operator|.
name|highlightFields
argument_list|()
operator|.
name|get
argument_list|(
literal|"attachments.body"
argument_list|)
operator|.
name|fragments
argument_list|()
index|[
literal|0
index|]
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"<em>attachment</em> 1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|hit
operator|.
name|highlightFields
argument_list|()
operator|.
name|get
argument_list|(
literal|"attachments.body"
argument_list|)
operator|.
name|fragments
argument_list|()
index|[
literal|1
index|]
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"<em>attachment</em> 2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testHighlightIssue1994
specifier|public
name|void
name|testHighlightIssue1994
parameter_list|()
throws|throws
name|Exception
block|{
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|ImmutableSettings
operator|.
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.number_of_shards"
argument_list|,
literal|2
argument_list|)
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
comment|// we don't store title, now lets see if it works...
operator|.
name|startObject
argument_list|(
literal|"title"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"store"
argument_list|,
literal|"no"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"titleTV"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"store"
argument_list|,
literal|"no"
argument_list|)
operator|.
name|field
argument_list|(
literal|"term_vector"
argument_list|,
literal|"with_positions_offsets"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareHealth
argument_list|()
operator|.
name|setWaitForEvents
argument_list|(
name|Priority
operator|.
name|LANGUID
argument_list|)
operator|.
name|setWaitForYellowStatus
argument_list|()
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startArray
argument_list|(
literal|"title"
argument_list|)
operator|.
name|value
argument_list|(
literal|"This is a test on the highlighting bug present in elasticsearch"
argument_list|)
operator|.
name|value
argument_list|(
literal|"The bug is bugging us"
argument_list|)
operator|.
name|endArray
argument_list|()
operator|.
name|startArray
argument_list|(
literal|"titleTV"
argument_list|)
operator|.
name|value
argument_list|(
literal|"This is a test on the highlighting bug present in elasticsearch"
argument_list|)
operator|.
name|value
argument_list|(
literal|"The bug is bugging us"
argument_list|)
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|setRefresh
argument_list|(
literal|true
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startArray
argument_list|(
literal|"titleTV"
argument_list|)
operator|.
name|value
argument_list|(
literal|"some text to highlight"
argument_list|)
operator|.
name|value
argument_list|(
literal|"highlight other text"
argument_list|)
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|setRefresh
argument_list|(
literal|true
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|SearchResponse
name|search
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|fieldQuery
argument_list|(
literal|"title"
argument_list|,
literal|"bug"
argument_list|)
argument_list|)
operator|.
name|addHighlightedField
argument_list|(
literal|"title"
argument_list|,
operator|-
literal|1
argument_list|,
literal|2
argument_list|)
operator|.
name|addHighlightedField
argument_list|(
literal|"titleTV"
argument_list|,
operator|-
literal|1
argument_list|,
literal|2
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|search
operator|.
name|getHits
argument_list|()
operator|.
name|totalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|search
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|search
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
index|[
literal|0
index|]
operator|.
name|highlightFields
argument_list|()
operator|.
name|get
argument_list|(
literal|"title"
argument_list|)
operator|.
name|fragments
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|search
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
index|[
literal|0
index|]
operator|.
name|highlightFields
argument_list|()
operator|.
name|get
argument_list|(
literal|"title"
argument_list|)
operator|.
name|fragments
argument_list|()
index|[
literal|0
index|]
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"This is a test on the highlighting<em>bug</em> present in elasticsearch"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|search
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
index|[
literal|0
index|]
operator|.
name|highlightFields
argument_list|()
operator|.
name|get
argument_list|(
literal|"title"
argument_list|)
operator|.
name|fragments
argument_list|()
index|[
literal|1
index|]
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"The<em>bug</em> is bugging us"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|search
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
index|[
literal|0
index|]
operator|.
name|highlightFields
argument_list|()
operator|.
name|get
argument_list|(
literal|"titleTV"
argument_list|)
operator|.
name|fragments
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|search
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
index|[
literal|0
index|]
operator|.
name|highlightFields
argument_list|()
operator|.
name|get
argument_list|(
literal|"titleTV"
argument_list|)
operator|.
name|fragments
argument_list|()
index|[
literal|0
index|]
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"This is a test on the highlighting<em>bug</em> present in elasticsearch"
argument_list|)
argument_list|)
expr_stmt|;
comment|//        assertThat(search.hits().hits()[0].highlightFields().get("titleTV").fragments()[0].string(), equalTo("highlighting<em>bug</em> present in elasticsearch")); // FastVectorHighlighter starts highlighting from startOffset - margin
name|assertThat
argument_list|(
name|search
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
index|[
literal|0
index|]
operator|.
name|highlightFields
argument_list|()
operator|.
name|get
argument_list|(
literal|"titleTV"
argument_list|)
operator|.
name|fragments
argument_list|()
index|[
literal|1
index|]
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"The<em>bug</em> is bugging us"
argument_list|)
argument_list|)
expr_stmt|;
name|search
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|fieldQuery
argument_list|(
literal|"titleTV"
argument_list|,
literal|"highlight"
argument_list|)
argument_list|)
operator|.
name|addHighlightedField
argument_list|(
literal|"titleTV"
argument_list|,
operator|-
literal|1
argument_list|,
literal|2
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|search
operator|.
name|getHits
argument_list|()
operator|.
name|totalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|search
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|search
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
index|[
literal|0
index|]
operator|.
name|highlightFields
argument_list|()
operator|.
name|get
argument_list|(
literal|"titleTV"
argument_list|)
operator|.
name|fragments
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|search
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
index|[
literal|0
index|]
operator|.
name|highlightFields
argument_list|()
operator|.
name|get
argument_list|(
literal|"titleTV"
argument_list|)
operator|.
name|fragments
argument_list|()
index|[
literal|0
index|]
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"some text to<em>highlight</em>"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|search
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
index|[
literal|0
index|]
operator|.
name|highlightFields
argument_list|()
operator|.
name|get
argument_list|(
literal|"titleTV"
argument_list|)
operator|.
name|fragments
argument_list|()
index|[
literal|1
index|]
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"<em>highlight</em> other text"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGlobalHighlightingSettingsOverriddenAtFieldLevel
specifier|public
name|void
name|testGlobalHighlightingSettingsOverriddenAtFieldLevel
parameter_list|()
block|{
name|createIndex
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"this is a test"
argument_list|,
literal|"field2"
argument_list|,
literal|"this is another test"
argument_list|)
operator|.
name|setRefresh
argument_list|(
literal|true
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> highlighting and searching on field1 and field2 produces different tags"
argument_list|)
expr_stmt|;
name|SearchSourceBuilder
name|source
init|=
name|searchSource
argument_list|()
operator|.
name|query
argument_list|(
name|termQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
operator|.
name|from
argument_list|(
literal|0
argument_list|)
operator|.
name|size
argument_list|(
literal|60
argument_list|)
operator|.
name|explain
argument_list|(
literal|true
argument_list|)
operator|.
name|highlight
argument_list|(
name|highlight
argument_list|()
operator|.
name|order
argument_list|(
literal|"score"
argument_list|)
operator|.
name|preTags
argument_list|(
literal|"<global>"
argument_list|)
operator|.
name|postTags
argument_list|(
literal|"</global>"
argument_list|)
operator|.
name|field
argument_list|(
operator|new
name|HighlightBuilder
operator|.
name|Field
argument_list|(
literal|"field1"
argument_list|)
argument_list|)
operator|.
name|field
argument_list|(
operator|new
name|HighlightBuilder
operator|.
name|Field
argument_list|(
literal|"field2"
argument_list|)
operator|.
name|preTags
argument_list|(
literal|"<field2>"
argument_list|)
operator|.
name|postTags
argument_list|(
literal|"</field2>"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|search
argument_list|(
name|searchRequest
argument_list|(
literal|"test"
argument_list|)
operator|.
name|source
argument_list|(
name|source
argument_list|)
operator|.
name|searchType
argument_list|(
name|QUERY_THEN_FETCH
argument_list|)
argument_list|)
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertNoFailures
argument_list|(
name|searchResponse
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|totalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|highlightFields
argument_list|()
operator|.
name|get
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|fragments
argument_list|()
index|[
literal|0
index|]
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"this is a<global>test</global>"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|highlightFields
argument_list|()
operator|.
name|get
argument_list|(
literal|"field2"
argument_list|)
operator|.
name|fragments
argument_list|()
index|[
literal|0
index|]
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"this is another<field2>test</field2>"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testHighlightingOnWildcardFields
specifier|public
name|void
name|testHighlightingOnWildcardFields
parameter_list|()
throws|throws
name|Exception
block|{
name|createIndex
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareHealth
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setWaitForGreenStatus
argument_list|()
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"this is a test"
argument_list|,
literal|"field2"
argument_list|,
literal|"this is another test"
argument_list|)
operator|.
name|setRefresh
argument_list|(
literal|true
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> highlighting and searching on field*"
argument_list|)
expr_stmt|;
name|SearchSourceBuilder
name|source
init|=
name|searchSource
argument_list|()
operator|.
name|query
argument_list|(
name|termQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
operator|.
name|from
argument_list|(
literal|0
argument_list|)
operator|.
name|size
argument_list|(
literal|60
argument_list|)
operator|.
name|explain
argument_list|(
literal|true
argument_list|)
operator|.
name|highlight
argument_list|(
name|highlight
argument_list|()
operator|.
name|field
argument_list|(
literal|"field*"
argument_list|)
operator|.
name|order
argument_list|(
literal|"score"
argument_list|)
operator|.
name|preTags
argument_list|(
literal|"<xxx>"
argument_list|)
operator|.
name|postTags
argument_list|(
literal|"</xxx>"
argument_list|)
argument_list|)
decl_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|search
argument_list|(
name|searchRequest
argument_list|(
literal|"test"
argument_list|)
operator|.
name|source
argument_list|(
name|source
argument_list|)
operator|.
name|searchType
argument_list|(
name|QUERY_THEN_FETCH
argument_list|)
argument_list|)
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertNoFailures
argument_list|(
name|searchResponse
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|totalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|highlightFields
argument_list|()
operator|.
name|get
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|fragments
argument_list|()
index|[
literal|0
index|]
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"this is a<xxx>test</xxx>"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|highlightFields
argument_list|()
operator|.
name|get
argument_list|(
literal|"field2"
argument_list|)
operator|.
name|fragments
argument_list|()
index|[
literal|0
index|]
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"this is another<xxx>test</xxx>"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPlainHighlighter
specifier|public
name|void
name|testPlainHighlighter
parameter_list|()
throws|throws
name|Exception
block|{
name|createIndex
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareHealth
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setWaitForGreenStatus
argument_list|()
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"this is a test"
argument_list|,
literal|"field2"
argument_list|,
literal|"The quick brown fox jumps over the lazy dog"
argument_list|)
operator|.
name|setRefresh
argument_list|(
literal|true
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> highlighting and searching on field1"
argument_list|)
expr_stmt|;
name|SearchSourceBuilder
name|source
init|=
name|searchSource
argument_list|()
operator|.
name|query
argument_list|(
name|termQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
operator|.
name|from
argument_list|(
literal|0
argument_list|)
operator|.
name|size
argument_list|(
literal|60
argument_list|)
operator|.
name|explain
argument_list|(
literal|true
argument_list|)
operator|.
name|highlight
argument_list|(
name|highlight
argument_list|()
operator|.
name|field
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|order
argument_list|(
literal|"score"
argument_list|)
operator|.
name|preTags
argument_list|(
literal|"<xxx>"
argument_list|)
operator|.
name|postTags
argument_list|(
literal|"</xxx>"
argument_list|)
argument_list|)
decl_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|search
argument_list|(
name|searchRequest
argument_list|(
literal|"test"
argument_list|)
operator|.
name|source
argument_list|(
name|source
argument_list|)
operator|.
name|searchType
argument_list|(
name|QUERY_THEN_FETCH
argument_list|)
argument_list|)
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertNoFailures
argument_list|(
name|searchResponse
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|totalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|highlightFields
argument_list|()
operator|.
name|get
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|fragments
argument_list|()
index|[
literal|0
index|]
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"this is a<xxx>test</xxx>"
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> searching on _all, highlighting on field1"
argument_list|)
expr_stmt|;
name|source
operator|=
name|searchSource
argument_list|()
operator|.
name|query
argument_list|(
name|termQuery
argument_list|(
literal|"_all"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
operator|.
name|from
argument_list|(
literal|0
argument_list|)
operator|.
name|size
argument_list|(
literal|60
argument_list|)
operator|.
name|explain
argument_list|(
literal|true
argument_list|)
operator|.
name|highlight
argument_list|(
name|highlight
argument_list|()
operator|.
name|field
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|order
argument_list|(
literal|"score"
argument_list|)
operator|.
name|preTags
argument_list|(
literal|"<xxx>"
argument_list|)
operator|.
name|postTags
argument_list|(
literal|"</xxx>"
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|search
argument_list|(
name|searchRequest
argument_list|(
literal|"test"
argument_list|)
operator|.
name|source
argument_list|(
name|source
argument_list|)
operator|.
name|searchType
argument_list|(
name|QUERY_THEN_FETCH
argument_list|)
argument_list|)
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertNoFailures
argument_list|(
name|searchResponse
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|totalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|highlightFields
argument_list|()
operator|.
name|get
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|fragments
argument_list|()
index|[
literal|0
index|]
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"this is a<xxx>test</xxx>"
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> searching on _all, highlighting on field2"
argument_list|)
expr_stmt|;
name|source
operator|=
name|searchSource
argument_list|()
operator|.
name|query
argument_list|(
name|termQuery
argument_list|(
literal|"_all"
argument_list|,
literal|"quick"
argument_list|)
argument_list|)
operator|.
name|from
argument_list|(
literal|0
argument_list|)
operator|.
name|size
argument_list|(
literal|60
argument_list|)
operator|.
name|explain
argument_list|(
literal|true
argument_list|)
operator|.
name|highlight
argument_list|(
name|highlight
argument_list|()
operator|.
name|field
argument_list|(
literal|"field2"
argument_list|)
operator|.
name|order
argument_list|(
literal|"score"
argument_list|)
operator|.
name|preTags
argument_list|(
literal|"<xxx>"
argument_list|)
operator|.
name|postTags
argument_list|(
literal|"</xxx>"
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|search
argument_list|(
name|searchRequest
argument_list|(
literal|"test"
argument_list|)
operator|.
name|source
argument_list|(
name|source
argument_list|)
operator|.
name|searchType
argument_list|(
name|QUERY_THEN_FETCH
argument_list|)
argument_list|)
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertNoFailures
argument_list|(
name|searchResponse
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|totalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|highlightFields
argument_list|()
operator|.
name|get
argument_list|(
literal|"field2"
argument_list|)
operator|.
name|fragments
argument_list|()
index|[
literal|0
index|]
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"The<xxx>quick</xxx> brown fox jumps over the lazy dog"
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> searching on _all, highlighting on field2"
argument_list|)
expr_stmt|;
name|source
operator|=
name|searchSource
argument_list|()
operator|.
name|query
argument_list|(
name|prefixQuery
argument_list|(
literal|"_all"
argument_list|,
literal|"qui"
argument_list|)
argument_list|)
operator|.
name|from
argument_list|(
literal|0
argument_list|)
operator|.
name|size
argument_list|(
literal|60
argument_list|)
operator|.
name|explain
argument_list|(
literal|true
argument_list|)
operator|.
name|highlight
argument_list|(
name|highlight
argument_list|()
operator|.
name|field
argument_list|(
literal|"field2"
argument_list|)
operator|.
name|order
argument_list|(
literal|"score"
argument_list|)
operator|.
name|preTags
argument_list|(
literal|"<xxx>"
argument_list|)
operator|.
name|postTags
argument_list|(
literal|"</xxx>"
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|search
argument_list|(
name|searchRequest
argument_list|(
literal|"test"
argument_list|)
operator|.
name|source
argument_list|(
name|source
argument_list|)
operator|.
name|searchType
argument_list|(
name|QUERY_THEN_FETCH
argument_list|)
argument_list|)
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertNoFailures
argument_list|(
name|searchResponse
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|totalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|highlightFields
argument_list|()
operator|.
name|get
argument_list|(
literal|"field2"
argument_list|)
operator|.
name|fragments
argument_list|()
index|[
literal|0
index|]
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"The<xxx>quick</xxx> brown fox jumps over the lazy dog"
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> searching on _all with constant score, highlighting on field2"
argument_list|)
expr_stmt|;
name|source
operator|=
name|searchSource
argument_list|()
operator|.
name|query
argument_list|(
name|constantScoreQuery
argument_list|(
name|prefixQuery
argument_list|(
literal|"_all"
argument_list|,
literal|"qui"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|from
argument_list|(
literal|0
argument_list|)
operator|.
name|size
argument_list|(
literal|60
argument_list|)
operator|.
name|explain
argument_list|(
literal|true
argument_list|)
operator|.
name|highlight
argument_list|(
name|highlight
argument_list|()
operator|.
name|field
argument_list|(
literal|"field2"
argument_list|)
operator|.
name|order
argument_list|(
literal|"score"
argument_list|)
operator|.
name|preTags
argument_list|(
literal|"<xxx>"
argument_list|)
operator|.
name|postTags
argument_list|(
literal|"</xxx>"
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|search
argument_list|(
name|searchRequest
argument_list|(
literal|"test"
argument_list|)
operator|.
name|source
argument_list|(
name|source
argument_list|)
operator|.
name|searchType
argument_list|(
name|QUERY_THEN_FETCH
argument_list|)
argument_list|)
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertNoFailures
argument_list|(
name|searchResponse
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|totalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|highlightFields
argument_list|()
operator|.
name|get
argument_list|(
literal|"field2"
argument_list|)
operator|.
name|fragments
argument_list|()
index|[
literal|0
index|]
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"The<xxx>quick</xxx> brown fox jumps over the lazy dog"
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> searching on _all with constant score, highlighting on field2"
argument_list|)
expr_stmt|;
name|source
operator|=
name|searchSource
argument_list|()
operator|.
name|query
argument_list|(
name|boolQuery
argument_list|()
operator|.
name|should
argument_list|(
name|constantScoreQuery
argument_list|(
name|prefixQuery
argument_list|(
literal|"_all"
argument_list|,
literal|"qui"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|from
argument_list|(
literal|0
argument_list|)
operator|.
name|size
argument_list|(
literal|60
argument_list|)
operator|.
name|explain
argument_list|(
literal|true
argument_list|)
operator|.
name|highlight
argument_list|(
name|highlight
argument_list|()
operator|.
name|field
argument_list|(
literal|"field2"
argument_list|)
operator|.
name|order
argument_list|(
literal|"score"
argument_list|)
operator|.
name|preTags
argument_list|(
literal|"<xxx>"
argument_list|)
operator|.
name|postTags
argument_list|(
literal|"</xxx>"
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|search
argument_list|(
name|searchRequest
argument_list|(
literal|"test"
argument_list|)
operator|.
name|source
argument_list|(
name|source
argument_list|)
operator|.
name|searchType
argument_list|(
name|QUERY_THEN_FETCH
argument_list|)
argument_list|)
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertNoFailures
argument_list|(
name|searchResponse
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|totalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|highlightFields
argument_list|()
operator|.
name|get
argument_list|(
literal|"field2"
argument_list|)
operator|.
name|fragments
argument_list|()
index|[
literal|0
index|]
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"The<xxx>quick</xxx> brown fox jumps over the lazy dog"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFastVectorHighlighter
specifier|public
name|void
name|testFastVectorHighlighter
parameter_list|()
throws|throws
name|Exception
block|{
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
name|type1TermVectorMapping
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareHealth
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setWaitForGreenStatus
argument_list|()
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"this is a test"
argument_list|,
literal|"field2"
argument_list|,
literal|"The quick brown fox jumps over the lazy dog"
argument_list|)
operator|.
name|setRefresh
argument_list|(
literal|true
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> highlighting and searching on field1"
argument_list|)
expr_stmt|;
name|SearchSourceBuilder
name|source
init|=
name|searchSource
argument_list|()
operator|.
name|query
argument_list|(
name|termQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
operator|.
name|from
argument_list|(
literal|0
argument_list|)
operator|.
name|size
argument_list|(
literal|60
argument_list|)
operator|.
name|explain
argument_list|(
literal|true
argument_list|)
operator|.
name|highlight
argument_list|(
name|highlight
argument_list|()
operator|.
name|field
argument_list|(
literal|"field1"
argument_list|,
literal|100
argument_list|,
literal|0
argument_list|)
operator|.
name|order
argument_list|(
literal|"score"
argument_list|)
operator|.
name|preTags
argument_list|(
literal|"<xxx>"
argument_list|)
operator|.
name|postTags
argument_list|(
literal|"</xxx>"
argument_list|)
argument_list|)
decl_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|search
argument_list|(
name|searchRequest
argument_list|(
literal|"test"
argument_list|)
operator|.
name|source
argument_list|(
name|source
argument_list|)
operator|.
name|searchType
argument_list|(
name|QUERY_THEN_FETCH
argument_list|)
argument_list|)
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertNoFailures
argument_list|(
name|searchResponse
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|totalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|highlightFields
argument_list|()
operator|.
name|get
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|fragments
argument_list|()
index|[
literal|0
index|]
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"this is a<xxx>test</xxx>"
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> searching on _all, highlighting on field1"
argument_list|)
expr_stmt|;
name|source
operator|=
name|searchSource
argument_list|()
operator|.
name|query
argument_list|(
name|termQuery
argument_list|(
literal|"_all"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
operator|.
name|from
argument_list|(
literal|0
argument_list|)
operator|.
name|size
argument_list|(
literal|60
argument_list|)
operator|.
name|explain
argument_list|(
literal|true
argument_list|)
operator|.
name|highlight
argument_list|(
name|highlight
argument_list|()
operator|.
name|field
argument_list|(
literal|"field1"
argument_list|,
literal|100
argument_list|,
literal|0
argument_list|)
operator|.
name|order
argument_list|(
literal|"score"
argument_list|)
operator|.
name|preTags
argument_list|(
literal|"<xxx>"
argument_list|)
operator|.
name|postTags
argument_list|(
literal|"</xxx>"
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|search
argument_list|(
name|searchRequest
argument_list|(
literal|"test"
argument_list|)
operator|.
name|source
argument_list|(
name|source
argument_list|)
operator|.
name|searchType
argument_list|(
name|QUERY_THEN_FETCH
argument_list|)
argument_list|)
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertNoFailures
argument_list|(
name|searchResponse
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|totalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
comment|// LUCENE 3.1 UPGRADE: Caused adding the space at the end...
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|highlightFields
argument_list|()
operator|.
name|get
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|fragments
argument_list|()
index|[
literal|0
index|]
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"this is a<xxx>test</xxx>"
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> searching on _all, highlighting on field2"
argument_list|)
expr_stmt|;
name|source
operator|=
name|searchSource
argument_list|()
operator|.
name|query
argument_list|(
name|termQuery
argument_list|(
literal|"_all"
argument_list|,
literal|"quick"
argument_list|)
argument_list|)
operator|.
name|from
argument_list|(
literal|0
argument_list|)
operator|.
name|size
argument_list|(
literal|60
argument_list|)
operator|.
name|explain
argument_list|(
literal|true
argument_list|)
operator|.
name|highlight
argument_list|(
name|highlight
argument_list|()
operator|.
name|field
argument_list|(
literal|"field2"
argument_list|,
literal|100
argument_list|,
literal|0
argument_list|)
operator|.
name|order
argument_list|(
literal|"score"
argument_list|)
operator|.
name|preTags
argument_list|(
literal|"<xxx>"
argument_list|)
operator|.
name|postTags
argument_list|(
literal|"</xxx>"
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|search
argument_list|(
name|searchRequest
argument_list|(
literal|"test"
argument_list|)
operator|.
name|source
argument_list|(
name|source
argument_list|)
operator|.
name|searchType
argument_list|(
name|QUERY_THEN_FETCH
argument_list|)
argument_list|)
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertNoFailures
argument_list|(
name|searchResponse
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|totalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
comment|// LUCENE 3.1 UPGRADE: Caused adding the space at the end...
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|highlightFields
argument_list|()
operator|.
name|get
argument_list|(
literal|"field2"
argument_list|)
operator|.
name|fragments
argument_list|()
index|[
literal|0
index|]
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"The<xxx>quick</xxx> brown fox jumps over the lazy dog"
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> searching on _all, highlighting on field2"
argument_list|)
expr_stmt|;
name|source
operator|=
name|searchSource
argument_list|()
operator|.
name|query
argument_list|(
name|prefixQuery
argument_list|(
literal|"_all"
argument_list|,
literal|"qui"
argument_list|)
argument_list|)
operator|.
name|from
argument_list|(
literal|0
argument_list|)
operator|.
name|size
argument_list|(
literal|60
argument_list|)
operator|.
name|explain
argument_list|(
literal|true
argument_list|)
operator|.
name|highlight
argument_list|(
name|highlight
argument_list|()
operator|.
name|field
argument_list|(
literal|"field2"
argument_list|,
literal|100
argument_list|,
literal|0
argument_list|)
operator|.
name|order
argument_list|(
literal|"score"
argument_list|)
operator|.
name|preTags
argument_list|(
literal|"<xxx>"
argument_list|)
operator|.
name|postTags
argument_list|(
literal|"</xxx>"
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|search
argument_list|(
name|searchRequest
argument_list|(
literal|"test"
argument_list|)
operator|.
name|source
argument_list|(
name|source
argument_list|)
operator|.
name|searchType
argument_list|(
name|QUERY_THEN_FETCH
argument_list|)
argument_list|)
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertNoFailures
argument_list|(
name|searchResponse
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|totalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
comment|// LUCENE 3.1 UPGRADE: Caused adding the space at the end...
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|highlightFields
argument_list|()
operator|.
name|get
argument_list|(
literal|"field2"
argument_list|)
operator|.
name|fragments
argument_list|()
index|[
literal|0
index|]
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"The<xxx>quick</xxx> brown fox jumps over the lazy dog"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Slow
DECL|method|testFastVectorHighlighterManyDocs
specifier|public
name|void
name|testFastVectorHighlighterManyDocs
parameter_list|()
throws|throws
name|Exception
block|{
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
name|type1TermVectorMapping
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareHealth
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setWaitForGreenStatus
argument_list|()
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|int
name|COUNT
init|=
name|between
argument_list|(
literal|20
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> indexing docs"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|COUNT
condition|;
name|i
operator|++
control|)
block|{
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"test "
operator|+
name|i
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
if|if
condition|(
name|i
operator|%
literal|5
operator|==
literal|0
condition|)
block|{
comment|// flush so we get updated readers and segmented readers
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareFlush
argument_list|()
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
block|}
block|}
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareRefresh
argument_list|()
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> searching explicitly on field1 and highlighting on it"
argument_list|)
expr_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setSize
argument_list|(
name|COUNT
argument_list|)
operator|.
name|setQuery
argument_list|(
name|termQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
operator|.
name|addHighlightedField
argument_list|(
literal|"field1"
argument_list|,
literal|100
argument_list|,
literal|0
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|totalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|(
name|long
operator|)
name|COUNT
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
name|COUNT
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|SearchHit
name|hit
range|:
name|searchResponse
operator|.
name|getHits
argument_list|()
control|)
block|{
comment|// LUCENE 3.1 UPGRADE: Caused adding the space at the end...
name|assertThat
argument_list|(
name|hit
operator|.
name|highlightFields
argument_list|()
operator|.
name|get
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|fragments
argument_list|()
index|[
literal|0
index|]
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"<em>test</em> "
operator|+
name|hit
operator|.
name|id
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|logger
operator|.
name|info
argument_list|(
literal|"--> searching explicitly on field1 and highlighting on it, with DFS"
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setSearchType
argument_list|(
name|SearchType
operator|.
name|DFS_QUERY_THEN_FETCH
argument_list|)
operator|.
name|setSize
argument_list|(
name|COUNT
argument_list|)
operator|.
name|setQuery
argument_list|(
name|termQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
operator|.
name|addHighlightedField
argument_list|(
literal|"field1"
argument_list|,
literal|100
argument_list|,
literal|0
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|totalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|(
name|long
operator|)
name|COUNT
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
name|COUNT
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|SearchHit
name|hit
range|:
name|searchResponse
operator|.
name|getHits
argument_list|()
control|)
block|{
name|assertThat
argument_list|(
name|hit
operator|.
name|highlightFields
argument_list|()
operator|.
name|get
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|fragments
argument_list|()
index|[
literal|0
index|]
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"<em>test</em> "
operator|+
name|hit
operator|.
name|id
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|logger
operator|.
name|info
argument_list|(
literal|"--> searching explicitly _all and highlighting on _all"
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setSize
argument_list|(
name|COUNT
argument_list|)
operator|.
name|setQuery
argument_list|(
name|termQuery
argument_list|(
literal|"_all"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
operator|.
name|addHighlightedField
argument_list|(
literal|"_all"
argument_list|,
literal|100
argument_list|,
literal|0
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|totalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|(
name|long
operator|)
name|COUNT
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
name|COUNT
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|SearchHit
name|hit
range|:
name|searchResponse
operator|.
name|getHits
argument_list|()
control|)
block|{
name|assertThat
argument_list|(
name|hit
operator|.
name|highlightFields
argument_list|()
operator|.
name|get
argument_list|(
literal|"_all"
argument_list|)
operator|.
name|fragments
argument_list|()
index|[
literal|0
index|]
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"<em>test</em> "
operator|+
name|hit
operator|.
name|id
argument_list|()
operator|+
literal|" "
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|type1TermVectorMapping
specifier|public
name|XContentBuilder
name|type1TermVectorMapping
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"_all"
argument_list|)
operator|.
name|field
argument_list|(
literal|"store"
argument_list|,
literal|"yes"
argument_list|)
operator|.
name|field
argument_list|(
literal|"termVector"
argument_list|,
literal|"with_positions_offsets"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"termVector"
argument_list|,
literal|"with_positions_offsets"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"field2"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"termVector"
argument_list|,
literal|"with_positions_offsets"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
return|;
block|}
annotation|@
name|Test
DECL|method|testSameContent
specifier|public
name|void
name|testSameContent
parameter_list|()
throws|throws
name|Exception
block|{
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|ImmutableSettings
operator|.
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.number_of_shards"
argument_list|,
literal|2
argument_list|)
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"title"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"store"
argument_list|,
literal|"yes"
argument_list|)
operator|.
name|field
argument_list|(
literal|"term_vector"
argument_list|,
literal|"with_positions_offsets"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareHealth
argument_list|()
operator|.
name|setWaitForEvents
argument_list|(
name|Priority
operator|.
name|LANGUID
argument_list|)
operator|.
name|setWaitForYellowStatus
argument_list|()
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"title"
argument_list|,
literal|"This is a test on the highlighting bug present in elasticsearch"
argument_list|)
operator|.
name|setRefresh
argument_list|(
literal|true
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
block|}
name|SearchResponse
name|search
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|fieldQuery
argument_list|(
literal|"title"
argument_list|,
literal|"bug"
argument_list|)
argument_list|)
operator|.
name|addHighlightedField
argument_list|(
literal|"title"
argument_list|,
operator|-
literal|1
argument_list|,
literal|0
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|search
operator|.
name|getHits
argument_list|()
operator|.
name|totalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|5l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|search
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|search
operator|.
name|getFailedShards
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|SearchHit
name|hit
range|:
name|search
operator|.
name|getHits
argument_list|()
control|)
block|{
comment|// LUCENE 3.1 UPGRADE: Caused adding the space at the end...
name|assertThat
argument_list|(
name|hit
operator|.
name|highlightFields
argument_list|()
operator|.
name|get
argument_list|(
literal|"title"
argument_list|)
operator|.
name|fragments
argument_list|()
index|[
literal|0
index|]
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"This is a test on the highlighting<em>bug</em> present in elasticsearch"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testFastVectorHighlighterOffsetParameter
specifier|public
name|void
name|testFastVectorHighlighterOffsetParameter
parameter_list|()
throws|throws
name|Exception
block|{
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|ImmutableSettings
operator|.
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.number_of_shards"
argument_list|,
literal|2
argument_list|)
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"title"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"store"
argument_list|,
literal|"yes"
argument_list|)
operator|.
name|field
argument_list|(
literal|"term_vector"
argument_list|,
literal|"with_positions_offsets"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareHealth
argument_list|()
operator|.
name|setWaitForEvents
argument_list|(
name|Priority
operator|.
name|LANGUID
argument_list|)
operator|.
name|setWaitForYellowStatus
argument_list|()
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"title"
argument_list|,
literal|"This is a test on the highlighting bug present in elasticsearch"
argument_list|)
operator|.
name|setRefresh
argument_list|(
literal|true
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
block|}
name|SearchResponse
name|search
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|fieldQuery
argument_list|(
literal|"title"
argument_list|,
literal|"bug"
argument_list|)
argument_list|)
operator|.
name|addHighlightedField
argument_list|(
literal|"title"
argument_list|,
literal|30
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertNoFailures
argument_list|(
name|search
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|search
operator|.
name|getHits
argument_list|()
operator|.
name|totalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|5l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|search
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|SearchHit
name|hit
range|:
name|search
operator|.
name|getHits
argument_list|()
control|)
block|{
comment|// LUCENE 3.1 UPGRADE: Caused adding the space at the end...
name|assertThat
argument_list|(
name|hit
operator|.
name|highlightFields
argument_list|()
operator|.
name|get
argument_list|(
literal|"title"
argument_list|)
operator|.
name|fragments
argument_list|()
index|[
literal|0
index|]
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"highlighting<em>bug</em> present in elasticsearch"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testEscapeHtml
specifier|public
name|void
name|testEscapeHtml
parameter_list|()
throws|throws
name|Exception
block|{
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|ImmutableSettings
operator|.
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.number_of_shards"
argument_list|,
literal|2
argument_list|)
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"title"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"store"
argument_list|,
literal|"yes"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareHealth
argument_list|()
operator|.
name|setWaitForEvents
argument_list|(
name|Priority
operator|.
name|LANGUID
argument_list|)
operator|.
name|setWaitForYellowStatus
argument_list|()
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"title"
argument_list|,
literal|"This is a html escaping highlighting test for *&? elasticsearch"
argument_list|)
operator|.
name|setRefresh
argument_list|(
literal|true
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
block|}
name|SearchResponse
name|search
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|fieldQuery
argument_list|(
literal|"title"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
operator|.
name|setHighlighterEncoder
argument_list|(
literal|"html"
argument_list|)
operator|.
name|addHighlightedField
argument_list|(
literal|"title"
argument_list|,
literal|50
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertNoFailures
argument_list|(
name|search
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|search
operator|.
name|getHits
argument_list|()
operator|.
name|totalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|5l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|search
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|SearchHit
name|hit
range|:
name|search
operator|.
name|getHits
argument_list|()
control|)
block|{
comment|// LUCENE 3.1 UPGRADE: Caused adding the space at the end...
name|assertThat
argument_list|(
name|hit
operator|.
name|highlightFields
argument_list|()
operator|.
name|get
argument_list|(
literal|"title"
argument_list|)
operator|.
name|fragments
argument_list|()
index|[
literal|0
index|]
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"This is a html escaping highlighting<em>test</em> for *&amp;? elasticsearch"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testEscapeHtml_vector
specifier|public
name|void
name|testEscapeHtml_vector
parameter_list|()
throws|throws
name|Exception
block|{
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|ImmutableSettings
operator|.
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.number_of_shards"
argument_list|,
literal|2
argument_list|)
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"title"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"store"
argument_list|,
literal|"yes"
argument_list|)
operator|.
name|field
argument_list|(
literal|"term_vector"
argument_list|,
literal|"with_positions_offsets"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareHealth
argument_list|()
operator|.
name|setWaitForEvents
argument_list|(
name|Priority
operator|.
name|LANGUID
argument_list|)
operator|.
name|setWaitForYellowStatus
argument_list|()
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"title"
argument_list|,
literal|"This is a html escaping highlighting test for *&? elasticsearch"
argument_list|)
operator|.
name|setRefresh
argument_list|(
literal|true
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
block|}
name|SearchResponse
name|search
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|fieldQuery
argument_list|(
literal|"title"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
operator|.
name|setHighlighterEncoder
argument_list|(
literal|"html"
argument_list|)
operator|.
name|addHighlightedField
argument_list|(
literal|"title"
argument_list|,
literal|30
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertNoFailures
argument_list|(
name|search
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|search
operator|.
name|getHits
argument_list|()
operator|.
name|totalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|5l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|search
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|SearchHit
name|hit
range|:
name|search
operator|.
name|getHits
argument_list|()
control|)
block|{
name|assertThat
argument_list|(
name|hit
operator|.
name|highlightFields
argument_list|()
operator|.
name|get
argument_list|(
literal|"title"
argument_list|)
operator|.
name|fragments
argument_list|()
index|[
literal|0
index|]
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"highlighting<em>test</em> for *&amp;? elasticsearch"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testMultiMapperVectorWithStore
specifier|public
name|void
name|testMultiMapperVectorWithStore
parameter_list|()
throws|throws
name|Exception
block|{
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|ImmutableSettings
operator|.
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.number_of_shards"
argument_list|,
literal|2
argument_list|)
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"title"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"multi_field"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"fields"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"title"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"store"
argument_list|,
literal|"yes"
argument_list|)
operator|.
name|field
argument_list|(
literal|"term_vector"
argument_list|,
literal|"with_positions_offsets"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"key"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"store"
argument_list|,
literal|"yes"
argument_list|)
operator|.
name|field
argument_list|(
literal|"term_vector"
argument_list|,
literal|"with_positions_offsets"
argument_list|)
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
literal|"whitespace"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"title"
argument_list|,
literal|"this is a test"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
comment|// simple search on body with standard analyzer with a simple field query
name|SearchResponse
name|search
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|fieldQuery
argument_list|(
literal|"title"
argument_list|,
literal|"this is a test"
argument_list|)
argument_list|)
operator|.
name|setHighlighterEncoder
argument_list|(
literal|"html"
argument_list|)
operator|.
name|addHighlightedField
argument_list|(
literal|"title"
argument_list|,
literal|50
argument_list|,
literal|1
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|SearchHit
name|hit
init|=
name|search
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|hit
operator|.
name|highlightFields
argument_list|()
operator|.
name|get
argument_list|(
literal|"title"
argument_list|)
operator|.
name|fragments
argument_list|()
index|[
literal|0
index|]
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"this is a<em>test</em>"
argument_list|)
argument_list|)
expr_stmt|;
comment|// search on title.key and highlight on title
name|search
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|fieldQuery
argument_list|(
literal|"title.key"
argument_list|,
literal|"this is a test"
argument_list|)
argument_list|)
operator|.
name|setHighlighterEncoder
argument_list|(
literal|"html"
argument_list|)
operator|.
name|addHighlightedField
argument_list|(
literal|"title.key"
argument_list|,
literal|50
argument_list|,
literal|1
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertNoFailures
argument_list|(
name|search
argument_list|)
expr_stmt|;
name|hit
operator|=
name|search
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|hit
operator|.
name|highlightFields
argument_list|()
operator|.
name|get
argument_list|(
literal|"title.key"
argument_list|)
operator|.
name|fragments
argument_list|()
index|[
literal|0
index|]
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"<em>this</em><em>is</em><em>a</em><em>test</em>"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMultiMapperVectorFromSource
specifier|public
name|void
name|testMultiMapperVectorFromSource
parameter_list|()
throws|throws
name|Exception
block|{
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|ImmutableSettings
operator|.
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.number_of_shards"
argument_list|,
literal|2
argument_list|)
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"title"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"multi_field"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"fields"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"title"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"store"
argument_list|,
literal|"no"
argument_list|)
operator|.
name|field
argument_list|(
literal|"term_vector"
argument_list|,
literal|"with_positions_offsets"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"key"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"store"
argument_list|,
literal|"no"
argument_list|)
operator|.
name|field
argument_list|(
literal|"term_vector"
argument_list|,
literal|"with_positions_offsets"
argument_list|)
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
literal|"whitespace"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"title"
argument_list|,
literal|"this is a test"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
comment|// simple search on body with standard analyzer with a simple field query
name|SearchResponse
name|search
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|fieldQuery
argument_list|(
literal|"title"
argument_list|,
literal|"this is a test"
argument_list|)
argument_list|)
operator|.
name|setHighlighterEncoder
argument_list|(
literal|"html"
argument_list|)
operator|.
name|addHighlightedField
argument_list|(
literal|"title"
argument_list|,
literal|50
argument_list|,
literal|1
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertNoFailures
argument_list|(
name|search
argument_list|)
expr_stmt|;
name|SearchHit
name|hit
init|=
name|search
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|hit
operator|.
name|highlightFields
argument_list|()
operator|.
name|get
argument_list|(
literal|"title"
argument_list|)
operator|.
name|fragments
argument_list|()
index|[
literal|0
index|]
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"this is a<em>test</em>"
argument_list|)
argument_list|)
expr_stmt|;
comment|// search on title.key and highlight on title.key
name|search
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|fieldQuery
argument_list|(
literal|"title.key"
argument_list|,
literal|"this is a test"
argument_list|)
argument_list|)
operator|.
name|setHighlighterEncoder
argument_list|(
literal|"html"
argument_list|)
operator|.
name|addHighlightedField
argument_list|(
literal|"title.key"
argument_list|,
literal|50
argument_list|,
literal|1
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertNoFailures
argument_list|(
name|search
argument_list|)
expr_stmt|;
name|hit
operator|=
name|search
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|hit
operator|.
name|highlightFields
argument_list|()
operator|.
name|get
argument_list|(
literal|"title.key"
argument_list|)
operator|.
name|fragments
argument_list|()
index|[
literal|0
index|]
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"<em>this</em><em>is</em><em>a</em><em>test</em>"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMultiMapperNoVectorWithStore
specifier|public
name|void
name|testMultiMapperNoVectorWithStore
parameter_list|()
throws|throws
name|Exception
block|{
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|ImmutableSettings
operator|.
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.number_of_shards"
argument_list|,
literal|2
argument_list|)
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"title"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"multi_field"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"fields"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"title"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"store"
argument_list|,
literal|"yes"
argument_list|)
operator|.
name|field
argument_list|(
literal|"term_vector"
argument_list|,
literal|"no"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"key"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"store"
argument_list|,
literal|"yes"
argument_list|)
operator|.
name|field
argument_list|(
literal|"term_vector"
argument_list|,
literal|"no"
argument_list|)
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
literal|"whitespace"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"title"
argument_list|,
literal|"this is a test"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
comment|// simple search on body with standard analyzer with a simple field query
name|SearchResponse
name|search
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|fieldQuery
argument_list|(
literal|"title"
argument_list|,
literal|"this is a test"
argument_list|)
argument_list|)
operator|.
name|setHighlighterEncoder
argument_list|(
literal|"html"
argument_list|)
operator|.
name|addHighlightedField
argument_list|(
literal|"title"
argument_list|,
literal|50
argument_list|,
literal|1
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertNoFailures
argument_list|(
name|search
argument_list|)
expr_stmt|;
name|SearchHit
name|hit
init|=
name|search
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|hit
operator|.
name|highlightFields
argument_list|()
operator|.
name|get
argument_list|(
literal|"title"
argument_list|)
operator|.
name|fragments
argument_list|()
index|[
literal|0
index|]
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"this is a<em>test</em>"
argument_list|)
argument_list|)
expr_stmt|;
comment|// search on title.key and highlight on title
name|search
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|fieldQuery
argument_list|(
literal|"title.key"
argument_list|,
literal|"this is a test"
argument_list|)
argument_list|)
operator|.
name|setHighlighterEncoder
argument_list|(
literal|"html"
argument_list|)
operator|.
name|addHighlightedField
argument_list|(
literal|"title.key"
argument_list|,
literal|50
argument_list|,
literal|1
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertNoFailures
argument_list|(
name|search
argument_list|)
expr_stmt|;
name|hit
operator|=
name|search
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|hit
operator|.
name|highlightFields
argument_list|()
operator|.
name|get
argument_list|(
literal|"title.key"
argument_list|)
operator|.
name|fragments
argument_list|()
index|[
literal|0
index|]
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"<em>this</em><em>is</em><em>a</em><em>test</em>"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMultiMapperNoVectorFromSource
specifier|public
name|void
name|testMultiMapperNoVectorFromSource
parameter_list|()
throws|throws
name|Exception
block|{
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|ImmutableSettings
operator|.
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.number_of_shards"
argument_list|,
literal|2
argument_list|)
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"title"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"multi_field"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"fields"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"title"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"store"
argument_list|,
literal|"no"
argument_list|)
operator|.
name|field
argument_list|(
literal|"term_vector"
argument_list|,
literal|"no"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"key"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"store"
argument_list|,
literal|"no"
argument_list|)
operator|.
name|field
argument_list|(
literal|"term_vector"
argument_list|,
literal|"no"
argument_list|)
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
literal|"whitespace"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"title"
argument_list|,
literal|"this is a test"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
comment|// simple search on body with standard analyzer with a simple field query
name|SearchResponse
name|search
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|fieldQuery
argument_list|(
literal|"title"
argument_list|,
literal|"this is a test"
argument_list|)
argument_list|)
operator|.
name|setHighlighterEncoder
argument_list|(
literal|"html"
argument_list|)
operator|.
name|addHighlightedField
argument_list|(
literal|"title"
argument_list|,
literal|50
argument_list|,
literal|1
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertNoFailures
argument_list|(
name|search
argument_list|)
expr_stmt|;
name|SearchHit
name|hit
init|=
name|search
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|hit
operator|.
name|highlightFields
argument_list|()
operator|.
name|get
argument_list|(
literal|"title"
argument_list|)
operator|.
name|fragments
argument_list|()
index|[
literal|0
index|]
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"this is a<em>test</em>"
argument_list|)
argument_list|)
expr_stmt|;
comment|// search on title.key and highlight on title.key
name|search
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|fieldQuery
argument_list|(
literal|"title.key"
argument_list|,
literal|"this is a test"
argument_list|)
argument_list|)
operator|.
name|setHighlighterEncoder
argument_list|(
literal|"html"
argument_list|)
operator|.
name|addHighlightedField
argument_list|(
literal|"title.key"
argument_list|,
literal|50
argument_list|,
literal|1
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertNoFailures
argument_list|(
name|search
argument_list|)
expr_stmt|;
name|hit
operator|=
name|search
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|hit
operator|.
name|highlightFields
argument_list|()
operator|.
name|get
argument_list|(
literal|"title.key"
argument_list|)
operator|.
name|fragments
argument_list|()
index|[
literal|0
index|]
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"<em>this</em><em>is</em><em>a</em><em>test</em>"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFastVectorHighlighterShouldFailIfNoTermVectors
specifier|public
name|void
name|testFastVectorHighlighterShouldFailIfNoTermVectors
parameter_list|()
throws|throws
name|Exception
block|{
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|ImmutableSettings
operator|.
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.number_of_shards"
argument_list|,
literal|2
argument_list|)
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"title"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"store"
argument_list|,
literal|"yes"
argument_list|)
operator|.
name|field
argument_list|(
literal|"term_vector"
argument_list|,
literal|"no"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"title"
argument_list|,
literal|"This is a test for the enabling fast vector highlighter"
argument_list|)
operator|.
name|setRefresh
argument_list|(
literal|true
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
block|}
name|refresh
argument_list|()
expr_stmt|;
name|SearchResponse
name|search
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchPhraseQuery
argument_list|(
literal|"title"
argument_list|,
literal|"this is a test"
argument_list|)
argument_list|)
operator|.
name|addHighlightedField
argument_list|(
literal|"title"
argument_list|,
literal|50
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertNoFailures
argument_list|(
name|search
argument_list|)
expr_stmt|;
name|search
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchPhraseQuery
argument_list|(
literal|"title"
argument_list|,
literal|"this is a test"
argument_list|)
argument_list|)
operator|.
name|addHighlightedField
argument_list|(
literal|"title"
argument_list|,
literal|50
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|)
operator|.
name|setHighlighterType
argument_list|(
literal|"fast-vector-highlighter"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|search
operator|.
name|getFailedShards
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDisableFastVectorHighlighter
specifier|public
name|void
name|testDisableFastVectorHighlighter
parameter_list|()
throws|throws
name|Exception
block|{
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|ImmutableSettings
operator|.
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.number_of_shards"
argument_list|,
literal|2
argument_list|)
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"title"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"store"
argument_list|,
literal|"yes"
argument_list|)
operator|.
name|field
argument_list|(
literal|"term_vector"
argument_list|,
literal|"with_positions_offsets"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"title"
argument_list|,
literal|"This is a test for the workaround for the fast vector highlighting SOLR-3724"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
block|}
name|refresh
argument_list|()
expr_stmt|;
name|SearchResponse
name|search
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchPhraseQuery
argument_list|(
literal|"title"
argument_list|,
literal|"test for the workaround"
argument_list|)
argument_list|)
operator|.
name|addHighlightedField
argument_list|(
literal|"title"
argument_list|,
literal|50
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|Arrays
operator|.
name|toString
argument_list|(
name|search
operator|.
name|getShardFailures
argument_list|()
argument_list|)
argument_list|,
name|search
operator|.
name|getFailedShards
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|search
operator|.
name|getHits
argument_list|()
operator|.
name|totalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|5l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|search
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|SearchHit
name|hit
range|:
name|search
operator|.
name|getHits
argument_list|()
control|)
block|{
comment|// Because of SOLR-3724 nothing is highlighted when FVH is used
name|assertThat
argument_list|(
name|hit
operator|.
name|highlightFields
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Using plain highlighter instead of FVH
name|search
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchPhraseQuery
argument_list|(
literal|"title"
argument_list|,
literal|"test for the workaround"
argument_list|)
argument_list|)
operator|.
name|addHighlightedField
argument_list|(
literal|"title"
argument_list|,
literal|50
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|)
operator|.
name|setHighlighterType
argument_list|(
literal|"highlighter"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|Arrays
operator|.
name|toString
argument_list|(
name|search
operator|.
name|getShardFailures
argument_list|()
argument_list|)
argument_list|,
name|search
operator|.
name|getFailedShards
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|search
operator|.
name|getHits
argument_list|()
operator|.
name|totalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|5l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|search
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|SearchHit
name|hit
range|:
name|search
operator|.
name|getHits
argument_list|()
control|)
block|{
comment|// With plain highlighter terms are highlighted correctly
name|assertThat
argument_list|(
name|hit
operator|.
name|highlightFields
argument_list|()
operator|.
name|get
argument_list|(
literal|"title"
argument_list|)
operator|.
name|fragments
argument_list|()
index|[
literal|0
index|]
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"This is a<em>test</em> for the<em>workaround</em> for the fast vector highlighting SOLR-3724"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Using plain highlighter instead of FVH on the field level
name|search
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchPhraseQuery
argument_list|(
literal|"title"
argument_list|,
literal|"test for the workaround"
argument_list|)
argument_list|)
operator|.
name|addHighlightedField
argument_list|(
operator|new
name|HighlightBuilder
operator|.
name|Field
argument_list|(
literal|"title"
argument_list|)
operator|.
name|highlighterType
argument_list|(
literal|"highlighter"
argument_list|)
argument_list|)
operator|.
name|setHighlighterType
argument_list|(
literal|"highlighter"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|Arrays
operator|.
name|toString
argument_list|(
name|search
operator|.
name|getShardFailures
argument_list|()
argument_list|)
argument_list|,
name|search
operator|.
name|getFailedShards
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|search
operator|.
name|getHits
argument_list|()
operator|.
name|totalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|5l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|search
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|SearchHit
name|hit
range|:
name|search
operator|.
name|getHits
argument_list|()
control|)
block|{
comment|// With plain highlighter terms are highlighted correctly
name|assertThat
argument_list|(
name|hit
operator|.
name|highlightFields
argument_list|()
operator|.
name|get
argument_list|(
literal|"title"
argument_list|)
operator|.
name|fragments
argument_list|()
index|[
literal|0
index|]
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"This is a<em>test</em> for the<em>workaround</em> for the fast vector highlighting SOLR-3724"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testFSHHighlightAllMvFragments
specifier|public
name|void
name|testFSHHighlightAllMvFragments
parameter_list|()
throws|throws
name|Exception
block|{
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|ImmutableSettings
operator|.
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.number_of_shards"
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.number_of_replicas"
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"tags"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"term_vector"
argument_list|,
literal|"with_positions_offsets"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"tags"
argument_list|,
literal|"this is a really long tag i would like to highlight"
argument_list|,
literal|"here is another one that is very long and has the tag token near the end"
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|matchQuery
argument_list|(
literal|"tags"
argument_list|,
literal|"tag"
argument_list|)
argument_list|)
operator|.
name|addHighlightedField
argument_list|(
literal|"tags"
argument_list|,
operator|-
literal|1
argument_list|,
literal|0
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
index|[
literal|0
index|]
operator|.
name|highlightFields
argument_list|()
operator|.
name|get
argument_list|(
literal|"tags"
argument_list|)
operator|.
name|fragments
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
index|[
literal|0
index|]
operator|.
name|highlightFields
argument_list|()
operator|.
name|get
argument_list|(
literal|"tags"
argument_list|)
operator|.
name|fragments
argument_list|()
index|[
literal|0
index|]
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"this is a really long<em>tag</em> i would like to highlight"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
index|[
literal|0
index|]
operator|.
name|highlightFields
argument_list|()
operator|.
name|get
argument_list|(
literal|"tags"
argument_list|)
operator|.
name|fragments
argument_list|()
index|[
literal|1
index|]
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"here is another one that is very long and has the<em>tag</em> token near the end"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBoostingQuery
specifier|public
name|void
name|testBoostingQuery
parameter_list|()
block|{
name|createIndex
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"this is a test"
argument_list|,
literal|"field2"
argument_list|,
literal|"The quick brown fox jumps over the lazy dog"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> highlighting and searching on field1"
argument_list|)
expr_stmt|;
name|SearchSourceBuilder
name|source
init|=
name|searchSource
argument_list|()
operator|.
name|query
argument_list|(
name|boostingQuery
argument_list|()
operator|.
name|positive
argument_list|(
name|termQuery
argument_list|(
literal|"field2"
argument_list|,
literal|"brown"
argument_list|)
argument_list|)
operator|.
name|negative
argument_list|(
name|termQuery
argument_list|(
literal|"field2"
argument_list|,
literal|"foobar"
argument_list|)
argument_list|)
operator|.
name|negativeBoost
argument_list|(
literal|0.5f
argument_list|)
argument_list|)
operator|.
name|from
argument_list|(
literal|0
argument_list|)
operator|.
name|size
argument_list|(
literal|60
argument_list|)
operator|.
name|explain
argument_list|(
literal|true
argument_list|)
operator|.
name|highlight
argument_list|(
name|highlight
argument_list|()
operator|.
name|field
argument_list|(
literal|"field2"
argument_list|)
operator|.
name|order
argument_list|(
literal|"score"
argument_list|)
operator|.
name|preTags
argument_list|(
literal|"<x>"
argument_list|)
operator|.
name|postTags
argument_list|(
literal|"</x>"
argument_list|)
argument_list|)
decl_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|search
argument_list|(
name|searchRequest
argument_list|(
literal|"test"
argument_list|)
operator|.
name|source
argument_list|(
name|source
argument_list|)
operator|.
name|searchType
argument_list|(
name|QUERY_THEN_FETCH
argument_list|)
argument_list|)
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertNoFailures
argument_list|(
name|searchResponse
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|totalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|highlightFields
argument_list|()
operator|.
name|get
argument_list|(
literal|"field2"
argument_list|)
operator|.
name|fragments
argument_list|()
index|[
literal|0
index|]
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"The quick<x>brown</x> fox jumps over the lazy dog"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBoostingQueryTermVector
specifier|public
name|void
name|testBoostingQueryTermVector
parameter_list|()
throws|throws
name|ElasticSearchException
throws|,
name|IOException
block|{
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
name|type1TermVectorMapping
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"this is a test"
argument_list|,
literal|"field2"
argument_list|,
literal|"The quick brown fox jumps over the lazy dog"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> highlighting and searching on field1"
argument_list|)
expr_stmt|;
name|SearchSourceBuilder
name|source
init|=
name|searchSource
argument_list|()
operator|.
name|query
argument_list|(
name|boostingQuery
argument_list|()
operator|.
name|positive
argument_list|(
name|termQuery
argument_list|(
literal|"field2"
argument_list|,
literal|"brown"
argument_list|)
argument_list|)
operator|.
name|negative
argument_list|(
name|termQuery
argument_list|(
literal|"field2"
argument_list|,
literal|"foobar"
argument_list|)
argument_list|)
operator|.
name|negativeBoost
argument_list|(
literal|0.5f
argument_list|)
argument_list|)
operator|.
name|from
argument_list|(
literal|0
argument_list|)
operator|.
name|size
argument_list|(
literal|60
argument_list|)
operator|.
name|explain
argument_list|(
literal|true
argument_list|)
operator|.
name|highlight
argument_list|(
name|highlight
argument_list|()
operator|.
name|field
argument_list|(
literal|"field2"
argument_list|)
operator|.
name|order
argument_list|(
literal|"score"
argument_list|)
operator|.
name|preTags
argument_list|(
literal|"<x>"
argument_list|)
operator|.
name|postTags
argument_list|(
literal|"</x>"
argument_list|)
argument_list|)
decl_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|search
argument_list|(
name|searchRequest
argument_list|(
literal|"test"
argument_list|)
operator|.
name|source
argument_list|(
name|source
argument_list|)
operator|.
name|searchType
argument_list|(
name|QUERY_THEN_FETCH
argument_list|)
argument_list|)
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertNoFailures
argument_list|(
name|searchResponse
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|totalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|highlightFields
argument_list|()
operator|.
name|get
argument_list|(
literal|"field2"
argument_list|)
operator|.
name|fragments
argument_list|()
index|[
literal|0
index|]
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"The quick<x>brown</x> fox jumps over the lazy dog"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCommonTermsQuery
specifier|public
name|void
name|testCommonTermsQuery
parameter_list|()
block|{
name|createIndex
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"this is a test"
argument_list|,
literal|"field2"
argument_list|,
literal|"The quick brown fox jumps over the lazy dog"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> highlighting and searching on field1"
argument_list|)
expr_stmt|;
name|SearchSourceBuilder
name|source
init|=
name|searchSource
argument_list|()
operator|.
name|query
argument_list|(
name|commonTerms
argument_list|(
literal|"field2"
argument_list|,
literal|"quick brown"
argument_list|)
operator|.
name|cutoffFrequency
argument_list|(
literal|100
argument_list|)
argument_list|)
operator|.
name|from
argument_list|(
literal|0
argument_list|)
operator|.
name|size
argument_list|(
literal|60
argument_list|)
operator|.
name|explain
argument_list|(
literal|true
argument_list|)
operator|.
name|highlight
argument_list|(
name|highlight
argument_list|()
operator|.
name|field
argument_list|(
literal|"field2"
argument_list|)
operator|.
name|order
argument_list|(
literal|"score"
argument_list|)
operator|.
name|preTags
argument_list|(
literal|"<x>"
argument_list|)
operator|.
name|postTags
argument_list|(
literal|"</x>"
argument_list|)
argument_list|)
decl_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|search
argument_list|(
name|searchRequest
argument_list|(
literal|"test"
argument_list|)
operator|.
name|source
argument_list|(
name|source
argument_list|)
operator|.
name|searchType
argument_list|(
name|QUERY_THEN_FETCH
argument_list|)
argument_list|)
operator|.
name|actionGet
argument_list|()
decl_stmt|;
comment|//        assertNoFailures(searchResponse);
comment|//        assertThat(searchResponse.getHits().totalHits(), equalTo(1l));
comment|//
comment|//        assertThat(searchResponse.getHits().getAt(0).highlightFields().get("field2").fragments()[0].string(), equalTo("The<x>quick</x><x>brown</x> fox jumps over the lazy dog"));
block|}
annotation|@
name|Test
DECL|method|testCommonTermsTermVector
specifier|public
name|void
name|testCommonTermsTermVector
parameter_list|()
throws|throws
name|ElasticSearchException
throws|,
name|IOException
block|{
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
name|type1TermVectorMapping
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"this is a test"
argument_list|,
literal|"field2"
argument_list|,
literal|"The quick brown fox jumps over the lazy dog"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> highlighting and searching on field1"
argument_list|)
expr_stmt|;
name|SearchSourceBuilder
name|source
init|=
name|searchSource
argument_list|()
operator|.
name|query
argument_list|(
name|commonTerms
argument_list|(
literal|"field2"
argument_list|,
literal|"quick brown"
argument_list|)
operator|.
name|cutoffFrequency
argument_list|(
literal|100
argument_list|)
argument_list|)
operator|.
name|from
argument_list|(
literal|0
argument_list|)
operator|.
name|size
argument_list|(
literal|60
argument_list|)
operator|.
name|explain
argument_list|(
literal|true
argument_list|)
operator|.
name|highlight
argument_list|(
name|highlight
argument_list|()
operator|.
name|field
argument_list|(
literal|"field2"
argument_list|)
operator|.
name|order
argument_list|(
literal|"score"
argument_list|)
operator|.
name|preTags
argument_list|(
literal|"<x>"
argument_list|)
operator|.
name|postTags
argument_list|(
literal|"</x>"
argument_list|)
argument_list|)
decl_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|search
argument_list|(
name|searchRequest
argument_list|(
literal|"test"
argument_list|)
operator|.
name|source
argument_list|(
name|source
argument_list|)
operator|.
name|searchType
argument_list|(
name|QUERY_THEN_FETCH
argument_list|)
argument_list|)
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertNoFailures
argument_list|(
name|searchResponse
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|totalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|highlightFields
argument_list|()
operator|.
name|get
argument_list|(
literal|"field2"
argument_list|)
operator|.
name|fragments
argument_list|()
index|[
literal|0
index|]
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"The<x>quick</x><x>brown</x> fox jumps over the lazy dog"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPhrasePrefix
specifier|public
name|void
name|testPhrasePrefix
parameter_list|()
throws|throws
name|ElasticSearchException
throws|,
name|IOException
block|{
name|Builder
name|builder
init|=
name|ImmutableSettings
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|put
argument_list|(
literal|"index.analysis.analyzer.synonym.tokenizer"
argument_list|,
literal|"whitespace"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|putArray
argument_list|(
literal|"index.analysis.analyzer.synonym.filter"
argument_list|,
literal|"synonym"
argument_list|,
literal|"lowercase"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.synonym.type"
argument_list|,
literal|"synonym"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|putArray
argument_list|(
literal|"index.analysis.filter.synonym.synonyms"
argument_list|,
literal|"quick => fast"
argument_list|)
expr_stmt|;
name|XContentBuilder
name|type2Mapping
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type2"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"_all"
argument_list|)
operator|.
name|field
argument_list|(
literal|"store"
argument_list|,
literal|"yes"
argument_list|)
operator|.
name|field
argument_list|(
literal|"termVector"
argument_list|,
literal|"with_positions_offsets"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"field4"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"termVector"
argument_list|,
literal|"with_positions_offsets"
argument_list|)
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
literal|"synonym"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"field3"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
literal|"synonym"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
name|type1TermVectorMapping
argument_list|()
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type2"
argument_list|,
name|type2Mapping
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"0"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field0"
argument_list|,
literal|"The quick brown fox jumps over the lazy dog"
argument_list|,
literal|"field1"
argument_list|,
literal|"The quick brown fox jumps over the lazy dog"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"The quick browse button is a fancy thing, right bro?"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> highlighting and searching on field0"
argument_list|)
expr_stmt|;
name|SearchSourceBuilder
name|source
init|=
name|searchSource
argument_list|()
operator|.
name|query
argument_list|(
name|matchPhrasePrefixQuery
argument_list|(
literal|"field0"
argument_list|,
literal|"quick bro"
argument_list|)
argument_list|)
operator|.
name|from
argument_list|(
literal|0
argument_list|)
operator|.
name|size
argument_list|(
literal|60
argument_list|)
operator|.
name|explain
argument_list|(
literal|true
argument_list|)
operator|.
name|highlight
argument_list|(
name|highlight
argument_list|()
operator|.
name|field
argument_list|(
literal|"field0"
argument_list|)
operator|.
name|order
argument_list|(
literal|"score"
argument_list|)
operator|.
name|preTags
argument_list|(
literal|"<x>"
argument_list|)
operator|.
name|postTags
argument_list|(
literal|"</x>"
argument_list|)
argument_list|)
decl_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|search
argument_list|(
name|searchRequest
argument_list|(
literal|"test"
argument_list|)
operator|.
name|source
argument_list|(
name|source
argument_list|)
operator|.
name|searchType
argument_list|(
name|QUERY_THEN_FETCH
argument_list|)
argument_list|)
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertNoFailures
argument_list|(
name|searchResponse
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|totalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|highlightFields
argument_list|()
operator|.
name|get
argument_list|(
literal|"field0"
argument_list|)
operator|.
name|fragments
argument_list|()
index|[
literal|0
index|]
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"The<x>quick</x><x>brown</x> fox jumps over the lazy dog"
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> highlighting and searching on field1"
argument_list|)
expr_stmt|;
name|source
operator|=
name|searchSource
argument_list|()
operator|.
name|query
argument_list|(
name|matchPhrasePrefixQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"quick bro"
argument_list|)
argument_list|)
operator|.
name|from
argument_list|(
literal|0
argument_list|)
operator|.
name|size
argument_list|(
literal|60
argument_list|)
operator|.
name|explain
argument_list|(
literal|true
argument_list|)
operator|.
name|highlight
argument_list|(
name|highlight
argument_list|()
operator|.
name|field
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|order
argument_list|(
literal|"score"
argument_list|)
operator|.
name|preTags
argument_list|(
literal|"<x>"
argument_list|)
operator|.
name|postTags
argument_list|(
literal|"</x>"
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|search
argument_list|(
name|searchRequest
argument_list|(
literal|"test"
argument_list|)
operator|.
name|source
argument_list|(
name|source
argument_list|)
operator|.
name|searchType
argument_list|(
name|QUERY_THEN_FETCH
argument_list|)
argument_list|)
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertNoFailures
argument_list|(
name|searchResponse
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|totalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|highlightFields
argument_list|()
operator|.
name|get
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|fragments
argument_list|()
index|[
literal|0
index|]
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"The<x>quick browse</x> button is a fancy thing, right bro?"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|1
argument_list|)
operator|.
name|highlightFields
argument_list|()
operator|.
name|get
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|fragments
argument_list|()
index|[
literal|0
index|]
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"The<x>quick brown</x> fox jumps over the lazy dog"
argument_list|)
argument_list|)
expr_stmt|;
comment|// with synonyms
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type2"
argument_list|,
literal|"0"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field4"
argument_list|,
literal|"The quick brown fox jumps over the lazy dog"
argument_list|,
literal|"field3"
argument_list|,
literal|"The quick brown fox jumps over the lazy dog"
argument_list|)
operator|.
name|setRefresh
argument_list|(
literal|true
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type2"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field4"
argument_list|,
literal|"The quick browse button is a fancy thing, right bro?"
argument_list|)
operator|.
name|setRefresh
argument_list|(
literal|true
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type2"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field4"
argument_list|,
literal|"a quick fast blue car"
argument_list|)
operator|.
name|setRefresh
argument_list|(
literal|true
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|source
operator|=
name|searchSource
argument_list|()
operator|.
name|filter
argument_list|(
name|FilterBuilders
operator|.
name|typeFilter
argument_list|(
literal|"type2"
argument_list|)
argument_list|)
operator|.
name|query
argument_list|(
name|matchPhrasePrefixQuery
argument_list|(
literal|"field3"
argument_list|,
literal|"fast bro"
argument_list|)
argument_list|)
operator|.
name|from
argument_list|(
literal|0
argument_list|)
operator|.
name|size
argument_list|(
literal|60
argument_list|)
operator|.
name|explain
argument_list|(
literal|true
argument_list|)
operator|.
name|highlight
argument_list|(
name|highlight
argument_list|()
operator|.
name|field
argument_list|(
literal|"field3"
argument_list|)
operator|.
name|order
argument_list|(
literal|"score"
argument_list|)
operator|.
name|preTags
argument_list|(
literal|"<x>"
argument_list|)
operator|.
name|postTags
argument_list|(
literal|"</x>"
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|search
argument_list|(
name|searchRequest
argument_list|(
literal|"test"
argument_list|)
operator|.
name|source
argument_list|(
name|source
argument_list|)
operator|.
name|searchType
argument_list|(
name|QUERY_THEN_FETCH
argument_list|)
argument_list|)
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertNoFailures
argument_list|(
name|searchResponse
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|totalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|highlightFields
argument_list|()
operator|.
name|get
argument_list|(
literal|"field3"
argument_list|)
operator|.
name|fragments
argument_list|()
index|[
literal|0
index|]
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"The<x>quick</x><x>brown</x> fox jumps over the lazy dog"
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> highlighting and searching on field4"
argument_list|)
expr_stmt|;
name|source
operator|=
name|searchSource
argument_list|()
operator|.
name|filter
argument_list|(
name|FilterBuilders
operator|.
name|typeFilter
argument_list|(
literal|"type2"
argument_list|)
argument_list|)
operator|.
name|query
argument_list|(
name|matchPhrasePrefixQuery
argument_list|(
literal|"field4"
argument_list|,
literal|"the fast bro"
argument_list|)
argument_list|)
operator|.
name|from
argument_list|(
literal|0
argument_list|)
operator|.
name|size
argument_list|(
literal|60
argument_list|)
operator|.
name|explain
argument_list|(
literal|true
argument_list|)
operator|.
name|highlight
argument_list|(
name|highlight
argument_list|()
operator|.
name|field
argument_list|(
literal|"field4"
argument_list|)
operator|.
name|order
argument_list|(
literal|"score"
argument_list|)
operator|.
name|preTags
argument_list|(
literal|"<x>"
argument_list|)
operator|.
name|postTags
argument_list|(
literal|"</x>"
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|search
argument_list|(
name|searchRequest
argument_list|(
literal|"test"
argument_list|)
operator|.
name|source
argument_list|(
name|source
argument_list|)
operator|.
name|searchType
argument_list|(
name|QUERY_THEN_FETCH
argument_list|)
argument_list|)
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertNoFailures
argument_list|(
name|searchResponse
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|totalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|highlightFields
argument_list|()
operator|.
name|get
argument_list|(
literal|"field4"
argument_list|)
operator|.
name|fragments
argument_list|()
index|[
literal|0
index|]
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"<x>The quick browse</x> button is a fancy thing, right bro?"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|1
argument_list|)
operator|.
name|highlightFields
argument_list|()
operator|.
name|get
argument_list|(
literal|"field4"
argument_list|)
operator|.
name|fragments
argument_list|()
index|[
literal|0
index|]
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"<x>The quick brown</x> fox jumps over the lazy dog"
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> highlighting and searching on field4"
argument_list|)
expr_stmt|;
name|source
operator|=
name|searchSource
argument_list|()
operator|.
name|filter
argument_list|(
name|FilterBuilders
operator|.
name|typeFilter
argument_list|(
literal|"type2"
argument_list|)
argument_list|)
operator|.
name|query
argument_list|(
name|matchPhrasePrefixQuery
argument_list|(
literal|"field4"
argument_list|,
literal|"a fast quick blue ca"
argument_list|)
argument_list|)
operator|.
name|from
argument_list|(
literal|0
argument_list|)
operator|.
name|size
argument_list|(
literal|60
argument_list|)
operator|.
name|explain
argument_list|(
literal|true
argument_list|)
operator|.
name|highlight
argument_list|(
name|highlight
argument_list|()
operator|.
name|field
argument_list|(
literal|"field4"
argument_list|)
operator|.
name|order
argument_list|(
literal|"score"
argument_list|)
operator|.
name|preTags
argument_list|(
literal|"<x>"
argument_list|)
operator|.
name|postTags
argument_list|(
literal|"</x>"
argument_list|)
argument_list|)
expr_stmt|;
name|searchResponse
operator|=
name|client
argument_list|()
operator|.
name|search
argument_list|(
name|searchRequest
argument_list|(
literal|"test"
argument_list|)
operator|.
name|source
argument_list|(
name|source
argument_list|)
operator|.
name|searchType
argument_list|(
name|QUERY_THEN_FETCH
argument_list|)
argument_list|)
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertNoFailures
argument_list|(
name|searchResponse
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|totalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|highlightFields
argument_list|()
operator|.
name|get
argument_list|(
literal|"field4"
argument_list|)
operator|.
name|fragments
argument_list|()
index|[
literal|0
index|]
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"<x>a quick fast blue car</x>"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPlainHighlightDifferentFragmenter
specifier|public
name|void
name|testPlainHighlightDifferentFragmenter
parameter_list|()
throws|throws
name|Exception
block|{
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|ImmutableSettings
operator|.
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.number_of_shards"
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.number_of_replicas"
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"tags"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"tags"
argument_list|,
literal|"this is a really long tag i would like to highlight"
argument_list|,
literal|"here is another one that is very long tag and has the tag token near the end"
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|setRefresh
argument_list|(
literal|true
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|matchQuery
argument_list|(
literal|"tags"
argument_list|,
literal|"long tag"
argument_list|)
operator|.
name|type
argument_list|(
name|MatchQueryBuilder
operator|.
name|Type
operator|.
name|PHRASE
argument_list|)
argument_list|)
operator|.
name|addHighlightedField
argument_list|(
operator|new
name|HighlightBuilder
operator|.
name|Field
argument_list|(
literal|"tags"
argument_list|)
operator|.
name|fragmentSize
argument_list|(
operator|-
literal|1
argument_list|)
operator|.
name|numOfFragments
argument_list|(
literal|2
argument_list|)
operator|.
name|fragmenter
argument_list|(
literal|"simple"
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
index|[
literal|0
index|]
operator|.
name|highlightFields
argument_list|()
operator|.
name|get
argument_list|(
literal|"tags"
argument_list|)
operator|.
name|fragments
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
index|[
literal|0
index|]
operator|.
name|highlightFields
argument_list|()
operator|.
name|get
argument_list|(
literal|"tags"
argument_list|)
operator|.
name|fragments
argument_list|()
index|[
literal|0
index|]
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"this is a really<em>long</em><em>tag</em> i would like to highlight"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
index|[
literal|0
index|]
operator|.
name|highlightFields
argument_list|()
operator|.
name|get
argument_list|(
literal|"tags"
argument_list|)
operator|.
name|fragments
argument_list|()
index|[
literal|1
index|]
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"here is another one that is very<em>long</em><em>tag</em> and has the tag token near the end"
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|matchQuery
argument_list|(
literal|"tags"
argument_list|,
literal|"long tag"
argument_list|)
operator|.
name|type
argument_list|(
name|MatchQueryBuilder
operator|.
name|Type
operator|.
name|PHRASE
argument_list|)
argument_list|)
operator|.
name|addHighlightedField
argument_list|(
operator|new
name|HighlightBuilder
operator|.
name|Field
argument_list|(
literal|"tags"
argument_list|)
operator|.
name|fragmentSize
argument_list|(
operator|-
literal|1
argument_list|)
operator|.
name|numOfFragments
argument_list|(
literal|2
argument_list|)
operator|.
name|fragmenter
argument_list|(
literal|"span"
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
index|[
literal|0
index|]
operator|.
name|highlightFields
argument_list|()
operator|.
name|get
argument_list|(
literal|"tags"
argument_list|)
operator|.
name|fragments
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
index|[
literal|0
index|]
operator|.
name|highlightFields
argument_list|()
operator|.
name|get
argument_list|(
literal|"tags"
argument_list|)
operator|.
name|fragments
argument_list|()
index|[
literal|0
index|]
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"this is a really<em>long</em><em>tag</em> i would like to highlight"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
index|[
literal|0
index|]
operator|.
name|highlightFields
argument_list|()
operator|.
name|get
argument_list|(
literal|"tags"
argument_list|)
operator|.
name|fragments
argument_list|()
index|[
literal|1
index|]
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"here is another one that is very<em>long</em><em>tag</em> and has the tag token near the end"
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|matchQuery
argument_list|(
literal|"tags"
argument_list|,
literal|"long tag"
argument_list|)
operator|.
name|type
argument_list|(
name|MatchQueryBuilder
operator|.
name|Type
operator|.
name|PHRASE
argument_list|)
argument_list|)
operator|.
name|addHighlightedField
argument_list|(
operator|new
name|HighlightBuilder
operator|.
name|Field
argument_list|(
literal|"tags"
argument_list|)
operator|.
name|fragmentSize
argument_list|(
operator|-
literal|1
argument_list|)
operator|.
name|numOfFragments
argument_list|(
literal|2
argument_list|)
operator|.
name|fragmenter
argument_list|(
literal|"invalid"
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Shouldn't get here"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SearchPhaseExecutionException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|shardFailures
argument_list|()
index|[
literal|0
index|]
operator|.
name|status
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|RestStatus
operator|.
name|BAD_REQUEST
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testMissingStoredField
specifier|public
name|void
name|testMissingStoredField
parameter_list|()
throws|throws
name|Exception
block|{
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|ImmutableSettings
operator|.
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.number_of_shards"
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.number_of_replicas"
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"highlight_field"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"store"
argument_list|,
literal|"yes"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"field"
argument_list|,
literal|"highlight"
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|setRefresh
argument_list|(
literal|true
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
comment|// This query used to fail when the field to highlight was absent
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|matchQuery
argument_list|(
literal|"field"
argument_list|,
literal|"highlight"
argument_list|)
operator|.
name|type
argument_list|(
name|MatchQueryBuilder
operator|.
name|Type
operator|.
name|BOOLEAN
argument_list|)
argument_list|)
operator|.
name|addHighlightedField
argument_list|(
operator|new
name|HighlightBuilder
operator|.
name|Field
argument_list|(
literal|"highlight_field"
argument_list|)
operator|.
name|fragmentSize
argument_list|(
operator|-
literal|1
argument_list|)
operator|.
name|numOfFragments
argument_list|(
literal|1
argument_list|)
operator|.
name|fragmenter
argument_list|(
literal|"simple"
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
index|[
literal|0
index|]
operator|.
name|highlightFields
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
comment|// https://github.com/elasticsearch/elasticsearch/issues/3211
DECL|method|testNumericHighlighting
specifier|public
name|void
name|testNumericHighlighting
parameter_list|()
throws|throws
name|Exception
block|{
name|wipeIndex
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"test"
argument_list|,
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"test"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"text"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"index"
argument_list|,
literal|"analyzed"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"byte"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"byte"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"short"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"short"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"int"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"integer"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"long"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"long"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"float"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"float"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"double"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"double"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"text"
argument_list|,
literal|"elasticsearch test"
argument_list|)
operator|.
name|field
argument_list|(
literal|"byte"
argument_list|,
literal|25
argument_list|)
operator|.
name|field
argument_list|(
literal|"short"
argument_list|,
literal|42
argument_list|)
operator|.
name|field
argument_list|(
literal|"int"
argument_list|,
literal|100
argument_list|)
operator|.
name|field
argument_list|(
literal|"long"
argument_list|,
operator|-
literal|1
argument_list|)
operator|.
name|field
argument_list|(
literal|"float"
argument_list|,
literal|3.2f
argument_list|)
operator|.
name|field
argument_list|(
literal|"double"
argument_list|,
literal|42.42
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|setRefresh
argument_list|(
literal|true
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|matchQuery
argument_list|(
literal|"text"
argument_list|,
literal|"test"
argument_list|)
operator|.
name|type
argument_list|(
name|MatchQueryBuilder
operator|.
name|Type
operator|.
name|BOOLEAN
argument_list|)
argument_list|)
operator|.
name|addHighlightedField
argument_list|(
literal|"text"
argument_list|)
operator|.
name|addHighlightedField
argument_list|(
literal|"byte"
argument_list|)
operator|.
name|addHighlightedField
argument_list|(
literal|"short"
argument_list|)
operator|.
name|addHighlightedField
argument_list|(
literal|"int"
argument_list|)
operator|.
name|addHighlightedField
argument_list|(
literal|"long"
argument_list|)
operator|.
name|addHighlightedField
argument_list|(
literal|"float"
argument_list|)
operator|.
name|addHighlightedField
argument_list|(
literal|"double"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getHits
argument_list|()
operator|.
name|totalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
comment|// Highlighting of numeric fields is not supported, but it should not raise errors
comment|// (this behavior is consistent with version 0.20)
name|assertThat
argument_list|(
name|response
operator|.
name|getFailedShards
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
comment|// https://github.com/elasticsearch/elasticsearch/issues/3200
DECL|method|testResetTwice
specifier|public
name|void
name|testResetTwice
parameter_list|()
throws|throws
name|Exception
block|{
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"analysis.analyzer.my_analyzer.type"
argument_list|,
literal|"pattern"
argument_list|)
operator|.
name|put
argument_list|(
literal|"analysis.analyzer.my_analyzer.pattern"
argument_list|,
literal|"\\s+"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type"
argument_list|,
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"text"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
literal|"my_analyzer"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"text"
argument_list|,
literal|"elasticsearch test"
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|setRefresh
argument_list|(
literal|true
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|matchQuery
argument_list|(
literal|"text"
argument_list|,
literal|"test"
argument_list|)
operator|.
name|type
argument_list|(
name|MatchQueryBuilder
operator|.
name|Type
operator|.
name|BOOLEAN
argument_list|)
argument_list|)
operator|.
name|addHighlightedField
argument_list|(
literal|"text"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getHits
argument_list|()
operator|.
name|totalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
comment|// PatternAnalyzer will throw an exception if it is resetted twice
name|assertThat
argument_list|(
name|response
operator|.
name|getFailedShards
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testHighlightUsesHighlightQuery
specifier|public
name|void
name|testHighlightUsesHighlightQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
literal|"text"
argument_list|,
literal|"type=string,store=yes,term_vector=with_positions_offsets"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|index
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|,
literal|"text"
argument_list|,
literal|"some stuff stuff stuff stuff stuff to highlight against the stuff phrase"
argument_list|)
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
comment|// Make sure the fvh doesn't highlight in the same way as we're going to do with a scoreQuery because
comment|// that would invalidate the test results.
name|Matcher
argument_list|<
name|String
argument_list|>
name|highlightedMatcher
init|=
name|anyOf
argument_list|(
name|containsString
argument_list|(
literal|"<em>stuff phrase</em>"
argument_list|)
argument_list|,
comment|//t FHV normally does this
name|containsString
argument_list|(
literal|"<em>stuff</em><em>phrase</em>"
argument_list|)
argument_list|)
decl_stmt|;
comment|// Plain normally does this
name|HighlightBuilder
operator|.
name|Field
name|field
init|=
operator|new
name|HighlightBuilder
operator|.
name|Field
argument_list|(
literal|"text"
argument_list|)
operator|.
name|fragmentSize
argument_list|(
literal|20
argument_list|)
operator|.
name|numOfFragments
argument_list|(
literal|1
argument_list|)
operator|.
name|highlighterType
argument_list|(
literal|"fvh"
argument_list|)
decl_stmt|;
name|SearchRequestBuilder
name|search
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|matchQuery
argument_list|(
literal|"text"
argument_list|,
literal|"stuff"
argument_list|)
argument_list|)
operator|.
name|setHighlighterOrder
argument_list|(
literal|"score"
argument_list|)
operator|.
name|addHighlightedField
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|SearchResponse
name|response
init|=
name|search
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHighlight
argument_list|(
name|response
argument_list|,
literal|0
argument_list|,
literal|"text"
argument_list|,
literal|0
argument_list|,
name|not
argument_list|(
name|highlightedMatcher
argument_list|)
argument_list|)
expr_stmt|;
comment|// And do the same for the plain highlighter
name|field
operator|.
name|highlighterType
argument_list|(
literal|"plain"
argument_list|)
expr_stmt|;
name|response
operator|=
name|search
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHighlight
argument_list|(
name|response
argument_list|,
literal|0
argument_list|,
literal|"text"
argument_list|,
literal|0
argument_list|,
name|not
argument_list|(
name|highlightedMatcher
argument_list|)
argument_list|)
expr_stmt|;
comment|// Make sure the fvh takes the highlightQuery into account
name|field
operator|.
name|highlighterType
argument_list|(
literal|"fvh"
argument_list|)
operator|.
name|highlightQuery
argument_list|(
name|matchPhraseQuery
argument_list|(
literal|"text"
argument_list|,
literal|"stuff phrase"
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|=
name|search
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHighlight
argument_list|(
name|response
argument_list|,
literal|0
argument_list|,
literal|"text"
argument_list|,
literal|0
argument_list|,
name|highlightedMatcher
argument_list|)
expr_stmt|;
comment|// And do the same for the plain highlighter
name|field
operator|.
name|highlighterType
argument_list|(
literal|"plain"
argument_list|)
expr_stmt|;
name|response
operator|=
name|search
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHighlight
argument_list|(
name|response
argument_list|,
literal|0
argument_list|,
literal|"text"
argument_list|,
literal|0
argument_list|,
name|highlightedMatcher
argument_list|)
expr_stmt|;
comment|// Note that the plain highlighter doesn't join the highlighted elements for us
comment|// Make sure the fvh takes the highlightQuery into account when it is set on the highlight context instead of the field
name|search
operator|.
name|setHighlighterQuery
argument_list|(
name|matchPhraseQuery
argument_list|(
literal|"text"
argument_list|,
literal|"stuff phrase"
argument_list|)
argument_list|)
expr_stmt|;
name|field
operator|.
name|highlighterType
argument_list|(
literal|"fvh"
argument_list|)
operator|.
name|highlightQuery
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|response
operator|=
name|search
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHighlight
argument_list|(
name|response
argument_list|,
literal|0
argument_list|,
literal|"text"
argument_list|,
literal|0
argument_list|,
name|highlightedMatcher
argument_list|)
expr_stmt|;
comment|// And do the same for the plain highlighter
name|field
operator|.
name|highlighterType
argument_list|(
literal|"plain"
argument_list|)
expr_stmt|;
name|response
operator|=
name|search
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHighlight
argument_list|(
name|response
argument_list|,
literal|0
argument_list|,
literal|"text"
argument_list|,
literal|0
argument_list|,
name|highlightedMatcher
argument_list|)
expr_stmt|;
comment|// Note that the plain highlighter doesn't join the highlighted elements for us
block|}
DECL|method|testHighlightNoMatchSize
specifier|public
name|void
name|testHighlightNoMatchSize
parameter_list|()
throws|throws
name|IOException
block|{
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
literal|"text"
argument_list|,
literal|"type=string,store=yes,term_vector=with_positions_offsets"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|String
name|text
init|=
literal|"I am pretty long so some of me should get cut off"
decl_stmt|;
name|index
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|,
literal|"text"
argument_list|,
name|text
argument_list|)
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
comment|// When you don't set noMatchSize you don't get any results if there isn't anything to highlight.
name|HighlightBuilder
operator|.
name|Field
name|field
init|=
operator|new
name|HighlightBuilder
operator|.
name|Field
argument_list|(
literal|"text"
argument_list|)
operator|.
name|fragmentSize
argument_list|(
literal|21
argument_list|)
operator|.
name|numOfFragments
argument_list|(
literal|1
argument_list|)
operator|.
name|highlighterType
argument_list|(
literal|"plain"
argument_list|)
decl_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addHighlightedField
argument_list|(
name|field
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertNotHighlighted
argument_list|(
name|response
argument_list|,
literal|0
argument_list|,
literal|"text"
argument_list|)
expr_stmt|;
name|field
operator|.
name|highlighterType
argument_list|(
literal|"fvh"
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addHighlightedField
argument_list|(
name|field
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertNotHighlighted
argument_list|(
name|response
argument_list|,
literal|0
argument_list|,
literal|"text"
argument_list|)
expr_stmt|;
comment|// When noMatchSize is set to 0 you also shouldn't get any
name|field
operator|.
name|highlighterType
argument_list|(
literal|"plain"
argument_list|)
operator|.
name|noMatchSize
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addHighlightedField
argument_list|(
name|field
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertNotHighlighted
argument_list|(
name|response
argument_list|,
literal|0
argument_list|,
literal|"text"
argument_list|)
expr_stmt|;
name|field
operator|.
name|highlighterType
argument_list|(
literal|"fvh"
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addHighlightedField
argument_list|(
name|field
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertNotHighlighted
argument_list|(
name|response
argument_list|,
literal|0
argument_list|,
literal|"text"
argument_list|)
expr_stmt|;
comment|// When noMatchSize is between 0 and the size of the string
name|field
operator|.
name|highlighterType
argument_list|(
literal|"plain"
argument_list|)
operator|.
name|noMatchSize
argument_list|(
literal|21
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addHighlightedField
argument_list|(
name|field
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHighlight
argument_list|(
name|response
argument_list|,
literal|0
argument_list|,
literal|"text"
argument_list|,
literal|0
argument_list|,
name|equalTo
argument_list|(
literal|"I am pretty long so"
argument_list|)
argument_list|)
expr_stmt|;
comment|// The FVH also works but the fragment is longer than the plain highlighter because of boundary_max_scan
name|field
operator|.
name|highlighterType
argument_list|(
literal|"fvh"
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addHighlightedField
argument_list|(
name|field
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHighlight
argument_list|(
name|response
argument_list|,
literal|0
argument_list|,
literal|"text"
argument_list|,
literal|0
argument_list|,
name|equalTo
argument_list|(
literal|"I am pretty long so some"
argument_list|)
argument_list|)
expr_stmt|;
comment|// We can also ask for a fragment longer than the input string and get the whole string
name|field
operator|.
name|highlighterType
argument_list|(
literal|"plain"
argument_list|)
operator|.
name|noMatchSize
argument_list|(
name|text
operator|.
name|length
argument_list|()
operator|*
literal|2
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addHighlightedField
argument_list|(
name|field
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHighlight
argument_list|(
name|response
argument_list|,
literal|0
argument_list|,
literal|"text"
argument_list|,
literal|0
argument_list|,
name|equalTo
argument_list|(
name|text
argument_list|)
argument_list|)
expr_stmt|;
comment|// Same for the fvh
name|field
operator|.
name|highlighterType
argument_list|(
literal|"fvh"
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addHighlightedField
argument_list|(
name|field
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHighlight
argument_list|(
name|response
argument_list|,
literal|0
argument_list|,
literal|"text"
argument_list|,
literal|0
argument_list|,
name|equalTo
argument_list|(
name|text
argument_list|)
argument_list|)
expr_stmt|;
comment|// We can also ask for a fragment exactly the size of the input field and get the whole field
name|field
operator|.
name|highlighterType
argument_list|(
literal|"plain"
argument_list|)
operator|.
name|noMatchSize
argument_list|(
name|text
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addHighlightedField
argument_list|(
name|field
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHighlight
argument_list|(
name|response
argument_list|,
literal|0
argument_list|,
literal|"text"
argument_list|,
literal|0
argument_list|,
name|equalTo
argument_list|(
name|text
argument_list|)
argument_list|)
expr_stmt|;
comment|// Same for the fvh
name|field
operator|.
name|highlighterType
argument_list|(
literal|"fvh"
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addHighlightedField
argument_list|(
name|field
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHighlight
argument_list|(
name|response
argument_list|,
literal|0
argument_list|,
literal|"text"
argument_list|,
literal|0
argument_list|,
name|equalTo
argument_list|(
name|text
argument_list|)
argument_list|)
expr_stmt|;
comment|// You can set noMatchSize globally in the highlighter as well
name|field
operator|.
name|highlighterType
argument_list|(
literal|"plain"
argument_list|)
operator|.
name|noMatchSize
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setHighlighterNoMatchSize
argument_list|(
literal|21
argument_list|)
operator|.
name|addHighlightedField
argument_list|(
name|field
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHighlight
argument_list|(
name|response
argument_list|,
literal|0
argument_list|,
literal|"text"
argument_list|,
literal|0
argument_list|,
name|equalTo
argument_list|(
literal|"I am pretty long so"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Same for the fvh
name|field
operator|.
name|highlighterType
argument_list|(
literal|"fvh"
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setHighlighterNoMatchSize
argument_list|(
literal|21
argument_list|)
operator|.
name|addHighlightedField
argument_list|(
name|field
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHighlight
argument_list|(
name|response
argument_list|,
literal|0
argument_list|,
literal|"text"
argument_list|,
literal|0
argument_list|,
name|equalTo
argument_list|(
literal|"I am pretty long so some"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testHighlightNoMatchSizeWithMultivaluedFields
specifier|public
name|void
name|testHighlightNoMatchSizeWithMultivaluedFields
parameter_list|()
throws|throws
name|IOException
block|{
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"text"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"store"
argument_list|,
literal|"yes"
argument_list|)
operator|.
name|field
argument_list|(
literal|"term_vector"
argument_list|,
literal|"with_positions_offsets"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|String
name|text1
init|=
literal|"I am pretty long so some of me should get cut off"
decl_stmt|;
name|String
name|text2
init|=
literal|"I am short"
decl_stmt|;
name|index
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|,
literal|"text"
argument_list|,
operator|new
name|String
index|[]
block|{
name|text1
block|,
name|text2
block|}
argument_list|)
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
comment|// The no match fragment should come from the first field of a multi-valued field
name|HighlightBuilder
operator|.
name|Field
name|field
init|=
operator|new
name|HighlightBuilder
operator|.
name|Field
argument_list|(
literal|"text"
argument_list|)
operator|.
name|fragmentSize
argument_list|(
literal|21
argument_list|)
operator|.
name|numOfFragments
argument_list|(
literal|1
argument_list|)
operator|.
name|highlighterType
argument_list|(
literal|"plain"
argument_list|)
operator|.
name|noMatchSize
argument_list|(
literal|21
argument_list|)
decl_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addHighlightedField
argument_list|(
name|field
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertHighlight
argument_list|(
name|response
argument_list|,
literal|0
argument_list|,
literal|"text"
argument_list|,
literal|0
argument_list|,
name|equalTo
argument_list|(
literal|"I am pretty long so"
argument_list|)
argument_list|)
expr_stmt|;
comment|// And the fvh should work as well
name|field
operator|.
name|highlighterType
argument_list|(
literal|"fvh"
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addHighlightedField
argument_list|(
name|field
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertHighlight
argument_list|(
name|response
argument_list|,
literal|0
argument_list|,
literal|"text"
argument_list|,
literal|0
argument_list|,
name|equalTo
argument_list|(
literal|"I am pretty long so some"
argument_list|)
argument_list|)
expr_stmt|;
comment|// And noMatchSize returns nothing when the first entry is empty string!
assert|assert
operator|(
operator|!
name|client
argument_list|()
operator|.
name|prepareDelete
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|isNotFound
argument_list|()
operator|)
assert|;
name|index
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|,
literal|"text"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|""
block|,
name|text2
block|}
argument_list|)
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|field
operator|.
name|highlighterType
argument_list|(
literal|"plain"
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addHighlightedField
argument_list|(
name|field
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertNoFailures
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"not enough hits"
argument_list|,
name|response
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
operator|.
name|length
argument_list|,
name|greaterThan
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
index|[
literal|0
index|]
operator|.
name|getHighlightFields
argument_list|()
argument_list|,
name|not
argument_list|(
name|hasKey
argument_list|(
literal|"text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// And the fvh should work as well
name|field
operator|.
name|highlighterType
argument_list|(
literal|"fvh"
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addHighlightedField
argument_list|(
name|field
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertNoFailures
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"not enough hits"
argument_list|,
name|response
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
operator|.
name|length
argument_list|,
name|greaterThan
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
index|[
literal|0
index|]
operator|.
name|getHighlightFields
argument_list|()
argument_list|,
name|not
argument_list|(
name|hasKey
argument_list|(
literal|"text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// But if the field was actually empty then you should get no highlighting field
assert|assert
operator|(
operator|!
name|client
argument_list|()
operator|.
name|prepareDelete
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|isNotFound
argument_list|()
operator|)
assert|;
name|index
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|,
literal|"text"
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|)
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|field
operator|.
name|highlighterType
argument_list|(
literal|"plain"
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addHighlightedField
argument_list|(
name|field
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertNoFailures
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"not enough hits"
argument_list|,
name|response
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
operator|.
name|length
argument_list|,
name|greaterThan
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
index|[
literal|0
index|]
operator|.
name|getHighlightFields
argument_list|()
argument_list|,
name|not
argument_list|(
name|hasKey
argument_list|(
literal|"text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// And the fvh should work as well
name|field
operator|.
name|highlighterType
argument_list|(
literal|"fvh"
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addHighlightedField
argument_list|(
name|field
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertNoFailures
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"not enough hits"
argument_list|,
name|response
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
operator|.
name|length
argument_list|,
name|greaterThan
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
index|[
literal|0
index|]
operator|.
name|getHighlightFields
argument_list|()
argument_list|,
name|not
argument_list|(
name|hasKey
argument_list|(
literal|"text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Same for if the field doesn't even exist
assert|assert
operator|(
operator|!
name|client
argument_list|()
operator|.
name|prepareDelete
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|isNotFound
argument_list|()
operator|)
assert|;
name|index
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|field
operator|.
name|highlighterType
argument_list|(
literal|"plain"
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addHighlightedField
argument_list|(
name|field
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertNoFailures
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"not enough hits"
argument_list|,
name|response
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
operator|.
name|length
argument_list|,
name|greaterThan
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
index|[
literal|0
index|]
operator|.
name|getHighlightFields
argument_list|()
argument_list|,
name|not
argument_list|(
name|hasKey
argument_list|(
literal|"text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// And the fvh should work as well
name|field
operator|.
name|highlighterType
argument_list|(
literal|"fvh"
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addHighlightedField
argument_list|(
name|field
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertNoFailures
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"not enough hits"
argument_list|,
name|response
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
operator|.
name|length
argument_list|,
name|greaterThan
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
index|[
literal|0
index|]
operator|.
name|getHighlightFields
argument_list|()
argument_list|,
name|not
argument_list|(
name|hasKey
argument_list|(
literal|"text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Again same if the field isn't mapped
name|field
operator|=
operator|new
name|HighlightBuilder
operator|.
name|Field
argument_list|(
literal|"unmapped"
argument_list|)
operator|.
name|highlighterType
argument_list|(
literal|"plain"
argument_list|)
operator|.
name|noMatchSize
argument_list|(
literal|21
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addHighlightedField
argument_list|(
name|field
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertNoFailures
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"not enough hits"
argument_list|,
name|response
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
operator|.
name|length
argument_list|,
name|greaterThan
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
index|[
literal|0
index|]
operator|.
name|getHighlightFields
argument_list|()
argument_list|,
name|not
argument_list|(
name|hasKey
argument_list|(
literal|"unmapped"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// And the fvh should work as well
name|field
operator|.
name|highlighterType
argument_list|(
literal|"fvh"
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addHighlightedField
argument_list|(
name|field
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertNoFailures
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"not enough hits"
argument_list|,
name|response
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
operator|.
name|length
argument_list|,
name|greaterThan
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getHits
argument_list|()
operator|.
name|hits
argument_list|()
index|[
literal|0
index|]
operator|.
name|getHighlightFields
argument_list|()
argument_list|,
name|not
argument_list|(
name|hasKey
argument_list|(
literal|"unmapped"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

