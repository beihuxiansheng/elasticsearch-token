begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.suggest
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|Resources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
operator|.
name|Slow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|AbstractSharedClusterTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticSearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|create
operator|.
name|CreateIndexRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchPhaseExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|SuggestBuilder
operator|.
name|SuggestionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|phrase
operator|.
name|PhraseSuggestionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|phrase
operator|.
name|PhraseSuggestionBuilder
operator|.
name|DirectCandidateGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|term
operator|.
name|TermSuggestionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_REPLICAS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_SHARDS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
operator|.
name|settingsBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
operator|.
name|matchQuery
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|SuggestBuilder
operator|.
name|phraseSuggestion
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|SuggestBuilder
operator|.
name|termSuggestion
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|phrase
operator|.
name|PhraseSuggestionBuilder
operator|.
name|candidateGenerator
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|nullValue
import|;
end_import

begin_comment
comment|/**  * Integration tests for term and phrase suggestions.  Many of these tests many requests that vary only slightly from one another.  Where  * possible these tests should declare for the first request, make the request, modify the configuration for the next request, make that  * request, modify again, request again, etc.  This makes it very obvious what changes between requests.  */
end_comment

begin_class
DECL|class|SuggestSearchTests
specifier|public
class|class
name|SuggestSearchTests
extends|extends
name|AbstractSharedClusterTest
block|{
annotation|@
name|Test
comment|// see #3037
DECL|method|testSuggestModes
specifier|public
name|void
name|testSuggestModes
parameter_list|()
throws|throws
name|IOException
block|{
name|CreateIndexRequestBuilder
name|builder
init|=
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
literal|0
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.analyzer.biword.tokenizer"
argument_list|,
literal|"standard"
argument_list|)
operator|.
name|putArray
argument_list|(
literal|"index.analysis.analyzer.biword.filter"
argument_list|,
literal|"shingler"
argument_list|,
literal|"lowercase"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.shingler.type"
argument_list|,
literal|"shingle"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.shingler.min_shingle_size"
argument_list|,
literal|2
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.shingler.max_shingle_size"
argument_list|,
literal|3
argument_list|)
argument_list|)
decl_stmt|;
name|XContentBuilder
name|mapping
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"name"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"multi_field"
argument_list|)
operator|.
name|field
argument_list|(
literal|"path"
argument_list|,
literal|"just_name"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"fields"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"name"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"name_shingled"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"index_analyzer"
argument_list|,
literal|"biword"
argument_list|)
operator|.
name|field
argument_list|(
literal|"search_analyzer"
argument_list|,
literal|"standard"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|assertAcked
argument_list|(
name|builder
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
name|mapping
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|index
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|,
literal|"name"
argument_list|,
literal|"I like iced tea"
argument_list|)
expr_stmt|;
name|index
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"2"
argument_list|,
literal|"name"
argument_list|,
literal|"I like tea."
argument_list|)
expr_stmt|;
name|index
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"3"
argument_list|,
literal|"name"
argument_list|,
literal|"I like ice cream."
argument_list|)
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|DirectCandidateGenerator
name|generator
init|=
name|candidateGenerator
argument_list|(
literal|"name"
argument_list|)
operator|.
name|prefixLength
argument_list|(
literal|0
argument_list|)
operator|.
name|minWordLength
argument_list|(
literal|0
argument_list|)
operator|.
name|suggestMode
argument_list|(
literal|"always"
argument_list|)
operator|.
name|maxEdits
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|PhraseSuggestionBuilder
name|phraseSuggestion
init|=
name|phraseSuggestion
argument_list|(
literal|"did_you_mean"
argument_list|)
operator|.
name|field
argument_list|(
literal|"name_shingled"
argument_list|)
operator|.
name|addCandidateGenerator
argument_list|(
name|generator
argument_list|)
operator|.
name|gramSize
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|Suggest
name|searchSuggest
init|=
name|searchSuggest
argument_list|(
name|client
argument_list|()
argument_list|,
literal|"ice tea"
argument_list|,
name|phraseSuggestion
argument_list|)
decl_stmt|;
name|assertSuggestion
argument_list|(
name|searchSuggest
argument_list|,
literal|0
argument_list|,
literal|"did_you_mean"
argument_list|,
literal|"iced tea"
argument_list|)
expr_stmt|;
name|generator
operator|.
name|suggestMode
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|searchSuggest
operator|=
name|searchSuggest
argument_list|(
name|client
argument_list|()
argument_list|,
literal|"ice tea"
argument_list|,
name|phraseSuggestion
argument_list|)
expr_stmt|;
name|assertSuggestionSize
argument_list|(
name|searchSuggest
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"did_you_mean"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
comment|// see #2729
DECL|method|testSizeOneShard
specifier|public
name|void
name|testSizeOneShard
parameter_list|()
throws|throws
name|Exception
block|{
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
literal|1
argument_list|,
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
literal|0
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|15
condition|;
name|i
operator|++
control|)
block|{
name|index
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|,
literal|"text"
argument_list|,
literal|"abc"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|refresh
argument_list|()
expr_stmt|;
name|SearchResponse
name|search
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchQuery
argument_list|(
literal|"text"
argument_list|,
literal|"spellchecker"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
literal|"didn't ask for suggestions but got some"
argument_list|,
name|search
operator|.
name|getSuggest
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|TermSuggestionBuilder
name|termSuggestion
init|=
name|termSuggestion
argument_list|(
literal|"test"
argument_list|)
operator|.
name|suggestMode
argument_list|(
literal|"always"
argument_list|)
comment|// Always, otherwise the results can vary between requests.
operator|.
name|text
argument_list|(
literal|"abcd"
argument_list|)
operator|.
name|field
argument_list|(
literal|"text"
argument_list|)
operator|.
name|size
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|Suggest
name|suggest
init|=
name|searchSuggest
argument_list|(
name|client
argument_list|()
argument_list|,
name|termSuggestion
argument_list|)
decl_stmt|;
name|assertSuggestion
argument_list|(
name|suggest
argument_list|,
literal|0
argument_list|,
literal|"test"
argument_list|,
literal|10
argument_list|,
literal|"abc0"
argument_list|)
expr_stmt|;
name|termSuggestion
operator|.
name|text
argument_list|(
literal|"abcd"
argument_list|)
operator|.
name|shardSize
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|suggest
operator|=
name|searchSuggest
argument_list|(
name|client
argument_list|()
argument_list|,
name|termSuggestion
argument_list|)
expr_stmt|;
name|assertSuggestion
argument_list|(
name|suggest
argument_list|,
literal|0
argument_list|,
literal|"test"
argument_list|,
literal|5
argument_list|,
literal|"abc0"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUnmappedField
specifier|public
name|void
name|testUnmappedField
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|ExecutionException
block|{
name|CreateIndexRequestBuilder
name|builder
init|=
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
name|between
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
name|between
argument_list|(
literal|0
argument_list|,
name|numberOfNodes
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.analyzer.biword.tokenizer"
argument_list|,
literal|"standard"
argument_list|)
operator|.
name|putArray
argument_list|(
literal|"index.analysis.analyzer.biword.filter"
argument_list|,
literal|"shingler"
argument_list|,
literal|"lowercase"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.shingler.type"
argument_list|,
literal|"shingle"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.shingler.min_shingle_size"
argument_list|,
literal|2
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.shingler.max_shingle_size"
argument_list|,
literal|3
argument_list|)
argument_list|)
decl_stmt|;
name|XContentBuilder
name|mapping
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"name"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"multi_field"
argument_list|)
operator|.
name|field
argument_list|(
literal|"path"
argument_list|,
literal|"just_name"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"fields"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"name"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"name_shingled"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"index_analyzer"
argument_list|,
literal|"biword"
argument_list|)
operator|.
name|field
argument_list|(
literal|"search_analyzer"
argument_list|,
literal|"standard"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|assertAcked
argument_list|(
name|builder
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
name|mapping
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|indexRandom
argument_list|(
literal|"test"
argument_list|,
literal|true
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"name"
argument_list|,
literal|"I like iced tea"
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"name"
argument_list|,
literal|"I like tea."
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"name"
argument_list|,
literal|"I like ice cream."
argument_list|)
argument_list|)
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|PhraseSuggestionBuilder
name|phraseSuggestion
init|=
name|phraseSuggestion
argument_list|(
literal|"did_you_mean"
argument_list|)
operator|.
name|field
argument_list|(
literal|"name_shingled"
argument_list|)
operator|.
name|addCandidateGenerator
argument_list|(
name|PhraseSuggestionBuilder
operator|.
name|candidateGenerator
argument_list|(
literal|"name"
argument_list|)
operator|.
name|prefixLength
argument_list|(
literal|0
argument_list|)
operator|.
name|minWordLength
argument_list|(
literal|0
argument_list|)
operator|.
name|suggestMode
argument_list|(
literal|"always"
argument_list|)
operator|.
name|maxEdits
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|gramSize
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|Suggest
name|searchSuggest
init|=
name|searchSuggest
argument_list|(
name|client
argument_list|()
argument_list|,
literal|"ice tea"
argument_list|,
name|phraseSuggestion
argument_list|)
decl_stmt|;
name|assertSuggestion
argument_list|(
name|searchSuggest
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"did_you_mean"
argument_list|,
literal|"iced tea"
argument_list|)
expr_stmt|;
name|phraseSuggestion
operator|.
name|field
argument_list|(
literal|"nosuchField"
argument_list|)
expr_stmt|;
block|{
name|SearchRequestBuilder
name|suggestBuilder
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setSearchType
argument_list|(
name|SearchType
operator|.
name|COUNT
argument_list|)
decl_stmt|;
name|suggestBuilder
operator|.
name|setSuggestText
argument_list|(
literal|"tetsting sugestion"
argument_list|)
expr_stmt|;
name|suggestBuilder
operator|.
name|addSuggestion
argument_list|(
name|phraseSuggestion
argument_list|)
expr_stmt|;
name|assertThrows
argument_list|(
name|suggestBuilder
argument_list|,
name|SearchPhaseExecutionException
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|{
name|SearchRequestBuilder
name|suggestBuilder
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setSearchType
argument_list|(
name|SearchType
operator|.
name|COUNT
argument_list|)
decl_stmt|;
name|suggestBuilder
operator|.
name|setSuggestText
argument_list|(
literal|"tetsting sugestion"
argument_list|)
expr_stmt|;
name|suggestBuilder
operator|.
name|addSuggestion
argument_list|(
name|phraseSuggestion
argument_list|)
expr_stmt|;
name|assertThrows
argument_list|(
name|suggestBuilder
argument_list|,
name|SearchPhaseExecutionException
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testSimple
specifier|public
name|void
name|testSimple
parameter_list|()
throws|throws
name|Exception
block|{
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
literal|1
argument_list|,
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
literal|0
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|index
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|,
literal|"text"
argument_list|,
literal|"abcd"
argument_list|)
expr_stmt|;
name|index
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"2"
argument_list|,
literal|"text"
argument_list|,
literal|"aacd"
argument_list|)
expr_stmt|;
name|index
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"3"
argument_list|,
literal|"text"
argument_list|,
literal|"abbd"
argument_list|)
expr_stmt|;
name|index
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"4"
argument_list|,
literal|"text"
argument_list|,
literal|"abcc"
argument_list|)
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|SearchResponse
name|search
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchQuery
argument_list|(
literal|"text"
argument_list|,
literal|"spellcecker"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
literal|"didn't ask for suggestions but got some"
argument_list|,
name|search
operator|.
name|getSuggest
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|TermSuggestionBuilder
name|termSuggest
init|=
name|termSuggestion
argument_list|(
literal|"test"
argument_list|)
operator|.
name|suggestMode
argument_list|(
literal|"always"
argument_list|)
comment|// Always, otherwise the results can vary between requests.
operator|.
name|text
argument_list|(
literal|"abcd"
argument_list|)
operator|.
name|field
argument_list|(
literal|"text"
argument_list|)
decl_stmt|;
name|Suggest
name|suggest
init|=
name|searchSuggest
argument_list|(
name|client
argument_list|()
argument_list|,
name|termSuggest
argument_list|)
decl_stmt|;
name|assertSuggestion
argument_list|(
name|suggest
argument_list|,
literal|0
argument_list|,
literal|"test"
argument_list|,
literal|"aacd"
argument_list|,
literal|"abbd"
argument_list|,
literal|"abcc"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|suggest
operator|.
name|getSuggestion
argument_list|(
literal|"test"
argument_list|)
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getText
argument_list|()
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"abcd"
argument_list|)
argument_list|)
expr_stmt|;
name|suggest
operator|=
name|searchSuggest
argument_list|(
name|client
argument_list|()
argument_list|,
name|termSuggest
argument_list|)
expr_stmt|;
name|assertSuggestion
argument_list|(
name|suggest
argument_list|,
literal|0
argument_list|,
literal|"test"
argument_list|,
literal|"aacd"
argument_list|,
literal|"abbd"
argument_list|,
literal|"abcc"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|suggest
operator|.
name|getSuggestion
argument_list|(
literal|"test"
argument_list|)
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getText
argument_list|()
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"abcd"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEmpty
specifier|public
name|void
name|testEmpty
parameter_list|()
throws|throws
name|Exception
block|{
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
literal|5
argument_list|,
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
literal|0
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|index
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|,
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|TermSuggestionBuilder
name|termSuggest
init|=
name|termSuggestion
argument_list|(
literal|"test"
argument_list|)
operator|.
name|suggestMode
argument_list|(
literal|"always"
argument_list|)
comment|// Always, otherwise the results can vary between requests.
operator|.
name|text
argument_list|(
literal|"abcd"
argument_list|)
operator|.
name|field
argument_list|(
literal|"text"
argument_list|)
decl_stmt|;
name|Suggest
name|suggest
init|=
name|searchSuggest
argument_list|(
name|client
argument_list|()
argument_list|,
name|termSuggest
argument_list|)
decl_stmt|;
name|assertSuggestionSize
argument_list|(
name|suggest
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|suggest
operator|.
name|getSuggestion
argument_list|(
literal|"test"
argument_list|)
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getText
argument_list|()
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"abcd"
argument_list|)
argument_list|)
expr_stmt|;
name|suggest
operator|=
name|searchSuggest
argument_list|(
name|client
argument_list|()
argument_list|,
name|termSuggest
argument_list|)
expr_stmt|;
name|assertSuggestionSize
argument_list|(
name|suggest
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|suggest
operator|.
name|getSuggestion
argument_list|(
literal|"test"
argument_list|)
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getText
argument_list|()
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"abcd"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWithMultipleCommands
specifier|public
name|void
name|testWithMultipleCommands
parameter_list|()
throws|throws
name|Exception
block|{
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
literal|5
argument_list|,
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
literal|0
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|index
argument_list|(
literal|"test"
argument_list|,
literal|"typ1"
argument_list|,
literal|"1"
argument_list|,
literal|"field1"
argument_list|,
literal|"prefix_abcd"
argument_list|,
literal|"field2"
argument_list|,
literal|"prefix_efgh"
argument_list|)
expr_stmt|;
name|index
argument_list|(
literal|"test"
argument_list|,
literal|"typ1"
argument_list|,
literal|"2"
argument_list|,
literal|"field1"
argument_list|,
literal|"prefix_aacd"
argument_list|,
literal|"field2"
argument_list|,
literal|"prefix_eeeh"
argument_list|)
expr_stmt|;
name|index
argument_list|(
literal|"test"
argument_list|,
literal|"typ1"
argument_list|,
literal|"3"
argument_list|,
literal|"field1"
argument_list|,
literal|"prefix_abbd"
argument_list|,
literal|"field2"
argument_list|,
literal|"prefix_efff"
argument_list|)
expr_stmt|;
name|index
argument_list|(
literal|"test"
argument_list|,
literal|"typ1"
argument_list|,
literal|"4"
argument_list|,
literal|"field1"
argument_list|,
literal|"prefix_abcc"
argument_list|,
literal|"field2"
argument_list|,
literal|"prefix_eggg"
argument_list|)
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|Suggest
name|suggest
init|=
name|searchSuggest
argument_list|(
name|client
argument_list|()
argument_list|,
name|termSuggestion
argument_list|(
literal|"size1"
argument_list|)
operator|.
name|size
argument_list|(
literal|1
argument_list|)
operator|.
name|text
argument_list|(
literal|"prefix_abcd"
argument_list|)
operator|.
name|maxTermFreq
argument_list|(
literal|10
argument_list|)
operator|.
name|prefixLength
argument_list|(
literal|1
argument_list|)
operator|.
name|minDocFreq
argument_list|(
literal|0
argument_list|)
operator|.
name|field
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|suggestMode
argument_list|(
literal|"always"
argument_list|)
argument_list|,
name|termSuggestion
argument_list|(
literal|"field2"
argument_list|)
operator|.
name|field
argument_list|(
literal|"field2"
argument_list|)
operator|.
name|text
argument_list|(
literal|"prefix_eeeh prefix_efgh"
argument_list|)
operator|.
name|maxTermFreq
argument_list|(
literal|10
argument_list|)
operator|.
name|minDocFreq
argument_list|(
literal|0
argument_list|)
operator|.
name|suggestMode
argument_list|(
literal|"always"
argument_list|)
argument_list|,
name|termSuggestion
argument_list|(
literal|"accuracy"
argument_list|)
operator|.
name|field
argument_list|(
literal|"field2"
argument_list|)
operator|.
name|text
argument_list|(
literal|"prefix_efgh"
argument_list|)
operator|.
name|setAccuracy
argument_list|(
literal|1f
argument_list|)
operator|.
name|maxTermFreq
argument_list|(
literal|10
argument_list|)
operator|.
name|minDocFreq
argument_list|(
literal|0
argument_list|)
operator|.
name|suggestMode
argument_list|(
literal|"always"
argument_list|)
argument_list|)
decl_stmt|;
name|assertSuggestion
argument_list|(
name|suggest
argument_list|,
literal|0
argument_list|,
literal|"size1"
argument_list|,
literal|"prefix_aacd"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|suggest
operator|.
name|getSuggestion
argument_list|(
literal|"field2"
argument_list|)
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getText
argument_list|()
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"prefix_eeeh"
argument_list|)
argument_list|)
expr_stmt|;
name|assertSuggestion
argument_list|(
name|suggest
argument_list|,
literal|0
argument_list|,
literal|"field2"
argument_list|,
literal|"prefix_efgh"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|suggest
operator|.
name|getSuggestion
argument_list|(
literal|"field2"
argument_list|)
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getText
argument_list|()
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"prefix_efgh"
argument_list|)
argument_list|)
expr_stmt|;
name|assertSuggestion
argument_list|(
name|suggest
argument_list|,
literal|1
argument_list|,
literal|"field2"
argument_list|,
literal|"prefix_eeeh"
argument_list|,
literal|"prefix_efff"
argument_list|,
literal|"prefix_eggg"
argument_list|)
expr_stmt|;
name|assertSuggestionSize
argument_list|(
name|suggest
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"accuracy"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSizeAndSort
specifier|public
name|void
name|testSizeAndSort
parameter_list|()
throws|throws
name|Exception
block|{
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
literal|5
argument_list|,
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
literal|0
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|termsAndDocCount
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|termsAndDocCount
operator|.
name|put
argument_list|(
literal|"prefix_aaad"
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|termsAndDocCount
operator|.
name|put
argument_list|(
literal|"prefix_abbb"
argument_list|,
literal|18
argument_list|)
expr_stmt|;
name|termsAndDocCount
operator|.
name|put
argument_list|(
literal|"prefix_aaca"
argument_list|,
literal|16
argument_list|)
expr_stmt|;
name|termsAndDocCount
operator|.
name|put
argument_list|(
literal|"prefix_abba"
argument_list|,
literal|14
argument_list|)
expr_stmt|;
name|termsAndDocCount
operator|.
name|put
argument_list|(
literal|"prefix_accc"
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|termsAndDocCount
operator|.
name|put
argument_list|(
literal|"prefix_addd"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|termsAndDocCount
operator|.
name|put
argument_list|(
literal|"prefix_abaa"
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|termsAndDocCount
operator|.
name|put
argument_list|(
literal|"prefix_dbca"
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|termsAndDocCount
operator|.
name|put
argument_list|(
literal|"prefix_cbad"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|termsAndDocCount
operator|.
name|put
argument_list|(
literal|"prefix_aacd"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|termsAndDocCount
operator|.
name|put
argument_list|(
literal|"prefix_abcc"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|termsAndDocCount
operator|.
name|put
argument_list|(
literal|"prefix_accd"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|entry
range|:
name|termsAndDocCount
operator|.
name|entrySet
argument_list|()
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|entry
operator|.
name|getValue
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|index
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
operator|+
name|i
argument_list|,
literal|"field1"
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|refresh
argument_list|()
expr_stmt|;
name|Suggest
name|suggest
init|=
name|searchSuggest
argument_list|(
name|client
argument_list|()
argument_list|,
literal|"prefix_abcd"
argument_list|,
name|termSuggestion
argument_list|(
literal|"size3SortScoreFirst"
argument_list|)
operator|.
name|size
argument_list|(
literal|3
argument_list|)
operator|.
name|minDocFreq
argument_list|(
literal|0
argument_list|)
operator|.
name|field
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|suggestMode
argument_list|(
literal|"always"
argument_list|)
argument_list|,
name|termSuggestion
argument_list|(
literal|"size10SortScoreFirst"
argument_list|)
operator|.
name|size
argument_list|(
literal|10
argument_list|)
operator|.
name|minDocFreq
argument_list|(
literal|0
argument_list|)
operator|.
name|field
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|suggestMode
argument_list|(
literal|"always"
argument_list|)
operator|.
name|shardSize
argument_list|(
literal|50
argument_list|)
argument_list|,
name|termSuggestion
argument_list|(
literal|"size3SortScoreFirstMaxEdits1"
argument_list|)
operator|.
name|maxEdits
argument_list|(
literal|1
argument_list|)
operator|.
name|size
argument_list|(
literal|10
argument_list|)
operator|.
name|minDocFreq
argument_list|(
literal|0
argument_list|)
operator|.
name|field
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|suggestMode
argument_list|(
literal|"always"
argument_list|)
argument_list|,
name|termSuggestion
argument_list|(
literal|"size10SortFrequencyFirst"
argument_list|)
operator|.
name|size
argument_list|(
literal|10
argument_list|)
operator|.
name|sort
argument_list|(
literal|"frequency"
argument_list|)
operator|.
name|shardSize
argument_list|(
literal|1000
argument_list|)
operator|.
name|minDocFreq
argument_list|(
literal|0
argument_list|)
operator|.
name|field
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|suggestMode
argument_list|(
literal|"always"
argument_list|)
argument_list|)
decl_stmt|;
comment|// The commented out assertions fail sometimes because suggestions are based off of shard frequencies instead of index frequencies.
name|assertSuggestion
argument_list|(
name|suggest
argument_list|,
literal|0
argument_list|,
literal|"size3SortScoreFirst"
argument_list|,
literal|"prefix_aacd"
argument_list|,
literal|"prefix_abcc"
argument_list|,
literal|"prefix_accd"
argument_list|)
expr_stmt|;
name|assertSuggestion
argument_list|(
name|suggest
argument_list|,
literal|0
argument_list|,
literal|"size10SortScoreFirst"
argument_list|,
literal|10
argument_list|,
literal|"prefix_aacd"
argument_list|,
literal|"prefix_abcc"
argument_list|,
literal|"prefix_accd"
comment|/*, "prefix_aaad" */
argument_list|)
expr_stmt|;
name|assertSuggestion
argument_list|(
name|suggest
argument_list|,
literal|0
argument_list|,
literal|"size3SortScoreFirstMaxEdits1"
argument_list|,
literal|"prefix_aacd"
argument_list|,
literal|"prefix_abcc"
argument_list|,
literal|"prefix_accd"
argument_list|)
expr_stmt|;
name|assertSuggestion
argument_list|(
name|suggest
argument_list|,
literal|0
argument_list|,
literal|"size10SortFrequencyFirst"
argument_list|,
literal|"prefix_aaad"
argument_list|,
literal|"prefix_abbb"
argument_list|,
literal|"prefix_aaca"
argument_list|,
literal|"prefix_abba"
argument_list|,
literal|"prefix_accc"
argument_list|,
literal|"prefix_addd"
argument_list|,
literal|"prefix_abaa"
argument_list|,
literal|"prefix_dbca"
argument_list|,
literal|"prefix_cbad"
argument_list|,
literal|"prefix_aacd"
argument_list|)
expr_stmt|;
comment|// assertThat(suggest.get(3).getSuggestedWords().get("prefix_abcd").get(4).getTerm(), equalTo("prefix_abcc"));
comment|// assertThat(suggest.get(3).getSuggestedWords().get("prefix_abcd").get(4).getTerm(), equalTo("prefix_accd"));
block|}
annotation|@
name|Test
comment|// see #2817
DECL|method|testStopwordsOnlyPhraseSuggest
specifier|public
name|void
name|testStopwordsOnlyPhraseSuggest
parameter_list|()
throws|throws
name|ElasticSearchException
throws|,
name|IOException
block|{
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
literal|1
argument_list|,
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
literal|0
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|index
argument_list|(
literal|"test"
argument_list|,
literal|"typ1"
argument_list|,
literal|"1"
argument_list|,
literal|"body"
argument_list|,
literal|"this is a test"
argument_list|)
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|Suggest
name|searchSuggest
init|=
name|searchSuggest
argument_list|(
name|client
argument_list|()
argument_list|,
literal|"a an the"
argument_list|,
name|phraseSuggestion
argument_list|(
literal|"simple_phrase"
argument_list|)
operator|.
name|field
argument_list|(
literal|"body"
argument_list|)
operator|.
name|gramSize
argument_list|(
literal|1
argument_list|)
operator|.
name|addCandidateGenerator
argument_list|(
name|PhraseSuggestionBuilder
operator|.
name|candidateGenerator
argument_list|(
literal|"body"
argument_list|)
operator|.
name|minWordLength
argument_list|(
literal|1
argument_list|)
operator|.
name|suggestMode
argument_list|(
literal|"always"
argument_list|)
argument_list|)
operator|.
name|size
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|assertSuggestionSize
argument_list|(
name|searchSuggest
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"simple_phrase"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPrefixLength
specifier|public
name|void
name|testPrefixLength
parameter_list|()
throws|throws
name|ElasticSearchException
throws|,
name|IOException
block|{
comment|// Stopped here
name|CreateIndexRequestBuilder
name|builder
init|=
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
literal|0
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.analyzer.reverse.tokenizer"
argument_list|,
literal|"standard"
argument_list|)
operator|.
name|putArray
argument_list|(
literal|"index.analysis.analyzer.reverse.filter"
argument_list|,
literal|"lowercase"
argument_list|,
literal|"reverse"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.analyzer.body.tokenizer"
argument_list|,
literal|"standard"
argument_list|)
operator|.
name|putArray
argument_list|(
literal|"index.analysis.analyzer.body.filter"
argument_list|,
literal|"lowercase"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.analyzer.bigram.tokenizer"
argument_list|,
literal|"standard"
argument_list|)
operator|.
name|putArray
argument_list|(
literal|"index.analysis.analyzer.bigram.filter"
argument_list|,
literal|"my_shingle"
argument_list|,
literal|"lowercase"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.my_shingle.type"
argument_list|,
literal|"shingle"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.my_shingle.output_unigrams"
argument_list|,
literal|false
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.my_shingle.min_shingle_size"
argument_list|,
literal|2
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.my_shingle.max_shingle_size"
argument_list|,
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|XContentBuilder
name|mapping
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"_all"
argument_list|)
operator|.
name|field
argument_list|(
literal|"store"
argument_list|,
literal|"yes"
argument_list|)
operator|.
name|field
argument_list|(
literal|"termVector"
argument_list|,
literal|"with_positions_offsets"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"body"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
literal|"body"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"body_reverse"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
literal|"reverse"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"bigram"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
literal|"bigram"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|assertAcked
argument_list|(
name|builder
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
name|mapping
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|index
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|,
literal|"body"
argument_list|,
literal|"hello world"
argument_list|)
expr_stmt|;
name|index
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"2"
argument_list|,
literal|"body"
argument_list|,
literal|"hello world"
argument_list|)
expr_stmt|;
name|index
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"3"
argument_list|,
literal|"body"
argument_list|,
literal|"hello words"
argument_list|)
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|Suggest
name|searchSuggest
init|=
name|searchSuggest
argument_list|(
name|client
argument_list|()
argument_list|,
literal|"hello word"
argument_list|,
name|phraseSuggestion
argument_list|(
literal|"simple_phrase"
argument_list|)
operator|.
name|field
argument_list|(
literal|"body"
argument_list|)
operator|.
name|addCandidateGenerator
argument_list|(
name|PhraseSuggestionBuilder
operator|.
name|candidateGenerator
argument_list|(
literal|"body"
argument_list|)
operator|.
name|prefixLength
argument_list|(
literal|4
argument_list|)
operator|.
name|minWordLength
argument_list|(
literal|1
argument_list|)
operator|.
name|suggestMode
argument_list|(
literal|"always"
argument_list|)
argument_list|)
operator|.
name|size
argument_list|(
literal|1
argument_list|)
operator|.
name|confidence
argument_list|(
literal|1.0f
argument_list|)
argument_list|)
decl_stmt|;
name|assertSuggestion
argument_list|(
name|searchSuggest
argument_list|,
literal|0
argument_list|,
literal|"simple_phrase"
argument_list|,
literal|"hello words"
argument_list|)
expr_stmt|;
name|searchSuggest
operator|=
name|searchSuggest
argument_list|(
name|client
argument_list|()
argument_list|,
literal|"hello word"
argument_list|,
name|phraseSuggestion
argument_list|(
literal|"simple_phrase"
argument_list|)
operator|.
name|field
argument_list|(
literal|"body"
argument_list|)
operator|.
name|addCandidateGenerator
argument_list|(
name|PhraseSuggestionBuilder
operator|.
name|candidateGenerator
argument_list|(
literal|"body"
argument_list|)
operator|.
name|prefixLength
argument_list|(
literal|2
argument_list|)
operator|.
name|minWordLength
argument_list|(
literal|1
argument_list|)
operator|.
name|suggestMode
argument_list|(
literal|"always"
argument_list|)
argument_list|)
operator|.
name|size
argument_list|(
literal|1
argument_list|)
operator|.
name|confidence
argument_list|(
literal|1.0f
argument_list|)
argument_list|)
expr_stmt|;
name|assertSuggestion
argument_list|(
name|searchSuggest
argument_list|,
literal|0
argument_list|,
literal|"simple_phrase"
argument_list|,
literal|"hello world"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Slow
DECL|method|testMarvelHerosPhraseSuggest
specifier|public
name|void
name|testMarvelHerosPhraseSuggest
parameter_list|()
throws|throws
name|ElasticSearchException
throws|,
name|IOException
block|{
name|CreateIndexRequestBuilder
name|builder
init|=
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.analysis.analyzer.reverse.tokenizer"
argument_list|,
literal|"standard"
argument_list|)
operator|.
name|putArray
argument_list|(
literal|"index.analysis.analyzer.reverse.filter"
argument_list|,
literal|"lowercase"
argument_list|,
literal|"reverse"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.analyzer.body.tokenizer"
argument_list|,
literal|"standard"
argument_list|)
operator|.
name|putArray
argument_list|(
literal|"index.analysis.analyzer.body.filter"
argument_list|,
literal|"lowercase"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.analyzer.bigram.tokenizer"
argument_list|,
literal|"standard"
argument_list|)
operator|.
name|putArray
argument_list|(
literal|"index.analysis.analyzer.bigram.filter"
argument_list|,
literal|"my_shingle"
argument_list|,
literal|"lowercase"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.my_shingle.type"
argument_list|,
literal|"shingle"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.my_shingle.output_unigrams"
argument_list|,
literal|false
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.my_shingle.min_shingle_size"
argument_list|,
literal|2
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.my_shingle.max_shingle_size"
argument_list|,
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|XContentBuilder
name|mapping
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"_all"
argument_list|)
operator|.
name|field
argument_list|(
literal|"store"
argument_list|,
literal|"yes"
argument_list|)
operator|.
name|field
argument_list|(
literal|"termVector"
argument_list|,
literal|"with_positions_offsets"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"body"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
literal|"body"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"body_reverse"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
literal|"reverse"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"bigram"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
literal|"bigram"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|ElasticsearchAssertions
operator|.
name|assertAcked
argument_list|(
name|builder
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
name|mapping
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|line
range|:
name|Resources
operator|.
name|readLines
argument_list|(
name|SuggestSearchTests
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"/config/names.txt"
argument_list|)
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
control|)
block|{
name|index
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
name|line
argument_list|,
literal|"body"
argument_list|,
name|line
argument_list|,
literal|"body_reverse"
argument_list|,
name|line
argument_list|,
literal|"bigram"
argument_list|,
name|line
argument_list|)
expr_stmt|;
block|}
name|refresh
argument_list|()
expr_stmt|;
name|PhraseSuggestionBuilder
name|phraseSuggest
init|=
name|phraseSuggestion
argument_list|(
literal|"simple_phrase"
argument_list|)
operator|.
name|field
argument_list|(
literal|"bigram"
argument_list|)
operator|.
name|gramSize
argument_list|(
literal|2
argument_list|)
operator|.
name|analyzer
argument_list|(
literal|"body"
argument_list|)
operator|.
name|addCandidateGenerator
argument_list|(
name|candidateGenerator
argument_list|(
literal|"body"
argument_list|)
operator|.
name|minWordLength
argument_list|(
literal|1
argument_list|)
operator|.
name|suggestMode
argument_list|(
literal|"always"
argument_list|)
argument_list|)
operator|.
name|size
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Suggest
name|searchSuggest
init|=
name|searchSuggest
argument_list|(
name|client
argument_list|()
argument_list|,
literal|"american ame"
argument_list|,
name|phraseSuggest
argument_list|)
decl_stmt|;
name|assertSuggestion
argument_list|(
name|searchSuggest
argument_list|,
literal|0
argument_list|,
literal|"simple_phrase"
argument_list|,
literal|"american ace"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchSuggest
operator|.
name|getSuggestion
argument_list|(
literal|"simple_phrase"
argument_list|)
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getText
argument_list|()
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"american ame"
argument_list|)
argument_list|)
expr_stmt|;
name|phraseSuggest
operator|.
name|realWordErrorLikelihood
argument_list|(
literal|0.95f
argument_list|)
expr_stmt|;
name|searchSuggest
operator|=
name|searchSuggest
argument_list|(
name|client
argument_list|()
argument_list|,
literal|"Xor the Got-Jewel"
argument_list|,
name|phraseSuggest
argument_list|)
expr_stmt|;
name|assertSuggestion
argument_list|(
name|searchSuggest
argument_list|,
literal|0
argument_list|,
literal|"simple_phrase"
argument_list|,
literal|"xorr the god jewel"
argument_list|)
expr_stmt|;
comment|// Check the "text" field this one time.
name|assertThat
argument_list|(
name|searchSuggest
operator|.
name|getSuggestion
argument_list|(
literal|"simple_phrase"
argument_list|)
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getText
argument_list|()
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"Xor the Got-Jewel"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Ask for highlighting
name|phraseSuggest
operator|.
name|highlight
argument_list|(
literal|"<em>"
argument_list|,
literal|"</em>"
argument_list|)
expr_stmt|;
name|searchSuggest
operator|=
name|searchSuggest
argument_list|(
name|client
argument_list|()
argument_list|,
literal|"Xor the Got-Jewel"
argument_list|,
name|phraseSuggest
argument_list|)
expr_stmt|;
name|assertSuggestion
argument_list|(
name|searchSuggest
argument_list|,
literal|0
argument_list|,
literal|"simple_phrase"
argument_list|,
literal|"xorr the god jewel"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchSuggest
operator|.
name|getSuggestion
argument_list|(
literal|"simple_phrase"
argument_list|)
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getOptions
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getHighlighted
argument_list|()
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"<em>xorr</em> the<em>god</em> jewel"
argument_list|)
argument_list|)
expr_stmt|;
comment|// pass in a correct phrase
name|phraseSuggest
operator|.
name|highlight
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
operator|.
name|confidence
argument_list|(
literal|0f
argument_list|)
operator|.
name|size
argument_list|(
literal|1
argument_list|)
operator|.
name|maxErrors
argument_list|(
literal|0.5f
argument_list|)
expr_stmt|;
name|searchSuggest
operator|=
name|searchSuggest
argument_list|(
name|client
argument_list|()
argument_list|,
literal|"Xorr the God-Jewel"
argument_list|,
name|phraseSuggest
argument_list|)
expr_stmt|;
name|assertSuggestion
argument_list|(
name|searchSuggest
argument_list|,
literal|0
argument_list|,
literal|"simple_phrase"
argument_list|,
literal|"xorr the god jewel"
argument_list|)
expr_stmt|;
comment|// pass in a correct phrase - set confidence to 2
name|phraseSuggest
operator|.
name|confidence
argument_list|(
literal|2f
argument_list|)
expr_stmt|;
name|searchSuggest
operator|=
name|searchSuggest
argument_list|(
name|client
argument_list|()
argument_list|,
literal|"Xorr the God-Jewel"
argument_list|,
name|phraseSuggest
argument_list|)
expr_stmt|;
name|assertSuggestionSize
argument_list|(
name|searchSuggest
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"simple_phrase"
argument_list|)
expr_stmt|;
comment|// pass in a correct phrase - set confidence to 0.99
name|phraseSuggest
operator|.
name|confidence
argument_list|(
literal|0.99f
argument_list|)
expr_stmt|;
name|searchSuggest
operator|=
name|searchSuggest
argument_list|(
name|client
argument_list|()
argument_list|,
literal|"Xorr the God-Jewel"
argument_list|,
name|phraseSuggest
argument_list|)
expr_stmt|;
name|assertSuggestion
argument_list|(
name|searchSuggest
argument_list|,
literal|0
argument_list|,
literal|"simple_phrase"
argument_list|,
literal|"xorr the god jewel"
argument_list|)
expr_stmt|;
comment|//test reverse suggestions with pre& post filter
name|phraseSuggest
operator|.
name|addCandidateGenerator
argument_list|(
name|candidateGenerator
argument_list|(
literal|"body"
argument_list|)
operator|.
name|minWordLength
argument_list|(
literal|1
argument_list|)
operator|.
name|suggestMode
argument_list|(
literal|"always"
argument_list|)
argument_list|)
operator|.
name|addCandidateGenerator
argument_list|(
name|candidateGenerator
argument_list|(
literal|"body_reverse"
argument_list|)
operator|.
name|minWordLength
argument_list|(
literal|1
argument_list|)
operator|.
name|suggestMode
argument_list|(
literal|"always"
argument_list|)
operator|.
name|preFilter
argument_list|(
literal|"reverse"
argument_list|)
operator|.
name|postFilter
argument_list|(
literal|"reverse"
argument_list|)
argument_list|)
expr_stmt|;
name|searchSuggest
operator|=
name|searchSuggest
argument_list|(
name|client
argument_list|()
argument_list|,
literal|"xor the yod-Jewel"
argument_list|,
name|phraseSuggest
argument_list|)
expr_stmt|;
name|assertSuggestion
argument_list|(
name|searchSuggest
argument_list|,
literal|0
argument_list|,
literal|"simple_phrase"
argument_list|,
literal|"xorr the god jewel"
argument_list|)
expr_stmt|;
comment|// set all mass to trigrams (not indexed)
name|phraseSuggest
operator|.
name|clearCandidateGenerators
argument_list|()
operator|.
name|addCandidateGenerator
argument_list|(
name|candidateGenerator
argument_list|(
literal|"body"
argument_list|)
operator|.
name|minWordLength
argument_list|(
literal|1
argument_list|)
operator|.
name|suggestMode
argument_list|(
literal|"always"
argument_list|)
argument_list|)
operator|.
name|smoothingModel
argument_list|(
operator|new
name|PhraseSuggestionBuilder
operator|.
name|LinearInterpolation
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|searchSuggest
operator|=
name|searchSuggest
argument_list|(
name|client
argument_list|()
argument_list|,
literal|"Xor the Got-Jewel"
argument_list|,
name|phraseSuggest
argument_list|)
expr_stmt|;
name|assertSuggestionSize
argument_list|(
name|searchSuggest
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"simple_phrase"
argument_list|)
expr_stmt|;
comment|// set all mass to bigrams
name|phraseSuggest
operator|.
name|smoothingModel
argument_list|(
operator|new
name|PhraseSuggestionBuilder
operator|.
name|LinearInterpolation
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|searchSuggest
operator|=
name|searchSuggest
argument_list|(
name|client
argument_list|()
argument_list|,
literal|"Xor the Got-Jewel"
argument_list|,
name|phraseSuggest
argument_list|)
expr_stmt|;
name|assertSuggestion
argument_list|(
name|searchSuggest
argument_list|,
literal|0
argument_list|,
literal|"simple_phrase"
argument_list|,
literal|"xorr the god jewel"
argument_list|)
expr_stmt|;
comment|// distribute mass
name|phraseSuggest
operator|.
name|smoothingModel
argument_list|(
operator|new
name|PhraseSuggestionBuilder
operator|.
name|LinearInterpolation
argument_list|(
literal|0.4
argument_list|,
literal|0.4
argument_list|,
literal|0.2
argument_list|)
argument_list|)
expr_stmt|;
name|searchSuggest
operator|=
name|searchSuggest
argument_list|(
name|client
argument_list|()
argument_list|,
literal|"Xor the Got-Jewel"
argument_list|,
name|phraseSuggest
argument_list|)
expr_stmt|;
name|assertSuggestion
argument_list|(
name|searchSuggest
argument_list|,
literal|0
argument_list|,
literal|"simple_phrase"
argument_list|,
literal|"xorr the god jewel"
argument_list|)
expr_stmt|;
name|searchSuggest
operator|=
name|searchSuggest
argument_list|(
name|client
argument_list|()
argument_list|,
literal|"american ame"
argument_list|,
name|phraseSuggest
argument_list|)
expr_stmt|;
name|assertSuggestion
argument_list|(
name|searchSuggest
argument_list|,
literal|0
argument_list|,
literal|"simple_phrase"
argument_list|,
literal|"american ace"
argument_list|)
expr_stmt|;
comment|// try all smoothing methods
name|phraseSuggest
operator|.
name|smoothingModel
argument_list|(
operator|new
name|PhraseSuggestionBuilder
operator|.
name|LinearInterpolation
argument_list|(
literal|0.4
argument_list|,
literal|0.4
argument_list|,
literal|0.2
argument_list|)
argument_list|)
expr_stmt|;
name|searchSuggest
operator|=
name|searchSuggest
argument_list|(
name|client
argument_list|()
argument_list|,
literal|"Xor the Got-Jewel"
argument_list|,
name|phraseSuggest
argument_list|)
expr_stmt|;
name|assertSuggestion
argument_list|(
name|searchSuggest
argument_list|,
literal|0
argument_list|,
literal|"simple_phrase"
argument_list|,
literal|"xorr the god jewel"
argument_list|)
expr_stmt|;
name|phraseSuggest
operator|.
name|smoothingModel
argument_list|(
operator|new
name|PhraseSuggestionBuilder
operator|.
name|Laplace
argument_list|(
literal|0.2
argument_list|)
argument_list|)
expr_stmt|;
name|searchSuggest
operator|=
name|searchSuggest
argument_list|(
name|client
argument_list|()
argument_list|,
literal|"Xor the Got-Jewel"
argument_list|,
name|phraseSuggest
argument_list|)
expr_stmt|;
name|assertSuggestion
argument_list|(
name|searchSuggest
argument_list|,
literal|0
argument_list|,
literal|"simple_phrase"
argument_list|,
literal|"xorr the god jewel"
argument_list|)
expr_stmt|;
name|phraseSuggest
operator|.
name|smoothingModel
argument_list|(
operator|new
name|PhraseSuggestionBuilder
operator|.
name|StupidBackoff
argument_list|(
literal|0.1
argument_list|)
argument_list|)
expr_stmt|;
name|searchSuggest
operator|=
name|searchSuggest
argument_list|(
name|client
argument_list|()
argument_list|,
literal|"Xor the Got-Jewel"
argument_list|,
name|phraseSuggest
argument_list|)
expr_stmt|;
name|assertSuggestion
argument_list|(
name|searchSuggest
argument_list|,
literal|0
argument_list|,
literal|"simple_phrase"
argument_list|,
literal|"xorr the god jewel"
argument_list|)
expr_stmt|;
comment|// check tokenLimit
name|phraseSuggest
operator|.
name|smoothingModel
argument_list|(
literal|null
argument_list|)
operator|.
name|tokenLimit
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|searchSuggest
operator|=
name|searchSuggest
argument_list|(
name|client
argument_list|()
argument_list|,
literal|"Xor the Got-Jewel"
argument_list|,
name|phraseSuggest
argument_list|)
expr_stmt|;
name|assertSuggestionSize
argument_list|(
name|searchSuggest
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"simple_phrase"
argument_list|)
expr_stmt|;
name|phraseSuggest
operator|.
name|tokenLimit
argument_list|(
literal|15
argument_list|)
operator|.
name|smoothingModel
argument_list|(
operator|new
name|PhraseSuggestionBuilder
operator|.
name|StupidBackoff
argument_list|(
literal|0.1
argument_list|)
argument_list|)
expr_stmt|;
name|searchSuggest
operator|=
name|searchSuggest
argument_list|(
name|client
argument_list|()
argument_list|,
literal|"Xor the Got-Jewel Xor the Got-Jewel Xor the Got-Jewel"
argument_list|,
name|phraseSuggest
argument_list|)
expr_stmt|;
name|assertSuggestion
argument_list|(
name|searchSuggest
argument_list|,
literal|0
argument_list|,
literal|"simple_phrase"
argument_list|,
literal|"xorr the god jewel xorr the god jewel xorr the god jewel"
argument_list|)
expr_stmt|;
comment|// Check the name this time because we're repeating it which is funky
name|assertThat
argument_list|(
name|searchSuggest
operator|.
name|getSuggestion
argument_list|(
literal|"simple_phrase"
argument_list|)
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getText
argument_list|()
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"Xor the Got-Jewel Xor the Got-Jewel Xor the Got-Jewel"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSizePararm
specifier|public
name|void
name|testSizePararm
parameter_list|()
throws|throws
name|IOException
block|{
name|CreateIndexRequestBuilder
name|builder
init|=
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
literal|1
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.analyzer.reverse.tokenizer"
argument_list|,
literal|"standard"
argument_list|)
operator|.
name|putArray
argument_list|(
literal|"index.analysis.analyzer.reverse.filter"
argument_list|,
literal|"lowercase"
argument_list|,
literal|"reverse"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.analyzer.body.tokenizer"
argument_list|,
literal|"standard"
argument_list|)
operator|.
name|putArray
argument_list|(
literal|"index.analysis.analyzer.body.filter"
argument_list|,
literal|"lowercase"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.analyzer.bigram.tokenizer"
argument_list|,
literal|"standard"
argument_list|)
operator|.
name|putArray
argument_list|(
literal|"index.analysis.analyzer.bigram.filter"
argument_list|,
literal|"my_shingle"
argument_list|,
literal|"lowercase"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.my_shingle.type"
argument_list|,
literal|"shingle"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.my_shingle.output_unigrams"
argument_list|,
literal|false
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.my_shingle.min_shingle_size"
argument_list|,
literal|2
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.my_shingle.max_shingle_size"
argument_list|,
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|XContentBuilder
name|mapping
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"_all"
argument_list|)
operator|.
name|field
argument_list|(
literal|"store"
argument_list|,
literal|"yes"
argument_list|)
operator|.
name|field
argument_list|(
literal|"termVector"
argument_list|,
literal|"with_positions_offsets"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"body"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
literal|"body"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"body_reverse"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
literal|"reverse"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"bigram"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
literal|"bigram"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|assertAcked
argument_list|(
name|builder
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
name|mapping
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|String
name|line
init|=
literal|"xorr the god jewel"
decl_stmt|;
name|index
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|,
literal|"body"
argument_list|,
name|line
argument_list|,
literal|"body_reverse"
argument_list|,
name|line
argument_list|,
literal|"bigram"
argument_list|,
name|line
argument_list|)
expr_stmt|;
name|line
operator|=
literal|"I got it this time"
expr_stmt|;
name|index
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"2"
argument_list|,
literal|"body"
argument_list|,
name|line
argument_list|,
literal|"body_reverse"
argument_list|,
name|line
argument_list|,
literal|"bigram"
argument_list|,
name|line
argument_list|)
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|PhraseSuggestionBuilder
name|phraseSuggestion
init|=
name|phraseSuggestion
argument_list|(
literal|"simple_phrase"
argument_list|)
operator|.
name|realWordErrorLikelihood
argument_list|(
literal|0.95f
argument_list|)
operator|.
name|field
argument_list|(
literal|"bigram"
argument_list|)
operator|.
name|gramSize
argument_list|(
literal|2
argument_list|)
operator|.
name|analyzer
argument_list|(
literal|"body"
argument_list|)
operator|.
name|addCandidateGenerator
argument_list|(
name|candidateGenerator
argument_list|(
literal|"body"
argument_list|)
operator|.
name|minWordLength
argument_list|(
literal|1
argument_list|)
operator|.
name|prefixLength
argument_list|(
literal|1
argument_list|)
operator|.
name|suggestMode
argument_list|(
literal|"always"
argument_list|)
operator|.
name|size
argument_list|(
literal|1
argument_list|)
operator|.
name|accuracy
argument_list|(
literal|0.1f
argument_list|)
argument_list|)
operator|.
name|smoothingModel
argument_list|(
operator|new
name|PhraseSuggestionBuilder
operator|.
name|StupidBackoff
argument_list|(
literal|0.1
argument_list|)
argument_list|)
operator|.
name|maxErrors
argument_list|(
literal|1.0f
argument_list|)
operator|.
name|size
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|Suggest
name|searchSuggest
init|=
name|searchSuggest
argument_list|(
name|client
argument_list|()
argument_list|,
literal|"Xorr the Gut-Jewel"
argument_list|,
name|phraseSuggestion
argument_list|)
decl_stmt|;
name|assertSuggestionSize
argument_list|(
name|searchSuggest
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"simple_phrase"
argument_list|)
expr_stmt|;
comment|// we allow a size of 2 now on the shard generator level so "god" will be found since it's LD2
name|phraseSuggestion
operator|.
name|clearCandidateGenerators
argument_list|()
operator|.
name|addCandidateGenerator
argument_list|(
name|candidateGenerator
argument_list|(
literal|"body"
argument_list|)
operator|.
name|minWordLength
argument_list|(
literal|1
argument_list|)
operator|.
name|prefixLength
argument_list|(
literal|1
argument_list|)
operator|.
name|suggestMode
argument_list|(
literal|"always"
argument_list|)
operator|.
name|size
argument_list|(
literal|2
argument_list|)
operator|.
name|accuracy
argument_list|(
literal|0.1f
argument_list|)
argument_list|)
expr_stmt|;
name|searchSuggest
operator|=
name|searchSuggest
argument_list|(
name|client
argument_list|()
argument_list|,
literal|"Xorr the Gut-Jewel"
argument_list|,
name|phraseSuggestion
argument_list|)
expr_stmt|;
name|assertSuggestion
argument_list|(
name|searchSuggest
argument_list|,
literal|0
argument_list|,
literal|"simple_phrase"
argument_list|,
literal|"xorr the god jewel"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPhraseBoundaryCases
specifier|public
name|void
name|testPhraseBoundaryCases
parameter_list|()
throws|throws
name|ElasticSearchException
throws|,
name|IOException
block|{
name|CreateIndexRequestBuilder
name|builder
init|=
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.analysis.analyzer.body.tokenizer"
argument_list|,
literal|"standard"
argument_list|)
operator|.
name|putArray
argument_list|(
literal|"index.analysis.analyzer.body.filter"
argument_list|,
literal|"lowercase"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.analyzer.bigram.tokenizer"
argument_list|,
literal|"standard"
argument_list|)
operator|.
name|putArray
argument_list|(
literal|"index.analysis.analyzer.bigram.filter"
argument_list|,
literal|"my_shingle"
argument_list|,
literal|"lowercase"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.analyzer.ngram.tokenizer"
argument_list|,
literal|"standard"
argument_list|)
operator|.
name|putArray
argument_list|(
literal|"index.analysis.analyzer.ngram.filter"
argument_list|,
literal|"my_shingle2"
argument_list|,
literal|"lowercase"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.analyzer.myDefAnalyzer.tokenizer"
argument_list|,
literal|"standard"
argument_list|)
operator|.
name|putArray
argument_list|(
literal|"index.analysis.analyzer.myDefAnalyzer.filter"
argument_list|,
literal|"shingle"
argument_list|,
literal|"lowercase"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.my_shingle.type"
argument_list|,
literal|"shingle"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.my_shingle.output_unigrams"
argument_list|,
literal|false
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.my_shingle.min_shingle_size"
argument_list|,
literal|2
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.my_shingle.max_shingle_size"
argument_list|,
literal|2
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.my_shingle2.type"
argument_list|,
literal|"shingle"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.my_shingle2.output_unigrams"
argument_list|,
literal|true
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.my_shingle2.min_shingle_size"
argument_list|,
literal|2
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.my_shingle2.max_shingle_size"
argument_list|,
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|XContentBuilder
name|mapping
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"_all"
argument_list|)
operator|.
name|field
argument_list|(
literal|"store"
argument_list|,
literal|"yes"
argument_list|)
operator|.
name|field
argument_list|(
literal|"termVector"
argument_list|,
literal|"with_positions_offsets"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"body"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
literal|"body"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"bigram"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
literal|"bigram"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"ngram"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
literal|"ngram"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|assertAcked
argument_list|(
name|builder
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
name|mapping
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|line
range|:
name|Resources
operator|.
name|readLines
argument_list|(
name|SuggestSearchTests
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"/config/names.txt"
argument_list|)
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
control|)
block|{
name|index
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
name|line
argument_list|,
literal|"body"
argument_list|,
name|line
argument_list|,
literal|"bigram"
argument_list|,
name|line
argument_list|,
literal|"ngram"
argument_list|,
name|line
argument_list|)
expr_stmt|;
block|}
name|refresh
argument_list|()
expr_stmt|;
comment|// Lets make sure some things throw exceptions
name|PhraseSuggestionBuilder
name|phraseSuggestion
init|=
name|phraseSuggestion
argument_list|(
literal|"simple_phrase"
argument_list|)
operator|.
name|field
argument_list|(
literal|"bigram"
argument_list|)
operator|.
name|analyzer
argument_list|(
literal|"body"
argument_list|)
operator|.
name|addCandidateGenerator
argument_list|(
name|candidateGenerator
argument_list|(
literal|"does_not_exist"
argument_list|)
operator|.
name|minWordLength
argument_list|(
literal|1
argument_list|)
operator|.
name|suggestMode
argument_list|(
literal|"always"
argument_list|)
argument_list|)
operator|.
name|realWordErrorLikelihood
argument_list|(
literal|0.95f
argument_list|)
operator|.
name|maxErrors
argument_list|(
literal|0.5f
argument_list|)
operator|.
name|size
argument_list|(
literal|1
argument_list|)
decl_stmt|;
try|try
block|{
name|searchSuggest
argument_list|(
name|client
argument_list|()
argument_list|,
literal|"Xor the Got-Jewel"
argument_list|,
literal|5
argument_list|,
name|phraseSuggestion
argument_list|)
expr_stmt|;
assert|assert
literal|false
operator|:
literal|"field does not exists"
assert|;
block|}
catch|catch
parameter_list|(
name|SearchPhaseExecutionException
name|e
parameter_list|)
block|{}
name|phraseSuggestion
operator|.
name|clearCandidateGenerators
argument_list|()
operator|.
name|analyzer
argument_list|(
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
name|searchSuggest
argument_list|(
name|client
argument_list|()
argument_list|,
literal|"Xor the Got-Jewel"
argument_list|,
literal|5
argument_list|,
name|phraseSuggestion
argument_list|)
expr_stmt|;
assert|assert
literal|false
operator|:
literal|"analyzer does only produce ngrams"
assert|;
block|}
catch|catch
parameter_list|(
name|SearchPhaseExecutionException
name|e
parameter_list|)
block|{         }
name|phraseSuggestion
operator|.
name|analyzer
argument_list|(
literal|"bigram"
argument_list|)
expr_stmt|;
try|try
block|{
name|searchSuggest
argument_list|(
name|client
argument_list|()
argument_list|,
literal|"Xor the Got-Jewel"
argument_list|,
literal|5
argument_list|,
name|phraseSuggestion
argument_list|)
expr_stmt|;
assert|assert
literal|false
operator|:
literal|"analyzer does only produce ngrams"
assert|;
block|}
catch|catch
parameter_list|(
name|SearchPhaseExecutionException
name|e
parameter_list|)
block|{         }
comment|// Now we'll make sure some things don't
name|phraseSuggestion
operator|.
name|forceUnigrams
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|searchSuggest
argument_list|(
name|client
argument_list|()
argument_list|,
literal|"Xor the Got-Jewel"
argument_list|,
name|phraseSuggestion
argument_list|)
expr_stmt|;
comment|// Field doesn't produce unigrams but the analyzer does
name|phraseSuggestion
operator|.
name|forceUnigrams
argument_list|(
literal|true
argument_list|)
operator|.
name|field
argument_list|(
literal|"bigram"
argument_list|)
operator|.
name|analyzer
argument_list|(
literal|"ngram"
argument_list|)
expr_stmt|;
name|searchSuggest
argument_list|(
name|client
argument_list|()
argument_list|,
literal|"Xor the Got-Jewel"
argument_list|,
name|phraseSuggestion
argument_list|)
expr_stmt|;
name|phraseSuggestion
operator|.
name|field
argument_list|(
literal|"ngram"
argument_list|)
operator|.
name|analyzer
argument_list|(
literal|"myDefAnalyzer"
argument_list|)
operator|.
name|addCandidateGenerator
argument_list|(
name|candidateGenerator
argument_list|(
literal|"body"
argument_list|)
operator|.
name|minWordLength
argument_list|(
literal|1
argument_list|)
operator|.
name|suggestMode
argument_list|(
literal|"always"
argument_list|)
argument_list|)
expr_stmt|;
name|Suggest
name|suggest
init|=
name|searchSuggest
argument_list|(
name|client
argument_list|()
argument_list|,
literal|"Xor the Got-Jewel"
argument_list|,
name|phraseSuggestion
argument_list|)
decl_stmt|;
name|assertSuggestion
argument_list|(
name|suggest
argument_list|,
literal|0
argument_list|,
literal|"simple_phrase"
argument_list|,
literal|"xorr the god jewel"
argument_list|)
expr_stmt|;
name|phraseSuggestion
operator|.
name|analyzer
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|suggest
operator|=
name|searchSuggest
argument_list|(
name|client
argument_list|()
argument_list|,
literal|"Xor the Got-Jewel"
argument_list|,
name|phraseSuggestion
argument_list|)
expr_stmt|;
name|assertSuggestion
argument_list|(
name|suggest
argument_list|,
literal|0
argument_list|,
literal|"simple_phrase"
argument_list|,
literal|"xorr the god jewel"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDifferentShardSize
specifier|public
name|void
name|testDifferentShardSize
parameter_list|()
throws|throws
name|Exception
block|{
name|prepareCreate
argument_list|(
literal|"text"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
literal|5
argument_list|)
operator|.
name|put
argument_list|(
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|indexRandom
argument_list|(
literal|"text"
argument_list|,
literal|true
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"text"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"foobar1"
argument_list|)
operator|.
name|setRouting
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"text"
argument_list|,
literal|"type1"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"foobar2"
argument_list|)
operator|.
name|setRouting
argument_list|(
literal|"2"
argument_list|)
argument_list|,
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"text"
argument_list|,
literal|"type1"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"foobar3"
argument_list|)
operator|.
name|setRouting
argument_list|(
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
name|Suggest
name|suggest
init|=
name|searchSuggest
argument_list|(
name|client
argument_list|()
argument_list|,
literal|"foobar"
argument_list|,
name|termSuggestion
argument_list|(
literal|"simple"
argument_list|)
operator|.
name|size
argument_list|(
literal|10
argument_list|)
operator|.
name|minDocFreq
argument_list|(
literal|0
argument_list|)
operator|.
name|field
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|suggestMode
argument_list|(
literal|"always"
argument_list|)
argument_list|)
decl_stmt|;
name|ElasticsearchAssertions
operator|.
name|assertSuggestionSize
argument_list|(
name|suggest
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|,
literal|"simple"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
comment|// see #3469
DECL|method|testShardFailures
specifier|public
name|void
name|testShardFailures
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|CreateIndexRequestBuilder
name|builder
init|=
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
name|between
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
name|between
argument_list|(
literal|0
argument_list|,
name|numberOfNodes
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.analyzer.suggest.tokenizer"
argument_list|,
literal|"standard"
argument_list|)
operator|.
name|putArray
argument_list|(
literal|"index.analysis.analyzer.suggest.filter"
argument_list|,
literal|"standard"
argument_list|,
literal|"lowercase"
argument_list|,
literal|"shingler"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.shingler.type"
argument_list|,
literal|"shingle"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.shingler.min_shingle_size"
argument_list|,
literal|2
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.shingler.max_shingle_size"
argument_list|,
literal|5
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.shingler.output_unigrams"
argument_list|,
literal|true
argument_list|)
argument_list|)
decl_stmt|;
name|XContentBuilder
name|mapping
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"name"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"multi_field"
argument_list|)
operator|.
name|field
argument_list|(
literal|"path"
argument_list|,
literal|"just_name"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"fields"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"name"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
literal|"suggest"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|assertAcked
argument_list|(
name|builder
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
name|mapping
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|index
argument_list|(
literal|"test"
argument_list|,
literal|"type2"
argument_list|,
literal|"1"
argument_list|,
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|index
argument_list|(
literal|"test"
argument_list|,
literal|"type2"
argument_list|,
literal|"2"
argument_list|,
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|index
argument_list|(
literal|"test"
argument_list|,
literal|"type2"
argument_list|,
literal|"3"
argument_list|,
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|index
argument_list|(
literal|"test"
argument_list|,
literal|"type2"
argument_list|,
literal|"4"
argument_list|,
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|index
argument_list|(
literal|"test"
argument_list|,
literal|"type2"
argument_list|,
literal|"5"
argument_list|,
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|index
argument_list|(
literal|"test"
argument_list|,
literal|"type2"
argument_list|,
literal|"1"
argument_list|,
literal|"name"
argument_list|,
literal|"Just testing the suggestions api"
argument_list|)
expr_stmt|;
name|index
argument_list|(
literal|"test"
argument_list|,
literal|"type2"
argument_list|,
literal|"2"
argument_list|,
literal|"name"
argument_list|,
literal|"An other title about equal length"
argument_list|)
expr_stmt|;
comment|// Note that the last document has to have about the same length as the other or cutoff rechecking will remove the useful suggestion.
name|refresh
argument_list|()
expr_stmt|;
comment|// When searching on a shard with a non existing mapping, we should fail
name|SearchRequestBuilder
name|request
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setSearchType
argument_list|(
name|SearchType
operator|.
name|COUNT
argument_list|)
operator|.
name|setSuggestText
argument_list|(
literal|"tetsting sugestion"
argument_list|)
operator|.
name|addSuggestion
argument_list|(
name|phraseSuggestion
argument_list|(
literal|"did_you_mean"
argument_list|)
operator|.
name|field
argument_list|(
literal|"fielddoesnotexist"
argument_list|)
operator|.
name|maxErrors
argument_list|(
literal|5.0f
argument_list|)
argument_list|)
decl_stmt|;
name|assertThrows
argument_list|(
name|request
argument_list|,
name|SearchPhaseExecutionException
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// When searching on a shard which does not hold yet any document of an existing type, we should not fail
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setSearchType
argument_list|(
name|SearchType
operator|.
name|COUNT
argument_list|)
operator|.
name|setSuggestText
argument_list|(
literal|"tetsting sugestion"
argument_list|)
operator|.
name|addSuggestion
argument_list|(
name|phraseSuggestion
argument_list|(
literal|"did_you_mean"
argument_list|)
operator|.
name|field
argument_list|(
literal|"name"
argument_list|)
operator|.
name|maxErrors
argument_list|(
literal|5.0f
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|ElasticsearchAssertions
operator|.
name|assertNoFailures
argument_list|(
name|searchResponse
argument_list|)
expr_stmt|;
name|ElasticsearchAssertions
operator|.
name|assertSuggestion
argument_list|(
name|searchResponse
operator|.
name|getSuggest
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"did_you_mean"
argument_list|,
literal|"testing suggestions"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
comment|// see #3469
DECL|method|testEmptyShards
specifier|public
name|void
name|testEmptyShards
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|XContentBuilder
name|mappingBuilder
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"name"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"multi_field"
argument_list|)
operator|.
name|field
argument_list|(
literal|"path"
argument_list|,
literal|"just_name"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"fields"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"name"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
literal|"suggest"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|ElasticsearchAssertions
operator|.
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
literal|5
argument_list|)
operator|.
name|put
argument_list|(
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
literal|0
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.analyzer.suggest.tokenizer"
argument_list|,
literal|"standard"
argument_list|)
operator|.
name|putArray
argument_list|(
literal|"index.analysis.analyzer.suggest.filter"
argument_list|,
literal|"standard"
argument_list|,
literal|"lowercase"
argument_list|,
literal|"shingler"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.shingler.type"
argument_list|,
literal|"shingle"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.shingler.min_shingle_size"
argument_list|,
literal|2
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.shingler.max_shingle_size"
argument_list|,
literal|5
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.shingler.output_unigrams"
argument_list|,
literal|true
argument_list|)
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
name|mappingBuilder
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|index
argument_list|(
literal|"test"
argument_list|,
literal|"type2"
argument_list|,
literal|"1"
argument_list|,
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|index
argument_list|(
literal|"test"
argument_list|,
literal|"type2"
argument_list|,
literal|"2"
argument_list|,
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|index
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"1"
argument_list|,
literal|"name"
argument_list|,
literal|"Just testing the suggestions api"
argument_list|)
expr_stmt|;
name|index
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
literal|"2"
argument_list|,
literal|"name"
argument_list|,
literal|"An other title about equal length"
argument_list|)
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setSearchType
argument_list|(
name|SearchType
operator|.
name|COUNT
argument_list|)
operator|.
name|setSuggestText
argument_list|(
literal|"tetsting sugestion"
argument_list|)
operator|.
name|addSuggestion
argument_list|(
name|phraseSuggestion
argument_list|(
literal|"did_you_mean"
argument_list|)
operator|.
name|field
argument_list|(
literal|"name"
argument_list|)
operator|.
name|maxErrors
argument_list|(
literal|5.0f
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertNoFailures
argument_list|(
name|searchResponse
argument_list|)
expr_stmt|;
name|assertSuggestion
argument_list|(
name|searchResponse
operator|.
name|getSuggest
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"did_you_mean"
argument_list|,
literal|"testing suggestions"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Searching for a rare phrase shouldn't provide any suggestions if confidence> 1.  This was possible before we rechecked the cutoff      * score during the reduce phase.  Failures don't occur every time - maybe two out of five tries but we don't repeat it to save time.      */
annotation|@
name|Test
DECL|method|testSearchForRarePhrase
specifier|public
name|void
name|testSearchForRarePhrase
parameter_list|()
throws|throws
name|ElasticSearchException
throws|,
name|IOException
block|{
comment|// If there isn't enough chaf per shard then shards can become unbalanced, making the cutoff recheck this is testing do more harm then good.
name|int
name|chafPerShard
init|=
literal|100
decl_stmt|;
name|int
name|numberOfShards
init|=
name|between
argument_list|(
literal|2
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|CreateIndexRequestBuilder
name|builder
init|=
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
name|numberOfShards
argument_list|)
operator|.
name|put
argument_list|(
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
name|between
argument_list|(
literal|0
argument_list|,
name|numberOfNodes
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.analyzer.body.tokenizer"
argument_list|,
literal|"standard"
argument_list|)
operator|.
name|putArray
argument_list|(
literal|"index.analysis.analyzer.body.filter"
argument_list|,
literal|"lowercase"
argument_list|,
literal|"my_shingle"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.my_shingle.type"
argument_list|,
literal|"shingle"
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.my_shingle.output_unigrams"
argument_list|,
literal|true
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.my_shingle.min_shingle_size"
argument_list|,
literal|2
argument_list|)
operator|.
name|put
argument_list|(
literal|"index.analysis.filter.my_shingle.max_shingle_size"
argument_list|,
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|XContentBuilder
name|mapping
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"_all"
argument_list|)
operator|.
name|field
argument_list|(
literal|"store"
argument_list|,
literal|"yes"
argument_list|)
operator|.
name|field
argument_list|(
literal|"termVector"
argument_list|,
literal|"with_positions_offsets"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"body"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
literal|"body"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|assertAcked
argument_list|(
name|builder
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
name|mapping
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|phrases
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Collections
operator|.
name|addAll
argument_list|(
name|phrases
argument_list|,
literal|"nobel prize"
argument_list|,
literal|"noble gases"
argument_list|,
literal|"somethingelse prize"
argument_list|,
literal|"pride and joy"
argument_list|,
literal|"notes are fun"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|8
condition|;
name|i
operator|++
control|)
block|{
name|phrases
operator|.
name|add
argument_list|(
literal|"noble somethingelse"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfShards
operator|*
name|chafPerShard
condition|;
name|i
operator|++
control|)
block|{
name|phrases
operator|.
name|add
argument_list|(
literal|"chaff"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|phrase
range|:
name|phrases
control|)
block|{
name|index
argument_list|(
literal|"test"
argument_list|,
literal|"type1"
argument_list|,
name|phrase
argument_list|,
literal|"body"
argument_list|,
name|phrase
argument_list|)
expr_stmt|;
block|}
name|refresh
argument_list|()
expr_stmt|;
name|Suggest
name|searchSuggest
init|=
name|searchSuggest
argument_list|(
name|client
argument_list|()
argument_list|,
literal|"nobel prize"
argument_list|,
name|phraseSuggestion
argument_list|(
literal|"simple_phrase"
argument_list|)
operator|.
name|field
argument_list|(
literal|"body"
argument_list|)
operator|.
name|addCandidateGenerator
argument_list|(
name|PhraseSuggestionBuilder
operator|.
name|candidateGenerator
argument_list|(
literal|"body"
argument_list|)
operator|.
name|minWordLength
argument_list|(
literal|1
argument_list|)
operator|.
name|suggestMode
argument_list|(
literal|"always"
argument_list|)
operator|.
name|maxTermFreq
argument_list|(
literal|.99f
argument_list|)
argument_list|)
operator|.
name|confidence
argument_list|(
literal|2f
argument_list|)
operator|.
name|maxErrors
argument_list|(
literal|5f
argument_list|)
operator|.
name|size
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|assertSuggestionSize
argument_list|(
name|searchSuggest
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"simple_phrase"
argument_list|)
expr_stmt|;
name|searchSuggest
operator|=
name|searchSuggest
argument_list|(
name|client
argument_list|()
argument_list|,
literal|"noble prize"
argument_list|,
name|phraseSuggestion
argument_list|(
literal|"simple_phrase"
argument_list|)
operator|.
name|field
argument_list|(
literal|"body"
argument_list|)
operator|.
name|addCandidateGenerator
argument_list|(
name|PhraseSuggestionBuilder
operator|.
name|candidateGenerator
argument_list|(
literal|"body"
argument_list|)
operator|.
name|minWordLength
argument_list|(
literal|1
argument_list|)
operator|.
name|suggestMode
argument_list|(
literal|"always"
argument_list|)
operator|.
name|maxTermFreq
argument_list|(
literal|.99f
argument_list|)
argument_list|)
operator|.
name|confidence
argument_list|(
literal|2f
argument_list|)
operator|.
name|maxErrors
argument_list|(
literal|5f
argument_list|)
operator|.
name|size
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertSuggestion
argument_list|(
name|searchSuggest
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"simple_phrase"
argument_list|,
literal|"nobel prize"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|numberOfNodes
specifier|protected
name|int
name|numberOfNodes
parameter_list|()
block|{
return|return
literal|3
return|;
block|}
DECL|method|searchSuggest
specifier|protected
name|Suggest
name|searchSuggest
parameter_list|(
name|Client
name|client
parameter_list|,
name|SuggestionBuilder
argument_list|<
name|?
argument_list|>
modifier|...
name|suggestion
parameter_list|)
block|{
return|return
name|searchSuggest
argument_list|(
name|client
argument_list|()
argument_list|,
literal|null
argument_list|,
name|suggestion
argument_list|)
return|;
block|}
DECL|method|searchSuggest
specifier|protected
name|Suggest
name|searchSuggest
parameter_list|(
name|Client
name|client
parameter_list|,
name|String
name|suggestText
parameter_list|,
name|SuggestionBuilder
argument_list|<
name|?
argument_list|>
modifier|...
name|suggestions
parameter_list|)
block|{
return|return
name|searchSuggest
argument_list|(
name|client
argument_list|()
argument_list|,
name|suggestText
argument_list|,
literal|0
argument_list|,
name|suggestions
argument_list|)
return|;
block|}
DECL|method|searchSuggest
specifier|protected
name|Suggest
name|searchSuggest
parameter_list|(
name|Client
name|client
parameter_list|,
name|String
name|suggestText
parameter_list|,
name|int
name|expectShardsFailed
parameter_list|,
name|SuggestionBuilder
argument_list|<
name|?
argument_list|>
modifier|...
name|suggestions
parameter_list|)
block|{
name|SearchRequestBuilder
name|builder
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setSearchType
argument_list|(
name|SearchType
operator|.
name|COUNT
argument_list|)
decl_stmt|;
if|if
condition|(
name|suggestText
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setSuggestText
argument_list|(
name|suggestText
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|SuggestionBuilder
argument_list|<
name|?
argument_list|>
name|suggestion
range|:
name|suggestions
control|)
block|{
name|builder
operator|.
name|addSuggestion
argument_list|(
name|suggestion
argument_list|)
expr_stmt|;
block|}
name|SearchResponse
name|actionGet
init|=
name|builder
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|Arrays
operator|.
name|toString
argument_list|(
name|actionGet
operator|.
name|getShardFailures
argument_list|()
argument_list|)
argument_list|,
name|actionGet
operator|.
name|getFailedShards
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expectShardsFailed
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|actionGet
operator|.
name|getSuggest
argument_list|()
return|;
block|}
block|}
end_class

end_unit

