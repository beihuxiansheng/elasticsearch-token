begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.suggest.phrase
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|phrase
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Tokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|core
operator|.
name|LowerCaseFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|core
operator|.
name|WhitespaceAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|miscellaneous
operator|.
name|PerFieldAnalyzerWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|reverse
operator|.
name|ReverseStringFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|shingle
operator|.
name|ShingleFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|standard
operator|.
name|StandardTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|synonym
operator|.
name|SolrSynonymParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|synonym
operator|.
name|SynonymFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|TextField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DirectoryReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriterConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|MultiFields
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spell
operator|.
name|DirectSpellChecker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spell
operator|.
name|SuggestMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|RAMDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|phrase
operator|.
name|NoisyChannelSpellChecker
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|greaterThan
import|;
end_import

begin_class
DECL|class|NoisyChannelSpellCheckerTests
specifier|public
class|class
name|NoisyChannelSpellCheckerTests
extends|extends
name|ElasticsearchTestCase
block|{
DECL|field|space
specifier|private
specifier|final
name|BytesRef
name|space
init|=
operator|new
name|BytesRef
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
DECL|field|preTag
specifier|private
specifier|final
name|BytesRef
name|preTag
init|=
operator|new
name|BytesRef
argument_list|(
literal|"<em>"
argument_list|)
decl_stmt|;
DECL|field|postTag
specifier|private
specifier|final
name|BytesRef
name|postTag
init|=
operator|new
name|BytesRef
argument_list|(
literal|"</em>"
argument_list|)
decl_stmt|;
annotation|@
name|Test
DECL|method|testMarvelHeros
specifier|public
name|void
name|testMarvelHeros
parameter_list|()
throws|throws
name|IOException
block|{
name|RAMDirectory
name|dir
init|=
operator|new
name|RAMDirectory
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Analyzer
argument_list|>
name|mapping
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|mapping
operator|.
name|put
argument_list|(
literal|"body_ngram"
argument_list|,
operator|new
name|Analyzer
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|TokenStreamComponents
name|createComponents
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|Reader
name|reader
parameter_list|)
block|{
name|Tokenizer
name|t
init|=
operator|new
name|StandardTokenizer
argument_list|(
name|Version
operator|.
name|LUCENE_41
argument_list|,
name|reader
argument_list|)
decl_stmt|;
name|ShingleFilter
name|tf
init|=
operator|new
name|ShingleFilter
argument_list|(
name|t
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|tf
operator|.
name|setOutputUnigrams
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
operator|new
name|TokenStreamComponents
argument_list|(
name|t
argument_list|,
operator|new
name|LowerCaseFilter
argument_list|(
name|Version
operator|.
name|LUCENE_41
argument_list|,
name|tf
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|mapping
operator|.
name|put
argument_list|(
literal|"body"
argument_list|,
operator|new
name|Analyzer
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|TokenStreamComponents
name|createComponents
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|Reader
name|reader
parameter_list|)
block|{
name|Tokenizer
name|t
init|=
operator|new
name|StandardTokenizer
argument_list|(
name|Version
operator|.
name|LUCENE_41
argument_list|,
name|reader
argument_list|)
decl_stmt|;
return|return
operator|new
name|TokenStreamComponents
argument_list|(
name|t
argument_list|,
operator|new
name|LowerCaseFilter
argument_list|(
name|Version
operator|.
name|LUCENE_41
argument_list|,
name|t
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|PerFieldAnalyzerWrapper
name|wrapper
init|=
operator|new
name|PerFieldAnalyzerWrapper
argument_list|(
operator|new
name|WhitespaceAnalyzer
argument_list|(
name|Version
operator|.
name|LUCENE_41
argument_list|)
argument_list|,
name|mapping
argument_list|)
decl_stmt|;
name|IndexWriterConfig
name|conf
init|=
operator|new
name|IndexWriterConfig
argument_list|(
name|Version
operator|.
name|LUCENE_41
argument_list|,
name|wrapper
argument_list|)
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|NoisyChannelSpellCheckerTests
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/config/names.txt"
argument_list|)
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|line
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"body"
argument_list|,
name|line
argument_list|,
name|TextField
operator|.
name|TYPE_NOT_STORED
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"body_ngram"
argument_list|,
name|line
argument_list|,
name|TextField
operator|.
name|TYPE_NOT_STORED
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|DirectoryReader
name|ir
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|writer
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|WordScorer
name|wordScorer
init|=
operator|new
name|LaplaceScorer
argument_list|(
name|ir
argument_list|,
name|MultiFields
operator|.
name|getTerms
argument_list|(
name|ir
argument_list|,
literal|"body_ngram"
argument_list|)
argument_list|,
literal|"body_ngram"
argument_list|,
literal|0.95d
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|" "
argument_list|)
argument_list|,
literal|0.5f
argument_list|)
decl_stmt|;
name|NoisyChannelSpellChecker
name|suggester
init|=
operator|new
name|NoisyChannelSpellChecker
argument_list|()
decl_stmt|;
name|DirectSpellChecker
name|spellchecker
init|=
operator|new
name|DirectSpellChecker
argument_list|()
decl_stmt|;
name|spellchecker
operator|.
name|setMinQueryLength
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|DirectCandidateGenerator
name|generator
init|=
operator|new
name|DirectCandidateGenerator
argument_list|(
name|spellchecker
argument_list|,
literal|"body"
argument_list|,
name|SuggestMode
operator|.
name|SUGGEST_MORE_POPULAR
argument_list|,
name|ir
argument_list|,
literal|0.95
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|Result
name|result
init|=
name|suggester
operator|.
name|getCorrections
argument_list|(
name|wrapper
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"american ame"
argument_list|)
argument_list|,
name|generator
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|ir
argument_list|,
literal|"body"
argument_list|,
name|wordScorer
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|Correction
index|[]
name|corrections
init|=
name|result
operator|.
name|corrections
decl_stmt|;
name|assertThat
argument_list|(
name|corrections
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|corrections
index|[
literal|0
index|]
operator|.
name|join
argument_list|(
name|space
argument_list|)
operator|.
name|utf8ToString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"american ace"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|corrections
index|[
literal|0
index|]
operator|.
name|join
argument_list|(
name|space
argument_list|,
name|preTag
argument_list|,
name|postTag
argument_list|)
operator|.
name|utf8ToString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"american<em>ace</em>"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|cutoffScore
argument_list|,
name|greaterThan
argument_list|(
literal|0d
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
name|suggester
operator|.
name|getCorrections
argument_list|(
name|wrapper
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"american ame"
argument_list|)
argument_list|,
name|generator
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|ir
argument_list|,
literal|"body"
argument_list|,
name|wordScorer
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|corrections
operator|=
name|result
operator|.
name|corrections
expr_stmt|;
name|assertThat
argument_list|(
name|corrections
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|corrections
index|[
literal|0
index|]
operator|.
name|join
argument_list|(
name|space
argument_list|)
operator|.
name|utf8ToString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"american ame"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|corrections
index|[
literal|0
index|]
operator|.
name|join
argument_list|(
name|space
argument_list|,
name|preTag
argument_list|,
name|postTag
argument_list|)
operator|.
name|utf8ToString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"american ame"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|cutoffScore
argument_list|,
name|equalTo
argument_list|(
name|Double
operator|.
name|MIN_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|suggester
operator|=
operator|new
name|NoisyChannelSpellChecker
argument_list|(
literal|0.85
argument_list|)
expr_stmt|;
name|wordScorer
operator|=
operator|new
name|LaplaceScorer
argument_list|(
name|ir
argument_list|,
name|MultiFields
operator|.
name|getTerms
argument_list|(
name|ir
argument_list|,
literal|"body_ngram"
argument_list|)
argument_list|,
literal|"body_ngram"
argument_list|,
literal|0.85d
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|" "
argument_list|)
argument_list|,
literal|0.5f
argument_list|)
expr_stmt|;
name|corrections
operator|=
name|suggester
operator|.
name|getCorrections
argument_list|(
name|wrapper
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"Xor the Got-Jewel"
argument_list|)
argument_list|,
name|generator
argument_list|,
literal|0.5f
argument_list|,
literal|4
argument_list|,
name|ir
argument_list|,
literal|"body"
argument_list|,
name|wordScorer
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
operator|.
name|corrections
expr_stmt|;
name|assertThat
argument_list|(
name|corrections
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|corrections
index|[
literal|0
index|]
operator|.
name|join
argument_list|(
name|space
argument_list|)
operator|.
name|utf8ToString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"xorr the god jewel"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|corrections
index|[
literal|1
index|]
operator|.
name|join
argument_list|(
name|space
argument_list|)
operator|.
name|utf8ToString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"xor the god jewel"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|corrections
index|[
literal|2
index|]
operator|.
name|join
argument_list|(
name|space
argument_list|)
operator|.
name|utf8ToString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"xorn the god jewel"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|corrections
index|[
literal|3
index|]
operator|.
name|join
argument_list|(
name|space
argument_list|)
operator|.
name|utf8ToString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"xorr the got jewel"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|corrections
index|[
literal|0
index|]
operator|.
name|join
argument_list|(
name|space
argument_list|,
name|preTag
argument_list|,
name|postTag
argument_list|)
operator|.
name|utf8ToString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"<em>xorr</em> the<em>god</em> jewel"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|corrections
index|[
literal|1
index|]
operator|.
name|join
argument_list|(
name|space
argument_list|,
name|preTag
argument_list|,
name|postTag
argument_list|)
operator|.
name|utf8ToString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"xor the<em>god</em> jewel"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|corrections
index|[
literal|2
index|]
operator|.
name|join
argument_list|(
name|space
argument_list|,
name|preTag
argument_list|,
name|postTag
argument_list|)
operator|.
name|utf8ToString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"<em>xorn</em> the<em>god</em> jewel"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|corrections
index|[
literal|3
index|]
operator|.
name|join
argument_list|(
name|space
argument_list|,
name|preTag
argument_list|,
name|postTag
argument_list|)
operator|.
name|utf8ToString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"<em>xorr</em> the got jewel"
argument_list|)
argument_list|)
expr_stmt|;
name|corrections
operator|=
name|suggester
operator|.
name|getCorrections
argument_list|(
name|wrapper
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"Xor the Got-Jewel"
argument_list|)
argument_list|,
name|generator
argument_list|,
literal|0.5f
argument_list|,
literal|4
argument_list|,
name|ir
argument_list|,
literal|"body"
argument_list|,
name|wordScorer
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
operator|.
name|corrections
expr_stmt|;
name|assertThat
argument_list|(
name|corrections
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|corrections
index|[
literal|0
index|]
operator|.
name|join
argument_list|(
name|space
argument_list|)
operator|.
name|utf8ToString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"xorr the god jewel"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|corrections
index|[
literal|1
index|]
operator|.
name|join
argument_list|(
name|space
argument_list|)
operator|.
name|utf8ToString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"xor the god jewel"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|corrections
index|[
literal|2
index|]
operator|.
name|join
argument_list|(
name|space
argument_list|)
operator|.
name|utf8ToString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"xorn the god jewel"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|corrections
index|[
literal|3
index|]
operator|.
name|join
argument_list|(
name|space
argument_list|)
operator|.
name|utf8ToString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"xorr the got jewel"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test some of the highlighting corner cases
name|suggester
operator|=
operator|new
name|NoisyChannelSpellChecker
argument_list|(
literal|0.85
argument_list|)
expr_stmt|;
name|wordScorer
operator|=
operator|new
name|LaplaceScorer
argument_list|(
name|ir
argument_list|,
name|MultiFields
operator|.
name|getTerms
argument_list|(
name|ir
argument_list|,
literal|"body_ngram"
argument_list|)
argument_list|,
literal|"body_ngram"
argument_list|,
literal|0.85d
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|" "
argument_list|)
argument_list|,
literal|0.5f
argument_list|)
expr_stmt|;
name|corrections
operator|=
name|suggester
operator|.
name|getCorrections
argument_list|(
name|wrapper
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"Xor teh Got-Jewel"
argument_list|)
argument_list|,
name|generator
argument_list|,
literal|4f
argument_list|,
literal|4
argument_list|,
name|ir
argument_list|,
literal|"body"
argument_list|,
name|wordScorer
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
operator|.
name|corrections
expr_stmt|;
name|assertThat
argument_list|(
name|corrections
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|corrections
index|[
literal|0
index|]
operator|.
name|join
argument_list|(
name|space
argument_list|)
operator|.
name|utf8ToString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"xorr the god jewel"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|corrections
index|[
literal|1
index|]
operator|.
name|join
argument_list|(
name|space
argument_list|)
operator|.
name|utf8ToString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"xor the god jewel"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|corrections
index|[
literal|2
index|]
operator|.
name|join
argument_list|(
name|space
argument_list|)
operator|.
name|utf8ToString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"xorn the god jewel"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|corrections
index|[
literal|3
index|]
operator|.
name|join
argument_list|(
name|space
argument_list|)
operator|.
name|utf8ToString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"xor teh god jewel"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|corrections
index|[
literal|0
index|]
operator|.
name|join
argument_list|(
name|space
argument_list|,
name|preTag
argument_list|,
name|postTag
argument_list|)
operator|.
name|utf8ToString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"<em>xorr the god</em> jewel"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|corrections
index|[
literal|1
index|]
operator|.
name|join
argument_list|(
name|space
argument_list|,
name|preTag
argument_list|,
name|postTag
argument_list|)
operator|.
name|utf8ToString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"xor<em>the god</em> jewel"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|corrections
index|[
literal|2
index|]
operator|.
name|join
argument_list|(
name|space
argument_list|,
name|preTag
argument_list|,
name|postTag
argument_list|)
operator|.
name|utf8ToString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"<em>xorn the god</em> jewel"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|corrections
index|[
literal|3
index|]
operator|.
name|join
argument_list|(
name|space
argument_list|,
name|preTag
argument_list|,
name|postTag
argument_list|)
operator|.
name|utf8ToString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"xor teh<em>god</em> jewel"
argument_list|)
argument_list|)
expr_stmt|;
comment|// test synonyms
name|Analyzer
name|analyzer
init|=
operator|new
name|Analyzer
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|TokenStreamComponents
name|createComponents
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|Reader
name|reader
parameter_list|)
block|{
name|Tokenizer
name|t
init|=
operator|new
name|StandardTokenizer
argument_list|(
name|Version
operator|.
name|LUCENE_41
argument_list|,
name|reader
argument_list|)
decl_stmt|;
name|TokenFilter
name|filter
init|=
operator|new
name|LowerCaseFilter
argument_list|(
name|Version
operator|.
name|LUCENE_41
argument_list|,
name|t
argument_list|)
decl_stmt|;
try|try
block|{
name|SolrSynonymParser
name|parser
init|=
operator|new
name|SolrSynonymParser
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
operator|new
name|WhitespaceAnalyzer
argument_list|(
name|Version
operator|.
name|LUCENE_41
argument_list|)
argument_list|)
decl_stmt|;
operator|(
operator|(
name|SolrSynonymParser
operator|)
name|parser
operator|)
operator|.
name|parse
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"usa => usa, america, american\nursa => usa, america, american"
argument_list|)
argument_list|)
expr_stmt|;
name|filter
operator|=
operator|new
name|SynonymFilter
argument_list|(
name|filter
argument_list|,
name|parser
operator|.
name|build
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
operator|new
name|TokenStreamComponents
argument_list|(
name|t
argument_list|,
name|filter
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|spellchecker
operator|.
name|setAccuracy
argument_list|(
literal|0.0f
argument_list|)
expr_stmt|;
name|spellchecker
operator|.
name|setMinPrefix
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|spellchecker
operator|.
name|setMinQueryLength
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|suggester
operator|=
operator|new
name|NoisyChannelSpellChecker
argument_list|(
literal|0.85
argument_list|)
expr_stmt|;
name|wordScorer
operator|=
operator|new
name|LaplaceScorer
argument_list|(
name|ir
argument_list|,
name|MultiFields
operator|.
name|getTerms
argument_list|(
name|ir
argument_list|,
literal|"body_ngram"
argument_list|)
argument_list|,
literal|"body_ngram"
argument_list|,
literal|0.85d
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|" "
argument_list|)
argument_list|,
literal|0.5f
argument_list|)
expr_stmt|;
name|corrections
operator|=
name|suggester
operator|.
name|getCorrections
argument_list|(
name|analyzer
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"captian usa"
argument_list|)
argument_list|,
name|generator
argument_list|,
literal|2
argument_list|,
literal|4
argument_list|,
name|ir
argument_list|,
literal|"body"
argument_list|,
name|wordScorer
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
operator|.
name|corrections
expr_stmt|;
name|assertThat
argument_list|(
name|corrections
index|[
literal|0
index|]
operator|.
name|join
argument_list|(
name|space
argument_list|)
operator|.
name|utf8ToString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"captain america"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|corrections
index|[
literal|0
index|]
operator|.
name|join
argument_list|(
name|space
argument_list|,
name|preTag
argument_list|,
name|postTag
argument_list|)
operator|.
name|utf8ToString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"<em>captain america</em>"
argument_list|)
argument_list|)
expr_stmt|;
name|generator
operator|=
operator|new
name|DirectCandidateGenerator
argument_list|(
name|spellchecker
argument_list|,
literal|"body"
argument_list|,
name|SuggestMode
operator|.
name|SUGGEST_MORE_POPULAR
argument_list|,
name|ir
argument_list|,
literal|0.85
argument_list|,
literal|10
argument_list|,
literal|null
argument_list|,
name|analyzer
argument_list|,
name|MultiFields
operator|.
name|getTerms
argument_list|(
name|ir
argument_list|,
literal|"body"
argument_list|)
argument_list|)
expr_stmt|;
name|corrections
operator|=
name|suggester
operator|.
name|getCorrections
argument_list|(
name|analyzer
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"captian usw"
argument_list|)
argument_list|,
name|generator
argument_list|,
literal|2
argument_list|,
literal|4
argument_list|,
name|ir
argument_list|,
literal|"body"
argument_list|,
name|wordScorer
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
operator|.
name|corrections
expr_stmt|;
name|assertThat
argument_list|(
name|corrections
index|[
literal|0
index|]
operator|.
name|join
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|" "
argument_list|)
argument_list|)
operator|.
name|utf8ToString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"captain america"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|corrections
index|[
literal|0
index|]
operator|.
name|join
argument_list|(
name|space
argument_list|,
name|preTag
argument_list|,
name|postTag
argument_list|)
operator|.
name|utf8ToString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"<em>captain america</em>"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Make sure that user supplied text is not marked as highlighted in the presence of a synonym filter
name|generator
operator|=
operator|new
name|DirectCandidateGenerator
argument_list|(
name|spellchecker
argument_list|,
literal|"body"
argument_list|,
name|SuggestMode
operator|.
name|SUGGEST_MORE_POPULAR
argument_list|,
name|ir
argument_list|,
literal|0.85
argument_list|,
literal|10
argument_list|,
literal|null
argument_list|,
name|analyzer
argument_list|,
name|MultiFields
operator|.
name|getTerms
argument_list|(
name|ir
argument_list|,
literal|"body"
argument_list|)
argument_list|)
expr_stmt|;
name|corrections
operator|=
name|suggester
operator|.
name|getCorrections
argument_list|(
name|analyzer
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"captain usw"
argument_list|)
argument_list|,
name|generator
argument_list|,
literal|2
argument_list|,
literal|4
argument_list|,
name|ir
argument_list|,
literal|"body"
argument_list|,
name|wordScorer
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
operator|.
name|corrections
expr_stmt|;
name|assertThat
argument_list|(
name|corrections
index|[
literal|0
index|]
operator|.
name|join
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|" "
argument_list|)
argument_list|)
operator|.
name|utf8ToString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"captain america"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|corrections
index|[
literal|0
index|]
operator|.
name|join
argument_list|(
name|space
argument_list|,
name|preTag
argument_list|,
name|postTag
argument_list|)
operator|.
name|utf8ToString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"captain<em>america</em>"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMarvelHerosMultiGenerator
specifier|public
name|void
name|testMarvelHerosMultiGenerator
parameter_list|()
throws|throws
name|IOException
block|{
name|RAMDirectory
name|dir
init|=
operator|new
name|RAMDirectory
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Analyzer
argument_list|>
name|mapping
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|mapping
operator|.
name|put
argument_list|(
literal|"body_ngram"
argument_list|,
operator|new
name|Analyzer
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|TokenStreamComponents
name|createComponents
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|Reader
name|reader
parameter_list|)
block|{
name|Tokenizer
name|t
init|=
operator|new
name|StandardTokenizer
argument_list|(
name|Version
operator|.
name|LUCENE_41
argument_list|,
name|reader
argument_list|)
decl_stmt|;
name|ShingleFilter
name|tf
init|=
operator|new
name|ShingleFilter
argument_list|(
name|t
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|tf
operator|.
name|setOutputUnigrams
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
operator|new
name|TokenStreamComponents
argument_list|(
name|t
argument_list|,
operator|new
name|LowerCaseFilter
argument_list|(
name|Version
operator|.
name|LUCENE_41
argument_list|,
name|tf
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|mapping
operator|.
name|put
argument_list|(
literal|"body"
argument_list|,
operator|new
name|Analyzer
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|TokenStreamComponents
name|createComponents
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|Reader
name|reader
parameter_list|)
block|{
name|Tokenizer
name|t
init|=
operator|new
name|StandardTokenizer
argument_list|(
name|Version
operator|.
name|LUCENE_41
argument_list|,
name|reader
argument_list|)
decl_stmt|;
return|return
operator|new
name|TokenStreamComponents
argument_list|(
name|t
argument_list|,
operator|new
name|LowerCaseFilter
argument_list|(
name|Version
operator|.
name|LUCENE_41
argument_list|,
name|t
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|mapping
operator|.
name|put
argument_list|(
literal|"body_reverse"
argument_list|,
operator|new
name|Analyzer
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|TokenStreamComponents
name|createComponents
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|Reader
name|reader
parameter_list|)
block|{
name|Tokenizer
name|t
init|=
operator|new
name|StandardTokenizer
argument_list|(
name|Version
operator|.
name|LUCENE_41
argument_list|,
name|reader
argument_list|)
decl_stmt|;
return|return
operator|new
name|TokenStreamComponents
argument_list|(
name|t
argument_list|,
operator|new
name|ReverseStringFilter
argument_list|(
name|Version
operator|.
name|LUCENE_41
argument_list|,
operator|new
name|LowerCaseFilter
argument_list|(
name|Version
operator|.
name|LUCENE_41
argument_list|,
name|t
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|PerFieldAnalyzerWrapper
name|wrapper
init|=
operator|new
name|PerFieldAnalyzerWrapper
argument_list|(
operator|new
name|WhitespaceAnalyzer
argument_list|(
name|Version
operator|.
name|LUCENE_41
argument_list|)
argument_list|,
name|mapping
argument_list|)
decl_stmt|;
name|IndexWriterConfig
name|conf
init|=
operator|new
name|IndexWriterConfig
argument_list|(
name|Version
operator|.
name|LUCENE_41
argument_list|,
name|wrapper
argument_list|)
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|NoisyChannelSpellCheckerTests
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/config/names.txt"
argument_list|)
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|line
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"body"
argument_list|,
name|line
argument_list|,
name|TextField
operator|.
name|TYPE_NOT_STORED
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"body_reverse"
argument_list|,
name|line
argument_list|,
name|TextField
operator|.
name|TYPE_NOT_STORED
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"body_ngram"
argument_list|,
name|line
argument_list|,
name|TextField
operator|.
name|TYPE_NOT_STORED
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|DirectoryReader
name|ir
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|writer
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|LaplaceScorer
name|wordScorer
init|=
operator|new
name|LaplaceScorer
argument_list|(
name|ir
argument_list|,
name|MultiFields
operator|.
name|getTerms
argument_list|(
name|ir
argument_list|,
literal|"body_ngram"
argument_list|)
argument_list|,
literal|"body_ngram"
argument_list|,
literal|0.95d
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|" "
argument_list|)
argument_list|,
literal|0.5f
argument_list|)
decl_stmt|;
name|NoisyChannelSpellChecker
name|suggester
init|=
operator|new
name|NoisyChannelSpellChecker
argument_list|()
decl_stmt|;
name|DirectSpellChecker
name|spellchecker
init|=
operator|new
name|DirectSpellChecker
argument_list|()
decl_stmt|;
name|spellchecker
operator|.
name|setMinQueryLength
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|DirectCandidateGenerator
name|forward
init|=
operator|new
name|DirectCandidateGenerator
argument_list|(
name|spellchecker
argument_list|,
literal|"body"
argument_list|,
name|SuggestMode
operator|.
name|SUGGEST_ALWAYS
argument_list|,
name|ir
argument_list|,
literal|0.95
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|DirectCandidateGenerator
name|reverse
init|=
operator|new
name|DirectCandidateGenerator
argument_list|(
name|spellchecker
argument_list|,
literal|"body_reverse"
argument_list|,
name|SuggestMode
operator|.
name|SUGGEST_ALWAYS
argument_list|,
name|ir
argument_list|,
literal|0.95
argument_list|,
literal|10
argument_list|,
name|wrapper
argument_list|,
name|wrapper
argument_list|,
name|MultiFields
operator|.
name|getTerms
argument_list|(
name|ir
argument_list|,
literal|"body_reverse"
argument_list|)
argument_list|)
decl_stmt|;
name|CandidateGenerator
name|generator
init|=
operator|new
name|MultiCandidateGeneratorWrapper
argument_list|(
literal|10
argument_list|,
name|forward
argument_list|,
name|reverse
argument_list|)
decl_stmt|;
name|Correction
index|[]
name|corrections
init|=
name|suggester
operator|.
name|getCorrections
argument_list|(
name|wrapper
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"american cae"
argument_list|)
argument_list|,
name|generator
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|ir
argument_list|,
literal|"body"
argument_list|,
name|wordScorer
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
operator|.
name|corrections
decl_stmt|;
name|assertThat
argument_list|(
name|corrections
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|corrections
index|[
literal|0
index|]
operator|.
name|join
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|" "
argument_list|)
argument_list|)
operator|.
name|utf8ToString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"american ace"
argument_list|)
argument_list|)
expr_stmt|;
name|generator
operator|=
operator|new
name|MultiCandidateGeneratorWrapper
argument_list|(
literal|5
argument_list|,
name|forward
argument_list|,
name|reverse
argument_list|)
expr_stmt|;
name|corrections
operator|=
name|suggester
operator|.
name|getCorrections
argument_list|(
name|wrapper
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"american ame"
argument_list|)
argument_list|,
name|generator
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|ir
argument_list|,
literal|"body"
argument_list|,
name|wordScorer
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
operator|.
name|corrections
expr_stmt|;
name|assertThat
argument_list|(
name|corrections
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|corrections
index|[
literal|0
index|]
operator|.
name|join
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|" "
argument_list|)
argument_list|)
operator|.
name|utf8ToString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"american ace"
argument_list|)
argument_list|)
expr_stmt|;
name|corrections
operator|=
name|suggester
operator|.
name|getCorrections
argument_list|(
name|wrapper
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"american cae"
argument_list|)
argument_list|,
name|forward
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|ir
argument_list|,
literal|"body"
argument_list|,
name|wordScorer
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
operator|.
name|corrections
expr_stmt|;
name|assertThat
argument_list|(
name|corrections
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// only use forward with constant prefix
name|corrections
operator|=
name|suggester
operator|.
name|getCorrections
argument_list|(
name|wrapper
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"america cae"
argument_list|)
argument_list|,
name|generator
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
name|ir
argument_list|,
literal|"body"
argument_list|,
name|wordScorer
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
operator|.
name|corrections
expr_stmt|;
name|assertThat
argument_list|(
name|corrections
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|corrections
index|[
literal|0
index|]
operator|.
name|join
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|" "
argument_list|)
argument_list|)
operator|.
name|utf8ToString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"american ace"
argument_list|)
argument_list|)
expr_stmt|;
name|corrections
operator|=
name|suggester
operator|.
name|getCorrections
argument_list|(
name|wrapper
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"Zorr the Got-Jewel"
argument_list|)
argument_list|,
name|generator
argument_list|,
literal|0.5f
argument_list|,
literal|4
argument_list|,
name|ir
argument_list|,
literal|"body"
argument_list|,
name|wordScorer
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
operator|.
name|corrections
expr_stmt|;
name|assertThat
argument_list|(
name|corrections
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|corrections
index|[
literal|0
index|]
operator|.
name|join
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|" "
argument_list|)
argument_list|)
operator|.
name|utf8ToString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"xorr the god jewel"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|corrections
index|[
literal|1
index|]
operator|.
name|join
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|" "
argument_list|)
argument_list|)
operator|.
name|utf8ToString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"zorr the god jewel"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|corrections
index|[
literal|2
index|]
operator|.
name|join
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|" "
argument_list|)
argument_list|)
operator|.
name|utf8ToString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"four the god jewel"
argument_list|)
argument_list|)
expr_stmt|;
name|corrections
operator|=
name|suggester
operator|.
name|getCorrections
argument_list|(
name|wrapper
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"Zorr the Got-Jewel"
argument_list|)
argument_list|,
name|generator
argument_list|,
literal|0.5f
argument_list|,
literal|1
argument_list|,
name|ir
argument_list|,
literal|"body"
argument_list|,
name|wordScorer
argument_list|,
literal|1.5f
argument_list|,
literal|2
argument_list|)
operator|.
name|corrections
expr_stmt|;
name|assertThat
argument_list|(
name|corrections
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|corrections
index|[
literal|0
index|]
operator|.
name|join
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|" "
argument_list|)
argument_list|)
operator|.
name|utf8ToString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"xorr the god jewel"
argument_list|)
argument_list|)
expr_stmt|;
name|corrections
operator|=
name|suggester
operator|.
name|getCorrections
argument_list|(
name|wrapper
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"Xor the Got-Jewel"
argument_list|)
argument_list|,
name|generator
argument_list|,
literal|0.5f
argument_list|,
literal|1
argument_list|,
name|ir
argument_list|,
literal|"body"
argument_list|,
name|wordScorer
argument_list|,
literal|1.5f
argument_list|,
literal|2
argument_list|)
operator|.
name|corrections
expr_stmt|;
name|assertThat
argument_list|(
name|corrections
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|corrections
index|[
literal|0
index|]
operator|.
name|join
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|" "
argument_list|)
argument_list|)
operator|.
name|utf8ToString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"xorr the god jewel"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMarvelHerosTrigram
specifier|public
name|void
name|testMarvelHerosTrigram
parameter_list|()
throws|throws
name|IOException
block|{
name|RAMDirectory
name|dir
init|=
operator|new
name|RAMDirectory
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Analyzer
argument_list|>
name|mapping
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|mapping
operator|.
name|put
argument_list|(
literal|"body_ngram"
argument_list|,
operator|new
name|Analyzer
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|TokenStreamComponents
name|createComponents
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|Reader
name|reader
parameter_list|)
block|{
name|Tokenizer
name|t
init|=
operator|new
name|StandardTokenizer
argument_list|(
name|Version
operator|.
name|LUCENE_41
argument_list|,
name|reader
argument_list|)
decl_stmt|;
name|ShingleFilter
name|tf
init|=
operator|new
name|ShingleFilter
argument_list|(
name|t
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|tf
operator|.
name|setOutputUnigrams
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
operator|new
name|TokenStreamComponents
argument_list|(
name|t
argument_list|,
operator|new
name|LowerCaseFilter
argument_list|(
name|Version
operator|.
name|LUCENE_41
argument_list|,
name|tf
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|mapping
operator|.
name|put
argument_list|(
literal|"body"
argument_list|,
operator|new
name|Analyzer
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|TokenStreamComponents
name|createComponents
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|Reader
name|reader
parameter_list|)
block|{
name|Tokenizer
name|t
init|=
operator|new
name|StandardTokenizer
argument_list|(
name|Version
operator|.
name|LUCENE_41
argument_list|,
name|reader
argument_list|)
decl_stmt|;
return|return
operator|new
name|TokenStreamComponents
argument_list|(
name|t
argument_list|,
operator|new
name|LowerCaseFilter
argument_list|(
name|Version
operator|.
name|LUCENE_41
argument_list|,
name|t
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|PerFieldAnalyzerWrapper
name|wrapper
init|=
operator|new
name|PerFieldAnalyzerWrapper
argument_list|(
operator|new
name|WhitespaceAnalyzer
argument_list|(
name|Version
operator|.
name|LUCENE_41
argument_list|)
argument_list|,
name|mapping
argument_list|)
decl_stmt|;
name|IndexWriterConfig
name|conf
init|=
operator|new
name|IndexWriterConfig
argument_list|(
name|Version
operator|.
name|LUCENE_41
argument_list|,
name|wrapper
argument_list|)
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|NoisyChannelSpellCheckerTests
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/config/names.txt"
argument_list|)
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|line
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"body"
argument_list|,
name|line
argument_list|,
name|TextField
operator|.
name|TYPE_NOT_STORED
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"body_ngram"
argument_list|,
name|line
argument_list|,
name|TextField
operator|.
name|TYPE_NOT_STORED
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|DirectoryReader
name|ir
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|writer
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|WordScorer
name|wordScorer
init|=
operator|new
name|LinearInterpoatingScorer
argument_list|(
name|ir
argument_list|,
name|MultiFields
operator|.
name|getTerms
argument_list|(
name|ir
argument_list|,
literal|"body_ngram"
argument_list|)
argument_list|,
literal|"body_ngram"
argument_list|,
literal|0.85d
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|" "
argument_list|)
argument_list|,
literal|0.5
argument_list|,
literal|0.4
argument_list|,
literal|0.1
argument_list|)
decl_stmt|;
name|NoisyChannelSpellChecker
name|suggester
init|=
operator|new
name|NoisyChannelSpellChecker
argument_list|()
decl_stmt|;
name|DirectSpellChecker
name|spellchecker
init|=
operator|new
name|DirectSpellChecker
argument_list|()
decl_stmt|;
name|spellchecker
operator|.
name|setMinQueryLength
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|DirectCandidateGenerator
name|generator
init|=
operator|new
name|DirectCandidateGenerator
argument_list|(
name|spellchecker
argument_list|,
literal|"body"
argument_list|,
name|SuggestMode
operator|.
name|SUGGEST_MORE_POPULAR
argument_list|,
name|ir
argument_list|,
literal|0.95
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|Correction
index|[]
name|corrections
init|=
name|suggester
operator|.
name|getCorrections
argument_list|(
name|wrapper
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"american ame"
argument_list|)
argument_list|,
name|generator
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|ir
argument_list|,
literal|"body"
argument_list|,
name|wordScorer
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
operator|.
name|corrections
decl_stmt|;
name|assertThat
argument_list|(
name|corrections
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|corrections
index|[
literal|0
index|]
operator|.
name|join
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|" "
argument_list|)
argument_list|)
operator|.
name|utf8ToString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"american ace"
argument_list|)
argument_list|)
expr_stmt|;
name|corrections
operator|=
name|suggester
operator|.
name|getCorrections
argument_list|(
name|wrapper
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"american ame"
argument_list|)
argument_list|,
name|generator
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|ir
argument_list|,
literal|"body"
argument_list|,
name|wordScorer
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
operator|.
name|corrections
expr_stmt|;
name|assertThat
argument_list|(
name|corrections
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|//        assertThat(corrections[0].join(new BytesRef(" ")).utf8ToString(), equalTo("american ape"));
name|wordScorer
operator|=
operator|new
name|LinearInterpoatingScorer
argument_list|(
name|ir
argument_list|,
name|MultiFields
operator|.
name|getTerms
argument_list|(
name|ir
argument_list|,
literal|"body_ngram"
argument_list|)
argument_list|,
literal|"body_ngram"
argument_list|,
literal|0.85d
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|" "
argument_list|)
argument_list|,
literal|0.5
argument_list|,
literal|0.4
argument_list|,
literal|0.1
argument_list|)
expr_stmt|;
name|corrections
operator|=
name|suggester
operator|.
name|getCorrections
argument_list|(
name|wrapper
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"Xor the Got-Jewel"
argument_list|)
argument_list|,
name|generator
argument_list|,
literal|0.5f
argument_list|,
literal|4
argument_list|,
name|ir
argument_list|,
literal|"body"
argument_list|,
name|wordScorer
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|)
operator|.
name|corrections
expr_stmt|;
name|assertThat
argument_list|(
name|corrections
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|corrections
index|[
literal|0
index|]
operator|.
name|join
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|" "
argument_list|)
argument_list|)
operator|.
name|utf8ToString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"xorr the god jewel"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|corrections
index|[
literal|1
index|]
operator|.
name|join
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|" "
argument_list|)
argument_list|)
operator|.
name|utf8ToString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"xor the god jewel"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|corrections
index|[
literal|2
index|]
operator|.
name|join
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|" "
argument_list|)
argument_list|)
operator|.
name|utf8ToString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"xorn the god jewel"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|corrections
index|[
literal|3
index|]
operator|.
name|join
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|" "
argument_list|)
argument_list|)
operator|.
name|utf8ToString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"xorr the got jewel"
argument_list|)
argument_list|)
expr_stmt|;
name|corrections
operator|=
name|suggester
operator|.
name|getCorrections
argument_list|(
name|wrapper
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"Xor the Got-Jewel"
argument_list|)
argument_list|,
name|generator
argument_list|,
literal|0.5f
argument_list|,
literal|4
argument_list|,
name|ir
argument_list|,
literal|"body"
argument_list|,
name|wordScorer
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
operator|.
name|corrections
expr_stmt|;
name|assertThat
argument_list|(
name|corrections
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|corrections
index|[
literal|0
index|]
operator|.
name|join
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|" "
argument_list|)
argument_list|)
operator|.
name|utf8ToString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"xorr the god jewel"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|corrections
index|[
literal|1
index|]
operator|.
name|join
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|" "
argument_list|)
argument_list|)
operator|.
name|utf8ToString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"xor the god jewel"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|corrections
index|[
literal|2
index|]
operator|.
name|join
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|" "
argument_list|)
argument_list|)
operator|.
name|utf8ToString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"xorn the god jewel"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|corrections
index|[
literal|3
index|]
operator|.
name|join
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|" "
argument_list|)
argument_list|)
operator|.
name|utf8ToString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"xorr the got jewel"
argument_list|)
argument_list|)
expr_stmt|;
name|corrections
operator|=
name|suggester
operator|.
name|getCorrections
argument_list|(
name|wrapper
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"Xor the Got-Jewel"
argument_list|)
argument_list|,
name|generator
argument_list|,
literal|0.5f
argument_list|,
literal|1
argument_list|,
name|ir
argument_list|,
literal|"body"
argument_list|,
name|wordScorer
argument_list|,
literal|100
argument_list|,
literal|3
argument_list|)
operator|.
name|corrections
expr_stmt|;
name|assertThat
argument_list|(
name|corrections
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|corrections
index|[
literal|0
index|]
operator|.
name|join
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|" "
argument_list|)
argument_list|)
operator|.
name|utf8ToString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"xorr the god jewel"
argument_list|)
argument_list|)
expr_stmt|;
comment|// test synonyms
name|Analyzer
name|analyzer
init|=
operator|new
name|Analyzer
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|TokenStreamComponents
name|createComponents
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|Reader
name|reader
parameter_list|)
block|{
name|Tokenizer
name|t
init|=
operator|new
name|StandardTokenizer
argument_list|(
name|Version
operator|.
name|LUCENE_41
argument_list|,
name|reader
argument_list|)
decl_stmt|;
name|TokenFilter
name|filter
init|=
operator|new
name|LowerCaseFilter
argument_list|(
name|Version
operator|.
name|LUCENE_41
argument_list|,
name|t
argument_list|)
decl_stmt|;
try|try
block|{
name|SolrSynonymParser
name|parser
init|=
operator|new
name|SolrSynonymParser
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
operator|new
name|WhitespaceAnalyzer
argument_list|(
name|Version
operator|.
name|LUCENE_41
argument_list|)
argument_list|)
decl_stmt|;
operator|(
operator|(
name|SolrSynonymParser
operator|)
name|parser
operator|)
operator|.
name|parse
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"usa => usa, america, american\nursa => usa, america, american"
argument_list|)
argument_list|)
expr_stmt|;
name|filter
operator|=
operator|new
name|SynonymFilter
argument_list|(
name|filter
argument_list|,
name|parser
operator|.
name|build
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
operator|new
name|TokenStreamComponents
argument_list|(
name|t
argument_list|,
name|filter
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|spellchecker
operator|.
name|setAccuracy
argument_list|(
literal|0.0f
argument_list|)
expr_stmt|;
name|spellchecker
operator|.
name|setMinPrefix
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|spellchecker
operator|.
name|setMinQueryLength
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|suggester
operator|=
operator|new
name|NoisyChannelSpellChecker
argument_list|(
literal|0.95
argument_list|)
expr_stmt|;
name|wordScorer
operator|=
operator|new
name|LinearInterpoatingScorer
argument_list|(
name|ir
argument_list|,
name|MultiFields
operator|.
name|getTerms
argument_list|(
name|ir
argument_list|,
literal|"body_ngram"
argument_list|)
argument_list|,
literal|"body_ngram"
argument_list|,
literal|0.95d
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|" "
argument_list|)
argument_list|,
literal|0.5
argument_list|,
literal|0.4
argument_list|,
literal|0.1
argument_list|)
expr_stmt|;
name|corrections
operator|=
name|suggester
operator|.
name|getCorrections
argument_list|(
name|analyzer
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"captian usa"
argument_list|)
argument_list|,
name|generator
argument_list|,
literal|2
argument_list|,
literal|4
argument_list|,
name|ir
argument_list|,
literal|"body"
argument_list|,
name|wordScorer
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
operator|.
name|corrections
expr_stmt|;
name|assertThat
argument_list|(
name|corrections
index|[
literal|0
index|]
operator|.
name|join
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|" "
argument_list|)
argument_list|)
operator|.
name|utf8ToString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"captain america"
argument_list|)
argument_list|)
expr_stmt|;
name|generator
operator|=
operator|new
name|DirectCandidateGenerator
argument_list|(
name|spellchecker
argument_list|,
literal|"body"
argument_list|,
name|SuggestMode
operator|.
name|SUGGEST_MORE_POPULAR
argument_list|,
name|ir
argument_list|,
literal|0.95
argument_list|,
literal|10
argument_list|,
literal|null
argument_list|,
name|analyzer
argument_list|,
name|MultiFields
operator|.
name|getTerms
argument_list|(
name|ir
argument_list|,
literal|"body"
argument_list|)
argument_list|)
expr_stmt|;
name|corrections
operator|=
name|suggester
operator|.
name|getCorrections
argument_list|(
name|analyzer
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"captian usw"
argument_list|)
argument_list|,
name|generator
argument_list|,
literal|2
argument_list|,
literal|4
argument_list|,
name|ir
argument_list|,
literal|"body"
argument_list|,
name|wordScorer
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
operator|.
name|corrections
expr_stmt|;
name|assertThat
argument_list|(
name|corrections
index|[
literal|0
index|]
operator|.
name|join
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|" "
argument_list|)
argument_list|)
operator|.
name|utf8ToString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"captain america"
argument_list|)
argument_list|)
expr_stmt|;
name|wordScorer
operator|=
operator|new
name|StupidBackoffScorer
argument_list|(
name|ir
argument_list|,
name|MultiFields
operator|.
name|getTerms
argument_list|(
name|ir
argument_list|,
literal|"body_ngram"
argument_list|)
argument_list|,
literal|"body_ngram"
argument_list|,
literal|0.85d
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|" "
argument_list|)
argument_list|,
literal|0.4
argument_list|)
expr_stmt|;
name|corrections
operator|=
name|suggester
operator|.
name|getCorrections
argument_list|(
name|wrapper
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"Xor the Got-Jewel"
argument_list|)
argument_list|,
name|generator
argument_list|,
literal|0.5f
argument_list|,
literal|2
argument_list|,
name|ir
argument_list|,
literal|"body"
argument_list|,
name|wordScorer
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|)
operator|.
name|corrections
expr_stmt|;
name|assertThat
argument_list|(
name|corrections
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|corrections
index|[
literal|0
index|]
operator|.
name|join
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|" "
argument_list|)
argument_list|)
operator|.
name|utf8ToString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"xorr the god jewel"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|corrections
index|[
literal|1
index|]
operator|.
name|join
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|" "
argument_list|)
argument_list|)
operator|.
name|utf8ToString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"xor the god jewel"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

