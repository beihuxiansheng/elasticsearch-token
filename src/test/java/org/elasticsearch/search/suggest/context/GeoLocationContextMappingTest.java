begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.suggest.context
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|context
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|geo
operator|.
name|GeoHashUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|context
operator|.
name|ContextMapping
operator|.
name|ContextConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
operator|.
name|jsonBuilder
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|GeoLocationContextMappingTest
specifier|public
class|class
name|GeoLocationContextMappingTest
extends|extends
name|ElasticsearchTestCase
block|{
annotation|@
name|Test
DECL|method|testThatParsingGeoPointsWorksWithCoercion
specifier|public
name|void
name|testThatParsingGeoPointsWorksWithCoercion
parameter_list|()
throws|throws
name|Exception
block|{
name|XContentBuilder
name|builder
init|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"lat"
argument_list|,
literal|"52"
argument_list|)
operator|.
name|field
argument_list|(
literal|"lon"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|XContentParser
name|parser
init|=
name|XContentHelper
operator|.
name|createParser
argument_list|(
name|builder
operator|.
name|bytes
argument_list|()
argument_list|)
decl_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"precision"
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|GeolocationContextMapping
name|mapping
init|=
name|GeolocationContextMapping
operator|.
name|load
argument_list|(
literal|"foo"
argument_list|,
name|config
argument_list|)
decl_stmt|;
name|mapping
operator|.
name|parseQuery
argument_list|(
literal|"foo"
argument_list|,
name|parser
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUseWithDefaultGeoHash
specifier|public
name|void
name|testUseWithDefaultGeoHash
parameter_list|()
throws|throws
name|Exception
block|{
name|XContentBuilder
name|builder
init|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"lat"
argument_list|,
literal|52d
argument_list|)
operator|.
name|field
argument_list|(
literal|"lon"
argument_list|,
literal|4d
argument_list|)
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|XContentParser
name|parser
init|=
name|XContentHelper
operator|.
name|createParser
argument_list|(
name|builder
operator|.
name|bytes
argument_list|()
argument_list|)
decl_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|String
name|geohash
init|=
name|GeoHashUtils
operator|.
name|encode
argument_list|(
name|randomIntBetween
argument_list|(
operator|-
literal|90
argument_list|,
operator|+
literal|90
argument_list|)
argument_list|,
name|randomIntBetween
argument_list|(
operator|-
literal|180
argument_list|,
operator|+
literal|180
argument_list|)
argument_list|)
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"precision"
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"default"
argument_list|,
name|geohash
argument_list|)
expr_stmt|;
name|GeolocationContextMapping
name|mapping
init|=
name|GeolocationContextMapping
operator|.
name|load
argument_list|(
literal|"foo"
argument_list|,
name|config
argument_list|)
decl_stmt|;
name|mapping
operator|.
name|parseQuery
argument_list|(
literal|"foo"
argument_list|,
name|parser
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUseWithDefaultLatLon
specifier|public
name|void
name|testUseWithDefaultLatLon
parameter_list|()
throws|throws
name|Exception
block|{
name|XContentBuilder
name|builder
init|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"lat"
argument_list|,
literal|52d
argument_list|)
operator|.
name|field
argument_list|(
literal|"lon"
argument_list|,
literal|4d
argument_list|)
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|XContentParser
name|parser
init|=
name|XContentHelper
operator|.
name|createParser
argument_list|(
name|builder
operator|.
name|bytes
argument_list|()
argument_list|)
decl_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"precision"
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|Double
argument_list|>
name|pointAsMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|pointAsMap
operator|.
name|put
argument_list|(
literal|"lat"
argument_list|,
literal|51d
argument_list|)
expr_stmt|;
name|pointAsMap
operator|.
name|put
argument_list|(
literal|"lon"
argument_list|,
literal|0d
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"default"
argument_list|,
name|pointAsMap
argument_list|)
expr_stmt|;
name|GeolocationContextMapping
name|mapping
init|=
name|GeolocationContextMapping
operator|.
name|load
argument_list|(
literal|"foo"
argument_list|,
name|config
argument_list|)
decl_stmt|;
name|mapping
operator|.
name|parseQuery
argument_list|(
literal|"foo"
argument_list|,
name|parser
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUseWithDefaultBadLatLon
specifier|public
name|void
name|testUseWithDefaultBadLatLon
parameter_list|()
throws|throws
name|Exception
block|{
name|XContentBuilder
name|builder
init|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"lat"
argument_list|,
literal|52d
argument_list|)
operator|.
name|field
argument_list|(
literal|"lon"
argument_list|,
literal|4d
argument_list|)
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|XContentParser
name|parser
init|=
name|XContentHelper
operator|.
name|createParser
argument_list|(
name|builder
operator|.
name|bytes
argument_list|()
argument_list|)
decl_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"precision"
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|Double
argument_list|>
name|pointAsMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|pointAsMap
operator|.
name|put
argument_list|(
literal|"latitude"
argument_list|,
literal|51d
argument_list|)
expr_stmt|;
comment|// invalid field names
name|pointAsMap
operator|.
name|put
argument_list|(
literal|"longitude"
argument_list|,
literal|0d
argument_list|)
expr_stmt|;
comment|// invalid field names
name|config
operator|.
name|put
argument_list|(
literal|"default"
argument_list|,
name|pointAsMap
argument_list|)
expr_stmt|;
name|ElasticsearchParseException
name|expected
init|=
literal|null
decl_stmt|;
try|try
block|{
name|GeolocationContextMapping
name|mapping
init|=
name|GeolocationContextMapping
operator|.
name|load
argument_list|(
literal|"foo"
argument_list|,
name|config
argument_list|)
decl_stmt|;
name|mapping
operator|.
name|parseQuery
argument_list|(
literal|"foo"
argument_list|,
name|parser
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ElasticsearchParseException
name|e
parameter_list|)
block|{
name|expected
operator|=
name|e
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
name|expected
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUseWithMultiplePrecisions
specifier|public
name|void
name|testUseWithMultiplePrecisions
parameter_list|()
throws|throws
name|Exception
block|{
name|XContentBuilder
name|builder
init|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"lat"
argument_list|,
literal|52d
argument_list|)
operator|.
name|field
argument_list|(
literal|"lon"
argument_list|,
literal|4d
argument_list|)
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|XContentParser
name|parser
init|=
name|XContentHelper
operator|.
name|createParser
argument_list|(
name|builder
operator|.
name|bytes
argument_list|()
argument_list|)
decl_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|numElements
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|12
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|precisions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numElements
condition|;
name|i
operator|++
control|)
block|{
name|precisions
operator|.
name|add
argument_list|(
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|12
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|config
operator|.
name|put
argument_list|(
literal|"precision"
argument_list|,
name|precisions
argument_list|)
expr_stmt|;
name|GeolocationContextMapping
name|mapping
init|=
name|GeolocationContextMapping
operator|.
name|load
argument_list|(
literal|"foo"
argument_list|,
name|config
argument_list|)
decl_stmt|;
name|mapping
operator|.
name|parseQuery
argument_list|(
literal|"foo"
argument_list|,
name|parser
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testHashcode
specifier|public
name|void
name|testHashcode
parameter_list|()
throws|throws
name|Exception
block|{
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|config
operator|.
name|put
argument_list|(
literal|"precision"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|config
operator|.
name|put
argument_list|(
literal|"precision"
argument_list|,
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|12
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|HashMap
argument_list|<
name|String
argument_list|,
name|Double
argument_list|>
name|pointAsMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|pointAsMap
operator|.
name|put
argument_list|(
literal|"lat"
argument_list|,
literal|51d
argument_list|)
expr_stmt|;
name|pointAsMap
operator|.
name|put
argument_list|(
literal|"lon"
argument_list|,
literal|0d
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"default"
argument_list|,
name|pointAsMap
argument_list|)
expr_stmt|;
block|}
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config2
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|GeolocationContextMapping
name|mapping
init|=
name|GeolocationContextMapping
operator|.
name|load
argument_list|(
literal|"foo"
argument_list|,
name|config
argument_list|)
decl_stmt|;
name|GeolocationContextMapping
name|mapping2
init|=
name|GeolocationContextMapping
operator|.
name|load
argument_list|(
literal|"foo"
argument_list|,
name|config2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|mapping
argument_list|,
name|mapping2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mapping
operator|.
name|hashCode
argument_list|()
argument_list|,
name|mapping2
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUseWithBadGeoContext
specifier|public
name|void
name|testUseWithBadGeoContext
parameter_list|()
throws|throws
name|Exception
block|{
name|double
name|lon
init|=
literal|4d
decl_stmt|;
name|String
name|badLat
init|=
literal|"W"
decl_stmt|;
name|XContentBuilder
name|builder
init|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startArray
argument_list|(
literal|"location"
argument_list|)
operator|.
name|value
argument_list|(
literal|4d
argument_list|)
operator|.
name|value
argument_list|(
name|badLat
argument_list|)
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|XContentParser
name|parser
init|=
name|XContentHelper
operator|.
name|createParser
argument_list|(
name|builder
operator|.
name|bytes
argument_list|()
argument_list|)
decl_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
comment|// start of object
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
comment|// "location" field name
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
comment|// array
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"precision"
argument_list|,
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|12
argument_list|)
argument_list|)
expr_stmt|;
name|GeolocationContextMapping
name|mapping
init|=
name|GeolocationContextMapping
operator|.
name|load
argument_list|(
literal|"foo"
argument_list|,
name|config
argument_list|)
decl_stmt|;
name|ElasticsearchParseException
name|expected
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ContextConfig
name|geoconfig
init|=
name|mapping
operator|.
name|parseContext
argument_list|(
literal|null
argument_list|,
name|parser
argument_list|)
decl_stmt|;
block|}
catch|catch
parameter_list|(
name|ElasticsearchParseException
name|e
parameter_list|)
block|{
name|expected
operator|=
name|e
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
name|expected
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUseWithLonLatGeoContext
specifier|public
name|void
name|testUseWithLonLatGeoContext
parameter_list|()
throws|throws
name|Exception
block|{
name|double
name|lon
init|=
literal|4d
decl_stmt|;
name|double
name|lat
init|=
literal|52d
decl_stmt|;
name|XContentBuilder
name|builder
init|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startArray
argument_list|(
literal|"location"
argument_list|)
operator|.
name|value
argument_list|(
name|lon
argument_list|)
operator|.
name|value
argument_list|(
name|lat
argument_list|)
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|XContentParser
name|parser
init|=
name|XContentHelper
operator|.
name|createParser
argument_list|(
name|builder
operator|.
name|bytes
argument_list|()
argument_list|)
decl_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
comment|// start of object
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
comment|// "location" field name
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
comment|// array
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"precision"
argument_list|,
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|12
argument_list|)
argument_list|)
expr_stmt|;
name|GeolocationContextMapping
name|mapping
init|=
name|GeolocationContextMapping
operator|.
name|load
argument_list|(
literal|"foo"
argument_list|,
name|config
argument_list|)
decl_stmt|;
name|mapping
operator|.
name|parseContext
argument_list|(
literal|null
argument_list|,
name|parser
argument_list|)
expr_stmt|;
block|}
DECL|method|testUseWithMultiGeoHashGeoContext
specifier|public
name|void
name|testUseWithMultiGeoHashGeoContext
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|geohash1
init|=
name|GeoHashUtils
operator|.
name|encode
argument_list|(
name|randomIntBetween
argument_list|(
operator|-
literal|90
argument_list|,
operator|+
literal|90
argument_list|)
argument_list|,
name|randomIntBetween
argument_list|(
operator|-
literal|180
argument_list|,
operator|+
literal|180
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|geohash2
init|=
name|GeoHashUtils
operator|.
name|encode
argument_list|(
name|randomIntBetween
argument_list|(
operator|-
literal|90
argument_list|,
operator|+
literal|90
argument_list|)
argument_list|,
name|randomIntBetween
argument_list|(
operator|-
literal|180
argument_list|,
operator|+
literal|180
argument_list|)
argument_list|)
decl_stmt|;
name|XContentBuilder
name|builder
init|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startArray
argument_list|(
literal|"location"
argument_list|)
operator|.
name|value
argument_list|(
name|geohash1
argument_list|)
operator|.
name|value
argument_list|(
name|geohash2
argument_list|)
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|XContentParser
name|parser
init|=
name|XContentHelper
operator|.
name|createParser
argument_list|(
name|builder
operator|.
name|bytes
argument_list|()
argument_list|)
decl_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
comment|// start of object
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
comment|// "location" field name
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
comment|// array
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"precision"
argument_list|,
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|12
argument_list|)
argument_list|)
expr_stmt|;
name|GeolocationContextMapping
name|mapping
init|=
name|GeolocationContextMapping
operator|.
name|load
argument_list|(
literal|"foo"
argument_list|,
name|config
argument_list|)
decl_stmt|;
name|ContextConfig
name|parsedContext
init|=
name|mapping
operator|.
name|parseContext
argument_list|(
literal|null
argument_list|,
name|parser
argument_list|)
decl_stmt|;
block|}
block|}
end_class

end_unit

