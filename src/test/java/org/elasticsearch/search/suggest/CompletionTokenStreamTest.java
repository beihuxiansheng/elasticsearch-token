begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.suggest
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|core
operator|.
name|SimpleAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|synonym
operator|.
name|SynonymFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|synonym
operator|.
name|SynonymMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|synonym
operator|.
name|SynonymMap
operator|.
name|Builder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|suggest
operator|.
name|analyzing
operator|.
name|XAnalyzingSuggester
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|CharsRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IntsRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|completion
operator|.
name|CompletionTokenStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|completion
operator|.
name|CompletionTokenStream
operator|.
name|ByteTermAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchTokenStreamTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_class
DECL|class|CompletionTokenStreamTest
specifier|public
class|class
name|CompletionTokenStreamTest
extends|extends
name|ElasticsearchTokenStreamTestCase
block|{
DECL|field|suggester
specifier|final
name|XAnalyzingSuggester
name|suggester
init|=
operator|new
name|XAnalyzingSuggester
argument_list|(
operator|new
name|SimpleAnalyzer
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|)
argument_list|)
decl_stmt|;
annotation|@
name|Test
DECL|method|testSuggestTokenFilter
specifier|public
name|void
name|testSuggestTokenFilter
parameter_list|()
throws|throws
name|Exception
block|{
name|TokenStream
name|tokenStream
init|=
operator|new
name|MockTokenizer
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"mykeyword"
argument_list|)
argument_list|,
name|MockTokenizer
operator|.
name|WHITESPACE
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|BytesRef
name|payload
init|=
operator|new
name|BytesRef
argument_list|(
literal|"Surface keyword|friggin payload|10"
argument_list|)
decl_stmt|;
name|TokenStream
name|suggestTokenStream
init|=
operator|new
name|ByteTermAttrToCharTermAttrFilter
argument_list|(
operator|new
name|CompletionTokenStream
argument_list|(
name|tokenStream
argument_list|,
name|payload
argument_list|,
operator|new
name|CompletionTokenStream
operator|.
name|ToFiniteStrings
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|IntsRef
argument_list|>
name|toFiniteStrings
parameter_list|(
name|TokenStream
name|stream
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|suggester
operator|.
name|toFiniteStrings
argument_list|(
name|suggester
operator|.
name|getTokenStreamToAutomaton
argument_list|()
argument_list|,
name|stream
argument_list|)
return|;
block|}
block|}
argument_list|)
argument_list|)
decl_stmt|;
name|assertTokenStreamContents
argument_list|(
name|suggestTokenStream
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"mykeyword"
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Surface keyword|friggin payload|10"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSuggestTokenFilterWithSynonym
specifier|public
name|void
name|testSuggestTokenFilterWithSynonym
parameter_list|()
throws|throws
name|Exception
block|{
name|Builder
name|builder
init|=
operator|new
name|SynonymMap
operator|.
name|Builder
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|builder
operator|.
name|add
argument_list|(
operator|new
name|CharsRef
argument_list|(
literal|"mykeyword"
argument_list|)
argument_list|,
operator|new
name|CharsRef
argument_list|(
literal|"mysynonym"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|MockTokenizer
name|tokenizer
init|=
operator|new
name|MockTokenizer
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"mykeyword"
argument_list|)
argument_list|,
name|MockTokenizer
operator|.
name|WHITESPACE
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|SynonymFilter
name|filter
init|=
operator|new
name|SynonymFilter
argument_list|(
name|tokenizer
argument_list|,
name|builder
operator|.
name|build
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|BytesRef
name|payload
init|=
operator|new
name|BytesRef
argument_list|(
literal|"Surface keyword|friggin payload|10"
argument_list|)
decl_stmt|;
name|TokenStream
name|suggestTokenStream
init|=
operator|new
name|ByteTermAttrToCharTermAttrFilter
argument_list|(
operator|new
name|CompletionTokenStream
argument_list|(
name|filter
argument_list|,
name|payload
argument_list|,
operator|new
name|CompletionTokenStream
operator|.
name|ToFiniteStrings
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|IntsRef
argument_list|>
name|toFiniteStrings
parameter_list|(
name|TokenStream
name|stream
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|suggester
operator|.
name|toFiniteStrings
argument_list|(
name|suggester
operator|.
name|getTokenStreamToAutomaton
argument_list|()
argument_list|,
name|stream
argument_list|)
return|;
block|}
block|}
argument_list|)
argument_list|)
decl_stmt|;
name|assertTokenStreamContents
argument_list|(
name|suggestTokenStream
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"mysynonym"
block|,
literal|"mykeyword"
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Surface keyword|friggin payload|10"
block|,
literal|"Surface keyword|friggin payload|10"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|2
block|,
literal|0
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testValidNumberOfExpansions
specifier|public
name|void
name|testValidNumberOfExpansions
parameter_list|()
throws|throws
name|IOException
block|{
name|Builder
name|builder
init|=
operator|new
name|SynonymMap
operator|.
name|Builder
argument_list|(
literal|true
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|256
condition|;
name|i
operator|++
control|)
block|{
name|builder
operator|.
name|add
argument_list|(
operator|new
name|CharsRef
argument_list|(
literal|""
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|)
argument_list|,
operator|new
name|CharsRef
argument_list|(
literal|""
operator|+
operator|(
literal|1000
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
operator|)
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|StringBuilder
name|valueBuilder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|8
condition|;
name|i
operator|++
control|)
block|{
name|valueBuilder
operator|.
name|append
argument_list|(
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
name|valueBuilder
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
name|MockTokenizer
name|tokenizer
init|=
operator|new
name|MockTokenizer
argument_list|(
operator|new
name|StringReader
argument_list|(
name|valueBuilder
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|MockTokenizer
operator|.
name|WHITESPACE
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|SynonymFilter
name|filter
init|=
operator|new
name|SynonymFilter
argument_list|(
name|tokenizer
argument_list|,
name|builder
operator|.
name|build
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|TokenStream
name|suggestTokenStream
init|=
operator|new
name|CompletionTokenStream
argument_list|(
name|filter
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"Surface keyword|friggin payload|10"
argument_list|)
argument_list|,
operator|new
name|CompletionTokenStream
operator|.
name|ToFiniteStrings
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|IntsRef
argument_list|>
name|toFiniteStrings
parameter_list|(
name|TokenStream
name|stream
parameter_list|)
throws|throws
name|IOException
block|{
name|Set
argument_list|<
name|IntsRef
argument_list|>
name|finiteStrings
init|=
name|suggester
operator|.
name|toFiniteStrings
argument_list|(
name|suggester
operator|.
name|getTokenStreamToAutomaton
argument_list|()
argument_list|,
name|stream
argument_list|)
decl_stmt|;
return|return
name|finiteStrings
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|suggestTokenStream
operator|.
name|reset
argument_list|()
expr_stmt|;
name|ByteTermAttribute
name|attr
init|=
name|suggestTokenStream
operator|.
name|addAttribute
argument_list|(
name|ByteTermAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
name|PositionIncrementAttribute
name|posAttr
init|=
name|suggestTokenStream
operator|.
name|addAttribute
argument_list|(
name|PositionIncrementAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
name|int
name|maxPos
init|=
literal|0
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|suggestTokenStream
operator|.
name|incrementToken
argument_list|()
condition|)
block|{
name|count
operator|++
expr_stmt|;
name|assertNotNull
argument_list|(
name|attr
operator|.
name|getBytesRef
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|attr
operator|.
name|getBytesRef
argument_list|()
operator|.
name|length
operator|>
literal|0
argument_list|)
expr_stmt|;
name|maxPos
operator|+=
name|posAttr
operator|.
name|getPositionIncrement
argument_list|()
expr_stmt|;
block|}
name|suggestTokenStream
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|count
argument_list|,
literal|256
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|count
argument_list|,
name|maxPos
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|testInValidNumberOfExpansions
specifier|public
name|void
name|testInValidNumberOfExpansions
parameter_list|()
throws|throws
name|IOException
block|{
name|Builder
name|builder
init|=
operator|new
name|SynonymMap
operator|.
name|Builder
argument_list|(
literal|true
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|256
condition|;
name|i
operator|++
control|)
block|{
name|builder
operator|.
name|add
argument_list|(
operator|new
name|CharsRef
argument_list|(
literal|""
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|)
argument_list|,
operator|new
name|CharsRef
argument_list|(
literal|""
operator|+
operator|(
literal|1000
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
operator|)
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|StringBuilder
name|valueBuilder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|9
condition|;
name|i
operator|++
control|)
block|{
comment|// 9 -> expands to 512
name|valueBuilder
operator|.
name|append
argument_list|(
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
name|valueBuilder
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
name|MockTokenizer
name|tokenizer
init|=
operator|new
name|MockTokenizer
argument_list|(
operator|new
name|StringReader
argument_list|(
name|valueBuilder
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|MockTokenizer
operator|.
name|WHITESPACE
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|SynonymFilter
name|filter
init|=
operator|new
name|SynonymFilter
argument_list|(
name|tokenizer
argument_list|,
name|builder
operator|.
name|build
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|TokenStream
name|suggestTokenStream
init|=
operator|new
name|CompletionTokenStream
argument_list|(
name|filter
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"Surface keyword|friggin payload|10"
argument_list|)
argument_list|,
operator|new
name|CompletionTokenStream
operator|.
name|ToFiniteStrings
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|IntsRef
argument_list|>
name|toFiniteStrings
parameter_list|(
name|TokenStream
name|stream
parameter_list|)
throws|throws
name|IOException
block|{
name|Set
argument_list|<
name|IntsRef
argument_list|>
name|finiteStrings
init|=
name|suggester
operator|.
name|toFiniteStrings
argument_list|(
name|suggester
operator|.
name|getTokenStreamToAutomaton
argument_list|()
argument_list|,
name|stream
argument_list|)
decl_stmt|;
return|return
name|finiteStrings
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|suggestTokenStream
operator|.
name|reset
argument_list|()
expr_stmt|;
name|suggestTokenStream
operator|.
name|incrementToken
argument_list|()
expr_stmt|;
name|suggestTokenStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSuggestTokenFilterProperlyDelegateInputStream
specifier|public
name|void
name|testSuggestTokenFilterProperlyDelegateInputStream
parameter_list|()
throws|throws
name|Exception
block|{
name|TokenStream
name|tokenStream
init|=
operator|new
name|MockTokenizer
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"mykeyword"
argument_list|)
argument_list|,
name|MockTokenizer
operator|.
name|WHITESPACE
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|BytesRef
name|payload
init|=
operator|new
name|BytesRef
argument_list|(
literal|"Surface keyword|friggin payload|10"
argument_list|)
decl_stmt|;
name|TokenStream
name|suggestTokenStream
init|=
operator|new
name|ByteTermAttrToCharTermAttrFilter
argument_list|(
operator|new
name|CompletionTokenStream
argument_list|(
name|tokenStream
argument_list|,
name|payload
argument_list|,
operator|new
name|CompletionTokenStream
operator|.
name|ToFiniteStrings
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|IntsRef
argument_list|>
name|toFiniteStrings
parameter_list|(
name|TokenStream
name|stream
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|suggester
operator|.
name|toFiniteStrings
argument_list|(
name|suggester
operator|.
name|getTokenStreamToAutomaton
argument_list|()
argument_list|,
name|stream
argument_list|)
return|;
block|}
block|}
argument_list|)
argument_list|)
decl_stmt|;
name|TermToBytesRefAttribute
name|termAtt
init|=
name|suggestTokenStream
operator|.
name|getAttribute
argument_list|(
name|TermToBytesRefAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
name|BytesRef
name|ref
init|=
name|termAtt
operator|.
name|getBytesRef
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|ref
argument_list|)
expr_stmt|;
name|suggestTokenStream
operator|.
name|reset
argument_list|()
expr_stmt|;
while|while
condition|(
name|suggestTokenStream
operator|.
name|incrementToken
argument_list|()
condition|)
block|{
name|termAtt
operator|.
name|fillBytesRef
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|ref
operator|.
name|utf8ToString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"mykeyword"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|suggestTokenStream
operator|.
name|end
argument_list|()
expr_stmt|;
name|suggestTokenStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|class|ByteTermAttrToCharTermAttrFilter
specifier|public
specifier|final
specifier|static
class|class
name|ByteTermAttrToCharTermAttrFilter
extends|extends
name|TokenFilter
block|{
DECL|field|byteAttr
specifier|private
name|ByteTermAttribute
name|byteAttr
init|=
name|addAttribute
argument_list|(
name|ByteTermAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|payload
specifier|private
name|PayloadAttribute
name|payload
init|=
name|addAttribute
argument_list|(
name|PayloadAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|type
specifier|private
name|TypeAttribute
name|type
init|=
name|addAttribute
argument_list|(
name|TypeAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|charTermAttribute
specifier|private
name|CharTermAttribute
name|charTermAttribute
init|=
name|addAttribute
argument_list|(
name|CharTermAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|ByteTermAttrToCharTermAttrFilter
specifier|protected
name|ByteTermAttrToCharTermAttrFilter
parameter_list|(
name|TokenStream
name|input
parameter_list|)
block|{
name|super
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|incrementToken
specifier|public
name|boolean
name|incrementToken
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|input
operator|.
name|incrementToken
argument_list|()
condition|)
block|{
name|BytesRef
name|bytesRef
init|=
name|byteAttr
operator|.
name|getBytesRef
argument_list|()
decl_stmt|;
comment|// we move them over so we can assert them more easily in the tests
name|type
operator|.
name|setType
argument_list|(
name|payload
operator|.
name|getPayload
argument_list|()
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
block|}
end_class

end_unit

