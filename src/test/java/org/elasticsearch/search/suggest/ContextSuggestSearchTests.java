begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.suggest
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
operator|.
name|Slow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|create
operator|.
name|CreateIndexRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|suggest
operator|.
name|SuggestRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|suggest
operator|.
name|SuggestRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|suggest
operator|.
name|SuggestResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|geo
operator|.
name|GeoHashUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|geo
operator|.
name|GeoPoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|Fuzziness
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MapperParsingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|Suggest
operator|.
name|Suggestion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|Suggest
operator|.
name|Suggestion
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|Suggest
operator|.
name|Suggestion
operator|.
name|Entry
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|completion
operator|.
name|CompletionSuggestion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|completion
operator|.
name|CompletionSuggestionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|completion
operator|.
name|CompletionSuggestionFuzzyBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|context
operator|.
name|ContextBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|context
operator|.
name|ContextMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchIntegrationTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
operator|.
name|jsonBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchGeoAssertions
operator|.
name|assertDistance
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|containsString
import|;
end_import

begin_class
annotation|@
name|Slow
DECL|class|ContextSuggestSearchTests
specifier|public
class|class
name|ContextSuggestSearchTests
extends|extends
name|ElasticsearchIntegrationTest
block|{
DECL|field|INDEX
specifier|private
specifier|static
specifier|final
name|String
name|INDEX
init|=
literal|"test"
decl_stmt|;
DECL|field|TYPE
specifier|private
specifier|static
specifier|final
name|String
name|TYPE
init|=
literal|"testType"
decl_stmt|;
DECL|field|FIELD
specifier|private
specifier|static
specifier|final
name|String
name|FIELD
init|=
literal|"testField"
decl_stmt|;
DECL|field|HEROS
specifier|private
specifier|static
specifier|final
name|String
index|[]
index|[]
name|HEROS
init|=
block|{
block|{
literal|"Afari, Jamal"
block|,
literal|"Jamal Afari"
block|,
literal|"Jamal"
block|}
block|,
block|{
literal|"Allerdyce, St. John"
block|,
literal|"Allerdyce, John"
block|,
literal|"St. John"
block|,
literal|"St. John Allerdyce"
block|}
block|,
block|{
literal|"Beaubier, Jean-Paul"
block|,
literal|"Jean-Paul Beaubier"
block|,
literal|"Jean-Paul"
block|}
block|,
block|{
literal|"Beaubier, Jeanne-Marie"
block|,
literal|"Jeanne-Marie Beaubier"
block|,
literal|"Jeanne-Marie"
block|}
block|,
block|{
literal|"Braddock, Elizabeth \"Betsy\""
block|,
literal|"Betsy"
block|,
literal|"Braddock, Elizabeth"
block|,
literal|"Elizabeth Braddock"
block|,
literal|"Elizabeth"
block|}
block|,
block|{
literal|"Cody Mushumanski gun Man"
block|,
literal|"the hunter"
block|,
literal|"gun man"
block|,
literal|"Cody Mushumanski"
block|}
block|,
block|{
literal|"Corbo, Adrian"
block|,
literal|"Adrian Corbo"
block|,
literal|"Adrian"
block|}
block|,
block|{
literal|"Corbo, Jared"
block|,
literal|"Jared Corbo"
block|,
literal|"Jared"
block|}
block|,
block|{
literal|"Creel, Carl \"Crusher\""
block|,
literal|"Creel, Carl"
block|,
literal|"Crusher"
block|,
literal|"Carl Creel"
block|,
literal|"Carl"
block|}
block|,
block|{
literal|"Crichton, Lady Jacqueline Falsworth"
block|,
literal|"Lady Jacqueline Falsworth Crichton"
block|,
literal|"Lady Jacqueline Falsworth"
block|,
literal|"Jacqueline Falsworth"
block|}
block|,
block|{
literal|"Crichton, Kenneth"
block|,
literal|"Kenneth Crichton"
block|,
literal|"Kenneth"
block|}
block|,
block|{
literal|"MacKenzie, Al"
block|,
literal|"Al MacKenzie"
block|,
literal|"Al"
block|}
block|,
block|{
literal|"MacPherran, Mary \"Skeeter\""
block|,
literal|"Mary MacPherran \"Skeeter\""
block|,
literal|"MacPherran, Mary"
block|,
literal|"Skeeter"
block|,
literal|"Mary MacPherran"
block|}
block|,
block|{
literal|"MacTaggert, Moira"
block|,
literal|"Moira MacTaggert"
block|,
literal|"Moira"
block|}
block|,
block|{
literal|"Rasputin, Illyana"
block|,
literal|"Illyana Rasputin"
block|,
literal|"Illyana"
block|}
block|,
block|{
literal|"Rasputin, Mikhail"
block|,
literal|"Mikhail Rasputin"
block|,
literal|"Mikhail"
block|}
block|,
block|{
literal|"Rasputin, Piotr"
block|,
literal|"Piotr Rasputin"
block|,
literal|"Piotr"
block|}
block|,
block|{
literal|"Smythe, Alistair"
block|,
literal|"Alistair Smythe"
block|,
literal|"Alistair"
block|}
block|,
block|{
literal|"Smythe, Spencer"
block|,
literal|"Spencer Smythe"
block|,
literal|"Spencer"
block|}
block|,
block|{
literal|"Whitemane, Aelfyre"
block|,
literal|"Aelfyre Whitemane"
block|,
literal|"Aelfyre"
block|}
block|,
block|{
literal|"Whitemane, Kofi"
block|,
literal|"Kofi Whitemane"
block|,
literal|"Kofi"
block|}
block|}
decl_stmt|;
annotation|@
name|Test
DECL|method|testBasicGeo
specifier|public
name|void
name|testBasicGeo
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
name|INDEX
argument_list|)
operator|.
name|addMapping
argument_list|(
name|TYPE
argument_list|,
name|createMapping
argument_list|(
name|TYPE
argument_list|,
name|ContextBuilder
operator|.
name|location
argument_list|(
literal|"st"
argument_list|)
operator|.
name|precision
argument_list|(
literal|"5km"
argument_list|)
operator|.
name|neighbors
argument_list|(
literal|true
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ensureYellow
argument_list|()
expr_stmt|;
name|XContentBuilder
name|source1
init|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
name|FIELD
argument_list|)
operator|.
name|array
argument_list|(
literal|"input"
argument_list|,
literal|"Hotel Amsterdam"
argument_list|,
literal|"Amsterdam"
argument_list|)
operator|.
name|field
argument_list|(
literal|"output"
argument_list|,
literal|"Hotel Amsterdam in Berlin"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"context"
argument_list|)
operator|.
name|latlon
argument_list|(
literal|"st"
argument_list|,
literal|52.529172
argument_list|,
literal|13.407333
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|INDEX
argument_list|,
name|TYPE
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|source1
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|XContentBuilder
name|source2
init|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
name|FIELD
argument_list|)
operator|.
name|array
argument_list|(
literal|"input"
argument_list|,
literal|"Hotel Berlin"
argument_list|,
literal|"Berlin"
argument_list|)
operator|.
name|field
argument_list|(
literal|"output"
argument_list|,
literal|"Hotel Berlin in Amsterdam"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"context"
argument_list|)
operator|.
name|latlon
argument_list|(
literal|"st"
argument_list|,
literal|52.363389
argument_list|,
literal|4.888695
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|INDEX
argument_list|,
name|TYPE
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
name|source2
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareRefresh
argument_list|(
name|INDEX
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|String
name|suggestionName
init|=
name|randomAsciiOfLength
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|CompletionSuggestionBuilder
name|context
init|=
name|SuggestBuilders
operator|.
name|completionSuggestion
argument_list|(
name|suggestionName
argument_list|)
operator|.
name|field
argument_list|(
name|FIELD
argument_list|)
operator|.
name|text
argument_list|(
literal|"h"
argument_list|)
operator|.
name|size
argument_list|(
literal|10
argument_list|)
operator|.
name|addGeoLocation
argument_list|(
literal|"st"
argument_list|,
literal|52.52
argument_list|,
literal|13.4
argument_list|)
decl_stmt|;
name|SuggestRequestBuilder
name|suggestionRequest
init|=
name|client
argument_list|()
operator|.
name|prepareSuggest
argument_list|(
name|INDEX
argument_list|)
operator|.
name|addSuggestion
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|SuggestResponse
name|suggestResponse
init|=
name|suggestionRequest
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|suggestResponse
operator|.
name|getSuggest
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Hotel Amsterdam in Berlin"
argument_list|,
name|suggestResponse
operator|.
name|getSuggest
argument_list|()
operator|.
name|getSuggestion
argument_list|(
name|suggestionName
argument_list|)
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getOptions
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getText
argument_list|()
operator|.
name|string
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMultiLevelGeo
specifier|public
name|void
name|testMultiLevelGeo
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
name|INDEX
argument_list|)
operator|.
name|addMapping
argument_list|(
name|TYPE
argument_list|,
name|createMapping
argument_list|(
name|TYPE
argument_list|,
name|ContextBuilder
operator|.
name|location
argument_list|(
literal|"st"
argument_list|)
operator|.
name|precision
argument_list|(
literal|1
argument_list|)
operator|.
name|precision
argument_list|(
literal|2
argument_list|)
operator|.
name|precision
argument_list|(
literal|3
argument_list|)
operator|.
name|precision
argument_list|(
literal|4
argument_list|)
operator|.
name|precision
argument_list|(
literal|5
argument_list|)
operator|.
name|precision
argument_list|(
literal|6
argument_list|)
operator|.
name|precision
argument_list|(
literal|7
argument_list|)
operator|.
name|precision
argument_list|(
literal|8
argument_list|)
operator|.
name|precision
argument_list|(
literal|9
argument_list|)
operator|.
name|precision
argument_list|(
literal|10
argument_list|)
operator|.
name|precision
argument_list|(
literal|11
argument_list|)
operator|.
name|precision
argument_list|(
literal|12
argument_list|)
operator|.
name|neighbors
argument_list|(
literal|true
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ensureYellow
argument_list|()
expr_stmt|;
name|XContentBuilder
name|source1
init|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
name|FIELD
argument_list|)
operator|.
name|array
argument_list|(
literal|"input"
argument_list|,
literal|"Hotel Amsterdam"
argument_list|,
literal|"Amsterdam"
argument_list|)
operator|.
name|field
argument_list|(
literal|"output"
argument_list|,
literal|"Hotel Amsterdam in Berlin"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"context"
argument_list|)
operator|.
name|latlon
argument_list|(
literal|"st"
argument_list|,
literal|52.529172
argument_list|,
literal|13.407333
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|INDEX
argument_list|,
name|TYPE
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|source1
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareRefresh
argument_list|(
name|INDEX
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|precision
init|=
literal|1
init|;
name|precision
operator|<=
literal|12
condition|;
name|precision
operator|++
control|)
block|{
name|String
name|suggestionName
init|=
name|randomAsciiOfLength
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|CompletionSuggestionBuilder
name|context
init|=
operator|new
name|CompletionSuggestionBuilder
argument_list|(
name|suggestionName
argument_list|)
operator|.
name|field
argument_list|(
name|FIELD
argument_list|)
operator|.
name|text
argument_list|(
literal|"h"
argument_list|)
operator|.
name|size
argument_list|(
literal|10
argument_list|)
operator|.
name|addGeoLocation
argument_list|(
literal|"st"
argument_list|,
literal|52.529172
argument_list|,
literal|13.407333
argument_list|,
name|precision
argument_list|)
decl_stmt|;
name|SuggestRequestBuilder
name|suggestionRequest
init|=
name|client
argument_list|()
operator|.
name|prepareSuggest
argument_list|(
name|INDEX
argument_list|)
operator|.
name|addSuggestion
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|SuggestResponse
name|suggestResponse
init|=
name|suggestionRequest
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|suggestResponse
operator|.
name|getSuggest
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Hotel Amsterdam in Berlin"
argument_list|,
name|suggestResponse
operator|.
name|getSuggest
argument_list|()
operator|.
name|getSuggestion
argument_list|(
name|suggestionName
argument_list|)
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getOptions
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getText
argument_list|()
operator|.
name|string
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testMappingIdempotency
specifier|public
name|void
name|testMappingIdempotency
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|precisions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|randomIntBetween
argument_list|(
literal|4
argument_list|,
literal|12
argument_list|)
condition|;
name|i
operator|++
control|)
block|{
name|precisions
operator|.
name|add
argument_list|(
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|shuffle
argument_list|(
name|precisions
argument_list|,
name|getRandom
argument_list|()
argument_list|)
expr_stmt|;
name|XContentBuilder
name|mapping
init|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
name|TYPE
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"completion"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"completion"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"context"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"location"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"geo"
argument_list|)
operator|.
name|array
argument_list|(
literal|"precision"
argument_list|,
name|precisions
operator|.
name|toArray
argument_list|(
operator|new
name|Integer
index|[
name|precisions
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
name|INDEX
argument_list|)
operator|.
name|addMapping
argument_list|(
name|TYPE
argument_list|,
name|mapping
operator|.
name|string
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ensureYellow
argument_list|()
expr_stmt|;
name|Collections
operator|.
name|shuffle
argument_list|(
name|precisions
argument_list|,
name|getRandom
argument_list|()
argument_list|)
expr_stmt|;
name|mapping
operator|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
name|TYPE
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"completion"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"completion"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"context"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"location"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"geo"
argument_list|)
operator|.
name|array
argument_list|(
literal|"precision"
argument_list|,
name|precisions
operator|.
name|toArray
argument_list|(
operator|new
name|Integer
index|[
name|precisions
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|preparePutMapping
argument_list|(
name|INDEX
argument_list|)
operator|.
name|setType
argument_list|(
name|TYPE
argument_list|)
operator|.
name|setSource
argument_list|(
name|mapping
operator|.
name|string
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGeoField
specifier|public
name|void
name|testGeoField
parameter_list|()
throws|throws
name|Exception
block|{
name|XContentBuilder
name|mapping
init|=
name|jsonBuilder
argument_list|()
decl_stmt|;
name|mapping
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|mapping
operator|.
name|startObject
argument_list|(
name|TYPE
argument_list|)
expr_stmt|;
name|mapping
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
expr_stmt|;
name|mapping
operator|.
name|startObject
argument_list|(
literal|"pin"
argument_list|)
expr_stmt|;
name|mapping
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"geo_point"
argument_list|)
expr_stmt|;
name|mapping
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|mapping
operator|.
name|startObject
argument_list|(
name|FIELD
argument_list|)
expr_stmt|;
name|mapping
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"completion"
argument_list|)
expr_stmt|;
name|mapping
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
literal|"simple"
argument_list|)
expr_stmt|;
name|mapping
operator|.
name|startObject
argument_list|(
literal|"context"
argument_list|)
expr_stmt|;
name|mapping
operator|.
name|value
argument_list|(
name|ContextBuilder
operator|.
name|location
argument_list|(
literal|"st"
argument_list|,
literal|5
argument_list|,
literal|true
argument_list|)
operator|.
name|field
argument_list|(
literal|"pin"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|mapping
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|mapping
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|mapping
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|mapping
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|mapping
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
name|INDEX
argument_list|)
operator|.
name|addMapping
argument_list|(
name|TYPE
argument_list|,
name|mapping
argument_list|)
argument_list|)
expr_stmt|;
name|ensureYellow
argument_list|()
expr_stmt|;
name|XContentBuilder
name|source1
init|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|latlon
argument_list|(
literal|"pin"
argument_list|,
literal|52.529172
argument_list|,
literal|13.407333
argument_list|)
operator|.
name|startObject
argument_list|(
name|FIELD
argument_list|)
operator|.
name|array
argument_list|(
literal|"input"
argument_list|,
literal|"Hotel Amsterdam"
argument_list|,
literal|"Amsterdam"
argument_list|)
operator|.
name|field
argument_list|(
literal|"output"
argument_list|,
literal|"Hotel Amsterdam in Berlin"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"context"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|INDEX
argument_list|,
name|TYPE
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|source1
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|XContentBuilder
name|source2
init|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|latlon
argument_list|(
literal|"pin"
argument_list|,
literal|52.363389
argument_list|,
literal|4.888695
argument_list|)
operator|.
name|startObject
argument_list|(
name|FIELD
argument_list|)
operator|.
name|array
argument_list|(
literal|"input"
argument_list|,
literal|"Hotel Berlin"
argument_list|,
literal|"Berlin"
argument_list|)
operator|.
name|field
argument_list|(
literal|"output"
argument_list|,
literal|"Hotel Berlin in Amsterdam"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"context"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|INDEX
argument_list|,
name|TYPE
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
name|source2
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|String
name|suggestionName
init|=
name|randomAsciiOfLength
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|CompletionSuggestionBuilder
name|context
init|=
name|SuggestBuilders
operator|.
name|completionSuggestion
argument_list|(
name|suggestionName
argument_list|)
operator|.
name|field
argument_list|(
name|FIELD
argument_list|)
operator|.
name|text
argument_list|(
literal|"h"
argument_list|)
operator|.
name|size
argument_list|(
literal|10
argument_list|)
operator|.
name|addGeoLocation
argument_list|(
literal|"st"
argument_list|,
literal|52.52
argument_list|,
literal|13.4
argument_list|)
decl_stmt|;
name|SuggestRequestBuilder
name|suggestionRequest
init|=
name|client
argument_list|()
operator|.
name|prepareSuggest
argument_list|(
name|INDEX
argument_list|)
operator|.
name|addSuggestion
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|SuggestResponse
name|suggestResponse
init|=
name|suggestionRequest
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|suggestResponse
operator|.
name|getSuggest
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Hotel Amsterdam in Berlin"
argument_list|,
name|suggestResponse
operator|.
name|getSuggest
argument_list|()
operator|.
name|getSuggestion
argument_list|(
name|suggestionName
argument_list|)
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getOptions
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getText
argument_list|()
operator|.
name|string
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSimpleGeo
specifier|public
name|void
name|testSimpleGeo
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|reinickendorf
init|=
literal|"u337p3mp11e2"
decl_stmt|;
name|String
name|pankow
init|=
literal|"u33e0cyyjur4"
decl_stmt|;
name|String
name|koepenick
init|=
literal|"u33dm4f7fn40"
decl_stmt|;
name|String
name|bernau
init|=
literal|"u33etnjf1yjn"
decl_stmt|;
name|String
name|berlin
init|=
literal|"u33dc1v0xupz"
decl_stmt|;
name|String
name|mitte
init|=
literal|"u33dc0cpke4q"
decl_stmt|;
name|String
name|steglitz
init|=
literal|"u336m36rjh2p"
decl_stmt|;
name|String
name|wilmersdorf
init|=
literal|"u336wmw0q41s"
decl_stmt|;
name|String
name|spandau
init|=
literal|"u336uqek7gh6"
decl_stmt|;
name|String
name|tempelhof
init|=
literal|"u33d91jh3by0"
decl_stmt|;
name|String
name|schoeneberg
init|=
literal|"u336xdrkzbq7"
decl_stmt|;
name|String
name|treptow
init|=
literal|"u33d9unn7fp7"
decl_stmt|;
name|double
name|precision
init|=
literal|100.0
decl_stmt|;
comment|// meters
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
name|INDEX
argument_list|)
operator|.
name|addMapping
argument_list|(
name|TYPE
argument_list|,
name|createMapping
argument_list|(
name|TYPE
argument_list|,
name|ContextBuilder
operator|.
name|location
argument_list|(
literal|"st"
argument_list|)
operator|.
name|precision
argument_list|(
name|precision
argument_list|)
operator|.
name|neighbors
argument_list|(
literal|true
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ensureYellow
argument_list|()
expr_stmt|;
name|String
index|[]
name|locations
init|=
block|{
name|reinickendorf
block|,
name|pankow
block|,
name|koepenick
block|,
name|bernau
block|,
name|berlin
block|,
name|mitte
block|,
name|steglitz
block|,
name|wilmersdorf
block|,
name|spandau
block|,
name|tempelhof
block|,
name|schoeneberg
block|,
name|treptow
block|}
decl_stmt|;
name|String
index|[]
index|[]
name|input
init|=
block|{
block|{
literal|"pizza - reinickendorf"
block|,
literal|"pizza"
block|,
literal|"food"
block|}
block|,
block|{
literal|"pizza - pankow"
block|,
literal|"pizza"
block|,
literal|"food"
block|}
block|,
block|{
literal|"pizza - koepenick"
block|,
literal|"pizza"
block|,
literal|"food"
block|}
block|,
block|{
literal|"pizza - bernau"
block|,
literal|"pizza"
block|,
literal|"food"
block|}
block|,
block|{
literal|"pizza - berlin"
block|,
literal|"pizza"
block|,
literal|"food"
block|}
block|,
block|{
literal|"pizza - mitte"
block|,
literal|"pizza - berlin mitte"
block|,
literal|"pizza"
block|,
literal|"food"
block|}
block|,
block|{
literal|"pizza - steglitz"
block|,
literal|"pizza - Berlin-Steglitz"
block|,
literal|"pizza"
block|,
literal|"food"
block|}
block|,
block|{
literal|"pizza - wilmersdorf"
block|,
literal|"pizza"
block|,
literal|"food"
block|}
block|,
block|{
literal|"pizza - spandau"
block|,
literal|"spandau bei berlin"
block|,
literal|"pizza"
block|,
literal|"food"
block|}
block|,
block|{
literal|"pizza - tempelhof"
block|,
literal|"pizza - berlin-tempelhof"
block|,
literal|"pizza"
block|,
literal|"food"
block|}
block|,
block|{
literal|"pizza - schoeneberg"
block|,
literal|"pizza - schÃ¶neberg"
block|,
literal|"pizza - berlin schoeneberg"
block|,
literal|"pizza"
block|,
literal|"food"
block|}
block|,
block|{
literal|"pizza - treptow"
block|,
literal|"pizza"
block|,
literal|"food"
block|}
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|locations
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|XContentBuilder
name|source
init|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
name|FIELD
argument_list|)
operator|.
name|startArray
argument_list|(
literal|"input"
argument_list|)
operator|.
name|value
argument_list|(
name|input
index|[
name|i
index|]
argument_list|)
operator|.
name|endArray
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"context"
argument_list|)
operator|.
name|field
argument_list|(
literal|"st"
argument_list|,
name|locations
index|[
name|i
index|]
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"payload"
argument_list|,
name|locations
index|[
name|i
index|]
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|INDEX
argument_list|,
name|TYPE
argument_list|,
literal|""
operator|+
name|i
argument_list|)
operator|.
name|setSource
argument_list|(
name|source
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
block|}
name|refresh
argument_list|()
expr_stmt|;
name|assertGeoSuggestionsInRange
argument_list|(
name|berlin
argument_list|,
literal|"pizza"
argument_list|,
name|precision
argument_list|)
expr_stmt|;
name|assertGeoSuggestionsInRange
argument_list|(
name|reinickendorf
argument_list|,
literal|"pizza"
argument_list|,
name|precision
argument_list|)
expr_stmt|;
name|assertGeoSuggestionsInRange
argument_list|(
name|spandau
argument_list|,
literal|"pizza"
argument_list|,
name|precision
argument_list|)
expr_stmt|;
name|assertGeoSuggestionsInRange
argument_list|(
name|koepenick
argument_list|,
literal|"pizza"
argument_list|,
name|precision
argument_list|)
expr_stmt|;
name|assertGeoSuggestionsInRange
argument_list|(
name|schoeneberg
argument_list|,
literal|"pizza"
argument_list|,
name|precision
argument_list|)
expr_stmt|;
name|assertGeoSuggestionsInRange
argument_list|(
name|tempelhof
argument_list|,
literal|"pizza"
argument_list|,
name|precision
argument_list|)
expr_stmt|;
name|assertGeoSuggestionsInRange
argument_list|(
name|bernau
argument_list|,
literal|"pizza"
argument_list|,
name|precision
argument_list|)
expr_stmt|;
name|assertGeoSuggestionsInRange
argument_list|(
name|pankow
argument_list|,
literal|"pizza"
argument_list|,
name|precision
argument_list|)
expr_stmt|;
name|assertGeoSuggestionsInRange
argument_list|(
name|mitte
argument_list|,
literal|"pizza"
argument_list|,
name|precision
argument_list|)
expr_stmt|;
name|assertGeoSuggestionsInRange
argument_list|(
name|steglitz
argument_list|,
literal|"pizza"
argument_list|,
name|precision
argument_list|)
expr_stmt|;
name|assertGeoSuggestionsInRange
argument_list|(
name|mitte
argument_list|,
literal|"pizza"
argument_list|,
name|precision
argument_list|)
expr_stmt|;
name|assertGeoSuggestionsInRange
argument_list|(
name|wilmersdorf
argument_list|,
literal|"pizza"
argument_list|,
name|precision
argument_list|)
expr_stmt|;
name|assertGeoSuggestionsInRange
argument_list|(
name|treptow
argument_list|,
literal|"pizza"
argument_list|,
name|precision
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSimplePrefix
specifier|public
name|void
name|testSimplePrefix
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
name|INDEX
argument_list|)
operator|.
name|addMapping
argument_list|(
name|TYPE
argument_list|,
name|createMapping
argument_list|(
name|TYPE
argument_list|,
name|ContextBuilder
operator|.
name|category
argument_list|(
literal|"st"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ensureYellow
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|HEROS
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|XContentBuilder
name|source
init|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
name|FIELD
argument_list|)
operator|.
name|startArray
argument_list|(
literal|"input"
argument_list|)
operator|.
name|value
argument_list|(
name|HEROS
index|[
name|i
index|]
argument_list|)
operator|.
name|endArray
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"context"
argument_list|)
operator|.
name|field
argument_list|(
literal|"st"
argument_list|,
name|i
operator|%
literal|3
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"payload"
argument_list|)
operator|.
name|field
argument_list|(
literal|"group"
argument_list|,
name|i
operator|%
literal|3
argument_list|)
operator|.
name|field
argument_list|(
literal|"id"
argument_list|,
name|i
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|INDEX
argument_list|,
name|TYPE
argument_list|,
literal|""
operator|+
name|i
argument_list|)
operator|.
name|setSource
argument_list|(
name|source
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
block|}
name|refresh
argument_list|()
expr_stmt|;
name|assertPrefixSuggestions
argument_list|(
literal|0
argument_list|,
literal|"a"
argument_list|,
literal|"Afari, Jamal"
argument_list|,
literal|"Adrian Corbo"
argument_list|,
literal|"Adrian"
argument_list|)
expr_stmt|;
name|assertPrefixSuggestions
argument_list|(
literal|0
argument_list|,
literal|"b"
argument_list|,
literal|"Beaubier, Jeanne-Marie"
argument_list|)
expr_stmt|;
name|assertPrefixSuggestions
argument_list|(
literal|0
argument_list|,
literal|"c"
argument_list|,
literal|"Corbo, Adrian"
argument_list|,
literal|"Crichton, Lady Jacqueline Falsworth"
argument_list|)
expr_stmt|;
name|assertPrefixSuggestions
argument_list|(
literal|0
argument_list|,
literal|"mary"
argument_list|,
literal|"Mary MacPherran \"Skeeter\""
argument_list|,
literal|"Mary MacPherran"
argument_list|)
expr_stmt|;
name|assertPrefixSuggestions
argument_list|(
literal|0
argument_list|,
literal|"s"
argument_list|,
literal|"Skeeter"
argument_list|,
literal|"Smythe, Spencer"
argument_list|,
literal|"Spencer Smythe"
argument_list|,
literal|"Spencer"
argument_list|)
expr_stmt|;
name|assertPrefixSuggestions
argument_list|(
literal|1
argument_list|,
literal|"s"
argument_list|,
literal|"St. John"
argument_list|,
literal|"St. John Allerdyce"
argument_list|)
expr_stmt|;
name|assertPrefixSuggestions
argument_list|(
literal|2
argument_list|,
literal|"s"
argument_list|,
literal|"Smythe, Alistair"
argument_list|)
expr_stmt|;
name|assertPrefixSuggestions
argument_list|(
literal|1
argument_list|,
literal|"w"
argument_list|,
literal|"Whitemane, Aelfyre"
argument_list|)
expr_stmt|;
name|assertPrefixSuggestions
argument_list|(
literal|2
argument_list|,
literal|"w"
argument_list|,
literal|"Whitemane, Kofi"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTypeCategoryIsActuallyCalledCategory
specifier|public
name|void
name|testTypeCategoryIsActuallyCalledCategory
parameter_list|()
throws|throws
name|Exception
block|{
name|XContentBuilder
name|mapping
init|=
name|jsonBuilder
argument_list|()
decl_stmt|;
name|mapping
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
name|TYPE
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"suggest_field"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"completion"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"context"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"color"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"category"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
name|INDEX
argument_list|)
operator|.
name|addMapping
argument_list|(
name|TYPE
argument_list|,
name|mapping
argument_list|)
argument_list|)
expr_stmt|;
name|ensureYellow
argument_list|()
expr_stmt|;
name|XContentBuilder
name|doc1
init|=
name|jsonBuilder
argument_list|()
decl_stmt|;
name|doc1
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"suggest_field"
argument_list|)
operator|.
name|field
argument_list|(
literal|"input"
argument_list|,
literal|"backpack_red"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"context"
argument_list|)
operator|.
name|field
argument_list|(
literal|"color"
argument_list|,
literal|"red"
argument_list|,
literal|"all_colors"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|XContentBuilder
name|doc2
init|=
name|jsonBuilder
argument_list|()
decl_stmt|;
name|doc2
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"suggest_field"
argument_list|)
operator|.
name|field
argument_list|(
literal|"input"
argument_list|,
literal|"backpack_green"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"context"
argument_list|)
operator|.
name|field
argument_list|(
literal|"color"
argument_list|,
literal|"green"
argument_list|,
literal|"all_colors"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|INDEX
argument_list|,
name|TYPE
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|doc1
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|INDEX
argument_list|,
name|TYPE
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
name|doc2
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|getBackpackSuggestionAndCompare
argument_list|(
literal|"all_colors"
argument_list|,
literal|"backpack_red"
argument_list|,
literal|"backpack_green"
argument_list|)
expr_stmt|;
name|getBackpackSuggestionAndCompare
argument_list|(
literal|"red"
argument_list|,
literal|"backpack_red"
argument_list|)
expr_stmt|;
name|getBackpackSuggestionAndCompare
argument_list|(
literal|"green"
argument_list|,
literal|"backpack_green"
argument_list|)
expr_stmt|;
name|getBackpackSuggestionAndCompare
argument_list|(
literal|"not_existing_color"
argument_list|)
expr_stmt|;
block|}
DECL|method|getBackpackSuggestionAndCompare
specifier|private
name|void
name|getBackpackSuggestionAndCompare
parameter_list|(
name|String
name|contextValue
parameter_list|,
name|String
modifier|...
name|expectedText
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|expected
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
name|expectedText
argument_list|)
decl_stmt|;
name|CompletionSuggestionBuilder
name|context
init|=
name|SuggestBuilders
operator|.
name|completionSuggestion
argument_list|(
literal|"suggestion"
argument_list|)
operator|.
name|field
argument_list|(
literal|"suggest_field"
argument_list|)
operator|.
name|text
argument_list|(
literal|"back"
argument_list|)
operator|.
name|size
argument_list|(
literal|10
argument_list|)
operator|.
name|addContextField
argument_list|(
literal|"color"
argument_list|,
name|contextValue
argument_list|)
decl_stmt|;
name|SuggestRequestBuilder
name|suggestionRequest
init|=
name|client
argument_list|()
operator|.
name|prepareSuggest
argument_list|(
name|INDEX
argument_list|)
operator|.
name|addSuggestion
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|SuggestResponse
name|suggestResponse
init|=
name|suggestionRequest
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|Suggest
name|suggest
init|=
name|suggestResponse
operator|.
name|getSuggest
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|suggest
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|Suggestion
argument_list|<
name|?
extends|extends
name|Entry
argument_list|<
name|?
extends|extends
name|Option
argument_list|>
argument_list|>
name|s
range|:
name|suggest
control|)
block|{
name|CompletionSuggestion
name|suggestion
init|=
operator|(
name|CompletionSuggestion
operator|)
name|s
decl_stmt|;
for|for
control|(
name|CompletionSuggestion
operator|.
name|Entry
name|entry
range|:
name|suggestion
control|)
block|{
name|List
argument_list|<
name|CompletionSuggestion
operator|.
name|Entry
operator|.
name|Option
argument_list|>
name|options
init|=
name|entry
operator|.
name|getOptions
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|options
operator|.
name|size
argument_list|()
argument_list|,
name|expectedText
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|CompletionSuggestion
operator|.
name|Entry
operator|.
name|Option
name|option
range|:
name|options
control|)
block|{
name|assertTrue
argument_list|(
name|expected
operator|.
name|contains
argument_list|(
name|option
operator|.
name|getText
argument_list|()
operator|.
name|string
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|.
name|remove
argument_list|(
name|option
operator|.
name|getText
argument_list|()
operator|.
name|string
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testBasic
specifier|public
name|void
name|testBasic
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
name|INDEX
argument_list|)
operator|.
name|addMapping
argument_list|(
name|TYPE
argument_list|,
name|createMapping
argument_list|(
name|TYPE
argument_list|,
literal|false
argument_list|,
name|ContextBuilder
operator|.
name|reference
argument_list|(
literal|"st"
argument_list|,
literal|"_type"
argument_list|)
argument_list|,
name|ContextBuilder
operator|.
name|reference
argument_list|(
literal|"nd"
argument_list|,
literal|"_type"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ensureYellow
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|INDEX
argument_list|,
name|TYPE
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
name|FIELD
argument_list|)
operator|.
name|startArray
argument_list|(
literal|"input"
argument_list|)
operator|.
name|value
argument_list|(
literal|"my hotel"
argument_list|)
operator|.
name|value
argument_list|(
literal|"this hotel"
argument_list|)
operator|.
name|endArray
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"context"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"payload"
argument_list|,
name|TYPE
operator|+
literal|"|"
operator|+
name|TYPE
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|assertDoubleFieldSuggestions
argument_list|(
name|TYPE
argument_list|,
name|TYPE
argument_list|,
literal|"m"
argument_list|,
literal|"my hotel"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSimpleField
specifier|public
name|void
name|testSimpleField
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
name|INDEX
argument_list|)
operator|.
name|addMapping
argument_list|(
name|TYPE
argument_list|,
name|createMapping
argument_list|(
name|TYPE
argument_list|,
name|ContextBuilder
operator|.
name|reference
argument_list|(
literal|"st"
argument_list|,
literal|"category"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ensureYellow
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|HEROS
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|INDEX
argument_list|,
name|TYPE
argument_list|,
literal|""
operator|+
name|i
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"category"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
operator|%
literal|3
argument_list|)
argument_list|)
operator|.
name|startObject
argument_list|(
name|FIELD
argument_list|)
operator|.
name|startArray
argument_list|(
literal|"input"
argument_list|)
operator|.
name|value
argument_list|(
name|HEROS
index|[
name|i
index|]
argument_list|)
operator|.
name|endArray
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"context"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"payload"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
operator|%
literal|3
argument_list|)
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
block|}
name|refresh
argument_list|()
expr_stmt|;
name|assertFieldSuggestions
argument_list|(
literal|"0"
argument_list|,
literal|"a"
argument_list|,
literal|"Afari, Jamal"
argument_list|,
literal|"Adrian Corbo"
argument_list|,
literal|"Adrian"
argument_list|)
expr_stmt|;
name|assertFieldSuggestions
argument_list|(
literal|"0"
argument_list|,
literal|"b"
argument_list|,
literal|"Beaubier, Jeanne-Marie"
argument_list|)
expr_stmt|;
name|assertFieldSuggestions
argument_list|(
literal|"0"
argument_list|,
literal|"c"
argument_list|,
literal|"Corbo, Adrian"
argument_list|,
literal|"Crichton, Lady Jacqueline Falsworth"
argument_list|)
expr_stmt|;
name|assertFieldSuggestions
argument_list|(
literal|"0"
argument_list|,
literal|"mary"
argument_list|,
literal|"Mary MacPherran \"Skeeter\""
argument_list|,
literal|"Mary MacPherran"
argument_list|)
expr_stmt|;
name|assertFieldSuggestions
argument_list|(
literal|"0"
argument_list|,
literal|"s"
argument_list|,
literal|"Skeeter"
argument_list|,
literal|"Smythe, Spencer"
argument_list|,
literal|"Spencer Smythe"
argument_list|,
literal|"Spencer"
argument_list|)
expr_stmt|;
name|assertFieldSuggestions
argument_list|(
literal|"1"
argument_list|,
literal|"s"
argument_list|,
literal|"St. John"
argument_list|,
literal|"St. John Allerdyce"
argument_list|)
expr_stmt|;
name|assertFieldSuggestions
argument_list|(
literal|"2"
argument_list|,
literal|"s"
argument_list|,
literal|"Smythe, Alistair"
argument_list|)
expr_stmt|;
name|assertFieldSuggestions
argument_list|(
literal|"1"
argument_list|,
literal|"w"
argument_list|,
literal|"Whitemane, Aelfyre"
argument_list|)
expr_stmt|;
name|assertFieldSuggestions
argument_list|(
literal|"2"
argument_list|,
literal|"w"
argument_list|,
literal|"Whitemane, Kofi"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMultiValueField
specifier|public
name|void
name|testMultiValueField
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
name|INDEX
argument_list|)
operator|.
name|addMapping
argument_list|(
name|TYPE
argument_list|,
name|createMapping
argument_list|(
name|TYPE
argument_list|,
name|ContextBuilder
operator|.
name|reference
argument_list|(
literal|"st"
argument_list|,
literal|"category"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ensureYellow
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|HEROS
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|INDEX
argument_list|,
name|TYPE
argument_list|,
literal|""
operator|+
name|i
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startArray
argument_list|(
literal|"category"
argument_list|)
operator|.
name|value
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
operator|%
literal|3
argument_list|)
argument_list|)
operator|.
name|value
argument_list|(
literal|"other"
argument_list|)
operator|.
name|endArray
argument_list|()
operator|.
name|startObject
argument_list|(
name|FIELD
argument_list|)
operator|.
name|startArray
argument_list|(
literal|"input"
argument_list|)
operator|.
name|value
argument_list|(
name|HEROS
index|[
name|i
index|]
argument_list|)
operator|.
name|endArray
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"context"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"payload"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
operator|%
literal|3
argument_list|)
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
block|}
name|refresh
argument_list|()
expr_stmt|;
name|assertFieldSuggestions
argument_list|(
literal|"0"
argument_list|,
literal|"a"
argument_list|,
literal|"Afari, Jamal"
argument_list|,
literal|"Adrian Corbo"
argument_list|,
literal|"Adrian"
argument_list|)
expr_stmt|;
name|assertFieldSuggestions
argument_list|(
literal|"0"
argument_list|,
literal|"b"
argument_list|,
literal|"Beaubier, Jeanne-Marie"
argument_list|)
expr_stmt|;
name|assertFieldSuggestions
argument_list|(
literal|"0"
argument_list|,
literal|"c"
argument_list|,
literal|"Corbo, Adrian"
argument_list|,
literal|"Crichton, Lady Jacqueline Falsworth"
argument_list|)
expr_stmt|;
name|assertFieldSuggestions
argument_list|(
literal|"0"
argument_list|,
literal|"mary"
argument_list|,
literal|"Mary MacPherran \"Skeeter\""
argument_list|,
literal|"Mary MacPherran"
argument_list|)
expr_stmt|;
name|assertFieldSuggestions
argument_list|(
literal|"0"
argument_list|,
literal|"s"
argument_list|,
literal|"Skeeter"
argument_list|,
literal|"Smythe, Spencer"
argument_list|,
literal|"Spencer Smythe"
argument_list|,
literal|"Spencer"
argument_list|)
expr_stmt|;
name|assertFieldSuggestions
argument_list|(
literal|"1"
argument_list|,
literal|"s"
argument_list|,
literal|"St. John"
argument_list|,
literal|"St. John Allerdyce"
argument_list|)
expr_stmt|;
name|assertFieldSuggestions
argument_list|(
literal|"2"
argument_list|,
literal|"s"
argument_list|,
literal|"Smythe, Alistair"
argument_list|)
expr_stmt|;
name|assertFieldSuggestions
argument_list|(
literal|"1"
argument_list|,
literal|"w"
argument_list|,
literal|"Whitemane, Aelfyre"
argument_list|)
expr_stmt|;
name|assertFieldSuggestions
argument_list|(
literal|"2"
argument_list|,
literal|"w"
argument_list|,
literal|"Whitemane, Kofi"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMultiContext
specifier|public
name|void
name|testMultiContext
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
name|INDEX
argument_list|)
operator|.
name|addMapping
argument_list|(
name|TYPE
argument_list|,
name|createMapping
argument_list|(
name|TYPE
argument_list|,
name|ContextBuilder
operator|.
name|reference
argument_list|(
literal|"st"
argument_list|,
literal|"categoryA"
argument_list|)
argument_list|,
name|ContextBuilder
operator|.
name|reference
argument_list|(
literal|"nd"
argument_list|,
literal|"categoryB"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ensureYellow
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|HEROS
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|INDEX
argument_list|,
name|TYPE
argument_list|,
literal|""
operator|+
name|i
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"categoryA"
argument_list|)
operator|.
name|value
argument_list|(
literal|""
operator|+
call|(
name|char
call|)
argument_list|(
literal|'0'
operator|+
operator|(
name|i
operator|%
literal|3
operator|)
argument_list|)
argument_list|)
operator|.
name|field
argument_list|(
literal|"categoryB"
argument_list|)
operator|.
name|value
argument_list|(
literal|""
operator|+
call|(
name|char
call|)
argument_list|(
literal|'A'
operator|+
operator|(
name|i
operator|%
literal|3
operator|)
argument_list|)
argument_list|)
operator|.
name|startObject
argument_list|(
name|FIELD
argument_list|)
operator|.
name|startArray
argument_list|(
literal|"input"
argument_list|)
operator|.
name|value
argument_list|(
name|HEROS
index|[
name|i
index|]
argument_list|)
operator|.
name|endArray
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"context"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"payload"
argument_list|,
operator|(
call|(
name|char
call|)
argument_list|(
literal|'0'
operator|+
operator|(
name|i
operator|%
literal|3
operator|)
argument_list|)
operator|)
operator|+
literal|""
operator|+
call|(
name|char
call|)
argument_list|(
literal|'A'
operator|+
operator|(
name|i
operator|%
literal|3
operator|)
argument_list|)
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
block|}
name|refresh
argument_list|()
expr_stmt|;
name|assertMultiContextSuggestions
argument_list|(
literal|"0"
argument_list|,
literal|"A"
argument_list|,
literal|"a"
argument_list|,
literal|"Afari, Jamal"
argument_list|,
literal|"Adrian Corbo"
argument_list|,
literal|"Adrian"
argument_list|)
expr_stmt|;
name|assertMultiContextSuggestions
argument_list|(
literal|"0"
argument_list|,
literal|"A"
argument_list|,
literal|"b"
argument_list|,
literal|"Beaubier, Jeanne-Marie"
argument_list|)
expr_stmt|;
name|assertMultiContextSuggestions
argument_list|(
literal|"0"
argument_list|,
literal|"A"
argument_list|,
literal|"c"
argument_list|,
literal|"Corbo, Adrian"
argument_list|,
literal|"Crichton, Lady Jacqueline Falsworth"
argument_list|)
expr_stmt|;
name|assertMultiContextSuggestions
argument_list|(
literal|"0"
argument_list|,
literal|"A"
argument_list|,
literal|"mary"
argument_list|,
literal|"Mary MacPherran \"Skeeter\""
argument_list|,
literal|"Mary MacPherran"
argument_list|)
expr_stmt|;
name|assertMultiContextSuggestions
argument_list|(
literal|"0"
argument_list|,
literal|"A"
argument_list|,
literal|"s"
argument_list|,
literal|"Skeeter"
argument_list|,
literal|"Smythe, Spencer"
argument_list|,
literal|"Spencer Smythe"
argument_list|,
literal|"Spencer"
argument_list|)
expr_stmt|;
name|assertMultiContextSuggestions
argument_list|(
literal|"1"
argument_list|,
literal|"B"
argument_list|,
literal|"s"
argument_list|,
literal|"St. John"
argument_list|,
literal|"St. John Allerdyce"
argument_list|)
expr_stmt|;
name|assertMultiContextSuggestions
argument_list|(
literal|"2"
argument_list|,
literal|"C"
argument_list|,
literal|"s"
argument_list|,
literal|"Smythe, Alistair"
argument_list|)
expr_stmt|;
name|assertMultiContextSuggestions
argument_list|(
literal|"1"
argument_list|,
literal|"B"
argument_list|,
literal|"w"
argument_list|,
literal|"Whitemane, Aelfyre"
argument_list|)
expr_stmt|;
name|assertMultiContextSuggestions
argument_list|(
literal|"2"
argument_list|,
literal|"C"
argument_list|,
literal|"w"
argument_list|,
literal|"Whitemane, Kofi"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMultiContextWithFuzzyLogic
specifier|public
name|void
name|testMultiContextWithFuzzyLogic
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
name|INDEX
argument_list|)
operator|.
name|addMapping
argument_list|(
name|TYPE
argument_list|,
name|createMapping
argument_list|(
name|TYPE
argument_list|,
name|ContextBuilder
operator|.
name|reference
argument_list|(
literal|"st"
argument_list|,
literal|"categoryA"
argument_list|)
argument_list|,
name|ContextBuilder
operator|.
name|reference
argument_list|(
literal|"nd"
argument_list|,
literal|"categoryB"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ensureYellow
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|HEROS
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|source
init|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"categoryA"
argument_list|,
literal|""
operator|+
call|(
name|char
call|)
argument_list|(
literal|'0'
operator|+
operator|(
name|i
operator|%
literal|3
operator|)
argument_list|)
argument_list|)
operator|.
name|field
argument_list|(
literal|"categoryB"
argument_list|,
literal|""
operator|+
call|(
name|char
call|)
argument_list|(
literal|'a'
operator|+
operator|(
name|i
operator|%
literal|3
operator|)
argument_list|)
argument_list|)
operator|.
name|startObject
argument_list|(
name|FIELD
argument_list|)
operator|.
name|array
argument_list|(
literal|"input"
argument_list|,
name|HEROS
index|[
name|i
index|]
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"context"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"payload"
argument_list|)
operator|.
name|field
argument_list|(
literal|"categoryA"
argument_list|,
literal|""
operator|+
call|(
name|char
call|)
argument_list|(
literal|'0'
operator|+
operator|(
name|i
operator|%
literal|3
operator|)
argument_list|)
argument_list|)
operator|.
name|field
argument_list|(
literal|"categoryB"
argument_list|,
literal|""
operator|+
call|(
name|char
call|)
argument_list|(
literal|'a'
operator|+
operator|(
name|i
operator|%
literal|3
operator|)
argument_list|)
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
decl_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|INDEX
argument_list|,
name|TYPE
argument_list|,
literal|""
operator|+
name|i
argument_list|)
operator|.
name|setSource
argument_list|(
name|source
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
block|}
name|refresh
argument_list|()
expr_stmt|;
name|String
index|[]
name|prefix1
init|=
block|{
literal|"0"
block|,
literal|"1"
block|,
literal|"2"
block|}
decl_stmt|;
name|String
index|[]
name|prefix2
init|=
block|{
literal|"a"
block|,
literal|"b"
block|,
literal|"c"
block|}
decl_stmt|;
name|String
index|[]
name|prefix3
init|=
block|{
literal|"0"
block|,
literal|"1"
block|}
decl_stmt|;
name|String
index|[]
name|prefix4
init|=
block|{
literal|"a"
block|,
literal|"b"
block|}
decl_stmt|;
name|assertContextWithFuzzySuggestions
argument_list|(
name|prefix1
argument_list|,
name|prefix2
argument_list|,
literal|"mary"
argument_list|,
literal|"MacKenzie, Al"
argument_list|,
literal|"MacPherran, Mary"
argument_list|,
literal|"MacPherran, Mary \"Skeeter\""
argument_list|,
literal|"MacTaggert, Moira"
argument_list|,
literal|"Mary MacPherran"
argument_list|,
literal|"Mary MacPherran \"Skeeter\""
argument_list|)
expr_stmt|;
name|assertContextWithFuzzySuggestions
argument_list|(
name|prefix1
argument_list|,
name|prefix2
argument_list|,
literal|"mac"
argument_list|,
literal|"Mikhail"
argument_list|,
literal|"Mary MacPherran \"Skeeter\""
argument_list|,
literal|"MacTaggert, Moira"
argument_list|,
literal|"Moira MacTaggert"
argument_list|,
literal|"Moira"
argument_list|,
literal|"MacKenzie, Al"
argument_list|,
literal|"Mary MacPherran"
argument_list|,
literal|"Mikhail Rasputin"
argument_list|,
literal|"MacPherran, Mary"
argument_list|,
literal|"MacPherran, Mary \"Skeeter\""
argument_list|)
expr_stmt|;
name|assertContextWithFuzzySuggestions
argument_list|(
name|prefix3
argument_list|,
name|prefix4
argument_list|,
literal|"mary"
argument_list|,
literal|"MacPherran, Mary"
argument_list|,
literal|"MacPherran, Mary \"Skeeter\""
argument_list|,
literal|"MacTaggert, Moira"
argument_list|,
literal|"Mary MacPherran"
argument_list|,
literal|"Mary MacPherran \"Skeeter\""
argument_list|)
expr_stmt|;
name|assertContextWithFuzzySuggestions
argument_list|(
name|prefix3
argument_list|,
name|prefix4
argument_list|,
literal|"mac"
argument_list|,
literal|"MacPherran, Mary"
argument_list|,
literal|"MacPherran, Mary \"Skeeter\""
argument_list|,
literal|"MacTaggert, Moira"
argument_list|,
literal|"Mary MacPherran"
argument_list|,
literal|"Mary MacPherran \"Skeeter\""
argument_list|,
literal|"Mikhail"
argument_list|,
literal|"Mikhail Rasputin"
argument_list|,
literal|"Moira"
argument_list|,
literal|"Moira MacTaggert"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSimpleType
specifier|public
name|void
name|testSimpleType
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|types
init|=
block|{
name|TYPE
operator|+
literal|"A"
block|,
name|TYPE
operator|+
literal|"B"
block|,
name|TYPE
operator|+
literal|"C"
block|}
decl_stmt|;
name|CreateIndexRequestBuilder
name|createIndexRequestBuilder
init|=
name|prepareCreate
argument_list|(
name|INDEX
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|type
range|:
name|types
control|)
block|{
name|createIndexRequestBuilder
operator|.
name|addMapping
argument_list|(
name|type
argument_list|,
name|createMapping
argument_list|(
name|type
argument_list|,
name|ContextBuilder
operator|.
name|reference
argument_list|(
literal|"st"
argument_list|,
literal|"_type"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertAcked
argument_list|(
name|createIndexRequestBuilder
argument_list|)
expr_stmt|;
name|ensureYellow
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|HEROS
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|type
init|=
name|types
index|[
name|i
operator|%
name|types
operator|.
name|length
index|]
decl_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|INDEX
argument_list|,
name|type
argument_list|,
literal|""
operator|+
name|i
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
name|FIELD
argument_list|)
operator|.
name|startArray
argument_list|(
literal|"input"
argument_list|)
operator|.
name|value
argument_list|(
name|HEROS
index|[
name|i
index|]
argument_list|)
operator|.
name|endArray
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"context"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"payload"
argument_list|,
name|type
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
block|}
name|refresh
argument_list|()
expr_stmt|;
name|assertFieldSuggestions
argument_list|(
name|types
index|[
literal|0
index|]
argument_list|,
literal|"a"
argument_list|,
literal|"Afari, Jamal"
argument_list|,
literal|"Adrian Corbo"
argument_list|,
literal|"Adrian"
argument_list|)
expr_stmt|;
name|assertFieldSuggestions
argument_list|(
name|types
index|[
literal|0
index|]
argument_list|,
literal|"b"
argument_list|,
literal|"Beaubier, Jeanne-Marie"
argument_list|)
expr_stmt|;
name|assertFieldSuggestions
argument_list|(
name|types
index|[
literal|0
index|]
argument_list|,
literal|"c"
argument_list|,
literal|"Corbo, Adrian"
argument_list|,
literal|"Crichton, Lady Jacqueline Falsworth"
argument_list|)
expr_stmt|;
name|assertFieldSuggestions
argument_list|(
name|types
index|[
literal|0
index|]
argument_list|,
literal|"mary"
argument_list|,
literal|"Mary MacPherran \"Skeeter\""
argument_list|,
literal|"Mary MacPherran"
argument_list|)
expr_stmt|;
name|assertFieldSuggestions
argument_list|(
name|types
index|[
literal|0
index|]
argument_list|,
literal|"s"
argument_list|,
literal|"Skeeter"
argument_list|,
literal|"Smythe, Spencer"
argument_list|,
literal|"Spencer Smythe"
argument_list|,
literal|"Spencer"
argument_list|)
expr_stmt|;
name|assertFieldSuggestions
argument_list|(
name|types
index|[
literal|1
index|]
argument_list|,
literal|"s"
argument_list|,
literal|"St. John"
argument_list|,
literal|"St. John Allerdyce"
argument_list|)
expr_stmt|;
name|assertFieldSuggestions
argument_list|(
name|types
index|[
literal|2
index|]
argument_list|,
literal|"s"
argument_list|,
literal|"Smythe, Alistair"
argument_list|)
expr_stmt|;
name|assertFieldSuggestions
argument_list|(
name|types
index|[
literal|1
index|]
argument_list|,
literal|"w"
argument_list|,
literal|"Whitemane, Aelfyre"
argument_list|)
expr_stmt|;
name|assertFieldSuggestions
argument_list|(
name|types
index|[
literal|2
index|]
argument_list|,
literal|"w"
argument_list|,
literal|"Whitemane, Kofi"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
comment|// issue 5525, default location didnt work with lat/lon map, and did not set default location appropriately
DECL|method|testGeoContextDefaultMapping
specifier|public
name|void
name|testGeoContextDefaultMapping
parameter_list|()
throws|throws
name|Exception
block|{
name|GeoPoint
name|berlinAlexanderplatz
init|=
name|GeoHashUtils
operator|.
name|decode
argument_list|(
literal|"u33dc1"
argument_list|)
decl_stmt|;
name|XContentBuilder
name|xContentBuilder
init|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"poi"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"suggest"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"completion"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"context"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"location"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"geo"
argument_list|)
operator|.
name|field
argument_list|(
literal|"precision"
argument_list|,
literal|"500m"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"default"
argument_list|)
operator|.
name|field
argument_list|(
literal|"lat"
argument_list|,
name|berlinAlexanderplatz
operator|.
name|lat
argument_list|()
argument_list|)
operator|.
name|field
argument_list|(
literal|"lon"
argument_list|,
name|berlinAlexanderplatz
operator|.
name|lon
argument_list|()
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
name|INDEX
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"poi"
argument_list|,
name|xContentBuilder
argument_list|)
argument_list|)
expr_stmt|;
name|ensureYellow
argument_list|()
expr_stmt|;
name|index
argument_list|(
name|INDEX
argument_list|,
literal|"poi"
argument_list|,
literal|"1"
argument_list|,
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"suggest"
argument_list|)
operator|.
name|field
argument_list|(
literal|"input"
argument_list|,
literal|"Berlin Alexanderplatz"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|CompletionSuggestionBuilder
name|suggestionBuilder
init|=
name|SuggestBuilders
operator|.
name|completionSuggestion
argument_list|(
literal|"suggestion"
argument_list|)
operator|.
name|field
argument_list|(
literal|"suggest"
argument_list|)
operator|.
name|text
argument_list|(
literal|"b"
argument_list|)
operator|.
name|size
argument_list|(
literal|10
argument_list|)
operator|.
name|addGeoLocation
argument_list|(
literal|"location"
argument_list|,
name|berlinAlexanderplatz
operator|.
name|lat
argument_list|()
argument_list|,
name|berlinAlexanderplatz
operator|.
name|lon
argument_list|()
argument_list|)
decl_stmt|;
name|SuggestResponse
name|suggestResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSuggest
argument_list|(
name|INDEX
argument_list|)
operator|.
name|addSuggestion
argument_list|(
name|suggestionBuilder
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertSuggestion
argument_list|(
name|suggestResponse
operator|.
name|getSuggest
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|"suggestion"
argument_list|,
literal|"Berlin Alexanderplatz"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
comment|// issue 5525, setting the path of a category context and then indexing a document without that field returned an error
DECL|method|testThatMissingPrefixesForContextReturnException
specifier|public
name|void
name|testThatMissingPrefixesForContextReturnException
parameter_list|()
throws|throws
name|Exception
block|{
name|XContentBuilder
name|xContentBuilder
init|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"service"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"suggest"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"completion"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"context"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"color"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"category"
argument_list|)
operator|.
name|field
argument_list|(
literal|"path"
argument_list|,
literal|"color"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
name|INDEX
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"service"
argument_list|,
name|xContentBuilder
argument_list|)
argument_list|)
expr_stmt|;
name|ensureYellow
argument_list|()
expr_stmt|;
comment|// now index a document with color field
name|index
argument_list|(
name|INDEX
argument_list|,
literal|"service"
argument_list|,
literal|"1"
argument_list|,
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"color"
argument_list|,
literal|"red"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"suggest"
argument_list|)
operator|.
name|field
argument_list|(
literal|"input"
argument_list|,
literal|"backback"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
comment|// now index a document without a color field
try|try
block|{
name|index
argument_list|(
name|INDEX
argument_list|,
literal|"service"
argument_list|,
literal|"2"
argument_list|,
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"suggest"
argument_list|)
operator|.
name|field
argument_list|(
literal|"input"
argument_list|,
literal|"backback"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"index operation was not supposed to be successful"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ElasticsearchIllegalArgumentException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"one or more prefixes needed"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
comment|// issue 5525, the geo point parser did not work when the lat/lon values were inside of a value object
DECL|method|testThatLocationVenueCanBeParsedAsDocumented
specifier|public
name|void
name|testThatLocationVenueCanBeParsedAsDocumented
parameter_list|()
throws|throws
name|Exception
block|{
name|XContentBuilder
name|xContentBuilder
init|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"poi"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"suggest"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"completion"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"context"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"location"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"geo"
argument_list|)
operator|.
name|field
argument_list|(
literal|"precision"
argument_list|,
literal|"1m"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
name|INDEX
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"poi"
argument_list|,
name|xContentBuilder
argument_list|)
argument_list|)
expr_stmt|;
name|ensureYellow
argument_list|()
expr_stmt|;
name|SuggestRequest
name|suggestRequest
init|=
operator|new
name|SuggestRequest
argument_list|(
name|INDEX
argument_list|)
decl_stmt|;
name|XContentBuilder
name|builder
init|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"suggest"
argument_list|)
operator|.
name|field
argument_list|(
literal|"text"
argument_list|,
literal|"m"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"completion"
argument_list|)
operator|.
name|field
argument_list|(
literal|"field"
argument_list|,
literal|"suggest"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"context"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"location"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"value"
argument_list|)
operator|.
name|field
argument_list|(
literal|"lat"
argument_list|,
literal|0
argument_list|)
operator|.
name|field
argument_list|(
literal|"lon"
argument_list|,
literal|0
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"precision"
argument_list|,
literal|"1km"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|suggestRequest
operator|.
name|suggest
argument_list|(
name|builder
operator|.
name|bytes
argument_list|()
argument_list|)
expr_stmt|;
name|SuggestResponse
name|suggestResponse
init|=
name|client
argument_list|()
operator|.
name|suggest
argument_list|(
name|suggestRequest
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertNoFailures
argument_list|(
name|suggestResponse
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testThatCategoryDefaultWorks
specifier|public
name|void
name|testThatCategoryDefaultWorks
parameter_list|()
throws|throws
name|Exception
block|{
name|XContentBuilder
name|xContentBuilder
init|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"item"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"suggest"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"completion"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"context"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"color"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"category"
argument_list|)
operator|.
name|field
argument_list|(
literal|"default"
argument_list|,
literal|"red"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
name|INDEX
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"item"
argument_list|,
name|xContentBuilder
argument_list|)
argument_list|)
expr_stmt|;
name|ensureYellow
argument_list|()
expr_stmt|;
name|index
argument_list|(
name|INDEX
argument_list|,
literal|"item"
argument_list|,
literal|"1"
argument_list|,
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"suggest"
argument_list|)
operator|.
name|field
argument_list|(
literal|"input"
argument_list|,
literal|"Hoodie red"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|index
argument_list|(
name|INDEX
argument_list|,
literal|"item"
argument_list|,
literal|"2"
argument_list|,
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"suggest"
argument_list|)
operator|.
name|field
argument_list|(
literal|"input"
argument_list|,
literal|"Hoodie blue"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"context"
argument_list|)
operator|.
name|field
argument_list|(
literal|"color"
argument_list|,
literal|"blue"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|CompletionSuggestionBuilder
name|suggestionBuilder
init|=
name|SuggestBuilders
operator|.
name|completionSuggestion
argument_list|(
literal|"suggestion"
argument_list|)
operator|.
name|field
argument_list|(
literal|"suggest"
argument_list|)
operator|.
name|text
argument_list|(
literal|"h"
argument_list|)
operator|.
name|size
argument_list|(
literal|10
argument_list|)
operator|.
name|addContextField
argument_list|(
literal|"color"
argument_list|,
literal|"red"
argument_list|)
decl_stmt|;
name|SuggestResponse
name|suggestResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSuggest
argument_list|(
name|INDEX
argument_list|)
operator|.
name|addSuggestion
argument_list|(
name|suggestionBuilder
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertSuggestion
argument_list|(
name|suggestResponse
operator|.
name|getSuggest
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|"suggestion"
argument_list|,
literal|"Hoodie red"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testThatDefaultCategoryAndPathWorks
specifier|public
name|void
name|testThatDefaultCategoryAndPathWorks
parameter_list|()
throws|throws
name|Exception
block|{
name|XContentBuilder
name|xContentBuilder
init|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"item"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"suggest"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"completion"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"context"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"color"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"category"
argument_list|)
operator|.
name|field
argument_list|(
literal|"default"
argument_list|,
literal|"red"
argument_list|)
operator|.
name|field
argument_list|(
literal|"path"
argument_list|,
literal|"color"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
name|INDEX
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"item"
argument_list|,
name|xContentBuilder
argument_list|)
argument_list|)
expr_stmt|;
name|ensureYellow
argument_list|()
expr_stmt|;
name|index
argument_list|(
name|INDEX
argument_list|,
literal|"item"
argument_list|,
literal|"1"
argument_list|,
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"suggest"
argument_list|)
operator|.
name|field
argument_list|(
literal|"input"
argument_list|,
literal|"Hoodie red"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|index
argument_list|(
name|INDEX
argument_list|,
literal|"item"
argument_list|,
literal|"2"
argument_list|,
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"suggest"
argument_list|)
operator|.
name|field
argument_list|(
literal|"input"
argument_list|,
literal|"Hoodie blue"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"color"
argument_list|,
literal|"blue"
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|CompletionSuggestionBuilder
name|suggestionBuilder
init|=
name|SuggestBuilders
operator|.
name|completionSuggestion
argument_list|(
literal|"suggestion"
argument_list|)
operator|.
name|field
argument_list|(
literal|"suggest"
argument_list|)
operator|.
name|text
argument_list|(
literal|"h"
argument_list|)
operator|.
name|size
argument_list|(
literal|10
argument_list|)
operator|.
name|addContextField
argument_list|(
literal|"color"
argument_list|,
literal|"red"
argument_list|)
decl_stmt|;
name|SuggestResponse
name|suggestResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSuggest
argument_list|(
name|INDEX
argument_list|)
operator|.
name|addSuggestion
argument_list|(
name|suggestionBuilder
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertSuggestion
argument_list|(
name|suggestResponse
operator|.
name|getSuggest
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|"suggestion"
argument_list|,
literal|"Hoodie red"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testThatGeoPrecisionIsWorking
specifier|public
name|void
name|testThatGeoPrecisionIsWorking
parameter_list|()
throws|throws
name|Exception
block|{
name|XContentBuilder
name|xContentBuilder
init|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"item"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"suggest"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"completion"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"context"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"location"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"geo"
argument_list|)
operator|.
name|field
argument_list|(
literal|"precision"
argument_list|,
literal|4
argument_list|)
comment|// this means geo hashes with a length of four are used, like u345
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
name|INDEX
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"item"
argument_list|,
name|xContentBuilder
argument_list|)
argument_list|)
expr_stmt|;
name|ensureYellow
argument_list|()
expr_stmt|;
comment|// lets create some locations by geohashes in different cells with the precision 4
comment|// this means, that poelchaustr is not a neighour to alexanderplatz, but they share the same prefix until the fourth char!
name|GeoPoint
name|alexanderplatz
init|=
name|GeoHashUtils
operator|.
name|decode
argument_list|(
literal|"u33dc1"
argument_list|)
decl_stmt|;
name|GeoPoint
name|poelchaustr
init|=
name|GeoHashUtils
operator|.
name|decode
argument_list|(
literal|"u33du5"
argument_list|)
decl_stmt|;
name|GeoPoint
name|dahlem
init|=
name|GeoHashUtils
operator|.
name|decode
argument_list|(
literal|"u336q"
argument_list|)
decl_stmt|;
comment|// berlin dahlem, should be included with that precision
name|GeoPoint
name|middleOfNoWhere
init|=
name|GeoHashUtils
operator|.
name|decode
argument_list|(
literal|"u334"
argument_list|)
decl_stmt|;
comment|// location for west from berlin, should not be included in any suggestions
name|index
argument_list|(
name|INDEX
argument_list|,
literal|"item"
argument_list|,
literal|"1"
argument_list|,
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"suggest"
argument_list|)
operator|.
name|field
argument_list|(
literal|"input"
argument_list|,
literal|"Berlin Alexanderplatz"
argument_list|)
operator|.
name|field
argument_list|(
literal|"weight"
argument_list|,
literal|3
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"context"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"location"
argument_list|)
operator|.
name|field
argument_list|(
literal|"lat"
argument_list|,
name|alexanderplatz
operator|.
name|lat
argument_list|()
argument_list|)
operator|.
name|field
argument_list|(
literal|"lon"
argument_list|,
name|alexanderplatz
operator|.
name|lon
argument_list|()
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|index
argument_list|(
name|INDEX
argument_list|,
literal|"item"
argument_list|,
literal|"2"
argument_list|,
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"suggest"
argument_list|)
operator|.
name|field
argument_list|(
literal|"input"
argument_list|,
literal|"Berlin Poelchaustr."
argument_list|)
operator|.
name|field
argument_list|(
literal|"weight"
argument_list|,
literal|2
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"context"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"location"
argument_list|)
operator|.
name|field
argument_list|(
literal|"lat"
argument_list|,
name|poelchaustr
operator|.
name|lat
argument_list|()
argument_list|)
operator|.
name|field
argument_list|(
literal|"lon"
argument_list|,
name|poelchaustr
operator|.
name|lon
argument_list|()
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|index
argument_list|(
name|INDEX
argument_list|,
literal|"item"
argument_list|,
literal|"3"
argument_list|,
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"suggest"
argument_list|)
operator|.
name|field
argument_list|(
literal|"input"
argument_list|,
literal|"Berlin Far Away"
argument_list|)
operator|.
name|field
argument_list|(
literal|"weight"
argument_list|,
literal|1
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"context"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"location"
argument_list|)
operator|.
name|field
argument_list|(
literal|"lat"
argument_list|,
name|middleOfNoWhere
operator|.
name|lat
argument_list|()
argument_list|)
operator|.
name|field
argument_list|(
literal|"lon"
argument_list|,
name|middleOfNoWhere
operator|.
name|lon
argument_list|()
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|index
argument_list|(
name|INDEX
argument_list|,
literal|"item"
argument_list|,
literal|"4"
argument_list|,
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"suggest"
argument_list|)
operator|.
name|field
argument_list|(
literal|"input"
argument_list|,
literal|"Berlin Dahlem"
argument_list|)
operator|.
name|field
argument_list|(
literal|"weight"
argument_list|,
literal|1
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"context"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"location"
argument_list|)
operator|.
name|field
argument_list|(
literal|"lat"
argument_list|,
name|dahlem
operator|.
name|lat
argument_list|()
argument_list|)
operator|.
name|field
argument_list|(
literal|"lon"
argument_list|,
name|dahlem
operator|.
name|lon
argument_list|()
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|CompletionSuggestionBuilder
name|suggestionBuilder
init|=
name|SuggestBuilders
operator|.
name|completionSuggestion
argument_list|(
literal|"suggestion"
argument_list|)
operator|.
name|field
argument_list|(
literal|"suggest"
argument_list|)
operator|.
name|text
argument_list|(
literal|"b"
argument_list|)
operator|.
name|size
argument_list|(
literal|10
argument_list|)
operator|.
name|addGeoLocation
argument_list|(
literal|"location"
argument_list|,
name|alexanderplatz
operator|.
name|lat
argument_list|()
argument_list|,
name|alexanderplatz
operator|.
name|lon
argument_list|()
argument_list|)
decl_stmt|;
name|SuggestResponse
name|suggestResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSuggest
argument_list|(
name|INDEX
argument_list|)
operator|.
name|addSuggestion
argument_list|(
name|suggestionBuilder
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertSuggestion
argument_list|(
name|suggestResponse
operator|.
name|getSuggest
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|"suggestion"
argument_list|,
literal|"Berlin Alexanderplatz"
argument_list|,
literal|"Berlin Poelchaustr."
argument_list|,
literal|"Berlin Dahlem"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testThatNeighborsCanBeExcluded
specifier|public
name|void
name|testThatNeighborsCanBeExcluded
parameter_list|()
throws|throws
name|Exception
block|{
name|XContentBuilder
name|xContentBuilder
init|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"item"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"suggest"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"completion"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"context"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"location"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"geo"
argument_list|)
operator|.
name|field
argument_list|(
literal|"precision"
argument_list|,
literal|6
argument_list|)
operator|.
name|field
argument_list|(
literal|"neighbors"
argument_list|,
literal|false
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
name|INDEX
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"item"
argument_list|,
name|xContentBuilder
argument_list|)
argument_list|)
expr_stmt|;
name|ensureYellow
argument_list|()
expr_stmt|;
name|GeoPoint
name|alexanderplatz
init|=
name|GeoHashUtils
operator|.
name|decode
argument_list|(
literal|"u33dc1"
argument_list|)
decl_stmt|;
comment|// does not look like it, but is a direct neighbor
comment|// this test would fail, if the precision was set 4, as then both cells would be the same, u33d
name|GeoPoint
name|cellNeighbourOfAlexanderplatz
init|=
name|GeoHashUtils
operator|.
name|decode
argument_list|(
literal|"u33dbc"
argument_list|)
decl_stmt|;
name|index
argument_list|(
name|INDEX
argument_list|,
literal|"item"
argument_list|,
literal|"1"
argument_list|,
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"suggest"
argument_list|)
operator|.
name|field
argument_list|(
literal|"input"
argument_list|,
literal|"Berlin Alexanderplatz"
argument_list|)
operator|.
name|field
argument_list|(
literal|"weight"
argument_list|,
literal|3
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"context"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"location"
argument_list|)
operator|.
name|field
argument_list|(
literal|"lat"
argument_list|,
name|alexanderplatz
operator|.
name|lat
argument_list|()
argument_list|)
operator|.
name|field
argument_list|(
literal|"lon"
argument_list|,
name|alexanderplatz
operator|.
name|lon
argument_list|()
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|index
argument_list|(
name|INDEX
argument_list|,
literal|"item"
argument_list|,
literal|"2"
argument_list|,
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"suggest"
argument_list|)
operator|.
name|field
argument_list|(
literal|"input"
argument_list|,
literal|"Berlin Hackescher Markt"
argument_list|)
operator|.
name|field
argument_list|(
literal|"weight"
argument_list|,
literal|2
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"context"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"location"
argument_list|)
operator|.
name|field
argument_list|(
literal|"lat"
argument_list|,
name|cellNeighbourOfAlexanderplatz
operator|.
name|lat
argument_list|()
argument_list|)
operator|.
name|field
argument_list|(
literal|"lon"
argument_list|,
name|cellNeighbourOfAlexanderplatz
operator|.
name|lon
argument_list|()
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|CompletionSuggestionBuilder
name|suggestionBuilder
init|=
name|SuggestBuilders
operator|.
name|completionSuggestion
argument_list|(
literal|"suggestion"
argument_list|)
operator|.
name|field
argument_list|(
literal|"suggest"
argument_list|)
operator|.
name|text
argument_list|(
literal|"b"
argument_list|)
operator|.
name|size
argument_list|(
literal|10
argument_list|)
operator|.
name|addGeoLocation
argument_list|(
literal|"location"
argument_list|,
name|alexanderplatz
operator|.
name|lat
argument_list|()
argument_list|,
name|alexanderplatz
operator|.
name|lon
argument_list|()
argument_list|)
decl_stmt|;
name|SuggestResponse
name|suggestResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSuggest
argument_list|(
name|INDEX
argument_list|)
operator|.
name|addSuggestion
argument_list|(
name|suggestionBuilder
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertSuggestion
argument_list|(
name|suggestResponse
operator|.
name|getSuggest
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|"suggestion"
argument_list|,
literal|"Berlin Alexanderplatz"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testThatGeoPathCanBeSelected
specifier|public
name|void
name|testThatGeoPathCanBeSelected
parameter_list|()
throws|throws
name|Exception
block|{
name|XContentBuilder
name|xContentBuilder
init|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"item"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"suggest"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"completion"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"context"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"location"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"geo"
argument_list|)
operator|.
name|field
argument_list|(
literal|"precision"
argument_list|,
literal|"5m"
argument_list|)
operator|.
name|field
argument_list|(
literal|"path"
argument_list|,
literal|"loc"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
name|INDEX
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"item"
argument_list|,
name|xContentBuilder
argument_list|)
argument_list|)
expr_stmt|;
name|ensureYellow
argument_list|()
expr_stmt|;
name|GeoPoint
name|alexanderplatz
init|=
name|GeoHashUtils
operator|.
name|decode
argument_list|(
literal|"u33dc1"
argument_list|)
decl_stmt|;
name|index
argument_list|(
name|INDEX
argument_list|,
literal|"item"
argument_list|,
literal|"1"
argument_list|,
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"suggest"
argument_list|)
operator|.
name|field
argument_list|(
literal|"input"
argument_list|,
literal|"Berlin Alexanderplatz"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"loc"
argument_list|)
operator|.
name|field
argument_list|(
literal|"lat"
argument_list|,
name|alexanderplatz
operator|.
name|lat
argument_list|()
argument_list|)
operator|.
name|field
argument_list|(
literal|"lon"
argument_list|,
name|alexanderplatz
operator|.
name|lon
argument_list|()
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|CompletionSuggestionBuilder
name|suggestionBuilder
init|=
name|SuggestBuilders
operator|.
name|completionSuggestion
argument_list|(
literal|"suggestion"
argument_list|)
operator|.
name|field
argument_list|(
literal|"suggest"
argument_list|)
operator|.
name|text
argument_list|(
literal|"b"
argument_list|)
operator|.
name|size
argument_list|(
literal|10
argument_list|)
operator|.
name|addGeoLocation
argument_list|(
literal|"location"
argument_list|,
name|alexanderplatz
operator|.
name|lat
argument_list|()
argument_list|,
name|alexanderplatz
operator|.
name|lon
argument_list|()
argument_list|)
decl_stmt|;
name|SuggestResponse
name|suggestResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSuggest
argument_list|(
name|INDEX
argument_list|)
operator|.
name|addSuggestion
argument_list|(
name|suggestionBuilder
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertSuggestion
argument_list|(
name|suggestResponse
operator|.
name|getSuggest
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|"suggestion"
argument_list|,
literal|"Berlin Alexanderplatz"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MapperParsingException
operator|.
name|class
argument_list|)
DECL|method|testThatPrecisionIsRequired
specifier|public
name|void
name|testThatPrecisionIsRequired
parameter_list|()
throws|throws
name|Exception
block|{
name|XContentBuilder
name|xContentBuilder
init|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"item"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"suggest"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"completion"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"context"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"location"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"geo"
argument_list|)
operator|.
name|field
argument_list|(
literal|"path"
argument_list|,
literal|"loc"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
name|INDEX
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"item"
argument_list|,
name|xContentBuilder
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testThatLatLonParsingFromSourceWorks
specifier|public
name|void
name|testThatLatLonParsingFromSourceWorks
parameter_list|()
throws|throws
name|Exception
block|{
name|XContentBuilder
name|xContentBuilder
init|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"mappings"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"test"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"suggest_geo"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"completion"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"context"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"location"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"geo"
argument_list|)
operator|.
name|field
argument_list|(
literal|"precision"
argument_list|,
literal|"1km"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSource
argument_list|(
name|xContentBuilder
operator|.
name|bytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|double
name|latitude
init|=
literal|52.22
decl_stmt|;
name|double
name|longitude
init|=
literal|4.53
decl_stmt|;
name|String
name|geohash
init|=
name|GeoHashUtils
operator|.
name|encode
argument_list|(
name|latitude
argument_list|,
name|longitude
argument_list|)
decl_stmt|;
name|XContentBuilder
name|doc1
init|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"suggest_geo"
argument_list|)
operator|.
name|field
argument_list|(
literal|"input"
argument_list|,
literal|"Hotel Marriot in Amsterdam"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"context"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"location"
argument_list|)
operator|.
name|field
argument_list|(
literal|"lat"
argument_list|,
name|latitude
argument_list|)
operator|.
name|field
argument_list|(
literal|"lon"
argument_list|,
name|longitude
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|index
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|,
literal|"1"
argument_list|,
name|doc1
argument_list|)
expr_stmt|;
name|XContentBuilder
name|doc2
init|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"suggest_geo"
argument_list|)
operator|.
name|field
argument_list|(
literal|"input"
argument_list|,
literal|"Hotel Marriot in Berlin"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"context"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"location"
argument_list|)
operator|.
name|field
argument_list|(
literal|"lat"
argument_list|,
literal|53.31
argument_list|)
operator|.
name|field
argument_list|(
literal|"lon"
argument_list|,
literal|13.24
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|index
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|,
literal|"2"
argument_list|,
name|doc2
argument_list|)
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|XContentBuilder
name|source
init|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"suggestion"
argument_list|)
operator|.
name|field
argument_list|(
literal|"text"
argument_list|,
literal|"h"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"completion"
argument_list|)
operator|.
name|field
argument_list|(
literal|"field"
argument_list|,
literal|"suggest_geo"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"context"
argument_list|)
operator|.
name|field
argument_list|(
literal|"location"
argument_list|,
name|geohash
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|SuggestRequest
name|suggestRequest
init|=
operator|new
name|SuggestRequest
argument_list|(
name|INDEX
argument_list|)
operator|.
name|suggest
argument_list|(
name|source
operator|.
name|bytes
argument_list|()
argument_list|)
decl_stmt|;
name|SuggestResponse
name|suggestResponse
init|=
name|client
argument_list|()
operator|.
name|suggest
argument_list|(
name|suggestRequest
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertSuggestion
argument_list|(
name|suggestResponse
operator|.
name|getSuggest
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|"suggestion"
argument_list|,
literal|"Hotel Marriot in Amsterdam"
argument_list|)
expr_stmt|;
comment|// this is exact the same request, but using lat/lon instead of geohash
name|source
operator|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"suggestion"
argument_list|)
operator|.
name|field
argument_list|(
literal|"text"
argument_list|,
literal|"h"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"completion"
argument_list|)
operator|.
name|field
argument_list|(
literal|"field"
argument_list|,
literal|"suggest_geo"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"context"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"location"
argument_list|)
operator|.
name|field
argument_list|(
literal|"lat"
argument_list|,
name|latitude
argument_list|)
operator|.
name|field
argument_list|(
literal|"lon"
argument_list|,
name|longitude
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|suggestRequest
operator|=
operator|new
name|SuggestRequest
argument_list|(
name|INDEX
argument_list|)
operator|.
name|suggest
argument_list|(
name|source
operator|.
name|bytes
argument_list|()
argument_list|)
expr_stmt|;
name|suggestResponse
operator|=
name|client
argument_list|()
operator|.
name|suggest
argument_list|(
name|suggestRequest
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertSuggestion
argument_list|(
name|suggestResponse
operator|.
name|getSuggest
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|"suggestion"
argument_list|,
literal|"Hotel Marriot in Amsterdam"
argument_list|)
expr_stmt|;
block|}
DECL|method|assertGeoSuggestionsInRange
specifier|public
name|void
name|assertGeoSuggestionsInRange
parameter_list|(
name|String
name|location
parameter_list|,
name|String
name|suggest
parameter_list|,
name|double
name|precision
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|suggestionName
init|=
name|randomAsciiOfLength
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|CompletionSuggestionBuilder
name|context
init|=
name|SuggestBuilders
operator|.
name|completionSuggestion
argument_list|(
name|suggestionName
argument_list|)
operator|.
name|field
argument_list|(
name|FIELD
argument_list|)
operator|.
name|text
argument_list|(
name|suggest
argument_list|)
operator|.
name|size
argument_list|(
literal|10
argument_list|)
operator|.
name|addGeoLocation
argument_list|(
literal|"st"
argument_list|,
name|location
argument_list|)
decl_stmt|;
name|SuggestRequestBuilder
name|suggestionRequest
init|=
name|client
argument_list|()
operator|.
name|prepareSuggest
argument_list|(
name|INDEX
argument_list|)
operator|.
name|addSuggestion
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|SuggestResponse
name|suggestResponse
init|=
name|suggestionRequest
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|Suggest
name|suggest2
init|=
name|suggestResponse
operator|.
name|getSuggest
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|suggest2
operator|.
name|iterator
argument_list|()
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Suggestion
argument_list|<
name|?
extends|extends
name|Entry
argument_list|<
name|?
extends|extends
name|Option
argument_list|>
argument_list|>
name|s
range|:
name|suggest2
control|)
block|{
name|CompletionSuggestion
name|suggestion
init|=
operator|(
name|CompletionSuggestion
operator|)
name|s
decl_stmt|;
name|assertTrue
argument_list|(
name|suggestion
operator|.
name|iterator
argument_list|()
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|CompletionSuggestion
operator|.
name|Entry
name|entry
range|:
name|suggestion
control|)
block|{
name|List
argument_list|<
name|CompletionSuggestion
operator|.
name|Entry
operator|.
name|Option
argument_list|>
name|options
init|=
name|entry
operator|.
name|getOptions
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|options
operator|.
name|iterator
argument_list|()
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|CompletionSuggestion
operator|.
name|Entry
operator|.
name|Option
name|option
range|:
name|options
control|)
block|{
name|String
name|target
init|=
name|option
operator|.
name|getPayloadAsString
argument_list|()
decl_stmt|;
name|assertDistance
argument_list|(
name|location
argument_list|,
name|target
argument_list|,
name|Matchers
operator|.
name|lessThanOrEqualTo
argument_list|(
name|precision
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|assertPrefixSuggestions
specifier|public
name|void
name|assertPrefixSuggestions
parameter_list|(
name|long
name|prefix
parameter_list|,
name|String
name|suggest
parameter_list|,
name|String
modifier|...
name|hits
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|suggestionName
init|=
name|randomAsciiOfLength
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|CompletionSuggestionBuilder
name|context
init|=
name|SuggestBuilders
operator|.
name|completionSuggestion
argument_list|(
name|suggestionName
argument_list|)
operator|.
name|field
argument_list|(
name|FIELD
argument_list|)
operator|.
name|text
argument_list|(
name|suggest
argument_list|)
operator|.
name|size
argument_list|(
name|hits
operator|.
name|length
operator|+
literal|1
argument_list|)
operator|.
name|addCategory
argument_list|(
literal|"st"
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|prefix
argument_list|)
argument_list|)
decl_stmt|;
name|SuggestRequestBuilder
name|suggestionRequest
init|=
name|client
argument_list|()
operator|.
name|prepareSuggest
argument_list|(
name|INDEX
argument_list|)
operator|.
name|addSuggestion
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|SuggestResponse
name|suggestResponse
init|=
name|suggestionRequest
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|suggestions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Suggest
name|suggest2
init|=
name|suggestResponse
operator|.
name|getSuggest
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|suggest2
operator|.
name|iterator
argument_list|()
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Suggestion
argument_list|<
name|?
extends|extends
name|Entry
argument_list|<
name|?
extends|extends
name|Option
argument_list|>
argument_list|>
name|s
range|:
name|suggest2
control|)
block|{
name|CompletionSuggestion
name|suggestion
init|=
operator|(
name|CompletionSuggestion
operator|)
name|s
decl_stmt|;
for|for
control|(
name|CompletionSuggestion
operator|.
name|Entry
name|entry
range|:
name|suggestion
control|)
block|{
name|List
argument_list|<
name|CompletionSuggestion
operator|.
name|Entry
operator|.
name|Option
argument_list|>
name|options
init|=
name|entry
operator|.
name|getOptions
argument_list|()
decl_stmt|;
for|for
control|(
name|CompletionSuggestion
operator|.
name|Entry
operator|.
name|Option
name|option
range|:
name|options
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|payload
init|=
name|option
operator|.
name|getPayloadAsMap
argument_list|()
decl_stmt|;
name|int
name|group
init|=
operator|(
name|Integer
operator|)
name|payload
operator|.
name|get
argument_list|(
literal|"group"
argument_list|)
decl_stmt|;
name|String
name|text
init|=
name|option
operator|.
name|getText
argument_list|()
operator|.
name|string
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|prefix
argument_list|,
name|group
argument_list|)
expr_stmt|;
name|suggestions
operator|.
name|add
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|assertSuggestionsMatch
argument_list|(
name|suggestions
argument_list|,
name|hits
argument_list|)
expr_stmt|;
block|}
DECL|method|assertContextWithFuzzySuggestions
specifier|public
name|void
name|assertContextWithFuzzySuggestions
parameter_list|(
name|String
index|[]
name|prefix1
parameter_list|,
name|String
index|[]
name|prefix2
parameter_list|,
name|String
name|suggest
parameter_list|,
name|String
modifier|...
name|hits
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|suggestionName
init|=
name|randomAsciiOfLength
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|CompletionSuggestionFuzzyBuilder
name|context
init|=
name|SuggestBuilders
operator|.
name|fuzzyCompletionSuggestion
argument_list|(
name|suggestionName
argument_list|)
operator|.
name|field
argument_list|(
name|FIELD
argument_list|)
operator|.
name|text
argument_list|(
name|suggest
argument_list|)
operator|.
name|size
argument_list|(
name|hits
operator|.
name|length
operator|+
literal|10
argument_list|)
operator|.
name|addContextField
argument_list|(
literal|"st"
argument_list|,
name|prefix1
argument_list|)
operator|.
name|addContextField
argument_list|(
literal|"nd"
argument_list|,
name|prefix2
argument_list|)
operator|.
name|setFuzziness
argument_list|(
name|Fuzziness
operator|.
name|TWO
argument_list|)
decl_stmt|;
name|SuggestRequestBuilder
name|suggestionRequest
init|=
name|client
argument_list|()
operator|.
name|prepareSuggest
argument_list|(
name|INDEX
argument_list|)
operator|.
name|addSuggestion
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|SuggestResponse
name|suggestResponse
init|=
name|suggestionRequest
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|suggestions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Suggest
name|suggest2
init|=
name|suggestResponse
operator|.
name|getSuggest
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|suggest2
operator|.
name|iterator
argument_list|()
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Suggestion
argument_list|<
name|?
extends|extends
name|Entry
argument_list|<
name|?
extends|extends
name|Option
argument_list|>
argument_list|>
name|s
range|:
name|suggest2
control|)
block|{
name|CompletionSuggestion
name|suggestion
init|=
operator|(
name|CompletionSuggestion
operator|)
name|s
decl_stmt|;
for|for
control|(
name|CompletionSuggestion
operator|.
name|Entry
name|entry
range|:
name|suggestion
control|)
block|{
name|List
argument_list|<
name|CompletionSuggestion
operator|.
name|Entry
operator|.
name|Option
argument_list|>
name|options
init|=
name|entry
operator|.
name|getOptions
argument_list|()
decl_stmt|;
for|for
control|(
name|CompletionSuggestion
operator|.
name|Entry
operator|.
name|Option
name|option
range|:
name|options
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|payload
init|=
name|option
operator|.
name|getPayloadAsMap
argument_list|()
decl_stmt|;
name|String
name|text
init|=
name|option
operator|.
name|getText
argument_list|()
operator|.
name|string
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|prefix1
argument_list|,
name|Matchers
operator|.
name|hasItemInArray
argument_list|(
name|payload
operator|.
name|get
argument_list|(
literal|"categoryA"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|prefix2
argument_list|,
name|Matchers
operator|.
name|hasItemInArray
argument_list|(
name|payload
operator|.
name|get
argument_list|(
literal|"categoryB"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|suggestions
operator|.
name|add
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|assertSuggestionsMatch
argument_list|(
name|suggestions
argument_list|,
name|hits
argument_list|)
expr_stmt|;
block|}
DECL|method|assertFieldSuggestions
specifier|public
name|void
name|assertFieldSuggestions
parameter_list|(
name|String
name|value
parameter_list|,
name|String
name|suggest
parameter_list|,
name|String
modifier|...
name|hits
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|suggestionName
init|=
name|randomAsciiOfLength
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|CompletionSuggestionBuilder
name|context
init|=
name|SuggestBuilders
operator|.
name|completionSuggestion
argument_list|(
name|suggestionName
argument_list|)
operator|.
name|field
argument_list|(
name|FIELD
argument_list|)
operator|.
name|text
argument_list|(
name|suggest
argument_list|)
operator|.
name|size
argument_list|(
literal|10
argument_list|)
operator|.
name|addContextField
argument_list|(
literal|"st"
argument_list|,
name|value
argument_list|)
decl_stmt|;
name|SuggestRequestBuilder
name|suggestionRequest
init|=
name|client
argument_list|()
operator|.
name|prepareSuggest
argument_list|(
name|INDEX
argument_list|)
operator|.
name|addSuggestion
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|SuggestResponse
name|suggestResponse
init|=
name|suggestionRequest
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|suggestions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Suggest
name|suggest2
init|=
name|suggestResponse
operator|.
name|getSuggest
argument_list|()
decl_stmt|;
for|for
control|(
name|Suggestion
argument_list|<
name|?
extends|extends
name|Entry
argument_list|<
name|?
extends|extends
name|Option
argument_list|>
argument_list|>
name|s
range|:
name|suggest2
control|)
block|{
name|CompletionSuggestion
name|suggestion
init|=
operator|(
name|CompletionSuggestion
operator|)
name|s
decl_stmt|;
for|for
control|(
name|CompletionSuggestion
operator|.
name|Entry
name|entry
range|:
name|suggestion
control|)
block|{
name|List
argument_list|<
name|CompletionSuggestion
operator|.
name|Entry
operator|.
name|Option
argument_list|>
name|options
init|=
name|entry
operator|.
name|getOptions
argument_list|()
decl_stmt|;
for|for
control|(
name|CompletionSuggestion
operator|.
name|Entry
operator|.
name|Option
name|option
range|:
name|options
control|)
block|{
name|String
name|payload
init|=
name|option
operator|.
name|getPayloadAsString
argument_list|()
decl_stmt|;
name|String
name|text
init|=
name|option
operator|.
name|getText
argument_list|()
operator|.
name|string
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|value
argument_list|,
name|payload
argument_list|)
expr_stmt|;
name|suggestions
operator|.
name|add
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|assertSuggestionsMatch
argument_list|(
name|suggestions
argument_list|,
name|hits
argument_list|)
expr_stmt|;
block|}
DECL|method|assertDoubleFieldSuggestions
specifier|public
name|void
name|assertDoubleFieldSuggestions
parameter_list|(
name|String
name|field1
parameter_list|,
name|String
name|field2
parameter_list|,
name|String
name|suggest
parameter_list|,
name|String
modifier|...
name|hits
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|suggestionName
init|=
name|randomAsciiOfLength
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|CompletionSuggestionBuilder
name|context
init|=
name|SuggestBuilders
operator|.
name|completionSuggestion
argument_list|(
name|suggestionName
argument_list|)
operator|.
name|field
argument_list|(
name|FIELD
argument_list|)
operator|.
name|text
argument_list|(
name|suggest
argument_list|)
operator|.
name|size
argument_list|(
literal|10
argument_list|)
operator|.
name|addContextField
argument_list|(
literal|"st"
argument_list|,
name|field1
argument_list|)
operator|.
name|addContextField
argument_list|(
literal|"nd"
argument_list|,
name|field2
argument_list|)
decl_stmt|;
name|SuggestRequestBuilder
name|suggestionRequest
init|=
name|client
argument_list|()
operator|.
name|prepareSuggest
argument_list|(
name|INDEX
argument_list|)
operator|.
name|addSuggestion
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|SuggestResponse
name|suggestResponse
init|=
name|suggestionRequest
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|suggestions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Suggest
name|suggest2
init|=
name|suggestResponse
operator|.
name|getSuggest
argument_list|()
decl_stmt|;
for|for
control|(
name|Suggestion
argument_list|<
name|?
extends|extends
name|Entry
argument_list|<
name|?
extends|extends
name|Option
argument_list|>
argument_list|>
name|s
range|:
name|suggest2
control|)
block|{
name|CompletionSuggestion
name|suggestion
init|=
operator|(
name|CompletionSuggestion
operator|)
name|s
decl_stmt|;
for|for
control|(
name|CompletionSuggestion
operator|.
name|Entry
name|entry
range|:
name|suggestion
control|)
block|{
name|List
argument_list|<
name|CompletionSuggestion
operator|.
name|Entry
operator|.
name|Option
argument_list|>
name|options
init|=
name|entry
operator|.
name|getOptions
argument_list|()
decl_stmt|;
for|for
control|(
name|CompletionSuggestion
operator|.
name|Entry
operator|.
name|Option
name|option
range|:
name|options
control|)
block|{
name|String
name|payload
init|=
name|option
operator|.
name|getPayloadAsString
argument_list|()
decl_stmt|;
name|String
name|text
init|=
name|option
operator|.
name|getText
argument_list|()
operator|.
name|string
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|field1
operator|+
literal|"|"
operator|+
name|field2
argument_list|,
name|payload
argument_list|)
expr_stmt|;
name|suggestions
operator|.
name|add
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|assertSuggestionsMatch
argument_list|(
name|suggestions
argument_list|,
name|hits
argument_list|)
expr_stmt|;
block|}
DECL|method|assertMultiContextSuggestions
specifier|public
name|void
name|assertMultiContextSuggestions
parameter_list|(
name|String
name|value1
parameter_list|,
name|String
name|value2
parameter_list|,
name|String
name|suggest
parameter_list|,
name|String
modifier|...
name|hits
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|suggestionName
init|=
name|randomAsciiOfLength
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|CompletionSuggestionBuilder
name|context
init|=
name|SuggestBuilders
operator|.
name|completionSuggestion
argument_list|(
name|suggestionName
argument_list|)
operator|.
name|field
argument_list|(
name|FIELD
argument_list|)
operator|.
name|text
argument_list|(
name|suggest
argument_list|)
operator|.
name|size
argument_list|(
literal|10
argument_list|)
operator|.
name|addContextField
argument_list|(
literal|"st"
argument_list|,
name|value1
argument_list|)
operator|.
name|addContextField
argument_list|(
literal|"nd"
argument_list|,
name|value2
argument_list|)
decl_stmt|;
name|SuggestRequestBuilder
name|suggestionRequest
init|=
name|client
argument_list|()
operator|.
name|prepareSuggest
argument_list|(
name|INDEX
argument_list|)
operator|.
name|addSuggestion
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|SuggestResponse
name|suggestResponse
init|=
name|suggestionRequest
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|suggestions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Suggest
name|suggest2
init|=
name|suggestResponse
operator|.
name|getSuggest
argument_list|()
decl_stmt|;
for|for
control|(
name|Suggestion
argument_list|<
name|?
extends|extends
name|Entry
argument_list|<
name|?
extends|extends
name|Option
argument_list|>
argument_list|>
name|s
range|:
name|suggest2
control|)
block|{
name|CompletionSuggestion
name|suggestion
init|=
operator|(
name|CompletionSuggestion
operator|)
name|s
decl_stmt|;
for|for
control|(
name|CompletionSuggestion
operator|.
name|Entry
name|entry
range|:
name|suggestion
control|)
block|{
name|List
argument_list|<
name|CompletionSuggestion
operator|.
name|Entry
operator|.
name|Option
argument_list|>
name|options
init|=
name|entry
operator|.
name|getOptions
argument_list|()
decl_stmt|;
for|for
control|(
name|CompletionSuggestion
operator|.
name|Entry
operator|.
name|Option
name|option
range|:
name|options
control|)
block|{
name|String
name|payload
init|=
name|option
operator|.
name|getPayloadAsString
argument_list|()
decl_stmt|;
name|String
name|text
init|=
name|option
operator|.
name|getText
argument_list|()
operator|.
name|string
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|value1
operator|+
name|value2
argument_list|,
name|payload
argument_list|)
expr_stmt|;
name|suggestions
operator|.
name|add
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|assertSuggestionsMatch
argument_list|(
name|suggestions
argument_list|,
name|hits
argument_list|)
expr_stmt|;
block|}
DECL|method|assertSuggestionsMatch
specifier|private
name|void
name|assertSuggestionsMatch
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|suggestions
parameter_list|,
name|String
modifier|...
name|hits
parameter_list|)
block|{
name|boolean
index|[]
name|suggested
init|=
operator|new
name|boolean
index|[
name|hits
operator|.
name|length
index|]
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|hits
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|suggested
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|int
name|numSuggestions
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|suggestion
range|:
name|suggestions
control|)
block|{
name|int
name|hitpos
init|=
name|Arrays
operator|.
name|binarySearch
argument_list|(
name|hits
argument_list|,
name|suggestion
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|hits
index|[
name|hitpos
index|]
argument_list|,
name|suggestion
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|hitpos
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|suggested
index|[
name|hitpos
index|]
argument_list|)
expr_stmt|;
name|suggested
index|[
name|hitpos
index|]
operator|=
literal|true
expr_stmt|;
name|numSuggestions
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|hits
operator|.
name|length
argument_list|,
name|numSuggestions
argument_list|)
expr_stmt|;
block|}
DECL|method|createMapping
specifier|private
name|XContentBuilder
name|createMapping
parameter_list|(
name|String
name|type
parameter_list|,
name|ContextBuilder
argument_list|<
name|?
argument_list|>
modifier|...
name|context
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|createMapping
argument_list|(
name|type
argument_list|,
literal|false
argument_list|,
name|context
argument_list|)
return|;
block|}
DECL|method|createMapping
specifier|private
name|XContentBuilder
name|createMapping
parameter_list|(
name|String
name|type
parameter_list|,
name|boolean
name|preserveSeparators
parameter_list|,
name|ContextBuilder
argument_list|<
name|?
argument_list|>
modifier|...
name|context
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|createMapping
argument_list|(
name|type
argument_list|,
literal|"simple"
argument_list|,
literal|"simple"
argument_list|,
literal|true
argument_list|,
name|preserveSeparators
argument_list|,
literal|true
argument_list|,
name|context
argument_list|)
return|;
block|}
DECL|method|createMapping
specifier|private
name|XContentBuilder
name|createMapping
parameter_list|(
name|String
name|type
parameter_list|,
name|String
name|indexAnalyzer
parameter_list|,
name|String
name|searchAnalyzer
parameter_list|,
name|boolean
name|payloads
parameter_list|,
name|boolean
name|preserveSeparators
parameter_list|,
name|boolean
name|preservePositionIncrements
parameter_list|,
name|ContextBuilder
argument_list|<
name|?
argument_list|>
modifier|...
name|contexts
parameter_list|)
throws|throws
name|IOException
block|{
name|XContentBuilder
name|mapping
init|=
name|jsonBuilder
argument_list|()
decl_stmt|;
name|mapping
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|mapping
operator|.
name|startObject
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|mapping
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
expr_stmt|;
name|mapping
operator|.
name|startObject
argument_list|(
name|FIELD
argument_list|)
expr_stmt|;
name|mapping
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"completion"
argument_list|)
expr_stmt|;
name|mapping
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
name|indexAnalyzer
argument_list|)
expr_stmt|;
name|mapping
operator|.
name|field
argument_list|(
literal|"search_analyzer"
argument_list|,
name|searchAnalyzer
argument_list|)
expr_stmt|;
name|mapping
operator|.
name|field
argument_list|(
literal|"payloads"
argument_list|,
name|payloads
argument_list|)
expr_stmt|;
name|mapping
operator|.
name|field
argument_list|(
literal|"preserve_separators"
argument_list|,
name|preserveSeparators
argument_list|)
expr_stmt|;
name|mapping
operator|.
name|field
argument_list|(
literal|"preserve_position_increments"
argument_list|,
name|preservePositionIncrements
argument_list|)
expr_stmt|;
name|mapping
operator|.
name|startObject
argument_list|(
literal|"context"
argument_list|)
expr_stmt|;
for|for
control|(
name|ContextBuilder
argument_list|<
name|?
extends|extends
name|ContextMapping
argument_list|>
name|context
range|:
name|contexts
control|)
block|{
name|mapping
operator|.
name|value
argument_list|(
name|context
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|mapping
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|mapping
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|mapping
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|mapping
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|mapping
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|mapping
return|;
block|}
block|}
end_class

end_unit

