begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.facet.termsstats
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|facet
operator|.
name|termsstats
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|ShardSizeTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|facet
operator|.
name|Facets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
operator|.
name|matchAllQuery
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|facet
operator|.
name|FacetBuilders
operator|.
name|termsStatsFacet
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_class
DECL|class|ShardSizeTermsStatsFacetTests
specifier|public
class|class
name|ShardSizeTermsStatsFacetTests
extends|extends
name|ShardSizeTests
block|{
annotation|@
name|Test
DECL|method|noShardSize_string
specifier|public
name|void
name|noShardSize_string
parameter_list|()
throws|throws
name|Exception
block|{
name|createIdx
argument_list|(
literal|"type=string,index=not_analyzed"
argument_list|)
expr_stmt|;
name|indexData
argument_list|()
expr_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"type"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|addFacet
argument_list|(
name|termsStatsFacet
argument_list|(
literal|"keys"
argument_list|)
operator|.
name|keyField
argument_list|(
literal|"key"
argument_list|)
operator|.
name|valueField
argument_list|(
literal|"value"
argument_list|)
operator|.
name|size
argument_list|(
literal|3
argument_list|)
operator|.
name|order
argument_list|(
name|TermsStatsFacet
operator|.
name|ComparatorType
operator|.
name|COUNT
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|Facets
name|facets
init|=
name|response
operator|.
name|getFacets
argument_list|()
decl_stmt|;
name|TermsStatsFacet
name|facet
init|=
name|facets
operator|.
name|facet
argument_list|(
literal|"keys"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|TermsStatsFacet
operator|.
name|Entry
argument_list|>
name|entries
init|=
name|facet
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|entries
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|expected
init|=
name|ImmutableMap
operator|.
expr|<
name|String
decl_stmt|,
name|Long
decl|>
name|builder
argument_list|()
decl|.
name|put
argument_list|(
literal|"1"
argument_list|,
literal|8l
argument_list|)
decl|.
name|put
argument_list|(
literal|"3"
argument_list|,
literal|8l
argument_list|)
decl|.
name|put
argument_list|(
literal|"2"
argument_list|,
literal|4l
argument_list|)
decl|.
name|build
argument_list|()
decl_stmt|;
for|for
control|(
name|TermsStatsFacet
operator|.
name|Entry
name|entry
range|:
name|entries
control|)
block|{
name|assertThat
argument_list|(
name|entry
operator|.
name|getCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expected
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getTerm
argument_list|()
operator|.
name|string
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|noShardSize_string_allTerms
specifier|public
name|void
name|noShardSize_string_allTerms
parameter_list|()
throws|throws
name|Exception
block|{
name|createIdx
argument_list|(
literal|"type=string,index=not_analyzed"
argument_list|)
expr_stmt|;
name|indexData
argument_list|()
expr_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"type"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|addFacet
argument_list|(
name|termsStatsFacet
argument_list|(
literal|"keys"
argument_list|)
operator|.
name|keyField
argument_list|(
literal|"key"
argument_list|)
operator|.
name|valueField
argument_list|(
literal|"value"
argument_list|)
operator|.
name|size
argument_list|(
literal|0
argument_list|)
operator|.
name|order
argument_list|(
name|TermsStatsFacet
operator|.
name|ComparatorType
operator|.
name|COUNT
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|Facets
name|facets
init|=
name|response
operator|.
name|getFacets
argument_list|()
decl_stmt|;
name|TermsStatsFacet
name|facet
init|=
name|facets
operator|.
name|facet
argument_list|(
literal|"keys"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|TermsStatsFacet
operator|.
name|Entry
argument_list|>
name|entries
init|=
name|facet
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|entries
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|expected
init|=
name|ImmutableMap
operator|.
expr|<
name|String
decl_stmt|,
name|Long
decl|>
name|builder
argument_list|()
decl|.
name|put
argument_list|(
literal|"1"
argument_list|,
literal|8l
argument_list|)
decl|.
name|put
argument_list|(
literal|"3"
argument_list|,
literal|8l
argument_list|)
decl|.
name|put
argument_list|(
literal|"2"
argument_list|,
literal|5l
argument_list|)
decl|.
name|put
argument_list|(
literal|"4"
argument_list|,
literal|4l
argument_list|)
decl|.
name|put
argument_list|(
literal|"5"
argument_list|,
literal|2l
argument_list|)
decl|.
name|build
argument_list|()
decl_stmt|;
for|for
control|(
name|TermsStatsFacet
operator|.
name|Entry
name|entry
range|:
name|entries
control|)
block|{
name|assertThat
argument_list|(
name|entry
operator|.
name|getCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expected
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getTerm
argument_list|()
operator|.
name|string
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|withShardSize_string_allTerms
specifier|public
name|void
name|withShardSize_string_allTerms
parameter_list|()
throws|throws
name|Exception
block|{
name|createIdx
argument_list|(
literal|"type=string,index=not_analyzed"
argument_list|)
expr_stmt|;
name|indexData
argument_list|()
expr_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"type"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|addFacet
argument_list|(
name|termsStatsFacet
argument_list|(
literal|"keys"
argument_list|)
operator|.
name|keyField
argument_list|(
literal|"key"
argument_list|)
operator|.
name|valueField
argument_list|(
literal|"value"
argument_list|)
operator|.
name|size
argument_list|(
literal|0
argument_list|)
operator|.
name|shardSize
argument_list|(
literal|3
argument_list|)
operator|.
name|order
argument_list|(
name|TermsStatsFacet
operator|.
name|ComparatorType
operator|.
name|COUNT
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|Facets
name|facets
init|=
name|response
operator|.
name|getFacets
argument_list|()
decl_stmt|;
name|TermsStatsFacet
name|facet
init|=
name|facets
operator|.
name|facet
argument_list|(
literal|"keys"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|TermsStatsFacet
operator|.
name|Entry
argument_list|>
name|entries
init|=
name|facet
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|entries
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|expected
init|=
name|ImmutableMap
operator|.
expr|<
name|String
decl_stmt|,
name|Long
decl|>
name|builder
argument_list|()
decl|.
name|put
argument_list|(
literal|"1"
argument_list|,
literal|8l
argument_list|)
decl|.
name|put
argument_list|(
literal|"3"
argument_list|,
literal|8l
argument_list|)
decl|.
name|put
argument_list|(
literal|"2"
argument_list|,
literal|5l
argument_list|)
decl|.
name|put
argument_list|(
literal|"4"
argument_list|,
literal|4l
argument_list|)
decl|.
name|put
argument_list|(
literal|"5"
argument_list|,
literal|2l
argument_list|)
decl|.
name|build
argument_list|()
decl_stmt|;
for|for
control|(
name|TermsStatsFacet
operator|.
name|Entry
name|entry
range|:
name|entries
control|)
block|{
name|assertThat
argument_list|(
name|entry
operator|.
name|getCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expected
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getTerm
argument_list|()
operator|.
name|string
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|withShardSize_string
specifier|public
name|void
name|withShardSize_string
parameter_list|()
throws|throws
name|Exception
block|{
name|createIdx
argument_list|(
literal|"type=string,index=not_analyzed"
argument_list|)
expr_stmt|;
name|indexData
argument_list|()
expr_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"type"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|addFacet
argument_list|(
name|termsStatsFacet
argument_list|(
literal|"keys"
argument_list|)
operator|.
name|keyField
argument_list|(
literal|"key"
argument_list|)
operator|.
name|valueField
argument_list|(
literal|"value"
argument_list|)
operator|.
name|size
argument_list|(
literal|3
argument_list|)
operator|.
name|shardSize
argument_list|(
literal|5
argument_list|)
operator|.
name|order
argument_list|(
name|TermsStatsFacet
operator|.
name|ComparatorType
operator|.
name|COUNT
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|Facets
name|facets
init|=
name|response
operator|.
name|getFacets
argument_list|()
decl_stmt|;
name|TermsStatsFacet
name|facet
init|=
name|facets
operator|.
name|facet
argument_list|(
literal|"keys"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|TermsStatsFacet
operator|.
name|Entry
argument_list|>
name|entries
init|=
name|facet
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|entries
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|expected
init|=
name|ImmutableMap
operator|.
expr|<
name|String
decl_stmt|,
name|Long
decl|>
name|builder
argument_list|()
decl|.
name|put
argument_list|(
literal|"1"
argument_list|,
literal|8l
argument_list|)
decl|.
name|put
argument_list|(
literal|"3"
argument_list|,
literal|8l
argument_list|)
decl|.
name|put
argument_list|(
literal|"2"
argument_list|,
literal|5l
argument_list|)
decl|.
name|build
argument_list|()
decl_stmt|;
for|for
control|(
name|TermsStatsFacet
operator|.
name|Entry
name|entry
range|:
name|entries
control|)
block|{
name|assertThat
argument_list|(
name|entry
operator|.
name|getCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expected
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getTerm
argument_list|()
operator|.
name|string
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|withShardSize_string_singleShard
specifier|public
name|void
name|withShardSize_string_singleShard
parameter_list|()
throws|throws
name|Exception
block|{
name|createIdx
argument_list|(
literal|"type=string,index=not_analyzed"
argument_list|)
expr_stmt|;
name|indexData
argument_list|()
expr_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"type"
argument_list|)
operator|.
name|setRouting
argument_list|(
literal|"1"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|addFacet
argument_list|(
name|termsStatsFacet
argument_list|(
literal|"keys"
argument_list|)
operator|.
name|keyField
argument_list|(
literal|"key"
argument_list|)
operator|.
name|valueField
argument_list|(
literal|"value"
argument_list|)
operator|.
name|size
argument_list|(
literal|3
argument_list|)
operator|.
name|shardSize
argument_list|(
literal|5
argument_list|)
operator|.
name|order
argument_list|(
name|TermsStatsFacet
operator|.
name|ComparatorType
operator|.
name|COUNT
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|Facets
name|facets
init|=
name|response
operator|.
name|getFacets
argument_list|()
decl_stmt|;
name|TermsStatsFacet
name|facet
init|=
name|facets
operator|.
name|facet
argument_list|(
literal|"keys"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|TermsStatsFacet
operator|.
name|Entry
argument_list|>
name|entries
init|=
name|facet
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|entries
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|expected
init|=
name|ImmutableMap
operator|.
expr|<
name|String
decl_stmt|,
name|Long
decl|>
name|builder
argument_list|()
decl|.
name|put
argument_list|(
literal|"1"
argument_list|,
literal|5l
argument_list|)
decl|.
name|put
argument_list|(
literal|"2"
argument_list|,
literal|4l
argument_list|)
decl|.
name|put
argument_list|(
literal|"3"
argument_list|,
literal|3l
argument_list|)
decl|.
name|build
argument_list|()
decl_stmt|;
for|for
control|(
name|TermsStatsFacet
operator|.
name|Entry
name|entry
range|:
name|entries
control|)
block|{
name|assertThat
argument_list|(
name|entry
operator|.
name|getCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expected
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getTerm
argument_list|()
operator|.
name|string
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|noShardSize_long
specifier|public
name|void
name|noShardSize_long
parameter_list|()
throws|throws
name|Exception
block|{
name|createIdx
argument_list|(
literal|"type=long"
argument_list|)
expr_stmt|;
name|indexData
argument_list|()
expr_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"type"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|addFacet
argument_list|(
name|termsStatsFacet
argument_list|(
literal|"keys"
argument_list|)
operator|.
name|keyField
argument_list|(
literal|"key"
argument_list|)
operator|.
name|valueField
argument_list|(
literal|"value"
argument_list|)
operator|.
name|size
argument_list|(
literal|3
argument_list|)
operator|.
name|order
argument_list|(
name|TermsStatsFacet
operator|.
name|ComparatorType
operator|.
name|COUNT
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|Facets
name|facets
init|=
name|response
operator|.
name|getFacets
argument_list|()
decl_stmt|;
name|TermsStatsFacet
name|facet
init|=
name|facets
operator|.
name|facet
argument_list|(
literal|"keys"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|TermsStatsFacet
operator|.
name|Entry
argument_list|>
name|entries
init|=
name|facet
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|entries
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|Long
argument_list|>
name|expected
init|=
name|ImmutableMap
operator|.
expr|<
name|Integer
decl_stmt|,
name|Long
decl|>
name|builder
argument_list|()
decl|.
name|put
argument_list|(
literal|1
argument_list|,
literal|8l
argument_list|)
decl|.
name|put
argument_list|(
literal|3
argument_list|,
literal|8l
argument_list|)
decl|.
name|put
argument_list|(
literal|2
argument_list|,
literal|4l
argument_list|)
decl|.
name|build
argument_list|()
decl_stmt|;
for|for
control|(
name|TermsStatsFacet
operator|.
name|Entry
name|entry
range|:
name|entries
control|)
block|{
name|assertThat
argument_list|(
name|entry
operator|.
name|getCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expected
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getTermAsNumber
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|noShardSize_long_allTerms
specifier|public
name|void
name|noShardSize_long_allTerms
parameter_list|()
throws|throws
name|Exception
block|{
name|createIdx
argument_list|(
literal|"type=long"
argument_list|)
expr_stmt|;
name|indexData
argument_list|()
expr_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"type"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|addFacet
argument_list|(
name|termsStatsFacet
argument_list|(
literal|"keys"
argument_list|)
operator|.
name|keyField
argument_list|(
literal|"key"
argument_list|)
operator|.
name|valueField
argument_list|(
literal|"value"
argument_list|)
operator|.
name|size
argument_list|(
literal|0
argument_list|)
operator|.
name|order
argument_list|(
name|TermsStatsFacet
operator|.
name|ComparatorType
operator|.
name|COUNT
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|Facets
name|facets
init|=
name|response
operator|.
name|getFacets
argument_list|()
decl_stmt|;
name|TermsStatsFacet
name|facet
init|=
name|facets
operator|.
name|facet
argument_list|(
literal|"keys"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|TermsStatsFacet
operator|.
name|Entry
argument_list|>
name|entries
init|=
name|facet
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|entries
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|Long
argument_list|>
name|expected
init|=
name|ImmutableMap
operator|.
expr|<
name|Integer
decl_stmt|,
name|Long
decl|>
name|builder
argument_list|()
decl|.
name|put
argument_list|(
literal|1
argument_list|,
literal|8l
argument_list|)
decl|.
name|put
argument_list|(
literal|3
argument_list|,
literal|8l
argument_list|)
decl|.
name|put
argument_list|(
literal|2
argument_list|,
literal|5l
argument_list|)
decl|.
name|put
argument_list|(
literal|4
argument_list|,
literal|4l
argument_list|)
decl|.
name|put
argument_list|(
literal|5
argument_list|,
literal|2l
argument_list|)
decl|.
name|build
argument_list|()
decl_stmt|;
for|for
control|(
name|TermsStatsFacet
operator|.
name|Entry
name|entry
range|:
name|entries
control|)
block|{
name|assertThat
argument_list|(
name|entry
operator|.
name|getCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expected
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getTermAsNumber
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|withShardSize_long_allTerms
specifier|public
name|void
name|withShardSize_long_allTerms
parameter_list|()
throws|throws
name|Exception
block|{
name|createIdx
argument_list|(
literal|"type=long"
argument_list|)
expr_stmt|;
name|indexData
argument_list|()
expr_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"type"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|addFacet
argument_list|(
name|termsStatsFacet
argument_list|(
literal|"keys"
argument_list|)
operator|.
name|keyField
argument_list|(
literal|"key"
argument_list|)
operator|.
name|valueField
argument_list|(
literal|"value"
argument_list|)
operator|.
name|size
argument_list|(
literal|0
argument_list|)
operator|.
name|shardSize
argument_list|(
literal|3
argument_list|)
operator|.
name|order
argument_list|(
name|TermsStatsFacet
operator|.
name|ComparatorType
operator|.
name|COUNT
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|Facets
name|facets
init|=
name|response
operator|.
name|getFacets
argument_list|()
decl_stmt|;
name|TermsStatsFacet
name|facet
init|=
name|facets
operator|.
name|facet
argument_list|(
literal|"keys"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|TermsStatsFacet
operator|.
name|Entry
argument_list|>
name|entries
init|=
name|facet
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|entries
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|Long
argument_list|>
name|expected
init|=
name|ImmutableMap
operator|.
expr|<
name|Integer
decl_stmt|,
name|Long
decl|>
name|builder
argument_list|()
decl|.
name|put
argument_list|(
literal|1
argument_list|,
literal|8l
argument_list|)
decl|.
name|put
argument_list|(
literal|3
argument_list|,
literal|8l
argument_list|)
decl|.
name|put
argument_list|(
literal|2
argument_list|,
literal|5l
argument_list|)
decl|.
name|put
argument_list|(
literal|4
argument_list|,
literal|4l
argument_list|)
decl|.
name|put
argument_list|(
literal|5
argument_list|,
literal|2l
argument_list|)
decl|.
name|build
argument_list|()
decl_stmt|;
for|for
control|(
name|TermsStatsFacet
operator|.
name|Entry
name|entry
range|:
name|entries
control|)
block|{
name|assertThat
argument_list|(
name|entry
operator|.
name|getCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expected
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getTermAsNumber
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|withShardSize_long
specifier|public
name|void
name|withShardSize_long
parameter_list|()
throws|throws
name|Exception
block|{
name|createIdx
argument_list|(
literal|"type=long"
argument_list|)
expr_stmt|;
name|indexData
argument_list|()
expr_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"type"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|addFacet
argument_list|(
name|termsStatsFacet
argument_list|(
literal|"keys"
argument_list|)
operator|.
name|keyField
argument_list|(
literal|"key"
argument_list|)
operator|.
name|valueField
argument_list|(
literal|"value"
argument_list|)
operator|.
name|size
argument_list|(
literal|3
argument_list|)
operator|.
name|shardSize
argument_list|(
literal|5
argument_list|)
operator|.
name|order
argument_list|(
name|TermsStatsFacet
operator|.
name|ComparatorType
operator|.
name|COUNT
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|Facets
name|facets
init|=
name|response
operator|.
name|getFacets
argument_list|()
decl_stmt|;
name|TermsStatsFacet
name|facet
init|=
name|facets
operator|.
name|facet
argument_list|(
literal|"keys"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|TermsStatsFacet
operator|.
name|Entry
argument_list|>
name|entries
init|=
name|facet
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|entries
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|Long
argument_list|>
name|expected
init|=
name|ImmutableMap
operator|.
expr|<
name|Integer
decl_stmt|,
name|Long
decl|>
name|builder
argument_list|()
decl|.
name|put
argument_list|(
literal|1
argument_list|,
literal|8l
argument_list|)
decl|.
name|put
argument_list|(
literal|3
argument_list|,
literal|8l
argument_list|)
decl|.
name|put
argument_list|(
literal|2
argument_list|,
literal|5l
argument_list|)
decl|.
name|build
argument_list|()
decl_stmt|;
for|for
control|(
name|TermsStatsFacet
operator|.
name|Entry
name|entry
range|:
name|entries
control|)
block|{
name|assertThat
argument_list|(
name|entry
operator|.
name|getCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expected
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getTermAsNumber
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|withShardSize_long_singleShard
specifier|public
name|void
name|withShardSize_long_singleShard
parameter_list|()
throws|throws
name|Exception
block|{
name|createIdx
argument_list|(
literal|"type=long"
argument_list|)
expr_stmt|;
name|indexData
argument_list|()
expr_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"type"
argument_list|)
operator|.
name|setRouting
argument_list|(
literal|"1"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|addFacet
argument_list|(
name|termsStatsFacet
argument_list|(
literal|"keys"
argument_list|)
operator|.
name|keyField
argument_list|(
literal|"key"
argument_list|)
operator|.
name|valueField
argument_list|(
literal|"value"
argument_list|)
operator|.
name|size
argument_list|(
literal|3
argument_list|)
operator|.
name|shardSize
argument_list|(
literal|5
argument_list|)
operator|.
name|order
argument_list|(
name|TermsStatsFacet
operator|.
name|ComparatorType
operator|.
name|COUNT
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|Facets
name|facets
init|=
name|response
operator|.
name|getFacets
argument_list|()
decl_stmt|;
name|TermsStatsFacet
name|facet
init|=
name|facets
operator|.
name|facet
argument_list|(
literal|"keys"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|TermsStatsFacet
operator|.
name|Entry
argument_list|>
name|entries
init|=
name|facet
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|entries
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|Long
argument_list|>
name|expected
init|=
name|ImmutableMap
operator|.
expr|<
name|Integer
decl_stmt|,
name|Long
decl|>
name|builder
argument_list|()
decl|.
name|put
argument_list|(
literal|1
argument_list|,
literal|5l
argument_list|)
decl|.
name|put
argument_list|(
literal|2
argument_list|,
literal|4l
argument_list|)
decl|.
name|put
argument_list|(
literal|3
argument_list|,
literal|3l
argument_list|)
decl|.
name|build
argument_list|()
decl_stmt|;
for|for
control|(
name|TermsStatsFacet
operator|.
name|Entry
name|entry
range|:
name|entries
control|)
block|{
name|assertThat
argument_list|(
name|entry
operator|.
name|getCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expected
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getTermAsNumber
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|noShardSize_double
specifier|public
name|void
name|noShardSize_double
parameter_list|()
throws|throws
name|Exception
block|{
name|createIdx
argument_list|(
literal|"type=double"
argument_list|)
expr_stmt|;
name|indexData
argument_list|()
expr_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"type"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|addFacet
argument_list|(
name|termsStatsFacet
argument_list|(
literal|"keys"
argument_list|)
operator|.
name|keyField
argument_list|(
literal|"key"
argument_list|)
operator|.
name|valueField
argument_list|(
literal|"value"
argument_list|)
operator|.
name|size
argument_list|(
literal|3
argument_list|)
operator|.
name|order
argument_list|(
name|TermsStatsFacet
operator|.
name|ComparatorType
operator|.
name|COUNT
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|Facets
name|facets
init|=
name|response
operator|.
name|getFacets
argument_list|()
decl_stmt|;
name|TermsStatsFacet
name|facet
init|=
name|facets
operator|.
name|facet
argument_list|(
literal|"keys"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|TermsStatsFacet
operator|.
name|Entry
argument_list|>
name|entries
init|=
name|facet
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|entries
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|Long
argument_list|>
name|expected
init|=
name|ImmutableMap
operator|.
expr|<
name|Integer
decl_stmt|,
name|Long
decl|>
name|builder
argument_list|()
decl|.
name|put
argument_list|(
literal|1
argument_list|,
literal|8l
argument_list|)
decl|.
name|put
argument_list|(
literal|3
argument_list|,
literal|8l
argument_list|)
decl|.
name|put
argument_list|(
literal|2
argument_list|,
literal|4l
argument_list|)
decl|.
name|build
argument_list|()
decl_stmt|;
for|for
control|(
name|TermsStatsFacet
operator|.
name|Entry
name|entry
range|:
name|entries
control|)
block|{
name|assertThat
argument_list|(
name|entry
operator|.
name|getCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expected
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getTermAsNumber
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|noShardSize_double_allTerms
specifier|public
name|void
name|noShardSize_double_allTerms
parameter_list|()
throws|throws
name|Exception
block|{
name|createIdx
argument_list|(
literal|"type=double"
argument_list|)
expr_stmt|;
name|indexData
argument_list|()
expr_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"type"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|addFacet
argument_list|(
name|termsStatsFacet
argument_list|(
literal|"keys"
argument_list|)
operator|.
name|keyField
argument_list|(
literal|"key"
argument_list|)
operator|.
name|valueField
argument_list|(
literal|"value"
argument_list|)
operator|.
name|size
argument_list|(
literal|0
argument_list|)
operator|.
name|order
argument_list|(
name|TermsStatsFacet
operator|.
name|ComparatorType
operator|.
name|COUNT
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|Facets
name|facets
init|=
name|response
operator|.
name|getFacets
argument_list|()
decl_stmt|;
name|TermsStatsFacet
name|facet
init|=
name|facets
operator|.
name|facet
argument_list|(
literal|"keys"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|TermsStatsFacet
operator|.
name|Entry
argument_list|>
name|entries
init|=
name|facet
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|entries
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|Long
argument_list|>
name|expected
init|=
name|ImmutableMap
operator|.
expr|<
name|Integer
decl_stmt|,
name|Long
decl|>
name|builder
argument_list|()
decl|.
name|put
argument_list|(
literal|1
argument_list|,
literal|8l
argument_list|)
decl|.
name|put
argument_list|(
literal|3
argument_list|,
literal|8l
argument_list|)
decl|.
name|put
argument_list|(
literal|2
argument_list|,
literal|5l
argument_list|)
decl|.
name|put
argument_list|(
literal|4
argument_list|,
literal|4l
argument_list|)
decl|.
name|put
argument_list|(
literal|5
argument_list|,
literal|2l
argument_list|)
decl|.
name|build
argument_list|()
decl_stmt|;
for|for
control|(
name|TermsStatsFacet
operator|.
name|Entry
name|entry
range|:
name|entries
control|)
block|{
name|assertThat
argument_list|(
name|entry
operator|.
name|getCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expected
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getTermAsNumber
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|withShardSize_double_allTerms
specifier|public
name|void
name|withShardSize_double_allTerms
parameter_list|()
throws|throws
name|Exception
block|{
name|createIdx
argument_list|(
literal|"type=double"
argument_list|)
expr_stmt|;
name|indexData
argument_list|()
expr_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"type"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|addFacet
argument_list|(
name|termsStatsFacet
argument_list|(
literal|"keys"
argument_list|)
operator|.
name|keyField
argument_list|(
literal|"key"
argument_list|)
operator|.
name|valueField
argument_list|(
literal|"value"
argument_list|)
operator|.
name|size
argument_list|(
literal|0
argument_list|)
operator|.
name|shardSize
argument_list|(
literal|3
argument_list|)
operator|.
name|order
argument_list|(
name|TermsStatsFacet
operator|.
name|ComparatorType
operator|.
name|COUNT
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|Facets
name|facets
init|=
name|response
operator|.
name|getFacets
argument_list|()
decl_stmt|;
name|TermsStatsFacet
name|facet
init|=
name|facets
operator|.
name|facet
argument_list|(
literal|"keys"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|TermsStatsFacet
operator|.
name|Entry
argument_list|>
name|entries
init|=
name|facet
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|entries
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|Long
argument_list|>
name|expected
init|=
name|ImmutableMap
operator|.
expr|<
name|Integer
decl_stmt|,
name|Long
decl|>
name|builder
argument_list|()
decl|.
name|put
argument_list|(
literal|1
argument_list|,
literal|8l
argument_list|)
decl|.
name|put
argument_list|(
literal|3
argument_list|,
literal|8l
argument_list|)
decl|.
name|put
argument_list|(
literal|2
argument_list|,
literal|5l
argument_list|)
decl|.
name|put
argument_list|(
literal|4
argument_list|,
literal|4l
argument_list|)
decl|.
name|put
argument_list|(
literal|5
argument_list|,
literal|2l
argument_list|)
decl|.
name|build
argument_list|()
decl_stmt|;
for|for
control|(
name|TermsStatsFacet
operator|.
name|Entry
name|entry
range|:
name|entries
control|)
block|{
name|assertThat
argument_list|(
name|entry
operator|.
name|getCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expected
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getTermAsNumber
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|withShardSize_double
specifier|public
name|void
name|withShardSize_double
parameter_list|()
throws|throws
name|Exception
block|{
name|createIdx
argument_list|(
literal|"type=double"
argument_list|)
expr_stmt|;
name|indexData
argument_list|()
expr_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"type"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|addFacet
argument_list|(
name|termsStatsFacet
argument_list|(
literal|"keys"
argument_list|)
operator|.
name|keyField
argument_list|(
literal|"key"
argument_list|)
operator|.
name|valueField
argument_list|(
literal|"value"
argument_list|)
operator|.
name|size
argument_list|(
literal|3
argument_list|)
operator|.
name|shardSize
argument_list|(
literal|5
argument_list|)
operator|.
name|order
argument_list|(
name|TermsStatsFacet
operator|.
name|ComparatorType
operator|.
name|COUNT
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|Facets
name|facets
init|=
name|response
operator|.
name|getFacets
argument_list|()
decl_stmt|;
name|TermsStatsFacet
name|facet
init|=
name|facets
operator|.
name|facet
argument_list|(
literal|"keys"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|TermsStatsFacet
operator|.
name|Entry
argument_list|>
name|entries
init|=
name|facet
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|entries
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|Long
argument_list|>
name|expected
init|=
name|ImmutableMap
operator|.
expr|<
name|Integer
decl_stmt|,
name|Long
decl|>
name|builder
argument_list|()
decl|.
name|put
argument_list|(
literal|1
argument_list|,
literal|8l
argument_list|)
decl|.
name|put
argument_list|(
literal|3
argument_list|,
literal|8l
argument_list|)
decl|.
name|put
argument_list|(
literal|2
argument_list|,
literal|5l
argument_list|)
decl|.
name|build
argument_list|()
decl_stmt|;
for|for
control|(
name|TermsStatsFacet
operator|.
name|Entry
name|entry
range|:
name|entries
control|)
block|{
name|assertThat
argument_list|(
name|entry
operator|.
name|getCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expected
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getTermAsNumber
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|withShardSize_double_singleShard
specifier|public
name|void
name|withShardSize_double_singleShard
parameter_list|()
throws|throws
name|Exception
block|{
name|createIdx
argument_list|(
literal|"type=double"
argument_list|)
expr_stmt|;
name|indexData
argument_list|()
expr_stmt|;
name|SearchResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|setTypes
argument_list|(
literal|"type"
argument_list|)
operator|.
name|setRouting
argument_list|(
literal|"1"
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|addFacet
argument_list|(
name|termsStatsFacet
argument_list|(
literal|"keys"
argument_list|)
operator|.
name|keyField
argument_list|(
literal|"key"
argument_list|)
operator|.
name|valueField
argument_list|(
literal|"value"
argument_list|)
operator|.
name|size
argument_list|(
literal|3
argument_list|)
operator|.
name|shardSize
argument_list|(
literal|5
argument_list|)
operator|.
name|order
argument_list|(
name|TermsStatsFacet
operator|.
name|ComparatorType
operator|.
name|COUNT
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|Facets
name|facets
init|=
name|response
operator|.
name|getFacets
argument_list|()
decl_stmt|;
name|TermsStatsFacet
name|facet
init|=
name|facets
operator|.
name|facet
argument_list|(
literal|"keys"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|TermsStatsFacet
operator|.
name|Entry
argument_list|>
name|entries
init|=
name|facet
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|entries
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|Long
argument_list|>
name|expected
init|=
name|ImmutableMap
operator|.
expr|<
name|Integer
decl_stmt|,
name|Long
decl|>
name|builder
argument_list|()
decl|.
name|put
argument_list|(
literal|1
argument_list|,
literal|5l
argument_list|)
decl|.
name|put
argument_list|(
literal|2
argument_list|,
literal|4l
argument_list|)
decl|.
name|put
argument_list|(
literal|3
argument_list|,
literal|3l
argument_list|)
decl|.
name|build
argument_list|()
decl_stmt|;
for|for
control|(
name|TermsStatsFacet
operator|.
name|Entry
name|entry
range|:
name|entries
control|)
block|{
name|assertThat
argument_list|(
name|entry
operator|.
name|getCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expected
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getTermAsNumber
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

