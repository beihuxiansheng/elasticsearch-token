begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
package|;
end_package

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|generators
operator|.
name|RandomStrings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BitDocIdSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|FixedBitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|FieldData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|NumericDoubleValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|SortedBinaryDocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|SortedNumericDoubleValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_class
DECL|class|MultiValueModeTests
specifier|public
class|class
name|MultiValueModeTests
extends|extends
name|ElasticsearchTestCase
block|{
DECL|method|randomRootDocs
specifier|private
specifier|static
name|FixedBitSet
name|randomRootDocs
parameter_list|(
name|int
name|maxDoc
parameter_list|)
block|{
name|FixedBitSet
name|set
init|=
operator|new
name|FixedBitSet
argument_list|(
name|maxDoc
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxDoc
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|set
operator|.
name|set
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
comment|// the last doc must be a root doc
name|set
operator|.
name|set
argument_list|(
name|maxDoc
operator|-
literal|1
argument_list|)
expr_stmt|;
return|return
name|set
return|;
block|}
DECL|method|randomInnerDocs
specifier|private
specifier|static
name|FixedBitSet
name|randomInnerDocs
parameter_list|(
name|FixedBitSet
name|rootDocs
parameter_list|)
block|{
name|FixedBitSet
name|innerDocs
init|=
operator|new
name|FixedBitSet
argument_list|(
name|rootDocs
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|innerDocs
operator|.
name|length
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
operator|!
name|rootDocs
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|&&
name|randomBoolean
argument_list|()
condition|)
block|{
name|innerDocs
operator|.
name|set
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|innerDocs
return|;
block|}
DECL|method|testSingleValuedLongs
specifier|public
name|void
name|testSingleValuedLongs
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|numDocs
init|=
name|scaledRandomIntBetween
argument_list|(
literal|1
argument_list|,
literal|100
argument_list|)
decl_stmt|;
specifier|final
name|long
index|[]
name|array
init|=
operator|new
name|long
index|[
name|numDocs
index|]
decl_stmt|;
specifier|final
name|FixedBitSet
name|docsWithValue
init|=
name|randomBoolean
argument_list|()
condition|?
literal|null
else|:
operator|new
name|FixedBitSet
argument_list|(
name|numDocs
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|array
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|array
index|[
name|i
index|]
operator|=
name|randomLong
argument_list|()
expr_stmt|;
if|if
condition|(
name|docsWithValue
operator|!=
literal|null
condition|)
block|{
name|docsWithValue
operator|.
name|set
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|docsWithValue
operator|!=
literal|null
operator|&&
name|randomBoolean
argument_list|()
condition|)
block|{
name|docsWithValue
operator|.
name|set
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|NumericDocValues
name|singleValues
init|=
operator|new
name|NumericDocValues
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|long
name|get
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
return|return
name|array
index|[
name|docID
index|]
return|;
block|}
block|}
decl_stmt|;
specifier|final
name|SortedNumericDocValues
name|multiValues
init|=
name|DocValues
operator|.
name|singleton
argument_list|(
name|singleValues
argument_list|,
name|docsWithValue
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|multiValues
argument_list|,
name|numDocs
argument_list|)
expr_stmt|;
specifier|final
name|FixedBitSet
name|rootDocs
init|=
name|randomRootDocs
argument_list|(
name|numDocs
argument_list|)
decl_stmt|;
specifier|final
name|FixedBitSet
name|innerDocs
init|=
name|randomInnerDocs
argument_list|(
name|rootDocs
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|multiValues
argument_list|,
name|numDocs
argument_list|,
name|rootDocs
argument_list|,
name|innerDocs
argument_list|)
expr_stmt|;
block|}
DECL|method|testMultiValuedLongs
specifier|public
name|void
name|testMultiValuedLongs
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|numDocs
init|=
name|scaledRandomIntBetween
argument_list|(
literal|1
argument_list|,
literal|100
argument_list|)
decl_stmt|;
specifier|final
name|long
index|[]
index|[]
name|array
init|=
operator|new
name|long
index|[
name|numDocs
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|long
index|[]
name|values
init|=
operator|new
name|long
index|[
name|randomInt
argument_list|(
literal|4
argument_list|)
index|]
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|values
operator|.
name|length
condition|;
operator|++
name|j
control|)
block|{
name|values
index|[
name|j
index|]
operator|=
name|randomLong
argument_list|()
expr_stmt|;
block|}
name|Arrays
operator|.
name|sort
argument_list|(
name|values
argument_list|)
expr_stmt|;
name|array
index|[
name|i
index|]
operator|=
name|values
expr_stmt|;
block|}
specifier|final
name|SortedNumericDocValues
name|multiValues
init|=
operator|new
name|SortedNumericDocValues
argument_list|()
block|{
name|int
name|doc
decl_stmt|;
annotation|@
name|Override
specifier|public
name|long
name|valueAt
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|array
index|[
name|doc
index|]
index|[
name|index
index|]
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setDocument
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
name|this
operator|.
name|doc
operator|=
name|doc
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|count
parameter_list|()
block|{
return|return
name|array
index|[
name|doc
index|]
operator|.
name|length
return|;
block|}
block|}
decl_stmt|;
name|verify
argument_list|(
name|multiValues
argument_list|,
name|numDocs
argument_list|)
expr_stmt|;
specifier|final
name|FixedBitSet
name|rootDocs
init|=
name|randomRootDocs
argument_list|(
name|numDocs
argument_list|)
decl_stmt|;
specifier|final
name|FixedBitSet
name|innerDocs
init|=
name|randomInnerDocs
argument_list|(
name|rootDocs
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|multiValues
argument_list|,
name|numDocs
argument_list|,
name|rootDocs
argument_list|,
name|innerDocs
argument_list|)
expr_stmt|;
block|}
DECL|method|verify
specifier|private
name|void
name|verify
parameter_list|(
name|SortedNumericDocValues
name|values
parameter_list|,
name|int
name|maxDoc
parameter_list|)
block|{
for|for
control|(
name|long
name|missingValue
range|:
operator|new
name|long
index|[]
block|{
literal|0
block|,
name|randomLong
argument_list|()
block|}
control|)
block|{
for|for
control|(
name|MultiValueMode
name|mode
range|:
name|MultiValueMode
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|MultiValueMode
operator|.
name|MEDIAN
operator|.
name|equals
argument_list|(
name|mode
argument_list|)
condition|)
block|{
continue|continue;
block|}
specifier|final
name|NumericDocValues
name|selected
init|=
name|mode
operator|.
name|select
argument_list|(
name|values
argument_list|,
name|missingValue
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxDoc
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|long
name|actual
init|=
name|selected
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|long
name|expected
decl_stmt|;
name|values
operator|.
name|setDocument
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|int
name|numValues
init|=
name|values
operator|.
name|count
argument_list|()
decl_stmt|;
if|if
condition|(
name|numValues
operator|==
literal|0
condition|)
block|{
name|expected
operator|=
name|missingValue
expr_stmt|;
block|}
else|else
block|{
name|expected
operator|=
name|mode
operator|.
name|startLong
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numValues
condition|;
operator|++
name|j
control|)
block|{
name|expected
operator|=
name|mode
operator|.
name|apply
argument_list|(
name|expected
argument_list|,
name|values
operator|.
name|valueAt
argument_list|(
name|j
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|expected
operator|=
name|mode
operator|.
name|reduce
argument_list|(
name|expected
argument_list|,
name|numValues
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|mode
operator|.
name|toString
argument_list|()
operator|+
literal|" docId="
operator|+
name|i
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|verify
specifier|private
name|void
name|verify
parameter_list|(
name|SortedNumericDocValues
name|values
parameter_list|,
name|int
name|maxDoc
parameter_list|,
name|FixedBitSet
name|rootDocs
parameter_list|,
name|FixedBitSet
name|innerDocs
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|long
name|missingValue
range|:
operator|new
name|long
index|[]
block|{
literal|0
block|,
name|randomLong
argument_list|()
block|}
control|)
block|{
for|for
control|(
name|MultiValueMode
name|mode
range|:
name|MultiValueMode
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|MultiValueMode
operator|.
name|MEDIAN
operator|.
name|equals
argument_list|(
name|mode
argument_list|)
condition|)
block|{
continue|continue;
block|}
specifier|final
name|NumericDocValues
name|selected
init|=
name|mode
operator|.
name|select
argument_list|(
name|values
argument_list|,
name|missingValue
argument_list|,
name|rootDocs
argument_list|,
operator|new
name|BitDocIdSet
argument_list|(
name|innerDocs
argument_list|)
argument_list|,
name|maxDoc
argument_list|)
decl_stmt|;
name|int
name|prevRoot
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|root
init|=
name|rootDocs
operator|.
name|nextSetBit
argument_list|(
literal|0
argument_list|)
init|;
name|root
operator|!=
operator|-
literal|1
condition|;
name|root
operator|=
name|root
operator|+
literal|1
operator|<
name|maxDoc
condition|?
name|rootDocs
operator|.
name|nextSetBit
argument_list|(
name|root
operator|+
literal|1
argument_list|)
else|:
operator|-
literal|1
control|)
block|{
specifier|final
name|long
name|actual
init|=
name|selected
operator|.
name|get
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|long
name|expected
init|=
name|mode
operator|.
name|startLong
argument_list|()
decl_stmt|;
name|int
name|numValues
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|child
init|=
name|innerDocs
operator|.
name|nextSetBit
argument_list|(
name|prevRoot
operator|+
literal|1
argument_list|)
init|;
name|child
operator|!=
operator|-
literal|1
operator|&&
name|child
operator|<
name|root
condition|;
name|child
operator|=
name|innerDocs
operator|.
name|nextSetBit
argument_list|(
name|child
operator|+
literal|1
argument_list|)
control|)
block|{
name|values
operator|.
name|setDocument
argument_list|(
name|child
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|values
operator|.
name|count
argument_list|()
condition|;
operator|++
name|j
control|)
block|{
name|expected
operator|=
name|mode
operator|.
name|apply
argument_list|(
name|expected
argument_list|,
name|values
operator|.
name|valueAt
argument_list|(
name|j
argument_list|)
argument_list|)
expr_stmt|;
operator|++
name|numValues
expr_stmt|;
block|}
block|}
if|if
condition|(
name|numValues
operator|==
literal|0
condition|)
block|{
name|expected
operator|=
name|missingValue
expr_stmt|;
block|}
else|else
block|{
name|expected
operator|=
name|mode
operator|.
name|reduce
argument_list|(
name|expected
argument_list|,
name|numValues
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|mode
operator|.
name|toString
argument_list|()
operator|+
literal|" docId="
operator|+
name|root
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|prevRoot
operator|=
name|root
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|testSingleValuedDoubles
specifier|public
name|void
name|testSingleValuedDoubles
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|numDocs
init|=
name|scaledRandomIntBetween
argument_list|(
literal|1
argument_list|,
literal|100
argument_list|)
decl_stmt|;
specifier|final
name|double
index|[]
name|array
init|=
operator|new
name|double
index|[
name|numDocs
index|]
decl_stmt|;
specifier|final
name|FixedBitSet
name|docsWithValue
init|=
name|randomBoolean
argument_list|()
condition|?
literal|null
else|:
operator|new
name|FixedBitSet
argument_list|(
name|numDocs
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|array
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|array
index|[
name|i
index|]
operator|=
name|randomDouble
argument_list|()
expr_stmt|;
if|if
condition|(
name|docsWithValue
operator|!=
literal|null
condition|)
block|{
name|docsWithValue
operator|.
name|set
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|docsWithValue
operator|!=
literal|null
operator|&&
name|randomBoolean
argument_list|()
condition|)
block|{
name|docsWithValue
operator|.
name|set
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|NumericDoubleValues
name|singleValues
init|=
operator|new
name|NumericDoubleValues
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|double
name|get
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
return|return
name|array
index|[
name|docID
index|]
return|;
block|}
block|}
decl_stmt|;
specifier|final
name|SortedNumericDoubleValues
name|multiValues
init|=
name|FieldData
operator|.
name|singleton
argument_list|(
name|singleValues
argument_list|,
name|docsWithValue
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|multiValues
argument_list|,
name|numDocs
argument_list|)
expr_stmt|;
specifier|final
name|FixedBitSet
name|rootDocs
init|=
name|randomRootDocs
argument_list|(
name|numDocs
argument_list|)
decl_stmt|;
specifier|final
name|FixedBitSet
name|innerDocs
init|=
name|randomInnerDocs
argument_list|(
name|rootDocs
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|multiValues
argument_list|,
name|numDocs
argument_list|,
name|rootDocs
argument_list|,
name|innerDocs
argument_list|)
expr_stmt|;
block|}
DECL|method|testMultiValuedDoubles
specifier|public
name|void
name|testMultiValuedDoubles
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|numDocs
init|=
name|scaledRandomIntBetween
argument_list|(
literal|1
argument_list|,
literal|100
argument_list|)
decl_stmt|;
specifier|final
name|double
index|[]
index|[]
name|array
init|=
operator|new
name|double
index|[
name|numDocs
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|double
index|[]
name|values
init|=
operator|new
name|double
index|[
name|randomInt
argument_list|(
literal|4
argument_list|)
index|]
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|values
operator|.
name|length
condition|;
operator|++
name|j
control|)
block|{
name|values
index|[
name|j
index|]
operator|=
name|randomDouble
argument_list|()
expr_stmt|;
block|}
name|Arrays
operator|.
name|sort
argument_list|(
name|values
argument_list|)
expr_stmt|;
name|array
index|[
name|i
index|]
operator|=
name|values
expr_stmt|;
block|}
specifier|final
name|SortedNumericDoubleValues
name|multiValues
init|=
operator|new
name|SortedNumericDoubleValues
argument_list|()
block|{
name|int
name|doc
decl_stmt|;
annotation|@
name|Override
specifier|public
name|double
name|valueAt
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|array
index|[
name|doc
index|]
index|[
name|index
index|]
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setDocument
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
name|this
operator|.
name|doc
operator|=
name|doc
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|count
parameter_list|()
block|{
return|return
name|array
index|[
name|doc
index|]
operator|.
name|length
return|;
block|}
block|}
decl_stmt|;
name|verify
argument_list|(
name|multiValues
argument_list|,
name|numDocs
argument_list|)
expr_stmt|;
specifier|final
name|FixedBitSet
name|rootDocs
init|=
name|randomRootDocs
argument_list|(
name|numDocs
argument_list|)
decl_stmt|;
specifier|final
name|FixedBitSet
name|innerDocs
init|=
name|randomInnerDocs
argument_list|(
name|rootDocs
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|multiValues
argument_list|,
name|numDocs
argument_list|,
name|rootDocs
argument_list|,
name|innerDocs
argument_list|)
expr_stmt|;
block|}
DECL|method|verify
specifier|private
name|void
name|verify
parameter_list|(
name|SortedNumericDoubleValues
name|values
parameter_list|,
name|int
name|maxDoc
parameter_list|)
block|{
for|for
control|(
name|long
name|missingValue
range|:
operator|new
name|long
index|[]
block|{
literal|0
block|,
name|randomLong
argument_list|()
block|}
control|)
block|{
for|for
control|(
name|MultiValueMode
name|mode
range|:
name|MultiValueMode
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|MultiValueMode
operator|.
name|MEDIAN
operator|.
name|equals
argument_list|(
name|mode
argument_list|)
condition|)
block|{
continue|continue;
block|}
specifier|final
name|NumericDoubleValues
name|selected
init|=
name|mode
operator|.
name|select
argument_list|(
name|values
argument_list|,
name|missingValue
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxDoc
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|double
name|actual
init|=
name|selected
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|double
name|expected
decl_stmt|;
name|values
operator|.
name|setDocument
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|int
name|numValues
init|=
name|values
operator|.
name|count
argument_list|()
decl_stmt|;
if|if
condition|(
name|numValues
operator|==
literal|0
condition|)
block|{
name|expected
operator|=
name|missingValue
expr_stmt|;
block|}
else|else
block|{
name|expected
operator|=
name|mode
operator|.
name|startLong
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numValues
condition|;
operator|++
name|j
control|)
block|{
name|expected
operator|=
name|mode
operator|.
name|apply
argument_list|(
name|expected
argument_list|,
name|values
operator|.
name|valueAt
argument_list|(
name|j
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|expected
operator|=
name|mode
operator|.
name|reduce
argument_list|(
name|expected
argument_list|,
name|numValues
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|mode
operator|.
name|toString
argument_list|()
operator|+
literal|" docId="
operator|+
name|i
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|,
literal|0.1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|verify
specifier|private
name|void
name|verify
parameter_list|(
name|SortedNumericDoubleValues
name|values
parameter_list|,
name|int
name|maxDoc
parameter_list|,
name|FixedBitSet
name|rootDocs
parameter_list|,
name|FixedBitSet
name|innerDocs
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|long
name|missingValue
range|:
operator|new
name|long
index|[]
block|{
literal|0
block|,
name|randomLong
argument_list|()
block|}
control|)
block|{
for|for
control|(
name|MultiValueMode
name|mode
range|:
name|MultiValueMode
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|MultiValueMode
operator|.
name|MEDIAN
operator|.
name|equals
argument_list|(
name|mode
argument_list|)
condition|)
block|{
continue|continue;
block|}
specifier|final
name|NumericDoubleValues
name|selected
init|=
name|mode
operator|.
name|select
argument_list|(
name|values
argument_list|,
name|missingValue
argument_list|,
name|rootDocs
argument_list|,
operator|new
name|BitDocIdSet
argument_list|(
name|innerDocs
argument_list|)
argument_list|,
name|maxDoc
argument_list|)
decl_stmt|;
name|int
name|prevRoot
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|root
init|=
name|rootDocs
operator|.
name|nextSetBit
argument_list|(
literal|0
argument_list|)
init|;
name|root
operator|!=
operator|-
literal|1
condition|;
name|root
operator|=
name|root
operator|+
literal|1
operator|<
name|maxDoc
condition|?
name|rootDocs
operator|.
name|nextSetBit
argument_list|(
name|root
operator|+
literal|1
argument_list|)
else|:
operator|-
literal|1
control|)
block|{
specifier|final
name|double
name|actual
init|=
name|selected
operator|.
name|get
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|double
name|expected
init|=
name|mode
operator|.
name|startLong
argument_list|()
decl_stmt|;
name|int
name|numValues
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|child
init|=
name|innerDocs
operator|.
name|nextSetBit
argument_list|(
name|prevRoot
operator|+
literal|1
argument_list|)
init|;
name|child
operator|!=
operator|-
literal|1
operator|&&
name|child
operator|<
name|root
condition|;
name|child
operator|=
name|innerDocs
operator|.
name|nextSetBit
argument_list|(
name|child
operator|+
literal|1
argument_list|)
control|)
block|{
name|values
operator|.
name|setDocument
argument_list|(
name|child
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|values
operator|.
name|count
argument_list|()
condition|;
operator|++
name|j
control|)
block|{
name|expected
operator|=
name|mode
operator|.
name|apply
argument_list|(
name|expected
argument_list|,
name|values
operator|.
name|valueAt
argument_list|(
name|j
argument_list|)
argument_list|)
expr_stmt|;
operator|++
name|numValues
expr_stmt|;
block|}
block|}
if|if
condition|(
name|numValues
operator|==
literal|0
condition|)
block|{
name|expected
operator|=
name|missingValue
expr_stmt|;
block|}
else|else
block|{
name|expected
operator|=
name|mode
operator|.
name|reduce
argument_list|(
name|expected
argument_list|,
name|numValues
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|mode
operator|.
name|toString
argument_list|()
operator|+
literal|" docId="
operator|+
name|root
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|,
literal|0.1
argument_list|)
expr_stmt|;
name|prevRoot
operator|=
name|root
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|testSingleValuedStrings
specifier|public
name|void
name|testSingleValuedStrings
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|numDocs
init|=
name|scaledRandomIntBetween
argument_list|(
literal|1
argument_list|,
literal|100
argument_list|)
decl_stmt|;
specifier|final
name|BytesRef
index|[]
name|array
init|=
operator|new
name|BytesRef
index|[
name|numDocs
index|]
decl_stmt|;
specifier|final
name|FixedBitSet
name|docsWithValue
init|=
name|randomBoolean
argument_list|()
condition|?
literal|null
else|:
operator|new
name|FixedBitSet
argument_list|(
name|numDocs
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|array
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|array
index|[
name|i
index|]
operator|=
operator|new
name|BytesRef
argument_list|(
name|RandomStrings
operator|.
name|randomAsciiOfLength
argument_list|(
name|getRandom
argument_list|()
argument_list|,
literal|8
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|docsWithValue
operator|!=
literal|null
condition|)
block|{
name|docsWithValue
operator|.
name|set
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|array
index|[
name|i
index|]
operator|=
operator|new
name|BytesRef
argument_list|()
expr_stmt|;
if|if
condition|(
name|docsWithValue
operator|!=
literal|null
operator|&&
name|randomBoolean
argument_list|()
condition|)
block|{
name|docsWithValue
operator|.
name|set
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|final
name|BinaryDocValues
name|singleValues
init|=
operator|new
name|BinaryDocValues
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|BytesRef
name|get
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
return|return
name|BytesRef
operator|.
name|deepCopyOf
argument_list|(
name|array
index|[
name|docID
index|]
argument_list|)
return|;
block|}
block|}
decl_stmt|;
specifier|final
name|SortedBinaryDocValues
name|multiValues
init|=
name|FieldData
operator|.
name|singleton
argument_list|(
name|singleValues
argument_list|,
name|docsWithValue
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|multiValues
argument_list|,
name|numDocs
argument_list|)
expr_stmt|;
specifier|final
name|FixedBitSet
name|rootDocs
init|=
name|randomRootDocs
argument_list|(
name|numDocs
argument_list|)
decl_stmt|;
specifier|final
name|FixedBitSet
name|innerDocs
init|=
name|randomInnerDocs
argument_list|(
name|rootDocs
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|multiValues
argument_list|,
name|numDocs
argument_list|,
name|rootDocs
argument_list|,
name|innerDocs
argument_list|)
expr_stmt|;
block|}
DECL|method|testMultiValuedStrings
specifier|public
name|void
name|testMultiValuedStrings
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|numDocs
init|=
name|scaledRandomIntBetween
argument_list|(
literal|1
argument_list|,
literal|100
argument_list|)
decl_stmt|;
specifier|final
name|BytesRef
index|[]
index|[]
name|array
init|=
operator|new
name|BytesRef
index|[
name|numDocs
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|BytesRef
index|[]
name|values
init|=
operator|new
name|BytesRef
index|[
name|randomInt
argument_list|(
literal|4
argument_list|)
index|]
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|values
operator|.
name|length
condition|;
operator|++
name|j
control|)
block|{
name|values
index|[
name|j
index|]
operator|=
operator|new
name|BytesRef
argument_list|(
name|RandomStrings
operator|.
name|randomAsciiOfLength
argument_list|(
name|getRandom
argument_list|()
argument_list|,
literal|8
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Arrays
operator|.
name|sort
argument_list|(
name|values
argument_list|)
expr_stmt|;
name|array
index|[
name|i
index|]
operator|=
name|values
expr_stmt|;
block|}
specifier|final
name|SortedBinaryDocValues
name|multiValues
init|=
operator|new
name|SortedBinaryDocValues
argument_list|()
block|{
name|int
name|doc
decl_stmt|;
annotation|@
name|Override
specifier|public
name|BytesRef
name|valueAt
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|BytesRef
operator|.
name|deepCopyOf
argument_list|(
name|array
index|[
name|doc
index|]
index|[
name|index
index|]
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setDocument
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
name|this
operator|.
name|doc
operator|=
name|doc
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|count
parameter_list|()
block|{
return|return
name|array
index|[
name|doc
index|]
operator|.
name|length
return|;
block|}
block|}
decl_stmt|;
name|verify
argument_list|(
name|multiValues
argument_list|,
name|numDocs
argument_list|)
expr_stmt|;
specifier|final
name|FixedBitSet
name|rootDocs
init|=
name|randomRootDocs
argument_list|(
name|numDocs
argument_list|)
decl_stmt|;
specifier|final
name|FixedBitSet
name|innerDocs
init|=
name|randomInnerDocs
argument_list|(
name|rootDocs
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|multiValues
argument_list|,
name|numDocs
argument_list|,
name|rootDocs
argument_list|,
name|innerDocs
argument_list|)
expr_stmt|;
block|}
DECL|method|verify
specifier|private
name|void
name|verify
parameter_list|(
name|SortedBinaryDocValues
name|values
parameter_list|,
name|int
name|maxDoc
parameter_list|)
block|{
for|for
control|(
name|BytesRef
name|missingValue
range|:
operator|new
name|BytesRef
index|[]
block|{
operator|new
name|BytesRef
argument_list|()
block|,
operator|new
name|BytesRef
argument_list|(
name|RandomStrings
operator|.
name|randomAsciiOfLength
argument_list|(
name|getRandom
argument_list|()
argument_list|,
literal|8
argument_list|)
argument_list|)
block|}
control|)
block|{
for|for
control|(
name|MultiValueMode
name|mode
range|:
operator|new
name|MultiValueMode
index|[]
block|{
name|MultiValueMode
operator|.
name|MIN
block|,
name|MultiValueMode
operator|.
name|MAX
block|}
control|)
block|{
specifier|final
name|BinaryDocValues
name|selected
init|=
name|mode
operator|.
name|select
argument_list|(
name|values
argument_list|,
name|missingValue
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxDoc
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|BytesRef
name|actual
init|=
name|selected
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|BytesRef
name|expected
init|=
literal|null
decl_stmt|;
name|values
operator|.
name|setDocument
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|int
name|numValues
init|=
name|values
operator|.
name|count
argument_list|()
decl_stmt|;
if|if
condition|(
name|numValues
operator|==
literal|0
condition|)
block|{
name|expected
operator|=
name|missingValue
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numValues
condition|;
operator|++
name|j
control|)
block|{
if|if
condition|(
name|expected
operator|==
literal|null
condition|)
block|{
name|expected
operator|=
name|BytesRef
operator|.
name|deepCopyOf
argument_list|(
name|values
operator|.
name|valueAt
argument_list|(
name|j
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|expected
operator|=
name|mode
operator|.
name|apply
argument_list|(
name|expected
argument_list|,
name|BytesRef
operator|.
name|deepCopyOf
argument_list|(
name|values
operator|.
name|valueAt
argument_list|(
name|j
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|expected
operator|==
literal|null
condition|)
block|{
name|expected
operator|=
name|missingValue
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|mode
operator|.
name|toString
argument_list|()
operator|+
literal|" docId="
operator|+
name|i
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|verify
specifier|private
name|void
name|verify
parameter_list|(
name|SortedBinaryDocValues
name|values
parameter_list|,
name|int
name|maxDoc
parameter_list|,
name|FixedBitSet
name|rootDocs
parameter_list|,
name|FixedBitSet
name|innerDocs
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|BytesRef
name|missingValue
range|:
operator|new
name|BytesRef
index|[]
block|{
operator|new
name|BytesRef
argument_list|()
block|,
operator|new
name|BytesRef
argument_list|(
name|RandomStrings
operator|.
name|randomAsciiOfLength
argument_list|(
name|getRandom
argument_list|()
argument_list|,
literal|8
argument_list|)
argument_list|)
block|}
control|)
block|{
for|for
control|(
name|MultiValueMode
name|mode
range|:
operator|new
name|MultiValueMode
index|[]
block|{
name|MultiValueMode
operator|.
name|MIN
block|,
name|MultiValueMode
operator|.
name|MAX
block|}
control|)
block|{
specifier|final
name|BinaryDocValues
name|selected
init|=
name|mode
operator|.
name|select
argument_list|(
name|values
argument_list|,
name|missingValue
argument_list|,
name|rootDocs
argument_list|,
operator|new
name|BitDocIdSet
argument_list|(
name|innerDocs
argument_list|)
argument_list|,
name|maxDoc
argument_list|)
decl_stmt|;
name|int
name|prevRoot
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|root
init|=
name|rootDocs
operator|.
name|nextSetBit
argument_list|(
literal|0
argument_list|)
init|;
name|root
operator|!=
operator|-
literal|1
condition|;
name|root
operator|=
name|root
operator|+
literal|1
operator|<
name|maxDoc
condition|?
name|rootDocs
operator|.
name|nextSetBit
argument_list|(
name|root
operator|+
literal|1
argument_list|)
else|:
operator|-
literal|1
control|)
block|{
specifier|final
name|BytesRef
name|actual
init|=
name|selected
operator|.
name|get
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|BytesRef
name|expected
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|child
init|=
name|innerDocs
operator|.
name|nextSetBit
argument_list|(
name|prevRoot
operator|+
literal|1
argument_list|)
init|;
name|child
operator|!=
operator|-
literal|1
operator|&&
name|child
operator|<
name|root
condition|;
name|child
operator|=
name|innerDocs
operator|.
name|nextSetBit
argument_list|(
name|child
operator|+
literal|1
argument_list|)
control|)
block|{
name|values
operator|.
name|setDocument
argument_list|(
name|child
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|values
operator|.
name|count
argument_list|()
condition|;
operator|++
name|j
control|)
block|{
if|if
condition|(
name|expected
operator|==
literal|null
condition|)
block|{
name|expected
operator|=
name|BytesRef
operator|.
name|deepCopyOf
argument_list|(
name|values
operator|.
name|valueAt
argument_list|(
name|j
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|expected
operator|=
name|mode
operator|.
name|apply
argument_list|(
name|expected
argument_list|,
name|values
operator|.
name|valueAt
argument_list|(
name|j
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|expected
operator|=
name|mode
operator|.
name|apply
argument_list|(
name|expected
argument_list|,
name|BytesRef
operator|.
name|deepCopyOf
argument_list|(
name|values
operator|.
name|valueAt
argument_list|(
name|j
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|expected
operator|==
literal|null
condition|)
block|{
name|expected
operator|=
name|missingValue
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|mode
operator|.
name|toString
argument_list|()
operator|+
literal|" docId="
operator|+
name|root
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|prevRoot
operator|=
name|root
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|testSingleValuedOrds
specifier|public
name|void
name|testSingleValuedOrds
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|numDocs
init|=
name|scaledRandomIntBetween
argument_list|(
literal|1
argument_list|,
literal|100
argument_list|)
decl_stmt|;
specifier|final
name|int
index|[]
name|array
init|=
operator|new
name|int
index|[
name|numDocs
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|array
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|array
index|[
name|i
index|]
operator|=
name|randomInt
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|array
index|[
name|i
index|]
operator|=
operator|-
literal|1
expr_stmt|;
block|}
block|}
specifier|final
name|SortedDocValues
name|singleValues
init|=
operator|new
name|SortedDocValues
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|getOrd
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
return|return
name|array
index|[
name|docID
index|]
return|;
block|}
annotation|@
name|Override
specifier|public
name|BytesRef
name|lookupOrd
parameter_list|(
name|int
name|ord
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getValueCount
parameter_list|()
block|{
return|return
literal|1
operator|<<
literal|20
return|;
block|}
block|}
decl_stmt|;
specifier|final
name|RandomAccessOrds
name|multiValues
init|=
operator|(
name|RandomAccessOrds
operator|)
name|DocValues
operator|.
name|singleton
argument_list|(
name|singleValues
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|multiValues
argument_list|,
name|numDocs
argument_list|)
expr_stmt|;
specifier|final
name|FixedBitSet
name|rootDocs
init|=
name|randomRootDocs
argument_list|(
name|numDocs
argument_list|)
decl_stmt|;
specifier|final
name|FixedBitSet
name|innerDocs
init|=
name|randomInnerDocs
argument_list|(
name|rootDocs
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|multiValues
argument_list|,
name|numDocs
argument_list|,
name|rootDocs
argument_list|,
name|innerDocs
argument_list|)
expr_stmt|;
block|}
DECL|method|testMultiValuedOrds
specifier|public
name|void
name|testMultiValuedOrds
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|numDocs
init|=
name|scaledRandomIntBetween
argument_list|(
literal|1
argument_list|,
literal|100
argument_list|)
decl_stmt|;
specifier|final
name|long
index|[]
index|[]
name|array
init|=
operator|new
name|long
index|[
name|numDocs
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|long
index|[]
name|values
init|=
operator|new
name|long
index|[
name|randomInt
argument_list|(
literal|4
argument_list|)
index|]
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|values
operator|.
name|length
condition|;
operator|++
name|j
control|)
block|{
name|values
index|[
name|j
index|]
operator|=
name|j
operator|==
literal|0
condition|?
name|randomInt
argument_list|(
literal|1000
argument_list|)
else|:
name|values
index|[
name|j
operator|-
literal|1
index|]
operator|+
literal|1
operator|+
name|randomInt
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
name|array
index|[
name|i
index|]
operator|=
name|values
expr_stmt|;
block|}
specifier|final
name|RandomAccessOrds
name|multiValues
init|=
operator|new
name|RandomAccessOrds
argument_list|()
block|{
name|int
name|doc
decl_stmt|;
annotation|@
name|Override
specifier|public
name|long
name|ordAt
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|array
index|[
name|doc
index|]
index|[
name|index
index|]
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|cardinality
parameter_list|()
block|{
return|return
name|array
index|[
name|doc
index|]
operator|.
name|length
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|nextOrd
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setDocument
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
name|this
operator|.
name|doc
operator|=
name|docID
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|BytesRef
name|lookupOrd
parameter_list|(
name|long
name|ord
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getValueCount
parameter_list|()
block|{
return|return
literal|1
operator|<<
literal|20
return|;
block|}
block|}
decl_stmt|;
name|verify
argument_list|(
name|multiValues
argument_list|,
name|numDocs
argument_list|)
expr_stmt|;
specifier|final
name|FixedBitSet
name|rootDocs
init|=
name|randomRootDocs
argument_list|(
name|numDocs
argument_list|)
decl_stmt|;
specifier|final
name|FixedBitSet
name|innerDocs
init|=
name|randomInnerDocs
argument_list|(
name|rootDocs
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|multiValues
argument_list|,
name|numDocs
argument_list|,
name|rootDocs
argument_list|,
name|innerDocs
argument_list|)
expr_stmt|;
block|}
DECL|method|verify
specifier|private
name|void
name|verify
parameter_list|(
name|RandomAccessOrds
name|values
parameter_list|,
name|int
name|maxDoc
parameter_list|)
block|{
for|for
control|(
name|MultiValueMode
name|mode
range|:
operator|new
name|MultiValueMode
index|[]
block|{
name|MultiValueMode
operator|.
name|MIN
block|,
name|MultiValueMode
operator|.
name|MAX
block|}
control|)
block|{
specifier|final
name|SortedDocValues
name|selected
init|=
name|mode
operator|.
name|select
argument_list|(
name|values
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxDoc
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|long
name|actual
init|=
name|selected
operator|.
name|getOrd
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|int
name|expected
init|=
operator|-
literal|1
decl_stmt|;
name|values
operator|.
name|setDocument
argument_list|(
name|i
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|values
operator|.
name|cardinality
argument_list|()
condition|;
operator|++
name|j
control|)
block|{
if|if
condition|(
name|expected
operator|==
operator|-
literal|1
condition|)
block|{
name|expected
operator|=
operator|(
name|int
operator|)
name|values
operator|.
name|ordAt
argument_list|(
name|j
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|expected
operator|=
name|mode
operator|.
name|applyOrd
argument_list|(
name|expected
argument_list|,
operator|(
name|int
operator|)
name|values
operator|.
name|ordAt
argument_list|(
name|j
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|mode
operator|.
name|toString
argument_list|()
operator|+
literal|" docId="
operator|+
name|i
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|verify
specifier|private
name|void
name|verify
parameter_list|(
name|RandomAccessOrds
name|values
parameter_list|,
name|int
name|maxDoc
parameter_list|,
name|FixedBitSet
name|rootDocs
parameter_list|,
name|FixedBitSet
name|innerDocs
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|MultiValueMode
name|mode
range|:
operator|new
name|MultiValueMode
index|[]
block|{
name|MultiValueMode
operator|.
name|MIN
block|,
name|MultiValueMode
operator|.
name|MAX
block|}
control|)
block|{
specifier|final
name|SortedDocValues
name|selected
init|=
name|mode
operator|.
name|select
argument_list|(
name|values
argument_list|,
name|rootDocs
argument_list|,
operator|new
name|BitDocIdSet
argument_list|(
name|innerDocs
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|prevRoot
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|root
init|=
name|rootDocs
operator|.
name|nextSetBit
argument_list|(
literal|0
argument_list|)
init|;
name|root
operator|!=
operator|-
literal|1
condition|;
name|root
operator|=
name|root
operator|+
literal|1
operator|<
name|maxDoc
condition|?
name|rootDocs
operator|.
name|nextSetBit
argument_list|(
name|root
operator|+
literal|1
argument_list|)
else|:
operator|-
literal|1
control|)
block|{
specifier|final
name|int
name|actual
init|=
name|selected
operator|.
name|getOrd
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|int
name|expected
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|child
init|=
name|innerDocs
operator|.
name|nextSetBit
argument_list|(
name|prevRoot
operator|+
literal|1
argument_list|)
init|;
name|child
operator|!=
operator|-
literal|1
operator|&&
name|child
operator|<
name|root
condition|;
name|child
operator|=
name|innerDocs
operator|.
name|nextSetBit
argument_list|(
name|child
operator|+
literal|1
argument_list|)
control|)
block|{
name|values
operator|.
name|setDocument
argument_list|(
name|child
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|values
operator|.
name|cardinality
argument_list|()
condition|;
operator|++
name|j
control|)
block|{
if|if
condition|(
name|expected
operator|==
operator|-
literal|1
condition|)
block|{
name|expected
operator|=
operator|(
name|int
operator|)
name|values
operator|.
name|ordAt
argument_list|(
name|j
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|expected
operator|=
name|mode
operator|.
name|applyOrd
argument_list|(
name|expected
argument_list|,
operator|(
name|int
operator|)
name|values
operator|.
name|ordAt
argument_list|(
name|j
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
name|mode
operator|.
name|toString
argument_list|()
operator|+
literal|" docId="
operator|+
name|root
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|prevRoot
operator|=
name|root
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

