begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.watcher
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|watcher
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
operator|.
name|timeValueSeconds
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|ResourceWatcherServiceTests
specifier|public
class|class
name|ResourceWatcherServiceTests
extends|extends
name|ElasticsearchTestCase
block|{
annotation|@
name|Test
DECL|method|testSettings
specifier|public
name|void
name|testSettings
parameter_list|()
throws|throws
name|Exception
block|{
name|ThreadPool
name|threadPool
init|=
operator|new
name|ThreadPool
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
comment|// checking the defaults
name|Settings
name|settings
init|=
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|ResourceWatcherService
name|service
init|=
operator|new
name|ResourceWatcherService
argument_list|(
name|settings
argument_list|,
name|threadPool
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|service
operator|.
name|highMonitor
operator|.
name|interval
argument_list|,
name|is
argument_list|(
name|ResourceWatcherService
operator|.
name|Frequency
operator|.
name|HIGH
operator|.
name|interval
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|service
operator|.
name|mediumMonitor
operator|.
name|interval
argument_list|,
name|is
argument_list|(
name|ResourceWatcherService
operator|.
name|Frequency
operator|.
name|MEDIUM
operator|.
name|interval
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|service
operator|.
name|lowMonitor
operator|.
name|interval
argument_list|,
name|is
argument_list|(
name|ResourceWatcherService
operator|.
name|Frequency
operator|.
name|LOW
operator|.
name|interval
argument_list|)
argument_list|)
expr_stmt|;
comment|// checking bwc
name|settings
operator|=
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"watcher.interval"
argument_list|,
literal|"40s"
argument_list|)
comment|// only applies to medium
operator|.
name|build
argument_list|()
expr_stmt|;
name|service
operator|=
operator|new
name|ResourceWatcherService
argument_list|(
name|settings
argument_list|,
name|threadPool
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|service
operator|.
name|highMonitor
operator|.
name|interval
operator|.
name|millis
argument_list|()
argument_list|,
name|is
argument_list|(
name|timeValueSeconds
argument_list|(
literal|5
argument_list|)
operator|.
name|millis
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|service
operator|.
name|mediumMonitor
operator|.
name|interval
operator|.
name|millis
argument_list|()
argument_list|,
name|is
argument_list|(
name|timeValueSeconds
argument_list|(
literal|40
argument_list|)
operator|.
name|millis
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|service
operator|.
name|lowMonitor
operator|.
name|interval
operator|.
name|millis
argument_list|()
argument_list|,
name|is
argument_list|(
name|timeValueSeconds
argument_list|(
literal|60
argument_list|)
operator|.
name|millis
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// checking custom
name|settings
operator|=
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"watcher.interval.high"
argument_list|,
literal|"10s"
argument_list|)
operator|.
name|put
argument_list|(
literal|"watcher.interval.medium"
argument_list|,
literal|"20s"
argument_list|)
operator|.
name|put
argument_list|(
literal|"watcher.interval.low"
argument_list|,
literal|"30s"
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|service
operator|=
operator|new
name|ResourceWatcherService
argument_list|(
name|settings
argument_list|,
name|threadPool
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|service
operator|.
name|highMonitor
operator|.
name|interval
operator|.
name|millis
argument_list|()
argument_list|,
name|is
argument_list|(
name|timeValueSeconds
argument_list|(
literal|10
argument_list|)
operator|.
name|millis
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|service
operator|.
name|mediumMonitor
operator|.
name|interval
operator|.
name|millis
argument_list|()
argument_list|,
name|is
argument_list|(
name|timeValueSeconds
argument_list|(
literal|20
argument_list|)
operator|.
name|millis
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|service
operator|.
name|lowMonitor
operator|.
name|interval
operator|.
name|millis
argument_list|()
argument_list|,
name|is
argument_list|(
name|timeValueSeconds
argument_list|(
literal|30
argument_list|)
operator|.
name|millis
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|terminate
argument_list|(
name|threadPool
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testHandle
specifier|public
name|void
name|testHandle
parameter_list|()
throws|throws
name|Exception
block|{
name|ThreadPool
name|threadPool
init|=
operator|new
name|ThreadPool
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|Settings
name|settings
init|=
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|ResourceWatcherService
name|service
init|=
operator|new
name|ResourceWatcherService
argument_list|(
name|settings
argument_list|,
name|threadPool
argument_list|)
decl_stmt|;
name|ResourceWatcher
name|watcher
init|=
operator|new
name|ResourceWatcher
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|init
parameter_list|()
block|{             }
annotation|@
name|Override
specifier|public
name|void
name|checkAndNotify
parameter_list|()
block|{             }
block|}
decl_stmt|;
comment|// checking default freq
name|WatcherHandle
name|handle
init|=
name|service
operator|.
name|add
argument_list|(
name|watcher
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|handle
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|handle
operator|.
name|frequency
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|ResourceWatcherService
operator|.
name|Frequency
operator|.
name|MEDIUM
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|service
operator|.
name|lowMonitor
operator|.
name|watchers
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|service
operator|.
name|highMonitor
operator|.
name|watchers
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|service
operator|.
name|mediumMonitor
operator|.
name|watchers
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|handle
operator|.
name|stop
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|service
operator|.
name|mediumMonitor
operator|.
name|watchers
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|handle
operator|.
name|resume
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|service
operator|.
name|mediumMonitor
operator|.
name|watchers
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|handle
operator|.
name|stop
argument_list|()
expr_stmt|;
comment|// checking custom freq
name|handle
operator|=
name|service
operator|.
name|add
argument_list|(
name|watcher
argument_list|,
name|ResourceWatcherService
operator|.
name|Frequency
operator|.
name|HIGH
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|handle
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|handle
operator|.
name|frequency
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|ResourceWatcherService
operator|.
name|Frequency
operator|.
name|HIGH
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|service
operator|.
name|lowMonitor
operator|.
name|watchers
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|service
operator|.
name|mediumMonitor
operator|.
name|watchers
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|service
operator|.
name|highMonitor
operator|.
name|watchers
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|handle
operator|.
name|stop
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|service
operator|.
name|highMonitor
operator|.
name|watchers
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|handle
operator|.
name|resume
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|service
operator|.
name|highMonitor
operator|.
name|watchers
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|terminate
argument_list|(
name|threadPool
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

