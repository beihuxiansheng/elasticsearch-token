begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.junit.listerners
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|junit
operator|.
name|listerners
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|ESLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|ESLoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|junit
operator|.
name|annotations
operator|.
name|TestLogging
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|Description
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|notification
operator|.
name|RunListener
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * A {@link RunListener} that allows to change the log level for a specific test method.  * When a test method is annotated with the {@link org.elasticsearch.junit.annotations.TestLogging} annotation, the level for the specified loggers  * will be internally saved before the test method execution and overridden with the specified ones.  * At the end of the test method execution the original loggers levels will be restored.  *  * Note: This class is not thread-safe. Given the static nature of the logging api, it assumes that tests  * are never run concurrently in the same jvm. For the very same reason no synchronization has been implemented  * regarding the save/restore process of the original loggers levels.  */
end_comment

begin_class
DECL|class|LoggingListener
specifier|public
class|class
name|LoggingListener
extends|extends
name|RunListener
block|{
DECL|field|previousLoggingMap
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|previousLoggingMap
decl_stmt|;
annotation|@
name|Override
DECL|method|testStarted
specifier|public
name|void
name|testStarted
parameter_list|(
name|Description
name|description
parameter_list|)
throws|throws
name|Exception
block|{
name|TestLogging
name|testLogging
init|=
name|description
operator|.
name|getAnnotation
argument_list|(
name|TestLogging
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|testLogging
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|previousLoggingMap
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|String
index|[]
name|loggersAndLevels
init|=
name|testLogging
operator|.
name|value
argument_list|()
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|loggerAndLevel
range|:
name|loggersAndLevels
control|)
block|{
name|String
index|[]
name|loggerAndLevelArray
init|=
name|loggerAndLevel
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
if|if
condition|(
name|loggerAndLevelArray
operator|.
name|length
operator|>=
literal|2
condition|)
block|{
name|String
name|loggerName
init|=
name|loggerAndLevelArray
index|[
literal|0
index|]
decl_stmt|;
name|String
name|level
init|=
name|loggerAndLevelArray
index|[
literal|1
index|]
decl_stmt|;
name|ESLogger
name|esLogger
init|=
name|resolveLogger
argument_list|(
name|loggerName
argument_list|)
decl_stmt|;
name|this
operator|.
name|previousLoggingMap
operator|.
name|put
argument_list|(
name|loggerName
argument_list|,
name|esLogger
operator|.
name|getLevel
argument_list|()
argument_list|)
expr_stmt|;
name|esLogger
operator|.
name|setLevel
argument_list|(
name|level
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|testFinished
specifier|public
name|void
name|testFinished
parameter_list|(
name|Description
name|description
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|this
operator|.
name|previousLoggingMap
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|previousLogger
range|:
name|previousLoggingMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ESLogger
name|esLogger
init|=
name|resolveLogger
argument_list|(
name|previousLogger
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|esLogger
operator|.
name|setLevel
argument_list|(
name|previousLogger
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|previousLoggingMap
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|resolveLogger
specifier|private
specifier|static
name|ESLogger
name|resolveLogger
parameter_list|(
name|String
name|loggerName
parameter_list|)
block|{
if|if
condition|(
name|loggerName
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"_root"
argument_list|)
condition|)
block|{
return|return
name|ESLoggerFactory
operator|.
name|getRootLogger
argument_list|()
return|;
block|}
return|return
name|ESLoggerFactory
operator|.
name|getLogger
argument_list|(
name|loggerName
argument_list|)
return|;
block|}
block|}
end_class

end_unit

