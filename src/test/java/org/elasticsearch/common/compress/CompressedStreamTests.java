begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.compress
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|compress
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LineFileDocs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|ByteBufferStreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|OutputStreamStreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_comment
comment|/**  * Test streaming compression (e.g. used for recovery)  */
end_comment

begin_class
DECL|class|CompressedStreamTests
specifier|public
class|class
name|CompressedStreamTests
extends|extends
name|ElasticsearchTestCase
block|{
DECL|method|testRandom
specifier|public
name|void
name|testRandom
parameter_list|()
throws|throws
name|IOException
block|{
name|Random
name|r
init|=
name|getRandom
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|byte
name|bytes
index|[]
init|=
operator|new
name|byte
index|[
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|r
argument_list|,
literal|1
argument_list|,
literal|100000
argument_list|)
index|]
decl_stmt|;
name|r
operator|.
name|nextBytes
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|doTest
argument_list|(
literal|"lzf"
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testLineDocs
specifier|public
name|void
name|testLineDocs
parameter_list|()
throws|throws
name|IOException
block|{
name|Random
name|r
init|=
name|getRandom
argument_list|()
decl_stmt|;
name|LineFileDocs
name|lineFileDocs
init|=
operator|new
name|LineFileDocs
argument_list|(
name|r
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|int
name|numDocs
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|r
argument_list|,
literal|1
argument_list|,
literal|200
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|bos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numDocs
condition|;
name|j
operator|++
control|)
block|{
name|String
name|s
init|=
name|lineFileDocs
operator|.
name|nextDoc
argument_list|()
operator|.
name|get
argument_list|(
literal|"body"
argument_list|)
decl_stmt|;
name|bos
operator|.
name|write
argument_list|(
name|s
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|doTest
argument_list|(
literal|"lzf"
argument_list|,
name|bos
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|lineFileDocs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testRepetitionsL
specifier|public
name|void
name|testRepetitionsL
parameter_list|()
throws|throws
name|IOException
block|{
name|Random
name|r
init|=
name|getRandom
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|200
condition|;
name|i
operator|++
control|)
block|{
name|int
name|numLongs
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|r
argument_list|,
literal|1
argument_list|,
literal|10000
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|bos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|long
name|theValue
init|=
name|r
operator|.
name|nextLong
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numLongs
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|r
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
operator|==
literal|0
condition|)
block|{
name|theValue
operator|=
name|r
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
name|bos
operator|.
name|write
argument_list|(
call|(
name|byte
call|)
argument_list|(
name|theValue
operator|>>>
literal|56
argument_list|)
argument_list|)
expr_stmt|;
name|bos
operator|.
name|write
argument_list|(
call|(
name|byte
call|)
argument_list|(
name|theValue
operator|>>>
literal|48
argument_list|)
argument_list|)
expr_stmt|;
name|bos
operator|.
name|write
argument_list|(
call|(
name|byte
call|)
argument_list|(
name|theValue
operator|>>>
literal|40
argument_list|)
argument_list|)
expr_stmt|;
name|bos
operator|.
name|write
argument_list|(
call|(
name|byte
call|)
argument_list|(
name|theValue
operator|>>>
literal|32
argument_list|)
argument_list|)
expr_stmt|;
name|bos
operator|.
name|write
argument_list|(
call|(
name|byte
call|)
argument_list|(
name|theValue
operator|>>>
literal|24
argument_list|)
argument_list|)
expr_stmt|;
name|bos
operator|.
name|write
argument_list|(
call|(
name|byte
call|)
argument_list|(
name|theValue
operator|>>>
literal|16
argument_list|)
argument_list|)
expr_stmt|;
name|bos
operator|.
name|write
argument_list|(
call|(
name|byte
call|)
argument_list|(
name|theValue
operator|>>>
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|bos
operator|.
name|write
argument_list|(
operator|(
name|byte
operator|)
name|theValue
argument_list|)
expr_stmt|;
block|}
name|doTest
argument_list|(
literal|"lzf"
argument_list|,
name|bos
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testRepetitionsI
specifier|public
name|void
name|testRepetitionsI
parameter_list|()
throws|throws
name|IOException
block|{
name|Random
name|r
init|=
name|getRandom
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|200
condition|;
name|i
operator|++
control|)
block|{
name|int
name|numInts
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|r
argument_list|,
literal|1
argument_list|,
literal|20000
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|bos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|int
name|theValue
init|=
name|r
operator|.
name|nextInt
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numInts
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|r
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
operator|==
literal|0
condition|)
block|{
name|theValue
operator|=
name|r
operator|.
name|nextInt
argument_list|()
expr_stmt|;
block|}
name|bos
operator|.
name|write
argument_list|(
call|(
name|byte
call|)
argument_list|(
name|theValue
operator|>>>
literal|24
argument_list|)
argument_list|)
expr_stmt|;
name|bos
operator|.
name|write
argument_list|(
call|(
name|byte
call|)
argument_list|(
name|theValue
operator|>>>
literal|16
argument_list|)
argument_list|)
expr_stmt|;
name|bos
operator|.
name|write
argument_list|(
call|(
name|byte
call|)
argument_list|(
name|theValue
operator|>>>
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|bos
operator|.
name|write
argument_list|(
operator|(
name|byte
operator|)
name|theValue
argument_list|)
expr_stmt|;
block|}
name|doTest
argument_list|(
literal|"lzf"
argument_list|,
name|bos
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testRepetitionsS
specifier|public
name|void
name|testRepetitionsS
parameter_list|()
throws|throws
name|IOException
block|{
name|Random
name|r
init|=
name|getRandom
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|200
condition|;
name|i
operator|++
control|)
block|{
name|int
name|numShorts
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|r
argument_list|,
literal|1
argument_list|,
literal|40000
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|bos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|short
name|theValue
init|=
operator|(
name|short
operator|)
name|r
operator|.
name|nextInt
argument_list|(
literal|65535
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numShorts
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|r
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
operator|==
literal|0
condition|)
block|{
name|theValue
operator|=
operator|(
name|short
operator|)
name|r
operator|.
name|nextInt
argument_list|(
literal|65535
argument_list|)
expr_stmt|;
block|}
name|bos
operator|.
name|write
argument_list|(
call|(
name|byte
call|)
argument_list|(
name|theValue
operator|>>>
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|bos
operator|.
name|write
argument_list|(
operator|(
name|byte
operator|)
name|theValue
argument_list|)
expr_stmt|;
block|}
name|doTest
argument_list|(
literal|"lzf"
argument_list|,
name|bos
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|doTest
specifier|private
name|void
name|doTest
parameter_list|(
name|String
name|compressor
parameter_list|,
name|byte
name|bytes
index|[]
parameter_list|)
throws|throws
name|IOException
block|{
name|CompressorFactory
operator|.
name|configure
argument_list|(
name|ImmutableSettings
operator|.
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"compress.default.type"
argument_list|,
name|compressor
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|ByteBuffer
name|bb
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
name|StreamInput
name|rawIn
init|=
operator|new
name|ByteBufferStreamInput
argument_list|(
name|bb
argument_list|)
decl_stmt|;
name|Compressor
name|c
init|=
name|CompressorFactory
operator|.
name|defaultCompressor
argument_list|()
decl_stmt|;
name|ByteArrayOutputStream
name|bos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|OutputStreamStreamOutput
name|rawOs
init|=
operator|new
name|OutputStreamStreamOutput
argument_list|(
name|bos
argument_list|)
decl_stmt|;
name|StreamOutput
name|os
init|=
name|c
operator|.
name|streamOutput
argument_list|(
name|rawOs
argument_list|)
decl_stmt|;
name|Random
name|r
init|=
name|getRandom
argument_list|()
decl_stmt|;
name|int
name|bufferSize
init|=
name|r
operator|.
name|nextBoolean
argument_list|()
condition|?
literal|65535
else|:
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|getRandom
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|70000
argument_list|)
decl_stmt|;
name|byte
name|buffer
index|[]
init|=
operator|new
name|byte
index|[
name|bufferSize
index|]
decl_stmt|;
name|int
name|len
decl_stmt|;
while|while
condition|(
operator|(
name|len
operator|=
name|rawIn
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|os
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
name|rawIn
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// now we have compressed byte array
name|byte
name|compressed
index|[]
init|=
name|bos
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|ByteBuffer
name|bb2
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|compressed
argument_list|)
decl_stmt|;
name|StreamInput
name|compressedIn
init|=
operator|new
name|ByteBufferStreamInput
argument_list|(
name|bb2
argument_list|)
decl_stmt|;
name|StreamInput
name|in
init|=
name|c
operator|.
name|streamInput
argument_list|(
name|compressedIn
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|uncompressedOut
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|len
operator|=
name|in
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|uncompressedOut
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
name|uncompressedOut
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|bytes
argument_list|,
name|uncompressedOut
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

