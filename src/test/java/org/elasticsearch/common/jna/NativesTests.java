begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.jna
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|jna
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|jna
operator|.
name|Kernel32Library
operator|.
name|ConsoleCtrlHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_class
DECL|class|NativesTests
specifier|public
class|class
name|NativesTests
extends|extends
name|ElasticsearchTestCase
block|{
comment|/**      * Those properties are set by the JNA Api and if not ignored,      * lead to tests failure (see AbstractRandomizedTest#IGNORED_INVARIANT_PROPERTIES)      */
DECL|field|JNA_INVARIANT_PROPERTIES
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|JNA_INVARIANT_PROPERTIES
init|=
block|{
literal|"jna.platform.library.path"
block|,
literal|"jnidispatch.path"
block|}
decl_stmt|;
DECL|field|properties
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|Before
DECL|method|saveProperties
specifier|public
name|void
name|saveProperties
parameter_list|()
block|{
for|for
control|(
name|String
name|p
range|:
name|JNA_INVARIANT_PROPERTIES
control|)
block|{
name|properties
operator|.
name|put
argument_list|(
name|p
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|After
DECL|method|restoreProperties
specifier|public
name|void
name|restoreProperties
parameter_list|()
block|{
for|for
control|(
name|String
name|p
range|:
name|JNA_INVARIANT_PROPERTIES
control|)
block|{
if|if
condition|(
name|properties
operator|.
name|get
argument_list|(
name|p
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|setProperty
argument_list|(
name|p
argument_list|,
name|properties
operator|.
name|get
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|clearProperty
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testTryMlockall
specifier|public
name|void
name|testTryMlockall
parameter_list|()
block|{
name|Natives
operator|.
name|tryMlockall
argument_list|()
expr_stmt|;
if|if
condition|(
name|Constants
operator|.
name|WINDOWS
condition|)
block|{
name|assertFalse
argument_list|(
literal|"Memory locking is not available on Windows platforms"
argument_list|,
name|Natives
operator|.
name|LOCAL_MLOCKALL
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testAddConsoleCtrlHandler
specifier|public
name|void
name|testAddConsoleCtrlHandler
parameter_list|()
block|{
name|ConsoleCtrlHandler
name|handler
init|=
operator|new
name|ConsoleCtrlHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|handle
parameter_list|(
name|int
name|code
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
decl_stmt|;
name|Natives
operator|.
name|addConsoleCtrlHandler
argument_list|(
name|handler
argument_list|)
expr_stmt|;
if|if
condition|(
name|Constants
operator|.
name|WINDOWS
condition|)
block|{
name|assertNotNull
argument_list|(
name|Kernel32Library
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Kernel32Library
operator|.
name|getInstance
argument_list|()
operator|.
name|getCallbacks
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertNotNull
argument_list|(
name|Kernel32Library
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Kernel32Library
operator|.
name|getInstance
argument_list|()
operator|.
name|getCallbacks
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|Kernel32Library
operator|.
name|getInstance
argument_list|()
operator|.
name|addConsoleCtrlHandler
argument_list|(
name|handler
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should have thrown an unsupported operation exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsatisfiedLinkError
name|e
parameter_list|)
block|{
comment|// UnsatisfiedLinkError is expected
block|}
block|}
block|}
block|}
end_class

end_unit

