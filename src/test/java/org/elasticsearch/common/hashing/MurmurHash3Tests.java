begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.hashing
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|hashing
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|hash
operator|.
name|HashCode
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|hash
operator|.
name|Hashing
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|hash
operator|.
name|MurmurHash3
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteOrder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|LongBuffer
import|;
end_import

begin_class
DECL|class|MurmurHash3Tests
specifier|public
class|class
name|MurmurHash3Tests
extends|extends
name|ElasticsearchTestCase
block|{
DECL|method|testHash128
specifier|public
name|void
name|testHash128
parameter_list|()
block|{
specifier|final
name|int
name|iters
init|=
name|atLeast
argument_list|(
literal|100
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iters
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|int
name|seed
init|=
name|randomInt
argument_list|()
decl_stmt|;
specifier|final
name|int
name|offset
init|=
name|randomInt
argument_list|(
literal|20
argument_list|)
decl_stmt|;
specifier|final
name|int
name|len
init|=
name|randomInt
argument_list|(
name|randomBoolean
argument_list|()
condition|?
literal|20
else|:
literal|200
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[
name|len
operator|+
name|offset
operator|+
name|randomInt
argument_list|(
literal|3
argument_list|)
index|]
decl_stmt|;
name|getRandom
argument_list|()
operator|.
name|nextBytes
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|HashCode
name|h1
init|=
name|Hashing
operator|.
name|murmur3_128
argument_list|(
name|seed
argument_list|)
operator|.
name|hashBytes
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|len
argument_list|)
decl_stmt|;
empty_stmt|;
name|MurmurHash3
operator|.
name|Hash128
name|h2
init|=
name|MurmurHash3
operator|.
name|hash128
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|len
argument_list|,
name|seed
argument_list|,
operator|new
name|MurmurHash3
operator|.
name|Hash128
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|h1
argument_list|,
name|h2
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertEquals
specifier|private
name|void
name|assertEquals
parameter_list|(
name|HashCode
name|h1
parameter_list|,
name|MurmurHash3
operator|.
name|Hash128
name|h2
parameter_list|)
block|{
specifier|final
name|LongBuffer
name|longs
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|h1
operator|.
name|asBytes
argument_list|()
argument_list|)
operator|.
name|order
argument_list|(
name|ByteOrder
operator|.
name|LITTLE_ENDIAN
argument_list|)
operator|.
name|asLongBuffer
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|longs
operator|.
name|limit
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|h1
operator|.
name|asLong
argument_list|()
argument_list|,
name|h2
operator|.
name|h1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|longs
operator|.
name|get
argument_list|()
argument_list|,
name|h2
operator|.
name|h1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|longs
operator|.
name|get
argument_list|()
argument_list|,
name|h2
operator|.
name|h2
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

