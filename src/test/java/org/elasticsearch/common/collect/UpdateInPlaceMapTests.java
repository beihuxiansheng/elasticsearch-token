begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.collect
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchIllegalStateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentCollections
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
DECL|class|UpdateInPlaceMapTests
specifier|public
class|class
name|UpdateInPlaceMapTests
extends|extends
name|ElasticsearchTestCase
block|{
annotation|@
name|Test
DECL|method|testConcurrentMutator
specifier|public
name|void
name|testConcurrentMutator
parameter_list|()
block|{
name|UpdateInPlaceMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
name|UpdateInPlaceMap
operator|.
name|of
argument_list|(
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|500
argument_list|)
argument_list|)
decl_stmt|;
name|UpdateInPlaceMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
operator|.
name|Mutator
name|mutator
init|=
name|map
operator|.
name|mutator
argument_list|()
decl_stmt|;
try|try
block|{
name|map
operator|.
name|mutator
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"should fail on concurrent mutator"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ElasticsearchIllegalStateException
name|e
parameter_list|)
block|{
comment|// all is well!
block|}
name|mutator
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// now this should work well!
name|map
operator|.
name|mutator
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testImmutableMapSwitchToCHM
specifier|public
name|void
name|testImmutableMapSwitchToCHM
parameter_list|()
block|{
name|int
name|switchSize
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|500
argument_list|)
decl_stmt|;
name|UpdateInPlaceMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
name|UpdateInPlaceMap
operator|.
name|of
argument_list|(
name|switchSize
argument_list|)
decl_stmt|;
name|int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|switchSize
condition|;
name|i
operator|++
control|)
block|{
name|UpdateInPlaceMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
operator|.
name|Mutator
name|mutator
init|=
name|map
operator|.
name|mutator
argument_list|()
decl_stmt|;
name|String
name|key
init|=
literal|"key"
operator|+
name|i
decl_stmt|;
name|String
name|value
init|=
literal|"value"
operator|+
name|i
decl_stmt|;
name|mutator
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|mutator
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|map
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|mutator
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|map
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
name|countAfter
init|=
name|switchSize
operator|+
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|100
argument_list|)
decl_stmt|;
for|for
control|(
init|;
name|i
operator|<
name|countAfter
condition|;
name|i
operator|++
control|)
block|{
name|UpdateInPlaceMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
operator|.
name|Mutator
name|mutator
init|=
name|map
operator|.
name|mutator
argument_list|()
decl_stmt|;
name|String
name|key
init|=
literal|"key"
operator|+
name|i
decl_stmt|;
name|String
name|value
init|=
literal|"value"
operator|+
name|i
decl_stmt|;
name|mutator
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|mutator
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|map
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|mutator
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|map
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testInitializeWithCHM
specifier|public
name|void
name|testInitializeWithCHM
parameter_list|()
block|{
name|UpdateInPlaceMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
name|UpdateInPlaceMap
operator|.
name|of
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|UpdateInPlaceMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
operator|.
name|Mutator
name|mutator
init|=
name|map
operator|.
name|mutator
argument_list|()
decl_stmt|;
name|mutator
operator|.
name|put
argument_list|(
literal|"key1"
argument_list|,
literal|"value1"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|mutator
operator|.
name|get
argument_list|(
literal|"key1"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"value1"
argument_list|)
argument_list|)
expr_stmt|;
name|mutator
operator|.
name|put
argument_list|(
literal|"key2"
argument_list|,
literal|"value2"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|mutator
operator|.
name|get
argument_list|(
literal|"key2"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"value2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testConcurrentAccess
specifier|public
name|void
name|testConcurrentAccess
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|numberOfThreads
init|=
name|scaledRandomIntBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
decl_stmt|;
specifier|final
name|int
name|switchSize
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|500
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|numberOfMutations
init|=
operator|new
name|CountDownLatch
argument_list|(
name|scaledRandomIntBetween
argument_list|(
literal|300
argument_list|,
literal|1000
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|UpdateInPlaceMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
name|UpdateInPlaceMap
operator|.
name|of
argument_list|(
name|switchSize
argument_list|)
decl_stmt|;
specifier|final
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|verifier
init|=
name|ConcurrentCollections
operator|.
name|newConcurrentMap
argument_list|()
decl_stmt|;
name|Thread
index|[]
name|threads
init|=
operator|new
name|Thread
index|[
name|numberOfThreads
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfThreads
condition|;
name|i
operator|++
control|)
block|{
name|threads
index|[
name|i
index|]
operator|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
name|numberOfMutations
operator|.
name|getCount
argument_list|()
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|UpdateInPlaceMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
operator|.
name|Mutator
name|mutator
init|=
name|map
operator|.
name|mutator
argument_list|()
decl_stmt|;
name|String
name|str
init|=
name|Strings
operator|.
name|randomBase64UUID
argument_list|()
decl_stmt|;
name|mutator
operator|.
name|put
argument_list|(
name|str
argument_list|,
name|str
argument_list|)
expr_stmt|;
name|verifier
operator|.
name|put
argument_list|(
name|str
argument_list|,
name|str
argument_list|)
expr_stmt|;
name|mutator
operator|.
name|close
argument_list|()
expr_stmt|;
name|numberOfMutations
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ElasticsearchIllegalStateException
name|e
parameter_list|)
block|{
comment|// ok, double mutating, continue
block|}
block|}
block|}
block|}
argument_list|,
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"concurrent_access_i"
argument_list|)
expr_stmt|;
name|threads
index|[
name|i
index|]
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Thread
name|thread
range|:
name|threads
control|)
block|{
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
name|numberOfMutations
operator|.
name|await
argument_list|()
expr_stmt|;
for|for
control|(
name|Thread
name|thread
range|:
name|threads
control|)
block|{
name|thread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
comment|// verify the 2 maps are the same
name|assertThat
argument_list|(
name|Iterables
operator|.
name|toArray
argument_list|(
name|map
operator|.
name|values
argument_list|()
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|arrayContainingInAnyOrder
argument_list|(
name|Iterables
operator|.
name|toArray
argument_list|(
name|verifier
operator|.
name|values
argument_list|()
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

