begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.collect
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
package|;
end_package

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|ant
operator|.
name|tasks
operator|.
name|junit4
operator|.
name|dependencies
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
DECL|class|CopyOnWriteHashMapTests
specifier|public
class|class
name|CopyOnWriteHashMapTests
extends|extends
name|ElasticsearchTestCase
block|{
DECL|class|O
specifier|private
specifier|static
class|class
name|O
block|{
DECL|field|value
DECL|field|hashCode
specifier|private
specifier|final
name|int
name|value
decl_stmt|,
name|hashCode
decl_stmt|;
DECL|method|O
name|O
parameter_list|(
name|int
name|value
parameter_list|,
name|int
name|hashCode
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
name|this
operator|.
name|hashCode
operator|=
name|hashCode
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|hashCode
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
literal|null
operator|||
operator|!
operator|(
name|obj
operator|instanceof
name|O
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|value
operator|==
operator|(
operator|(
name|O
operator|)
name|obj
operator|)
operator|.
name|value
return|;
block|}
block|}
DECL|method|testDuel
specifier|public
name|void
name|testDuel
parameter_list|()
block|{
specifier|final
name|int
name|iters
init|=
name|scaledRandomIntBetween
argument_list|(
literal|2
argument_list|,
literal|5
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
name|iters
condition|;
operator|++
name|iter
control|)
block|{
specifier|final
name|int
name|valueBits
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|30
argument_list|)
decl_stmt|;
specifier|final
name|int
name|hashBits
init|=
name|randomInt
argument_list|(
name|valueBits
argument_list|)
decl_stmt|;
comment|// we compute the total number of ops based on the bits of the hash
comment|// since the test is much heavier when few bits are used for the hash
specifier|final
name|int
name|numOps
init|=
name|randomInt
argument_list|(
literal|10
operator|+
name|hashBits
operator|*
literal|100
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|O
argument_list|,
name|Integer
argument_list|>
name|ref
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|CopyOnWriteHashMap
argument_list|<
name|O
argument_list|,
name|Integer
argument_list|>
name|map
init|=
operator|new
name|CopyOnWriteHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|ref
argument_list|,
name|map
argument_list|)
expr_stmt|;
specifier|final
name|int
name|hashBase
init|=
name|randomInt
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numOps
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|int
name|v
init|=
name|randomInt
argument_list|(
literal|1
operator|<<
name|valueBits
argument_list|)
decl_stmt|;
specifier|final
name|int
name|h
init|=
operator|(
name|v
operator|&
operator|(
operator|(
literal|1
operator|<<
name|hashBits
operator|)
operator|-
literal|1
operator|)
operator|)
operator|^
name|hashBase
decl_stmt|;
name|O
name|key
init|=
operator|new
name|O
argument_list|(
name|v
argument_list|,
name|h
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|O
argument_list|,
name|Integer
argument_list|>
name|newRef
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|ref
argument_list|)
decl_stmt|;
specifier|final
name|CopyOnWriteHashMap
argument_list|<
name|O
argument_list|,
name|Integer
argument_list|>
name|newMap
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
comment|// ADD
name|Integer
name|value
init|=
name|v
decl_stmt|;
name|newRef
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|newMap
operator|=
name|map
operator|.
name|copyAndPut
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// REMOVE
specifier|final
name|Integer
name|removed
init|=
name|newRef
operator|.
name|remove
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|newMap
operator|=
name|map
operator|.
name|copyAndRemove
argument_list|(
name|key
argument_list|)
expr_stmt|;
if|if
condition|(
name|removed
operator|==
literal|null
condition|)
block|{
name|assertSame
argument_list|(
name|map
argument_list|,
name|newMap
argument_list|)
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|ref
argument_list|,
name|map
argument_list|)
expr_stmt|;
comment|// make sure that the old copy has not been modified
name|assertEquals
argument_list|(
name|newRef
argument_list|,
name|newMap
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|newMap
argument_list|,
name|newRef
argument_list|)
expr_stmt|;
name|ref
operator|=
name|newRef
expr_stmt|;
name|map
operator|=
name|newMap
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|ref
argument_list|,
name|CopyOnWriteHashMap
operator|.
name|copyOf
argument_list|(
name|ref
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|()
argument_list|,
name|CopyOnWriteHashMap
operator|.
name|copyOf
argument_list|(
name|ref
argument_list|)
operator|.
name|copyAndRemoveAll
argument_list|(
name|ref
operator|.
name|keySet
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testCollision
specifier|public
name|void
name|testCollision
parameter_list|()
block|{
name|CopyOnWriteHashMap
argument_list|<
name|O
argument_list|,
name|Integer
argument_list|>
name|map
init|=
operator|new
name|CopyOnWriteHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|map
operator|=
name|map
operator|.
name|copyAndPut
argument_list|(
operator|new
name|O
argument_list|(
literal|3
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|Integer
operator|)
literal|2
argument_list|,
name|map
operator|.
name|get
argument_list|(
operator|new
name|O
argument_list|(
literal|3
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|map
operator|.
name|get
argument_list|(
operator|new
name|O
argument_list|(
literal|5
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|=
name|map
operator|.
name|copyAndPut
argument_list|(
operator|new
name|O
argument_list|(
literal|5
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|Integer
operator|)
literal|2
argument_list|,
name|map
operator|.
name|get
argument_list|(
operator|new
name|O
argument_list|(
literal|3
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|Integer
operator|)
literal|5
argument_list|,
name|map
operator|.
name|get
argument_list|(
operator|new
name|O
argument_list|(
literal|5
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|=
name|map
operator|.
name|copyAndRemove
argument_list|(
operator|new
name|O
argument_list|(
literal|3
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|map
operator|.
name|get
argument_list|(
operator|new
name|O
argument_list|(
literal|3
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|Integer
operator|)
literal|5
argument_list|,
name|map
operator|.
name|get
argument_list|(
operator|new
name|O
argument_list|(
literal|5
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|=
name|map
operator|.
name|copyAndRemove
argument_list|(
operator|new
name|O
argument_list|(
literal|5
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|map
operator|.
name|get
argument_list|(
operator|new
name|O
argument_list|(
literal|3
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|map
operator|.
name|get
argument_list|(
operator|new
name|O
argument_list|(
literal|5
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testUnsupportedAPIs
specifier|public
name|void
name|testUnsupportedAPIs
parameter_list|()
block|{
try|try
block|{
operator|new
name|CopyOnWriteHashMap
argument_list|<>
argument_list|()
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
comment|// expected
block|}
try|try
block|{
operator|new
name|CopyOnWriteHashMap
argument_list|<>
argument_list|()
operator|.
name|copyAndPut
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
operator|.
name|remove
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
DECL|method|testUnsupportedValues
specifier|public
name|void
name|testUnsupportedValues
parameter_list|()
block|{
try|try
block|{
operator|new
name|CopyOnWriteHashMap
argument_list|<>
argument_list|()
operator|.
name|copyAndPut
argument_list|(
literal|"a"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ElasticsearchIllegalArgumentException
name|e
parameter_list|)
block|{
comment|// expected
block|}
try|try
block|{
operator|new
name|CopyOnWriteHashMap
argument_list|<>
argument_list|()
operator|.
name|copyAndPut
argument_list|(
literal|null
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ElasticsearchIllegalArgumentException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
block|}
end_class

end_unit

