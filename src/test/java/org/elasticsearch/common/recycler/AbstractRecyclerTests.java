begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.recycler
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|recycler
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticSearchIllegalStateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_class
DECL|class|AbstractRecyclerTests
specifier|public
specifier|abstract
class|class
name|AbstractRecyclerTests
extends|extends
name|ElasticsearchTestCase
block|{
DECL|field|RECYCLER_C
specifier|protected
specifier|static
specifier|final
name|Recycler
operator|.
name|C
argument_list|<
name|byte
index|[]
argument_list|>
name|RECYCLER_C
init|=
operator|new
name|Recycler
operator|.
name|C
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|newInstance
parameter_list|(
name|int
name|sizing
parameter_list|)
block|{
return|return
operator|new
name|byte
index|[
literal|10
index|]
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|(
name|byte
index|[]
name|value
parameter_list|)
block|{
name|Arrays
operator|.
name|fill
argument_list|(
name|value
argument_list|,
operator|(
name|byte
operator|)
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
DECL|method|newRecycler
specifier|protected
specifier|abstract
name|Recycler
argument_list|<
name|byte
index|[]
argument_list|>
name|newRecycler
parameter_list|()
function_decl|;
DECL|method|testReuse
specifier|public
name|void
name|testReuse
parameter_list|()
block|{
name|Recycler
argument_list|<
name|byte
index|[]
argument_list|>
name|r
init|=
name|newRecycler
argument_list|()
decl_stmt|;
name|Recycler
operator|.
name|V
argument_list|<
name|byte
index|[]
argument_list|>
name|o
init|=
name|r
operator|.
name|obtain
argument_list|()
decl_stmt|;
specifier|final
name|byte
index|[]
name|b1
init|=
name|o
operator|.
name|v
argument_list|()
decl_stmt|;
name|o
operator|.
name|release
argument_list|()
expr_stmt|;
name|o
operator|=
name|r
operator|.
name|obtain
argument_list|()
expr_stmt|;
specifier|final
name|byte
index|[]
name|b2
init|=
name|o
operator|.
name|v
argument_list|()
decl_stmt|;
if|if
condition|(
name|o
operator|.
name|isRecycled
argument_list|()
condition|)
block|{
name|assertSame
argument_list|(
name|b1
argument_list|,
name|b2
argument_list|)
expr_stmt|;
block|}
name|o
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
DECL|method|testClear
specifier|public
name|void
name|testClear
parameter_list|()
block|{
name|Recycler
argument_list|<
name|byte
index|[]
argument_list|>
name|r
init|=
name|newRecycler
argument_list|()
decl_stmt|;
name|Recycler
operator|.
name|V
argument_list|<
name|byte
index|[]
argument_list|>
name|o
init|=
name|r
operator|.
name|obtain
argument_list|()
decl_stmt|;
name|getRandom
argument_list|()
operator|.
name|nextBytes
argument_list|(
name|o
operator|.
name|v
argument_list|()
argument_list|)
expr_stmt|;
name|o
operator|.
name|release
argument_list|()
expr_stmt|;
name|o
operator|=
name|r
operator|.
name|obtain
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|o
operator|.
name|v
argument_list|()
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|o
operator|.
name|v
argument_list|()
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|o
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
DECL|method|testDoubleRelease
specifier|public
name|void
name|testDoubleRelease
parameter_list|()
block|{
specifier|final
name|Recycler
argument_list|<
name|byte
index|[]
argument_list|>
name|r
init|=
name|newRecycler
argument_list|()
decl_stmt|;
specifier|final
name|Recycler
operator|.
name|V
argument_list|<
name|byte
index|[]
argument_list|>
name|v1
init|=
name|r
operator|.
name|obtain
argument_list|()
decl_stmt|;
name|v1
operator|.
name|release
argument_list|()
expr_stmt|;
try|try
block|{
name|v1
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ElasticSearchIllegalStateException
name|e
parameter_list|)
block|{
comment|// impl has protection against double release: ok
return|return;
block|}
comment|// otherwise ensure that the impl may not be returned twice
specifier|final
name|Recycler
operator|.
name|V
argument_list|<
name|byte
index|[]
argument_list|>
name|v2
init|=
name|r
operator|.
name|obtain
argument_list|()
decl_stmt|;
specifier|final
name|Recycler
operator|.
name|V
argument_list|<
name|byte
index|[]
argument_list|>
name|v3
init|=
name|r
operator|.
name|obtain
argument_list|()
decl_stmt|;
name|assertNotSame
argument_list|(
name|v2
operator|.
name|v
argument_list|()
argument_list|,
name|v3
operator|.
name|v
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

