begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.elasticsearch.common
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
package|;
end_package

begin_comment
comment|/*  * Licensed to ElasticSearch under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|BooleansTests
specifier|public
class|class
name|BooleansTests
extends|extends
name|ElasticsearchTestCase
block|{
annotation|@
name|Test
DECL|method|testIsBoolean
specifier|public
name|void
name|testIsBoolean
parameter_list|()
block|{
name|String
index|[]
name|booleans
init|=
operator|new
name|String
index|[]
block|{
literal|"true"
block|,
literal|"false"
block|,
literal|"on"
block|,
literal|"off"
block|,
literal|"yes"
block|,
literal|"no"
block|,
literal|"0"
block|,
literal|"1"
block|}
decl_stmt|;
name|String
index|[]
name|notBooleans
init|=
operator|new
name|String
index|[]
block|{
literal|"11"
block|,
literal|"00"
block|,
literal|"sdfsdfsf"
block|,
literal|"F"
block|,
literal|"T"
block|}
decl_stmt|;
for|for
control|(
name|String
name|b
range|:
name|booleans
control|)
block|{
name|String
name|t
init|=
literal|"prefix"
operator|+
name|b
operator|+
literal|"suffix"
decl_stmt|;
name|assertThat
argument_list|(
literal|"failed to recognize ["
operator|+
name|b
operator|+
literal|"] as boolean"
argument_list|,
name|Booleans
operator|.
name|isBoolean
argument_list|(
name|t
operator|.
name|toCharArray
argument_list|()
argument_list|,
literal|"prefix"
operator|.
name|length
argument_list|()
argument_list|,
name|b
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
name|Matchers
operator|.
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|nb
range|:
name|notBooleans
control|)
block|{
name|String
name|t
init|=
literal|"prefix"
operator|+
name|nb
operator|+
literal|"suffix"
decl_stmt|;
name|assertThat
argument_list|(
literal|"recognized ["
operator|+
name|nb
operator|+
literal|"] as boolean"
argument_list|,
name|Booleans
operator|.
name|isBoolean
argument_list|(
name|t
operator|.
name|toCharArray
argument_list|()
argument_list|,
literal|"prefix"
operator|.
name|length
argument_list|()
argument_list|,
name|nb
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
name|Matchers
operator|.
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

