begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.util
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cache
operator|.
name|recycler
operator|.
name|MockPageCacheRecycler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cache
operator|.
name|recycler
operator|.
name|PageCacheRecycler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_class
DECL|class|BigArraysTests
specifier|public
class|class
name|BigArraysTests
extends|extends
name|ElasticsearchTestCase
block|{
DECL|method|randomCacheRecycler
specifier|public
specifier|static
name|PageCacheRecycler
name|randomCacheRecycler
parameter_list|()
block|{
return|return
name|randomBoolean
argument_list|()
condition|?
literal|null
else|:
operator|new
name|MockPageCacheRecycler
argument_list|(
name|ImmutableSettings
operator|.
name|EMPTY
argument_list|,
operator|new
name|ThreadPool
argument_list|()
argument_list|)
return|;
block|}
DECL|method|testByteArrayGrowth
specifier|public
name|void
name|testByteArrayGrowth
parameter_list|()
block|{
specifier|final
name|int
name|totalLen
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|4000000
argument_list|)
decl_stmt|;
specifier|final
name|int
name|startLen
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
name|randomBoolean
argument_list|()
condition|?
literal|1000
else|:
name|totalLen
argument_list|)
decl_stmt|;
name|ByteArray
name|array
init|=
name|BigArrays
operator|.
name|newByteArray
argument_list|(
name|startLen
argument_list|,
name|randomCacheRecycler
argument_list|()
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
name|ref
init|=
operator|new
name|byte
index|[
name|totalLen
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|totalLen
condition|;
operator|++
name|i
control|)
block|{
name|ref
index|[
name|i
index|]
operator|=
name|randomByte
argument_list|()
expr_stmt|;
name|array
operator|=
name|BigArrays
operator|.
name|grow
argument_list|(
name|array
argument_list|,
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
name|array
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|ref
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|totalLen
condition|;
operator|++
name|i
control|)
block|{
name|assertEquals
argument_list|(
name|ref
index|[
name|i
index|]
argument_list|,
name|array
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|array
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
DECL|method|testIntArrayGrowth
specifier|public
name|void
name|testIntArrayGrowth
parameter_list|()
block|{
specifier|final
name|int
name|totalLen
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|1000000
argument_list|)
decl_stmt|;
specifier|final
name|int
name|startLen
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
name|randomBoolean
argument_list|()
condition|?
literal|1000
else|:
name|totalLen
argument_list|)
decl_stmt|;
name|IntArray
name|array
init|=
name|BigArrays
operator|.
name|newIntArray
argument_list|(
name|startLen
argument_list|,
name|randomCacheRecycler
argument_list|()
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
decl_stmt|;
name|int
index|[]
name|ref
init|=
operator|new
name|int
index|[
name|totalLen
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|totalLen
condition|;
operator|++
name|i
control|)
block|{
name|ref
index|[
name|i
index|]
operator|=
name|randomInt
argument_list|()
expr_stmt|;
name|array
operator|=
name|BigArrays
operator|.
name|grow
argument_list|(
name|array
argument_list|,
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
name|array
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|ref
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|totalLen
condition|;
operator|++
name|i
control|)
block|{
name|assertEquals
argument_list|(
name|ref
index|[
name|i
index|]
argument_list|,
name|array
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|array
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
DECL|method|testLongArrayGrowth
specifier|public
name|void
name|testLongArrayGrowth
parameter_list|()
block|{
specifier|final
name|int
name|totalLen
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|1000000
argument_list|)
decl_stmt|;
specifier|final
name|int
name|startLen
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
name|randomBoolean
argument_list|()
condition|?
literal|1000
else|:
name|totalLen
argument_list|)
decl_stmt|;
name|LongArray
name|array
init|=
name|BigArrays
operator|.
name|newLongArray
argument_list|(
name|startLen
argument_list|,
name|randomCacheRecycler
argument_list|()
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
decl_stmt|;
name|long
index|[]
name|ref
init|=
operator|new
name|long
index|[
name|totalLen
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|totalLen
condition|;
operator|++
name|i
control|)
block|{
name|ref
index|[
name|i
index|]
operator|=
name|randomLong
argument_list|()
expr_stmt|;
name|array
operator|=
name|BigArrays
operator|.
name|grow
argument_list|(
name|array
argument_list|,
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
name|array
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|ref
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|totalLen
condition|;
operator|++
name|i
control|)
block|{
name|assertEquals
argument_list|(
name|ref
index|[
name|i
index|]
argument_list|,
name|array
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|array
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
DECL|method|testDoubleArrayGrowth
specifier|public
name|void
name|testDoubleArrayGrowth
parameter_list|()
block|{
specifier|final
name|int
name|totalLen
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|1000000
argument_list|)
decl_stmt|;
specifier|final
name|int
name|startLen
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
name|randomBoolean
argument_list|()
condition|?
literal|1000
else|:
name|totalLen
argument_list|)
decl_stmt|;
name|DoubleArray
name|array
init|=
name|BigArrays
operator|.
name|newDoubleArray
argument_list|(
name|startLen
argument_list|,
name|randomCacheRecycler
argument_list|()
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
decl_stmt|;
name|double
index|[]
name|ref
init|=
operator|new
name|double
index|[
name|totalLen
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|totalLen
condition|;
operator|++
name|i
control|)
block|{
name|ref
index|[
name|i
index|]
operator|=
name|randomDouble
argument_list|()
expr_stmt|;
name|array
operator|=
name|BigArrays
operator|.
name|grow
argument_list|(
name|array
argument_list|,
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
name|array
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|ref
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|totalLen
condition|;
operator|++
name|i
control|)
block|{
name|assertEquals
argument_list|(
name|ref
index|[
name|i
index|]
argument_list|,
name|array
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
literal|0.001d
argument_list|)
expr_stmt|;
block|}
name|array
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
DECL|method|testObjectArrayGrowth
specifier|public
name|void
name|testObjectArrayGrowth
parameter_list|()
block|{
specifier|final
name|int
name|totalLen
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|1000000
argument_list|)
decl_stmt|;
specifier|final
name|int
name|startLen
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
name|randomBoolean
argument_list|()
condition|?
literal|1000
else|:
name|totalLen
argument_list|)
decl_stmt|;
name|ObjectArray
argument_list|<
name|Object
argument_list|>
name|array
init|=
name|BigArrays
operator|.
name|newObjectArray
argument_list|(
name|startLen
argument_list|,
name|randomCacheRecycler
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Object
index|[]
name|pool
init|=
operator|new
name|Object
index|[
literal|100
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|pool
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|pool
index|[
name|i
index|]
operator|=
operator|new
name|Object
argument_list|()
expr_stmt|;
block|}
name|Object
index|[]
name|ref
init|=
operator|new
name|Object
index|[
name|totalLen
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|totalLen
condition|;
operator|++
name|i
control|)
block|{
name|ref
index|[
name|i
index|]
operator|=
name|randomFrom
argument_list|(
name|pool
argument_list|)
expr_stmt|;
name|array
operator|=
name|BigArrays
operator|.
name|grow
argument_list|(
name|array
argument_list|,
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
name|array
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|ref
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|totalLen
condition|;
operator|++
name|i
control|)
block|{
name|assertSame
argument_list|(
name|ref
index|[
name|i
index|]
argument_list|,
name|array
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|array
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
DECL|method|testDoubleArrayFill
specifier|public
name|void
name|testDoubleArrayFill
parameter_list|()
block|{
specifier|final
name|int
name|len
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|100000
argument_list|)
decl_stmt|;
specifier|final
name|int
name|fromIndex
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|len
operator|-
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|int
name|toIndex
init|=
name|randomBoolean
argument_list|()
condition|?
name|Math
operator|.
name|min
argument_list|(
name|fromIndex
operator|+
name|randomInt
argument_list|(
literal|100
argument_list|)
argument_list|,
name|len
argument_list|)
comment|// single page
else|:
name|randomIntBetween
argument_list|(
name|fromIndex
argument_list|,
name|len
argument_list|)
decl_stmt|;
comment|// likely multiple pages
specifier|final
name|DoubleArray
name|array2
init|=
name|BigArrays
operator|.
name|newDoubleArray
argument_list|(
name|len
argument_list|,
name|randomCacheRecycler
argument_list|()
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|double
index|[]
name|array1
init|=
operator|new
name|double
index|[
name|len
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
operator|++
name|i
control|)
block|{
name|array1
index|[
name|i
index|]
operator|=
name|randomDouble
argument_list|()
expr_stmt|;
name|array2
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|array1
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
specifier|final
name|double
name|rand
init|=
name|randomDouble
argument_list|()
decl_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|array1
argument_list|,
name|fromIndex
argument_list|,
name|toIndex
argument_list|,
name|rand
argument_list|)
expr_stmt|;
name|array2
operator|.
name|fill
argument_list|(
name|fromIndex
argument_list|,
name|toIndex
argument_list|,
name|rand
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
operator|++
name|i
control|)
block|{
name|assertEquals
argument_list|(
name|array1
index|[
name|i
index|]
argument_list|,
name|array2
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
literal|0.001d
argument_list|)
expr_stmt|;
block|}
name|array2
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
DECL|method|testLongArrayFill
specifier|public
name|void
name|testLongArrayFill
parameter_list|()
block|{
specifier|final
name|int
name|len
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|100000
argument_list|)
decl_stmt|;
specifier|final
name|int
name|fromIndex
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|len
operator|-
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|int
name|toIndex
init|=
name|randomBoolean
argument_list|()
condition|?
name|Math
operator|.
name|min
argument_list|(
name|fromIndex
operator|+
name|randomInt
argument_list|(
literal|100
argument_list|)
argument_list|,
name|len
argument_list|)
comment|// single page
else|:
name|randomIntBetween
argument_list|(
name|fromIndex
argument_list|,
name|len
argument_list|)
decl_stmt|;
comment|// likely multiple pages
specifier|final
name|LongArray
name|array2
init|=
name|BigArrays
operator|.
name|newLongArray
argument_list|(
name|len
argument_list|,
name|randomCacheRecycler
argument_list|()
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|long
index|[]
name|array1
init|=
operator|new
name|long
index|[
name|len
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
operator|++
name|i
control|)
block|{
name|array1
index|[
name|i
index|]
operator|=
name|randomLong
argument_list|()
expr_stmt|;
name|array2
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|array1
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
specifier|final
name|long
name|rand
init|=
name|randomLong
argument_list|()
decl_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|array1
argument_list|,
name|fromIndex
argument_list|,
name|toIndex
argument_list|,
name|rand
argument_list|)
expr_stmt|;
name|array2
operator|.
name|fill
argument_list|(
name|fromIndex
argument_list|,
name|toIndex
argument_list|,
name|rand
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
operator|++
name|i
control|)
block|{
name|assertEquals
argument_list|(
name|array1
index|[
name|i
index|]
argument_list|,
name|array2
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|array2
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
DECL|method|testByteArrayBulkGet
specifier|public
name|void
name|testByteArrayBulkGet
parameter_list|()
block|{
specifier|final
name|byte
index|[]
name|array1
init|=
operator|new
name|byte
index|[
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|4000000
argument_list|)
index|]
decl_stmt|;
name|getRandom
argument_list|()
operator|.
name|nextBytes
argument_list|(
name|array1
argument_list|)
expr_stmt|;
specifier|final
name|ByteArray
name|array2
init|=
name|BigArrays
operator|.
name|newByteArray
argument_list|(
name|array1
operator|.
name|length
argument_list|,
name|randomCacheRecycler
argument_list|()
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|array1
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|array2
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|array1
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
specifier|final
name|BytesRef
name|ref
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|int
name|offset
init|=
name|randomInt
argument_list|(
name|array1
operator|.
name|length
operator|-
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|int
name|len
init|=
name|randomInt
argument_list|(
name|Math
operator|.
name|min
argument_list|(
name|randomBoolean
argument_list|()
condition|?
literal|10
else|:
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|array1
operator|.
name|length
operator|-
name|offset
argument_list|)
argument_list|)
decl_stmt|;
name|array2
operator|.
name|get
argument_list|(
name|offset
argument_list|,
name|len
argument_list|,
name|ref
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|BytesRef
argument_list|(
name|array1
argument_list|,
name|offset
argument_list|,
name|len
argument_list|)
argument_list|,
name|ref
argument_list|)
expr_stmt|;
block|}
name|array2
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
DECL|method|testByteArrayBulkSet
specifier|public
name|void
name|testByteArrayBulkSet
parameter_list|()
block|{
specifier|final
name|byte
index|[]
name|array1
init|=
operator|new
name|byte
index|[
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|4000000
argument_list|)
index|]
decl_stmt|;
name|getRandom
argument_list|()
operator|.
name|nextBytes
argument_list|(
name|array1
argument_list|)
expr_stmt|;
specifier|final
name|ByteArray
name|array2
init|=
name|BigArrays
operator|.
name|newByteArray
argument_list|(
name|array1
operator|.
name|length
argument_list|,
name|randomCacheRecycler
argument_list|()
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|array1
operator|.
name|length
condition|;
control|)
block|{
specifier|final
name|int
name|len
init|=
name|Math
operator|.
name|min
argument_list|(
name|array1
operator|.
name|length
operator|-
name|i
argument_list|,
name|randomBoolean
argument_list|()
condition|?
name|randomInt
argument_list|(
literal|10
argument_list|)
else|:
name|randomInt
argument_list|(
literal|3
operator|*
name|BigArrays
operator|.
name|BYTE_PAGE_SIZE
argument_list|)
argument_list|)
decl_stmt|;
name|array2
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|array1
argument_list|,
name|i
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|i
operator|+=
name|len
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|array1
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|assertEquals
argument_list|(
name|array1
index|[
name|i
index|]
argument_list|,
name|array2
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|array2
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

