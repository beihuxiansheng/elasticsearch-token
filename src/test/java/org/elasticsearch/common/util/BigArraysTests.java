begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.util
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchIllegalStateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cache
operator|.
name|recycler
operator|.
name|PageCacheRecycler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|cache
operator|.
name|recycler
operator|.
name|MockBigArrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|cache
operator|.
name|recycler
operator|.
name|MockPageCacheRecycler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_class
DECL|class|BigArraysTests
specifier|public
class|class
name|BigArraysTests
extends|extends
name|ElasticsearchTestCase
block|{
DECL|method|randombigArrays
specifier|public
specifier|static
name|BigArrays
name|randombigArrays
parameter_list|()
block|{
specifier|final
name|PageCacheRecycler
name|recycler
init|=
name|randomBoolean
argument_list|()
condition|?
literal|null
else|:
operator|new
name|MockPageCacheRecycler
argument_list|(
name|ImmutableSettings
operator|.
name|EMPTY
argument_list|,
operator|new
name|ThreadPool
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|MockBigArrays
argument_list|(
name|ImmutableSettings
operator|.
name|EMPTY
argument_list|,
name|recycler
argument_list|)
return|;
block|}
DECL|field|bigArrays
specifier|private
name|BigArrays
name|bigArrays
decl_stmt|;
annotation|@
name|Before
DECL|method|init
specifier|public
name|void
name|init
parameter_list|()
block|{
name|bigArrays
operator|=
name|randombigArrays
argument_list|()
expr_stmt|;
block|}
DECL|method|testByteArrayGrowth
specifier|public
name|void
name|testByteArrayGrowth
parameter_list|()
block|{
specifier|final
name|int
name|totalLen
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|4000000
argument_list|)
decl_stmt|;
specifier|final
name|int
name|startLen
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
name|randomBoolean
argument_list|()
condition|?
literal|1000
else|:
name|totalLen
argument_list|)
decl_stmt|;
name|ByteArray
name|array
init|=
name|bigArrays
operator|.
name|newByteArray
argument_list|(
name|startLen
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
name|ref
init|=
operator|new
name|byte
index|[
name|totalLen
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|totalLen
condition|;
operator|++
name|i
control|)
block|{
name|ref
index|[
name|i
index|]
operator|=
name|randomByte
argument_list|()
expr_stmt|;
name|array
operator|=
name|bigArrays
operator|.
name|grow
argument_list|(
name|array
argument_list|,
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
name|array
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|ref
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|totalLen
condition|;
operator|++
name|i
control|)
block|{
name|assertEquals
argument_list|(
name|ref
index|[
name|i
index|]
argument_list|,
name|array
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|array
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testIntArrayGrowth
specifier|public
name|void
name|testIntArrayGrowth
parameter_list|()
block|{
specifier|final
name|int
name|totalLen
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|1000000
argument_list|)
decl_stmt|;
specifier|final
name|int
name|startLen
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
name|randomBoolean
argument_list|()
condition|?
literal|1000
else|:
name|totalLen
argument_list|)
decl_stmt|;
name|IntArray
name|array
init|=
name|bigArrays
operator|.
name|newIntArray
argument_list|(
name|startLen
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
decl_stmt|;
name|int
index|[]
name|ref
init|=
operator|new
name|int
index|[
name|totalLen
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|totalLen
condition|;
operator|++
name|i
control|)
block|{
name|ref
index|[
name|i
index|]
operator|=
name|randomInt
argument_list|()
expr_stmt|;
name|array
operator|=
name|bigArrays
operator|.
name|grow
argument_list|(
name|array
argument_list|,
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
name|array
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|ref
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|totalLen
condition|;
operator|++
name|i
control|)
block|{
name|assertEquals
argument_list|(
name|ref
index|[
name|i
index|]
argument_list|,
name|array
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|array
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testLongArrayGrowth
specifier|public
name|void
name|testLongArrayGrowth
parameter_list|()
block|{
specifier|final
name|int
name|totalLen
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|1000000
argument_list|)
decl_stmt|;
specifier|final
name|int
name|startLen
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
name|randomBoolean
argument_list|()
condition|?
literal|1000
else|:
name|totalLen
argument_list|)
decl_stmt|;
name|LongArray
name|array
init|=
name|bigArrays
operator|.
name|newLongArray
argument_list|(
name|startLen
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
decl_stmt|;
name|long
index|[]
name|ref
init|=
operator|new
name|long
index|[
name|totalLen
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|totalLen
condition|;
operator|++
name|i
control|)
block|{
name|ref
index|[
name|i
index|]
operator|=
name|randomLong
argument_list|()
expr_stmt|;
name|array
operator|=
name|bigArrays
operator|.
name|grow
argument_list|(
name|array
argument_list|,
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
name|array
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|ref
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|totalLen
condition|;
operator|++
name|i
control|)
block|{
name|assertEquals
argument_list|(
name|ref
index|[
name|i
index|]
argument_list|,
name|array
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|array
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testFloatArrayGrowth
specifier|public
name|void
name|testFloatArrayGrowth
parameter_list|()
block|{
specifier|final
name|int
name|totalLen
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|1000000
argument_list|)
decl_stmt|;
specifier|final
name|int
name|startLen
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
name|randomBoolean
argument_list|()
condition|?
literal|1000
else|:
name|totalLen
argument_list|)
decl_stmt|;
name|FloatArray
name|array
init|=
name|bigArrays
operator|.
name|newFloatArray
argument_list|(
name|startLen
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
decl_stmt|;
name|float
index|[]
name|ref
init|=
operator|new
name|float
index|[
name|totalLen
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|totalLen
condition|;
operator|++
name|i
control|)
block|{
name|ref
index|[
name|i
index|]
operator|=
name|randomFloat
argument_list|()
expr_stmt|;
name|array
operator|=
name|bigArrays
operator|.
name|grow
argument_list|(
name|array
argument_list|,
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
name|array
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|ref
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|totalLen
condition|;
operator|++
name|i
control|)
block|{
name|assertEquals
argument_list|(
name|ref
index|[
name|i
index|]
argument_list|,
name|array
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
literal|0.001d
argument_list|)
expr_stmt|;
block|}
name|array
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testDoubleArrayGrowth
specifier|public
name|void
name|testDoubleArrayGrowth
parameter_list|()
block|{
specifier|final
name|int
name|totalLen
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|1000000
argument_list|)
decl_stmt|;
specifier|final
name|int
name|startLen
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
name|randomBoolean
argument_list|()
condition|?
literal|1000
else|:
name|totalLen
argument_list|)
decl_stmt|;
name|DoubleArray
name|array
init|=
name|bigArrays
operator|.
name|newDoubleArray
argument_list|(
name|startLen
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
decl_stmt|;
name|double
index|[]
name|ref
init|=
operator|new
name|double
index|[
name|totalLen
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|totalLen
condition|;
operator|++
name|i
control|)
block|{
name|ref
index|[
name|i
index|]
operator|=
name|randomDouble
argument_list|()
expr_stmt|;
name|array
operator|=
name|bigArrays
operator|.
name|grow
argument_list|(
name|array
argument_list|,
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
name|array
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|ref
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|totalLen
condition|;
operator|++
name|i
control|)
block|{
name|assertEquals
argument_list|(
name|ref
index|[
name|i
index|]
argument_list|,
name|array
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
literal|0.001d
argument_list|)
expr_stmt|;
block|}
name|array
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testObjectArrayGrowth
specifier|public
name|void
name|testObjectArrayGrowth
parameter_list|()
block|{
specifier|final
name|int
name|totalLen
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|1000000
argument_list|)
decl_stmt|;
specifier|final
name|int
name|startLen
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
name|randomBoolean
argument_list|()
condition|?
literal|1000
else|:
name|totalLen
argument_list|)
decl_stmt|;
name|ObjectArray
argument_list|<
name|Object
argument_list|>
name|array
init|=
name|bigArrays
operator|.
name|newObjectArray
argument_list|(
name|startLen
argument_list|)
decl_stmt|;
specifier|final
name|Object
index|[]
name|pool
init|=
operator|new
name|Object
index|[
literal|100
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|pool
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|pool
index|[
name|i
index|]
operator|=
operator|new
name|Object
argument_list|()
expr_stmt|;
block|}
name|Object
index|[]
name|ref
init|=
operator|new
name|Object
index|[
name|totalLen
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|totalLen
condition|;
operator|++
name|i
control|)
block|{
name|ref
index|[
name|i
index|]
operator|=
name|randomFrom
argument_list|(
name|pool
argument_list|)
expr_stmt|;
name|array
operator|=
name|bigArrays
operator|.
name|grow
argument_list|(
name|array
argument_list|,
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
name|array
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|ref
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|totalLen
condition|;
operator|++
name|i
control|)
block|{
name|assertSame
argument_list|(
name|ref
index|[
name|i
index|]
argument_list|,
name|array
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|array
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testByteArrayFill
specifier|public
name|void
name|testByteArrayFill
parameter_list|()
block|{
specifier|final
name|int
name|len
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|100000
argument_list|)
decl_stmt|;
specifier|final
name|int
name|fromIndex
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|len
operator|-
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|int
name|toIndex
init|=
name|randomBoolean
argument_list|()
condition|?
name|Math
operator|.
name|min
argument_list|(
name|fromIndex
operator|+
name|randomInt
argument_list|(
literal|100
argument_list|)
argument_list|,
name|len
argument_list|)
comment|// single page
else|:
name|randomIntBetween
argument_list|(
name|fromIndex
argument_list|,
name|len
argument_list|)
decl_stmt|;
comment|// likely multiple pages
specifier|final
name|ByteArray
name|array2
init|=
name|bigArrays
operator|.
name|newByteArray
argument_list|(
name|len
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|array1
init|=
operator|new
name|byte
index|[
name|len
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
operator|++
name|i
control|)
block|{
name|array1
index|[
name|i
index|]
operator|=
name|randomByte
argument_list|()
expr_stmt|;
name|array2
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|array1
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
specifier|final
name|byte
name|rand
init|=
name|randomByte
argument_list|()
decl_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|array1
argument_list|,
name|fromIndex
argument_list|,
name|toIndex
argument_list|,
name|rand
argument_list|)
expr_stmt|;
name|array2
operator|.
name|fill
argument_list|(
name|fromIndex
argument_list|,
name|toIndex
argument_list|,
name|rand
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
operator|++
name|i
control|)
block|{
name|assertEquals
argument_list|(
name|array1
index|[
name|i
index|]
argument_list|,
name|array2
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
literal|0.001d
argument_list|)
expr_stmt|;
block|}
name|array2
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testFloatArrayFill
specifier|public
name|void
name|testFloatArrayFill
parameter_list|()
block|{
specifier|final
name|int
name|len
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|100000
argument_list|)
decl_stmt|;
specifier|final
name|int
name|fromIndex
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|len
operator|-
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|int
name|toIndex
init|=
name|randomBoolean
argument_list|()
condition|?
name|Math
operator|.
name|min
argument_list|(
name|fromIndex
operator|+
name|randomInt
argument_list|(
literal|100
argument_list|)
argument_list|,
name|len
argument_list|)
comment|// single page
else|:
name|randomIntBetween
argument_list|(
name|fromIndex
argument_list|,
name|len
argument_list|)
decl_stmt|;
comment|// likely multiple pages
specifier|final
name|FloatArray
name|array2
init|=
name|bigArrays
operator|.
name|newFloatArray
argument_list|(
name|len
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|float
index|[]
name|array1
init|=
operator|new
name|float
index|[
name|len
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
operator|++
name|i
control|)
block|{
name|array1
index|[
name|i
index|]
operator|=
name|randomFloat
argument_list|()
expr_stmt|;
name|array2
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|array1
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
specifier|final
name|float
name|rand
init|=
name|randomFloat
argument_list|()
decl_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|array1
argument_list|,
name|fromIndex
argument_list|,
name|toIndex
argument_list|,
name|rand
argument_list|)
expr_stmt|;
name|array2
operator|.
name|fill
argument_list|(
name|fromIndex
argument_list|,
name|toIndex
argument_list|,
name|rand
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
operator|++
name|i
control|)
block|{
name|assertEquals
argument_list|(
name|array1
index|[
name|i
index|]
argument_list|,
name|array2
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
literal|0.001d
argument_list|)
expr_stmt|;
block|}
name|array2
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testDoubleArrayFill
specifier|public
name|void
name|testDoubleArrayFill
parameter_list|()
block|{
specifier|final
name|int
name|len
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|100000
argument_list|)
decl_stmt|;
specifier|final
name|int
name|fromIndex
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|len
operator|-
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|int
name|toIndex
init|=
name|randomBoolean
argument_list|()
condition|?
name|Math
operator|.
name|min
argument_list|(
name|fromIndex
operator|+
name|randomInt
argument_list|(
literal|100
argument_list|)
argument_list|,
name|len
argument_list|)
comment|// single page
else|:
name|randomIntBetween
argument_list|(
name|fromIndex
argument_list|,
name|len
argument_list|)
decl_stmt|;
comment|// likely multiple pages
specifier|final
name|DoubleArray
name|array2
init|=
name|bigArrays
operator|.
name|newDoubleArray
argument_list|(
name|len
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|double
index|[]
name|array1
init|=
operator|new
name|double
index|[
name|len
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
operator|++
name|i
control|)
block|{
name|array1
index|[
name|i
index|]
operator|=
name|randomDouble
argument_list|()
expr_stmt|;
name|array2
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|array1
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
specifier|final
name|double
name|rand
init|=
name|randomDouble
argument_list|()
decl_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|array1
argument_list|,
name|fromIndex
argument_list|,
name|toIndex
argument_list|,
name|rand
argument_list|)
expr_stmt|;
name|array2
operator|.
name|fill
argument_list|(
name|fromIndex
argument_list|,
name|toIndex
argument_list|,
name|rand
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
operator|++
name|i
control|)
block|{
name|assertEquals
argument_list|(
name|array1
index|[
name|i
index|]
argument_list|,
name|array2
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
literal|0.001d
argument_list|)
expr_stmt|;
block|}
name|array2
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testLongArrayFill
specifier|public
name|void
name|testLongArrayFill
parameter_list|()
block|{
specifier|final
name|int
name|len
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|100000
argument_list|)
decl_stmt|;
specifier|final
name|int
name|fromIndex
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
name|len
operator|-
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|int
name|toIndex
init|=
name|randomBoolean
argument_list|()
condition|?
name|Math
operator|.
name|min
argument_list|(
name|fromIndex
operator|+
name|randomInt
argument_list|(
literal|100
argument_list|)
argument_list|,
name|len
argument_list|)
comment|// single page
else|:
name|randomIntBetween
argument_list|(
name|fromIndex
argument_list|,
name|len
argument_list|)
decl_stmt|;
comment|// likely multiple pages
specifier|final
name|LongArray
name|array2
init|=
name|bigArrays
operator|.
name|newLongArray
argument_list|(
name|len
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|long
index|[]
name|array1
init|=
operator|new
name|long
index|[
name|len
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
operator|++
name|i
control|)
block|{
name|array1
index|[
name|i
index|]
operator|=
name|randomLong
argument_list|()
expr_stmt|;
name|array2
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|array1
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
specifier|final
name|long
name|rand
init|=
name|randomLong
argument_list|()
decl_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|array1
argument_list|,
name|fromIndex
argument_list|,
name|toIndex
argument_list|,
name|rand
argument_list|)
expr_stmt|;
name|array2
operator|.
name|fill
argument_list|(
name|fromIndex
argument_list|,
name|toIndex
argument_list|,
name|rand
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
operator|++
name|i
control|)
block|{
name|assertEquals
argument_list|(
name|array1
index|[
name|i
index|]
argument_list|,
name|array2
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|array2
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testByteArrayBulkGet
specifier|public
name|void
name|testByteArrayBulkGet
parameter_list|()
block|{
specifier|final
name|byte
index|[]
name|array1
init|=
operator|new
name|byte
index|[
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|4000000
argument_list|)
index|]
decl_stmt|;
name|getRandom
argument_list|()
operator|.
name|nextBytes
argument_list|(
name|array1
argument_list|)
expr_stmt|;
specifier|final
name|ByteArray
name|array2
init|=
name|bigArrays
operator|.
name|newByteArray
argument_list|(
name|array1
operator|.
name|length
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|array1
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|array2
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|array1
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
specifier|final
name|BytesRef
name|ref
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|int
name|offset
init|=
name|randomInt
argument_list|(
name|array1
operator|.
name|length
operator|-
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|int
name|len
init|=
name|randomInt
argument_list|(
name|Math
operator|.
name|min
argument_list|(
name|randomBoolean
argument_list|()
condition|?
literal|10
else|:
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|array1
operator|.
name|length
operator|-
name|offset
argument_list|)
argument_list|)
decl_stmt|;
name|array2
operator|.
name|get
argument_list|(
name|offset
argument_list|,
name|len
argument_list|,
name|ref
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|BytesRef
argument_list|(
name|array1
argument_list|,
name|offset
argument_list|,
name|len
argument_list|)
argument_list|,
name|ref
argument_list|)
expr_stmt|;
block|}
name|array2
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testByteArrayBulkSet
specifier|public
name|void
name|testByteArrayBulkSet
parameter_list|()
block|{
specifier|final
name|byte
index|[]
name|array1
init|=
operator|new
name|byte
index|[
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|4000000
argument_list|)
index|]
decl_stmt|;
name|getRandom
argument_list|()
operator|.
name|nextBytes
argument_list|(
name|array1
argument_list|)
expr_stmt|;
specifier|final
name|ByteArray
name|array2
init|=
name|bigArrays
operator|.
name|newByteArray
argument_list|(
name|array1
operator|.
name|length
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|array1
operator|.
name|length
condition|;
control|)
block|{
specifier|final
name|int
name|len
init|=
name|Math
operator|.
name|min
argument_list|(
name|array1
operator|.
name|length
operator|-
name|i
argument_list|,
name|randomBoolean
argument_list|()
condition|?
name|randomInt
argument_list|(
literal|10
argument_list|)
else|:
name|randomInt
argument_list|(
literal|3
operator|*
name|BigArrays
operator|.
name|BYTE_PAGE_SIZE
argument_list|)
argument_list|)
decl_stmt|;
name|array2
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|array1
argument_list|,
name|i
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|i
operator|+=
name|len
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|array1
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|assertEquals
argument_list|(
name|array1
index|[
name|i
index|]
argument_list|,
name|array2
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|array2
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testByteArrayEquals
specifier|public
name|void
name|testByteArrayEquals
parameter_list|()
block|{
specifier|final
name|ByteArray
name|empty1
init|=
name|byteArrayWithBytes
argument_list|(
name|BytesRef
operator|.
name|EMPTY_BYTES
argument_list|)
decl_stmt|;
specifier|final
name|ByteArray
name|empty2
init|=
name|byteArrayWithBytes
argument_list|(
name|BytesRef
operator|.
name|EMPTY_BYTES
argument_list|)
decl_stmt|;
comment|// identity = equality
name|assertTrue
argument_list|(
name|bigArrays
operator|.
name|equals
argument_list|(
name|empty1
argument_list|,
name|empty1
argument_list|)
argument_list|)
expr_stmt|;
comment|// equality: both empty
name|assertTrue
argument_list|(
name|bigArrays
operator|.
name|equals
argument_list|(
name|empty1
argument_list|,
name|empty2
argument_list|)
argument_list|)
expr_stmt|;
name|empty1
operator|.
name|close
argument_list|()
expr_stmt|;
name|empty2
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// not equal: contents differ
specifier|final
name|ByteArray
name|a1
init|=
name|byteArrayWithBytes
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|0
block|}
argument_list|)
decl_stmt|;
specifier|final
name|ByteArray
name|a2
init|=
name|byteArrayWithBytes
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|1
block|}
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|bigArrays
operator|.
name|equals
argument_list|(
name|a1
argument_list|,
name|a2
argument_list|)
argument_list|)
expr_stmt|;
name|a1
operator|.
name|close
argument_list|()
expr_stmt|;
name|a2
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// not equal: contents differ
specifier|final
name|ByteArray
name|a3
init|=
name|byteArrayWithBytes
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|}
argument_list|)
decl_stmt|;
specifier|final
name|ByteArray
name|a4
init|=
name|byteArrayWithBytes
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|3
block|}
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|bigArrays
operator|.
name|equals
argument_list|(
name|a3
argument_list|,
name|a4
argument_list|)
argument_list|)
expr_stmt|;
name|a3
operator|.
name|close
argument_list|()
expr_stmt|;
name|a4
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// not equal: contents differ
specifier|final
name|ByteArray
name|a5
init|=
name|byteArrayWithBytes
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|}
argument_list|)
decl_stmt|;
specifier|final
name|ByteArray
name|a6
init|=
name|byteArrayWithBytes
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|4
block|}
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|bigArrays
operator|.
name|equals
argument_list|(
name|a5
argument_list|,
name|a6
argument_list|)
argument_list|)
expr_stmt|;
name|a5
operator|.
name|close
argument_list|()
expr_stmt|;
name|a6
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testByteArrayHashCode
specifier|public
name|void
name|testByteArrayHashCode
parameter_list|()
block|{
comment|// null arg has hashCode 0
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|bigArrays
operator|.
name|hashCode
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
comment|// empty array should have equal hash
specifier|final
name|int
name|emptyHash
init|=
name|Arrays
operator|.
name|hashCode
argument_list|(
name|BytesRef
operator|.
name|EMPTY_BYTES
argument_list|)
decl_stmt|;
specifier|final
name|ByteArray
name|emptyByteArray
init|=
name|byteArrayWithBytes
argument_list|(
name|BytesRef
operator|.
name|EMPTY_BYTES
argument_list|)
decl_stmt|;
specifier|final
name|int
name|emptyByteArrayHash
init|=
name|bigArrays
operator|.
name|hashCode
argument_list|(
name|emptyByteArray
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|emptyHash
argument_list|,
name|emptyByteArrayHash
argument_list|)
expr_stmt|;
name|emptyByteArray
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// FUN FACT: Arrays.hashCode() and BytesReference.bytesHashCode() are inconsistent for empty byte[]
comment|// final int emptyHash3 = new BytesArray(BytesRef.EMPTY_BYTES).hashCode();
comment|// assertEquals(emptyHash1, emptyHash3); -> fail (1 vs. 0)
comment|// large arrays should be different
specifier|final
name|byte
index|[]
name|array1
init|=
operator|new
name|byte
index|[
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|4000000
argument_list|)
index|]
decl_stmt|;
name|getRandom
argument_list|()
operator|.
name|nextBytes
argument_list|(
name|array1
argument_list|)
expr_stmt|;
specifier|final
name|int
name|array1Hash
init|=
name|Arrays
operator|.
name|hashCode
argument_list|(
name|array1
argument_list|)
decl_stmt|;
specifier|final
name|ByteArray
name|array2
init|=
name|byteArrayWithBytes
argument_list|(
name|array1
argument_list|)
decl_stmt|;
specifier|final
name|int
name|array2Hash
init|=
name|bigArrays
operator|.
name|hashCode
argument_list|(
name|array2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|array1Hash
argument_list|,
name|array2Hash
argument_list|)
expr_stmt|;
name|array2
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|byteArrayWithBytes
specifier|private
name|ByteArray
name|byteArrayWithBytes
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
block|{
name|ByteArray
name|bytearray
init|=
name|bigArrays
operator|.
name|newByteArray
argument_list|(
name|bytes
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bytes
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|bytearray
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|bytes
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|bytearray
return|;
block|}
DECL|method|testByteAccounting
specifier|public
name|void
name|testByteAccounting
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|String
name|type
range|:
name|Arrays
operator|.
name|asList
argument_list|(
literal|"Byte"
argument_list|,
literal|"Int"
argument_list|,
literal|"Long"
argument_list|,
literal|"Float"
argument_list|,
literal|"Double"
argument_list|,
literal|"Object"
argument_list|)
control|)
block|{
name|BigArrays
name|bigArrays
init|=
operator|new
name|BigArrays
argument_list|(
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|BigArrays
operator|.
name|MAX_SIZE_IN_BYTES_SETTING
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Method
name|create
init|=
name|BigArrays
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"new"
operator|+
name|type
operator|+
literal|"Array"
argument_list|,
name|long
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|int
name|size
init|=
name|scaledRandomIntBetween
argument_list|(
literal|5
argument_list|,
literal|1
operator|<<
literal|16
argument_list|)
decl_stmt|;
name|BigArray
name|array
init|=
operator|(
name|BigArray
operator|)
name|create
operator|.
name|invoke
argument_list|(
name|bigArrays
argument_list|,
name|size
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|array
operator|.
name|sizeInBytes
argument_list|()
argument_list|,
name|bigArrays
operator|.
name|sizeInBytes
argument_list|()
argument_list|)
expr_stmt|;
name|Method
name|resize
init|=
name|BigArrays
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"resize"
argument_list|,
name|array
operator|.
name|getClass
argument_list|()
operator|.
name|getInterfaces
argument_list|()
index|[
literal|0
index|]
argument_list|,
name|long
operator|.
name|class
argument_list|)
decl_stmt|;
name|int
name|newSize
init|=
name|scaledRandomIntBetween
argument_list|(
literal|5
argument_list|,
literal|1
operator|<<
literal|16
argument_list|)
decl_stmt|;
name|array
operator|=
operator|(
name|BigArray
operator|)
name|resize
operator|.
name|invoke
argument_list|(
name|bigArrays
argument_list|,
name|array
argument_list|,
name|newSize
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|array
operator|.
name|sizeInBytes
argument_list|()
argument_list|,
name|bigArrays
operator|.
name|sizeInBytes
argument_list|()
argument_list|)
expr_stmt|;
name|array
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|bigArrays
operator|.
name|sizeInBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testMaxSizeExceededOnNew
specifier|public
name|void
name|testMaxSizeExceededOnNew
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|size
init|=
name|scaledRandomIntBetween
argument_list|(
literal|5
argument_list|,
literal|1
operator|<<
literal|22
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|type
range|:
name|Arrays
operator|.
name|asList
argument_list|(
literal|"Byte"
argument_list|,
literal|"Int"
argument_list|,
literal|"Long"
argument_list|,
literal|"Float"
argument_list|,
literal|"Double"
argument_list|,
literal|"Object"
argument_list|)
control|)
block|{
name|BigArrays
name|bigArrays
init|=
operator|new
name|BigArrays
argument_list|(
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|BigArrays
operator|.
name|MAX_SIZE_IN_BYTES_SETTING
argument_list|,
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
name|size
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Method
name|create
init|=
name|BigArrays
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"new"
operator|+
name|type
operator|+
literal|"Array"
argument_list|,
name|long
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
name|create
operator|.
name|invoke
argument_list|(
name|bigArrays
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected an exception on "
operator|+
name|create
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|ElasticsearchIllegalStateException
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|bigArrays
operator|.
name|sizeInBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testMaxSizeExceededOnResize
specifier|public
name|void
name|testMaxSizeExceededOnResize
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|String
name|type
range|:
name|Arrays
operator|.
name|asList
argument_list|(
literal|"Byte"
argument_list|,
literal|"Int"
argument_list|,
literal|"Long"
argument_list|,
literal|"Float"
argument_list|,
literal|"Double"
argument_list|,
literal|"Object"
argument_list|)
control|)
block|{
specifier|final
name|long
name|maxSize
init|=
name|randomIntBetween
argument_list|(
literal|1
operator|<<
literal|10
argument_list|,
literal|1
operator|<<
literal|22
argument_list|)
decl_stmt|;
name|BigArrays
name|bigArrays
init|=
operator|new
name|BigArrays
argument_list|(
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|BigArrays
operator|.
name|MAX_SIZE_IN_BYTES_SETTING
argument_list|,
name|maxSize
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Method
name|create
init|=
name|BigArrays
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"new"
operator|+
name|type
operator|+
literal|"Array"
argument_list|,
name|long
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|int
name|size
init|=
name|scaledRandomIntBetween
argument_list|(
literal|1
argument_list|,
literal|20
argument_list|)
decl_stmt|;
name|BigArray
name|array
init|=
operator|(
name|BigArray
operator|)
name|create
operator|.
name|invoke
argument_list|(
name|bigArrays
argument_list|,
name|size
argument_list|)
decl_stmt|;
name|Method
name|resize
init|=
name|BigArrays
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"resize"
argument_list|,
name|array
operator|.
name|getClass
argument_list|()
operator|.
name|getInterfaces
argument_list|()
index|[
literal|0
index|]
argument_list|,
name|long
operator|.
name|class
argument_list|)
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|long
name|newSize
init|=
name|array
operator|.
name|size
argument_list|()
operator|*
literal|2
decl_stmt|;
name|assertEquals
argument_list|(
name|array
operator|.
name|sizeInBytes
argument_list|()
argument_list|,
name|bigArrays
operator|.
name|sizeInBytes
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|array
operator|=
operator|(
name|BigArray
operator|)
name|resize
operator|.
name|invoke
argument_list|(
name|bigArrays
argument_list|,
name|array
argument_list|,
name|newSize
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|ElasticsearchIllegalStateException
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|assertEquals
argument_list|(
name|array
operator|.
name|sizeInBytes
argument_list|()
argument_list|,
name|bigArrays
operator|.
name|sizeInBytes
argument_list|()
argument_list|)
expr_stmt|;
name|array
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|bigArrays
operator|.
name|sizeInBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

