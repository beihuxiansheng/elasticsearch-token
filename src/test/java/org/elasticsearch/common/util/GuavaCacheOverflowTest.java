begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.util
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|Cache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|CacheBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|Weigher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|ByteSizeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Asserts that Guava's caches can get stuck in an overflow state where they  * never clear themselves based on their "weight" policy if the weight grows  * beyond MAX_INT. If the noEvictionIf* methods start failing after upgrading  * Guava then the problem with Guava's caches can probably be considered fixed  * and {@code ByteSizeValue#MAX_GUAVA_CACHE_SIZE} can likely be removed.  */
end_comment

begin_class
DECL|class|GuavaCacheOverflowTest
specifier|public
class|class
name|GuavaCacheOverflowTest
extends|extends
name|ElasticsearchTestCase
block|{
DECL|field|tenMeg
specifier|private
specifier|final
name|int
name|tenMeg
init|=
name|ByteSizeValue
operator|.
name|parseBytesSizeValue
argument_list|(
literal|"10MB"
argument_list|)
operator|.
name|bytesAsInt
argument_list|()
decl_stmt|;
DECL|field|cache
specifier|private
name|Cache
argument_list|<
name|Integer
argument_list|,
name|Object
argument_list|>
name|cache
decl_stmt|;
annotation|@
name|Test
DECL|method|noEvictionIfWeightMaxWeightIs32GB
specifier|public
name|void
name|noEvictionIfWeightMaxWeightIs32GB
parameter_list|()
block|{
name|checkNoEviction
argument_list|(
literal|"32GB"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|noEvictionIfWeightMaxWeightIsGreaterThan32GB
specifier|public
name|void
name|noEvictionIfWeightMaxWeightIsGreaterThan32GB
parameter_list|()
block|{
name|checkNoEviction
argument_list|(
name|between
argument_list|(
literal|33
argument_list|,
literal|50
argument_list|)
operator|+
literal|"GB"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|evictionIfWeightSlowlyGoesOverMaxWeight
specifier|public
name|void
name|evictionIfWeightSlowlyGoesOverMaxWeight
parameter_list|()
block|{
name|buildCache
argument_list|(
literal|"30GB"
argument_list|)
expr_stmt|;
comment|// Add about 100GB of weight to the cache
name|int
name|entries
init|=
literal|10240
decl_stmt|;
name|fillCache
argument_list|(
name|entries
argument_list|)
expr_stmt|;
comment|// And as expected, some are purged.
name|int
name|missing
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|31
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|cache
operator|.
name|getIfPresent
argument_list|(
name|i
operator|+
name|tenMeg
argument_list|)
operator|==
literal|null
condition|)
block|{
name|missing
operator|++
expr_stmt|;
block|}
block|}
name|assertThat
argument_list|(
name|missing
argument_list|,
name|both
argument_list|(
name|greaterThan
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|and
argument_list|(
name|lessThan
argument_list|(
name|entries
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|buildCache
specifier|private
name|void
name|buildCache
parameter_list|(
name|String
name|size
parameter_list|)
block|{
name|cache
operator|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|concurrencyLevel
argument_list|(
literal|16
argument_list|)
operator|.
name|maximumWeight
argument_list|(
name|ByteSizeValue
operator|.
name|parseBytesSizeValue
argument_list|(
name|size
argument_list|)
operator|.
name|bytes
argument_list|()
argument_list|)
operator|.
name|weigher
argument_list|(
operator|new
name|Weigher
argument_list|<
name|Integer
argument_list|,
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|weigh
parameter_list|(
name|Integer
name|key
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
return|return
name|key
return|;
block|}
block|}
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
DECL|method|fillCache
specifier|private
name|void
name|fillCache
parameter_list|(
name|int
name|entries
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|entries
condition|;
name|i
operator|++
control|)
block|{
name|cache
operator|.
name|put
argument_list|(
name|i
operator|+
name|tenMeg
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|checkNoEviction
specifier|private
name|void
name|checkNoEviction
parameter_list|(
name|String
name|size
parameter_list|)
block|{
name|buildCache
argument_list|(
name|size
argument_list|)
expr_stmt|;
comment|// Adds ~100GB worth of weight to the cache
name|fillCache
argument_list|(
literal|10240
argument_list|)
expr_stmt|;
comment|// But nothing has been purged!
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10000
condition|;
name|i
operator|++
control|)
block|{
name|assertNotNull
argument_list|(
name|cache
operator|.
name|getIfPresent
argument_list|(
name|i
operator|+
name|tenMeg
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

