begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.cli
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|cli
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|jimfs
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|jimfs
operator|.
name|Jimfs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|Environment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|attribute
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|CheckFileCommandTests
specifier|public
class|class
name|CheckFileCommandTests
extends|extends
name|ElasticsearchTestCase
block|{
DECL|field|captureOutputTerminal
specifier|private
name|CliToolTestCase
operator|.
name|CaptureOutputTerminal
name|captureOutputTerminal
init|=
operator|new
name|CliToolTestCase
operator|.
name|CaptureOutputTerminal
argument_list|()
decl_stmt|;
DECL|field|jimFsConfiguration
specifier|private
name|Configuration
name|jimFsConfiguration
init|=
name|Configuration
operator|.
name|unix
argument_list|()
operator|.
name|toBuilder
argument_list|()
operator|.
name|setAttributeViews
argument_list|(
literal|"basic"
argument_list|,
literal|"owner"
argument_list|,
literal|"posix"
argument_list|,
literal|"unix"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
DECL|field|jimFsConfigurationWithoutPermissions
specifier|private
name|Configuration
name|jimFsConfigurationWithoutPermissions
init|=
name|randomBoolean
argument_list|()
condition|?
name|Configuration
operator|.
name|unix
argument_list|()
operator|.
name|toBuilder
argument_list|()
operator|.
name|setAttributeViews
argument_list|(
literal|"basic"
argument_list|)
operator|.
name|build
argument_list|()
else|:
name|Configuration
operator|.
name|windows
argument_list|()
decl_stmt|;
DECL|enum|Mode
specifier|private
enum|enum
name|Mode
block|{
DECL|enum constant|CHANGE
DECL|enum constant|KEEP
DECL|enum constant|DISABLED
name|CHANGE
block|,
name|KEEP
block|,
name|DISABLED
block|}
annotation|@
name|Test
DECL|method|testThatCommandLogsErrorMessageOnFail
specifier|public
name|void
name|testThatCommandLogsErrorMessageOnFail
parameter_list|()
throws|throws
name|Exception
block|{
name|executeCommand
argument_list|(
name|jimFsConfiguration
argument_list|,
operator|new
name|PermissionCheckFileCommand
argument_list|(
name|createTempDir
argument_list|()
argument_list|,
name|captureOutputTerminal
argument_list|,
name|Mode
operator|.
name|CHANGE
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|captureOutputTerminal
operator|.
name|getTerminalOutput
argument_list|()
argument_list|,
name|hasItem
argument_list|(
name|containsString
argument_list|(
literal|"Please ensure that the user account running Elasticsearch has read access to this file"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testThatCommandLogsNothingWhenPermissionRemains
specifier|public
name|void
name|testThatCommandLogsNothingWhenPermissionRemains
parameter_list|()
throws|throws
name|Exception
block|{
name|executeCommand
argument_list|(
name|jimFsConfiguration
argument_list|,
operator|new
name|PermissionCheckFileCommand
argument_list|(
name|createTempDir
argument_list|()
argument_list|,
name|captureOutputTerminal
argument_list|,
name|Mode
operator|.
name|KEEP
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|captureOutputTerminal
operator|.
name|getTerminalOutput
argument_list|()
argument_list|,
name|hasSize
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testThatCommandLogsNothingWhenDisabled
specifier|public
name|void
name|testThatCommandLogsNothingWhenDisabled
parameter_list|()
throws|throws
name|Exception
block|{
name|executeCommand
argument_list|(
name|jimFsConfiguration
argument_list|,
operator|new
name|PermissionCheckFileCommand
argument_list|(
name|createTempDir
argument_list|()
argument_list|,
name|captureOutputTerminal
argument_list|,
name|Mode
operator|.
name|DISABLED
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|captureOutputTerminal
operator|.
name|getTerminalOutput
argument_list|()
argument_list|,
name|hasSize
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testThatCommandLogsNothingIfFilesystemDoesNotSupportPermissions
specifier|public
name|void
name|testThatCommandLogsNothingIfFilesystemDoesNotSupportPermissions
parameter_list|()
throws|throws
name|Exception
block|{
name|executeCommand
argument_list|(
name|jimFsConfigurationWithoutPermissions
argument_list|,
operator|new
name|PermissionCheckFileCommand
argument_list|(
name|createTempDir
argument_list|()
argument_list|,
name|captureOutputTerminal
argument_list|,
name|Mode
operator|.
name|DISABLED
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|captureOutputTerminal
operator|.
name|getTerminalOutput
argument_list|()
argument_list|,
name|hasSize
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testThatCommandLogsOwnerChange
specifier|public
name|void
name|testThatCommandLogsOwnerChange
parameter_list|()
throws|throws
name|Exception
block|{
name|executeCommand
argument_list|(
name|jimFsConfiguration
argument_list|,
operator|new
name|OwnerCheckFileCommand
argument_list|(
name|createTempDir
argument_list|()
argument_list|,
name|captureOutputTerminal
argument_list|,
name|Mode
operator|.
name|CHANGE
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|captureOutputTerminal
operator|.
name|getTerminalOutput
argument_list|()
argument_list|,
name|hasItem
argument_list|(
name|allOf
argument_list|(
name|containsString
argument_list|(
literal|"Owner of file ["
argument_list|)
argument_list|,
name|containsString
argument_list|(
literal|"] used to be ["
argument_list|)
argument_list|,
name|containsString
argument_list|(
literal|"], but now is ["
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testThatCommandLogsNothingIfOwnerRemainsSame
specifier|public
name|void
name|testThatCommandLogsNothingIfOwnerRemainsSame
parameter_list|()
throws|throws
name|Exception
block|{
name|executeCommand
argument_list|(
name|jimFsConfiguration
argument_list|,
operator|new
name|OwnerCheckFileCommand
argument_list|(
name|createTempDir
argument_list|()
argument_list|,
name|captureOutputTerminal
argument_list|,
name|Mode
operator|.
name|KEEP
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|captureOutputTerminal
operator|.
name|getTerminalOutput
argument_list|()
argument_list|,
name|hasSize
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testThatCommandLogsNothingIfOwnerIsDisabled
specifier|public
name|void
name|testThatCommandLogsNothingIfOwnerIsDisabled
parameter_list|()
throws|throws
name|Exception
block|{
name|executeCommand
argument_list|(
name|jimFsConfiguration
argument_list|,
operator|new
name|OwnerCheckFileCommand
argument_list|(
name|createTempDir
argument_list|()
argument_list|,
name|captureOutputTerminal
argument_list|,
name|Mode
operator|.
name|DISABLED
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|captureOutputTerminal
operator|.
name|getTerminalOutput
argument_list|()
argument_list|,
name|hasSize
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testThatCommandLogsNothingIfFileSystemDoesNotSupportOwners
specifier|public
name|void
name|testThatCommandLogsNothingIfFileSystemDoesNotSupportOwners
parameter_list|()
throws|throws
name|Exception
block|{
name|executeCommand
argument_list|(
name|jimFsConfigurationWithoutPermissions
argument_list|,
operator|new
name|OwnerCheckFileCommand
argument_list|(
name|createTempDir
argument_list|()
argument_list|,
name|captureOutputTerminal
argument_list|,
name|Mode
operator|.
name|DISABLED
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|captureOutputTerminal
operator|.
name|getTerminalOutput
argument_list|()
argument_list|,
name|hasSize
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testThatCommandLogsIfGroupChanges
specifier|public
name|void
name|testThatCommandLogsIfGroupChanges
parameter_list|()
throws|throws
name|Exception
block|{
name|executeCommand
argument_list|(
name|jimFsConfiguration
argument_list|,
operator|new
name|GroupCheckFileCommand
argument_list|(
name|createTempDir
argument_list|()
argument_list|,
name|captureOutputTerminal
argument_list|,
name|Mode
operator|.
name|CHANGE
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|captureOutputTerminal
operator|.
name|getTerminalOutput
argument_list|()
argument_list|,
name|hasItem
argument_list|(
name|allOf
argument_list|(
name|containsString
argument_list|(
literal|"Group of file ["
argument_list|)
argument_list|,
name|containsString
argument_list|(
literal|"] used to be ["
argument_list|)
argument_list|,
name|containsString
argument_list|(
literal|"], but now is ["
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testThatCommandLogsNothingIfGroupRemainsSame
specifier|public
name|void
name|testThatCommandLogsNothingIfGroupRemainsSame
parameter_list|()
throws|throws
name|Exception
block|{
name|executeCommand
argument_list|(
name|jimFsConfiguration
argument_list|,
operator|new
name|GroupCheckFileCommand
argument_list|(
name|createTempDir
argument_list|()
argument_list|,
name|captureOutputTerminal
argument_list|,
name|Mode
operator|.
name|KEEP
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|captureOutputTerminal
operator|.
name|getTerminalOutput
argument_list|()
argument_list|,
name|hasSize
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testThatCommandLogsNothingIfGroupIsDisabled
specifier|public
name|void
name|testThatCommandLogsNothingIfGroupIsDisabled
parameter_list|()
throws|throws
name|Exception
block|{
name|executeCommand
argument_list|(
name|jimFsConfiguration
argument_list|,
operator|new
name|GroupCheckFileCommand
argument_list|(
name|createTempDir
argument_list|()
argument_list|,
name|captureOutputTerminal
argument_list|,
name|Mode
operator|.
name|DISABLED
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|captureOutputTerminal
operator|.
name|getTerminalOutput
argument_list|()
argument_list|,
name|hasSize
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testThatCommandLogsNothingIfFileSystemDoesNotSupportGroups
specifier|public
name|void
name|testThatCommandLogsNothingIfFileSystemDoesNotSupportGroups
parameter_list|()
throws|throws
name|Exception
block|{
name|executeCommand
argument_list|(
name|jimFsConfigurationWithoutPermissions
argument_list|,
operator|new
name|GroupCheckFileCommand
argument_list|(
name|createTempDir
argument_list|()
argument_list|,
name|captureOutputTerminal
argument_list|,
name|Mode
operator|.
name|DISABLED
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|captureOutputTerminal
operator|.
name|getTerminalOutput
argument_list|()
argument_list|,
name|hasSize
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testThatCommandDoesNotLogAnythingOnFileCreation
specifier|public
name|void
name|testThatCommandDoesNotLogAnythingOnFileCreation
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|configuration
init|=
name|randomBoolean
argument_list|()
condition|?
name|jimFsConfiguration
else|:
name|jimFsConfigurationWithoutPermissions
decl_stmt|;
try|try
init|(
name|FileSystem
name|fs
init|=
name|Jimfs
operator|.
name|newFileSystem
argument_list|(
name|configuration
argument_list|)
init|)
block|{
name|Path
name|path
init|=
name|fs
operator|.
name|getPath
argument_list|(
name|randomAsciiOfLength
argument_list|(
literal|10
argument_list|)
argument_list|)
decl_stmt|;
name|Settings
name|settings
init|=
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"path.home"
argument_list|,
name|createTempDir
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
operator|new
name|CreateFileCommand
argument_list|(
name|captureOutputTerminal
argument_list|,
name|path
argument_list|)
operator|.
name|execute
argument_list|(
name|settings
argument_list|,
operator|new
name|Environment
argument_list|(
name|settings
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|path
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|captureOutputTerminal
operator|.
name|getTerminalOutput
argument_list|()
argument_list|,
name|hasSize
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testThatCommandWorksIfFileIsDeletedByCommand
specifier|public
name|void
name|testThatCommandWorksIfFileIsDeletedByCommand
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|configuration
init|=
name|randomBoolean
argument_list|()
condition|?
name|jimFsConfiguration
else|:
name|jimFsConfigurationWithoutPermissions
decl_stmt|;
try|try
init|(
name|FileSystem
name|fs
init|=
name|Jimfs
operator|.
name|newFileSystem
argument_list|(
name|configuration
argument_list|)
init|)
block|{
name|Path
name|path
init|=
name|fs
operator|.
name|getPath
argument_list|(
name|randomAsciiOfLength
argument_list|(
literal|10
argument_list|)
argument_list|)
decl_stmt|;
name|Files
operator|.
name|write
argument_list|(
name|path
argument_list|,
literal|"anything"
operator|.
name|getBytes
argument_list|(
name|Charsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
name|Settings
name|settings
init|=
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"path.home"
argument_list|,
name|createTempDir
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
operator|new
name|DeleteFileCommand
argument_list|(
name|captureOutputTerminal
argument_list|,
name|path
argument_list|)
operator|.
name|execute
argument_list|(
name|settings
argument_list|,
operator|new
name|Environment
argument_list|(
name|settings
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|path
argument_list|)
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|captureOutputTerminal
operator|.
name|getTerminalOutput
argument_list|()
argument_list|,
name|hasSize
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|executeCommand
specifier|private
name|void
name|executeCommand
parameter_list|(
name|Configuration
name|configuration
parameter_list|,
name|AbstractTestCheckFileCommand
name|command
parameter_list|)
throws|throws
name|Exception
block|{
try|try
init|(
name|FileSystem
name|fs
init|=
name|Jimfs
operator|.
name|newFileSystem
argument_list|(
name|configuration
argument_list|)
init|)
block|{
name|command
operator|.
name|execute
argument_list|(
name|fs
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|AbstractTestCheckFileCommand
specifier|abstract
class|class
name|AbstractTestCheckFileCommand
extends|extends
name|CheckFileCommand
block|{
DECL|field|mode
specifier|protected
specifier|final
name|Mode
name|mode
decl_stmt|;
DECL|field|fs
specifier|protected
name|FileSystem
name|fs
decl_stmt|;
DECL|field|paths
specifier|protected
name|Path
index|[]
name|paths
decl_stmt|;
DECL|field|baseDir
specifier|final
name|Path
name|baseDir
decl_stmt|;
DECL|method|AbstractTestCheckFileCommand
specifier|public
name|AbstractTestCheckFileCommand
parameter_list|(
name|Path
name|baseDir
parameter_list|,
name|Terminal
name|terminal
parameter_list|,
name|Mode
name|mode
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|terminal
argument_list|)
expr_stmt|;
name|this
operator|.
name|mode
operator|=
name|mode
expr_stmt|;
name|this
operator|.
name|baseDir
operator|=
name|baseDir
expr_stmt|;
block|}
DECL|method|execute
specifier|public
name|CliTool
operator|.
name|ExitStatus
name|execute
parameter_list|(
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|Exception
block|{
name|this
operator|.
name|fs
operator|=
name|fs
expr_stmt|;
name|this
operator|.
name|paths
operator|=
operator|new
name|Path
index|[]
block|{
name|writePath
argument_list|(
name|fs
argument_list|,
literal|"p1"
argument_list|,
literal|"anything"
argument_list|)
block|,
name|writePath
argument_list|(
name|fs
argument_list|,
literal|"p2"
argument_list|,
literal|"anything"
argument_list|)
block|,
name|writePath
argument_list|(
name|fs
argument_list|,
literal|"p3"
argument_list|,
literal|"anything"
argument_list|)
block|}
expr_stmt|;
name|Settings
name|settings
init|=
name|ImmutableSettings
operator|.
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"path.home"
argument_list|,
name|baseDir
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
name|super
operator|.
name|execute
argument_list|(
name|ImmutableSettings
operator|.
name|EMPTY
argument_list|,
operator|new
name|Environment
argument_list|(
name|settings
argument_list|)
argument_list|)
return|;
block|}
DECL|method|writePath
specifier|private
name|Path
name|writePath
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|content
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|path
init|=
name|fs
operator|.
name|getPath
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|Files
operator|.
name|write
argument_list|(
name|path
argument_list|,
name|content
operator|.
name|getBytes
argument_list|(
name|Charsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|path
return|;
block|}
annotation|@
name|Override
DECL|method|pathsForPermissionsCheck
specifier|protected
name|Path
index|[]
name|pathsForPermissionsCheck
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|Environment
name|env
parameter_list|)
block|{
return|return
name|paths
return|;
block|}
block|}
comment|/**      * command that changes permissions from a file if enabled      */
DECL|class|PermissionCheckFileCommand
class|class
name|PermissionCheckFileCommand
extends|extends
name|AbstractTestCheckFileCommand
block|{
DECL|method|PermissionCheckFileCommand
specifier|public
name|PermissionCheckFileCommand
parameter_list|(
name|Path
name|baseDir
parameter_list|,
name|Terminal
name|terminal
parameter_list|,
name|Mode
name|mode
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|baseDir
argument_list|,
name|terminal
argument_list|,
name|mode
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doExecute
specifier|public
name|CliTool
operator|.
name|ExitStatus
name|doExecute
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|Environment
name|env
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|randomInt
init|=
name|randomInt
argument_list|(
name|paths
operator|.
name|length
operator|-
literal|1
argument_list|)
decl_stmt|;
name|Path
name|randomPath
init|=
name|paths
index|[
name|randomInt
index|]
decl_stmt|;
switch|switch
condition|(
name|mode
condition|)
block|{
case|case
name|CHANGE
case|:
name|Files
operator|.
name|write
argument_list|(
name|randomPath
argument_list|,
name|randomAsciiOfLength
argument_list|(
literal|10
argument_list|)
operator|.
name|getBytes
argument_list|(
name|Charsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
name|Files
operator|.
name|setPosixFilePermissions
argument_list|(
name|randomPath
argument_list|,
name|Sets
operator|.
name|newHashSet
argument_list|(
name|PosixFilePermission
operator|.
name|OWNER_EXECUTE
argument_list|,
name|PosixFilePermission
operator|.
name|OTHERS_EXECUTE
argument_list|,
name|PosixFilePermission
operator|.
name|GROUP_EXECUTE
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|KEEP
case|:
name|Files
operator|.
name|write
argument_list|(
name|randomPath
argument_list|,
name|randomAsciiOfLength
argument_list|(
literal|10
argument_list|)
operator|.
name|getBytes
argument_list|(
name|Charsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|PosixFilePermission
argument_list|>
name|posixFilePermissions
init|=
name|Files
operator|.
name|getPosixFilePermissions
argument_list|(
name|randomPath
argument_list|)
decl_stmt|;
name|Files
operator|.
name|setPosixFilePermissions
argument_list|(
name|randomPath
argument_list|,
name|posixFilePermissions
argument_list|)
expr_stmt|;
break|break;
block|}
return|return
name|CliTool
operator|.
name|ExitStatus
operator|.
name|OK
return|;
block|}
block|}
comment|/**      * command that changes the owner of a file if enabled      */
DECL|class|OwnerCheckFileCommand
class|class
name|OwnerCheckFileCommand
extends|extends
name|AbstractTestCheckFileCommand
block|{
DECL|method|OwnerCheckFileCommand
specifier|public
name|OwnerCheckFileCommand
parameter_list|(
name|Path
name|baseDir
parameter_list|,
name|Terminal
name|terminal
parameter_list|,
name|Mode
name|mode
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|baseDir
argument_list|,
name|terminal
argument_list|,
name|mode
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doExecute
specifier|public
name|CliTool
operator|.
name|ExitStatus
name|doExecute
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|Environment
name|env
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|randomInt
init|=
name|randomInt
argument_list|(
name|paths
operator|.
name|length
operator|-
literal|1
argument_list|)
decl_stmt|;
name|Path
name|randomPath
init|=
name|paths
index|[
name|randomInt
index|]
decl_stmt|;
switch|switch
condition|(
name|mode
condition|)
block|{
case|case
name|CHANGE
case|:
name|Files
operator|.
name|write
argument_list|(
name|randomPath
argument_list|,
name|randomAsciiOfLength
argument_list|(
literal|10
argument_list|)
operator|.
name|getBytes
argument_list|(
name|Charsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
name|UserPrincipal
name|randomOwner
init|=
name|fs
operator|.
name|getUserPrincipalLookupService
argument_list|()
operator|.
name|lookupPrincipalByName
argument_list|(
name|randomAsciiOfLength
argument_list|(
literal|10
argument_list|)
argument_list|)
decl_stmt|;
name|Files
operator|.
name|setOwner
argument_list|(
name|randomPath
argument_list|,
name|randomOwner
argument_list|)
expr_stmt|;
break|break;
case|case
name|KEEP
case|:
name|Files
operator|.
name|write
argument_list|(
name|randomPath
argument_list|,
name|randomAsciiOfLength
argument_list|(
literal|10
argument_list|)
operator|.
name|getBytes
argument_list|(
name|Charsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
name|UserPrincipal
name|originalOwner
init|=
name|Files
operator|.
name|getOwner
argument_list|(
name|randomPath
argument_list|)
decl_stmt|;
name|Files
operator|.
name|setOwner
argument_list|(
name|randomPath
argument_list|,
name|originalOwner
argument_list|)
expr_stmt|;
break|break;
block|}
return|return
name|CliTool
operator|.
name|ExitStatus
operator|.
name|OK
return|;
block|}
block|}
comment|/**      * command that changes the group of a file if enabled      */
DECL|class|GroupCheckFileCommand
class|class
name|GroupCheckFileCommand
extends|extends
name|AbstractTestCheckFileCommand
block|{
DECL|method|GroupCheckFileCommand
specifier|public
name|GroupCheckFileCommand
parameter_list|(
name|Path
name|baseDir
parameter_list|,
name|Terminal
name|terminal
parameter_list|,
name|Mode
name|mode
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|baseDir
argument_list|,
name|terminal
argument_list|,
name|mode
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doExecute
specifier|public
name|CliTool
operator|.
name|ExitStatus
name|doExecute
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|Environment
name|env
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|randomInt
init|=
name|randomInt
argument_list|(
name|paths
operator|.
name|length
operator|-
literal|1
argument_list|)
decl_stmt|;
name|Path
name|randomPath
init|=
name|paths
index|[
name|randomInt
index|]
decl_stmt|;
switch|switch
condition|(
name|mode
condition|)
block|{
case|case
name|CHANGE
case|:
name|Files
operator|.
name|write
argument_list|(
name|randomPath
argument_list|,
name|randomAsciiOfLength
argument_list|(
literal|10
argument_list|)
operator|.
name|getBytes
argument_list|(
name|Charsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
name|GroupPrincipal
name|randomPrincipal
init|=
name|fs
operator|.
name|getUserPrincipalLookupService
argument_list|()
operator|.
name|lookupPrincipalByGroupName
argument_list|(
name|randomAsciiOfLength
argument_list|(
literal|10
argument_list|)
argument_list|)
decl_stmt|;
name|Files
operator|.
name|getFileAttributeView
argument_list|(
name|randomPath
argument_list|,
name|PosixFileAttributeView
operator|.
name|class
argument_list|)
operator|.
name|setGroup
argument_list|(
name|randomPrincipal
argument_list|)
expr_stmt|;
break|break;
case|case
name|KEEP
case|:
name|Files
operator|.
name|write
argument_list|(
name|randomPath
argument_list|,
name|randomAsciiOfLength
argument_list|(
literal|10
argument_list|)
operator|.
name|getBytes
argument_list|(
name|Charsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
name|GroupPrincipal
name|groupPrincipal
init|=
name|Files
operator|.
name|readAttributes
argument_list|(
name|randomPath
argument_list|,
name|PosixFileAttributes
operator|.
name|class
argument_list|)
operator|.
name|group
argument_list|()
decl_stmt|;
name|Files
operator|.
name|getFileAttributeView
argument_list|(
name|randomPath
argument_list|,
name|PosixFileAttributeView
operator|.
name|class
argument_list|)
operator|.
name|setGroup
argument_list|(
name|groupPrincipal
argument_list|)
expr_stmt|;
break|break;
block|}
return|return
name|CliTool
operator|.
name|ExitStatus
operator|.
name|OK
return|;
block|}
block|}
comment|/**      * A command that creates a non existing file      */
DECL|class|CreateFileCommand
class|class
name|CreateFileCommand
extends|extends
name|CheckFileCommand
block|{
DECL|field|pathToCreate
specifier|private
specifier|final
name|Path
name|pathToCreate
decl_stmt|;
DECL|method|CreateFileCommand
specifier|public
name|CreateFileCommand
parameter_list|(
name|Terminal
name|terminal
parameter_list|,
name|Path
name|pathToCreate
parameter_list|)
block|{
name|super
argument_list|(
name|terminal
argument_list|)
expr_stmt|;
name|this
operator|.
name|pathToCreate
operator|=
name|pathToCreate
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doExecute
specifier|public
name|CliTool
operator|.
name|ExitStatus
name|doExecute
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|Environment
name|env
parameter_list|)
throws|throws
name|Exception
block|{
name|Files
operator|.
name|write
argument_list|(
name|pathToCreate
argument_list|,
literal|"anything"
operator|.
name|getBytes
argument_list|(
name|Charsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|CliTool
operator|.
name|ExitStatus
operator|.
name|OK
return|;
block|}
annotation|@
name|Override
DECL|method|pathsForPermissionsCheck
specifier|protected
name|Path
index|[]
name|pathsForPermissionsCheck
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|Environment
name|env
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|new
name|Path
index|[]
block|{
name|pathToCreate
block|}
return|;
block|}
block|}
comment|/**      * A command that deletes an existing file      */
DECL|class|DeleteFileCommand
class|class
name|DeleteFileCommand
extends|extends
name|CheckFileCommand
block|{
DECL|field|pathToDelete
specifier|private
specifier|final
name|Path
name|pathToDelete
decl_stmt|;
DECL|method|DeleteFileCommand
specifier|public
name|DeleteFileCommand
parameter_list|(
name|Terminal
name|terminal
parameter_list|,
name|Path
name|pathToDelete
parameter_list|)
block|{
name|super
argument_list|(
name|terminal
argument_list|)
expr_stmt|;
name|this
operator|.
name|pathToDelete
operator|=
name|pathToDelete
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doExecute
specifier|public
name|CliTool
operator|.
name|ExitStatus
name|doExecute
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|Environment
name|env
parameter_list|)
throws|throws
name|Exception
block|{
name|Files
operator|.
name|delete
argument_list|(
name|pathToDelete
argument_list|)
expr_stmt|;
return|return
name|CliTool
operator|.
name|ExitStatus
operator|.
name|OK
return|;
block|}
annotation|@
name|Override
DECL|method|pathsForPermissionsCheck
specifier|protected
name|Path
index|[]
name|pathsForPermissionsCheck
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|Environment
name|env
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|new
name|Path
index|[]
block|{
name|pathToDelete
block|}
return|;
block|}
block|}
block|}
end_class

end_unit

