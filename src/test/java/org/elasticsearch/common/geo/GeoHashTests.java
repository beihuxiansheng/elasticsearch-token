begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.geo
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|geo
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Tests for {@link GeoHashUtils}  */
end_comment

begin_class
DECL|class|GeoHashTests
specifier|public
class|class
name|GeoHashTests
extends|extends
name|ElasticsearchTestCase
block|{
annotation|@
name|Test
DECL|method|testGeohashAsLongRoutines
specifier|public
name|void
name|testGeohashAsLongRoutines
parameter_list|()
block|{
comment|//Ensure that for all points at all supported levels of precision
comment|// that the long encoding of a geohash is compatible with its
comment|// String based counterpart
for|for
control|(
name|double
name|lat
init|=
operator|-
literal|90
init|;
name|lat
operator|<
literal|90
condition|;
name|lat
operator|++
control|)
block|{
for|for
control|(
name|double
name|lng
init|=
operator|-
literal|180
init|;
name|lng
operator|<
literal|180
condition|;
name|lng
operator|++
control|)
block|{
for|for
control|(
name|int
name|p
init|=
literal|1
init|;
name|p
operator|<=
literal|12
condition|;
name|p
operator|++
control|)
block|{
name|long
name|geoAsLong
init|=
name|GeoHashUtils
operator|.
name|encodeAsLong
argument_list|(
name|lat
argument_list|,
name|lng
argument_list|,
name|p
argument_list|)
decl_stmt|;
name|String
name|geohash
init|=
name|GeoHashUtils
operator|.
name|encode
argument_list|(
name|lat
argument_list|,
name|lng
argument_list|,
name|p
argument_list|)
decl_stmt|;
name|String
name|geohashFromLong
init|=
name|GeoHashUtils
operator|.
name|toString
argument_list|(
name|geoAsLong
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|geohash
argument_list|,
name|geohashFromLong
argument_list|)
expr_stmt|;
name|GeoPoint
name|pos
init|=
name|GeoHashUtils
operator|.
name|decode
argument_list|(
name|geohash
argument_list|)
decl_stmt|;
name|GeoPoint
name|pos2
init|=
name|GeoHashUtils
operator|.
name|decode
argument_list|(
name|geoAsLong
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|pos
argument_list|,
name|pos2
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

