begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.hppc
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|hppc
package|;
end_package

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|ObjectOpenHashSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|HppcMaps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_class
DECL|class|HppcMapsTests
specifier|public
class|class
name|HppcMapsTests
extends|extends
name|ElasticsearchTestCase
block|{
annotation|@
name|Test
DECL|method|testIntersection
specifier|public
name|void
name|testIntersection
parameter_list|()
throws|throws
name|Exception
block|{
name|boolean
name|enabled
init|=
literal|false
decl_stmt|;
assert|assert
name|enabled
operator|=
literal|true
assert|;
name|assumeTrue
argument_list|(
literal|"assertions enabled"
argument_list|,
name|enabled
argument_list|)
expr_stmt|;
name|ObjectOpenHashSet
argument_list|<
name|String
argument_list|>
name|set1
init|=
name|ObjectOpenHashSet
operator|.
name|from
argument_list|(
literal|"1"
argument_list|,
literal|"2"
argument_list|,
literal|"3"
argument_list|)
decl_stmt|;
name|ObjectOpenHashSet
argument_list|<
name|String
argument_list|>
name|set2
init|=
name|ObjectOpenHashSet
operator|.
name|from
argument_list|(
literal|"1"
argument_list|,
literal|"2"
argument_list|,
literal|"3"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|values
init|=
name|toList
argument_list|(
name|HppcMaps
operator|.
name|intersection
argument_list|(
name|set1
argument_list|,
name|set2
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|values
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|values
operator|.
name|contains
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|values
operator|.
name|contains
argument_list|(
literal|"2"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|values
operator|.
name|contains
argument_list|(
literal|"3"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|set1
operator|=
name|ObjectOpenHashSet
operator|.
name|from
argument_list|(
literal|"1"
argument_list|,
literal|"2"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|set2
operator|=
name|ObjectOpenHashSet
operator|.
name|from
argument_list|(
literal|"3"
argument_list|,
literal|"4"
argument_list|,
literal|"5"
argument_list|)
expr_stmt|;
name|values
operator|=
name|toList
argument_list|(
name|HppcMaps
operator|.
name|intersection
argument_list|(
name|set1
argument_list|,
name|set2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|values
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|values
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
name|set1
operator|=
name|ObjectOpenHashSet
operator|.
name|from
argument_list|(
literal|"1"
argument_list|,
literal|"2"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|set2
operator|=
name|ObjectOpenHashSet
operator|.
name|from
argument_list|(
literal|"4"
argument_list|,
literal|"5"
argument_list|,
literal|"6"
argument_list|)
expr_stmt|;
name|values
operator|=
name|toList
argument_list|(
name|HppcMaps
operator|.
name|intersection
argument_list|(
name|set1
argument_list|,
name|set2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|values
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|set1
operator|=
name|ObjectOpenHashSet
operator|.
name|from
argument_list|()
expr_stmt|;
name|set2
operator|=
name|ObjectOpenHashSet
operator|.
name|from
argument_list|(
literal|"3"
argument_list|,
literal|"4"
argument_list|,
literal|"5"
argument_list|)
expr_stmt|;
name|values
operator|=
name|toList
argument_list|(
name|HppcMaps
operator|.
name|intersection
argument_list|(
name|set1
argument_list|,
name|set2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|values
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|set1
operator|=
name|ObjectOpenHashSet
operator|.
name|from
argument_list|(
literal|"1"
argument_list|,
literal|"2"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|set2
operator|=
name|ObjectOpenHashSet
operator|.
name|from
argument_list|()
expr_stmt|;
name|values
operator|=
name|toList
argument_list|(
name|HppcMaps
operator|.
name|intersection
argument_list|(
name|set1
argument_list|,
name|set2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|values
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|set1
operator|=
name|ObjectOpenHashSet
operator|.
name|from
argument_list|()
expr_stmt|;
name|set2
operator|=
name|ObjectOpenHashSet
operator|.
name|from
argument_list|()
expr_stmt|;
name|values
operator|=
name|toList
argument_list|(
name|HppcMaps
operator|.
name|intersection
argument_list|(
name|set1
argument_list|,
name|set2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|values
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|set1
operator|=
literal|null
expr_stmt|;
name|set2
operator|=
name|ObjectOpenHashSet
operator|.
name|from
argument_list|()
expr_stmt|;
try|try
block|{
name|toList
argument_list|(
name|HppcMaps
operator|.
name|intersection
argument_list|(
name|set1
argument_list|,
name|set2
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionError
name|e
parameter_list|)
block|{}
name|set1
operator|=
name|ObjectOpenHashSet
operator|.
name|from
argument_list|()
expr_stmt|;
name|set2
operator|=
literal|null
expr_stmt|;
try|try
block|{
name|toList
argument_list|(
name|HppcMaps
operator|.
name|intersection
argument_list|(
name|set1
argument_list|,
name|set2
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionError
name|e
parameter_list|)
block|{}
name|set1
operator|=
literal|null
expr_stmt|;
name|set2
operator|=
literal|null
expr_stmt|;
try|try
block|{
name|toList
argument_list|(
name|HppcMaps
operator|.
name|intersection
argument_list|(
name|set1
argument_list|,
name|set2
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionError
name|e
parameter_list|)
block|{}
block|}
DECL|method|toList
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|toList
parameter_list|(
name|Iterable
argument_list|<
name|String
argument_list|>
name|iterable
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|iterable
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
block|}
end_class

end_unit

