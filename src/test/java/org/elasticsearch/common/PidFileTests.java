begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|StandardOpenOption
import|;
end_import

begin_comment
comment|/**  * UnitTest for {@link org.elasticsearch.common.PidFile}  */
end_comment

begin_class
DECL|class|PidFileTests
specifier|public
class|class
name|PidFileTests
extends|extends
name|ElasticsearchTestCase
block|{
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|testParentIsFile
specifier|public
name|void
name|testParentIsFile
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|dir
init|=
name|createTempDir
argument_list|()
decl_stmt|;
name|Path
name|parent
init|=
name|dir
operator|.
name|resolve
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
try|try
init|(
name|BufferedWriter
name|stream
init|=
name|Files
operator|.
name|newBufferedWriter
argument_list|(
name|parent
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|,
name|StandardOpenOption
operator|.
name|CREATE_NEW
argument_list|)
init|)
block|{
name|stream
operator|.
name|write
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
block|}
name|PidFile
operator|.
name|create
argument_list|(
name|parent
operator|.
name|resolve
argument_list|(
literal|"bar.pid"
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPidFile
specifier|public
name|void
name|testPidFile
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|dir
init|=
name|createTempDir
argument_list|()
decl_stmt|;
name|Path
name|parent
init|=
name|dir
operator|.
name|resolve
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|Files
operator|.
name|createDirectories
argument_list|(
name|parent
argument_list|)
expr_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
try|try
block|{
name|Path
name|link
init|=
name|dir
operator|.
name|resolve
argument_list|(
literal|"link_to_real_path"
argument_list|)
decl_stmt|;
name|Files
operator|.
name|createSymbolicLink
argument_list|(
name|link
argument_list|,
name|parent
operator|.
name|getFileName
argument_list|()
argument_list|)
expr_stmt|;
name|parent
operator|=
name|link
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
decl||
name|IOException
decl||
name|SecurityException
name|ex
parameter_list|)
block|{
comment|// fine - no links on this system
block|}
block|}
block|}
name|Path
name|pidFile
init|=
name|parent
operator|.
name|resolve
argument_list|(
literal|"foo.pid"
argument_list|)
decl_stmt|;
name|long
name|pid
init|=
name|randomLong
argument_list|()
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
operator|&&
name|Files
operator|.
name|exists
argument_list|(
name|parent
argument_list|)
condition|)
block|{
try|try
init|(
name|BufferedWriter
name|stream
init|=
name|Files
operator|.
name|newBufferedWriter
argument_list|(
name|pidFile
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|,
name|StandardOpenOption
operator|.
name|CREATE_NEW
argument_list|)
init|)
block|{
name|stream
operator|.
name|write
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|PidFile
name|inst
init|=
name|PidFile
operator|.
name|create
argument_list|(
name|pidFile
argument_list|,
literal|false
argument_list|,
name|pid
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|pidFile
argument_list|,
name|inst
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|pid
argument_list|,
name|inst
operator|.
name|getPid
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|inst
operator|.
name|isDeleteOnExit
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|pidFile
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|pid
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
operator|new
name|String
argument_list|(
name|Files
operator|.
name|readAllBytes
argument_list|(
name|pidFile
argument_list|)
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

