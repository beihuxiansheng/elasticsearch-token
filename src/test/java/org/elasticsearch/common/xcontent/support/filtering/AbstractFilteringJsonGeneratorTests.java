begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.xcontent.support.filtering
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|support
operator|.
name|filtering
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|nullValue
import|;
end_import

begin_class
DECL|class|AbstractFilteringJsonGeneratorTests
specifier|public
specifier|abstract
class|class
name|AbstractFilteringJsonGeneratorTests
extends|extends
name|ElasticsearchTestCase
block|{
DECL|method|getXContentType
specifier|protected
specifier|abstract
name|XContentType
name|getXContentType
parameter_list|()
function_decl|;
DECL|method|assertXContentBuilder
specifier|protected
specifier|abstract
name|void
name|assertXContentBuilder
parameter_list|(
name|XContentBuilder
name|expected
parameter_list|,
name|XContentBuilder
name|builder
parameter_list|)
function_decl|;
DECL|method|assertString
specifier|protected
name|void
name|assertString
parameter_list|(
name|XContentBuilder
name|expected
parameter_list|,
name|XContentBuilder
name|builder
parameter_list|)
block|{
name|assertNotNull
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|expected
argument_list|)
expr_stmt|;
comment|// Verify that the result is equal to the expected string
name|assertThat
argument_list|(
name|builder
operator|.
name|bytes
argument_list|()
operator|.
name|toUtf8
argument_list|()
argument_list|,
name|is
argument_list|(
name|expected
operator|.
name|bytes
argument_list|()
operator|.
name|toUtf8
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertBinary
specifier|protected
name|void
name|assertBinary
parameter_list|(
name|XContentBuilder
name|expected
parameter_list|,
name|XContentBuilder
name|builder
parameter_list|)
block|{
name|assertNotNull
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|expected
argument_list|)
expr_stmt|;
try|try
block|{
name|XContent
name|xContent
init|=
name|XContentFactory
operator|.
name|xContent
argument_list|(
name|builder
operator|.
name|contentType
argument_list|()
argument_list|)
decl_stmt|;
name|XContentParser
name|jsonParser
init|=
name|xContent
operator|.
name|createParser
argument_list|(
name|expected
operator|.
name|bytes
argument_list|()
argument_list|)
decl_stmt|;
name|XContentParser
name|testParser
init|=
name|xContent
operator|.
name|createParser
argument_list|(
name|builder
operator|.
name|bytes
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|XContentParser
operator|.
name|Token
name|token1
init|=
name|jsonParser
operator|.
name|nextToken
argument_list|()
decl_stmt|;
name|XContentParser
operator|.
name|Token
name|token2
init|=
name|testParser
operator|.
name|nextToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|token1
operator|==
literal|null
condition|)
block|{
name|assertThat
argument_list|(
name|token2
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|assertThat
argument_list|(
name|token1
argument_list|,
name|equalTo
argument_list|(
name|token2
argument_list|)
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|token1
condition|)
block|{
case|case
name|FIELD_NAME
case|:
name|assertThat
argument_list|(
name|jsonParser
operator|.
name|currentName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|testParser
operator|.
name|currentName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|VALUE_STRING
case|:
name|assertThat
argument_list|(
name|jsonParser
operator|.
name|text
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|testParser
operator|.
name|text
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|VALUE_NUMBER
case|:
name|assertThat
argument_list|(
name|jsonParser
operator|.
name|numberType
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|testParser
operator|.
name|numberType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|jsonParser
operator|.
name|numberValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|testParser
operator|.
name|numberValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Fail to verify the result of the XContentBuilder: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|newXContentBuilder
specifier|private
name|XContentBuilder
name|newXContentBuilder
parameter_list|(
name|String
modifier|...
name|filters
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|XContentBuilder
operator|.
name|builder
argument_list|(
name|getXContentType
argument_list|()
operator|.
name|xContent
argument_list|()
argument_list|,
name|filters
argument_list|)
return|;
block|}
comment|/**      * Build a sample using a given XContentBuilder      */
DECL|method|sample
specifier|private
name|XContentBuilder
name|sample
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|)
throws|throws
name|IOException
block|{
name|assertNotNull
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|builder
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"title"
argument_list|,
literal|"My awesome book"
argument_list|)
operator|.
name|field
argument_list|(
literal|"pages"
argument_list|,
literal|456
argument_list|)
operator|.
name|field
argument_list|(
literal|"price"
argument_list|,
literal|27.99
argument_list|)
operator|.
name|field
argument_list|(
literal|"timestamp"
argument_list|,
literal|1428582942867L
argument_list|)
operator|.
name|nullField
argument_list|(
literal|"default"
argument_list|)
operator|.
name|startArray
argument_list|(
literal|"tags"
argument_list|)
operator|.
name|value
argument_list|(
literal|"elasticsearch"
argument_list|)
operator|.
name|value
argument_list|(
literal|"java"
argument_list|)
operator|.
name|endArray
argument_list|()
operator|.
name|startArray
argument_list|(
literal|"authors"
argument_list|)
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"name"
argument_list|,
literal|"John Doe"
argument_list|)
operator|.
name|field
argument_list|(
literal|"lastname"
argument_list|,
literal|"John"
argument_list|)
operator|.
name|field
argument_list|(
literal|"firstname"
argument_list|,
literal|"Doe"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"name"
argument_list|,
literal|"William Smith"
argument_list|)
operator|.
name|field
argument_list|(
literal|"lastname"
argument_list|,
literal|"William"
argument_list|)
operator|.
name|field
argument_list|(
literal|"firstname"
argument_list|,
literal|"Smith"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endArray
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|field
argument_list|(
literal|"weight"
argument_list|,
literal|0.8d
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"language"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"en"
argument_list|)
operator|.
name|field
argument_list|(
literal|"lang"
argument_list|,
literal|"English"
argument_list|)
operator|.
name|field
argument_list|(
literal|"available"
argument_list|,
literal|true
argument_list|)
operator|.
name|startArray
argument_list|(
literal|"distributors"
argument_list|)
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"name"
argument_list|,
literal|"The Book Shop"
argument_list|)
operator|.
name|startArray
argument_list|(
literal|"addresses"
argument_list|)
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"name"
argument_list|,
literal|"address #1"
argument_list|)
operator|.
name|field
argument_list|(
literal|"street"
argument_list|,
literal|"Hampton St"
argument_list|)
operator|.
name|field
argument_list|(
literal|"city"
argument_list|,
literal|"London"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"name"
argument_list|,
literal|"address #2"
argument_list|)
operator|.
name|field
argument_list|(
literal|"street"
argument_list|,
literal|"Queen St"
argument_list|)
operator|.
name|field
argument_list|(
literal|"city"
argument_list|,
literal|"Stornoway"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"name"
argument_list|,
literal|"Sussex Books House"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"fr"
argument_list|)
operator|.
name|field
argument_list|(
literal|"lang"
argument_list|,
literal|"French"
argument_list|)
operator|.
name|field
argument_list|(
literal|"available"
argument_list|,
literal|false
argument_list|)
operator|.
name|startArray
argument_list|(
literal|"distributors"
argument_list|)
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"name"
argument_list|,
literal|"La Maison du Livre"
argument_list|)
operator|.
name|startArray
argument_list|(
literal|"addresses"
argument_list|)
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"name"
argument_list|,
literal|"address #1"
argument_list|)
operator|.
name|field
argument_list|(
literal|"street"
argument_list|,
literal|"Rue Mouffetard"
argument_list|)
operator|.
name|field
argument_list|(
literal|"city"
argument_list|,
literal|"Paris"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"name"
argument_list|,
literal|"Thetra"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
comment|/**      * Instanciates a new XContentBuilder with the given filters and builds a sample with it.      */
DECL|method|sample
specifier|private
name|XContentBuilder
name|sample
parameter_list|(
name|String
modifier|...
name|filters
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|sample
argument_list|(
name|newXContentBuilder
argument_list|(
name|filters
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Test
DECL|method|testNoFiltering
specifier|public
name|void
name|testNoFiltering
parameter_list|()
throws|throws
name|Exception
block|{
name|XContentBuilder
name|expected
init|=
name|sample
argument_list|()
decl_stmt|;
name|assertXContentBuilder
argument_list|(
name|expected
argument_list|,
name|sample
argument_list|()
argument_list|)
expr_stmt|;
name|assertXContentBuilder
argument_list|(
name|expected
argument_list|,
name|sample
argument_list|(
literal|"*"
argument_list|)
argument_list|)
expr_stmt|;
name|assertXContentBuilder
argument_list|(
name|expected
argument_list|,
name|sample
argument_list|(
literal|"**"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNoMatch
specifier|public
name|void
name|testNoMatch
parameter_list|()
throws|throws
name|Exception
block|{
name|XContentBuilder
name|expected
init|=
name|newXContentBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|assertXContentBuilder
argument_list|(
name|expected
argument_list|,
name|sample
argument_list|(
literal|"xyz"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSimpleField
specifier|public
name|void
name|testSimpleField
parameter_list|()
throws|throws
name|Exception
block|{
name|XContentBuilder
name|expected
init|=
name|newXContentBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"title"
argument_list|,
literal|"My awesome book"
argument_list|)
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|assertXContentBuilder
argument_list|(
name|expected
argument_list|,
name|sample
argument_list|(
literal|"title"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSimpleFieldWithWildcard
specifier|public
name|void
name|testSimpleFieldWithWildcard
parameter_list|()
throws|throws
name|Exception
block|{
name|XContentBuilder
name|expected
init|=
name|newXContentBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"price"
argument_list|,
literal|27.99
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|field
argument_list|(
literal|"weight"
argument_list|,
literal|0.8d
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"language"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"en"
argument_list|)
operator|.
name|field
argument_list|(
literal|"lang"
argument_list|,
literal|"English"
argument_list|)
operator|.
name|field
argument_list|(
literal|"available"
argument_list|,
literal|true
argument_list|)
operator|.
name|startArray
argument_list|(
literal|"distributors"
argument_list|)
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"name"
argument_list|,
literal|"The Book Shop"
argument_list|)
operator|.
name|startArray
argument_list|(
literal|"addresses"
argument_list|)
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"name"
argument_list|,
literal|"address #1"
argument_list|)
operator|.
name|field
argument_list|(
literal|"street"
argument_list|,
literal|"Hampton St"
argument_list|)
operator|.
name|field
argument_list|(
literal|"city"
argument_list|,
literal|"London"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"name"
argument_list|,
literal|"address #2"
argument_list|)
operator|.
name|field
argument_list|(
literal|"street"
argument_list|,
literal|"Queen St"
argument_list|)
operator|.
name|field
argument_list|(
literal|"city"
argument_list|,
literal|"Stornoway"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"name"
argument_list|,
literal|"Sussex Books House"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"fr"
argument_list|)
operator|.
name|field
argument_list|(
literal|"lang"
argument_list|,
literal|"French"
argument_list|)
operator|.
name|field
argument_list|(
literal|"available"
argument_list|,
literal|false
argument_list|)
operator|.
name|startArray
argument_list|(
literal|"distributors"
argument_list|)
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"name"
argument_list|,
literal|"La Maison du Livre"
argument_list|)
operator|.
name|startArray
argument_list|(
literal|"addresses"
argument_list|)
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"name"
argument_list|,
literal|"address #1"
argument_list|)
operator|.
name|field
argument_list|(
literal|"street"
argument_list|,
literal|"Rue Mouffetard"
argument_list|)
operator|.
name|field
argument_list|(
literal|"city"
argument_list|,
literal|"Paris"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"name"
argument_list|,
literal|"Thetra"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|assertXContentBuilder
argument_list|(
name|expected
argument_list|,
name|sample
argument_list|(
literal|"pr*"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMultipleFields
specifier|public
name|void
name|testMultipleFields
parameter_list|()
throws|throws
name|Exception
block|{
name|XContentBuilder
name|expected
init|=
name|newXContentBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"title"
argument_list|,
literal|"My awesome book"
argument_list|)
operator|.
name|field
argument_list|(
literal|"pages"
argument_list|,
literal|456
argument_list|)
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|assertXContentBuilder
argument_list|(
name|expected
argument_list|,
name|sample
argument_list|(
literal|"title"
argument_list|,
literal|"pages"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSimpleArray
specifier|public
name|void
name|testSimpleArray
parameter_list|()
throws|throws
name|Exception
block|{
name|XContentBuilder
name|expected
init|=
name|newXContentBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startArray
argument_list|(
literal|"tags"
argument_list|)
operator|.
name|value
argument_list|(
literal|"elasticsearch"
argument_list|)
operator|.
name|value
argument_list|(
literal|"java"
argument_list|)
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|assertXContentBuilder
argument_list|(
name|expected
argument_list|,
name|sample
argument_list|(
literal|"tags"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSimpleArrayOfObjects
specifier|public
name|void
name|testSimpleArrayOfObjects
parameter_list|()
throws|throws
name|Exception
block|{
name|XContentBuilder
name|expected
init|=
name|newXContentBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startArray
argument_list|(
literal|"authors"
argument_list|)
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"name"
argument_list|,
literal|"John Doe"
argument_list|)
operator|.
name|field
argument_list|(
literal|"lastname"
argument_list|,
literal|"John"
argument_list|)
operator|.
name|field
argument_list|(
literal|"firstname"
argument_list|,
literal|"Doe"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"name"
argument_list|,
literal|"William Smith"
argument_list|)
operator|.
name|field
argument_list|(
literal|"lastname"
argument_list|,
literal|"William"
argument_list|)
operator|.
name|field
argument_list|(
literal|"firstname"
argument_list|,
literal|"Smith"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|assertXContentBuilder
argument_list|(
name|expected
argument_list|,
name|sample
argument_list|(
literal|"authors"
argument_list|)
argument_list|)
expr_stmt|;
name|assertXContentBuilder
argument_list|(
name|expected
argument_list|,
name|sample
argument_list|(
literal|"authors.*"
argument_list|)
argument_list|)
expr_stmt|;
name|assertXContentBuilder
argument_list|(
name|expected
argument_list|,
name|sample
argument_list|(
literal|"authors.*name"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSimpleArrayOfObjectsProperty
specifier|public
name|void
name|testSimpleArrayOfObjectsProperty
parameter_list|()
throws|throws
name|Exception
block|{
name|XContentBuilder
name|expected
init|=
name|newXContentBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startArray
argument_list|(
literal|"authors"
argument_list|)
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"lastname"
argument_list|,
literal|"John"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"lastname"
argument_list|,
literal|"William"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|assertXContentBuilder
argument_list|(
name|expected
argument_list|,
name|sample
argument_list|(
literal|"authors.lastname"
argument_list|)
argument_list|)
expr_stmt|;
name|assertXContentBuilder
argument_list|(
name|expected
argument_list|,
name|sample
argument_list|(
literal|"authors.l*"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRecurseField1
specifier|public
name|void
name|testRecurseField1
parameter_list|()
throws|throws
name|Exception
block|{
name|XContentBuilder
name|expected
init|=
name|newXContentBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startArray
argument_list|(
literal|"authors"
argument_list|)
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"name"
argument_list|,
literal|"John Doe"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"name"
argument_list|,
literal|"William Smith"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endArray
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"language"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"en"
argument_list|)
operator|.
name|startArray
argument_list|(
literal|"distributors"
argument_list|)
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"name"
argument_list|,
literal|"The Book Shop"
argument_list|)
operator|.
name|startArray
argument_list|(
literal|"addresses"
argument_list|)
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"name"
argument_list|,
literal|"address #1"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"name"
argument_list|,
literal|"address #2"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"name"
argument_list|,
literal|"Sussex Books House"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"fr"
argument_list|)
operator|.
name|startArray
argument_list|(
literal|"distributors"
argument_list|)
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"name"
argument_list|,
literal|"La Maison du Livre"
argument_list|)
operator|.
name|startArray
argument_list|(
literal|"addresses"
argument_list|)
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"name"
argument_list|,
literal|"address #1"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"name"
argument_list|,
literal|"Thetra"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|assertXContentBuilder
argument_list|(
name|expected
argument_list|,
name|sample
argument_list|(
literal|"**.name"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRecurseField2
specifier|public
name|void
name|testRecurseField2
parameter_list|()
throws|throws
name|Exception
block|{
name|XContentBuilder
name|expected
init|=
name|newXContentBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"language"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"en"
argument_list|)
operator|.
name|startArray
argument_list|(
literal|"distributors"
argument_list|)
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"name"
argument_list|,
literal|"The Book Shop"
argument_list|)
operator|.
name|startArray
argument_list|(
literal|"addresses"
argument_list|)
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"name"
argument_list|,
literal|"address #1"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"name"
argument_list|,
literal|"address #2"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"name"
argument_list|,
literal|"Sussex Books House"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"fr"
argument_list|)
operator|.
name|startArray
argument_list|(
literal|"distributors"
argument_list|)
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"name"
argument_list|,
literal|"La Maison du Livre"
argument_list|)
operator|.
name|startArray
argument_list|(
literal|"addresses"
argument_list|)
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"name"
argument_list|,
literal|"address #1"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"name"
argument_list|,
literal|"Thetra"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|assertXContentBuilder
argument_list|(
name|expected
argument_list|,
name|sample
argument_list|(
literal|"properties.**.name"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRecurseField3
specifier|public
name|void
name|testRecurseField3
parameter_list|()
throws|throws
name|Exception
block|{
name|XContentBuilder
name|expected
init|=
name|newXContentBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"language"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"en"
argument_list|)
operator|.
name|startArray
argument_list|(
literal|"distributors"
argument_list|)
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"name"
argument_list|,
literal|"The Book Shop"
argument_list|)
operator|.
name|startArray
argument_list|(
literal|"addresses"
argument_list|)
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"name"
argument_list|,
literal|"address #1"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"name"
argument_list|,
literal|"address #2"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"name"
argument_list|,
literal|"Sussex Books House"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|assertXContentBuilder
argument_list|(
name|expected
argument_list|,
name|sample
argument_list|(
literal|"properties.*.en.**.name"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRecurseField4
specifier|public
name|void
name|testRecurseField4
parameter_list|()
throws|throws
name|Exception
block|{
name|XContentBuilder
name|expected
init|=
name|newXContentBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"language"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"en"
argument_list|)
operator|.
name|startArray
argument_list|(
literal|"distributors"
argument_list|)
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"name"
argument_list|,
literal|"The Book Shop"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"name"
argument_list|,
literal|"Sussex Books House"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"fr"
argument_list|)
operator|.
name|startArray
argument_list|(
literal|"distributors"
argument_list|)
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"name"
argument_list|,
literal|"La Maison du Livre"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"name"
argument_list|,
literal|"Thetra"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|assertXContentBuilder
argument_list|(
name|expected
argument_list|,
name|sample
argument_list|(
literal|"properties.**.distributors.name"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRawField
specifier|public
name|void
name|testRawField
parameter_list|()
throws|throws
name|Exception
block|{
name|XContentBuilder
name|expectedRawField
init|=
name|newXContentBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"foo"
argument_list|,
literal|0
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"raw"
argument_list|)
operator|.
name|field
argument_list|(
literal|"content"
argument_list|,
literal|"hello world!"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|XContentBuilder
name|expectedRawFieldFiltered
init|=
name|newXContentBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"foo"
argument_list|,
literal|0
argument_list|)
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|XContentBuilder
name|expectedRawFieldNotFiltered
init|=
name|newXContentBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"raw"
argument_list|)
operator|.
name|field
argument_list|(
literal|"content"
argument_list|,
literal|"hello world!"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|BytesReference
name|raw
init|=
name|newXContentBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"content"
argument_list|,
literal|"hello world!"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|bytes
argument_list|()
decl_stmt|;
comment|// Test method: rawField(String fieldName, BytesReference content)
name|assertXContentBuilder
argument_list|(
name|expectedRawField
argument_list|,
name|newXContentBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"foo"
argument_list|,
literal|0
argument_list|)
operator|.
name|rawField
argument_list|(
literal|"raw"
argument_list|,
name|raw
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertXContentBuilder
argument_list|(
name|expectedRawFieldFiltered
argument_list|,
name|newXContentBuilder
argument_list|(
literal|"f*"
argument_list|)
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"foo"
argument_list|,
literal|0
argument_list|)
operator|.
name|rawField
argument_list|(
literal|"raw"
argument_list|,
name|raw
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertXContentBuilder
argument_list|(
name|expectedRawFieldNotFiltered
argument_list|,
name|newXContentBuilder
argument_list|(
literal|"r*"
argument_list|)
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"foo"
argument_list|,
literal|0
argument_list|)
operator|.
name|rawField
argument_list|(
literal|"raw"
argument_list|,
name|raw
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test method: rawField(String fieldName, byte[] content)
name|assertXContentBuilder
argument_list|(
name|expectedRawField
argument_list|,
name|newXContentBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"foo"
argument_list|,
literal|0
argument_list|)
operator|.
name|rawField
argument_list|(
literal|"raw"
argument_list|,
name|raw
operator|.
name|toBytes
argument_list|()
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertXContentBuilder
argument_list|(
name|expectedRawFieldFiltered
argument_list|,
name|newXContentBuilder
argument_list|(
literal|"f*"
argument_list|)
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"foo"
argument_list|,
literal|0
argument_list|)
operator|.
name|rawField
argument_list|(
literal|"raw"
argument_list|,
name|raw
operator|.
name|toBytes
argument_list|()
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertXContentBuilder
argument_list|(
name|expectedRawFieldNotFiltered
argument_list|,
name|newXContentBuilder
argument_list|(
literal|"r*"
argument_list|)
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"foo"
argument_list|,
literal|0
argument_list|)
operator|.
name|rawField
argument_list|(
literal|"raw"
argument_list|,
name|raw
operator|.
name|toBytes
argument_list|()
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test method: rawField(String fieldName, InputStream content)
name|assertXContentBuilder
argument_list|(
name|expectedRawField
argument_list|,
name|newXContentBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"foo"
argument_list|,
literal|0
argument_list|)
operator|.
name|rawField
argument_list|(
literal|"raw"
argument_list|,
operator|new
name|ByteArrayInputStream
argument_list|(
name|raw
operator|.
name|toBytes
argument_list|()
argument_list|)
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertXContentBuilder
argument_list|(
name|expectedRawFieldFiltered
argument_list|,
name|newXContentBuilder
argument_list|(
literal|"f*"
argument_list|)
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"foo"
argument_list|,
literal|0
argument_list|)
operator|.
name|rawField
argument_list|(
literal|"raw"
argument_list|,
operator|new
name|ByteArrayInputStream
argument_list|(
name|raw
operator|.
name|toBytes
argument_list|()
argument_list|)
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertXContentBuilder
argument_list|(
name|expectedRawFieldNotFiltered
argument_list|,
name|newXContentBuilder
argument_list|(
literal|"r*"
argument_list|)
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"foo"
argument_list|,
literal|0
argument_list|)
operator|.
name|rawField
argument_list|(
literal|"raw"
argument_list|,
operator|new
name|ByteArrayInputStream
argument_list|(
name|raw
operator|.
name|toBytes
argument_list|()
argument_list|)
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testArrays
specifier|public
name|void
name|testArrays
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Test: Array of values (no filtering)
name|XContentBuilder
name|expected
init|=
name|newXContentBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startArray
argument_list|(
literal|"tags"
argument_list|)
operator|.
name|value
argument_list|(
literal|"lorem"
argument_list|)
operator|.
name|value
argument_list|(
literal|"ipsum"
argument_list|)
operator|.
name|value
argument_list|(
literal|"dolor"
argument_list|)
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|assertXContentBuilder
argument_list|(
name|expected
argument_list|,
name|newXContentBuilder
argument_list|(
literal|"t*"
argument_list|)
operator|.
name|startObject
argument_list|()
operator|.
name|startArray
argument_list|(
literal|"tags"
argument_list|)
operator|.
name|value
argument_list|(
literal|"lorem"
argument_list|)
operator|.
name|value
argument_list|(
literal|"ipsum"
argument_list|)
operator|.
name|value
argument_list|(
literal|"dolor"
argument_list|)
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertXContentBuilder
argument_list|(
name|expected
argument_list|,
name|newXContentBuilder
argument_list|(
literal|"tags"
argument_list|)
operator|.
name|startObject
argument_list|()
operator|.
name|startArray
argument_list|(
literal|"tags"
argument_list|)
operator|.
name|value
argument_list|(
literal|"lorem"
argument_list|)
operator|.
name|value
argument_list|(
literal|"ipsum"
argument_list|)
operator|.
name|value
argument_list|(
literal|"dolor"
argument_list|)
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test: Array of values (with filtering)
name|assertXContentBuilder
argument_list|(
name|newXContentBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|,
name|newXContentBuilder
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|startObject
argument_list|()
operator|.
name|startArray
argument_list|(
literal|"tags"
argument_list|)
operator|.
name|value
argument_list|(
literal|"lorem"
argument_list|)
operator|.
name|value
argument_list|(
literal|"ipsum"
argument_list|)
operator|.
name|value
argument_list|(
literal|"dolor"
argument_list|)
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test: Array of objects (no filtering)
name|expected
operator|=
name|newXContentBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startArray
argument_list|(
literal|"tags"
argument_list|)
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"lastname"
argument_list|,
literal|"lorem"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"firstname"
argument_list|,
literal|"ipsum"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|assertXContentBuilder
argument_list|(
name|expected
argument_list|,
name|newXContentBuilder
argument_list|(
literal|"t*"
argument_list|)
operator|.
name|startObject
argument_list|()
operator|.
name|startArray
argument_list|(
literal|"tags"
argument_list|)
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"lastname"
argument_list|,
literal|"lorem"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"firstname"
argument_list|,
literal|"ipsum"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertXContentBuilder
argument_list|(
name|expected
argument_list|,
name|newXContentBuilder
argument_list|(
literal|"tags"
argument_list|)
operator|.
name|startObject
argument_list|()
operator|.
name|startArray
argument_list|(
literal|"tags"
argument_list|)
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"lastname"
argument_list|,
literal|"lorem"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"firstname"
argument_list|,
literal|"ipsum"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test: Array of objects (with filtering)
name|assertXContentBuilder
argument_list|(
name|newXContentBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|,
name|newXContentBuilder
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|startObject
argument_list|()
operator|.
name|startArray
argument_list|(
literal|"tags"
argument_list|)
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"lastname"
argument_list|,
literal|"lorem"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"firstname"
argument_list|,
literal|"ipsum"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test: Array of objects (with partial filtering)
name|expected
operator|=
name|newXContentBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startArray
argument_list|(
literal|"tags"
argument_list|)
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"firstname"
argument_list|,
literal|"ipsum"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|assertXContentBuilder
argument_list|(
name|expected
argument_list|,
name|newXContentBuilder
argument_list|(
literal|"t*.firstname"
argument_list|)
operator|.
name|startObject
argument_list|()
operator|.
name|startArray
argument_list|(
literal|"tags"
argument_list|)
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"lastname"
argument_list|,
literal|"lorem"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"firstname"
argument_list|,
literal|"ipsum"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

