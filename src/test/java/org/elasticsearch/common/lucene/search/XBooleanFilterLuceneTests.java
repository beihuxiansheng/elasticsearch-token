begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.elasticsearch.common.lucene.search
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|search
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|core
operator|.
name|WhitespaceAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|TextField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|FilterClause
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|TermsFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|RAMDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Bits
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|FixedBitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|Lucene
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|MatcherAssert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|core
operator|.
name|IsEqual
operator|.
name|equalTo
import|;
end_import

begin_comment
comment|/**  * Tests ported from Lucene.  */
end_comment

begin_class
DECL|class|XBooleanFilterLuceneTests
specifier|public
class|class
name|XBooleanFilterLuceneTests
block|{
DECL|field|directory
specifier|private
name|Directory
name|directory
decl_stmt|;
DECL|field|reader
specifier|private
name|AtomicReader
name|reader
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|directory
operator|=
operator|new
name|RAMDirectory
argument_list|()
expr_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|directory
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|Lucene
operator|.
name|VERSION
argument_list|,
operator|new
name|WhitespaceAnalyzer
argument_list|(
name|Lucene
operator|.
name|VERSION
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
comment|//Add series of docs with filterable fields : acces rights, prices, dates and "in-stock" flags
name|addDoc
argument_list|(
name|writer
argument_list|,
literal|"admin guest"
argument_list|,
literal|"010"
argument_list|,
literal|"20040101"
argument_list|,
literal|"Y"
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
name|writer
argument_list|,
literal|"guest"
argument_list|,
literal|"020"
argument_list|,
literal|"20040101"
argument_list|,
literal|"Y"
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
name|writer
argument_list|,
literal|"guest"
argument_list|,
literal|"020"
argument_list|,
literal|"20050101"
argument_list|,
literal|"Y"
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
name|writer
argument_list|,
literal|"admin"
argument_list|,
literal|"020"
argument_list|,
literal|"20050101"
argument_list|,
literal|"Maybe"
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
name|writer
argument_list|,
literal|"admin guest"
argument_list|,
literal|"030"
argument_list|,
literal|"20050101"
argument_list|,
literal|"N"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader
operator|=
name|SlowCompositeReaderWrapper
operator|.
name|wrap
argument_list|(
name|DirectoryReader
operator|.
name|open
argument_list|(
name|directory
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|directory
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|addDoc
specifier|private
name|void
name|addDoc
parameter_list|(
name|IndexWriter
name|writer
parameter_list|,
name|String
name|accessRights
parameter_list|,
name|String
name|price
parameter_list|,
name|String
name|date
parameter_list|,
name|String
name|inStock
parameter_list|)
throws|throws
name|IOException
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"accessRights"
argument_list|,
name|accessRights
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"price"
argument_list|,
name|price
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"date"
argument_list|,
name|date
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"inStock"
argument_list|,
name|inStock
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
DECL|method|getRangeFilter
specifier|private
name|Filter
name|getRangeFilter
parameter_list|(
name|String
name|field
parameter_list|,
name|String
name|lowerPrice
parameter_list|,
name|String
name|upperPrice
parameter_list|)
block|{
return|return
name|TermRangeFilter
operator|.
name|newStringRange
argument_list|(
name|field
argument_list|,
name|lowerPrice
argument_list|,
name|upperPrice
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
return|;
block|}
DECL|method|getTermsFilter
specifier|private
name|Filter
name|getTermsFilter
parameter_list|(
name|String
name|field
parameter_list|,
name|String
name|text
parameter_list|)
block|{
return|return
operator|new
name|TermsFilter
argument_list|(
operator|new
name|Term
argument_list|(
name|field
argument_list|,
name|text
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getWrappedTermQuery
specifier|private
name|Filter
name|getWrappedTermQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|String
name|text
parameter_list|)
block|{
return|return
operator|new
name|QueryWrapperFilter
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|field
argument_list|,
name|text
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getEmptyFilter
specifier|private
name|Filter
name|getEmptyFilter
parameter_list|()
block|{
return|return
operator|new
name|Filter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|DocIdSet
name|getDocIdSet
parameter_list|(
name|AtomicReaderContext
name|context
parameter_list|,
name|Bits
name|acceptDocs
parameter_list|)
block|{
return|return
operator|new
name|FixedBitSet
argument_list|(
name|context
operator|.
name|reader
argument_list|()
operator|.
name|maxDoc
argument_list|()
argument_list|)
return|;
block|}
block|}
return|;
block|}
DECL|method|getNullDISFilter
specifier|private
name|Filter
name|getNullDISFilter
parameter_list|()
block|{
return|return
operator|new
name|Filter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|DocIdSet
name|getDocIdSet
parameter_list|(
name|AtomicReaderContext
name|context
parameter_list|,
name|Bits
name|acceptDocs
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
return|;
block|}
DECL|method|getNullDISIFilter
specifier|private
name|Filter
name|getNullDISIFilter
parameter_list|()
block|{
return|return
operator|new
name|Filter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|DocIdSet
name|getDocIdSet
parameter_list|(
name|AtomicReaderContext
name|context
parameter_list|,
name|Bits
name|acceptDocs
parameter_list|)
block|{
return|return
operator|new
name|DocIdSet
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|DocIdSetIterator
name|iterator
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isCacheable
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
return|;
block|}
block|}
return|;
block|}
DECL|method|tstFilterCard
specifier|private
name|void
name|tstFilterCard
parameter_list|(
name|String
name|mes
parameter_list|,
name|int
name|expected
parameter_list|,
name|Filter
name|filt
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|actual
init|=
literal|0
decl_stmt|;
name|DocIdSet
name|docIdSet
init|=
name|filt
operator|.
name|getDocIdSet
argument_list|(
name|reader
operator|.
name|getContext
argument_list|()
argument_list|,
name|reader
operator|.
name|getLiveDocs
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|docIdSet
operator|!=
literal|null
condition|)
block|{
name|DocIdSetIterator
name|disi
init|=
name|docIdSet
operator|.
name|iterator
argument_list|()
decl_stmt|;
if|if
condition|(
name|disi
operator|!=
literal|null
condition|)
block|{
while|while
condition|(
name|disi
operator|.
name|nextDoc
argument_list|()
operator|!=
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|)
block|{
name|actual
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertThat
argument_list|(
name|mes
argument_list|,
name|actual
argument_list|,
name|equalTo
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testShould
specifier|public
name|void
name|testShould
parameter_list|()
throws|throws
name|Exception
block|{
name|XBooleanFilter
name|booleanFilter
init|=
operator|new
name|XBooleanFilter
argument_list|()
decl_stmt|;
name|booleanFilter
operator|.
name|add
argument_list|(
name|getTermsFilter
argument_list|(
literal|"price"
argument_list|,
literal|"030"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|tstFilterCard
argument_list|(
literal|"Should retrieves only 1 doc"
argument_list|,
literal|1
argument_list|,
name|booleanFilter
argument_list|)
expr_stmt|;
comment|// same with a real DISI (no OpenBitSetIterator)
name|booleanFilter
operator|=
operator|new
name|XBooleanFilter
argument_list|()
expr_stmt|;
name|booleanFilter
operator|.
name|add
argument_list|(
name|getWrappedTermQuery
argument_list|(
literal|"price"
argument_list|,
literal|"030"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|tstFilterCard
argument_list|(
literal|"Should retrieves only 1 doc"
argument_list|,
literal|1
argument_list|,
name|booleanFilter
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testShoulds
specifier|public
name|void
name|testShoulds
parameter_list|()
throws|throws
name|Exception
block|{
name|XBooleanFilter
name|booleanFilter
init|=
operator|new
name|XBooleanFilter
argument_list|()
decl_stmt|;
name|booleanFilter
operator|.
name|add
argument_list|(
name|getRangeFilter
argument_list|(
literal|"price"
argument_list|,
literal|"010"
argument_list|,
literal|"020"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|booleanFilter
operator|.
name|add
argument_list|(
name|getRangeFilter
argument_list|(
literal|"price"
argument_list|,
literal|"020"
argument_list|,
literal|"030"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|tstFilterCard
argument_list|(
literal|"Shoulds are Ored together"
argument_list|,
literal|5
argument_list|,
name|booleanFilter
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testShouldsAndMustNot
specifier|public
name|void
name|testShouldsAndMustNot
parameter_list|()
throws|throws
name|Exception
block|{
name|XBooleanFilter
name|booleanFilter
init|=
operator|new
name|XBooleanFilter
argument_list|()
decl_stmt|;
name|booleanFilter
operator|.
name|add
argument_list|(
name|getRangeFilter
argument_list|(
literal|"price"
argument_list|,
literal|"010"
argument_list|,
literal|"020"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|booleanFilter
operator|.
name|add
argument_list|(
name|getRangeFilter
argument_list|(
literal|"price"
argument_list|,
literal|"020"
argument_list|,
literal|"030"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|booleanFilter
operator|.
name|add
argument_list|(
name|getTermsFilter
argument_list|(
literal|"inStock"
argument_list|,
literal|"N"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST_NOT
argument_list|)
expr_stmt|;
name|tstFilterCard
argument_list|(
literal|"Shoulds Ored but AndNot"
argument_list|,
literal|4
argument_list|,
name|booleanFilter
argument_list|)
expr_stmt|;
name|booleanFilter
operator|.
name|add
argument_list|(
name|getTermsFilter
argument_list|(
literal|"inStock"
argument_list|,
literal|"Maybe"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST_NOT
argument_list|)
expr_stmt|;
name|tstFilterCard
argument_list|(
literal|"Shoulds Ored but AndNots"
argument_list|,
literal|3
argument_list|,
name|booleanFilter
argument_list|)
expr_stmt|;
comment|// same with a real DISI (no OpenBitSetIterator)
name|booleanFilter
operator|=
operator|new
name|XBooleanFilter
argument_list|()
expr_stmt|;
name|booleanFilter
operator|.
name|add
argument_list|(
name|getRangeFilter
argument_list|(
literal|"price"
argument_list|,
literal|"010"
argument_list|,
literal|"020"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|booleanFilter
operator|.
name|add
argument_list|(
name|getRangeFilter
argument_list|(
literal|"price"
argument_list|,
literal|"020"
argument_list|,
literal|"030"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|booleanFilter
operator|.
name|add
argument_list|(
name|getWrappedTermQuery
argument_list|(
literal|"inStock"
argument_list|,
literal|"N"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST_NOT
argument_list|)
expr_stmt|;
name|tstFilterCard
argument_list|(
literal|"Shoulds Ored but AndNot"
argument_list|,
literal|4
argument_list|,
name|booleanFilter
argument_list|)
expr_stmt|;
name|booleanFilter
operator|.
name|add
argument_list|(
name|getWrappedTermQuery
argument_list|(
literal|"inStock"
argument_list|,
literal|"Maybe"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST_NOT
argument_list|)
expr_stmt|;
name|tstFilterCard
argument_list|(
literal|"Shoulds Ored but AndNots"
argument_list|,
literal|3
argument_list|,
name|booleanFilter
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testShouldsAndMust
specifier|public
name|void
name|testShouldsAndMust
parameter_list|()
throws|throws
name|Exception
block|{
name|XBooleanFilter
name|booleanFilter
init|=
operator|new
name|XBooleanFilter
argument_list|()
decl_stmt|;
name|booleanFilter
operator|.
name|add
argument_list|(
name|getRangeFilter
argument_list|(
literal|"price"
argument_list|,
literal|"010"
argument_list|,
literal|"020"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|booleanFilter
operator|.
name|add
argument_list|(
name|getRangeFilter
argument_list|(
literal|"price"
argument_list|,
literal|"020"
argument_list|,
literal|"030"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|booleanFilter
operator|.
name|add
argument_list|(
name|getTermsFilter
argument_list|(
literal|"accessRights"
argument_list|,
literal|"admin"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|tstFilterCard
argument_list|(
literal|"Shoulds Ored but MUST"
argument_list|,
literal|3
argument_list|,
name|booleanFilter
argument_list|)
expr_stmt|;
comment|// same with a real DISI (no OpenBitSetIterator)
name|booleanFilter
operator|=
operator|new
name|XBooleanFilter
argument_list|()
expr_stmt|;
name|booleanFilter
operator|.
name|add
argument_list|(
name|getRangeFilter
argument_list|(
literal|"price"
argument_list|,
literal|"010"
argument_list|,
literal|"020"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|booleanFilter
operator|.
name|add
argument_list|(
name|getRangeFilter
argument_list|(
literal|"price"
argument_list|,
literal|"020"
argument_list|,
literal|"030"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|booleanFilter
operator|.
name|add
argument_list|(
name|getWrappedTermQuery
argument_list|(
literal|"accessRights"
argument_list|,
literal|"admin"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|tstFilterCard
argument_list|(
literal|"Shoulds Ored but MUST"
argument_list|,
literal|3
argument_list|,
name|booleanFilter
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testShouldsAndMusts
specifier|public
name|void
name|testShouldsAndMusts
parameter_list|()
throws|throws
name|Exception
block|{
name|XBooleanFilter
name|booleanFilter
init|=
operator|new
name|XBooleanFilter
argument_list|()
decl_stmt|;
name|booleanFilter
operator|.
name|add
argument_list|(
name|getRangeFilter
argument_list|(
literal|"price"
argument_list|,
literal|"010"
argument_list|,
literal|"020"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|booleanFilter
operator|.
name|add
argument_list|(
name|getRangeFilter
argument_list|(
literal|"price"
argument_list|,
literal|"020"
argument_list|,
literal|"030"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|booleanFilter
operator|.
name|add
argument_list|(
name|getTermsFilter
argument_list|(
literal|"accessRights"
argument_list|,
literal|"admin"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|booleanFilter
operator|.
name|add
argument_list|(
name|getRangeFilter
argument_list|(
literal|"date"
argument_list|,
literal|"20040101"
argument_list|,
literal|"20041231"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|tstFilterCard
argument_list|(
literal|"Shoulds Ored but MUSTs ANDED"
argument_list|,
literal|1
argument_list|,
name|booleanFilter
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testShouldsAndMustsAndMustNot
specifier|public
name|void
name|testShouldsAndMustsAndMustNot
parameter_list|()
throws|throws
name|Exception
block|{
name|XBooleanFilter
name|booleanFilter
init|=
operator|new
name|XBooleanFilter
argument_list|()
decl_stmt|;
name|booleanFilter
operator|.
name|add
argument_list|(
name|getRangeFilter
argument_list|(
literal|"price"
argument_list|,
literal|"030"
argument_list|,
literal|"040"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|booleanFilter
operator|.
name|add
argument_list|(
name|getTermsFilter
argument_list|(
literal|"accessRights"
argument_list|,
literal|"admin"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|booleanFilter
operator|.
name|add
argument_list|(
name|getRangeFilter
argument_list|(
literal|"date"
argument_list|,
literal|"20050101"
argument_list|,
literal|"20051231"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|booleanFilter
operator|.
name|add
argument_list|(
name|getTermsFilter
argument_list|(
literal|"inStock"
argument_list|,
literal|"N"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST_NOT
argument_list|)
expr_stmt|;
name|tstFilterCard
argument_list|(
literal|"Shoulds Ored but MUSTs ANDED and MustNot"
argument_list|,
literal|0
argument_list|,
name|booleanFilter
argument_list|)
expr_stmt|;
comment|// same with a real DISI (no OpenBitSetIterator)
name|booleanFilter
operator|=
operator|new
name|XBooleanFilter
argument_list|()
expr_stmt|;
name|booleanFilter
operator|.
name|add
argument_list|(
name|getRangeFilter
argument_list|(
literal|"price"
argument_list|,
literal|"030"
argument_list|,
literal|"040"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|booleanFilter
operator|.
name|add
argument_list|(
name|getWrappedTermQuery
argument_list|(
literal|"accessRights"
argument_list|,
literal|"admin"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|booleanFilter
operator|.
name|add
argument_list|(
name|getRangeFilter
argument_list|(
literal|"date"
argument_list|,
literal|"20050101"
argument_list|,
literal|"20051231"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|booleanFilter
operator|.
name|add
argument_list|(
name|getWrappedTermQuery
argument_list|(
literal|"inStock"
argument_list|,
literal|"N"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST_NOT
argument_list|)
expr_stmt|;
name|tstFilterCard
argument_list|(
literal|"Shoulds Ored but MUSTs ANDED and MustNot"
argument_list|,
literal|0
argument_list|,
name|booleanFilter
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testJustMust
specifier|public
name|void
name|testJustMust
parameter_list|()
throws|throws
name|Exception
block|{
name|XBooleanFilter
name|booleanFilter
init|=
operator|new
name|XBooleanFilter
argument_list|()
decl_stmt|;
name|booleanFilter
operator|.
name|add
argument_list|(
name|getTermsFilter
argument_list|(
literal|"accessRights"
argument_list|,
literal|"admin"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|tstFilterCard
argument_list|(
literal|"MUST"
argument_list|,
literal|3
argument_list|,
name|booleanFilter
argument_list|)
expr_stmt|;
comment|// same with a real DISI (no OpenBitSetIterator)
name|booleanFilter
operator|=
operator|new
name|XBooleanFilter
argument_list|()
expr_stmt|;
name|booleanFilter
operator|.
name|add
argument_list|(
name|getWrappedTermQuery
argument_list|(
literal|"accessRights"
argument_list|,
literal|"admin"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|tstFilterCard
argument_list|(
literal|"MUST"
argument_list|,
literal|3
argument_list|,
name|booleanFilter
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testJustMustNot
specifier|public
name|void
name|testJustMustNot
parameter_list|()
throws|throws
name|Exception
block|{
name|XBooleanFilter
name|booleanFilter
init|=
operator|new
name|XBooleanFilter
argument_list|()
decl_stmt|;
name|booleanFilter
operator|.
name|add
argument_list|(
name|getTermsFilter
argument_list|(
literal|"inStock"
argument_list|,
literal|"N"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST_NOT
argument_list|)
expr_stmt|;
name|tstFilterCard
argument_list|(
literal|"MUST_NOT"
argument_list|,
literal|4
argument_list|,
name|booleanFilter
argument_list|)
expr_stmt|;
comment|// same with a real DISI (no OpenBitSetIterator)
name|booleanFilter
operator|=
operator|new
name|XBooleanFilter
argument_list|()
expr_stmt|;
name|booleanFilter
operator|.
name|add
argument_list|(
name|getWrappedTermQuery
argument_list|(
literal|"inStock"
argument_list|,
literal|"N"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST_NOT
argument_list|)
expr_stmt|;
name|tstFilterCard
argument_list|(
literal|"MUST_NOT"
argument_list|,
literal|4
argument_list|,
name|booleanFilter
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMustAndMustNot
specifier|public
name|void
name|testMustAndMustNot
parameter_list|()
throws|throws
name|Exception
block|{
name|XBooleanFilter
name|booleanFilter
init|=
operator|new
name|XBooleanFilter
argument_list|()
decl_stmt|;
name|booleanFilter
operator|.
name|add
argument_list|(
name|getTermsFilter
argument_list|(
literal|"inStock"
argument_list|,
literal|"N"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|booleanFilter
operator|.
name|add
argument_list|(
name|getTermsFilter
argument_list|(
literal|"price"
argument_list|,
literal|"030"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST_NOT
argument_list|)
expr_stmt|;
name|tstFilterCard
argument_list|(
literal|"MUST_NOT wins over MUST for same docs"
argument_list|,
literal|0
argument_list|,
name|booleanFilter
argument_list|)
expr_stmt|;
comment|// same with a real DISI (no OpenBitSetIterator)
name|booleanFilter
operator|=
operator|new
name|XBooleanFilter
argument_list|()
expr_stmt|;
name|booleanFilter
operator|.
name|add
argument_list|(
name|getWrappedTermQuery
argument_list|(
literal|"inStock"
argument_list|,
literal|"N"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|booleanFilter
operator|.
name|add
argument_list|(
name|getWrappedTermQuery
argument_list|(
literal|"price"
argument_list|,
literal|"030"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST_NOT
argument_list|)
expr_stmt|;
name|tstFilterCard
argument_list|(
literal|"MUST_NOT wins over MUST for same docs"
argument_list|,
literal|0
argument_list|,
name|booleanFilter
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEmpty
specifier|public
name|void
name|testEmpty
parameter_list|()
throws|throws
name|Exception
block|{
name|XBooleanFilter
name|booleanFilter
init|=
operator|new
name|XBooleanFilter
argument_list|()
decl_stmt|;
name|tstFilterCard
argument_list|(
literal|"empty XBooleanFilter returns no results"
argument_list|,
literal|0
argument_list|,
name|booleanFilter
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCombinedNullDocIdSets
specifier|public
name|void
name|testCombinedNullDocIdSets
parameter_list|()
throws|throws
name|Exception
block|{
name|XBooleanFilter
name|booleanFilter
init|=
operator|new
name|XBooleanFilter
argument_list|()
decl_stmt|;
name|booleanFilter
operator|.
name|add
argument_list|(
name|getTermsFilter
argument_list|(
literal|"price"
argument_list|,
literal|"030"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|booleanFilter
operator|.
name|add
argument_list|(
name|getNullDISFilter
argument_list|()
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|tstFilterCard
argument_list|(
literal|"A MUST filter that returns a null DIS should never return documents"
argument_list|,
literal|0
argument_list|,
name|booleanFilter
argument_list|)
expr_stmt|;
name|booleanFilter
operator|=
operator|new
name|XBooleanFilter
argument_list|()
expr_stmt|;
name|booleanFilter
operator|.
name|add
argument_list|(
name|getTermsFilter
argument_list|(
literal|"price"
argument_list|,
literal|"030"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|booleanFilter
operator|.
name|add
argument_list|(
name|getNullDISIFilter
argument_list|()
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|tstFilterCard
argument_list|(
literal|"A MUST filter that returns a null DISI should never return documents"
argument_list|,
literal|0
argument_list|,
name|booleanFilter
argument_list|)
expr_stmt|;
name|booleanFilter
operator|=
operator|new
name|XBooleanFilter
argument_list|()
expr_stmt|;
name|booleanFilter
operator|.
name|add
argument_list|(
name|getTermsFilter
argument_list|(
literal|"price"
argument_list|,
literal|"030"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|booleanFilter
operator|.
name|add
argument_list|(
name|getNullDISFilter
argument_list|()
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|tstFilterCard
argument_list|(
literal|"A SHOULD filter that returns a null DIS should be invisible"
argument_list|,
literal|1
argument_list|,
name|booleanFilter
argument_list|)
expr_stmt|;
name|booleanFilter
operator|=
operator|new
name|XBooleanFilter
argument_list|()
expr_stmt|;
name|booleanFilter
operator|.
name|add
argument_list|(
name|getTermsFilter
argument_list|(
literal|"price"
argument_list|,
literal|"030"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|booleanFilter
operator|.
name|add
argument_list|(
name|getNullDISIFilter
argument_list|()
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|tstFilterCard
argument_list|(
literal|"A SHOULD filter that returns a null DISI should be invisible"
argument_list|,
literal|1
argument_list|,
name|booleanFilter
argument_list|)
expr_stmt|;
name|booleanFilter
operator|=
operator|new
name|XBooleanFilter
argument_list|()
expr_stmt|;
name|booleanFilter
operator|.
name|add
argument_list|(
name|getTermsFilter
argument_list|(
literal|"price"
argument_list|,
literal|"030"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|booleanFilter
operator|.
name|add
argument_list|(
name|getNullDISFilter
argument_list|()
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST_NOT
argument_list|)
expr_stmt|;
name|tstFilterCard
argument_list|(
literal|"A MUST_NOT filter that returns a null DIS should be invisible"
argument_list|,
literal|1
argument_list|,
name|booleanFilter
argument_list|)
expr_stmt|;
name|booleanFilter
operator|=
operator|new
name|XBooleanFilter
argument_list|()
expr_stmt|;
name|booleanFilter
operator|.
name|add
argument_list|(
name|getTermsFilter
argument_list|(
literal|"price"
argument_list|,
literal|"030"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|booleanFilter
operator|.
name|add
argument_list|(
name|getNullDISIFilter
argument_list|()
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST_NOT
argument_list|)
expr_stmt|;
name|tstFilterCard
argument_list|(
literal|"A MUST_NOT filter that returns a null DISI should be invisible"
argument_list|,
literal|1
argument_list|,
name|booleanFilter
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testJustNullDocIdSets
specifier|public
name|void
name|testJustNullDocIdSets
parameter_list|()
throws|throws
name|Exception
block|{
name|XBooleanFilter
name|booleanFilter
init|=
operator|new
name|XBooleanFilter
argument_list|()
decl_stmt|;
name|booleanFilter
operator|.
name|add
argument_list|(
name|getNullDISFilter
argument_list|()
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|tstFilterCard
argument_list|(
literal|"A MUST filter that returns a null DIS should never return documents"
argument_list|,
literal|0
argument_list|,
name|booleanFilter
argument_list|)
expr_stmt|;
name|booleanFilter
operator|=
operator|new
name|XBooleanFilter
argument_list|()
expr_stmt|;
name|booleanFilter
operator|.
name|add
argument_list|(
name|getNullDISIFilter
argument_list|()
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|tstFilterCard
argument_list|(
literal|"A MUST filter that returns a null DISI should never return documents"
argument_list|,
literal|0
argument_list|,
name|booleanFilter
argument_list|)
expr_stmt|;
name|booleanFilter
operator|=
operator|new
name|XBooleanFilter
argument_list|()
expr_stmt|;
name|booleanFilter
operator|.
name|add
argument_list|(
name|getNullDISFilter
argument_list|()
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|tstFilterCard
argument_list|(
literal|"A single SHOULD filter that returns a null DIS should never return documents"
argument_list|,
literal|0
argument_list|,
name|booleanFilter
argument_list|)
expr_stmt|;
name|booleanFilter
operator|=
operator|new
name|XBooleanFilter
argument_list|()
expr_stmt|;
name|booleanFilter
operator|.
name|add
argument_list|(
name|getNullDISIFilter
argument_list|()
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|tstFilterCard
argument_list|(
literal|"A single SHOULD filter that returns a null DISI should never return documents"
argument_list|,
literal|0
argument_list|,
name|booleanFilter
argument_list|)
expr_stmt|;
name|booleanFilter
operator|=
operator|new
name|XBooleanFilter
argument_list|()
expr_stmt|;
name|booleanFilter
operator|.
name|add
argument_list|(
name|getNullDISFilter
argument_list|()
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST_NOT
argument_list|)
expr_stmt|;
name|tstFilterCard
argument_list|(
literal|"A single MUST_NOT filter that returns a null DIS should be invisible"
argument_list|,
literal|5
argument_list|,
name|booleanFilter
argument_list|)
expr_stmt|;
name|booleanFilter
operator|=
operator|new
name|XBooleanFilter
argument_list|()
expr_stmt|;
name|booleanFilter
operator|.
name|add
argument_list|(
name|getNullDISIFilter
argument_list|()
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST_NOT
argument_list|)
expr_stmt|;
name|tstFilterCard
argument_list|(
literal|"A single MUST_NOT filter that returns a null DIS should be invisible"
argument_list|,
literal|5
argument_list|,
name|booleanFilter
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNonMatchingShouldsAndMusts
specifier|public
name|void
name|testNonMatchingShouldsAndMusts
parameter_list|()
throws|throws
name|Exception
block|{
name|XBooleanFilter
name|booleanFilter
init|=
operator|new
name|XBooleanFilter
argument_list|()
decl_stmt|;
name|booleanFilter
operator|.
name|add
argument_list|(
name|getEmptyFilter
argument_list|()
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|booleanFilter
operator|.
name|add
argument_list|(
name|getTermsFilter
argument_list|(
literal|"accessRights"
argument_list|,
literal|"admin"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|tstFilterCard
argument_list|(
literal|">0 shoulds with no matches should return no docs"
argument_list|,
literal|0
argument_list|,
name|booleanFilter
argument_list|)
expr_stmt|;
name|booleanFilter
operator|=
operator|new
name|XBooleanFilter
argument_list|()
expr_stmt|;
name|booleanFilter
operator|.
name|add
argument_list|(
name|getNullDISFilter
argument_list|()
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|booleanFilter
operator|.
name|add
argument_list|(
name|getTermsFilter
argument_list|(
literal|"accessRights"
argument_list|,
literal|"admin"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|tstFilterCard
argument_list|(
literal|">0 shoulds with no matches should return no docs"
argument_list|,
literal|0
argument_list|,
name|booleanFilter
argument_list|)
expr_stmt|;
name|booleanFilter
operator|=
operator|new
name|XBooleanFilter
argument_list|()
expr_stmt|;
name|booleanFilter
operator|.
name|add
argument_list|(
name|getNullDISIFilter
argument_list|()
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|booleanFilter
operator|.
name|add
argument_list|(
name|getTermsFilter
argument_list|(
literal|"accessRights"
argument_list|,
literal|"admin"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|tstFilterCard
argument_list|(
literal|">0 shoulds with no matches should return no docs"
argument_list|,
literal|0
argument_list|,
name|booleanFilter
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testToStringOfBooleanFilterContainingTermsFilter
specifier|public
name|void
name|testToStringOfBooleanFilterContainingTermsFilter
parameter_list|()
block|{
name|XBooleanFilter
name|booleanFilter
init|=
operator|new
name|XBooleanFilter
argument_list|()
decl_stmt|;
name|booleanFilter
operator|.
name|add
argument_list|(
name|getTermsFilter
argument_list|(
literal|"inStock"
argument_list|,
literal|"N"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|booleanFilter
operator|.
name|add
argument_list|(
name|getTermsFilter
argument_list|(
literal|"isFragile"
argument_list|,
literal|"Y"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"BooleanFilter(+inStock:N +isFragile:Y)"
argument_list|,
name|equalTo
argument_list|(
name|booleanFilter
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testToStringOfWrappedBooleanFilters
specifier|public
name|void
name|testToStringOfWrappedBooleanFilters
parameter_list|()
block|{
name|XBooleanFilter
name|orFilter
init|=
operator|new
name|XBooleanFilter
argument_list|()
decl_stmt|;
name|XBooleanFilter
name|stockFilter
init|=
operator|new
name|XBooleanFilter
argument_list|()
decl_stmt|;
name|stockFilter
operator|.
name|add
argument_list|(
operator|new
name|FilterClause
argument_list|(
name|getTermsFilter
argument_list|(
literal|"inStock"
argument_list|,
literal|"Y"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
argument_list|)
expr_stmt|;
name|stockFilter
operator|.
name|add
argument_list|(
operator|new
name|FilterClause
argument_list|(
name|getTermsFilter
argument_list|(
literal|"barCode"
argument_list|,
literal|"12345678"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
argument_list|)
expr_stmt|;
name|orFilter
operator|.
name|add
argument_list|(
operator|new
name|FilterClause
argument_list|(
name|stockFilter
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
argument_list|)
expr_stmt|;
name|XBooleanFilter
name|productPropertyFilter
init|=
operator|new
name|XBooleanFilter
argument_list|()
decl_stmt|;
name|productPropertyFilter
operator|.
name|add
argument_list|(
operator|new
name|FilterClause
argument_list|(
name|getTermsFilter
argument_list|(
literal|"isHeavy"
argument_list|,
literal|"N"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
argument_list|)
expr_stmt|;
name|productPropertyFilter
operator|.
name|add
argument_list|(
operator|new
name|FilterClause
argument_list|(
name|getTermsFilter
argument_list|(
literal|"isDamaged"
argument_list|,
literal|"Y"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
argument_list|)
expr_stmt|;
name|orFilter
operator|.
name|add
argument_list|(
operator|new
name|FilterClause
argument_list|(
name|productPropertyFilter
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
argument_list|)
expr_stmt|;
name|XBooleanFilter
name|composedFilter
init|=
operator|new
name|XBooleanFilter
argument_list|()
decl_stmt|;
name|composedFilter
operator|.
name|add
argument_list|(
operator|new
name|FilterClause
argument_list|(
name|orFilter
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"BooleanFilter(+BooleanFilter(BooleanFilter(+inStock:Y +barCode:12345678) BooleanFilter(+isHeavy:N +isDamaged:Y)))"
argument_list|,
name|equalTo
argument_list|(
name|composedFilter
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

