begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.lucene.search.function
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|search
operator|.
name|function
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|TextField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Explanation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TopDocs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|RAMDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|Lucene
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|search
operator|.
name|Queries
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Test {@link RandomScoreFunction}  */
end_comment

begin_class
DECL|class|RandomScoreFunctionTests
specifier|public
class|class
name|RandomScoreFunctionTests
extends|extends
name|ElasticsearchTestCase
block|{
DECL|field|ids
specifier|private
specifier|final
name|String
index|[]
name|ids
init|=
block|{
literal|"1"
block|,
literal|"2"
block|,
literal|"3"
block|}
decl_stmt|;
DECL|field|writer
specifier|private
name|IndexWriter
name|writer
decl_stmt|;
DECL|field|reader
specifier|private
name|AtomicReader
name|reader
decl_stmt|;
annotation|@
name|After
DECL|method|closeReaderAndWriterIfUsed
specifier|public
name|void
name|closeReaderAndWriterIfUsed
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|reader
operator|!=
literal|null
condition|)
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|writer
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Create a "mock" {@link IndexSearcher} that uses an in-memory directory      * containing three documents whose IDs are "1", "2", and "3" respectively.      * @return Never {@code null}      * @throws IOException if an unexpected error occurs while mocking      */
DECL|method|mockSearcher
specifier|private
name|IndexSearcher
name|mockSearcher
parameter_list|()
throws|throws
name|IOException
block|{
name|writer
operator|=
operator|new
name|IndexWriter
argument_list|(
operator|new
name|RAMDirectory
argument_list|()
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|Lucene
operator|.
name|VERSION
argument_list|,
name|Lucene
operator|.
name|STANDARD_ANALYZER
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|id
range|:
name|ids
control|)
block|{
name|Document
name|document
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|document
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"_id"
argument_list|,
name|id
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|document
argument_list|)
expr_stmt|;
block|}
name|reader
operator|=
name|SlowCompositeReaderWrapper
operator|.
name|wrap
argument_list|(
name|DirectoryReader
operator|.
name|open
argument_list|(
name|writer
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|new
name|IndexSearcher
argument_list|(
name|reader
argument_list|)
return|;
block|}
comment|/**      * Given the same seed, the pseudo random number generator should match on      * each use given the same number of invocations.      */
annotation|@
name|Test
DECL|method|testPrngNextFloatIsConsistent
specifier|public
name|void
name|testPrngNextFloatIsConsistent
parameter_list|()
block|{
name|long
name|seed
init|=
name|randomLong
argument_list|()
decl_stmt|;
name|RandomScoreFunction
operator|.
name|PRNG
name|prng
init|=
operator|new
name|RandomScoreFunction
operator|.
name|PRNG
argument_list|(
name|seed
argument_list|)
decl_stmt|;
name|RandomScoreFunction
operator|.
name|PRNG
name|prng2
init|=
operator|new
name|RandomScoreFunction
operator|.
name|PRNG
argument_list|(
name|seed
argument_list|)
decl_stmt|;
comment|// The seed will be changing the entire time, so each value should be
comment|//  different
name|assertThat
argument_list|(
name|prng
operator|.
name|nextFloat
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|prng2
operator|.
name|nextFloat
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|prng
operator|.
name|nextFloat
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|prng2
operator|.
name|nextFloat
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|prng
operator|.
name|nextFloat
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|prng2
operator|.
name|nextFloat
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|prng
operator|.
name|nextFloat
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|prng2
operator|.
name|nextFloat
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPrngNextFloatSometimesFirstIsGreaterThanSecond
specifier|public
name|void
name|testPrngNextFloatSometimesFirstIsGreaterThanSecond
parameter_list|()
block|{
name|boolean
name|firstWasGreater
init|=
literal|false
decl_stmt|;
comment|// Since the results themselves are intended to be random, we cannot
comment|//  just do @Repeat(iterations = 100) because some iterations are
comment|//  expected to fail
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
operator|++
name|i
control|)
block|{
name|long
name|seed
init|=
name|randomLong
argument_list|()
decl_stmt|;
name|RandomScoreFunction
operator|.
name|PRNG
name|prng
init|=
operator|new
name|RandomScoreFunction
operator|.
name|PRNG
argument_list|(
name|seed
argument_list|)
decl_stmt|;
name|float
name|firstRandom
init|=
name|prng
operator|.
name|nextFloat
argument_list|()
decl_stmt|;
name|float
name|secondRandom
init|=
name|prng
operator|.
name|nextFloat
argument_list|()
decl_stmt|;
if|if
condition|(
name|firstRandom
operator|>
name|secondRandom
condition|)
block|{
name|firstWasGreater
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
literal|"First value was never greater than the second value"
argument_list|,
name|firstWasGreater
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPrngNextFloatSometimesFirstIsLessThanSecond
specifier|public
name|void
name|testPrngNextFloatSometimesFirstIsLessThanSecond
parameter_list|()
block|{
name|boolean
name|firstWasLess
init|=
literal|false
decl_stmt|;
comment|// Since the results themselves are intended to be random, we cannot
comment|//  just do @Repeat(iterations = 100) because some iterations are
comment|//  expected to fail
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000
condition|;
operator|++
name|i
control|)
block|{
name|long
name|seed
init|=
name|randomLong
argument_list|()
decl_stmt|;
name|RandomScoreFunction
operator|.
name|PRNG
name|prng
init|=
operator|new
name|RandomScoreFunction
operator|.
name|PRNG
argument_list|(
name|seed
argument_list|)
decl_stmt|;
name|float
name|firstRandom
init|=
name|prng
operator|.
name|nextFloat
argument_list|()
decl_stmt|;
name|float
name|secondRandom
init|=
name|prng
operator|.
name|nextFloat
argument_list|()
decl_stmt|;
if|if
condition|(
name|firstRandom
operator|<
name|secondRandom
condition|)
block|{
name|firstWasLess
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
literal|"First value was never less than the second value"
argument_list|,
name|firstWasLess
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testScorerResultsInRandomOrder
specifier|public
name|void
name|testScorerResultsInRandomOrder
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|idsNotSpotted
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|ids
argument_list|)
decl_stmt|;
name|IndexSearcher
name|searcher
init|=
name|mockSearcher
argument_list|()
decl_stmt|;
comment|// Since the results themselves are intended to be random, we cannot
comment|//  just do @Repeat(iterations = 100) because some iterations are
comment|//  expected to fail
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
operator|++
name|i
control|)
block|{
comment|// Randomly seeded to keep trying to shuffle without walking through
comment|//  values
name|RandomScoreFunction
name|function
init|=
operator|new
name|RandomScoreFunction
argument_list|(
name|randomLong
argument_list|()
argument_list|)
decl_stmt|;
comment|// fulfilling contract
name|function
operator|.
name|setNextReader
argument_list|(
name|reader
operator|.
name|getContext
argument_list|()
argument_list|)
expr_stmt|;
name|FunctionScoreQuery
name|query
init|=
operator|new
name|FunctionScoreQuery
argument_list|(
name|Queries
operator|.
name|newMatchAllQuery
argument_list|()
argument_list|,
name|function
argument_list|)
decl_stmt|;
comment|// Testing that we get a random result
name|TopDocs
name|docs
init|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|String
name|id
init|=
name|reader
operator|.
name|document
argument_list|(
name|docs
operator|.
name|scoreDocs
index|[
literal|0
index|]
operator|.
name|doc
argument_list|)
operator|.
name|getField
argument_list|(
literal|"_id"
argument_list|)
operator|.
name|stringValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|idsNotSpotted
operator|.
name|remove
argument_list|(
name|id
argument_list|)
operator|&&
name|idsNotSpotted
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// short circuit test because we succeeded
break|break;
block|}
block|}
name|assertThat
argument_list|(
name|idsNotSpotted
argument_list|,
name|empty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testExplainScoreReportsOriginalSeed
specifier|public
name|void
name|testExplainScoreReportsOriginalSeed
parameter_list|()
block|{
name|long
name|seed
init|=
name|randomLong
argument_list|()
decl_stmt|;
name|Explanation
name|subExplanation
init|=
operator|new
name|Explanation
argument_list|()
decl_stmt|;
name|RandomScoreFunction
name|function
init|=
operator|new
name|RandomScoreFunction
argument_list|(
name|seed
argument_list|)
decl_stmt|;
comment|// Trigger a random call to change the seed to ensure that we are
comment|//  reporting the _original_ seed
name|function
operator|.
name|score
argument_list|(
literal|0
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
comment|// Generate the randomScore explanation
name|Explanation
name|randomExplanation
init|=
name|function
operator|.
name|explainScore
argument_list|(
literal|0
argument_list|,
name|subExplanation
argument_list|)
decl_stmt|;
comment|// Original seed should be there
name|assertThat
argument_list|(
name|randomExplanation
operator|.
name|getDescription
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|""
operator|+
name|seed
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|randomExplanation
operator|.
name|getDetails
argument_list|()
argument_list|,
name|arrayContaining
argument_list|(
name|subExplanation
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

