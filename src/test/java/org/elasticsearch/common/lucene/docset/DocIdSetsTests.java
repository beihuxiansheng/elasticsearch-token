begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.lucene.docset
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|docset
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSetIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Bits
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|RoaringDocIdSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|DistanceUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|json
operator|.
name|JsonXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|Engine
operator|.
name|Searcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|FilterBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|FilterBuilders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|TermFilterBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchSingleNodeTest
import|;
end_import

begin_class
DECL|class|DocIdSetsTests
specifier|public
class|class
name|DocIdSetsTests
extends|extends
name|ElasticsearchSingleNodeTest
block|{
DECL|field|SINGLE_SHARD_SETTINGS
specifier|private
specifier|static
specifier|final
name|Settings
name|SINGLE_SHARD_SETTINGS
init|=
name|ImmutableSettings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
literal|1
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
DECL|method|test
specifier|private
name|void
name|test
parameter_list|(
name|IndexService
name|indexService
parameter_list|,
name|boolean
name|broken
parameter_list|,
name|FilterBuilder
name|filterBuilder
parameter_list|)
throws|throws
name|IOException
block|{
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareRefresh
argument_list|(
literal|"test"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|XContentBuilder
name|builder
init|=
name|filterBuilder
operator|.
name|toXContent
argument_list|(
name|JsonXContent
operator|.
name|contentBuilder
argument_list|()
argument_list|,
name|ToXContent
operator|.
name|EMPTY_PARAMS
argument_list|)
decl_stmt|;
name|XContentParser
name|parser
init|=
name|JsonXContent
operator|.
name|jsonXContent
operator|.
name|createParser
argument_list|(
name|builder
operator|.
name|bytes
argument_list|()
argument_list|)
decl_stmt|;
name|Filter
name|filter
init|=
name|indexService
operator|.
name|queryParserService
argument_list|()
operator|.
name|parseInnerFilter
argument_list|(
name|parser
argument_list|)
operator|.
name|filter
argument_list|()
decl_stmt|;
try|try
init|(
name|Searcher
name|searcher
init|=
name|indexService
operator|.
name|shardSafe
argument_list|(
literal|0
argument_list|)
operator|.
name|acquireSearcher
argument_list|(
literal|"test"
argument_list|)
init|)
block|{
specifier|final
name|LeafReaderContext
name|ctx
init|=
name|searcher
operator|.
name|reader
argument_list|()
operator|.
name|leaves
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|DocIdSet
name|set
init|=
name|filter
operator|.
name|getDocIdSet
argument_list|(
name|ctx
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|broken
argument_list|,
name|DocIdSets
operator|.
name|isBroken
argument_list|(
name|set
operator|.
name|iterator
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testTermIsNotBroken
specifier|public
name|void
name|testTermIsNotBroken
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexService
name|indexService
init|=
name|createIndex
argument_list|(
literal|"test"
argument_list|,
name|SINGLE_SHARD_SETTINGS
argument_list|,
literal|"type"
argument_list|,
literal|"l"
argument_list|,
literal|"type=long"
argument_list|)
decl_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"l"
argument_list|,
literal|7
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|TermFilterBuilder
name|filter
init|=
name|FilterBuilders
operator|.
name|termFilter
argument_list|(
literal|"l"
argument_list|,
literal|7
argument_list|)
operator|.
name|cache
argument_list|(
name|randomBoolean
argument_list|()
argument_list|)
decl_stmt|;
name|test
argument_list|(
name|indexService
argument_list|,
literal|false
argument_list|,
name|filter
argument_list|)
expr_stmt|;
block|}
DECL|method|testDefaultGeoIsBroken
specifier|public
name|void
name|testDefaultGeoIsBroken
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Geo is slow by default :'(
name|IndexService
name|indexService
init|=
name|createIndex
argument_list|(
literal|"test"
argument_list|,
name|SINGLE_SHARD_SETTINGS
argument_list|,
literal|"type"
argument_list|,
literal|"gp"
argument_list|,
literal|"type=geo_point"
argument_list|)
decl_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"gp"
argument_list|,
literal|"2,3"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|FilterBuilder
name|filter
init|=
name|FilterBuilders
operator|.
name|geoDistanceFilter
argument_list|(
literal|"gp"
argument_list|)
operator|.
name|distance
argument_list|(
literal|1000
argument_list|,
name|DistanceUnit
operator|.
name|KILOMETERS
argument_list|)
operator|.
name|point
argument_list|(
literal|3
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|test
argument_list|(
name|indexService
argument_list|,
literal|true
argument_list|,
name|filter
argument_list|)
expr_stmt|;
block|}
DECL|method|testIndexedGeoIsNotBroken
specifier|public
name|void
name|testIndexedGeoIsNotBroken
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Geo has a fast iterator when indexing lat,lon and using the "indexed" bbox optimization
name|IndexService
name|indexService
init|=
name|createIndex
argument_list|(
literal|"test"
argument_list|,
name|SINGLE_SHARD_SETTINGS
argument_list|,
literal|"type"
argument_list|,
literal|"gp"
argument_list|,
literal|"type=geo_point,lat_lon=true"
argument_list|)
decl_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"gp"
argument_list|,
literal|"2,3"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|FilterBuilder
name|filter
init|=
name|FilterBuilders
operator|.
name|geoDistanceFilter
argument_list|(
literal|"gp"
argument_list|)
operator|.
name|distance
argument_list|(
literal|1000
argument_list|,
name|DistanceUnit
operator|.
name|KILOMETERS
argument_list|)
operator|.
name|point
argument_list|(
literal|3
argument_list|,
literal|2
argument_list|)
operator|.
name|optimizeBbox
argument_list|(
literal|"indexed"
argument_list|)
decl_stmt|;
name|test
argument_list|(
name|indexService
argument_list|,
literal|false
argument_list|,
name|filter
argument_list|)
expr_stmt|;
block|}
DECL|method|testScriptIsBroken
specifier|public
name|void
name|testScriptIsBroken
parameter_list|()
throws|throws
name|IOException
block|{
comment|//  by nature unfortunately
name|IndexService
name|indexService
init|=
name|createIndex
argument_list|(
literal|"test"
argument_list|,
name|SINGLE_SHARD_SETTINGS
argument_list|,
literal|"type"
argument_list|,
literal|"l"
argument_list|,
literal|"type=long"
argument_list|)
decl_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"l"
argument_list|,
literal|7
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|FilterBuilder
name|filter
init|=
name|FilterBuilders
operator|.
name|scriptFilter
argument_list|(
literal|"doc['l'].value< 8"
argument_list|)
decl_stmt|;
name|test
argument_list|(
name|indexService
argument_list|,
literal|true
argument_list|,
name|filter
argument_list|)
expr_stmt|;
block|}
DECL|method|testCachedIsNotBroken
specifier|public
name|void
name|testCachedIsNotBroken
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexService
name|indexService
init|=
name|createIndex
argument_list|(
literal|"test"
argument_list|,
name|SINGLE_SHARD_SETTINGS
argument_list|,
literal|"type"
argument_list|,
literal|"l"
argument_list|,
literal|"type=long"
argument_list|)
decl_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"l"
argument_list|,
literal|7
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
comment|// This filter is inherently slow but by caching it we pay the price at caching time, not iteration
name|FilterBuilder
name|filter
init|=
name|FilterBuilders
operator|.
name|scriptFilter
argument_list|(
literal|"doc['l'].value< 8"
argument_list|)
operator|.
name|cache
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|test
argument_list|(
name|indexService
argument_list|,
literal|false
argument_list|,
name|filter
argument_list|)
expr_stmt|;
block|}
DECL|method|testOr
specifier|public
name|void
name|testOr
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexService
name|indexService
init|=
name|createIndex
argument_list|(
literal|"test"
argument_list|,
name|SINGLE_SHARD_SETTINGS
argument_list|,
literal|"type"
argument_list|,
literal|"l"
argument_list|,
literal|"type=long"
argument_list|)
decl_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"l"
argument_list|,
operator|new
name|long
index|[]
block|{
literal|7
block|,
literal|8
block|}
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
comment|// Or with fast clauses is fast
name|FilterBuilder
name|filter
init|=
name|FilterBuilders
operator|.
name|orFilter
argument_list|(
name|FilterBuilders
operator|.
name|termFilter
argument_list|(
literal|"l"
argument_list|,
literal|7
argument_list|)
argument_list|,
name|FilterBuilders
operator|.
name|termFilter
argument_list|(
literal|"l"
argument_list|,
literal|8
argument_list|)
argument_list|)
decl_stmt|;
name|test
argument_list|(
name|indexService
argument_list|,
literal|false
argument_list|,
name|filter
argument_list|)
expr_stmt|;
comment|// But if at least one clause is broken, it is broken
name|filter
operator|=
name|FilterBuilders
operator|.
name|orFilter
argument_list|(
name|FilterBuilders
operator|.
name|termFilter
argument_list|(
literal|"l"
argument_list|,
literal|7
argument_list|)
argument_list|,
name|FilterBuilders
operator|.
name|scriptFilter
argument_list|(
literal|"doc['l'].value< 8"
argument_list|)
argument_list|)
expr_stmt|;
name|test
argument_list|(
name|indexService
argument_list|,
literal|true
argument_list|,
name|filter
argument_list|)
expr_stmt|;
block|}
DECL|method|testAnd
specifier|public
name|void
name|testAnd
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexService
name|indexService
init|=
name|createIndex
argument_list|(
literal|"test"
argument_list|,
name|SINGLE_SHARD_SETTINGS
argument_list|,
literal|"type"
argument_list|,
literal|"l"
argument_list|,
literal|"type=long"
argument_list|)
decl_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"l"
argument_list|,
operator|new
name|long
index|[]
block|{
literal|7
block|,
literal|8
block|}
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
comment|// And with fast clauses is fast
name|FilterBuilder
name|filter
init|=
name|FilterBuilders
operator|.
name|andFilter
argument_list|(
name|FilterBuilders
operator|.
name|termFilter
argument_list|(
literal|"l"
argument_list|,
literal|7
argument_list|)
argument_list|,
name|FilterBuilders
operator|.
name|termFilter
argument_list|(
literal|"l"
argument_list|,
literal|8
argument_list|)
argument_list|)
decl_stmt|;
name|test
argument_list|(
name|indexService
argument_list|,
literal|false
argument_list|,
name|filter
argument_list|)
expr_stmt|;
comment|// If at least one clause is 'fast' and the other clauses supports random-access, it is still fast
name|filter
operator|=
name|FilterBuilders
operator|.
name|andFilter
argument_list|(
name|FilterBuilders
operator|.
name|termFilter
argument_list|(
literal|"l"
argument_list|,
literal|7
argument_list|)
operator|.
name|cache
argument_list|(
name|randomBoolean
argument_list|()
argument_list|)
argument_list|,
name|FilterBuilders
operator|.
name|scriptFilter
argument_list|(
literal|"doc['l'].value< 8"
argument_list|)
argument_list|)
expr_stmt|;
name|test
argument_list|(
name|indexService
argument_list|,
literal|false
argument_list|,
name|filter
argument_list|)
expr_stmt|;
comment|// However if all clauses are broken, the and is broken
name|filter
operator|=
name|FilterBuilders
operator|.
name|andFilter
argument_list|(
name|FilterBuilders
operator|.
name|scriptFilter
argument_list|(
literal|"doc['l'].value> 5"
argument_list|)
argument_list|,
name|FilterBuilders
operator|.
name|scriptFilter
argument_list|(
literal|"doc['l'].value< 8"
argument_list|)
argument_list|)
expr_stmt|;
name|test
argument_list|(
name|indexService
argument_list|,
literal|true
argument_list|,
name|filter
argument_list|)
expr_stmt|;
block|}
DECL|method|testAsSequentialAccessBits
specifier|public
name|void
name|testAsSequentialAccessBits
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|maxDoc
init|=
name|randomIntBetween
argument_list|(
literal|5
argument_list|,
literal|100
argument_list|)
decl_stmt|;
comment|// Null DocIdSet maps to empty bits
name|Bits
name|bits
init|=
name|DocIdSets
operator|.
name|asSequentialAccessBits
argument_list|(
literal|100
argument_list|,
literal|null
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxDoc
condition|;
operator|++
name|i
control|)
block|{
name|assertFalse
argument_list|(
name|bits
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Empty set maps to empty bits
name|bits
operator|=
name|DocIdSets
operator|.
name|asSequentialAccessBits
argument_list|(
literal|100
argument_list|,
name|DocIdSet
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxDoc
condition|;
operator|++
name|i
control|)
block|{
name|assertFalse
argument_list|(
name|bits
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|RoaringDocIdSet
operator|.
name|Builder
name|b
init|=
operator|new
name|RoaringDocIdSet
operator|.
name|Builder
argument_list|(
name|maxDoc
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|randomInt
argument_list|(
name|maxDoc
operator|-
literal|1
argument_list|)
init|;
name|i
operator|<
name|maxDoc
condition|;
name|i
operator|+=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
control|)
block|{
name|b
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
specifier|final
name|RoaringDocIdSet
name|set
init|=
name|b
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// RoaringDocIdSet does not support random access
name|assertNull
argument_list|(
name|set
operator|.
name|bits
argument_list|()
argument_list|)
expr_stmt|;
name|bits
operator|=
name|DocIdSets
operator|.
name|asSequentialAccessBits
argument_list|(
literal|100
argument_list|,
name|set
argument_list|)
expr_stmt|;
name|bits
operator|.
name|get
argument_list|(
literal|4
argument_list|)
expr_stmt|;
try|try
block|{
name|bits
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown an exception because of out-of-order consumption"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ElasticsearchIllegalArgumentException
name|e
parameter_list|)
block|{
comment|// ok
block|}
name|bits
operator|=
name|DocIdSets
operator|.
name|asSequentialAccessBits
argument_list|(
literal|100
argument_list|,
name|set
argument_list|)
expr_stmt|;
name|DocIdSetIterator
name|iterator
init|=
name|set
operator|.
name|iterator
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|randomInt
argument_list|(
name|maxDoc
operator|-
literal|1
argument_list|)
init|;
name|i
operator|<
name|maxDoc
condition|;
name|i
operator|+=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
control|)
block|{
if|if
condition|(
name|iterator
operator|.
name|docID
argument_list|()
operator|<
name|i
condition|)
block|{
name|iterator
operator|.
name|advance
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|iterator
operator|.
name|docID
argument_list|()
operator|==
name|i
argument_list|,
name|bits
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

