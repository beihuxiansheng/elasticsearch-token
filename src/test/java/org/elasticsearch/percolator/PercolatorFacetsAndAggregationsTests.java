begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.percolator
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|percolator
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|percolate
operator|.
name|PercolateRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|percolate
operator|.
name|PercolateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|Aggregation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregationBuilders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|terms
operator|.
name|Terms
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|facet
operator|.
name|FacetBuilders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|facet
operator|.
name|terms
operator|.
name|TermsFacet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchIntegrationTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|percolate
operator|.
name|PercolateSourceBuilder
operator|.
name|docBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
operator|.
name|jsonBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
operator|.
name|matchAllQuery
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
operator|.
name|matchQuery
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertMatchCount
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|arrayWithSize
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|PercolatorFacetsAndAggregationsTests
specifier|public
class|class
name|PercolatorFacetsAndAggregationsTests
extends|extends
name|ElasticsearchIntegrationTest
block|{
annotation|@
name|Test
comment|// Just test the integration with facets and aggregations, not the facet and aggregation functionality!
DECL|method|testFacetsAndAggregations
specifier|public
name|void
name|testFacetsAndAggregations
parameter_list|()
throws|throws
name|Exception
block|{
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|int
name|numQueries
init|=
name|atLeast
argument_list|(
literal|250
argument_list|)
decl_stmt|;
name|int
name|numUniqueQueries
init|=
name|between
argument_list|(
literal|1
argument_list|,
name|numQueries
operator|/
literal|2
argument_list|)
decl_stmt|;
name|String
index|[]
name|values
init|=
operator|new
name|String
index|[
name|numUniqueQueries
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|values
index|[
name|i
index|]
operator|=
literal|"value"
operator|+
name|i
expr_stmt|;
block|}
name|int
index|[]
name|expectedCount
init|=
operator|new
name|int
index|[
name|numUniqueQueries
index|]
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> registering {} queries"
argument_list|,
name|numQueries
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numQueries
condition|;
name|i
operator|++
control|)
block|{
name|String
name|value
init|=
name|values
index|[
name|i
operator|%
name|numUniqueQueries
index|]
decl_stmt|;
name|expectedCount
index|[
name|i
operator|%
name|numUniqueQueries
index|]
operator|++
expr_stmt|;
name|QueryBuilder
name|queryBuilder
init|=
name|matchQuery
argument_list|(
literal|"field1"
argument_list|,
name|value
argument_list|)
decl_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
name|PercolatorService
operator|.
name|TYPE_NAME
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"query"
argument_list|,
name|queryBuilder
argument_list|)
operator|.
name|field
argument_list|(
literal|"field2"
argument_list|,
literal|"b"
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
block|}
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareRefresh
argument_list|(
literal|"test"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numQueries
condition|;
name|i
operator|++
control|)
block|{
name|String
name|value
init|=
name|values
index|[
name|i
operator|%
name|numUniqueQueries
index|]
decl_stmt|;
name|PercolateRequestBuilder
name|percolateRequestBuilder
init|=
name|client
argument_list|()
operator|.
name|preparePercolate
argument_list|()
operator|.
name|setIndices
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setDocumentType
argument_list|(
literal|"type"
argument_list|)
operator|.
name|setPercolateDoc
argument_list|(
name|docBuilder
argument_list|()
operator|.
name|setDoc
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"field1"
argument_list|,
name|value
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|useAggs
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
if|if
condition|(
name|useAggs
condition|)
block|{
name|percolateRequestBuilder
operator|.
name|addAggregation
argument_list|(
name|AggregationBuilders
operator|.
name|terms
argument_list|(
literal|"a"
argument_list|)
operator|.
name|field
argument_list|(
literal|"field2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|percolateRequestBuilder
operator|.
name|addFacet
argument_list|(
name|FacetBuilders
operator|.
name|termsFacet
argument_list|(
literal|"a"
argument_list|)
operator|.
name|field
argument_list|(
literal|"field2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|percolateRequestBuilder
operator|.
name|setPercolateQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|percolateRequestBuilder
operator|.
name|setScore
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|percolateRequestBuilder
operator|.
name|setSort
argument_list|(
literal|true
argument_list|)
operator|.
name|setSize
argument_list|(
name|numQueries
argument_list|)
expr_stmt|;
block|}
name|boolean
name|countOnly
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
if|if
condition|(
name|countOnly
condition|)
block|{
name|percolateRequestBuilder
operator|.
name|setOnlyCount
argument_list|(
name|countOnly
argument_list|)
expr_stmt|;
block|}
name|PercolateResponse
name|response
init|=
name|percolateRequestBuilder
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertMatchCount
argument_list|(
name|response
argument_list|,
name|expectedCount
index|[
name|i
operator|%
name|numUniqueQueries
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|countOnly
condition|)
block|{
name|assertThat
argument_list|(
name|response
operator|.
name|getMatches
argument_list|()
argument_list|,
name|arrayWithSize
argument_list|(
name|expectedCount
index|[
name|i
operator|%
name|numUniqueQueries
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|useAggs
condition|)
block|{
name|List
argument_list|<
name|Aggregation
argument_list|>
name|aggregations
init|=
name|response
operator|.
name|getAggregations
argument_list|()
operator|.
name|asList
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|aggregations
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|aggregations
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Terms
operator|.
name|Bucket
argument_list|>
name|buckets
init|=
operator|new
name|ArrayList
argument_list|<
name|Terms
operator|.
name|Bucket
argument_list|>
argument_list|(
operator|(
operator|(
name|Terms
operator|)
name|aggregations
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|buckets
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|buckets
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|buckets
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getKey
argument_list|()
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|buckets
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|(
name|long
operator|)
name|expectedCount
index|[
name|i
operator|%
name|values
operator|.
name|length
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|response
operator|.
name|getFacets
argument_list|()
operator|.
name|facets
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getFacets
argument_list|()
operator|.
name|facets
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermsFacet
operator|)
name|response
operator|.
name|getFacets
argument_list|()
operator|.
name|facets
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getEntries
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermsFacet
operator|)
name|response
operator|.
name|getFacets
argument_list|()
operator|.
name|facets
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expectedCount
index|[
name|i
operator|%
name|values
operator|.
name|length
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|TermsFacet
operator|)
name|response
operator|.
name|getFacets
argument_list|()
operator|.
name|facets
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getTerm
argument_list|()
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

