begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.percolator
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|percolator
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ShardOperationFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|node
operator|.
name|stats
operator|.
name|NodeStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|node
operator|.
name|stats
operator|.
name|NodesStatsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|tasks
operator|.
name|PendingClusterTasksResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|alias
operator|.
name|IndicesAliasesResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|mapping
operator|.
name|get
operator|.
name|GetMappingsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|stats
operator|.
name|IndicesStatsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|count
operator|.
name|CountResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|percolate
operator|.
name|PercolateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|percolate
operator|.
name|PercolateSourceBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|IndicesOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|Requests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
operator|.
name|Builder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|DocumentMissingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|VersionConflictEngineException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|FilterBuilders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|MatchQueryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|functionscore
operator|.
name|factor
operator|.
name|FactorBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|highlight
operator|.
name|HighlightBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|sort
operator|.
name|SortBuilders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchIntegrationTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|junit
operator|.
name|annotations
operator|.
name|TestLogging
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|percolate
operator|.
name|PercolateSourceBuilder
operator|.
name|docBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
operator|.
name|builder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
operator|.
name|settingsBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|FilterBuilders
operator|.
name|termFilter
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|functionscore
operator|.
name|ScoreFunctionBuilders
operator|.
name|scriptFunction
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|PercolatorTests
specifier|public
class|class
name|PercolatorTests
extends|extends
name|ElasticsearchIntegrationTest
block|{
annotation|@
name|Test
DECL|method|testSimple1
specifier|public
name|void
name|testSimple1
parameter_list|()
throws|throws
name|Exception
block|{
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> Add dummy doc"
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field"
argument_list|,
literal|"value"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> register a queries"
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
name|PercolatorService
operator|.
name|TYPE_NAME
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"query"
argument_list|,
name|matchQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"b"
argument_list|)
argument_list|)
operator|.
name|field
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
name|PercolatorService
operator|.
name|TYPE_NAME
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"query"
argument_list|,
name|matchQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"c"
argument_list|)
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
name|PercolatorService
operator|.
name|TYPE_NAME
argument_list|,
literal|"3"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"query"
argument_list|,
name|boolQuery
argument_list|()
operator|.
name|must
argument_list|(
name|matchQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"b"
argument_list|)
argument_list|)
operator|.
name|must
argument_list|(
name|matchQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"c"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
name|PercolatorService
operator|.
name|TYPE_NAME
argument_list|,
literal|"4"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"query"
argument_list|,
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareRefresh
argument_list|(
literal|"test"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> Percolate doc with field1=b"
argument_list|)
expr_stmt|;
name|PercolateResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|preparePercolate
argument_list|()
operator|.
name|setIndices
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setDocumentType
argument_list|(
literal|"type"
argument_list|)
operator|.
name|setPercolateDoc
argument_list|(
name|docBuilder
argument_list|()
operator|.
name|setDoc
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"field1"
argument_list|,
literal|"b"
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertMatchCount
argument_list|(
name|response
argument_list|,
literal|2l
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getMatches
argument_list|()
argument_list|,
name|arrayWithSize
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|convertFromTextArray
argument_list|(
name|response
operator|.
name|getMatches
argument_list|()
argument_list|,
literal|"test"
argument_list|)
argument_list|,
name|arrayContainingInAnyOrder
argument_list|(
literal|"1"
argument_list|,
literal|"4"
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> Percolate doc with field1=c"
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|preparePercolate
argument_list|()
operator|.
name|setIndices
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setDocumentType
argument_list|(
literal|"type"
argument_list|)
operator|.
name|setPercolateDoc
argument_list|(
name|docBuilder
argument_list|()
operator|.
name|setDoc
argument_list|(
name|yamlBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"field1"
argument_list|,
literal|"c"
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertMatchCount
argument_list|(
name|response
argument_list|,
literal|2l
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getMatches
argument_list|()
argument_list|,
name|arrayWithSize
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|convertFromTextArray
argument_list|(
name|response
operator|.
name|getMatches
argument_list|()
argument_list|,
literal|"test"
argument_list|)
argument_list|,
name|arrayContainingInAnyOrder
argument_list|(
literal|"2"
argument_list|,
literal|"4"
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> Percolate doc with field1=b c"
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|preparePercolate
argument_list|()
operator|.
name|setIndices
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setDocumentType
argument_list|(
literal|"type"
argument_list|)
operator|.
name|setPercolateDoc
argument_list|(
name|docBuilder
argument_list|()
operator|.
name|setDoc
argument_list|(
name|smileBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"field1"
argument_list|,
literal|"b c"
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertMatchCount
argument_list|(
name|response
argument_list|,
literal|4l
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getMatches
argument_list|()
argument_list|,
name|arrayWithSize
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|convertFromTextArray
argument_list|(
name|response
operator|.
name|getMatches
argument_list|()
argument_list|,
literal|"test"
argument_list|)
argument_list|,
name|arrayContainingInAnyOrder
argument_list|(
literal|"1"
argument_list|,
literal|"2"
argument_list|,
literal|"3"
argument_list|,
literal|"4"
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> Percolate doc with field1=d"
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|preparePercolate
argument_list|()
operator|.
name|setIndices
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setDocumentType
argument_list|(
literal|"type"
argument_list|)
operator|.
name|setPercolateDoc
argument_list|(
name|docBuilder
argument_list|()
operator|.
name|setDoc
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"field1"
argument_list|,
literal|"d"
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertMatchCount
argument_list|(
name|response
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getMatches
argument_list|()
argument_list|,
name|arrayWithSize
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|convertFromTextArray
argument_list|(
name|response
operator|.
name|getMatches
argument_list|()
argument_list|,
literal|"test"
argument_list|)
argument_list|,
name|arrayContaining
argument_list|(
literal|"4"
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> Search dummy doc, percolate queries must not be included"
argument_list|)
expr_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|totalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|type
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"type"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|id
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> Percolate non existing doc"
argument_list|)
expr_stmt|;
try|try
block|{
name|client
argument_list|()
operator|.
name|preparePercolate
argument_list|()
operator|.
name|setIndices
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setDocumentType
argument_list|(
literal|"type"
argument_list|)
operator|.
name|setGetRequest
argument_list|(
name|Requests
operator|.
name|getRequest
argument_list|(
literal|"test"
argument_list|)
operator|.
name|type
argument_list|(
literal|"type"
argument_list|)
operator|.
name|id
argument_list|(
literal|"5"
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Exception should have been thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DocumentMissingException
name|e
parameter_list|)
block|{         }
block|}
annotation|@
name|Test
DECL|method|testSimple2
specifier|public
name|void
name|testSimple2
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
literal|"field1"
argument_list|,
literal|"type=long"
argument_list|)
argument_list|)
expr_stmt|;
comment|// introduce the doc
name|XContentBuilder
name|doc
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"doc"
argument_list|)
operator|.
name|field
argument_list|(
literal|"field1"
argument_list|,
literal|1
argument_list|)
operator|.
name|field
argument_list|(
literal|"field2"
argument_list|,
literal|"value"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|PercolateResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|preparePercolate
argument_list|()
operator|.
name|setSource
argument_list|(
name|doc
argument_list|)
operator|.
name|setIndices
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setDocumentType
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertMatchCount
argument_list|(
name|response
argument_list|,
literal|0l
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getMatches
argument_list|()
argument_list|,
name|emptyArray
argument_list|()
argument_list|)
expr_stmt|;
comment|// add first query...
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
name|PercolatorService
operator|.
name|TYPE_NAME
argument_list|,
literal|"test1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"query"
argument_list|,
name|termQuery
argument_list|(
literal|"field2"
argument_list|,
literal|"value"
argument_list|)
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|preparePercolate
argument_list|()
operator|.
name|setIndices
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setDocumentType
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|doc
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertMatchCount
argument_list|(
name|response
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getMatches
argument_list|()
argument_list|,
name|arrayWithSize
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|convertFromTextArray
argument_list|(
name|response
operator|.
name|getMatches
argument_list|()
argument_list|,
literal|"test"
argument_list|)
argument_list|,
name|arrayContaining
argument_list|(
literal|"test1"
argument_list|)
argument_list|)
expr_stmt|;
comment|// add second query...
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
name|PercolatorService
operator|.
name|TYPE_NAME
argument_list|,
literal|"test2"
argument_list|)
operator|.
name|setSource
argument_list|(
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"query"
argument_list|,
name|termQuery
argument_list|(
literal|"field1"
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|preparePercolate
argument_list|()
operator|.
name|setIndices
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setDocumentType
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|doc
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertMatchCount
argument_list|(
name|response
argument_list|,
literal|2l
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getMatches
argument_list|()
argument_list|,
name|arrayWithSize
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|convertFromTextArray
argument_list|(
name|response
operator|.
name|getMatches
argument_list|()
argument_list|,
literal|"test"
argument_list|)
argument_list|,
name|arrayContainingInAnyOrder
argument_list|(
literal|"test1"
argument_list|,
literal|"test2"
argument_list|)
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareDelete
argument_list|(
literal|"test"
argument_list|,
name|PercolatorService
operator|.
name|TYPE_NAME
argument_list|,
literal|"test2"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|preparePercolate
argument_list|()
operator|.
name|setIndices
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setDocumentType
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|doc
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertMatchCount
argument_list|(
name|response
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getMatches
argument_list|()
argument_list|,
name|arrayWithSize
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|convertFromTextArray
argument_list|(
name|response
operator|.
name|getMatches
argument_list|()
argument_list|,
literal|"test"
argument_list|)
argument_list|,
name|arrayContaining
argument_list|(
literal|"test1"
argument_list|)
argument_list|)
expr_stmt|;
comment|// add a range query (cached)
comment|// add a query
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test1"
argument_list|,
name|PercolatorService
operator|.
name|TYPE_NAME
argument_list|)
operator|.
name|setSource
argument_list|(
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"query"
argument_list|,
name|constantScoreQuery
argument_list|(
name|FilterBuilders
operator|.
name|rangeFilter
argument_list|(
literal|"field2"
argument_list|)
operator|.
name|from
argument_list|(
literal|1
argument_list|)
operator|.
name|to
argument_list|(
literal|5
argument_list|)
operator|.
name|includeLower
argument_list|(
literal|true
argument_list|)
operator|.
name|setExecution
argument_list|(
literal|"fielddata"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|preparePercolate
argument_list|()
operator|.
name|setIndices
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setDocumentType
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|doc
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertMatchCount
argument_list|(
name|response
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getMatches
argument_list|()
argument_list|,
name|arrayWithSize
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|convertFromTextArray
argument_list|(
name|response
operator|.
name|getMatches
argument_list|()
argument_list|,
literal|"test"
argument_list|)
argument_list|,
name|arrayContaining
argument_list|(
literal|"test1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRangeFilterThatUsesFD
specifier|public
name|void
name|testRangeFilterThatUsesFD
parameter_list|()
throws|throws
name|Exception
block|{
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
literal|"field1"
argument_list|,
literal|"type=long"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
name|PercolatorService
operator|.
name|TYPE_NAME
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"query"
argument_list|,
name|constantScoreQuery
argument_list|(
name|FilterBuilders
operator|.
name|rangeFilter
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|from
argument_list|(
literal|1
argument_list|)
operator|.
name|to
argument_list|(
literal|5
argument_list|)
operator|.
name|setExecution
argument_list|(
literal|"fielddata"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|PercolateResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|preparePercolate
argument_list|()
operator|.
name|setIndices
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setDocumentType
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|setPercolateDoc
argument_list|(
name|PercolateSourceBuilder
operator|.
name|docBuilder
argument_list|()
operator|.
name|setDoc
argument_list|(
literal|"field1"
argument_list|,
literal|3
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertMatchCount
argument_list|(
name|response
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getMatches
argument_list|()
argument_list|,
name|arrayWithSize
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|convertFromTextArray
argument_list|(
name|response
operator|.
name|getMatches
argument_list|()
argument_list|,
literal|"test"
argument_list|)
argument_list|,
name|arrayContaining
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPercolateQueriesWithRouting
specifier|public
name|void
name|testPercolateQueriesWithRouting
parameter_list|()
throws|throws
name|Exception
block|{
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.number_of_shards"
argument_list|,
literal|2
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> register a queries"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
name|PercolatorService
operator|.
name|TYPE_NAME
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"query"
argument_list|,
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|setRouting
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
operator|%
literal|2
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
block|}
name|logger
operator|.
name|info
argument_list|(
literal|"--> Percolate doc with no routing"
argument_list|)
expr_stmt|;
name|PercolateResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|preparePercolate
argument_list|()
operator|.
name|setIndices
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setDocumentType
argument_list|(
literal|"type"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"doc"
argument_list|)
operator|.
name|field
argument_list|(
literal|"field1"
argument_list|,
literal|"value"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertMatchCount
argument_list|(
name|response
argument_list|,
literal|100l
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getMatches
argument_list|()
argument_list|,
name|arrayWithSize
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> Percolate doc with routing=0"
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|preparePercolate
argument_list|()
operator|.
name|setIndices
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setDocumentType
argument_list|(
literal|"type"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"doc"
argument_list|)
operator|.
name|field
argument_list|(
literal|"field1"
argument_list|,
literal|"value"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|setRouting
argument_list|(
literal|"0"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertMatchCount
argument_list|(
name|response
argument_list|,
literal|50l
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getMatches
argument_list|()
argument_list|,
name|arrayWithSize
argument_list|(
literal|50
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> Percolate doc with routing=1"
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|preparePercolate
argument_list|()
operator|.
name|setIndices
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setDocumentType
argument_list|(
literal|"type"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"doc"
argument_list|)
operator|.
name|field
argument_list|(
literal|"field1"
argument_list|,
literal|"value"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|setRouting
argument_list|(
literal|"1"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertMatchCount
argument_list|(
name|response
argument_list|,
literal|50l
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getMatches
argument_list|()
argument_list|,
name|arrayWithSize
argument_list|(
literal|50
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|percolateOnRecreatedIndex
specifier|public
name|void
name|percolateOnRecreatedIndex
parameter_list|()
throws|throws
name|Exception
block|{
name|createIndex
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"value1"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> register a query"
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"my-queries-index"
argument_list|,
name|PercolatorService
operator|.
name|TYPE_NAME
argument_list|,
literal|"kuku"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"color"
argument_list|,
literal|"blue"
argument_list|)
operator|.
name|field
argument_list|(
literal|"query"
argument_list|,
name|termQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"value1"
argument_list|)
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|setRefresh
argument_list|(
literal|true
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|immutableCluster
argument_list|()
operator|.
name|wipeIndices
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|createIndex
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"value1"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> register a query"
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"my-queries-index"
argument_list|,
name|PercolatorService
operator|.
name|TYPE_NAME
argument_list|,
literal|"kuku"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"color"
argument_list|,
literal|"blue"
argument_list|)
operator|.
name|field
argument_list|(
literal|"query"
argument_list|,
name|termQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"value1"
argument_list|)
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|setRefresh
argument_list|(
literal|true
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
comment|// see #2814
DECL|method|percolateCustomAnalyzer
specifier|public
name|void
name|percolateCustomAnalyzer
parameter_list|()
throws|throws
name|Exception
block|{
name|Builder
name|builder
init|=
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|put
argument_list|(
literal|"index.analysis.analyzer.lwhitespacecomma.tokenizer"
argument_list|,
literal|"whitespacecomma"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|putArray
argument_list|(
literal|"index.analysis.analyzer.lwhitespacecomma.filter"
argument_list|,
literal|"lowercase"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|put
argument_list|(
literal|"index.analysis.tokenizer.whitespacecomma.type"
argument_list|,
literal|"pattern"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|put
argument_list|(
literal|"index.analysis.tokenizer.whitespacecomma.pattern"
argument_list|,
literal|"(,|\\s+)"
argument_list|)
expr_stmt|;
name|XContentBuilder
name|mapping
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"doc"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"filingcategory"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"analyzer"
argument_list|,
literal|"lwhitespacecomma"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|createIndex
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> register a query"
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
name|PercolatorService
operator|.
name|TYPE_NAME
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"source"
argument_list|,
literal|"productizer"
argument_list|)
operator|.
name|field
argument_list|(
literal|"query"
argument_list|,
name|QueryBuilders
operator|.
name|constantScoreQuery
argument_list|(
name|QueryBuilders
operator|.
name|queryString
argument_list|(
literal|"filingcategory:s"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|setRefresh
argument_list|(
literal|true
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|PercolateResponse
name|percolate
init|=
name|client
argument_list|()
operator|.
name|preparePercolate
argument_list|()
operator|.
name|setIndices
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setDocumentType
argument_list|(
literal|"doc"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"doc"
argument_list|)
operator|.
name|field
argument_list|(
literal|"filingcategory"
argument_list|,
literal|"s"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"query"
argument_list|,
name|termQuery
argument_list|(
literal|"source"
argument_list|,
literal|"productizer"
argument_list|)
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertMatchCount
argument_list|(
name|percolate
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|percolate
operator|.
name|getMatches
argument_list|()
argument_list|,
name|arrayWithSize
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createIndexAndThenRegisterPercolator
specifier|public
name|void
name|createIndexAndThenRegisterPercolator
parameter_list|()
throws|throws
name|Exception
block|{
name|createIndex
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> register a query"
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
name|PercolatorService
operator|.
name|TYPE_NAME
argument_list|,
literal|"kuku"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"color"
argument_list|,
literal|"blue"
argument_list|)
operator|.
name|field
argument_list|(
literal|"query"
argument_list|,
name|termQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"value1"
argument_list|)
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|CountResponse
name|countResponse
init|=
name|client
argument_list|()
operator|.
name|prepareCount
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|setTypes
argument_list|(
name|PercolatorService
operator|.
name|TYPE_NAME
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|countResponse
operator|.
name|getCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|PercolateResponse
name|percolate
init|=
name|client
argument_list|()
operator|.
name|preparePercolate
argument_list|()
operator|.
name|setIndices
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setDocumentType
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"doc"
argument_list|)
operator|.
name|field
argument_list|(
literal|"field1"
argument_list|,
literal|"value1"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertMatchCount
argument_list|(
name|percolate
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|percolate
operator|.
name|getMatches
argument_list|()
argument_list|,
name|arrayWithSize
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|PercolateResponse
name|percolate
init|=
name|client
argument_list|()
operator|.
name|preparePercolate
argument_list|()
operator|.
name|setIndices
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setDocumentType
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|setPreference
argument_list|(
literal|"_local"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"doc"
argument_list|)
operator|.
name|field
argument_list|(
literal|"field1"
argument_list|,
literal|"value1"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertMatchCount
argument_list|(
name|percolate
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|percolate
operator|.
name|getMatches
argument_list|()
argument_list|,
name|arrayWithSize
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|logger
operator|.
name|info
argument_list|(
literal|"--> delete the index"
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareDelete
argument_list|(
literal|"test"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> make sure percolated queries for it have been deleted as well"
argument_list|)
expr_stmt|;
name|countResponse
operator|=
name|client
argument_list|()
operator|.
name|prepareCount
argument_list|()
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|setTypes
argument_list|(
name|PercolatorService
operator|.
name|TYPE_NAME
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertHitCount
argument_list|(
name|countResponse
argument_list|,
literal|0l
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|multiplePercolators
specifier|public
name|void
name|multiplePercolators
parameter_list|()
throws|throws
name|Exception
block|{
name|createIndex
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> register a query 1"
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
name|PercolatorService
operator|.
name|TYPE_NAME
argument_list|,
literal|"kuku"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"color"
argument_list|,
literal|"blue"
argument_list|)
operator|.
name|field
argument_list|(
literal|"query"
argument_list|,
name|termQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"value1"
argument_list|)
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|setRefresh
argument_list|(
literal|true
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> register a query 2"
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
name|PercolatorService
operator|.
name|TYPE_NAME
argument_list|,
literal|"bubu"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"color"
argument_list|,
literal|"green"
argument_list|)
operator|.
name|field
argument_list|(
literal|"query"
argument_list|,
name|termQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"value2"
argument_list|)
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|setRefresh
argument_list|(
literal|true
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|PercolateResponse
name|percolate
init|=
name|client
argument_list|()
operator|.
name|preparePercolate
argument_list|()
operator|.
name|setIndices
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setDocumentType
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"doc"
argument_list|)
operator|.
name|field
argument_list|(
literal|"field1"
argument_list|,
literal|"value1"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertMatchCount
argument_list|(
name|percolate
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|percolate
operator|.
name|getMatches
argument_list|()
argument_list|,
name|arrayWithSize
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|convertFromTextArray
argument_list|(
name|percolate
operator|.
name|getMatches
argument_list|()
argument_list|,
literal|"test"
argument_list|)
argument_list|,
name|arrayContaining
argument_list|(
literal|"kuku"
argument_list|)
argument_list|)
expr_stmt|;
name|percolate
operator|=
name|client
argument_list|()
operator|.
name|preparePercolate
argument_list|()
operator|.
name|setIndices
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setDocumentType
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"doc"
argument_list|)
operator|.
name|field
argument_list|(
literal|"field1"
argument_list|,
literal|"value2"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertMatchCount
argument_list|(
name|percolate
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|percolate
operator|.
name|getMatches
argument_list|()
argument_list|,
name|arrayWithSize
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|convertFromTextArray
argument_list|(
name|percolate
operator|.
name|getMatches
argument_list|()
argument_list|,
literal|"test"
argument_list|)
argument_list|,
name|arrayContaining
argument_list|(
literal|"bubu"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|dynamicAddingRemovingQueries
specifier|public
name|void
name|dynamicAddingRemovingQueries
parameter_list|()
throws|throws
name|Exception
block|{
name|createIndex
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> register a query 1"
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
name|PercolatorService
operator|.
name|TYPE_NAME
argument_list|,
literal|"kuku"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"color"
argument_list|,
literal|"blue"
argument_list|)
operator|.
name|field
argument_list|(
literal|"query"
argument_list|,
name|termQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"value1"
argument_list|)
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|setRefresh
argument_list|(
literal|true
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|PercolateResponse
name|percolate
init|=
name|client
argument_list|()
operator|.
name|preparePercolate
argument_list|()
operator|.
name|setIndices
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setDocumentType
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"doc"
argument_list|)
operator|.
name|field
argument_list|(
literal|"field1"
argument_list|,
literal|"value1"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertMatchCount
argument_list|(
name|percolate
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|percolate
operator|.
name|getMatches
argument_list|()
argument_list|,
name|arrayWithSize
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|convertFromTextArray
argument_list|(
name|percolate
operator|.
name|getMatches
argument_list|()
argument_list|,
literal|"test"
argument_list|)
argument_list|,
name|arrayContaining
argument_list|(
literal|"kuku"
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> register a query 2"
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
name|PercolatorService
operator|.
name|TYPE_NAME
argument_list|,
literal|"bubu"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"color"
argument_list|,
literal|"green"
argument_list|)
operator|.
name|field
argument_list|(
literal|"query"
argument_list|,
name|termQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"value2"
argument_list|)
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|setRefresh
argument_list|(
literal|true
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|percolate
operator|=
name|client
argument_list|()
operator|.
name|preparePercolate
argument_list|()
operator|.
name|setIndices
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setDocumentType
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"doc"
argument_list|)
operator|.
name|field
argument_list|(
literal|"field1"
argument_list|,
literal|"value2"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertMatchCount
argument_list|(
name|percolate
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|percolate
operator|.
name|getMatches
argument_list|()
argument_list|,
name|arrayWithSize
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|convertFromTextArray
argument_list|(
name|percolate
operator|.
name|getMatches
argument_list|()
argument_list|,
literal|"test"
argument_list|)
argument_list|,
name|arrayContaining
argument_list|(
literal|"bubu"
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> register a query 3"
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
name|PercolatorService
operator|.
name|TYPE_NAME
argument_list|,
literal|"susu"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"color"
argument_list|,
literal|"red"
argument_list|)
operator|.
name|field
argument_list|(
literal|"query"
argument_list|,
name|termQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"value2"
argument_list|)
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|setRefresh
argument_list|(
literal|true
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|PercolateSourceBuilder
name|sourceBuilder
init|=
operator|new
name|PercolateSourceBuilder
argument_list|()
operator|.
name|setDoc
argument_list|(
name|docBuilder
argument_list|()
operator|.
name|setDoc
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"field1"
argument_list|,
literal|"value2"
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setQueryBuilder
argument_list|(
name|termQuery
argument_list|(
literal|"color"
argument_list|,
literal|"red"
argument_list|)
argument_list|)
decl_stmt|;
name|percolate
operator|=
name|client
argument_list|()
operator|.
name|preparePercolate
argument_list|()
operator|.
name|setIndices
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setDocumentType
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|sourceBuilder
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertMatchCount
argument_list|(
name|percolate
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|percolate
operator|.
name|getMatches
argument_list|()
argument_list|,
name|arrayWithSize
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|convertFromTextArray
argument_list|(
name|percolate
operator|.
name|getMatches
argument_list|()
argument_list|,
literal|"test"
argument_list|)
argument_list|,
name|arrayContaining
argument_list|(
literal|"susu"
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> deleting query 1"
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareDelete
argument_list|(
literal|"test"
argument_list|,
name|PercolatorService
operator|.
name|TYPE_NAME
argument_list|,
literal|"kuku"
argument_list|)
operator|.
name|setRefresh
argument_list|(
literal|true
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|percolate
operator|=
name|client
argument_list|()
operator|.
name|preparePercolate
argument_list|()
operator|.
name|setIndices
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setDocumentType
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"doc"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|field
argument_list|(
literal|"field1"
argument_list|,
literal|"value1"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertMatchCount
argument_list|(
name|percolate
argument_list|,
literal|0l
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|percolate
operator|.
name|getMatches
argument_list|()
argument_list|,
name|emptyArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|percolateWithSizeField
specifier|public
name|void
name|percolateWithSizeField
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|mapping
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"_size"
argument_list|)
operator|.
name|field
argument_list|(
literal|"enabled"
argument_list|,
literal|true
argument_list|)
operator|.
name|field
argument_list|(
literal|"stored"
argument_list|,
literal|"yes"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
decl_stmt|;
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type1"
argument_list|,
name|mapping
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> register a query"
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
name|PercolatorService
operator|.
name|TYPE_NAME
argument_list|,
literal|"kuku"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"query"
argument_list|,
name|termQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"value1"
argument_list|)
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|setRefresh
argument_list|(
literal|true
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> percolate a document"
argument_list|)
expr_stmt|;
name|PercolateResponse
name|percolate
init|=
name|client
argument_list|()
operator|.
name|preparePercolate
argument_list|()
operator|.
name|setIndices
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setDocumentType
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"doc"
argument_list|)
operator|.
name|field
argument_list|(
literal|"field1"
argument_list|,
literal|"value1"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertMatchCount
argument_list|(
name|percolate
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|percolate
operator|.
name|getMatches
argument_list|()
argument_list|,
name|arrayWithSize
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|convertFromTextArray
argument_list|(
name|percolate
operator|.
name|getMatches
argument_list|()
argument_list|,
literal|"test"
argument_list|)
argument_list|,
name|arrayContaining
argument_list|(
literal|"kuku"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPercolateStatistics
specifier|public
name|void
name|testPercolateStatistics
parameter_list|()
throws|throws
name|Exception
block|{
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> register a query"
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
name|PercolatorService
operator|.
name|TYPE_NAME
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"query"
argument_list|,
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareRefresh
argument_list|(
literal|"test"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> First percolate request"
argument_list|)
expr_stmt|;
name|PercolateResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|preparePercolate
argument_list|()
operator|.
name|setIndices
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setDocumentType
argument_list|(
literal|"type"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"doc"
argument_list|)
operator|.
name|field
argument_list|(
literal|"field"
argument_list|,
literal|"val"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertMatchCount
argument_list|(
name|response
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|convertFromTextArray
argument_list|(
name|response
operator|.
name|getMatches
argument_list|()
argument_list|,
literal|"test"
argument_list|)
argument_list|,
name|arrayContaining
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|NumShards
name|numShards
init|=
name|getNumShards
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|IndicesStatsResponse
name|indicesResponse
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareStats
argument_list|(
literal|"test"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|indicesResponse
operator|.
name|getTotal
argument_list|()
operator|.
name|getPercolate
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|(
name|long
operator|)
name|numShards
operator|.
name|numPrimaries
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|indicesResponse
operator|.
name|getTotal
argument_list|()
operator|.
name|getPercolate
argument_list|()
operator|.
name|getCurrent
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|indicesResponse
operator|.
name|getTotal
argument_list|()
operator|.
name|getPercolate
argument_list|()
operator|.
name|getNumQueries
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|(
name|long
operator|)
name|numShards
operator|.
name|dataCopies
argument_list|)
argument_list|)
expr_stmt|;
comment|//number of copies
name|assertThat
argument_list|(
name|indicesResponse
operator|.
name|getTotal
argument_list|()
operator|.
name|getPercolate
argument_list|()
operator|.
name|getMemorySizeInBytes
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|-
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
name|NodesStatsResponse
name|nodesResponse
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareNodesStats
argument_list|()
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|long
name|percolateCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|NodeStats
name|nodeStats
range|:
name|nodesResponse
control|)
block|{
name|percolateCount
operator|+=
name|nodeStats
operator|.
name|getIndices
argument_list|()
operator|.
name|getPercolate
argument_list|()
operator|.
name|getCount
argument_list|()
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|percolateCount
argument_list|,
name|equalTo
argument_list|(
operator|(
name|long
operator|)
name|numShards
operator|.
name|numPrimaries
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> Second percolate request"
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|preparePercolate
argument_list|()
operator|.
name|setIndices
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setDocumentType
argument_list|(
literal|"type"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"doc"
argument_list|)
operator|.
name|field
argument_list|(
literal|"field"
argument_list|,
literal|"val"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertMatchCount
argument_list|(
name|response
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getMatches
argument_list|()
argument_list|,
name|arrayWithSize
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|convertFromTextArray
argument_list|(
name|response
operator|.
name|getMatches
argument_list|()
argument_list|,
literal|"test"
argument_list|)
argument_list|,
name|arrayContaining
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|indicesResponse
operator|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareStats
argument_list|()
operator|.
name|setPercolate
argument_list|(
literal|true
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|indicesResponse
operator|.
name|getTotal
argument_list|()
operator|.
name|getPercolate
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|(
name|long
operator|)
name|numShards
operator|.
name|numPrimaries
operator|*
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|indicesResponse
operator|.
name|getTotal
argument_list|()
operator|.
name|getPercolate
argument_list|()
operator|.
name|getCurrent
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|indicesResponse
operator|.
name|getTotal
argument_list|()
operator|.
name|getPercolate
argument_list|()
operator|.
name|getNumQueries
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|(
name|long
operator|)
name|numShards
operator|.
name|dataCopies
argument_list|)
argument_list|)
expr_stmt|;
comment|//number of copies
name|assertThat
argument_list|(
name|indicesResponse
operator|.
name|getTotal
argument_list|()
operator|.
name|getPercolate
argument_list|()
operator|.
name|getMemorySizeInBytes
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|-
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
name|percolateCount
operator|=
literal|0
expr_stmt|;
name|nodesResponse
operator|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareNodesStats
argument_list|()
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
for|for
control|(
name|NodeStats
name|nodeStats
range|:
name|nodesResponse
control|)
block|{
name|percolateCount
operator|+=
name|nodeStats
operator|.
name|getIndices
argument_list|()
operator|.
name|getPercolate
argument_list|()
operator|.
name|getCount
argument_list|()
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|percolateCount
argument_list|,
name|equalTo
argument_list|(
operator|(
name|long
operator|)
name|numShards
operator|.
name|numPrimaries
operator|*
literal|2
argument_list|)
argument_list|)
expr_stmt|;
comment|// We might be faster than 1 ms, so run upto 1000 times until have spend 1ms or more on percolating
name|boolean
name|moreThanOneMs
init|=
literal|false
decl_stmt|;
name|int
name|counter
init|=
literal|3
decl_stmt|;
comment|// We already ran two times.
do|do
block|{
name|indicesResponse
operator|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareStats
argument_list|(
literal|"test"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
if|if
condition|(
name|indicesResponse
operator|.
name|getTotal
argument_list|()
operator|.
name|getPercolate
argument_list|()
operator|.
name|getTimeInMillis
argument_list|()
operator|>
literal|0
condition|)
block|{
name|moreThanOneMs
operator|=
literal|true
expr_stmt|;
break|break;
block|}
name|logger
operator|.
name|info
argument_list|(
literal|"--> {}th percolate request"
argument_list|,
name|counter
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|preparePercolate
argument_list|()
operator|.
name|setIndices
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setDocumentType
argument_list|(
literal|"type"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"doc"
argument_list|)
operator|.
name|field
argument_list|(
literal|"field"
argument_list|,
literal|"val"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getMatches
argument_list|()
argument_list|,
name|arrayWithSize
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|convertFromTextArray
argument_list|(
name|response
operator|.
name|getMatches
argument_list|()
argument_list|,
literal|"test"
argument_list|)
argument_list|,
name|arrayContaining
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
operator|++
name|counter
operator|<=
literal|1000
condition|)
do|;
name|assertTrue
argument_list|(
literal|"Something is off, we should have spent at least 1ms on percolating..."
argument_list|,
name|moreThanOneMs
argument_list|)
expr_stmt|;
name|long
name|percolateSumTime
init|=
literal|0
decl_stmt|;
name|nodesResponse
operator|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareNodesStats
argument_list|()
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
for|for
control|(
name|NodeStats
name|nodeStats
range|:
name|nodesResponse
control|)
block|{
name|percolateCount
operator|+=
name|nodeStats
operator|.
name|getIndices
argument_list|()
operator|.
name|getPercolate
argument_list|()
operator|.
name|getCount
argument_list|()
expr_stmt|;
name|percolateSumTime
operator|+=
name|nodeStats
operator|.
name|getIndices
argument_list|()
operator|.
name|getPercolate
argument_list|()
operator|.
name|getTimeInMillis
argument_list|()
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|percolateSumTime
argument_list|,
name|greaterThan
argument_list|(
literal|0l
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPercolatingExistingDocs
specifier|public
name|void
name|testPercolatingExistingDocs
parameter_list|()
throws|throws
name|Exception
block|{
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> Adding docs"
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"b"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"c"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"b c"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"d"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> register a queries"
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
name|PercolatorService
operator|.
name|TYPE_NAME
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"query"
argument_list|,
name|matchQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"b"
argument_list|)
argument_list|)
operator|.
name|field
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
name|PercolatorService
operator|.
name|TYPE_NAME
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"query"
argument_list|,
name|matchQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"c"
argument_list|)
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
name|PercolatorService
operator|.
name|TYPE_NAME
argument_list|,
literal|"3"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"query"
argument_list|,
name|boolQuery
argument_list|()
operator|.
name|must
argument_list|(
name|matchQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"b"
argument_list|)
argument_list|)
operator|.
name|must
argument_list|(
name|matchQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"c"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
name|PercolatorService
operator|.
name|TYPE_NAME
argument_list|,
literal|"4"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"query"
argument_list|,
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareRefresh
argument_list|(
literal|"test"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> Percolate existing doc with id 1"
argument_list|)
expr_stmt|;
name|PercolateResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|preparePercolate
argument_list|()
operator|.
name|setIndices
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setDocumentType
argument_list|(
literal|"type"
argument_list|)
operator|.
name|setGetRequest
argument_list|(
name|Requests
operator|.
name|getRequest
argument_list|(
literal|"test"
argument_list|)
operator|.
name|type
argument_list|(
literal|"type"
argument_list|)
operator|.
name|id
argument_list|(
literal|"1"
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertMatchCount
argument_list|(
name|response
argument_list|,
literal|2l
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getMatches
argument_list|()
argument_list|,
name|arrayWithSize
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|convertFromTextArray
argument_list|(
name|response
operator|.
name|getMatches
argument_list|()
argument_list|,
literal|"test"
argument_list|)
argument_list|,
name|arrayContainingInAnyOrder
argument_list|(
literal|"1"
argument_list|,
literal|"4"
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> Percolate existing doc with id 2"
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|preparePercolate
argument_list|()
operator|.
name|setIndices
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setDocumentType
argument_list|(
literal|"type"
argument_list|)
operator|.
name|setGetRequest
argument_list|(
name|Requests
operator|.
name|getRequest
argument_list|(
literal|"test"
argument_list|)
operator|.
name|type
argument_list|(
literal|"type"
argument_list|)
operator|.
name|id
argument_list|(
literal|"2"
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertMatchCount
argument_list|(
name|response
argument_list|,
literal|2l
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getMatches
argument_list|()
argument_list|,
name|arrayWithSize
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|convertFromTextArray
argument_list|(
name|response
operator|.
name|getMatches
argument_list|()
argument_list|,
literal|"test"
argument_list|)
argument_list|,
name|arrayContainingInAnyOrder
argument_list|(
literal|"2"
argument_list|,
literal|"4"
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> Percolate existing doc with id 3"
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|preparePercolate
argument_list|()
operator|.
name|setIndices
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setDocumentType
argument_list|(
literal|"type"
argument_list|)
operator|.
name|setGetRequest
argument_list|(
name|Requests
operator|.
name|getRequest
argument_list|(
literal|"test"
argument_list|)
operator|.
name|type
argument_list|(
literal|"type"
argument_list|)
operator|.
name|id
argument_list|(
literal|"3"
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertMatchCount
argument_list|(
name|response
argument_list|,
literal|4l
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getMatches
argument_list|()
argument_list|,
name|arrayWithSize
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|convertFromTextArray
argument_list|(
name|response
operator|.
name|getMatches
argument_list|()
argument_list|,
literal|"test"
argument_list|)
argument_list|,
name|arrayContainingInAnyOrder
argument_list|(
literal|"1"
argument_list|,
literal|"2"
argument_list|,
literal|"3"
argument_list|,
literal|"4"
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> Percolate existing doc with id 4"
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|preparePercolate
argument_list|()
operator|.
name|setIndices
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setDocumentType
argument_list|(
literal|"type"
argument_list|)
operator|.
name|setGetRequest
argument_list|(
name|Requests
operator|.
name|getRequest
argument_list|(
literal|"test"
argument_list|)
operator|.
name|type
argument_list|(
literal|"type"
argument_list|)
operator|.
name|id
argument_list|(
literal|"4"
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertMatchCount
argument_list|(
name|response
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getMatches
argument_list|()
argument_list|,
name|arrayWithSize
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|convertFromTextArray
argument_list|(
name|response
operator|.
name|getMatches
argument_list|()
argument_list|,
literal|"test"
argument_list|)
argument_list|,
name|arrayContaining
argument_list|(
literal|"4"
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> Search normals docs, percolate queries must not be included"
argument_list|)
expr_stmt|;
name|SearchResponse
name|searchResponse
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
literal|"test"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|totalHits
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|4L
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
operator|.
name|type
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"type"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|1
argument_list|)
operator|.
name|type
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"type"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|2
argument_list|)
operator|.
name|type
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"type"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|3
argument_list|)
operator|.
name|type
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"type"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPercolatingExistingDocs_routing
specifier|public
name|void
name|testPercolatingExistingDocs_routing
parameter_list|()
throws|throws
name|Exception
block|{
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> Adding docs"
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"b"
argument_list|)
operator|.
name|setRouting
argument_list|(
literal|"4"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"c"
argument_list|)
operator|.
name|setRouting
argument_list|(
literal|"3"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"b c"
argument_list|)
operator|.
name|setRouting
argument_list|(
literal|"2"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"d"
argument_list|)
operator|.
name|setRouting
argument_list|(
literal|"1"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> register a queries"
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
name|PercolatorService
operator|.
name|TYPE_NAME
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"query"
argument_list|,
name|matchQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"b"
argument_list|)
argument_list|)
operator|.
name|field
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
name|PercolatorService
operator|.
name|TYPE_NAME
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"query"
argument_list|,
name|matchQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"c"
argument_list|)
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
name|PercolatorService
operator|.
name|TYPE_NAME
argument_list|,
literal|"3"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"query"
argument_list|,
name|boolQuery
argument_list|()
operator|.
name|must
argument_list|(
name|matchQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"b"
argument_list|)
argument_list|)
operator|.
name|must
argument_list|(
name|matchQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"c"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
name|PercolatorService
operator|.
name|TYPE_NAME
argument_list|,
literal|"4"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"query"
argument_list|,
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareRefresh
argument_list|(
literal|"test"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> Percolate existing doc with id 1"
argument_list|)
expr_stmt|;
name|PercolateResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|preparePercolate
argument_list|()
operator|.
name|setIndices
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setDocumentType
argument_list|(
literal|"type"
argument_list|)
operator|.
name|setGetRequest
argument_list|(
name|Requests
operator|.
name|getRequest
argument_list|(
literal|"test"
argument_list|)
operator|.
name|type
argument_list|(
literal|"type"
argument_list|)
operator|.
name|id
argument_list|(
literal|"1"
argument_list|)
operator|.
name|routing
argument_list|(
literal|"4"
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertMatchCount
argument_list|(
name|response
argument_list|,
literal|2l
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getMatches
argument_list|()
argument_list|,
name|arrayWithSize
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|convertFromTextArray
argument_list|(
name|response
operator|.
name|getMatches
argument_list|()
argument_list|,
literal|"test"
argument_list|)
argument_list|,
name|arrayContainingInAnyOrder
argument_list|(
literal|"1"
argument_list|,
literal|"4"
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> Percolate existing doc with id 2"
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|preparePercolate
argument_list|()
operator|.
name|setIndices
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setDocumentType
argument_list|(
literal|"type"
argument_list|)
operator|.
name|setGetRequest
argument_list|(
name|Requests
operator|.
name|getRequest
argument_list|(
literal|"test"
argument_list|)
operator|.
name|type
argument_list|(
literal|"type"
argument_list|)
operator|.
name|id
argument_list|(
literal|"2"
argument_list|)
operator|.
name|routing
argument_list|(
literal|"3"
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertMatchCount
argument_list|(
name|response
argument_list|,
literal|2l
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getMatches
argument_list|()
argument_list|,
name|arrayWithSize
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|convertFromTextArray
argument_list|(
name|response
operator|.
name|getMatches
argument_list|()
argument_list|,
literal|"test"
argument_list|)
argument_list|,
name|arrayContainingInAnyOrder
argument_list|(
literal|"2"
argument_list|,
literal|"4"
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> Percolate existing doc with id 3"
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|preparePercolate
argument_list|()
operator|.
name|setIndices
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setDocumentType
argument_list|(
literal|"type"
argument_list|)
operator|.
name|setGetRequest
argument_list|(
name|Requests
operator|.
name|getRequest
argument_list|(
literal|"test"
argument_list|)
operator|.
name|type
argument_list|(
literal|"type"
argument_list|)
operator|.
name|id
argument_list|(
literal|"3"
argument_list|)
operator|.
name|routing
argument_list|(
literal|"2"
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertMatchCount
argument_list|(
name|response
argument_list|,
literal|4l
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getMatches
argument_list|()
argument_list|,
name|arrayWithSize
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|convertFromTextArray
argument_list|(
name|response
operator|.
name|getMatches
argument_list|()
argument_list|,
literal|"test"
argument_list|)
argument_list|,
name|arrayContainingInAnyOrder
argument_list|(
literal|"1"
argument_list|,
literal|"2"
argument_list|,
literal|"3"
argument_list|,
literal|"4"
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> Percolate existing doc with id 4"
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|preparePercolate
argument_list|()
operator|.
name|setIndices
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setDocumentType
argument_list|(
literal|"type"
argument_list|)
operator|.
name|setGetRequest
argument_list|(
name|Requests
operator|.
name|getRequest
argument_list|(
literal|"test"
argument_list|)
operator|.
name|type
argument_list|(
literal|"type"
argument_list|)
operator|.
name|id
argument_list|(
literal|"4"
argument_list|)
operator|.
name|routing
argument_list|(
literal|"1"
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertMatchCount
argument_list|(
name|response
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getMatches
argument_list|()
argument_list|,
name|arrayWithSize
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|convertFromTextArray
argument_list|(
name|response
operator|.
name|getMatches
argument_list|()
argument_list|,
literal|"test"
argument_list|)
argument_list|,
name|arrayContaining
argument_list|(
literal|"4"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPercolatingExistingDocs_versionCheck
specifier|public
name|void
name|testPercolatingExistingDocs_versionCheck
parameter_list|()
throws|throws
name|Exception
block|{
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> Adding docs"
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"b"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"c"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"b c"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"d"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> registering queries"
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
name|PercolatorService
operator|.
name|TYPE_NAME
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"query"
argument_list|,
name|matchQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"b"
argument_list|)
argument_list|)
operator|.
name|field
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
name|PercolatorService
operator|.
name|TYPE_NAME
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"query"
argument_list|,
name|matchQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"c"
argument_list|)
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
name|PercolatorService
operator|.
name|TYPE_NAME
argument_list|,
literal|"3"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"query"
argument_list|,
name|boolQuery
argument_list|()
operator|.
name|must
argument_list|(
name|matchQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"b"
argument_list|)
argument_list|)
operator|.
name|must
argument_list|(
name|matchQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"c"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
name|PercolatorService
operator|.
name|TYPE_NAME
argument_list|,
literal|"4"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"query"
argument_list|,
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareRefresh
argument_list|(
literal|"test"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> Percolate existing doc with id 2 and version 1"
argument_list|)
expr_stmt|;
name|PercolateResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|preparePercolate
argument_list|()
operator|.
name|setIndices
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setDocumentType
argument_list|(
literal|"type"
argument_list|)
operator|.
name|setGetRequest
argument_list|(
name|Requests
operator|.
name|getRequest
argument_list|(
literal|"test"
argument_list|)
operator|.
name|type
argument_list|(
literal|"type"
argument_list|)
operator|.
name|id
argument_list|(
literal|"2"
argument_list|)
operator|.
name|version
argument_list|(
literal|1l
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertMatchCount
argument_list|(
name|response
argument_list|,
literal|2l
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getMatches
argument_list|()
argument_list|,
name|arrayWithSize
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|convertFromTextArray
argument_list|(
name|response
operator|.
name|getMatches
argument_list|()
argument_list|,
literal|"test"
argument_list|)
argument_list|,
name|arrayContainingInAnyOrder
argument_list|(
literal|"2"
argument_list|,
literal|"4"
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> Percolate existing doc with id 2 and version 2"
argument_list|)
expr_stmt|;
try|try
block|{
name|client
argument_list|()
operator|.
name|preparePercolate
argument_list|()
operator|.
name|setIndices
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setDocumentType
argument_list|(
literal|"type"
argument_list|)
operator|.
name|setGetRequest
argument_list|(
name|Requests
operator|.
name|getRequest
argument_list|(
literal|"test"
argument_list|)
operator|.
name|type
argument_list|(
literal|"type"
argument_list|)
operator|.
name|id
argument_list|(
literal|"2"
argument_list|)
operator|.
name|version
argument_list|(
literal|2l
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Error should have been thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|VersionConflictEngineException
name|e
parameter_list|)
block|{         }
name|logger
operator|.
name|info
argument_list|(
literal|"--> Index doc with id for the second time"
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"c"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> Percolate existing doc with id 2 and version 2"
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|preparePercolate
argument_list|()
operator|.
name|setIndices
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setDocumentType
argument_list|(
literal|"type"
argument_list|)
operator|.
name|setGetRequest
argument_list|(
name|Requests
operator|.
name|getRequest
argument_list|(
literal|"test"
argument_list|)
operator|.
name|type
argument_list|(
literal|"type"
argument_list|)
operator|.
name|id
argument_list|(
literal|"2"
argument_list|)
operator|.
name|version
argument_list|(
literal|2l
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertMatchCount
argument_list|(
name|response
argument_list|,
literal|2l
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getMatches
argument_list|()
argument_list|,
name|arrayWithSize
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|convertFromTextArray
argument_list|(
name|response
operator|.
name|getMatches
argument_list|()
argument_list|,
literal|"test"
argument_list|)
argument_list|,
name|arrayContainingInAnyOrder
argument_list|(
literal|"2"
argument_list|,
literal|"4"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPercolateMultipleIndicesAndAliases
specifier|public
name|void
name|testPercolateMultipleIndicesAndAliases
parameter_list|()
throws|throws
name|Exception
block|{
name|createIndex
argument_list|(
literal|"test1"
argument_list|,
literal|"test2"
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> registering queries"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|String
name|index
init|=
name|i
operator|%
literal|2
operator|==
literal|0
condition|?
literal|"test1"
else|:
literal|"test2"
decl_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|index
argument_list|,
name|PercolatorService
operator|.
name|TYPE_NAME
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"query"
argument_list|,
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
block|}
name|logger
operator|.
name|info
argument_list|(
literal|"--> Percolate doc to index test1"
argument_list|)
expr_stmt|;
name|PercolateResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|preparePercolate
argument_list|()
operator|.
name|setIndices
argument_list|(
literal|"test1"
argument_list|)
operator|.
name|setDocumentType
argument_list|(
literal|"type"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"doc"
argument_list|)
operator|.
name|field
argument_list|(
literal|"field1"
argument_list|,
literal|"value"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertMatchCount
argument_list|(
name|response
argument_list|,
literal|5l
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getMatches
argument_list|()
argument_list|,
name|arrayWithSize
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> Percolate doc to index test2"
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|preparePercolate
argument_list|()
operator|.
name|setIndices
argument_list|(
literal|"test2"
argument_list|)
operator|.
name|setDocumentType
argument_list|(
literal|"type"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"doc"
argument_list|)
operator|.
name|field
argument_list|(
literal|"field1"
argument_list|,
literal|"value"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertMatchCount
argument_list|(
name|response
argument_list|,
literal|5l
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getMatches
argument_list|()
argument_list|,
name|arrayWithSize
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> Percolate doc to index test1 and test2"
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|preparePercolate
argument_list|()
operator|.
name|setIndices
argument_list|(
literal|"test1"
argument_list|,
literal|"test2"
argument_list|)
operator|.
name|setDocumentType
argument_list|(
literal|"type"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"doc"
argument_list|)
operator|.
name|field
argument_list|(
literal|"field1"
argument_list|,
literal|"value"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertMatchCount
argument_list|(
name|response
argument_list|,
literal|10l
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getMatches
argument_list|()
argument_list|,
name|arrayWithSize
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> Percolate doc to index test2 and test3, with ignore missing"
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|preparePercolate
argument_list|()
operator|.
name|setIndices
argument_list|(
literal|"test1"
argument_list|,
literal|"test3"
argument_list|)
operator|.
name|setDocumentType
argument_list|(
literal|"type"
argument_list|)
operator|.
name|setIndicesOptions
argument_list|(
name|IndicesOptions
operator|.
name|lenientExpandOpen
argument_list|()
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"doc"
argument_list|)
operator|.
name|field
argument_list|(
literal|"field1"
argument_list|,
literal|"value"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertMatchCount
argument_list|(
name|response
argument_list|,
literal|5l
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getMatches
argument_list|()
argument_list|,
name|arrayWithSize
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> Adding aliases"
argument_list|)
expr_stmt|;
name|IndicesAliasesResponse
name|aliasesResponse
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareAliases
argument_list|()
operator|.
name|addAlias
argument_list|(
literal|"test1"
argument_list|,
literal|"my-alias1"
argument_list|)
operator|.
name|addAlias
argument_list|(
literal|"test2"
argument_list|,
literal|"my-alias1"
argument_list|)
operator|.
name|addAlias
argument_list|(
literal|"test2"
argument_list|,
literal|"my-alias2"
argument_list|)
operator|.
name|setTimeout
argument_list|(
name|TimeValue
operator|.
name|timeValueHours
argument_list|(
literal|10
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|aliasesResponse
operator|.
name|isAcknowledged
argument_list|()
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> Percolate doc to my-alias1"
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|preparePercolate
argument_list|()
operator|.
name|setIndices
argument_list|(
literal|"my-alias1"
argument_list|)
operator|.
name|setDocumentType
argument_list|(
literal|"type"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"doc"
argument_list|)
operator|.
name|field
argument_list|(
literal|"field1"
argument_list|,
literal|"value"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertMatchCount
argument_list|(
name|response
argument_list|,
literal|10l
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getMatches
argument_list|()
argument_list|,
name|arrayWithSize
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|PercolateResponse
operator|.
name|Match
name|match
range|:
name|response
control|)
block|{
name|assertThat
argument_list|(
name|match
operator|.
name|getIndex
argument_list|()
operator|.
name|string
argument_list|()
argument_list|,
name|anyOf
argument_list|(
name|equalTo
argument_list|(
literal|"test1"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"test2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|logger
operator|.
name|info
argument_list|(
literal|"--> Percolate doc to my-alias2"
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|preparePercolate
argument_list|()
operator|.
name|setIndices
argument_list|(
literal|"my-alias2"
argument_list|)
operator|.
name|setDocumentType
argument_list|(
literal|"type"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"doc"
argument_list|)
operator|.
name|field
argument_list|(
literal|"field1"
argument_list|,
literal|"value"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertMatchCount
argument_list|(
name|response
argument_list|,
literal|5l
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getMatches
argument_list|()
argument_list|,
name|arrayWithSize
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|PercolateResponse
operator|.
name|Match
name|match
range|:
name|response
control|)
block|{
name|assertThat
argument_list|(
name|match
operator|.
name|getIndex
argument_list|()
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"test2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testCountPercolation
specifier|public
name|void
name|testCountPercolation
parameter_list|()
throws|throws
name|Exception
block|{
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> Add dummy doc"
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field"
argument_list|,
literal|"value"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> register a queries"
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
name|PercolatorService
operator|.
name|TYPE_NAME
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"query"
argument_list|,
name|matchQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"b"
argument_list|)
argument_list|)
operator|.
name|field
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
name|PercolatorService
operator|.
name|TYPE_NAME
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"query"
argument_list|,
name|matchQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"c"
argument_list|)
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
name|PercolatorService
operator|.
name|TYPE_NAME
argument_list|,
literal|"3"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"query"
argument_list|,
name|boolQuery
argument_list|()
operator|.
name|must
argument_list|(
name|matchQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"b"
argument_list|)
argument_list|)
operator|.
name|must
argument_list|(
name|matchQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"c"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
name|PercolatorService
operator|.
name|TYPE_NAME
argument_list|,
literal|"4"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"query"
argument_list|,
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareRefresh
argument_list|(
literal|"test"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> Count percolate doc with field1=b"
argument_list|)
expr_stmt|;
name|PercolateResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|preparePercolate
argument_list|()
operator|.
name|setIndices
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setDocumentType
argument_list|(
literal|"type"
argument_list|)
operator|.
name|setOnlyCount
argument_list|(
literal|true
argument_list|)
operator|.
name|setPercolateDoc
argument_list|(
name|docBuilder
argument_list|()
operator|.
name|setDoc
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"field1"
argument_list|,
literal|"b"
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertMatchCount
argument_list|(
name|response
argument_list|,
literal|2l
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getMatches
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> Count percolate doc with field1=c"
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|preparePercolate
argument_list|()
operator|.
name|setIndices
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setDocumentType
argument_list|(
literal|"type"
argument_list|)
operator|.
name|setOnlyCount
argument_list|(
literal|true
argument_list|)
operator|.
name|setPercolateDoc
argument_list|(
name|docBuilder
argument_list|()
operator|.
name|setDoc
argument_list|(
name|yamlBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"field1"
argument_list|,
literal|"c"
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertMatchCount
argument_list|(
name|response
argument_list|,
literal|2l
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getMatches
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> Count percolate doc with field1=b c"
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|preparePercolate
argument_list|()
operator|.
name|setIndices
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setDocumentType
argument_list|(
literal|"type"
argument_list|)
operator|.
name|setOnlyCount
argument_list|(
literal|true
argument_list|)
operator|.
name|setPercolateDoc
argument_list|(
name|docBuilder
argument_list|()
operator|.
name|setDoc
argument_list|(
name|smileBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"field1"
argument_list|,
literal|"b c"
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertMatchCount
argument_list|(
name|response
argument_list|,
literal|4l
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getMatches
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> Count percolate doc with field1=d"
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|preparePercolate
argument_list|()
operator|.
name|setIndices
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setDocumentType
argument_list|(
literal|"type"
argument_list|)
operator|.
name|setOnlyCount
argument_list|(
literal|true
argument_list|)
operator|.
name|setPercolateDoc
argument_list|(
name|docBuilder
argument_list|()
operator|.
name|setDoc
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"field1"
argument_list|,
literal|"d"
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertMatchCount
argument_list|(
name|response
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getMatches
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> Count percolate non existing doc"
argument_list|)
expr_stmt|;
try|try
block|{
name|client
argument_list|()
operator|.
name|preparePercolate
argument_list|()
operator|.
name|setIndices
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setDocumentType
argument_list|(
literal|"type"
argument_list|)
operator|.
name|setOnlyCount
argument_list|(
literal|true
argument_list|)
operator|.
name|setGetRequest
argument_list|(
name|Requests
operator|.
name|getRequest
argument_list|(
literal|"test"
argument_list|)
operator|.
name|type
argument_list|(
literal|"type"
argument_list|)
operator|.
name|id
argument_list|(
literal|"5"
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Exception should have been thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DocumentMissingException
name|e
parameter_list|)
block|{         }
block|}
annotation|@
name|Test
DECL|method|testCountPercolatingExistingDocs
specifier|public
name|void
name|testCountPercolatingExistingDocs
parameter_list|()
throws|throws
name|Exception
block|{
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> Adding docs"
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"b"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"c"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"b c"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field1"
argument_list|,
literal|"d"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> register a queries"
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
name|PercolatorService
operator|.
name|TYPE_NAME
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"query"
argument_list|,
name|matchQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"b"
argument_list|)
argument_list|)
operator|.
name|field
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
name|PercolatorService
operator|.
name|TYPE_NAME
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"query"
argument_list|,
name|matchQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"c"
argument_list|)
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
name|PercolatorService
operator|.
name|TYPE_NAME
argument_list|,
literal|"3"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"query"
argument_list|,
name|boolQuery
argument_list|()
operator|.
name|must
argument_list|(
name|matchQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"b"
argument_list|)
argument_list|)
operator|.
name|must
argument_list|(
name|matchQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"c"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
name|PercolatorService
operator|.
name|TYPE_NAME
argument_list|,
literal|"4"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"query"
argument_list|,
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareRefresh
argument_list|(
literal|"test"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> Count percolate existing doc with id 1"
argument_list|)
expr_stmt|;
name|PercolateResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|preparePercolate
argument_list|()
operator|.
name|setIndices
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setDocumentType
argument_list|(
literal|"type"
argument_list|)
operator|.
name|setOnlyCount
argument_list|(
literal|true
argument_list|)
operator|.
name|setGetRequest
argument_list|(
name|Requests
operator|.
name|getRequest
argument_list|(
literal|"test"
argument_list|)
operator|.
name|type
argument_list|(
literal|"type"
argument_list|)
operator|.
name|id
argument_list|(
literal|"1"
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertMatchCount
argument_list|(
name|response
argument_list|,
literal|2l
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getMatches
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> Count percolate existing doc with id 2"
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|preparePercolate
argument_list|()
operator|.
name|setIndices
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setDocumentType
argument_list|(
literal|"type"
argument_list|)
operator|.
name|setOnlyCount
argument_list|(
literal|true
argument_list|)
operator|.
name|setGetRequest
argument_list|(
name|Requests
operator|.
name|getRequest
argument_list|(
literal|"test"
argument_list|)
operator|.
name|type
argument_list|(
literal|"type"
argument_list|)
operator|.
name|id
argument_list|(
literal|"2"
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertMatchCount
argument_list|(
name|response
argument_list|,
literal|2l
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getMatches
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> Count percolate existing doc with id 3"
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|preparePercolate
argument_list|()
operator|.
name|setIndices
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setDocumentType
argument_list|(
literal|"type"
argument_list|)
operator|.
name|setOnlyCount
argument_list|(
literal|true
argument_list|)
operator|.
name|setGetRequest
argument_list|(
name|Requests
operator|.
name|getRequest
argument_list|(
literal|"test"
argument_list|)
operator|.
name|type
argument_list|(
literal|"type"
argument_list|)
operator|.
name|id
argument_list|(
literal|"3"
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertMatchCount
argument_list|(
name|response
argument_list|,
literal|4l
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getMatches
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> Count percolate existing doc with id 4"
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|preparePercolate
argument_list|()
operator|.
name|setIndices
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setDocumentType
argument_list|(
literal|"type"
argument_list|)
operator|.
name|setOnlyCount
argument_list|(
literal|true
argument_list|)
operator|.
name|setGetRequest
argument_list|(
name|Requests
operator|.
name|getRequest
argument_list|(
literal|"test"
argument_list|)
operator|.
name|type
argument_list|(
literal|"type"
argument_list|)
operator|.
name|id
argument_list|(
literal|"4"
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertMatchCount
argument_list|(
name|response
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getMatches
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPercolateSizingWithQueryAndFilter
specifier|public
name|void
name|testPercolateSizingWithQueryAndFilter
parameter_list|()
throws|throws
name|Exception
block|{
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|int
name|numLevels
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|25
argument_list|)
decl_stmt|;
name|long
name|numQueriesPerLevel
init|=
name|randomIntBetween
argument_list|(
literal|10
argument_list|,
literal|250
argument_list|)
decl_stmt|;
name|long
name|totalQueries
init|=
name|numLevels
operator|*
name|numQueriesPerLevel
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> register "
operator|+
name|totalQueries
operator|+
literal|" queries"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|level
init|=
literal|1
init|;
name|level
operator|<=
name|numLevels
condition|;
name|level
operator|++
control|)
block|{
for|for
control|(
name|int
name|query
init|=
literal|1
init|;
name|query
operator|<=
name|numQueriesPerLevel
condition|;
name|query
operator|++
control|)
block|{
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"my-index"
argument_list|,
name|PercolatorService
operator|.
name|TYPE_NAME
argument_list|,
name|level
operator|+
literal|"-"
operator|+
name|query
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"query"
argument_list|,
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|field
argument_list|(
literal|"level"
argument_list|,
name|level
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
block|}
block|}
name|boolean
name|onlyCount
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
name|PercolateResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|preparePercolate
argument_list|()
operator|.
name|setIndices
argument_list|(
literal|"my-index"
argument_list|)
operator|.
name|setDocumentType
argument_list|(
literal|"my-type"
argument_list|)
operator|.
name|setOnlyCount
argument_list|(
name|onlyCount
argument_list|)
operator|.
name|setPercolateDoc
argument_list|(
name|docBuilder
argument_list|()
operator|.
name|setDoc
argument_list|(
literal|"field"
argument_list|,
literal|"value"
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertMatchCount
argument_list|(
name|response
argument_list|,
name|totalQueries
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|onlyCount
condition|)
block|{
name|assertThat
argument_list|(
name|response
operator|.
name|getMatches
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
operator|(
name|int
operator|)
name|totalQueries
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
name|size
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
operator|(
name|int
operator|)
name|totalQueries
operator|-
literal|1
argument_list|)
decl_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|preparePercolate
argument_list|()
operator|.
name|setIndices
argument_list|(
literal|"my-index"
argument_list|)
operator|.
name|setDocumentType
argument_list|(
literal|"my-type"
argument_list|)
operator|.
name|setOnlyCount
argument_list|(
name|onlyCount
argument_list|)
operator|.
name|setPercolateDoc
argument_list|(
name|docBuilder
argument_list|()
operator|.
name|setDoc
argument_list|(
literal|"field"
argument_list|,
literal|"value"
argument_list|)
argument_list|)
operator|.
name|setSize
argument_list|(
name|size
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertMatchCount
argument_list|(
name|response
argument_list|,
name|totalQueries
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|onlyCount
condition|)
block|{
name|assertThat
argument_list|(
name|response
operator|.
name|getMatches
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
name|size
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// The query / filter capabilities are NOT in realtime
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareRefresh
argument_list|(
literal|"my-index"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|int
name|runs
init|=
name|randomIntBetween
argument_list|(
literal|3
argument_list|,
literal|16
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|runs
condition|;
name|i
operator|++
control|)
block|{
name|onlyCount
operator|=
name|randomBoolean
argument_list|()
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|preparePercolate
argument_list|()
operator|.
name|setIndices
argument_list|(
literal|"my-index"
argument_list|)
operator|.
name|setDocumentType
argument_list|(
literal|"my-type"
argument_list|)
operator|.
name|setOnlyCount
argument_list|(
name|onlyCount
argument_list|)
operator|.
name|setPercolateDoc
argument_list|(
name|docBuilder
argument_list|()
operator|.
name|setDoc
argument_list|(
literal|"field"
argument_list|,
literal|"value"
argument_list|)
argument_list|)
operator|.
name|setPercolateQuery
argument_list|(
name|termQuery
argument_list|(
literal|"level"
argument_list|,
literal|1
operator|+
name|randomInt
argument_list|(
name|numLevels
operator|-
literal|1
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertMatchCount
argument_list|(
name|response
argument_list|,
name|numQueriesPerLevel
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|onlyCount
condition|)
block|{
name|assertThat
argument_list|(
name|response
operator|.
name|getMatches
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
operator|(
name|int
operator|)
name|numQueriesPerLevel
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|runs
condition|;
name|i
operator|++
control|)
block|{
name|onlyCount
operator|=
name|randomBoolean
argument_list|()
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|preparePercolate
argument_list|()
operator|.
name|setIndices
argument_list|(
literal|"my-index"
argument_list|)
operator|.
name|setDocumentType
argument_list|(
literal|"my-type"
argument_list|)
operator|.
name|setOnlyCount
argument_list|(
name|onlyCount
argument_list|)
operator|.
name|setPercolateDoc
argument_list|(
name|docBuilder
argument_list|()
operator|.
name|setDoc
argument_list|(
literal|"field"
argument_list|,
literal|"value"
argument_list|)
argument_list|)
operator|.
name|setPercolateFilter
argument_list|(
name|termFilter
argument_list|(
literal|"level"
argument_list|,
literal|1
operator|+
name|randomInt
argument_list|(
name|numLevels
operator|-
literal|1
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertMatchCount
argument_list|(
name|response
argument_list|,
name|numQueriesPerLevel
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|onlyCount
condition|)
block|{
name|assertThat
argument_list|(
name|response
operator|.
name|getMatches
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
operator|(
name|int
operator|)
name|numQueriesPerLevel
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|runs
condition|;
name|i
operator|++
control|)
block|{
name|onlyCount
operator|=
name|randomBoolean
argument_list|()
expr_stmt|;
name|size
operator|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
operator|(
name|int
operator|)
name|numQueriesPerLevel
operator|-
literal|1
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|preparePercolate
argument_list|()
operator|.
name|setIndices
argument_list|(
literal|"my-index"
argument_list|)
operator|.
name|setDocumentType
argument_list|(
literal|"my-type"
argument_list|)
operator|.
name|setOnlyCount
argument_list|(
name|onlyCount
argument_list|)
operator|.
name|setSize
argument_list|(
name|size
argument_list|)
operator|.
name|setPercolateDoc
argument_list|(
name|docBuilder
argument_list|()
operator|.
name|setDoc
argument_list|(
literal|"field"
argument_list|,
literal|"value"
argument_list|)
argument_list|)
operator|.
name|setPercolateFilter
argument_list|(
name|termFilter
argument_list|(
literal|"level"
argument_list|,
literal|1
operator|+
name|randomInt
argument_list|(
name|numLevels
operator|-
literal|1
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertMatchCount
argument_list|(
name|response
argument_list|,
name|numQueriesPerLevel
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|onlyCount
condition|)
block|{
name|assertThat
argument_list|(
name|response
operator|.
name|getMatches
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
name|size
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testPercolateScoreAndSorting
specifier|public
name|void
name|testPercolateScoreAndSorting
parameter_list|()
throws|throws
name|Exception
block|{
name|createIndex
argument_list|(
literal|"my-index"
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
comment|// Add a dummy doc, that shouldn't never interfere with percolate operations.
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"my-index"
argument_list|,
literal|"my-type"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"field"
argument_list|,
literal|"value"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|NavigableSet
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|controlMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|long
name|numQueries
init|=
name|randomIntBetween
argument_list|(
literal|100
argument_list|,
literal|250
argument_list|)
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> register "
operator|+
name|numQueries
operator|+
literal|" queries"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numQueries
condition|;
name|i
operator|++
control|)
block|{
name|int
name|value
init|=
name|randomInt
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"my-index"
argument_list|,
name|PercolatorService
operator|.
name|TYPE_NAME
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"query"
argument_list|,
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|field
argument_list|(
literal|"level"
argument_list|,
name|i
argument_list|)
operator|.
name|field
argument_list|(
literal|"field1"
argument_list|,
name|value
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|controlMap
operator|.
name|containsKey
argument_list|(
name|value
argument_list|)
condition|)
block|{
name|controlMap
operator|.
name|put
argument_list|(
name|value
argument_list|,
operator|new
name|TreeSet
argument_list|<
name|Integer
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|controlMap
operator|.
name|get
argument_list|(
name|value
argument_list|)
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Integer
argument_list|>
name|usedValues
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|controlMap
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
name|refresh
argument_list|()
expr_stmt|;
comment|// Only retrieve the score
name|int
name|runs
init|=
name|randomInt
argument_list|(
literal|27
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|runs
condition|;
name|i
operator|++
control|)
block|{
name|int
name|size
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|50
argument_list|)
decl_stmt|;
name|PercolateResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|preparePercolate
argument_list|()
operator|.
name|setIndices
argument_list|(
literal|"my-index"
argument_list|)
operator|.
name|setDocumentType
argument_list|(
literal|"my-type"
argument_list|)
operator|.
name|setScore
argument_list|(
literal|true
argument_list|)
operator|.
name|setSize
argument_list|(
name|size
argument_list|)
operator|.
name|setPercolateDoc
argument_list|(
name|docBuilder
argument_list|()
operator|.
name|setDoc
argument_list|(
literal|"field"
argument_list|,
literal|"value"
argument_list|)
argument_list|)
operator|.
name|setPercolateQuery
argument_list|(
name|QueryBuilders
operator|.
name|functionScoreQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|,
name|scriptFunction
argument_list|(
literal|"doc['level'].value"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertMatchCount
argument_list|(
name|response
argument_list|,
name|numQueries
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getMatches
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
name|size
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|response
operator|.
name|getMatches
argument_list|()
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|String
name|id
init|=
name|response
operator|.
name|getMatches
argument_list|()
index|[
name|j
index|]
operator|.
name|getId
argument_list|()
operator|.
name|string
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|id
argument_list|)
argument_list|,
name|equalTo
argument_list|(
operator|(
name|int
operator|)
name|response
operator|.
name|getMatches
argument_list|()
index|[
name|j
index|]
operator|.
name|getScore
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Sort the queries by the score
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|runs
condition|;
name|i
operator|++
control|)
block|{
name|int
name|size
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|PercolateResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|preparePercolate
argument_list|()
operator|.
name|setIndices
argument_list|(
literal|"my-index"
argument_list|)
operator|.
name|setDocumentType
argument_list|(
literal|"my-type"
argument_list|)
operator|.
name|setSortByScore
argument_list|(
literal|true
argument_list|)
operator|.
name|setSize
argument_list|(
name|size
argument_list|)
operator|.
name|setPercolateDoc
argument_list|(
name|docBuilder
argument_list|()
operator|.
name|setDoc
argument_list|(
literal|"field"
argument_list|,
literal|"value"
argument_list|)
argument_list|)
operator|.
name|setPercolateQuery
argument_list|(
name|QueryBuilders
operator|.
name|functionScoreQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|,
name|scriptFunction
argument_list|(
literal|"doc['level'].value"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertMatchCount
argument_list|(
name|response
argument_list|,
name|numQueries
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getMatches
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
name|size
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|expectedId
init|=
call|(
name|int
call|)
argument_list|(
name|numQueries
operator|-
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|PercolateResponse
operator|.
name|Match
name|match
range|:
name|response
control|)
block|{
name|assertThat
argument_list|(
name|match
operator|.
name|getId
argument_list|()
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|expectedId
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|match
operator|.
name|getScore
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|(
name|float
operator|)
name|expectedId
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|match
operator|.
name|getIndex
argument_list|()
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"my-index"
argument_list|)
argument_list|)
expr_stmt|;
name|expectedId
operator|--
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|runs
condition|;
name|i
operator|++
control|)
block|{
name|int
name|value
init|=
name|usedValues
operator|.
name|get
argument_list|(
name|randomInt
argument_list|(
name|usedValues
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|NavigableSet
argument_list|<
name|Integer
argument_list|>
name|levels
init|=
name|controlMap
operator|.
name|get
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|int
name|size
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
name|levels
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|PercolateResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|preparePercolate
argument_list|()
operator|.
name|setIndices
argument_list|(
literal|"my-index"
argument_list|)
operator|.
name|setDocumentType
argument_list|(
literal|"my-type"
argument_list|)
operator|.
name|setSortByScore
argument_list|(
literal|true
argument_list|)
operator|.
name|setSize
argument_list|(
name|size
argument_list|)
operator|.
name|setPercolateDoc
argument_list|(
name|docBuilder
argument_list|()
operator|.
name|setDoc
argument_list|(
literal|"field"
argument_list|,
literal|"value"
argument_list|)
argument_list|)
operator|.
name|setPercolateQuery
argument_list|(
name|QueryBuilders
operator|.
name|functionScoreQuery
argument_list|(
name|matchQuery
argument_list|(
literal|"field1"
argument_list|,
name|value
argument_list|)
argument_list|,
name|scriptFunction
argument_list|(
literal|"doc['level'].value"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertMatchCount
argument_list|(
name|response
argument_list|,
name|levels
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getMatches
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
name|Math
operator|.
name|min
argument_list|(
name|levels
operator|.
name|size
argument_list|()
argument_list|,
name|size
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Integer
argument_list|>
name|levelIterator
init|=
name|levels
operator|.
name|descendingIterator
argument_list|()
decl_stmt|;
for|for
control|(
name|PercolateResponse
operator|.
name|Match
name|match
range|:
name|response
control|)
block|{
name|int
name|controlLevel
init|=
name|levelIterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|match
operator|.
name|getId
argument_list|()
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|controlLevel
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|match
operator|.
name|getScore
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|(
name|float
operator|)
name|controlLevel
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|match
operator|.
name|getIndex
argument_list|()
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"my-index"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testPercolateSortingWithNoSize
specifier|public
name|void
name|testPercolateSortingWithNoSize
parameter_list|()
throws|throws
name|Exception
block|{
name|createIndex
argument_list|(
literal|"my-index"
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"my-index"
argument_list|,
name|PercolatorService
operator|.
name|TYPE_NAME
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"query"
argument_list|,
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|field
argument_list|(
literal|"level"
argument_list|,
literal|1
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"my-index"
argument_list|,
name|PercolatorService
operator|.
name|TYPE_NAME
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"query"
argument_list|,
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|field
argument_list|(
literal|"level"
argument_list|,
literal|2
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|PercolateResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|preparePercolate
argument_list|()
operator|.
name|setIndices
argument_list|(
literal|"my-index"
argument_list|)
operator|.
name|setDocumentType
argument_list|(
literal|"my-type"
argument_list|)
operator|.
name|setSortByScore
argument_list|(
literal|true
argument_list|)
operator|.
name|setSize
argument_list|(
literal|2
argument_list|)
operator|.
name|setPercolateDoc
argument_list|(
name|docBuilder
argument_list|()
operator|.
name|setDoc
argument_list|(
literal|"field"
argument_list|,
literal|"value"
argument_list|)
argument_list|)
operator|.
name|setPercolateQuery
argument_list|(
name|QueryBuilders
operator|.
name|functionScoreQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|,
name|scriptFunction
argument_list|(
literal|"doc['level'].value"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertMatchCount
argument_list|(
name|response
argument_list|,
literal|2l
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getMatches
argument_list|()
index|[
literal|0
index|]
operator|.
name|getId
argument_list|()
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getMatches
argument_list|()
index|[
literal|0
index|]
operator|.
name|getScore
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2f
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getMatches
argument_list|()
index|[
literal|1
index|]
operator|.
name|getId
argument_list|()
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getMatches
argument_list|()
index|[
literal|1
index|]
operator|.
name|getScore
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1f
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|preparePercolate
argument_list|()
operator|.
name|setIndices
argument_list|(
literal|"my-index"
argument_list|)
operator|.
name|setDocumentType
argument_list|(
literal|"my-type"
argument_list|)
operator|.
name|setSortByScore
argument_list|(
literal|true
argument_list|)
operator|.
name|setPercolateDoc
argument_list|(
name|docBuilder
argument_list|()
operator|.
name|setDoc
argument_list|(
literal|"field"
argument_list|,
literal|"value"
argument_list|)
argument_list|)
operator|.
name|setPercolateQuery
argument_list|(
name|QueryBuilders
operator|.
name|functionScoreQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|,
name|scriptFunction
argument_list|(
literal|"doc['level'].value"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0l
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getShardFailures
argument_list|()
operator|.
name|length
argument_list|,
name|greaterThan
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|ShardOperationFailedException
name|failure
range|:
name|response
operator|.
name|getShardFailures
argument_list|()
control|)
block|{
name|assertThat
argument_list|(
name|failure
operator|.
name|status
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|RestStatus
operator|.
name|BAD_REQUEST
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|failure
operator|.
name|reason
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"Can't sort if size isn't specified"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testPercolateSorting_unsupportedField
specifier|public
name|void
name|testPercolateSorting_unsupportedField
parameter_list|()
throws|throws
name|Exception
block|{
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"my-index"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"my-type"
argument_list|,
literal|"field"
argument_list|,
literal|"type=string"
argument_list|)
operator|.
name|addMapping
argument_list|(
name|PercolatorService
operator|.
name|TYPE_NAME
argument_list|,
literal|"level"
argument_list|,
literal|"type=integer"
argument_list|,
literal|"query"
argument_list|,
literal|"type=object,enabled=false"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"my-index"
argument_list|,
name|PercolatorService
operator|.
name|TYPE_NAME
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"query"
argument_list|,
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|field
argument_list|(
literal|"level"
argument_list|,
literal|1
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"my-index"
argument_list|,
name|PercolatorService
operator|.
name|TYPE_NAME
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"query"
argument_list|,
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|field
argument_list|(
literal|"level"
argument_list|,
literal|2
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|PercolateResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|preparePercolate
argument_list|()
operator|.
name|setIndices
argument_list|(
literal|"my-index"
argument_list|)
operator|.
name|setDocumentType
argument_list|(
literal|"my-type"
argument_list|)
operator|.
name|setSize
argument_list|(
literal|2
argument_list|)
operator|.
name|setPercolateDoc
argument_list|(
name|docBuilder
argument_list|()
operator|.
name|setDoc
argument_list|(
literal|"field"
argument_list|,
literal|"value"
argument_list|)
argument_list|)
operator|.
name|setPercolateQuery
argument_list|(
name|QueryBuilders
operator|.
name|functionScoreQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|,
name|scriptFunction
argument_list|(
literal|"doc['level'].value"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|addSort
argument_list|(
name|SortBuilders
operator|.
name|fieldSort
argument_list|(
literal|"level"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getShardFailures
argument_list|()
operator|.
name|length
argument_list|,
name|equalTo
argument_list|(
name|getNumShards
argument_list|(
literal|"my-index"
argument_list|)
operator|.
name|numPrimaries
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getShardFailures
argument_list|()
index|[
literal|0
index|]
operator|.
name|status
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|RestStatus
operator|.
name|BAD_REQUEST
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getShardFailures
argument_list|()
index|[
literal|0
index|]
operator|.
name|reason
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"Only _score desc is supported"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPercolateOnEmptyIndex
specifier|public
name|void
name|testPercolateOnEmptyIndex
parameter_list|()
throws|throws
name|Exception
block|{
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"my-index"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|PercolateResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|preparePercolate
argument_list|()
operator|.
name|setIndices
argument_list|(
literal|"my-index"
argument_list|)
operator|.
name|setDocumentType
argument_list|(
literal|"my-type"
argument_list|)
operator|.
name|setSortByScore
argument_list|(
literal|true
argument_list|)
operator|.
name|setSize
argument_list|(
literal|2
argument_list|)
operator|.
name|setPercolateDoc
argument_list|(
name|docBuilder
argument_list|()
operator|.
name|setDoc
argument_list|(
literal|"field"
argument_list|,
literal|"value"
argument_list|)
argument_list|)
operator|.
name|setPercolateQuery
argument_list|(
name|QueryBuilders
operator|.
name|functionScoreQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|,
name|scriptFunction
argument_list|(
literal|"doc['level'].value"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertMatchCount
argument_list|(
name|response
argument_list|,
literal|0l
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPercolateNotEmptyIndexButNoRefresh
specifier|public
name|void
name|testPercolateNotEmptyIndexButNoRefresh
parameter_list|()
throws|throws
name|Exception
block|{
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"my-index"
argument_list|)
operator|.
name|setSettings
argument_list|(
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"index.refresh_interval"
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"my-index"
argument_list|,
name|PercolatorService
operator|.
name|TYPE_NAME
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"query"
argument_list|,
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|field
argument_list|(
literal|"level"
argument_list|,
literal|1
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|PercolateResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|preparePercolate
argument_list|()
operator|.
name|setIndices
argument_list|(
literal|"my-index"
argument_list|)
operator|.
name|setDocumentType
argument_list|(
literal|"my-type"
argument_list|)
operator|.
name|setSortByScore
argument_list|(
literal|true
argument_list|)
operator|.
name|setSize
argument_list|(
literal|2
argument_list|)
operator|.
name|setPercolateDoc
argument_list|(
name|docBuilder
argument_list|()
operator|.
name|setDoc
argument_list|(
literal|"field"
argument_list|,
literal|"value"
argument_list|)
argument_list|)
operator|.
name|setPercolateQuery
argument_list|(
name|QueryBuilders
operator|.
name|functionScoreQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|,
name|scriptFunction
argument_list|(
literal|"doc['level'].value"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertMatchCount
argument_list|(
name|response
argument_list|,
literal|0l
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPercolatorWithHighlighting
specifier|public
name|void
name|testPercolatorWithHighlighting
parameter_list|()
throws|throws
name|Exception
block|{
name|Client
name|client
init|=
name|client
argument_list|()
decl_stmt|;
name|createIndex
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
comment|// FVH HL
name|client
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|preparePutMapping
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setType
argument_list|(
literal|"type"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"store"
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
operator|.
name|field
argument_list|(
literal|"term_vector"
argument_list|,
literal|"with_positions_offsets"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
comment|// plain hl with stored fields
name|client
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|preparePutMapping
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setType
argument_list|(
literal|"type"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"store"
argument_list|,
literal|true
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
comment|// positions hl
name|client
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|preparePutMapping
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setType
argument_list|(
literal|"type"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|field
argument_list|(
literal|"index_options"
argument_list|,
literal|"offsets"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
name|logger
operator|.
name|info
argument_list|(
literal|"--> register a queries"
argument_list|)
expr_stmt|;
name|client
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
name|PercolatorService
operator|.
name|TYPE_NAME
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"query"
argument_list|,
name|matchQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"brown fox"
argument_list|)
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
name|PercolatorService
operator|.
name|TYPE_NAME
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"query"
argument_list|,
name|matchQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"lazy dog"
argument_list|)
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
name|PercolatorService
operator|.
name|TYPE_NAME
argument_list|,
literal|"3"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"query"
argument_list|,
name|termQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"jumps"
argument_list|)
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
name|PercolatorService
operator|.
name|TYPE_NAME
argument_list|,
literal|"4"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"query"
argument_list|,
name|termQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"dog"
argument_list|)
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
name|PercolatorService
operator|.
name|TYPE_NAME
argument_list|,
literal|"5"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"query"
argument_list|,
name|termQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"fox"
argument_list|)
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> Percolate doc with field1=The quick brown fox jumps over the lazy dog"
argument_list|)
expr_stmt|;
name|PercolateResponse
name|response
init|=
name|client
operator|.
name|preparePercolate
argument_list|()
operator|.
name|setIndices
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setDocumentType
argument_list|(
literal|"type"
argument_list|)
operator|.
name|setSize
argument_list|(
literal|5
argument_list|)
operator|.
name|setPercolateDoc
argument_list|(
name|docBuilder
argument_list|()
operator|.
name|setDoc
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"field1"
argument_list|,
literal|"The quick brown fox jumps over the lazy dog"
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setHighlightBuilder
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
literal|"field1"
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertMatchCount
argument_list|(
name|response
argument_list|,
literal|5l
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getMatches
argument_list|()
argument_list|,
name|arrayWithSize
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|convertFromTextArray
argument_list|(
name|response
operator|.
name|getMatches
argument_list|()
argument_list|,
literal|"test"
argument_list|)
argument_list|,
name|arrayContainingInAnyOrder
argument_list|(
literal|"1"
argument_list|,
literal|"2"
argument_list|,
literal|"3"
argument_list|,
literal|"4"
argument_list|,
literal|"5"
argument_list|)
argument_list|)
expr_stmt|;
name|PercolateResponse
operator|.
name|Match
index|[]
name|matches
init|=
name|response
operator|.
name|getMatches
argument_list|()
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|matches
argument_list|,
operator|new
name|Comparator
argument_list|<
name|PercolateResponse
operator|.
name|Match
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|PercolateResponse
operator|.
name|Match
name|a
parameter_list|,
name|PercolateResponse
operator|.
name|Match
name|b
parameter_list|)
block|{
return|return
name|a
operator|.
name|getId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|b
operator|.
name|getId
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|matches
index|[
literal|0
index|]
operator|.
name|getHighlightFields
argument_list|()
operator|.
name|get
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|fragments
argument_list|()
index|[
literal|0
index|]
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"The quick<em>brown</em><em>fox</em> jumps over the lazy dog"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|matches
index|[
literal|1
index|]
operator|.
name|getHighlightFields
argument_list|()
operator|.
name|get
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|fragments
argument_list|()
index|[
literal|0
index|]
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"The quick brown fox jumps over the<em>lazy</em><em>dog</em>"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|matches
index|[
literal|2
index|]
operator|.
name|getHighlightFields
argument_list|()
operator|.
name|get
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|fragments
argument_list|()
index|[
literal|0
index|]
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"The quick brown fox<em>jumps</em> over the lazy dog"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|matches
index|[
literal|3
index|]
operator|.
name|getHighlightFields
argument_list|()
operator|.
name|get
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|fragments
argument_list|()
index|[
literal|0
index|]
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"The quick brown fox jumps over the lazy<em>dog</em>"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|matches
index|[
literal|4
index|]
operator|.
name|getHighlightFields
argument_list|()
operator|.
name|get
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|fragments
argument_list|()
index|[
literal|0
index|]
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"The quick brown<em>fox</em> jumps over the lazy dog"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Anything with percolate query isn't realtime
name|client
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareRefresh
argument_list|(
literal|"test"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> Query percolate doc with field1=The quick brown fox jumps over the lazy dog"
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
operator|.
name|preparePercolate
argument_list|()
operator|.
name|setIndices
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setDocumentType
argument_list|(
literal|"type"
argument_list|)
operator|.
name|setSize
argument_list|(
literal|5
argument_list|)
operator|.
name|setPercolateDoc
argument_list|(
name|docBuilder
argument_list|()
operator|.
name|setDoc
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"field1"
argument_list|,
literal|"The quick brown fox jumps over the lazy dog"
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setHighlightBuilder
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
literal|"field1"
argument_list|)
argument_list|)
operator|.
name|setPercolateQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertMatchCount
argument_list|(
name|response
argument_list|,
literal|5l
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getMatches
argument_list|()
argument_list|,
name|arrayWithSize
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|convertFromTextArray
argument_list|(
name|response
operator|.
name|getMatches
argument_list|()
argument_list|,
literal|"test"
argument_list|)
argument_list|,
name|arrayContainingInAnyOrder
argument_list|(
literal|"1"
argument_list|,
literal|"2"
argument_list|,
literal|"3"
argument_list|,
literal|"4"
argument_list|,
literal|"5"
argument_list|)
argument_list|)
expr_stmt|;
name|matches
operator|=
name|response
operator|.
name|getMatches
argument_list|()
expr_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|matches
argument_list|,
operator|new
name|Comparator
argument_list|<
name|PercolateResponse
operator|.
name|Match
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|PercolateResponse
operator|.
name|Match
name|a
parameter_list|,
name|PercolateResponse
operator|.
name|Match
name|b
parameter_list|)
block|{
return|return
name|a
operator|.
name|getId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|b
operator|.
name|getId
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|matches
index|[
literal|0
index|]
operator|.
name|getHighlightFields
argument_list|()
operator|.
name|get
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|fragments
argument_list|()
index|[
literal|0
index|]
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"The quick<em>brown</em><em>fox</em> jumps over the lazy dog"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|matches
index|[
literal|1
index|]
operator|.
name|getHighlightFields
argument_list|()
operator|.
name|get
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|fragments
argument_list|()
index|[
literal|0
index|]
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"The quick brown fox jumps over the<em>lazy</em><em>dog</em>"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|matches
index|[
literal|2
index|]
operator|.
name|getHighlightFields
argument_list|()
operator|.
name|get
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|fragments
argument_list|()
index|[
literal|0
index|]
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"The quick brown fox<em>jumps</em> over the lazy dog"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|matches
index|[
literal|3
index|]
operator|.
name|getHighlightFields
argument_list|()
operator|.
name|get
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|fragments
argument_list|()
index|[
literal|0
index|]
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"The quick brown fox jumps over the lazy<em>dog</em>"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|matches
index|[
literal|4
index|]
operator|.
name|getHighlightFields
argument_list|()
operator|.
name|get
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|fragments
argument_list|()
index|[
literal|0
index|]
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"The quick brown<em>fox</em> jumps over the lazy dog"
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> Query percolate with score for doc with field1=The quick brown fox jumps over the lazy dog"
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
operator|.
name|preparePercolate
argument_list|()
operator|.
name|setIndices
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setDocumentType
argument_list|(
literal|"type"
argument_list|)
operator|.
name|setSize
argument_list|(
literal|5
argument_list|)
operator|.
name|setPercolateDoc
argument_list|(
name|docBuilder
argument_list|()
operator|.
name|setDoc
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"field1"
argument_list|,
literal|"The quick brown fox jumps over the lazy dog"
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setHighlightBuilder
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
literal|"field1"
argument_list|)
argument_list|)
operator|.
name|setPercolateQuery
argument_list|(
name|functionScoreQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|FactorBuilder
argument_list|()
operator|.
name|boostFactor
argument_list|(
literal|5.5f
argument_list|)
argument_list|)
argument_list|)
operator|.
name|setScore
argument_list|(
literal|true
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertNoFailures
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getMatches
argument_list|()
argument_list|,
name|arrayWithSize
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|convertFromTextArray
argument_list|(
name|response
operator|.
name|getMatches
argument_list|()
argument_list|,
literal|"test"
argument_list|)
argument_list|,
name|arrayContainingInAnyOrder
argument_list|(
literal|"1"
argument_list|,
literal|"2"
argument_list|,
literal|"3"
argument_list|,
literal|"4"
argument_list|,
literal|"5"
argument_list|)
argument_list|)
expr_stmt|;
name|matches
operator|=
name|response
operator|.
name|getMatches
argument_list|()
expr_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|matches
argument_list|,
operator|new
name|Comparator
argument_list|<
name|PercolateResponse
operator|.
name|Match
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|PercolateResponse
operator|.
name|Match
name|a
parameter_list|,
name|PercolateResponse
operator|.
name|Match
name|b
parameter_list|)
block|{
return|return
name|a
operator|.
name|getId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|b
operator|.
name|getId
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|matches
index|[
literal|0
index|]
operator|.
name|getScore
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|5.5f
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|matches
index|[
literal|0
index|]
operator|.
name|getHighlightFields
argument_list|()
operator|.
name|get
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|fragments
argument_list|()
index|[
literal|0
index|]
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"The quick<em>brown</em><em>fox</em> jumps over the lazy dog"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|matches
index|[
literal|1
index|]
operator|.
name|getScore
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|5.5f
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|matches
index|[
literal|1
index|]
operator|.
name|getHighlightFields
argument_list|()
operator|.
name|get
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|fragments
argument_list|()
index|[
literal|0
index|]
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"The quick brown fox jumps over the<em>lazy</em><em>dog</em>"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|matches
index|[
literal|2
index|]
operator|.
name|getScore
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|5.5f
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|matches
index|[
literal|2
index|]
operator|.
name|getHighlightFields
argument_list|()
operator|.
name|get
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|fragments
argument_list|()
index|[
literal|0
index|]
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"The quick brown fox<em>jumps</em> over the lazy dog"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|matches
index|[
literal|3
index|]
operator|.
name|getScore
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|5.5f
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|matches
index|[
literal|3
index|]
operator|.
name|getHighlightFields
argument_list|()
operator|.
name|get
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|fragments
argument_list|()
index|[
literal|0
index|]
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"The quick brown fox jumps over the lazy<em>dog</em>"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|matches
index|[
literal|4
index|]
operator|.
name|getScore
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|5.5f
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|matches
index|[
literal|4
index|]
operator|.
name|getHighlightFields
argument_list|()
operator|.
name|get
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|fragments
argument_list|()
index|[
literal|0
index|]
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"The quick brown<em>fox</em> jumps over the lazy dog"
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> Top percolate for doc with field1=The quick brown fox jumps over the lazy dog"
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
operator|.
name|preparePercolate
argument_list|()
operator|.
name|setIndices
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setDocumentType
argument_list|(
literal|"type"
argument_list|)
operator|.
name|setSize
argument_list|(
literal|5
argument_list|)
operator|.
name|setPercolateDoc
argument_list|(
name|docBuilder
argument_list|()
operator|.
name|setDoc
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"field1"
argument_list|,
literal|"The quick brown fox jumps over the lazy dog"
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setHighlightBuilder
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
literal|"field1"
argument_list|)
argument_list|)
operator|.
name|setPercolateQuery
argument_list|(
name|functionScoreQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|FactorBuilder
argument_list|()
operator|.
name|boostFactor
argument_list|(
literal|5.5f
argument_list|)
argument_list|)
argument_list|)
operator|.
name|setSortByScore
argument_list|(
literal|true
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertMatchCount
argument_list|(
name|response
argument_list|,
literal|5l
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getMatches
argument_list|()
argument_list|,
name|arrayWithSize
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|convertFromTextArray
argument_list|(
name|response
operator|.
name|getMatches
argument_list|()
argument_list|,
literal|"test"
argument_list|)
argument_list|,
name|arrayContainingInAnyOrder
argument_list|(
literal|"1"
argument_list|,
literal|"2"
argument_list|,
literal|"3"
argument_list|,
literal|"4"
argument_list|,
literal|"5"
argument_list|)
argument_list|)
expr_stmt|;
name|matches
operator|=
name|response
operator|.
name|getMatches
argument_list|()
expr_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|matches
argument_list|,
operator|new
name|Comparator
argument_list|<
name|PercolateResponse
operator|.
name|Match
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|PercolateResponse
operator|.
name|Match
name|a
parameter_list|,
name|PercolateResponse
operator|.
name|Match
name|b
parameter_list|)
block|{
return|return
name|a
operator|.
name|getId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|b
operator|.
name|getId
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|matches
index|[
literal|0
index|]
operator|.
name|getScore
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|5.5f
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|matches
index|[
literal|0
index|]
operator|.
name|getHighlightFields
argument_list|()
operator|.
name|get
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|fragments
argument_list|()
index|[
literal|0
index|]
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"The quick<em>brown</em><em>fox</em> jumps over the lazy dog"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|matches
index|[
literal|1
index|]
operator|.
name|getScore
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|5.5f
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|matches
index|[
literal|1
index|]
operator|.
name|getHighlightFields
argument_list|()
operator|.
name|get
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|fragments
argument_list|()
index|[
literal|0
index|]
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"The quick brown fox jumps over the<em>lazy</em><em>dog</em>"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|matches
index|[
literal|2
index|]
operator|.
name|getScore
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|5.5f
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|matches
index|[
literal|2
index|]
operator|.
name|getHighlightFields
argument_list|()
operator|.
name|get
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|fragments
argument_list|()
index|[
literal|0
index|]
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"The quick brown fox<em>jumps</em> over the lazy dog"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|matches
index|[
literal|3
index|]
operator|.
name|getScore
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|5.5f
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|matches
index|[
literal|3
index|]
operator|.
name|getHighlightFields
argument_list|()
operator|.
name|get
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|fragments
argument_list|()
index|[
literal|0
index|]
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"The quick brown fox jumps over the lazy<em>dog</em>"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|matches
index|[
literal|4
index|]
operator|.
name|getScore
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|5.5f
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|matches
index|[
literal|4
index|]
operator|.
name|getHighlightFields
argument_list|()
operator|.
name|get
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|fragments
argument_list|()
index|[
literal|0
index|]
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"The quick brown<em>fox</em> jumps over the lazy dog"
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> Top percolate for doc with field1=The quick brown fox jumps over the lazy dog"
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
operator|.
name|preparePercolate
argument_list|()
operator|.
name|setIndices
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setDocumentType
argument_list|(
literal|"type"
argument_list|)
operator|.
name|setSize
argument_list|(
literal|5
argument_list|)
operator|.
name|setPercolateDoc
argument_list|(
name|docBuilder
argument_list|()
operator|.
name|setDoc
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"field1"
argument_list|,
literal|"The quick brown fox jumps over the lazy dog"
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setHighlightBuilder
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|highlightQuery
argument_list|(
name|QueryBuilders
operator|.
name|matchQuery
argument_list|(
literal|"field1"
argument_list|,
literal|"jumps"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|setPercolateQuery
argument_list|(
name|functionScoreQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|FactorBuilder
argument_list|()
operator|.
name|boostFactor
argument_list|(
literal|5.5f
argument_list|)
argument_list|)
argument_list|)
operator|.
name|setSortByScore
argument_list|(
literal|true
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertMatchCount
argument_list|(
name|response
argument_list|,
literal|5l
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getMatches
argument_list|()
argument_list|,
name|arrayWithSize
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|convertFromTextArray
argument_list|(
name|response
operator|.
name|getMatches
argument_list|()
argument_list|,
literal|"test"
argument_list|)
argument_list|,
name|arrayContainingInAnyOrder
argument_list|(
literal|"1"
argument_list|,
literal|"2"
argument_list|,
literal|"3"
argument_list|,
literal|"4"
argument_list|,
literal|"5"
argument_list|)
argument_list|)
expr_stmt|;
name|matches
operator|=
name|response
operator|.
name|getMatches
argument_list|()
expr_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|matches
argument_list|,
operator|new
name|Comparator
argument_list|<
name|PercolateResponse
operator|.
name|Match
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|PercolateResponse
operator|.
name|Match
name|a
parameter_list|,
name|PercolateResponse
operator|.
name|Match
name|b
parameter_list|)
block|{
return|return
name|a
operator|.
name|getId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|b
operator|.
name|getId
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|matches
index|[
literal|0
index|]
operator|.
name|getScore
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|5.5f
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|matches
index|[
literal|0
index|]
operator|.
name|getHighlightFields
argument_list|()
operator|.
name|get
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|fragments
argument_list|()
index|[
literal|0
index|]
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"The quick brown fox<em>jumps</em> over the lazy dog"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|matches
index|[
literal|1
index|]
operator|.
name|getScore
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|5.5f
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|matches
index|[
literal|1
index|]
operator|.
name|getHighlightFields
argument_list|()
operator|.
name|get
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|fragments
argument_list|()
index|[
literal|0
index|]
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"The quick brown fox<em>jumps</em> over the lazy dog"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|matches
index|[
literal|2
index|]
operator|.
name|getScore
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|5.5f
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|matches
index|[
literal|2
index|]
operator|.
name|getHighlightFields
argument_list|()
operator|.
name|get
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|fragments
argument_list|()
index|[
literal|0
index|]
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"The quick brown fox<em>jumps</em> over the lazy dog"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|matches
index|[
literal|3
index|]
operator|.
name|getScore
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|5.5f
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|matches
index|[
literal|3
index|]
operator|.
name|getHighlightFields
argument_list|()
operator|.
name|get
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|fragments
argument_list|()
index|[
literal|0
index|]
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"The quick brown fox<em>jumps</em> over the lazy dog"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|matches
index|[
literal|4
index|]
operator|.
name|getScore
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|5.5f
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|matches
index|[
literal|4
index|]
operator|.
name|getHighlightFields
argument_list|()
operator|.
name|get
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|fragments
argument_list|()
index|[
literal|0
index|]
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"The quick brown fox<em>jumps</em> over the lazy dog"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Highlighting an existing doc
name|client
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
literal|"type"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"field1"
argument_list|,
literal|"The quick brown fox jumps over the lazy dog"
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> Top percolate for doc with field1=The quick brown fox jumps over the lazy dog"
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
operator|.
name|preparePercolate
argument_list|()
operator|.
name|setIndices
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setDocumentType
argument_list|(
literal|"type"
argument_list|)
operator|.
name|setSize
argument_list|(
literal|5
argument_list|)
operator|.
name|setGetRequest
argument_list|(
name|Requests
operator|.
name|getRequest
argument_list|(
literal|"test"
argument_list|)
operator|.
name|type
argument_list|(
literal|"type"
argument_list|)
operator|.
name|id
argument_list|(
literal|"1"
argument_list|)
argument_list|)
operator|.
name|setHighlightBuilder
argument_list|(
operator|new
name|HighlightBuilder
argument_list|()
operator|.
name|field
argument_list|(
literal|"field1"
argument_list|)
argument_list|)
operator|.
name|setPercolateQuery
argument_list|(
name|functionScoreQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|FactorBuilder
argument_list|()
operator|.
name|boostFactor
argument_list|(
literal|5.5f
argument_list|)
argument_list|)
argument_list|)
operator|.
name|setSortByScore
argument_list|(
literal|true
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertMatchCount
argument_list|(
name|response
argument_list|,
literal|5l
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getMatches
argument_list|()
argument_list|,
name|arrayWithSize
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|convertFromTextArray
argument_list|(
name|response
operator|.
name|getMatches
argument_list|()
argument_list|,
literal|"test"
argument_list|)
argument_list|,
name|arrayContainingInAnyOrder
argument_list|(
literal|"1"
argument_list|,
literal|"2"
argument_list|,
literal|"3"
argument_list|,
literal|"4"
argument_list|,
literal|"5"
argument_list|)
argument_list|)
expr_stmt|;
name|matches
operator|=
name|response
operator|.
name|getMatches
argument_list|()
expr_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|matches
argument_list|,
operator|new
name|Comparator
argument_list|<
name|PercolateResponse
operator|.
name|Match
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|PercolateResponse
operator|.
name|Match
name|a
parameter_list|,
name|PercolateResponse
operator|.
name|Match
name|b
parameter_list|)
block|{
return|return
name|a
operator|.
name|getId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|b
operator|.
name|getId
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|matches
index|[
literal|0
index|]
operator|.
name|getScore
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|5.5f
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|matches
index|[
literal|0
index|]
operator|.
name|getHighlightFields
argument_list|()
operator|.
name|get
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|fragments
argument_list|()
index|[
literal|0
index|]
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"The quick<em>brown</em><em>fox</em> jumps over the lazy dog"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|matches
index|[
literal|1
index|]
operator|.
name|getScore
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|5.5f
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|matches
index|[
literal|1
index|]
operator|.
name|getHighlightFields
argument_list|()
operator|.
name|get
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|fragments
argument_list|()
index|[
literal|0
index|]
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"The quick brown fox jumps over the<em>lazy</em><em>dog</em>"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|matches
index|[
literal|2
index|]
operator|.
name|getScore
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|5.5f
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|matches
index|[
literal|2
index|]
operator|.
name|getHighlightFields
argument_list|()
operator|.
name|get
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|fragments
argument_list|()
index|[
literal|0
index|]
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"The quick brown fox<em>jumps</em> over the lazy dog"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|matches
index|[
literal|3
index|]
operator|.
name|getScore
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|5.5f
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|matches
index|[
literal|3
index|]
operator|.
name|getHighlightFields
argument_list|()
operator|.
name|get
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|fragments
argument_list|()
index|[
literal|0
index|]
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"The quick brown fox jumps over the lazy<em>dog</em>"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|matches
index|[
literal|4
index|]
operator|.
name|getScore
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|5.5f
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|matches
index|[
literal|4
index|]
operator|.
name|getHighlightFields
argument_list|()
operator|.
name|get
argument_list|(
literal|"field1"
argument_list|)
operator|.
name|fragments
argument_list|()
index|[
literal|0
index|]
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"The quick brown<em>fox</em> jumps over the lazy dog"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|TestLogging
argument_list|(
literal|"action.admin.indices.mapping.delete:TRACE"
argument_list|)
DECL|method|testDeletePercolatorType
specifier|public
name|void
name|testDeletePercolatorType
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"test1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"test2"
argument_list|)
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test1"
argument_list|,
name|PercolatorService
operator|.
name|TYPE_NAME
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"query"
argument_list|,
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test2"
argument_list|,
name|PercolatorService
operator|.
name|TYPE_NAME
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"query"
argument_list|,
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|PercolateResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|preparePercolate
argument_list|()
operator|.
name|setIndices
argument_list|(
literal|"test1"
argument_list|,
literal|"test2"
argument_list|)
operator|.
name|setDocumentType
argument_list|(
literal|"type"
argument_list|)
operator|.
name|setOnlyCount
argument_list|(
literal|true
argument_list|)
operator|.
name|setPercolateDoc
argument_list|(
name|docBuilder
argument_list|()
operator|.
name|setDoc
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"field1"
argument_list|,
literal|"b"
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertMatchCount
argument_list|(
name|response
argument_list|,
literal|2l
argument_list|)
expr_stmt|;
name|awaitBusy
argument_list|(
operator|new
name|Predicate
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
for|for
control|(
name|Client
name|client
range|:
name|cluster
argument_list|()
control|)
block|{
name|GetMappingsResponse
name|getMappingsResponse
init|=
name|client
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareGetMappings
argument_list|(
literal|"test1"
argument_list|,
literal|"test2"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|boolean
name|hasPercolatorType
init|=
name|getMappingsResponse
operator|.
name|getMappings
argument_list|()
operator|.
name|get
argument_list|(
literal|"test1"
argument_list|)
operator|.
name|containsKey
argument_list|(
name|PercolatorService
operator|.
name|TYPE_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|hasPercolatorType
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|getMappingsResponse
operator|.
name|getMappings
argument_list|()
operator|.
name|get
argument_list|(
literal|"test2"
argument_list|)
operator|.
name|containsKey
argument_list|(
name|PercolatorService
operator|.
name|TYPE_NAME
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|(
literal|"test1"
argument_list|,
literal|"test2"
argument_list|)
expr_stmt|;
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareDeleteMapping
argument_list|(
literal|"test1"
argument_list|)
operator|.
name|setType
argument_list|(
name|PercolatorService
operator|.
name|TYPE_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|preparePercolate
argument_list|()
operator|.
name|setIndices
argument_list|(
literal|"test1"
argument_list|,
literal|"test2"
argument_list|)
operator|.
name|setDocumentType
argument_list|(
literal|"type"
argument_list|)
operator|.
name|setOnlyCount
argument_list|(
literal|true
argument_list|)
operator|.
name|setPercolateDoc
argument_list|(
name|docBuilder
argument_list|()
operator|.
name|setDoc
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"field1"
argument_list|,
literal|"b"
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertMatchCount
argument_list|(
name|response
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareDeleteMapping
argument_list|(
literal|"test2"
argument_list|)
operator|.
name|setType
argument_list|(
name|PercolatorService
operator|.
name|TYPE_NAME
argument_list|)
argument_list|)
expr_stmt|;
comment|// Percolate api should return 0 matches, because all docs in _percolate type have been removed.
name|response
operator|=
name|client
argument_list|()
operator|.
name|preparePercolate
argument_list|()
operator|.
name|setIndices
argument_list|(
literal|"test1"
argument_list|,
literal|"test2"
argument_list|)
operator|.
name|setDocumentType
argument_list|(
literal|"type"
argument_list|)
operator|.
name|setOnlyCount
argument_list|(
literal|true
argument_list|)
operator|.
name|setPercolateDoc
argument_list|(
name|docBuilder
argument_list|()
operator|.
name|setDoc
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"field1"
argument_list|,
literal|"b"
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|assertMatchCount
argument_list|(
name|response
argument_list|,
literal|0l
argument_list|)
expr_stmt|;
block|}
DECL|method|convertFromTextArray
specifier|public
specifier|static
name|String
index|[]
name|convertFromTextArray
parameter_list|(
name|PercolateResponse
operator|.
name|Match
index|[]
name|matches
parameter_list|,
name|String
name|index
parameter_list|)
block|{
if|if
condition|(
name|matches
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
name|Strings
operator|.
name|EMPTY_ARRAY
return|;
block|}
name|String
index|[]
name|strings
init|=
operator|new
name|String
index|[
name|matches
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|matches
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|index
argument_list|,
name|matches
index|[
name|i
index|]
operator|.
name|getIndex
argument_list|()
operator|.
name|string
argument_list|()
argument_list|)
expr_stmt|;
name|strings
index|[
name|i
index|]
operator|=
name|matches
index|[
name|i
index|]
operator|.
name|getId
argument_list|()
operator|.
name|string
argument_list|()
expr_stmt|;
block|}
return|return
name|strings
return|;
block|}
annotation|@
name|Test
DECL|method|percolateNonMatchingConstantScoreQuery
specifier|public
name|void
name|percolateNonMatchingConstantScoreQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> register a query"
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
name|PercolatorService
operator|.
name|TYPE_NAME
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"query"
argument_list|,
name|QueryBuilders
operator|.
name|constantScoreQuery
argument_list|(
name|FilterBuilders
operator|.
name|andFilter
argument_list|(
name|FilterBuilders
operator|.
name|queryFilter
argument_list|(
name|QueryBuilders
operator|.
name|queryString
argument_list|(
literal|"root"
argument_list|)
argument_list|)
argument_list|,
name|FilterBuilders
operator|.
name|termFilter
argument_list|(
literal|"message"
argument_list|,
literal|"tree"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|setRefresh
argument_list|(
literal|true
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|PercolateResponse
name|percolate
init|=
name|client
argument_list|()
operator|.
name|preparePercolate
argument_list|()
operator|.
name|setIndices
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setDocumentType
argument_list|(
literal|"doc"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"doc"
argument_list|)
operator|.
name|field
argument_list|(
literal|"message"
argument_list|,
literal|"A new bonsai tree "
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|percolate
operator|.
name|getFailedShards
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertMatchCount
argument_list|(
name|percolate
argument_list|,
literal|0l
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNestedPercolation
specifier|public
name|void
name|testNestedPercolation
parameter_list|()
throws|throws
name|IOException
block|{
name|initNestedIndexAndPercolation
argument_list|()
expr_stmt|;
name|PercolateResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|preparePercolate
argument_list|()
operator|.
name|setPercolateDoc
argument_list|(
operator|new
name|PercolateSourceBuilder
operator|.
name|DocBuilder
argument_list|()
operator|.
name|setDoc
argument_list|(
name|getNotMatchingNestedDoc
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setIndices
argument_list|(
literal|"nestedindex"
argument_list|)
operator|.
name|setDocumentType
argument_list|(
literal|"company"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|response
operator|.
name|getMatches
argument_list|()
operator|.
name|length
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|preparePercolate
argument_list|()
operator|.
name|setPercolateDoc
argument_list|(
operator|new
name|PercolateSourceBuilder
operator|.
name|DocBuilder
argument_list|()
operator|.
name|setDoc
argument_list|(
name|getMatchingNestedDoc
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setIndices
argument_list|(
literal|"nestedindex"
argument_list|)
operator|.
name|setDocumentType
argument_list|(
literal|"company"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|response
operator|.
name|getMatches
argument_list|()
operator|.
name|length
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|response
operator|.
name|getMatches
argument_list|()
index|[
literal|0
index|]
operator|.
name|getId
argument_list|()
operator|.
name|string
argument_list|()
argument_list|,
literal|"Q"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|makeSureNonNestedDocumentDoesNotTriggerAssertion
specifier|public
name|void
name|makeSureNonNestedDocumentDoesNotTriggerAssertion
parameter_list|()
throws|throws
name|IOException
block|{
name|initNestedIndexAndPercolation
argument_list|()
expr_stmt|;
name|XContentBuilder
name|doc
init|=
name|jsonBuilder
argument_list|()
decl_stmt|;
name|doc
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|doc
operator|.
name|field
argument_list|(
literal|"some_unnested_field"
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|PercolateResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|preparePercolate
argument_list|()
operator|.
name|setPercolateDoc
argument_list|(
operator|new
name|PercolateSourceBuilder
operator|.
name|DocBuilder
argument_list|()
operator|.
name|setDoc
argument_list|(
name|doc
argument_list|)
argument_list|)
operator|.
name|setIndices
argument_list|(
literal|"nestedindex"
argument_list|)
operator|.
name|setDocumentType
argument_list|(
literal|"company"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertNoFailures
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNestedPercolationOnExistingDoc
specifier|public
name|void
name|testNestedPercolationOnExistingDoc
parameter_list|()
throws|throws
name|IOException
block|{
name|initNestedIndexAndPercolation
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"nestedindex"
argument_list|,
literal|"company"
argument_list|,
literal|"notmatching"
argument_list|)
operator|.
name|setSource
argument_list|(
name|getNotMatchingNestedDoc
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"nestedindex"
argument_list|,
literal|"company"
argument_list|,
literal|"matching"
argument_list|)
operator|.
name|setSource
argument_list|(
name|getMatchingNestedDoc
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|PercolateResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|preparePercolate
argument_list|()
operator|.
name|setGetRequest
argument_list|(
name|Requests
operator|.
name|getRequest
argument_list|(
literal|"nestedindex"
argument_list|)
operator|.
name|type
argument_list|(
literal|"company"
argument_list|)
operator|.
name|id
argument_list|(
literal|"notmatching"
argument_list|)
argument_list|)
operator|.
name|setDocumentType
argument_list|(
literal|"company"
argument_list|)
operator|.
name|setIndices
argument_list|(
literal|"nestedindex"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|response
operator|.
name|getMatches
argument_list|()
operator|.
name|length
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
argument_list|()
operator|.
name|preparePercolate
argument_list|()
operator|.
name|setGetRequest
argument_list|(
name|Requests
operator|.
name|getRequest
argument_list|(
literal|"nestedindex"
argument_list|)
operator|.
name|type
argument_list|(
literal|"company"
argument_list|)
operator|.
name|id
argument_list|(
literal|"matching"
argument_list|)
argument_list|)
operator|.
name|setDocumentType
argument_list|(
literal|"company"
argument_list|)
operator|.
name|setIndices
argument_list|(
literal|"nestedindex"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|response
operator|.
name|getMatches
argument_list|()
operator|.
name|length
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|response
operator|.
name|getMatches
argument_list|()
index|[
literal|0
index|]
operator|.
name|getId
argument_list|()
operator|.
name|string
argument_list|()
argument_list|,
literal|"Q"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPercolationWithDynamicTemplates
specifier|public
name|void
name|testPercolationWithDynamicTemplates
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"idx"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type"
argument_list|,
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|field
argument_list|(
literal|"dynamic"
argument_list|,
literal|false
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"custom"
argument_list|)
operator|.
name|field
argument_list|(
literal|"dynamic"
argument_list|,
literal|true
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"object"
argument_list|)
operator|.
name|field
argument_list|(
literal|"incude_in_all"
argument_list|,
literal|false
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|startArray
argument_list|(
literal|"dynamic_templates"
argument_list|)
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"custom_fields"
argument_list|)
operator|.
name|field
argument_list|(
literal|"path_match"
argument_list|,
literal|"custom.*"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"mapping"
argument_list|)
operator|.
name|field
argument_list|(
literal|"index"
argument_list|,
literal|"not_analyzed"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"idx"
argument_list|,
name|PercolatorService
operator|.
name|TYPE_NAME
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"query"
argument_list|,
name|QueryBuilders
operator|.
name|queryString
argument_list|(
literal|"color:red"
argument_list|)
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"idx"
argument_list|,
name|PercolatorService
operator|.
name|TYPE_NAME
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"query"
argument_list|,
name|QueryBuilders
operator|.
name|queryString
argument_list|(
literal|"color:blue"
argument_list|)
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|PercolateResponse
name|percolateResponse
init|=
name|client
argument_list|()
operator|.
name|preparePercolate
argument_list|()
operator|.
name|setDocumentType
argument_list|(
literal|"type"
argument_list|)
operator|.
name|setPercolateDoc
argument_list|(
operator|new
name|PercolateSourceBuilder
operator|.
name|DocBuilder
argument_list|()
operator|.
name|setDoc
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"custom"
argument_list|)
operator|.
name|field
argument_list|(
literal|"color"
argument_list|,
literal|"blue"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertMatchCount
argument_list|(
name|percolateResponse
argument_list|,
literal|0l
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|percolateResponse
operator|.
name|getMatches
argument_list|()
argument_list|,
name|arrayWithSize
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// wait until the mapping change has propagated from the percolate request
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareHealth
argument_list|()
operator|.
name|setWaitForEvents
argument_list|(
name|Priority
operator|.
name|LANGUID
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|awaitBusy
argument_list|(
operator|new
name|Predicate
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|Object
name|input
parameter_list|)
block|{
name|PendingClusterTasksResponse
name|pendingTasks
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|preparePendingClusterTasks
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
return|return
name|pendingTasks
operator|.
name|pendingTasks
argument_list|()
operator|.
name|isEmpty
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareHealth
argument_list|()
operator|.
name|setWaitForEvents
argument_list|(
name|Priority
operator|.
name|LANGUID
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
comment|// The previous percolate request introduced the custom.color field, so now we register the query again
comment|// and the field name `color` will be resolved to `custom.color` field in mapping via smart field mapping resolving.
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"idx"
argument_list|,
name|PercolatorService
operator|.
name|TYPE_NAME
argument_list|,
literal|"2"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"query"
argument_list|,
name|QueryBuilders
operator|.
name|queryString
argument_list|(
literal|"color:blue"
argument_list|)
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
comment|// The second request will yield a match, since the query during the proper field during parsing.
name|percolateResponse
operator|=
name|client
argument_list|()
operator|.
name|preparePercolate
argument_list|()
operator|.
name|setDocumentType
argument_list|(
literal|"type"
argument_list|)
operator|.
name|setPercolateDoc
argument_list|(
operator|new
name|PercolateSourceBuilder
operator|.
name|DocBuilder
argument_list|()
operator|.
name|setDoc
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"custom"
argument_list|)
operator|.
name|field
argument_list|(
literal|"color"
argument_list|,
literal|"blue"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertMatchCount
argument_list|(
name|percolateResponse
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|percolateResponse
operator|.
name|getMatches
argument_list|()
index|[
literal|0
index|]
operator|.
name|getId
argument_list|()
operator|.
name|string
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUpdateMappingDynamicallyWhilePercolating
specifier|public
name|void
name|testUpdateMappingDynamicallyWhilePercolating
parameter_list|()
throws|throws
name|Exception
block|{
name|createIndex
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|ensureSearchable
argument_list|()
expr_stmt|;
comment|// percolation source
name|XContentBuilder
name|percolateDocumentSource
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"doc"
argument_list|)
operator|.
name|field
argument_list|(
literal|"field1"
argument_list|,
literal|1
argument_list|)
operator|.
name|field
argument_list|(
literal|"field2"
argument_list|,
literal|"value"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
decl_stmt|;
name|PercolateResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|preparePercolate
argument_list|()
operator|.
name|setIndices
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setDocumentType
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|percolateDocumentSource
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertAllSuccessful
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|assertMatchCount
argument_list|(
name|response
argument_list|,
literal|0l
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getMatches
argument_list|()
argument_list|,
name|arrayWithSize
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// wait until the mapping change has propagated
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareHealth
argument_list|()
operator|.
name|setWaitForEvents
argument_list|(
name|Priority
operator|.
name|LANGUID
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|awaitBusy
argument_list|(
operator|new
name|Predicate
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|Object
name|input
parameter_list|)
block|{
name|PendingClusterTasksResponse
name|pendingTasks
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|preparePendingClusterTasks
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
return|return
name|pendingTasks
operator|.
name|pendingTasks
argument_list|()
operator|.
name|isEmpty
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareHealth
argument_list|()
operator|.
name|setWaitForEvents
argument_list|(
name|Priority
operator|.
name|LANGUID
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|GetMappingsResponse
name|mappingsResponse
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareGetMappings
argument_list|(
literal|"test"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|mappingsResponse
operator|.
name|getMappings
argument_list|()
operator|.
name|get
argument_list|(
literal|"test"
argument_list|)
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|mappingsResponse
operator|.
name|getMappings
argument_list|()
operator|.
name|get
argument_list|(
literal|"test"
argument_list|)
operator|.
name|get
argument_list|(
literal|"type1"
argument_list|)
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|mappingsResponse
operator|.
name|getMappings
argument_list|()
operator|.
name|get
argument_list|(
literal|"test"
argument_list|)
operator|.
name|get
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|getSourceAsMap
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|mappingsResponse
operator|.
name|getMappings
argument_list|()
operator|.
name|get
argument_list|(
literal|"test"
argument_list|)
operator|.
name|get
argument_list|(
literal|"type1"
argument_list|)
operator|.
name|getSourceAsMap
argument_list|()
operator|.
name|get
argument_list|(
literal|"properties"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
operator|)
name|properties
operator|.
name|get
argument_list|(
literal|"field1"
argument_list|)
operator|)
operator|.
name|get
argument_list|(
literal|"type"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"long"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
operator|)
name|properties
operator|.
name|get
argument_list|(
literal|"field2"
argument_list|)
operator|)
operator|.
name|get
argument_list|(
literal|"type"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"string"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDontReportDeletedPercolatorDocs
specifier|public
name|void
name|testDontReportDeletedPercolatorDocs
parameter_list|()
throws|throws
name|Exception
block|{
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|ensureGreen
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
name|PercolatorService
operator|.
name|TYPE_NAME
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"query"
argument_list|,
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"test"
argument_list|,
name|PercolatorService
operator|.
name|TYPE_NAME
argument_list|,
literal|"1"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"query"
argument_list|,
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|PercolateResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|preparePercolate
argument_list|()
operator|.
name|setIndices
argument_list|(
literal|"test"
argument_list|)
operator|.
name|setDocumentType
argument_list|(
literal|"type"
argument_list|)
operator|.
name|setPercolateDoc
argument_list|(
name|docBuilder
argument_list|()
operator|.
name|setDoc
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"field"
argument_list|,
literal|"value"
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setPercolateFilter
argument_list|(
name|FilterBuilders
operator|.
name|matchAllFilter
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertMatchCount
argument_list|(
name|response
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getMatches
argument_list|()
argument_list|,
name|arrayWithSize
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|convertFromTextArray
argument_list|(
name|response
operator|.
name|getMatches
argument_list|()
argument_list|,
literal|"test"
argument_list|)
argument_list|,
name|arrayContainingInAnyOrder
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|initNestedIndexAndPercolation
name|void
name|initNestedIndexAndPercolation
parameter_list|()
throws|throws
name|IOException
block|{
name|XContentBuilder
name|mapping
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
decl_stmt|;
name|mapping
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"companyname"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"employee"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"nested"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|startObject
argument_list|(
literal|"name"
argument_list|)
operator|.
name|field
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
literal|"nestedindex"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"company"
argument_list|,
name|mapping
argument_list|)
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|(
literal|"nestedindex"
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
literal|"nestedindex"
argument_list|,
name|PercolatorService
operator|.
name|TYPE_NAME
argument_list|,
literal|"Q"
argument_list|)
operator|.
name|setSource
argument_list|(
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"query"
argument_list|,
name|QueryBuilders
operator|.
name|nestedQuery
argument_list|(
literal|"employee"
argument_list|,
name|QueryBuilders
operator|.
name|matchQuery
argument_list|(
literal|"employee.name"
argument_list|,
literal|"virginia potts"
argument_list|)
operator|.
name|operator
argument_list|(
name|MatchQueryBuilder
operator|.
name|Operator
operator|.
name|AND
argument_list|)
argument_list|)
operator|.
name|scoreMode
argument_list|(
literal|"avg"
argument_list|)
argument_list|)
operator|.
name|endObject
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
block|}
DECL|method|getMatchingNestedDoc
name|XContentBuilder
name|getMatchingNestedDoc
parameter_list|()
throws|throws
name|IOException
block|{
name|XContentBuilder
name|doc
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
decl_stmt|;
name|doc
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"companyname"
argument_list|,
literal|"stark"
argument_list|)
operator|.
name|startArray
argument_list|(
literal|"employee"
argument_list|)
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"name"
argument_list|,
literal|"virginia potts"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"name"
argument_list|,
literal|"tony stark"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|doc
return|;
block|}
DECL|method|getNotMatchingNestedDoc
name|XContentBuilder
name|getNotMatchingNestedDoc
parameter_list|()
throws|throws
name|IOException
block|{
name|XContentBuilder
name|doc
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
decl_stmt|;
name|doc
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"companyname"
argument_list|,
literal|"notstark"
argument_list|)
operator|.
name|startArray
argument_list|(
literal|"employee"
argument_list|)
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"name"
argument_list|,
literal|"virginia stark"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|field
argument_list|(
literal|"name"
argument_list|,
literal|"tony potts"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endArray
argument_list|()
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|doc
return|;
block|}
block|}
end_class

end_unit

