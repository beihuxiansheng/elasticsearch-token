begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.azure.test
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|azure
operator|.
name|test
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|node
operator|.
name|info
operator|.
name|NodesInfoResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|transport
operator|.
name|NoNodeAvailableException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|transport
operator|.
name|TransportClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cloud
operator|.
name|azure
operator|.
name|AzureComputeService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|FileSystemUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|ESLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|ESLoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|ImmutableSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|transport
operator|.
name|TransportAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|node
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|node
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|node
operator|.
name|internal
operator|.
name|InternalNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|netty
operator|.
name|NettyTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
DECL|class|AzureAbstractTest
specifier|public
specifier|abstract
class|class
name|AzureAbstractTest
block|{
DECL|field|logger
specifier|protected
specifier|static
name|ESLogger
name|logger
init|=
name|ESLoggerFactory
operator|.
name|getLogger
argument_list|(
name|AzureAbstractTest
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|nodes
specifier|private
specifier|static
name|List
argument_list|<
name|Node
argument_list|>
name|nodes
decl_stmt|;
DECL|field|mock
specifier|private
name|Class
argument_list|<
name|?
extends|extends
name|AzureComputeService
argument_list|>
name|mock
decl_stmt|;
DECL|method|AzureAbstractTest
specifier|public
name|AzureAbstractTest
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|AzureComputeService
argument_list|>
name|mock
parameter_list|)
block|{
comment|// We want to inject the Azure API Mock
name|this
operator|.
name|mock
operator|=
name|mock
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|nodes
operator|=
operator|new
name|ArrayList
argument_list|<
name|Node
argument_list|>
argument_list|()
expr_stmt|;
name|File
name|dataDir
init|=
operator|new
name|File
argument_list|(
literal|"./target/es/data"
argument_list|)
decl_stmt|;
if|if
condition|(
name|dataDir
operator|.
name|exists
argument_list|()
condition|)
block|{
name|FileSystemUtils
operator|.
name|deleteRecursively
argument_list|(
name|dataDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|After
DECL|method|tearDown
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
comment|// Cleaning nodes after test
for|for
control|(
name|Node
name|node
range|:
name|nodes
control|)
block|{
name|node
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getTransportClient
specifier|protected
name|Client
name|getTransportClient
parameter_list|()
block|{
comment|// Create a TransportClient on node 1 and 2
name|Settings
name|settings
init|=
name|ImmutableSettings
operator|.
name|settingsBuilder
argument_list|()
operator|.
name|put
argument_list|(
literal|"cluster.name"
argument_list|,
literal|"azure"
argument_list|)
operator|.
name|put
argument_list|(
literal|"transport.tcp.connect_timeout"
argument_list|,
literal|"1s"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|TransportClient
name|client
init|=
operator|new
name|TransportClient
argument_list|(
name|settings
argument_list|)
decl_stmt|;
for|for
control|(
name|Node
name|node
range|:
name|nodes
control|)
block|{
name|NettyTransport
name|nettyTransport
init|=
operator|(
operator|(
name|InternalNode
operator|)
name|node
operator|)
operator|.
name|injector
argument_list|()
operator|.
name|getInstance
argument_list|(
name|NettyTransport
operator|.
name|class
argument_list|)
decl_stmt|;
name|TransportAddress
name|transportAddress
init|=
name|nettyTransport
operator|.
name|boundAddress
argument_list|()
operator|.
name|publishAddress
argument_list|()
decl_stmt|;
name|client
operator|.
name|addTransportAddress
argument_list|(
name|transportAddress
argument_list|)
expr_stmt|;
block|}
return|return
name|client
return|;
block|}
DECL|method|getNodeClient
specifier|protected
name|Client
name|getNodeClient
parameter_list|()
block|{
for|for
control|(
name|Node
name|node
range|:
name|nodes
control|)
block|{
return|return
name|node
operator|.
name|client
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|checkNumberOfNodes
specifier|protected
name|void
name|checkNumberOfNodes
parameter_list|(
name|int
name|expected
parameter_list|,
name|boolean
name|fail
parameter_list|)
block|{
name|NodesInfoResponse
name|nodeInfos
init|=
literal|null
decl_stmt|;
try|try
block|{
name|nodeInfos
operator|=
name|getTransportClient
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareNodesInfo
argument_list|()
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoNodeAvailableException
name|e
parameter_list|)
block|{
comment|// If we can't build a Transport Client, we are may be not connected to any network
comment|// Let's try a Node Client
name|nodeInfos
operator|=
name|getNodeClient
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareNodesInfo
argument_list|()
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
block|}
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|nodeInfos
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|nodeInfos
operator|.
name|getNodes
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|fail
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|nodeInfos
operator|.
name|getNodes
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|nodeInfos
operator|.
name|getNodes
argument_list|()
operator|.
name|length
operator|!=
name|expected
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"expected {} node(s) but found {}. Could be due to no local IP address available."
argument_list|,
name|expected
argument_list|,
name|nodeInfos
operator|.
name|getNodes
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|checkNumberOfNodes
specifier|protected
name|void
name|checkNumberOfNodes
parameter_list|(
name|int
name|expected
parameter_list|)
block|{
name|checkNumberOfNodes
argument_list|(
name|expected
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|nodeBuilder
specifier|protected
name|void
name|nodeBuilder
parameter_list|()
block|{
name|ImmutableSettings
operator|.
name|Builder
name|builder
init|=
name|ImmutableSettings
operator|.
name|settingsBuilder
argument_list|()
comment|//.put("gateway.type", "local")
operator|.
name|put
argument_list|(
literal|"path.data"
argument_list|,
literal|"./target/es/data"
argument_list|)
operator|.
name|put
argument_list|(
literal|"path.logs"
argument_list|,
literal|"./target/es/logs"
argument_list|)
operator|.
name|put
argument_list|(
literal|"path.work"
argument_list|,
literal|"./target/es/work"
argument_list|)
comment|//                .put("discovery.zen.ping.timeout", "500ms")
comment|//                .put("discovery.zen.fd.ping_retries",1)
comment|//                .put("discovery.zen.fd.ping_timeout", "500ms")
comment|//                .put("discovery.initial_state_timeout", "5s")
comment|//                .put("transport.tcp.connect_timeout", "1s")
operator|.
name|put
argument_list|(
literal|"cloud.azure.api.impl"
argument_list|,
name|mock
argument_list|)
operator|.
name|put
argument_list|(
literal|"cloud.azure.refresh_interval"
argument_list|,
literal|"5s"
argument_list|)
operator|.
name|put
argument_list|(
literal|"node.name"
argument_list|,
operator|(
name|nodes
operator|.
name|size
argument_list|()
operator|+
literal|1
operator|)
operator|+
literal|"#"
operator|+
name|mock
operator|.
name|getSimpleName
argument_list|()
argument_list|)
decl_stmt|;
name|Node
name|node
init|=
name|NodeBuilder
operator|.
name|nodeBuilder
argument_list|()
operator|.
name|settings
argument_list|(
name|builder
argument_list|)
operator|.
name|node
argument_list|()
decl_stmt|;
name|nodes
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

