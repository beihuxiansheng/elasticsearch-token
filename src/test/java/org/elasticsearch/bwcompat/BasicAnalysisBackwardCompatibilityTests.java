begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.bwcompat
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|bwcompat
package|;
end_package

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|generators
operator|.
name|RandomPicks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|analyze
operator|.
name|AnalyzeResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|analysis
operator|.
name|PreBuiltAnalyzers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchBackwardsCompatIntegrationTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchIntegrationTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertAcked
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_class
annotation|@
name|ElasticsearchIntegrationTest
operator|.
name|ClusterScope
argument_list|(
name|numDataNodes
operator|=
literal|0
argument_list|,
name|scope
operator|=
name|ElasticsearchIntegrationTest
operator|.
name|Scope
operator|.
name|SUITE
argument_list|,
name|numClientNodes
operator|=
literal|0
argument_list|,
name|transportClientRatio
operator|=
literal|0.0
argument_list|)
DECL|class|BasicAnalysisBackwardCompatibilityTests
specifier|public
class|class
name|BasicAnalysisBackwardCompatibilityTests
extends|extends
name|ElasticsearchBackwardsCompatIntegrationTest
block|{
comment|/**      * Simple upgrade test for analyzers to make sure they analyze to the same tokens after upgrade      * TODO we need this for random tokenizers / tokenfilters as well      */
annotation|@
name|Test
annotation|@
name|Ignore
annotation|@
name|LuceneTestCase
operator|.
name|AwaitsFix
argument_list|(
name|bugUrl
operator|=
literal|"https://github.com/elasticsearch/dev/issues/264"
argument_list|)
DECL|method|testAnalyzerTokensAfterUpgrade
specifier|public
name|void
name|testAnalyzerTokensAfterUpgrade
parameter_list|()
throws|throws
name|IOException
throws|,
name|ExecutionException
throws|,
name|InterruptedException
block|{
name|int
name|numFields
init|=
name|randomIntBetween
argument_list|(
name|PreBuiltAnalyzers
operator|.
name|values
argument_list|()
operator|.
name|length
argument_list|,
name|PreBuiltAnalyzers
operator|.
name|values
argument_list|()
operator|.
name|length
operator|*
literal|10
argument_list|)
decl_stmt|;
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|String
index|[]
name|fields
init|=
operator|new
name|String
index|[
name|numFields
operator|*
literal|2
index|]
decl_stmt|;
name|int
name|fieldId
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|fields
index|[
name|i
operator|++
index|]
operator|=
literal|"field_"
operator|+
name|fieldId
operator|++
expr_stmt|;
name|String
name|analyzer
init|=
name|randomAnalyzer
argument_list|()
decl_stmt|;
name|fields
index|[
name|i
index|]
operator|=
literal|"type=string,analyzer="
operator|+
name|analyzer
expr_stmt|;
block|}
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addMapping
argument_list|(
literal|"type"
argument_list|,
name|fields
argument_list|)
operator|.
name|setSettings
argument_list|(
name|indexSettings
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ensureYellow
argument_list|()
expr_stmt|;
name|InputOutput
index|[]
name|inout
init|=
operator|new
name|InputOutput
index|[
name|numFields
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numFields
condition|;
name|i
operator|++
control|)
block|{
name|String
name|input
init|=
name|randomRealisticUnicodeOfCodepointLengthBetween
argument_list|(
literal|1
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|AnalyzeResponse
name|test
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareAnalyze
argument_list|(
literal|"test"
argument_list|,
name|input
argument_list|)
operator|.
name|setField
argument_list|(
literal|"field_"
operator|+
name|i
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|inout
index|[
name|i
index|]
operator|=
operator|new
name|InputOutput
argument_list|(
name|test
argument_list|,
name|input
argument_list|,
literal|"field_"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|logClusterState
argument_list|()
expr_stmt|;
name|boolean
name|upgraded
decl_stmt|;
do|do
block|{
name|logClusterState
argument_list|()
expr_stmt|;
name|upgraded
operator|=
name|backwardsCluster
argument_list|()
operator|.
name|upgradeOneNode
argument_list|()
expr_stmt|;
name|ensureYellow
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|upgraded
condition|)
do|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|inout
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|InputOutput
name|inputOutput
init|=
name|inout
index|[
name|i
index|]
decl_stmt|;
name|AnalyzeResponse
name|test
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareAnalyze
argument_list|(
literal|"test"
argument_list|,
name|inputOutput
operator|.
name|input
argument_list|)
operator|.
name|setField
argument_list|(
name|inputOutput
operator|.
name|field
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|AnalyzeResponse
operator|.
name|AnalyzeToken
argument_list|>
name|tokens
init|=
name|test
operator|.
name|getTokens
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|AnalyzeResponse
operator|.
name|AnalyzeToken
argument_list|>
name|expectedTokens
init|=
name|inputOutput
operator|.
name|response
operator|.
name|getTokens
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
literal|"size mismatch field: "
operator|+
name|fields
index|[
name|i
operator|*
literal|2
index|]
operator|+
literal|" analyzer: "
operator|+
name|fields
index|[
name|i
operator|*
literal|2
operator|+
literal|1
index|]
operator|+
literal|" input: "
operator|+
name|inputOutput
operator|.
name|input
argument_list|,
name|expectedTokens
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|tokens
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|tokens
operator|.
name|size
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|String
name|msg
init|=
literal|"failed for term: "
operator|+
name|expectedTokens
operator|.
name|get
argument_list|(
name|j
argument_list|)
operator|.
name|getTerm
argument_list|()
operator|+
literal|" field: "
operator|+
name|fields
index|[
name|i
operator|*
literal|2
index|]
operator|+
literal|" analyzer: "
operator|+
name|fields
index|[
name|i
operator|*
literal|2
operator|+
literal|1
index|]
operator|+
literal|" input: "
operator|+
name|inputOutput
operator|.
name|input
decl_stmt|;
name|assertThat
argument_list|(
name|msg
argument_list|,
name|expectedTokens
operator|.
name|get
argument_list|(
name|j
argument_list|)
operator|.
name|getTerm
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|tokens
operator|.
name|get
argument_list|(
name|j
argument_list|)
operator|.
name|getTerm
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|msg
argument_list|,
name|expectedTokens
operator|.
name|get
argument_list|(
name|j
argument_list|)
operator|.
name|getPosition
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|tokens
operator|.
name|get
argument_list|(
name|j
argument_list|)
operator|.
name|getPosition
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|msg
argument_list|,
name|expectedTokens
operator|.
name|get
argument_list|(
name|j
argument_list|)
operator|.
name|getStartOffset
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|tokens
operator|.
name|get
argument_list|(
name|j
argument_list|)
operator|.
name|getStartOffset
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|msg
argument_list|,
name|expectedTokens
operator|.
name|get
argument_list|(
name|j
argument_list|)
operator|.
name|getEndOffset
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|tokens
operator|.
name|get
argument_list|(
name|j
argument_list|)
operator|.
name|getEndOffset
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|msg
argument_list|,
name|expectedTokens
operator|.
name|get
argument_list|(
name|j
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|tokens
operator|.
name|get
argument_list|(
name|j
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|randomAnalyzer
specifier|private
name|String
name|randomAnalyzer
parameter_list|()
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|PreBuiltAnalyzers
name|preBuiltAnalyzers
init|=
name|RandomPicks
operator|.
name|randomFrom
argument_list|(
name|getRandom
argument_list|()
argument_list|,
name|PreBuiltAnalyzers
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|preBuiltAnalyzers
operator|==
name|PreBuiltAnalyzers
operator|.
name|SORANI
operator|&&
name|compatibilityVersion
argument_list|()
operator|.
name|before
argument_list|(
name|Version
operator|.
name|V_1_3_0
argument_list|)
condition|)
block|{
continue|continue;
comment|// SORANI was added in 1.3.0
block|}
return|return
name|preBuiltAnalyzers
operator|.
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
return|;
block|}
block|}
DECL|class|InputOutput
specifier|private
specifier|static
specifier|final
class|class
name|InputOutput
block|{
DECL|field|response
specifier|final
name|AnalyzeResponse
name|response
decl_stmt|;
DECL|field|input
specifier|final
name|String
name|input
decl_stmt|;
DECL|field|field
specifier|final
name|String
name|field
decl_stmt|;
DECL|method|InputOutput
specifier|public
name|InputOutput
parameter_list|(
name|AnalyzeResponse
name|response
parameter_list|,
name|String
name|input
parameter_list|,
name|String
name|field
parameter_list|)
block|{
name|this
operator|.
name|response
operator|=
name|response
expr_stmt|;
name|this
operator|.
name|input
operator|=
name|input
expr_stmt|;
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

