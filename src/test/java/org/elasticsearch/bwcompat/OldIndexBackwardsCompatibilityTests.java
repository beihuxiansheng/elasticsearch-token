begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.bwcompat
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|bwcompat
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ListenableFuture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|get
operator|.
name|GetIndexResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|get
operator|.
name|GetResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|FileSystemUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|ESLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|MultiDataPathUpgrader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|NodeEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|EngineConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|merge
operator|.
name|policy
operator|.
name|MergePolicyModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|recovery
operator|.
name|RecoverySettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|node
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|upgrade
operator|.
name|UpgradeTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchHit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregationBuilders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|histogram
operator|.
name|Histogram
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|terms
operator|.
name|Terms
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|sort
operator|.
name|SortOrder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ElasticsearchIntegrationTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|VersionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|index
operator|.
name|merge
operator|.
name|NoMergePolicyProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|rest
operator|.
name|client
operator|.
name|http
operator|.
name|HttpRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|attribute
operator|.
name|BasicFileAttributes
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertAcked
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|greaterThanOrEqualTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|matchers
operator|.
name|JUnitMatchers
operator|.
name|containsString
import|;
end_import

begin_comment
comment|// needs at least 2 nodes since it bumps replicas to 1
end_comment

begin_class
annotation|@
name|ElasticsearchIntegrationTest
operator|.
name|ClusterScope
argument_list|(
name|scope
operator|=
name|ElasticsearchIntegrationTest
operator|.
name|Scope
operator|.
name|TEST
argument_list|,
name|numDataNodes
operator|=
literal|0
argument_list|)
annotation|@
name|LuceneTestCase
operator|.
name|SuppressFileSystems
argument_list|(
literal|"ExtrasFS"
argument_list|)
annotation|@
name|LuceneTestCase
operator|.
name|Slow
DECL|class|OldIndexBackwardsCompatibilityTests
specifier|public
class|class
name|OldIndexBackwardsCompatibilityTests
extends|extends
name|ElasticsearchIntegrationTest
block|{
comment|// TODO: test for proper exception on unsupported indexes (maybe via separate test?)
comment|// We have a 0.20.6.zip etc for this.
DECL|field|indexes
name|List
argument_list|<
name|String
argument_list|>
name|indexes
decl_stmt|;
DECL|field|unsupportedIndexes
name|List
argument_list|<
name|String
argument_list|>
name|unsupportedIndexes
decl_stmt|;
DECL|field|singleDataPath
specifier|static
name|Path
name|singleDataPath
decl_stmt|;
DECL|field|multiDataPath
specifier|static
name|Path
index|[]
name|multiDataPath
decl_stmt|;
annotation|@
name|Before
DECL|method|initIndexesList
specifier|public
name|void
name|initIndexesList
parameter_list|()
throws|throws
name|Exception
block|{
name|indexes
operator|=
name|loadIndexesList
argument_list|(
literal|"index"
argument_list|)
expr_stmt|;
name|unsupportedIndexes
operator|=
name|loadIndexesList
argument_list|(
literal|"unsupported"
argument_list|)
expr_stmt|;
block|}
DECL|method|loadIndexesList
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|loadIndexesList
parameter_list|(
name|String
name|prefix
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|indexes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Path
name|dir
init|=
name|getDataPath
argument_list|(
literal|"."
argument_list|)
decl_stmt|;
try|try
init|(
name|DirectoryStream
argument_list|<
name|Path
argument_list|>
name|stream
init|=
name|Files
operator|.
name|newDirectoryStream
argument_list|(
name|dir
argument_list|,
name|prefix
operator|+
literal|"-*.zip"
argument_list|)
init|)
block|{
for|for
control|(
name|Path
name|path
range|:
name|stream
control|)
block|{
name|indexes
operator|.
name|add
argument_list|(
name|path
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|indexes
argument_list|)
expr_stmt|;
return|return
name|indexes
return|;
block|}
annotation|@
name|AfterClass
DECL|method|tearDownStatics
specifier|public
specifier|static
name|void
name|tearDownStatics
parameter_list|()
block|{
name|singleDataPath
operator|=
literal|null
expr_stmt|;
name|multiDataPath
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|nodeSettings
specifier|public
name|Settings
name|nodeSettings
parameter_list|(
name|int
name|ord
parameter_list|)
block|{
return|return
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|Node
operator|.
name|HTTP_ENABLED
argument_list|,
literal|true
argument_list|)
comment|// for _upgrade
operator|.
name|put
argument_list|(
name|MergePolicyModule
operator|.
name|MERGE_POLICY_TYPE_KEY
argument_list|,
name|NoMergePolicyProvider
operator|.
name|class
argument_list|)
comment|// disable merging so no segments will be upgraded
operator|.
name|put
argument_list|(
name|RecoverySettings
operator|.
name|INDICES_RECOVERY_CONCURRENT_SMALL_FILE_STREAMS
argument_list|,
literal|30
argument_list|)
comment|// increase recovery speed for small files
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|setupCluster
name|void
name|setupCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|ListenableFuture
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|replicas
init|=
name|internalCluster
argument_list|()
operator|.
name|startNodesAsync
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// for replicas
name|Path
name|baseTempDir
init|=
name|createTempDir
argument_list|()
decl_stmt|;
comment|// start single data path node
name|Settings
operator|.
name|Builder
name|nodeSettings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"path.data"
argument_list|,
name|baseTempDir
operator|.
name|resolve
argument_list|(
literal|"single-path"
argument_list|)
operator|.
name|toAbsolutePath
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
literal|"node.master"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// workaround for dangling index loading issue when node is master
name|ListenableFuture
argument_list|<
name|String
argument_list|>
name|singleDataPathNode
init|=
name|internalCluster
argument_list|()
operator|.
name|startNodeAsync
argument_list|(
name|nodeSettings
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
comment|// start multi data path node
name|nodeSettings
operator|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"path.data"
argument_list|,
name|baseTempDir
operator|.
name|resolve
argument_list|(
literal|"multi-path1"
argument_list|)
operator|.
name|toAbsolutePath
argument_list|()
operator|+
literal|","
operator|+
name|baseTempDir
operator|.
name|resolve
argument_list|(
literal|"multi-path2"
argument_list|)
operator|.
name|toAbsolutePath
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
literal|"node.master"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// workaround for dangling index loading issue when node is master
name|ListenableFuture
argument_list|<
name|String
argument_list|>
name|multiDataPathNode
init|=
name|internalCluster
argument_list|()
operator|.
name|startNodeAsync
argument_list|(
name|nodeSettings
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
comment|// find single data path dir
name|Path
index|[]
name|nodePaths
init|=
name|internalCluster
argument_list|()
operator|.
name|getInstance
argument_list|(
name|NodeEnvironment
operator|.
name|class
argument_list|,
name|singleDataPathNode
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|nodeDataPaths
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|nodePaths
operator|.
name|length
argument_list|)
expr_stmt|;
name|singleDataPath
operator|=
name|nodePaths
index|[
literal|0
index|]
operator|.
name|resolve
argument_list|(
name|NodeEnvironment
operator|.
name|INDICES_FOLDER
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|singleDataPath
argument_list|)
argument_list|)
expr_stmt|;
name|Files
operator|.
name|createDirectories
argument_list|(
name|singleDataPath
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> Single data path: "
operator|+
name|singleDataPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// find multi data path dirs
name|nodePaths
operator|=
name|internalCluster
argument_list|()
operator|.
name|getInstance
argument_list|(
name|NodeEnvironment
operator|.
name|class
argument_list|,
name|multiDataPathNode
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|nodeDataPaths
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|nodePaths
operator|.
name|length
argument_list|)
expr_stmt|;
name|multiDataPath
operator|=
operator|new
name|Path
index|[]
block|{
name|nodePaths
index|[
literal|0
index|]
operator|.
name|resolve
argument_list|(
name|NodeEnvironment
operator|.
name|INDICES_FOLDER
argument_list|)
block|,
name|nodePaths
index|[
literal|1
index|]
operator|.
name|resolve
argument_list|(
name|NodeEnvironment
operator|.
name|INDICES_FOLDER
argument_list|)
block|}
expr_stmt|;
name|assertFalse
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|multiDataPath
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|multiDataPath
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|Files
operator|.
name|createDirectories
argument_list|(
name|multiDataPath
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Files
operator|.
name|createDirectories
argument_list|(
name|multiDataPath
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> Multi data paths: "
operator|+
name|multiDataPath
index|[
literal|0
index|]
operator|.
name|toString
argument_list|()
operator|+
literal|", "
operator|+
name|multiDataPath
index|[
literal|1
index|]
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|replicas
operator|.
name|get
argument_list|()
expr_stmt|;
comment|// wait for replicas
block|}
DECL|method|loadIndex
name|String
name|loadIndex
parameter_list|(
name|String
name|indexFile
parameter_list|)
throws|throws
name|Exception
block|{
name|Path
name|unzipDir
init|=
name|createTempDir
argument_list|()
decl_stmt|;
name|Path
name|unzipDataDir
init|=
name|unzipDir
operator|.
name|resolve
argument_list|(
literal|"data"
argument_list|)
decl_stmt|;
name|String
name|indexName
init|=
name|indexFile
operator|.
name|replace
argument_list|(
literal|".zip"
argument_list|,
literal|""
argument_list|)
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
operator|.
name|replace
argument_list|(
literal|"unsupported-"
argument_list|,
literal|"index-"
argument_list|)
decl_stmt|;
comment|// decompress the index
name|Path
name|backwardsIndex
init|=
name|getDataPath
argument_list|(
name|indexFile
argument_list|)
decl_stmt|;
try|try
init|(
name|InputStream
name|stream
init|=
name|Files
operator|.
name|newInputStream
argument_list|(
name|backwardsIndex
argument_list|)
init|)
block|{
name|TestUtil
operator|.
name|unzip
argument_list|(
name|stream
argument_list|,
name|unzipDir
argument_list|)
expr_stmt|;
block|}
comment|// check it is unique
name|assertTrue
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|unzipDataDir
argument_list|)
argument_list|)
expr_stmt|;
name|Path
index|[]
name|list
init|=
name|FileSystemUtils
operator|.
name|files
argument_list|(
name|unzipDataDir
argument_list|)
decl_stmt|;
if|if
condition|(
name|list
operator|.
name|length
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Backwards index must contain exactly one cluster"
argument_list|)
throw|;
block|}
comment|// the bwc scripts packs the indices under this path
name|Path
name|src
init|=
name|list
index|[
literal|0
index|]
operator|.
name|resolve
argument_list|(
literal|"nodes/0/indices/"
operator|+
name|indexName
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"["
operator|+
name|indexFile
operator|+
literal|"] missing index dir: "
operator|+
name|src
operator|.
name|toString
argument_list|()
argument_list|,
name|Files
operator|.
name|exists
argument_list|(
name|src
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"--> injecting index [{}] into single data path"
argument_list|,
name|indexName
argument_list|)
expr_stmt|;
name|copyIndex
argument_list|(
name|logger
argument_list|,
name|src
argument_list|,
name|indexName
argument_list|,
name|singleDataPath
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"--> injecting index [{}] into multi data path"
argument_list|,
name|indexName
argument_list|)
expr_stmt|;
name|copyIndex
argument_list|(
name|logger
argument_list|,
name|src
argument_list|,
name|indexName
argument_list|,
name|multiDataPath
argument_list|)
expr_stmt|;
block|}
return|return
name|indexName
return|;
block|}
DECL|method|importIndex
name|void
name|importIndex
parameter_list|(
name|String
name|indexName
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Iterable
argument_list|<
name|NodeEnvironment
argument_list|>
name|instances
init|=
name|internalCluster
argument_list|()
operator|.
name|getInstances
argument_list|(
name|NodeEnvironment
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|NodeEnvironment
name|nodeEnv
range|:
name|instances
control|)
block|{
comment|// upgrade multidata path
name|MultiDataPathUpgrader
operator|.
name|upgradeMultiDataPath
argument_list|(
name|nodeEnv
argument_list|,
name|logger
argument_list|)
expr_stmt|;
block|}
comment|// force reloading dangling indices with a cluster state republish
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareReroute
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|ensureGreen
argument_list|(
name|indexName
argument_list|)
expr_stmt|;
block|}
comment|// randomly distribute the files from src over dests paths
DECL|method|copyIndex
specifier|public
specifier|static
name|void
name|copyIndex
parameter_list|(
specifier|final
name|ESLogger
name|logger
parameter_list|,
specifier|final
name|Path
name|src
parameter_list|,
specifier|final
name|String
name|indexName
parameter_list|,
specifier|final
name|Path
modifier|...
name|dests
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|Path
name|dest
range|:
name|dests
control|)
block|{
name|Path
name|indexDir
init|=
name|dest
operator|.
name|resolve
argument_list|(
name|indexName
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|indexDir
argument_list|)
argument_list|)
expr_stmt|;
name|Files
operator|.
name|createDirectories
argument_list|(
name|indexDir
argument_list|)
expr_stmt|;
block|}
name|Files
operator|.
name|walkFileTree
argument_list|(
name|src
argument_list|,
operator|new
name|SimpleFileVisitor
argument_list|<
name|Path
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|FileVisitResult
name|preVisitDirectory
parameter_list|(
name|Path
name|dir
parameter_list|,
name|BasicFileAttributes
name|attrs
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|relativeDir
init|=
name|src
operator|.
name|relativize
argument_list|(
name|dir
argument_list|)
decl_stmt|;
for|for
control|(
name|Path
name|dest
range|:
name|dests
control|)
block|{
name|Path
name|destDir
init|=
name|dest
operator|.
name|resolve
argument_list|(
name|indexName
argument_list|)
operator|.
name|resolve
argument_list|(
name|relativeDir
argument_list|)
decl_stmt|;
name|Files
operator|.
name|createDirectories
argument_list|(
name|destDir
argument_list|)
expr_stmt|;
block|}
return|return
name|FileVisitResult
operator|.
name|CONTINUE
return|;
block|}
annotation|@
name|Override
specifier|public
name|FileVisitResult
name|visitFile
parameter_list|(
name|Path
name|file
parameter_list|,
name|BasicFileAttributes
name|attrs
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|file
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|IndexWriter
operator|.
name|WRITE_LOCK_NAME
argument_list|)
condition|)
block|{
comment|// skip lock file, we don't need it
name|logger
operator|.
name|trace
argument_list|(
literal|"Skipping lock file: "
operator|+
name|file
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|FileVisitResult
operator|.
name|CONTINUE
return|;
block|}
name|Path
name|relativeFile
init|=
name|src
operator|.
name|relativize
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|Path
name|destFile
init|=
name|dests
index|[
name|randomInt
argument_list|(
name|dests
operator|.
name|length
operator|-
literal|1
argument_list|)
index|]
operator|.
name|resolve
argument_list|(
name|indexName
argument_list|)
operator|.
name|resolve
argument_list|(
name|relativeFile
argument_list|)
decl_stmt|;
name|logger
operator|.
name|trace
argument_list|(
literal|"--> Moving "
operator|+
name|relativeFile
operator|.
name|toString
argument_list|()
operator|+
literal|" to "
operator|+
name|destFile
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Files
operator|.
name|move
argument_list|(
name|file
argument_list|,
name|destFile
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|destFile
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|FileVisitResult
operator|.
name|CONTINUE
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|unloadIndex
name|void
name|unloadIndex
parameter_list|(
name|String
name|indexName
parameter_list|)
throws|throws
name|Exception
block|{
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareDelete
argument_list|(
name|indexName
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testAllVersionsTested
specifier|public
name|void
name|testAllVersionsTested
parameter_list|()
throws|throws
name|Exception
block|{
name|SortedSet
argument_list|<
name|String
argument_list|>
name|expectedVersions
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Version
name|v
range|:
name|VersionUtils
operator|.
name|allVersions
argument_list|()
control|)
block|{
if|if
condition|(
name|v
operator|.
name|snapshot
argument_list|()
condition|)
continue|continue;
comment|// snapshots are unreleased, so there is no backcompat yet
if|if
condition|(
name|v
operator|.
name|onOrBefore
argument_list|(
name|Version
operator|.
name|V_0_20_6
argument_list|)
condition|)
continue|continue;
comment|// we can only test back one major lucene version
if|if
condition|(
name|v
operator|.
name|equals
argument_list|(
name|Version
operator|.
name|CURRENT
argument_list|)
condition|)
continue|continue;
comment|// the current version is always compatible with itself
name|expectedVersions
operator|.
name|add
argument_list|(
literal|"index-"
operator|+
name|v
operator|.
name|toString
argument_list|()
operator|+
literal|".zip"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|index
range|:
name|indexes
control|)
block|{
if|if
condition|(
name|expectedVersions
operator|.
name|remove
argument_list|(
name|index
argument_list|)
operator|==
literal|false
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Old indexes tests contain extra index: "
operator|+
name|index
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|expectedVersions
operator|.
name|isEmpty
argument_list|()
operator|==
literal|false
condition|)
block|{
name|StringBuilder
name|msg
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"Old index tests are missing indexes:"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|expected
range|:
name|expectedVersions
control|)
block|{
name|msg
operator|.
name|append
argument_list|(
literal|"\n"
operator|+
name|expected
argument_list|)
expr_stmt|;
block|}
name|fail
argument_list|(
name|msg
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testOldIndexes
specifier|public
name|void
name|testOldIndexes
parameter_list|()
throws|throws
name|Exception
block|{
name|setupCluster
argument_list|()
expr_stmt|;
name|Collections
operator|.
name|shuffle
argument_list|(
name|indexes
argument_list|,
name|getRandom
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|index
range|:
name|indexes
control|)
block|{
name|long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> Testing old index "
operator|+
name|index
argument_list|)
expr_stmt|;
name|assertOldIndexWorks
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> Done testing "
operator|+
name|index
operator|+
literal|", took "
operator|+
operator|(
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startTime
operator|)
operator|/
literal|1000.0
operator|)
operator|+
literal|" seconds"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testHandlingOfUnsupportedDanglingIndexes
specifier|public
name|void
name|testHandlingOfUnsupportedDanglingIndexes
parameter_list|()
throws|throws
name|Exception
block|{
name|setupCluster
argument_list|()
expr_stmt|;
name|Collections
operator|.
name|shuffle
argument_list|(
name|unsupportedIndexes
argument_list|,
name|getRandom
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|index
range|:
name|unsupportedIndexes
control|)
block|{
name|assertUnsupportedIndexHandling
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Waits for the index to show up in the cluster state in closed state      */
DECL|method|ensureClosed
name|void
name|ensureClosed
parameter_list|(
specifier|final
name|String
name|index
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|assertTrue
argument_list|(
name|awaitBusy
argument_list|(
operator|new
name|Predicate
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|ClusterState
name|state
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|getState
argument_list|()
decl_stmt|;
return|return
name|state
operator|.
name|metaData
argument_list|()
operator|.
name|hasIndex
argument_list|(
name|index
argument_list|)
operator|&&
name|state
operator|.
name|metaData
argument_list|()
operator|.
name|index
argument_list|(
name|index
argument_list|)
operator|.
name|getState
argument_list|()
operator|==
name|IndexMetaData
operator|.
name|State
operator|.
name|CLOSE
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Checks that the given index cannot be opened due to incompatible version      */
DECL|method|assertUnsupportedIndexHandling
name|void
name|assertUnsupportedIndexHandling
parameter_list|(
name|String
name|index
parameter_list|)
throws|throws
name|Exception
block|{
name|long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> Testing old index "
operator|+
name|index
argument_list|)
expr_stmt|;
name|String
name|indexName
init|=
name|loadIndex
argument_list|(
name|index
argument_list|)
decl_stmt|;
comment|// force reloading dangling indices with a cluster state republish
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareReroute
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|ensureClosed
argument_list|(
name|indexName
argument_list|)
expr_stmt|;
try|try
block|{
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareOpen
argument_list|(
name|indexName
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Shouldn't be able to open an old index"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexException
name|ex
parameter_list|)
block|{
name|assertThat
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"cannot open the index due to upgrade failure"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|unloadIndex
argument_list|(
name|indexName
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> Done testing "
operator|+
name|index
operator|+
literal|", took "
operator|+
operator|(
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startTime
operator|)
operator|/
literal|1000.0
operator|)
operator|+
literal|" seconds"
argument_list|)
expr_stmt|;
block|}
DECL|method|assertOldIndexWorks
name|void
name|assertOldIndexWorks
parameter_list|(
name|String
name|index
parameter_list|)
throws|throws
name|Exception
block|{
name|Version
name|version
init|=
name|extractVersion
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|String
name|indexName
init|=
name|loadIndex
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|importIndex
argument_list|(
name|indexName
argument_list|)
expr_stmt|;
name|assertIndexSanity
argument_list|(
name|indexName
argument_list|)
expr_stmt|;
name|assertBasicSearchWorks
argument_list|(
name|indexName
argument_list|)
expr_stmt|;
name|assertBasicAggregationWorks
argument_list|(
name|indexName
argument_list|)
expr_stmt|;
name|assertRealtimeGetWorks
argument_list|(
name|indexName
argument_list|)
expr_stmt|;
name|assertNewReplicasWork
argument_list|(
name|indexName
argument_list|)
expr_stmt|;
name|assertUpgradeWorks
argument_list|(
name|indexName
argument_list|,
name|isLatestLuceneVersion
argument_list|(
name|version
argument_list|)
argument_list|)
expr_stmt|;
name|assertDeleteByQueryWorked
argument_list|(
name|indexName
argument_list|,
name|version
argument_list|)
expr_stmt|;
name|unloadIndex
argument_list|(
name|indexName
argument_list|)
expr_stmt|;
block|}
DECL|method|extractVersion
name|Version
name|extractVersion
parameter_list|(
name|String
name|index
parameter_list|)
block|{
return|return
name|Version
operator|.
name|fromString
argument_list|(
name|index
operator|.
name|substring
argument_list|(
name|index
operator|.
name|indexOf
argument_list|(
literal|'-'
argument_list|)
operator|+
literal|1
argument_list|,
name|index
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
DECL|method|isLatestLuceneVersion
name|boolean
name|isLatestLuceneVersion
parameter_list|(
name|Version
name|version
parameter_list|)
block|{
return|return
name|version
operator|.
name|luceneVersion
operator|.
name|major
operator|==
name|Version
operator|.
name|CURRENT
operator|.
name|luceneVersion
operator|.
name|major
operator|&&
name|version
operator|.
name|luceneVersion
operator|.
name|minor
operator|==
name|Version
operator|.
name|CURRENT
operator|.
name|luceneVersion
operator|.
name|minor
return|;
block|}
DECL|method|assertIndexSanity
name|void
name|assertIndexSanity
parameter_list|(
name|String
name|indexName
parameter_list|)
block|{
name|GetIndexResponse
name|getIndexResponse
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareGetIndex
argument_list|()
operator|.
name|addIndices
argument_list|(
name|indexName
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|getIndexResponse
operator|.
name|indices
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|indexName
argument_list|,
name|getIndexResponse
operator|.
name|indices
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|ensureYellow
argument_list|(
name|indexName
argument_list|)
expr_stmt|;
name|SearchResponse
name|test
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
name|indexName
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|test
operator|.
name|getHits
argument_list|()
operator|.
name|getTotalHits
argument_list|()
argument_list|,
name|greaterThanOrEqualTo
argument_list|(
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertBasicSearchWorks
name|void
name|assertBasicSearchWorks
parameter_list|(
name|String
name|indexName
parameter_list|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"--> testing basic search"
argument_list|)
expr_stmt|;
name|SearchRequestBuilder
name|searchReq
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
name|indexName
argument_list|)
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|matchAllQuery
argument_list|()
argument_list|)
decl_stmt|;
name|SearchResponse
name|searchRsp
init|=
name|searchReq
operator|.
name|get
argument_list|()
decl_stmt|;
name|ElasticsearchAssertions
operator|.
name|assertNoFailures
argument_list|(
name|searchRsp
argument_list|)
expr_stmt|;
name|long
name|numDocs
init|=
name|searchRsp
operator|.
name|getHits
argument_list|()
operator|.
name|getTotalHits
argument_list|()
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Found "
operator|+
name|numDocs
operator|+
literal|" in old index"
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> testing basic search with sort"
argument_list|)
expr_stmt|;
name|searchReq
operator|.
name|addSort
argument_list|(
literal|"long_sort"
argument_list|,
name|SortOrder
operator|.
name|ASC
argument_list|)
expr_stmt|;
name|ElasticsearchAssertions
operator|.
name|assertNoFailures
argument_list|(
name|searchReq
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> testing exists filter"
argument_list|)
expr_stmt|;
name|searchReq
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
name|indexName
argument_list|)
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|filteredQuery
argument_list|(
name|QueryBuilders
operator|.
name|matchAllQuery
argument_list|()
argument_list|,
name|QueryBuilders
operator|.
name|existsQuery
argument_list|(
literal|"string"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|searchRsp
operator|=
name|searchReq
operator|.
name|get
argument_list|()
expr_stmt|;
name|ElasticsearchAssertions
operator|.
name|assertNoFailures
argument_list|(
name|searchRsp
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|numDocs
argument_list|,
name|searchRsp
operator|.
name|getHits
argument_list|()
operator|.
name|getTotalHits
argument_list|()
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"--> testing missing filter"
argument_list|)
expr_stmt|;
comment|// the field for the missing filter here needs to be different than the exists filter above, to avoid being found in the cache
name|searchReq
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
name|indexName
argument_list|)
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|filteredQuery
argument_list|(
name|QueryBuilders
operator|.
name|matchAllQuery
argument_list|()
argument_list|,
name|QueryBuilders
operator|.
name|missingQuery
argument_list|(
literal|"long_sort"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|searchRsp
operator|=
name|searchReq
operator|.
name|get
argument_list|()
expr_stmt|;
name|ElasticsearchAssertions
operator|.
name|assertNoFailures
argument_list|(
name|searchRsp
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|searchRsp
operator|.
name|getHits
argument_list|()
operator|.
name|getTotalHits
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|assertBasicAggregationWorks
name|void
name|assertBasicAggregationWorks
parameter_list|(
name|String
name|indexName
parameter_list|)
block|{
comment|// histogram on a long
name|SearchResponse
name|searchRsp
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
name|indexName
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|AggregationBuilders
operator|.
name|histogram
argument_list|(
literal|"histo"
argument_list|)
operator|.
name|field
argument_list|(
literal|"long_sort"
argument_list|)
operator|.
name|interval
argument_list|(
literal|10
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|ElasticsearchAssertions
operator|.
name|assertSearchResponse
argument_list|(
name|searchRsp
argument_list|)
expr_stmt|;
name|Histogram
name|histo
init|=
name|searchRsp
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"histo"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|histo
argument_list|)
expr_stmt|;
name|long
name|totalCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Histogram
operator|.
name|Bucket
name|bucket
range|:
name|histo
operator|.
name|getBuckets
argument_list|()
control|)
block|{
name|totalCount
operator|+=
name|bucket
operator|.
name|getDocCount
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|totalCount
argument_list|,
name|searchRsp
operator|.
name|getHits
argument_list|()
operator|.
name|getTotalHits
argument_list|()
argument_list|)
expr_stmt|;
comment|// terms on a boolean
name|searchRsp
operator|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
name|indexName
argument_list|)
operator|.
name|addAggregation
argument_list|(
name|AggregationBuilders
operator|.
name|terms
argument_list|(
literal|"bool_terms"
argument_list|)
operator|.
name|field
argument_list|(
literal|"bool"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|Terms
name|terms
init|=
name|searchRsp
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"bool_terms"
argument_list|)
decl_stmt|;
name|totalCount
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|Terms
operator|.
name|Bucket
name|bucket
range|:
name|terms
operator|.
name|getBuckets
argument_list|()
control|)
block|{
name|totalCount
operator|+=
name|bucket
operator|.
name|getDocCount
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|totalCount
argument_list|,
name|searchRsp
operator|.
name|getHits
argument_list|()
operator|.
name|getTotalHits
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|assertRealtimeGetWorks
name|void
name|assertRealtimeGetWorks
parameter_list|(
name|String
name|indexName
parameter_list|)
block|{
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareUpdateSettings
argument_list|(
name|indexName
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"refresh_interval"
argument_list|,
operator|-
literal|1
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|SearchRequestBuilder
name|searchReq
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
name|indexName
argument_list|)
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|matchAllQuery
argument_list|()
argument_list|)
decl_stmt|;
name|SearchHit
name|hit
init|=
name|searchReq
operator|.
name|get
argument_list|()
operator|.
name|getHits
argument_list|()
operator|.
name|getAt
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|docId
init|=
name|hit
operator|.
name|getId
argument_list|()
decl_stmt|;
comment|// foo is new, it is not a field in the generated index
name|client
argument_list|()
operator|.
name|prepareUpdate
argument_list|(
name|indexName
argument_list|,
literal|"doc"
argument_list|,
name|docId
argument_list|)
operator|.
name|setDoc
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|GetResponse
name|getRsp
init|=
name|client
argument_list|()
operator|.
name|prepareGet
argument_list|(
name|indexName
argument_list|,
literal|"doc"
argument_list|,
name|docId
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|source
init|=
name|getRsp
operator|.
name|getSourceAsMap
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|source
argument_list|,
name|Matchers
operator|.
name|hasKey
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareUpdateSettings
argument_list|(
name|indexName
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"refresh_interval"
argument_list|,
name|EngineConfig
operator|.
name|DEFAULT_REFRESH_INTERVAL
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertNewReplicasWork
name|void
name|assertNewReplicasWork
parameter_list|(
name|String
name|indexName
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|int
name|numReplicas
init|=
literal|1
decl_stmt|;
specifier|final
name|long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"--> creating [{}] replicas for index [{}]"
argument_list|,
name|numReplicas
argument_list|,
name|indexName
argument_list|)
expr_stmt|;
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareUpdateSettings
argument_list|(
name|indexName
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"number_of_replicas"
argument_list|,
name|numReplicas
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
argument_list|)
expr_stmt|;
name|ensureGreen
argument_list|(
name|TimeValue
operator|.
name|timeValueMinutes
argument_list|(
literal|2
argument_list|)
argument_list|,
name|indexName
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"--> index [{}] is green, took [{}]"
argument_list|,
name|indexName
argument_list|,
name|TimeValue
operator|.
name|timeValueMillis
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startTime
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"--> recovery status:\n{}"
argument_list|,
name|XContentHelper
operator|.
name|toString
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareRecoveries
argument_list|(
name|indexName
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// TODO: do something with the replicas! query? index?
block|}
comment|// #10067: create-bwc-index.py deleted any doc with long_sort:[10-20]
DECL|method|assertDeleteByQueryWorked
name|void
name|assertDeleteByQueryWorked
parameter_list|(
name|String
name|indexName
parameter_list|,
name|Version
name|version
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|version
operator|.
name|onOrBefore
argument_list|(
name|Version
operator|.
name|V_1_0_0_Beta2
argument_list|)
condition|)
block|{
comment|// TODO: remove this once #10262 is fixed
return|return;
block|}
comment|// these documents are supposed to be deleted by a delete by query operation in the translog
name|SearchRequestBuilder
name|searchReq
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|(
name|indexName
argument_list|)
operator|.
name|setQuery
argument_list|(
name|QueryBuilders
operator|.
name|queryStringQuery
argument_list|(
literal|"long_sort:[10 TO 20]"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|searchReq
operator|.
name|get
argument_list|()
operator|.
name|getHits
argument_list|()
operator|.
name|getTotalHits
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|assertUpgradeWorks
name|void
name|assertUpgradeWorks
parameter_list|(
name|String
name|indexName
parameter_list|,
name|boolean
name|alreadyLatest
parameter_list|)
throws|throws
name|Exception
block|{
name|HttpRequestBuilder
name|httpClient
init|=
name|httpClient
argument_list|()
decl_stmt|;
if|if
condition|(
name|alreadyLatest
operator|==
literal|false
condition|)
block|{
name|UpgradeTest
operator|.
name|assertNotUpgraded
argument_list|(
name|httpClient
argument_list|,
name|indexName
argument_list|)
expr_stmt|;
block|}
name|UpgradeTest
operator|.
name|runUpgrade
argument_list|(
name|httpClient
argument_list|,
name|indexName
argument_list|)
expr_stmt|;
name|UpgradeTest
operator|.
name|assertUpgraded
argument_list|(
name|httpClient
argument_list|,
name|indexName
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

