begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to ElasticSearch and Shay Banon under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. ElasticSearch licenses this  * file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|com.carrotsearch.randomizedtesting
package|package
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
package|;
end_package

begin_comment
comment|/**  * Exposes methods that allow to use a {@link RandomizedContext} without using a {@link RandomizedRunner}  * This was specifically needed by the REST tests since they run with a custom junit runner ({@link org.elasticsearch.test.rest.junit.RestTestSuiteRunner})  */
end_comment

begin_class
DECL|class|StandaloneRandomizedContext
specifier|public
specifier|final
class|class
name|StandaloneRandomizedContext
block|{
DECL|method|StandaloneRandomizedContext
specifier|private
name|StandaloneRandomizedContext
parameter_list|()
block|{      }
comment|/**      * Creates a new {@link RandomizedContext} associated to the current thread      */
DECL|method|createRandomizedContext
specifier|public
specifier|static
name|void
name|createRandomizedContext
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|testClass
parameter_list|,
name|Randomness
name|runnerRandomness
parameter_list|)
block|{
comment|//the randomized runner is passed in as null, which is fine as long as we don't try to access it afterwards
name|RandomizedContext
name|randomizedContext
init|=
name|RandomizedContext
operator|.
name|create
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getThreadGroup
argument_list|()
argument_list|,
name|testClass
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|randomizedContext
operator|.
name|push
argument_list|(
name|runnerRandomness
operator|.
name|clone
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Destroys the {@link RandomizedContext} associated to the current thread      */
DECL|method|disposeRandomizedContext
specifier|public
specifier|static
name|void
name|disposeRandomizedContext
parameter_list|()
block|{
name|RandomizedContext
operator|.
name|current
argument_list|()
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
DECL|method|pushRandomness
specifier|public
specifier|static
name|void
name|pushRandomness
parameter_list|(
name|Randomness
name|randomness
parameter_list|)
block|{
name|RandomizedContext
operator|.
name|current
argument_list|()
operator|.
name|push
argument_list|(
name|randomness
argument_list|)
expr_stmt|;
block|}
DECL|method|popAndDestroy
specifier|public
specifier|static
name|void
name|popAndDestroy
parameter_list|()
block|{
name|RandomizedContext
operator|.
name|current
argument_list|()
operator|.
name|popAndDestroy
argument_list|()
expr_stmt|;
block|}
comment|/**      * Returns the string formatted seed associated to the current thread's randomized context      */
DECL|method|getSeedAsString
specifier|public
specifier|static
name|String
name|getSeedAsString
parameter_list|()
block|{
return|return
name|SeedUtils
operator|.
name|formatSeed
argument_list|(
name|RandomizedContext
operator|.
name|current
argument_list|()
operator|.
name|getRandomness
argument_list|()
operator|.
name|getSeed
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Util method to extract the seed out of a {@link Randomness} instance      */
DECL|method|getSeed
specifier|public
specifier|static
name|long
name|getSeed
parameter_list|(
name|Randomness
name|randomness
parameter_list|)
block|{
return|return
name|randomness
operator|.
name|getSeed
argument_list|()
return|;
block|}
block|}
end_class

end_unit

