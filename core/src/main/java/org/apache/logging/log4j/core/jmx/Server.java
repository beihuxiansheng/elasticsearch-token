begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache license, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License. You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the license for the specific language governing permissions and  * limitations under the license.  */
end_comment

begin_package
DECL|package|org.apache.logging.log4j.core.jmx
package|package
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|jmx
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ManagementFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|InstanceAlreadyExistsException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanRegistrationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanServer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|NotCompliantMBeanException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|Appender
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|LoggerContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|appender
operator|.
name|AsyncAppender
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|async
operator|.
name|AsyncLoggerConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|async
operator|.
name|AsyncLoggerContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|async
operator|.
name|DaemonThreadFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|config
operator|.
name|LoggerConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|impl
operator|.
name|Log4jContextFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|selector
operator|.
name|ContextSelector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|spi
operator|.
name|LoggerContextFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|status
operator|.
name|StatusLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|util
operator|.
name|PropertiesUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|SuppressForbidden
import|;
end_import

begin_comment
comment|/**  * Creates MBeans to instrument various classes in the log4j class hierarchy.  *<p>  * All instrumentation for Log4j 2 classes can be disabled by setting system property {@code -Dlog4j2.disable.jmx=true}.  *</p>  */
end_comment

begin_class
annotation|@
name|SuppressForbidden
argument_list|(
name|reason
operator|=
literal|"copied class to hack around Log4j bug"
argument_list|)
DECL|class|Server
specifier|public
specifier|final
class|class
name|Server
block|{
comment|/**      * The domain part, or prefix ({@value}) of the {@code ObjectName} of all MBeans that instrument Log4J2 components.      */
DECL|field|DOMAIN
specifier|public
specifier|static
specifier|final
name|String
name|DOMAIN
init|=
literal|"org.apache.logging.log4j2"
decl_stmt|;
DECL|field|PROPERTY_DISABLE_JMX
specifier|private
specifier|static
specifier|final
name|String
name|PROPERTY_DISABLE_JMX
init|=
literal|"log4j2.disable.jmx"
decl_stmt|;
DECL|field|PROPERTY_ASYNC_NOTIF
specifier|private
specifier|static
specifier|final
name|String
name|PROPERTY_ASYNC_NOTIF
init|=
literal|"log4j2.jmx.notify.async"
decl_stmt|;
DECL|field|THREAD_NAME_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|THREAD_NAME_PREFIX
init|=
literal|"log4j2.jmx.notif"
decl_stmt|;
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|StatusLogger
name|LOGGER
init|=
name|StatusLogger
operator|.
name|getLogger
argument_list|()
decl_stmt|;
DECL|field|executor
specifier|static
specifier|final
name|Executor
name|executor
init|=
name|isJmxDisabled
argument_list|()
condition|?
literal|null
else|:
name|createExecutor
argument_list|()
decl_stmt|;
DECL|method|Server
specifier|private
name|Server
parameter_list|()
block|{     }
comment|/**      * Returns either a {@code null} Executor (causing JMX notifications to be sent from the caller thread) or a daemon      * background thread Executor, depending on the value of system property "log4j2.jmx.notify.async". If this      * property is not set, use a {@code null} Executor for web apps to avoid memory leaks and other issues when the      * web app is restarted.      * @see<a href="https://issues.apache.org/jira/browse/LOG4J2-938">LOG4J2-938</a>      */
DECL|method|createExecutor
specifier|private
specifier|static
name|ExecutorService
name|createExecutor
parameter_list|()
block|{
specifier|final
name|boolean
name|defaultAsync
init|=
operator|!
name|Constants
operator|.
name|IS_WEB_APP
decl_stmt|;
specifier|final
name|boolean
name|async
init|=
name|PropertiesUtil
operator|.
name|getProperties
argument_list|()
operator|.
name|getBooleanProperty
argument_list|(
name|PROPERTY_ASYNC_NOTIF
argument_list|,
name|defaultAsync
argument_list|)
decl_stmt|;
return|return
name|async
condition|?
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
literal|1
argument_list|,
operator|new
name|DaemonThreadFactory
argument_list|(
name|THREAD_NAME_PREFIX
argument_list|)
argument_list|)
else|:
literal|null
return|;
block|}
comment|/**      * Either returns the specified name as is, or returns a quoted value containing the specified name with the special      * characters (comma, equals, colon, quote, asterisk, or question mark) preceded with a backslash.      *      * @param name the name to escape so it can be used as a value in an {@link ObjectName}.      * @return the escaped name      */
DECL|method|escape
specifier|public
specifier|static
name|String
name|escape
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
name|name
operator|.
name|length
argument_list|()
operator|*
literal|2
argument_list|)
decl_stmt|;
name|boolean
name|needsQuotes
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|name
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|char
name|c
init|=
name|name
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|c
condition|)
block|{
case|case
literal|'\\'
case|:
case|case
literal|'*'
case|:
case|case
literal|'?'
case|:
case|case
literal|'\"'
case|:
comment|// quote, star, question& backslash must be escaped
name|sb
operator|.
name|append
argument_list|(
literal|'\\'
argument_list|)
expr_stmt|;
name|needsQuotes
operator|=
literal|true
expr_stmt|;
comment|// ... and can only appear in quoted value
break|break;
case|case
literal|','
case|:
case|case
literal|'='
case|:
case|case
literal|':'
case|:
comment|// no need to escape these, but value must be quoted
name|needsQuotes
operator|=
literal|true
expr_stmt|;
break|break;
case|case
literal|'\r'
case|:
comment|// drop \r characters: \\r gives "invalid escape sequence"
continue|continue;
case|case
literal|'\n'
case|:
comment|// replace \n characters with \\n sequence
name|sb
operator|.
name|append
argument_list|(
literal|"\\n"
argument_list|)
expr_stmt|;
name|needsQuotes
operator|=
literal|true
expr_stmt|;
continue|continue;
block|}
name|sb
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|needsQuotes
condition|)
block|{
name|sb
operator|.
name|insert
argument_list|(
literal|0
argument_list|,
literal|'\"'
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'\"'
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|isJmxDisabled
specifier|private
specifier|static
name|boolean
name|isJmxDisabled
parameter_list|()
block|{
return|return
name|PropertiesUtil
operator|.
name|getProperties
argument_list|()
operator|.
name|getBooleanProperty
argument_list|(
name|PROPERTY_DISABLE_JMX
argument_list|)
return|;
block|}
DECL|method|reregisterMBeansAfterReconfigure
specifier|public
specifier|static
name|void
name|reregisterMBeansAfterReconfigure
parameter_list|()
block|{
comment|// avoid creating Platform MBean Server if JMX disabled
if|if
condition|(
name|isJmxDisabled
argument_list|()
condition|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"JMX disabled for log4j2. Not registering MBeans."
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|final
name|MBeanServer
name|mbs
init|=
name|ManagementFactory
operator|.
name|getPlatformMBeanServer
argument_list|()
decl_stmt|;
name|reregisterMBeansAfterReconfigure
argument_list|(
name|mbs
argument_list|)
expr_stmt|;
block|}
DECL|method|reregisterMBeansAfterReconfigure
specifier|public
specifier|static
name|void
name|reregisterMBeansAfterReconfigure
parameter_list|(
specifier|final
name|MBeanServer
name|mbs
parameter_list|)
block|{
if|if
condition|(
name|isJmxDisabled
argument_list|()
condition|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"JMX disabled for log4j2. Not registering MBeans."
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// now provide instrumentation for the newly configured
comment|// LoggerConfigs and Appenders
try|try
block|{
specifier|final
name|ContextSelector
name|selector
init|=
name|getContextSelector
argument_list|()
decl_stmt|;
if|if
condition|(
name|selector
operator|==
literal|null
condition|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Could not register MBeans: no ContextSelector found."
argument_list|)
expr_stmt|;
return|return;
block|}
name|LOGGER
operator|.
name|trace
argument_list|(
literal|"Reregistering MBeans after reconfigure. Selector={}"
argument_list|,
name|selector
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|LoggerContext
argument_list|>
name|contexts
init|=
name|selector
operator|.
name|getLoggerContexts
argument_list|()
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
specifier|final
name|LoggerContext
name|ctx
range|:
name|contexts
control|)
block|{
name|LOGGER
operator|.
name|trace
argument_list|(
literal|"Reregistering context ({}/{}): '{}' {}"
argument_list|,
operator|++
name|i
argument_list|,
name|contexts
operator|.
name|size
argument_list|()
argument_list|,
name|ctx
operator|.
name|getName
argument_list|()
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
comment|// first unregister the context and all nested loggers,
comment|// appenders, statusLogger, contextSelector, ringbuffers...
name|unregisterLoggerContext
argument_list|(
name|ctx
operator|.
name|getName
argument_list|()
argument_list|,
name|mbs
argument_list|)
expr_stmt|;
specifier|final
name|LoggerContextAdmin
name|mbean
init|=
operator|new
name|LoggerContextAdmin
argument_list|(
name|ctx
argument_list|,
name|executor
argument_list|)
decl_stmt|;
name|register
argument_list|(
name|mbs
argument_list|,
name|mbean
argument_list|,
name|mbean
operator|.
name|getObjectName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|ctx
operator|instanceof
name|AsyncLoggerContext
condition|)
block|{
specifier|final
name|RingBufferAdmin
name|rbmbean
init|=
operator|(
operator|(
name|AsyncLoggerContext
operator|)
name|ctx
operator|)
operator|.
name|createRingBufferAdmin
argument_list|()
decl_stmt|;
if|if
condition|(
name|rbmbean
operator|.
name|getBufferSize
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// don't register if Disruptor not started (DefaultConfiguration: config not found)
name|register
argument_list|(
name|mbs
argument_list|,
name|rbmbean
argument_list|,
name|rbmbean
operator|.
name|getObjectName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// register the status logger and the context selector
comment|// repeatedly
comment|// for each known context: if one context is unregistered,
comment|// these MBeans should still be available for the other
comment|// contexts.
name|registerStatusLogger
argument_list|(
name|ctx
operator|.
name|getName
argument_list|()
argument_list|,
name|mbs
argument_list|,
name|executor
argument_list|)
expr_stmt|;
name|registerContextSelector
argument_list|(
name|ctx
operator|.
name|getName
argument_list|()
argument_list|,
name|selector
argument_list|,
name|mbs
argument_list|,
name|executor
argument_list|)
expr_stmt|;
name|registerLoggerConfigs
argument_list|(
name|ctx
argument_list|,
name|mbs
argument_list|,
name|executor
argument_list|)
expr_stmt|;
name|registerAppenders
argument_list|(
name|ctx
argument_list|,
name|mbs
argument_list|,
name|executor
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|ex
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Could not register mbeans"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Unregister all log4j MBeans from the platform MBean server.      */
DECL|method|unregisterMBeans
specifier|public
specifier|static
name|void
name|unregisterMBeans
parameter_list|()
block|{
if|if
condition|(
name|isJmxDisabled
argument_list|()
condition|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"JMX disabled for Log4j2. Not unregistering MBeans."
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|final
name|MBeanServer
name|mbs
init|=
name|ManagementFactory
operator|.
name|getPlatformMBeanServer
argument_list|()
decl_stmt|;
name|unregisterMBeans
argument_list|(
name|mbs
argument_list|)
expr_stmt|;
block|}
comment|/**      * Unregister all log4j MBeans from the specified MBean server.      *      * @param mbs the MBean server to unregister from.      */
DECL|method|unregisterMBeans
specifier|public
specifier|static
name|void
name|unregisterMBeans
parameter_list|(
specifier|final
name|MBeanServer
name|mbs
parameter_list|)
block|{
name|unregisterStatusLogger
argument_list|(
literal|"*"
argument_list|,
name|mbs
argument_list|)
expr_stmt|;
name|unregisterContextSelector
argument_list|(
literal|"*"
argument_list|,
name|mbs
argument_list|)
expr_stmt|;
name|unregisterContexts
argument_list|(
name|mbs
argument_list|)
expr_stmt|;
name|unregisterLoggerConfigs
argument_list|(
literal|"*"
argument_list|,
name|mbs
argument_list|)
expr_stmt|;
name|unregisterAsyncLoggerRingBufferAdmins
argument_list|(
literal|"*"
argument_list|,
name|mbs
argument_list|)
expr_stmt|;
name|unregisterAsyncLoggerConfigRingBufferAdmins
argument_list|(
literal|"*"
argument_list|,
name|mbs
argument_list|)
expr_stmt|;
name|unregisterAppenders
argument_list|(
literal|"*"
argument_list|,
name|mbs
argument_list|)
expr_stmt|;
name|unregisterAsyncAppenders
argument_list|(
literal|"*"
argument_list|,
name|mbs
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns the {@code ContextSelector} of the current {@code Log4jContextFactory}.      *      * @return the {@code ContextSelector} of the current {@code Log4jContextFactory}      */
DECL|method|getContextSelector
specifier|private
specifier|static
name|ContextSelector
name|getContextSelector
parameter_list|()
block|{
specifier|final
name|LoggerContextFactory
name|factory
init|=
name|LogManager
operator|.
name|getFactory
argument_list|()
decl_stmt|;
if|if
condition|(
name|factory
operator|instanceof
name|Log4jContextFactory
condition|)
block|{
specifier|final
name|ContextSelector
name|selector
init|=
operator|(
operator|(
name|Log4jContextFactory
operator|)
name|factory
operator|)
operator|.
name|getSelector
argument_list|()
decl_stmt|;
return|return
name|selector
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Unregisters all MBeans associated with the specified logger context (including MBeans for {@code LoggerConfig}s      * and {@code Appender}s from the platform MBean server.      *      * @param loggerContextName name of the logger context to unregister      */
DECL|method|unregisterLoggerContext
specifier|public
specifier|static
name|void
name|unregisterLoggerContext
parameter_list|(
specifier|final
name|String
name|loggerContextName
parameter_list|)
block|{
if|if
condition|(
name|isJmxDisabled
argument_list|()
condition|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"JMX disabled for Log4j2. Not unregistering MBeans."
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|final
name|MBeanServer
name|mbs
init|=
name|ManagementFactory
operator|.
name|getPlatformMBeanServer
argument_list|()
decl_stmt|;
name|unregisterLoggerContext
argument_list|(
name|loggerContextName
argument_list|,
name|mbs
argument_list|)
expr_stmt|;
block|}
comment|/**      * Unregisters all MBeans associated with the specified logger context (including MBeans for {@code LoggerConfig}s      * and {@code Appender}s from the platform MBean server.      *      * @param contextName name of the logger context to unregister      * @param mbs the MBean Server to unregister the instrumented objects from      */
DECL|method|unregisterLoggerContext
specifier|public
specifier|static
name|void
name|unregisterLoggerContext
parameter_list|(
specifier|final
name|String
name|contextName
parameter_list|,
specifier|final
name|MBeanServer
name|mbs
parameter_list|)
block|{
specifier|final
name|String
name|pattern
init|=
name|LoggerContextAdminMBean
operator|.
name|PATTERN
decl_stmt|;
specifier|final
name|String
name|search
init|=
name|String
operator|.
name|format
argument_list|(
name|pattern
argument_list|,
name|escape
argument_list|(
name|contextName
argument_list|)
argument_list|,
literal|"*"
argument_list|)
decl_stmt|;
name|unregisterAllMatching
argument_list|(
name|search
argument_list|,
name|mbs
argument_list|)
expr_stmt|;
comment|// unregister context mbean
comment|// now unregister all MBeans associated with this logger context
name|unregisterStatusLogger
argument_list|(
name|contextName
argument_list|,
name|mbs
argument_list|)
expr_stmt|;
name|unregisterContextSelector
argument_list|(
name|contextName
argument_list|,
name|mbs
argument_list|)
expr_stmt|;
name|unregisterLoggerConfigs
argument_list|(
name|contextName
argument_list|,
name|mbs
argument_list|)
expr_stmt|;
name|unregisterAppenders
argument_list|(
name|contextName
argument_list|,
name|mbs
argument_list|)
expr_stmt|;
name|unregisterAsyncAppenders
argument_list|(
name|contextName
argument_list|,
name|mbs
argument_list|)
expr_stmt|;
name|unregisterAsyncLoggerRingBufferAdmins
argument_list|(
name|contextName
argument_list|,
name|mbs
argument_list|)
expr_stmt|;
name|unregisterAsyncLoggerConfigRingBufferAdmins
argument_list|(
name|contextName
argument_list|,
name|mbs
argument_list|)
expr_stmt|;
block|}
DECL|method|registerStatusLogger
specifier|private
specifier|static
name|void
name|registerStatusLogger
parameter_list|(
specifier|final
name|String
name|contextName
parameter_list|,
specifier|final
name|MBeanServer
name|mbs
parameter_list|,
specifier|final
name|Executor
name|executor
parameter_list|)
throws|throws
name|InstanceAlreadyExistsException
throws|,
name|MBeanRegistrationException
throws|,
name|NotCompliantMBeanException
block|{
specifier|final
name|StatusLoggerAdmin
name|mbean
init|=
operator|new
name|StatusLoggerAdmin
argument_list|(
name|contextName
argument_list|,
name|executor
argument_list|)
decl_stmt|;
name|register
argument_list|(
name|mbs
argument_list|,
name|mbean
argument_list|,
name|mbean
operator|.
name|getObjectName
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|registerContextSelector
specifier|private
specifier|static
name|void
name|registerContextSelector
parameter_list|(
specifier|final
name|String
name|contextName
parameter_list|,
specifier|final
name|ContextSelector
name|selector
parameter_list|,
specifier|final
name|MBeanServer
name|mbs
parameter_list|,
specifier|final
name|Executor
name|executor
parameter_list|)
throws|throws
name|InstanceAlreadyExistsException
throws|,
name|MBeanRegistrationException
throws|,
name|NotCompliantMBeanException
block|{
specifier|final
name|ContextSelectorAdmin
name|mbean
init|=
operator|new
name|ContextSelectorAdmin
argument_list|(
name|contextName
argument_list|,
name|selector
argument_list|)
decl_stmt|;
name|register
argument_list|(
name|mbs
argument_list|,
name|mbean
argument_list|,
name|mbean
operator|.
name|getObjectName
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|unregisterStatusLogger
specifier|private
specifier|static
name|void
name|unregisterStatusLogger
parameter_list|(
specifier|final
name|String
name|contextName
parameter_list|,
specifier|final
name|MBeanServer
name|mbs
parameter_list|)
block|{
specifier|final
name|String
name|pattern
init|=
name|StatusLoggerAdminMBean
operator|.
name|PATTERN
decl_stmt|;
specifier|final
name|String
name|search
init|=
name|String
operator|.
name|format
argument_list|(
name|pattern
argument_list|,
name|escape
argument_list|(
name|contextName
argument_list|)
argument_list|,
literal|"*"
argument_list|)
decl_stmt|;
name|unregisterAllMatching
argument_list|(
name|search
argument_list|,
name|mbs
argument_list|)
expr_stmt|;
block|}
DECL|method|unregisterContextSelector
specifier|private
specifier|static
name|void
name|unregisterContextSelector
parameter_list|(
specifier|final
name|String
name|contextName
parameter_list|,
specifier|final
name|MBeanServer
name|mbs
parameter_list|)
block|{
specifier|final
name|String
name|pattern
init|=
name|ContextSelectorAdminMBean
operator|.
name|PATTERN
decl_stmt|;
specifier|final
name|String
name|search
init|=
name|String
operator|.
name|format
argument_list|(
name|pattern
argument_list|,
name|escape
argument_list|(
name|contextName
argument_list|)
argument_list|,
literal|"*"
argument_list|)
decl_stmt|;
name|unregisterAllMatching
argument_list|(
name|search
argument_list|,
name|mbs
argument_list|)
expr_stmt|;
block|}
DECL|method|unregisterLoggerConfigs
specifier|private
specifier|static
name|void
name|unregisterLoggerConfigs
parameter_list|(
specifier|final
name|String
name|contextName
parameter_list|,
specifier|final
name|MBeanServer
name|mbs
parameter_list|)
block|{
specifier|final
name|String
name|pattern
init|=
name|LoggerConfigAdminMBean
operator|.
name|PATTERN
decl_stmt|;
specifier|final
name|String
name|search
init|=
name|String
operator|.
name|format
argument_list|(
name|pattern
argument_list|,
name|escape
argument_list|(
name|contextName
argument_list|)
argument_list|,
literal|"*"
argument_list|)
decl_stmt|;
name|unregisterAllMatching
argument_list|(
name|search
argument_list|,
name|mbs
argument_list|)
expr_stmt|;
block|}
DECL|method|unregisterContexts
specifier|private
specifier|static
name|void
name|unregisterContexts
parameter_list|(
specifier|final
name|MBeanServer
name|mbs
parameter_list|)
block|{
specifier|final
name|String
name|pattern
init|=
name|LoggerContextAdminMBean
operator|.
name|PATTERN
decl_stmt|;
specifier|final
name|String
name|search
init|=
name|String
operator|.
name|format
argument_list|(
name|pattern
argument_list|,
literal|"*"
argument_list|)
decl_stmt|;
name|unregisterAllMatching
argument_list|(
name|search
argument_list|,
name|mbs
argument_list|)
expr_stmt|;
block|}
DECL|method|unregisterAppenders
specifier|private
specifier|static
name|void
name|unregisterAppenders
parameter_list|(
specifier|final
name|String
name|contextName
parameter_list|,
specifier|final
name|MBeanServer
name|mbs
parameter_list|)
block|{
specifier|final
name|String
name|pattern
init|=
name|AppenderAdminMBean
operator|.
name|PATTERN
decl_stmt|;
specifier|final
name|String
name|search
init|=
name|String
operator|.
name|format
argument_list|(
name|pattern
argument_list|,
name|escape
argument_list|(
name|contextName
argument_list|)
argument_list|,
literal|"*"
argument_list|)
decl_stmt|;
name|unregisterAllMatching
argument_list|(
name|search
argument_list|,
name|mbs
argument_list|)
expr_stmt|;
block|}
DECL|method|unregisterAsyncAppenders
specifier|private
specifier|static
name|void
name|unregisterAsyncAppenders
parameter_list|(
specifier|final
name|String
name|contextName
parameter_list|,
specifier|final
name|MBeanServer
name|mbs
parameter_list|)
block|{
specifier|final
name|String
name|pattern
init|=
name|AsyncAppenderAdminMBean
operator|.
name|PATTERN
decl_stmt|;
specifier|final
name|String
name|search
init|=
name|String
operator|.
name|format
argument_list|(
name|pattern
argument_list|,
name|escape
argument_list|(
name|contextName
argument_list|)
argument_list|,
literal|"*"
argument_list|)
decl_stmt|;
name|unregisterAllMatching
argument_list|(
name|search
argument_list|,
name|mbs
argument_list|)
expr_stmt|;
block|}
DECL|method|unregisterAsyncLoggerRingBufferAdmins
specifier|private
specifier|static
name|void
name|unregisterAsyncLoggerRingBufferAdmins
parameter_list|(
specifier|final
name|String
name|contextName
parameter_list|,
specifier|final
name|MBeanServer
name|mbs
parameter_list|)
block|{
specifier|final
name|String
name|pattern1
init|=
name|RingBufferAdminMBean
operator|.
name|PATTERN_ASYNC_LOGGER
decl_stmt|;
specifier|final
name|String
name|search1
init|=
name|String
operator|.
name|format
argument_list|(
name|pattern1
argument_list|,
name|escape
argument_list|(
name|contextName
argument_list|)
argument_list|)
decl_stmt|;
name|unregisterAllMatching
argument_list|(
name|search1
argument_list|,
name|mbs
argument_list|)
expr_stmt|;
block|}
DECL|method|unregisterAsyncLoggerConfigRingBufferAdmins
specifier|private
specifier|static
name|void
name|unregisterAsyncLoggerConfigRingBufferAdmins
parameter_list|(
specifier|final
name|String
name|contextName
parameter_list|,
specifier|final
name|MBeanServer
name|mbs
parameter_list|)
block|{
specifier|final
name|String
name|pattern2
init|=
name|RingBufferAdminMBean
operator|.
name|PATTERN_ASYNC_LOGGER_CONFIG
decl_stmt|;
specifier|final
name|String
name|search2
init|=
name|String
operator|.
name|format
argument_list|(
name|pattern2
argument_list|,
name|escape
argument_list|(
name|contextName
argument_list|)
argument_list|,
literal|"*"
argument_list|)
decl_stmt|;
name|unregisterAllMatching
argument_list|(
name|search2
argument_list|,
name|mbs
argument_list|)
expr_stmt|;
block|}
DECL|method|unregisterAllMatching
specifier|private
specifier|static
name|void
name|unregisterAllMatching
parameter_list|(
specifier|final
name|String
name|search
parameter_list|,
specifier|final
name|MBeanServer
name|mbs
parameter_list|)
block|{
try|try
block|{
specifier|final
name|ObjectName
name|pattern
init|=
operator|new
name|ObjectName
argument_list|(
name|search
argument_list|)
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|ObjectName
argument_list|>
name|found
init|=
name|mbs
operator|.
name|queryNames
argument_list|(
name|pattern
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|found
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOGGER
operator|.
name|trace
argument_list|(
literal|"Unregistering but no MBeans found matching '{}'"
argument_list|,
name|search
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOGGER
operator|.
name|trace
argument_list|(
literal|"Unregistering {} MBeans: {}"
argument_list|,
name|found
operator|.
name|size
argument_list|()
argument_list|,
name|found
argument_list|)
expr_stmt|;
block|}
for|for
control|(
specifier|final
name|ObjectName
name|objectName
range|:
name|found
control|)
block|{
name|mbs
operator|.
name|unregisterMBean
argument_list|(
name|objectName
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|ex
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Could not unregister MBeans for "
operator|+
name|search
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|registerLoggerConfigs
specifier|private
specifier|static
name|void
name|registerLoggerConfigs
parameter_list|(
specifier|final
name|LoggerContext
name|ctx
parameter_list|,
specifier|final
name|MBeanServer
name|mbs
parameter_list|,
specifier|final
name|Executor
name|executor
parameter_list|)
throws|throws
name|InstanceAlreadyExistsException
throws|,
name|MBeanRegistrationException
throws|,
name|NotCompliantMBeanException
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|LoggerConfig
argument_list|>
name|map
init|=
name|ctx
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getLoggers
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|String
name|name
range|:
name|map
operator|.
name|keySet
argument_list|()
control|)
block|{
specifier|final
name|LoggerConfig
name|cfg
init|=
name|map
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
specifier|final
name|LoggerConfigAdmin
name|mbean
init|=
operator|new
name|LoggerConfigAdmin
argument_list|(
name|ctx
argument_list|,
name|cfg
argument_list|)
decl_stmt|;
name|register
argument_list|(
name|mbs
argument_list|,
name|mbean
argument_list|,
name|mbean
operator|.
name|getObjectName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cfg
operator|instanceof
name|AsyncLoggerConfig
condition|)
block|{
specifier|final
name|AsyncLoggerConfig
name|async
init|=
operator|(
name|AsyncLoggerConfig
operator|)
name|cfg
decl_stmt|;
specifier|final
name|RingBufferAdmin
name|rbmbean
init|=
name|async
operator|.
name|createRingBufferAdmin
argument_list|(
name|ctx
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|register
argument_list|(
name|mbs
argument_list|,
name|rbmbean
argument_list|,
name|rbmbean
operator|.
name|getObjectName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|registerAppenders
specifier|private
specifier|static
name|void
name|registerAppenders
parameter_list|(
specifier|final
name|LoggerContext
name|ctx
parameter_list|,
specifier|final
name|MBeanServer
name|mbs
parameter_list|,
specifier|final
name|Executor
name|executor
parameter_list|)
throws|throws
name|InstanceAlreadyExistsException
throws|,
name|MBeanRegistrationException
throws|,
name|NotCompliantMBeanException
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Appender
argument_list|>
name|map
init|=
name|ctx
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getAppenders
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|String
name|name
range|:
name|map
operator|.
name|keySet
argument_list|()
control|)
block|{
specifier|final
name|Appender
name|appender
init|=
name|map
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|appender
operator|instanceof
name|AsyncAppender
condition|)
block|{
specifier|final
name|AsyncAppender
name|async
init|=
operator|(
operator|(
name|AsyncAppender
operator|)
name|appender
operator|)
decl_stmt|;
specifier|final
name|AsyncAppenderAdmin
name|mbean
init|=
operator|new
name|AsyncAppenderAdmin
argument_list|(
name|ctx
operator|.
name|getName
argument_list|()
argument_list|,
name|async
argument_list|)
decl_stmt|;
name|register
argument_list|(
name|mbs
argument_list|,
name|mbean
argument_list|,
name|mbean
operator|.
name|getObjectName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|AppenderAdmin
name|mbean
init|=
operator|new
name|AppenderAdmin
argument_list|(
name|ctx
operator|.
name|getName
argument_list|()
argument_list|,
name|appender
argument_list|)
decl_stmt|;
name|register
argument_list|(
name|mbs
argument_list|,
name|mbean
argument_list|,
name|mbean
operator|.
name|getObjectName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|register
specifier|private
specifier|static
name|void
name|register
parameter_list|(
specifier|final
name|MBeanServer
name|mbs
parameter_list|,
specifier|final
name|Object
name|mbean
parameter_list|,
specifier|final
name|ObjectName
name|objectName
parameter_list|)
throws|throws
name|InstanceAlreadyExistsException
throws|,
name|MBeanRegistrationException
throws|,
name|NotCompliantMBeanException
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Registering MBean {}"
argument_list|,
name|objectName
argument_list|)
expr_stmt|;
name|mbs
operator|.
name|registerMBean
argument_list|(
name|mbean
argument_list|,
name|objectName
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

