begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache license, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License. You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the license for the specific language governing permissions and  * limitations under the license.  */
end_comment

begin_package
DECL|package|org.apache.logging.log4j.core.impl
package|package
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|CodeSource
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|util
operator|.
name|Loader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|status
operator|.
name|StatusLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|util
operator|.
name|ReflectionUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|util
operator|.
name|Strings
import|;
end_import

begin_comment
comment|/**  * Wraps a Throwable to add packaging information about each stack trace element.  *  *<p>  * A proxy is used to represent a throwable that may not exist in a different class loader or JVM. When an application  * deserializes a ThrowableProxy, the throwable may not be set, but the throwable's information is preserved in other  * fields of the proxy like the message and stack trace.  *</p>  *  *<p>  * TODO: Move this class to org.apache.logging.log4j.core because it is used from LogEvent.  *</p>  *<p>  * TODO: Deserialize: Try to rebuild Throwable if the target exception is in this class loader?  *</p>  */
end_comment

begin_class
DECL|class|ThrowableProxy
specifier|public
class|class
name|ThrowableProxy
implements|implements
name|Serializable
block|{
DECL|field|CAUSED_BY_LABEL
specifier|private
specifier|static
specifier|final
name|String
name|CAUSED_BY_LABEL
init|=
literal|"Caused by: "
decl_stmt|;
DECL|field|SUPPRESSED_LABEL
specifier|private
specifier|static
specifier|final
name|String
name|SUPPRESSED_LABEL
init|=
literal|"Suppressed: "
decl_stmt|;
DECL|field|WRAPPED_BY_LABEL
specifier|private
specifier|static
specifier|final
name|String
name|WRAPPED_BY_LABEL
init|=
literal|"Wrapped by: "
decl_stmt|;
comment|/**      * Cached StackTracePackageElement and ClassLoader.      *<p>      * Consider this class private.      *</p>      */
DECL|class|CacheEntry
specifier|static
class|class
name|CacheEntry
block|{
DECL|field|element
specifier|private
specifier|final
name|ExtendedClassInfo
name|element
decl_stmt|;
DECL|field|loader
specifier|private
specifier|final
name|ClassLoader
name|loader
decl_stmt|;
DECL|method|CacheEntry
specifier|public
name|CacheEntry
parameter_list|(
specifier|final
name|ExtendedClassInfo
name|element
parameter_list|,
specifier|final
name|ClassLoader
name|loader
parameter_list|)
block|{
name|this
operator|.
name|element
operator|=
name|element
expr_stmt|;
name|this
operator|.
name|loader
operator|=
name|loader
expr_stmt|;
block|}
block|}
DECL|field|EMPTY_THROWABLE_PROXY_ARRAY
specifier|private
specifier|static
specifier|final
name|ThrowableProxy
index|[]
name|EMPTY_THROWABLE_PROXY_ARRAY
init|=
operator|new
name|ThrowableProxy
index|[
literal|0
index|]
decl_stmt|;
DECL|field|EOL
specifier|private
specifier|static
specifier|final
name|char
name|EOL
init|=
literal|'\n'
decl_stmt|;
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|2752771578252251910L
decl_stmt|;
DECL|field|causeProxy
specifier|private
specifier|final
name|ThrowableProxy
name|causeProxy
decl_stmt|;
DECL|field|commonElementCount
specifier|private
name|int
name|commonElementCount
decl_stmt|;
DECL|field|extendedStackTrace
specifier|private
specifier|final
name|ExtendedStackTraceElement
index|[]
name|extendedStackTrace
decl_stmt|;
DECL|field|localizedMessage
specifier|private
specifier|final
name|String
name|localizedMessage
decl_stmt|;
DECL|field|message
specifier|private
specifier|final
name|String
name|message
decl_stmt|;
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|suppressedProxies
specifier|private
specifier|final
name|ThrowableProxy
index|[]
name|suppressedProxies
decl_stmt|;
DECL|field|throwable
specifier|private
specifier|final
specifier|transient
name|Throwable
name|throwable
decl_stmt|;
comment|/**      * For JSON and XML IO via Jackson.      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
DECL|method|ThrowableProxy
specifier|private
name|ThrowableProxy
parameter_list|()
block|{
name|this
operator|.
name|throwable
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|name
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|extendedStackTrace
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|causeProxy
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|message
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|localizedMessage
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|suppressedProxies
operator|=
name|EMPTY_THROWABLE_PROXY_ARRAY
expr_stmt|;
block|}
comment|/**      * Constructs the wrapper for the Throwable that includes packaging data.      *      * @param throwable      *        The Throwable to wrap, must not be null.      */
DECL|method|ThrowableProxy
specifier|public
name|ThrowableProxy
parameter_list|(
specifier|final
name|Throwable
name|throwable
parameter_list|)
block|{
name|this
argument_list|(
name|throwable
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructs the wrapper for the Throwable that includes packaging data.      *      * @param throwable      *        The Throwable to wrap, must not be null.      * @param visited      *        The set of visited suppressed exceptions.      */
DECL|method|ThrowableProxy
specifier|private
name|ThrowableProxy
parameter_list|(
specifier|final
name|Throwable
name|throwable
parameter_list|,
specifier|final
name|Set
argument_list|<
name|Throwable
argument_list|>
name|visited
parameter_list|)
block|{
name|this
operator|.
name|throwable
operator|=
name|throwable
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|throwable
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
name|this
operator|.
name|message
operator|=
name|throwable
operator|.
name|getMessage
argument_list|()
expr_stmt|;
name|this
operator|.
name|localizedMessage
operator|=
name|throwable
operator|.
name|getLocalizedMessage
argument_list|()
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|CacheEntry
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|Stack
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|stack
init|=
name|ReflectionUtil
operator|.
name|getCurrentStackTrace
argument_list|()
decl_stmt|;
name|this
operator|.
name|extendedStackTrace
operator|=
name|this
operator|.
name|toExtendedStackTrace
argument_list|(
name|stack
argument_list|,
name|map
argument_list|,
literal|null
argument_list|,
name|throwable
operator|.
name|getStackTrace
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Throwable
name|throwableCause
init|=
name|throwable
operator|.
name|getCause
argument_list|()
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|Throwable
argument_list|>
name|causeVisited
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|this
operator|.
name|causeProxy
operator|=
name|throwableCause
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|ThrowableProxy
argument_list|(
name|throwable
argument_list|,
name|stack
argument_list|,
name|map
argument_list|,
name|throwableCause
argument_list|,
name|visited
argument_list|,
name|causeVisited
argument_list|)
expr_stmt|;
name|this
operator|.
name|suppressedProxies
operator|=
name|this
operator|.
name|toSuppressedProxies
argument_list|(
name|throwable
argument_list|,
name|visited
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructs the wrapper for a Throwable that is referenced as the cause by another Throwable.      *      * @param parent      *        The Throwable referencing this Throwable.      * @param stack      *        The Class stack.      * @param map      *        The cache containing the packaging data.      * @param cause      *        The Throwable to wrap.      * @param suppressedVisited TODO      * @param causeVisited TODO      */
DECL|method|ThrowableProxy
specifier|private
name|ThrowableProxy
parameter_list|(
specifier|final
name|Throwable
name|parent
parameter_list|,
specifier|final
name|Stack
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|stack
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|CacheEntry
argument_list|>
name|map
parameter_list|,
specifier|final
name|Throwable
name|cause
parameter_list|,
specifier|final
name|Set
argument_list|<
name|Throwable
argument_list|>
name|suppressedVisited
parameter_list|,
specifier|final
name|Set
argument_list|<
name|Throwable
argument_list|>
name|causeVisited
parameter_list|)
block|{
name|causeVisited
operator|.
name|add
argument_list|(
name|cause
argument_list|)
expr_stmt|;
name|this
operator|.
name|throwable
operator|=
name|cause
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|cause
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
name|this
operator|.
name|message
operator|=
name|this
operator|.
name|throwable
operator|.
name|getMessage
argument_list|()
expr_stmt|;
name|this
operator|.
name|localizedMessage
operator|=
name|this
operator|.
name|throwable
operator|.
name|getLocalizedMessage
argument_list|()
expr_stmt|;
name|this
operator|.
name|extendedStackTrace
operator|=
name|this
operator|.
name|toExtendedStackTrace
argument_list|(
name|stack
argument_list|,
name|map
argument_list|,
name|parent
operator|.
name|getStackTrace
argument_list|()
argument_list|,
name|cause
operator|.
name|getStackTrace
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Throwable
name|causeCause
init|=
name|cause
operator|.
name|getCause
argument_list|()
decl_stmt|;
name|this
operator|.
name|causeProxy
operator|=
name|causeCause
operator|==
literal|null
operator|||
name|causeVisited
operator|.
name|contains
argument_list|(
name|causeCause
argument_list|)
condition|?
literal|null
else|:
operator|new
name|ThrowableProxy
argument_list|(
name|parent
argument_list|,
name|stack
argument_list|,
name|map
argument_list|,
name|causeCause
argument_list|,
name|suppressedVisited
argument_list|,
name|causeVisited
argument_list|)
expr_stmt|;
name|this
operator|.
name|suppressedProxies
operator|=
name|this
operator|.
name|toSuppressedProxies
argument_list|(
name|cause
argument_list|,
name|suppressedVisited
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
specifier|final
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|this
operator|.
name|getClass
argument_list|()
operator|!=
name|obj
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
specifier|final
name|ThrowableProxy
name|other
init|=
operator|(
name|ThrowableProxy
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|causeProxy
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|causeProxy
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|this
operator|.
name|causeProxy
operator|.
name|equals
argument_list|(
name|other
operator|.
name|causeProxy
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|this
operator|.
name|commonElementCount
operator|!=
name|other
operator|.
name|commonElementCount
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|this
operator|.
name|name
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|name
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|this
operator|.
name|name
operator|.
name|equals
argument_list|(
name|other
operator|.
name|name
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|Arrays
operator|.
name|equals
argument_list|(
name|this
operator|.
name|extendedStackTrace
argument_list|,
name|other
operator|.
name|extendedStackTrace
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|Arrays
operator|.
name|equals
argument_list|(
name|this
operator|.
name|suppressedProxies
argument_list|,
name|other
operator|.
name|suppressedProxies
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|formatCause
specifier|private
name|void
name|formatCause
parameter_list|(
specifier|final
name|StringBuilder
name|sb
parameter_list|,
specifier|final
name|String
name|prefix
parameter_list|,
specifier|final
name|ThrowableProxy
name|cause
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|ignorePackages
parameter_list|)
block|{
name|formatThrowableProxy
argument_list|(
name|sb
argument_list|,
name|prefix
argument_list|,
name|CAUSED_BY_LABEL
argument_list|,
name|cause
argument_list|,
name|ignorePackages
argument_list|)
expr_stmt|;
block|}
DECL|method|formatThrowableProxy
specifier|private
name|void
name|formatThrowableProxy
parameter_list|(
specifier|final
name|StringBuilder
name|sb
parameter_list|,
specifier|final
name|String
name|prefix
parameter_list|,
specifier|final
name|String
name|causeLabel
parameter_list|,
specifier|final
name|ThrowableProxy
name|throwableProxy
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|ignorePackages
parameter_list|)
block|{
if|if
condition|(
name|throwableProxy
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|sb
operator|.
name|append
argument_list|(
name|prefix
argument_list|)
operator|.
name|append
argument_list|(
name|causeLabel
argument_list|)
operator|.
name|append
argument_list|(
name|throwableProxy
argument_list|)
operator|.
name|append
argument_list|(
name|EOL
argument_list|)
expr_stmt|;
name|this
operator|.
name|formatElements
argument_list|(
name|sb
argument_list|,
name|prefix
argument_list|,
name|throwableProxy
operator|.
name|commonElementCount
argument_list|,
name|throwableProxy
operator|.
name|getStackTrace
argument_list|()
argument_list|,
name|throwableProxy
operator|.
name|extendedStackTrace
argument_list|,
name|ignorePackages
argument_list|)
expr_stmt|;
name|this
operator|.
name|formatSuppressed
argument_list|(
name|sb
argument_list|,
name|prefix
operator|+
literal|"\t"
argument_list|,
name|throwableProxy
operator|.
name|suppressedProxies
argument_list|,
name|ignorePackages
argument_list|)
expr_stmt|;
name|this
operator|.
name|formatCause
argument_list|(
name|sb
argument_list|,
name|prefix
argument_list|,
name|throwableProxy
operator|.
name|causeProxy
argument_list|,
name|ignorePackages
argument_list|)
expr_stmt|;
block|}
DECL|method|formatSuppressed
specifier|private
name|void
name|formatSuppressed
parameter_list|(
specifier|final
name|StringBuilder
name|sb
parameter_list|,
specifier|final
name|String
name|prefix
parameter_list|,
specifier|final
name|ThrowableProxy
index|[]
name|suppressedProxies
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|ignorePackages
parameter_list|)
block|{
if|if
condition|(
name|suppressedProxies
operator|==
literal|null
condition|)
block|{
return|return;
block|}
for|for
control|(
specifier|final
name|ThrowableProxy
name|suppressedProxy
range|:
name|suppressedProxies
control|)
block|{
specifier|final
name|ThrowableProxy
name|cause
init|=
name|suppressedProxy
decl_stmt|;
name|formatThrowableProxy
argument_list|(
name|sb
argument_list|,
name|prefix
argument_list|,
name|SUPPRESSED_LABEL
argument_list|,
name|cause
argument_list|,
name|ignorePackages
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|formatElements
specifier|private
name|void
name|formatElements
parameter_list|(
specifier|final
name|StringBuilder
name|sb
parameter_list|,
specifier|final
name|String
name|prefix
parameter_list|,
specifier|final
name|int
name|commonCount
parameter_list|,
specifier|final
name|StackTraceElement
index|[]
name|causedTrace
parameter_list|,
specifier|final
name|ExtendedStackTraceElement
index|[]
name|extStackTrace
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|ignorePackages
parameter_list|)
block|{
if|if
condition|(
name|ignorePackages
operator|==
literal|null
operator|||
name|ignorePackages
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
specifier|final
name|ExtendedStackTraceElement
name|element
range|:
name|extStackTrace
control|)
block|{
name|this
operator|.
name|formatEntry
argument_list|(
name|element
argument_list|,
name|sb
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|extStackTrace
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|ignoreElement
argument_list|(
name|causedTrace
index|[
name|i
index|]
argument_list|,
name|ignorePackages
argument_list|)
condition|)
block|{
if|if
condition|(
name|count
operator|>
literal|0
condition|)
block|{
name|appendSuppressedCount
argument_list|(
name|sb
argument_list|,
name|prefix
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|count
operator|=
literal|0
expr_stmt|;
block|}
name|this
operator|.
name|formatEntry
argument_list|(
name|extStackTrace
index|[
name|i
index|]
argument_list|,
name|sb
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
block|}
else|else
block|{
operator|++
name|count
expr_stmt|;
block|}
block|}
if|if
condition|(
name|count
operator|>
literal|0
condition|)
block|{
name|appendSuppressedCount
argument_list|(
name|sb
argument_list|,
name|prefix
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|commonCount
operator|!=
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|prefix
argument_list|)
operator|.
name|append
argument_list|(
literal|"\t... "
argument_list|)
operator|.
name|append
argument_list|(
name|commonCount
argument_list|)
operator|.
name|append
argument_list|(
literal|" more"
argument_list|)
operator|.
name|append
argument_list|(
name|EOL
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|appendSuppressedCount
specifier|private
name|void
name|appendSuppressedCount
parameter_list|(
specifier|final
name|StringBuilder
name|sb
parameter_list|,
specifier|final
name|String
name|prefix
parameter_list|,
specifier|final
name|int
name|count
parameter_list|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
if|if
condition|(
name|count
operator|==
literal|1
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\t...."
argument_list|)
operator|.
name|append
argument_list|(
name|EOL
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\t... suppressed "
argument_list|)
operator|.
name|append
argument_list|(
name|count
argument_list|)
operator|.
name|append
argument_list|(
literal|" lines"
argument_list|)
operator|.
name|append
argument_list|(
name|EOL
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|formatEntry
specifier|private
name|void
name|formatEntry
parameter_list|(
specifier|final
name|ExtendedStackTraceElement
name|extStackTraceElement
parameter_list|,
specifier|final
name|StringBuilder
name|sb
parameter_list|,
specifier|final
name|String
name|prefix
parameter_list|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\tat "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|extStackTraceElement
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|EOL
argument_list|)
expr_stmt|;
block|}
comment|/**      * Formats the specified Throwable.      *      * @param sb      *        StringBuilder to contain the formatted Throwable.      * @param cause      *        The Throwable to format.      */
DECL|method|formatWrapper
specifier|public
name|void
name|formatWrapper
parameter_list|(
specifier|final
name|StringBuilder
name|sb
parameter_list|,
specifier|final
name|ThrowableProxy
name|cause
parameter_list|)
block|{
name|this
operator|.
name|formatWrapper
argument_list|(
name|sb
argument_list|,
name|cause
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Formats the specified Throwable.      *      * @param sb      *        StringBuilder to contain the formatted Throwable.      * @param cause      *        The Throwable to format.      * @param packages      *        The List of packages to be suppressed from the trace.      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"ThrowableResultOfMethodCallIgnored"
argument_list|)
DECL|method|formatWrapper
specifier|public
name|void
name|formatWrapper
parameter_list|(
specifier|final
name|StringBuilder
name|sb
parameter_list|,
specifier|final
name|ThrowableProxy
name|cause
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|packages
parameter_list|)
block|{
specifier|final
name|Throwable
name|caused
init|=
name|cause
operator|.
name|getCauseProxy
argument_list|()
operator|!=
literal|null
condition|?
name|cause
operator|.
name|getCauseProxy
argument_list|()
operator|.
name|getThrowable
argument_list|()
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|caused
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|formatWrapper
argument_list|(
name|sb
argument_list|,
name|cause
operator|.
name|causeProxy
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|WRAPPED_BY_LABEL
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|cause
argument_list|)
operator|.
name|append
argument_list|(
name|EOL
argument_list|)
expr_stmt|;
name|this
operator|.
name|formatElements
argument_list|(
name|sb
argument_list|,
literal|""
argument_list|,
name|cause
operator|.
name|commonElementCount
argument_list|,
name|cause
operator|.
name|getThrowable
argument_list|()
operator|.
name|getStackTrace
argument_list|()
argument_list|,
name|cause
operator|.
name|extendedStackTrace
argument_list|,
name|packages
argument_list|)
expr_stmt|;
block|}
DECL|method|getCauseProxy
specifier|public
name|ThrowableProxy
name|getCauseProxy
parameter_list|()
block|{
return|return
name|this
operator|.
name|causeProxy
return|;
block|}
comment|/**      * Format the Throwable that is the cause of this Throwable.      *      * @return The formatted Throwable that caused this Throwable.      */
DECL|method|getCauseStackTraceAsString
specifier|public
name|String
name|getCauseStackTraceAsString
parameter_list|()
block|{
return|return
name|this
operator|.
name|getCauseStackTraceAsString
argument_list|(
literal|null
argument_list|)
return|;
block|}
comment|/**      * Format the Throwable that is the cause of this Throwable.      *      * @param packages      *        The List of packages to be suppressed from the trace.      * @return The formatted Throwable that caused this Throwable.      */
DECL|method|getCauseStackTraceAsString
specifier|public
name|String
name|getCauseStackTraceAsString
parameter_list|(
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|packages
parameter_list|)
block|{
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|causeProxy
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|formatWrapper
argument_list|(
name|sb
argument_list|,
name|this
operator|.
name|causeProxy
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|WRAPPED_BY_LABEL
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|EOL
argument_list|)
expr_stmt|;
name|this
operator|.
name|formatElements
argument_list|(
name|sb
argument_list|,
literal|""
argument_list|,
literal|0
argument_list|,
name|this
operator|.
name|throwable
operator|.
name|getStackTrace
argument_list|()
argument_list|,
name|this
operator|.
name|extendedStackTrace
argument_list|,
name|packages
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Return the number of elements that are being omitted because they are common with the parent Throwable's stack      * trace.      *      * @return The number of elements omitted from the stack trace.      */
DECL|method|getCommonElementCount
specifier|public
name|int
name|getCommonElementCount
parameter_list|()
block|{
return|return
name|this
operator|.
name|commonElementCount
return|;
block|}
comment|/**      * Gets the stack trace including packaging information.      *      * @return The stack trace including packaging information.      */
DECL|method|getExtendedStackTrace
specifier|public
name|ExtendedStackTraceElement
index|[]
name|getExtendedStackTrace
parameter_list|()
block|{
return|return
name|this
operator|.
name|extendedStackTrace
return|;
block|}
comment|/**      * Format the stack trace including packaging information.      *      * @return The formatted stack trace including packaging information.      */
DECL|method|getExtendedStackTraceAsString
specifier|public
name|String
name|getExtendedStackTraceAsString
parameter_list|()
block|{
return|return
name|this
operator|.
name|getExtendedStackTraceAsString
argument_list|(
literal|null
argument_list|)
return|;
block|}
comment|/**      * Format the stack trace including packaging information.      *      * @param ignorePackages      *        List of packages to be ignored in the trace.      * @return The formatted stack trace including packaging information.      */
DECL|method|getExtendedStackTraceAsString
specifier|public
name|String
name|getExtendedStackTraceAsString
parameter_list|(
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|ignorePackages
parameter_list|)
block|{
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
name|this
operator|.
name|name
argument_list|)
decl_stmt|;
specifier|final
name|String
name|msg
init|=
name|this
operator|.
name|message
decl_stmt|;
if|if
condition|(
name|msg
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|": "
argument_list|)
operator|.
name|append
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|EOL
argument_list|)
expr_stmt|;
specifier|final
name|StackTraceElement
index|[]
name|causedTrace
init|=
name|this
operator|.
name|throwable
operator|!=
literal|null
condition|?
name|this
operator|.
name|throwable
operator|.
name|getStackTrace
argument_list|()
else|:
literal|null
decl_stmt|;
name|this
operator|.
name|formatElements
argument_list|(
name|sb
argument_list|,
literal|""
argument_list|,
literal|0
argument_list|,
name|causedTrace
argument_list|,
name|this
operator|.
name|extendedStackTrace
argument_list|,
name|ignorePackages
argument_list|)
expr_stmt|;
name|this
operator|.
name|formatSuppressed
argument_list|(
name|sb
argument_list|,
literal|"\t"
argument_list|,
name|this
operator|.
name|suppressedProxies
argument_list|,
name|ignorePackages
argument_list|)
expr_stmt|;
name|this
operator|.
name|formatCause
argument_list|(
name|sb
argument_list|,
literal|""
argument_list|,
name|this
operator|.
name|causeProxy
argument_list|,
name|ignorePackages
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|getLocalizedMessage
specifier|public
name|String
name|getLocalizedMessage
parameter_list|()
block|{
return|return
name|this
operator|.
name|localizedMessage
return|;
block|}
DECL|method|getMessage
specifier|public
name|String
name|getMessage
parameter_list|()
block|{
return|return
name|this
operator|.
name|message
return|;
block|}
comment|/**      * Return the FQCN of the Throwable.      *      * @return The FQCN of the Throwable.      */
DECL|method|getName
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|this
operator|.
name|name
return|;
block|}
DECL|method|getStackTrace
specifier|public
name|StackTraceElement
index|[]
name|getStackTrace
parameter_list|()
block|{
return|return
name|this
operator|.
name|throwable
operator|==
literal|null
condition|?
literal|null
else|:
name|this
operator|.
name|throwable
operator|.
name|getStackTrace
argument_list|()
return|;
block|}
comment|/**      * Gets proxies for suppressed exceptions.      *      * @return proxies for suppressed exceptions.      */
DECL|method|getSuppressedProxies
specifier|public
name|ThrowableProxy
index|[]
name|getSuppressedProxies
parameter_list|()
block|{
return|return
name|this
operator|.
name|suppressedProxies
return|;
block|}
comment|/**      * Format the suppressed Throwables.      *      * @return The formatted suppressed Throwables.      */
DECL|method|getSuppressedStackTrace
specifier|public
name|String
name|getSuppressedStackTrace
parameter_list|()
block|{
specifier|final
name|ThrowableProxy
index|[]
name|suppressed
init|=
name|this
operator|.
name|getSuppressedProxies
argument_list|()
decl_stmt|;
if|if
condition|(
name|suppressed
operator|==
literal|null
operator|||
name|suppressed
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
name|Strings
operator|.
name|EMPTY
return|;
block|}
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"Suppressed Stack Trace Elements:"
argument_list|)
operator|.
name|append
argument_list|(
name|EOL
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|ThrowableProxy
name|proxy
range|:
name|suppressed
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|proxy
operator|.
name|getExtendedStackTraceAsString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * The throwable or null if this object is deserialized from XML or JSON.      *      * @return The throwable or null if this object is deserialized from XML or JSON.      */
DECL|method|getThrowable
specifier|public
name|Throwable
name|getThrowable
parameter_list|()
block|{
return|return
name|this
operator|.
name|throwable
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
specifier|final
name|int
name|prime
init|=
literal|31
decl_stmt|;
name|int
name|result
init|=
literal|1
decl_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
operator|(
name|this
operator|.
name|causeProxy
operator|==
literal|null
condition|?
literal|0
else|:
name|this
operator|.
name|causeProxy
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
name|this
operator|.
name|commonElementCount
expr_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
operator|(
name|this
operator|.
name|extendedStackTrace
operator|==
literal|null
condition|?
literal|0
else|:
name|Arrays
operator|.
name|hashCode
argument_list|(
name|this
operator|.
name|extendedStackTrace
argument_list|)
operator|)
expr_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
operator|(
name|this
operator|.
name|suppressedProxies
operator|==
literal|null
condition|?
literal|0
else|:
name|Arrays
operator|.
name|hashCode
argument_list|(
name|this
operator|.
name|suppressedProxies
argument_list|)
operator|)
expr_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
operator|(
name|this
operator|.
name|name
operator|==
literal|null
condition|?
literal|0
else|:
name|this
operator|.
name|name
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|ignoreElement
specifier|private
name|boolean
name|ignoreElement
parameter_list|(
specifier|final
name|StackTraceElement
name|element
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|ignorePackages
parameter_list|)
block|{
specifier|final
name|String
name|className
init|=
name|element
operator|.
name|getClassName
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|String
name|pkg
range|:
name|ignorePackages
control|)
block|{
if|if
condition|(
name|className
operator|.
name|startsWith
argument_list|(
name|pkg
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Loads classes not located via Reflection.getCallerClass.      *      * @param lastLoader      *        The ClassLoader that loaded the Class that called this Class.      * @param className      *        The name of the Class.      * @return The Class object for the Class or null if it could not be located.      */
DECL|method|loadClass
specifier|private
name|Class
argument_list|<
name|?
argument_list|>
name|loadClass
parameter_list|(
specifier|final
name|ClassLoader
name|lastLoader
parameter_list|,
specifier|final
name|String
name|className
parameter_list|)
block|{
comment|// XXX: this is overly complicated
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
decl_stmt|;
if|if
condition|(
name|lastLoader
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|clazz
operator|=
name|Loader
operator|.
name|initializeClass
argument_list|(
name|className
argument_list|,
name|lastLoader
argument_list|)
expr_stmt|;
if|if
condition|(
name|clazz
operator|!=
literal|null
condition|)
block|{
return|return
name|clazz
return|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|Throwable
name|ignore
parameter_list|)
block|{
comment|// Ignore exception.
block|}
block|}
try|try
block|{
name|clazz
operator|=
name|Loader
operator|.
name|loadClass
argument_list|(
name|className
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|ClassNotFoundException
name|ignored
parameter_list|)
block|{
return|return
name|initializeClass
argument_list|(
name|className
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|NoClassDefFoundError
name|ignored
parameter_list|)
block|{
return|return
name|initializeClass
argument_list|(
name|className
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|SecurityException
name|ignored
parameter_list|)
block|{
return|return
name|initializeClass
argument_list|(
name|className
argument_list|)
return|;
block|}
return|return
name|clazz
return|;
block|}
DECL|method|initializeClass
specifier|private
name|Class
argument_list|<
name|?
argument_list|>
name|initializeClass
parameter_list|(
specifier|final
name|String
name|className
parameter_list|)
block|{
try|try
block|{
return|return
name|Loader
operator|.
name|initializeClass
argument_list|(
name|className
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|ClassNotFoundException
name|ignore
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|NoClassDefFoundError
name|ignore
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|SecurityException
name|ignore
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/**      * Construct the CacheEntry from the Class's information.      *      * @param stackTraceElement      *        The stack trace element      * @param callerClass      *        The Class.      * @param exact      *        True if the class was obtained via Reflection.getCallerClass.      *      * @return The CacheEntry.      */
DECL|method|toCacheEntry
specifier|private
name|CacheEntry
name|toCacheEntry
parameter_list|(
specifier|final
name|StackTraceElement
name|stackTraceElement
parameter_list|,
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|callerClass
parameter_list|,
specifier|final
name|boolean
name|exact
parameter_list|)
block|{
name|String
name|location
init|=
literal|"?"
decl_stmt|;
name|String
name|version
init|=
literal|"?"
decl_stmt|;
name|ClassLoader
name|lastLoader
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|callerClass
operator|!=
literal|null
condition|)
block|{
try|try
block|{
specifier|final
name|CodeSource
name|source
init|=
name|callerClass
operator|.
name|getProtectionDomain
argument_list|()
operator|.
name|getCodeSource
argument_list|()
decl_stmt|;
if|if
condition|(
name|source
operator|!=
literal|null
condition|)
block|{
specifier|final
name|URL
name|locationURL
init|=
name|source
operator|.
name|getLocation
argument_list|()
decl_stmt|;
if|if
condition|(
name|locationURL
operator|!=
literal|null
condition|)
block|{
specifier|final
name|String
name|str
init|=
name|locationURL
operator|.
name|toString
argument_list|()
operator|.
name|replace
argument_list|(
literal|'\\'
argument_list|,
literal|'/'
argument_list|)
decl_stmt|;
name|int
name|index
init|=
name|str
operator|.
name|lastIndexOf
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|>=
literal|0
operator|&&
name|index
operator|==
name|str
operator|.
name|length
argument_list|()
operator|-
literal|1
condition|)
block|{
name|index
operator|=
name|str
operator|.
name|lastIndexOf
argument_list|(
literal|"/"
argument_list|,
name|index
operator|-
literal|1
argument_list|)
expr_stmt|;
name|location
operator|=
name|str
operator|.
name|substring
argument_list|(
name|index
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|location
operator|=
name|str
operator|.
name|substring
argument_list|(
name|index
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|ex
parameter_list|)
block|{
comment|// Ignore the exception.
block|}
specifier|final
name|Package
name|pkg
init|=
name|callerClass
operator|.
name|getPackage
argument_list|()
decl_stmt|;
if|if
condition|(
name|pkg
operator|!=
literal|null
condition|)
block|{
specifier|final
name|String
name|ver
init|=
name|pkg
operator|.
name|getImplementationVersion
argument_list|()
decl_stmt|;
if|if
condition|(
name|ver
operator|!=
literal|null
condition|)
block|{
name|version
operator|=
name|ver
expr_stmt|;
block|}
block|}
name|lastLoader
operator|=
name|callerClass
operator|.
name|getClassLoader
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|CacheEntry
argument_list|(
operator|new
name|ExtendedClassInfo
argument_list|(
name|exact
argument_list|,
name|location
argument_list|,
name|version
argument_list|)
argument_list|,
name|lastLoader
argument_list|)
return|;
block|}
comment|/**      * Resolve all the stack entries in this stack trace that are not common with the parent.      *      * @param stack      *        The callers Class stack.      * @param map      *        The cache of CacheEntry objects.      * @param rootTrace      *        The first stack trace resolve or null.      * @param stackTrace      *        The stack trace being resolved.      * @return The StackTracePackageElement array.      */
DECL|method|toExtendedStackTrace
name|ExtendedStackTraceElement
index|[]
name|toExtendedStackTrace
parameter_list|(
specifier|final
name|Stack
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|stack
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|CacheEntry
argument_list|>
name|map
parameter_list|,
specifier|final
name|StackTraceElement
index|[]
name|rootTrace
parameter_list|,
specifier|final
name|StackTraceElement
index|[]
name|stackTrace
parameter_list|)
block|{
name|int
name|stackLength
decl_stmt|;
if|if
condition|(
name|rootTrace
operator|!=
literal|null
condition|)
block|{
name|int
name|rootIndex
init|=
name|rootTrace
operator|.
name|length
operator|-
literal|1
decl_stmt|;
name|int
name|stackIndex
init|=
name|stackTrace
operator|.
name|length
operator|-
literal|1
decl_stmt|;
while|while
condition|(
name|rootIndex
operator|>=
literal|0
operator|&&
name|stackIndex
operator|>=
literal|0
operator|&&
name|rootTrace
index|[
name|rootIndex
index|]
operator|.
name|equals
argument_list|(
name|stackTrace
index|[
name|stackIndex
index|]
argument_list|)
condition|)
block|{
operator|--
name|rootIndex
expr_stmt|;
operator|--
name|stackIndex
expr_stmt|;
block|}
name|this
operator|.
name|commonElementCount
operator|=
name|stackTrace
operator|.
name|length
operator|-
literal|1
operator|-
name|stackIndex
expr_stmt|;
name|stackLength
operator|=
name|stackIndex
operator|+
literal|1
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|commonElementCount
operator|=
literal|0
expr_stmt|;
name|stackLength
operator|=
name|stackTrace
operator|.
name|length
expr_stmt|;
block|}
specifier|final
name|ExtendedStackTraceElement
index|[]
name|extStackTrace
init|=
operator|new
name|ExtendedStackTraceElement
index|[
name|stackLength
index|]
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
init|=
name|stack
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|stack
operator|.
name|peek
argument_list|()
decl_stmt|;
name|ClassLoader
name|lastLoader
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|stackLength
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
operator|--
name|i
control|)
block|{
specifier|final
name|StackTraceElement
name|stackTraceElement
init|=
name|stackTrace
index|[
name|i
index|]
decl_stmt|;
specifier|final
name|String
name|className
init|=
name|stackTraceElement
operator|.
name|getClassName
argument_list|()
decl_stmt|;
comment|// The stack returned from getCurrentStack may be missing entries for java.lang.reflect.Method.invoke()
comment|// and its implementation. The Throwable might also contain stack entries that are no longer
comment|// present as those methods have returned.
name|ExtendedClassInfo
name|extClassInfo
decl_stmt|;
if|if
condition|(
name|clazz
operator|!=
literal|null
operator|&&
name|className
operator|.
name|equals
argument_list|(
name|clazz
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
specifier|final
name|CacheEntry
name|entry
init|=
name|this
operator|.
name|toCacheEntry
argument_list|(
name|stackTraceElement
argument_list|,
name|clazz
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|extClassInfo
operator|=
name|entry
operator|.
name|element
expr_stmt|;
name|lastLoader
operator|=
name|entry
operator|.
name|loader
expr_stmt|;
name|stack
operator|.
name|pop
argument_list|()
expr_stmt|;
name|clazz
operator|=
name|stack
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|stack
operator|.
name|peek
argument_list|()
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|CacheEntry
name|cacheEntry
init|=
name|map
operator|.
name|get
argument_list|(
name|className
argument_list|)
decl_stmt|;
if|if
condition|(
name|cacheEntry
operator|!=
literal|null
condition|)
block|{
specifier|final
name|CacheEntry
name|entry
init|=
name|cacheEntry
decl_stmt|;
name|extClassInfo
operator|=
name|entry
operator|.
name|element
expr_stmt|;
if|if
condition|(
name|entry
operator|.
name|loader
operator|!=
literal|null
condition|)
block|{
name|lastLoader
operator|=
name|entry
operator|.
name|loader
expr_stmt|;
block|}
block|}
else|else
block|{
specifier|final
name|CacheEntry
name|entry
init|=
name|this
operator|.
name|toCacheEntry
argument_list|(
name|stackTraceElement
argument_list|,
name|this
operator|.
name|loadClass
argument_list|(
name|lastLoader
argument_list|,
name|className
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|extClassInfo
operator|=
name|entry
operator|.
name|element
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|stackTraceElement
operator|.
name|toString
argument_list|()
argument_list|,
name|entry
argument_list|)
expr_stmt|;
if|if
condition|(
name|entry
operator|.
name|loader
operator|!=
literal|null
condition|)
block|{
name|lastLoader
operator|=
name|entry
operator|.
name|loader
expr_stmt|;
block|}
block|}
block|}
name|extStackTrace
index|[
name|i
index|]
operator|=
operator|new
name|ExtendedStackTraceElement
argument_list|(
name|stackTraceElement
argument_list|,
name|extClassInfo
argument_list|)
expr_stmt|;
block|}
return|return
name|extStackTrace
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
specifier|final
name|String
name|msg
init|=
name|this
operator|.
name|message
decl_stmt|;
return|return
name|msg
operator|!=
literal|null
condition|?
name|this
operator|.
name|name
operator|+
literal|": "
operator|+
name|msg
else|:
name|this
operator|.
name|name
return|;
block|}
DECL|method|toSuppressedProxies
specifier|private
name|ThrowableProxy
index|[]
name|toSuppressedProxies
parameter_list|(
specifier|final
name|Throwable
name|thrown
parameter_list|,
name|Set
argument_list|<
name|Throwable
argument_list|>
name|suppressedVisited
parameter_list|)
block|{
try|try
block|{
specifier|final
name|Throwable
index|[]
name|suppressed
init|=
name|thrown
operator|.
name|getSuppressed
argument_list|()
decl_stmt|;
if|if
condition|(
name|suppressed
operator|==
literal|null
condition|)
block|{
return|return
name|EMPTY_THROWABLE_PROXY_ARRAY
return|;
block|}
specifier|final
name|List
argument_list|<
name|ThrowableProxy
argument_list|>
name|proxies
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|suppressed
operator|.
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
name|suppressedVisited
operator|==
literal|null
condition|)
block|{
name|suppressedVisited
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|proxies
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|suppressed
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|Throwable
name|candidate
init|=
name|suppressed
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|suppressedVisited
operator|.
name|contains
argument_list|(
name|candidate
argument_list|)
condition|)
block|{
name|suppressedVisited
operator|.
name|add
argument_list|(
name|candidate
argument_list|)
expr_stmt|;
name|proxies
operator|.
name|add
argument_list|(
operator|new
name|ThrowableProxy
argument_list|(
name|candidate
argument_list|,
name|suppressedVisited
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|proxies
operator|.
name|toArray
argument_list|(
operator|new
name|ThrowableProxy
index|[
name|proxies
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
name|StatusLogger
operator|.
name|getLogger
argument_list|()
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

