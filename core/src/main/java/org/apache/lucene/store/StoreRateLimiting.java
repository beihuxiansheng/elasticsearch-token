begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.store
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|RateLimiter
operator|.
name|SimpleRateLimiter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|ByteSizeValue
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
DECL|class|StoreRateLimiting
specifier|public
class|class
name|StoreRateLimiting
block|{
DECL|interface|Provider
specifier|public
interface|interface
name|Provider
block|{
DECL|method|rateLimiting
name|StoreRateLimiting
name|rateLimiting
parameter_list|()
function_decl|;
block|}
DECL|interface|Listener
specifier|public
interface|interface
name|Listener
block|{
DECL|method|onPause
name|void
name|onPause
parameter_list|(
name|long
name|nanos
parameter_list|)
function_decl|;
block|}
DECL|enum|Type
specifier|public
enum|enum
name|Type
block|{
DECL|enum constant|NONE
name|NONE
block|,
DECL|enum constant|MERGE
name|MERGE
block|,
DECL|enum constant|ALL
name|ALL
block|;
DECL|method|fromString
specifier|public
specifier|static
name|Type
name|fromString
parameter_list|(
name|String
name|type
parameter_list|)
block|{
if|if
condition|(
literal|"none"
operator|.
name|equalsIgnoreCase
argument_list|(
name|type
argument_list|)
condition|)
block|{
return|return
name|NONE
return|;
block|}
elseif|else
if|if
condition|(
literal|"merge"
operator|.
name|equalsIgnoreCase
argument_list|(
name|type
argument_list|)
condition|)
block|{
return|return
name|MERGE
return|;
block|}
elseif|else
if|if
condition|(
literal|"all"
operator|.
name|equalsIgnoreCase
argument_list|(
name|type
argument_list|)
condition|)
block|{
return|return
name|ALL
return|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"rate limiting type ["
operator|+
name|type
operator|+
literal|"] not valid, can be one of [all|merge|none]"
argument_list|)
throw|;
block|}
block|}
DECL|field|rateLimiter
specifier|private
specifier|final
name|SimpleRateLimiter
name|rateLimiter
init|=
operator|new
name|SimpleRateLimiter
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|actualRateLimiter
specifier|private
specifier|volatile
name|SimpleRateLimiter
name|actualRateLimiter
decl_stmt|;
DECL|field|type
specifier|private
specifier|volatile
name|Type
name|type
decl_stmt|;
DECL|method|StoreRateLimiting
specifier|public
name|StoreRateLimiting
parameter_list|()
block|{      }
annotation|@
name|Nullable
DECL|method|getRateLimiter
specifier|public
name|RateLimiter
name|getRateLimiter
parameter_list|()
block|{
return|return
name|actualRateLimiter
return|;
block|}
DECL|method|setMaxRate
specifier|public
name|void
name|setMaxRate
parameter_list|(
name|ByteSizeValue
name|rate
parameter_list|)
block|{
if|if
condition|(
name|rate
operator|.
name|getBytes
argument_list|()
operator|<=
literal|0
condition|)
block|{
name|actualRateLimiter
operator|=
literal|null
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|actualRateLimiter
operator|==
literal|null
condition|)
block|{
name|actualRateLimiter
operator|=
name|rateLimiter
expr_stmt|;
name|actualRateLimiter
operator|.
name|setMBPerSec
argument_list|(
name|rate
operator|.
name|getMbFrac
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
assert|assert
name|rateLimiter
operator|==
name|actualRateLimiter
assert|;
name|rateLimiter
operator|.
name|setMBPerSec
argument_list|(
name|rate
operator|.
name|getMbFrac
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getType
specifier|public
name|Type
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
DECL|method|setType
specifier|public
name|void
name|setType
parameter_list|(
name|Type
name|type
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
DECL|method|setType
specifier|public
name|void
name|setType
parameter_list|(
name|String
name|type
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|Type
operator|.
name|fromString
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

