begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.analysis.synonym
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|synonym
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|Operations
operator|.
name|DEFAULT_MAX_DETERMINIZED_STATES
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|BytesTermAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|OffsetAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|PositionIncrementAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|PositionLengthAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|TermToBytesRefAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IntsRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|Automaton
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|FiniteStringsIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|Operations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|Transition
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Creates a list of {@link TokenStream} where each stream is the tokens that make up a finite string in graph token stream.  To do this,  * the graph token stream is converted to an {@link Automaton} and from there we use a {@link FiniteStringsIterator} to collect the various  * token streams for each finite string.  */
end_comment

begin_class
DECL|class|GraphTokenStreamFiniteStrings
specifier|public
class|class
name|GraphTokenStreamFiniteStrings
block|{
DECL|field|builder
specifier|private
specifier|final
name|Automaton
operator|.
name|Builder
name|builder
decl_stmt|;
DECL|field|det
name|Automaton
name|det
decl_stmt|;
DECL|field|termToID
specifier|private
specifier|final
name|Map
argument_list|<
name|BytesRef
argument_list|,
name|Integer
argument_list|>
name|termToID
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|idToTerm
specifier|private
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|BytesRef
argument_list|>
name|idToTerm
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|anyTermID
specifier|private
name|int
name|anyTermID
init|=
operator|-
literal|1
decl_stmt|;
DECL|method|GraphTokenStreamFiniteStrings
specifier|public
name|GraphTokenStreamFiniteStrings
parameter_list|()
block|{
name|this
operator|.
name|builder
operator|=
operator|new
name|Automaton
operator|.
name|Builder
argument_list|()
expr_stmt|;
block|}
DECL|class|BytesRefArrayTokenStream
specifier|private
specifier|static
class|class
name|BytesRefArrayTokenStream
extends|extends
name|TokenStream
block|{
DECL|field|termAtt
specifier|private
specifier|final
name|BytesTermAttribute
name|termAtt
init|=
name|addAttribute
argument_list|(
name|BytesTermAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|terms
specifier|private
specifier|final
name|BytesRef
index|[]
name|terms
decl_stmt|;
DECL|field|offset
specifier|private
name|int
name|offset
decl_stmt|;
DECL|method|BytesRefArrayTokenStream
name|BytesRefArrayTokenStream
parameter_list|(
name|BytesRef
index|[]
name|terms
parameter_list|)
block|{
name|this
operator|.
name|terms
operator|=
name|terms
expr_stmt|;
name|offset
operator|=
literal|0
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|incrementToken
specifier|public
name|boolean
name|incrementToken
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|offset
operator|<
name|terms
operator|.
name|length
condition|)
block|{
name|clearAttributes
argument_list|()
expr_stmt|;
name|termAtt
operator|.
name|setBytesRef
argument_list|(
name|terms
index|[
name|offset
index|]
argument_list|)
expr_stmt|;
name|offset
operator|=
name|offset
operator|+
literal|1
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
comment|/**      * Gets      */
DECL|method|getTokenStreams
specifier|public
name|List
argument_list|<
name|TokenStream
argument_list|>
name|getTokenStreams
parameter_list|(
specifier|final
name|TokenStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
comment|// build automation
name|build
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|TokenStream
argument_list|>
name|tokenStreams
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|FiniteStringsIterator
name|finiteStrings
init|=
operator|new
name|FiniteStringsIterator
argument_list|(
name|det
argument_list|)
decl_stmt|;
for|for
control|(
name|IntsRef
name|string
init|;
operator|(
name|string
operator|=
name|finiteStrings
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|;
control|)
block|{
specifier|final
name|BytesRef
index|[]
name|tokens
init|=
operator|new
name|BytesRef
index|[
name|string
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
name|string
operator|.
name|offset
init|,
name|len
init|=
name|string
operator|.
name|offset
operator|+
name|string
operator|.
name|length
init|;
name|idx
operator|<
name|len
condition|;
name|idx
operator|++
control|)
block|{
name|tokens
index|[
name|idx
operator|-
name|string
operator|.
name|offset
index|]
operator|=
name|idToTerm
operator|.
name|get
argument_list|(
name|string
operator|.
name|ints
index|[
name|idx
index|]
argument_list|)
expr_stmt|;
block|}
name|tokenStreams
operator|.
name|add
argument_list|(
operator|new
name|BytesRefArrayTokenStream
argument_list|(
name|tokens
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|tokenStreams
return|;
block|}
DECL|method|build
specifier|private
name|void
name|build
parameter_list|(
specifier|final
name|TokenStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|det
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Automation already built"
argument_list|)
throw|;
block|}
specifier|final
name|TermToBytesRefAttribute
name|termBytesAtt
init|=
name|in
operator|.
name|addAttribute
argument_list|(
name|TermToBytesRefAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|PositionIncrementAttribute
name|posIncAtt
init|=
name|in
operator|.
name|addAttribute
argument_list|(
name|PositionIncrementAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|PositionLengthAttribute
name|posLengthAtt
init|=
name|in
operator|.
name|addAttribute
argument_list|(
name|PositionLengthAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|OffsetAttribute
name|offsetAtt
init|=
name|in
operator|.
name|addAttribute
argument_list|(
name|OffsetAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
name|in
operator|.
name|reset
argument_list|()
expr_stmt|;
name|int
name|pos
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|lastPos
init|=
literal|0
decl_stmt|;
name|int
name|maxOffset
init|=
literal|0
decl_stmt|;
name|int
name|maxPos
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|state
init|=
operator|-
literal|1
decl_stmt|;
while|while
condition|(
name|in
operator|.
name|incrementToken
argument_list|()
condition|)
block|{
name|int
name|posInc
init|=
name|posIncAtt
operator|.
name|getPositionIncrement
argument_list|()
decl_stmt|;
assert|assert
name|pos
operator|>
operator|-
literal|1
operator|||
name|posInc
operator|>
literal|0
assert|;
if|if
condition|(
name|posInc
operator|>
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"cannot handle holes; to accept any term, use '*' term"
argument_list|)
throw|;
block|}
if|if
condition|(
name|posInc
operator|>
literal|0
condition|)
block|{
comment|// New node:
name|pos
operator|+=
name|posInc
expr_stmt|;
block|}
name|int
name|endPos
init|=
name|pos
operator|+
name|posLengthAtt
operator|.
name|getPositionLength
argument_list|()
decl_stmt|;
while|while
condition|(
name|state
operator|<
name|endPos
condition|)
block|{
name|state
operator|=
name|createState
argument_list|()
expr_stmt|;
block|}
name|BytesRef
name|term
init|=
name|termBytesAtt
operator|.
name|getBytesRef
argument_list|()
decl_stmt|;
comment|//System.out.println(pos + "-" + endPos + ": " + term.utf8ToString() + ": posInc=" + posInc);
if|if
condition|(
name|term
operator|.
name|length
operator|==
literal|1
operator|&&
name|term
operator|.
name|bytes
index|[
name|term
operator|.
name|offset
index|]
operator|==
operator|(
name|byte
operator|)
literal|'*'
condition|)
block|{
name|addAnyTransition
argument_list|(
name|pos
argument_list|,
name|endPos
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|addTransition
argument_list|(
name|pos
argument_list|,
name|endPos
argument_list|,
name|term
argument_list|)
expr_stmt|;
block|}
name|maxOffset
operator|=
name|Math
operator|.
name|max
argument_list|(
name|maxOffset
argument_list|,
name|offsetAtt
operator|.
name|endOffset
argument_list|()
argument_list|)
expr_stmt|;
name|maxPos
operator|=
name|Math
operator|.
name|max
argument_list|(
name|maxPos
argument_list|,
name|endPos
argument_list|)
expr_stmt|;
block|}
name|in
operator|.
name|end
argument_list|()
expr_stmt|;
comment|// TODO: look at endOffset?  ts2a did...
comment|// TODO: this (setting "last" state as the only accept state) may be too simplistic?
name|setAccept
argument_list|(
name|state
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|finish
argument_list|()
expr_stmt|;
block|}
comment|/**      * Returns a new state; state 0 is always the initial state.      */
DECL|method|createState
specifier|private
name|int
name|createState
parameter_list|()
block|{
return|return
name|builder
operator|.
name|createState
argument_list|()
return|;
block|}
comment|/**      * Marks the specified state as accept or not.      */
DECL|method|setAccept
specifier|private
name|void
name|setAccept
parameter_list|(
name|int
name|state
parameter_list|,
name|boolean
name|accept
parameter_list|)
block|{
name|builder
operator|.
name|setAccept
argument_list|(
name|state
argument_list|,
name|accept
argument_list|)
expr_stmt|;
block|}
comment|/**      * Adds a transition to the automaton.      */
DECL|method|addTransition
specifier|private
name|void
name|addTransition
parameter_list|(
name|int
name|source
parameter_list|,
name|int
name|dest
parameter_list|,
name|String
name|term
parameter_list|)
block|{
name|addTransition
argument_list|(
name|source
argument_list|,
name|dest
argument_list|,
operator|new
name|BytesRef
argument_list|(
name|term
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Adds a transition to the automaton.      */
DECL|method|addTransition
specifier|private
name|void
name|addTransition
parameter_list|(
name|int
name|source
parameter_list|,
name|int
name|dest
parameter_list|,
name|BytesRef
name|term
parameter_list|)
block|{
if|if
condition|(
name|term
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"term should not be null"
argument_list|)
throw|;
block|}
name|builder
operator|.
name|addTransition
argument_list|(
name|source
argument_list|,
name|dest
argument_list|,
name|getTermID
argument_list|(
name|term
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Adds a transition matching any term.      */
DECL|method|addAnyTransition
specifier|private
name|void
name|addAnyTransition
parameter_list|(
name|int
name|source
parameter_list|,
name|int
name|dest
parameter_list|)
block|{
name|builder
operator|.
name|addTransition
argument_list|(
name|source
argument_list|,
name|dest
argument_list|,
name|getTermID
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Call this once you are done adding states/transitions.      */
DECL|method|finish
specifier|private
name|void
name|finish
parameter_list|()
block|{
name|finish
argument_list|(
name|DEFAULT_MAX_DETERMINIZED_STATES
argument_list|)
expr_stmt|;
block|}
comment|/**      * Call this once you are done adding states/transitions.      *      * @param maxDeterminizedStates Maximum number of states created when determinizing the automaton.  Higher numbers allow this operation      *                              to consume more memory but allow more complex automatons.      */
DECL|method|finish
specifier|private
name|void
name|finish
parameter_list|(
name|int
name|maxDeterminizedStates
parameter_list|)
block|{
name|Automaton
name|automaton
init|=
name|builder
operator|.
name|finish
argument_list|()
decl_stmt|;
comment|// System.out.println("before det:\n" + automaton.toDot());
name|Transition
name|t
init|=
operator|new
name|Transition
argument_list|()
decl_stmt|;
comment|// TODO: should we add "eps back to initial node" for all states,
comment|// and det that?  then we don't need to revisit initial node at
comment|// every position?  but automaton could blow up?  And, this makes it
comment|// harder to skip useless positions at search time?
if|if
condition|(
name|anyTermID
operator|!=
operator|-
literal|1
condition|)
block|{
comment|// Make sure there are no leading or trailing ANY:
name|int
name|count
init|=
name|automaton
operator|.
name|initTransition
argument_list|(
literal|0
argument_list|,
name|t
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|automaton
operator|.
name|getNextTransition
argument_list|(
name|t
argument_list|)
expr_stmt|;
if|if
condition|(
name|anyTermID
operator|>=
name|t
operator|.
name|min
operator|&&
name|anyTermID
operator|<=
name|t
operator|.
name|max
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"automaton cannot lead with an ANY transition"
argument_list|)
throw|;
block|}
block|}
name|int
name|numStates
init|=
name|automaton
operator|.
name|getNumStates
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numStates
condition|;
name|i
operator|++
control|)
block|{
name|count
operator|=
name|automaton
operator|.
name|initTransition
argument_list|(
name|i
argument_list|,
name|t
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|count
condition|;
name|j
operator|++
control|)
block|{
name|automaton
operator|.
name|getNextTransition
argument_list|(
name|t
argument_list|)
expr_stmt|;
if|if
condition|(
name|automaton
operator|.
name|isAccept
argument_list|(
name|t
operator|.
name|dest
argument_list|)
operator|&&
name|anyTermID
operator|>=
name|t
operator|.
name|min
operator|&&
name|anyTermID
operator|<=
name|t
operator|.
name|max
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"automaton cannot end with an ANY transition"
argument_list|)
throw|;
block|}
block|}
block|}
name|int
name|termCount
init|=
name|termToID
operator|.
name|size
argument_list|()
decl_stmt|;
comment|// We have to carefully translate these transitions so automaton
comment|// realizes they also match all other terms:
name|Automaton
name|newAutomaton
init|=
operator|new
name|Automaton
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numStates
condition|;
name|i
operator|++
control|)
block|{
name|newAutomaton
operator|.
name|createState
argument_list|()
expr_stmt|;
name|newAutomaton
operator|.
name|setAccept
argument_list|(
name|i
argument_list|,
name|automaton
operator|.
name|isAccept
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numStates
condition|;
name|i
operator|++
control|)
block|{
name|count
operator|=
name|automaton
operator|.
name|initTransition
argument_list|(
name|i
argument_list|,
name|t
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|count
condition|;
name|j
operator|++
control|)
block|{
name|automaton
operator|.
name|getNextTransition
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|int
name|min
decl_stmt|,
name|max
decl_stmt|;
if|if
condition|(
name|t
operator|.
name|min
operator|<=
name|anyTermID
operator|&&
name|anyTermID
operator|<=
name|t
operator|.
name|max
condition|)
block|{
comment|// Match any term
name|min
operator|=
literal|0
expr_stmt|;
name|max
operator|=
name|termCount
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
name|min
operator|=
name|t
operator|.
name|min
expr_stmt|;
name|max
operator|=
name|t
operator|.
name|max
expr_stmt|;
block|}
name|newAutomaton
operator|.
name|addTransition
argument_list|(
name|t
operator|.
name|source
argument_list|,
name|t
operator|.
name|dest
argument_list|,
name|min
argument_list|,
name|max
argument_list|)
expr_stmt|;
block|}
block|}
name|newAutomaton
operator|.
name|finishState
argument_list|()
expr_stmt|;
name|automaton
operator|=
name|newAutomaton
expr_stmt|;
block|}
name|det
operator|=
name|Operations
operator|.
name|removeDeadStates
argument_list|(
name|Operations
operator|.
name|determinize
argument_list|(
name|automaton
argument_list|,
name|maxDeterminizedStates
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getTermID
specifier|private
name|int
name|getTermID
parameter_list|(
name|BytesRef
name|term
parameter_list|)
block|{
name|Integer
name|id
init|=
name|termToID
operator|.
name|get
argument_list|(
name|term
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|==
literal|null
condition|)
block|{
name|id
operator|=
name|termToID
operator|.
name|size
argument_list|()
expr_stmt|;
if|if
condition|(
name|term
operator|!=
literal|null
condition|)
block|{
name|term
operator|=
name|BytesRef
operator|.
name|deepCopyOf
argument_list|(
name|term
argument_list|)
expr_stmt|;
block|}
name|termToID
operator|.
name|put
argument_list|(
name|term
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|idToTerm
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|term
argument_list|)
expr_stmt|;
if|if
condition|(
name|term
operator|==
literal|null
condition|)
block|{
name|anyTermID
operator|=
name|id
expr_stmt|;
block|}
block|}
return|return
name|id
return|;
block|}
block|}
end_class

end_unit

