begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.document
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|NumericUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|SuppressForbidden
import|;
end_import

begin_comment
comment|/**  * Forked utility methods from Lucene's InetAddressPoint until LUCENE-7232 and  * LUCENE-7234 are released.  */
end_comment

begin_comment
comment|// TODO: remove me when we upgrade to Lucene 6.1
end_comment

begin_class
annotation|@
name|SuppressForbidden
argument_list|(
name|reason
operator|=
literal|"uses InetAddress.getHostAddress"
argument_list|)
DECL|class|XInetAddressPoint
specifier|public
specifier|final
class|class
name|XInetAddressPoint
block|{
DECL|method|XInetAddressPoint
specifier|private
name|XInetAddressPoint
parameter_list|()
block|{}
comment|/** The minimum value that an ip address can hold. */
DECL|field|MIN_VALUE
specifier|public
specifier|static
specifier|final
name|InetAddress
name|MIN_VALUE
decl_stmt|;
comment|/** The maximum value that an ip address can hold. */
DECL|field|MAX_VALUE
specifier|public
specifier|static
specifier|final
name|InetAddress
name|MAX_VALUE
decl_stmt|;
static|static
block|{
name|MIN_VALUE
operator|=
name|InetAddressPoint
operator|.
name|decode
argument_list|(
operator|new
name|byte
index|[
name|InetAddressPoint
operator|.
name|BYTES
index|]
argument_list|)
expr_stmt|;
name|byte
index|[]
name|maxValueBytes
init|=
operator|new
name|byte
index|[
name|InetAddressPoint
operator|.
name|BYTES
index|]
decl_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|maxValueBytes
argument_list|,
operator|(
name|byte
operator|)
literal|0xFF
argument_list|)
expr_stmt|;
name|MAX_VALUE
operator|=
name|InetAddressPoint
operator|.
name|decode
argument_list|(
name|maxValueBytes
argument_list|)
expr_stmt|;
block|}
comment|/**      * Return the {@link InetAddress} that compares immediately greater than      * {@code address}.      * @throws ArithmeticException if the provided address is the      *              {@link #MAX_VALUE maximum ip address}      */
DECL|method|nextUp
specifier|public
specifier|static
name|InetAddress
name|nextUp
parameter_list|(
name|InetAddress
name|address
parameter_list|)
block|{
if|if
condition|(
name|address
operator|.
name|equals
argument_list|(
name|MAX_VALUE
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ArithmeticException
argument_list|(
literal|"Overflow: there is no greater InetAddress than "
operator|+
name|address
operator|.
name|getHostAddress
argument_list|()
argument_list|)
throw|;
block|}
name|byte
index|[]
name|delta
init|=
operator|new
name|byte
index|[
name|InetAddressPoint
operator|.
name|BYTES
index|]
decl_stmt|;
name|delta
index|[
name|InetAddressPoint
operator|.
name|BYTES
operator|-
literal|1
index|]
operator|=
literal|1
expr_stmt|;
name|byte
index|[]
name|nextUpBytes
init|=
operator|new
name|byte
index|[
name|InetAddressPoint
operator|.
name|BYTES
index|]
decl_stmt|;
name|NumericUtils
operator|.
name|add
argument_list|(
name|InetAddressPoint
operator|.
name|BYTES
argument_list|,
literal|0
argument_list|,
name|InetAddressPoint
operator|.
name|encode
argument_list|(
name|address
argument_list|)
argument_list|,
name|delta
argument_list|,
name|nextUpBytes
argument_list|)
expr_stmt|;
return|return
name|InetAddressPoint
operator|.
name|decode
argument_list|(
name|nextUpBytes
argument_list|)
return|;
block|}
comment|/**      * Return the {@link InetAddress} that compares immediately less than      * {@code address}.      * @throws ArithmeticException if the provided address is the      *              {@link #MIN_VALUE minimum ip address}      */
DECL|method|nextDown
specifier|public
specifier|static
name|InetAddress
name|nextDown
parameter_list|(
name|InetAddress
name|address
parameter_list|)
block|{
if|if
condition|(
name|address
operator|.
name|equals
argument_list|(
name|MIN_VALUE
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ArithmeticException
argument_list|(
literal|"Underflow: there is no smaller InetAddress than "
operator|+
name|address
operator|.
name|getHostAddress
argument_list|()
argument_list|)
throw|;
block|}
name|byte
index|[]
name|delta
init|=
operator|new
name|byte
index|[
name|InetAddressPoint
operator|.
name|BYTES
index|]
decl_stmt|;
name|delta
index|[
name|InetAddressPoint
operator|.
name|BYTES
operator|-
literal|1
index|]
operator|=
literal|1
expr_stmt|;
name|byte
index|[]
name|nextDownBytes
init|=
operator|new
name|byte
index|[
name|InetAddressPoint
operator|.
name|BYTES
index|]
decl_stmt|;
name|NumericUtils
operator|.
name|subtract
argument_list|(
name|InetAddressPoint
operator|.
name|BYTES
argument_list|,
literal|0
argument_list|,
name|InetAddressPoint
operator|.
name|encode
argument_list|(
name|address
argument_list|)
argument_list|,
name|delta
argument_list|,
name|nextDownBytes
argument_list|)
expr_stmt|;
return|return
name|InetAddressPoint
operator|.
name|decode
argument_list|(
name|nextDownBytes
argument_list|)
return|;
block|}
comment|/**       * Create a prefix query for matching a CIDR network range.      *      * @param field field name. must not be {@code null}.      * @param value any host address      * @param prefixLength the network prefix length for this address. This is also known as the subnet mask in the context of IPv4      * addresses.      * @throws IllegalArgumentException if {@code field} is null, or prefixLength is invalid.      * @return a query matching documents with addresses contained within this network      */
comment|// TODO: remove me when we upgrade to Lucene 6.0.1
DECL|method|newPrefixQuery
specifier|public
specifier|static
name|Query
name|newPrefixQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|InetAddress
name|value
parameter_list|,
name|int
name|prefixLength
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"InetAddress must not be null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|prefixLength
argument_list|<
literal|0
operator|||
name|prefixLength
argument_list|>
literal|8
operator|*
name|value
operator|.
name|getAddress
argument_list|()
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"illegal prefixLength '"
operator|+
name|prefixLength
operator|+
literal|"'. Must be 0-32 for IPv4 ranges, 0-128 for IPv6 ranges"
argument_list|)
throw|;
block|}
comment|// create the lower value by zeroing out the host portion, upper value by filling it with all ones.
name|byte
name|lower
index|[]
init|=
name|value
operator|.
name|getAddress
argument_list|()
decl_stmt|;
name|byte
name|upper
index|[]
init|=
name|value
operator|.
name|getAddress
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|prefixLength
init|;
name|i
operator|<
literal|8
operator|*
name|lower
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|int
name|m
init|=
literal|1
operator|<<
operator|(
literal|7
operator|-
operator|(
name|i
operator|&
literal|7
operator|)
operator|)
decl_stmt|;
name|lower
index|[
name|i
operator|>>
literal|3
index|]
operator|&=
operator|~
name|m
expr_stmt|;
name|upper
index|[
name|i
operator|>>
literal|3
index|]
operator||=
name|m
expr_stmt|;
block|}
try|try
block|{
return|return
name|InetAddressPoint
operator|.
name|newRangeQuery
argument_list|(
name|field
argument_list|,
name|InetAddress
operator|.
name|getByAddress
argument_list|(
name|lower
argument_list|)
argument_list|,
name|InetAddress
operator|.
name|getByAddress
argument_list|(
name|upper
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|UnknownHostException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
name|e
argument_list|)
throw|;
comment|// values are coming from InetAddress
block|}
block|}
block|}
end_class

end_unit

