begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.search.grouping
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|grouping
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|FieldDoc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|ScoreDoc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Scorer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Sort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|SortField
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|SortField
operator|.
name|Type
operator|.
name|SCORE
import|;
end_import

begin_comment
comment|/**  * A collector that groups documents based on field values and returns {@link CollapseTopFieldDocs}  * output. The collapsing is done in a single pass by selecting only the top sorted document per collapse key.  * The value used for the collapse key of each group can be found in {@link CollapseTopFieldDocs#collapseValues}.  */
end_comment

begin_class
DECL|class|CollapsingTopDocsCollector
specifier|public
specifier|final
class|class
name|CollapsingTopDocsCollector
parameter_list|<
name|T
parameter_list|>
extends|extends
name|FirstPassGroupingCollector
argument_list|<
name|T
argument_list|>
block|{
DECL|field|collapseField
specifier|protected
specifier|final
name|String
name|collapseField
decl_stmt|;
DECL|field|sort
specifier|protected
specifier|final
name|Sort
name|sort
decl_stmt|;
DECL|field|scorer
specifier|protected
name|Scorer
name|scorer
decl_stmt|;
DECL|field|totalHitCount
specifier|private
name|int
name|totalHitCount
decl_stmt|;
DECL|field|maxScore
specifier|private
name|float
name|maxScore
decl_stmt|;
DECL|field|trackMaxScore
specifier|private
specifier|final
name|boolean
name|trackMaxScore
decl_stmt|;
DECL|method|CollapsingTopDocsCollector
name|CollapsingTopDocsCollector
parameter_list|(
name|GroupSelector
argument_list|<
name|T
argument_list|>
name|groupSelector
parameter_list|,
name|String
name|collapseField
parameter_list|,
name|Sort
name|sort
parameter_list|,
name|int
name|topN
parameter_list|,
name|boolean
name|trackMaxScore
parameter_list|)
block|{
name|super
argument_list|(
name|groupSelector
argument_list|,
name|sort
argument_list|,
name|topN
argument_list|)
expr_stmt|;
name|this
operator|.
name|collapseField
operator|=
name|collapseField
expr_stmt|;
name|this
operator|.
name|trackMaxScore
operator|=
name|trackMaxScore
expr_stmt|;
if|if
condition|(
name|trackMaxScore
condition|)
block|{
name|maxScore
operator|=
name|Float
operator|.
name|NEGATIVE_INFINITY
expr_stmt|;
block|}
else|else
block|{
name|maxScore
operator|=
name|Float
operator|.
name|NaN
expr_stmt|;
block|}
name|this
operator|.
name|sort
operator|=
name|sort
expr_stmt|;
block|}
comment|/**      * Transform {@link FirstPassGroupingCollector#getTopGroups(int, boolean)} output in      * {@link CollapseTopFieldDocs}. The collapsing needs only one pass so we can get the final top docs at the end      * of the first pass.      */
DECL|method|getTopDocs
specifier|public
name|CollapseTopFieldDocs
name|getTopDocs
parameter_list|()
throws|throws
name|IOException
block|{
name|Collection
argument_list|<
name|SearchGroup
argument_list|<
name|T
argument_list|>
argument_list|>
name|groups
init|=
name|super
operator|.
name|getTopGroups
argument_list|(
literal|0
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|groups
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|CollapseTopFieldDocs
argument_list|(
name|collapseField
argument_list|,
name|totalHitCount
argument_list|,
operator|new
name|ScoreDoc
index|[
literal|0
index|]
argument_list|,
name|sort
operator|.
name|getSort
argument_list|()
argument_list|,
operator|new
name|Object
index|[
literal|0
index|]
argument_list|,
name|Float
operator|.
name|NaN
argument_list|)
return|;
block|}
name|FieldDoc
index|[]
name|docs
init|=
operator|new
name|FieldDoc
index|[
name|groups
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|Object
index|[]
name|collapseValues
init|=
operator|new
name|Object
index|[
name|groups
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|scorePos
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|sort
operator|.
name|getSort
argument_list|()
operator|.
name|length
condition|;
name|index
operator|++
control|)
block|{
name|SortField
name|sortField
init|=
name|sort
operator|.
name|getSort
argument_list|()
index|[
name|index
index|]
decl_stmt|;
if|if
condition|(
name|sortField
operator|.
name|getType
argument_list|()
operator|==
name|SCORE
condition|)
block|{
name|scorePos
operator|=
name|index
expr_stmt|;
break|break;
block|}
block|}
name|int
name|pos
init|=
literal|0
decl_stmt|;
name|Iterator
argument_list|<
name|CollectedSearchGroup
argument_list|<
name|T
argument_list|>
argument_list|>
name|it
init|=
name|orderedGroups
operator|.
name|iterator
argument_list|()
decl_stmt|;
for|for
control|(
name|SearchGroup
argument_list|<
name|T
argument_list|>
name|group
range|:
name|groups
control|)
block|{
assert|assert
name|it
operator|.
name|hasNext
argument_list|()
assert|;
name|CollectedSearchGroup
argument_list|<
name|T
argument_list|>
name|col
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|float
name|score
init|=
name|Float
operator|.
name|NaN
decl_stmt|;
if|if
condition|(
name|scorePos
operator|!=
operator|-
literal|1
condition|)
block|{
name|score
operator|=
operator|(
name|float
operator|)
name|group
operator|.
name|sortValues
index|[
name|scorePos
index|]
expr_stmt|;
block|}
name|docs
index|[
name|pos
index|]
operator|=
operator|new
name|FieldDoc
argument_list|(
name|col
operator|.
name|topDoc
argument_list|,
name|score
argument_list|,
name|group
operator|.
name|sortValues
argument_list|)
expr_stmt|;
name|collapseValues
index|[
name|pos
index|]
operator|=
name|group
operator|.
name|groupValue
expr_stmt|;
name|pos
operator|++
expr_stmt|;
block|}
return|return
operator|new
name|CollapseTopFieldDocs
argument_list|(
name|collapseField
argument_list|,
name|totalHitCount
argument_list|,
name|docs
argument_list|,
name|sort
operator|.
name|getSort
argument_list|()
argument_list|,
name|collapseValues
argument_list|,
name|maxScore
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|needsScores
specifier|public
name|boolean
name|needsScores
parameter_list|()
block|{
if|if
condition|(
name|super
operator|.
name|needsScores
argument_list|()
operator|==
literal|false
condition|)
block|{
return|return
name|trackMaxScore
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|setScorer
specifier|public
name|void
name|setScorer
parameter_list|(
name|Scorer
name|scorer
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|setScorer
argument_list|(
name|scorer
argument_list|)
expr_stmt|;
name|this
operator|.
name|scorer
operator|=
name|scorer
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|collect
specifier|public
name|void
name|collect
parameter_list|(
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|collect
argument_list|(
name|doc
argument_list|)
expr_stmt|;
if|if
condition|(
name|trackMaxScore
condition|)
block|{
name|maxScore
operator|=
name|Math
operator|.
name|max
argument_list|(
name|maxScore
argument_list|,
name|scorer
operator|.
name|score
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|totalHitCount
operator|++
expr_stmt|;
block|}
comment|/**      * Create a collapsing top docs collector on a {@link org.apache.lucene.index.NumericDocValues} field.      * It accepts also {@link org.apache.lucene.index.SortedNumericDocValues} field but      * the collect will fail with an {@link IllegalStateException} if a document contains more than one value for the      * field.      *      * @param collapseField The sort field used to group      *                      documents.      * @param sort          The {@link Sort} used to sort the collapsed hits.      *                      The collapsing keeps only the top sorted document per collapsed key.      *                      This must be non-null, ie, if you want to groupSort by relevance      *                      use Sort.RELEVANCE.      * @param topN          How many top groups to keep.      */
DECL|method|createNumeric
specifier|public
specifier|static
name|CollapsingTopDocsCollector
argument_list|<
name|?
argument_list|>
name|createNumeric
parameter_list|(
name|String
name|collapseField
parameter_list|,
name|Sort
name|sort
parameter_list|,
name|int
name|topN
parameter_list|,
name|boolean
name|trackMaxScore
parameter_list|)
block|{
return|return
operator|new
name|CollapsingTopDocsCollector
argument_list|<>
argument_list|(
operator|new
name|CollapsingDocValuesSource
operator|.
name|Numeric
argument_list|(
name|collapseField
argument_list|)
argument_list|,
name|collapseField
argument_list|,
name|sort
argument_list|,
name|topN
argument_list|,
name|trackMaxScore
argument_list|)
return|;
block|}
comment|/**      * Create a collapsing top docs collector on a {@link org.apache.lucene.index.SortedDocValues} field.      * It accepts also {@link org.apache.lucene.index.SortedSetDocValues} field but      * the collect will fail with an {@link IllegalStateException} if a document contains more than one value for the      * field.      *      * @param collapseField The sort field used to group      *                      documents.      * @param sort          The {@link Sort} used to sort the collapsed hits. The collapsing keeps only the top sorted      *                      document per collapsed key.      *                      This must be non-null, ie, if you want to groupSort by relevance use Sort.RELEVANCE.      * @param topN          How many top groups to keep.      */
DECL|method|createKeyword
specifier|public
specifier|static
name|CollapsingTopDocsCollector
argument_list|<
name|?
argument_list|>
name|createKeyword
parameter_list|(
name|String
name|collapseField
parameter_list|,
name|Sort
name|sort
parameter_list|,
name|int
name|topN
parameter_list|,
name|boolean
name|trackMaxScore
parameter_list|)
block|{
return|return
operator|new
name|CollapsingTopDocsCollector
argument_list|<>
argument_list|(
operator|new
name|CollapsingDocValuesSource
operator|.
name|Keyword
argument_list|(
name|collapseField
argument_list|)
argument_list|,
name|collapseField
argument_list|,
name|sort
argument_list|,
name|topN
argument_list|,
name|trackMaxScore
argument_list|)
return|;
block|}
block|}
end_class

end_unit

