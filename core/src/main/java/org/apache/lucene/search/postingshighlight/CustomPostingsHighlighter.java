begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.search.postingshighlight
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|postingshighlight
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|highlight
operator|.
name|Snippet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|BreakIterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Subclass of the {@link PostingsHighlighter} that works for a single field in a single document.  * Uses a custom {@link PassageFormatter}. Accepts field content as a constructor argument, given that loading  * is custom and can be done reading from _source field. Supports using different {@link BreakIterator} to break  * the text into fragments. Considers every distinct field value as a discrete passage for highlighting (unless  * the whole content needs to be highlighted). Supports both returning empty snippets and non highlighted snippets  * when no highlighting can be performed.  *  * The use that we make of the postings highlighter is not optimal. It would be much better to highlight  * multiple docs in a single call, as we actually lose its sequential IO.  That would require to  * refactor the elasticsearch highlight api which currently works per hit.  */
end_comment

begin_class
DECL|class|CustomPostingsHighlighter
specifier|public
specifier|final
class|class
name|CustomPostingsHighlighter
extends|extends
name|PostingsHighlighter
block|{
DECL|field|EMPTY_SNIPPET
specifier|private
specifier|static
specifier|final
name|Snippet
index|[]
name|EMPTY_SNIPPET
init|=
operator|new
name|Snippet
index|[
literal|0
index|]
decl_stmt|;
DECL|field|EMPTY_PASSAGE
specifier|private
specifier|static
specifier|final
name|Passage
index|[]
name|EMPTY_PASSAGE
init|=
operator|new
name|Passage
index|[
literal|0
index|]
decl_stmt|;
DECL|field|analyzer
specifier|private
specifier|final
name|Analyzer
name|analyzer
decl_stmt|;
DECL|field|passageFormatter
specifier|private
specifier|final
name|CustomPassageFormatter
name|passageFormatter
decl_stmt|;
DECL|field|breakIterator
specifier|private
specifier|final
name|BreakIterator
name|breakIterator
decl_stmt|;
DECL|field|returnNonHighlightedSnippets
specifier|private
specifier|final
name|boolean
name|returnNonHighlightedSnippets
decl_stmt|;
DECL|field|fieldValue
specifier|private
specifier|final
name|String
name|fieldValue
decl_stmt|;
comment|/**      * Creates a new instance of {@link CustomPostingsHighlighter}      *      * @param analyzer the analyzer used for the field at index time, used for multi term queries internally      * @param passageFormatter our own {@link PassageFormatter} which generates snippets in forms of {@link Snippet} objects      * @param fieldValue the original field values as constructor argument, loaded from te _source field or the relevant stored field.      * @param returnNonHighlightedSnippets whether non highlighted snippets should be returned rather than empty snippets when      *                                     no highlighting can be performed      */
DECL|method|CustomPostingsHighlighter
specifier|public
name|CustomPostingsHighlighter
parameter_list|(
name|Analyzer
name|analyzer
parameter_list|,
name|CustomPassageFormatter
name|passageFormatter
parameter_list|,
name|String
name|fieldValue
parameter_list|,
name|boolean
name|returnNonHighlightedSnippets
parameter_list|)
block|{
name|this
argument_list|(
name|analyzer
argument_list|,
name|passageFormatter
argument_list|,
literal|null
argument_list|,
name|fieldValue
argument_list|,
name|returnNonHighlightedSnippets
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a new instance of {@link CustomPostingsHighlighter}      *      * @param analyzer the analyzer used for the field at index time, used for multi term queries internally      * @param passageFormatter our own {@link PassageFormatter} which generates snippets in forms of {@link Snippet} objects      * @param breakIterator an instance {@link BreakIterator} selected depending on the highlighting options      * @param fieldValue the original field values as constructor argument, loaded from te _source field or the relevant stored field.      * @param returnNonHighlightedSnippets whether non highlighted snippets should be returned rather than empty snippets when      *                                     no highlighting can be performed      */
DECL|method|CustomPostingsHighlighter
specifier|public
name|CustomPostingsHighlighter
parameter_list|(
name|Analyzer
name|analyzer
parameter_list|,
name|CustomPassageFormatter
name|passageFormatter
parameter_list|,
name|BreakIterator
name|breakIterator
parameter_list|,
name|String
name|fieldValue
parameter_list|,
name|boolean
name|returnNonHighlightedSnippets
parameter_list|)
block|{
name|this
operator|.
name|analyzer
operator|=
name|analyzer
expr_stmt|;
name|this
operator|.
name|passageFormatter
operator|=
name|passageFormatter
expr_stmt|;
name|this
operator|.
name|breakIterator
operator|=
name|breakIterator
expr_stmt|;
name|this
operator|.
name|returnNonHighlightedSnippets
operator|=
name|returnNonHighlightedSnippets
expr_stmt|;
name|this
operator|.
name|fieldValue
operator|=
name|fieldValue
expr_stmt|;
block|}
comment|/**      * Highlights terms extracted from the provided query within the content of the provided field name      */
DECL|method|highlightField
specifier|public
name|Snippet
index|[]
name|highlightField
parameter_list|(
name|String
name|field
parameter_list|,
name|Query
name|query
parameter_list|,
name|IndexSearcher
name|searcher
parameter_list|,
name|int
name|docId
parameter_list|,
name|int
name|maxPassages
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
index|[]
argument_list|>
name|fieldsAsObjects
init|=
name|super
operator|.
name|highlightFieldsAsObjects
argument_list|(
operator|new
name|String
index|[]
block|{
name|field
block|}
argument_list|,
name|query
argument_list|,
name|searcher
argument_list|,
operator|new
name|int
index|[]
block|{
name|docId
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
name|maxPassages
block|}
argument_list|)
decl_stmt|;
name|Object
index|[]
name|snippetObjects
init|=
name|fieldsAsObjects
operator|.
name|get
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|snippetObjects
operator|!=
literal|null
condition|)
block|{
comment|//one single document at a time
assert|assert
name|snippetObjects
operator|.
name|length
operator|==
literal|1
assert|;
name|Object
name|snippetObject
init|=
name|snippetObjects
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
name|snippetObject
operator|!=
literal|null
operator|&&
name|snippetObject
operator|instanceof
name|Snippet
index|[]
condition|)
block|{
return|return
operator|(
name|Snippet
index|[]
operator|)
name|snippetObject
return|;
block|}
block|}
return|return
name|EMPTY_SNIPPET
return|;
block|}
annotation|@
name|Override
DECL|method|getFormatter
specifier|protected
name|PassageFormatter
name|getFormatter
parameter_list|(
name|String
name|field
parameter_list|)
block|{
return|return
name|passageFormatter
return|;
block|}
annotation|@
name|Override
DECL|method|getBreakIterator
specifier|protected
name|BreakIterator
name|getBreakIterator
parameter_list|(
name|String
name|field
parameter_list|)
block|{
if|if
condition|(
name|breakIterator
operator|==
literal|null
condition|)
block|{
return|return
name|super
operator|.
name|getBreakIterator
argument_list|(
name|field
argument_list|)
return|;
block|}
return|return
name|breakIterator
return|;
block|}
comment|/*     By default the postings highlighter returns non highlighted snippet when there are no matches.     We want to return no snippets by default, unless no_match_size is greater than 0      */
annotation|@
name|Override
DECL|method|getEmptyHighlight
specifier|protected
name|Passage
index|[]
name|getEmptyHighlight
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|BreakIterator
name|bi
parameter_list|,
name|int
name|maxPassages
parameter_list|)
block|{
if|if
condition|(
name|returnNonHighlightedSnippets
condition|)
block|{
comment|//we want to return the first sentence of the first snippet only
return|return
name|super
operator|.
name|getEmptyHighlight
argument_list|(
name|fieldName
argument_list|,
name|bi
argument_list|,
literal|1
argument_list|)
return|;
block|}
return|return
name|EMPTY_PASSAGE
return|;
block|}
annotation|@
name|Override
DECL|method|getIndexAnalyzer
specifier|protected
name|Analyzer
name|getIndexAnalyzer
parameter_list|(
name|String
name|field
parameter_list|)
block|{
return|return
name|analyzer
return|;
block|}
annotation|@
name|Override
DECL|method|loadFieldValues
specifier|protected
name|String
index|[]
index|[]
name|loadFieldValues
parameter_list|(
name|IndexSearcher
name|searcher
parameter_list|,
name|String
index|[]
name|fields
parameter_list|,
name|int
index|[]
name|docids
parameter_list|,
name|int
name|maxLength
parameter_list|)
throws|throws
name|IOException
block|{
comment|//we only highlight one field, one document at a time
return|return
operator|new
name|String
index|[]
index|[]
block|{
operator|new
name|String
index|[]
block|{
name|fieldValue
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

