begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.search.grouping
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|grouping
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocValuesType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|NumericDocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SortedDocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SortedNumericDocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SortedSetDocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|AbstractNumericDocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|AbstractSortedDocValues
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_comment
comment|/**  * Utility class that ensures that a single collapse key is extracted per document.  */
end_comment

begin_class
DECL|class|CollapsingDocValuesSource
specifier|abstract
class|class
name|CollapsingDocValuesSource
parameter_list|<
name|T
parameter_list|>
extends|extends
name|GroupSelector
argument_list|<
name|T
argument_list|>
block|{
DECL|field|field
specifier|protected
specifier|final
name|String
name|field
decl_stmt|;
DECL|method|CollapsingDocValuesSource
name|CollapsingDocValuesSource
parameter_list|(
name|String
name|field
parameter_list|)
block|{
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setGroups
specifier|public
name|void
name|setGroups
parameter_list|(
name|Collection
argument_list|<
name|SearchGroup
argument_list|<
name|T
argument_list|>
argument_list|>
name|groups
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
comment|/**      * Implementation for {@link NumericDocValues} and {@link SortedNumericDocValues}.      * Fails with an {@link IllegalStateException} if a document contains multiple values for the specified field.      */
DECL|class|Numeric
specifier|static
class|class
name|Numeric
extends|extends
name|CollapsingDocValuesSource
argument_list|<
name|Long
argument_list|>
block|{
DECL|field|values
specifier|private
name|NumericDocValues
name|values
decl_stmt|;
DECL|field|value
specifier|private
name|long
name|value
decl_stmt|;
DECL|field|hasValue
specifier|private
name|boolean
name|hasValue
decl_stmt|;
DECL|method|Numeric
name|Numeric
parameter_list|(
name|String
name|field
parameter_list|)
block|{
name|super
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|advanceTo
specifier|public
name|State
name|advanceTo
parameter_list|(
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|values
operator|.
name|advanceExact
argument_list|(
name|doc
argument_list|)
condition|)
block|{
name|hasValue
operator|=
literal|true
expr_stmt|;
name|value
operator|=
name|values
operator|.
name|longValue
argument_list|()
expr_stmt|;
return|return
name|State
operator|.
name|ACCEPT
return|;
block|}
else|else
block|{
name|hasValue
operator|=
literal|false
expr_stmt|;
return|return
name|State
operator|.
name|SKIP
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|currentValue
specifier|public
name|Long
name|currentValue
parameter_list|()
block|{
return|return
name|hasValue
condition|?
name|value
else|:
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|copyValue
specifier|public
name|Long
name|copyValue
parameter_list|()
block|{
return|return
name|currentValue
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|setNextReader
specifier|public
name|void
name|setNextReader
parameter_list|(
name|LeafReaderContext
name|readerContext
parameter_list|)
throws|throws
name|IOException
block|{
name|LeafReader
name|reader
init|=
name|readerContext
operator|.
name|reader
argument_list|()
decl_stmt|;
name|DocValuesType
name|type
init|=
name|getDocValuesType
argument_list|(
name|reader
argument_list|,
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
operator|||
name|type
operator|==
name|DocValuesType
operator|.
name|NONE
condition|)
block|{
name|values
operator|=
name|DocValues
operator|.
name|emptyNumeric
argument_list|()
expr_stmt|;
return|return ;
block|}
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|NUMERIC
case|:
name|values
operator|=
name|DocValues
operator|.
name|getNumeric
argument_list|(
name|reader
argument_list|,
name|field
argument_list|)
expr_stmt|;
break|break;
case|case
name|SORTED_NUMERIC
case|:
specifier|final
name|SortedNumericDocValues
name|sorted
init|=
name|DocValues
operator|.
name|getSortedNumeric
argument_list|(
name|reader
argument_list|,
name|field
argument_list|)
decl_stmt|;
name|values
operator|=
name|DocValues
operator|.
name|unwrapSingleton
argument_list|(
name|sorted
argument_list|)
expr_stmt|;
if|if
condition|(
name|values
operator|==
literal|null
condition|)
block|{
name|values
operator|=
operator|new
name|AbstractNumericDocValues
argument_list|()
block|{
specifier|private
name|long
name|value
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|advanceExact
parameter_list|(
name|int
name|target
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|sorted
operator|.
name|advanceExact
argument_list|(
name|target
argument_list|)
condition|)
block|{
if|if
condition|(
name|sorted
operator|.
name|docValueCount
argument_list|()
operator|>
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"failed to collapse "
operator|+
name|target
operator|+
literal|", the collapse field must be single valued"
argument_list|)
throw|;
block|}
name|value
operator|=
name|sorted
operator|.
name|nextValue
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|docID
parameter_list|()
block|{
return|return
name|sorted
operator|.
name|docID
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|longValue
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|value
return|;
block|}
block|}
expr_stmt|;
block|}
break|break;
default|default:
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"unexpected doc values type "
operator|+
name|type
operator|+
literal|"` for field `"
operator|+
name|field
operator|+
literal|"`"
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**      * Implementation for {@link SortedDocValues} and {@link SortedSetDocValues}.      * Fails with an {@link IllegalStateException} if a document contains multiple values for the specified field.      */
DECL|class|Keyword
specifier|static
class|class
name|Keyword
extends|extends
name|CollapsingDocValuesSource
argument_list|<
name|BytesRef
argument_list|>
block|{
DECL|field|values
specifier|private
name|SortedDocValues
name|values
decl_stmt|;
DECL|field|ord
specifier|private
name|int
name|ord
decl_stmt|;
DECL|method|Keyword
name|Keyword
parameter_list|(
name|String
name|field
parameter_list|)
block|{
name|super
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|advanceTo
specifier|public
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|grouping
operator|.
name|GroupSelector
operator|.
name|State
name|advanceTo
parameter_list|(
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|values
operator|.
name|advanceExact
argument_list|(
name|doc
argument_list|)
condition|)
block|{
name|ord
operator|=
name|values
operator|.
name|ordValue
argument_list|()
expr_stmt|;
return|return
name|State
operator|.
name|ACCEPT
return|;
block|}
else|else
block|{
name|ord
operator|=
operator|-
literal|1
expr_stmt|;
return|return
name|State
operator|.
name|SKIP
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|currentValue
specifier|public
name|BytesRef
name|currentValue
parameter_list|()
block|{
if|if
condition|(
name|ord
operator|==
operator|-
literal|1
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
try|try
block|{
return|return
name|values
operator|.
name|lookupOrd
argument_list|(
name|ord
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|copyValue
specifier|public
name|BytesRef
name|copyValue
parameter_list|()
block|{
name|BytesRef
name|value
init|=
name|currentValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
name|BytesRef
operator|.
name|deepCopyOf
argument_list|(
name|value
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|setNextReader
specifier|public
name|void
name|setNextReader
parameter_list|(
name|LeafReaderContext
name|readerContext
parameter_list|)
throws|throws
name|IOException
block|{
name|LeafReader
name|reader
init|=
name|readerContext
operator|.
name|reader
argument_list|()
decl_stmt|;
name|DocValuesType
name|type
init|=
name|getDocValuesType
argument_list|(
name|reader
argument_list|,
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
operator|||
name|type
operator|==
name|DocValuesType
operator|.
name|NONE
condition|)
block|{
name|values
operator|=
name|DocValues
operator|.
name|emptySorted
argument_list|()
expr_stmt|;
return|return ;
block|}
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|SORTED
case|:
name|values
operator|=
name|DocValues
operator|.
name|getSorted
argument_list|(
name|reader
argument_list|,
name|field
argument_list|)
expr_stmt|;
break|break;
case|case
name|SORTED_SET
case|:
specifier|final
name|SortedSetDocValues
name|sorted
init|=
name|DocValues
operator|.
name|getSortedSet
argument_list|(
name|reader
argument_list|,
name|field
argument_list|)
decl_stmt|;
name|values
operator|=
name|DocValues
operator|.
name|unwrapSingleton
argument_list|(
name|sorted
argument_list|)
expr_stmt|;
if|if
condition|(
name|values
operator|==
literal|null
condition|)
block|{
name|values
operator|=
operator|new
name|AbstractSortedDocValues
argument_list|()
block|{
specifier|private
name|int
name|ord
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|advanceExact
parameter_list|(
name|int
name|target
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|sorted
operator|.
name|advanceExact
argument_list|(
name|target
argument_list|)
condition|)
block|{
name|ord
operator|=
operator|(
name|int
operator|)
name|sorted
operator|.
name|nextOrd
argument_list|()
expr_stmt|;
if|if
condition|(
name|sorted
operator|.
name|nextOrd
argument_list|()
operator|!=
name|SortedSetDocValues
operator|.
name|NO_MORE_ORDS
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"failed to collapse "
operator|+
name|target
operator|+
literal|", the collapse field must be single valued"
argument_list|)
throw|;
block|}
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|docID
parameter_list|()
block|{
return|return
name|sorted
operator|.
name|docID
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|ordValue
parameter_list|()
block|{
return|return
name|ord
return|;
block|}
annotation|@
name|Override
specifier|public
name|BytesRef
name|lookupOrd
parameter_list|(
name|int
name|ord
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|sorted
operator|.
name|lookupOrd
argument_list|(
name|ord
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getValueCount
parameter_list|()
block|{
return|return
operator|(
name|int
operator|)
name|sorted
operator|.
name|getValueCount
argument_list|()
return|;
block|}
block|}
expr_stmt|;
block|}
break|break;
default|default:
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"unexpected doc values type "
operator|+
name|type
operator|+
literal|"` for field `"
operator|+
name|field
operator|+
literal|"`"
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|getDocValuesType
specifier|private
specifier|static
name|DocValuesType
name|getDocValuesType
parameter_list|(
name|LeafReader
name|in
parameter_list|,
name|String
name|field
parameter_list|)
block|{
name|FieldInfo
name|fi
init|=
name|in
operator|.
name|getFieldInfos
argument_list|()
operator|.
name|fieldInfo
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|fi
operator|!=
literal|null
condition|)
block|{
return|return
name|fi
operator|.
name|getDocValuesType
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

