begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.search.uhighlight
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|uhighlight
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|BreakIterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|CharacterIterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_comment
comment|/**  * A custom break iterator that scans text to find break-delimited passages bounded by  * a provided maximum length. This class delegates the boundary search to a first level  * break iterator. When this break iterator finds a passage greater than the maximum length  * a secondary break iterator is used to re-split the passage at the first boundary after  * maximum length.  * This is useful to split passages created by {@link BreakIterator}s like `sentence` that  * can create big outliers on semi-structured text.  *  * WARNING: This break iterator is designed to work with the {@link UnifiedHighlighter}.  **/
end_comment

begin_class
DECL|class|BoundedBreakIteratorScanner
specifier|public
class|class
name|BoundedBreakIteratorScanner
extends|extends
name|BreakIterator
block|{
DECL|field|mainBreak
specifier|private
specifier|final
name|BreakIterator
name|mainBreak
decl_stmt|;
DECL|field|innerBreak
specifier|private
specifier|final
name|BreakIterator
name|innerBreak
decl_stmt|;
DECL|field|maxLen
specifier|private
specifier|final
name|int
name|maxLen
decl_stmt|;
DECL|field|lastPrecedingOffset
specifier|private
name|int
name|lastPrecedingOffset
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|windowStart
specifier|private
name|int
name|windowStart
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|windowEnd
specifier|private
name|int
name|windowEnd
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|innerStart
specifier|private
name|int
name|innerStart
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|innerEnd
specifier|private
name|int
name|innerEnd
init|=
literal|0
decl_stmt|;
DECL|method|BoundedBreakIteratorScanner
specifier|private
name|BoundedBreakIteratorScanner
parameter_list|(
name|BreakIterator
name|mainBreak
parameter_list|,
name|BreakIterator
name|innerBreak
parameter_list|,
name|int
name|maxLen
parameter_list|)
block|{
name|this
operator|.
name|mainBreak
operator|=
name|mainBreak
expr_stmt|;
name|this
operator|.
name|innerBreak
operator|=
name|innerBreak
expr_stmt|;
name|this
operator|.
name|maxLen
operator|=
name|maxLen
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getText
specifier|public
name|CharacterIterator
name|getText
parameter_list|()
block|{
return|return
name|mainBreak
operator|.
name|getText
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|setText
specifier|public
name|void
name|setText
parameter_list|(
name|CharacterIterator
name|newText
parameter_list|)
block|{
name|reset
argument_list|()
expr_stmt|;
name|mainBreak
operator|.
name|setText
argument_list|(
name|newText
argument_list|)
expr_stmt|;
name|innerBreak
operator|.
name|setText
argument_list|(
name|newText
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setText
specifier|public
name|void
name|setText
parameter_list|(
name|String
name|newText
parameter_list|)
block|{
name|reset
argument_list|()
expr_stmt|;
name|mainBreak
operator|.
name|setText
argument_list|(
name|newText
argument_list|)
expr_stmt|;
name|innerBreak
operator|.
name|setText
argument_list|(
name|newText
argument_list|)
expr_stmt|;
block|}
DECL|method|reset
specifier|private
name|void
name|reset
parameter_list|()
block|{
name|lastPrecedingOffset
operator|=
operator|-
literal|1
expr_stmt|;
name|windowStart
operator|=
operator|-
literal|1
expr_stmt|;
name|windowEnd
operator|=
operator|-
literal|1
expr_stmt|;
name|innerStart
operator|=
operator|-
literal|1
expr_stmt|;
name|innerEnd
operator|=
literal|0
expr_stmt|;
block|}
comment|/**      * Must be called with increasing offset. See {@link FieldHighlighter} for usage.      */
annotation|@
name|Override
DECL|method|preceding
specifier|public
name|int
name|preceding
parameter_list|(
name|int
name|offset
parameter_list|)
block|{
if|if
condition|(
name|offset
operator|<
name|lastPrecedingOffset
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"offset< lastPrecedingOffset: "
operator|+
literal|"usage doesn't look like UnifiedHighlighter"
argument_list|)
throw|;
block|}
if|if
condition|(
name|offset
operator|>
name|windowStart
operator|&&
name|offset
operator|<
name|windowEnd
condition|)
block|{
name|innerStart
operator|=
name|innerEnd
expr_stmt|;
name|innerEnd
operator|=
name|windowEnd
expr_stmt|;
block|}
else|else
block|{
name|windowStart
operator|=
name|innerStart
operator|=
name|mainBreak
operator|.
name|preceding
argument_list|(
name|offset
argument_list|)
expr_stmt|;
name|windowEnd
operator|=
name|innerEnd
operator|=
name|mainBreak
operator|.
name|following
argument_list|(
name|offset
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|innerEnd
operator|-
name|innerStart
operator|>
name|maxLen
condition|)
block|{
comment|// the current split is too big,
comment|// so starting from the current term we try to find boundaries on the left first
if|if
condition|(
name|offset
operator|-
name|maxLen
operator|>
name|innerStart
condition|)
block|{
name|innerStart
operator|=
name|Math
operator|.
name|max
argument_list|(
name|innerStart
argument_list|,
name|innerBreak
operator|.
name|preceding
argument_list|(
name|offset
operator|-
name|maxLen
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// and then we try to expand the passage to the right with the remaining size
name|int
name|remaining
init|=
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|maxLen
operator|-
operator|(
name|offset
operator|-
name|innerStart
operator|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|offset
operator|+
name|remaining
operator|<
name|windowEnd
condition|)
block|{
name|innerEnd
operator|=
name|Math
operator|.
name|min
argument_list|(
name|windowEnd
argument_list|,
name|innerBreak
operator|.
name|following
argument_list|(
name|offset
operator|+
name|remaining
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|lastPrecedingOffset
operator|=
name|offset
operator|-
literal|1
expr_stmt|;
return|return
name|innerStart
return|;
block|}
comment|/**      * Can be invoked only after a call to preceding(offset+1).      * See {@link FieldHighlighter} for usage.      */
annotation|@
name|Override
DECL|method|following
specifier|public
name|int
name|following
parameter_list|(
name|int
name|offset
parameter_list|)
block|{
if|if
condition|(
name|offset
operator|!=
name|lastPrecedingOffset
operator|||
name|innerEnd
operator|==
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"offset != lastPrecedingOffset: "
operator|+
literal|"usage doesn't look like UnifiedHighlighter"
argument_list|)
throw|;
block|}
return|return
name|innerEnd
return|;
block|}
comment|/**      * Returns a {@link BreakIterator#getSentenceInstance(Locale)} bounded to maxLen.      * Secondary boundaries are found using a {@link BreakIterator#getWordInstance(Locale)}.      */
DECL|method|getSentence
specifier|public
specifier|static
name|BreakIterator
name|getSentence
parameter_list|(
name|Locale
name|locale
parameter_list|,
name|int
name|maxLen
parameter_list|)
block|{
specifier|final
name|BreakIterator
name|sBreak
init|=
name|BreakIterator
operator|.
name|getSentenceInstance
argument_list|(
name|locale
argument_list|)
decl_stmt|;
specifier|final
name|BreakIterator
name|wBreak
init|=
name|BreakIterator
operator|.
name|getWordInstance
argument_list|(
name|locale
argument_list|)
decl_stmt|;
return|return
operator|new
name|BoundedBreakIteratorScanner
argument_list|(
name|sBreak
argument_list|,
name|wBreak
argument_list|,
name|maxLen
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|current
specifier|public
name|int
name|current
parameter_list|()
block|{
comment|// Returns the last offset of the current split
return|return
name|this
operator|.
name|innerEnd
return|;
block|}
annotation|@
name|Override
DECL|method|first
specifier|public
name|int
name|first
parameter_list|()
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"first() should not be called in this context"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|next
specifier|public
name|int
name|next
parameter_list|()
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"next() should not be called in this context"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|last
specifier|public
name|int
name|last
parameter_list|()
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"last() should not be called in this context"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|next
specifier|public
name|int
name|next
parameter_list|(
name|int
name|n
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"next(n) should not be called in this context"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|previous
specifier|public
name|int
name|previous
parameter_list|()
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"previous() should not be called in this context"
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

