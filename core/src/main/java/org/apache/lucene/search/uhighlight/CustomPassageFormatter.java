begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.search.uhighlight
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|uhighlight
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|highlight
operator|.
name|Encoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|fetch
operator|.
name|subphase
operator|.
name|highlight
operator|.
name|HighlightUtils
import|;
end_import

begin_comment
comment|/**  * Custom passage formatter that allows us to:  * 1) extract different snippets (instead of a single big string) together with their scores ({@link Snippet})  * 2) use the {@link Encoder} implementations that are already used with the other highlighters  */
end_comment

begin_class
DECL|class|CustomPassageFormatter
specifier|public
class|class
name|CustomPassageFormatter
extends|extends
name|PassageFormatter
block|{
DECL|field|preTag
specifier|private
specifier|final
name|String
name|preTag
decl_stmt|;
DECL|field|postTag
specifier|private
specifier|final
name|String
name|postTag
decl_stmt|;
DECL|field|encoder
specifier|private
specifier|final
name|Encoder
name|encoder
decl_stmt|;
DECL|method|CustomPassageFormatter
specifier|public
name|CustomPassageFormatter
parameter_list|(
name|String
name|preTag
parameter_list|,
name|String
name|postTag
parameter_list|,
name|Encoder
name|encoder
parameter_list|)
block|{
name|this
operator|.
name|preTag
operator|=
name|preTag
expr_stmt|;
name|this
operator|.
name|postTag
operator|=
name|postTag
expr_stmt|;
name|this
operator|.
name|encoder
operator|=
name|encoder
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|format
specifier|public
name|Snippet
index|[]
name|format
parameter_list|(
name|Passage
index|[]
name|passages
parameter_list|,
name|String
name|content
parameter_list|)
block|{
name|Snippet
index|[]
name|snippets
init|=
operator|new
name|Snippet
index|[
name|passages
operator|.
name|length
index|]
decl_stmt|;
name|int
name|pos
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|passages
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|Passage
name|passage
init|=
name|passages
index|[
name|j
index|]
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|pos
operator|=
name|passage
operator|.
name|getStartOffset
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|passage
operator|.
name|getNumMatches
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|int
name|start
init|=
name|passage
operator|.
name|getMatchStarts
argument_list|()
index|[
name|i
index|]
decl_stmt|;
name|int
name|end
init|=
name|passage
operator|.
name|getMatchEnds
argument_list|()
index|[
name|i
index|]
decl_stmt|;
comment|// its possible to have overlapping terms
if|if
condition|(
name|start
operator|>
name|pos
condition|)
block|{
name|append
argument_list|(
name|sb
argument_list|,
name|content
argument_list|,
name|pos
argument_list|,
name|start
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|end
operator|>
name|pos
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|preTag
argument_list|)
expr_stmt|;
name|append
argument_list|(
name|sb
argument_list|,
name|content
argument_list|,
name|Math
operator|.
name|max
argument_list|(
name|pos
argument_list|,
name|start
argument_list|)
argument_list|,
name|end
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|postTag
argument_list|)
expr_stmt|;
name|pos
operator|=
name|end
expr_stmt|;
block|}
block|}
comment|// its possible a "term" from the analyzer could span a sentence boundary.
name|append
argument_list|(
name|sb
argument_list|,
name|content
argument_list|,
name|pos
argument_list|,
name|Math
operator|.
name|max
argument_list|(
name|pos
argument_list|,
name|passage
operator|.
name|getEndOffset
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|//we remove the paragraph separator if present at the end of the snippet (we used it as separator between values)
if|if
condition|(
name|sb
operator|.
name|charAt
argument_list|(
name|sb
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|==
name|HighlightUtils
operator|.
name|PARAGRAPH_SEPARATOR
condition|)
block|{
name|sb
operator|.
name|deleteCharAt
argument_list|(
name|sb
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sb
operator|.
name|charAt
argument_list|(
name|sb
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|==
name|HighlightUtils
operator|.
name|NULL_SEPARATOR
condition|)
block|{
name|sb
operator|.
name|deleteCharAt
argument_list|(
name|sb
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
comment|//and we trim the snippets too
name|snippets
index|[
name|j
index|]
operator|=
operator|new
name|Snippet
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|,
name|passage
operator|.
name|getScore
argument_list|()
argument_list|,
name|passage
operator|.
name|getNumMatches
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
return|return
name|snippets
return|;
block|}
DECL|method|append
specifier|private
name|void
name|append
parameter_list|(
name|StringBuilder
name|dest
parameter_list|,
name|String
name|content
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
name|dest
operator|.
name|append
argument_list|(
name|encoder
operator|.
name|encodeText
argument_list|(
name|content
operator|.
name|substring
argument_list|(
name|start
argument_list|,
name|end
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

