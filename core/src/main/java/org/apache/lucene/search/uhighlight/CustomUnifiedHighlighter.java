begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.search.uhighlight
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|uhighlight
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|CommonTermsQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSetIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|PrefixQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|highlight
operator|.
name|Snippet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spans
operator|.
name|SpanMultiTermQueryWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spans
operator|.
name|SpanNearQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spans
operator|.
name|SpanOrQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spans
operator|.
name|SpanQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spans
operator|.
name|SpanTermQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|CharacterRunAutomaton
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|all
operator|.
name|AllTermQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|search
operator|.
name|MultiPhrasePrefixQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|search
operator|.
name|function
operator|.
name|FiltersFunctionScoreQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|search
operator|.
name|function
operator|.
name|FunctionScoreQuery
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|BreakIterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Subclass of the {@link UnifiedHighlighter} that works for a single field in a single document.  * Uses a custom {@link PassageFormatter}. Accepts field content as a constructor  * argument, given that loadings field value can be done reading from _source field.  * Supports using different {@link BreakIterator} to break the text into fragments. Considers every distinct field  * value as a discrete passage for highlighting (unless the whole content needs to be highlighted).  * Supports both returning empty snippets and non highlighted snippets when no highlighting can be performed.  */
end_comment

begin_class
DECL|class|CustomUnifiedHighlighter
specifier|public
class|class
name|CustomUnifiedHighlighter
extends|extends
name|UnifiedHighlighter
block|{
DECL|field|MULTIVAL_SEP_CHAR
specifier|public
specifier|static
specifier|final
name|char
name|MULTIVAL_SEP_CHAR
init|=
operator|(
name|char
operator|)
literal|0
decl_stmt|;
DECL|field|EMPTY_SNIPPET
specifier|private
specifier|static
specifier|final
name|Snippet
index|[]
name|EMPTY_SNIPPET
init|=
operator|new
name|Snippet
index|[
literal|0
index|]
decl_stmt|;
DECL|field|fieldValue
specifier|private
specifier|final
name|String
name|fieldValue
decl_stmt|;
DECL|field|passageFormatter
specifier|private
specifier|final
name|PassageFormatter
name|passageFormatter
decl_stmt|;
DECL|field|breakIterator
specifier|private
specifier|final
name|BreakIterator
name|breakIterator
decl_stmt|;
DECL|field|breakIteratorLocale
specifier|private
specifier|final
name|Locale
name|breakIteratorLocale
decl_stmt|;
DECL|field|noMatchSize
specifier|private
specifier|final
name|int
name|noMatchSize
decl_stmt|;
comment|/**      * Creates a new instance of {@link CustomUnifiedHighlighter}      *      * @param analyzer the analyzer used for the field at index time, used for multi term queries internally      * @param passageFormatter our own {@link CustomPassageFormatter}      *                    which generates snippets in forms of {@link Snippet} objects      * @param breakIteratorLocale the {@link Locale} to use for dividing text into passages.      *                    If null {@link Locale#ROOT} is used      * @param breakIterator the {@link BreakIterator} to use for dividing text into passages.      *                    If null {@link BreakIterator#getSentenceInstance(Locale)} is used.      * @param fieldValue the original field values delimited by MULTIVAL_SEP_CHAR      * @param noMatchSize The size of the text that should be returned when no highlighting can be performed      */
DECL|method|CustomUnifiedHighlighter
specifier|public
name|CustomUnifiedHighlighter
parameter_list|(
name|IndexSearcher
name|searcher
parameter_list|,
name|Analyzer
name|analyzer
parameter_list|,
name|PassageFormatter
name|passageFormatter
parameter_list|,
annotation|@
name|Nullable
name|Locale
name|breakIteratorLocale
parameter_list|,
annotation|@
name|Nullable
name|BreakIterator
name|breakIterator
parameter_list|,
name|String
name|fieldValue
parameter_list|,
name|int
name|noMatchSize
parameter_list|)
block|{
name|super
argument_list|(
name|searcher
argument_list|,
name|analyzer
argument_list|)
expr_stmt|;
name|this
operator|.
name|breakIterator
operator|=
name|breakIterator
expr_stmt|;
name|this
operator|.
name|breakIteratorLocale
operator|=
name|breakIteratorLocale
operator|==
literal|null
condition|?
name|Locale
operator|.
name|ROOT
else|:
name|breakIteratorLocale
expr_stmt|;
name|this
operator|.
name|passageFormatter
operator|=
name|passageFormatter
expr_stmt|;
name|this
operator|.
name|fieldValue
operator|=
name|fieldValue
expr_stmt|;
name|this
operator|.
name|noMatchSize
operator|=
name|noMatchSize
expr_stmt|;
block|}
comment|/**      * Highlights terms extracted from the provided query within the content of the provided field name      */
DECL|method|highlightField
specifier|public
name|Snippet
index|[]
name|highlightField
parameter_list|(
name|String
name|field
parameter_list|,
name|Query
name|query
parameter_list|,
name|int
name|docId
parameter_list|,
name|int
name|maxPassages
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
index|[]
argument_list|>
name|fieldsAsObjects
init|=
name|super
operator|.
name|highlightFieldsAsObjects
argument_list|(
operator|new
name|String
index|[]
block|{
name|field
block|}
argument_list|,
name|query
argument_list|,
operator|new
name|int
index|[]
block|{
name|docId
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
name|maxPassages
block|}
argument_list|)
decl_stmt|;
name|Object
index|[]
name|snippetObjects
init|=
name|fieldsAsObjects
operator|.
name|get
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|snippetObjects
operator|!=
literal|null
condition|)
block|{
comment|//one single document at a time
assert|assert
name|snippetObjects
operator|.
name|length
operator|==
literal|1
assert|;
name|Object
name|snippetObject
init|=
name|snippetObjects
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
name|snippetObject
operator|!=
literal|null
operator|&&
name|snippetObject
operator|instanceof
name|Snippet
index|[]
condition|)
block|{
return|return
operator|(
name|Snippet
index|[]
operator|)
name|snippetObject
return|;
block|}
block|}
return|return
name|EMPTY_SNIPPET
return|;
block|}
annotation|@
name|Override
DECL|method|loadFieldValues
specifier|protected
name|List
argument_list|<
name|CharSequence
index|[]
argument_list|>
name|loadFieldValues
parameter_list|(
name|String
index|[]
name|fields
parameter_list|,
name|DocIdSetIterator
name|docIter
parameter_list|,
name|int
name|cacheCharsThreshold
parameter_list|)
throws|throws
name|IOException
block|{
comment|// we only highlight one field, one document at a time
return|return
name|Collections
operator|.
name|singletonList
argument_list|(
operator|new
name|String
index|[]
block|{
name|fieldValue
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getBreakIterator
specifier|protected
name|BreakIterator
name|getBreakIterator
parameter_list|(
name|String
name|field
parameter_list|)
block|{
return|return
name|breakIterator
return|;
block|}
annotation|@
name|Override
DECL|method|getFormatter
specifier|protected
name|PassageFormatter
name|getFormatter
parameter_list|(
name|String
name|field
parameter_list|)
block|{
return|return
name|passageFormatter
return|;
block|}
annotation|@
name|Override
DECL|method|getFieldHighlighter
specifier|protected
name|FieldHighlighter
name|getFieldHighlighter
parameter_list|(
name|String
name|field
parameter_list|,
name|Query
name|query
parameter_list|,
name|Set
argument_list|<
name|Term
argument_list|>
name|allTerms
parameter_list|,
name|int
name|maxPassages
parameter_list|)
block|{
name|BytesRef
index|[]
name|terms
init|=
name|filterExtractedTerms
argument_list|(
name|getFieldMatcher
argument_list|(
name|field
argument_list|)
argument_list|,
name|allTerms
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|HighlightFlag
argument_list|>
name|highlightFlags
init|=
name|getFlags
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|PhraseHelper
name|phraseHelper
init|=
name|getPhraseHelper
argument_list|(
name|field
argument_list|,
name|query
argument_list|,
name|highlightFlags
argument_list|)
decl_stmt|;
name|CharacterRunAutomaton
index|[]
name|automata
init|=
name|getAutomata
argument_list|(
name|field
argument_list|,
name|query
argument_list|,
name|highlightFlags
argument_list|)
decl_stmt|;
name|OffsetSource
name|offsetSource
init|=
name|getOptimizedOffsetSource
argument_list|(
name|field
argument_list|,
name|terms
argument_list|,
name|phraseHelper
argument_list|,
name|automata
argument_list|)
decl_stmt|;
name|BreakIterator
name|breakIterator
init|=
operator|new
name|SplittingBreakIterator
argument_list|(
name|getBreakIterator
argument_list|(
name|field
argument_list|)
argument_list|,
name|UnifiedHighlighter
operator|.
name|MULTIVAL_SEP_CHAR
argument_list|)
decl_stmt|;
name|FieldOffsetStrategy
name|strategy
init|=
name|getOffsetStrategy
argument_list|(
name|offsetSource
argument_list|,
name|field
argument_list|,
name|terms
argument_list|,
name|phraseHelper
argument_list|,
name|automata
argument_list|,
name|highlightFlags
argument_list|)
decl_stmt|;
return|return
operator|new
name|CustomFieldHighlighter
argument_list|(
name|field
argument_list|,
name|strategy
argument_list|,
name|breakIteratorLocale
argument_list|,
name|breakIterator
argument_list|,
name|getScorer
argument_list|(
name|field
argument_list|)
argument_list|,
name|maxPassages
argument_list|,
operator|(
name|noMatchSize
operator|>
literal|0
condition|?
literal|1
else|:
literal|0
operator|)
argument_list|,
name|getFormatter
argument_list|(
name|field
argument_list|)
argument_list|,
name|noMatchSize
argument_list|,
name|fieldValue
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|preMultiTermQueryRewrite
specifier|protected
name|Collection
argument_list|<
name|Query
argument_list|>
name|preMultiTermQueryRewrite
parameter_list|(
name|Query
name|query
parameter_list|)
block|{
return|return
name|rewriteCustomQuery
argument_list|(
name|query
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|preSpanQueryRewrite
specifier|protected
name|Collection
argument_list|<
name|Query
argument_list|>
name|preSpanQueryRewrite
parameter_list|(
name|Query
name|query
parameter_list|)
block|{
return|return
name|rewriteCustomQuery
argument_list|(
name|query
argument_list|)
return|;
block|}
comment|/**      * Translate custom queries in queries that are supported by the unified highlighter.      */
DECL|method|rewriteCustomQuery
specifier|private
name|Collection
argument_list|<
name|Query
argument_list|>
name|rewriteCustomQuery
parameter_list|(
name|Query
name|query
parameter_list|)
block|{
if|if
condition|(
name|query
operator|instanceof
name|MultiPhrasePrefixQuery
condition|)
block|{
name|MultiPhrasePrefixQuery
name|mpq
init|=
operator|(
name|MultiPhrasePrefixQuery
operator|)
name|query
decl_stmt|;
name|Term
index|[]
index|[]
name|terms
init|=
name|mpq
operator|.
name|getTerms
argument_list|()
decl_stmt|;
name|int
index|[]
name|positions
init|=
name|mpq
operator|.
name|getPositions
argument_list|()
decl_stmt|;
name|SpanQuery
index|[]
name|positionSpanQueries
init|=
operator|new
name|SpanQuery
index|[
name|positions
operator|.
name|length
index|]
decl_stmt|;
name|int
name|sizeMinus1
init|=
name|terms
operator|.
name|length
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|positions
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|SpanQuery
index|[]
name|innerQueries
init|=
operator|new
name|SpanQuery
index|[
name|terms
index|[
name|i
index|]
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|terms
index|[
name|i
index|]
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|==
name|sizeMinus1
condition|)
block|{
name|innerQueries
index|[
name|j
index|]
operator|=
operator|new
name|SpanMultiTermQueryWrapper
argument_list|(
operator|new
name|PrefixQuery
argument_list|(
name|terms
index|[
name|i
index|]
index|[
name|j
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|innerQueries
index|[
name|j
index|]
operator|=
operator|new
name|SpanTermQuery
argument_list|(
name|terms
index|[
name|i
index|]
index|[
name|j
index|]
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|innerQueries
operator|.
name|length
operator|>
literal|1
condition|)
block|{
name|positionSpanQueries
index|[
name|i
index|]
operator|=
operator|new
name|SpanOrQuery
argument_list|(
name|innerQueries
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|positionSpanQueries
index|[
name|i
index|]
operator|=
name|innerQueries
index|[
literal|0
index|]
expr_stmt|;
block|}
block|}
comment|// sum position increments beyond 1
name|int
name|positionGaps
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|positions
operator|.
name|length
operator|>=
literal|2
condition|)
block|{
comment|// positions are in increasing order.   max(0,...) is just a safeguard.
name|positionGaps
operator|=
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|positions
index|[
name|positions
operator|.
name|length
operator|-
literal|1
index|]
operator|-
name|positions
index|[
literal|0
index|]
operator|-
name|positions
operator|.
name|length
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
comment|//if original slop is 0 then require inOrder
name|boolean
name|inorder
init|=
operator|(
name|mpq
operator|.
name|getSlop
argument_list|()
operator|==
literal|0
operator|)
decl_stmt|;
return|return
name|Collections
operator|.
name|singletonList
argument_list|(
operator|new
name|SpanNearQuery
argument_list|(
name|positionSpanQueries
argument_list|,
name|mpq
operator|.
name|getSlop
argument_list|()
operator|+
name|positionGaps
argument_list|,
name|inorder
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|query
operator|instanceof
name|CommonTermsQuery
condition|)
block|{
name|CommonTermsQuery
name|ctq
init|=
operator|(
name|CommonTermsQuery
operator|)
name|query
decl_stmt|;
name|List
argument_list|<
name|Query
argument_list|>
name|tqs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Term
name|term
range|:
name|ctq
operator|.
name|getTerms
argument_list|()
control|)
block|{
name|tqs
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
name|term
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|tqs
return|;
block|}
elseif|else
if|if
condition|(
name|query
operator|instanceof
name|AllTermQuery
condition|)
block|{
name|AllTermQuery
name|atq
init|=
operator|(
name|AllTermQuery
operator|)
name|query
decl_stmt|;
return|return
name|Collections
operator|.
name|singletonList
argument_list|(
operator|new
name|TermQuery
argument_list|(
name|atq
operator|.
name|getTerm
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|query
operator|instanceof
name|FunctionScoreQuery
condition|)
block|{
return|return
name|Collections
operator|.
name|singletonList
argument_list|(
operator|(
operator|(
name|FunctionScoreQuery
operator|)
name|query
operator|)
operator|.
name|getSubQuery
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|query
operator|instanceof
name|FiltersFunctionScoreQuery
condition|)
block|{
return|return
name|Collections
operator|.
name|singletonList
argument_list|(
operator|(
operator|(
name|FiltersFunctionScoreQuery
operator|)
name|query
operator|)
operator|.
name|getSubQuery
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

