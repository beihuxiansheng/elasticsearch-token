begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.queries
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|ConstantScoreScorer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|ConstantScoreWeight
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSetIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|EarlyTerminatingSortingCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|FieldComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|FieldDoc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|LeafFieldComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Scorer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Sort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|SortField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Weight
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_comment
comment|/**  * A {@link Query} that only matches documents that are greater than the provided {@link FieldDoc}.  * This works only if the index is sorted according to the given search {@link Sort}.  */
end_comment

begin_class
DECL|class|SearchAfterSortedDocQuery
specifier|public
class|class
name|SearchAfterSortedDocQuery
extends|extends
name|Query
block|{
DECL|field|sort
specifier|private
specifier|final
name|Sort
name|sort
decl_stmt|;
DECL|field|after
specifier|private
specifier|final
name|FieldDoc
name|after
decl_stmt|;
DECL|field|fieldComparators
specifier|private
specifier|final
name|FieldComparator
argument_list|<
name|?
argument_list|>
index|[]
name|fieldComparators
decl_stmt|;
DECL|field|reverseMuls
specifier|private
specifier|final
name|int
index|[]
name|reverseMuls
decl_stmt|;
DECL|method|SearchAfterSortedDocQuery
specifier|public
name|SearchAfterSortedDocQuery
parameter_list|(
name|Sort
name|sort
parameter_list|,
name|FieldDoc
name|after
parameter_list|)
block|{
if|if
condition|(
name|sort
operator|.
name|getSort
argument_list|()
operator|.
name|length
operator|!=
name|after
operator|.
name|fields
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"after doc  has "
operator|+
name|after
operator|.
name|fields
operator|.
name|length
operator|+
literal|" value(s) but sort has "
operator|+
name|sort
operator|.
name|getSort
argument_list|()
operator|.
name|length
operator|+
literal|"."
argument_list|)
throw|;
block|}
name|this
operator|.
name|sort
operator|=
name|sort
expr_stmt|;
name|this
operator|.
name|after
operator|=
name|after
expr_stmt|;
name|int
name|numFields
init|=
name|sort
operator|.
name|getSort
argument_list|()
operator|.
name|length
decl_stmt|;
name|this
operator|.
name|fieldComparators
operator|=
operator|new
name|FieldComparator
index|[
name|numFields
index|]
expr_stmt|;
name|this
operator|.
name|reverseMuls
operator|=
operator|new
name|int
index|[
name|numFields
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numFields
condition|;
name|i
operator|++
control|)
block|{
name|SortField
name|sortField
init|=
name|sort
operator|.
name|getSort
argument_list|()
index|[
name|i
index|]
decl_stmt|;
name|FieldComparator
argument_list|<
name|?
argument_list|>
name|fieldComparator
init|=
name|sortField
operator|.
name|getComparator
argument_list|(
literal|1
argument_list|,
name|i
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|FieldComparator
argument_list|<
name|Object
argument_list|>
name|comparator
init|=
operator|(
name|FieldComparator
argument_list|<
name|Object
argument_list|>
operator|)
name|fieldComparator
decl_stmt|;
name|comparator
operator|.
name|setTopValue
argument_list|(
name|after
operator|.
name|fields
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|fieldComparators
index|[
name|i
index|]
operator|=
name|fieldComparator
expr_stmt|;
name|reverseMuls
index|[
name|i
index|]
operator|=
name|sortField
operator|.
name|getReverse
argument_list|()
condition|?
operator|-
literal|1
else|:
literal|1
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|createWeight
specifier|public
name|Weight
name|createWeight
parameter_list|(
name|IndexSearcher
name|searcher
parameter_list|,
name|boolean
name|needsScores
parameter_list|,
name|float
name|boost
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|ConstantScoreWeight
argument_list|(
name|this
argument_list|,
literal|1.0f
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Scorer
name|scorer
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|Sort
name|segmentSort
init|=
name|context
operator|.
name|reader
argument_list|()
operator|.
name|getMetaData
argument_list|()
operator|.
name|getSort
argument_list|()
decl_stmt|;
if|if
condition|(
name|EarlyTerminatingSortingCollector
operator|.
name|canEarlyTerminate
argument_list|(
name|sort
argument_list|,
name|segmentSort
argument_list|)
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"search sort :["
operator|+
name|sort
operator|.
name|getSort
argument_list|()
operator|+
literal|"] does not match the index sort:["
operator|+
name|segmentSort
operator|+
literal|"]"
argument_list|)
throw|;
block|}
specifier|final
name|int
name|afterDoc
init|=
name|after
operator|.
name|doc
operator|-
name|context
operator|.
name|docBase
decl_stmt|;
name|TopComparator
name|comparator
init|=
name|getTopComparator
argument_list|(
name|fieldComparators
argument_list|,
name|reverseMuls
argument_list|,
name|context
argument_list|,
name|afterDoc
argument_list|)
decl_stmt|;
specifier|final
name|int
name|maxDoc
init|=
name|context
operator|.
name|reader
argument_list|()
operator|.
name|maxDoc
argument_list|()
decl_stmt|;
specifier|final
name|int
name|firstDoc
init|=
name|searchAfterDoc
argument_list|(
name|comparator
argument_list|,
literal|0
argument_list|,
name|context
operator|.
name|reader
argument_list|()
operator|.
name|maxDoc
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|firstDoc
operator|>=
name|maxDoc
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|DocIdSetIterator
name|disi
init|=
operator|new
name|MinDocQuery
operator|.
name|MinDocIterator
argument_list|(
name|firstDoc
argument_list|,
name|maxDoc
argument_list|)
decl_stmt|;
return|return
operator|new
name|ConstantScoreScorer
argument_list|(
name|this
argument_list|,
name|score
argument_list|()
argument_list|,
name|disi
argument_list|)
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|(
name|String
name|field
parameter_list|)
block|{
return|return
literal|"SearchAfterSortedDocQuery(sort="
operator|+
name|sort
operator|+
literal|", afterDoc="
operator|+
name|after
operator|.
name|toString
argument_list|()
operator|+
literal|")"
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
return|return
name|sameClassAs
argument_list|(
name|other
argument_list|)
operator|&&
name|equalsTo
argument_list|(
name|getClass
argument_list|()
operator|.
name|cast
argument_list|(
name|other
argument_list|)
argument_list|)
return|;
block|}
DECL|method|equalsTo
specifier|private
name|boolean
name|equalsTo
parameter_list|(
name|SearchAfterSortedDocQuery
name|other
parameter_list|)
block|{
return|return
name|sort
operator|.
name|equals
argument_list|(
name|other
operator|.
name|sort
argument_list|)
operator|&&
name|after
operator|.
name|doc
operator|==
name|other
operator|.
name|after
operator|.
name|doc
operator|&&
name|Double
operator|.
name|compare
argument_list|(
name|after
operator|.
name|score
argument_list|,
name|other
operator|.
name|after
operator|.
name|score
argument_list|)
operator|==
literal|0
operator|&&
name|Arrays
operator|.
name|equals
argument_list|(
name|after
operator|.
name|fields
argument_list|,
name|other
operator|.
name|after
operator|.
name|fields
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|classHash
argument_list|()
argument_list|,
name|sort
argument_list|,
name|after
operator|.
name|doc
argument_list|,
name|after
operator|.
name|score
argument_list|,
name|Arrays
operator|.
name|hashCode
argument_list|(
name|after
operator|.
name|fields
argument_list|)
argument_list|)
return|;
block|}
DECL|interface|TopComparator
interface|interface
name|TopComparator
block|{
DECL|method|lessThanTop
name|boolean
name|lessThanTop
parameter_list|(
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
DECL|method|getTopComparator
specifier|static
name|TopComparator
name|getTopComparator
parameter_list|(
name|FieldComparator
argument_list|<
name|?
argument_list|>
index|[]
name|fieldComparators
parameter_list|,
name|int
index|[]
name|reverseMuls
parameter_list|,
name|LeafReaderContext
name|leafReaderContext
parameter_list|,
name|int
name|topDoc
parameter_list|)
block|{
return|return
name|doc
lambda|->
block|{
comment|// DVs use forward iterators so we recreate the iterator for each sort field
comment|// every time we need to compare a document with the<code>after<code> doc.
comment|// We could reuse the iterators when the comparison goes forward but
comment|// this should only be called a few time per segment (binary search).
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fieldComparators
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|LeafFieldComparator
name|comparator
init|=
name|fieldComparators
index|[
name|i
index|]
operator|.
name|getLeafComparator
argument_list|(
name|leafReaderContext
argument_list|)
decl_stmt|;
name|int
name|value
init|=
name|reverseMuls
index|[
name|i
index|]
operator|*
name|comparator
operator|.
name|compareTop
argument_list|(
name|doc
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|0
condition|)
block|{
return|return
name|value
operator|<
literal|0
return|;
block|}
block|}
if|if
condition|(
name|topDoc
operator|<=
name|doc
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
return|;
block|}
comment|/**      * Returns the first doc id greater than the provided<code>after</code> doc.      */
DECL|method|searchAfterDoc
specifier|static
name|int
name|searchAfterDoc
parameter_list|(
name|TopComparator
name|comparator
parameter_list|,
name|int
name|from
parameter_list|,
name|int
name|to
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|low
init|=
name|from
decl_stmt|;
name|int
name|high
init|=
name|to
operator|-
literal|1
decl_stmt|;
while|while
condition|(
name|low
operator|<=
name|high
condition|)
block|{
name|int
name|mid
init|=
operator|(
name|low
operator|+
name|high
operator|)
operator|>>>
literal|1
decl_stmt|;
if|if
condition|(
name|comparator
operator|.
name|lessThanTop
argument_list|(
name|mid
argument_list|)
condition|)
block|{
name|high
operator|=
name|mid
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
name|low
operator|=
name|mid
operator|+
literal|1
expr_stmt|;
block|}
block|}
return|return
name|low
return|;
block|}
block|}
end_class

end_unit

