begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|StringHelper
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * Forked utility methods from Lucene's PointValues until LUCENE-7257 is released.  */
end_comment

begin_class
DECL|class|XPointValues
specifier|public
class|class
name|XPointValues
block|{
comment|/** Return the cumulated number of points across all leaves of the given      * {@link IndexReader}. Leaves that do not have points for the given field      * are ignored.      *  @see PointValues#size(String) */
DECL|method|size
specifier|public
specifier|static
name|long
name|size
parameter_list|(
name|IndexReader
name|reader
parameter_list|,
name|String
name|field
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|size
init|=
literal|0
decl_stmt|;
for|for
control|(
name|LeafReaderContext
name|ctx
range|:
name|reader
operator|.
name|leaves
argument_list|()
control|)
block|{
name|FieldInfo
name|info
init|=
name|ctx
operator|.
name|reader
argument_list|()
operator|.
name|getFieldInfos
argument_list|()
operator|.
name|fieldInfo
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|==
literal|null
operator|||
name|info
operator|.
name|getPointDimensionCount
argument_list|()
operator|==
literal|0
condition|)
block|{
continue|continue;
block|}
name|PointValues
name|values
init|=
name|ctx
operator|.
name|reader
argument_list|()
operator|.
name|getPointValues
argument_list|()
decl_stmt|;
name|size
operator|+=
name|values
operator|.
name|size
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
return|return
name|size
return|;
block|}
comment|/** Return the cumulated number of docs that have points across all leaves      * of the given {@link IndexReader}. Leaves that do not have points for the      * given field are ignored.      *  @see PointValues#getDocCount(String) */
DECL|method|getDocCount
specifier|public
specifier|static
name|int
name|getDocCount
parameter_list|(
name|IndexReader
name|reader
parameter_list|,
name|String
name|field
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|LeafReaderContext
name|ctx
range|:
name|reader
operator|.
name|leaves
argument_list|()
control|)
block|{
name|FieldInfo
name|info
init|=
name|ctx
operator|.
name|reader
argument_list|()
operator|.
name|getFieldInfos
argument_list|()
operator|.
name|fieldInfo
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|==
literal|null
operator|||
name|info
operator|.
name|getPointDimensionCount
argument_list|()
operator|==
literal|0
condition|)
block|{
continue|continue;
block|}
name|PointValues
name|values
init|=
name|ctx
operator|.
name|reader
argument_list|()
operator|.
name|getPointValues
argument_list|()
decl_stmt|;
name|count
operator|+=
name|values
operator|.
name|getDocCount
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
return|return
name|count
return|;
block|}
comment|/** Return the minimum packed values across all leaves of the given      * {@link IndexReader}. Leaves that do not have points for the given field      * are ignored.      *  @see PointValues#getMinPackedValue(String) */
DECL|method|getMinPackedValue
specifier|public
specifier|static
name|byte
index|[]
name|getMinPackedValue
parameter_list|(
name|IndexReader
name|reader
parameter_list|,
name|String
name|field
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|minValue
init|=
literal|null
decl_stmt|;
for|for
control|(
name|LeafReaderContext
name|ctx
range|:
name|reader
operator|.
name|leaves
argument_list|()
control|)
block|{
name|FieldInfo
name|info
init|=
name|ctx
operator|.
name|reader
argument_list|()
operator|.
name|getFieldInfos
argument_list|()
operator|.
name|fieldInfo
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|==
literal|null
operator|||
name|info
operator|.
name|getPointDimensionCount
argument_list|()
operator|==
literal|0
condition|)
block|{
continue|continue;
block|}
name|PointValues
name|values
init|=
name|ctx
operator|.
name|reader
argument_list|()
operator|.
name|getPointValues
argument_list|()
decl_stmt|;
name|byte
index|[]
name|leafMinValue
init|=
name|values
operator|.
name|getMinPackedValue
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|leafMinValue
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|minValue
operator|==
literal|null
condition|)
block|{
name|minValue
operator|=
name|leafMinValue
operator|.
name|clone
argument_list|()
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|int
name|numDimensions
init|=
name|values
operator|.
name|getNumDimensions
argument_list|(
name|field
argument_list|)
decl_stmt|;
specifier|final
name|int
name|numBytesPerDimension
init|=
name|values
operator|.
name|getBytesPerDimension
argument_list|(
name|field
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDimensions
condition|;
operator|++
name|i
control|)
block|{
name|int
name|offset
init|=
name|i
operator|*
name|numBytesPerDimension
decl_stmt|;
if|if
condition|(
name|StringHelper
operator|.
name|compare
argument_list|(
name|numBytesPerDimension
argument_list|,
name|leafMinValue
argument_list|,
name|offset
argument_list|,
name|minValue
argument_list|,
name|offset
argument_list|)
operator|<
literal|0
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|leafMinValue
argument_list|,
name|offset
argument_list|,
name|minValue
argument_list|,
name|offset
argument_list|,
name|numBytesPerDimension
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|minValue
return|;
block|}
comment|/** Return the maximum packed values across all leaves of the given      * {@link IndexReader}. Leaves that do not have points for the given field      * are ignored.      *  @see PointValues#getMaxPackedValue(String) */
DECL|method|getMaxPackedValue
specifier|public
specifier|static
name|byte
index|[]
name|getMaxPackedValue
parameter_list|(
name|IndexReader
name|reader
parameter_list|,
name|String
name|field
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|maxValue
init|=
literal|null
decl_stmt|;
for|for
control|(
name|LeafReaderContext
name|ctx
range|:
name|reader
operator|.
name|leaves
argument_list|()
control|)
block|{
name|FieldInfo
name|info
init|=
name|ctx
operator|.
name|reader
argument_list|()
operator|.
name|getFieldInfos
argument_list|()
operator|.
name|fieldInfo
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|==
literal|null
operator|||
name|info
operator|.
name|getPointDimensionCount
argument_list|()
operator|==
literal|0
condition|)
block|{
continue|continue;
block|}
name|PointValues
name|values
init|=
name|ctx
operator|.
name|reader
argument_list|()
operator|.
name|getPointValues
argument_list|()
decl_stmt|;
name|byte
index|[]
name|leafMaxValue
init|=
name|values
operator|.
name|getMaxPackedValue
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|leafMaxValue
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|maxValue
operator|==
literal|null
condition|)
block|{
name|maxValue
operator|=
name|leafMaxValue
operator|.
name|clone
argument_list|()
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|int
name|numDimensions
init|=
name|values
operator|.
name|getNumDimensions
argument_list|(
name|field
argument_list|)
decl_stmt|;
specifier|final
name|int
name|numBytesPerDimension
init|=
name|values
operator|.
name|getBytesPerDimension
argument_list|(
name|field
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDimensions
condition|;
operator|++
name|i
control|)
block|{
name|int
name|offset
init|=
name|i
operator|*
name|numBytesPerDimension
decl_stmt|;
if|if
condition|(
name|StringHelper
operator|.
name|compare
argument_list|(
name|numBytesPerDimension
argument_list|,
name|leafMaxValue
argument_list|,
name|offset
argument_list|,
name|maxValue
argument_list|,
name|offset
argument_list|)
operator|>
literal|0
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|leafMaxValue
argument_list|,
name|offset
argument_list|,
name|maxValue
argument_list|,
name|offset
argument_list|,
name|numBytesPerDimension
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|maxValue
return|;
block|}
comment|/** Default constructor */
DECL|method|XPointValues
specifier|private
name|XPointValues
parameter_list|()
block|{     }
block|}
end_class

end_unit

