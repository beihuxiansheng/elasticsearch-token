begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.searchafter
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|searchafter
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|FieldDoc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Sort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|SortField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParseField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParseFieldMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParsingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Writeable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|text
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|IndexFieldData
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|SearchAfterBuilder
specifier|public
class|class
name|SearchAfterBuilder
implements|implements
name|ToXContent
implements|,
name|Writeable
block|{
DECL|field|SEARCH_AFTER
specifier|public
specifier|static
specifier|final
name|ParseField
name|SEARCH_AFTER
init|=
operator|new
name|ParseField
argument_list|(
literal|"search_after"
argument_list|)
decl_stmt|;
DECL|field|EMPTY_SORT_VALUES
specifier|private
specifier|static
specifier|final
name|Object
index|[]
name|EMPTY_SORT_VALUES
init|=
operator|new
name|Object
index|[
literal|0
index|]
decl_stmt|;
DECL|field|sortValues
specifier|private
name|Object
index|[]
name|sortValues
init|=
name|EMPTY_SORT_VALUES
decl_stmt|;
DECL|method|SearchAfterBuilder
specifier|public
name|SearchAfterBuilder
parameter_list|()
block|{     }
comment|/**      * Read from a stream.      */
DECL|method|SearchAfterBuilder
specifier|public
name|SearchAfterBuilder
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|size
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|sortValues
operator|=
operator|new
name|Object
index|[
name|size
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|sortValues
index|[
name|i
index|]
operator|=
name|in
operator|.
name|readGenericValue
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeVInt
argument_list|(
name|sortValues
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
name|fieldValue
range|:
name|sortValues
control|)
block|{
name|out
operator|.
name|writeGenericValue
argument_list|(
name|fieldValue
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setSortValues
specifier|public
name|SearchAfterBuilder
name|setSortValues
parameter_list|(
name|Object
index|[]
name|values
parameter_list|)
block|{
if|if
condition|(
name|values
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"Values cannot be null."
argument_list|)
throw|;
block|}
if|if
condition|(
name|values
operator|.
name|length
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Values must contains at least one value."
argument_list|)
throw|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|values
index|[
name|i
index|]
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|values
index|[
name|i
index|]
operator|instanceof
name|String
condition|)
continue|continue;
if|if
condition|(
name|values
index|[
name|i
index|]
operator|instanceof
name|Text
condition|)
continue|continue;
if|if
condition|(
name|values
index|[
name|i
index|]
operator|instanceof
name|Long
condition|)
continue|continue;
if|if
condition|(
name|values
index|[
name|i
index|]
operator|instanceof
name|Integer
condition|)
continue|continue;
if|if
condition|(
name|values
index|[
name|i
index|]
operator|instanceof
name|Short
condition|)
continue|continue;
if|if
condition|(
name|values
index|[
name|i
index|]
operator|instanceof
name|Byte
condition|)
continue|continue;
if|if
condition|(
name|values
index|[
name|i
index|]
operator|instanceof
name|Double
condition|)
continue|continue;
if|if
condition|(
name|values
index|[
name|i
index|]
operator|instanceof
name|Float
condition|)
continue|continue;
if|if
condition|(
name|values
index|[
name|i
index|]
operator|instanceof
name|Boolean
condition|)
continue|continue;
if|if
condition|(
name|values
index|[
name|i
index|]
operator|instanceof
name|Boolean
condition|)
continue|continue;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Can't handle "
operator|+
name|SEARCH_AFTER
operator|+
literal|" field value of type ["
operator|+
name|values
index|[
name|i
index|]
operator|.
name|getClass
argument_list|()
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|sortValues
operator|=
operator|new
name|Object
index|[
name|values
operator|.
name|length
index|]
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|values
argument_list|,
literal|0
argument_list|,
name|sortValues
argument_list|,
literal|0
argument_list|,
name|values
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getSortValues
specifier|public
name|Object
index|[]
name|getSortValues
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|copyOf
argument_list|(
name|sortValues
argument_list|,
name|sortValues
operator|.
name|length
argument_list|)
return|;
block|}
DECL|method|buildFieldDoc
specifier|public
specifier|static
name|FieldDoc
name|buildFieldDoc
parameter_list|(
name|Sort
name|sort
parameter_list|,
name|Object
index|[]
name|values
parameter_list|)
block|{
if|if
condition|(
name|sort
operator|==
literal|null
operator|||
name|sort
operator|.
name|getSort
argument_list|()
operator|==
literal|null
operator|||
name|sort
operator|.
name|getSort
argument_list|()
operator|.
name|length
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Sort must contain at least one field."
argument_list|)
throw|;
block|}
name|SortField
index|[]
name|sortFields
init|=
name|sort
operator|.
name|getSort
argument_list|()
decl_stmt|;
if|if
condition|(
name|sortFields
operator|.
name|length
operator|!=
name|values
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|SEARCH_AFTER
operator|.
name|getPreferredName
argument_list|()
operator|+
literal|" has "
operator|+
name|values
operator|.
name|length
operator|+
literal|" value(s) but sort has "
operator|+
name|sort
operator|.
name|getSort
argument_list|()
operator|.
name|length
operator|+
literal|"."
argument_list|)
throw|;
block|}
name|Object
index|[]
name|fieldValues
init|=
operator|new
name|Object
index|[
name|sortFields
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sortFields
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|SortField
name|sortField
init|=
name|sortFields
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|values
index|[
name|i
index|]
operator|!=
literal|null
condition|)
block|{
name|fieldValues
index|[
name|i
index|]
operator|=
name|convertValueFromSortField
argument_list|(
name|values
index|[
name|i
index|]
argument_list|,
name|sortField
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fieldValues
index|[
name|i
index|]
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/*          * We set the doc id to Integer.MAX_VALUE in order to make sure that the search starts "after" the first document that is equal to          * the field values.          */
return|return
operator|new
name|FieldDoc
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
literal|0
argument_list|,
name|fieldValues
argument_list|)
return|;
block|}
DECL|method|convertValueFromSortField
specifier|private
specifier|static
name|Object
name|convertValueFromSortField
parameter_list|(
name|Object
name|value
parameter_list|,
name|SortField
name|sortField
parameter_list|)
block|{
if|if
condition|(
name|sortField
operator|.
name|getComparatorSource
argument_list|()
operator|instanceof
name|IndexFieldData
operator|.
name|XFieldComparatorSource
condition|)
block|{
name|IndexFieldData
operator|.
name|XFieldComparatorSource
name|cmpSource
init|=
operator|(
name|IndexFieldData
operator|.
name|XFieldComparatorSource
operator|)
name|sortField
operator|.
name|getComparatorSource
argument_list|()
decl_stmt|;
return|return
name|convertValueFromSortType
argument_list|(
name|sortField
operator|.
name|getField
argument_list|()
argument_list|,
name|cmpSource
operator|.
name|reducedType
argument_list|()
argument_list|,
name|value
argument_list|)
return|;
block|}
return|return
name|convertValueFromSortType
argument_list|(
name|sortField
operator|.
name|getField
argument_list|()
argument_list|,
name|sortField
operator|.
name|getType
argument_list|()
argument_list|,
name|value
argument_list|)
return|;
block|}
DECL|method|convertValueFromSortType
specifier|private
specifier|static
name|Object
name|convertValueFromSortType
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|SortField
operator|.
name|Type
name|sortType
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
try|try
block|{
switch|switch
condition|(
name|sortType
condition|)
block|{
case|case
name|DOC
case|:
if|if
condition|(
name|value
operator|instanceof
name|Number
condition|)
block|{
return|return
operator|(
operator|(
name|Number
operator|)
name|value
operator|)
operator|.
name|intValue
argument_list|()
return|;
block|}
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
return|;
case|case
name|SCORE
case|:
if|if
condition|(
name|value
operator|instanceof
name|Number
condition|)
block|{
return|return
operator|(
operator|(
name|Number
operator|)
name|value
operator|)
operator|.
name|floatValue
argument_list|()
return|;
block|}
return|return
name|Float
operator|.
name|parseFloat
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
return|;
case|case
name|INT
case|:
if|if
condition|(
name|value
operator|instanceof
name|Number
condition|)
block|{
return|return
operator|(
operator|(
name|Number
operator|)
name|value
operator|)
operator|.
name|intValue
argument_list|()
return|;
block|}
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
return|;
case|case
name|DOUBLE
case|:
if|if
condition|(
name|value
operator|instanceof
name|Number
condition|)
block|{
return|return
operator|(
operator|(
name|Number
operator|)
name|value
operator|)
operator|.
name|doubleValue
argument_list|()
return|;
block|}
return|return
name|Double
operator|.
name|parseDouble
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
return|;
case|case
name|LONG
case|:
if|if
condition|(
name|value
operator|instanceof
name|Number
condition|)
block|{
return|return
operator|(
operator|(
name|Number
operator|)
name|value
operator|)
operator|.
name|longValue
argument_list|()
return|;
block|}
return|return
name|Long
operator|.
name|parseLong
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
return|;
case|case
name|FLOAT
case|:
if|if
condition|(
name|value
operator|instanceof
name|Number
condition|)
block|{
return|return
operator|(
operator|(
name|Number
operator|)
name|value
operator|)
operator|.
name|floatValue
argument_list|()
return|;
block|}
return|return
name|Float
operator|.
name|parseFloat
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
return|;
case|case
name|STRING_VAL
case|:
case|case
name|STRING
case|:
return|return
operator|new
name|BytesRef
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Comparator type ["
operator|+
name|sortType
operator|.
name|name
argument_list|()
operator|+
literal|"] for field ["
operator|+
name|fieldName
operator|+
literal|"] is not supported."
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Failed to parse "
operator|+
name|SEARCH_AFTER
operator|.
name|getPreferredName
argument_list|()
operator|+
literal|" value for field ["
operator|+
name|fieldName
operator|+
literal|"]."
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|innerToXContent
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
DECL|method|innerToXContent
name|void
name|innerToXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|field
argument_list|(
name|SEARCH_AFTER
operator|.
name|getPreferredName
argument_list|()
argument_list|,
name|sortValues
argument_list|)
expr_stmt|;
block|}
DECL|method|fromXContent
specifier|public
specifier|static
name|SearchAfterBuilder
name|fromXContent
parameter_list|(
name|XContentParser
name|parser
parameter_list|,
name|ParseFieldMatcher
name|parseFieldMatcher
parameter_list|)
throws|throws
name|IOException
block|{
name|SearchAfterBuilder
name|builder
init|=
operator|new
name|SearchAfterBuilder
argument_list|()
decl_stmt|;
name|XContentParser
operator|.
name|Token
name|token
init|=
name|parser
operator|.
name|currentToken
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|values
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_ARRAY
condition|)
block|{
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_ARRAY
condition|)
block|{
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_NUMBER
condition|)
block|{
switch|switch
condition|(
name|parser
operator|.
name|numberType
argument_list|()
condition|)
block|{
case|case
name|INT
case|:
name|values
operator|.
name|add
argument_list|(
name|parser
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|LONG
case|:
name|values
operator|.
name|add
argument_list|(
name|parser
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|DOUBLE
case|:
name|values
operator|.
name|add
argument_list|(
name|parser
operator|.
name|doubleValue
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|FLOAT
case|:
name|values
operator|.
name|add
argument_list|(
name|parser
operator|.
name|floatValue
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Unknown number type []"
operator|+
name|parser
operator|.
name|numberType
argument_list|()
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_STRING
condition|)
block|{
name|values
operator|.
name|add
argument_list|(
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_BOOLEAN
condition|)
block|{
name|values
operator|.
name|add
argument_list|(
name|parser
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_NULL
condition|)
block|{
name|values
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ParsingException
argument_list|(
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|,
literal|"Expected ["
operator|+
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_STRING
operator|+
literal|"] or ["
operator|+
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_NUMBER
operator|+
literal|"] or ["
operator|+
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_BOOLEAN
operator|+
literal|"] or ["
operator|+
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_NULL
operator|+
literal|"] but found ["
operator|+
name|token
operator|+
literal|"] inside search_after."
argument_list|)
throw|;
block|}
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|ParsingException
argument_list|(
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|,
literal|"Expected ["
operator|+
name|XContentParser
operator|.
name|Token
operator|.
name|START_ARRAY
operator|+
literal|"] in ["
operator|+
name|SEARCH_AFTER
operator|.
name|getPreferredName
argument_list|()
operator|+
literal|"] but found ["
operator|+
name|token
operator|+
literal|"] inside search_after"
argument_list|,
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|)
throw|;
block|}
name|builder
operator|.
name|setSortValues
argument_list|(
name|values
operator|.
name|toArray
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|builder
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|other
operator|instanceof
name|SearchAfterBuilder
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|Arrays
operator|.
name|equals
argument_list|(
name|sortValues
argument_list|,
operator|(
operator|(
name|SearchAfterBuilder
operator|)
name|other
operator|)
operator|.
name|sortValues
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|this
operator|.
name|sortValues
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
try|try
block|{
name|XContentBuilder
name|builder
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|prettyPrint
argument_list|()
expr_stmt|;
name|toXContent
argument_list|(
name|builder
argument_list|,
name|EMPTY_PARAMS
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|string
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ElasticsearchException
argument_list|(
literal|"Failed to build xcontent."
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

