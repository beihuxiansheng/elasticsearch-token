begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.rescore
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|rescore
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ExceptionsHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|NamedWriteable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Writeable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|MatchAllQueryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_class
DECL|class|RescoreBuilder
specifier|public
class|class
name|RescoreBuilder
implements|implements
name|ToXContent
implements|,
name|Writeable
argument_list|<
name|RescoreBuilder
argument_list|>
block|{
DECL|field|rescorer
specifier|private
name|Rescorer
name|rescorer
decl_stmt|;
DECL|field|windowSize
specifier|private
name|Integer
name|windowSize
decl_stmt|;
DECL|field|PROTOYPE
specifier|public
specifier|static
specifier|final
name|RescoreBuilder
name|PROTOYPE
init|=
operator|new
name|RescoreBuilder
argument_list|(
operator|new
name|QueryRescorer
argument_list|(
operator|new
name|MatchAllQueryBuilder
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
DECL|method|RescoreBuilder
specifier|public
name|RescoreBuilder
parameter_list|(
name|Rescorer
name|rescorer
parameter_list|)
block|{
if|if
condition|(
name|rescorer
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"rescorer cannot be null"
argument_list|)
throw|;
block|}
name|this
operator|.
name|rescorer
operator|=
name|rescorer
expr_stmt|;
block|}
DECL|method|rescorer
specifier|public
name|Rescorer
name|rescorer
parameter_list|()
block|{
return|return
name|this
operator|.
name|rescorer
return|;
block|}
DECL|method|windowSize
specifier|public
name|RescoreBuilder
name|windowSize
parameter_list|(
name|int
name|windowSize
parameter_list|)
block|{
name|this
operator|.
name|windowSize
operator|=
name|windowSize
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|windowSize
specifier|public
name|Integer
name|windowSize
parameter_list|()
block|{
return|return
name|windowSize
return|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|windowSize
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"window_size"
argument_list|,
name|windowSize
argument_list|)
expr_stmt|;
block|}
name|rescorer
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
return|return
name|builder
return|;
block|}
DECL|method|queryRescorer
specifier|public
specifier|static
name|QueryRescorer
name|queryRescorer
parameter_list|(
name|QueryBuilder
argument_list|<
name|?
argument_list|>
name|queryBuilder
parameter_list|)
block|{
return|return
operator|new
name|QueryRescorer
argument_list|(
name|queryBuilder
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
specifier|final
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|windowSize
argument_list|,
name|rescorer
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
specifier|final
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|obj
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|obj
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|RescoreBuilder
name|other
init|=
operator|(
name|RescoreBuilder
operator|)
name|obj
decl_stmt|;
return|return
name|Objects
operator|.
name|equals
argument_list|(
name|windowSize
argument_list|,
name|other
operator|.
name|windowSize
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|rescorer
argument_list|,
name|other
operator|.
name|rescorer
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|RescoreBuilder
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|RescoreBuilder
name|builder
init|=
operator|new
name|RescoreBuilder
argument_list|(
name|in
operator|.
name|readRescorer
argument_list|()
argument_list|)
decl_stmt|;
name|Integer
name|windowSize
init|=
name|in
operator|.
name|readOptionalVInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|windowSize
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|windowSize
argument_list|(
name|windowSize
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
return|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeRescorer
argument_list|(
name|rescorer
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalVInt
argument_list|(
name|this
operator|.
name|windowSize
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
specifier|final
name|String
name|toString
parameter_list|()
block|{
try|try
block|{
name|XContentBuilder
name|builder
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|prettyPrint
argument_list|()
expr_stmt|;
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|toXContent
argument_list|(
name|builder
argument_list|,
name|EMPTY_PARAMS
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
operator|.
name|string
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
literal|"{ \"error\" : \""
operator|+
name|ExceptionsHelper
operator|.
name|detailedMessage
argument_list|(
name|e
argument_list|)
operator|+
literal|"\"}"
return|;
block|}
block|}
DECL|class|Rescorer
specifier|public
specifier|static
specifier|abstract
class|class
name|Rescorer
implements|implements
name|ToXContent
implements|,
name|NamedWriteable
argument_list|<
name|Rescorer
argument_list|>
block|{
DECL|field|name
specifier|private
name|String
name|name
decl_stmt|;
DECL|method|Rescorer
specifier|public
name|Rescorer
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|builder
operator|=
name|innerToXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
DECL|method|innerToXContent
specifier|protected
specifier|abstract
name|XContentBuilder
name|innerToXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
function_decl|;
annotation|@
name|Override
DECL|method|hashCode
specifier|public
specifier|abstract
name|int
name|hashCode
parameter_list|()
function_decl|;
annotation|@
name|Override
DECL|method|equals
specifier|public
specifier|abstract
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
function_decl|;
block|}
DECL|class|QueryRescorer
specifier|public
specifier|static
class|class
name|QueryRescorer
extends|extends
name|Rescorer
block|{
DECL|field|NAME
specifier|private
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"query"
decl_stmt|;
DECL|field|PROTOTYPE
specifier|public
specifier|static
specifier|final
name|QueryRescorer
name|PROTOTYPE
init|=
operator|new
name|QueryRescorer
argument_list|(
operator|new
name|MatchAllQueryBuilder
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|DEFAULT_RESCORE_QUERYWEIGHT
specifier|public
specifier|static
specifier|final
name|float
name|DEFAULT_RESCORE_QUERYWEIGHT
init|=
literal|1.0f
decl_stmt|;
DECL|field|DEFAULT_QUERYWEIGHT
specifier|public
specifier|static
specifier|final
name|float
name|DEFAULT_QUERYWEIGHT
init|=
literal|1.0f
decl_stmt|;
DECL|field|DEFAULT_SCORE_MODE
specifier|public
specifier|static
specifier|final
name|QueryRescoreMode
name|DEFAULT_SCORE_MODE
init|=
name|QueryRescoreMode
operator|.
name|Total
decl_stmt|;
DECL|field|queryBuilder
specifier|private
specifier|final
name|QueryBuilder
argument_list|<
name|?
argument_list|>
name|queryBuilder
decl_stmt|;
DECL|field|rescoreQueryWeight
specifier|private
name|float
name|rescoreQueryWeight
init|=
name|DEFAULT_RESCORE_QUERYWEIGHT
decl_stmt|;
DECL|field|queryWeight
specifier|private
name|float
name|queryWeight
init|=
name|DEFAULT_QUERYWEIGHT
decl_stmt|;
DECL|field|scoreMode
specifier|private
name|QueryRescoreMode
name|scoreMode
init|=
name|DEFAULT_SCORE_MODE
decl_stmt|;
comment|/**          * Creates a new {@link QueryRescorer} instance          * @param builder the query builder to build the rescore query from          */
DECL|method|QueryRescorer
specifier|public
name|QueryRescorer
parameter_list|(
name|QueryBuilder
argument_list|<
name|?
argument_list|>
name|builder
parameter_list|)
block|{
name|super
argument_list|(
name|NAME
argument_list|)
expr_stmt|;
name|this
operator|.
name|queryBuilder
operator|=
name|builder
expr_stmt|;
block|}
comment|/**          * @return the query used for this rescore query          */
DECL|method|getRescoreQuery
specifier|public
name|QueryBuilder
argument_list|<
name|?
argument_list|>
name|getRescoreQuery
parameter_list|()
block|{
return|return
name|this
operator|.
name|queryBuilder
return|;
block|}
comment|/**          * Sets the original query weight for rescoring. The default is<tt>1.0</tt>          */
DECL|method|setQueryWeight
specifier|public
name|QueryRescorer
name|setQueryWeight
parameter_list|(
name|float
name|queryWeight
parameter_list|)
block|{
name|this
operator|.
name|queryWeight
operator|=
name|queryWeight
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Gets the original query weight for rescoring. The default is<tt>1.0</tt>          */
DECL|method|getQueryWeight
specifier|public
name|float
name|getQueryWeight
parameter_list|()
block|{
return|return
name|this
operator|.
name|queryWeight
return|;
block|}
comment|/**          * Sets the original query weight for rescoring. The default is<tt>1.0</tt>          */
DECL|method|setRescoreQueryWeight
specifier|public
name|QueryRescorer
name|setRescoreQueryWeight
parameter_list|(
name|float
name|rescoreQueryWeight
parameter_list|)
block|{
name|this
operator|.
name|rescoreQueryWeight
operator|=
name|rescoreQueryWeight
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Gets the original query weight for rescoring. The default is<tt>1.0</tt>          */
DECL|method|getRescoreQueryWeight
specifier|public
name|float
name|getRescoreQueryWeight
parameter_list|()
block|{
return|return
name|this
operator|.
name|rescoreQueryWeight
return|;
block|}
comment|/**          * Sets the original query score mode. The default is {@link QueryRescoreMode#Total}.          */
DECL|method|setScoreMode
specifier|public
name|QueryRescorer
name|setScoreMode
parameter_list|(
name|QueryRescoreMode
name|scoreMode
parameter_list|)
block|{
name|this
operator|.
name|scoreMode
operator|=
name|scoreMode
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Gets the original query score mode. The default is<tt>total</tt>          */
DECL|method|getScoreMode
specifier|public
name|QueryRescoreMode
name|getScoreMode
parameter_list|()
block|{
return|return
name|this
operator|.
name|scoreMode
return|;
block|}
annotation|@
name|Override
DECL|method|innerToXContent
specifier|protected
name|XContentBuilder
name|innerToXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"rescore_query"
argument_list|,
name|queryBuilder
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"query_weight"
argument_list|,
name|queryWeight
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"rescore_query_weight"
argument_list|,
name|rescoreQueryWeight
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"score_mode"
argument_list|,
name|scoreMode
operator|.
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|builder
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
specifier|final
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|getClass
argument_list|()
argument_list|,
name|scoreMode
argument_list|,
name|queryWeight
argument_list|,
name|rescoreQueryWeight
argument_list|,
name|queryBuilder
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
specifier|final
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|obj
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|obj
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|QueryRescorer
name|other
init|=
operator|(
name|QueryRescorer
operator|)
name|obj
decl_stmt|;
return|return
name|Objects
operator|.
name|equals
argument_list|(
name|scoreMode
argument_list|,
name|other
operator|.
name|scoreMode
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|queryWeight
argument_list|,
name|other
operator|.
name|queryWeight
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|rescoreQueryWeight
argument_list|,
name|other
operator|.
name|rescoreQueryWeight
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|queryBuilder
argument_list|,
name|other
operator|.
name|queryBuilder
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|QueryRescorer
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|QueryRescorer
name|rescorer
init|=
operator|new
name|QueryRescorer
argument_list|(
name|in
operator|.
name|readQuery
argument_list|()
argument_list|)
decl_stmt|;
name|rescorer
operator|.
name|setScoreMode
argument_list|(
name|QueryRescoreMode
operator|.
name|PROTOTYPE
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
name|rescorer
operator|.
name|setRescoreQueryWeight
argument_list|(
name|in
operator|.
name|readFloat
argument_list|()
argument_list|)
expr_stmt|;
name|rescorer
operator|.
name|setQueryWeight
argument_list|(
name|in
operator|.
name|readFloat
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|rescorer
return|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeQuery
argument_list|(
name|queryBuilder
argument_list|)
expr_stmt|;
name|scoreMode
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeFloat
argument_list|(
name|rescoreQueryWeight
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeFloat
argument_list|(
name|queryWeight
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getWriteableName
specifier|public
name|String
name|getWriteableName
parameter_list|()
block|{
return|return
name|NAME
return|;
block|}
block|}
block|}
end_class

end_unit

