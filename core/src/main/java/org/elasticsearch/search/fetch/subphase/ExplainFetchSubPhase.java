begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.fetch.subphase
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|fetch
operator|.
name|subphase
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Explanation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|fetch
operator|.
name|FetchPhaseExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|fetch
operator|.
name|FetchSubPhase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|SearchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|rescore
operator|.
name|RescoreSearchContext
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * Explains the scoring calculations for the top hits.  */
end_comment

begin_class
DECL|class|ExplainFetchSubPhase
specifier|public
specifier|final
class|class
name|ExplainFetchSubPhase
implements|implements
name|FetchSubPhase
block|{
annotation|@
name|Override
DECL|method|hitExecute
specifier|public
name|void
name|hitExecute
parameter_list|(
name|SearchContext
name|context
parameter_list|,
name|HitContext
name|hitContext
parameter_list|)
block|{
if|if
condition|(
name|context
operator|.
name|explain
argument_list|()
operator|==
literal|false
condition|)
block|{
return|return;
block|}
try|try
block|{
specifier|final
name|int
name|topLevelDocId
init|=
name|hitContext
operator|.
name|hit
argument_list|()
operator|.
name|docId
argument_list|()
decl_stmt|;
name|Explanation
name|explanation
init|=
name|context
operator|.
name|searcher
argument_list|()
operator|.
name|explain
argument_list|(
name|context
operator|.
name|query
argument_list|()
argument_list|,
name|topLevelDocId
argument_list|)
decl_stmt|;
for|for
control|(
name|RescoreSearchContext
name|rescore
range|:
name|context
operator|.
name|rescore
argument_list|()
control|)
block|{
name|explanation
operator|=
name|rescore
operator|.
name|rescorer
argument_list|()
operator|.
name|explain
argument_list|(
name|topLevelDocId
argument_list|,
name|context
argument_list|,
name|rescore
argument_list|,
name|explanation
argument_list|)
expr_stmt|;
block|}
comment|// we use the top level doc id, since we work with the top level searcher
name|hitContext
operator|.
name|hit
argument_list|()
operator|.
name|explanation
argument_list|(
name|explanation
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|FetchPhaseExecutionException
argument_list|(
name|context
argument_list|,
literal|"Failed to explain doc ["
operator|+
name|hitContext
operator|.
name|hit
argument_list|()
operator|.
name|type
argument_list|()
operator|+
literal|"#"
operator|+
name|hitContext
operator|.
name|hit
argument_list|()
operator|.
name|id
argument_list|()
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|context
operator|.
name|clearReleasables
argument_list|(
name|SearchContext
operator|.
name|Lifetime
operator|.
name|COLLECTION
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

