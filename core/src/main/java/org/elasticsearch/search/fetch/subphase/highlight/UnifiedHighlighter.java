begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.fetch.subphase.highlight
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|fetch
operator|.
name|subphase
operator|.
name|highlight
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|highlight
operator|.
name|Encoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|highlight
operator|.
name|Snippet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|uhighlight
operator|.
name|BoundedBreakIteratorScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|uhighlight
operator|.
name|CustomPassageFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|uhighlight
operator|.
name|CustomUnifiedHighlighter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|CollectionUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|text
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|FieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|fetch
operator|.
name|FetchPhaseExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|fetch
operator|.
name|FetchSubPhase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|SearchContext
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|BreakIterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|uhighlight
operator|.
name|CustomUnifiedHighlighter
operator|.
name|MULTIVAL_SEP_CHAR
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|fetch
operator|.
name|subphase
operator|.
name|highlight
operator|.
name|PostingsHighlighter
operator|.
name|filterSnippets
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|fetch
operator|.
name|subphase
operator|.
name|highlight
operator|.
name|PostingsHighlighter
operator|.
name|mergeFieldValues
import|;
end_import

begin_class
DECL|class|UnifiedHighlighter
specifier|public
class|class
name|UnifiedHighlighter
implements|implements
name|Highlighter
block|{
DECL|field|CACHE_KEY
specifier|private
specifier|static
specifier|final
name|String
name|CACHE_KEY
init|=
literal|"highlight-unified"
decl_stmt|;
annotation|@
name|Override
DECL|method|canHighlight
specifier|public
name|boolean
name|canHighlight
parameter_list|(
name|FieldMapper
name|fieldMapper
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|highlight
specifier|public
name|HighlightField
name|highlight
parameter_list|(
name|HighlighterContext
name|highlighterContext
parameter_list|)
block|{
name|FieldMapper
name|fieldMapper
init|=
name|highlighterContext
operator|.
name|mapper
decl_stmt|;
name|SearchContextHighlight
operator|.
name|Field
name|field
init|=
name|highlighterContext
operator|.
name|field
decl_stmt|;
name|SearchContext
name|context
init|=
name|highlighterContext
operator|.
name|context
decl_stmt|;
name|FetchSubPhase
operator|.
name|HitContext
name|hitContext
init|=
name|highlighterContext
operator|.
name|hitContext
decl_stmt|;
if|if
condition|(
operator|!
name|hitContext
operator|.
name|cache
argument_list|()
operator|.
name|containsKey
argument_list|(
name|CACHE_KEY
argument_list|)
condition|)
block|{
name|hitContext
operator|.
name|cache
argument_list|()
operator|.
name|put
argument_list|(
name|CACHE_KEY
argument_list|,
operator|new
name|HighlighterEntry
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|HighlighterEntry
name|highlighterEntry
init|=
operator|(
name|HighlighterEntry
operator|)
name|hitContext
operator|.
name|cache
argument_list|()
operator|.
name|get
argument_list|(
name|CACHE_KEY
argument_list|)
decl_stmt|;
name|MapperHighlighterEntry
name|mapperHighlighterEntry
init|=
name|highlighterEntry
operator|.
name|mappers
operator|.
name|get
argument_list|(
name|fieldMapper
argument_list|)
decl_stmt|;
if|if
condition|(
name|mapperHighlighterEntry
operator|==
literal|null
condition|)
block|{
name|Encoder
name|encoder
init|=
name|field
operator|.
name|fieldOptions
argument_list|()
operator|.
name|encoder
argument_list|()
operator|.
name|equals
argument_list|(
literal|"html"
argument_list|)
condition|?
name|HighlightUtils
operator|.
name|Encoders
operator|.
name|HTML
else|:
name|HighlightUtils
operator|.
name|Encoders
operator|.
name|DEFAULT
decl_stmt|;
name|CustomPassageFormatter
name|passageFormatter
init|=
operator|new
name|CustomPassageFormatter
argument_list|(
name|field
operator|.
name|fieldOptions
argument_list|()
operator|.
name|preTags
argument_list|()
index|[
literal|0
index|]
argument_list|,
name|field
operator|.
name|fieldOptions
argument_list|()
operator|.
name|postTags
argument_list|()
index|[
literal|0
index|]
argument_list|,
name|encoder
argument_list|)
decl_stmt|;
name|mapperHighlighterEntry
operator|=
operator|new
name|MapperHighlighterEntry
argument_list|(
name|passageFormatter
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Snippet
argument_list|>
name|snippets
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|numberOfFragments
decl_stmt|;
try|try
block|{
name|Analyzer
name|analyzer
init|=
name|context
operator|.
name|mapperService
argument_list|()
operator|.
name|documentMapper
argument_list|(
name|hitContext
operator|.
name|hit
argument_list|()
operator|.
name|getType
argument_list|()
argument_list|)
operator|.
name|mappers
argument_list|()
operator|.
name|indexAnalyzer
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|fieldValues
init|=
name|HighlightUtils
operator|.
name|loadFieldValues
argument_list|(
name|field
argument_list|,
name|fieldMapper
argument_list|,
name|context
argument_list|,
name|hitContext
argument_list|)
decl_stmt|;
name|fieldValues
operator|=
name|fieldValues
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|obj
lambda|->
block|{
if|if
condition|(
name|obj
operator|instanceof
name|BytesRef
condition|)
block|{
return|return
name|fieldMapper
operator|.
name|fieldType
argument_list|()
operator|.
name|valueForDisplay
argument_list|(
name|obj
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|obj
return|;
block|}
block|}
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
expr_stmt|;
name|IndexSearcher
name|searcher
init|=
operator|new
name|IndexSearcher
argument_list|(
name|hitContext
operator|.
name|reader
argument_list|()
argument_list|)
decl_stmt|;
name|CustomUnifiedHighlighter
name|highlighter
decl_stmt|;
if|if
condition|(
name|field
operator|.
name|fieldOptions
argument_list|()
operator|.
name|numberOfFragments
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// we use a control char to separate values, which is the only char that the custom break iterator
comment|// breaks the text on, so we don't lose the distinction between the different values of a field and we
comment|// get back a snippet per value
name|String
name|fieldValue
init|=
name|mergeFieldValues
argument_list|(
name|fieldValues
argument_list|,
name|MULTIVAL_SEP_CHAR
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|postingshighlight
operator|.
name|CustomSeparatorBreakIterator
name|breakIterator
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|postingshighlight
operator|.
name|CustomSeparatorBreakIterator
argument_list|(
name|MULTIVAL_SEP_CHAR
argument_list|)
decl_stmt|;
name|highlighter
operator|=
operator|new
name|CustomUnifiedHighlighter
argument_list|(
name|searcher
argument_list|,
name|analyzer
argument_list|,
name|mapperHighlighterEntry
operator|.
name|passageFormatter
argument_list|,
name|field
operator|.
name|fieldOptions
argument_list|()
operator|.
name|boundaryScannerLocale
argument_list|()
argument_list|,
name|breakIterator
argument_list|,
name|fieldValue
argument_list|,
name|field
operator|.
name|fieldOptions
argument_list|()
operator|.
name|noMatchSize
argument_list|()
argument_list|)
expr_stmt|;
name|numberOfFragments
operator|=
name|fieldValues
operator|.
name|size
argument_list|()
expr_stmt|;
comment|// we are highlighting the whole content, one snippet per value
block|}
else|else
block|{
comment|//using paragraph separator we make sure that each field value holds a discrete passage for highlighting
name|String
name|fieldValue
init|=
name|mergeFieldValues
argument_list|(
name|fieldValues
argument_list|,
name|MULTIVAL_SEP_CHAR
argument_list|)
decl_stmt|;
name|BreakIterator
name|bi
init|=
name|getBreakIterator
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|highlighter
operator|=
operator|new
name|CustomUnifiedHighlighter
argument_list|(
name|searcher
argument_list|,
name|analyzer
argument_list|,
name|mapperHighlighterEntry
operator|.
name|passageFormatter
argument_list|,
name|field
operator|.
name|fieldOptions
argument_list|()
operator|.
name|boundaryScannerLocale
argument_list|()
argument_list|,
name|bi
argument_list|,
name|fieldValue
argument_list|,
name|field
operator|.
name|fieldOptions
argument_list|()
operator|.
name|noMatchSize
argument_list|()
argument_list|)
expr_stmt|;
name|numberOfFragments
operator|=
name|field
operator|.
name|fieldOptions
argument_list|()
operator|.
name|numberOfFragments
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|field
operator|.
name|fieldOptions
argument_list|()
operator|.
name|requireFieldMatch
argument_list|()
condition|)
block|{
specifier|final
name|String
name|fieldName
init|=
name|highlighterContext
operator|.
name|fieldName
decl_stmt|;
name|highlighter
operator|.
name|setFieldMatcher
argument_list|(
parameter_list|(
name|name
parameter_list|)
lambda|->
name|fieldName
operator|.
name|equals
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|highlighter
operator|.
name|setFieldMatcher
argument_list|(
parameter_list|(
name|name
parameter_list|)
lambda|->
literal|true
argument_list|)
expr_stmt|;
block|}
name|Snippet
index|[]
name|fieldSnippets
init|=
name|highlighter
operator|.
name|highlightField
argument_list|(
name|highlighterContext
operator|.
name|fieldName
argument_list|,
name|highlighterContext
operator|.
name|query
argument_list|,
name|hitContext
operator|.
name|docId
argument_list|()
argument_list|,
name|numberOfFragments
argument_list|)
decl_stmt|;
for|for
control|(
name|Snippet
name|fieldSnippet
range|:
name|fieldSnippets
control|)
block|{
if|if
condition|(
name|Strings
operator|.
name|hasText
argument_list|(
name|fieldSnippet
operator|.
name|getText
argument_list|()
argument_list|)
condition|)
block|{
name|snippets
operator|.
name|add
argument_list|(
name|fieldSnippet
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|FetchPhaseExecutionException
argument_list|(
name|context
argument_list|,
literal|"Failed to highlight field ["
operator|+
name|highlighterContext
operator|.
name|fieldName
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|snippets
operator|=
name|filterSnippets
argument_list|(
name|snippets
argument_list|,
name|field
operator|.
name|fieldOptions
argument_list|()
operator|.
name|numberOfFragments
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|fieldOptions
argument_list|()
operator|.
name|scoreOrdered
argument_list|()
condition|)
block|{
comment|//let's sort the snippets by score if needed
name|CollectionUtil
operator|.
name|introSort
argument_list|(
name|snippets
argument_list|,
parameter_list|(
name|o1
parameter_list|,
name|o2
parameter_list|)
lambda|->
name|Double
operator|.
name|compare
argument_list|(
name|o2
operator|.
name|getScore
argument_list|()
argument_list|,
name|o1
operator|.
name|getScore
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|fragments
init|=
operator|new
name|String
index|[
name|snippets
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fragments
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|fragments
index|[
name|i
index|]
operator|=
name|snippets
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getText
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|fragments
operator|.
name|length
operator|>
literal|0
condition|)
block|{
return|return
operator|new
name|HighlightField
argument_list|(
name|highlighterContext
operator|.
name|fieldName
argument_list|,
name|Text
operator|.
name|convertFromStringArray
argument_list|(
name|fragments
argument_list|)
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|getBreakIterator
specifier|private
name|BreakIterator
name|getBreakIterator
parameter_list|(
name|SearchContextHighlight
operator|.
name|Field
name|field
parameter_list|)
block|{
specifier|final
name|SearchContextHighlight
operator|.
name|FieldOptions
name|fieldOptions
init|=
name|field
operator|.
name|fieldOptions
argument_list|()
decl_stmt|;
specifier|final
name|Locale
name|locale
init|=
name|fieldOptions
operator|.
name|boundaryScannerLocale
argument_list|()
operator|!=
literal|null
condition|?
name|fieldOptions
operator|.
name|boundaryScannerLocale
argument_list|()
else|:
name|Locale
operator|.
name|ROOT
decl_stmt|;
specifier|final
name|HighlightBuilder
operator|.
name|BoundaryScannerType
name|type
init|=
name|fieldOptions
operator|.
name|boundaryScannerType
argument_list|()
operator|!=
literal|null
condition|?
name|fieldOptions
operator|.
name|boundaryScannerType
argument_list|()
else|:
name|HighlightBuilder
operator|.
name|BoundaryScannerType
operator|.
name|SENTENCE
decl_stmt|;
name|int
name|maxLen
init|=
name|fieldOptions
operator|.
name|fragmentCharSize
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|SENTENCE
case|:
if|if
condition|(
name|maxLen
operator|>
literal|0
condition|)
block|{
return|return
name|BoundedBreakIteratorScanner
operator|.
name|getSentence
argument_list|(
name|locale
argument_list|,
name|maxLen
argument_list|)
return|;
block|}
return|return
name|BreakIterator
operator|.
name|getSentenceInstance
argument_list|(
name|locale
argument_list|)
return|;
case|case
name|WORD
case|:
comment|// ignore maxLen
return|return
name|BreakIterator
operator|.
name|getWordInstance
argument_list|(
name|locale
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid boundary scanner type: "
operator|+
name|type
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
DECL|class|HighlighterEntry
specifier|private
specifier|static
class|class
name|HighlighterEntry
block|{
DECL|field|mappers
name|Map
argument_list|<
name|FieldMapper
argument_list|,
name|MapperHighlighterEntry
argument_list|>
name|mappers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
block|}
DECL|class|MapperHighlighterEntry
specifier|private
specifier|static
class|class
name|MapperHighlighterEntry
block|{
DECL|field|passageFormatter
specifier|final
name|CustomPassageFormatter
name|passageFormatter
decl_stmt|;
DECL|method|MapperHighlighterEntry
specifier|private
name|MapperHighlighterEntry
parameter_list|(
name|CustomPassageFormatter
name|passageFormatter
parameter_list|)
block|{
name|this
operator|.
name|passageFormatter
operator|=
name|passageFormatter
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

