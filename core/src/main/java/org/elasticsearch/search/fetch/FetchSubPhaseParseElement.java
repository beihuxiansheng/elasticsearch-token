begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.fetch
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|fetch
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchParseElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|SearchContext
import|;
end_import

begin_comment
comment|/**  * A parse element for a {@link org.elasticsearch.search.fetch.FetchSubPhase} that is used when parsing a search request.  */
end_comment

begin_class
DECL|class|FetchSubPhaseParseElement
specifier|public
specifier|abstract
class|class
name|FetchSubPhaseParseElement
parameter_list|<
name|SubPhaseContext
extends|extends
name|FetchSubPhaseContext
parameter_list|>
implements|implements
name|SearchParseElement
block|{
annotation|@
name|Override
DECL|method|parse
specifier|final
specifier|public
name|void
name|parse
parameter_list|(
name|XContentParser
name|parser
parameter_list|,
name|SearchContext
name|context
parameter_list|)
throws|throws
name|Exception
block|{
name|SubPhaseContext
name|fetchSubPhaseContext
init|=
name|context
operator|.
name|getFetchSubPhaseContext
argument_list|(
name|getContextFactory
argument_list|()
argument_list|)
decl_stmt|;
comment|// this is to make sure that the SubFetchPhase knows it should execute
name|fetchSubPhaseContext
operator|.
name|setHitExecutionNeeded
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|innerParse
argument_list|(
name|parser
argument_list|,
name|fetchSubPhaseContext
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
comment|/**      * Implement the actual parsing here.      */
DECL|method|innerParse
specifier|protected
specifier|abstract
name|void
name|innerParse
parameter_list|(
name|XContentParser
name|parser
parameter_list|,
name|SubPhaseContext
name|fetchSubPhaseContext
parameter_list|,
name|SearchContext
name|searchContext
parameter_list|)
throws|throws
name|Exception
function_decl|;
comment|/**      * Return the ContextFactory for this FetchSubPhase.      */
DECL|method|getContextFactory
specifier|protected
specifier|abstract
name|FetchSubPhase
operator|.
name|ContextFactory
argument_list|<
name|SubPhaseContext
argument_list|>
name|getContextFactory
parameter_list|()
function_decl|;
block|}
end_class

end_unit

