begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.fetch.innerhits
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|fetch
operator|.
name|innerhits
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|Script
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|builder
operator|.
name|SearchSourceBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|highlight
operator|.
name|HighlightBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|sort
operator|.
name|SortBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|sort
operator|.
name|SortOrder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
DECL|class|InnerHitsBuilder
specifier|public
class|class
name|InnerHitsBuilder
implements|implements
name|ToXContent
block|{
DECL|field|innerHits
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|InnerHitsHolder
argument_list|>
name|innerHits
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|(
literal|"inner_hits"
argument_list|)
expr_stmt|;
name|innerXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|endObject
argument_list|()
return|;
block|}
DECL|method|innerXContent
specifier|public
name|void
name|innerXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|InnerHitsHolder
argument_list|>
name|entry
range|:
name|innerHits
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * For nested inner hits the path to collect child nested docs for.      * @param name the name / key of the inner hits in the response      * @param path the path into the nested to collect inner hits for      * @param innerHit the inner hits definition      */
DECL|method|addNestedInnerHits
specifier|public
name|void
name|addNestedInnerHits
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|path
parameter_list|,
name|InnerHit
name|innerHit
parameter_list|)
block|{
if|if
condition|(
name|innerHits
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"inner hits for name: ["
operator|+
name|name
operator|+
literal|"] is already registered"
argument_list|)
throw|;
block|}
name|innerHits
operator|.
name|put
argument_list|(
name|name
argument_list|,
operator|new
name|NestedInnerHitsHolder
argument_list|(
name|path
argument_list|,
name|innerHit
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * For parent/child inner hits the type to collect inner hits for.      * @param name the name / key of the inner hits in the response      * @param type the document type to collect inner hits for      * @param innerHit the inner hits definition      */
DECL|method|addParentChildInnerHits
specifier|public
name|void
name|addParentChildInnerHits
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|type
parameter_list|,
name|InnerHit
name|innerHit
parameter_list|)
block|{
name|innerHits
operator|.
name|put
argument_list|(
name|name
argument_list|,
operator|new
name|ParentChildInnerHitsHolder
argument_list|(
name|type
argument_list|,
name|innerHit
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|class|InnerHitsHolder
specifier|private
specifier|static
class|class
name|InnerHitsHolder
implements|implements
name|ToXContent
block|{
DECL|field|hits
specifier|private
specifier|final
name|InnerHit
name|hits
decl_stmt|;
DECL|method|InnerHitsHolder
specifier|private
name|InnerHitsHolder
parameter_list|(
name|InnerHit
name|hits
parameter_list|)
block|{
name|this
operator|.
name|hits
operator|=
name|hits
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|hits
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
return|;
block|}
block|}
DECL|class|ParentChildInnerHitsHolder
specifier|private
specifier|static
class|class
name|ParentChildInnerHitsHolder
extends|extends
name|InnerHitsHolder
block|{
DECL|field|type
specifier|private
specifier|final
name|String
name|type
decl_stmt|;
DECL|method|ParentChildInnerHitsHolder
specifier|private
name|ParentChildInnerHitsHolder
parameter_list|(
name|String
name|type
parameter_list|,
name|InnerHit
name|hits
parameter_list|)
block|{
name|super
argument_list|(
name|hits
argument_list|)
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|(
literal|"type"
argument_list|)
operator|.
name|startObject
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|super
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
return|;
block|}
block|}
DECL|class|NestedInnerHitsHolder
specifier|private
specifier|static
class|class
name|NestedInnerHitsHolder
extends|extends
name|InnerHitsHolder
block|{
DECL|field|path
specifier|private
specifier|final
name|String
name|path
decl_stmt|;
DECL|method|NestedInnerHitsHolder
specifier|private
name|NestedInnerHitsHolder
parameter_list|(
name|String
name|path
parameter_list|,
name|InnerHit
name|hits
parameter_list|)
block|{
name|super
argument_list|(
name|hits
argument_list|)
expr_stmt|;
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|(
literal|"path"
argument_list|)
operator|.
name|startObject
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|super
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
return|;
block|}
block|}
DECL|class|InnerHit
specifier|public
specifier|static
class|class
name|InnerHit
implements|implements
name|ToXContent
block|{
DECL|field|sourceBuilder
specifier|private
name|SearchSourceBuilder
name|sourceBuilder
decl_stmt|;
DECL|field|path
specifier|private
name|String
name|path
decl_stmt|;
DECL|field|type
specifier|private
name|String
name|type
decl_stmt|;
comment|/**          * The index to start to return hits from. Defaults to<tt>0</tt>.          */
DECL|method|setFrom
specifier|public
name|InnerHit
name|setFrom
parameter_list|(
name|int
name|from
parameter_list|)
block|{
name|sourceBuilder
argument_list|()
operator|.
name|from
argument_list|(
name|from
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The number of search hits to return. Defaults to<tt>10</tt>.          */
DECL|method|setSize
specifier|public
name|InnerHit
name|setSize
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|sourceBuilder
argument_list|()
operator|.
name|size
argument_list|(
name|size
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Applies when sorting, and controls if scores will be tracked as well. Defaults to          *<tt>false</tt>.          */
DECL|method|setTrackScores
specifier|public
name|InnerHit
name|setTrackScores
parameter_list|(
name|boolean
name|trackScores
parameter_list|)
block|{
name|sourceBuilder
argument_list|()
operator|.
name|trackScores
argument_list|(
name|trackScores
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Should each {@link org.elasticsearch.search.SearchHit} be returned with an          * explanation of the hit (ranking).          */
DECL|method|setExplain
specifier|public
name|InnerHit
name|setExplain
parameter_list|(
name|boolean
name|explain
parameter_list|)
block|{
name|sourceBuilder
argument_list|()
operator|.
name|explain
argument_list|(
name|explain
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Should each {@link org.elasticsearch.search.SearchHit} be returned with its          * version.          */
DECL|method|setVersion
specifier|public
name|InnerHit
name|setVersion
parameter_list|(
name|boolean
name|version
parameter_list|)
block|{
name|sourceBuilder
argument_list|()
operator|.
name|version
argument_list|(
name|version
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Add a stored field to be loaded and returned with the inner hit.          */
DECL|method|field
specifier|public
name|InnerHit
name|field
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|sourceBuilder
argument_list|()
operator|.
name|field
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets no fields to be loaded, resulting in only id and type to be returned per field.          */
DECL|method|setNoFields
specifier|public
name|InnerHit
name|setNoFields
parameter_list|()
block|{
name|sourceBuilder
argument_list|()
operator|.
name|noFields
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Indicates whether the response should contain the stored _source for every hit          */
DECL|method|setFetchSource
specifier|public
name|InnerHit
name|setFetchSource
parameter_list|(
name|boolean
name|fetch
parameter_list|)
block|{
name|sourceBuilder
argument_list|()
operator|.
name|fetchSource
argument_list|(
name|fetch
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Indicate that _source should be returned with every hit, with an "include" and/or "exclude" set which can include simple wildcard          * elements.          *          * @param include An optional include (optionally wildcarded) pattern to filter the returned _source          * @param exclude An optional exclude (optionally wildcarded) pattern to filter the returned _source          */
DECL|method|setFetchSource
specifier|public
name|InnerHit
name|setFetchSource
parameter_list|(
annotation|@
name|Nullable
name|String
name|include
parameter_list|,
annotation|@
name|Nullable
name|String
name|exclude
parameter_list|)
block|{
name|sourceBuilder
argument_list|()
operator|.
name|fetchSource
argument_list|(
name|include
argument_list|,
name|exclude
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Indicate that _source should be returned with every hit, with an "include" and/or "exclude" set which can include simple wildcard          * elements.          *          * @param includes An optional list of include (optionally wildcarded) pattern to filter the returned _source          * @param excludes An optional list of exclude (optionally wildcarded) pattern to filter the returned _source          */
DECL|method|setFetchSource
specifier|public
name|InnerHit
name|setFetchSource
parameter_list|(
annotation|@
name|Nullable
name|String
index|[]
name|includes
parameter_list|,
annotation|@
name|Nullable
name|String
index|[]
name|excludes
parameter_list|)
block|{
name|sourceBuilder
argument_list|()
operator|.
name|fetchSource
argument_list|(
name|includes
argument_list|,
name|excludes
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Adds a field data based field to load and return. The field does not have to be stored,          * but its recommended to use non analyzed or numeric fields.          *          * @param name The field to get from the field data cache          */
DECL|method|addFieldDataField
specifier|public
name|InnerHit
name|addFieldDataField
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|sourceBuilder
argument_list|()
operator|.
name|fieldDataField
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Adds a script based field to load and return. The field does not have to be stored,          * but its recommended to use non analyzed or numeric fields.          *          * @param name   The name that will represent this value in the return hit          * @param script The script to use          */
DECL|method|addScriptField
specifier|public
name|InnerHit
name|addScriptField
parameter_list|(
name|String
name|name
parameter_list|,
name|Script
name|script
parameter_list|)
block|{
name|sourceBuilder
argument_list|()
operator|.
name|scriptField
argument_list|(
name|name
argument_list|,
name|script
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Adds a sort against the given field name and the sort ordering.          *          * @param field The name of the field          * @param order The sort ordering          */
DECL|method|addSort
specifier|public
name|InnerHit
name|addSort
parameter_list|(
name|String
name|field
parameter_list|,
name|SortOrder
name|order
parameter_list|)
block|{
name|sourceBuilder
argument_list|()
operator|.
name|sort
argument_list|(
name|field
argument_list|,
name|order
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Adds a generic sort builder.          *          * @see org.elasticsearch.search.sort.SortBuilders          */
DECL|method|addSort
specifier|public
name|InnerHit
name|addSort
parameter_list|(
name|SortBuilder
name|sort
parameter_list|)
block|{
name|sourceBuilder
argument_list|()
operator|.
name|sort
argument_list|(
name|sort
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|highlighter
specifier|public
name|HighlightBuilder
name|highlighter
parameter_list|()
block|{
return|return
name|sourceBuilder
argument_list|()
operator|.
name|highlighter
argument_list|()
return|;
block|}
DECL|method|highlighter
specifier|public
name|InnerHit
name|highlighter
parameter_list|(
name|HighlightBuilder
name|highlightBuilder
parameter_list|)
block|{
name|sourceBuilder
argument_list|()
operator|.
name|highlighter
argument_list|(
name|highlightBuilder
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|sourceBuilder
specifier|protected
name|SearchSourceBuilder
name|sourceBuilder
parameter_list|()
block|{
if|if
condition|(
name|sourceBuilder
operator|==
literal|null
condition|)
block|{
name|sourceBuilder
operator|=
operator|new
name|SearchSourceBuilder
argument_list|()
expr_stmt|;
block|}
return|return
name|sourceBuilder
return|;
block|}
comment|/**          * Sets the query to run for collecting the inner hits.          */
DECL|method|setQuery
specifier|public
name|InnerHit
name|setQuery
parameter_list|(
name|QueryBuilder
name|query
parameter_list|)
block|{
name|sourceBuilder
argument_list|()
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|innerHits
specifier|public
name|InnerHit
name|innerHits
parameter_list|(
name|InnerHitsBuilder
name|innerHitsBuilder
parameter_list|)
block|{
name|sourceBuilder
argument_list|()
operator|.
name|innerHits
argument_list|(
name|innerHitsBuilder
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|sourceBuilder
operator|!=
literal|null
condition|)
block|{
name|sourceBuilder
operator|.
name|innerToXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
return|;
block|}
block|}
block|}
end_class

end_unit

