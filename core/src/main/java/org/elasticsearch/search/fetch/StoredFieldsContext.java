begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.fetch
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|fetch
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParsingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Writeable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestRequest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_comment
comment|/**  * Context used to fetch the {@code stored_fields}.  */
end_comment

begin_class
DECL|class|StoredFieldsContext
specifier|public
class|class
name|StoredFieldsContext
implements|implements
name|Writeable
block|{
DECL|field|_NONE_
specifier|public
specifier|static
specifier|final
name|String
name|_NONE_
init|=
literal|"_none_"
decl_stmt|;
DECL|field|fieldNames
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|fieldNames
decl_stmt|;
DECL|field|fetchFields
specifier|private
name|boolean
name|fetchFields
decl_stmt|;
DECL|method|StoredFieldsContext
specifier|private
name|StoredFieldsContext
parameter_list|(
name|boolean
name|fetchFields
parameter_list|)
block|{
name|this
operator|.
name|fetchFields
operator|=
name|fetchFields
expr_stmt|;
name|this
operator|.
name|fieldNames
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|StoredFieldsContext
specifier|private
name|StoredFieldsContext
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|fieldNames
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|fieldNames
argument_list|,
literal|"fieldNames must not be null"
argument_list|)
expr_stmt|;
name|this
operator|.
name|fetchFields
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|fieldNames
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|fieldNames
argument_list|)
expr_stmt|;
block|}
DECL|method|StoredFieldsContext
specifier|public
name|StoredFieldsContext
parameter_list|(
name|StoredFieldsContext
name|other
parameter_list|)
block|{
name|this
operator|.
name|fetchFields
operator|=
name|other
operator|.
name|fetchFields
argument_list|()
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|fieldNames
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|fieldNames
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|other
operator|.
name|fieldNames
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|fieldNames
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|StoredFieldsContext
specifier|public
name|StoredFieldsContext
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|fetchFields
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
if|if
condition|(
name|fetchFields
condition|)
block|{
name|this
operator|.
name|fieldNames
operator|=
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
name|in
operator|.
name|readGenericValue
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|fieldNames
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
name|fetchFields
argument_list|)
expr_stmt|;
if|if
condition|(
name|fetchFields
condition|)
block|{
name|out
operator|.
name|writeGenericValue
argument_list|(
name|fieldNames
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Gets the field names to load and return as part of the search request.      */
DECL|method|fieldNames
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|fieldNames
parameter_list|()
block|{
return|return
name|fieldNames
return|;
block|}
comment|/**      * Adds the field names {@code fieldNames} to the list of fields to load.      */
DECL|method|addFieldNames
specifier|public
name|StoredFieldsContext
name|addFieldNames
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|fieldNames
parameter_list|)
block|{
if|if
condition|(
name|fetchFields
operator|==
literal|false
operator|||
name|fieldNames
operator|.
name|contains
argument_list|(
name|_NONE_
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"cannot combine _none_ with other fields"
argument_list|)
throw|;
block|}
name|this
operator|.
name|fieldNames
operator|.
name|addAll
argument_list|(
name|fieldNames
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Adds a field name {@code field} to the list of fields to load.      */
DECL|method|addFieldName
specifier|public
name|StoredFieldsContext
name|addFieldName
parameter_list|(
name|String
name|field
parameter_list|)
block|{
if|if
condition|(
name|fetchFields
operator|==
literal|false
operator|||
name|_NONE_
operator|.
name|equals
argument_list|(
name|field
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"cannot combine _none_ with other fields"
argument_list|)
throw|;
block|}
name|this
operator|.
name|fieldNames
operator|.
name|add
argument_list|(
name|field
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Returns true if the stored fields should be fetched, false otherwise.      */
DECL|method|fetchFields
specifier|public
name|boolean
name|fetchFields
parameter_list|()
block|{
return|return
name|fetchFields
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|StoredFieldsContext
name|that
init|=
operator|(
name|StoredFieldsContext
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|fetchFields
operator|!=
name|that
operator|.
name|fetchFields
condition|)
return|return
literal|false
return|;
return|return
name|fieldNames
operator|!=
literal|null
condition|?
name|fieldNames
operator|.
name|equals
argument_list|(
name|that
operator|.
name|fieldNames
argument_list|)
else|:
name|that
operator|.
name|fieldNames
operator|==
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
name|fieldNames
operator|!=
literal|null
condition|?
name|fieldNames
operator|.
name|hashCode
argument_list|()
else|:
literal|0
decl_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|fetchFields
condition|?
literal|1
else|:
literal|0
operator|)
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|toXContent
specifier|public
name|void
name|toXContent
parameter_list|(
name|String
name|preferredName
parameter_list|,
name|XContentBuilder
name|builder
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|fetchFields
operator|==
literal|false
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|preferredName
argument_list|,
name|_NONE_
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fieldNames
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|fieldNames
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|preferredName
argument_list|,
name|fieldNames
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|startArray
argument_list|(
name|preferredName
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|fieldName
range|:
name|fieldNames
control|)
block|{
name|builder
operator|.
name|value
argument_list|(
name|fieldName
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|fromList
specifier|public
specifier|static
name|StoredFieldsContext
name|fromList
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|fieldNames
parameter_list|)
block|{
if|if
condition|(
name|fieldNames
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
name|_NONE_
operator|.
name|equals
argument_list|(
name|fieldNames
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
condition|)
block|{
return|return
operator|new
name|StoredFieldsContext
argument_list|(
literal|false
argument_list|)
return|;
block|}
if|if
condition|(
name|fieldNames
operator|.
name|contains
argument_list|(
name|_NONE_
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"cannot combine _none_ with other fields"
argument_list|)
throw|;
block|}
return|return
operator|new
name|StoredFieldsContext
argument_list|(
name|fieldNames
argument_list|)
return|;
block|}
DECL|method|fromXContent
specifier|public
specifier|static
name|StoredFieldsContext
name|fromXContent
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|QueryParseContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|XContentParser
name|parser
init|=
name|context
operator|.
name|parser
argument_list|()
decl_stmt|;
name|XContentParser
operator|.
name|Token
name|token
init|=
name|parser
operator|.
name|currentToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_STRING
condition|)
block|{
return|return
name|fromList
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|parser
operator|.
name|text
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_ARRAY
condition|)
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_ARRAY
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|fromList
argument_list|(
name|list
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|ParsingException
argument_list|(
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|,
literal|"Expected ["
operator|+
name|XContentParser
operator|.
name|Token
operator|.
name|VALUE_STRING
operator|+
literal|"] or ["
operator|+
name|XContentParser
operator|.
name|Token
operator|.
name|START_ARRAY
operator|+
literal|"] in ["
operator|+
name|fieldName
operator|+
literal|"] but found ["
operator|+
name|token
operator|+
literal|"]"
argument_list|,
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|)
throw|;
block|}
block|}
DECL|method|fromRestRequest
specifier|public
specifier|static
name|StoredFieldsContext
name|fromRestRequest
parameter_list|(
name|String
name|name
parameter_list|,
name|RestRequest
name|request
parameter_list|)
block|{
name|String
name|sField
init|=
name|request
operator|.
name|param
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|sField
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|sFields
init|=
name|Strings
operator|.
name|splitStringByCommaToArray
argument_list|(
name|sField
argument_list|)
decl_stmt|;
return|return
name|fromList
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|sFields
argument_list|)
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

