begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.fetch.subphase
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|fetch
operator|.
name|subphase
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|FieldDoc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|ScoreDoc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TopDocs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchHit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchHits
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|fetch
operator|.
name|FetchPhase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|fetch
operator|.
name|FetchSearchResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|fetch
operator|.
name|FetchSubPhase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|SearchContext
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
DECL|class|InnerHitsFetchSubPhase
specifier|public
specifier|final
class|class
name|InnerHitsFetchSubPhase
implements|implements
name|FetchSubPhase
block|{
DECL|field|fetchPhase
specifier|private
specifier|final
name|FetchPhase
name|fetchPhase
decl_stmt|;
DECL|method|InnerHitsFetchSubPhase
specifier|public
name|InnerHitsFetchSubPhase
parameter_list|(
name|FetchPhase
name|fetchPhase
parameter_list|)
block|{
name|this
operator|.
name|fetchPhase
operator|=
name|fetchPhase
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hitsExecute
specifier|public
name|void
name|hitsExecute
parameter_list|(
name|SearchContext
name|context
parameter_list|,
name|SearchHit
index|[]
name|hits
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|(
name|context
operator|.
name|innerHits
argument_list|()
operator|!=
literal|null
operator|&&
name|context
operator|.
name|innerHits
argument_list|()
operator|.
name|getInnerHits
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|)
operator|==
literal|false
condition|)
block|{
return|return;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|InnerHitsContext
operator|.
name|InnerHitSubContext
argument_list|>
name|entry
range|:
name|context
operator|.
name|innerHits
argument_list|()
operator|.
name|getInnerHits
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|InnerHitsContext
operator|.
name|InnerHitSubContext
name|innerHits
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|TopDocs
index|[]
name|topDocs
init|=
name|innerHits
operator|.
name|topDocs
argument_list|(
name|hits
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hits
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|SearchHit
name|hit
init|=
name|hits
index|[
name|i
index|]
decl_stmt|;
name|TopDocs
name|topDoc
init|=
name|topDocs
index|[
name|i
index|]
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|SearchHits
argument_list|>
name|results
init|=
name|hit
operator|.
name|getInnerHits
argument_list|()
decl_stmt|;
if|if
condition|(
name|results
operator|==
literal|null
condition|)
block|{
name|hit
operator|.
name|setInnerHits
argument_list|(
name|results
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|innerHits
operator|.
name|queryResult
argument_list|()
operator|.
name|topDocs
argument_list|(
name|topDoc
argument_list|,
name|innerHits
operator|.
name|sort
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|innerHits
operator|.
name|sort
argument_list|()
operator|.
name|formats
argument_list|)
expr_stmt|;
name|int
index|[]
name|docIdsToLoad
init|=
operator|new
name|int
index|[
name|topDoc
operator|.
name|scoreDocs
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|topDoc
operator|.
name|scoreDocs
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|docIdsToLoad
index|[
name|j
index|]
operator|=
name|topDoc
operator|.
name|scoreDocs
index|[
name|j
index|]
operator|.
name|doc
expr_stmt|;
block|}
name|innerHits
operator|.
name|docIdsToLoad
argument_list|(
name|docIdsToLoad
argument_list|,
literal|0
argument_list|,
name|docIdsToLoad
operator|.
name|length
argument_list|)
expr_stmt|;
name|fetchPhase
operator|.
name|execute
argument_list|(
name|innerHits
argument_list|)
expr_stmt|;
name|FetchSearchResult
name|fetchResult
init|=
name|innerHits
operator|.
name|fetchResult
argument_list|()
decl_stmt|;
name|SearchHit
index|[]
name|internalHits
init|=
name|fetchResult
operator|.
name|fetchResult
argument_list|()
operator|.
name|hits
argument_list|()
operator|.
name|internalHits
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|internalHits
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|ScoreDoc
name|scoreDoc
init|=
name|topDoc
operator|.
name|scoreDocs
index|[
name|j
index|]
decl_stmt|;
name|SearchHit
name|searchHitFields
init|=
name|internalHits
index|[
name|j
index|]
decl_stmt|;
name|searchHitFields
operator|.
name|score
argument_list|(
name|scoreDoc
operator|.
name|score
argument_list|)
expr_stmt|;
if|if
condition|(
name|scoreDoc
operator|instanceof
name|FieldDoc
condition|)
block|{
name|FieldDoc
name|fieldDoc
init|=
operator|(
name|FieldDoc
operator|)
name|scoreDoc
decl_stmt|;
name|searchHitFields
operator|.
name|sortValues
argument_list|(
name|fieldDoc
operator|.
name|fields
argument_list|,
name|innerHits
operator|.
name|sort
argument_list|()
operator|.
name|formats
argument_list|)
expr_stmt|;
block|}
block|}
name|results
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|fetchResult
operator|.
name|hits
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

