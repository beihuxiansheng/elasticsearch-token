begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.lookup
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|lookup
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
operator|.
name|Builder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import

begin_class
DECL|class|IndexLookup
specifier|public
class|class
name|IndexLookup
block|{
comment|/**      * Flag to pass to {@link IndexField#get(Object, int)} if you require      * offsets in the returned {@link IndexFieldTerm}.      */
DECL|field|FLAG_OFFSETS
specifier|public
specifier|static
specifier|final
name|int
name|FLAG_OFFSETS
init|=
literal|2
decl_stmt|;
comment|/**      * Flag to pass to {@link IndexField#get(Object, int)} if you require      * payloads in the returned {@link IndexFieldTerm}.      */
DECL|field|FLAG_PAYLOADS
specifier|public
specifier|static
specifier|final
name|int
name|FLAG_PAYLOADS
init|=
literal|4
decl_stmt|;
comment|/**      * Flag to pass to {@link IndexField#get(Object, int)} if you require      * frequencies in the returned {@link IndexFieldTerm}. Frequencies might be      * returned anyway for some lucene codecs even if this flag is no set.      */
DECL|field|FLAG_FREQUENCIES
specifier|public
specifier|static
specifier|final
name|int
name|FLAG_FREQUENCIES
init|=
literal|8
decl_stmt|;
comment|/**      * Flag to pass to {@link IndexField#get(Object, int)} if you require      * positions in the returned {@link IndexFieldTerm}.      */
DECL|field|FLAG_POSITIONS
specifier|public
specifier|static
specifier|final
name|int
name|FLAG_POSITIONS
init|=
literal|16
decl_stmt|;
comment|/**      * Flag to pass to {@link IndexField#get(Object, int)} if you require      * positions in the returned {@link IndexFieldTerm}.      */
DECL|field|FLAG_CACHE
specifier|public
specifier|static
specifier|final
name|int
name|FLAG_CACHE
init|=
literal|32
decl_stmt|;
DECL|method|IndexLookup
specifier|public
name|IndexLookup
parameter_list|(
name|Builder
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|builder
parameter_list|)
block|{
name|builder
operator|.
name|put
argument_list|(
literal|"_FREQUENCIES"
argument_list|,
name|IndexLookup
operator|.
name|FLAG_FREQUENCIES
argument_list|)
expr_stmt|;
name|builder
operator|.
name|put
argument_list|(
literal|"_POSITIONS"
argument_list|,
name|IndexLookup
operator|.
name|FLAG_POSITIONS
argument_list|)
expr_stmt|;
name|builder
operator|.
name|put
argument_list|(
literal|"_OFFSETS"
argument_list|,
name|IndexLookup
operator|.
name|FLAG_OFFSETS
argument_list|)
expr_stmt|;
name|builder
operator|.
name|put
argument_list|(
literal|"_PAYLOADS"
argument_list|,
name|IndexLookup
operator|.
name|FLAG_PAYLOADS
argument_list|)
expr_stmt|;
name|builder
operator|.
name|put
argument_list|(
literal|"_CACHE"
argument_list|,
name|IndexLookup
operator|.
name|FLAG_CACHE
argument_list|)
expr_stmt|;
block|}
DECL|method|getLeafIndexLookup
specifier|public
name|LeafIndexLookup
name|getLeafIndexLookup
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
block|{
return|return
operator|new
name|LeafIndexLookup
argument_list|(
name|context
argument_list|)
return|;
block|}
block|}
end_class

end_unit

