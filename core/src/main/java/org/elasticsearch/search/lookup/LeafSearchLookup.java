begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.lookup
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|lookup
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|unmodifiableMap
import|;
end_import

begin_comment
comment|/**  * Per-segment version of {@link SearchLookup}.  */
end_comment

begin_class
DECL|class|LeafSearchLookup
specifier|public
class|class
name|LeafSearchLookup
block|{
DECL|field|ctx
specifier|final
name|LeafReaderContext
name|ctx
decl_stmt|;
DECL|field|docMap
specifier|final
name|LeafDocLookup
name|docMap
decl_stmt|;
DECL|field|sourceLookup
specifier|final
name|SourceLookup
name|sourceLookup
decl_stmt|;
DECL|field|fieldsLookup
specifier|final
name|LeafFieldsLookup
name|fieldsLookup
decl_stmt|;
DECL|field|indexLookup
specifier|final
name|LeafIndexLookup
name|indexLookup
decl_stmt|;
DECL|field|asMap
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|asMap
decl_stmt|;
DECL|method|LeafSearchLookup
specifier|public
name|LeafSearchLookup
parameter_list|(
name|LeafReaderContext
name|ctx
parameter_list|,
name|LeafDocLookup
name|docMap
parameter_list|,
name|SourceLookup
name|sourceLookup
parameter_list|,
name|LeafFieldsLookup
name|fieldsLookup
parameter_list|,
name|LeafIndexLookup
name|indexLookup
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|topLevelMap
parameter_list|)
block|{
name|this
operator|.
name|ctx
operator|=
name|ctx
expr_stmt|;
name|this
operator|.
name|docMap
operator|=
name|docMap
expr_stmt|;
name|this
operator|.
name|sourceLookup
operator|=
name|sourceLookup
expr_stmt|;
name|this
operator|.
name|fieldsLookup
operator|=
name|fieldsLookup
expr_stmt|;
name|this
operator|.
name|indexLookup
operator|=
name|indexLookup
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|asMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|topLevelMap
operator|.
name|size
argument_list|()
operator|+
literal|5
argument_list|)
decl_stmt|;
name|asMap
operator|.
name|putAll
argument_list|(
name|topLevelMap
argument_list|)
expr_stmt|;
name|asMap
operator|.
name|put
argument_list|(
literal|"doc"
argument_list|,
name|docMap
argument_list|)
expr_stmt|;
name|asMap
operator|.
name|put
argument_list|(
literal|"_doc"
argument_list|,
name|docMap
argument_list|)
expr_stmt|;
name|asMap
operator|.
name|put
argument_list|(
literal|"_source"
argument_list|,
name|sourceLookup
argument_list|)
expr_stmt|;
name|asMap
operator|.
name|put
argument_list|(
literal|"_fields"
argument_list|,
name|fieldsLookup
argument_list|)
expr_stmt|;
name|asMap
operator|.
name|put
argument_list|(
literal|"_index"
argument_list|,
name|indexLookup
argument_list|)
expr_stmt|;
name|this
operator|.
name|asMap
operator|=
name|unmodifiableMap
argument_list|(
name|asMap
argument_list|)
expr_stmt|;
block|}
DECL|method|asMap
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|asMap
parameter_list|()
block|{
return|return
name|this
operator|.
name|asMap
return|;
block|}
DECL|method|source
specifier|public
name|SourceLookup
name|source
parameter_list|()
block|{
return|return
name|this
operator|.
name|sourceLookup
return|;
block|}
DECL|method|indexLookup
specifier|public
name|LeafIndexLookup
name|indexLookup
parameter_list|()
block|{
return|return
name|this
operator|.
name|indexLookup
return|;
block|}
DECL|method|fields
specifier|public
name|LeafFieldsLookup
name|fields
parameter_list|()
block|{
return|return
name|this
operator|.
name|fieldsLookup
return|;
block|}
DECL|method|doc
specifier|public
name|LeafDocLookup
name|doc
parameter_list|()
block|{
return|return
name|this
operator|.
name|docMap
return|;
block|}
DECL|method|setDocument
specifier|public
name|void
name|setDocument
parameter_list|(
name|int
name|docId
parameter_list|)
block|{
name|docMap
operator|.
name|setDocument
argument_list|(
name|docId
argument_list|)
expr_stmt|;
name|sourceLookup
operator|.
name|setSegmentAndDocument
argument_list|(
name|ctx
argument_list|,
name|docId
argument_list|)
expr_stmt|;
name|fieldsLookup
operator|.
name|setDocument
argument_list|(
name|docId
argument_list|)
expr_stmt|;
name|indexLookup
operator|.
name|setDocument
argument_list|(
name|docId
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

