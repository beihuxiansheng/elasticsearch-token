begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Streamable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|text
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * The target that the search request was executed on.  */
end_comment

begin_class
DECL|class|SearchShardTarget
specifier|public
class|class
name|SearchShardTarget
implements|implements
name|Streamable
implements|,
name|Comparable
argument_list|<
name|SearchShardTarget
argument_list|>
block|{
DECL|field|nodeId
specifier|private
name|Text
name|nodeId
decl_stmt|;
DECL|field|index
specifier|private
name|Text
name|index
decl_stmt|;
DECL|field|shardId
specifier|private
name|int
name|shardId
decl_stmt|;
DECL|method|SearchShardTarget
specifier|private
name|SearchShardTarget
parameter_list|()
block|{      }
DECL|method|SearchShardTarget
specifier|public
name|SearchShardTarget
parameter_list|(
name|String
name|nodeId
parameter_list|,
name|String
name|index
parameter_list|,
name|int
name|shardId
parameter_list|)
block|{
name|this
operator|.
name|nodeId
operator|=
name|nodeId
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|Text
argument_list|(
name|nodeId
argument_list|)
expr_stmt|;
name|this
operator|.
name|index
operator|=
operator|new
name|Text
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|this
operator|.
name|shardId
operator|=
name|shardId
expr_stmt|;
block|}
annotation|@
name|Nullable
DECL|method|nodeId
specifier|public
name|String
name|nodeId
parameter_list|()
block|{
return|return
name|nodeId
operator|.
name|string
argument_list|()
return|;
block|}
annotation|@
name|Nullable
DECL|method|getNodeId
specifier|public
name|String
name|getNodeId
parameter_list|()
block|{
return|return
name|nodeId
argument_list|()
return|;
block|}
DECL|method|nodeIdText
specifier|public
name|Text
name|nodeIdText
parameter_list|()
block|{
return|return
name|this
operator|.
name|nodeId
return|;
block|}
DECL|method|index
specifier|public
name|String
name|index
parameter_list|()
block|{
return|return
name|index
operator|.
name|string
argument_list|()
return|;
block|}
DECL|method|getIndex
specifier|public
name|String
name|getIndex
parameter_list|()
block|{
return|return
name|index
argument_list|()
return|;
block|}
DECL|method|indexText
specifier|public
name|Text
name|indexText
parameter_list|()
block|{
return|return
name|this
operator|.
name|index
return|;
block|}
DECL|method|shardId
specifier|public
name|int
name|shardId
parameter_list|()
block|{
return|return
name|shardId
return|;
block|}
DECL|method|getShardId
specifier|public
name|int
name|getShardId
parameter_list|()
block|{
return|return
name|shardId
return|;
block|}
DECL|method|readSearchShardTarget
specifier|public
specifier|static
name|SearchShardTarget
name|readSearchShardTarget
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|SearchShardTarget
name|result
init|=
operator|new
name|SearchShardTarget
argument_list|()
decl_stmt|;
name|result
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|compareTo
specifier|public
name|int
name|compareTo
parameter_list|(
name|SearchShardTarget
name|o
parameter_list|)
block|{
name|int
name|i
init|=
name|index
operator|.
name|string
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o
operator|.
name|index
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
name|i
operator|=
name|shardId
operator|-
name|o
operator|.
name|shardId
expr_stmt|;
block|}
return|return
name|i
return|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|nodeId
operator|=
name|in
operator|.
name|readText
argument_list|()
expr_stmt|;
block|}
name|index
operator|=
name|in
operator|.
name|readText
argument_list|()
expr_stmt|;
name|shardId
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|nodeId
operator|==
literal|null
condition|)
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeText
argument_list|(
name|nodeId
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|writeText
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|shardId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|SearchShardTarget
name|that
init|=
operator|(
name|SearchShardTarget
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|shardId
operator|!=
name|that
operator|.
name|shardId
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|index
operator|!=
literal|null
condition|?
operator|!
name|index
operator|.
name|equals
argument_list|(
name|that
operator|.
name|index
argument_list|)
else|:
name|that
operator|.
name|index
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|nodeId
operator|!=
literal|null
condition|?
operator|!
name|nodeId
operator|.
name|equals
argument_list|(
name|that
operator|.
name|nodeId
argument_list|)
else|:
name|that
operator|.
name|nodeId
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
name|nodeId
operator|!=
literal|null
condition|?
name|nodeId
operator|.
name|hashCode
argument_list|()
else|:
literal|0
decl_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|index
operator|!=
literal|null
condition|?
name|index
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|shardId
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
if|if
condition|(
name|nodeId
operator|==
literal|null
condition|)
block|{
return|return
literal|"[_na_]["
operator|+
name|index
operator|+
literal|"]["
operator|+
name|shardId
operator|+
literal|"]"
return|;
block|}
return|return
literal|"["
operator|+
name|nodeId
operator|+
literal|"]["
operator|+
name|index
operator|+
literal|"]["
operator|+
name|shardId
operator|+
literal|"]"
return|;
block|}
block|}
end_class

end_unit

