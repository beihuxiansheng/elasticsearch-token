begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.internal
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Collector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Explanation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Weight
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ExceptionsHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lease
operator|.
name|Releasable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|Engine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|dfs
operator|.
name|CachedDfSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|SearchContext
operator|.
name|Lifetime
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Context-aware extension of {@link IndexSearcher}.  */
end_comment

begin_class
DECL|class|ContextIndexSearcher
specifier|public
class|class
name|ContextIndexSearcher
extends|extends
name|IndexSearcher
implements|implements
name|Releasable
block|{
comment|/** The wrapped {@link IndexSearcher}. The reason why we sometimes prefer delegating to this searcher instead of<tt>super</tt> is that      *  this instance may have more assertions, for example if it comes from MockInternalEngine which wraps the IndexSearcher into an      *  AssertingIndexSearcher. */
DECL|field|in
specifier|private
specifier|final
name|IndexSearcher
name|in
decl_stmt|;
DECL|field|searchContext
specifier|private
specifier|final
name|SearchContext
name|searchContext
decl_stmt|;
DECL|field|dfSource
specifier|private
name|CachedDfSource
name|dfSource
decl_stmt|;
DECL|method|ContextIndexSearcher
specifier|public
name|ContextIndexSearcher
parameter_list|(
name|SearchContext
name|searchContext
parameter_list|,
name|Engine
operator|.
name|Searcher
name|searcher
parameter_list|)
block|{
name|super
argument_list|(
name|searcher
operator|.
name|reader
argument_list|()
argument_list|)
expr_stmt|;
name|in
operator|=
name|searcher
operator|.
name|searcher
argument_list|()
expr_stmt|;
name|this
operator|.
name|searchContext
operator|=
name|searchContext
expr_stmt|;
name|setSimilarity
argument_list|(
name|searcher
operator|.
name|searcher
argument_list|()
operator|.
name|getSimilarity
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{     }
DECL|method|dfSource
specifier|public
name|void
name|dfSource
parameter_list|(
name|CachedDfSource
name|dfSource
parameter_list|)
block|{
name|this
operator|.
name|dfSource
operator|=
name|dfSource
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createNormalizedWeight
specifier|public
name|Weight
name|createNormalizedWeight
parameter_list|(
name|Query
name|query
parameter_list|,
name|boolean
name|needsScores
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
comment|// if scores are needed and we have dfs data then use it
if|if
condition|(
name|dfSource
operator|!=
literal|null
operator|&&
name|needsScores
condition|)
block|{
return|return
name|dfSource
operator|.
name|createNormalizedWeight
argument_list|(
name|query
argument_list|,
name|needsScores
argument_list|)
return|;
block|}
return|return
name|in
operator|.
name|createNormalizedWeight
argument_list|(
name|query
argument_list|,
name|needsScores
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|searchContext
operator|.
name|clearReleasables
argument_list|(
name|Lifetime
operator|.
name|COLLECTION
argument_list|)
expr_stmt|;
throw|throw
name|ExceptionsHelper
operator|.
name|convertToElastic
argument_list|(
name|t
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|explain
specifier|public
name|Explanation
name|explain
parameter_list|(
name|Query
name|query
parameter_list|,
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
return|return
name|in
operator|.
name|explain
argument_list|(
name|query
argument_list|,
name|doc
argument_list|)
return|;
block|}
finally|finally
block|{
name|searchContext
operator|.
name|clearReleasables
argument_list|(
name|Lifetime
operator|.
name|COLLECTION
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|search
specifier|protected
name|void
name|search
parameter_list|(
name|List
argument_list|<
name|LeafReaderContext
argument_list|>
name|leaves
parameter_list|,
name|Weight
name|weight
parameter_list|,
name|Collector
name|collector
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|super
operator|.
name|search
argument_list|(
name|leaves
argument_list|,
name|weight
argument_list|,
name|collector
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|searchContext
operator|.
name|clearReleasables
argument_list|(
name|Lifetime
operator|.
name|COLLECTION
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

