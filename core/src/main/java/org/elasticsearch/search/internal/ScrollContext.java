begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.internal
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|ScoreDoc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|Scroll
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/** Wrapper around information that needs to stay around when scrolling. */
end_comment

begin_class
DECL|class|ScrollContext
specifier|public
specifier|final
class|class
name|ScrollContext
block|{
DECL|field|context
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|context
init|=
literal|null
decl_stmt|;
DECL|field|totalHits
specifier|public
name|int
name|totalHits
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|maxScore
specifier|public
name|float
name|maxScore
decl_stmt|;
DECL|field|lastEmittedDoc
specifier|public
name|ScoreDoc
name|lastEmittedDoc
decl_stmt|;
DECL|field|scroll
specifier|public
name|Scroll
name|scroll
decl_stmt|;
comment|/**      * Returns the object or<code>null</code> if the given key does not have a      * value in the context      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// (T)object
DECL|method|getFromContext
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|getFromContext
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|context
operator|!=
literal|null
condition|?
operator|(
name|T
operator|)
name|context
operator|.
name|get
argument_list|(
name|key
argument_list|)
else|:
literal|null
return|;
block|}
comment|/**      * Puts the object into the context      */
DECL|method|putInContext
specifier|public
name|void
name|putInContext
parameter_list|(
name|String
name|key
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
name|context
operator|==
literal|null
condition|)
block|{
name|context
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|context
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

