begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.internal
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|AliasMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableOpenMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|BoolQueryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryShardContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|AliasFilterParsingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|InvalidAliasNameException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|Scroll
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|builder
operator|.
name|SearchSourceBuilder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_comment
comment|/**  * Shard level request that represents a search.  * It provides all the methods that the {@link org.elasticsearch.search.internal.SearchContext} needs.  * Provides a cache key based on its content that can be used to cache shard level response.  */
end_comment

begin_interface
DECL|interface|ShardSearchRequest
specifier|public
interface|interface
name|ShardSearchRequest
block|{
DECL|method|shardId
name|ShardId
name|shardId
parameter_list|()
function_decl|;
DECL|method|types
name|String
index|[]
name|types
parameter_list|()
function_decl|;
DECL|method|source
name|SearchSourceBuilder
name|source
parameter_list|()
function_decl|;
DECL|method|source
name|void
name|source
parameter_list|(
name|SearchSourceBuilder
name|source
parameter_list|)
function_decl|;
DECL|method|numberOfShards
name|int
name|numberOfShards
parameter_list|()
function_decl|;
DECL|method|searchType
name|SearchType
name|searchType
parameter_list|()
function_decl|;
DECL|method|filteringAliases
name|QueryBuilder
name|filteringAliases
parameter_list|()
function_decl|;
DECL|method|indexBoost
name|float
name|indexBoost
parameter_list|()
function_decl|;
DECL|method|nowInMillis
name|long
name|nowInMillis
parameter_list|()
function_decl|;
DECL|method|requestCache
name|Boolean
name|requestCache
parameter_list|()
function_decl|;
DECL|method|scroll
name|Scroll
name|scroll
parameter_list|()
function_decl|;
comment|/**      * Sets if this shard search needs to be profiled or not      * @param profile True if the shard should be profiled      */
DECL|method|setProfile
name|void
name|setProfile
parameter_list|(
name|boolean
name|profile
parameter_list|)
function_decl|;
comment|/**      * Returns true if this shard search is being profiled or not      */
DECL|method|isProfile
name|boolean
name|isProfile
parameter_list|()
function_decl|;
comment|/**      * Returns the cache key for this shard search request, based on its content      */
DECL|method|cacheKey
name|BytesReference
name|cacheKey
parameter_list|()
throws|throws
name|IOException
function_decl|;
comment|/**      * Rewrites this request into its primitive form. e.g. by rewriting the      * QueryBuilder.      */
DECL|method|rewrite
name|void
name|rewrite
parameter_list|(
name|QueryShardContext
name|context
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**      * Returns the filter associated with listed filtering aliases.      *<p>      * The list of filtering aliases should be obtained by calling MetaData.filteringAliases.      * Returns<tt>null</tt> if no filtering is required.</p>      */
DECL|method|parseAliasFilter
specifier|static
name|QueryBuilder
name|parseAliasFilter
parameter_list|(
name|Function
argument_list|<
name|XContentParser
argument_list|,
name|QueryParseContext
argument_list|>
name|contextFactory
parameter_list|,
name|IndexMetaData
name|metaData
parameter_list|,
name|String
modifier|...
name|aliasNames
parameter_list|)
block|{
if|if
condition|(
name|aliasNames
operator|==
literal|null
operator|||
name|aliasNames
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Index
name|index
init|=
name|metaData
operator|.
name|getIndex
argument_list|()
decl_stmt|;
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|AliasMetaData
argument_list|>
name|aliases
init|=
name|metaData
operator|.
name|getAliases
argument_list|()
decl_stmt|;
name|Function
argument_list|<
name|AliasMetaData
argument_list|,
name|QueryBuilder
argument_list|>
name|parserFunction
init|=
parameter_list|(
name|alias
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|alias
operator|.
name|filter
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
try|try
block|{
name|byte
index|[]
name|filterSource
init|=
name|alias
operator|.
name|filter
argument_list|()
operator|.
name|uncompressed
argument_list|()
decl_stmt|;
try|try
init|(
name|XContentParser
name|parser
init|=
name|XContentFactory
operator|.
name|xContent
argument_list|(
name|filterSource
argument_list|)
operator|.
name|createParser
argument_list|(
name|filterSource
argument_list|)
init|)
block|{
name|Optional
argument_list|<
name|QueryBuilder
argument_list|>
name|innerQueryBuilder
init|=
name|contextFactory
operator|.
name|apply
argument_list|(
name|parser
argument_list|)
operator|.
name|parseInnerQueryBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|innerQueryBuilder
operator|.
name|isPresent
argument_list|()
condition|)
block|{
return|return
name|innerQueryBuilder
operator|.
name|get
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|AliasFilterParsingException
argument_list|(
name|index
argument_list|,
name|alias
operator|.
name|getAlias
argument_list|()
argument_list|,
literal|"Invalid alias filter"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
decl_stmt|;
if|if
condition|(
name|aliasNames
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|AliasMetaData
name|alias
init|=
name|aliases
operator|.
name|get
argument_list|(
name|aliasNames
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|alias
operator|==
literal|null
condition|)
block|{
comment|// This shouldn't happen unless alias disappeared after filteringAliases was called.
throw|throw
operator|new
name|InvalidAliasNameException
argument_list|(
name|index
argument_list|,
name|aliasNames
index|[
literal|0
index|]
argument_list|,
literal|"Unknown alias name was passed to alias Filter"
argument_list|)
throw|;
block|}
return|return
name|parserFunction
operator|.
name|apply
argument_list|(
name|alias
argument_list|)
return|;
block|}
else|else
block|{
comment|// we need to bench here a bit, to see maybe it makes sense to use OrFilter
name|BoolQueryBuilder
name|combined
init|=
operator|new
name|BoolQueryBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|aliasName
range|:
name|aliasNames
control|)
block|{
name|AliasMetaData
name|alias
init|=
name|aliases
operator|.
name|get
argument_list|(
name|aliasName
argument_list|)
decl_stmt|;
if|if
condition|(
name|alias
operator|==
literal|null
condition|)
block|{
comment|// This shouldn't happen unless alias disappeared after filteringAliases was called.
throw|throw
operator|new
name|InvalidAliasNameException
argument_list|(
name|index
argument_list|,
name|aliasNames
index|[
literal|0
index|]
argument_list|,
literal|"Unknown alias name was passed to alias Filter"
argument_list|)
throw|;
block|}
name|QueryBuilder
name|parsedFilter
init|=
name|parserFunction
operator|.
name|apply
argument_list|(
name|alias
argument_list|)
decl_stmt|;
if|if
condition|(
name|parsedFilter
operator|!=
literal|null
condition|)
block|{
name|combined
operator|.
name|should
argument_list|(
name|parsedFilter
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// The filter might be null only if filter was removed after filteringAliases was called
return|return
literal|null
return|;
block|}
block|}
return|return
name|combined
return|;
block|}
block|}
block|}
end_interface

end_unit

