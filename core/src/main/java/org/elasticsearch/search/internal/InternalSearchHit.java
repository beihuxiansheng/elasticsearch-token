begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.internal
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Explanation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|compress
operator|.
name|CompressorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Streamable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|text
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchHit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchHitField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchHits
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchShardTarget
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|highlight
operator|.
name|HighlightField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|InternalSearchHits
operator|.
name|StreamContext
operator|.
name|ShardTargetType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|lookup
operator|.
name|SourceLookup
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyMap
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|singletonMap
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|unmodifiableMap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|Lucene
operator|.
name|readExplanation
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|Lucene
operator|.
name|writeExplanation
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|highlight
operator|.
name|HighlightField
operator|.
name|readHighlightField
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|InternalSearchHitField
operator|.
name|readSearchHitField
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|InternalSearchHit
specifier|public
class|class
name|InternalSearchHit
implements|implements
name|SearchHit
block|{
DECL|field|EMPTY_SORT_VALUES
specifier|private
specifier|static
specifier|final
name|Object
index|[]
name|EMPTY_SORT_VALUES
init|=
operator|new
name|Object
index|[
literal|0
index|]
decl_stmt|;
DECL|field|docId
specifier|private
specifier|transient
name|int
name|docId
decl_stmt|;
DECL|field|score
specifier|private
name|float
name|score
init|=
name|Float
operator|.
name|NEGATIVE_INFINITY
decl_stmt|;
DECL|field|id
specifier|private
name|Text
name|id
decl_stmt|;
DECL|field|type
specifier|private
name|Text
name|type
decl_stmt|;
DECL|field|nestedIdentity
specifier|private
name|InternalNestedIdentity
name|nestedIdentity
decl_stmt|;
DECL|field|version
specifier|private
name|long
name|version
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|source
specifier|private
name|BytesReference
name|source
decl_stmt|;
DECL|field|fields
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|SearchHitField
argument_list|>
name|fields
init|=
name|emptyMap
argument_list|()
decl_stmt|;
DECL|field|highlightFields
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|HighlightField
argument_list|>
name|highlightFields
init|=
literal|null
decl_stmt|;
DECL|field|sortValues
specifier|private
name|Object
index|[]
name|sortValues
init|=
name|EMPTY_SORT_VALUES
decl_stmt|;
DECL|field|matchedQueries
specifier|private
name|String
index|[]
name|matchedQueries
init|=
name|Strings
operator|.
name|EMPTY_ARRAY
decl_stmt|;
DECL|field|explanation
specifier|private
name|Explanation
name|explanation
decl_stmt|;
annotation|@
name|Nullable
DECL|field|shard
specifier|private
name|SearchShardTarget
name|shard
decl_stmt|;
DECL|field|sourceAsMap
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|sourceAsMap
decl_stmt|;
DECL|field|sourceAsBytes
specifier|private
name|byte
index|[]
name|sourceAsBytes
decl_stmt|;
DECL|field|innerHits
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|InternalSearchHits
argument_list|>
name|innerHits
decl_stmt|;
DECL|method|InternalSearchHit
specifier|private
name|InternalSearchHit
parameter_list|()
block|{      }
DECL|method|InternalSearchHit
specifier|public
name|InternalSearchHit
parameter_list|(
name|int
name|docId
parameter_list|,
name|String
name|id
parameter_list|,
name|Text
name|type
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|SearchHitField
argument_list|>
name|fields
parameter_list|)
block|{
name|this
operator|.
name|docId
operator|=
name|docId
expr_stmt|;
name|this
operator|.
name|id
operator|=
operator|new
name|Text
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|fields
operator|=
name|fields
expr_stmt|;
block|}
DECL|method|InternalSearchHit
specifier|public
name|InternalSearchHit
parameter_list|(
name|int
name|nestedTopDocId
parameter_list|,
name|String
name|id
parameter_list|,
name|Text
name|type
parameter_list|,
name|InternalNestedIdentity
name|nestedIdentity
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|SearchHitField
argument_list|>
name|fields
parameter_list|)
block|{
name|this
operator|.
name|docId
operator|=
name|nestedTopDocId
expr_stmt|;
name|this
operator|.
name|id
operator|=
operator|new
name|Text
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|nestedIdentity
operator|=
name|nestedIdentity
expr_stmt|;
name|this
operator|.
name|fields
operator|=
name|fields
expr_stmt|;
block|}
DECL|method|docId
specifier|public
name|int
name|docId
parameter_list|()
block|{
return|return
name|this
operator|.
name|docId
return|;
block|}
DECL|method|shardTarget
specifier|public
name|void
name|shardTarget
parameter_list|(
name|SearchShardTarget
name|shardTarget
parameter_list|)
block|{
name|this
operator|.
name|shard
operator|=
name|shardTarget
expr_stmt|;
if|if
condition|(
name|innerHits
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|InternalSearchHits
name|searchHits
range|:
name|innerHits
operator|.
name|values
argument_list|()
control|)
block|{
name|searchHits
operator|.
name|shardTarget
argument_list|(
name|shardTarget
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|score
specifier|public
name|void
name|score
parameter_list|(
name|float
name|score
parameter_list|)
block|{
name|this
operator|.
name|score
operator|=
name|score
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|score
specifier|public
name|float
name|score
parameter_list|()
block|{
return|return
name|this
operator|.
name|score
return|;
block|}
annotation|@
name|Override
DECL|method|getScore
specifier|public
name|float
name|getScore
parameter_list|()
block|{
return|return
name|score
argument_list|()
return|;
block|}
DECL|method|version
specifier|public
name|void
name|version
parameter_list|(
name|long
name|version
parameter_list|)
block|{
name|this
operator|.
name|version
operator|=
name|version
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|version
specifier|public
name|long
name|version
parameter_list|()
block|{
return|return
name|this
operator|.
name|version
return|;
block|}
annotation|@
name|Override
DECL|method|getVersion
specifier|public
name|long
name|getVersion
parameter_list|()
block|{
return|return
name|this
operator|.
name|version
return|;
block|}
annotation|@
name|Override
DECL|method|index
specifier|public
name|String
name|index
parameter_list|()
block|{
return|return
name|shard
operator|.
name|index
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getIndex
specifier|public
name|String
name|getIndex
parameter_list|()
block|{
return|return
name|index
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|id
specifier|public
name|String
name|id
parameter_list|()
block|{
return|return
name|id
operator|.
name|string
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getId
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
name|id
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|type
specifier|public
name|String
name|type
parameter_list|()
block|{
return|return
name|type
operator|.
name|string
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getType
specifier|public
name|String
name|getType
parameter_list|()
block|{
return|return
name|type
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getNestedIdentity
specifier|public
name|NestedIdentity
name|getNestedIdentity
parameter_list|()
block|{
return|return
name|nestedIdentity
return|;
block|}
comment|/**      * Returns bytes reference, also un compress the source if needed.      */
annotation|@
name|Override
DECL|method|sourceRef
specifier|public
name|BytesReference
name|sourceRef
parameter_list|()
block|{
try|try
block|{
name|this
operator|.
name|source
operator|=
name|CompressorFactory
operator|.
name|uncompressIfNeeded
argument_list|(
name|this
operator|.
name|source
argument_list|)
expr_stmt|;
return|return
name|this
operator|.
name|source
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ElasticsearchParseException
argument_list|(
literal|"failed to decompress source"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Sets representation, might be compressed....      */
DECL|method|sourceRef
specifier|public
name|InternalSearchHit
name|sourceRef
parameter_list|(
name|BytesReference
name|source
parameter_list|)
block|{
name|this
operator|.
name|source
operator|=
name|source
expr_stmt|;
name|this
operator|.
name|sourceAsBytes
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|sourceAsMap
operator|=
literal|null
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|getSourceRef
specifier|public
name|BytesReference
name|getSourceRef
parameter_list|()
block|{
return|return
name|sourceRef
argument_list|()
return|;
block|}
comment|/**      * Internal source representation, might be compressed....      */
DECL|method|internalSourceRef
specifier|public
name|BytesReference
name|internalSourceRef
parameter_list|()
block|{
return|return
name|source
return|;
block|}
annotation|@
name|Override
DECL|method|source
specifier|public
name|byte
index|[]
name|source
parameter_list|()
block|{
if|if
condition|(
name|source
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|sourceAsBytes
operator|!=
literal|null
condition|)
block|{
return|return
name|sourceAsBytes
return|;
block|}
name|this
operator|.
name|sourceAsBytes
operator|=
name|sourceRef
argument_list|()
operator|.
name|toBytes
argument_list|()
expr_stmt|;
return|return
name|this
operator|.
name|sourceAsBytes
return|;
block|}
annotation|@
name|Override
DECL|method|hasSource
specifier|public
name|boolean
name|hasSource
parameter_list|()
block|{
return|return
name|source
operator|==
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getSource
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getSource
parameter_list|()
block|{
return|return
name|sourceAsMap
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|sourceAsString
specifier|public
name|String
name|sourceAsString
parameter_list|()
block|{
if|if
condition|(
name|source
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
try|try
block|{
return|return
name|XContentHelper
operator|.
name|convertToJson
argument_list|(
name|sourceRef
argument_list|()
argument_list|,
literal|false
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ElasticsearchParseException
argument_list|(
literal|"failed to convert source to a json string"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|getSourceAsString
specifier|public
name|String
name|getSourceAsString
parameter_list|()
block|{
return|return
name|sourceAsString
argument_list|()
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|}
argument_list|)
annotation|@
name|Override
DECL|method|sourceAsMap
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|sourceAsMap
parameter_list|()
throws|throws
name|ElasticsearchParseException
block|{
if|if
condition|(
name|source
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|sourceAsMap
operator|!=
literal|null
condition|)
block|{
return|return
name|sourceAsMap
return|;
block|}
name|sourceAsMap
operator|=
name|SourceLookup
operator|.
name|sourceAsMap
argument_list|(
name|source
argument_list|)
expr_stmt|;
return|return
name|sourceAsMap
return|;
block|}
annotation|@
name|Override
DECL|method|iterator
specifier|public
name|Iterator
argument_list|<
name|SearchHitField
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|fields
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|field
specifier|public
name|SearchHitField
name|field
parameter_list|(
name|String
name|fieldName
parameter_list|)
block|{
return|return
name|fields
argument_list|()
operator|.
name|get
argument_list|(
name|fieldName
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|fields
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|SearchHitField
argument_list|>
name|fields
parameter_list|()
block|{
return|return
name|fields
operator|==
literal|null
condition|?
name|emptyMap
argument_list|()
else|:
name|fields
return|;
block|}
comment|// returns the fields without handling null cases
DECL|method|fieldsOrNull
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|SearchHitField
argument_list|>
name|fieldsOrNull
parameter_list|()
block|{
return|return
name|fields
return|;
block|}
annotation|@
name|Override
DECL|method|getFields
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|SearchHitField
argument_list|>
name|getFields
parameter_list|()
block|{
return|return
name|fields
argument_list|()
return|;
block|}
DECL|method|fields
specifier|public
name|void
name|fields
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|SearchHitField
argument_list|>
name|fields
parameter_list|)
block|{
name|this
operator|.
name|fields
operator|=
name|fields
expr_stmt|;
block|}
DECL|method|internalHighlightFields
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|HighlightField
argument_list|>
name|internalHighlightFields
parameter_list|()
block|{
return|return
name|highlightFields
return|;
block|}
annotation|@
name|Override
DECL|method|highlightFields
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|HighlightField
argument_list|>
name|highlightFields
parameter_list|()
block|{
return|return
name|highlightFields
operator|==
literal|null
condition|?
name|emptyMap
argument_list|()
else|:
name|highlightFields
return|;
block|}
annotation|@
name|Override
DECL|method|getHighlightFields
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|HighlightField
argument_list|>
name|getHighlightFields
parameter_list|()
block|{
return|return
name|highlightFields
argument_list|()
return|;
block|}
DECL|method|highlightFields
specifier|public
name|void
name|highlightFields
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|HighlightField
argument_list|>
name|highlightFields
parameter_list|)
block|{
name|this
operator|.
name|highlightFields
operator|=
name|highlightFields
expr_stmt|;
block|}
DECL|method|sortValues
specifier|public
name|void
name|sortValues
parameter_list|(
name|Object
index|[]
name|sortValues
parameter_list|)
block|{
comment|// LUCENE 4 UPGRADE: There must be a better way
comment|// we want to convert to a Text object here, and not BytesRef
comment|// Don't write into sortValues! Otherwise the fields in FieldDoc is modified, which may be used in other places. (SearchContext#lastEmitedDoc)
name|Object
index|[]
name|sortValuesCopy
init|=
operator|new
name|Object
index|[
name|sortValues
operator|.
name|length
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|sortValues
argument_list|,
literal|0
argument_list|,
name|sortValuesCopy
argument_list|,
literal|0
argument_list|,
name|sortValues
operator|.
name|length
argument_list|)
expr_stmt|;
if|if
condition|(
name|sortValues
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sortValues
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|sortValues
index|[
name|i
index|]
operator|instanceof
name|BytesRef
condition|)
block|{
name|sortValuesCopy
index|[
name|i
index|]
operator|=
operator|new
name|Text
argument_list|(
operator|new
name|BytesArray
argument_list|(
operator|(
name|BytesRef
operator|)
name|sortValues
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|this
operator|.
name|sortValues
operator|=
name|sortValuesCopy
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|sortValues
specifier|public
name|Object
index|[]
name|sortValues
parameter_list|()
block|{
return|return
name|sortValues
return|;
block|}
annotation|@
name|Override
DECL|method|getSortValues
specifier|public
name|Object
index|[]
name|getSortValues
parameter_list|()
block|{
return|return
name|sortValues
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|explanation
specifier|public
name|Explanation
name|explanation
parameter_list|()
block|{
return|return
name|explanation
return|;
block|}
annotation|@
name|Override
DECL|method|getExplanation
specifier|public
name|Explanation
name|getExplanation
parameter_list|()
block|{
return|return
name|explanation
argument_list|()
return|;
block|}
DECL|method|explanation
specifier|public
name|void
name|explanation
parameter_list|(
name|Explanation
name|explanation
parameter_list|)
block|{
name|this
operator|.
name|explanation
operator|=
name|explanation
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|shard
specifier|public
name|SearchShardTarget
name|shard
parameter_list|()
block|{
return|return
name|shard
return|;
block|}
annotation|@
name|Override
DECL|method|getShard
specifier|public
name|SearchShardTarget
name|getShard
parameter_list|()
block|{
return|return
name|shard
argument_list|()
return|;
block|}
DECL|method|shard
specifier|public
name|void
name|shard
parameter_list|(
name|SearchShardTarget
name|target
parameter_list|)
block|{
name|this
operator|.
name|shard
operator|=
name|target
expr_stmt|;
block|}
DECL|method|matchedQueries
specifier|public
name|void
name|matchedQueries
parameter_list|(
name|String
index|[]
name|matchedQueries
parameter_list|)
block|{
name|this
operator|.
name|matchedQueries
operator|=
name|matchedQueries
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|matchedQueries
specifier|public
name|String
index|[]
name|matchedQueries
parameter_list|()
block|{
return|return
name|this
operator|.
name|matchedQueries
return|;
block|}
annotation|@
name|Override
DECL|method|getMatchedQueries
specifier|public
name|String
index|[]
name|getMatchedQueries
parameter_list|()
block|{
return|return
name|this
operator|.
name|matchedQueries
return|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|getInnerHits
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|SearchHits
argument_list|>
name|getInnerHits
parameter_list|()
block|{
return|return
operator|(
name|Map
operator|)
name|innerHits
return|;
block|}
DECL|method|setInnerHits
specifier|public
name|void
name|setInnerHits
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|InternalSearchHits
argument_list|>
name|innerHits
parameter_list|)
block|{
name|this
operator|.
name|innerHits
operator|=
name|innerHits
expr_stmt|;
block|}
DECL|class|Fields
specifier|public
specifier|static
class|class
name|Fields
block|{
DECL|field|_INDEX
specifier|static
specifier|final
name|String
name|_INDEX
init|=
literal|"_index"
decl_stmt|;
DECL|field|_TYPE
specifier|static
specifier|final
name|String
name|_TYPE
init|=
literal|"_type"
decl_stmt|;
DECL|field|_ID
specifier|static
specifier|final
name|String
name|_ID
init|=
literal|"_id"
decl_stmt|;
DECL|field|_VERSION
specifier|static
specifier|final
name|String
name|_VERSION
init|=
literal|"_version"
decl_stmt|;
DECL|field|_SCORE
specifier|static
specifier|final
name|String
name|_SCORE
init|=
literal|"_score"
decl_stmt|;
DECL|field|FIELDS
specifier|static
specifier|final
name|String
name|FIELDS
init|=
literal|"fields"
decl_stmt|;
DECL|field|HIGHLIGHT
specifier|static
specifier|final
name|String
name|HIGHLIGHT
init|=
literal|"highlight"
decl_stmt|;
DECL|field|SORT
specifier|static
specifier|final
name|String
name|SORT
init|=
literal|"sort"
decl_stmt|;
DECL|field|MATCHED_QUERIES
specifier|static
specifier|final
name|String
name|MATCHED_QUERIES
init|=
literal|"matched_queries"
decl_stmt|;
DECL|field|_EXPLANATION
specifier|static
specifier|final
name|String
name|_EXPLANATION
init|=
literal|"_explanation"
decl_stmt|;
DECL|field|VALUE
specifier|static
specifier|final
name|String
name|VALUE
init|=
literal|"value"
decl_stmt|;
DECL|field|DESCRIPTION
specifier|static
specifier|final
name|String
name|DESCRIPTION
init|=
literal|"description"
decl_stmt|;
DECL|field|DETAILS
specifier|static
specifier|final
name|String
name|DETAILS
init|=
literal|"details"
decl_stmt|;
DECL|field|INNER_HITS
specifier|static
specifier|final
name|String
name|INNER_HITS
init|=
literal|"inner_hits"
decl_stmt|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|SearchHitField
argument_list|>
name|metaFields
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|SearchHitField
argument_list|>
name|otherFields
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|fields
operator|!=
literal|null
operator|&&
operator|!
name|fields
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|SearchHitField
name|field
range|:
name|fields
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|field
operator|.
name|values
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|field
operator|.
name|isMetadataField
argument_list|()
condition|)
block|{
name|metaFields
operator|.
name|add
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|otherFields
operator|.
name|add
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
comment|// For inner_hit hits shard is null and that is ok, because the parent search hit has all this information.
comment|// Even if this was included in the inner_hit hits this would be the same, so better leave it out.
if|if
condition|(
name|explanation
argument_list|()
operator|!=
literal|null
operator|&&
name|shard
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"_shard"
argument_list|,
name|shard
operator|.
name|shardId
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"_node"
argument_list|,
name|shard
operator|.
name|nodeIdText
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|shard
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|_INDEX
argument_list|,
name|shard
operator|.
name|indexText
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|_TYPE
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|_ID
argument_list|,
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|nestedIdentity
operator|!=
literal|null
condition|)
block|{
name|nestedIdentity
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|version
operator|!=
operator|-
literal|1
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|_VERSION
argument_list|,
name|version
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|Float
operator|.
name|isNaN
argument_list|(
name|score
argument_list|)
condition|)
block|{
name|builder
operator|.
name|nullField
argument_list|(
name|Fields
operator|.
name|_SCORE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|_SCORE
argument_list|,
name|score
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|SearchHitField
name|field
range|:
name|metaFields
control|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|field
operator|.
name|name
argument_list|()
argument_list|,
operator|(
name|Object
operator|)
name|field
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|source
operator|!=
literal|null
condition|)
block|{
name|XContentHelper
operator|.
name|writeRawField
argument_list|(
literal|"_source"
argument_list|,
name|source
argument_list|,
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|otherFields
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|Fields
operator|.
name|FIELDS
argument_list|)
expr_stmt|;
for|for
control|(
name|SearchHitField
name|field
range|:
name|otherFields
control|)
block|{
name|builder
operator|.
name|startArray
argument_list|(
name|field
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
name|value
range|:
name|field
operator|.
name|getValues
argument_list|()
control|)
block|{
name|builder
operator|.
name|value
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|highlightFields
operator|!=
literal|null
operator|&&
operator|!
name|highlightFields
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|Fields
operator|.
name|HIGHLIGHT
argument_list|)
expr_stmt|;
for|for
control|(
name|HighlightField
name|field
range|:
name|highlightFields
operator|.
name|values
argument_list|()
control|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|field
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|fragments
argument_list|()
operator|==
literal|null
condition|)
block|{
name|builder
operator|.
name|nullValue
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|startArray
argument_list|()
expr_stmt|;
for|for
control|(
name|Text
name|fragment
range|:
name|field
operator|.
name|fragments
argument_list|()
control|)
block|{
name|builder
operator|.
name|value
argument_list|(
name|fragment
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
block|}
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|sortValues
operator|!=
literal|null
operator|&&
name|sortValues
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|builder
operator|.
name|startArray
argument_list|(
name|Fields
operator|.
name|SORT
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
name|sortValue
range|:
name|sortValues
control|)
block|{
name|builder
operator|.
name|value
argument_list|(
name|sortValue
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|matchedQueries
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|builder
operator|.
name|startArray
argument_list|(
name|Fields
operator|.
name|MATCHED_QUERIES
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|matchedFilter
range|:
name|matchedQueries
control|)
block|{
name|builder
operator|.
name|value
argument_list|(
name|matchedFilter
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|explanation
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|_EXPLANATION
argument_list|)
expr_stmt|;
name|buildExplanation
argument_list|(
name|builder
argument_list|,
name|explanation
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|innerHits
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|Fields
operator|.
name|INNER_HITS
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|InternalSearchHits
argument_list|>
name|entry
range|:
name|innerHits
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
DECL|method|buildExplanation
specifier|private
name|void
name|buildExplanation
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Explanation
name|explanation
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|VALUE
argument_list|,
name|explanation
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|DESCRIPTION
argument_list|,
name|explanation
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|Explanation
index|[]
name|innerExps
init|=
name|explanation
operator|.
name|getDetails
argument_list|()
decl_stmt|;
if|if
condition|(
name|innerExps
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|startArray
argument_list|(
name|Fields
operator|.
name|DETAILS
argument_list|)
expr_stmt|;
for|for
control|(
name|Explanation
name|exp
range|:
name|innerExps
control|)
block|{
name|buildExplanation
argument_list|(
name|builder
argument_list|,
name|exp
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
DECL|method|readSearchHit
specifier|public
specifier|static
name|InternalSearchHit
name|readSearchHit
parameter_list|(
name|StreamInput
name|in
parameter_list|,
name|InternalSearchHits
operator|.
name|StreamContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|InternalSearchHit
name|hit
init|=
operator|new
name|InternalSearchHit
argument_list|()
decl_stmt|;
name|hit
operator|.
name|readFrom
argument_list|(
name|in
argument_list|,
name|context
argument_list|)
expr_stmt|;
return|return
name|hit
return|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|readFrom
argument_list|(
name|in
argument_list|,
name|InternalSearchHits
operator|.
name|streamContext
argument_list|()
operator|.
name|streamShardTarget
argument_list|(
name|ShardTargetType
operator|.
name|STREAM
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|,
name|InternalSearchHits
operator|.
name|StreamContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|score
operator|=
name|in
operator|.
name|readFloat
argument_list|()
expr_stmt|;
name|id
operator|=
name|in
operator|.
name|readText
argument_list|()
expr_stmt|;
name|type
operator|=
name|in
operator|.
name|readText
argument_list|()
expr_stmt|;
name|nestedIdentity
operator|=
name|in
operator|.
name|readOptionalStreamable
argument_list|(
name|InternalNestedIdentity
operator|::
operator|new
argument_list|)
expr_stmt|;
name|version
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|source
operator|=
name|in
operator|.
name|readBytesReference
argument_list|()
expr_stmt|;
if|if
condition|(
name|source
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|source
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|explanation
operator|=
name|readExplanation
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
name|int
name|size
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|==
literal|0
condition|)
block|{
name|fields
operator|=
name|emptyMap
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|size
operator|==
literal|1
condition|)
block|{
name|SearchHitField
name|hitField
init|=
name|readSearchHitField
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|fields
operator|=
name|singletonMap
argument_list|(
name|hitField
operator|.
name|name
argument_list|()
argument_list|,
name|hitField
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|SearchHitField
argument_list|>
name|fields
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|SearchHitField
name|hitField
init|=
name|readSearchHitField
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|fields
operator|.
name|put
argument_list|(
name|hitField
operator|.
name|name
argument_list|()
argument_list|,
name|hitField
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|fields
operator|=
name|unmodifiableMap
argument_list|(
name|fields
argument_list|)
expr_stmt|;
block|}
name|size
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
if|if
condition|(
name|size
operator|==
literal|0
condition|)
block|{
name|highlightFields
operator|=
name|emptyMap
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|size
operator|==
literal|1
condition|)
block|{
name|HighlightField
name|field
init|=
name|readHighlightField
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|highlightFields
operator|=
name|singletonMap
argument_list|(
name|field
operator|.
name|name
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|HighlightField
argument_list|>
name|highlightFields
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|HighlightField
name|field
init|=
name|readHighlightField
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|highlightFields
operator|.
name|put
argument_list|(
name|field
operator|.
name|name
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|highlightFields
operator|=
name|unmodifiableMap
argument_list|(
name|highlightFields
argument_list|)
expr_stmt|;
block|}
name|size
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
if|if
condition|(
name|size
operator|>
literal|0
condition|)
block|{
name|sortValues
operator|=
operator|new
name|Object
index|[
name|size
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sortValues
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|byte
name|type
init|=
name|in
operator|.
name|readByte
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|0
condition|)
block|{
name|sortValues
index|[
name|i
index|]
operator|=
literal|null
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
literal|1
condition|)
block|{
name|sortValues
index|[
name|i
index|]
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
literal|2
condition|)
block|{
name|sortValues
index|[
name|i
index|]
operator|=
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
literal|3
condition|)
block|{
name|sortValues
index|[
name|i
index|]
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
literal|4
condition|)
block|{
name|sortValues
index|[
name|i
index|]
operator|=
name|in
operator|.
name|readFloat
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
literal|5
condition|)
block|{
name|sortValues
index|[
name|i
index|]
operator|=
name|in
operator|.
name|readDouble
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
literal|6
condition|)
block|{
name|sortValues
index|[
name|i
index|]
operator|=
name|in
operator|.
name|readByte
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
literal|7
condition|)
block|{
name|sortValues
index|[
name|i
index|]
operator|=
name|in
operator|.
name|readShort
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
literal|8
condition|)
block|{
name|sortValues
index|[
name|i
index|]
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
literal|9
condition|)
block|{
name|sortValues
index|[
name|i
index|]
operator|=
name|in
operator|.
name|readText
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Can't match type ["
operator|+
name|type
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
block|}
name|size
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
if|if
condition|(
name|size
operator|>
literal|0
condition|)
block|{
name|matchedQueries
operator|=
operator|new
name|String
index|[
name|size
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|matchedQueries
index|[
name|i
index|]
operator|=
name|in
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|context
operator|.
name|streamShardTarget
argument_list|()
operator|==
name|ShardTargetType
operator|.
name|STREAM
condition|)
block|{
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|shard
operator|=
operator|new
name|SearchShardTarget
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|context
operator|.
name|streamShardTarget
argument_list|()
operator|==
name|ShardTargetType
operator|.
name|LOOKUP
condition|)
block|{
name|int
name|lookupId
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|lookupId
operator|>
literal|0
condition|)
block|{
name|shard
operator|=
name|context
operator|.
name|handleShardLookup
argument_list|()
operator|.
name|get
argument_list|(
name|lookupId
argument_list|)
expr_stmt|;
block|}
block|}
name|size
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
if|if
condition|(
name|size
operator|>
literal|0
condition|)
block|{
name|innerHits
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|String
name|key
init|=
name|in
operator|.
name|readString
argument_list|()
decl_stmt|;
name|ShardTargetType
name|shardTarget
init|=
name|context
operator|.
name|streamShardTarget
argument_list|()
decl_stmt|;
name|InternalSearchHits
name|value
init|=
name|InternalSearchHits
operator|.
name|readSearchHits
argument_list|(
name|in
argument_list|,
name|context
operator|.
name|streamShardTarget
argument_list|(
name|ShardTargetType
operator|.
name|NO_STREAM
argument_list|)
argument_list|)
decl_stmt|;
name|context
operator|.
name|streamShardTarget
argument_list|(
name|shardTarget
argument_list|)
expr_stmt|;
name|innerHits
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|writeTo
argument_list|(
name|out
argument_list|,
name|InternalSearchHits
operator|.
name|streamContext
argument_list|()
operator|.
name|streamShardTarget
argument_list|(
name|ShardTargetType
operator|.
name|STREAM
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|,
name|InternalSearchHits
operator|.
name|StreamContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeFloat
argument_list|(
name|score
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeText
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeText
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalStreamable
argument_list|(
name|nestedIdentity
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|version
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBytesReference
argument_list|(
name|source
argument_list|)
expr_stmt|;
if|if
condition|(
name|explanation
operator|==
literal|null
condition|)
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|writeExplanation
argument_list|(
name|out
argument_list|,
name|explanation
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
block|{
name|out
operator|.
name|writeVInt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeVInt
argument_list|(
name|fields
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|SearchHitField
name|hitField
range|:
name|fields
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|hitField
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|highlightFields
operator|==
literal|null
condition|)
block|{
name|out
operator|.
name|writeVInt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeVInt
argument_list|(
name|highlightFields
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|HighlightField
name|highlightField
range|:
name|highlightFields
operator|.
name|values
argument_list|()
control|)
block|{
name|highlightField
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|sortValues
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|out
operator|.
name|writeVInt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeVInt
argument_list|(
name|sortValues
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
name|sortValue
range|:
name|sortValues
control|)
block|{
if|if
condition|(
name|sortValue
operator|==
literal|null
condition|)
block|{
name|out
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Class
name|type
init|=
name|sortValue
operator|.
name|getClass
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|==
name|String
operator|.
name|class
condition|)
block|{
name|out
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeString
argument_list|(
operator|(
name|String
operator|)
name|sortValue
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|Integer
operator|.
name|class
condition|)
block|{
name|out
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
literal|2
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
operator|(
name|Integer
operator|)
name|sortValue
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|Long
operator|.
name|class
condition|)
block|{
name|out
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
literal|3
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
operator|(
name|Long
operator|)
name|sortValue
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|Float
operator|.
name|class
condition|)
block|{
name|out
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
literal|4
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeFloat
argument_list|(
operator|(
name|Float
operator|)
name|sortValue
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|Double
operator|.
name|class
condition|)
block|{
name|out
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
literal|5
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeDouble
argument_list|(
operator|(
name|Double
operator|)
name|sortValue
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|Byte
operator|.
name|class
condition|)
block|{
name|out
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
literal|6
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeByte
argument_list|(
operator|(
name|Byte
operator|)
name|sortValue
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|Short
operator|.
name|class
condition|)
block|{
name|out
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
literal|7
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeShort
argument_list|(
operator|(
name|Short
operator|)
name|sortValue
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|Boolean
operator|.
name|class
condition|)
block|{
name|out
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
literal|8
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
operator|(
name|Boolean
operator|)
name|sortValue
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sortValue
operator|instanceof
name|Text
condition|)
block|{
name|out
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
literal|9
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeText
argument_list|(
operator|(
name|Text
operator|)
name|sortValue
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Can't handle sort field value of type ["
operator|+
name|type
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|matchedQueries
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|out
operator|.
name|writeVInt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeVInt
argument_list|(
name|matchedQueries
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|matchedFilter
range|:
name|matchedQueries
control|)
block|{
name|out
operator|.
name|writeString
argument_list|(
name|matchedFilter
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|context
operator|.
name|streamShardTarget
argument_list|()
operator|==
name|ShardTargetType
operator|.
name|STREAM
condition|)
block|{
if|if
condition|(
name|shard
operator|==
literal|null
condition|)
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|shard
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|context
operator|.
name|streamShardTarget
argument_list|()
operator|==
name|ShardTargetType
operator|.
name|LOOKUP
condition|)
block|{
if|if
condition|(
name|shard
operator|==
literal|null
condition|)
block|{
name|out
operator|.
name|writeVInt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeVInt
argument_list|(
name|context
operator|.
name|shardHandleLookup
argument_list|()
operator|.
name|get
argument_list|(
name|shard
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|innerHits
operator|==
literal|null
condition|)
block|{
name|out
operator|.
name|writeVInt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeVInt
argument_list|(
name|innerHits
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|InternalSearchHits
argument_list|>
name|entry
range|:
name|innerHits
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|out
operator|.
name|writeString
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|ShardTargetType
name|shardTarget
init|=
name|context
operator|.
name|streamShardTarget
argument_list|()
decl_stmt|;
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|writeTo
argument_list|(
name|out
argument_list|,
name|context
operator|.
name|streamShardTarget
argument_list|(
name|ShardTargetType
operator|.
name|NO_STREAM
argument_list|)
argument_list|)
expr_stmt|;
name|context
operator|.
name|streamShardTarget
argument_list|(
name|shardTarget
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|InternalNestedIdentity
specifier|public
specifier|final
specifier|static
class|class
name|InternalNestedIdentity
implements|implements
name|NestedIdentity
implements|,
name|Streamable
implements|,
name|ToXContent
block|{
DECL|field|field
specifier|private
name|Text
name|field
decl_stmt|;
DECL|field|offset
specifier|private
name|int
name|offset
decl_stmt|;
DECL|field|child
specifier|private
name|InternalNestedIdentity
name|child
decl_stmt|;
DECL|method|InternalNestedIdentity
specifier|public
name|InternalNestedIdentity
parameter_list|(
name|String
name|field
parameter_list|,
name|int
name|offset
parameter_list|,
name|InternalNestedIdentity
name|child
parameter_list|)
block|{
name|this
operator|.
name|field
operator|=
operator|new
name|Text
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|offset
operator|=
name|offset
expr_stmt|;
name|this
operator|.
name|child
operator|=
name|child
expr_stmt|;
block|}
DECL|method|InternalNestedIdentity
name|InternalNestedIdentity
parameter_list|()
block|{         }
annotation|@
name|Override
DECL|method|getField
specifier|public
name|Text
name|getField
parameter_list|()
block|{
return|return
name|field
return|;
block|}
annotation|@
name|Override
DECL|method|getOffset
specifier|public
name|int
name|getOffset
parameter_list|()
block|{
return|return
name|offset
return|;
block|}
annotation|@
name|Override
DECL|method|getChild
specifier|public
name|NestedIdentity
name|getChild
parameter_list|()
block|{
return|return
name|child
return|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|field
operator|=
name|in
operator|.
name|readOptionalText
argument_list|()
expr_stmt|;
name|offset
operator|=
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|child
operator|=
name|in
operator|.
name|readOptionalStreamable
argument_list|(
name|InternalNestedIdentity
operator|::
operator|new
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeOptionalText
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|offset
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalStreamable
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|Fields
operator|.
name|_NESTED
argument_list|)
expr_stmt|;
if|if
condition|(
name|field
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|_NESTED_FIELD
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|offset
operator|!=
operator|-
literal|1
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|Fields
operator|.
name|_NESTED_OFFSET
argument_list|,
name|offset
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|child
operator|!=
literal|null
condition|)
block|{
name|builder
operator|=
name|child
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
return|;
block|}
DECL|class|Fields
specifier|public
specifier|static
class|class
name|Fields
block|{
DECL|field|_NESTED
specifier|static
specifier|final
name|String
name|_NESTED
init|=
literal|"_nested"
decl_stmt|;
DECL|field|_NESTED_FIELD
specifier|static
specifier|final
name|String
name|_NESTED_FIELD
init|=
literal|"field"
decl_stmt|;
DECL|field|_NESTED_OFFSET
specifier|static
specifier|final
name|String
name|_NESTED_OFFSET
init|=
literal|"offset"
decl_stmt|;
block|}
block|}
block|}
end_class

end_unit

