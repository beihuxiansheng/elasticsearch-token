begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.query
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|query
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Collector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|FilterCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|FilterLeafCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|LeafCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|tasks
operator|.
name|TaskCancelledException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * Collector that checks if the task it is executed under is cancelled.  */
end_comment

begin_class
DECL|class|CancellableCollector
specifier|public
class|class
name|CancellableCollector
extends|extends
name|FilterCollector
block|{
DECL|field|cancelled
specifier|private
specifier|final
name|Provider
argument_list|<
name|Boolean
argument_list|>
name|cancelled
decl_stmt|;
DECL|field|leafLevel
specifier|private
specifier|final
name|boolean
name|leafLevel
decl_stmt|;
comment|/**      * Constructor      * @param cancelled supplier of the cancellation flag, the supplier will be called for each segment if lowLevelCancellation is set      *                  to false and for each collected record if lowLevelCancellation is set to true. In other words this class assumes      *                  that the supplier is fast, with performance on the order of a volatile read.      * @param lowLevelCancellation true if collector should check for cancellation for each collected record, false if check should be      *                             performed only once per segment      * @param in wrapped collector      */
DECL|method|CancellableCollector
specifier|public
name|CancellableCollector
parameter_list|(
name|Provider
argument_list|<
name|Boolean
argument_list|>
name|cancelled
parameter_list|,
name|boolean
name|lowLevelCancellation
parameter_list|,
name|Collector
name|in
parameter_list|)
block|{
name|super
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|this
operator|.
name|cancelled
operator|=
name|cancelled
expr_stmt|;
name|this
operator|.
name|leafLevel
operator|=
name|lowLevelCancellation
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getLeafCollector
specifier|public
name|LeafCollector
name|getLeafCollector
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|cancelled
operator|.
name|get
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|TaskCancelledException
argument_list|(
literal|"cancelled"
argument_list|)
throw|;
block|}
if|if
condition|(
name|leafLevel
condition|)
block|{
return|return
operator|new
name|CancellableLeafCollector
argument_list|(
name|super
operator|.
name|getLeafCollector
argument_list|(
name|context
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|super
operator|.
name|getLeafCollector
argument_list|(
name|context
argument_list|)
return|;
block|}
block|}
DECL|class|CancellableLeafCollector
specifier|private
class|class
name|CancellableLeafCollector
extends|extends
name|FilterLeafCollector
block|{
DECL|method|CancellableLeafCollector
specifier|private
name|CancellableLeafCollector
parameter_list|(
name|LeafCollector
name|in
parameter_list|)
block|{
name|super
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|collect
specifier|public
name|void
name|collect
parameter_list|(
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|cancelled
operator|.
name|get
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|TaskCancelledException
argument_list|(
literal|"cancelled"
argument_list|)
throw|;
block|}
name|super
operator|.
name|collect
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

