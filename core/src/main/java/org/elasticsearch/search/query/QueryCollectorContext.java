begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.query
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|query
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Collector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|EarlyTerminatingSortingCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|MultiCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Sort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TimeLimitingCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TopDocs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TotalHitCountCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Weight
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Counter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|MinimumScoreCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|search
operator|.
name|FilteredCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|profile
operator|.
name|query
operator|.
name|InternalProfileCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|tasks
operator|.
name|TaskCancelledException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|BooleanSupplier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|IntSupplier
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|profile
operator|.
name|query
operator|.
name|CollectorResult
operator|.
name|REASON_SEARCH_CANCELLED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|profile
operator|.
name|query
operator|.
name|CollectorResult
operator|.
name|REASON_SEARCH_MIN_SCORE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|profile
operator|.
name|query
operator|.
name|CollectorResult
operator|.
name|REASON_SEARCH_MULTI
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|profile
operator|.
name|query
operator|.
name|CollectorResult
operator|.
name|REASON_SEARCH_POST_FILTER
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|profile
operator|.
name|query
operator|.
name|CollectorResult
operator|.
name|REASON_SEARCH_TERMINATE_AFTER_COUNT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|profile
operator|.
name|query
operator|.
name|CollectorResult
operator|.
name|REASON_SEARCH_TIMEOUT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|query
operator|.
name|TopDocsCollectorContext
operator|.
name|shortcutTotalHitCount
import|;
end_import

begin_class
DECL|class|QueryCollectorContext
specifier|abstract
class|class
name|QueryCollectorContext
block|{
DECL|field|profilerName
specifier|private
name|String
name|profilerName
decl_stmt|;
DECL|method|QueryCollectorContext
name|QueryCollectorContext
parameter_list|(
name|String
name|profilerName
parameter_list|)
block|{
name|this
operator|.
name|profilerName
operator|=
name|profilerName
expr_stmt|;
block|}
comment|/**      * Creates a collector that delegates documents to the provided<code>in</code> collector.      * @param in The delegate collector      */
DECL|method|create
specifier|abstract
name|Collector
name|create
parameter_list|(
name|Collector
name|in
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**      * Wraps this collector with a profiler      */
DECL|method|createWithProfiler
specifier|protected
name|InternalProfileCollector
name|createWithProfiler
parameter_list|(
name|InternalProfileCollector
name|in
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Collector
name|collector
init|=
name|create
argument_list|(
name|in
argument_list|)
decl_stmt|;
return|return
operator|new
name|InternalProfileCollector
argument_list|(
name|collector
argument_list|,
name|profilerName
argument_list|,
name|in
operator|!=
literal|null
condition|?
name|Collections
operator|.
name|singletonList
argument_list|(
name|in
argument_list|)
else|:
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * A value of<code>false</code> indicates that the underlying collector can infer      * its results directly from the context (search is not needed).      * Default to true (search is needed).      */
DECL|method|shouldCollect
name|boolean
name|shouldCollect
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
comment|/**      * Post-process<code>result</code> after search execution.      *      * @param result The query search result to populate      * @param hasCollected True if search was executed      */
DECL|method|postProcess
name|void
name|postProcess
parameter_list|(
name|QuerySearchResult
name|result
parameter_list|,
name|boolean
name|hasCollected
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/**      * Creates the collector tree from the provided<code>collectors</code>      * @param collectors Ordered list of collector context      */
DECL|method|createQueryCollector
specifier|static
name|Collector
name|createQueryCollector
parameter_list|(
name|List
argument_list|<
name|QueryCollectorContext
argument_list|>
name|collectors
parameter_list|)
throws|throws
name|IOException
block|{
name|Collector
name|collector
init|=
literal|null
decl_stmt|;
for|for
control|(
name|QueryCollectorContext
name|ctx
range|:
name|collectors
control|)
block|{
name|collector
operator|=
name|ctx
operator|.
name|create
argument_list|(
name|collector
argument_list|)
expr_stmt|;
block|}
return|return
name|collector
return|;
block|}
comment|/**      * Creates the collector tree from the provided<code>collectors</code> and wraps each collector with a profiler      * @param collectors Ordered list of collector context      */
DECL|method|createQueryCollectorWithProfiler
specifier|static
name|InternalProfileCollector
name|createQueryCollectorWithProfiler
parameter_list|(
name|List
argument_list|<
name|QueryCollectorContext
argument_list|>
name|collectors
parameter_list|)
throws|throws
name|IOException
block|{
name|InternalProfileCollector
name|collector
init|=
literal|null
decl_stmt|;
for|for
control|(
name|QueryCollectorContext
name|ctx
range|:
name|collectors
control|)
block|{
name|collector
operator|=
name|ctx
operator|.
name|createWithProfiler
argument_list|(
name|collector
argument_list|)
expr_stmt|;
block|}
return|return
name|collector
return|;
block|}
comment|/**      * Filters documents with a query score greater than<code>minScore</code>      * @param minScore The minimum score filter      */
DECL|method|createMinScoreCollectorContext
specifier|static
name|QueryCollectorContext
name|createMinScoreCollectorContext
parameter_list|(
name|float
name|minScore
parameter_list|)
block|{
return|return
operator|new
name|QueryCollectorContext
argument_list|(
name|REASON_SEARCH_MIN_SCORE
argument_list|)
block|{
annotation|@
name|Override
name|Collector
name|create
parameter_list|(
name|Collector
name|in
parameter_list|)
block|{
return|return
operator|new
name|MinimumScoreCollector
argument_list|(
name|in
argument_list|,
name|minScore
argument_list|)
return|;
block|}
block|}
return|;
block|}
comment|/**      * Filters documents based on the provided<code>query</code>      */
DECL|method|createFilteredCollectorContext
specifier|static
name|QueryCollectorContext
name|createFilteredCollectorContext
parameter_list|(
name|IndexSearcher
name|searcher
parameter_list|,
name|Query
name|query
parameter_list|)
block|{
return|return
operator|new
name|QueryCollectorContext
argument_list|(
name|REASON_SEARCH_POST_FILTER
argument_list|)
block|{
annotation|@
name|Override
name|Collector
name|create
parameter_list|(
name|Collector
name|in
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Weight
name|filterWeight
init|=
name|searcher
operator|.
name|createNormalizedWeight
argument_list|(
name|query
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
operator|new
name|FilteredCollector
argument_list|(
name|in
argument_list|,
name|filterWeight
argument_list|)
return|;
block|}
block|}
return|;
block|}
comment|/**      * Creates a multi collector from the provided<code>subs</code>      */
DECL|method|createMultiCollectorContext
specifier|static
name|QueryCollectorContext
name|createMultiCollectorContext
parameter_list|(
name|Collection
argument_list|<
name|Collector
argument_list|>
name|subs
parameter_list|)
block|{
return|return
operator|new
name|QueryCollectorContext
argument_list|(
name|REASON_SEARCH_MULTI
argument_list|)
block|{
annotation|@
name|Override
name|Collector
name|create
parameter_list|(
name|Collector
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Collector
argument_list|>
name|subCollectors
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|subCollectors
operator|.
name|add
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|subCollectors
operator|.
name|addAll
argument_list|(
name|subs
argument_list|)
expr_stmt|;
return|return
name|MultiCollector
operator|.
name|wrap
argument_list|(
name|subCollectors
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|InternalProfileCollector
name|createWithProfiler
parameter_list|(
name|InternalProfileCollector
name|in
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|List
argument_list|<
name|InternalProfileCollector
argument_list|>
name|subCollectors
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|subCollectors
operator|.
name|add
argument_list|(
name|in
argument_list|)
expr_stmt|;
if|if
condition|(
name|subs
operator|.
name|stream
argument_list|()
operator|.
name|anyMatch
argument_list|(
parameter_list|(
lambda|col
argument_list|)
operator|->
name|col
operator|instanceof
name|InternalProfileCollector
operator|==
literal|false
condition|)
block|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"non-profiling collector"
argument_list|)
throw|;
block|}
for|for
control|(
name|Collector
name|collector
range|:
name|subs
control|)
block|{
name|subCollectors
operator|.
name|add
argument_list|(
operator|(
name|InternalProfileCollector
operator|)
name|collector
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Collector
name|collector
init|=
name|MultiCollector
operator|.
name|wrap
argument_list|(
name|subCollectors
argument_list|)
decl_stmt|;
return|return
operator|new
name|InternalProfileCollector
argument_list|(
name|collector
argument_list|,
name|REASON_SEARCH_MULTI
argument_list|,
name|subCollectors
argument_list|)
return|;
block|}
block|}
empty_stmt|;
block|}
end_class

begin_comment
comment|/**      * Creates a time limiting collector limiting the collection to<code>timeOutMillis</code>ms.      */
end_comment

begin_function
DECL|method|createTimeoutCollectorContext
specifier|static
name|QueryCollectorContext
name|createTimeoutCollectorContext
parameter_list|(
name|Counter
name|timeEstimate
parameter_list|,
name|long
name|timeoutMillis
parameter_list|)
block|{
return|return
operator|new
name|QueryCollectorContext
argument_list|(
name|REASON_SEARCH_TIMEOUT
argument_list|)
block|{
annotation|@
name|Override
name|Collector
name|create
parameter_list|(
name|Collector
name|in
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|TimeLimitingCollector
argument_list|(
name|in
argument_list|,
name|timeEstimate
argument_list|,
name|timeoutMillis
argument_list|)
return|;
block|}
annotation|@
name|Override
name|boolean
name|shouldCollect
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
return|;
block|}
end_function

begin_comment
comment|/**      * Creates a collector that throws {@link TaskCancelledException} if the search is cancelled      */
end_comment

begin_function
DECL|method|createCancellableCollectorContext
specifier|static
name|QueryCollectorContext
name|createCancellableCollectorContext
parameter_list|(
name|Provider
argument_list|<
name|Boolean
argument_list|>
name|cancelled
parameter_list|,
name|boolean
name|lowLevelCancellation
parameter_list|)
block|{
return|return
operator|new
name|QueryCollectorContext
argument_list|(
name|REASON_SEARCH_CANCELLED
argument_list|)
block|{
annotation|@
name|Override
name|Collector
name|create
parameter_list|(
name|Collector
name|in
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|CancellableCollector
argument_list|(
name|cancelled
argument_list|,
name|lowLevelCancellation
argument_list|,
name|in
argument_list|)
return|;
block|}
annotation|@
name|Override
name|boolean
name|shouldCollect
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
return|;
block|}
end_function

begin_comment
comment|/**      * Creates collector limiting the collection to the first<code>numHits</code> documents      */
end_comment

begin_function
DECL|method|createEarlyTerminationCollectorContext
specifier|static
name|QueryCollectorContext
name|createEarlyTerminationCollectorContext
parameter_list|(
name|int
name|numHits
parameter_list|)
block|{
return|return
operator|new
name|QueryCollectorContext
argument_list|(
name|REASON_SEARCH_TERMINATE_AFTER_COUNT
argument_list|)
block|{
specifier|private
name|EarlyTerminatingCollector
name|collector
decl_stmt|;
annotation|@
name|Override
name|Collector
name|create
parameter_list|(
name|Collector
name|in
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|collector
operator|==
literal|null
assert|;
name|this
operator|.
name|collector
operator|=
operator|new
name|EarlyTerminatingCollector
argument_list|(
name|in
argument_list|,
name|numHits
argument_list|)
expr_stmt|;
return|return
name|collector
return|;
block|}
annotation|@
name|Override
name|void
name|postProcess
parameter_list|(
name|QuerySearchResult
name|result
parameter_list|,
name|boolean
name|hasCollected
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|hasCollected
operator|&&
name|collector
operator|.
name|terminatedEarly
argument_list|()
condition|)
block|{
name|result
operator|.
name|terminatedEarly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|;
block|}
end_function

begin_comment
comment|/**      * Creates a sorting termination collector limiting the collection to the first<code>numHits</code> per segment.      * The total hit count matching the query is also computed if<code>trackTotalHits</code> is true.      */
end_comment

begin_function
DECL|method|createEarlySortingTerminationCollectorContext
specifier|static
name|QueryCollectorContext
name|createEarlySortingTerminationCollectorContext
parameter_list|(
name|IndexReader
name|reader
parameter_list|,
name|Query
name|query
parameter_list|,
name|Sort
name|indexSort
parameter_list|,
name|int
name|numHits
parameter_list|,
name|boolean
name|trackTotalHits
parameter_list|,
name|boolean
name|shouldCollect
parameter_list|)
block|{
return|return
operator|new
name|QueryCollectorContext
argument_list|(
name|REASON_SEARCH_TERMINATE_AFTER_COUNT
argument_list|)
block|{
specifier|private
name|BooleanSupplier
name|terminatedEarlySupplier
decl_stmt|;
specifier|private
name|IntSupplier
name|countSupplier
init|=
literal|null
decl_stmt|;
annotation|@
name|Override
name|Collector
name|create
parameter_list|(
name|Collector
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|EarlyTerminatingSortingCollector
name|sortingCollector
init|=
operator|new
name|EarlyTerminatingSortingCollector
argument_list|(
name|in
argument_list|,
name|indexSort
argument_list|,
name|numHits
argument_list|)
decl_stmt|;
name|terminatedEarlySupplier
operator|=
name|sortingCollector
operator|::
name|terminatedEarly
expr_stmt|;
name|Collector
name|collector
init|=
name|sortingCollector
decl_stmt|;
if|if
condition|(
name|trackTotalHits
condition|)
block|{
name|int
name|count
init|=
name|shouldCollect
condition|?
operator|-
literal|1
else|:
name|shortcutTotalHitCount
argument_list|(
name|reader
argument_list|,
name|query
argument_list|)
decl_stmt|;
if|if
condition|(
name|count
operator|==
operator|-
literal|1
condition|)
block|{
name|TotalHitCountCollector
name|countCollector
init|=
operator|new
name|TotalHitCountCollector
argument_list|()
decl_stmt|;
name|collector
operator|=
name|MultiCollector
operator|.
name|wrap
argument_list|(
name|sortingCollector
argument_list|,
name|countCollector
argument_list|)
expr_stmt|;
name|this
operator|.
name|countSupplier
operator|=
name|countCollector
operator|::
name|getTotalHits
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|countSupplier
operator|=
parameter_list|()
lambda|->
name|count
expr_stmt|;
block|}
block|}
return|return
name|collector
return|;
block|}
annotation|@
name|Override
name|void
name|postProcess
parameter_list|(
name|QuerySearchResult
name|result
parameter_list|,
name|boolean
name|hasCollected
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|terminatedEarlySupplier
operator|.
name|getAsBoolean
argument_list|()
condition|)
block|{
name|result
operator|.
name|terminatedEarly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|countSupplier
operator|!=
literal|null
condition|)
block|{
specifier|final
name|TopDocs
name|topDocs
init|=
name|result
operator|.
name|topDocs
argument_list|()
decl_stmt|;
name|topDocs
operator|.
name|totalHits
operator|=
name|countSupplier
operator|.
name|getAsInt
argument_list|()
expr_stmt|;
name|result
operator|.
name|topDocs
argument_list|(
name|topDocs
argument_list|,
name|result
operator|.
name|sortValueFormats
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|;
block|}
end_function

unit|}
end_unit

