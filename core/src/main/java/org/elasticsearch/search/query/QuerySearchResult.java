begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.query
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|query
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TopDocs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchShardTarget
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|Aggregations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|InternalAggregations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
operator|.
name|PipelineAggregator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
operator|.
name|PipelineAggregatorStreams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
operator|.
name|SiblingPipelineAggregator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|profile
operator|.
name|ProfileShardResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|Suggest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|Lucene
operator|.
name|readTopDocs
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|Lucene
operator|.
name|writeTopDocs
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|QuerySearchResult
specifier|public
class|class
name|QuerySearchResult
extends|extends
name|QuerySearchResultProvider
block|{
DECL|field|id
specifier|private
name|long
name|id
decl_stmt|;
DECL|field|shardTarget
specifier|private
name|SearchShardTarget
name|shardTarget
decl_stmt|;
DECL|field|from
specifier|private
name|int
name|from
decl_stmt|;
DECL|field|size
specifier|private
name|int
name|size
decl_stmt|;
DECL|field|topDocs
specifier|private
name|TopDocs
name|topDocs
decl_stmt|;
DECL|field|aggregations
specifier|private
name|InternalAggregations
name|aggregations
decl_stmt|;
DECL|field|pipelineAggregators
specifier|private
name|List
argument_list|<
name|SiblingPipelineAggregator
argument_list|>
name|pipelineAggregators
decl_stmt|;
DECL|field|suggest
specifier|private
name|Suggest
name|suggest
decl_stmt|;
DECL|field|searchTimedOut
specifier|private
name|boolean
name|searchTimedOut
decl_stmt|;
DECL|field|terminatedEarly
specifier|private
name|Boolean
name|terminatedEarly
init|=
literal|null
decl_stmt|;
DECL|field|profileShardResults
specifier|private
name|List
argument_list|<
name|ProfileShardResult
argument_list|>
name|profileShardResults
decl_stmt|;
DECL|method|QuerySearchResult
specifier|public
name|QuerySearchResult
parameter_list|()
block|{      }
DECL|method|QuerySearchResult
specifier|public
name|QuerySearchResult
parameter_list|(
name|long
name|id
parameter_list|,
name|SearchShardTarget
name|shardTarget
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|shardTarget
operator|=
name|shardTarget
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|includeFetch
specifier|public
name|boolean
name|includeFetch
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|queryResult
specifier|public
name|QuerySearchResult
name|queryResult
parameter_list|()
block|{
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|id
specifier|public
name|long
name|id
parameter_list|()
block|{
return|return
name|this
operator|.
name|id
return|;
block|}
annotation|@
name|Override
DECL|method|shardTarget
specifier|public
name|SearchShardTarget
name|shardTarget
parameter_list|()
block|{
return|return
name|shardTarget
return|;
block|}
annotation|@
name|Override
DECL|method|shardTarget
specifier|public
name|void
name|shardTarget
parameter_list|(
name|SearchShardTarget
name|shardTarget
parameter_list|)
block|{
name|this
operator|.
name|shardTarget
operator|=
name|shardTarget
expr_stmt|;
block|}
DECL|method|searchTimedOut
specifier|public
name|void
name|searchTimedOut
parameter_list|(
name|boolean
name|searchTimedOut
parameter_list|)
block|{
name|this
operator|.
name|searchTimedOut
operator|=
name|searchTimedOut
expr_stmt|;
block|}
DECL|method|searchTimedOut
specifier|public
name|boolean
name|searchTimedOut
parameter_list|()
block|{
return|return
name|searchTimedOut
return|;
block|}
DECL|method|terminatedEarly
specifier|public
name|void
name|terminatedEarly
parameter_list|(
name|boolean
name|terminatedEarly
parameter_list|)
block|{
name|this
operator|.
name|terminatedEarly
operator|=
name|terminatedEarly
expr_stmt|;
block|}
DECL|method|terminatedEarly
specifier|public
name|Boolean
name|terminatedEarly
parameter_list|()
block|{
return|return
name|this
operator|.
name|terminatedEarly
return|;
block|}
DECL|method|topDocs
specifier|public
name|TopDocs
name|topDocs
parameter_list|()
block|{
return|return
name|topDocs
return|;
block|}
DECL|method|topDocs
specifier|public
name|void
name|topDocs
parameter_list|(
name|TopDocs
name|topDocs
parameter_list|)
block|{
name|this
operator|.
name|topDocs
operator|=
name|topDocs
expr_stmt|;
block|}
DECL|method|aggregations
specifier|public
name|Aggregations
name|aggregations
parameter_list|()
block|{
return|return
name|aggregations
return|;
block|}
DECL|method|aggregations
specifier|public
name|void
name|aggregations
parameter_list|(
name|InternalAggregations
name|aggregations
parameter_list|)
block|{
name|this
operator|.
name|aggregations
operator|=
name|aggregations
expr_stmt|;
block|}
comment|/**      * Returns the profiled results for this search, or potentially null if result was empty      * @return The profiled results, or null      */
DECL|method|profileResults
specifier|public
annotation|@
name|Nullable
name|List
argument_list|<
name|ProfileShardResult
argument_list|>
name|profileResults
parameter_list|()
block|{
return|return
name|profileShardResults
return|;
block|}
comment|/**      * Sets the finalized profiling results for this query      * @param shardResults The finalized profile      */
DECL|method|profileResults
specifier|public
name|void
name|profileResults
parameter_list|(
name|List
argument_list|<
name|ProfileShardResult
argument_list|>
name|shardResults
parameter_list|)
block|{
name|this
operator|.
name|profileShardResults
operator|=
name|shardResults
expr_stmt|;
block|}
DECL|method|pipelineAggregators
specifier|public
name|List
argument_list|<
name|SiblingPipelineAggregator
argument_list|>
name|pipelineAggregators
parameter_list|()
block|{
return|return
name|pipelineAggregators
return|;
block|}
DECL|method|pipelineAggregators
specifier|public
name|void
name|pipelineAggregators
parameter_list|(
name|List
argument_list|<
name|SiblingPipelineAggregator
argument_list|>
name|pipelineAggregators
parameter_list|)
block|{
name|this
operator|.
name|pipelineAggregators
operator|=
name|pipelineAggregators
expr_stmt|;
block|}
DECL|method|suggest
specifier|public
name|Suggest
name|suggest
parameter_list|()
block|{
return|return
name|suggest
return|;
block|}
DECL|method|suggest
specifier|public
name|void
name|suggest
parameter_list|(
name|Suggest
name|suggest
parameter_list|)
block|{
name|this
operator|.
name|suggest
operator|=
name|suggest
expr_stmt|;
block|}
DECL|method|from
specifier|public
name|int
name|from
parameter_list|()
block|{
return|return
name|from
return|;
block|}
DECL|method|from
specifier|public
name|QuerySearchResult
name|from
parameter_list|(
name|int
name|from
parameter_list|)
block|{
name|this
operator|.
name|from
operator|=
name|from
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|size
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|size
return|;
block|}
DECL|method|size
specifier|public
name|QuerySearchResult
name|size
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|this
operator|.
name|size
operator|=
name|size
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|readQuerySearchResult
specifier|public
specifier|static
name|QuerySearchResult
name|readQuerySearchResult
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|QuerySearchResult
name|result
init|=
operator|new
name|QuerySearchResult
argument_list|()
decl_stmt|;
name|result
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|readFrom
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|long
name|id
init|=
name|in
operator|.
name|readLong
argument_list|()
decl_stmt|;
name|readFromWithId
argument_list|(
name|id
argument_list|,
name|in
argument_list|)
expr_stmt|;
block|}
DECL|method|readFromWithId
specifier|public
name|void
name|readFromWithId
parameter_list|(
name|long
name|id
parameter_list|,
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
comment|//        shardTarget = readSearchShardTarget(in);
name|from
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
name|size
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
name|topDocs
operator|=
name|readTopDocs
argument_list|(
name|in
argument_list|)
expr_stmt|;
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|aggregations
operator|=
name|InternalAggregations
operator|.
name|readAggregations
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|int
name|size
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|SiblingPipelineAggregator
argument_list|>
name|pipelineAggregators
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|size
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|BytesReference
name|type
init|=
name|in
operator|.
name|readBytesReference
argument_list|()
decl_stmt|;
name|PipelineAggregator
name|pipelineAggregator
init|=
name|PipelineAggregatorStreams
operator|.
name|stream
argument_list|(
name|type
argument_list|)
operator|.
name|readResult
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|pipelineAggregators
operator|.
name|add
argument_list|(
operator|(
name|SiblingPipelineAggregator
operator|)
name|pipelineAggregator
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|pipelineAggregators
operator|=
name|pipelineAggregators
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|suggest
operator|=
name|Suggest
operator|.
name|readSuggest
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
name|searchTimedOut
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
name|terminatedEarly
operator|=
name|in
operator|.
name|readOptionalBoolean
argument_list|()
expr_stmt|;
if|if
condition|(
name|in
operator|.
name|getVersion
argument_list|()
operator|.
name|onOrAfter
argument_list|(
name|Version
operator|.
name|V_2_2_0
argument_list|)
operator|&&
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|int
name|profileSize
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|profileShardResults
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|profileSize
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|profileSize
condition|;
name|i
operator|++
control|)
block|{
name|ProfileShardResult
name|result
init|=
operator|new
name|ProfileShardResult
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|profileShardResults
operator|.
name|add
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|writeToNoId
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
DECL|method|writeToNoId
specifier|public
name|void
name|writeToNoId
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
comment|//        shardTarget.writeTo(out);
name|out
operator|.
name|writeVInt
argument_list|(
name|from
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|writeTopDocs
argument_list|(
name|out
argument_list|,
name|topDocs
argument_list|)
expr_stmt|;
if|if
condition|(
name|aggregations
operator|==
literal|null
condition|)
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|aggregations
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|pipelineAggregators
operator|==
literal|null
condition|)
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|pipelineAggregators
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|PipelineAggregator
name|pipelineAggregator
range|:
name|pipelineAggregators
control|)
block|{
name|out
operator|.
name|writeBytesReference
argument_list|(
name|pipelineAggregator
operator|.
name|type
argument_list|()
operator|.
name|stream
argument_list|()
argument_list|)
expr_stmt|;
name|pipelineAggregator
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|suggest
operator|==
literal|null
condition|)
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|suggest
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|writeBoolean
argument_list|(
name|searchTimedOut
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeOptionalBoolean
argument_list|(
name|terminatedEarly
argument_list|)
expr_stmt|;
if|if
condition|(
name|out
operator|.
name|getVersion
argument_list|()
operator|.
name|onOrAfter
argument_list|(
name|Version
operator|.
name|V_2_2_0
argument_list|)
condition|)
block|{
if|if
condition|(
name|profileShardResults
operator|==
literal|null
condition|)
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|profileShardResults
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ProfileShardResult
name|shardResult
range|:
name|profileShardResults
control|)
block|{
name|shardResult
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

