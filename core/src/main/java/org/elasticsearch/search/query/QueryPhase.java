begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.query
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|query
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Collector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|FieldDoc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|MultiCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|ScoreDoc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TimeLimitingCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TopDocs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TopDocsCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TopFieldCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TopScoreDocCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TotalHitCountCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Weight
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|Lucene
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|MinimumScoreCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|search
operator|.
name|FilteredCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchParseElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchPhase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregationPhase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|SearchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|SearchContext
operator|.
name|Lifetime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|rescore
operator|.
name|RescorePhase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|rescore
operator|.
name|RescoreSearchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|scan
operator|.
name|ScanContext
operator|.
name|ScanCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|sort
operator|.
name|SortParseElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|sort
operator|.
name|TrackScoresParseElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|SuggestPhase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|QueryPhase
specifier|public
class|class
name|QueryPhase
implements|implements
name|SearchPhase
block|{
DECL|field|aggregationPhase
specifier|private
specifier|final
name|AggregationPhase
name|aggregationPhase
decl_stmt|;
DECL|field|suggestPhase
specifier|private
specifier|final
name|SuggestPhase
name|suggestPhase
decl_stmt|;
DECL|field|rescorePhase
specifier|private
name|RescorePhase
name|rescorePhase
decl_stmt|;
annotation|@
name|Inject
DECL|method|QueryPhase
specifier|public
name|QueryPhase
parameter_list|(
name|AggregationPhase
name|aggregationPhase
parameter_list|,
name|SuggestPhase
name|suggestPhase
parameter_list|,
name|RescorePhase
name|rescorePhase
parameter_list|)
block|{
name|this
operator|.
name|aggregationPhase
operator|=
name|aggregationPhase
expr_stmt|;
name|this
operator|.
name|suggestPhase
operator|=
name|suggestPhase
expr_stmt|;
name|this
operator|.
name|rescorePhase
operator|=
name|rescorePhase
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|parseElements
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|?
extends|extends
name|SearchParseElement
argument_list|>
name|parseElements
parameter_list|()
block|{
name|ImmutableMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|SearchParseElement
argument_list|>
name|parseElements
init|=
name|ImmutableMap
operator|.
name|builder
argument_list|()
decl_stmt|;
name|parseElements
operator|.
name|put
argument_list|(
literal|"from"
argument_list|,
operator|new
name|FromParseElement
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
literal|"size"
argument_list|,
operator|new
name|SizeParseElement
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
literal|"indices_boost"
argument_list|,
operator|new
name|IndicesBoostParseElement
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
literal|"indicesBoost"
argument_list|,
operator|new
name|IndicesBoostParseElement
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
literal|"query"
argument_list|,
operator|new
name|QueryParseElement
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
literal|"queryBinary"
argument_list|,
operator|new
name|QueryBinaryParseElement
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
literal|"query_binary"
argument_list|,
operator|new
name|QueryBinaryParseElement
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
literal|"filter"
argument_list|,
operator|new
name|PostFilterParseElement
argument_list|()
argument_list|)
comment|// For bw comp reason, should be removed in version 1.1
operator|.
name|put
argument_list|(
literal|"post_filter"
argument_list|,
operator|new
name|PostFilterParseElement
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
literal|"postFilter"
argument_list|,
operator|new
name|PostFilterParseElement
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
literal|"filterBinary"
argument_list|,
operator|new
name|FilterBinaryParseElement
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
literal|"filter_binary"
argument_list|,
operator|new
name|FilterBinaryParseElement
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
literal|"sort"
argument_list|,
operator|new
name|SortParseElement
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
literal|"trackScores"
argument_list|,
operator|new
name|TrackScoresParseElement
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
literal|"track_scores"
argument_list|,
operator|new
name|TrackScoresParseElement
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
literal|"min_score"
argument_list|,
operator|new
name|MinScoreParseElement
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
literal|"minScore"
argument_list|,
operator|new
name|MinScoreParseElement
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
literal|"timeout"
argument_list|,
operator|new
name|TimeoutParseElement
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
literal|"terminate_after"
argument_list|,
operator|new
name|TerminateAfterParseElement
argument_list|()
argument_list|)
operator|.
name|putAll
argument_list|(
name|aggregationPhase
operator|.
name|parseElements
argument_list|()
argument_list|)
operator|.
name|putAll
argument_list|(
name|suggestPhase
operator|.
name|parseElements
argument_list|()
argument_list|)
operator|.
name|putAll
argument_list|(
name|rescorePhase
operator|.
name|parseElements
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|parseElements
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|preProcess
specifier|public
name|void
name|preProcess
parameter_list|(
name|SearchContext
name|context
parameter_list|)
block|{
name|context
operator|.
name|preProcess
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|execute
specifier|public
name|void
name|execute
parameter_list|(
name|SearchContext
name|searchContext
parameter_list|)
throws|throws
name|QueryPhaseExecutionException
block|{
comment|// Pre-process aggregations as late as possible. In the case of a DFS_Q_T_F
comment|// request, preProcess is called on the DFS phase phase, this is why we pre-process them
comment|// here to make sure it happens during the QUERY phase
name|aggregationPhase
operator|.
name|preProcess
argument_list|(
name|searchContext
argument_list|)
expr_stmt|;
name|searchContext
operator|.
name|queryResult
argument_list|()
operator|.
name|searchTimedOut
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|boolean
name|rescore
init|=
literal|false
decl_stmt|;
try|try
block|{
name|searchContext
operator|.
name|queryResult
argument_list|()
operator|.
name|from
argument_list|(
name|searchContext
operator|.
name|from
argument_list|()
argument_list|)
expr_stmt|;
name|searchContext
operator|.
name|queryResult
argument_list|()
operator|.
name|size
argument_list|(
name|searchContext
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|IndexSearcher
name|searcher
init|=
name|searchContext
operator|.
name|searcher
argument_list|()
decl_stmt|;
name|Query
name|query
init|=
name|searchContext
operator|.
name|query
argument_list|()
decl_stmt|;
specifier|final
name|int
name|totalNumDocs
init|=
name|searcher
operator|.
name|getIndexReader
argument_list|()
operator|.
name|numDocs
argument_list|()
decl_stmt|;
name|int
name|numDocs
init|=
name|Math
operator|.
name|min
argument_list|(
name|searchContext
operator|.
name|from
argument_list|()
operator|+
name|searchContext
operator|.
name|size
argument_list|()
argument_list|,
name|totalNumDocs
argument_list|)
decl_stmt|;
name|Collector
name|collector
decl_stmt|;
specifier|final
name|Callable
argument_list|<
name|TopDocs
argument_list|>
name|topDocsCallable
decl_stmt|;
if|if
condition|(
name|searchContext
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// no matter what the value of from is
specifier|final
name|TotalHitCountCollector
name|totalHitCountCollector
init|=
operator|new
name|TotalHitCountCollector
argument_list|()
decl_stmt|;
name|collector
operator|=
name|totalHitCountCollector
expr_stmt|;
name|topDocsCallable
operator|=
operator|new
name|Callable
argument_list|<
name|TopDocs
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|TopDocs
name|call
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|TopDocs
argument_list|(
name|totalHitCountCollector
operator|.
name|getTotalHits
argument_list|()
argument_list|,
name|Lucene
operator|.
name|EMPTY_SCORE_DOCS
argument_list|,
literal|0
argument_list|)
return|;
block|}
block|}
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|searchContext
operator|.
name|searchType
argument_list|()
operator|==
name|SearchType
operator|.
name|SCAN
condition|)
block|{
name|query
operator|=
name|searchContext
operator|.
name|scanContext
argument_list|()
operator|.
name|wrapQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
specifier|final
name|ScanCollector
name|scanCollector
init|=
name|searchContext
operator|.
name|scanContext
argument_list|()
operator|.
name|collector
argument_list|(
name|searchContext
argument_list|)
decl_stmt|;
name|collector
operator|=
name|scanCollector
expr_stmt|;
name|topDocsCallable
operator|=
operator|new
name|Callable
argument_list|<
name|TopDocs
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|TopDocs
name|call
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|scanCollector
operator|.
name|topDocs
argument_list|()
return|;
block|}
block|}
expr_stmt|;
block|}
else|else
block|{
comment|// Perhaps have a dedicated scroll phase?
specifier|final
name|TopDocsCollector
argument_list|<
name|?
argument_list|>
name|topDocsCollector
decl_stmt|;
name|ScoreDoc
name|lastEmittedDoc
decl_stmt|;
if|if
condition|(
name|searchContext
operator|.
name|request
argument_list|()
operator|.
name|scroll
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|numDocs
operator|=
name|Math
operator|.
name|min
argument_list|(
name|searchContext
operator|.
name|size
argument_list|()
argument_list|,
name|totalNumDocs
argument_list|)
expr_stmt|;
name|lastEmittedDoc
operator|=
name|searchContext
operator|.
name|lastEmittedDoc
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|lastEmittedDoc
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|totalNumDocs
operator|==
literal|0
condition|)
block|{
comment|// top collectors don't like a size of 0
name|numDocs
operator|=
literal|1
expr_stmt|;
block|}
assert|assert
name|numDocs
operator|>
literal|0
assert|;
if|if
condition|(
name|searchContext
operator|.
name|sort
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|topDocsCollector
operator|=
name|TopFieldCollector
operator|.
name|create
argument_list|(
name|searchContext
operator|.
name|sort
argument_list|()
argument_list|,
name|numDocs
argument_list|,
operator|(
name|FieldDoc
operator|)
name|lastEmittedDoc
argument_list|,
literal|true
argument_list|,
name|searchContext
operator|.
name|trackScores
argument_list|()
argument_list|,
name|searchContext
operator|.
name|trackScores
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rescore
operator|=
operator|!
name|searchContext
operator|.
name|rescore
argument_list|()
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
for|for
control|(
name|RescoreSearchContext
name|rescoreContext
range|:
name|searchContext
operator|.
name|rescore
argument_list|()
control|)
block|{
name|numDocs
operator|=
name|Math
operator|.
name|max
argument_list|(
name|rescoreContext
operator|.
name|window
argument_list|()
argument_list|,
name|numDocs
argument_list|)
expr_stmt|;
block|}
name|topDocsCollector
operator|=
name|TopScoreDocCollector
operator|.
name|create
argument_list|(
name|numDocs
argument_list|,
name|lastEmittedDoc
argument_list|)
expr_stmt|;
block|}
name|collector
operator|=
name|topDocsCollector
expr_stmt|;
name|topDocsCallable
operator|=
operator|new
name|Callable
argument_list|<
name|TopDocs
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|TopDocs
name|call
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|topDocsCollector
operator|.
name|topDocs
argument_list|()
return|;
block|}
block|}
expr_stmt|;
block|}
specifier|final
name|boolean
name|terminateAfterSet
init|=
name|searchContext
operator|.
name|terminateAfter
argument_list|()
operator|!=
name|SearchContext
operator|.
name|DEFAULT_TERMINATE_AFTER
decl_stmt|;
if|if
condition|(
name|terminateAfterSet
condition|)
block|{
comment|// throws Lucene.EarlyTerminationException when given count is reached
name|collector
operator|=
name|Lucene
operator|.
name|wrapCountBasedEarlyTerminatingCollector
argument_list|(
name|collector
argument_list|,
name|searchContext
operator|.
name|terminateAfter
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|searchContext
operator|.
name|parsedPostFilter
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// this will only get applied to the actual search collector and not
comment|// to any scoped collectors, also, it will only be applied to the main collector
comment|// since that is where the filter should only work
specifier|final
name|Weight
name|filterWeight
init|=
name|searcher
operator|.
name|createNormalizedWeight
argument_list|(
name|searchContext
operator|.
name|parsedPostFilter
argument_list|()
operator|.
name|query
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|collector
operator|=
operator|new
name|FilteredCollector
argument_list|(
name|collector
argument_list|,
name|filterWeight
argument_list|)
expr_stmt|;
block|}
comment|// plug in additional collectors, like aggregations
name|List
argument_list|<
name|Collector
argument_list|>
name|allCollectors
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|allCollectors
operator|.
name|add
argument_list|(
name|collector
argument_list|)
expr_stmt|;
name|allCollectors
operator|.
name|addAll
argument_list|(
name|searchContext
operator|.
name|queryCollectors
argument_list|()
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
name|collector
operator|=
name|MultiCollector
operator|.
name|wrap
argument_list|(
name|allCollectors
argument_list|)
expr_stmt|;
comment|// apply the minimum score after multi collector so we filter aggs as well
if|if
condition|(
name|searchContext
operator|.
name|minimumScore
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|collector
operator|=
operator|new
name|MinimumScoreCollector
argument_list|(
name|collector
argument_list|,
name|searchContext
operator|.
name|minimumScore
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|boolean
name|timeoutSet
init|=
name|searchContext
operator|.
name|timeoutInMillis
argument_list|()
operator|!=
name|SearchService
operator|.
name|NO_TIMEOUT
operator|.
name|millis
argument_list|()
decl_stmt|;
if|if
condition|(
name|timeoutSet
condition|)
block|{
comment|// TODO: change to use our own counter that uses the scheduler in ThreadPool
comment|// throws TimeLimitingCollector.TimeExceededException when timeout has reached
name|collector
operator|=
name|Lucene
operator|.
name|wrapTimeLimitingCollector
argument_list|(
name|collector
argument_list|,
name|searchContext
operator|.
name|timeEstimateCounter
argument_list|()
argument_list|,
name|searchContext
operator|.
name|timeoutInMillis
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
name|collector
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TimeLimitingCollector
operator|.
name|TimeExceededException
name|e
parameter_list|)
block|{
assert|assert
name|timeoutSet
operator|:
literal|"TimeExceededException thrown even though timeout wasn't set"
assert|;
name|searchContext
operator|.
name|queryResult
argument_list|()
operator|.
name|searchTimedOut
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Lucene
operator|.
name|EarlyTerminationException
name|e
parameter_list|)
block|{
assert|assert
name|terminateAfterSet
operator|:
literal|"EarlyTerminationException thrown even though terminateAfter wasn't set"
assert|;
name|searchContext
operator|.
name|queryResult
argument_list|()
operator|.
name|terminatedEarly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|terminateAfterSet
operator|&&
name|searchContext
operator|.
name|queryResult
argument_list|()
operator|.
name|terminatedEarly
argument_list|()
operator|==
literal|null
condition|)
block|{
name|searchContext
operator|.
name|queryResult
argument_list|()
operator|.
name|terminatedEarly
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|final
name|TopDocs
name|topDocs
init|=
name|topDocsCallable
operator|.
name|call
argument_list|()
decl_stmt|;
if|if
condition|(
name|searchContext
operator|.
name|request
argument_list|()
operator|.
name|scroll
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|int
name|size
init|=
name|topDocs
operator|.
name|scoreDocs
operator|.
name|length
decl_stmt|;
if|if
condition|(
name|size
operator|>
literal|0
condition|)
block|{
comment|// In the case of *QUERY_AND_FETCH we don't get back to shards telling them which least
comment|// relevant docs got emitted as hit, we can simply mark the last doc as last emitted
if|if
condition|(
name|searchContext
operator|.
name|searchType
argument_list|()
operator|==
name|SearchType
operator|.
name|QUERY_AND_FETCH
operator|||
name|searchContext
operator|.
name|searchType
argument_list|()
operator|==
name|SearchType
operator|.
name|DFS_QUERY_AND_FETCH
condition|)
block|{
name|searchContext
operator|.
name|lastEmittedDoc
argument_list|(
name|topDocs
operator|.
name|scoreDocs
index|[
name|size
operator|-
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|searchContext
operator|.
name|queryResult
argument_list|()
operator|.
name|topDocs
argument_list|(
name|topDocs
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|QueryPhaseExecutionException
argument_list|(
name|searchContext
argument_list|,
literal|"Failed to execute main query"
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|rescore
condition|)
block|{
comment|// only if we do a regular search
name|rescorePhase
operator|.
name|execute
argument_list|(
name|searchContext
argument_list|)
expr_stmt|;
block|}
name|suggestPhase
operator|.
name|execute
argument_list|(
name|searchContext
argument_list|)
expr_stmt|;
name|aggregationPhase
operator|.
name|execute
argument_list|(
name|searchContext
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

