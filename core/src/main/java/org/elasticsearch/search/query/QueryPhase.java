begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.query
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|query
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|MinDocQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|SearchAfterSortedDocQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanClause
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Collector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|ConstantScoreQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|EarlyTerminatingSortingCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|FieldDoc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|MatchAllDocsQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|ScoreDoc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Sort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TimeLimitingCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TopDocs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|Lucene
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|DocValueFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchPhase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|AggregationPhase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|ScrollContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|SearchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|profile
operator|.
name|ProfileShardResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|profile
operator|.
name|SearchProfileShardResults
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|profile
operator|.
name|query
operator|.
name|InternalProfileCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|rescore
operator|.
name|RescorePhase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|sort
operator|.
name|SortAndFormats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|suggest
operator|.
name|SuggestPhase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|query
operator|.
name|QueryCollectorContext
operator|.
name|createCancellableCollectorContext
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|query
operator|.
name|QueryCollectorContext
operator|.
name|createEarlySortingTerminationCollectorContext
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|query
operator|.
name|QueryCollectorContext
operator|.
name|createEarlyTerminationCollectorContext
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|query
operator|.
name|QueryCollectorContext
operator|.
name|createFilteredCollectorContext
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|query
operator|.
name|QueryCollectorContext
operator|.
name|createMinScoreCollectorContext
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|query
operator|.
name|QueryCollectorContext
operator|.
name|createMultiCollectorContext
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|query
operator|.
name|QueryCollectorContext
operator|.
name|createTimeoutCollectorContext
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|query
operator|.
name|TopDocsCollectorContext
operator|.
name|createTopDocsCollectorContext
import|;
end_import

begin_comment
comment|/**  * Query phase of a search request, used to run the query and get back from each shard information about the matching documents  * (document ids and score or sort criteria) so that matches can be reduced on the coordinating node  */
end_comment

begin_class
DECL|class|QueryPhase
specifier|public
class|class
name|QueryPhase
implements|implements
name|SearchPhase
block|{
DECL|field|aggregationPhase
specifier|private
specifier|final
name|AggregationPhase
name|aggregationPhase
decl_stmt|;
DECL|field|suggestPhase
specifier|private
specifier|final
name|SuggestPhase
name|suggestPhase
decl_stmt|;
DECL|field|rescorePhase
specifier|private
name|RescorePhase
name|rescorePhase
decl_stmt|;
DECL|method|QueryPhase
specifier|public
name|QueryPhase
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
name|this
operator|.
name|aggregationPhase
operator|=
operator|new
name|AggregationPhase
argument_list|()
expr_stmt|;
name|this
operator|.
name|suggestPhase
operator|=
operator|new
name|SuggestPhase
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|this
operator|.
name|rescorePhase
operator|=
operator|new
name|RescorePhase
argument_list|(
name|settings
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|preProcess
specifier|public
name|void
name|preProcess
parameter_list|(
name|SearchContext
name|context
parameter_list|)
block|{
name|context
operator|.
name|preProcess
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|execute
specifier|public
name|void
name|execute
parameter_list|(
name|SearchContext
name|searchContext
parameter_list|)
throws|throws
name|QueryPhaseExecutionException
block|{
if|if
condition|(
name|searchContext
operator|.
name|hasOnlySuggest
argument_list|()
condition|)
block|{
name|suggestPhase
operator|.
name|execute
argument_list|(
name|searchContext
argument_list|)
expr_stmt|;
comment|// TODO: fix this once we can fetch docs for suggestions
name|searchContext
operator|.
name|queryResult
argument_list|()
operator|.
name|topDocs
argument_list|(
operator|new
name|TopDocs
argument_list|(
literal|0
argument_list|,
name|Lucene
operator|.
name|EMPTY_SCORE_DOCS
argument_list|,
literal|0
argument_list|)
argument_list|,
operator|new
name|DocValueFormat
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Pre-process aggregations as late as possible. In the case of a DFS_Q_T_F
comment|// request, preProcess is called on the DFS phase phase, this is why we pre-process them
comment|// here to make sure it happens during the QUERY phase
name|aggregationPhase
operator|.
name|preProcess
argument_list|(
name|searchContext
argument_list|)
expr_stmt|;
name|Sort
name|indexSort
init|=
name|searchContext
operator|.
name|mapperService
argument_list|()
operator|.
name|getIndexSettings
argument_list|()
operator|.
name|getIndexSortConfig
argument_list|()
operator|.
name|buildIndexSort
argument_list|(
name|searchContext
operator|.
name|mapperService
argument_list|()
operator|::
name|fullName
argument_list|,
name|searchContext
operator|.
name|fieldData
argument_list|()
operator|::
name|getForField
argument_list|)
decl_stmt|;
name|boolean
name|rescore
init|=
name|execute
argument_list|(
name|searchContext
argument_list|,
name|searchContext
operator|.
name|searcher
argument_list|()
argument_list|,
name|indexSort
argument_list|)
decl_stmt|;
if|if
condition|(
name|rescore
condition|)
block|{
comment|// only if we do a regular search
name|rescorePhase
operator|.
name|execute
argument_list|(
name|searchContext
argument_list|)
expr_stmt|;
block|}
name|suggestPhase
operator|.
name|execute
argument_list|(
name|searchContext
argument_list|)
expr_stmt|;
name|aggregationPhase
operator|.
name|execute
argument_list|(
name|searchContext
argument_list|)
expr_stmt|;
if|if
condition|(
name|searchContext
operator|.
name|getProfilers
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ProfileShardResult
name|shardResults
init|=
name|SearchProfileShardResults
operator|.
name|buildShardResults
argument_list|(
name|searchContext
operator|.
name|getProfilers
argument_list|()
argument_list|)
decl_stmt|;
name|searchContext
operator|.
name|queryResult
argument_list|()
operator|.
name|profileResults
argument_list|(
name|shardResults
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * In a package-private method so that it can be tested without having to      * wire everything (mapperService, etc.)      * @return whether the rescoring phase should be executed      */
DECL|method|execute
specifier|static
name|boolean
name|execute
parameter_list|(
name|SearchContext
name|searchContext
parameter_list|,
specifier|final
name|IndexSearcher
name|searcher
parameter_list|,
annotation|@
name|Nullable
name|Sort
name|indexSort
parameter_list|)
throws|throws
name|QueryPhaseExecutionException
block|{
name|QuerySearchResult
name|queryResult
init|=
name|searchContext
operator|.
name|queryResult
argument_list|()
decl_stmt|;
name|queryResult
operator|.
name|searchTimedOut
argument_list|(
literal|false
argument_list|)
expr_stmt|;
try|try
block|{
name|queryResult
operator|.
name|from
argument_list|(
name|searchContext
operator|.
name|from
argument_list|()
argument_list|)
expr_stmt|;
name|queryResult
operator|.
name|size
argument_list|(
name|searchContext
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Query
name|query
init|=
name|searchContext
operator|.
name|query
argument_list|()
decl_stmt|;
assert|assert
name|query
operator|==
name|searcher
operator|.
name|rewrite
argument_list|(
name|query
argument_list|)
assert|;
comment|// already rewritten
specifier|final
name|ScrollContext
name|scrollContext
init|=
name|searchContext
operator|.
name|scrollContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|scrollContext
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|scrollContext
operator|.
name|totalHits
operator|==
operator|-
literal|1
condition|)
block|{
comment|// first round
assert|assert
name|scrollContext
operator|.
name|lastEmittedDoc
operator|==
literal|null
assert|;
comment|// there is not much that we can optimize here since we want to collect all
comment|// documents in order to get the total number of hits
block|}
else|else
block|{
specifier|final
name|ScoreDoc
name|after
init|=
name|scrollContext
operator|.
name|lastEmittedDoc
decl_stmt|;
if|if
condition|(
name|returnsDocsInOrder
argument_list|(
name|query
argument_list|,
name|searchContext
operator|.
name|sort
argument_list|()
argument_list|)
condition|)
block|{
comment|// now this gets interesting: since we sort in index-order, we can directly
comment|// skip to the desired doc
if|if
condition|(
name|after
operator|!=
literal|null
condition|)
block|{
name|BooleanQuery
name|bq
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
operator|.
name|add
argument_list|(
name|query
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|MinDocQuery
argument_list|(
name|after
operator|.
name|doc
operator|+
literal|1
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|FILTER
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|query
operator|=
name|bq
expr_stmt|;
block|}
comment|// ... and stop collecting after ${size} matches
name|searchContext
operator|.
name|terminateAfter
argument_list|(
name|searchContext
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|searchContext
operator|.
name|trackTotalHits
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|canEarlyTerminate
argument_list|(
name|indexSort
argument_list|,
name|searchContext
argument_list|)
condition|)
block|{
comment|// now this gets interesting: since the index sort matches the search sort, we can directly
comment|// skip to the desired doc
if|if
condition|(
name|after
operator|!=
literal|null
condition|)
block|{
name|BooleanQuery
name|bq
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
operator|.
name|add
argument_list|(
name|query
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|SearchAfterSortedDocQuery
argument_list|(
name|indexSort
argument_list|,
operator|(
name|FieldDoc
operator|)
name|after
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|FILTER
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|query
operator|=
name|bq
expr_stmt|;
block|}
name|searchContext
operator|.
name|trackTotalHits
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|final
name|LinkedList
argument_list|<
name|QueryCollectorContext
argument_list|>
name|collectors
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|searchContext
operator|.
name|parsedPostFilter
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// add post filters before aggregations
comment|// it will only be applied to top hits
name|collectors
operator|.
name|add
argument_list|(
name|createFilteredCollectorContext
argument_list|(
name|searcher
argument_list|,
name|searchContext
operator|.
name|parsedPostFilter
argument_list|()
operator|.
name|query
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|searchContext
operator|.
name|queryCollectors
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|==
literal|false
condition|)
block|{
comment|// plug in additional collectors, like aggregations
name|collectors
operator|.
name|add
argument_list|(
name|createMultiCollectorContext
argument_list|(
name|searchContext
operator|.
name|queryCollectors
argument_list|()
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|searchContext
operator|.
name|minimumScore
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// apply the minimum score after multi collector so we filter aggs as well
name|collectors
operator|.
name|add
argument_list|(
name|createMinScoreCollectorContext
argument_list|(
name|searchContext
operator|.
name|minimumScore
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|searchContext
operator|.
name|terminateAfter
argument_list|()
operator|!=
name|SearchContext
operator|.
name|DEFAULT_TERMINATE_AFTER
condition|)
block|{
comment|// apply terminate after after all filters collectors
name|collectors
operator|.
name|add
argument_list|(
name|createEarlyTerminationCollectorContext
argument_list|(
name|searchContext
operator|.
name|terminateAfter
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|boolean
name|timeoutSet
init|=
name|scrollContext
operator|==
literal|null
operator|&&
name|searchContext
operator|.
name|timeout
argument_list|()
operator|!=
literal|null
operator|&&
name|searchContext
operator|.
name|timeout
argument_list|()
operator|.
name|equals
argument_list|(
name|SearchService
operator|.
name|NO_TIMEOUT
argument_list|)
operator|==
literal|false
decl_stmt|;
if|if
condition|(
name|timeoutSet
condition|)
block|{
comment|// TODO: change to use our own counter that uses the scheduler in ThreadPool
comment|// throws TimeLimitingCollector.TimeExceededException when timeout has reached
name|collectors
operator|.
name|add
argument_list|(
name|createTimeoutCollectorContext
argument_list|(
name|searchContext
operator|.
name|timeEstimateCounter
argument_list|()
argument_list|,
name|searchContext
operator|.
name|timeout
argument_list|()
operator|.
name|millis
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// add cancellable
name|collectors
operator|.
name|add
argument_list|(
name|createCancellableCollectorContext
argument_list|(
name|searchContext
operator|.
name|getTask
argument_list|()
operator|::
name|isCancelled
argument_list|,
name|searchContext
operator|.
name|lowLevelCancellation
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|IndexReader
name|reader
init|=
name|searcher
operator|.
name|getIndexReader
argument_list|()
decl_stmt|;
specifier|final
name|boolean
name|doProfile
init|=
name|searchContext
operator|.
name|getProfilers
argument_list|()
operator|!=
literal|null
decl_stmt|;
comment|// create the top docs collector last when the other collectors are known
specifier|final
name|TopDocsCollectorContext
name|topDocsFactory
init|=
name|createTopDocsCollectorContext
argument_list|(
name|searchContext
argument_list|,
name|reader
argument_list|,
name|collectors
operator|.
name|stream
argument_list|()
operator|.
name|anyMatch
argument_list|(
name|QueryCollectorContext
operator|::
name|shouldCollect
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|shouldCollect
init|=
name|topDocsFactory
operator|.
name|shouldCollect
argument_list|()
decl_stmt|;
if|if
condition|(
name|topDocsFactory
operator|.
name|numHits
argument_list|()
operator|>
literal|0
operator|&&
operator|(
name|scrollContext
operator|==
literal|null
operator|||
name|scrollContext
operator|.
name|totalHits
operator|!=
operator|-
literal|1
operator|)
operator|&&
name|canEarlyTerminate
argument_list|(
name|indexSort
argument_list|,
name|searchContext
argument_list|)
condition|)
block|{
comment|// top docs collection can be early terminated based on index sort
comment|// add the collector context first so we don't early terminate aggs but only top docs
name|collectors
operator|.
name|addFirst
argument_list|(
name|createEarlySortingTerminationCollectorContext
argument_list|(
name|reader
argument_list|,
name|searchContext
operator|.
name|query
argument_list|()
argument_list|,
name|indexSort
argument_list|,
name|topDocsFactory
operator|.
name|numHits
argument_list|()
argument_list|,
name|searchContext
operator|.
name|trackTotalHits
argument_list|()
argument_list|,
name|shouldCollect
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// add the top docs collector, the first collector context in the chain
name|collectors
operator|.
name|addFirst
argument_list|(
name|topDocsFactory
argument_list|)
expr_stmt|;
specifier|final
name|Collector
name|queryCollector
decl_stmt|;
if|if
condition|(
name|doProfile
condition|)
block|{
name|InternalProfileCollector
name|profileCollector
init|=
name|QueryCollectorContext
operator|.
name|createQueryCollectorWithProfiler
argument_list|(
name|collectors
argument_list|)
decl_stmt|;
name|searchContext
operator|.
name|getProfilers
argument_list|()
operator|.
name|getCurrentQueryProfiler
argument_list|()
operator|.
name|setCollector
argument_list|(
name|profileCollector
argument_list|)
expr_stmt|;
name|queryCollector
operator|=
name|profileCollector
expr_stmt|;
block|}
else|else
block|{
name|queryCollector
operator|=
name|QueryCollectorContext
operator|.
name|createQueryCollector
argument_list|(
name|collectors
argument_list|)
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
name|shouldCollect
condition|)
block|{
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
name|queryCollector
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|TimeLimitingCollector
operator|.
name|TimeExceededException
name|e
parameter_list|)
block|{
assert|assert
name|timeoutSet
operator|:
literal|"TimeExceededException thrown even though timeout wasn't set"
assert|;
name|queryResult
operator|.
name|searchTimedOut
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|searchContext
operator|.
name|clearReleasables
argument_list|(
name|SearchContext
operator|.
name|Lifetime
operator|.
name|COLLECTION
argument_list|)
expr_stmt|;
block|}
specifier|final
name|QuerySearchResult
name|result
init|=
name|searchContext
operator|.
name|queryResult
argument_list|()
decl_stmt|;
for|for
control|(
name|QueryCollectorContext
name|ctx
range|:
name|collectors
control|)
block|{
name|ctx
operator|.
name|postProcess
argument_list|(
name|result
argument_list|,
name|shouldCollect
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|searchContext
operator|.
name|getProfilers
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ProfileShardResult
name|shardResults
init|=
name|SearchProfileShardResults
operator|.
name|buildShardResults
argument_list|(
name|searchContext
operator|.
name|getProfilers
argument_list|()
argument_list|)
decl_stmt|;
name|result
operator|.
name|profileResults
argument_list|(
name|shardResults
argument_list|)
expr_stmt|;
block|}
return|return
name|topDocsFactory
operator|.
name|shouldRescore
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|QueryPhaseExecutionException
argument_list|(
name|searchContext
argument_list|,
literal|"Failed to execute main query"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Returns true if the provided<code>query</code> returns docs in index order (internal doc ids).      * @param query The query to execute      * @param sf The query sort      */
DECL|method|returnsDocsInOrder
specifier|static
name|boolean
name|returnsDocsInOrder
parameter_list|(
name|Query
name|query
parameter_list|,
name|SortAndFormats
name|sf
parameter_list|)
block|{
if|if
condition|(
name|sf
operator|==
literal|null
operator|||
name|Sort
operator|.
name|RELEVANCE
operator|.
name|equals
argument_list|(
name|sf
operator|.
name|sort
argument_list|)
condition|)
block|{
comment|// sort by score
comment|// queries that return constant scores will return docs in index
comment|// order since Lucene tie-breaks on the doc id
return|return
name|query
operator|.
name|getClass
argument_list|()
operator|==
name|ConstantScoreQuery
operator|.
name|class
operator|||
name|query
operator|.
name|getClass
argument_list|()
operator|==
name|MatchAllDocsQuery
operator|.
name|class
return|;
block|}
else|else
block|{
return|return
name|Sort
operator|.
name|INDEXORDER
operator|.
name|equals
argument_list|(
name|sf
operator|.
name|sort
argument_list|)
return|;
block|}
block|}
comment|/**      * Returns true if the provided<code>searchContext</code> can early terminate based on<code>indexSort</code>      * @param indexSort The index sort specification      * @param context The search context for the request      */
DECL|method|canEarlyTerminate
specifier|static
name|boolean
name|canEarlyTerminate
parameter_list|(
name|Sort
name|indexSort
parameter_list|,
name|SearchContext
name|context
parameter_list|)
block|{
specifier|final
name|Sort
name|sort
init|=
name|context
operator|.
name|sort
argument_list|()
operator|==
literal|null
condition|?
name|Sort
operator|.
name|RELEVANCE
else|:
name|context
operator|.
name|sort
argument_list|()
operator|.
name|sort
decl_stmt|;
return|return
name|indexSort
operator|!=
literal|null
operator|&&
name|EarlyTerminatingSortingCollector
operator|.
name|canEarlyTerminate
argument_list|(
name|sort
argument_list|,
name|indexSort
argument_list|)
return|;
block|}
block|}
end_class

end_unit

