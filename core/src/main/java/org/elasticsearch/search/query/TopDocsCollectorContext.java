begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.query
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|query
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BoostQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Collector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|ConstantScoreQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|FieldDoc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|MatchAllDocsQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|ScoreDoc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Sort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TopDocs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TopDocsCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TopFieldCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TopScoreDocCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TotalHitCountCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|grouping
operator|.
name|CollapsingTopDocsCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|Lucene
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|DocValueFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|collapse
operator|.
name|CollapseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|ScrollContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|SearchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|rescore
operator|.
name|RescoreSearchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|sort
operator|.
name|SortAndFormats
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|profile
operator|.
name|query
operator|.
name|CollectorResult
operator|.
name|REASON_SEARCH_COUNT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|profile
operator|.
name|query
operator|.
name|CollectorResult
operator|.
name|REASON_SEARCH_TOP_HITS
import|;
end_import

begin_comment
comment|/**  * A {@link QueryCollectorContext} that creates top docs collector  */
end_comment

begin_class
DECL|class|TopDocsCollectorContext
specifier|abstract
class|class
name|TopDocsCollectorContext
extends|extends
name|QueryCollectorContext
block|{
DECL|field|numHits
specifier|protected
specifier|final
name|int
name|numHits
decl_stmt|;
DECL|method|TopDocsCollectorContext
name|TopDocsCollectorContext
parameter_list|(
name|String
name|profilerName
parameter_list|,
name|int
name|numHits
parameter_list|)
block|{
name|super
argument_list|(
name|profilerName
argument_list|)
expr_stmt|;
name|this
operator|.
name|numHits
operator|=
name|numHits
expr_stmt|;
block|}
comment|/**      * Returns the number of top docs to retrieve      */
DECL|method|numHits
specifier|final
name|int
name|numHits
parameter_list|()
block|{
return|return
name|numHits
return|;
block|}
comment|/**      * Returns true if the top docs should be re-scored after initial search      */
DECL|method|shouldRescore
name|boolean
name|shouldRescore
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
DECL|class|TotalHitCountCollectorContext
specifier|static
class|class
name|TotalHitCountCollectorContext
extends|extends
name|TopDocsCollectorContext
block|{
DECL|field|collector
specifier|private
specifier|final
name|TotalHitCountCollector
name|collector
decl_stmt|;
DECL|field|hitCount
specifier|private
specifier|final
name|int
name|hitCount
decl_stmt|;
comment|/**          * Ctr          * @param reader The index reader          * @param query The query to execute          * @param shouldCollect True if any previous collector context in the chain forces the search to be executed, false otherwise          */
DECL|method|TotalHitCountCollectorContext
specifier|private
name|TotalHitCountCollectorContext
parameter_list|(
name|IndexReader
name|reader
parameter_list|,
name|Query
name|query
parameter_list|,
name|boolean
name|shouldCollect
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|REASON_SEARCH_COUNT
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|this
operator|.
name|collector
operator|=
operator|new
name|TotalHitCountCollector
argument_list|()
expr_stmt|;
comment|// implicit total hit counts are valid only when there is no filter collector in the chain
comment|// so we check the shortcut only if shouldCollect is true
name|this
operator|.
name|hitCount
operator|=
name|shouldCollect
condition|?
operator|-
literal|1
else|:
name|shortcutTotalHitCount
argument_list|(
name|reader
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|shouldCollect
name|boolean
name|shouldCollect
parameter_list|()
block|{
return|return
name|hitCount
operator|==
operator|-
literal|1
return|;
block|}
DECL|method|create
name|Collector
name|create
parameter_list|(
name|Collector
name|in
parameter_list|)
block|{
assert|assert
name|in
operator|==
literal|null
assert|;
return|return
name|collector
return|;
block|}
annotation|@
name|Override
DECL|method|postProcess
name|void
name|postProcess
parameter_list|(
name|QuerySearchResult
name|result
parameter_list|,
name|boolean
name|hasCollected
parameter_list|)
block|{
specifier|final
name|int
name|totalHitCount
decl_stmt|;
if|if
condition|(
name|hasCollected
condition|)
block|{
name|totalHitCount
operator|=
name|collector
operator|.
name|getTotalHits
argument_list|()
expr_stmt|;
block|}
else|else
block|{
assert|assert
name|hitCount
operator|!=
operator|-
literal|1
assert|;
name|totalHitCount
operator|=
name|hitCount
expr_stmt|;
block|}
name|result
operator|.
name|topDocs
argument_list|(
operator|new
name|TopDocs
argument_list|(
name|totalHitCount
argument_list|,
name|Lucene
operator|.
name|EMPTY_SCORE_DOCS
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|CollapsingTopDocsCollectorContext
specifier|static
class|class
name|CollapsingTopDocsCollectorContext
extends|extends
name|TopDocsCollectorContext
block|{
DECL|field|sortFmt
specifier|private
specifier|final
name|DocValueFormat
index|[]
name|sortFmt
decl_stmt|;
DECL|field|topDocsCollector
specifier|private
specifier|final
name|CollapsingTopDocsCollector
argument_list|<
name|?
argument_list|>
name|topDocsCollector
decl_stmt|;
comment|/**          * Ctr          * @param collapseContext The collapsing context          * @param sortAndFormats The query sort          * @param numHits The number of collapsed top hits to retrieve.          * @param trackMaxScore True if max score should be tracked          */
DECL|method|CollapsingTopDocsCollectorContext
specifier|private
name|CollapsingTopDocsCollectorContext
parameter_list|(
name|CollapseContext
name|collapseContext
parameter_list|,
annotation|@
name|Nullable
name|SortAndFormats
name|sortAndFormats
parameter_list|,
name|int
name|numHits
parameter_list|,
name|boolean
name|trackMaxScore
parameter_list|)
block|{
name|super
argument_list|(
name|REASON_SEARCH_TOP_HITS
argument_list|,
name|numHits
argument_list|)
expr_stmt|;
assert|assert
name|numHits
operator|>
literal|0
assert|;
assert|assert
name|collapseContext
operator|!=
literal|null
assert|;
name|Sort
name|sort
init|=
name|sortAndFormats
operator|==
literal|null
condition|?
name|Sort
operator|.
name|RELEVANCE
else|:
name|sortAndFormats
operator|.
name|sort
decl_stmt|;
name|this
operator|.
name|sortFmt
operator|=
name|sortAndFormats
operator|==
literal|null
condition|?
operator|new
name|DocValueFormat
index|[]
block|{
name|DocValueFormat
operator|.
name|RAW
block|}
else|:
name|sortAndFormats
operator|.
name|formats
expr_stmt|;
name|this
operator|.
name|topDocsCollector
operator|=
name|collapseContext
operator|.
name|createTopDocs
argument_list|(
name|sort
argument_list|,
name|numHits
argument_list|,
name|trackMaxScore
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|create
name|Collector
name|create
parameter_list|(
name|Collector
name|in
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|in
operator|==
literal|null
assert|;
return|return
name|topDocsCollector
return|;
block|}
annotation|@
name|Override
DECL|method|postProcess
name|void
name|postProcess
parameter_list|(
name|QuerySearchResult
name|result
parameter_list|,
name|boolean
name|hasCollected
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|hasCollected
assert|;
name|result
operator|.
name|topDocs
argument_list|(
name|topDocsCollector
operator|.
name|getTopDocs
argument_list|()
argument_list|,
name|sortFmt
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|SimpleTopDocsCollectorContext
specifier|abstract
specifier|static
class|class
name|SimpleTopDocsCollectorContext
extends|extends
name|TopDocsCollectorContext
block|{
DECL|field|sortAndFormats
specifier|private
specifier|final
annotation|@
name|Nullable
name|SortAndFormats
name|sortAndFormats
decl_stmt|;
DECL|field|topDocsCollector
specifier|private
specifier|final
name|TopDocsCollector
argument_list|<
name|?
argument_list|>
name|topDocsCollector
decl_stmt|;
comment|/**          * Ctr          * @param sortAndFormats The query sort          * @param numHits The number of top hits to retrieve          * @param searchAfter The doc this request should "search after"          * @param trackMaxScore True if max score should be tracked          */
DECL|method|SimpleTopDocsCollectorContext
specifier|private
name|SimpleTopDocsCollectorContext
parameter_list|(
annotation|@
name|Nullable
name|SortAndFormats
name|sortAndFormats
parameter_list|,
annotation|@
name|Nullable
name|ScoreDoc
name|searchAfter
parameter_list|,
name|int
name|numHits
parameter_list|,
name|boolean
name|trackMaxScore
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|REASON_SEARCH_TOP_HITS
argument_list|,
name|numHits
argument_list|)
expr_stmt|;
name|this
operator|.
name|sortAndFormats
operator|=
name|sortAndFormats
expr_stmt|;
if|if
condition|(
name|sortAndFormats
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|topDocsCollector
operator|=
name|TopScoreDocCollector
operator|.
name|create
argument_list|(
name|numHits
argument_list|,
name|searchAfter
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|topDocsCollector
operator|=
name|TopFieldCollector
operator|.
name|create
argument_list|(
name|sortAndFormats
operator|.
name|sort
argument_list|,
name|numHits
argument_list|,
operator|(
name|FieldDoc
operator|)
name|searchAfter
argument_list|,
literal|true
argument_list|,
name|trackMaxScore
argument_list|,
name|trackMaxScore
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|create
name|Collector
name|create
parameter_list|(
name|Collector
name|in
parameter_list|)
block|{
assert|assert
name|in
operator|==
literal|null
assert|;
return|return
name|topDocsCollector
return|;
block|}
annotation|@
name|Override
DECL|method|postProcess
name|void
name|postProcess
parameter_list|(
name|QuerySearchResult
name|result
parameter_list|,
name|boolean
name|hasCollected
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|hasCollected
assert|;
specifier|final
name|TopDocs
name|topDocs
init|=
name|topDocsCollector
operator|.
name|topDocs
argument_list|()
decl_stmt|;
name|result
operator|.
name|topDocs
argument_list|(
name|topDocs
argument_list|,
name|sortAndFormats
operator|==
literal|null
condition|?
literal|null
else|:
name|sortAndFormats
operator|.
name|formats
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|ScrollingTopDocsCollectorContext
specifier|static
class|class
name|ScrollingTopDocsCollectorContext
extends|extends
name|SimpleTopDocsCollectorContext
block|{
DECL|field|scrollContext
specifier|private
specifier|final
name|ScrollContext
name|scrollContext
decl_stmt|;
DECL|field|numberOfShards
specifier|private
specifier|final
name|int
name|numberOfShards
decl_stmt|;
DECL|method|ScrollingTopDocsCollectorContext
specifier|private
name|ScrollingTopDocsCollectorContext
parameter_list|(
name|ScrollContext
name|scrollContext
parameter_list|,
annotation|@
name|Nullable
name|SortAndFormats
name|sortAndFormats
parameter_list|,
name|int
name|numHits
parameter_list|,
name|boolean
name|trackMaxScore
parameter_list|,
name|int
name|numberOfShards
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|sortAndFormats
argument_list|,
name|scrollContext
operator|.
name|lastEmittedDoc
argument_list|,
name|numHits
argument_list|,
name|trackMaxScore
argument_list|)
expr_stmt|;
name|this
operator|.
name|scrollContext
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|scrollContext
argument_list|)
expr_stmt|;
name|this
operator|.
name|numberOfShards
operator|=
name|numberOfShards
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|postProcess
name|void
name|postProcess
parameter_list|(
name|QuerySearchResult
name|result
parameter_list|,
name|boolean
name|hasCollected
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|postProcess
argument_list|(
name|result
argument_list|,
name|hasCollected
argument_list|)
expr_stmt|;
specifier|final
name|TopDocs
name|topDocs
init|=
name|result
operator|.
name|topDocs
argument_list|()
decl_stmt|;
if|if
condition|(
name|scrollContext
operator|.
name|totalHits
operator|==
operator|-
literal|1
condition|)
block|{
comment|// first round
name|scrollContext
operator|.
name|totalHits
operator|=
name|topDocs
operator|.
name|totalHits
expr_stmt|;
name|scrollContext
operator|.
name|maxScore
operator|=
name|topDocs
operator|.
name|getMaxScore
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// subsequent round: the total number of hits and
comment|// the maximum score were computed on the first round
name|topDocs
operator|.
name|totalHits
operator|=
name|scrollContext
operator|.
name|totalHits
expr_stmt|;
name|topDocs
operator|.
name|setMaxScore
argument_list|(
name|scrollContext
operator|.
name|maxScore
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|numberOfShards
operator|==
literal|1
condition|)
block|{
comment|// if we fetch the document in the same roundtrip, we already know the last emitted doc
if|if
condition|(
name|topDocs
operator|.
name|scoreDocs
operator|.
name|length
operator|>
literal|0
condition|)
block|{
comment|// set the last emitted doc
name|scrollContext
operator|.
name|lastEmittedDoc
operator|=
name|topDocs
operator|.
name|scoreDocs
index|[
name|topDocs
operator|.
name|scoreDocs
operator|.
name|length
operator|-
literal|1
index|]
expr_stmt|;
block|}
block|}
name|result
operator|.
name|topDocs
argument_list|(
name|topDocs
argument_list|,
name|result
operator|.
name|sortValueFormats
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Returns query total hit count if the<code>query</code> is a {@link MatchAllDocsQuery}      * or a {@link TermQuery} and the<code>reader</code> has no deletions,      * -1 otherwise.      */
DECL|method|shortcutTotalHitCount
specifier|static
name|int
name|shortcutTotalHitCount
parameter_list|(
name|IndexReader
name|reader
parameter_list|,
name|Query
name|query
parameter_list|)
throws|throws
name|IOException
block|{
while|while
condition|(
literal|true
condition|)
block|{
comment|// remove wrappers that don't matter for counts
comment|// this is necessary so that we don't only optimize match_all
comment|// queries but also match_all queries that are nested in
comment|// a constant_score query
if|if
condition|(
name|query
operator|instanceof
name|ConstantScoreQuery
condition|)
block|{
name|query
operator|=
operator|(
operator|(
name|ConstantScoreQuery
operator|)
name|query
operator|)
operator|.
name|getQuery
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|query
operator|instanceof
name|BoostQuery
condition|)
block|{
name|query
operator|=
operator|(
operator|(
name|BoostQuery
operator|)
name|query
operator|)
operator|.
name|getQuery
argument_list|()
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
if|if
condition|(
name|query
operator|.
name|getClass
argument_list|()
operator|==
name|MatchAllDocsQuery
operator|.
name|class
condition|)
block|{
return|return
name|reader
operator|.
name|numDocs
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|query
operator|.
name|getClass
argument_list|()
operator|==
name|TermQuery
operator|.
name|class
operator|&&
name|reader
operator|.
name|hasDeletions
argument_list|()
operator|==
literal|false
condition|)
block|{
specifier|final
name|Term
name|term
init|=
operator|(
operator|(
name|TermQuery
operator|)
name|query
operator|)
operator|.
name|getTerm
argument_list|()
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|LeafReaderContext
name|context
range|:
name|reader
operator|.
name|leaves
argument_list|()
control|)
block|{
name|count
operator|+=
name|context
operator|.
name|reader
argument_list|()
operator|.
name|docFreq
argument_list|(
name|term
argument_list|)
expr_stmt|;
block|}
return|return
name|count
return|;
block|}
else|else
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
comment|/**      * Creates a {@link TopDocsCollectorContext} from the provided<code>searchContext</code>      */
DECL|method|createTopDocsCollectorContext
specifier|static
name|TopDocsCollectorContext
name|createTopDocsCollectorContext
parameter_list|(
name|SearchContext
name|searchContext
parameter_list|,
name|IndexReader
name|reader
parameter_list|,
name|boolean
name|shouldCollect
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Query
name|query
init|=
name|searchContext
operator|.
name|query
argument_list|()
decl_stmt|;
comment|// top collectors don't like a size of 0
specifier|final
name|int
name|totalNumDocs
init|=
name|Math
operator|.
name|max
argument_list|(
literal|1
argument_list|,
name|reader
operator|.
name|numDocs
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|searchContext
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// no matter what the value of from is
return|return
operator|new
name|TotalHitCountCollectorContext
argument_list|(
name|reader
argument_list|,
name|query
argument_list|,
name|shouldCollect
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|searchContext
operator|.
name|scrollContext
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// no matter what the value of from is
name|int
name|numDocs
init|=
name|Math
operator|.
name|min
argument_list|(
name|searchContext
operator|.
name|size
argument_list|()
argument_list|,
name|totalNumDocs
argument_list|)
decl_stmt|;
return|return
operator|new
name|ScrollingTopDocsCollectorContext
argument_list|(
name|searchContext
operator|.
name|scrollContext
argument_list|()
argument_list|,
name|searchContext
operator|.
name|sort
argument_list|()
argument_list|,
name|numDocs
argument_list|,
name|searchContext
operator|.
name|trackScores
argument_list|()
argument_list|,
name|searchContext
operator|.
name|numberOfShards
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|searchContext
operator|.
name|collapse
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|int
name|numDocs
init|=
name|Math
operator|.
name|min
argument_list|(
name|searchContext
operator|.
name|from
argument_list|()
operator|+
name|searchContext
operator|.
name|size
argument_list|()
argument_list|,
name|totalNumDocs
argument_list|)
decl_stmt|;
return|return
operator|new
name|CollapsingTopDocsCollectorContext
argument_list|(
name|searchContext
operator|.
name|collapse
argument_list|()
argument_list|,
name|searchContext
operator|.
name|sort
argument_list|()
argument_list|,
name|numDocs
argument_list|,
name|searchContext
operator|.
name|trackScores
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
name|int
name|numDocs
init|=
name|Math
operator|.
name|min
argument_list|(
name|searchContext
operator|.
name|from
argument_list|()
operator|+
name|searchContext
operator|.
name|size
argument_list|()
argument_list|,
name|totalNumDocs
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|rescore
init|=
name|searchContext
operator|.
name|rescore
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|==
literal|false
decl_stmt|;
for|for
control|(
name|RescoreSearchContext
name|rescoreContext
range|:
name|searchContext
operator|.
name|rescore
argument_list|()
control|)
block|{
name|numDocs
operator|=
name|Math
operator|.
name|max
argument_list|(
name|numDocs
argument_list|,
name|rescoreContext
operator|.
name|window
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|SimpleTopDocsCollectorContext
argument_list|(
name|searchContext
operator|.
name|sort
argument_list|()
argument_list|,
name|searchContext
operator|.
name|searchAfter
argument_list|()
argument_list|,
name|numDocs
argument_list|,
name|searchContext
operator|.
name|trackScores
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
name|boolean
name|shouldRescore
parameter_list|()
block|{
return|return
name|rescore
return|;
block|}
block|}
return|;
block|}
block|}
block|}
end_class

end_unit

